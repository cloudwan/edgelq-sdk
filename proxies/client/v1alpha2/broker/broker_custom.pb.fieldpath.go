// Code generated by protoc-gen-goten-object
// File: edgelq/proxies/proto/v1alpha2/broker_custom.proto
// DO NOT EDIT!!!

package broker_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	project "github.com/cloudwan/edgelq-sdk/proxies/resources/v1alpha2/project"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &project.Project{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ConnectRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ConnectRequest_FieldPathSelector
	Get(source *ConnectRequest) []interface{}
	GetSingle(source *ConnectRequest) (interface{}, bool)
	ClearValue(item *ConnectRequest)

	// Those methods build corresponding ConnectRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ConnectRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ConnectRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ConnectRequest_FieldPathArrayItemValue
}

type ConnectRequest_FieldPathSelector int32

const (
	ConnectRequest_FieldPathSelectorOpenRequest   ConnectRequest_FieldPathSelector = 0
	ConnectRequest_FieldPathSelectorResumeRequest ConnectRequest_FieldPathSelector = 1
	ConnectRequest_FieldPathSelectorAck           ConnectRequest_FieldPathSelector = 2
	ConnectRequest_FieldPathSelectorData          ConnectRequest_FieldPathSelector = 3
	ConnectRequest_FieldPathSelectorClose         ConnectRequest_FieldPathSelector = 4
	ConnectRequest_FieldPathSelectorError         ConnectRequest_FieldPathSelector = 5
	ConnectRequest_FieldPathSelectorPing          ConnectRequest_FieldPathSelector = 6
)

func (s ConnectRequest_FieldPathSelector) String() string {
	switch s {
	case ConnectRequest_FieldPathSelectorOpenRequest:
		return "open_request"
	case ConnectRequest_FieldPathSelectorResumeRequest:
		return "resume_request"
	case ConnectRequest_FieldPathSelectorAck:
		return "ack"
	case ConnectRequest_FieldPathSelectorData:
		return "data"
	case ConnectRequest_FieldPathSelectorClose:
		return "close"
	case ConnectRequest_FieldPathSelectorError:
		return "error"
	case ConnectRequest_FieldPathSelectorPing:
		return "ping"
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectRequest: %d", s))
	}
}

func BuildConnectRequest_FieldPath(fp gotenobject.RawFieldPath) (ConnectRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ConnectRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "open_request", "openRequest", "open-request":
			return &ConnectRequest_FieldTerminalPath{selector: ConnectRequest_FieldPathSelectorOpenRequest}, nil
		case "resume_request", "resumeRequest", "resume-request":
			return &ConnectRequest_FieldTerminalPath{selector: ConnectRequest_FieldPathSelectorResumeRequest}, nil
		case "ack":
			return &ConnectRequest_FieldTerminalPath{selector: ConnectRequest_FieldPathSelectorAck}, nil
		case "data":
			return &ConnectRequest_FieldTerminalPath{selector: ConnectRequest_FieldPathSelectorData}, nil
		case "close":
			return &ConnectRequest_FieldTerminalPath{selector: ConnectRequest_FieldPathSelectorClose}, nil
		case "error":
			return &ConnectRequest_FieldTerminalPath{selector: ConnectRequest_FieldPathSelectorError}, nil
		case "ping":
			return &ConnectRequest_FieldTerminalPath{selector: ConnectRequest_FieldPathSelectorPing}, nil
		}
	} else {
		switch fp[0] {
		case "open_request", "openRequest", "open-request":
			if subpath, err := BuildConnectRequestOpenRequest_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ConnectRequest_FieldSubPath{selector: ConnectRequest_FieldPathSelectorOpenRequest, subPath: subpath}, nil
			}
		case "resume_request", "resumeRequest", "resume-request":
			if subpath, err := BuildConnectRequestResumeRequest_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ConnectRequest_FieldSubPath{selector: ConnectRequest_FieldPathSelectorResumeRequest, subPath: subpath}, nil
			}
		case "ack":
			if subpath, err := BuildAck_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ConnectRequest_FieldSubPath{selector: ConnectRequest_FieldPathSelectorAck, subPath: subpath}, nil
			}
		case "data":
			if subpath, err := BuildData_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ConnectRequest_FieldSubPath{selector: ConnectRequest_FieldPathSelectorData, subPath: subpath}, nil
			}
		case "close":
			if subpath, err := BuildClose_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ConnectRequest_FieldSubPath{selector: ConnectRequest_FieldPathSelectorClose, subPath: subpath}, nil
			}
		case "error":
			if subpath, err := BuildError_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ConnectRequest_FieldSubPath{selector: ConnectRequest_FieldPathSelectorError, subPath: subpath}, nil
			}
		case "ping":
			if subpath, err := BuildPing_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ConnectRequest_FieldSubPath{selector: ConnectRequest_FieldPathSelectorPing, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ConnectRequest", fp)
}

func ParseConnectRequest_FieldPath(rawField string) (ConnectRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildConnectRequest_FieldPath(fp)
}

func MustParseConnectRequest_FieldPath(rawField string) ConnectRequest_FieldPath {
	fp, err := ParseConnectRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ConnectRequest_FieldTerminalPath struct {
	selector ConnectRequest_FieldPathSelector
}

var _ ConnectRequest_FieldPath = (*ConnectRequest_FieldTerminalPath)(nil)

func (fp *ConnectRequest_FieldTerminalPath) Selector() ConnectRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ConnectRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ConnectRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ConnectRequest
func (fp *ConnectRequest_FieldTerminalPath) Get(source *ConnectRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ConnectRequest_FieldPathSelectorOpenRequest:
			if source, ok := source.Message.(*ConnectRequest_OpenRequest_); ok && source != nil {
				if source.OpenRequest != nil {
					values = append(values, source.OpenRequest)
				}
			}
		case ConnectRequest_FieldPathSelectorResumeRequest:
			if source, ok := source.Message.(*ConnectRequest_ResumeRequest_); ok && source != nil {
				if source.ResumeRequest != nil {
					values = append(values, source.ResumeRequest)
				}
			}
		case ConnectRequest_FieldPathSelectorAck:
			if source, ok := source.Message.(*ConnectRequest_Ack); ok && source != nil {
				if source.Ack != nil {
					values = append(values, source.Ack)
				}
			}
		case ConnectRequest_FieldPathSelectorData:
			if source, ok := source.Message.(*ConnectRequest_Data); ok && source != nil {
				if source.Data != nil {
					values = append(values, source.Data)
				}
			}
		case ConnectRequest_FieldPathSelectorClose:
			if source, ok := source.Message.(*ConnectRequest_Close); ok && source != nil {
				if source.Close != nil {
					values = append(values, source.Close)
				}
			}
		case ConnectRequest_FieldPathSelectorError:
			if source, ok := source.Message.(*ConnectRequest_Error); ok && source != nil {
				if source.Error != nil {
					values = append(values, source.Error)
				}
			}
		case ConnectRequest_FieldPathSelectorPing:
			if source, ok := source.Message.(*ConnectRequest_Ping); ok && source != nil {
				if source.Ping != nil {
					values = append(values, source.Ping)
				}
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ConnectRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ConnectRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ConnectRequest))
}

// GetSingle returns value pointed by specific field of from source ConnectRequest
func (fp *ConnectRequest_FieldTerminalPath) GetSingle(source *ConnectRequest) (interface{}, bool) {
	switch fp.selector {
	case ConnectRequest_FieldPathSelectorOpenRequest:
		res := source.GetOpenRequest()
		return res, res != nil
	case ConnectRequest_FieldPathSelectorResumeRequest:
		res := source.GetResumeRequest()
		return res, res != nil
	case ConnectRequest_FieldPathSelectorAck:
		res := source.GetAck()
		return res, res != nil
	case ConnectRequest_FieldPathSelectorData:
		res := source.GetData()
		return res, res != nil
	case ConnectRequest_FieldPathSelectorClose:
		res := source.GetClose()
		return res, res != nil
	case ConnectRequest_FieldPathSelectorError:
		res := source.GetError()
		return res, res != nil
	case ConnectRequest_FieldPathSelectorPing:
		res := source.GetPing()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectRequest: %d", fp.selector))
	}
}

func (fp *ConnectRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ConnectRequest))
}

// GetDefault returns a default value of the field type
func (fp *ConnectRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ConnectRequest_FieldPathSelectorOpenRequest:
		return (*ConnectRequest_OpenRequest)(nil)
	case ConnectRequest_FieldPathSelectorResumeRequest:
		return (*ConnectRequest_ResumeRequest)(nil)
	case ConnectRequest_FieldPathSelectorAck:
		return (*Ack)(nil)
	case ConnectRequest_FieldPathSelectorData:
		return (*Data)(nil)
	case ConnectRequest_FieldPathSelectorClose:
		return (*Close)(nil)
	case ConnectRequest_FieldPathSelectorError:
		return (*Error)(nil)
	case ConnectRequest_FieldPathSelectorPing:
		return (*Ping)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectRequest: %d", fp.selector))
	}
}

func (fp *ConnectRequest_FieldTerminalPath) ClearValue(item *ConnectRequest) {
	if item != nil {
		switch fp.selector {
		case ConnectRequest_FieldPathSelectorOpenRequest:
			if item, ok := item.Message.(*ConnectRequest_OpenRequest_); ok {
				item.OpenRequest = nil
			}
		case ConnectRequest_FieldPathSelectorResumeRequest:
			if item, ok := item.Message.(*ConnectRequest_ResumeRequest_); ok {
				item.ResumeRequest = nil
			}
		case ConnectRequest_FieldPathSelectorAck:
			if item, ok := item.Message.(*ConnectRequest_Ack); ok {
				item.Ack = nil
			}
		case ConnectRequest_FieldPathSelectorData:
			if item, ok := item.Message.(*ConnectRequest_Data); ok {
				item.Data = nil
			}
		case ConnectRequest_FieldPathSelectorClose:
			if item, ok := item.Message.(*ConnectRequest_Close); ok {
				item.Close = nil
			}
		case ConnectRequest_FieldPathSelectorError:
			if item, ok := item.Message.(*ConnectRequest_Error); ok {
				item.Error = nil
			}
		case ConnectRequest_FieldPathSelectorPing:
			if item, ok := item.Message.(*ConnectRequest_Ping); ok {
				item.Ping = nil
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ConnectRequest: %d", fp.selector))
		}
	}
}

func (fp *ConnectRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ConnectRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ConnectRequest_FieldTerminalPath) IsLeaf() bool {
	return false
}

func (fp *ConnectRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ConnectRequest_FieldTerminalPath) WithIValue(value interface{}) ConnectRequest_FieldPathValue {
	switch fp.selector {
	case ConnectRequest_FieldPathSelectorOpenRequest:
		return &ConnectRequest_FieldTerminalPathValue{ConnectRequest_FieldTerminalPath: *fp, value: value.(*ConnectRequest_OpenRequest)}
	case ConnectRequest_FieldPathSelectorResumeRequest:
		return &ConnectRequest_FieldTerminalPathValue{ConnectRequest_FieldTerminalPath: *fp, value: value.(*ConnectRequest_ResumeRequest)}
	case ConnectRequest_FieldPathSelectorAck:
		return &ConnectRequest_FieldTerminalPathValue{ConnectRequest_FieldTerminalPath: *fp, value: value.(*Ack)}
	case ConnectRequest_FieldPathSelectorData:
		return &ConnectRequest_FieldTerminalPathValue{ConnectRequest_FieldTerminalPath: *fp, value: value.(*Data)}
	case ConnectRequest_FieldPathSelectorClose:
		return &ConnectRequest_FieldTerminalPathValue{ConnectRequest_FieldTerminalPath: *fp, value: value.(*Close)}
	case ConnectRequest_FieldPathSelectorError:
		return &ConnectRequest_FieldTerminalPathValue{ConnectRequest_FieldTerminalPath: *fp, value: value.(*Error)}
	case ConnectRequest_FieldPathSelectorPing:
		return &ConnectRequest_FieldTerminalPathValue{ConnectRequest_FieldTerminalPath: *fp, value: value.(*Ping)}
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectRequest: %d", fp.selector))
	}
}

func (fp *ConnectRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ConnectRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ConnectRequest_FieldPathArrayOfValues {
	fpaov := &ConnectRequest_FieldTerminalPathArrayOfValues{ConnectRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case ConnectRequest_FieldPathSelectorOpenRequest:
		return &ConnectRequest_FieldTerminalPathArrayOfValues{ConnectRequest_FieldTerminalPath: *fp, values: values.([]*ConnectRequest_OpenRequest)}
	case ConnectRequest_FieldPathSelectorResumeRequest:
		return &ConnectRequest_FieldTerminalPathArrayOfValues{ConnectRequest_FieldTerminalPath: *fp, values: values.([]*ConnectRequest_ResumeRequest)}
	case ConnectRequest_FieldPathSelectorAck:
		return &ConnectRequest_FieldTerminalPathArrayOfValues{ConnectRequest_FieldTerminalPath: *fp, values: values.([]*Ack)}
	case ConnectRequest_FieldPathSelectorData:
		return &ConnectRequest_FieldTerminalPathArrayOfValues{ConnectRequest_FieldTerminalPath: *fp, values: values.([]*Data)}
	case ConnectRequest_FieldPathSelectorClose:
		return &ConnectRequest_FieldTerminalPathArrayOfValues{ConnectRequest_FieldTerminalPath: *fp, values: values.([]*Close)}
	case ConnectRequest_FieldPathSelectorError:
		return &ConnectRequest_FieldTerminalPathArrayOfValues{ConnectRequest_FieldTerminalPath: *fp, values: values.([]*Error)}
	case ConnectRequest_FieldPathSelectorPing:
		return &ConnectRequest_FieldTerminalPathArrayOfValues{ConnectRequest_FieldTerminalPath: *fp, values: values.([]*Ping)}
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ConnectRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ConnectRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ConnectRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectRequest: %d", fp.selector))
	}
}

func (fp *ConnectRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ConnectRequest_FieldSubPath struct {
	selector ConnectRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ConnectRequest_FieldPath = (*ConnectRequest_FieldSubPath)(nil)

func (fps *ConnectRequest_FieldSubPath) Selector() ConnectRequest_FieldPathSelector {
	return fps.selector
}
func (fps *ConnectRequest_FieldSubPath) AsOpenRequestSubPath() (ConnectRequestOpenRequest_FieldPath, bool) {
	res, ok := fps.subPath.(ConnectRequestOpenRequest_FieldPath)
	return res, ok
}
func (fps *ConnectRequest_FieldSubPath) AsResumeRequestSubPath() (ConnectRequestResumeRequest_FieldPath, bool) {
	res, ok := fps.subPath.(ConnectRequestResumeRequest_FieldPath)
	return res, ok
}
func (fps *ConnectRequest_FieldSubPath) AsAckSubPath() (Ack_FieldPath, bool) {
	res, ok := fps.subPath.(Ack_FieldPath)
	return res, ok
}
func (fps *ConnectRequest_FieldSubPath) AsDataSubPath() (Data_FieldPath, bool) {
	res, ok := fps.subPath.(Data_FieldPath)
	return res, ok
}
func (fps *ConnectRequest_FieldSubPath) AsCloseSubPath() (Close_FieldPath, bool) {
	res, ok := fps.subPath.(Close_FieldPath)
	return res, ok
}
func (fps *ConnectRequest_FieldSubPath) AsErrorSubPath() (Error_FieldPath, bool) {
	res, ok := fps.subPath.(Error_FieldPath)
	return res, ok
}
func (fps *ConnectRequest_FieldSubPath) AsPingSubPath() (Ping_FieldPath, bool) {
	res, ok := fps.subPath.(Ping_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ConnectRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ConnectRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ConnectRequest
func (fps *ConnectRequest_FieldSubPath) Get(source *ConnectRequest) (values []interface{}) {
	switch fps.selector {
	case ConnectRequest_FieldPathSelectorOpenRequest:
		values = append(values, fps.subPath.GetRaw(source.GetOpenRequest())...)
	case ConnectRequest_FieldPathSelectorResumeRequest:
		values = append(values, fps.subPath.GetRaw(source.GetResumeRequest())...)
	case ConnectRequest_FieldPathSelectorAck:
		values = append(values, fps.subPath.GetRaw(source.GetAck())...)
	case ConnectRequest_FieldPathSelectorData:
		values = append(values, fps.subPath.GetRaw(source.GetData())...)
	case ConnectRequest_FieldPathSelectorClose:
		values = append(values, fps.subPath.GetRaw(source.GetClose())...)
	case ConnectRequest_FieldPathSelectorError:
		values = append(values, fps.subPath.GetRaw(source.GetError())...)
	case ConnectRequest_FieldPathSelectorPing:
		values = append(values, fps.subPath.GetRaw(source.GetPing())...)
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectRequest: %d", fps.selector))
	}
	return
}

func (fps *ConnectRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ConnectRequest))
}

// GetSingle returns value of selected field from source ConnectRequest
func (fps *ConnectRequest_FieldSubPath) GetSingle(source *ConnectRequest) (interface{}, bool) {
	switch fps.selector {
	case ConnectRequest_FieldPathSelectorOpenRequest:
		if source.GetOpenRequest() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetOpenRequest())
	case ConnectRequest_FieldPathSelectorResumeRequest:
		if source.GetResumeRequest() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetResumeRequest())
	case ConnectRequest_FieldPathSelectorAck:
		if source.GetAck() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetAck())
	case ConnectRequest_FieldPathSelectorData:
		if source.GetData() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetData())
	case ConnectRequest_FieldPathSelectorClose:
		if source.GetClose() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetClose())
	case ConnectRequest_FieldPathSelectorError:
		if source.GetError() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetError())
	case ConnectRequest_FieldPathSelectorPing:
		if source.GetPing() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPing())
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectRequest: %d", fps.selector))
	}
}

func (fps *ConnectRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ConnectRequest))
}

// GetDefault returns a default value of the field type
func (fps *ConnectRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ConnectRequest_FieldSubPath) ClearValue(item *ConnectRequest) {
	if item != nil {
		switch fps.selector {
		case ConnectRequest_FieldPathSelectorOpenRequest:
			if item.Message != nil {
				if item, ok := item.Message.(*ConnectRequest_OpenRequest_); ok {
					fps.subPath.ClearValueRaw(item.OpenRequest)
				}
			}
		case ConnectRequest_FieldPathSelectorResumeRequest:
			if item.Message != nil {
				if item, ok := item.Message.(*ConnectRequest_ResumeRequest_); ok {
					fps.subPath.ClearValueRaw(item.ResumeRequest)
				}
			}
		case ConnectRequest_FieldPathSelectorAck:
			if item.Message != nil {
				if item, ok := item.Message.(*ConnectRequest_Ack); ok {
					fps.subPath.ClearValueRaw(item.Ack)
				}
			}
		case ConnectRequest_FieldPathSelectorData:
			if item.Message != nil {
				if item, ok := item.Message.(*ConnectRequest_Data); ok {
					fps.subPath.ClearValueRaw(item.Data)
				}
			}
		case ConnectRequest_FieldPathSelectorClose:
			if item.Message != nil {
				if item, ok := item.Message.(*ConnectRequest_Close); ok {
					fps.subPath.ClearValueRaw(item.Close)
				}
			}
		case ConnectRequest_FieldPathSelectorError:
			if item.Message != nil {
				if item, ok := item.Message.(*ConnectRequest_Error); ok {
					fps.subPath.ClearValueRaw(item.Error)
				}
			}
		case ConnectRequest_FieldPathSelectorPing:
			if item.Message != nil {
				if item, ok := item.Message.(*ConnectRequest_Ping); ok {
					fps.subPath.ClearValueRaw(item.Ping)
				}
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ConnectRequest: %d", fps.selector))
		}
	}
}

func (fps *ConnectRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ConnectRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *ConnectRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ConnectRequest_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&ConnectRequest_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *ConnectRequest_FieldSubPath) WithIValue(value interface{}) ConnectRequest_FieldPathValue {
	return &ConnectRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ConnectRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ConnectRequest_FieldSubPath) WithIArrayOfValues(values interface{}) ConnectRequest_FieldPathArrayOfValues {
	return &ConnectRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ConnectRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ConnectRequest_FieldSubPath) WithIArrayItemValue(value interface{}) ConnectRequest_FieldPathArrayItemValue {
	return &ConnectRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ConnectRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ConnectRequest_FieldPathValue allows storing values for ConnectRequest fields according to their type
type ConnectRequest_FieldPathValue interface {
	ConnectRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ConnectRequest)
	CompareWith(*ConnectRequest) (cmp int, comparable bool)
}

func ParseConnectRequest_FieldPathValue(pathStr, valueStr string) (ConnectRequest_FieldPathValue, error) {
	fp, err := ParseConnectRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ConnectRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ConnectRequest_FieldPathValue), nil
}

func MustParseConnectRequest_FieldPathValue(pathStr, valueStr string) ConnectRequest_FieldPathValue {
	fpv, err := ParseConnectRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ConnectRequest_FieldTerminalPathValue struct {
	ConnectRequest_FieldTerminalPath
	value interface{}
}

var _ ConnectRequest_FieldPathValue = (*ConnectRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ConnectRequest' as interface{}
func (fpv *ConnectRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ConnectRequest_FieldTerminalPathValue) AsOpenRequestValue() (*ConnectRequest_OpenRequest, bool) {
	res, ok := fpv.value.(*ConnectRequest_OpenRequest)
	return res, ok
}
func (fpv *ConnectRequest_FieldTerminalPathValue) AsResumeRequestValue() (*ConnectRequest_ResumeRequest, bool) {
	res, ok := fpv.value.(*ConnectRequest_ResumeRequest)
	return res, ok
}
func (fpv *ConnectRequest_FieldTerminalPathValue) AsAckValue() (*Ack, bool) {
	res, ok := fpv.value.(*Ack)
	return res, ok
}
func (fpv *ConnectRequest_FieldTerminalPathValue) AsDataValue() (*Data, bool) {
	res, ok := fpv.value.(*Data)
	return res, ok
}
func (fpv *ConnectRequest_FieldTerminalPathValue) AsCloseValue() (*Close, bool) {
	res, ok := fpv.value.(*Close)
	return res, ok
}
func (fpv *ConnectRequest_FieldTerminalPathValue) AsErrorValue() (*Error, bool) {
	res, ok := fpv.value.(*Error)
	return res, ok
}
func (fpv *ConnectRequest_FieldTerminalPathValue) AsPingValue() (*Ping, bool) {
	res, ok := fpv.value.(*Ping)
	return res, ok
}

// SetTo stores value for selected field for object ConnectRequest
func (fpv *ConnectRequest_FieldTerminalPathValue) SetTo(target **ConnectRequest) {
	if *target == nil {
		*target = new(ConnectRequest)
	}
	switch fpv.selector {
	case ConnectRequest_FieldPathSelectorOpenRequest:
		if _, ok := (*target).Message.(*ConnectRequest_OpenRequest_); !ok {
			(*target).Message = &ConnectRequest_OpenRequest_{}
		}
		(*target).Message.(*ConnectRequest_OpenRequest_).OpenRequest = fpv.value.(*ConnectRequest_OpenRequest)
	case ConnectRequest_FieldPathSelectorResumeRequest:
		if _, ok := (*target).Message.(*ConnectRequest_ResumeRequest_); !ok {
			(*target).Message = &ConnectRequest_ResumeRequest_{}
		}
		(*target).Message.(*ConnectRequest_ResumeRequest_).ResumeRequest = fpv.value.(*ConnectRequest_ResumeRequest)
	case ConnectRequest_FieldPathSelectorAck:
		if _, ok := (*target).Message.(*ConnectRequest_Ack); !ok {
			(*target).Message = &ConnectRequest_Ack{}
		}
		(*target).Message.(*ConnectRequest_Ack).Ack = fpv.value.(*Ack)
	case ConnectRequest_FieldPathSelectorData:
		if _, ok := (*target).Message.(*ConnectRequest_Data); !ok {
			(*target).Message = &ConnectRequest_Data{}
		}
		(*target).Message.(*ConnectRequest_Data).Data = fpv.value.(*Data)
	case ConnectRequest_FieldPathSelectorClose:
		if _, ok := (*target).Message.(*ConnectRequest_Close); !ok {
			(*target).Message = &ConnectRequest_Close{}
		}
		(*target).Message.(*ConnectRequest_Close).Close = fpv.value.(*Close)
	case ConnectRequest_FieldPathSelectorError:
		if _, ok := (*target).Message.(*ConnectRequest_Error); !ok {
			(*target).Message = &ConnectRequest_Error{}
		}
		(*target).Message.(*ConnectRequest_Error).Error = fpv.value.(*Error)
	case ConnectRequest_FieldPathSelectorPing:
		if _, ok := (*target).Message.(*ConnectRequest_Ping); !ok {
			(*target).Message = &ConnectRequest_Ping{}
		}
		(*target).Message.(*ConnectRequest_Ping).Ping = fpv.value.(*Ping)
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectRequest: %d", fpv.selector))
	}
}

func (fpv *ConnectRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ConnectRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ConnectRequest_FieldTerminalPathValue' with the value under path in 'ConnectRequest'.
func (fpv *ConnectRequest_FieldTerminalPathValue) CompareWith(source *ConnectRequest) (int, bool) {
	switch fpv.selector {
	case ConnectRequest_FieldPathSelectorOpenRequest:
		return 0, false
	case ConnectRequest_FieldPathSelectorResumeRequest:
		return 0, false
	case ConnectRequest_FieldPathSelectorAck:
		return 0, false
	case ConnectRequest_FieldPathSelectorData:
		return 0, false
	case ConnectRequest_FieldPathSelectorClose:
		return 0, false
	case ConnectRequest_FieldPathSelectorError:
		return 0, false
	case ConnectRequest_FieldPathSelectorPing:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectRequest: %d", fpv.selector))
	}
}

func (fpv *ConnectRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ConnectRequest))
}

type ConnectRequest_FieldSubPathValue struct {
	ConnectRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ConnectRequest_FieldPathValue = (*ConnectRequest_FieldSubPathValue)(nil)

func (fpvs *ConnectRequest_FieldSubPathValue) AsOpenRequestPathValue() (ConnectRequestOpenRequest_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ConnectRequestOpenRequest_FieldPathValue)
	return res, ok
}
func (fpvs *ConnectRequest_FieldSubPathValue) AsResumeRequestPathValue() (ConnectRequestResumeRequest_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ConnectRequestResumeRequest_FieldPathValue)
	return res, ok
}
func (fpvs *ConnectRequest_FieldSubPathValue) AsAckPathValue() (Ack_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(Ack_FieldPathValue)
	return res, ok
}
func (fpvs *ConnectRequest_FieldSubPathValue) AsDataPathValue() (Data_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(Data_FieldPathValue)
	return res, ok
}
func (fpvs *ConnectRequest_FieldSubPathValue) AsClosePathValue() (Close_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(Close_FieldPathValue)
	return res, ok
}
func (fpvs *ConnectRequest_FieldSubPathValue) AsErrorPathValue() (Error_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(Error_FieldPathValue)
	return res, ok
}
func (fpvs *ConnectRequest_FieldSubPathValue) AsPingPathValue() (Ping_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(Ping_FieldPathValue)
	return res, ok
}

func (fpvs *ConnectRequest_FieldSubPathValue) SetTo(target **ConnectRequest) {
	if *target == nil {
		*target = new(ConnectRequest)
	}
	switch fpvs.Selector() {
	case ConnectRequest_FieldPathSelectorOpenRequest:
		if _, ok := (*target).Message.(*ConnectRequest_OpenRequest_); !ok {
			(*target).Message = &ConnectRequest_OpenRequest_{}
		}
		fpvs.subPathValue.(ConnectRequestOpenRequest_FieldPathValue).SetTo(&(*target).Message.(*ConnectRequest_OpenRequest_).OpenRequest)
	case ConnectRequest_FieldPathSelectorResumeRequest:
		if _, ok := (*target).Message.(*ConnectRequest_ResumeRequest_); !ok {
			(*target).Message = &ConnectRequest_ResumeRequest_{}
		}
		fpvs.subPathValue.(ConnectRequestResumeRequest_FieldPathValue).SetTo(&(*target).Message.(*ConnectRequest_ResumeRequest_).ResumeRequest)
	case ConnectRequest_FieldPathSelectorAck:
		if _, ok := (*target).Message.(*ConnectRequest_Ack); !ok {
			(*target).Message = &ConnectRequest_Ack{}
		}
		fpvs.subPathValue.(Ack_FieldPathValue).SetTo(&(*target).Message.(*ConnectRequest_Ack).Ack)
	case ConnectRequest_FieldPathSelectorData:
		if _, ok := (*target).Message.(*ConnectRequest_Data); !ok {
			(*target).Message = &ConnectRequest_Data{}
		}
		fpvs.subPathValue.(Data_FieldPathValue).SetTo(&(*target).Message.(*ConnectRequest_Data).Data)
	case ConnectRequest_FieldPathSelectorClose:
		if _, ok := (*target).Message.(*ConnectRequest_Close); !ok {
			(*target).Message = &ConnectRequest_Close{}
		}
		fpvs.subPathValue.(Close_FieldPathValue).SetTo(&(*target).Message.(*ConnectRequest_Close).Close)
	case ConnectRequest_FieldPathSelectorError:
		if _, ok := (*target).Message.(*ConnectRequest_Error); !ok {
			(*target).Message = &ConnectRequest_Error{}
		}
		fpvs.subPathValue.(Error_FieldPathValue).SetTo(&(*target).Message.(*ConnectRequest_Error).Error)
	case ConnectRequest_FieldPathSelectorPing:
		if _, ok := (*target).Message.(*ConnectRequest_Ping); !ok {
			(*target).Message = &ConnectRequest_Ping{}
		}
		fpvs.subPathValue.(Ping_FieldPathValue).SetTo(&(*target).Message.(*ConnectRequest_Ping).Ping)
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *ConnectRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ConnectRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ConnectRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ConnectRequest_FieldSubPathValue) CompareWith(source *ConnectRequest) (int, bool) {
	switch fpvs.Selector() {
	case ConnectRequest_FieldPathSelectorOpenRequest:
		return fpvs.subPathValue.(ConnectRequestOpenRequest_FieldPathValue).CompareWith(source.GetOpenRequest())
	case ConnectRequest_FieldPathSelectorResumeRequest:
		return fpvs.subPathValue.(ConnectRequestResumeRequest_FieldPathValue).CompareWith(source.GetResumeRequest())
	case ConnectRequest_FieldPathSelectorAck:
		return fpvs.subPathValue.(Ack_FieldPathValue).CompareWith(source.GetAck())
	case ConnectRequest_FieldPathSelectorData:
		return fpvs.subPathValue.(Data_FieldPathValue).CompareWith(source.GetData())
	case ConnectRequest_FieldPathSelectorClose:
		return fpvs.subPathValue.(Close_FieldPathValue).CompareWith(source.GetClose())
	case ConnectRequest_FieldPathSelectorError:
		return fpvs.subPathValue.(Error_FieldPathValue).CompareWith(source.GetError())
	case ConnectRequest_FieldPathSelectorPing:
		return fpvs.subPathValue.(Ping_FieldPathValue).CompareWith(source.GetPing())
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *ConnectRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ConnectRequest))
}

// ConnectRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for ConnectRequest according to their type
// Present only for array (repeated) types.
type ConnectRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ConnectRequest_FieldPath
	ContainsValue(*ConnectRequest) bool
}

// ParseConnectRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseConnectRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ConnectRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseConnectRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ConnectRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ConnectRequest_FieldPathArrayItemValue), nil
}

func MustParseConnectRequest_FieldPathArrayItemValue(pathStr, valueStr string) ConnectRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseConnectRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ConnectRequest_FieldTerminalPathArrayItemValue struct {
	ConnectRequest_FieldTerminalPath
	value interface{}
}

var _ ConnectRequest_FieldPathArrayItemValue = (*ConnectRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ConnectRequest as interface{}
func (fpaiv *ConnectRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ConnectRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ConnectRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ConnectRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ConnectRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ConnectRequest'
func (fpaiv *ConnectRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ConnectRequest) bool {
	slice := fpaiv.ConnectRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ConnectRequest_FieldSubPathArrayItemValue struct {
	ConnectRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ConnectRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ConnectRequest_FieldSubPathArrayItemValue) AsOpenRequestPathItemValue() (ConnectRequestOpenRequest_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ConnectRequestOpenRequest_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *ConnectRequest_FieldSubPathArrayItemValue) AsResumeRequestPathItemValue() (ConnectRequestResumeRequest_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ConnectRequestResumeRequest_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *ConnectRequest_FieldSubPathArrayItemValue) AsAckPathItemValue() (Ack_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(Ack_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *ConnectRequest_FieldSubPathArrayItemValue) AsDataPathItemValue() (Data_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(Data_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *ConnectRequest_FieldSubPathArrayItemValue) AsClosePathItemValue() (Close_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(Close_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *ConnectRequest_FieldSubPathArrayItemValue) AsErrorPathItemValue() (Error_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(Error_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *ConnectRequest_FieldSubPathArrayItemValue) AsPingPathItemValue() (Ping_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(Ping_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ConnectRequest'
func (fpaivs *ConnectRequest_FieldSubPathArrayItemValue) ContainsValue(source *ConnectRequest) bool {
	switch fpaivs.Selector() {
	case ConnectRequest_FieldPathSelectorOpenRequest:
		return fpaivs.subPathItemValue.(ConnectRequestOpenRequest_FieldPathArrayItemValue).ContainsValue(source.GetOpenRequest())
	case ConnectRequest_FieldPathSelectorResumeRequest:
		return fpaivs.subPathItemValue.(ConnectRequestResumeRequest_FieldPathArrayItemValue).ContainsValue(source.GetResumeRequest())
	case ConnectRequest_FieldPathSelectorAck:
		return fpaivs.subPathItemValue.(Ack_FieldPathArrayItemValue).ContainsValue(source.GetAck())
	case ConnectRequest_FieldPathSelectorData:
		return fpaivs.subPathItemValue.(Data_FieldPathArrayItemValue).ContainsValue(source.GetData())
	case ConnectRequest_FieldPathSelectorClose:
		return fpaivs.subPathItemValue.(Close_FieldPathArrayItemValue).ContainsValue(source.GetClose())
	case ConnectRequest_FieldPathSelectorError:
		return fpaivs.subPathItemValue.(Error_FieldPathArrayItemValue).ContainsValue(source.GetError())
	case ConnectRequest_FieldPathSelectorPing:
		return fpaivs.subPathItemValue.(Ping_FieldPathArrayItemValue).ContainsValue(source.GetPing())
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectRequest: %d", fpaivs.Selector()))
	}
}

// ConnectRequest_FieldPathArrayOfValues allows storing slice of values for ConnectRequest fields according to their type
type ConnectRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ConnectRequest_FieldPath
}

func ParseConnectRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ConnectRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseConnectRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ConnectRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ConnectRequest_FieldPathArrayOfValues), nil
}

func MustParseConnectRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ConnectRequest_FieldPathArrayOfValues {
	fpaov, err := ParseConnectRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ConnectRequest_FieldTerminalPathArrayOfValues struct {
	ConnectRequest_FieldTerminalPath
	values interface{}
}

var _ ConnectRequest_FieldPathArrayOfValues = (*ConnectRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ConnectRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ConnectRequest_FieldPathSelectorOpenRequest:
		for _, v := range fpaov.values.([]*ConnectRequest_OpenRequest) {
			values = append(values, v)
		}
	case ConnectRequest_FieldPathSelectorResumeRequest:
		for _, v := range fpaov.values.([]*ConnectRequest_ResumeRequest) {
			values = append(values, v)
		}
	case ConnectRequest_FieldPathSelectorAck:
		for _, v := range fpaov.values.([]*Ack) {
			values = append(values, v)
		}
	case ConnectRequest_FieldPathSelectorData:
		for _, v := range fpaov.values.([]*Data) {
			values = append(values, v)
		}
	case ConnectRequest_FieldPathSelectorClose:
		for _, v := range fpaov.values.([]*Close) {
			values = append(values, v)
		}
	case ConnectRequest_FieldPathSelectorError:
		for _, v := range fpaov.values.([]*Error) {
			values = append(values, v)
		}
	case ConnectRequest_FieldPathSelectorPing:
		for _, v := range fpaov.values.([]*Ping) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ConnectRequest_FieldTerminalPathArrayOfValues) AsOpenRequestArrayOfValues() ([]*ConnectRequest_OpenRequest, bool) {
	res, ok := fpaov.values.([]*ConnectRequest_OpenRequest)
	return res, ok
}
func (fpaov *ConnectRequest_FieldTerminalPathArrayOfValues) AsResumeRequestArrayOfValues() ([]*ConnectRequest_ResumeRequest, bool) {
	res, ok := fpaov.values.([]*ConnectRequest_ResumeRequest)
	return res, ok
}
func (fpaov *ConnectRequest_FieldTerminalPathArrayOfValues) AsAckArrayOfValues() ([]*Ack, bool) {
	res, ok := fpaov.values.([]*Ack)
	return res, ok
}
func (fpaov *ConnectRequest_FieldTerminalPathArrayOfValues) AsDataArrayOfValues() ([]*Data, bool) {
	res, ok := fpaov.values.([]*Data)
	return res, ok
}
func (fpaov *ConnectRequest_FieldTerminalPathArrayOfValues) AsCloseArrayOfValues() ([]*Close, bool) {
	res, ok := fpaov.values.([]*Close)
	return res, ok
}
func (fpaov *ConnectRequest_FieldTerminalPathArrayOfValues) AsErrorArrayOfValues() ([]*Error, bool) {
	res, ok := fpaov.values.([]*Error)
	return res, ok
}
func (fpaov *ConnectRequest_FieldTerminalPathArrayOfValues) AsPingArrayOfValues() ([]*Ping, bool) {
	res, ok := fpaov.values.([]*Ping)
	return res, ok
}

type ConnectRequest_FieldSubPathArrayOfValues struct {
	ConnectRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ConnectRequest_FieldPathArrayOfValues = (*ConnectRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ConnectRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ConnectRequest_FieldSubPathArrayOfValues) AsOpenRequestPathArrayOfValues() (ConnectRequestOpenRequest_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ConnectRequestOpenRequest_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *ConnectRequest_FieldSubPathArrayOfValues) AsResumeRequestPathArrayOfValues() (ConnectRequestResumeRequest_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ConnectRequestResumeRequest_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *ConnectRequest_FieldSubPathArrayOfValues) AsAckPathArrayOfValues() (Ack_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(Ack_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *ConnectRequest_FieldSubPathArrayOfValues) AsDataPathArrayOfValues() (Data_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(Data_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *ConnectRequest_FieldSubPathArrayOfValues) AsClosePathArrayOfValues() (Close_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(Close_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *ConnectRequest_FieldSubPathArrayOfValues) AsErrorPathArrayOfValues() (Error_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(Error_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *ConnectRequest_FieldSubPathArrayOfValues) AsPingPathArrayOfValues() (Ping_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(Ping_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ConnectRequestOpenRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ConnectRequestOpenRequest_FieldPathSelector
	Get(source *ConnectRequest_OpenRequest) []interface{}
	GetSingle(source *ConnectRequest_OpenRequest) (interface{}, bool)
	ClearValue(item *ConnectRequest_OpenRequest)

	// Those methods build corresponding ConnectRequestOpenRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ConnectRequestOpenRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ConnectRequestOpenRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ConnectRequestOpenRequest_FieldPathArrayItemValue
}

type ConnectRequestOpenRequest_FieldPathSelector int32

const (
	ConnectRequestOpenRequest_FieldPathSelectorProject      ConnectRequestOpenRequest_FieldPathSelector = 0
	ConnectRequestOpenRequest_FieldPathSelectorRegionId     ConnectRequestOpenRequest_FieldPathSelector = 1
	ConnectRequestOpenRequest_FieldPathSelectorName         ConnectRequestOpenRequest_FieldPathSelector = 2
	ConnectRequestOpenRequest_FieldPathSelectorProviderName ConnectRequestOpenRequest_FieldPathSelector = 3
	ConnectRequestOpenRequest_FieldPathSelectorService      ConnectRequestOpenRequest_FieldPathSelector = 4
	ConnectRequestOpenRequest_FieldPathSelectorArg          ConnectRequestOpenRequest_FieldPathSelector = 5
)

func (s ConnectRequestOpenRequest_FieldPathSelector) String() string {
	switch s {
	case ConnectRequestOpenRequest_FieldPathSelectorProject:
		return "project"
	case ConnectRequestOpenRequest_FieldPathSelectorRegionId:
		return "region_id"
	case ConnectRequestOpenRequest_FieldPathSelectorName:
		return "name"
	case ConnectRequestOpenRequest_FieldPathSelectorProviderName:
		return "provider_name"
	case ConnectRequestOpenRequest_FieldPathSelectorService:
		return "service"
	case ConnectRequestOpenRequest_FieldPathSelectorArg:
		return "arg"
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectRequest_OpenRequest: %d", s))
	}
}

func BuildConnectRequestOpenRequest_FieldPath(fp gotenobject.RawFieldPath) (ConnectRequestOpenRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ConnectRequest_OpenRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "project":
			return &ConnectRequestOpenRequest_FieldTerminalPath{selector: ConnectRequestOpenRequest_FieldPathSelectorProject}, nil
		case "region_id", "regionId", "region-id":
			return &ConnectRequestOpenRequest_FieldTerminalPath{selector: ConnectRequestOpenRequest_FieldPathSelectorRegionId}, nil
		case "name":
			return &ConnectRequestOpenRequest_FieldTerminalPath{selector: ConnectRequestOpenRequest_FieldPathSelectorName}, nil
		case "provider_name", "providerName", "provider-name":
			return &ConnectRequestOpenRequest_FieldTerminalPath{selector: ConnectRequestOpenRequest_FieldPathSelectorProviderName}, nil
		case "service":
			return &ConnectRequestOpenRequest_FieldTerminalPath{selector: ConnectRequestOpenRequest_FieldPathSelectorService}, nil
		case "arg":
			return &ConnectRequestOpenRequest_FieldTerminalPath{selector: ConnectRequestOpenRequest_FieldPathSelectorArg}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ConnectRequest_OpenRequest", fp)
}

func ParseConnectRequestOpenRequest_FieldPath(rawField string) (ConnectRequestOpenRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildConnectRequestOpenRequest_FieldPath(fp)
}

func MustParseConnectRequestOpenRequest_FieldPath(rawField string) ConnectRequestOpenRequest_FieldPath {
	fp, err := ParseConnectRequestOpenRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ConnectRequestOpenRequest_FieldTerminalPath struct {
	selector ConnectRequestOpenRequest_FieldPathSelector
}

var _ ConnectRequestOpenRequest_FieldPath = (*ConnectRequestOpenRequest_FieldTerminalPath)(nil)

func (fp *ConnectRequestOpenRequest_FieldTerminalPath) Selector() ConnectRequestOpenRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ConnectRequestOpenRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ConnectRequestOpenRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ConnectRequest_OpenRequest
func (fp *ConnectRequestOpenRequest_FieldTerminalPath) Get(source *ConnectRequest_OpenRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ConnectRequestOpenRequest_FieldPathSelectorProject:
			if source.Project != nil {
				values = append(values, source.Project)
			}
		case ConnectRequestOpenRequest_FieldPathSelectorRegionId:
			values = append(values, source.RegionId)
		case ConnectRequestOpenRequest_FieldPathSelectorName:
			values = append(values, source.Name)
		case ConnectRequestOpenRequest_FieldPathSelectorProviderName:
			values = append(values, source.ProviderName)
		case ConnectRequestOpenRequest_FieldPathSelectorService:
			values = append(values, source.Service)
		case ConnectRequestOpenRequest_FieldPathSelectorArg:
			values = append(values, source.Arg)
		default:
			panic(fmt.Sprintf("Invalid selector for ConnectRequest_OpenRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ConnectRequestOpenRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ConnectRequest_OpenRequest))
}

// GetSingle returns value pointed by specific field of from source ConnectRequest_OpenRequest
func (fp *ConnectRequestOpenRequest_FieldTerminalPath) GetSingle(source *ConnectRequest_OpenRequest) (interface{}, bool) {
	switch fp.selector {
	case ConnectRequestOpenRequest_FieldPathSelectorProject:
		res := source.GetProject()
		return res, res != nil
	case ConnectRequestOpenRequest_FieldPathSelectorRegionId:
		return source.GetRegionId(), source != nil
	case ConnectRequestOpenRequest_FieldPathSelectorName:
		return source.GetName(), source != nil
	case ConnectRequestOpenRequest_FieldPathSelectorProviderName:
		return source.GetProviderName(), source != nil
	case ConnectRequestOpenRequest_FieldPathSelectorService:
		return source.GetService(), source != nil
	case ConnectRequestOpenRequest_FieldPathSelectorArg:
		res := source.GetArg()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectRequest_OpenRequest: %d", fp.selector))
	}
}

func (fp *ConnectRequestOpenRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ConnectRequest_OpenRequest))
}

// GetDefault returns a default value of the field type
func (fp *ConnectRequestOpenRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ConnectRequestOpenRequest_FieldPathSelectorProject:
		return (*project.Reference)(nil)
	case ConnectRequestOpenRequest_FieldPathSelectorRegionId:
		return ""
	case ConnectRequestOpenRequest_FieldPathSelectorName:
		return ""
	case ConnectRequestOpenRequest_FieldPathSelectorProviderName:
		return ""
	case ConnectRequestOpenRequest_FieldPathSelectorService:
		return ""
	case ConnectRequestOpenRequest_FieldPathSelectorArg:
		return ([]byte)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectRequest_OpenRequest: %d", fp.selector))
	}
}

func (fp *ConnectRequestOpenRequest_FieldTerminalPath) ClearValue(item *ConnectRequest_OpenRequest) {
	if item != nil {
		switch fp.selector {
		case ConnectRequestOpenRequest_FieldPathSelectorProject:
			item.Project = nil
		case ConnectRequestOpenRequest_FieldPathSelectorRegionId:
			item.RegionId = ""
		case ConnectRequestOpenRequest_FieldPathSelectorName:
			item.Name = ""
		case ConnectRequestOpenRequest_FieldPathSelectorProviderName:
			item.ProviderName = ""
		case ConnectRequestOpenRequest_FieldPathSelectorService:
			item.Service = ""
		case ConnectRequestOpenRequest_FieldPathSelectorArg:
			item.Arg = nil
		default:
			panic(fmt.Sprintf("Invalid selector for ConnectRequest_OpenRequest: %d", fp.selector))
		}
	}
}

func (fp *ConnectRequestOpenRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ConnectRequest_OpenRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ConnectRequestOpenRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ConnectRequestOpenRequest_FieldPathSelectorProject ||
		fp.selector == ConnectRequestOpenRequest_FieldPathSelectorRegionId ||
		fp.selector == ConnectRequestOpenRequest_FieldPathSelectorName ||
		fp.selector == ConnectRequestOpenRequest_FieldPathSelectorProviderName ||
		fp.selector == ConnectRequestOpenRequest_FieldPathSelectorService ||
		fp.selector == ConnectRequestOpenRequest_FieldPathSelectorArg
}

func (fp *ConnectRequestOpenRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ConnectRequestOpenRequest_FieldTerminalPath) WithIValue(value interface{}) ConnectRequestOpenRequest_FieldPathValue {
	switch fp.selector {
	case ConnectRequestOpenRequest_FieldPathSelectorProject:
		return &ConnectRequestOpenRequest_FieldTerminalPathValue{ConnectRequestOpenRequest_FieldTerminalPath: *fp, value: value.(*project.Reference)}
	case ConnectRequestOpenRequest_FieldPathSelectorRegionId:
		return &ConnectRequestOpenRequest_FieldTerminalPathValue{ConnectRequestOpenRequest_FieldTerminalPath: *fp, value: value.(string)}
	case ConnectRequestOpenRequest_FieldPathSelectorName:
		return &ConnectRequestOpenRequest_FieldTerminalPathValue{ConnectRequestOpenRequest_FieldTerminalPath: *fp, value: value.(string)}
	case ConnectRequestOpenRequest_FieldPathSelectorProviderName:
		return &ConnectRequestOpenRequest_FieldTerminalPathValue{ConnectRequestOpenRequest_FieldTerminalPath: *fp, value: value.(string)}
	case ConnectRequestOpenRequest_FieldPathSelectorService:
		return &ConnectRequestOpenRequest_FieldTerminalPathValue{ConnectRequestOpenRequest_FieldTerminalPath: *fp, value: value.(string)}
	case ConnectRequestOpenRequest_FieldPathSelectorArg:
		return &ConnectRequestOpenRequest_FieldTerminalPathValue{ConnectRequestOpenRequest_FieldTerminalPath: *fp, value: value.([]byte)}
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectRequest_OpenRequest: %d", fp.selector))
	}
}

func (fp *ConnectRequestOpenRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ConnectRequestOpenRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ConnectRequestOpenRequest_FieldPathArrayOfValues {
	fpaov := &ConnectRequestOpenRequest_FieldTerminalPathArrayOfValues{ConnectRequestOpenRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case ConnectRequestOpenRequest_FieldPathSelectorProject:
		return &ConnectRequestOpenRequest_FieldTerminalPathArrayOfValues{ConnectRequestOpenRequest_FieldTerminalPath: *fp, values: values.([]*project.Reference)}
	case ConnectRequestOpenRequest_FieldPathSelectorRegionId:
		return &ConnectRequestOpenRequest_FieldTerminalPathArrayOfValues{ConnectRequestOpenRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case ConnectRequestOpenRequest_FieldPathSelectorName:
		return &ConnectRequestOpenRequest_FieldTerminalPathArrayOfValues{ConnectRequestOpenRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case ConnectRequestOpenRequest_FieldPathSelectorProviderName:
		return &ConnectRequestOpenRequest_FieldTerminalPathArrayOfValues{ConnectRequestOpenRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case ConnectRequestOpenRequest_FieldPathSelectorService:
		return &ConnectRequestOpenRequest_FieldTerminalPathArrayOfValues{ConnectRequestOpenRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case ConnectRequestOpenRequest_FieldPathSelectorArg:
		return &ConnectRequestOpenRequest_FieldTerminalPathArrayOfValues{ConnectRequestOpenRequest_FieldTerminalPath: *fp, values: values.([][]byte)}
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectRequest_OpenRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ConnectRequestOpenRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ConnectRequestOpenRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ConnectRequestOpenRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectRequest_OpenRequest: %d", fp.selector))
	}
}

func (fp *ConnectRequestOpenRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ConnectRequestOpenRequest_FieldPathValue allows storing values for OpenRequest fields according to their type
type ConnectRequestOpenRequest_FieldPathValue interface {
	ConnectRequestOpenRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ConnectRequest_OpenRequest)
	CompareWith(*ConnectRequest_OpenRequest) (cmp int, comparable bool)
}

func ParseConnectRequestOpenRequest_FieldPathValue(pathStr, valueStr string) (ConnectRequestOpenRequest_FieldPathValue, error) {
	fp, err := ParseConnectRequestOpenRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing OpenRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ConnectRequestOpenRequest_FieldPathValue), nil
}

func MustParseConnectRequestOpenRequest_FieldPathValue(pathStr, valueStr string) ConnectRequestOpenRequest_FieldPathValue {
	fpv, err := ParseConnectRequestOpenRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ConnectRequestOpenRequest_FieldTerminalPathValue struct {
	ConnectRequestOpenRequest_FieldTerminalPath
	value interface{}
}

var _ ConnectRequestOpenRequest_FieldPathValue = (*ConnectRequestOpenRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'OpenRequest' as interface{}
func (fpv *ConnectRequestOpenRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ConnectRequestOpenRequest_FieldTerminalPathValue) AsProjectValue() (*project.Reference, bool) {
	res, ok := fpv.value.(*project.Reference)
	return res, ok
}
func (fpv *ConnectRequestOpenRequest_FieldTerminalPathValue) AsRegionIdValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *ConnectRequestOpenRequest_FieldTerminalPathValue) AsNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *ConnectRequestOpenRequest_FieldTerminalPathValue) AsProviderNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *ConnectRequestOpenRequest_FieldTerminalPathValue) AsServiceValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *ConnectRequestOpenRequest_FieldTerminalPathValue) AsArgValue() ([]byte, bool) {
	res, ok := fpv.value.([]byte)
	return res, ok
}

// SetTo stores value for selected field for object OpenRequest
func (fpv *ConnectRequestOpenRequest_FieldTerminalPathValue) SetTo(target **ConnectRequest_OpenRequest) {
	if *target == nil {
		*target = new(ConnectRequest_OpenRequest)
	}
	switch fpv.selector {
	case ConnectRequestOpenRequest_FieldPathSelectorProject:
		(*target).Project = fpv.value.(*project.Reference)
	case ConnectRequestOpenRequest_FieldPathSelectorRegionId:
		(*target).RegionId = fpv.value.(string)
	case ConnectRequestOpenRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(string)
	case ConnectRequestOpenRequest_FieldPathSelectorProviderName:
		(*target).ProviderName = fpv.value.(string)
	case ConnectRequestOpenRequest_FieldPathSelectorService:
		(*target).Service = fpv.value.(string)
	case ConnectRequestOpenRequest_FieldPathSelectorArg:
		(*target).Arg = fpv.value.([]byte)
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectRequest_OpenRequest: %d", fpv.selector))
	}
}

func (fpv *ConnectRequestOpenRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ConnectRequest_OpenRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ConnectRequestOpenRequest_FieldTerminalPathValue' with the value under path in 'ConnectRequest_OpenRequest'.
func (fpv *ConnectRequestOpenRequest_FieldTerminalPathValue) CompareWith(source *ConnectRequest_OpenRequest) (int, bool) {
	switch fpv.selector {
	case ConnectRequestOpenRequest_FieldPathSelectorProject:
		leftValue := fpv.value.(*project.Reference)
		rightValue := source.GetProject()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ConnectRequestOpenRequest_FieldPathSelectorRegionId:
		leftValue := fpv.value.(string)
		rightValue := source.GetRegionId()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ConnectRequestOpenRequest_FieldPathSelectorName:
		leftValue := fpv.value.(string)
		rightValue := source.GetName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ConnectRequestOpenRequest_FieldPathSelectorProviderName:
		leftValue := fpv.value.(string)
		rightValue := source.GetProviderName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ConnectRequestOpenRequest_FieldPathSelectorService:
		leftValue := fpv.value.(string)
		rightValue := source.GetService()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ConnectRequestOpenRequest_FieldPathSelectorArg:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectRequest_OpenRequest: %d", fpv.selector))
	}
}

func (fpv *ConnectRequestOpenRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ConnectRequest_OpenRequest))
}

// ConnectRequestOpenRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for OpenRequest according to their type
// Present only for array (repeated) types.
type ConnectRequestOpenRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ConnectRequestOpenRequest_FieldPath
	ContainsValue(*ConnectRequest_OpenRequest) bool
}

// ParseConnectRequestOpenRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseConnectRequestOpenRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ConnectRequestOpenRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseConnectRequestOpenRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing OpenRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ConnectRequestOpenRequest_FieldPathArrayItemValue), nil
}

func MustParseConnectRequestOpenRequest_FieldPathArrayItemValue(pathStr, valueStr string) ConnectRequestOpenRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseConnectRequestOpenRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ConnectRequestOpenRequest_FieldTerminalPathArrayItemValue struct {
	ConnectRequestOpenRequest_FieldTerminalPath
	value interface{}
}

var _ ConnectRequestOpenRequest_FieldPathArrayItemValue = (*ConnectRequestOpenRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ConnectRequest_OpenRequest as interface{}
func (fpaiv *ConnectRequestOpenRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ConnectRequestOpenRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ConnectRequest_OpenRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ConnectRequestOpenRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ConnectRequest_OpenRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'OpenRequest'
func (fpaiv *ConnectRequestOpenRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ConnectRequest_OpenRequest) bool {
	slice := fpaiv.ConnectRequestOpenRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ConnectRequestOpenRequest_FieldPathArrayOfValues allows storing slice of values for OpenRequest fields according to their type
type ConnectRequestOpenRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ConnectRequestOpenRequest_FieldPath
}

func ParseConnectRequestOpenRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ConnectRequestOpenRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseConnectRequestOpenRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing OpenRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ConnectRequestOpenRequest_FieldPathArrayOfValues), nil
}

func MustParseConnectRequestOpenRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ConnectRequestOpenRequest_FieldPathArrayOfValues {
	fpaov, err := ParseConnectRequestOpenRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ConnectRequestOpenRequest_FieldTerminalPathArrayOfValues struct {
	ConnectRequestOpenRequest_FieldTerminalPath
	values interface{}
}

var _ ConnectRequestOpenRequest_FieldPathArrayOfValues = (*ConnectRequestOpenRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ConnectRequestOpenRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ConnectRequestOpenRequest_FieldPathSelectorProject:
		for _, v := range fpaov.values.([]*project.Reference) {
			values = append(values, v)
		}
	case ConnectRequestOpenRequest_FieldPathSelectorRegionId:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case ConnectRequestOpenRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case ConnectRequestOpenRequest_FieldPathSelectorProviderName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case ConnectRequestOpenRequest_FieldPathSelectorService:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case ConnectRequestOpenRequest_FieldPathSelectorArg:
		for _, v := range fpaov.values.([][]byte) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ConnectRequestOpenRequest_FieldTerminalPathArrayOfValues) AsProjectArrayOfValues() ([]*project.Reference, bool) {
	res, ok := fpaov.values.([]*project.Reference)
	return res, ok
}
func (fpaov *ConnectRequestOpenRequest_FieldTerminalPathArrayOfValues) AsRegionIdArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *ConnectRequestOpenRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *ConnectRequestOpenRequest_FieldTerminalPathArrayOfValues) AsProviderNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *ConnectRequestOpenRequest_FieldTerminalPathArrayOfValues) AsServiceArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *ConnectRequestOpenRequest_FieldTerminalPathArrayOfValues) AsArgArrayOfValues() ([][]byte, bool) {
	res, ok := fpaov.values.([][]byte)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ConnectRequestResumeRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ConnectRequestResumeRequest_FieldPathSelector
	Get(source *ConnectRequest_ResumeRequest) []interface{}
	GetSingle(source *ConnectRequest_ResumeRequest) (interface{}, bool)
	ClearValue(item *ConnectRequest_ResumeRequest)

	// Those methods build corresponding ConnectRequestResumeRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ConnectRequestResumeRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ConnectRequestResumeRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ConnectRequestResumeRequest_FieldPathArrayItemValue
}

type ConnectRequestResumeRequest_FieldPathSelector int32

const (
	ConnectRequestResumeRequest_FieldPathSelectorProject       ConnectRequestResumeRequest_FieldPathSelector = 0
	ConnectRequestResumeRequest_FieldPathSelectorRegionId      ConnectRequestResumeRequest_FieldPathSelector = 1
	ConnectRequestResumeRequest_FieldPathSelectorName          ConnectRequestResumeRequest_FieldPathSelector = 2
	ConnectRequestResumeRequest_FieldPathSelectorProviderName  ConnectRequestResumeRequest_FieldPathSelector = 3
	ConnectRequestResumeRequest_FieldPathSelectorSessionId     ConnectRequestResumeRequest_FieldPathSelector = 4
	ConnectRequestResumeRequest_FieldPathSelectorChannelId     ConnectRequestResumeRequest_FieldPathSelector = 5
	ConnectRequestResumeRequest_FieldPathSelectorLastMessageId ConnectRequestResumeRequest_FieldPathSelector = 6
)

func (s ConnectRequestResumeRequest_FieldPathSelector) String() string {
	switch s {
	case ConnectRequestResumeRequest_FieldPathSelectorProject:
		return "project"
	case ConnectRequestResumeRequest_FieldPathSelectorRegionId:
		return "region_id"
	case ConnectRequestResumeRequest_FieldPathSelectorName:
		return "name"
	case ConnectRequestResumeRequest_FieldPathSelectorProviderName:
		return "provider_name"
	case ConnectRequestResumeRequest_FieldPathSelectorSessionId:
		return "session_id"
	case ConnectRequestResumeRequest_FieldPathSelectorChannelId:
		return "channel_id"
	case ConnectRequestResumeRequest_FieldPathSelectorLastMessageId:
		return "last_message_id"
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectRequest_ResumeRequest: %d", s))
	}
}

func BuildConnectRequestResumeRequest_FieldPath(fp gotenobject.RawFieldPath) (ConnectRequestResumeRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ConnectRequest_ResumeRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "project":
			return &ConnectRequestResumeRequest_FieldTerminalPath{selector: ConnectRequestResumeRequest_FieldPathSelectorProject}, nil
		case "region_id", "regionId", "region-id":
			return &ConnectRequestResumeRequest_FieldTerminalPath{selector: ConnectRequestResumeRequest_FieldPathSelectorRegionId}, nil
		case "name":
			return &ConnectRequestResumeRequest_FieldTerminalPath{selector: ConnectRequestResumeRequest_FieldPathSelectorName}, nil
		case "provider_name", "providerName", "provider-name":
			return &ConnectRequestResumeRequest_FieldTerminalPath{selector: ConnectRequestResumeRequest_FieldPathSelectorProviderName}, nil
		case "session_id", "sessionId", "session-id":
			return &ConnectRequestResumeRequest_FieldTerminalPath{selector: ConnectRequestResumeRequest_FieldPathSelectorSessionId}, nil
		case "channel_id", "channelId", "channel-id":
			return &ConnectRequestResumeRequest_FieldTerminalPath{selector: ConnectRequestResumeRequest_FieldPathSelectorChannelId}, nil
		case "last_message_id", "lastMessageId", "last-message-id":
			return &ConnectRequestResumeRequest_FieldTerminalPath{selector: ConnectRequestResumeRequest_FieldPathSelectorLastMessageId}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ConnectRequest_ResumeRequest", fp)
}

func ParseConnectRequestResumeRequest_FieldPath(rawField string) (ConnectRequestResumeRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildConnectRequestResumeRequest_FieldPath(fp)
}

func MustParseConnectRequestResumeRequest_FieldPath(rawField string) ConnectRequestResumeRequest_FieldPath {
	fp, err := ParseConnectRequestResumeRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ConnectRequestResumeRequest_FieldTerminalPath struct {
	selector ConnectRequestResumeRequest_FieldPathSelector
}

var _ ConnectRequestResumeRequest_FieldPath = (*ConnectRequestResumeRequest_FieldTerminalPath)(nil)

func (fp *ConnectRequestResumeRequest_FieldTerminalPath) Selector() ConnectRequestResumeRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ConnectRequestResumeRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ConnectRequestResumeRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ConnectRequest_ResumeRequest
func (fp *ConnectRequestResumeRequest_FieldTerminalPath) Get(source *ConnectRequest_ResumeRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ConnectRequestResumeRequest_FieldPathSelectorProject:
			if source.Project != nil {
				values = append(values, source.Project)
			}
		case ConnectRequestResumeRequest_FieldPathSelectorRegionId:
			values = append(values, source.RegionId)
		case ConnectRequestResumeRequest_FieldPathSelectorName:
			values = append(values, source.Name)
		case ConnectRequestResumeRequest_FieldPathSelectorProviderName:
			values = append(values, source.ProviderName)
		case ConnectRequestResumeRequest_FieldPathSelectorSessionId:
			values = append(values, source.SessionId)
		case ConnectRequestResumeRequest_FieldPathSelectorChannelId:
			values = append(values, source.ChannelId)
		case ConnectRequestResumeRequest_FieldPathSelectorLastMessageId:
			values = append(values, source.LastMessageId)
		default:
			panic(fmt.Sprintf("Invalid selector for ConnectRequest_ResumeRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ConnectRequestResumeRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ConnectRequest_ResumeRequest))
}

// GetSingle returns value pointed by specific field of from source ConnectRequest_ResumeRequest
func (fp *ConnectRequestResumeRequest_FieldTerminalPath) GetSingle(source *ConnectRequest_ResumeRequest) (interface{}, bool) {
	switch fp.selector {
	case ConnectRequestResumeRequest_FieldPathSelectorProject:
		res := source.GetProject()
		return res, res != nil
	case ConnectRequestResumeRequest_FieldPathSelectorRegionId:
		return source.GetRegionId(), source != nil
	case ConnectRequestResumeRequest_FieldPathSelectorName:
		return source.GetName(), source != nil
	case ConnectRequestResumeRequest_FieldPathSelectorProviderName:
		return source.GetProviderName(), source != nil
	case ConnectRequestResumeRequest_FieldPathSelectorSessionId:
		return source.GetSessionId(), source != nil
	case ConnectRequestResumeRequest_FieldPathSelectorChannelId:
		return source.GetChannelId(), source != nil
	case ConnectRequestResumeRequest_FieldPathSelectorLastMessageId:
		return source.GetLastMessageId(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectRequest_ResumeRequest: %d", fp.selector))
	}
}

func (fp *ConnectRequestResumeRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ConnectRequest_ResumeRequest))
}

// GetDefault returns a default value of the field type
func (fp *ConnectRequestResumeRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ConnectRequestResumeRequest_FieldPathSelectorProject:
		return (*project.Reference)(nil)
	case ConnectRequestResumeRequest_FieldPathSelectorRegionId:
		return ""
	case ConnectRequestResumeRequest_FieldPathSelectorName:
		return ""
	case ConnectRequestResumeRequest_FieldPathSelectorProviderName:
		return ""
	case ConnectRequestResumeRequest_FieldPathSelectorSessionId:
		return uint64(0)
	case ConnectRequestResumeRequest_FieldPathSelectorChannelId:
		return uint64(0)
	case ConnectRequestResumeRequest_FieldPathSelectorLastMessageId:
		return uint64(0)
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectRequest_ResumeRequest: %d", fp.selector))
	}
}

func (fp *ConnectRequestResumeRequest_FieldTerminalPath) ClearValue(item *ConnectRequest_ResumeRequest) {
	if item != nil {
		switch fp.selector {
		case ConnectRequestResumeRequest_FieldPathSelectorProject:
			item.Project = nil
		case ConnectRequestResumeRequest_FieldPathSelectorRegionId:
			item.RegionId = ""
		case ConnectRequestResumeRequest_FieldPathSelectorName:
			item.Name = ""
		case ConnectRequestResumeRequest_FieldPathSelectorProviderName:
			item.ProviderName = ""
		case ConnectRequestResumeRequest_FieldPathSelectorSessionId:
			item.SessionId = uint64(0)
		case ConnectRequestResumeRequest_FieldPathSelectorChannelId:
			item.ChannelId = uint64(0)
		case ConnectRequestResumeRequest_FieldPathSelectorLastMessageId:
			item.LastMessageId = uint64(0)
		default:
			panic(fmt.Sprintf("Invalid selector for ConnectRequest_ResumeRequest: %d", fp.selector))
		}
	}
}

func (fp *ConnectRequestResumeRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ConnectRequest_ResumeRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ConnectRequestResumeRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ConnectRequestResumeRequest_FieldPathSelectorProject ||
		fp.selector == ConnectRequestResumeRequest_FieldPathSelectorRegionId ||
		fp.selector == ConnectRequestResumeRequest_FieldPathSelectorName ||
		fp.selector == ConnectRequestResumeRequest_FieldPathSelectorProviderName ||
		fp.selector == ConnectRequestResumeRequest_FieldPathSelectorSessionId ||
		fp.selector == ConnectRequestResumeRequest_FieldPathSelectorChannelId ||
		fp.selector == ConnectRequestResumeRequest_FieldPathSelectorLastMessageId
}

func (fp *ConnectRequestResumeRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ConnectRequestResumeRequest_FieldTerminalPath) WithIValue(value interface{}) ConnectRequestResumeRequest_FieldPathValue {
	switch fp.selector {
	case ConnectRequestResumeRequest_FieldPathSelectorProject:
		return &ConnectRequestResumeRequest_FieldTerminalPathValue{ConnectRequestResumeRequest_FieldTerminalPath: *fp, value: value.(*project.Reference)}
	case ConnectRequestResumeRequest_FieldPathSelectorRegionId:
		return &ConnectRequestResumeRequest_FieldTerminalPathValue{ConnectRequestResumeRequest_FieldTerminalPath: *fp, value: value.(string)}
	case ConnectRequestResumeRequest_FieldPathSelectorName:
		return &ConnectRequestResumeRequest_FieldTerminalPathValue{ConnectRequestResumeRequest_FieldTerminalPath: *fp, value: value.(string)}
	case ConnectRequestResumeRequest_FieldPathSelectorProviderName:
		return &ConnectRequestResumeRequest_FieldTerminalPathValue{ConnectRequestResumeRequest_FieldTerminalPath: *fp, value: value.(string)}
	case ConnectRequestResumeRequest_FieldPathSelectorSessionId:
		return &ConnectRequestResumeRequest_FieldTerminalPathValue{ConnectRequestResumeRequest_FieldTerminalPath: *fp, value: value.(uint64)}
	case ConnectRequestResumeRequest_FieldPathSelectorChannelId:
		return &ConnectRequestResumeRequest_FieldTerminalPathValue{ConnectRequestResumeRequest_FieldTerminalPath: *fp, value: value.(uint64)}
	case ConnectRequestResumeRequest_FieldPathSelectorLastMessageId:
		return &ConnectRequestResumeRequest_FieldTerminalPathValue{ConnectRequestResumeRequest_FieldTerminalPath: *fp, value: value.(uint64)}
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectRequest_ResumeRequest: %d", fp.selector))
	}
}

func (fp *ConnectRequestResumeRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ConnectRequestResumeRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ConnectRequestResumeRequest_FieldPathArrayOfValues {
	fpaov := &ConnectRequestResumeRequest_FieldTerminalPathArrayOfValues{ConnectRequestResumeRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case ConnectRequestResumeRequest_FieldPathSelectorProject:
		return &ConnectRequestResumeRequest_FieldTerminalPathArrayOfValues{ConnectRequestResumeRequest_FieldTerminalPath: *fp, values: values.([]*project.Reference)}
	case ConnectRequestResumeRequest_FieldPathSelectorRegionId:
		return &ConnectRequestResumeRequest_FieldTerminalPathArrayOfValues{ConnectRequestResumeRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case ConnectRequestResumeRequest_FieldPathSelectorName:
		return &ConnectRequestResumeRequest_FieldTerminalPathArrayOfValues{ConnectRequestResumeRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case ConnectRequestResumeRequest_FieldPathSelectorProviderName:
		return &ConnectRequestResumeRequest_FieldTerminalPathArrayOfValues{ConnectRequestResumeRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case ConnectRequestResumeRequest_FieldPathSelectorSessionId:
		return &ConnectRequestResumeRequest_FieldTerminalPathArrayOfValues{ConnectRequestResumeRequest_FieldTerminalPath: *fp, values: values.([]uint64)}
	case ConnectRequestResumeRequest_FieldPathSelectorChannelId:
		return &ConnectRequestResumeRequest_FieldTerminalPathArrayOfValues{ConnectRequestResumeRequest_FieldTerminalPath: *fp, values: values.([]uint64)}
	case ConnectRequestResumeRequest_FieldPathSelectorLastMessageId:
		return &ConnectRequestResumeRequest_FieldTerminalPathArrayOfValues{ConnectRequestResumeRequest_FieldTerminalPath: *fp, values: values.([]uint64)}
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectRequest_ResumeRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ConnectRequestResumeRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ConnectRequestResumeRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ConnectRequestResumeRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectRequest_ResumeRequest: %d", fp.selector))
	}
}

func (fp *ConnectRequestResumeRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ConnectRequestResumeRequest_FieldPathValue allows storing values for ResumeRequest fields according to their type
type ConnectRequestResumeRequest_FieldPathValue interface {
	ConnectRequestResumeRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ConnectRequest_ResumeRequest)
	CompareWith(*ConnectRequest_ResumeRequest) (cmp int, comparable bool)
}

func ParseConnectRequestResumeRequest_FieldPathValue(pathStr, valueStr string) (ConnectRequestResumeRequest_FieldPathValue, error) {
	fp, err := ParseConnectRequestResumeRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ResumeRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ConnectRequestResumeRequest_FieldPathValue), nil
}

func MustParseConnectRequestResumeRequest_FieldPathValue(pathStr, valueStr string) ConnectRequestResumeRequest_FieldPathValue {
	fpv, err := ParseConnectRequestResumeRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ConnectRequestResumeRequest_FieldTerminalPathValue struct {
	ConnectRequestResumeRequest_FieldTerminalPath
	value interface{}
}

var _ ConnectRequestResumeRequest_FieldPathValue = (*ConnectRequestResumeRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ResumeRequest' as interface{}
func (fpv *ConnectRequestResumeRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ConnectRequestResumeRequest_FieldTerminalPathValue) AsProjectValue() (*project.Reference, bool) {
	res, ok := fpv.value.(*project.Reference)
	return res, ok
}
func (fpv *ConnectRequestResumeRequest_FieldTerminalPathValue) AsRegionIdValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *ConnectRequestResumeRequest_FieldTerminalPathValue) AsNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *ConnectRequestResumeRequest_FieldTerminalPathValue) AsProviderNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *ConnectRequestResumeRequest_FieldTerminalPathValue) AsSessionIdValue() (uint64, bool) {
	res, ok := fpv.value.(uint64)
	return res, ok
}
func (fpv *ConnectRequestResumeRequest_FieldTerminalPathValue) AsChannelIdValue() (uint64, bool) {
	res, ok := fpv.value.(uint64)
	return res, ok
}
func (fpv *ConnectRequestResumeRequest_FieldTerminalPathValue) AsLastMessageIdValue() (uint64, bool) {
	res, ok := fpv.value.(uint64)
	return res, ok
}

// SetTo stores value for selected field for object ResumeRequest
func (fpv *ConnectRequestResumeRequest_FieldTerminalPathValue) SetTo(target **ConnectRequest_ResumeRequest) {
	if *target == nil {
		*target = new(ConnectRequest_ResumeRequest)
	}
	switch fpv.selector {
	case ConnectRequestResumeRequest_FieldPathSelectorProject:
		(*target).Project = fpv.value.(*project.Reference)
	case ConnectRequestResumeRequest_FieldPathSelectorRegionId:
		(*target).RegionId = fpv.value.(string)
	case ConnectRequestResumeRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(string)
	case ConnectRequestResumeRequest_FieldPathSelectorProviderName:
		(*target).ProviderName = fpv.value.(string)
	case ConnectRequestResumeRequest_FieldPathSelectorSessionId:
		(*target).SessionId = fpv.value.(uint64)
	case ConnectRequestResumeRequest_FieldPathSelectorChannelId:
		(*target).ChannelId = fpv.value.(uint64)
	case ConnectRequestResumeRequest_FieldPathSelectorLastMessageId:
		(*target).LastMessageId = fpv.value.(uint64)
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectRequest_ResumeRequest: %d", fpv.selector))
	}
}

func (fpv *ConnectRequestResumeRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ConnectRequest_ResumeRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ConnectRequestResumeRequest_FieldTerminalPathValue' with the value under path in 'ConnectRequest_ResumeRequest'.
func (fpv *ConnectRequestResumeRequest_FieldTerminalPathValue) CompareWith(source *ConnectRequest_ResumeRequest) (int, bool) {
	switch fpv.selector {
	case ConnectRequestResumeRequest_FieldPathSelectorProject:
		leftValue := fpv.value.(*project.Reference)
		rightValue := source.GetProject()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ConnectRequestResumeRequest_FieldPathSelectorRegionId:
		leftValue := fpv.value.(string)
		rightValue := source.GetRegionId()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ConnectRequestResumeRequest_FieldPathSelectorName:
		leftValue := fpv.value.(string)
		rightValue := source.GetName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ConnectRequestResumeRequest_FieldPathSelectorProviderName:
		leftValue := fpv.value.(string)
		rightValue := source.GetProviderName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ConnectRequestResumeRequest_FieldPathSelectorSessionId:
		leftValue := fpv.value.(uint64)
		rightValue := source.GetSessionId()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ConnectRequestResumeRequest_FieldPathSelectorChannelId:
		leftValue := fpv.value.(uint64)
		rightValue := source.GetChannelId()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ConnectRequestResumeRequest_FieldPathSelectorLastMessageId:
		leftValue := fpv.value.(uint64)
		rightValue := source.GetLastMessageId()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectRequest_ResumeRequest: %d", fpv.selector))
	}
}

func (fpv *ConnectRequestResumeRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ConnectRequest_ResumeRequest))
}

// ConnectRequestResumeRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for ResumeRequest according to their type
// Present only for array (repeated) types.
type ConnectRequestResumeRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ConnectRequestResumeRequest_FieldPath
	ContainsValue(*ConnectRequest_ResumeRequest) bool
}

// ParseConnectRequestResumeRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseConnectRequestResumeRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ConnectRequestResumeRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseConnectRequestResumeRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ResumeRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ConnectRequestResumeRequest_FieldPathArrayItemValue), nil
}

func MustParseConnectRequestResumeRequest_FieldPathArrayItemValue(pathStr, valueStr string) ConnectRequestResumeRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseConnectRequestResumeRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ConnectRequestResumeRequest_FieldTerminalPathArrayItemValue struct {
	ConnectRequestResumeRequest_FieldTerminalPath
	value interface{}
}

var _ ConnectRequestResumeRequest_FieldPathArrayItemValue = (*ConnectRequestResumeRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ConnectRequest_ResumeRequest as interface{}
func (fpaiv *ConnectRequestResumeRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ConnectRequestResumeRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ConnectRequest_ResumeRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ConnectRequestResumeRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ConnectRequest_ResumeRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ResumeRequest'
func (fpaiv *ConnectRequestResumeRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ConnectRequest_ResumeRequest) bool {
	slice := fpaiv.ConnectRequestResumeRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ConnectRequestResumeRequest_FieldPathArrayOfValues allows storing slice of values for ResumeRequest fields according to their type
type ConnectRequestResumeRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ConnectRequestResumeRequest_FieldPath
}

func ParseConnectRequestResumeRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ConnectRequestResumeRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseConnectRequestResumeRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ResumeRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ConnectRequestResumeRequest_FieldPathArrayOfValues), nil
}

func MustParseConnectRequestResumeRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ConnectRequestResumeRequest_FieldPathArrayOfValues {
	fpaov, err := ParseConnectRequestResumeRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ConnectRequestResumeRequest_FieldTerminalPathArrayOfValues struct {
	ConnectRequestResumeRequest_FieldTerminalPath
	values interface{}
}

var _ ConnectRequestResumeRequest_FieldPathArrayOfValues = (*ConnectRequestResumeRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ConnectRequestResumeRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ConnectRequestResumeRequest_FieldPathSelectorProject:
		for _, v := range fpaov.values.([]*project.Reference) {
			values = append(values, v)
		}
	case ConnectRequestResumeRequest_FieldPathSelectorRegionId:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case ConnectRequestResumeRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case ConnectRequestResumeRequest_FieldPathSelectorProviderName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case ConnectRequestResumeRequest_FieldPathSelectorSessionId:
		for _, v := range fpaov.values.([]uint64) {
			values = append(values, v)
		}
	case ConnectRequestResumeRequest_FieldPathSelectorChannelId:
		for _, v := range fpaov.values.([]uint64) {
			values = append(values, v)
		}
	case ConnectRequestResumeRequest_FieldPathSelectorLastMessageId:
		for _, v := range fpaov.values.([]uint64) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ConnectRequestResumeRequest_FieldTerminalPathArrayOfValues) AsProjectArrayOfValues() ([]*project.Reference, bool) {
	res, ok := fpaov.values.([]*project.Reference)
	return res, ok
}
func (fpaov *ConnectRequestResumeRequest_FieldTerminalPathArrayOfValues) AsRegionIdArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *ConnectRequestResumeRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *ConnectRequestResumeRequest_FieldTerminalPathArrayOfValues) AsProviderNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *ConnectRequestResumeRequest_FieldTerminalPathArrayOfValues) AsSessionIdArrayOfValues() ([]uint64, bool) {
	res, ok := fpaov.values.([]uint64)
	return res, ok
}
func (fpaov *ConnectRequestResumeRequest_FieldTerminalPathArrayOfValues) AsChannelIdArrayOfValues() ([]uint64, bool) {
	res, ok := fpaov.values.([]uint64)
	return res, ok
}
func (fpaov *ConnectRequestResumeRequest_FieldTerminalPathArrayOfValues) AsLastMessageIdArrayOfValues() ([]uint64, bool) {
	res, ok := fpaov.values.([]uint64)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ConnectResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() ConnectResponse_FieldPathSelector
	Get(source *ConnectResponse) []interface{}
	GetSingle(source *ConnectResponse) (interface{}, bool)
	ClearValue(item *ConnectResponse)

	// Those methods build corresponding ConnectResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ConnectResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) ConnectResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ConnectResponse_FieldPathArrayItemValue
}

type ConnectResponse_FieldPathSelector int32

const (
	ConnectResponse_FieldPathSelectorOpenResponse     ConnectResponse_FieldPathSelector = 0
	ConnectResponse_FieldPathSelectorResumeResponse   ConnectResponse_FieldPathSelector = 1
	ConnectResponse_FieldPathSelectorChannelOpenError ConnectResponse_FieldPathSelector = 2
	ConnectResponse_FieldPathSelectorAck              ConnectResponse_FieldPathSelector = 3
	ConnectResponse_FieldPathSelectorData             ConnectResponse_FieldPathSelector = 4
	ConnectResponse_FieldPathSelectorClose            ConnectResponse_FieldPathSelector = 5
	ConnectResponse_FieldPathSelectorError            ConnectResponse_FieldPathSelector = 6
)

func (s ConnectResponse_FieldPathSelector) String() string {
	switch s {
	case ConnectResponse_FieldPathSelectorOpenResponse:
		return "open_response"
	case ConnectResponse_FieldPathSelectorResumeResponse:
		return "resume_response"
	case ConnectResponse_FieldPathSelectorChannelOpenError:
		return "channel_open_error"
	case ConnectResponse_FieldPathSelectorAck:
		return "ack"
	case ConnectResponse_FieldPathSelectorData:
		return "data"
	case ConnectResponse_FieldPathSelectorClose:
		return "close"
	case ConnectResponse_FieldPathSelectorError:
		return "error"
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectResponse: %d", s))
	}
}

func BuildConnectResponse_FieldPath(fp gotenobject.RawFieldPath) (ConnectResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ConnectResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "open_response", "openResponse", "open-response":
			return &ConnectResponse_FieldTerminalPath{selector: ConnectResponse_FieldPathSelectorOpenResponse}, nil
		case "resume_response", "resumeResponse", "resume-response":
			return &ConnectResponse_FieldTerminalPath{selector: ConnectResponse_FieldPathSelectorResumeResponse}, nil
		case "channel_open_error", "channelOpenError", "channel-open-error":
			return &ConnectResponse_FieldTerminalPath{selector: ConnectResponse_FieldPathSelectorChannelOpenError}, nil
		case "ack":
			return &ConnectResponse_FieldTerminalPath{selector: ConnectResponse_FieldPathSelectorAck}, nil
		case "data":
			return &ConnectResponse_FieldTerminalPath{selector: ConnectResponse_FieldPathSelectorData}, nil
		case "close":
			return &ConnectResponse_FieldTerminalPath{selector: ConnectResponse_FieldPathSelectorClose}, nil
		case "error":
			return &ConnectResponse_FieldTerminalPath{selector: ConnectResponse_FieldPathSelectorError}, nil
		}
	} else {
		switch fp[0] {
		case "open_response", "openResponse", "open-response":
			if subpath, err := BuildConnectResponseOpenResponse_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ConnectResponse_FieldSubPath{selector: ConnectResponse_FieldPathSelectorOpenResponse, subPath: subpath}, nil
			}
		case "resume_response", "resumeResponse", "resume-response":
			if subpath, err := BuildConnectResponseResumeResponse_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ConnectResponse_FieldSubPath{selector: ConnectResponse_FieldPathSelectorResumeResponse, subPath: subpath}, nil
			}
		case "channel_open_error", "channelOpenError", "channel-open-error":
			if subpath, err := BuildConnectResponseChannelOpenError_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ConnectResponse_FieldSubPath{selector: ConnectResponse_FieldPathSelectorChannelOpenError, subPath: subpath}, nil
			}
		case "ack":
			if subpath, err := BuildAck_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ConnectResponse_FieldSubPath{selector: ConnectResponse_FieldPathSelectorAck, subPath: subpath}, nil
			}
		case "data":
			if subpath, err := BuildData_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ConnectResponse_FieldSubPath{selector: ConnectResponse_FieldPathSelectorData, subPath: subpath}, nil
			}
		case "close":
			if subpath, err := BuildClose_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ConnectResponse_FieldSubPath{selector: ConnectResponse_FieldPathSelectorClose, subPath: subpath}, nil
			}
		case "error":
			if subpath, err := BuildError_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ConnectResponse_FieldSubPath{selector: ConnectResponse_FieldPathSelectorError, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ConnectResponse", fp)
}

func ParseConnectResponse_FieldPath(rawField string) (ConnectResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildConnectResponse_FieldPath(fp)
}

func MustParseConnectResponse_FieldPath(rawField string) ConnectResponse_FieldPath {
	fp, err := ParseConnectResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ConnectResponse_FieldTerminalPath struct {
	selector ConnectResponse_FieldPathSelector
}

var _ ConnectResponse_FieldPath = (*ConnectResponse_FieldTerminalPath)(nil)

func (fp *ConnectResponse_FieldTerminalPath) Selector() ConnectResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ConnectResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ConnectResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ConnectResponse
func (fp *ConnectResponse_FieldTerminalPath) Get(source *ConnectResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ConnectResponse_FieldPathSelectorOpenResponse:
			if source, ok := source.Message.(*ConnectResponse_OpenResponse_); ok && source != nil {
				if source.OpenResponse != nil {
					values = append(values, source.OpenResponse)
				}
			}
		case ConnectResponse_FieldPathSelectorResumeResponse:
			if source, ok := source.Message.(*ConnectResponse_ResumeResponse_); ok && source != nil {
				if source.ResumeResponse != nil {
					values = append(values, source.ResumeResponse)
				}
			}
		case ConnectResponse_FieldPathSelectorChannelOpenError:
			if source, ok := source.Message.(*ConnectResponse_ChannelOpenError_); ok && source != nil {
				if source.ChannelOpenError != nil {
					values = append(values, source.ChannelOpenError)
				}
			}
		case ConnectResponse_FieldPathSelectorAck:
			if source, ok := source.Message.(*ConnectResponse_Ack); ok && source != nil {
				if source.Ack != nil {
					values = append(values, source.Ack)
				}
			}
		case ConnectResponse_FieldPathSelectorData:
			if source, ok := source.Message.(*ConnectResponse_Data); ok && source != nil {
				if source.Data != nil {
					values = append(values, source.Data)
				}
			}
		case ConnectResponse_FieldPathSelectorClose:
			if source, ok := source.Message.(*ConnectResponse_Close); ok && source != nil {
				if source.Close != nil {
					values = append(values, source.Close)
				}
			}
		case ConnectResponse_FieldPathSelectorError:
			if source, ok := source.Message.(*ConnectResponse_Error); ok && source != nil {
				if source.Error != nil {
					values = append(values, source.Error)
				}
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ConnectResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *ConnectResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ConnectResponse))
}

// GetSingle returns value pointed by specific field of from source ConnectResponse
func (fp *ConnectResponse_FieldTerminalPath) GetSingle(source *ConnectResponse) (interface{}, bool) {
	switch fp.selector {
	case ConnectResponse_FieldPathSelectorOpenResponse:
		res := source.GetOpenResponse()
		return res, res != nil
	case ConnectResponse_FieldPathSelectorResumeResponse:
		res := source.GetResumeResponse()
		return res, res != nil
	case ConnectResponse_FieldPathSelectorChannelOpenError:
		res := source.GetChannelOpenError()
		return res, res != nil
	case ConnectResponse_FieldPathSelectorAck:
		res := source.GetAck()
		return res, res != nil
	case ConnectResponse_FieldPathSelectorData:
		res := source.GetData()
		return res, res != nil
	case ConnectResponse_FieldPathSelectorClose:
		res := source.GetClose()
		return res, res != nil
	case ConnectResponse_FieldPathSelectorError:
		res := source.GetError()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectResponse: %d", fp.selector))
	}
}

func (fp *ConnectResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ConnectResponse))
}

// GetDefault returns a default value of the field type
func (fp *ConnectResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ConnectResponse_FieldPathSelectorOpenResponse:
		return (*ConnectResponse_OpenResponse)(nil)
	case ConnectResponse_FieldPathSelectorResumeResponse:
		return (*ConnectResponse_ResumeResponse)(nil)
	case ConnectResponse_FieldPathSelectorChannelOpenError:
		return (*ConnectResponse_ChannelOpenError)(nil)
	case ConnectResponse_FieldPathSelectorAck:
		return (*Ack)(nil)
	case ConnectResponse_FieldPathSelectorData:
		return (*Data)(nil)
	case ConnectResponse_FieldPathSelectorClose:
		return (*Close)(nil)
	case ConnectResponse_FieldPathSelectorError:
		return (*Error)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectResponse: %d", fp.selector))
	}
}

func (fp *ConnectResponse_FieldTerminalPath) ClearValue(item *ConnectResponse) {
	if item != nil {
		switch fp.selector {
		case ConnectResponse_FieldPathSelectorOpenResponse:
			if item, ok := item.Message.(*ConnectResponse_OpenResponse_); ok {
				item.OpenResponse = nil
			}
		case ConnectResponse_FieldPathSelectorResumeResponse:
			if item, ok := item.Message.(*ConnectResponse_ResumeResponse_); ok {
				item.ResumeResponse = nil
			}
		case ConnectResponse_FieldPathSelectorChannelOpenError:
			if item, ok := item.Message.(*ConnectResponse_ChannelOpenError_); ok {
				item.ChannelOpenError = nil
			}
		case ConnectResponse_FieldPathSelectorAck:
			if item, ok := item.Message.(*ConnectResponse_Ack); ok {
				item.Ack = nil
			}
		case ConnectResponse_FieldPathSelectorData:
			if item, ok := item.Message.(*ConnectResponse_Data); ok {
				item.Data = nil
			}
		case ConnectResponse_FieldPathSelectorClose:
			if item, ok := item.Message.(*ConnectResponse_Close); ok {
				item.Close = nil
			}
		case ConnectResponse_FieldPathSelectorError:
			if item, ok := item.Message.(*ConnectResponse_Error); ok {
				item.Error = nil
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ConnectResponse: %d", fp.selector))
		}
	}
}

func (fp *ConnectResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ConnectResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *ConnectResponse_FieldTerminalPath) IsLeaf() bool {
	return false
}

func (fp *ConnectResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ConnectResponse_FieldTerminalPath) WithIValue(value interface{}) ConnectResponse_FieldPathValue {
	switch fp.selector {
	case ConnectResponse_FieldPathSelectorOpenResponse:
		return &ConnectResponse_FieldTerminalPathValue{ConnectResponse_FieldTerminalPath: *fp, value: value.(*ConnectResponse_OpenResponse)}
	case ConnectResponse_FieldPathSelectorResumeResponse:
		return &ConnectResponse_FieldTerminalPathValue{ConnectResponse_FieldTerminalPath: *fp, value: value.(*ConnectResponse_ResumeResponse)}
	case ConnectResponse_FieldPathSelectorChannelOpenError:
		return &ConnectResponse_FieldTerminalPathValue{ConnectResponse_FieldTerminalPath: *fp, value: value.(*ConnectResponse_ChannelOpenError)}
	case ConnectResponse_FieldPathSelectorAck:
		return &ConnectResponse_FieldTerminalPathValue{ConnectResponse_FieldTerminalPath: *fp, value: value.(*Ack)}
	case ConnectResponse_FieldPathSelectorData:
		return &ConnectResponse_FieldTerminalPathValue{ConnectResponse_FieldTerminalPath: *fp, value: value.(*Data)}
	case ConnectResponse_FieldPathSelectorClose:
		return &ConnectResponse_FieldTerminalPathValue{ConnectResponse_FieldTerminalPath: *fp, value: value.(*Close)}
	case ConnectResponse_FieldPathSelectorError:
		return &ConnectResponse_FieldTerminalPathValue{ConnectResponse_FieldTerminalPath: *fp, value: value.(*Error)}
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectResponse: %d", fp.selector))
	}
}

func (fp *ConnectResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ConnectResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) ConnectResponse_FieldPathArrayOfValues {
	fpaov := &ConnectResponse_FieldTerminalPathArrayOfValues{ConnectResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case ConnectResponse_FieldPathSelectorOpenResponse:
		return &ConnectResponse_FieldTerminalPathArrayOfValues{ConnectResponse_FieldTerminalPath: *fp, values: values.([]*ConnectResponse_OpenResponse)}
	case ConnectResponse_FieldPathSelectorResumeResponse:
		return &ConnectResponse_FieldTerminalPathArrayOfValues{ConnectResponse_FieldTerminalPath: *fp, values: values.([]*ConnectResponse_ResumeResponse)}
	case ConnectResponse_FieldPathSelectorChannelOpenError:
		return &ConnectResponse_FieldTerminalPathArrayOfValues{ConnectResponse_FieldTerminalPath: *fp, values: values.([]*ConnectResponse_ChannelOpenError)}
	case ConnectResponse_FieldPathSelectorAck:
		return &ConnectResponse_FieldTerminalPathArrayOfValues{ConnectResponse_FieldTerminalPath: *fp, values: values.([]*Ack)}
	case ConnectResponse_FieldPathSelectorData:
		return &ConnectResponse_FieldTerminalPathArrayOfValues{ConnectResponse_FieldTerminalPath: *fp, values: values.([]*Data)}
	case ConnectResponse_FieldPathSelectorClose:
		return &ConnectResponse_FieldTerminalPathArrayOfValues{ConnectResponse_FieldTerminalPath: *fp, values: values.([]*Close)}
	case ConnectResponse_FieldPathSelectorError:
		return &ConnectResponse_FieldTerminalPathArrayOfValues{ConnectResponse_FieldTerminalPath: *fp, values: values.([]*Error)}
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *ConnectResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ConnectResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) ConnectResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectResponse: %d", fp.selector))
	}
}

func (fp *ConnectResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ConnectResponse_FieldSubPath struct {
	selector ConnectResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ConnectResponse_FieldPath = (*ConnectResponse_FieldSubPath)(nil)

func (fps *ConnectResponse_FieldSubPath) Selector() ConnectResponse_FieldPathSelector {
	return fps.selector
}
func (fps *ConnectResponse_FieldSubPath) AsOpenResponseSubPath() (ConnectResponseOpenResponse_FieldPath, bool) {
	res, ok := fps.subPath.(ConnectResponseOpenResponse_FieldPath)
	return res, ok
}
func (fps *ConnectResponse_FieldSubPath) AsResumeResponseSubPath() (ConnectResponseResumeResponse_FieldPath, bool) {
	res, ok := fps.subPath.(ConnectResponseResumeResponse_FieldPath)
	return res, ok
}
func (fps *ConnectResponse_FieldSubPath) AsChannelOpenErrorSubPath() (ConnectResponseChannelOpenError_FieldPath, bool) {
	res, ok := fps.subPath.(ConnectResponseChannelOpenError_FieldPath)
	return res, ok
}
func (fps *ConnectResponse_FieldSubPath) AsAckSubPath() (Ack_FieldPath, bool) {
	res, ok := fps.subPath.(Ack_FieldPath)
	return res, ok
}
func (fps *ConnectResponse_FieldSubPath) AsDataSubPath() (Data_FieldPath, bool) {
	res, ok := fps.subPath.(Data_FieldPath)
	return res, ok
}
func (fps *ConnectResponse_FieldSubPath) AsCloseSubPath() (Close_FieldPath, bool) {
	res, ok := fps.subPath.(Close_FieldPath)
	return res, ok
}
func (fps *ConnectResponse_FieldSubPath) AsErrorSubPath() (Error_FieldPath, bool) {
	res, ok := fps.subPath.(Error_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ConnectResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ConnectResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ConnectResponse
func (fps *ConnectResponse_FieldSubPath) Get(source *ConnectResponse) (values []interface{}) {
	switch fps.selector {
	case ConnectResponse_FieldPathSelectorOpenResponse:
		values = append(values, fps.subPath.GetRaw(source.GetOpenResponse())...)
	case ConnectResponse_FieldPathSelectorResumeResponse:
		values = append(values, fps.subPath.GetRaw(source.GetResumeResponse())...)
	case ConnectResponse_FieldPathSelectorChannelOpenError:
		values = append(values, fps.subPath.GetRaw(source.GetChannelOpenError())...)
	case ConnectResponse_FieldPathSelectorAck:
		values = append(values, fps.subPath.GetRaw(source.GetAck())...)
	case ConnectResponse_FieldPathSelectorData:
		values = append(values, fps.subPath.GetRaw(source.GetData())...)
	case ConnectResponse_FieldPathSelectorClose:
		values = append(values, fps.subPath.GetRaw(source.GetClose())...)
	case ConnectResponse_FieldPathSelectorError:
		values = append(values, fps.subPath.GetRaw(source.GetError())...)
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectResponse: %d", fps.selector))
	}
	return
}

func (fps *ConnectResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ConnectResponse))
}

// GetSingle returns value of selected field from source ConnectResponse
func (fps *ConnectResponse_FieldSubPath) GetSingle(source *ConnectResponse) (interface{}, bool) {
	switch fps.selector {
	case ConnectResponse_FieldPathSelectorOpenResponse:
		if source.GetOpenResponse() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetOpenResponse())
	case ConnectResponse_FieldPathSelectorResumeResponse:
		if source.GetResumeResponse() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetResumeResponse())
	case ConnectResponse_FieldPathSelectorChannelOpenError:
		if source.GetChannelOpenError() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetChannelOpenError())
	case ConnectResponse_FieldPathSelectorAck:
		if source.GetAck() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetAck())
	case ConnectResponse_FieldPathSelectorData:
		if source.GetData() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetData())
	case ConnectResponse_FieldPathSelectorClose:
		if source.GetClose() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetClose())
	case ConnectResponse_FieldPathSelectorError:
		if source.GetError() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetError())
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectResponse: %d", fps.selector))
	}
}

func (fps *ConnectResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ConnectResponse))
}

// GetDefault returns a default value of the field type
func (fps *ConnectResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ConnectResponse_FieldSubPath) ClearValue(item *ConnectResponse) {
	if item != nil {
		switch fps.selector {
		case ConnectResponse_FieldPathSelectorOpenResponse:
			if item.Message != nil {
				if item, ok := item.Message.(*ConnectResponse_OpenResponse_); ok {
					fps.subPath.ClearValueRaw(item.OpenResponse)
				}
			}
		case ConnectResponse_FieldPathSelectorResumeResponse:
			if item.Message != nil {
				if item, ok := item.Message.(*ConnectResponse_ResumeResponse_); ok {
					fps.subPath.ClearValueRaw(item.ResumeResponse)
				}
			}
		case ConnectResponse_FieldPathSelectorChannelOpenError:
			if item.Message != nil {
				if item, ok := item.Message.(*ConnectResponse_ChannelOpenError_); ok {
					fps.subPath.ClearValueRaw(item.ChannelOpenError)
				}
			}
		case ConnectResponse_FieldPathSelectorAck:
			if item.Message != nil {
				if item, ok := item.Message.(*ConnectResponse_Ack); ok {
					fps.subPath.ClearValueRaw(item.Ack)
				}
			}
		case ConnectResponse_FieldPathSelectorData:
			if item.Message != nil {
				if item, ok := item.Message.(*ConnectResponse_Data); ok {
					fps.subPath.ClearValueRaw(item.Data)
				}
			}
		case ConnectResponse_FieldPathSelectorClose:
			if item.Message != nil {
				if item, ok := item.Message.(*ConnectResponse_Close); ok {
					fps.subPath.ClearValueRaw(item.Close)
				}
			}
		case ConnectResponse_FieldPathSelectorError:
			if item.Message != nil {
				if item, ok := item.Message.(*ConnectResponse_Error); ok {
					fps.subPath.ClearValueRaw(item.Error)
				}
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ConnectResponse: %d", fps.selector))
		}
	}
}

func (fps *ConnectResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ConnectResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *ConnectResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ConnectResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&ConnectResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *ConnectResponse_FieldSubPath) WithIValue(value interface{}) ConnectResponse_FieldPathValue {
	return &ConnectResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ConnectResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ConnectResponse_FieldSubPath) WithIArrayOfValues(values interface{}) ConnectResponse_FieldPathArrayOfValues {
	return &ConnectResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ConnectResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ConnectResponse_FieldSubPath) WithIArrayItemValue(value interface{}) ConnectResponse_FieldPathArrayItemValue {
	return &ConnectResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ConnectResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ConnectResponse_FieldPathValue allows storing values for ConnectResponse fields according to their type
type ConnectResponse_FieldPathValue interface {
	ConnectResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ConnectResponse)
	CompareWith(*ConnectResponse) (cmp int, comparable bool)
}

func ParseConnectResponse_FieldPathValue(pathStr, valueStr string) (ConnectResponse_FieldPathValue, error) {
	fp, err := ParseConnectResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ConnectResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(ConnectResponse_FieldPathValue), nil
}

func MustParseConnectResponse_FieldPathValue(pathStr, valueStr string) ConnectResponse_FieldPathValue {
	fpv, err := ParseConnectResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ConnectResponse_FieldTerminalPathValue struct {
	ConnectResponse_FieldTerminalPath
	value interface{}
}

var _ ConnectResponse_FieldPathValue = (*ConnectResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ConnectResponse' as interface{}
func (fpv *ConnectResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ConnectResponse_FieldTerminalPathValue) AsOpenResponseValue() (*ConnectResponse_OpenResponse, bool) {
	res, ok := fpv.value.(*ConnectResponse_OpenResponse)
	return res, ok
}
func (fpv *ConnectResponse_FieldTerminalPathValue) AsResumeResponseValue() (*ConnectResponse_ResumeResponse, bool) {
	res, ok := fpv.value.(*ConnectResponse_ResumeResponse)
	return res, ok
}
func (fpv *ConnectResponse_FieldTerminalPathValue) AsChannelOpenErrorValue() (*ConnectResponse_ChannelOpenError, bool) {
	res, ok := fpv.value.(*ConnectResponse_ChannelOpenError)
	return res, ok
}
func (fpv *ConnectResponse_FieldTerminalPathValue) AsAckValue() (*Ack, bool) {
	res, ok := fpv.value.(*Ack)
	return res, ok
}
func (fpv *ConnectResponse_FieldTerminalPathValue) AsDataValue() (*Data, bool) {
	res, ok := fpv.value.(*Data)
	return res, ok
}
func (fpv *ConnectResponse_FieldTerminalPathValue) AsCloseValue() (*Close, bool) {
	res, ok := fpv.value.(*Close)
	return res, ok
}
func (fpv *ConnectResponse_FieldTerminalPathValue) AsErrorValue() (*Error, bool) {
	res, ok := fpv.value.(*Error)
	return res, ok
}

// SetTo stores value for selected field for object ConnectResponse
func (fpv *ConnectResponse_FieldTerminalPathValue) SetTo(target **ConnectResponse) {
	if *target == nil {
		*target = new(ConnectResponse)
	}
	switch fpv.selector {
	case ConnectResponse_FieldPathSelectorOpenResponse:
		if _, ok := (*target).Message.(*ConnectResponse_OpenResponse_); !ok {
			(*target).Message = &ConnectResponse_OpenResponse_{}
		}
		(*target).Message.(*ConnectResponse_OpenResponse_).OpenResponse = fpv.value.(*ConnectResponse_OpenResponse)
	case ConnectResponse_FieldPathSelectorResumeResponse:
		if _, ok := (*target).Message.(*ConnectResponse_ResumeResponse_); !ok {
			(*target).Message = &ConnectResponse_ResumeResponse_{}
		}
		(*target).Message.(*ConnectResponse_ResumeResponse_).ResumeResponse = fpv.value.(*ConnectResponse_ResumeResponse)
	case ConnectResponse_FieldPathSelectorChannelOpenError:
		if _, ok := (*target).Message.(*ConnectResponse_ChannelOpenError_); !ok {
			(*target).Message = &ConnectResponse_ChannelOpenError_{}
		}
		(*target).Message.(*ConnectResponse_ChannelOpenError_).ChannelOpenError = fpv.value.(*ConnectResponse_ChannelOpenError)
	case ConnectResponse_FieldPathSelectorAck:
		if _, ok := (*target).Message.(*ConnectResponse_Ack); !ok {
			(*target).Message = &ConnectResponse_Ack{}
		}
		(*target).Message.(*ConnectResponse_Ack).Ack = fpv.value.(*Ack)
	case ConnectResponse_FieldPathSelectorData:
		if _, ok := (*target).Message.(*ConnectResponse_Data); !ok {
			(*target).Message = &ConnectResponse_Data{}
		}
		(*target).Message.(*ConnectResponse_Data).Data = fpv.value.(*Data)
	case ConnectResponse_FieldPathSelectorClose:
		if _, ok := (*target).Message.(*ConnectResponse_Close); !ok {
			(*target).Message = &ConnectResponse_Close{}
		}
		(*target).Message.(*ConnectResponse_Close).Close = fpv.value.(*Close)
	case ConnectResponse_FieldPathSelectorError:
		if _, ok := (*target).Message.(*ConnectResponse_Error); !ok {
			(*target).Message = &ConnectResponse_Error{}
		}
		(*target).Message.(*ConnectResponse_Error).Error = fpv.value.(*Error)
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectResponse: %d", fpv.selector))
	}
}

func (fpv *ConnectResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ConnectResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ConnectResponse_FieldTerminalPathValue' with the value under path in 'ConnectResponse'.
func (fpv *ConnectResponse_FieldTerminalPathValue) CompareWith(source *ConnectResponse) (int, bool) {
	switch fpv.selector {
	case ConnectResponse_FieldPathSelectorOpenResponse:
		return 0, false
	case ConnectResponse_FieldPathSelectorResumeResponse:
		return 0, false
	case ConnectResponse_FieldPathSelectorChannelOpenError:
		return 0, false
	case ConnectResponse_FieldPathSelectorAck:
		return 0, false
	case ConnectResponse_FieldPathSelectorData:
		return 0, false
	case ConnectResponse_FieldPathSelectorClose:
		return 0, false
	case ConnectResponse_FieldPathSelectorError:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectResponse: %d", fpv.selector))
	}
}

func (fpv *ConnectResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ConnectResponse))
}

type ConnectResponse_FieldSubPathValue struct {
	ConnectResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ConnectResponse_FieldPathValue = (*ConnectResponse_FieldSubPathValue)(nil)

func (fpvs *ConnectResponse_FieldSubPathValue) AsOpenResponsePathValue() (ConnectResponseOpenResponse_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ConnectResponseOpenResponse_FieldPathValue)
	return res, ok
}
func (fpvs *ConnectResponse_FieldSubPathValue) AsResumeResponsePathValue() (ConnectResponseResumeResponse_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ConnectResponseResumeResponse_FieldPathValue)
	return res, ok
}
func (fpvs *ConnectResponse_FieldSubPathValue) AsChannelOpenErrorPathValue() (ConnectResponseChannelOpenError_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ConnectResponseChannelOpenError_FieldPathValue)
	return res, ok
}
func (fpvs *ConnectResponse_FieldSubPathValue) AsAckPathValue() (Ack_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(Ack_FieldPathValue)
	return res, ok
}
func (fpvs *ConnectResponse_FieldSubPathValue) AsDataPathValue() (Data_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(Data_FieldPathValue)
	return res, ok
}
func (fpvs *ConnectResponse_FieldSubPathValue) AsClosePathValue() (Close_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(Close_FieldPathValue)
	return res, ok
}
func (fpvs *ConnectResponse_FieldSubPathValue) AsErrorPathValue() (Error_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(Error_FieldPathValue)
	return res, ok
}

func (fpvs *ConnectResponse_FieldSubPathValue) SetTo(target **ConnectResponse) {
	if *target == nil {
		*target = new(ConnectResponse)
	}
	switch fpvs.Selector() {
	case ConnectResponse_FieldPathSelectorOpenResponse:
		if _, ok := (*target).Message.(*ConnectResponse_OpenResponse_); !ok {
			(*target).Message = &ConnectResponse_OpenResponse_{}
		}
		fpvs.subPathValue.(ConnectResponseOpenResponse_FieldPathValue).SetTo(&(*target).Message.(*ConnectResponse_OpenResponse_).OpenResponse)
	case ConnectResponse_FieldPathSelectorResumeResponse:
		if _, ok := (*target).Message.(*ConnectResponse_ResumeResponse_); !ok {
			(*target).Message = &ConnectResponse_ResumeResponse_{}
		}
		fpvs.subPathValue.(ConnectResponseResumeResponse_FieldPathValue).SetTo(&(*target).Message.(*ConnectResponse_ResumeResponse_).ResumeResponse)
	case ConnectResponse_FieldPathSelectorChannelOpenError:
		if _, ok := (*target).Message.(*ConnectResponse_ChannelOpenError_); !ok {
			(*target).Message = &ConnectResponse_ChannelOpenError_{}
		}
		fpvs.subPathValue.(ConnectResponseChannelOpenError_FieldPathValue).SetTo(&(*target).Message.(*ConnectResponse_ChannelOpenError_).ChannelOpenError)
	case ConnectResponse_FieldPathSelectorAck:
		if _, ok := (*target).Message.(*ConnectResponse_Ack); !ok {
			(*target).Message = &ConnectResponse_Ack{}
		}
		fpvs.subPathValue.(Ack_FieldPathValue).SetTo(&(*target).Message.(*ConnectResponse_Ack).Ack)
	case ConnectResponse_FieldPathSelectorData:
		if _, ok := (*target).Message.(*ConnectResponse_Data); !ok {
			(*target).Message = &ConnectResponse_Data{}
		}
		fpvs.subPathValue.(Data_FieldPathValue).SetTo(&(*target).Message.(*ConnectResponse_Data).Data)
	case ConnectResponse_FieldPathSelectorClose:
		if _, ok := (*target).Message.(*ConnectResponse_Close); !ok {
			(*target).Message = &ConnectResponse_Close{}
		}
		fpvs.subPathValue.(Close_FieldPathValue).SetTo(&(*target).Message.(*ConnectResponse_Close).Close)
	case ConnectResponse_FieldPathSelectorError:
		if _, ok := (*target).Message.(*ConnectResponse_Error); !ok {
			(*target).Message = &ConnectResponse_Error{}
		}
		fpvs.subPathValue.(Error_FieldPathValue).SetTo(&(*target).Message.(*ConnectResponse_Error).Error)
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ConnectResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ConnectResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ConnectResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ConnectResponse_FieldSubPathValue) CompareWith(source *ConnectResponse) (int, bool) {
	switch fpvs.Selector() {
	case ConnectResponse_FieldPathSelectorOpenResponse:
		return fpvs.subPathValue.(ConnectResponseOpenResponse_FieldPathValue).CompareWith(source.GetOpenResponse())
	case ConnectResponse_FieldPathSelectorResumeResponse:
		return fpvs.subPathValue.(ConnectResponseResumeResponse_FieldPathValue).CompareWith(source.GetResumeResponse())
	case ConnectResponse_FieldPathSelectorChannelOpenError:
		return fpvs.subPathValue.(ConnectResponseChannelOpenError_FieldPathValue).CompareWith(source.GetChannelOpenError())
	case ConnectResponse_FieldPathSelectorAck:
		return fpvs.subPathValue.(Ack_FieldPathValue).CompareWith(source.GetAck())
	case ConnectResponse_FieldPathSelectorData:
		return fpvs.subPathValue.(Data_FieldPathValue).CompareWith(source.GetData())
	case ConnectResponse_FieldPathSelectorClose:
		return fpvs.subPathValue.(Close_FieldPathValue).CompareWith(source.GetClose())
	case ConnectResponse_FieldPathSelectorError:
		return fpvs.subPathValue.(Error_FieldPathValue).CompareWith(source.GetError())
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ConnectResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ConnectResponse))
}

// ConnectResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for ConnectResponse according to their type
// Present only for array (repeated) types.
type ConnectResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ConnectResponse_FieldPath
	ContainsValue(*ConnectResponse) bool
}

// ParseConnectResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseConnectResponse_FieldPathArrayItemValue(pathStr, valueStr string) (ConnectResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseConnectResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ConnectResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ConnectResponse_FieldPathArrayItemValue), nil
}

func MustParseConnectResponse_FieldPathArrayItemValue(pathStr, valueStr string) ConnectResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseConnectResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ConnectResponse_FieldTerminalPathArrayItemValue struct {
	ConnectResponse_FieldTerminalPath
	value interface{}
}

var _ ConnectResponse_FieldPathArrayItemValue = (*ConnectResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ConnectResponse as interface{}
func (fpaiv *ConnectResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ConnectResponse_FieldTerminalPathArrayItemValue) GetSingle(source *ConnectResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ConnectResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ConnectResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ConnectResponse'
func (fpaiv *ConnectResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *ConnectResponse) bool {
	slice := fpaiv.ConnectResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ConnectResponse_FieldSubPathArrayItemValue struct {
	ConnectResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ConnectResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ConnectResponse_FieldSubPathArrayItemValue) AsOpenResponsePathItemValue() (ConnectResponseOpenResponse_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ConnectResponseOpenResponse_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *ConnectResponse_FieldSubPathArrayItemValue) AsResumeResponsePathItemValue() (ConnectResponseResumeResponse_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ConnectResponseResumeResponse_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *ConnectResponse_FieldSubPathArrayItemValue) AsChannelOpenErrorPathItemValue() (ConnectResponseChannelOpenError_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ConnectResponseChannelOpenError_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *ConnectResponse_FieldSubPathArrayItemValue) AsAckPathItemValue() (Ack_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(Ack_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *ConnectResponse_FieldSubPathArrayItemValue) AsDataPathItemValue() (Data_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(Data_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *ConnectResponse_FieldSubPathArrayItemValue) AsClosePathItemValue() (Close_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(Close_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *ConnectResponse_FieldSubPathArrayItemValue) AsErrorPathItemValue() (Error_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(Error_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ConnectResponse'
func (fpaivs *ConnectResponse_FieldSubPathArrayItemValue) ContainsValue(source *ConnectResponse) bool {
	switch fpaivs.Selector() {
	case ConnectResponse_FieldPathSelectorOpenResponse:
		return fpaivs.subPathItemValue.(ConnectResponseOpenResponse_FieldPathArrayItemValue).ContainsValue(source.GetOpenResponse())
	case ConnectResponse_FieldPathSelectorResumeResponse:
		return fpaivs.subPathItemValue.(ConnectResponseResumeResponse_FieldPathArrayItemValue).ContainsValue(source.GetResumeResponse())
	case ConnectResponse_FieldPathSelectorChannelOpenError:
		return fpaivs.subPathItemValue.(ConnectResponseChannelOpenError_FieldPathArrayItemValue).ContainsValue(source.GetChannelOpenError())
	case ConnectResponse_FieldPathSelectorAck:
		return fpaivs.subPathItemValue.(Ack_FieldPathArrayItemValue).ContainsValue(source.GetAck())
	case ConnectResponse_FieldPathSelectorData:
		return fpaivs.subPathItemValue.(Data_FieldPathArrayItemValue).ContainsValue(source.GetData())
	case ConnectResponse_FieldPathSelectorClose:
		return fpaivs.subPathItemValue.(Close_FieldPathArrayItemValue).ContainsValue(source.GetClose())
	case ConnectResponse_FieldPathSelectorError:
		return fpaivs.subPathItemValue.(Error_FieldPathArrayItemValue).ContainsValue(source.GetError())
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectResponse: %d", fpaivs.Selector()))
	}
}

// ConnectResponse_FieldPathArrayOfValues allows storing slice of values for ConnectResponse fields according to their type
type ConnectResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ConnectResponse_FieldPath
}

func ParseConnectResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (ConnectResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseConnectResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ConnectResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ConnectResponse_FieldPathArrayOfValues), nil
}

func MustParseConnectResponse_FieldPathArrayOfValues(pathStr, valuesStr string) ConnectResponse_FieldPathArrayOfValues {
	fpaov, err := ParseConnectResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ConnectResponse_FieldTerminalPathArrayOfValues struct {
	ConnectResponse_FieldTerminalPath
	values interface{}
}

var _ ConnectResponse_FieldPathArrayOfValues = (*ConnectResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ConnectResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ConnectResponse_FieldPathSelectorOpenResponse:
		for _, v := range fpaov.values.([]*ConnectResponse_OpenResponse) {
			values = append(values, v)
		}
	case ConnectResponse_FieldPathSelectorResumeResponse:
		for _, v := range fpaov.values.([]*ConnectResponse_ResumeResponse) {
			values = append(values, v)
		}
	case ConnectResponse_FieldPathSelectorChannelOpenError:
		for _, v := range fpaov.values.([]*ConnectResponse_ChannelOpenError) {
			values = append(values, v)
		}
	case ConnectResponse_FieldPathSelectorAck:
		for _, v := range fpaov.values.([]*Ack) {
			values = append(values, v)
		}
	case ConnectResponse_FieldPathSelectorData:
		for _, v := range fpaov.values.([]*Data) {
			values = append(values, v)
		}
	case ConnectResponse_FieldPathSelectorClose:
		for _, v := range fpaov.values.([]*Close) {
			values = append(values, v)
		}
	case ConnectResponse_FieldPathSelectorError:
		for _, v := range fpaov.values.([]*Error) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ConnectResponse_FieldTerminalPathArrayOfValues) AsOpenResponseArrayOfValues() ([]*ConnectResponse_OpenResponse, bool) {
	res, ok := fpaov.values.([]*ConnectResponse_OpenResponse)
	return res, ok
}
func (fpaov *ConnectResponse_FieldTerminalPathArrayOfValues) AsResumeResponseArrayOfValues() ([]*ConnectResponse_ResumeResponse, bool) {
	res, ok := fpaov.values.([]*ConnectResponse_ResumeResponse)
	return res, ok
}
func (fpaov *ConnectResponse_FieldTerminalPathArrayOfValues) AsChannelOpenErrorArrayOfValues() ([]*ConnectResponse_ChannelOpenError, bool) {
	res, ok := fpaov.values.([]*ConnectResponse_ChannelOpenError)
	return res, ok
}
func (fpaov *ConnectResponse_FieldTerminalPathArrayOfValues) AsAckArrayOfValues() ([]*Ack, bool) {
	res, ok := fpaov.values.([]*Ack)
	return res, ok
}
func (fpaov *ConnectResponse_FieldTerminalPathArrayOfValues) AsDataArrayOfValues() ([]*Data, bool) {
	res, ok := fpaov.values.([]*Data)
	return res, ok
}
func (fpaov *ConnectResponse_FieldTerminalPathArrayOfValues) AsCloseArrayOfValues() ([]*Close, bool) {
	res, ok := fpaov.values.([]*Close)
	return res, ok
}
func (fpaov *ConnectResponse_FieldTerminalPathArrayOfValues) AsErrorArrayOfValues() ([]*Error, bool) {
	res, ok := fpaov.values.([]*Error)
	return res, ok
}

type ConnectResponse_FieldSubPathArrayOfValues struct {
	ConnectResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ConnectResponse_FieldPathArrayOfValues = (*ConnectResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ConnectResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ConnectResponse_FieldSubPathArrayOfValues) AsOpenResponsePathArrayOfValues() (ConnectResponseOpenResponse_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ConnectResponseOpenResponse_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *ConnectResponse_FieldSubPathArrayOfValues) AsResumeResponsePathArrayOfValues() (ConnectResponseResumeResponse_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ConnectResponseResumeResponse_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *ConnectResponse_FieldSubPathArrayOfValues) AsChannelOpenErrorPathArrayOfValues() (ConnectResponseChannelOpenError_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ConnectResponseChannelOpenError_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *ConnectResponse_FieldSubPathArrayOfValues) AsAckPathArrayOfValues() (Ack_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(Ack_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *ConnectResponse_FieldSubPathArrayOfValues) AsDataPathArrayOfValues() (Data_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(Data_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *ConnectResponse_FieldSubPathArrayOfValues) AsClosePathArrayOfValues() (Close_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(Close_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *ConnectResponse_FieldSubPathArrayOfValues) AsErrorPathArrayOfValues() (Error_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(Error_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ConnectResponseOpenResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() ConnectResponseOpenResponse_FieldPathSelector
	Get(source *ConnectResponse_OpenResponse) []interface{}
	GetSingle(source *ConnectResponse_OpenResponse) (interface{}, bool)
	ClearValue(item *ConnectResponse_OpenResponse)

	// Those methods build corresponding ConnectResponseOpenResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ConnectResponseOpenResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) ConnectResponseOpenResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ConnectResponseOpenResponse_FieldPathArrayItemValue
}

type ConnectResponseOpenResponse_FieldPathSelector int32

const (
	ConnectResponseOpenResponse_FieldPathSelectorSessionId ConnectResponseOpenResponse_FieldPathSelector = 0
	ConnectResponseOpenResponse_FieldPathSelectorChannelId ConnectResponseOpenResponse_FieldPathSelector = 1
)

func (s ConnectResponseOpenResponse_FieldPathSelector) String() string {
	switch s {
	case ConnectResponseOpenResponse_FieldPathSelectorSessionId:
		return "session_id"
	case ConnectResponseOpenResponse_FieldPathSelectorChannelId:
		return "channel_id"
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectResponse_OpenResponse: %d", s))
	}
}

func BuildConnectResponseOpenResponse_FieldPath(fp gotenobject.RawFieldPath) (ConnectResponseOpenResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ConnectResponse_OpenResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "session_id", "sessionId", "session-id":
			return &ConnectResponseOpenResponse_FieldTerminalPath{selector: ConnectResponseOpenResponse_FieldPathSelectorSessionId}, nil
		case "channel_id", "channelId", "channel-id":
			return &ConnectResponseOpenResponse_FieldTerminalPath{selector: ConnectResponseOpenResponse_FieldPathSelectorChannelId}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ConnectResponse_OpenResponse", fp)
}

func ParseConnectResponseOpenResponse_FieldPath(rawField string) (ConnectResponseOpenResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildConnectResponseOpenResponse_FieldPath(fp)
}

func MustParseConnectResponseOpenResponse_FieldPath(rawField string) ConnectResponseOpenResponse_FieldPath {
	fp, err := ParseConnectResponseOpenResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ConnectResponseOpenResponse_FieldTerminalPath struct {
	selector ConnectResponseOpenResponse_FieldPathSelector
}

var _ ConnectResponseOpenResponse_FieldPath = (*ConnectResponseOpenResponse_FieldTerminalPath)(nil)

func (fp *ConnectResponseOpenResponse_FieldTerminalPath) Selector() ConnectResponseOpenResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ConnectResponseOpenResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ConnectResponseOpenResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ConnectResponse_OpenResponse
func (fp *ConnectResponseOpenResponse_FieldTerminalPath) Get(source *ConnectResponse_OpenResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ConnectResponseOpenResponse_FieldPathSelectorSessionId:
			values = append(values, source.SessionId)
		case ConnectResponseOpenResponse_FieldPathSelectorChannelId:
			values = append(values, source.ChannelId)
		default:
			panic(fmt.Sprintf("Invalid selector for ConnectResponse_OpenResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *ConnectResponseOpenResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ConnectResponse_OpenResponse))
}

// GetSingle returns value pointed by specific field of from source ConnectResponse_OpenResponse
func (fp *ConnectResponseOpenResponse_FieldTerminalPath) GetSingle(source *ConnectResponse_OpenResponse) (interface{}, bool) {
	switch fp.selector {
	case ConnectResponseOpenResponse_FieldPathSelectorSessionId:
		return source.GetSessionId(), source != nil
	case ConnectResponseOpenResponse_FieldPathSelectorChannelId:
		return source.GetChannelId(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectResponse_OpenResponse: %d", fp.selector))
	}
}

func (fp *ConnectResponseOpenResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ConnectResponse_OpenResponse))
}

// GetDefault returns a default value of the field type
func (fp *ConnectResponseOpenResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ConnectResponseOpenResponse_FieldPathSelectorSessionId:
		return uint64(0)
	case ConnectResponseOpenResponse_FieldPathSelectorChannelId:
		return uint64(0)
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectResponse_OpenResponse: %d", fp.selector))
	}
}

func (fp *ConnectResponseOpenResponse_FieldTerminalPath) ClearValue(item *ConnectResponse_OpenResponse) {
	if item != nil {
		switch fp.selector {
		case ConnectResponseOpenResponse_FieldPathSelectorSessionId:
			item.SessionId = uint64(0)
		case ConnectResponseOpenResponse_FieldPathSelectorChannelId:
			item.ChannelId = uint64(0)
		default:
			panic(fmt.Sprintf("Invalid selector for ConnectResponse_OpenResponse: %d", fp.selector))
		}
	}
}

func (fp *ConnectResponseOpenResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ConnectResponse_OpenResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *ConnectResponseOpenResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ConnectResponseOpenResponse_FieldPathSelectorSessionId ||
		fp.selector == ConnectResponseOpenResponse_FieldPathSelectorChannelId
}

func (fp *ConnectResponseOpenResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ConnectResponseOpenResponse_FieldTerminalPath) WithIValue(value interface{}) ConnectResponseOpenResponse_FieldPathValue {
	switch fp.selector {
	case ConnectResponseOpenResponse_FieldPathSelectorSessionId:
		return &ConnectResponseOpenResponse_FieldTerminalPathValue{ConnectResponseOpenResponse_FieldTerminalPath: *fp, value: value.(uint64)}
	case ConnectResponseOpenResponse_FieldPathSelectorChannelId:
		return &ConnectResponseOpenResponse_FieldTerminalPathValue{ConnectResponseOpenResponse_FieldTerminalPath: *fp, value: value.(uint64)}
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectResponse_OpenResponse: %d", fp.selector))
	}
}

func (fp *ConnectResponseOpenResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ConnectResponseOpenResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) ConnectResponseOpenResponse_FieldPathArrayOfValues {
	fpaov := &ConnectResponseOpenResponse_FieldTerminalPathArrayOfValues{ConnectResponseOpenResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case ConnectResponseOpenResponse_FieldPathSelectorSessionId:
		return &ConnectResponseOpenResponse_FieldTerminalPathArrayOfValues{ConnectResponseOpenResponse_FieldTerminalPath: *fp, values: values.([]uint64)}
	case ConnectResponseOpenResponse_FieldPathSelectorChannelId:
		return &ConnectResponseOpenResponse_FieldTerminalPathArrayOfValues{ConnectResponseOpenResponse_FieldTerminalPath: *fp, values: values.([]uint64)}
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectResponse_OpenResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *ConnectResponseOpenResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ConnectResponseOpenResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) ConnectResponseOpenResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectResponse_OpenResponse: %d", fp.selector))
	}
}

func (fp *ConnectResponseOpenResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ConnectResponseOpenResponse_FieldPathValue allows storing values for OpenResponse fields according to their type
type ConnectResponseOpenResponse_FieldPathValue interface {
	ConnectResponseOpenResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ConnectResponse_OpenResponse)
	CompareWith(*ConnectResponse_OpenResponse) (cmp int, comparable bool)
}

func ParseConnectResponseOpenResponse_FieldPathValue(pathStr, valueStr string) (ConnectResponseOpenResponse_FieldPathValue, error) {
	fp, err := ParseConnectResponseOpenResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing OpenResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(ConnectResponseOpenResponse_FieldPathValue), nil
}

func MustParseConnectResponseOpenResponse_FieldPathValue(pathStr, valueStr string) ConnectResponseOpenResponse_FieldPathValue {
	fpv, err := ParseConnectResponseOpenResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ConnectResponseOpenResponse_FieldTerminalPathValue struct {
	ConnectResponseOpenResponse_FieldTerminalPath
	value interface{}
}

var _ ConnectResponseOpenResponse_FieldPathValue = (*ConnectResponseOpenResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'OpenResponse' as interface{}
func (fpv *ConnectResponseOpenResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ConnectResponseOpenResponse_FieldTerminalPathValue) AsSessionIdValue() (uint64, bool) {
	res, ok := fpv.value.(uint64)
	return res, ok
}
func (fpv *ConnectResponseOpenResponse_FieldTerminalPathValue) AsChannelIdValue() (uint64, bool) {
	res, ok := fpv.value.(uint64)
	return res, ok
}

// SetTo stores value for selected field for object OpenResponse
func (fpv *ConnectResponseOpenResponse_FieldTerminalPathValue) SetTo(target **ConnectResponse_OpenResponse) {
	if *target == nil {
		*target = new(ConnectResponse_OpenResponse)
	}
	switch fpv.selector {
	case ConnectResponseOpenResponse_FieldPathSelectorSessionId:
		(*target).SessionId = fpv.value.(uint64)
	case ConnectResponseOpenResponse_FieldPathSelectorChannelId:
		(*target).ChannelId = fpv.value.(uint64)
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectResponse_OpenResponse: %d", fpv.selector))
	}
}

func (fpv *ConnectResponseOpenResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ConnectResponse_OpenResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ConnectResponseOpenResponse_FieldTerminalPathValue' with the value under path in 'ConnectResponse_OpenResponse'.
func (fpv *ConnectResponseOpenResponse_FieldTerminalPathValue) CompareWith(source *ConnectResponse_OpenResponse) (int, bool) {
	switch fpv.selector {
	case ConnectResponseOpenResponse_FieldPathSelectorSessionId:
		leftValue := fpv.value.(uint64)
		rightValue := source.GetSessionId()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ConnectResponseOpenResponse_FieldPathSelectorChannelId:
		leftValue := fpv.value.(uint64)
		rightValue := source.GetChannelId()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectResponse_OpenResponse: %d", fpv.selector))
	}
}

func (fpv *ConnectResponseOpenResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ConnectResponse_OpenResponse))
}

// ConnectResponseOpenResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for OpenResponse according to their type
// Present only for array (repeated) types.
type ConnectResponseOpenResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ConnectResponseOpenResponse_FieldPath
	ContainsValue(*ConnectResponse_OpenResponse) bool
}

// ParseConnectResponseOpenResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseConnectResponseOpenResponse_FieldPathArrayItemValue(pathStr, valueStr string) (ConnectResponseOpenResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseConnectResponseOpenResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing OpenResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ConnectResponseOpenResponse_FieldPathArrayItemValue), nil
}

func MustParseConnectResponseOpenResponse_FieldPathArrayItemValue(pathStr, valueStr string) ConnectResponseOpenResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseConnectResponseOpenResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ConnectResponseOpenResponse_FieldTerminalPathArrayItemValue struct {
	ConnectResponseOpenResponse_FieldTerminalPath
	value interface{}
}

var _ ConnectResponseOpenResponse_FieldPathArrayItemValue = (*ConnectResponseOpenResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ConnectResponse_OpenResponse as interface{}
func (fpaiv *ConnectResponseOpenResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ConnectResponseOpenResponse_FieldTerminalPathArrayItemValue) GetSingle(source *ConnectResponse_OpenResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ConnectResponseOpenResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ConnectResponse_OpenResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'OpenResponse'
func (fpaiv *ConnectResponseOpenResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *ConnectResponse_OpenResponse) bool {
	slice := fpaiv.ConnectResponseOpenResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ConnectResponseOpenResponse_FieldPathArrayOfValues allows storing slice of values for OpenResponse fields according to their type
type ConnectResponseOpenResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ConnectResponseOpenResponse_FieldPath
}

func ParseConnectResponseOpenResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (ConnectResponseOpenResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseConnectResponseOpenResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing OpenResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ConnectResponseOpenResponse_FieldPathArrayOfValues), nil
}

func MustParseConnectResponseOpenResponse_FieldPathArrayOfValues(pathStr, valuesStr string) ConnectResponseOpenResponse_FieldPathArrayOfValues {
	fpaov, err := ParseConnectResponseOpenResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ConnectResponseOpenResponse_FieldTerminalPathArrayOfValues struct {
	ConnectResponseOpenResponse_FieldTerminalPath
	values interface{}
}

var _ ConnectResponseOpenResponse_FieldPathArrayOfValues = (*ConnectResponseOpenResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ConnectResponseOpenResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ConnectResponseOpenResponse_FieldPathSelectorSessionId:
		for _, v := range fpaov.values.([]uint64) {
			values = append(values, v)
		}
	case ConnectResponseOpenResponse_FieldPathSelectorChannelId:
		for _, v := range fpaov.values.([]uint64) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ConnectResponseOpenResponse_FieldTerminalPathArrayOfValues) AsSessionIdArrayOfValues() ([]uint64, bool) {
	res, ok := fpaov.values.([]uint64)
	return res, ok
}
func (fpaov *ConnectResponseOpenResponse_FieldTerminalPathArrayOfValues) AsChannelIdArrayOfValues() ([]uint64, bool) {
	res, ok := fpaov.values.([]uint64)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ConnectResponseResumeResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() ConnectResponseResumeResponse_FieldPathSelector
	Get(source *ConnectResponse_ResumeResponse) []interface{}
	GetSingle(source *ConnectResponse_ResumeResponse) (interface{}, bool)
	ClearValue(item *ConnectResponse_ResumeResponse)

	// Those methods build corresponding ConnectResponseResumeResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ConnectResponseResumeResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) ConnectResponseResumeResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ConnectResponseResumeResponse_FieldPathArrayItemValue
}

type ConnectResponseResumeResponse_FieldPathSelector int32

const (
	ConnectResponseResumeResponse_FieldPathSelectorSessionId     ConnectResponseResumeResponse_FieldPathSelector = 0
	ConnectResponseResumeResponse_FieldPathSelectorChannelId     ConnectResponseResumeResponse_FieldPathSelector = 1
	ConnectResponseResumeResponse_FieldPathSelectorLastMessageId ConnectResponseResumeResponse_FieldPathSelector = 2
)

func (s ConnectResponseResumeResponse_FieldPathSelector) String() string {
	switch s {
	case ConnectResponseResumeResponse_FieldPathSelectorSessionId:
		return "session_id"
	case ConnectResponseResumeResponse_FieldPathSelectorChannelId:
		return "channel_id"
	case ConnectResponseResumeResponse_FieldPathSelectorLastMessageId:
		return "last_message_id"
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectResponse_ResumeResponse: %d", s))
	}
}

func BuildConnectResponseResumeResponse_FieldPath(fp gotenobject.RawFieldPath) (ConnectResponseResumeResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ConnectResponse_ResumeResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "session_id", "sessionId", "session-id":
			return &ConnectResponseResumeResponse_FieldTerminalPath{selector: ConnectResponseResumeResponse_FieldPathSelectorSessionId}, nil
		case "channel_id", "channelId", "channel-id":
			return &ConnectResponseResumeResponse_FieldTerminalPath{selector: ConnectResponseResumeResponse_FieldPathSelectorChannelId}, nil
		case "last_message_id", "lastMessageId", "last-message-id":
			return &ConnectResponseResumeResponse_FieldTerminalPath{selector: ConnectResponseResumeResponse_FieldPathSelectorLastMessageId}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ConnectResponse_ResumeResponse", fp)
}

func ParseConnectResponseResumeResponse_FieldPath(rawField string) (ConnectResponseResumeResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildConnectResponseResumeResponse_FieldPath(fp)
}

func MustParseConnectResponseResumeResponse_FieldPath(rawField string) ConnectResponseResumeResponse_FieldPath {
	fp, err := ParseConnectResponseResumeResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ConnectResponseResumeResponse_FieldTerminalPath struct {
	selector ConnectResponseResumeResponse_FieldPathSelector
}

var _ ConnectResponseResumeResponse_FieldPath = (*ConnectResponseResumeResponse_FieldTerminalPath)(nil)

func (fp *ConnectResponseResumeResponse_FieldTerminalPath) Selector() ConnectResponseResumeResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ConnectResponseResumeResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ConnectResponseResumeResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ConnectResponse_ResumeResponse
func (fp *ConnectResponseResumeResponse_FieldTerminalPath) Get(source *ConnectResponse_ResumeResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ConnectResponseResumeResponse_FieldPathSelectorSessionId:
			values = append(values, source.SessionId)
		case ConnectResponseResumeResponse_FieldPathSelectorChannelId:
			values = append(values, source.ChannelId)
		case ConnectResponseResumeResponse_FieldPathSelectorLastMessageId:
			values = append(values, source.LastMessageId)
		default:
			panic(fmt.Sprintf("Invalid selector for ConnectResponse_ResumeResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *ConnectResponseResumeResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ConnectResponse_ResumeResponse))
}

// GetSingle returns value pointed by specific field of from source ConnectResponse_ResumeResponse
func (fp *ConnectResponseResumeResponse_FieldTerminalPath) GetSingle(source *ConnectResponse_ResumeResponse) (interface{}, bool) {
	switch fp.selector {
	case ConnectResponseResumeResponse_FieldPathSelectorSessionId:
		return source.GetSessionId(), source != nil
	case ConnectResponseResumeResponse_FieldPathSelectorChannelId:
		return source.GetChannelId(), source != nil
	case ConnectResponseResumeResponse_FieldPathSelectorLastMessageId:
		return source.GetLastMessageId(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectResponse_ResumeResponse: %d", fp.selector))
	}
}

func (fp *ConnectResponseResumeResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ConnectResponse_ResumeResponse))
}

// GetDefault returns a default value of the field type
func (fp *ConnectResponseResumeResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ConnectResponseResumeResponse_FieldPathSelectorSessionId:
		return uint64(0)
	case ConnectResponseResumeResponse_FieldPathSelectorChannelId:
		return uint64(0)
	case ConnectResponseResumeResponse_FieldPathSelectorLastMessageId:
		return uint64(0)
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectResponse_ResumeResponse: %d", fp.selector))
	}
}

func (fp *ConnectResponseResumeResponse_FieldTerminalPath) ClearValue(item *ConnectResponse_ResumeResponse) {
	if item != nil {
		switch fp.selector {
		case ConnectResponseResumeResponse_FieldPathSelectorSessionId:
			item.SessionId = uint64(0)
		case ConnectResponseResumeResponse_FieldPathSelectorChannelId:
			item.ChannelId = uint64(0)
		case ConnectResponseResumeResponse_FieldPathSelectorLastMessageId:
			item.LastMessageId = uint64(0)
		default:
			panic(fmt.Sprintf("Invalid selector for ConnectResponse_ResumeResponse: %d", fp.selector))
		}
	}
}

func (fp *ConnectResponseResumeResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ConnectResponse_ResumeResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *ConnectResponseResumeResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ConnectResponseResumeResponse_FieldPathSelectorSessionId ||
		fp.selector == ConnectResponseResumeResponse_FieldPathSelectorChannelId ||
		fp.selector == ConnectResponseResumeResponse_FieldPathSelectorLastMessageId
}

func (fp *ConnectResponseResumeResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ConnectResponseResumeResponse_FieldTerminalPath) WithIValue(value interface{}) ConnectResponseResumeResponse_FieldPathValue {
	switch fp.selector {
	case ConnectResponseResumeResponse_FieldPathSelectorSessionId:
		return &ConnectResponseResumeResponse_FieldTerminalPathValue{ConnectResponseResumeResponse_FieldTerminalPath: *fp, value: value.(uint64)}
	case ConnectResponseResumeResponse_FieldPathSelectorChannelId:
		return &ConnectResponseResumeResponse_FieldTerminalPathValue{ConnectResponseResumeResponse_FieldTerminalPath: *fp, value: value.(uint64)}
	case ConnectResponseResumeResponse_FieldPathSelectorLastMessageId:
		return &ConnectResponseResumeResponse_FieldTerminalPathValue{ConnectResponseResumeResponse_FieldTerminalPath: *fp, value: value.(uint64)}
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectResponse_ResumeResponse: %d", fp.selector))
	}
}

func (fp *ConnectResponseResumeResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ConnectResponseResumeResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) ConnectResponseResumeResponse_FieldPathArrayOfValues {
	fpaov := &ConnectResponseResumeResponse_FieldTerminalPathArrayOfValues{ConnectResponseResumeResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case ConnectResponseResumeResponse_FieldPathSelectorSessionId:
		return &ConnectResponseResumeResponse_FieldTerminalPathArrayOfValues{ConnectResponseResumeResponse_FieldTerminalPath: *fp, values: values.([]uint64)}
	case ConnectResponseResumeResponse_FieldPathSelectorChannelId:
		return &ConnectResponseResumeResponse_FieldTerminalPathArrayOfValues{ConnectResponseResumeResponse_FieldTerminalPath: *fp, values: values.([]uint64)}
	case ConnectResponseResumeResponse_FieldPathSelectorLastMessageId:
		return &ConnectResponseResumeResponse_FieldTerminalPathArrayOfValues{ConnectResponseResumeResponse_FieldTerminalPath: *fp, values: values.([]uint64)}
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectResponse_ResumeResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *ConnectResponseResumeResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ConnectResponseResumeResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) ConnectResponseResumeResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectResponse_ResumeResponse: %d", fp.selector))
	}
}

func (fp *ConnectResponseResumeResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ConnectResponseResumeResponse_FieldPathValue allows storing values for ResumeResponse fields according to their type
type ConnectResponseResumeResponse_FieldPathValue interface {
	ConnectResponseResumeResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ConnectResponse_ResumeResponse)
	CompareWith(*ConnectResponse_ResumeResponse) (cmp int, comparable bool)
}

func ParseConnectResponseResumeResponse_FieldPathValue(pathStr, valueStr string) (ConnectResponseResumeResponse_FieldPathValue, error) {
	fp, err := ParseConnectResponseResumeResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ResumeResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(ConnectResponseResumeResponse_FieldPathValue), nil
}

func MustParseConnectResponseResumeResponse_FieldPathValue(pathStr, valueStr string) ConnectResponseResumeResponse_FieldPathValue {
	fpv, err := ParseConnectResponseResumeResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ConnectResponseResumeResponse_FieldTerminalPathValue struct {
	ConnectResponseResumeResponse_FieldTerminalPath
	value interface{}
}

var _ ConnectResponseResumeResponse_FieldPathValue = (*ConnectResponseResumeResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ResumeResponse' as interface{}
func (fpv *ConnectResponseResumeResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ConnectResponseResumeResponse_FieldTerminalPathValue) AsSessionIdValue() (uint64, bool) {
	res, ok := fpv.value.(uint64)
	return res, ok
}
func (fpv *ConnectResponseResumeResponse_FieldTerminalPathValue) AsChannelIdValue() (uint64, bool) {
	res, ok := fpv.value.(uint64)
	return res, ok
}
func (fpv *ConnectResponseResumeResponse_FieldTerminalPathValue) AsLastMessageIdValue() (uint64, bool) {
	res, ok := fpv.value.(uint64)
	return res, ok
}

// SetTo stores value for selected field for object ResumeResponse
func (fpv *ConnectResponseResumeResponse_FieldTerminalPathValue) SetTo(target **ConnectResponse_ResumeResponse) {
	if *target == nil {
		*target = new(ConnectResponse_ResumeResponse)
	}
	switch fpv.selector {
	case ConnectResponseResumeResponse_FieldPathSelectorSessionId:
		(*target).SessionId = fpv.value.(uint64)
	case ConnectResponseResumeResponse_FieldPathSelectorChannelId:
		(*target).ChannelId = fpv.value.(uint64)
	case ConnectResponseResumeResponse_FieldPathSelectorLastMessageId:
		(*target).LastMessageId = fpv.value.(uint64)
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectResponse_ResumeResponse: %d", fpv.selector))
	}
}

func (fpv *ConnectResponseResumeResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ConnectResponse_ResumeResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ConnectResponseResumeResponse_FieldTerminalPathValue' with the value under path in 'ConnectResponse_ResumeResponse'.
func (fpv *ConnectResponseResumeResponse_FieldTerminalPathValue) CompareWith(source *ConnectResponse_ResumeResponse) (int, bool) {
	switch fpv.selector {
	case ConnectResponseResumeResponse_FieldPathSelectorSessionId:
		leftValue := fpv.value.(uint64)
		rightValue := source.GetSessionId()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ConnectResponseResumeResponse_FieldPathSelectorChannelId:
		leftValue := fpv.value.(uint64)
		rightValue := source.GetChannelId()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ConnectResponseResumeResponse_FieldPathSelectorLastMessageId:
		leftValue := fpv.value.(uint64)
		rightValue := source.GetLastMessageId()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectResponse_ResumeResponse: %d", fpv.selector))
	}
}

func (fpv *ConnectResponseResumeResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ConnectResponse_ResumeResponse))
}

// ConnectResponseResumeResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for ResumeResponse according to their type
// Present only for array (repeated) types.
type ConnectResponseResumeResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ConnectResponseResumeResponse_FieldPath
	ContainsValue(*ConnectResponse_ResumeResponse) bool
}

// ParseConnectResponseResumeResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseConnectResponseResumeResponse_FieldPathArrayItemValue(pathStr, valueStr string) (ConnectResponseResumeResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseConnectResponseResumeResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ResumeResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ConnectResponseResumeResponse_FieldPathArrayItemValue), nil
}

func MustParseConnectResponseResumeResponse_FieldPathArrayItemValue(pathStr, valueStr string) ConnectResponseResumeResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseConnectResponseResumeResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ConnectResponseResumeResponse_FieldTerminalPathArrayItemValue struct {
	ConnectResponseResumeResponse_FieldTerminalPath
	value interface{}
}

var _ ConnectResponseResumeResponse_FieldPathArrayItemValue = (*ConnectResponseResumeResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ConnectResponse_ResumeResponse as interface{}
func (fpaiv *ConnectResponseResumeResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ConnectResponseResumeResponse_FieldTerminalPathArrayItemValue) GetSingle(source *ConnectResponse_ResumeResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ConnectResponseResumeResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ConnectResponse_ResumeResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ResumeResponse'
func (fpaiv *ConnectResponseResumeResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *ConnectResponse_ResumeResponse) bool {
	slice := fpaiv.ConnectResponseResumeResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ConnectResponseResumeResponse_FieldPathArrayOfValues allows storing slice of values for ResumeResponse fields according to their type
type ConnectResponseResumeResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ConnectResponseResumeResponse_FieldPath
}

func ParseConnectResponseResumeResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (ConnectResponseResumeResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseConnectResponseResumeResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ResumeResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ConnectResponseResumeResponse_FieldPathArrayOfValues), nil
}

func MustParseConnectResponseResumeResponse_FieldPathArrayOfValues(pathStr, valuesStr string) ConnectResponseResumeResponse_FieldPathArrayOfValues {
	fpaov, err := ParseConnectResponseResumeResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ConnectResponseResumeResponse_FieldTerminalPathArrayOfValues struct {
	ConnectResponseResumeResponse_FieldTerminalPath
	values interface{}
}

var _ ConnectResponseResumeResponse_FieldPathArrayOfValues = (*ConnectResponseResumeResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ConnectResponseResumeResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ConnectResponseResumeResponse_FieldPathSelectorSessionId:
		for _, v := range fpaov.values.([]uint64) {
			values = append(values, v)
		}
	case ConnectResponseResumeResponse_FieldPathSelectorChannelId:
		for _, v := range fpaov.values.([]uint64) {
			values = append(values, v)
		}
	case ConnectResponseResumeResponse_FieldPathSelectorLastMessageId:
		for _, v := range fpaov.values.([]uint64) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ConnectResponseResumeResponse_FieldTerminalPathArrayOfValues) AsSessionIdArrayOfValues() ([]uint64, bool) {
	res, ok := fpaov.values.([]uint64)
	return res, ok
}
func (fpaov *ConnectResponseResumeResponse_FieldTerminalPathArrayOfValues) AsChannelIdArrayOfValues() ([]uint64, bool) {
	res, ok := fpaov.values.([]uint64)
	return res, ok
}
func (fpaov *ConnectResponseResumeResponse_FieldTerminalPathArrayOfValues) AsLastMessageIdArrayOfValues() ([]uint64, bool) {
	res, ok := fpaov.values.([]uint64)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ConnectResponseChannelOpenError_FieldPath interface {
	gotenobject.FieldPath
	Selector() ConnectResponseChannelOpenError_FieldPathSelector
	Get(source *ConnectResponse_ChannelOpenError) []interface{}
	GetSingle(source *ConnectResponse_ChannelOpenError) (interface{}, bool)
	ClearValue(item *ConnectResponse_ChannelOpenError)

	// Those methods build corresponding ConnectResponseChannelOpenError_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ConnectResponseChannelOpenError_FieldPathValue
	WithIArrayOfValues(values interface{}) ConnectResponseChannelOpenError_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ConnectResponseChannelOpenError_FieldPathArrayItemValue
}

type ConnectResponseChannelOpenError_FieldPathSelector int32

const (
	ConnectResponseChannelOpenError_FieldPathSelectorChannelId ConnectResponseChannelOpenError_FieldPathSelector = 0
	ConnectResponseChannelOpenError_FieldPathSelectorMessage   ConnectResponseChannelOpenError_FieldPathSelector = 1
)

func (s ConnectResponseChannelOpenError_FieldPathSelector) String() string {
	switch s {
	case ConnectResponseChannelOpenError_FieldPathSelectorChannelId:
		return "channel_id"
	case ConnectResponseChannelOpenError_FieldPathSelectorMessage:
		return "message"
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectResponse_ChannelOpenError: %d", s))
	}
}

func BuildConnectResponseChannelOpenError_FieldPath(fp gotenobject.RawFieldPath) (ConnectResponseChannelOpenError_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ConnectResponse_ChannelOpenError")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "channel_id", "channelId", "channel-id":
			return &ConnectResponseChannelOpenError_FieldTerminalPath{selector: ConnectResponseChannelOpenError_FieldPathSelectorChannelId}, nil
		case "message":
			return &ConnectResponseChannelOpenError_FieldTerminalPath{selector: ConnectResponseChannelOpenError_FieldPathSelectorMessage}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ConnectResponse_ChannelOpenError", fp)
}

func ParseConnectResponseChannelOpenError_FieldPath(rawField string) (ConnectResponseChannelOpenError_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildConnectResponseChannelOpenError_FieldPath(fp)
}

func MustParseConnectResponseChannelOpenError_FieldPath(rawField string) ConnectResponseChannelOpenError_FieldPath {
	fp, err := ParseConnectResponseChannelOpenError_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ConnectResponseChannelOpenError_FieldTerminalPath struct {
	selector ConnectResponseChannelOpenError_FieldPathSelector
}

var _ ConnectResponseChannelOpenError_FieldPath = (*ConnectResponseChannelOpenError_FieldTerminalPath)(nil)

func (fp *ConnectResponseChannelOpenError_FieldTerminalPath) Selector() ConnectResponseChannelOpenError_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ConnectResponseChannelOpenError_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ConnectResponseChannelOpenError_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ConnectResponse_ChannelOpenError
func (fp *ConnectResponseChannelOpenError_FieldTerminalPath) Get(source *ConnectResponse_ChannelOpenError) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ConnectResponseChannelOpenError_FieldPathSelectorChannelId:
			values = append(values, source.ChannelId)
		case ConnectResponseChannelOpenError_FieldPathSelectorMessage:
			values = append(values, source.Message)
		default:
			panic(fmt.Sprintf("Invalid selector for ConnectResponse_ChannelOpenError: %d", fp.selector))
		}
	}
	return
}

func (fp *ConnectResponseChannelOpenError_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ConnectResponse_ChannelOpenError))
}

// GetSingle returns value pointed by specific field of from source ConnectResponse_ChannelOpenError
func (fp *ConnectResponseChannelOpenError_FieldTerminalPath) GetSingle(source *ConnectResponse_ChannelOpenError) (interface{}, bool) {
	switch fp.selector {
	case ConnectResponseChannelOpenError_FieldPathSelectorChannelId:
		return source.GetChannelId(), source != nil
	case ConnectResponseChannelOpenError_FieldPathSelectorMessage:
		return source.GetMessage(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectResponse_ChannelOpenError: %d", fp.selector))
	}
}

func (fp *ConnectResponseChannelOpenError_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ConnectResponse_ChannelOpenError))
}

// GetDefault returns a default value of the field type
func (fp *ConnectResponseChannelOpenError_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ConnectResponseChannelOpenError_FieldPathSelectorChannelId:
		return uint64(0)
	case ConnectResponseChannelOpenError_FieldPathSelectorMessage:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectResponse_ChannelOpenError: %d", fp.selector))
	}
}

func (fp *ConnectResponseChannelOpenError_FieldTerminalPath) ClearValue(item *ConnectResponse_ChannelOpenError) {
	if item != nil {
		switch fp.selector {
		case ConnectResponseChannelOpenError_FieldPathSelectorChannelId:
			item.ChannelId = uint64(0)
		case ConnectResponseChannelOpenError_FieldPathSelectorMessage:
			item.Message = ""
		default:
			panic(fmt.Sprintf("Invalid selector for ConnectResponse_ChannelOpenError: %d", fp.selector))
		}
	}
}

func (fp *ConnectResponseChannelOpenError_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ConnectResponse_ChannelOpenError))
}

// IsLeaf - whether field path is holds simple value
func (fp *ConnectResponseChannelOpenError_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ConnectResponseChannelOpenError_FieldPathSelectorChannelId ||
		fp.selector == ConnectResponseChannelOpenError_FieldPathSelectorMessage
}

func (fp *ConnectResponseChannelOpenError_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ConnectResponseChannelOpenError_FieldTerminalPath) WithIValue(value interface{}) ConnectResponseChannelOpenError_FieldPathValue {
	switch fp.selector {
	case ConnectResponseChannelOpenError_FieldPathSelectorChannelId:
		return &ConnectResponseChannelOpenError_FieldTerminalPathValue{ConnectResponseChannelOpenError_FieldTerminalPath: *fp, value: value.(uint64)}
	case ConnectResponseChannelOpenError_FieldPathSelectorMessage:
		return &ConnectResponseChannelOpenError_FieldTerminalPathValue{ConnectResponseChannelOpenError_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectResponse_ChannelOpenError: %d", fp.selector))
	}
}

func (fp *ConnectResponseChannelOpenError_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ConnectResponseChannelOpenError_FieldTerminalPath) WithIArrayOfValues(values interface{}) ConnectResponseChannelOpenError_FieldPathArrayOfValues {
	fpaov := &ConnectResponseChannelOpenError_FieldTerminalPathArrayOfValues{ConnectResponseChannelOpenError_FieldTerminalPath: *fp}
	switch fp.selector {
	case ConnectResponseChannelOpenError_FieldPathSelectorChannelId:
		return &ConnectResponseChannelOpenError_FieldTerminalPathArrayOfValues{ConnectResponseChannelOpenError_FieldTerminalPath: *fp, values: values.([]uint64)}
	case ConnectResponseChannelOpenError_FieldPathSelectorMessage:
		return &ConnectResponseChannelOpenError_FieldTerminalPathArrayOfValues{ConnectResponseChannelOpenError_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectResponse_ChannelOpenError: %d", fp.selector))
	}
	return fpaov
}

func (fp *ConnectResponseChannelOpenError_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ConnectResponseChannelOpenError_FieldTerminalPath) WithIArrayItemValue(value interface{}) ConnectResponseChannelOpenError_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectResponse_ChannelOpenError: %d", fp.selector))
	}
}

func (fp *ConnectResponseChannelOpenError_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ConnectResponseChannelOpenError_FieldPathValue allows storing values for ChannelOpenError fields according to their type
type ConnectResponseChannelOpenError_FieldPathValue interface {
	ConnectResponseChannelOpenError_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ConnectResponse_ChannelOpenError)
	CompareWith(*ConnectResponse_ChannelOpenError) (cmp int, comparable bool)
}

func ParseConnectResponseChannelOpenError_FieldPathValue(pathStr, valueStr string) (ConnectResponseChannelOpenError_FieldPathValue, error) {
	fp, err := ParseConnectResponseChannelOpenError_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ChannelOpenError field path value from %s: %v", valueStr, err)
	}
	return fpv.(ConnectResponseChannelOpenError_FieldPathValue), nil
}

func MustParseConnectResponseChannelOpenError_FieldPathValue(pathStr, valueStr string) ConnectResponseChannelOpenError_FieldPathValue {
	fpv, err := ParseConnectResponseChannelOpenError_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ConnectResponseChannelOpenError_FieldTerminalPathValue struct {
	ConnectResponseChannelOpenError_FieldTerminalPath
	value interface{}
}

var _ ConnectResponseChannelOpenError_FieldPathValue = (*ConnectResponseChannelOpenError_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ChannelOpenError' as interface{}
func (fpv *ConnectResponseChannelOpenError_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ConnectResponseChannelOpenError_FieldTerminalPathValue) AsChannelIdValue() (uint64, bool) {
	res, ok := fpv.value.(uint64)
	return res, ok
}
func (fpv *ConnectResponseChannelOpenError_FieldTerminalPathValue) AsMessageValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object ChannelOpenError
func (fpv *ConnectResponseChannelOpenError_FieldTerminalPathValue) SetTo(target **ConnectResponse_ChannelOpenError) {
	if *target == nil {
		*target = new(ConnectResponse_ChannelOpenError)
	}
	switch fpv.selector {
	case ConnectResponseChannelOpenError_FieldPathSelectorChannelId:
		(*target).ChannelId = fpv.value.(uint64)
	case ConnectResponseChannelOpenError_FieldPathSelectorMessage:
		(*target).Message = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectResponse_ChannelOpenError: %d", fpv.selector))
	}
}

func (fpv *ConnectResponseChannelOpenError_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ConnectResponse_ChannelOpenError)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ConnectResponseChannelOpenError_FieldTerminalPathValue' with the value under path in 'ConnectResponse_ChannelOpenError'.
func (fpv *ConnectResponseChannelOpenError_FieldTerminalPathValue) CompareWith(source *ConnectResponse_ChannelOpenError) (int, bool) {
	switch fpv.selector {
	case ConnectResponseChannelOpenError_FieldPathSelectorChannelId:
		leftValue := fpv.value.(uint64)
		rightValue := source.GetChannelId()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ConnectResponseChannelOpenError_FieldPathSelectorMessage:
		leftValue := fpv.value.(string)
		rightValue := source.GetMessage()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectResponse_ChannelOpenError: %d", fpv.selector))
	}
}

func (fpv *ConnectResponseChannelOpenError_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ConnectResponse_ChannelOpenError))
}

// ConnectResponseChannelOpenError_FieldPathArrayItemValue allows storing single item in Path-specific values for ChannelOpenError according to their type
// Present only for array (repeated) types.
type ConnectResponseChannelOpenError_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ConnectResponseChannelOpenError_FieldPath
	ContainsValue(*ConnectResponse_ChannelOpenError) bool
}

// ParseConnectResponseChannelOpenError_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseConnectResponseChannelOpenError_FieldPathArrayItemValue(pathStr, valueStr string) (ConnectResponseChannelOpenError_FieldPathArrayItemValue, error) {
	fp, err := ParseConnectResponseChannelOpenError_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ChannelOpenError field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ConnectResponseChannelOpenError_FieldPathArrayItemValue), nil
}

func MustParseConnectResponseChannelOpenError_FieldPathArrayItemValue(pathStr, valueStr string) ConnectResponseChannelOpenError_FieldPathArrayItemValue {
	fpaiv, err := ParseConnectResponseChannelOpenError_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ConnectResponseChannelOpenError_FieldTerminalPathArrayItemValue struct {
	ConnectResponseChannelOpenError_FieldTerminalPath
	value interface{}
}

var _ ConnectResponseChannelOpenError_FieldPathArrayItemValue = (*ConnectResponseChannelOpenError_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ConnectResponse_ChannelOpenError as interface{}
func (fpaiv *ConnectResponseChannelOpenError_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ConnectResponseChannelOpenError_FieldTerminalPathArrayItemValue) GetSingle(source *ConnectResponse_ChannelOpenError) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ConnectResponseChannelOpenError_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ConnectResponse_ChannelOpenError))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ChannelOpenError'
func (fpaiv *ConnectResponseChannelOpenError_FieldTerminalPathArrayItemValue) ContainsValue(source *ConnectResponse_ChannelOpenError) bool {
	slice := fpaiv.ConnectResponseChannelOpenError_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ConnectResponseChannelOpenError_FieldPathArrayOfValues allows storing slice of values for ChannelOpenError fields according to their type
type ConnectResponseChannelOpenError_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ConnectResponseChannelOpenError_FieldPath
}

func ParseConnectResponseChannelOpenError_FieldPathArrayOfValues(pathStr, valuesStr string) (ConnectResponseChannelOpenError_FieldPathArrayOfValues, error) {
	fp, err := ParseConnectResponseChannelOpenError_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ChannelOpenError field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ConnectResponseChannelOpenError_FieldPathArrayOfValues), nil
}

func MustParseConnectResponseChannelOpenError_FieldPathArrayOfValues(pathStr, valuesStr string) ConnectResponseChannelOpenError_FieldPathArrayOfValues {
	fpaov, err := ParseConnectResponseChannelOpenError_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ConnectResponseChannelOpenError_FieldTerminalPathArrayOfValues struct {
	ConnectResponseChannelOpenError_FieldTerminalPath
	values interface{}
}

var _ ConnectResponseChannelOpenError_FieldPathArrayOfValues = (*ConnectResponseChannelOpenError_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ConnectResponseChannelOpenError_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ConnectResponseChannelOpenError_FieldPathSelectorChannelId:
		for _, v := range fpaov.values.([]uint64) {
			values = append(values, v)
		}
	case ConnectResponseChannelOpenError_FieldPathSelectorMessage:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ConnectResponseChannelOpenError_FieldTerminalPathArrayOfValues) AsChannelIdArrayOfValues() ([]uint64, bool) {
	res, ok := fpaov.values.([]uint64)
	return res, ok
}
func (fpaov *ConnectResponseChannelOpenError_FieldTerminalPathArrayOfValues) AsMessageArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListenRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListenRequest_FieldPathSelector
	Get(source *ListenRequest) []interface{}
	GetSingle(source *ListenRequest) (interface{}, bool)
	ClearValue(item *ListenRequest)

	// Those methods build corresponding ListenRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListenRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ListenRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListenRequest_FieldPathArrayItemValue
}

type ListenRequest_FieldPathSelector int32

const (
	ListenRequest_FieldPathSelectorOpenRequest      ListenRequest_FieldPathSelector = 0
	ListenRequest_FieldPathSelectorResumeRequest    ListenRequest_FieldPathSelector = 1
	ListenRequest_FieldPathSelectorChannelOpenError ListenRequest_FieldPathSelector = 2
	ListenRequest_FieldPathSelectorPing             ListenRequest_FieldPathSelector = 3
)

func (s ListenRequest_FieldPathSelector) String() string {
	switch s {
	case ListenRequest_FieldPathSelectorOpenRequest:
		return "open_request"
	case ListenRequest_FieldPathSelectorResumeRequest:
		return "resume_request"
	case ListenRequest_FieldPathSelectorChannelOpenError:
		return "channel_open_error"
	case ListenRequest_FieldPathSelectorPing:
		return "ping"
	default:
		panic(fmt.Sprintf("Invalid selector for ListenRequest: %d", s))
	}
}

func BuildListenRequest_FieldPath(fp gotenobject.RawFieldPath) (ListenRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListenRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "open_request", "openRequest", "open-request":
			return &ListenRequest_FieldTerminalPath{selector: ListenRequest_FieldPathSelectorOpenRequest}, nil
		case "resume_request", "resumeRequest", "resume-request":
			return &ListenRequest_FieldTerminalPath{selector: ListenRequest_FieldPathSelectorResumeRequest}, nil
		case "channel_open_error", "channelOpenError", "channel-open-error":
			return &ListenRequest_FieldTerminalPath{selector: ListenRequest_FieldPathSelectorChannelOpenError}, nil
		case "ping":
			return &ListenRequest_FieldTerminalPath{selector: ListenRequest_FieldPathSelectorPing}, nil
		}
	} else {
		switch fp[0] {
		case "open_request", "openRequest", "open-request":
			if subpath, err := BuildListenRequestOpenRequest_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ListenRequest_FieldSubPath{selector: ListenRequest_FieldPathSelectorOpenRequest, subPath: subpath}, nil
			}
		case "resume_request", "resumeRequest", "resume-request":
			if subpath, err := BuildListenRequestResumeRequest_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ListenRequest_FieldSubPath{selector: ListenRequest_FieldPathSelectorResumeRequest, subPath: subpath}, nil
			}
		case "channel_open_error", "channelOpenError", "channel-open-error":
			if subpath, err := BuildListenRequestChannelOpenError_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ListenRequest_FieldSubPath{selector: ListenRequest_FieldPathSelectorChannelOpenError, subPath: subpath}, nil
			}
		case "ping":
			if subpath, err := BuildPing_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ListenRequest_FieldSubPath{selector: ListenRequest_FieldPathSelectorPing, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListenRequest", fp)
}

func ParseListenRequest_FieldPath(rawField string) (ListenRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListenRequest_FieldPath(fp)
}

func MustParseListenRequest_FieldPath(rawField string) ListenRequest_FieldPath {
	fp, err := ParseListenRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListenRequest_FieldTerminalPath struct {
	selector ListenRequest_FieldPathSelector
}

var _ ListenRequest_FieldPath = (*ListenRequest_FieldTerminalPath)(nil)

func (fp *ListenRequest_FieldTerminalPath) Selector() ListenRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListenRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListenRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListenRequest
func (fp *ListenRequest_FieldTerminalPath) Get(source *ListenRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListenRequest_FieldPathSelectorOpenRequest:
			if source, ok := source.Message.(*ListenRequest_OpenRequest_); ok && source != nil {
				if source.OpenRequest != nil {
					values = append(values, source.OpenRequest)
				}
			}
		case ListenRequest_FieldPathSelectorResumeRequest:
			if source, ok := source.Message.(*ListenRequest_ResumeRequest_); ok && source != nil {
				if source.ResumeRequest != nil {
					values = append(values, source.ResumeRequest)
				}
			}
		case ListenRequest_FieldPathSelectorChannelOpenError:
			if source, ok := source.Message.(*ListenRequest_ChannelOpenError_); ok && source != nil {
				if source.ChannelOpenError != nil {
					values = append(values, source.ChannelOpenError)
				}
			}
		case ListenRequest_FieldPathSelectorPing:
			if source, ok := source.Message.(*ListenRequest_Ping); ok && source != nil {
				if source.Ping != nil {
					values = append(values, source.Ping)
				}
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListenRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ListenRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListenRequest))
}

// GetSingle returns value pointed by specific field of from source ListenRequest
func (fp *ListenRequest_FieldTerminalPath) GetSingle(source *ListenRequest) (interface{}, bool) {
	switch fp.selector {
	case ListenRequest_FieldPathSelectorOpenRequest:
		res := source.GetOpenRequest()
		return res, res != nil
	case ListenRequest_FieldPathSelectorResumeRequest:
		res := source.GetResumeRequest()
		return res, res != nil
	case ListenRequest_FieldPathSelectorChannelOpenError:
		res := source.GetChannelOpenError()
		return res, res != nil
	case ListenRequest_FieldPathSelectorPing:
		res := source.GetPing()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListenRequest: %d", fp.selector))
	}
}

func (fp *ListenRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListenRequest))
}

// GetDefault returns a default value of the field type
func (fp *ListenRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListenRequest_FieldPathSelectorOpenRequest:
		return (*ListenRequest_OpenRequest)(nil)
	case ListenRequest_FieldPathSelectorResumeRequest:
		return (*ListenRequest_ResumeRequest)(nil)
	case ListenRequest_FieldPathSelectorChannelOpenError:
		return (*ListenRequest_ChannelOpenError)(nil)
	case ListenRequest_FieldPathSelectorPing:
		return (*Ping)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ListenRequest: %d", fp.selector))
	}
}

func (fp *ListenRequest_FieldTerminalPath) ClearValue(item *ListenRequest) {
	if item != nil {
		switch fp.selector {
		case ListenRequest_FieldPathSelectorOpenRequest:
			if item, ok := item.Message.(*ListenRequest_OpenRequest_); ok {
				item.OpenRequest = nil
			}
		case ListenRequest_FieldPathSelectorResumeRequest:
			if item, ok := item.Message.(*ListenRequest_ResumeRequest_); ok {
				item.ResumeRequest = nil
			}
		case ListenRequest_FieldPathSelectorChannelOpenError:
			if item, ok := item.Message.(*ListenRequest_ChannelOpenError_); ok {
				item.ChannelOpenError = nil
			}
		case ListenRequest_FieldPathSelectorPing:
			if item, ok := item.Message.(*ListenRequest_Ping); ok {
				item.Ping = nil
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListenRequest: %d", fp.selector))
		}
	}
}

func (fp *ListenRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListenRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListenRequest_FieldTerminalPath) IsLeaf() bool {
	return false
}

func (fp *ListenRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ListenRequest_FieldTerminalPath) WithIValue(value interface{}) ListenRequest_FieldPathValue {
	switch fp.selector {
	case ListenRequest_FieldPathSelectorOpenRequest:
		return &ListenRequest_FieldTerminalPathValue{ListenRequest_FieldTerminalPath: *fp, value: value.(*ListenRequest_OpenRequest)}
	case ListenRequest_FieldPathSelectorResumeRequest:
		return &ListenRequest_FieldTerminalPathValue{ListenRequest_FieldTerminalPath: *fp, value: value.(*ListenRequest_ResumeRequest)}
	case ListenRequest_FieldPathSelectorChannelOpenError:
		return &ListenRequest_FieldTerminalPathValue{ListenRequest_FieldTerminalPath: *fp, value: value.(*ListenRequest_ChannelOpenError)}
	case ListenRequest_FieldPathSelectorPing:
		return &ListenRequest_FieldTerminalPathValue{ListenRequest_FieldTerminalPath: *fp, value: value.(*Ping)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListenRequest: %d", fp.selector))
	}
}

func (fp *ListenRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListenRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListenRequest_FieldPathArrayOfValues {
	fpaov := &ListenRequest_FieldTerminalPathArrayOfValues{ListenRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListenRequest_FieldPathSelectorOpenRequest:
		return &ListenRequest_FieldTerminalPathArrayOfValues{ListenRequest_FieldTerminalPath: *fp, values: values.([]*ListenRequest_OpenRequest)}
	case ListenRequest_FieldPathSelectorResumeRequest:
		return &ListenRequest_FieldTerminalPathArrayOfValues{ListenRequest_FieldTerminalPath: *fp, values: values.([]*ListenRequest_ResumeRequest)}
	case ListenRequest_FieldPathSelectorChannelOpenError:
		return &ListenRequest_FieldTerminalPathArrayOfValues{ListenRequest_FieldTerminalPath: *fp, values: values.([]*ListenRequest_ChannelOpenError)}
	case ListenRequest_FieldPathSelectorPing:
		return &ListenRequest_FieldTerminalPathArrayOfValues{ListenRequest_FieldTerminalPath: *fp, values: values.([]*Ping)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListenRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListenRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListenRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListenRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ListenRequest: %d", fp.selector))
	}
}

func (fp *ListenRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ListenRequest_FieldSubPath struct {
	selector ListenRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ListenRequest_FieldPath = (*ListenRequest_FieldSubPath)(nil)

func (fps *ListenRequest_FieldSubPath) Selector() ListenRequest_FieldPathSelector {
	return fps.selector
}
func (fps *ListenRequest_FieldSubPath) AsOpenRequestSubPath() (ListenRequestOpenRequest_FieldPath, bool) {
	res, ok := fps.subPath.(ListenRequestOpenRequest_FieldPath)
	return res, ok
}
func (fps *ListenRequest_FieldSubPath) AsResumeRequestSubPath() (ListenRequestResumeRequest_FieldPath, bool) {
	res, ok := fps.subPath.(ListenRequestResumeRequest_FieldPath)
	return res, ok
}
func (fps *ListenRequest_FieldSubPath) AsChannelOpenErrorSubPath() (ListenRequestChannelOpenError_FieldPath, bool) {
	res, ok := fps.subPath.(ListenRequestChannelOpenError_FieldPath)
	return res, ok
}
func (fps *ListenRequest_FieldSubPath) AsPingSubPath() (Ping_FieldPath, bool) {
	res, ok := fps.subPath.(Ping_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ListenRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ListenRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ListenRequest
func (fps *ListenRequest_FieldSubPath) Get(source *ListenRequest) (values []interface{}) {
	switch fps.selector {
	case ListenRequest_FieldPathSelectorOpenRequest:
		values = append(values, fps.subPath.GetRaw(source.GetOpenRequest())...)
	case ListenRequest_FieldPathSelectorResumeRequest:
		values = append(values, fps.subPath.GetRaw(source.GetResumeRequest())...)
	case ListenRequest_FieldPathSelectorChannelOpenError:
		values = append(values, fps.subPath.GetRaw(source.GetChannelOpenError())...)
	case ListenRequest_FieldPathSelectorPing:
		values = append(values, fps.subPath.GetRaw(source.GetPing())...)
	default:
		panic(fmt.Sprintf("Invalid selector for ListenRequest: %d", fps.selector))
	}
	return
}

func (fps *ListenRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ListenRequest))
}

// GetSingle returns value of selected field from source ListenRequest
func (fps *ListenRequest_FieldSubPath) GetSingle(source *ListenRequest) (interface{}, bool) {
	switch fps.selector {
	case ListenRequest_FieldPathSelectorOpenRequest:
		if source.GetOpenRequest() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetOpenRequest())
	case ListenRequest_FieldPathSelectorResumeRequest:
		if source.GetResumeRequest() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetResumeRequest())
	case ListenRequest_FieldPathSelectorChannelOpenError:
		if source.GetChannelOpenError() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetChannelOpenError())
	case ListenRequest_FieldPathSelectorPing:
		if source.GetPing() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPing())
	default:
		panic(fmt.Sprintf("Invalid selector for ListenRequest: %d", fps.selector))
	}
}

func (fps *ListenRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ListenRequest))
}

// GetDefault returns a default value of the field type
func (fps *ListenRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ListenRequest_FieldSubPath) ClearValue(item *ListenRequest) {
	if item != nil {
		switch fps.selector {
		case ListenRequest_FieldPathSelectorOpenRequest:
			if item.Message != nil {
				if item, ok := item.Message.(*ListenRequest_OpenRequest_); ok {
					fps.subPath.ClearValueRaw(item.OpenRequest)
				}
			}
		case ListenRequest_FieldPathSelectorResumeRequest:
			if item.Message != nil {
				if item, ok := item.Message.(*ListenRequest_ResumeRequest_); ok {
					fps.subPath.ClearValueRaw(item.ResumeRequest)
				}
			}
		case ListenRequest_FieldPathSelectorChannelOpenError:
			if item.Message != nil {
				if item, ok := item.Message.(*ListenRequest_ChannelOpenError_); ok {
					fps.subPath.ClearValueRaw(item.ChannelOpenError)
				}
			}
		case ListenRequest_FieldPathSelectorPing:
			if item.Message != nil {
				if item, ok := item.Message.(*ListenRequest_Ping); ok {
					fps.subPath.ClearValueRaw(item.Ping)
				}
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListenRequest: %d", fps.selector))
		}
	}
}

func (fps *ListenRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ListenRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *ListenRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ListenRequest_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&ListenRequest_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *ListenRequest_FieldSubPath) WithIValue(value interface{}) ListenRequest_FieldPathValue {
	return &ListenRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ListenRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ListenRequest_FieldSubPath) WithIArrayOfValues(values interface{}) ListenRequest_FieldPathArrayOfValues {
	return &ListenRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ListenRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ListenRequest_FieldSubPath) WithIArrayItemValue(value interface{}) ListenRequest_FieldPathArrayItemValue {
	return &ListenRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ListenRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ListenRequest_FieldPathValue allows storing values for ListenRequest fields according to their type
type ListenRequest_FieldPathValue interface {
	ListenRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListenRequest)
	CompareWith(*ListenRequest) (cmp int, comparable bool)
}

func ParseListenRequest_FieldPathValue(pathStr, valueStr string) (ListenRequest_FieldPathValue, error) {
	fp, err := ParseListenRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListenRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListenRequest_FieldPathValue), nil
}

func MustParseListenRequest_FieldPathValue(pathStr, valueStr string) ListenRequest_FieldPathValue {
	fpv, err := ParseListenRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListenRequest_FieldTerminalPathValue struct {
	ListenRequest_FieldTerminalPath
	value interface{}
}

var _ ListenRequest_FieldPathValue = (*ListenRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListenRequest' as interface{}
func (fpv *ListenRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListenRequest_FieldTerminalPathValue) AsOpenRequestValue() (*ListenRequest_OpenRequest, bool) {
	res, ok := fpv.value.(*ListenRequest_OpenRequest)
	return res, ok
}
func (fpv *ListenRequest_FieldTerminalPathValue) AsResumeRequestValue() (*ListenRequest_ResumeRequest, bool) {
	res, ok := fpv.value.(*ListenRequest_ResumeRequest)
	return res, ok
}
func (fpv *ListenRequest_FieldTerminalPathValue) AsChannelOpenErrorValue() (*ListenRequest_ChannelOpenError, bool) {
	res, ok := fpv.value.(*ListenRequest_ChannelOpenError)
	return res, ok
}
func (fpv *ListenRequest_FieldTerminalPathValue) AsPingValue() (*Ping, bool) {
	res, ok := fpv.value.(*Ping)
	return res, ok
}

// SetTo stores value for selected field for object ListenRequest
func (fpv *ListenRequest_FieldTerminalPathValue) SetTo(target **ListenRequest) {
	if *target == nil {
		*target = new(ListenRequest)
	}
	switch fpv.selector {
	case ListenRequest_FieldPathSelectorOpenRequest:
		if _, ok := (*target).Message.(*ListenRequest_OpenRequest_); !ok {
			(*target).Message = &ListenRequest_OpenRequest_{}
		}
		(*target).Message.(*ListenRequest_OpenRequest_).OpenRequest = fpv.value.(*ListenRequest_OpenRequest)
	case ListenRequest_FieldPathSelectorResumeRequest:
		if _, ok := (*target).Message.(*ListenRequest_ResumeRequest_); !ok {
			(*target).Message = &ListenRequest_ResumeRequest_{}
		}
		(*target).Message.(*ListenRequest_ResumeRequest_).ResumeRequest = fpv.value.(*ListenRequest_ResumeRequest)
	case ListenRequest_FieldPathSelectorChannelOpenError:
		if _, ok := (*target).Message.(*ListenRequest_ChannelOpenError_); !ok {
			(*target).Message = &ListenRequest_ChannelOpenError_{}
		}
		(*target).Message.(*ListenRequest_ChannelOpenError_).ChannelOpenError = fpv.value.(*ListenRequest_ChannelOpenError)
	case ListenRequest_FieldPathSelectorPing:
		if _, ok := (*target).Message.(*ListenRequest_Ping); !ok {
			(*target).Message = &ListenRequest_Ping{}
		}
		(*target).Message.(*ListenRequest_Ping).Ping = fpv.value.(*Ping)
	default:
		panic(fmt.Sprintf("Invalid selector for ListenRequest: %d", fpv.selector))
	}
}

func (fpv *ListenRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListenRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListenRequest_FieldTerminalPathValue' with the value under path in 'ListenRequest'.
func (fpv *ListenRequest_FieldTerminalPathValue) CompareWith(source *ListenRequest) (int, bool) {
	switch fpv.selector {
	case ListenRequest_FieldPathSelectorOpenRequest:
		return 0, false
	case ListenRequest_FieldPathSelectorResumeRequest:
		return 0, false
	case ListenRequest_FieldPathSelectorChannelOpenError:
		return 0, false
	case ListenRequest_FieldPathSelectorPing:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ListenRequest: %d", fpv.selector))
	}
}

func (fpv *ListenRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListenRequest))
}

type ListenRequest_FieldSubPathValue struct {
	ListenRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ListenRequest_FieldPathValue = (*ListenRequest_FieldSubPathValue)(nil)

func (fpvs *ListenRequest_FieldSubPathValue) AsOpenRequestPathValue() (ListenRequestOpenRequest_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ListenRequestOpenRequest_FieldPathValue)
	return res, ok
}
func (fpvs *ListenRequest_FieldSubPathValue) AsResumeRequestPathValue() (ListenRequestResumeRequest_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ListenRequestResumeRequest_FieldPathValue)
	return res, ok
}
func (fpvs *ListenRequest_FieldSubPathValue) AsChannelOpenErrorPathValue() (ListenRequestChannelOpenError_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ListenRequestChannelOpenError_FieldPathValue)
	return res, ok
}
func (fpvs *ListenRequest_FieldSubPathValue) AsPingPathValue() (Ping_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(Ping_FieldPathValue)
	return res, ok
}

func (fpvs *ListenRequest_FieldSubPathValue) SetTo(target **ListenRequest) {
	if *target == nil {
		*target = new(ListenRequest)
	}
	switch fpvs.Selector() {
	case ListenRequest_FieldPathSelectorOpenRequest:
		if _, ok := (*target).Message.(*ListenRequest_OpenRequest_); !ok {
			(*target).Message = &ListenRequest_OpenRequest_{}
		}
		fpvs.subPathValue.(ListenRequestOpenRequest_FieldPathValue).SetTo(&(*target).Message.(*ListenRequest_OpenRequest_).OpenRequest)
	case ListenRequest_FieldPathSelectorResumeRequest:
		if _, ok := (*target).Message.(*ListenRequest_ResumeRequest_); !ok {
			(*target).Message = &ListenRequest_ResumeRequest_{}
		}
		fpvs.subPathValue.(ListenRequestResumeRequest_FieldPathValue).SetTo(&(*target).Message.(*ListenRequest_ResumeRequest_).ResumeRequest)
	case ListenRequest_FieldPathSelectorChannelOpenError:
		if _, ok := (*target).Message.(*ListenRequest_ChannelOpenError_); !ok {
			(*target).Message = &ListenRequest_ChannelOpenError_{}
		}
		fpvs.subPathValue.(ListenRequestChannelOpenError_FieldPathValue).SetTo(&(*target).Message.(*ListenRequest_ChannelOpenError_).ChannelOpenError)
	case ListenRequest_FieldPathSelectorPing:
		if _, ok := (*target).Message.(*ListenRequest_Ping); !ok {
			(*target).Message = &ListenRequest_Ping{}
		}
		fpvs.subPathValue.(Ping_FieldPathValue).SetTo(&(*target).Message.(*ListenRequest_Ping).Ping)
	default:
		panic(fmt.Sprintf("Invalid selector for ListenRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *ListenRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListenRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ListenRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ListenRequest_FieldSubPathValue) CompareWith(source *ListenRequest) (int, bool) {
	switch fpvs.Selector() {
	case ListenRequest_FieldPathSelectorOpenRequest:
		return fpvs.subPathValue.(ListenRequestOpenRequest_FieldPathValue).CompareWith(source.GetOpenRequest())
	case ListenRequest_FieldPathSelectorResumeRequest:
		return fpvs.subPathValue.(ListenRequestResumeRequest_FieldPathValue).CompareWith(source.GetResumeRequest())
	case ListenRequest_FieldPathSelectorChannelOpenError:
		return fpvs.subPathValue.(ListenRequestChannelOpenError_FieldPathValue).CompareWith(source.GetChannelOpenError())
	case ListenRequest_FieldPathSelectorPing:
		return fpvs.subPathValue.(Ping_FieldPathValue).CompareWith(source.GetPing())
	default:
		panic(fmt.Sprintf("Invalid selector for ListenRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *ListenRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ListenRequest))
}

// ListenRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for ListenRequest according to their type
// Present only for array (repeated) types.
type ListenRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListenRequest_FieldPath
	ContainsValue(*ListenRequest) bool
}

// ParseListenRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListenRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ListenRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseListenRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListenRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListenRequest_FieldPathArrayItemValue), nil
}

func MustParseListenRequest_FieldPathArrayItemValue(pathStr, valueStr string) ListenRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseListenRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListenRequest_FieldTerminalPathArrayItemValue struct {
	ListenRequest_FieldTerminalPath
	value interface{}
}

var _ ListenRequest_FieldPathArrayItemValue = (*ListenRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListenRequest as interface{}
func (fpaiv *ListenRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ListenRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ListenRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListenRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListenRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListenRequest'
func (fpaiv *ListenRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ListenRequest) bool {
	slice := fpaiv.ListenRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ListenRequest_FieldSubPathArrayItemValue struct {
	ListenRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ListenRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ListenRequest_FieldSubPathArrayItemValue) AsOpenRequestPathItemValue() (ListenRequestOpenRequest_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ListenRequestOpenRequest_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *ListenRequest_FieldSubPathArrayItemValue) AsResumeRequestPathItemValue() (ListenRequestResumeRequest_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ListenRequestResumeRequest_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *ListenRequest_FieldSubPathArrayItemValue) AsChannelOpenErrorPathItemValue() (ListenRequestChannelOpenError_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ListenRequestChannelOpenError_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *ListenRequest_FieldSubPathArrayItemValue) AsPingPathItemValue() (Ping_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(Ping_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListenRequest'
func (fpaivs *ListenRequest_FieldSubPathArrayItemValue) ContainsValue(source *ListenRequest) bool {
	switch fpaivs.Selector() {
	case ListenRequest_FieldPathSelectorOpenRequest:
		return fpaivs.subPathItemValue.(ListenRequestOpenRequest_FieldPathArrayItemValue).ContainsValue(source.GetOpenRequest())
	case ListenRequest_FieldPathSelectorResumeRequest:
		return fpaivs.subPathItemValue.(ListenRequestResumeRequest_FieldPathArrayItemValue).ContainsValue(source.GetResumeRequest())
	case ListenRequest_FieldPathSelectorChannelOpenError:
		return fpaivs.subPathItemValue.(ListenRequestChannelOpenError_FieldPathArrayItemValue).ContainsValue(source.GetChannelOpenError())
	case ListenRequest_FieldPathSelectorPing:
		return fpaivs.subPathItemValue.(Ping_FieldPathArrayItemValue).ContainsValue(source.GetPing())
	default:
		panic(fmt.Sprintf("Invalid selector for ListenRequest: %d", fpaivs.Selector()))
	}
}

// ListenRequest_FieldPathArrayOfValues allows storing slice of values for ListenRequest fields according to their type
type ListenRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListenRequest_FieldPath
}

func ParseListenRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ListenRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseListenRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListenRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListenRequest_FieldPathArrayOfValues), nil
}

func MustParseListenRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ListenRequest_FieldPathArrayOfValues {
	fpaov, err := ParseListenRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListenRequest_FieldTerminalPathArrayOfValues struct {
	ListenRequest_FieldTerminalPath
	values interface{}
}

var _ ListenRequest_FieldPathArrayOfValues = (*ListenRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListenRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListenRequest_FieldPathSelectorOpenRequest:
		for _, v := range fpaov.values.([]*ListenRequest_OpenRequest) {
			values = append(values, v)
		}
	case ListenRequest_FieldPathSelectorResumeRequest:
		for _, v := range fpaov.values.([]*ListenRequest_ResumeRequest) {
			values = append(values, v)
		}
	case ListenRequest_FieldPathSelectorChannelOpenError:
		for _, v := range fpaov.values.([]*ListenRequest_ChannelOpenError) {
			values = append(values, v)
		}
	case ListenRequest_FieldPathSelectorPing:
		for _, v := range fpaov.values.([]*Ping) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListenRequest_FieldTerminalPathArrayOfValues) AsOpenRequestArrayOfValues() ([]*ListenRequest_OpenRequest, bool) {
	res, ok := fpaov.values.([]*ListenRequest_OpenRequest)
	return res, ok
}
func (fpaov *ListenRequest_FieldTerminalPathArrayOfValues) AsResumeRequestArrayOfValues() ([]*ListenRequest_ResumeRequest, bool) {
	res, ok := fpaov.values.([]*ListenRequest_ResumeRequest)
	return res, ok
}
func (fpaov *ListenRequest_FieldTerminalPathArrayOfValues) AsChannelOpenErrorArrayOfValues() ([]*ListenRequest_ChannelOpenError, bool) {
	res, ok := fpaov.values.([]*ListenRequest_ChannelOpenError)
	return res, ok
}
func (fpaov *ListenRequest_FieldTerminalPathArrayOfValues) AsPingArrayOfValues() ([]*Ping, bool) {
	res, ok := fpaov.values.([]*Ping)
	return res, ok
}

type ListenRequest_FieldSubPathArrayOfValues struct {
	ListenRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ListenRequest_FieldPathArrayOfValues = (*ListenRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ListenRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ListenRequest_FieldSubPathArrayOfValues) AsOpenRequestPathArrayOfValues() (ListenRequestOpenRequest_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ListenRequestOpenRequest_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *ListenRequest_FieldSubPathArrayOfValues) AsResumeRequestPathArrayOfValues() (ListenRequestResumeRequest_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ListenRequestResumeRequest_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *ListenRequest_FieldSubPathArrayOfValues) AsChannelOpenErrorPathArrayOfValues() (ListenRequestChannelOpenError_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ListenRequestChannelOpenError_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *ListenRequest_FieldSubPathArrayOfValues) AsPingPathArrayOfValues() (Ping_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(Ping_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListenRequestOpenRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListenRequestOpenRequest_FieldPathSelector
	Get(source *ListenRequest_OpenRequest) []interface{}
	GetSingle(source *ListenRequest_OpenRequest) (interface{}, bool)
	ClearValue(item *ListenRequest_OpenRequest)

	// Those methods build corresponding ListenRequestOpenRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListenRequestOpenRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ListenRequestOpenRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListenRequestOpenRequest_FieldPathArrayItemValue
}

type ListenRequestOpenRequest_FieldPathSelector int32

const (
	ListenRequestOpenRequest_FieldPathSelectorProject  ListenRequestOpenRequest_FieldPathSelector = 0
	ListenRequestOpenRequest_FieldPathSelectorRegionId ListenRequestOpenRequest_FieldPathSelector = 1
	ListenRequestOpenRequest_FieldPathSelectorName     ListenRequestOpenRequest_FieldPathSelector = 2
)

func (s ListenRequestOpenRequest_FieldPathSelector) String() string {
	switch s {
	case ListenRequestOpenRequest_FieldPathSelectorProject:
		return "project"
	case ListenRequestOpenRequest_FieldPathSelectorRegionId:
		return "region_id"
	case ListenRequestOpenRequest_FieldPathSelectorName:
		return "name"
	default:
		panic(fmt.Sprintf("Invalid selector for ListenRequest_OpenRequest: %d", s))
	}
}

func BuildListenRequestOpenRequest_FieldPath(fp gotenobject.RawFieldPath) (ListenRequestOpenRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListenRequest_OpenRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "project":
			return &ListenRequestOpenRequest_FieldTerminalPath{selector: ListenRequestOpenRequest_FieldPathSelectorProject}, nil
		case "region_id", "regionId", "region-id":
			return &ListenRequestOpenRequest_FieldTerminalPath{selector: ListenRequestOpenRequest_FieldPathSelectorRegionId}, nil
		case "name":
			return &ListenRequestOpenRequest_FieldTerminalPath{selector: ListenRequestOpenRequest_FieldPathSelectorName}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListenRequest_OpenRequest", fp)
}

func ParseListenRequestOpenRequest_FieldPath(rawField string) (ListenRequestOpenRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListenRequestOpenRequest_FieldPath(fp)
}

func MustParseListenRequestOpenRequest_FieldPath(rawField string) ListenRequestOpenRequest_FieldPath {
	fp, err := ParseListenRequestOpenRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListenRequestOpenRequest_FieldTerminalPath struct {
	selector ListenRequestOpenRequest_FieldPathSelector
}

var _ ListenRequestOpenRequest_FieldPath = (*ListenRequestOpenRequest_FieldTerminalPath)(nil)

func (fp *ListenRequestOpenRequest_FieldTerminalPath) Selector() ListenRequestOpenRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListenRequestOpenRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListenRequestOpenRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListenRequest_OpenRequest
func (fp *ListenRequestOpenRequest_FieldTerminalPath) Get(source *ListenRequest_OpenRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListenRequestOpenRequest_FieldPathSelectorProject:
			if source.Project != nil {
				values = append(values, source.Project)
			}
		case ListenRequestOpenRequest_FieldPathSelectorRegionId:
			values = append(values, source.RegionId)
		case ListenRequestOpenRequest_FieldPathSelectorName:
			values = append(values, source.Name)
		default:
			panic(fmt.Sprintf("Invalid selector for ListenRequest_OpenRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ListenRequestOpenRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListenRequest_OpenRequest))
}

// GetSingle returns value pointed by specific field of from source ListenRequest_OpenRequest
func (fp *ListenRequestOpenRequest_FieldTerminalPath) GetSingle(source *ListenRequest_OpenRequest) (interface{}, bool) {
	switch fp.selector {
	case ListenRequestOpenRequest_FieldPathSelectorProject:
		res := source.GetProject()
		return res, res != nil
	case ListenRequestOpenRequest_FieldPathSelectorRegionId:
		return source.GetRegionId(), source != nil
	case ListenRequestOpenRequest_FieldPathSelectorName:
		return source.GetName(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListenRequest_OpenRequest: %d", fp.selector))
	}
}

func (fp *ListenRequestOpenRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListenRequest_OpenRequest))
}

// GetDefault returns a default value of the field type
func (fp *ListenRequestOpenRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListenRequestOpenRequest_FieldPathSelectorProject:
		return (*project.Reference)(nil)
	case ListenRequestOpenRequest_FieldPathSelectorRegionId:
		return ""
	case ListenRequestOpenRequest_FieldPathSelectorName:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for ListenRequest_OpenRequest: %d", fp.selector))
	}
}

func (fp *ListenRequestOpenRequest_FieldTerminalPath) ClearValue(item *ListenRequest_OpenRequest) {
	if item != nil {
		switch fp.selector {
		case ListenRequestOpenRequest_FieldPathSelectorProject:
			item.Project = nil
		case ListenRequestOpenRequest_FieldPathSelectorRegionId:
			item.RegionId = ""
		case ListenRequestOpenRequest_FieldPathSelectorName:
			item.Name = ""
		default:
			panic(fmt.Sprintf("Invalid selector for ListenRequest_OpenRequest: %d", fp.selector))
		}
	}
}

func (fp *ListenRequestOpenRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListenRequest_OpenRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListenRequestOpenRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListenRequestOpenRequest_FieldPathSelectorProject ||
		fp.selector == ListenRequestOpenRequest_FieldPathSelectorRegionId ||
		fp.selector == ListenRequestOpenRequest_FieldPathSelectorName
}

func (fp *ListenRequestOpenRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ListenRequestOpenRequest_FieldTerminalPath) WithIValue(value interface{}) ListenRequestOpenRequest_FieldPathValue {
	switch fp.selector {
	case ListenRequestOpenRequest_FieldPathSelectorProject:
		return &ListenRequestOpenRequest_FieldTerminalPathValue{ListenRequestOpenRequest_FieldTerminalPath: *fp, value: value.(*project.Reference)}
	case ListenRequestOpenRequest_FieldPathSelectorRegionId:
		return &ListenRequestOpenRequest_FieldTerminalPathValue{ListenRequestOpenRequest_FieldTerminalPath: *fp, value: value.(string)}
	case ListenRequestOpenRequest_FieldPathSelectorName:
		return &ListenRequestOpenRequest_FieldTerminalPathValue{ListenRequestOpenRequest_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListenRequest_OpenRequest: %d", fp.selector))
	}
}

func (fp *ListenRequestOpenRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListenRequestOpenRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListenRequestOpenRequest_FieldPathArrayOfValues {
	fpaov := &ListenRequestOpenRequest_FieldTerminalPathArrayOfValues{ListenRequestOpenRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListenRequestOpenRequest_FieldPathSelectorProject:
		return &ListenRequestOpenRequest_FieldTerminalPathArrayOfValues{ListenRequestOpenRequest_FieldTerminalPath: *fp, values: values.([]*project.Reference)}
	case ListenRequestOpenRequest_FieldPathSelectorRegionId:
		return &ListenRequestOpenRequest_FieldTerminalPathArrayOfValues{ListenRequestOpenRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case ListenRequestOpenRequest_FieldPathSelectorName:
		return &ListenRequestOpenRequest_FieldTerminalPathArrayOfValues{ListenRequestOpenRequest_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListenRequest_OpenRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListenRequestOpenRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListenRequestOpenRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListenRequestOpenRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ListenRequest_OpenRequest: %d", fp.selector))
	}
}

func (fp *ListenRequestOpenRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ListenRequestOpenRequest_FieldPathValue allows storing values for OpenRequest fields according to their type
type ListenRequestOpenRequest_FieldPathValue interface {
	ListenRequestOpenRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListenRequest_OpenRequest)
	CompareWith(*ListenRequest_OpenRequest) (cmp int, comparable bool)
}

func ParseListenRequestOpenRequest_FieldPathValue(pathStr, valueStr string) (ListenRequestOpenRequest_FieldPathValue, error) {
	fp, err := ParseListenRequestOpenRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing OpenRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListenRequestOpenRequest_FieldPathValue), nil
}

func MustParseListenRequestOpenRequest_FieldPathValue(pathStr, valueStr string) ListenRequestOpenRequest_FieldPathValue {
	fpv, err := ParseListenRequestOpenRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListenRequestOpenRequest_FieldTerminalPathValue struct {
	ListenRequestOpenRequest_FieldTerminalPath
	value interface{}
}

var _ ListenRequestOpenRequest_FieldPathValue = (*ListenRequestOpenRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'OpenRequest' as interface{}
func (fpv *ListenRequestOpenRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListenRequestOpenRequest_FieldTerminalPathValue) AsProjectValue() (*project.Reference, bool) {
	res, ok := fpv.value.(*project.Reference)
	return res, ok
}
func (fpv *ListenRequestOpenRequest_FieldTerminalPathValue) AsRegionIdValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *ListenRequestOpenRequest_FieldTerminalPathValue) AsNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object OpenRequest
func (fpv *ListenRequestOpenRequest_FieldTerminalPathValue) SetTo(target **ListenRequest_OpenRequest) {
	if *target == nil {
		*target = new(ListenRequest_OpenRequest)
	}
	switch fpv.selector {
	case ListenRequestOpenRequest_FieldPathSelectorProject:
		(*target).Project = fpv.value.(*project.Reference)
	case ListenRequestOpenRequest_FieldPathSelectorRegionId:
		(*target).RegionId = fpv.value.(string)
	case ListenRequestOpenRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for ListenRequest_OpenRequest: %d", fpv.selector))
	}
}

func (fpv *ListenRequestOpenRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListenRequest_OpenRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListenRequestOpenRequest_FieldTerminalPathValue' with the value under path in 'ListenRequest_OpenRequest'.
func (fpv *ListenRequestOpenRequest_FieldTerminalPathValue) CompareWith(source *ListenRequest_OpenRequest) (int, bool) {
	switch fpv.selector {
	case ListenRequestOpenRequest_FieldPathSelectorProject:
		leftValue := fpv.value.(*project.Reference)
		rightValue := source.GetProject()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ListenRequestOpenRequest_FieldPathSelectorRegionId:
		leftValue := fpv.value.(string)
		rightValue := source.GetRegionId()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListenRequestOpenRequest_FieldPathSelectorName:
		leftValue := fpv.value.(string)
		rightValue := source.GetName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListenRequest_OpenRequest: %d", fpv.selector))
	}
}

func (fpv *ListenRequestOpenRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListenRequest_OpenRequest))
}

// ListenRequestOpenRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for OpenRequest according to their type
// Present only for array (repeated) types.
type ListenRequestOpenRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListenRequestOpenRequest_FieldPath
	ContainsValue(*ListenRequest_OpenRequest) bool
}

// ParseListenRequestOpenRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListenRequestOpenRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ListenRequestOpenRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseListenRequestOpenRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing OpenRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListenRequestOpenRequest_FieldPathArrayItemValue), nil
}

func MustParseListenRequestOpenRequest_FieldPathArrayItemValue(pathStr, valueStr string) ListenRequestOpenRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseListenRequestOpenRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListenRequestOpenRequest_FieldTerminalPathArrayItemValue struct {
	ListenRequestOpenRequest_FieldTerminalPath
	value interface{}
}

var _ ListenRequestOpenRequest_FieldPathArrayItemValue = (*ListenRequestOpenRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListenRequest_OpenRequest as interface{}
func (fpaiv *ListenRequestOpenRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ListenRequestOpenRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ListenRequest_OpenRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListenRequestOpenRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListenRequest_OpenRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'OpenRequest'
func (fpaiv *ListenRequestOpenRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ListenRequest_OpenRequest) bool {
	slice := fpaiv.ListenRequestOpenRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ListenRequestOpenRequest_FieldPathArrayOfValues allows storing slice of values for OpenRequest fields according to their type
type ListenRequestOpenRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListenRequestOpenRequest_FieldPath
}

func ParseListenRequestOpenRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ListenRequestOpenRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseListenRequestOpenRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing OpenRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListenRequestOpenRequest_FieldPathArrayOfValues), nil
}

func MustParseListenRequestOpenRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ListenRequestOpenRequest_FieldPathArrayOfValues {
	fpaov, err := ParseListenRequestOpenRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListenRequestOpenRequest_FieldTerminalPathArrayOfValues struct {
	ListenRequestOpenRequest_FieldTerminalPath
	values interface{}
}

var _ ListenRequestOpenRequest_FieldPathArrayOfValues = (*ListenRequestOpenRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListenRequestOpenRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListenRequestOpenRequest_FieldPathSelectorProject:
		for _, v := range fpaov.values.([]*project.Reference) {
			values = append(values, v)
		}
	case ListenRequestOpenRequest_FieldPathSelectorRegionId:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case ListenRequestOpenRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListenRequestOpenRequest_FieldTerminalPathArrayOfValues) AsProjectArrayOfValues() ([]*project.Reference, bool) {
	res, ok := fpaov.values.([]*project.Reference)
	return res, ok
}
func (fpaov *ListenRequestOpenRequest_FieldTerminalPathArrayOfValues) AsRegionIdArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *ListenRequestOpenRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListenRequestResumeRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListenRequestResumeRequest_FieldPathSelector
	Get(source *ListenRequest_ResumeRequest) []interface{}
	GetSingle(source *ListenRequest_ResumeRequest) (interface{}, bool)
	ClearValue(item *ListenRequest_ResumeRequest)

	// Those methods build corresponding ListenRequestResumeRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListenRequestResumeRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ListenRequestResumeRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListenRequestResumeRequest_FieldPathArrayItemValue
}

type ListenRequestResumeRequest_FieldPathSelector int32

const (
	ListenRequestResumeRequest_FieldPathSelectorProject   ListenRequestResumeRequest_FieldPathSelector = 0
	ListenRequestResumeRequest_FieldPathSelectorRegionId  ListenRequestResumeRequest_FieldPathSelector = 1
	ListenRequestResumeRequest_FieldPathSelectorName      ListenRequestResumeRequest_FieldPathSelector = 2
	ListenRequestResumeRequest_FieldPathSelectorSessionId ListenRequestResumeRequest_FieldPathSelector = 3
)

func (s ListenRequestResumeRequest_FieldPathSelector) String() string {
	switch s {
	case ListenRequestResumeRequest_FieldPathSelectorProject:
		return "project"
	case ListenRequestResumeRequest_FieldPathSelectorRegionId:
		return "region_id"
	case ListenRequestResumeRequest_FieldPathSelectorName:
		return "name"
	case ListenRequestResumeRequest_FieldPathSelectorSessionId:
		return "session_id"
	default:
		panic(fmt.Sprintf("Invalid selector for ListenRequest_ResumeRequest: %d", s))
	}
}

func BuildListenRequestResumeRequest_FieldPath(fp gotenobject.RawFieldPath) (ListenRequestResumeRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListenRequest_ResumeRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "project":
			return &ListenRequestResumeRequest_FieldTerminalPath{selector: ListenRequestResumeRequest_FieldPathSelectorProject}, nil
		case "region_id", "regionId", "region-id":
			return &ListenRequestResumeRequest_FieldTerminalPath{selector: ListenRequestResumeRequest_FieldPathSelectorRegionId}, nil
		case "name":
			return &ListenRequestResumeRequest_FieldTerminalPath{selector: ListenRequestResumeRequest_FieldPathSelectorName}, nil
		case "session_id", "sessionId", "session-id":
			return &ListenRequestResumeRequest_FieldTerminalPath{selector: ListenRequestResumeRequest_FieldPathSelectorSessionId}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListenRequest_ResumeRequest", fp)
}

func ParseListenRequestResumeRequest_FieldPath(rawField string) (ListenRequestResumeRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListenRequestResumeRequest_FieldPath(fp)
}

func MustParseListenRequestResumeRequest_FieldPath(rawField string) ListenRequestResumeRequest_FieldPath {
	fp, err := ParseListenRequestResumeRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListenRequestResumeRequest_FieldTerminalPath struct {
	selector ListenRequestResumeRequest_FieldPathSelector
}

var _ ListenRequestResumeRequest_FieldPath = (*ListenRequestResumeRequest_FieldTerminalPath)(nil)

func (fp *ListenRequestResumeRequest_FieldTerminalPath) Selector() ListenRequestResumeRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListenRequestResumeRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListenRequestResumeRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListenRequest_ResumeRequest
func (fp *ListenRequestResumeRequest_FieldTerminalPath) Get(source *ListenRequest_ResumeRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListenRequestResumeRequest_FieldPathSelectorProject:
			if source.Project != nil {
				values = append(values, source.Project)
			}
		case ListenRequestResumeRequest_FieldPathSelectorRegionId:
			values = append(values, source.RegionId)
		case ListenRequestResumeRequest_FieldPathSelectorName:
			values = append(values, source.Name)
		case ListenRequestResumeRequest_FieldPathSelectorSessionId:
			values = append(values, source.SessionId)
		default:
			panic(fmt.Sprintf("Invalid selector for ListenRequest_ResumeRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ListenRequestResumeRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListenRequest_ResumeRequest))
}

// GetSingle returns value pointed by specific field of from source ListenRequest_ResumeRequest
func (fp *ListenRequestResumeRequest_FieldTerminalPath) GetSingle(source *ListenRequest_ResumeRequest) (interface{}, bool) {
	switch fp.selector {
	case ListenRequestResumeRequest_FieldPathSelectorProject:
		res := source.GetProject()
		return res, res != nil
	case ListenRequestResumeRequest_FieldPathSelectorRegionId:
		return source.GetRegionId(), source != nil
	case ListenRequestResumeRequest_FieldPathSelectorName:
		return source.GetName(), source != nil
	case ListenRequestResumeRequest_FieldPathSelectorSessionId:
		return source.GetSessionId(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListenRequest_ResumeRequest: %d", fp.selector))
	}
}

func (fp *ListenRequestResumeRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListenRequest_ResumeRequest))
}

// GetDefault returns a default value of the field type
func (fp *ListenRequestResumeRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListenRequestResumeRequest_FieldPathSelectorProject:
		return (*project.Reference)(nil)
	case ListenRequestResumeRequest_FieldPathSelectorRegionId:
		return ""
	case ListenRequestResumeRequest_FieldPathSelectorName:
		return ""
	case ListenRequestResumeRequest_FieldPathSelectorSessionId:
		return uint64(0)
	default:
		panic(fmt.Sprintf("Invalid selector for ListenRequest_ResumeRequest: %d", fp.selector))
	}
}

func (fp *ListenRequestResumeRequest_FieldTerminalPath) ClearValue(item *ListenRequest_ResumeRequest) {
	if item != nil {
		switch fp.selector {
		case ListenRequestResumeRequest_FieldPathSelectorProject:
			item.Project = nil
		case ListenRequestResumeRequest_FieldPathSelectorRegionId:
			item.RegionId = ""
		case ListenRequestResumeRequest_FieldPathSelectorName:
			item.Name = ""
		case ListenRequestResumeRequest_FieldPathSelectorSessionId:
			item.SessionId = uint64(0)
		default:
			panic(fmt.Sprintf("Invalid selector for ListenRequest_ResumeRequest: %d", fp.selector))
		}
	}
}

func (fp *ListenRequestResumeRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListenRequest_ResumeRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListenRequestResumeRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListenRequestResumeRequest_FieldPathSelectorProject ||
		fp.selector == ListenRequestResumeRequest_FieldPathSelectorRegionId ||
		fp.selector == ListenRequestResumeRequest_FieldPathSelectorName ||
		fp.selector == ListenRequestResumeRequest_FieldPathSelectorSessionId
}

func (fp *ListenRequestResumeRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ListenRequestResumeRequest_FieldTerminalPath) WithIValue(value interface{}) ListenRequestResumeRequest_FieldPathValue {
	switch fp.selector {
	case ListenRequestResumeRequest_FieldPathSelectorProject:
		return &ListenRequestResumeRequest_FieldTerminalPathValue{ListenRequestResumeRequest_FieldTerminalPath: *fp, value: value.(*project.Reference)}
	case ListenRequestResumeRequest_FieldPathSelectorRegionId:
		return &ListenRequestResumeRequest_FieldTerminalPathValue{ListenRequestResumeRequest_FieldTerminalPath: *fp, value: value.(string)}
	case ListenRequestResumeRequest_FieldPathSelectorName:
		return &ListenRequestResumeRequest_FieldTerminalPathValue{ListenRequestResumeRequest_FieldTerminalPath: *fp, value: value.(string)}
	case ListenRequestResumeRequest_FieldPathSelectorSessionId:
		return &ListenRequestResumeRequest_FieldTerminalPathValue{ListenRequestResumeRequest_FieldTerminalPath: *fp, value: value.(uint64)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListenRequest_ResumeRequest: %d", fp.selector))
	}
}

func (fp *ListenRequestResumeRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListenRequestResumeRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListenRequestResumeRequest_FieldPathArrayOfValues {
	fpaov := &ListenRequestResumeRequest_FieldTerminalPathArrayOfValues{ListenRequestResumeRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListenRequestResumeRequest_FieldPathSelectorProject:
		return &ListenRequestResumeRequest_FieldTerminalPathArrayOfValues{ListenRequestResumeRequest_FieldTerminalPath: *fp, values: values.([]*project.Reference)}
	case ListenRequestResumeRequest_FieldPathSelectorRegionId:
		return &ListenRequestResumeRequest_FieldTerminalPathArrayOfValues{ListenRequestResumeRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case ListenRequestResumeRequest_FieldPathSelectorName:
		return &ListenRequestResumeRequest_FieldTerminalPathArrayOfValues{ListenRequestResumeRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case ListenRequestResumeRequest_FieldPathSelectorSessionId:
		return &ListenRequestResumeRequest_FieldTerminalPathArrayOfValues{ListenRequestResumeRequest_FieldTerminalPath: *fp, values: values.([]uint64)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListenRequest_ResumeRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListenRequestResumeRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListenRequestResumeRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListenRequestResumeRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ListenRequest_ResumeRequest: %d", fp.selector))
	}
}

func (fp *ListenRequestResumeRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ListenRequestResumeRequest_FieldPathValue allows storing values for ResumeRequest fields according to their type
type ListenRequestResumeRequest_FieldPathValue interface {
	ListenRequestResumeRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListenRequest_ResumeRequest)
	CompareWith(*ListenRequest_ResumeRequest) (cmp int, comparable bool)
}

func ParseListenRequestResumeRequest_FieldPathValue(pathStr, valueStr string) (ListenRequestResumeRequest_FieldPathValue, error) {
	fp, err := ParseListenRequestResumeRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ResumeRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListenRequestResumeRequest_FieldPathValue), nil
}

func MustParseListenRequestResumeRequest_FieldPathValue(pathStr, valueStr string) ListenRequestResumeRequest_FieldPathValue {
	fpv, err := ParseListenRequestResumeRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListenRequestResumeRequest_FieldTerminalPathValue struct {
	ListenRequestResumeRequest_FieldTerminalPath
	value interface{}
}

var _ ListenRequestResumeRequest_FieldPathValue = (*ListenRequestResumeRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ResumeRequest' as interface{}
func (fpv *ListenRequestResumeRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListenRequestResumeRequest_FieldTerminalPathValue) AsProjectValue() (*project.Reference, bool) {
	res, ok := fpv.value.(*project.Reference)
	return res, ok
}
func (fpv *ListenRequestResumeRequest_FieldTerminalPathValue) AsRegionIdValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *ListenRequestResumeRequest_FieldTerminalPathValue) AsNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *ListenRequestResumeRequest_FieldTerminalPathValue) AsSessionIdValue() (uint64, bool) {
	res, ok := fpv.value.(uint64)
	return res, ok
}

// SetTo stores value for selected field for object ResumeRequest
func (fpv *ListenRequestResumeRequest_FieldTerminalPathValue) SetTo(target **ListenRequest_ResumeRequest) {
	if *target == nil {
		*target = new(ListenRequest_ResumeRequest)
	}
	switch fpv.selector {
	case ListenRequestResumeRequest_FieldPathSelectorProject:
		(*target).Project = fpv.value.(*project.Reference)
	case ListenRequestResumeRequest_FieldPathSelectorRegionId:
		(*target).RegionId = fpv.value.(string)
	case ListenRequestResumeRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(string)
	case ListenRequestResumeRequest_FieldPathSelectorSessionId:
		(*target).SessionId = fpv.value.(uint64)
	default:
		panic(fmt.Sprintf("Invalid selector for ListenRequest_ResumeRequest: %d", fpv.selector))
	}
}

func (fpv *ListenRequestResumeRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListenRequest_ResumeRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListenRequestResumeRequest_FieldTerminalPathValue' with the value under path in 'ListenRequest_ResumeRequest'.
func (fpv *ListenRequestResumeRequest_FieldTerminalPathValue) CompareWith(source *ListenRequest_ResumeRequest) (int, bool) {
	switch fpv.selector {
	case ListenRequestResumeRequest_FieldPathSelectorProject:
		leftValue := fpv.value.(*project.Reference)
		rightValue := source.GetProject()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ListenRequestResumeRequest_FieldPathSelectorRegionId:
		leftValue := fpv.value.(string)
		rightValue := source.GetRegionId()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListenRequestResumeRequest_FieldPathSelectorName:
		leftValue := fpv.value.(string)
		rightValue := source.GetName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListenRequestResumeRequest_FieldPathSelectorSessionId:
		leftValue := fpv.value.(uint64)
		rightValue := source.GetSessionId()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListenRequest_ResumeRequest: %d", fpv.selector))
	}
}

func (fpv *ListenRequestResumeRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListenRequest_ResumeRequest))
}

// ListenRequestResumeRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for ResumeRequest according to their type
// Present only for array (repeated) types.
type ListenRequestResumeRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListenRequestResumeRequest_FieldPath
	ContainsValue(*ListenRequest_ResumeRequest) bool
}

// ParseListenRequestResumeRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListenRequestResumeRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ListenRequestResumeRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseListenRequestResumeRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ResumeRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListenRequestResumeRequest_FieldPathArrayItemValue), nil
}

func MustParseListenRequestResumeRequest_FieldPathArrayItemValue(pathStr, valueStr string) ListenRequestResumeRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseListenRequestResumeRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListenRequestResumeRequest_FieldTerminalPathArrayItemValue struct {
	ListenRequestResumeRequest_FieldTerminalPath
	value interface{}
}

var _ ListenRequestResumeRequest_FieldPathArrayItemValue = (*ListenRequestResumeRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListenRequest_ResumeRequest as interface{}
func (fpaiv *ListenRequestResumeRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ListenRequestResumeRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ListenRequest_ResumeRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListenRequestResumeRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListenRequest_ResumeRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ResumeRequest'
func (fpaiv *ListenRequestResumeRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ListenRequest_ResumeRequest) bool {
	slice := fpaiv.ListenRequestResumeRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ListenRequestResumeRequest_FieldPathArrayOfValues allows storing slice of values for ResumeRequest fields according to their type
type ListenRequestResumeRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListenRequestResumeRequest_FieldPath
}

func ParseListenRequestResumeRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ListenRequestResumeRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseListenRequestResumeRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ResumeRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListenRequestResumeRequest_FieldPathArrayOfValues), nil
}

func MustParseListenRequestResumeRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ListenRequestResumeRequest_FieldPathArrayOfValues {
	fpaov, err := ParseListenRequestResumeRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListenRequestResumeRequest_FieldTerminalPathArrayOfValues struct {
	ListenRequestResumeRequest_FieldTerminalPath
	values interface{}
}

var _ ListenRequestResumeRequest_FieldPathArrayOfValues = (*ListenRequestResumeRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListenRequestResumeRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListenRequestResumeRequest_FieldPathSelectorProject:
		for _, v := range fpaov.values.([]*project.Reference) {
			values = append(values, v)
		}
	case ListenRequestResumeRequest_FieldPathSelectorRegionId:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case ListenRequestResumeRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case ListenRequestResumeRequest_FieldPathSelectorSessionId:
		for _, v := range fpaov.values.([]uint64) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListenRequestResumeRequest_FieldTerminalPathArrayOfValues) AsProjectArrayOfValues() ([]*project.Reference, bool) {
	res, ok := fpaov.values.([]*project.Reference)
	return res, ok
}
func (fpaov *ListenRequestResumeRequest_FieldTerminalPathArrayOfValues) AsRegionIdArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *ListenRequestResumeRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *ListenRequestResumeRequest_FieldTerminalPathArrayOfValues) AsSessionIdArrayOfValues() ([]uint64, bool) {
	res, ok := fpaov.values.([]uint64)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListenRequestChannelOpenError_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListenRequestChannelOpenError_FieldPathSelector
	Get(source *ListenRequest_ChannelOpenError) []interface{}
	GetSingle(source *ListenRequest_ChannelOpenError) (interface{}, bool)
	ClearValue(item *ListenRequest_ChannelOpenError)

	// Those methods build corresponding ListenRequestChannelOpenError_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListenRequestChannelOpenError_FieldPathValue
	WithIArrayOfValues(values interface{}) ListenRequestChannelOpenError_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListenRequestChannelOpenError_FieldPathArrayItemValue
}

type ListenRequestChannelOpenError_FieldPathSelector int32

const (
	ListenRequestChannelOpenError_FieldPathSelectorChannelId ListenRequestChannelOpenError_FieldPathSelector = 0
	ListenRequestChannelOpenError_FieldPathSelectorMessage   ListenRequestChannelOpenError_FieldPathSelector = 1
)

func (s ListenRequestChannelOpenError_FieldPathSelector) String() string {
	switch s {
	case ListenRequestChannelOpenError_FieldPathSelectorChannelId:
		return "channel_id"
	case ListenRequestChannelOpenError_FieldPathSelectorMessage:
		return "message"
	default:
		panic(fmt.Sprintf("Invalid selector for ListenRequest_ChannelOpenError: %d", s))
	}
}

func BuildListenRequestChannelOpenError_FieldPath(fp gotenobject.RawFieldPath) (ListenRequestChannelOpenError_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListenRequest_ChannelOpenError")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "channel_id", "channelId", "channel-id":
			return &ListenRequestChannelOpenError_FieldTerminalPath{selector: ListenRequestChannelOpenError_FieldPathSelectorChannelId}, nil
		case "message":
			return &ListenRequestChannelOpenError_FieldTerminalPath{selector: ListenRequestChannelOpenError_FieldPathSelectorMessage}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListenRequest_ChannelOpenError", fp)
}

func ParseListenRequestChannelOpenError_FieldPath(rawField string) (ListenRequestChannelOpenError_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListenRequestChannelOpenError_FieldPath(fp)
}

func MustParseListenRequestChannelOpenError_FieldPath(rawField string) ListenRequestChannelOpenError_FieldPath {
	fp, err := ParseListenRequestChannelOpenError_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListenRequestChannelOpenError_FieldTerminalPath struct {
	selector ListenRequestChannelOpenError_FieldPathSelector
}

var _ ListenRequestChannelOpenError_FieldPath = (*ListenRequestChannelOpenError_FieldTerminalPath)(nil)

func (fp *ListenRequestChannelOpenError_FieldTerminalPath) Selector() ListenRequestChannelOpenError_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListenRequestChannelOpenError_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListenRequestChannelOpenError_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListenRequest_ChannelOpenError
func (fp *ListenRequestChannelOpenError_FieldTerminalPath) Get(source *ListenRequest_ChannelOpenError) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListenRequestChannelOpenError_FieldPathSelectorChannelId:
			values = append(values, source.ChannelId)
		case ListenRequestChannelOpenError_FieldPathSelectorMessage:
			values = append(values, source.Message)
		default:
			panic(fmt.Sprintf("Invalid selector for ListenRequest_ChannelOpenError: %d", fp.selector))
		}
	}
	return
}

func (fp *ListenRequestChannelOpenError_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListenRequest_ChannelOpenError))
}

// GetSingle returns value pointed by specific field of from source ListenRequest_ChannelOpenError
func (fp *ListenRequestChannelOpenError_FieldTerminalPath) GetSingle(source *ListenRequest_ChannelOpenError) (interface{}, bool) {
	switch fp.selector {
	case ListenRequestChannelOpenError_FieldPathSelectorChannelId:
		return source.GetChannelId(), source != nil
	case ListenRequestChannelOpenError_FieldPathSelectorMessage:
		return source.GetMessage(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListenRequest_ChannelOpenError: %d", fp.selector))
	}
}

func (fp *ListenRequestChannelOpenError_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListenRequest_ChannelOpenError))
}

// GetDefault returns a default value of the field type
func (fp *ListenRequestChannelOpenError_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListenRequestChannelOpenError_FieldPathSelectorChannelId:
		return uint64(0)
	case ListenRequestChannelOpenError_FieldPathSelectorMessage:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for ListenRequest_ChannelOpenError: %d", fp.selector))
	}
}

func (fp *ListenRequestChannelOpenError_FieldTerminalPath) ClearValue(item *ListenRequest_ChannelOpenError) {
	if item != nil {
		switch fp.selector {
		case ListenRequestChannelOpenError_FieldPathSelectorChannelId:
			item.ChannelId = uint64(0)
		case ListenRequestChannelOpenError_FieldPathSelectorMessage:
			item.Message = ""
		default:
			panic(fmt.Sprintf("Invalid selector for ListenRequest_ChannelOpenError: %d", fp.selector))
		}
	}
}

func (fp *ListenRequestChannelOpenError_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListenRequest_ChannelOpenError))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListenRequestChannelOpenError_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListenRequestChannelOpenError_FieldPathSelectorChannelId ||
		fp.selector == ListenRequestChannelOpenError_FieldPathSelectorMessage
}

func (fp *ListenRequestChannelOpenError_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ListenRequestChannelOpenError_FieldTerminalPath) WithIValue(value interface{}) ListenRequestChannelOpenError_FieldPathValue {
	switch fp.selector {
	case ListenRequestChannelOpenError_FieldPathSelectorChannelId:
		return &ListenRequestChannelOpenError_FieldTerminalPathValue{ListenRequestChannelOpenError_FieldTerminalPath: *fp, value: value.(uint64)}
	case ListenRequestChannelOpenError_FieldPathSelectorMessage:
		return &ListenRequestChannelOpenError_FieldTerminalPathValue{ListenRequestChannelOpenError_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListenRequest_ChannelOpenError: %d", fp.selector))
	}
}

func (fp *ListenRequestChannelOpenError_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListenRequestChannelOpenError_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListenRequestChannelOpenError_FieldPathArrayOfValues {
	fpaov := &ListenRequestChannelOpenError_FieldTerminalPathArrayOfValues{ListenRequestChannelOpenError_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListenRequestChannelOpenError_FieldPathSelectorChannelId:
		return &ListenRequestChannelOpenError_FieldTerminalPathArrayOfValues{ListenRequestChannelOpenError_FieldTerminalPath: *fp, values: values.([]uint64)}
	case ListenRequestChannelOpenError_FieldPathSelectorMessage:
		return &ListenRequestChannelOpenError_FieldTerminalPathArrayOfValues{ListenRequestChannelOpenError_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListenRequest_ChannelOpenError: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListenRequestChannelOpenError_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListenRequestChannelOpenError_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListenRequestChannelOpenError_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ListenRequest_ChannelOpenError: %d", fp.selector))
	}
}

func (fp *ListenRequestChannelOpenError_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ListenRequestChannelOpenError_FieldPathValue allows storing values for ChannelOpenError fields according to their type
type ListenRequestChannelOpenError_FieldPathValue interface {
	ListenRequestChannelOpenError_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListenRequest_ChannelOpenError)
	CompareWith(*ListenRequest_ChannelOpenError) (cmp int, comparable bool)
}

func ParseListenRequestChannelOpenError_FieldPathValue(pathStr, valueStr string) (ListenRequestChannelOpenError_FieldPathValue, error) {
	fp, err := ParseListenRequestChannelOpenError_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ChannelOpenError field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListenRequestChannelOpenError_FieldPathValue), nil
}

func MustParseListenRequestChannelOpenError_FieldPathValue(pathStr, valueStr string) ListenRequestChannelOpenError_FieldPathValue {
	fpv, err := ParseListenRequestChannelOpenError_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListenRequestChannelOpenError_FieldTerminalPathValue struct {
	ListenRequestChannelOpenError_FieldTerminalPath
	value interface{}
}

var _ ListenRequestChannelOpenError_FieldPathValue = (*ListenRequestChannelOpenError_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ChannelOpenError' as interface{}
func (fpv *ListenRequestChannelOpenError_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListenRequestChannelOpenError_FieldTerminalPathValue) AsChannelIdValue() (uint64, bool) {
	res, ok := fpv.value.(uint64)
	return res, ok
}
func (fpv *ListenRequestChannelOpenError_FieldTerminalPathValue) AsMessageValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object ChannelOpenError
func (fpv *ListenRequestChannelOpenError_FieldTerminalPathValue) SetTo(target **ListenRequest_ChannelOpenError) {
	if *target == nil {
		*target = new(ListenRequest_ChannelOpenError)
	}
	switch fpv.selector {
	case ListenRequestChannelOpenError_FieldPathSelectorChannelId:
		(*target).ChannelId = fpv.value.(uint64)
	case ListenRequestChannelOpenError_FieldPathSelectorMessage:
		(*target).Message = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for ListenRequest_ChannelOpenError: %d", fpv.selector))
	}
}

func (fpv *ListenRequestChannelOpenError_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListenRequest_ChannelOpenError)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListenRequestChannelOpenError_FieldTerminalPathValue' with the value under path in 'ListenRequest_ChannelOpenError'.
func (fpv *ListenRequestChannelOpenError_FieldTerminalPathValue) CompareWith(source *ListenRequest_ChannelOpenError) (int, bool) {
	switch fpv.selector {
	case ListenRequestChannelOpenError_FieldPathSelectorChannelId:
		leftValue := fpv.value.(uint64)
		rightValue := source.GetChannelId()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListenRequestChannelOpenError_FieldPathSelectorMessage:
		leftValue := fpv.value.(string)
		rightValue := source.GetMessage()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListenRequest_ChannelOpenError: %d", fpv.selector))
	}
}

func (fpv *ListenRequestChannelOpenError_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListenRequest_ChannelOpenError))
}

// ListenRequestChannelOpenError_FieldPathArrayItemValue allows storing single item in Path-specific values for ChannelOpenError according to their type
// Present only for array (repeated) types.
type ListenRequestChannelOpenError_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListenRequestChannelOpenError_FieldPath
	ContainsValue(*ListenRequest_ChannelOpenError) bool
}

// ParseListenRequestChannelOpenError_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListenRequestChannelOpenError_FieldPathArrayItemValue(pathStr, valueStr string) (ListenRequestChannelOpenError_FieldPathArrayItemValue, error) {
	fp, err := ParseListenRequestChannelOpenError_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ChannelOpenError field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListenRequestChannelOpenError_FieldPathArrayItemValue), nil
}

func MustParseListenRequestChannelOpenError_FieldPathArrayItemValue(pathStr, valueStr string) ListenRequestChannelOpenError_FieldPathArrayItemValue {
	fpaiv, err := ParseListenRequestChannelOpenError_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListenRequestChannelOpenError_FieldTerminalPathArrayItemValue struct {
	ListenRequestChannelOpenError_FieldTerminalPath
	value interface{}
}

var _ ListenRequestChannelOpenError_FieldPathArrayItemValue = (*ListenRequestChannelOpenError_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListenRequest_ChannelOpenError as interface{}
func (fpaiv *ListenRequestChannelOpenError_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ListenRequestChannelOpenError_FieldTerminalPathArrayItemValue) GetSingle(source *ListenRequest_ChannelOpenError) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListenRequestChannelOpenError_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListenRequest_ChannelOpenError))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ChannelOpenError'
func (fpaiv *ListenRequestChannelOpenError_FieldTerminalPathArrayItemValue) ContainsValue(source *ListenRequest_ChannelOpenError) bool {
	slice := fpaiv.ListenRequestChannelOpenError_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ListenRequestChannelOpenError_FieldPathArrayOfValues allows storing slice of values for ChannelOpenError fields according to their type
type ListenRequestChannelOpenError_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListenRequestChannelOpenError_FieldPath
}

func ParseListenRequestChannelOpenError_FieldPathArrayOfValues(pathStr, valuesStr string) (ListenRequestChannelOpenError_FieldPathArrayOfValues, error) {
	fp, err := ParseListenRequestChannelOpenError_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ChannelOpenError field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListenRequestChannelOpenError_FieldPathArrayOfValues), nil
}

func MustParseListenRequestChannelOpenError_FieldPathArrayOfValues(pathStr, valuesStr string) ListenRequestChannelOpenError_FieldPathArrayOfValues {
	fpaov, err := ParseListenRequestChannelOpenError_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListenRequestChannelOpenError_FieldTerminalPathArrayOfValues struct {
	ListenRequestChannelOpenError_FieldTerminalPath
	values interface{}
}

var _ ListenRequestChannelOpenError_FieldPathArrayOfValues = (*ListenRequestChannelOpenError_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListenRequestChannelOpenError_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListenRequestChannelOpenError_FieldPathSelectorChannelId:
		for _, v := range fpaov.values.([]uint64) {
			values = append(values, v)
		}
	case ListenRequestChannelOpenError_FieldPathSelectorMessage:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListenRequestChannelOpenError_FieldTerminalPathArrayOfValues) AsChannelIdArrayOfValues() ([]uint64, bool) {
	res, ok := fpaov.values.([]uint64)
	return res, ok
}
func (fpaov *ListenRequestChannelOpenError_FieldTerminalPathArrayOfValues) AsMessageArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListenResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListenResponse_FieldPathSelector
	Get(source *ListenResponse) []interface{}
	GetSingle(source *ListenResponse) (interface{}, bool)
	ClearValue(item *ListenResponse)

	// Those methods build corresponding ListenResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListenResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) ListenResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListenResponse_FieldPathArrayItemValue
}

type ListenResponse_FieldPathSelector int32

const (
	ListenResponse_FieldPathSelectorListening             ListenResponse_FieldPathSelector = 0
	ListenResponse_FieldPathSelectorOpenChannelResponse   ListenResponse_FieldPathSelector = 1
	ListenResponse_FieldPathSelectorResumeChannelResponse ListenResponse_FieldPathSelector = 2
)

func (s ListenResponse_FieldPathSelector) String() string {
	switch s {
	case ListenResponse_FieldPathSelectorListening:
		return "listening"
	case ListenResponse_FieldPathSelectorOpenChannelResponse:
		return "open_channel_response"
	case ListenResponse_FieldPathSelectorResumeChannelResponse:
		return "resume_channel_response"
	default:
		panic(fmt.Sprintf("Invalid selector for ListenResponse: %d", s))
	}
}

func BuildListenResponse_FieldPath(fp gotenobject.RawFieldPath) (ListenResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListenResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "listening":
			return &ListenResponse_FieldTerminalPath{selector: ListenResponse_FieldPathSelectorListening}, nil
		case "open_channel_response", "openChannelResponse", "open-channel-response":
			return &ListenResponse_FieldTerminalPath{selector: ListenResponse_FieldPathSelectorOpenChannelResponse}, nil
		case "resume_channel_response", "resumeChannelResponse", "resume-channel-response":
			return &ListenResponse_FieldTerminalPath{selector: ListenResponse_FieldPathSelectorResumeChannelResponse}, nil
		}
	} else {
		switch fp[0] {
		case "listening":
			if subpath, err := BuildListenResponseListening_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ListenResponse_FieldSubPath{selector: ListenResponse_FieldPathSelectorListening, subPath: subpath}, nil
			}
		case "open_channel_response", "openChannelResponse", "open-channel-response":
			if subpath, err := BuildListenResponseOpenChannelResponse_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ListenResponse_FieldSubPath{selector: ListenResponse_FieldPathSelectorOpenChannelResponse, subPath: subpath}, nil
			}
		case "resume_channel_response", "resumeChannelResponse", "resume-channel-response":
			if subpath, err := BuildListenResponseResumeChannelResponse_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ListenResponse_FieldSubPath{selector: ListenResponse_FieldPathSelectorResumeChannelResponse, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListenResponse", fp)
}

func ParseListenResponse_FieldPath(rawField string) (ListenResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListenResponse_FieldPath(fp)
}

func MustParseListenResponse_FieldPath(rawField string) ListenResponse_FieldPath {
	fp, err := ParseListenResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListenResponse_FieldTerminalPath struct {
	selector ListenResponse_FieldPathSelector
}

var _ ListenResponse_FieldPath = (*ListenResponse_FieldTerminalPath)(nil)

func (fp *ListenResponse_FieldTerminalPath) Selector() ListenResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListenResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListenResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListenResponse
func (fp *ListenResponse_FieldTerminalPath) Get(source *ListenResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListenResponse_FieldPathSelectorListening:
			if source, ok := source.Message.(*ListenResponse_Listening_); ok && source != nil {
				if source.Listening != nil {
					values = append(values, source.Listening)
				}
			}
		case ListenResponse_FieldPathSelectorOpenChannelResponse:
			if source, ok := source.Message.(*ListenResponse_OpenChannelResponse_); ok && source != nil {
				if source.OpenChannelResponse != nil {
					values = append(values, source.OpenChannelResponse)
				}
			}
		case ListenResponse_FieldPathSelectorResumeChannelResponse:
			if source, ok := source.Message.(*ListenResponse_ResumeChannelResponse_); ok && source != nil {
				if source.ResumeChannelResponse != nil {
					values = append(values, source.ResumeChannelResponse)
				}
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListenResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *ListenResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListenResponse))
}

// GetSingle returns value pointed by specific field of from source ListenResponse
func (fp *ListenResponse_FieldTerminalPath) GetSingle(source *ListenResponse) (interface{}, bool) {
	switch fp.selector {
	case ListenResponse_FieldPathSelectorListening:
		res := source.GetListening()
		return res, res != nil
	case ListenResponse_FieldPathSelectorOpenChannelResponse:
		res := source.GetOpenChannelResponse()
		return res, res != nil
	case ListenResponse_FieldPathSelectorResumeChannelResponse:
		res := source.GetResumeChannelResponse()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListenResponse: %d", fp.selector))
	}
}

func (fp *ListenResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListenResponse))
}

// GetDefault returns a default value of the field type
func (fp *ListenResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListenResponse_FieldPathSelectorListening:
		return (*ListenResponse_Listening)(nil)
	case ListenResponse_FieldPathSelectorOpenChannelResponse:
		return (*ListenResponse_OpenChannelResponse)(nil)
	case ListenResponse_FieldPathSelectorResumeChannelResponse:
		return (*ListenResponse_ResumeChannelResponse)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ListenResponse: %d", fp.selector))
	}
}

func (fp *ListenResponse_FieldTerminalPath) ClearValue(item *ListenResponse) {
	if item != nil {
		switch fp.selector {
		case ListenResponse_FieldPathSelectorListening:
			if item, ok := item.Message.(*ListenResponse_Listening_); ok {
				item.Listening = nil
			}
		case ListenResponse_FieldPathSelectorOpenChannelResponse:
			if item, ok := item.Message.(*ListenResponse_OpenChannelResponse_); ok {
				item.OpenChannelResponse = nil
			}
		case ListenResponse_FieldPathSelectorResumeChannelResponse:
			if item, ok := item.Message.(*ListenResponse_ResumeChannelResponse_); ok {
				item.ResumeChannelResponse = nil
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListenResponse: %d", fp.selector))
		}
	}
}

func (fp *ListenResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListenResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListenResponse_FieldTerminalPath) IsLeaf() bool {
	return false
}

func (fp *ListenResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ListenResponse_FieldTerminalPath) WithIValue(value interface{}) ListenResponse_FieldPathValue {
	switch fp.selector {
	case ListenResponse_FieldPathSelectorListening:
		return &ListenResponse_FieldTerminalPathValue{ListenResponse_FieldTerminalPath: *fp, value: value.(*ListenResponse_Listening)}
	case ListenResponse_FieldPathSelectorOpenChannelResponse:
		return &ListenResponse_FieldTerminalPathValue{ListenResponse_FieldTerminalPath: *fp, value: value.(*ListenResponse_OpenChannelResponse)}
	case ListenResponse_FieldPathSelectorResumeChannelResponse:
		return &ListenResponse_FieldTerminalPathValue{ListenResponse_FieldTerminalPath: *fp, value: value.(*ListenResponse_ResumeChannelResponse)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListenResponse: %d", fp.selector))
	}
}

func (fp *ListenResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListenResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListenResponse_FieldPathArrayOfValues {
	fpaov := &ListenResponse_FieldTerminalPathArrayOfValues{ListenResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListenResponse_FieldPathSelectorListening:
		return &ListenResponse_FieldTerminalPathArrayOfValues{ListenResponse_FieldTerminalPath: *fp, values: values.([]*ListenResponse_Listening)}
	case ListenResponse_FieldPathSelectorOpenChannelResponse:
		return &ListenResponse_FieldTerminalPathArrayOfValues{ListenResponse_FieldTerminalPath: *fp, values: values.([]*ListenResponse_OpenChannelResponse)}
	case ListenResponse_FieldPathSelectorResumeChannelResponse:
		return &ListenResponse_FieldTerminalPathArrayOfValues{ListenResponse_FieldTerminalPath: *fp, values: values.([]*ListenResponse_ResumeChannelResponse)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListenResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListenResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListenResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListenResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ListenResponse: %d", fp.selector))
	}
}

func (fp *ListenResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ListenResponse_FieldSubPath struct {
	selector ListenResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ListenResponse_FieldPath = (*ListenResponse_FieldSubPath)(nil)

func (fps *ListenResponse_FieldSubPath) Selector() ListenResponse_FieldPathSelector {
	return fps.selector
}
func (fps *ListenResponse_FieldSubPath) AsListeningSubPath() (ListenResponseListening_FieldPath, bool) {
	res, ok := fps.subPath.(ListenResponseListening_FieldPath)
	return res, ok
}
func (fps *ListenResponse_FieldSubPath) AsOpenChannelResponseSubPath() (ListenResponseOpenChannelResponse_FieldPath, bool) {
	res, ok := fps.subPath.(ListenResponseOpenChannelResponse_FieldPath)
	return res, ok
}
func (fps *ListenResponse_FieldSubPath) AsResumeChannelResponseSubPath() (ListenResponseResumeChannelResponse_FieldPath, bool) {
	res, ok := fps.subPath.(ListenResponseResumeChannelResponse_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ListenResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ListenResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ListenResponse
func (fps *ListenResponse_FieldSubPath) Get(source *ListenResponse) (values []interface{}) {
	switch fps.selector {
	case ListenResponse_FieldPathSelectorListening:
		values = append(values, fps.subPath.GetRaw(source.GetListening())...)
	case ListenResponse_FieldPathSelectorOpenChannelResponse:
		values = append(values, fps.subPath.GetRaw(source.GetOpenChannelResponse())...)
	case ListenResponse_FieldPathSelectorResumeChannelResponse:
		values = append(values, fps.subPath.GetRaw(source.GetResumeChannelResponse())...)
	default:
		panic(fmt.Sprintf("Invalid selector for ListenResponse: %d", fps.selector))
	}
	return
}

func (fps *ListenResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ListenResponse))
}

// GetSingle returns value of selected field from source ListenResponse
func (fps *ListenResponse_FieldSubPath) GetSingle(source *ListenResponse) (interface{}, bool) {
	switch fps.selector {
	case ListenResponse_FieldPathSelectorListening:
		if source.GetListening() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetListening())
	case ListenResponse_FieldPathSelectorOpenChannelResponse:
		if source.GetOpenChannelResponse() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetOpenChannelResponse())
	case ListenResponse_FieldPathSelectorResumeChannelResponse:
		if source.GetResumeChannelResponse() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetResumeChannelResponse())
	default:
		panic(fmt.Sprintf("Invalid selector for ListenResponse: %d", fps.selector))
	}
}

func (fps *ListenResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ListenResponse))
}

// GetDefault returns a default value of the field type
func (fps *ListenResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ListenResponse_FieldSubPath) ClearValue(item *ListenResponse) {
	if item != nil {
		switch fps.selector {
		case ListenResponse_FieldPathSelectorListening:
			if item.Message != nil {
				if item, ok := item.Message.(*ListenResponse_Listening_); ok {
					fps.subPath.ClearValueRaw(item.Listening)
				}
			}
		case ListenResponse_FieldPathSelectorOpenChannelResponse:
			if item.Message != nil {
				if item, ok := item.Message.(*ListenResponse_OpenChannelResponse_); ok {
					fps.subPath.ClearValueRaw(item.OpenChannelResponse)
				}
			}
		case ListenResponse_FieldPathSelectorResumeChannelResponse:
			if item.Message != nil {
				if item, ok := item.Message.(*ListenResponse_ResumeChannelResponse_); ok {
					fps.subPath.ClearValueRaw(item.ResumeChannelResponse)
				}
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListenResponse: %d", fps.selector))
		}
	}
}

func (fps *ListenResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ListenResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *ListenResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ListenResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&ListenResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *ListenResponse_FieldSubPath) WithIValue(value interface{}) ListenResponse_FieldPathValue {
	return &ListenResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ListenResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ListenResponse_FieldSubPath) WithIArrayOfValues(values interface{}) ListenResponse_FieldPathArrayOfValues {
	return &ListenResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ListenResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ListenResponse_FieldSubPath) WithIArrayItemValue(value interface{}) ListenResponse_FieldPathArrayItemValue {
	return &ListenResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ListenResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ListenResponse_FieldPathValue allows storing values for ListenResponse fields according to their type
type ListenResponse_FieldPathValue interface {
	ListenResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListenResponse)
	CompareWith(*ListenResponse) (cmp int, comparable bool)
}

func ParseListenResponse_FieldPathValue(pathStr, valueStr string) (ListenResponse_FieldPathValue, error) {
	fp, err := ParseListenResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListenResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListenResponse_FieldPathValue), nil
}

func MustParseListenResponse_FieldPathValue(pathStr, valueStr string) ListenResponse_FieldPathValue {
	fpv, err := ParseListenResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListenResponse_FieldTerminalPathValue struct {
	ListenResponse_FieldTerminalPath
	value interface{}
}

var _ ListenResponse_FieldPathValue = (*ListenResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListenResponse' as interface{}
func (fpv *ListenResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListenResponse_FieldTerminalPathValue) AsListeningValue() (*ListenResponse_Listening, bool) {
	res, ok := fpv.value.(*ListenResponse_Listening)
	return res, ok
}
func (fpv *ListenResponse_FieldTerminalPathValue) AsOpenChannelResponseValue() (*ListenResponse_OpenChannelResponse, bool) {
	res, ok := fpv.value.(*ListenResponse_OpenChannelResponse)
	return res, ok
}
func (fpv *ListenResponse_FieldTerminalPathValue) AsResumeChannelResponseValue() (*ListenResponse_ResumeChannelResponse, bool) {
	res, ok := fpv.value.(*ListenResponse_ResumeChannelResponse)
	return res, ok
}

// SetTo stores value for selected field for object ListenResponse
func (fpv *ListenResponse_FieldTerminalPathValue) SetTo(target **ListenResponse) {
	if *target == nil {
		*target = new(ListenResponse)
	}
	switch fpv.selector {
	case ListenResponse_FieldPathSelectorListening:
		if _, ok := (*target).Message.(*ListenResponse_Listening_); !ok {
			(*target).Message = &ListenResponse_Listening_{}
		}
		(*target).Message.(*ListenResponse_Listening_).Listening = fpv.value.(*ListenResponse_Listening)
	case ListenResponse_FieldPathSelectorOpenChannelResponse:
		if _, ok := (*target).Message.(*ListenResponse_OpenChannelResponse_); !ok {
			(*target).Message = &ListenResponse_OpenChannelResponse_{}
		}
		(*target).Message.(*ListenResponse_OpenChannelResponse_).OpenChannelResponse = fpv.value.(*ListenResponse_OpenChannelResponse)
	case ListenResponse_FieldPathSelectorResumeChannelResponse:
		if _, ok := (*target).Message.(*ListenResponse_ResumeChannelResponse_); !ok {
			(*target).Message = &ListenResponse_ResumeChannelResponse_{}
		}
		(*target).Message.(*ListenResponse_ResumeChannelResponse_).ResumeChannelResponse = fpv.value.(*ListenResponse_ResumeChannelResponse)
	default:
		panic(fmt.Sprintf("Invalid selector for ListenResponse: %d", fpv.selector))
	}
}

func (fpv *ListenResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListenResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListenResponse_FieldTerminalPathValue' with the value under path in 'ListenResponse'.
func (fpv *ListenResponse_FieldTerminalPathValue) CompareWith(source *ListenResponse) (int, bool) {
	switch fpv.selector {
	case ListenResponse_FieldPathSelectorListening:
		return 0, false
	case ListenResponse_FieldPathSelectorOpenChannelResponse:
		return 0, false
	case ListenResponse_FieldPathSelectorResumeChannelResponse:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ListenResponse: %d", fpv.selector))
	}
}

func (fpv *ListenResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListenResponse))
}

type ListenResponse_FieldSubPathValue struct {
	ListenResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ListenResponse_FieldPathValue = (*ListenResponse_FieldSubPathValue)(nil)

func (fpvs *ListenResponse_FieldSubPathValue) AsListeningPathValue() (ListenResponseListening_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ListenResponseListening_FieldPathValue)
	return res, ok
}
func (fpvs *ListenResponse_FieldSubPathValue) AsOpenChannelResponsePathValue() (ListenResponseOpenChannelResponse_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ListenResponseOpenChannelResponse_FieldPathValue)
	return res, ok
}
func (fpvs *ListenResponse_FieldSubPathValue) AsResumeChannelResponsePathValue() (ListenResponseResumeChannelResponse_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ListenResponseResumeChannelResponse_FieldPathValue)
	return res, ok
}

func (fpvs *ListenResponse_FieldSubPathValue) SetTo(target **ListenResponse) {
	if *target == nil {
		*target = new(ListenResponse)
	}
	switch fpvs.Selector() {
	case ListenResponse_FieldPathSelectorListening:
		if _, ok := (*target).Message.(*ListenResponse_Listening_); !ok {
			(*target).Message = &ListenResponse_Listening_{}
		}
		fpvs.subPathValue.(ListenResponseListening_FieldPathValue).SetTo(&(*target).Message.(*ListenResponse_Listening_).Listening)
	case ListenResponse_FieldPathSelectorOpenChannelResponse:
		if _, ok := (*target).Message.(*ListenResponse_OpenChannelResponse_); !ok {
			(*target).Message = &ListenResponse_OpenChannelResponse_{}
		}
		fpvs.subPathValue.(ListenResponseOpenChannelResponse_FieldPathValue).SetTo(&(*target).Message.(*ListenResponse_OpenChannelResponse_).OpenChannelResponse)
	case ListenResponse_FieldPathSelectorResumeChannelResponse:
		if _, ok := (*target).Message.(*ListenResponse_ResumeChannelResponse_); !ok {
			(*target).Message = &ListenResponse_ResumeChannelResponse_{}
		}
		fpvs.subPathValue.(ListenResponseResumeChannelResponse_FieldPathValue).SetTo(&(*target).Message.(*ListenResponse_ResumeChannelResponse_).ResumeChannelResponse)
	default:
		panic(fmt.Sprintf("Invalid selector for ListenResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListenResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListenResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ListenResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ListenResponse_FieldSubPathValue) CompareWith(source *ListenResponse) (int, bool) {
	switch fpvs.Selector() {
	case ListenResponse_FieldPathSelectorListening:
		return fpvs.subPathValue.(ListenResponseListening_FieldPathValue).CompareWith(source.GetListening())
	case ListenResponse_FieldPathSelectorOpenChannelResponse:
		return fpvs.subPathValue.(ListenResponseOpenChannelResponse_FieldPathValue).CompareWith(source.GetOpenChannelResponse())
	case ListenResponse_FieldPathSelectorResumeChannelResponse:
		return fpvs.subPathValue.(ListenResponseResumeChannelResponse_FieldPathValue).CompareWith(source.GetResumeChannelResponse())
	default:
		panic(fmt.Sprintf("Invalid selector for ListenResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListenResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ListenResponse))
}

// ListenResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for ListenResponse according to their type
// Present only for array (repeated) types.
type ListenResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListenResponse_FieldPath
	ContainsValue(*ListenResponse) bool
}

// ParseListenResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListenResponse_FieldPathArrayItemValue(pathStr, valueStr string) (ListenResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseListenResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListenResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListenResponse_FieldPathArrayItemValue), nil
}

func MustParseListenResponse_FieldPathArrayItemValue(pathStr, valueStr string) ListenResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseListenResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListenResponse_FieldTerminalPathArrayItemValue struct {
	ListenResponse_FieldTerminalPath
	value interface{}
}

var _ ListenResponse_FieldPathArrayItemValue = (*ListenResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListenResponse as interface{}
func (fpaiv *ListenResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ListenResponse_FieldTerminalPathArrayItemValue) GetSingle(source *ListenResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListenResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListenResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListenResponse'
func (fpaiv *ListenResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *ListenResponse) bool {
	slice := fpaiv.ListenResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ListenResponse_FieldSubPathArrayItemValue struct {
	ListenResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ListenResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ListenResponse_FieldSubPathArrayItemValue) AsListeningPathItemValue() (ListenResponseListening_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ListenResponseListening_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *ListenResponse_FieldSubPathArrayItemValue) AsOpenChannelResponsePathItemValue() (ListenResponseOpenChannelResponse_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ListenResponseOpenChannelResponse_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *ListenResponse_FieldSubPathArrayItemValue) AsResumeChannelResponsePathItemValue() (ListenResponseResumeChannelResponse_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ListenResponseResumeChannelResponse_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListenResponse'
func (fpaivs *ListenResponse_FieldSubPathArrayItemValue) ContainsValue(source *ListenResponse) bool {
	switch fpaivs.Selector() {
	case ListenResponse_FieldPathSelectorListening:
		return fpaivs.subPathItemValue.(ListenResponseListening_FieldPathArrayItemValue).ContainsValue(source.GetListening())
	case ListenResponse_FieldPathSelectorOpenChannelResponse:
		return fpaivs.subPathItemValue.(ListenResponseOpenChannelResponse_FieldPathArrayItemValue).ContainsValue(source.GetOpenChannelResponse())
	case ListenResponse_FieldPathSelectorResumeChannelResponse:
		return fpaivs.subPathItemValue.(ListenResponseResumeChannelResponse_FieldPathArrayItemValue).ContainsValue(source.GetResumeChannelResponse())
	default:
		panic(fmt.Sprintf("Invalid selector for ListenResponse: %d", fpaivs.Selector()))
	}
}

// ListenResponse_FieldPathArrayOfValues allows storing slice of values for ListenResponse fields according to their type
type ListenResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListenResponse_FieldPath
}

func ParseListenResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (ListenResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseListenResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListenResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListenResponse_FieldPathArrayOfValues), nil
}

func MustParseListenResponse_FieldPathArrayOfValues(pathStr, valuesStr string) ListenResponse_FieldPathArrayOfValues {
	fpaov, err := ParseListenResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListenResponse_FieldTerminalPathArrayOfValues struct {
	ListenResponse_FieldTerminalPath
	values interface{}
}

var _ ListenResponse_FieldPathArrayOfValues = (*ListenResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListenResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListenResponse_FieldPathSelectorListening:
		for _, v := range fpaov.values.([]*ListenResponse_Listening) {
			values = append(values, v)
		}
	case ListenResponse_FieldPathSelectorOpenChannelResponse:
		for _, v := range fpaov.values.([]*ListenResponse_OpenChannelResponse) {
			values = append(values, v)
		}
	case ListenResponse_FieldPathSelectorResumeChannelResponse:
		for _, v := range fpaov.values.([]*ListenResponse_ResumeChannelResponse) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListenResponse_FieldTerminalPathArrayOfValues) AsListeningArrayOfValues() ([]*ListenResponse_Listening, bool) {
	res, ok := fpaov.values.([]*ListenResponse_Listening)
	return res, ok
}
func (fpaov *ListenResponse_FieldTerminalPathArrayOfValues) AsOpenChannelResponseArrayOfValues() ([]*ListenResponse_OpenChannelResponse, bool) {
	res, ok := fpaov.values.([]*ListenResponse_OpenChannelResponse)
	return res, ok
}
func (fpaov *ListenResponse_FieldTerminalPathArrayOfValues) AsResumeChannelResponseArrayOfValues() ([]*ListenResponse_ResumeChannelResponse, bool) {
	res, ok := fpaov.values.([]*ListenResponse_ResumeChannelResponse)
	return res, ok
}

type ListenResponse_FieldSubPathArrayOfValues struct {
	ListenResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ListenResponse_FieldPathArrayOfValues = (*ListenResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ListenResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ListenResponse_FieldSubPathArrayOfValues) AsListeningPathArrayOfValues() (ListenResponseListening_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ListenResponseListening_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *ListenResponse_FieldSubPathArrayOfValues) AsOpenChannelResponsePathArrayOfValues() (ListenResponseOpenChannelResponse_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ListenResponseOpenChannelResponse_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *ListenResponse_FieldSubPathArrayOfValues) AsResumeChannelResponsePathArrayOfValues() (ListenResponseResumeChannelResponse_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ListenResponseResumeChannelResponse_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListenResponseListening_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListenResponseListening_FieldPathSelector
	Get(source *ListenResponse_Listening) []interface{}
	GetSingle(source *ListenResponse_Listening) (interface{}, bool)
	ClearValue(item *ListenResponse_Listening)

	// Those methods build corresponding ListenResponseListening_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListenResponseListening_FieldPathValue
	WithIArrayOfValues(values interface{}) ListenResponseListening_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListenResponseListening_FieldPathArrayItemValue
}

type ListenResponseListening_FieldPathSelector int32

const (
	ListenResponseListening_FieldPathSelectorSessionId ListenResponseListening_FieldPathSelector = 0
)

func (s ListenResponseListening_FieldPathSelector) String() string {
	switch s {
	case ListenResponseListening_FieldPathSelectorSessionId:
		return "session_id"
	default:
		panic(fmt.Sprintf("Invalid selector for ListenResponse_Listening: %d", s))
	}
}

func BuildListenResponseListening_FieldPath(fp gotenobject.RawFieldPath) (ListenResponseListening_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListenResponse_Listening")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "session_id", "sessionId", "session-id":
			return &ListenResponseListening_FieldTerminalPath{selector: ListenResponseListening_FieldPathSelectorSessionId}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListenResponse_Listening", fp)
}

func ParseListenResponseListening_FieldPath(rawField string) (ListenResponseListening_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListenResponseListening_FieldPath(fp)
}

func MustParseListenResponseListening_FieldPath(rawField string) ListenResponseListening_FieldPath {
	fp, err := ParseListenResponseListening_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListenResponseListening_FieldTerminalPath struct {
	selector ListenResponseListening_FieldPathSelector
}

var _ ListenResponseListening_FieldPath = (*ListenResponseListening_FieldTerminalPath)(nil)

func (fp *ListenResponseListening_FieldTerminalPath) Selector() ListenResponseListening_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListenResponseListening_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListenResponseListening_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListenResponse_Listening
func (fp *ListenResponseListening_FieldTerminalPath) Get(source *ListenResponse_Listening) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListenResponseListening_FieldPathSelectorSessionId:
			values = append(values, source.SessionId)
		default:
			panic(fmt.Sprintf("Invalid selector for ListenResponse_Listening: %d", fp.selector))
		}
	}
	return
}

func (fp *ListenResponseListening_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListenResponse_Listening))
}

// GetSingle returns value pointed by specific field of from source ListenResponse_Listening
func (fp *ListenResponseListening_FieldTerminalPath) GetSingle(source *ListenResponse_Listening) (interface{}, bool) {
	switch fp.selector {
	case ListenResponseListening_FieldPathSelectorSessionId:
		return source.GetSessionId(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListenResponse_Listening: %d", fp.selector))
	}
}

func (fp *ListenResponseListening_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListenResponse_Listening))
}

// GetDefault returns a default value of the field type
func (fp *ListenResponseListening_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListenResponseListening_FieldPathSelectorSessionId:
		return uint64(0)
	default:
		panic(fmt.Sprintf("Invalid selector for ListenResponse_Listening: %d", fp.selector))
	}
}

func (fp *ListenResponseListening_FieldTerminalPath) ClearValue(item *ListenResponse_Listening) {
	if item != nil {
		switch fp.selector {
		case ListenResponseListening_FieldPathSelectorSessionId:
			item.SessionId = uint64(0)
		default:
			panic(fmt.Sprintf("Invalid selector for ListenResponse_Listening: %d", fp.selector))
		}
	}
}

func (fp *ListenResponseListening_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListenResponse_Listening))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListenResponseListening_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListenResponseListening_FieldPathSelectorSessionId
}

func (fp *ListenResponseListening_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ListenResponseListening_FieldTerminalPath) WithIValue(value interface{}) ListenResponseListening_FieldPathValue {
	switch fp.selector {
	case ListenResponseListening_FieldPathSelectorSessionId:
		return &ListenResponseListening_FieldTerminalPathValue{ListenResponseListening_FieldTerminalPath: *fp, value: value.(uint64)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListenResponse_Listening: %d", fp.selector))
	}
}

func (fp *ListenResponseListening_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListenResponseListening_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListenResponseListening_FieldPathArrayOfValues {
	fpaov := &ListenResponseListening_FieldTerminalPathArrayOfValues{ListenResponseListening_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListenResponseListening_FieldPathSelectorSessionId:
		return &ListenResponseListening_FieldTerminalPathArrayOfValues{ListenResponseListening_FieldTerminalPath: *fp, values: values.([]uint64)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListenResponse_Listening: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListenResponseListening_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListenResponseListening_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListenResponseListening_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ListenResponse_Listening: %d", fp.selector))
	}
}

func (fp *ListenResponseListening_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ListenResponseListening_FieldPathValue allows storing values for Listening fields according to their type
type ListenResponseListening_FieldPathValue interface {
	ListenResponseListening_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListenResponse_Listening)
	CompareWith(*ListenResponse_Listening) (cmp int, comparable bool)
}

func ParseListenResponseListening_FieldPathValue(pathStr, valueStr string) (ListenResponseListening_FieldPathValue, error) {
	fp, err := ParseListenResponseListening_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Listening field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListenResponseListening_FieldPathValue), nil
}

func MustParseListenResponseListening_FieldPathValue(pathStr, valueStr string) ListenResponseListening_FieldPathValue {
	fpv, err := ParseListenResponseListening_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListenResponseListening_FieldTerminalPathValue struct {
	ListenResponseListening_FieldTerminalPath
	value interface{}
}

var _ ListenResponseListening_FieldPathValue = (*ListenResponseListening_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Listening' as interface{}
func (fpv *ListenResponseListening_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListenResponseListening_FieldTerminalPathValue) AsSessionIdValue() (uint64, bool) {
	res, ok := fpv.value.(uint64)
	return res, ok
}

// SetTo stores value for selected field for object Listening
func (fpv *ListenResponseListening_FieldTerminalPathValue) SetTo(target **ListenResponse_Listening) {
	if *target == nil {
		*target = new(ListenResponse_Listening)
	}
	switch fpv.selector {
	case ListenResponseListening_FieldPathSelectorSessionId:
		(*target).SessionId = fpv.value.(uint64)
	default:
		panic(fmt.Sprintf("Invalid selector for ListenResponse_Listening: %d", fpv.selector))
	}
}

func (fpv *ListenResponseListening_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListenResponse_Listening)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListenResponseListening_FieldTerminalPathValue' with the value under path in 'ListenResponse_Listening'.
func (fpv *ListenResponseListening_FieldTerminalPathValue) CompareWith(source *ListenResponse_Listening) (int, bool) {
	switch fpv.selector {
	case ListenResponseListening_FieldPathSelectorSessionId:
		leftValue := fpv.value.(uint64)
		rightValue := source.GetSessionId()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListenResponse_Listening: %d", fpv.selector))
	}
}

func (fpv *ListenResponseListening_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListenResponse_Listening))
}

// ListenResponseListening_FieldPathArrayItemValue allows storing single item in Path-specific values for Listening according to their type
// Present only for array (repeated) types.
type ListenResponseListening_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListenResponseListening_FieldPath
	ContainsValue(*ListenResponse_Listening) bool
}

// ParseListenResponseListening_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListenResponseListening_FieldPathArrayItemValue(pathStr, valueStr string) (ListenResponseListening_FieldPathArrayItemValue, error) {
	fp, err := ParseListenResponseListening_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Listening field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListenResponseListening_FieldPathArrayItemValue), nil
}

func MustParseListenResponseListening_FieldPathArrayItemValue(pathStr, valueStr string) ListenResponseListening_FieldPathArrayItemValue {
	fpaiv, err := ParseListenResponseListening_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListenResponseListening_FieldTerminalPathArrayItemValue struct {
	ListenResponseListening_FieldTerminalPath
	value interface{}
}

var _ ListenResponseListening_FieldPathArrayItemValue = (*ListenResponseListening_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListenResponse_Listening as interface{}
func (fpaiv *ListenResponseListening_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ListenResponseListening_FieldTerminalPathArrayItemValue) GetSingle(source *ListenResponse_Listening) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListenResponseListening_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListenResponse_Listening))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Listening'
func (fpaiv *ListenResponseListening_FieldTerminalPathArrayItemValue) ContainsValue(source *ListenResponse_Listening) bool {
	slice := fpaiv.ListenResponseListening_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ListenResponseListening_FieldPathArrayOfValues allows storing slice of values for Listening fields according to their type
type ListenResponseListening_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListenResponseListening_FieldPath
}

func ParseListenResponseListening_FieldPathArrayOfValues(pathStr, valuesStr string) (ListenResponseListening_FieldPathArrayOfValues, error) {
	fp, err := ParseListenResponseListening_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Listening field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListenResponseListening_FieldPathArrayOfValues), nil
}

func MustParseListenResponseListening_FieldPathArrayOfValues(pathStr, valuesStr string) ListenResponseListening_FieldPathArrayOfValues {
	fpaov, err := ParseListenResponseListening_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListenResponseListening_FieldTerminalPathArrayOfValues struct {
	ListenResponseListening_FieldTerminalPath
	values interface{}
}

var _ ListenResponseListening_FieldPathArrayOfValues = (*ListenResponseListening_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListenResponseListening_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListenResponseListening_FieldPathSelectorSessionId:
		for _, v := range fpaov.values.([]uint64) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListenResponseListening_FieldTerminalPathArrayOfValues) AsSessionIdArrayOfValues() ([]uint64, bool) {
	res, ok := fpaov.values.([]uint64)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListenResponseOpenChannelResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListenResponseOpenChannelResponse_FieldPathSelector
	Get(source *ListenResponse_OpenChannelResponse) []interface{}
	GetSingle(source *ListenResponse_OpenChannelResponse) (interface{}, bool)
	ClearValue(item *ListenResponse_OpenChannelResponse)

	// Those methods build corresponding ListenResponseOpenChannelResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListenResponseOpenChannelResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) ListenResponseOpenChannelResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListenResponseOpenChannelResponse_FieldPathArrayItemValue
}

type ListenResponseOpenChannelResponse_FieldPathSelector int32

const (
	ListenResponseOpenChannelResponse_FieldPathSelectorChannelId ListenResponseOpenChannelResponse_FieldPathSelector = 0
	ListenResponseOpenChannelResponse_FieldPathSelectorService   ListenResponseOpenChannelResponse_FieldPathSelector = 1
	ListenResponseOpenChannelResponse_FieldPathSelectorArg       ListenResponseOpenChannelResponse_FieldPathSelector = 2
)

func (s ListenResponseOpenChannelResponse_FieldPathSelector) String() string {
	switch s {
	case ListenResponseOpenChannelResponse_FieldPathSelectorChannelId:
		return "channel_id"
	case ListenResponseOpenChannelResponse_FieldPathSelectorService:
		return "service"
	case ListenResponseOpenChannelResponse_FieldPathSelectorArg:
		return "arg"
	default:
		panic(fmt.Sprintf("Invalid selector for ListenResponse_OpenChannelResponse: %d", s))
	}
}

func BuildListenResponseOpenChannelResponse_FieldPath(fp gotenobject.RawFieldPath) (ListenResponseOpenChannelResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListenResponse_OpenChannelResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "channel_id", "channelId", "channel-id":
			return &ListenResponseOpenChannelResponse_FieldTerminalPath{selector: ListenResponseOpenChannelResponse_FieldPathSelectorChannelId}, nil
		case "service":
			return &ListenResponseOpenChannelResponse_FieldTerminalPath{selector: ListenResponseOpenChannelResponse_FieldPathSelectorService}, nil
		case "arg":
			return &ListenResponseOpenChannelResponse_FieldTerminalPath{selector: ListenResponseOpenChannelResponse_FieldPathSelectorArg}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListenResponse_OpenChannelResponse", fp)
}

func ParseListenResponseOpenChannelResponse_FieldPath(rawField string) (ListenResponseOpenChannelResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListenResponseOpenChannelResponse_FieldPath(fp)
}

func MustParseListenResponseOpenChannelResponse_FieldPath(rawField string) ListenResponseOpenChannelResponse_FieldPath {
	fp, err := ParseListenResponseOpenChannelResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListenResponseOpenChannelResponse_FieldTerminalPath struct {
	selector ListenResponseOpenChannelResponse_FieldPathSelector
}

var _ ListenResponseOpenChannelResponse_FieldPath = (*ListenResponseOpenChannelResponse_FieldTerminalPath)(nil)

func (fp *ListenResponseOpenChannelResponse_FieldTerminalPath) Selector() ListenResponseOpenChannelResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListenResponseOpenChannelResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListenResponseOpenChannelResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListenResponse_OpenChannelResponse
func (fp *ListenResponseOpenChannelResponse_FieldTerminalPath) Get(source *ListenResponse_OpenChannelResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListenResponseOpenChannelResponse_FieldPathSelectorChannelId:
			values = append(values, source.ChannelId)
		case ListenResponseOpenChannelResponse_FieldPathSelectorService:
			values = append(values, source.Service)
		case ListenResponseOpenChannelResponse_FieldPathSelectorArg:
			values = append(values, source.Arg)
		default:
			panic(fmt.Sprintf("Invalid selector for ListenResponse_OpenChannelResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *ListenResponseOpenChannelResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListenResponse_OpenChannelResponse))
}

// GetSingle returns value pointed by specific field of from source ListenResponse_OpenChannelResponse
func (fp *ListenResponseOpenChannelResponse_FieldTerminalPath) GetSingle(source *ListenResponse_OpenChannelResponse) (interface{}, bool) {
	switch fp.selector {
	case ListenResponseOpenChannelResponse_FieldPathSelectorChannelId:
		return source.GetChannelId(), source != nil
	case ListenResponseOpenChannelResponse_FieldPathSelectorService:
		return source.GetService(), source != nil
	case ListenResponseOpenChannelResponse_FieldPathSelectorArg:
		res := source.GetArg()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListenResponse_OpenChannelResponse: %d", fp.selector))
	}
}

func (fp *ListenResponseOpenChannelResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListenResponse_OpenChannelResponse))
}

// GetDefault returns a default value of the field type
func (fp *ListenResponseOpenChannelResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListenResponseOpenChannelResponse_FieldPathSelectorChannelId:
		return uint64(0)
	case ListenResponseOpenChannelResponse_FieldPathSelectorService:
		return ""
	case ListenResponseOpenChannelResponse_FieldPathSelectorArg:
		return ([]byte)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ListenResponse_OpenChannelResponse: %d", fp.selector))
	}
}

func (fp *ListenResponseOpenChannelResponse_FieldTerminalPath) ClearValue(item *ListenResponse_OpenChannelResponse) {
	if item != nil {
		switch fp.selector {
		case ListenResponseOpenChannelResponse_FieldPathSelectorChannelId:
			item.ChannelId = uint64(0)
		case ListenResponseOpenChannelResponse_FieldPathSelectorService:
			item.Service = ""
		case ListenResponseOpenChannelResponse_FieldPathSelectorArg:
			item.Arg = nil
		default:
			panic(fmt.Sprintf("Invalid selector for ListenResponse_OpenChannelResponse: %d", fp.selector))
		}
	}
}

func (fp *ListenResponseOpenChannelResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListenResponse_OpenChannelResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListenResponseOpenChannelResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListenResponseOpenChannelResponse_FieldPathSelectorChannelId ||
		fp.selector == ListenResponseOpenChannelResponse_FieldPathSelectorService ||
		fp.selector == ListenResponseOpenChannelResponse_FieldPathSelectorArg
}

func (fp *ListenResponseOpenChannelResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ListenResponseOpenChannelResponse_FieldTerminalPath) WithIValue(value interface{}) ListenResponseOpenChannelResponse_FieldPathValue {
	switch fp.selector {
	case ListenResponseOpenChannelResponse_FieldPathSelectorChannelId:
		return &ListenResponseOpenChannelResponse_FieldTerminalPathValue{ListenResponseOpenChannelResponse_FieldTerminalPath: *fp, value: value.(uint64)}
	case ListenResponseOpenChannelResponse_FieldPathSelectorService:
		return &ListenResponseOpenChannelResponse_FieldTerminalPathValue{ListenResponseOpenChannelResponse_FieldTerminalPath: *fp, value: value.(string)}
	case ListenResponseOpenChannelResponse_FieldPathSelectorArg:
		return &ListenResponseOpenChannelResponse_FieldTerminalPathValue{ListenResponseOpenChannelResponse_FieldTerminalPath: *fp, value: value.([]byte)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListenResponse_OpenChannelResponse: %d", fp.selector))
	}
}

func (fp *ListenResponseOpenChannelResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListenResponseOpenChannelResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListenResponseOpenChannelResponse_FieldPathArrayOfValues {
	fpaov := &ListenResponseOpenChannelResponse_FieldTerminalPathArrayOfValues{ListenResponseOpenChannelResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListenResponseOpenChannelResponse_FieldPathSelectorChannelId:
		return &ListenResponseOpenChannelResponse_FieldTerminalPathArrayOfValues{ListenResponseOpenChannelResponse_FieldTerminalPath: *fp, values: values.([]uint64)}
	case ListenResponseOpenChannelResponse_FieldPathSelectorService:
		return &ListenResponseOpenChannelResponse_FieldTerminalPathArrayOfValues{ListenResponseOpenChannelResponse_FieldTerminalPath: *fp, values: values.([]string)}
	case ListenResponseOpenChannelResponse_FieldPathSelectorArg:
		return &ListenResponseOpenChannelResponse_FieldTerminalPathArrayOfValues{ListenResponseOpenChannelResponse_FieldTerminalPath: *fp, values: values.([][]byte)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListenResponse_OpenChannelResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListenResponseOpenChannelResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListenResponseOpenChannelResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListenResponseOpenChannelResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ListenResponse_OpenChannelResponse: %d", fp.selector))
	}
}

func (fp *ListenResponseOpenChannelResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ListenResponseOpenChannelResponse_FieldPathValue allows storing values for OpenChannelResponse fields according to their type
type ListenResponseOpenChannelResponse_FieldPathValue interface {
	ListenResponseOpenChannelResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListenResponse_OpenChannelResponse)
	CompareWith(*ListenResponse_OpenChannelResponse) (cmp int, comparable bool)
}

func ParseListenResponseOpenChannelResponse_FieldPathValue(pathStr, valueStr string) (ListenResponseOpenChannelResponse_FieldPathValue, error) {
	fp, err := ParseListenResponseOpenChannelResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing OpenChannelResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListenResponseOpenChannelResponse_FieldPathValue), nil
}

func MustParseListenResponseOpenChannelResponse_FieldPathValue(pathStr, valueStr string) ListenResponseOpenChannelResponse_FieldPathValue {
	fpv, err := ParseListenResponseOpenChannelResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListenResponseOpenChannelResponse_FieldTerminalPathValue struct {
	ListenResponseOpenChannelResponse_FieldTerminalPath
	value interface{}
}

var _ ListenResponseOpenChannelResponse_FieldPathValue = (*ListenResponseOpenChannelResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'OpenChannelResponse' as interface{}
func (fpv *ListenResponseOpenChannelResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListenResponseOpenChannelResponse_FieldTerminalPathValue) AsChannelIdValue() (uint64, bool) {
	res, ok := fpv.value.(uint64)
	return res, ok
}
func (fpv *ListenResponseOpenChannelResponse_FieldTerminalPathValue) AsServiceValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *ListenResponseOpenChannelResponse_FieldTerminalPathValue) AsArgValue() ([]byte, bool) {
	res, ok := fpv.value.([]byte)
	return res, ok
}

// SetTo stores value for selected field for object OpenChannelResponse
func (fpv *ListenResponseOpenChannelResponse_FieldTerminalPathValue) SetTo(target **ListenResponse_OpenChannelResponse) {
	if *target == nil {
		*target = new(ListenResponse_OpenChannelResponse)
	}
	switch fpv.selector {
	case ListenResponseOpenChannelResponse_FieldPathSelectorChannelId:
		(*target).ChannelId = fpv.value.(uint64)
	case ListenResponseOpenChannelResponse_FieldPathSelectorService:
		(*target).Service = fpv.value.(string)
	case ListenResponseOpenChannelResponse_FieldPathSelectorArg:
		(*target).Arg = fpv.value.([]byte)
	default:
		panic(fmt.Sprintf("Invalid selector for ListenResponse_OpenChannelResponse: %d", fpv.selector))
	}
}

func (fpv *ListenResponseOpenChannelResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListenResponse_OpenChannelResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListenResponseOpenChannelResponse_FieldTerminalPathValue' with the value under path in 'ListenResponse_OpenChannelResponse'.
func (fpv *ListenResponseOpenChannelResponse_FieldTerminalPathValue) CompareWith(source *ListenResponse_OpenChannelResponse) (int, bool) {
	switch fpv.selector {
	case ListenResponseOpenChannelResponse_FieldPathSelectorChannelId:
		leftValue := fpv.value.(uint64)
		rightValue := source.GetChannelId()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListenResponseOpenChannelResponse_FieldPathSelectorService:
		leftValue := fpv.value.(string)
		rightValue := source.GetService()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListenResponseOpenChannelResponse_FieldPathSelectorArg:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ListenResponse_OpenChannelResponse: %d", fpv.selector))
	}
}

func (fpv *ListenResponseOpenChannelResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListenResponse_OpenChannelResponse))
}

// ListenResponseOpenChannelResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for OpenChannelResponse according to their type
// Present only for array (repeated) types.
type ListenResponseOpenChannelResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListenResponseOpenChannelResponse_FieldPath
	ContainsValue(*ListenResponse_OpenChannelResponse) bool
}

// ParseListenResponseOpenChannelResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListenResponseOpenChannelResponse_FieldPathArrayItemValue(pathStr, valueStr string) (ListenResponseOpenChannelResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseListenResponseOpenChannelResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing OpenChannelResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListenResponseOpenChannelResponse_FieldPathArrayItemValue), nil
}

func MustParseListenResponseOpenChannelResponse_FieldPathArrayItemValue(pathStr, valueStr string) ListenResponseOpenChannelResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseListenResponseOpenChannelResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListenResponseOpenChannelResponse_FieldTerminalPathArrayItemValue struct {
	ListenResponseOpenChannelResponse_FieldTerminalPath
	value interface{}
}

var _ ListenResponseOpenChannelResponse_FieldPathArrayItemValue = (*ListenResponseOpenChannelResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListenResponse_OpenChannelResponse as interface{}
func (fpaiv *ListenResponseOpenChannelResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ListenResponseOpenChannelResponse_FieldTerminalPathArrayItemValue) GetSingle(source *ListenResponse_OpenChannelResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListenResponseOpenChannelResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListenResponse_OpenChannelResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'OpenChannelResponse'
func (fpaiv *ListenResponseOpenChannelResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *ListenResponse_OpenChannelResponse) bool {
	slice := fpaiv.ListenResponseOpenChannelResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ListenResponseOpenChannelResponse_FieldPathArrayOfValues allows storing slice of values for OpenChannelResponse fields according to their type
type ListenResponseOpenChannelResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListenResponseOpenChannelResponse_FieldPath
}

func ParseListenResponseOpenChannelResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (ListenResponseOpenChannelResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseListenResponseOpenChannelResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing OpenChannelResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListenResponseOpenChannelResponse_FieldPathArrayOfValues), nil
}

func MustParseListenResponseOpenChannelResponse_FieldPathArrayOfValues(pathStr, valuesStr string) ListenResponseOpenChannelResponse_FieldPathArrayOfValues {
	fpaov, err := ParseListenResponseOpenChannelResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListenResponseOpenChannelResponse_FieldTerminalPathArrayOfValues struct {
	ListenResponseOpenChannelResponse_FieldTerminalPath
	values interface{}
}

var _ ListenResponseOpenChannelResponse_FieldPathArrayOfValues = (*ListenResponseOpenChannelResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListenResponseOpenChannelResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListenResponseOpenChannelResponse_FieldPathSelectorChannelId:
		for _, v := range fpaov.values.([]uint64) {
			values = append(values, v)
		}
	case ListenResponseOpenChannelResponse_FieldPathSelectorService:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case ListenResponseOpenChannelResponse_FieldPathSelectorArg:
		for _, v := range fpaov.values.([][]byte) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListenResponseOpenChannelResponse_FieldTerminalPathArrayOfValues) AsChannelIdArrayOfValues() ([]uint64, bool) {
	res, ok := fpaov.values.([]uint64)
	return res, ok
}
func (fpaov *ListenResponseOpenChannelResponse_FieldTerminalPathArrayOfValues) AsServiceArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *ListenResponseOpenChannelResponse_FieldTerminalPathArrayOfValues) AsArgArrayOfValues() ([][]byte, bool) {
	res, ok := fpaov.values.([][]byte)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListenResponseResumeChannelResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListenResponseResumeChannelResponse_FieldPathSelector
	Get(source *ListenResponse_ResumeChannelResponse) []interface{}
	GetSingle(source *ListenResponse_ResumeChannelResponse) (interface{}, bool)
	ClearValue(item *ListenResponse_ResumeChannelResponse)

	// Those methods build corresponding ListenResponseResumeChannelResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListenResponseResumeChannelResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) ListenResponseResumeChannelResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListenResponseResumeChannelResponse_FieldPathArrayItemValue
}

type ListenResponseResumeChannelResponse_FieldPathSelector int32

const (
	ListenResponseResumeChannelResponse_FieldPathSelectorChannelId     ListenResponseResumeChannelResponse_FieldPathSelector = 0
	ListenResponseResumeChannelResponse_FieldPathSelectorService       ListenResponseResumeChannelResponse_FieldPathSelector = 1
	ListenResponseResumeChannelResponse_FieldPathSelectorArg           ListenResponseResumeChannelResponse_FieldPathSelector = 2
	ListenResponseResumeChannelResponse_FieldPathSelectorLastMessageId ListenResponseResumeChannelResponse_FieldPathSelector = 3
)

func (s ListenResponseResumeChannelResponse_FieldPathSelector) String() string {
	switch s {
	case ListenResponseResumeChannelResponse_FieldPathSelectorChannelId:
		return "channel_id"
	case ListenResponseResumeChannelResponse_FieldPathSelectorService:
		return "service"
	case ListenResponseResumeChannelResponse_FieldPathSelectorArg:
		return "arg"
	case ListenResponseResumeChannelResponse_FieldPathSelectorLastMessageId:
		return "last_message_id"
	default:
		panic(fmt.Sprintf("Invalid selector for ListenResponse_ResumeChannelResponse: %d", s))
	}
}

func BuildListenResponseResumeChannelResponse_FieldPath(fp gotenobject.RawFieldPath) (ListenResponseResumeChannelResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListenResponse_ResumeChannelResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "channel_id", "channelId", "channel-id":
			return &ListenResponseResumeChannelResponse_FieldTerminalPath{selector: ListenResponseResumeChannelResponse_FieldPathSelectorChannelId}, nil
		case "service":
			return &ListenResponseResumeChannelResponse_FieldTerminalPath{selector: ListenResponseResumeChannelResponse_FieldPathSelectorService}, nil
		case "arg":
			return &ListenResponseResumeChannelResponse_FieldTerminalPath{selector: ListenResponseResumeChannelResponse_FieldPathSelectorArg}, nil
		case "last_message_id", "lastMessageId", "last-message-id":
			return &ListenResponseResumeChannelResponse_FieldTerminalPath{selector: ListenResponseResumeChannelResponse_FieldPathSelectorLastMessageId}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListenResponse_ResumeChannelResponse", fp)
}

func ParseListenResponseResumeChannelResponse_FieldPath(rawField string) (ListenResponseResumeChannelResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListenResponseResumeChannelResponse_FieldPath(fp)
}

func MustParseListenResponseResumeChannelResponse_FieldPath(rawField string) ListenResponseResumeChannelResponse_FieldPath {
	fp, err := ParseListenResponseResumeChannelResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListenResponseResumeChannelResponse_FieldTerminalPath struct {
	selector ListenResponseResumeChannelResponse_FieldPathSelector
}

var _ ListenResponseResumeChannelResponse_FieldPath = (*ListenResponseResumeChannelResponse_FieldTerminalPath)(nil)

func (fp *ListenResponseResumeChannelResponse_FieldTerminalPath) Selector() ListenResponseResumeChannelResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListenResponseResumeChannelResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListenResponseResumeChannelResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListenResponse_ResumeChannelResponse
func (fp *ListenResponseResumeChannelResponse_FieldTerminalPath) Get(source *ListenResponse_ResumeChannelResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListenResponseResumeChannelResponse_FieldPathSelectorChannelId:
			values = append(values, source.ChannelId)
		case ListenResponseResumeChannelResponse_FieldPathSelectorService:
			values = append(values, source.Service)
		case ListenResponseResumeChannelResponse_FieldPathSelectorArg:
			values = append(values, source.Arg)
		case ListenResponseResumeChannelResponse_FieldPathSelectorLastMessageId:
			values = append(values, source.LastMessageId)
		default:
			panic(fmt.Sprintf("Invalid selector for ListenResponse_ResumeChannelResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *ListenResponseResumeChannelResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListenResponse_ResumeChannelResponse))
}

// GetSingle returns value pointed by specific field of from source ListenResponse_ResumeChannelResponse
func (fp *ListenResponseResumeChannelResponse_FieldTerminalPath) GetSingle(source *ListenResponse_ResumeChannelResponse) (interface{}, bool) {
	switch fp.selector {
	case ListenResponseResumeChannelResponse_FieldPathSelectorChannelId:
		return source.GetChannelId(), source != nil
	case ListenResponseResumeChannelResponse_FieldPathSelectorService:
		return source.GetService(), source != nil
	case ListenResponseResumeChannelResponse_FieldPathSelectorArg:
		res := source.GetArg()
		return res, res != nil
	case ListenResponseResumeChannelResponse_FieldPathSelectorLastMessageId:
		return source.GetLastMessageId(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListenResponse_ResumeChannelResponse: %d", fp.selector))
	}
}

func (fp *ListenResponseResumeChannelResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListenResponse_ResumeChannelResponse))
}

// GetDefault returns a default value of the field type
func (fp *ListenResponseResumeChannelResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListenResponseResumeChannelResponse_FieldPathSelectorChannelId:
		return uint64(0)
	case ListenResponseResumeChannelResponse_FieldPathSelectorService:
		return ""
	case ListenResponseResumeChannelResponse_FieldPathSelectorArg:
		return ([]byte)(nil)
	case ListenResponseResumeChannelResponse_FieldPathSelectorLastMessageId:
		return uint64(0)
	default:
		panic(fmt.Sprintf("Invalid selector for ListenResponse_ResumeChannelResponse: %d", fp.selector))
	}
}

func (fp *ListenResponseResumeChannelResponse_FieldTerminalPath) ClearValue(item *ListenResponse_ResumeChannelResponse) {
	if item != nil {
		switch fp.selector {
		case ListenResponseResumeChannelResponse_FieldPathSelectorChannelId:
			item.ChannelId = uint64(0)
		case ListenResponseResumeChannelResponse_FieldPathSelectorService:
			item.Service = ""
		case ListenResponseResumeChannelResponse_FieldPathSelectorArg:
			item.Arg = nil
		case ListenResponseResumeChannelResponse_FieldPathSelectorLastMessageId:
			item.LastMessageId = uint64(0)
		default:
			panic(fmt.Sprintf("Invalid selector for ListenResponse_ResumeChannelResponse: %d", fp.selector))
		}
	}
}

func (fp *ListenResponseResumeChannelResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListenResponse_ResumeChannelResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListenResponseResumeChannelResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListenResponseResumeChannelResponse_FieldPathSelectorChannelId ||
		fp.selector == ListenResponseResumeChannelResponse_FieldPathSelectorService ||
		fp.selector == ListenResponseResumeChannelResponse_FieldPathSelectorArg ||
		fp.selector == ListenResponseResumeChannelResponse_FieldPathSelectorLastMessageId
}

func (fp *ListenResponseResumeChannelResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ListenResponseResumeChannelResponse_FieldTerminalPath) WithIValue(value interface{}) ListenResponseResumeChannelResponse_FieldPathValue {
	switch fp.selector {
	case ListenResponseResumeChannelResponse_FieldPathSelectorChannelId:
		return &ListenResponseResumeChannelResponse_FieldTerminalPathValue{ListenResponseResumeChannelResponse_FieldTerminalPath: *fp, value: value.(uint64)}
	case ListenResponseResumeChannelResponse_FieldPathSelectorService:
		return &ListenResponseResumeChannelResponse_FieldTerminalPathValue{ListenResponseResumeChannelResponse_FieldTerminalPath: *fp, value: value.(string)}
	case ListenResponseResumeChannelResponse_FieldPathSelectorArg:
		return &ListenResponseResumeChannelResponse_FieldTerminalPathValue{ListenResponseResumeChannelResponse_FieldTerminalPath: *fp, value: value.([]byte)}
	case ListenResponseResumeChannelResponse_FieldPathSelectorLastMessageId:
		return &ListenResponseResumeChannelResponse_FieldTerminalPathValue{ListenResponseResumeChannelResponse_FieldTerminalPath: *fp, value: value.(uint64)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListenResponse_ResumeChannelResponse: %d", fp.selector))
	}
}

func (fp *ListenResponseResumeChannelResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListenResponseResumeChannelResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListenResponseResumeChannelResponse_FieldPathArrayOfValues {
	fpaov := &ListenResponseResumeChannelResponse_FieldTerminalPathArrayOfValues{ListenResponseResumeChannelResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListenResponseResumeChannelResponse_FieldPathSelectorChannelId:
		return &ListenResponseResumeChannelResponse_FieldTerminalPathArrayOfValues{ListenResponseResumeChannelResponse_FieldTerminalPath: *fp, values: values.([]uint64)}
	case ListenResponseResumeChannelResponse_FieldPathSelectorService:
		return &ListenResponseResumeChannelResponse_FieldTerminalPathArrayOfValues{ListenResponseResumeChannelResponse_FieldTerminalPath: *fp, values: values.([]string)}
	case ListenResponseResumeChannelResponse_FieldPathSelectorArg:
		return &ListenResponseResumeChannelResponse_FieldTerminalPathArrayOfValues{ListenResponseResumeChannelResponse_FieldTerminalPath: *fp, values: values.([][]byte)}
	case ListenResponseResumeChannelResponse_FieldPathSelectorLastMessageId:
		return &ListenResponseResumeChannelResponse_FieldTerminalPathArrayOfValues{ListenResponseResumeChannelResponse_FieldTerminalPath: *fp, values: values.([]uint64)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListenResponse_ResumeChannelResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListenResponseResumeChannelResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListenResponseResumeChannelResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListenResponseResumeChannelResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ListenResponse_ResumeChannelResponse: %d", fp.selector))
	}
}

func (fp *ListenResponseResumeChannelResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ListenResponseResumeChannelResponse_FieldPathValue allows storing values for ResumeChannelResponse fields according to their type
type ListenResponseResumeChannelResponse_FieldPathValue interface {
	ListenResponseResumeChannelResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListenResponse_ResumeChannelResponse)
	CompareWith(*ListenResponse_ResumeChannelResponse) (cmp int, comparable bool)
}

func ParseListenResponseResumeChannelResponse_FieldPathValue(pathStr, valueStr string) (ListenResponseResumeChannelResponse_FieldPathValue, error) {
	fp, err := ParseListenResponseResumeChannelResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ResumeChannelResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListenResponseResumeChannelResponse_FieldPathValue), nil
}

func MustParseListenResponseResumeChannelResponse_FieldPathValue(pathStr, valueStr string) ListenResponseResumeChannelResponse_FieldPathValue {
	fpv, err := ParseListenResponseResumeChannelResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListenResponseResumeChannelResponse_FieldTerminalPathValue struct {
	ListenResponseResumeChannelResponse_FieldTerminalPath
	value interface{}
}

var _ ListenResponseResumeChannelResponse_FieldPathValue = (*ListenResponseResumeChannelResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ResumeChannelResponse' as interface{}
func (fpv *ListenResponseResumeChannelResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListenResponseResumeChannelResponse_FieldTerminalPathValue) AsChannelIdValue() (uint64, bool) {
	res, ok := fpv.value.(uint64)
	return res, ok
}
func (fpv *ListenResponseResumeChannelResponse_FieldTerminalPathValue) AsServiceValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *ListenResponseResumeChannelResponse_FieldTerminalPathValue) AsArgValue() ([]byte, bool) {
	res, ok := fpv.value.([]byte)
	return res, ok
}
func (fpv *ListenResponseResumeChannelResponse_FieldTerminalPathValue) AsLastMessageIdValue() (uint64, bool) {
	res, ok := fpv.value.(uint64)
	return res, ok
}

// SetTo stores value for selected field for object ResumeChannelResponse
func (fpv *ListenResponseResumeChannelResponse_FieldTerminalPathValue) SetTo(target **ListenResponse_ResumeChannelResponse) {
	if *target == nil {
		*target = new(ListenResponse_ResumeChannelResponse)
	}
	switch fpv.selector {
	case ListenResponseResumeChannelResponse_FieldPathSelectorChannelId:
		(*target).ChannelId = fpv.value.(uint64)
	case ListenResponseResumeChannelResponse_FieldPathSelectorService:
		(*target).Service = fpv.value.(string)
	case ListenResponseResumeChannelResponse_FieldPathSelectorArg:
		(*target).Arg = fpv.value.([]byte)
	case ListenResponseResumeChannelResponse_FieldPathSelectorLastMessageId:
		(*target).LastMessageId = fpv.value.(uint64)
	default:
		panic(fmt.Sprintf("Invalid selector for ListenResponse_ResumeChannelResponse: %d", fpv.selector))
	}
}

func (fpv *ListenResponseResumeChannelResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListenResponse_ResumeChannelResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListenResponseResumeChannelResponse_FieldTerminalPathValue' with the value under path in 'ListenResponse_ResumeChannelResponse'.
func (fpv *ListenResponseResumeChannelResponse_FieldTerminalPathValue) CompareWith(source *ListenResponse_ResumeChannelResponse) (int, bool) {
	switch fpv.selector {
	case ListenResponseResumeChannelResponse_FieldPathSelectorChannelId:
		leftValue := fpv.value.(uint64)
		rightValue := source.GetChannelId()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListenResponseResumeChannelResponse_FieldPathSelectorService:
		leftValue := fpv.value.(string)
		rightValue := source.GetService()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListenResponseResumeChannelResponse_FieldPathSelectorArg:
		return 0, false
	case ListenResponseResumeChannelResponse_FieldPathSelectorLastMessageId:
		leftValue := fpv.value.(uint64)
		rightValue := source.GetLastMessageId()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListenResponse_ResumeChannelResponse: %d", fpv.selector))
	}
}

func (fpv *ListenResponseResumeChannelResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListenResponse_ResumeChannelResponse))
}

// ListenResponseResumeChannelResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for ResumeChannelResponse according to their type
// Present only for array (repeated) types.
type ListenResponseResumeChannelResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListenResponseResumeChannelResponse_FieldPath
	ContainsValue(*ListenResponse_ResumeChannelResponse) bool
}

// ParseListenResponseResumeChannelResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListenResponseResumeChannelResponse_FieldPathArrayItemValue(pathStr, valueStr string) (ListenResponseResumeChannelResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseListenResponseResumeChannelResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ResumeChannelResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListenResponseResumeChannelResponse_FieldPathArrayItemValue), nil
}

func MustParseListenResponseResumeChannelResponse_FieldPathArrayItemValue(pathStr, valueStr string) ListenResponseResumeChannelResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseListenResponseResumeChannelResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListenResponseResumeChannelResponse_FieldTerminalPathArrayItemValue struct {
	ListenResponseResumeChannelResponse_FieldTerminalPath
	value interface{}
}

var _ ListenResponseResumeChannelResponse_FieldPathArrayItemValue = (*ListenResponseResumeChannelResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListenResponse_ResumeChannelResponse as interface{}
func (fpaiv *ListenResponseResumeChannelResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ListenResponseResumeChannelResponse_FieldTerminalPathArrayItemValue) GetSingle(source *ListenResponse_ResumeChannelResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListenResponseResumeChannelResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListenResponse_ResumeChannelResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ResumeChannelResponse'
func (fpaiv *ListenResponseResumeChannelResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *ListenResponse_ResumeChannelResponse) bool {
	slice := fpaiv.ListenResponseResumeChannelResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ListenResponseResumeChannelResponse_FieldPathArrayOfValues allows storing slice of values for ResumeChannelResponse fields according to their type
type ListenResponseResumeChannelResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListenResponseResumeChannelResponse_FieldPath
}

func ParseListenResponseResumeChannelResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (ListenResponseResumeChannelResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseListenResponseResumeChannelResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ResumeChannelResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListenResponseResumeChannelResponse_FieldPathArrayOfValues), nil
}

func MustParseListenResponseResumeChannelResponse_FieldPathArrayOfValues(pathStr, valuesStr string) ListenResponseResumeChannelResponse_FieldPathArrayOfValues {
	fpaov, err := ParseListenResponseResumeChannelResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListenResponseResumeChannelResponse_FieldTerminalPathArrayOfValues struct {
	ListenResponseResumeChannelResponse_FieldTerminalPath
	values interface{}
}

var _ ListenResponseResumeChannelResponse_FieldPathArrayOfValues = (*ListenResponseResumeChannelResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListenResponseResumeChannelResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListenResponseResumeChannelResponse_FieldPathSelectorChannelId:
		for _, v := range fpaov.values.([]uint64) {
			values = append(values, v)
		}
	case ListenResponseResumeChannelResponse_FieldPathSelectorService:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case ListenResponseResumeChannelResponse_FieldPathSelectorArg:
		for _, v := range fpaov.values.([][]byte) {
			values = append(values, v)
		}
	case ListenResponseResumeChannelResponse_FieldPathSelectorLastMessageId:
		for _, v := range fpaov.values.([]uint64) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListenResponseResumeChannelResponse_FieldTerminalPathArrayOfValues) AsChannelIdArrayOfValues() ([]uint64, bool) {
	res, ok := fpaov.values.([]uint64)
	return res, ok
}
func (fpaov *ListenResponseResumeChannelResponse_FieldTerminalPathArrayOfValues) AsServiceArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *ListenResponseResumeChannelResponse_FieldTerminalPathArrayOfValues) AsArgArrayOfValues() ([][]byte, bool) {
	res, ok := fpaov.values.([][]byte)
	return res, ok
}
func (fpaov *ListenResponseResumeChannelResponse_FieldTerminalPathArrayOfValues) AsLastMessageIdArrayOfValues() ([]uint64, bool) {
	res, ok := fpaov.values.([]uint64)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type AcceptRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() AcceptRequest_FieldPathSelector
	Get(source *AcceptRequest) []interface{}
	GetSingle(source *AcceptRequest) (interface{}, bool)
	ClearValue(item *AcceptRequest)

	// Those methods build corresponding AcceptRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) AcceptRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) AcceptRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) AcceptRequest_FieldPathArrayItemValue
}

type AcceptRequest_FieldPathSelector int32

const (
	AcceptRequest_FieldPathSelectorOpenRequest   AcceptRequest_FieldPathSelector = 0
	AcceptRequest_FieldPathSelectorResumeRequest AcceptRequest_FieldPathSelector = 1
	AcceptRequest_FieldPathSelectorData          AcceptRequest_FieldPathSelector = 2
	AcceptRequest_FieldPathSelectorAck           AcceptRequest_FieldPathSelector = 3
	AcceptRequest_FieldPathSelectorClose         AcceptRequest_FieldPathSelector = 4
	AcceptRequest_FieldPathSelectorError         AcceptRequest_FieldPathSelector = 5
	AcceptRequest_FieldPathSelectorPing          AcceptRequest_FieldPathSelector = 6
)

func (s AcceptRequest_FieldPathSelector) String() string {
	switch s {
	case AcceptRequest_FieldPathSelectorOpenRequest:
		return "open_request"
	case AcceptRequest_FieldPathSelectorResumeRequest:
		return "resume_request"
	case AcceptRequest_FieldPathSelectorData:
		return "data"
	case AcceptRequest_FieldPathSelectorAck:
		return "ack"
	case AcceptRequest_FieldPathSelectorClose:
		return "close"
	case AcceptRequest_FieldPathSelectorError:
		return "error"
	case AcceptRequest_FieldPathSelectorPing:
		return "ping"
	default:
		panic(fmt.Sprintf("Invalid selector for AcceptRequest: %d", s))
	}
}

func BuildAcceptRequest_FieldPath(fp gotenobject.RawFieldPath) (AcceptRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object AcceptRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "open_request", "openRequest", "open-request":
			return &AcceptRequest_FieldTerminalPath{selector: AcceptRequest_FieldPathSelectorOpenRequest}, nil
		case "resume_request", "resumeRequest", "resume-request":
			return &AcceptRequest_FieldTerminalPath{selector: AcceptRequest_FieldPathSelectorResumeRequest}, nil
		case "data":
			return &AcceptRequest_FieldTerminalPath{selector: AcceptRequest_FieldPathSelectorData}, nil
		case "ack":
			return &AcceptRequest_FieldTerminalPath{selector: AcceptRequest_FieldPathSelectorAck}, nil
		case "close":
			return &AcceptRequest_FieldTerminalPath{selector: AcceptRequest_FieldPathSelectorClose}, nil
		case "error":
			return &AcceptRequest_FieldTerminalPath{selector: AcceptRequest_FieldPathSelectorError}, nil
		case "ping":
			return &AcceptRequest_FieldTerminalPath{selector: AcceptRequest_FieldPathSelectorPing}, nil
		}
	} else {
		switch fp[0] {
		case "open_request", "openRequest", "open-request":
			if subpath, err := BuildAcceptRequestOpenRequest_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &AcceptRequest_FieldSubPath{selector: AcceptRequest_FieldPathSelectorOpenRequest, subPath: subpath}, nil
			}
		case "resume_request", "resumeRequest", "resume-request":
			if subpath, err := BuildAcceptRequestResumeRequest_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &AcceptRequest_FieldSubPath{selector: AcceptRequest_FieldPathSelectorResumeRequest, subPath: subpath}, nil
			}
		case "data":
			if subpath, err := BuildData_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &AcceptRequest_FieldSubPath{selector: AcceptRequest_FieldPathSelectorData, subPath: subpath}, nil
			}
		case "ack":
			if subpath, err := BuildAck_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &AcceptRequest_FieldSubPath{selector: AcceptRequest_FieldPathSelectorAck, subPath: subpath}, nil
			}
		case "close":
			if subpath, err := BuildClose_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &AcceptRequest_FieldSubPath{selector: AcceptRequest_FieldPathSelectorClose, subPath: subpath}, nil
			}
		case "error":
			if subpath, err := BuildError_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &AcceptRequest_FieldSubPath{selector: AcceptRequest_FieldPathSelectorError, subPath: subpath}, nil
			}
		case "ping":
			if subpath, err := BuildPing_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &AcceptRequest_FieldSubPath{selector: AcceptRequest_FieldPathSelectorPing, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object AcceptRequest", fp)
}

func ParseAcceptRequest_FieldPath(rawField string) (AcceptRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildAcceptRequest_FieldPath(fp)
}

func MustParseAcceptRequest_FieldPath(rawField string) AcceptRequest_FieldPath {
	fp, err := ParseAcceptRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type AcceptRequest_FieldTerminalPath struct {
	selector AcceptRequest_FieldPathSelector
}

var _ AcceptRequest_FieldPath = (*AcceptRequest_FieldTerminalPath)(nil)

func (fp *AcceptRequest_FieldTerminalPath) Selector() AcceptRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *AcceptRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *AcceptRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source AcceptRequest
func (fp *AcceptRequest_FieldTerminalPath) Get(source *AcceptRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case AcceptRequest_FieldPathSelectorOpenRequest:
			if source, ok := source.Message.(*AcceptRequest_OpenRequest_); ok && source != nil {
				if source.OpenRequest != nil {
					values = append(values, source.OpenRequest)
				}
			}
		case AcceptRequest_FieldPathSelectorResumeRequest:
			if source, ok := source.Message.(*AcceptRequest_ResumeRequest_); ok && source != nil {
				if source.ResumeRequest != nil {
					values = append(values, source.ResumeRequest)
				}
			}
		case AcceptRequest_FieldPathSelectorData:
			if source, ok := source.Message.(*AcceptRequest_Data); ok && source != nil {
				if source.Data != nil {
					values = append(values, source.Data)
				}
			}
		case AcceptRequest_FieldPathSelectorAck:
			if source, ok := source.Message.(*AcceptRequest_Ack); ok && source != nil {
				if source.Ack != nil {
					values = append(values, source.Ack)
				}
			}
		case AcceptRequest_FieldPathSelectorClose:
			if source, ok := source.Message.(*AcceptRequest_Close); ok && source != nil {
				if source.Close != nil {
					values = append(values, source.Close)
				}
			}
		case AcceptRequest_FieldPathSelectorError:
			if source, ok := source.Message.(*AcceptRequest_Error); ok && source != nil {
				if source.Error != nil {
					values = append(values, source.Error)
				}
			}
		case AcceptRequest_FieldPathSelectorPing:
			if source, ok := source.Message.(*AcceptRequest_Ping); ok && source != nil {
				if source.Ping != nil {
					values = append(values, source.Ping)
				}
			}
		default:
			panic(fmt.Sprintf("Invalid selector for AcceptRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *AcceptRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*AcceptRequest))
}

// GetSingle returns value pointed by specific field of from source AcceptRequest
func (fp *AcceptRequest_FieldTerminalPath) GetSingle(source *AcceptRequest) (interface{}, bool) {
	switch fp.selector {
	case AcceptRequest_FieldPathSelectorOpenRequest:
		res := source.GetOpenRequest()
		return res, res != nil
	case AcceptRequest_FieldPathSelectorResumeRequest:
		res := source.GetResumeRequest()
		return res, res != nil
	case AcceptRequest_FieldPathSelectorData:
		res := source.GetData()
		return res, res != nil
	case AcceptRequest_FieldPathSelectorAck:
		res := source.GetAck()
		return res, res != nil
	case AcceptRequest_FieldPathSelectorClose:
		res := source.GetClose()
		return res, res != nil
	case AcceptRequest_FieldPathSelectorError:
		res := source.GetError()
		return res, res != nil
	case AcceptRequest_FieldPathSelectorPing:
		res := source.GetPing()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for AcceptRequest: %d", fp.selector))
	}
}

func (fp *AcceptRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*AcceptRequest))
}

// GetDefault returns a default value of the field type
func (fp *AcceptRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case AcceptRequest_FieldPathSelectorOpenRequest:
		return (*AcceptRequest_OpenRequest)(nil)
	case AcceptRequest_FieldPathSelectorResumeRequest:
		return (*AcceptRequest_ResumeRequest)(nil)
	case AcceptRequest_FieldPathSelectorData:
		return (*Data)(nil)
	case AcceptRequest_FieldPathSelectorAck:
		return (*Ack)(nil)
	case AcceptRequest_FieldPathSelectorClose:
		return (*Close)(nil)
	case AcceptRequest_FieldPathSelectorError:
		return (*Error)(nil)
	case AcceptRequest_FieldPathSelectorPing:
		return (*Ping)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for AcceptRequest: %d", fp.selector))
	}
}

func (fp *AcceptRequest_FieldTerminalPath) ClearValue(item *AcceptRequest) {
	if item != nil {
		switch fp.selector {
		case AcceptRequest_FieldPathSelectorOpenRequest:
			if item, ok := item.Message.(*AcceptRequest_OpenRequest_); ok {
				item.OpenRequest = nil
			}
		case AcceptRequest_FieldPathSelectorResumeRequest:
			if item, ok := item.Message.(*AcceptRequest_ResumeRequest_); ok {
				item.ResumeRequest = nil
			}
		case AcceptRequest_FieldPathSelectorData:
			if item, ok := item.Message.(*AcceptRequest_Data); ok {
				item.Data = nil
			}
		case AcceptRequest_FieldPathSelectorAck:
			if item, ok := item.Message.(*AcceptRequest_Ack); ok {
				item.Ack = nil
			}
		case AcceptRequest_FieldPathSelectorClose:
			if item, ok := item.Message.(*AcceptRequest_Close); ok {
				item.Close = nil
			}
		case AcceptRequest_FieldPathSelectorError:
			if item, ok := item.Message.(*AcceptRequest_Error); ok {
				item.Error = nil
			}
		case AcceptRequest_FieldPathSelectorPing:
			if item, ok := item.Message.(*AcceptRequest_Ping); ok {
				item.Ping = nil
			}
		default:
			panic(fmt.Sprintf("Invalid selector for AcceptRequest: %d", fp.selector))
		}
	}
}

func (fp *AcceptRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*AcceptRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *AcceptRequest_FieldTerminalPath) IsLeaf() bool {
	return false
}

func (fp *AcceptRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *AcceptRequest_FieldTerminalPath) WithIValue(value interface{}) AcceptRequest_FieldPathValue {
	switch fp.selector {
	case AcceptRequest_FieldPathSelectorOpenRequest:
		return &AcceptRequest_FieldTerminalPathValue{AcceptRequest_FieldTerminalPath: *fp, value: value.(*AcceptRequest_OpenRequest)}
	case AcceptRequest_FieldPathSelectorResumeRequest:
		return &AcceptRequest_FieldTerminalPathValue{AcceptRequest_FieldTerminalPath: *fp, value: value.(*AcceptRequest_ResumeRequest)}
	case AcceptRequest_FieldPathSelectorData:
		return &AcceptRequest_FieldTerminalPathValue{AcceptRequest_FieldTerminalPath: *fp, value: value.(*Data)}
	case AcceptRequest_FieldPathSelectorAck:
		return &AcceptRequest_FieldTerminalPathValue{AcceptRequest_FieldTerminalPath: *fp, value: value.(*Ack)}
	case AcceptRequest_FieldPathSelectorClose:
		return &AcceptRequest_FieldTerminalPathValue{AcceptRequest_FieldTerminalPath: *fp, value: value.(*Close)}
	case AcceptRequest_FieldPathSelectorError:
		return &AcceptRequest_FieldTerminalPathValue{AcceptRequest_FieldTerminalPath: *fp, value: value.(*Error)}
	case AcceptRequest_FieldPathSelectorPing:
		return &AcceptRequest_FieldTerminalPathValue{AcceptRequest_FieldTerminalPath: *fp, value: value.(*Ping)}
	default:
		panic(fmt.Sprintf("Invalid selector for AcceptRequest: %d", fp.selector))
	}
}

func (fp *AcceptRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *AcceptRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) AcceptRequest_FieldPathArrayOfValues {
	fpaov := &AcceptRequest_FieldTerminalPathArrayOfValues{AcceptRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case AcceptRequest_FieldPathSelectorOpenRequest:
		return &AcceptRequest_FieldTerminalPathArrayOfValues{AcceptRequest_FieldTerminalPath: *fp, values: values.([]*AcceptRequest_OpenRequest)}
	case AcceptRequest_FieldPathSelectorResumeRequest:
		return &AcceptRequest_FieldTerminalPathArrayOfValues{AcceptRequest_FieldTerminalPath: *fp, values: values.([]*AcceptRequest_ResumeRequest)}
	case AcceptRequest_FieldPathSelectorData:
		return &AcceptRequest_FieldTerminalPathArrayOfValues{AcceptRequest_FieldTerminalPath: *fp, values: values.([]*Data)}
	case AcceptRequest_FieldPathSelectorAck:
		return &AcceptRequest_FieldTerminalPathArrayOfValues{AcceptRequest_FieldTerminalPath: *fp, values: values.([]*Ack)}
	case AcceptRequest_FieldPathSelectorClose:
		return &AcceptRequest_FieldTerminalPathArrayOfValues{AcceptRequest_FieldTerminalPath: *fp, values: values.([]*Close)}
	case AcceptRequest_FieldPathSelectorError:
		return &AcceptRequest_FieldTerminalPathArrayOfValues{AcceptRequest_FieldTerminalPath: *fp, values: values.([]*Error)}
	case AcceptRequest_FieldPathSelectorPing:
		return &AcceptRequest_FieldTerminalPathArrayOfValues{AcceptRequest_FieldTerminalPath: *fp, values: values.([]*Ping)}
	default:
		panic(fmt.Sprintf("Invalid selector for AcceptRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *AcceptRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *AcceptRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) AcceptRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for AcceptRequest: %d", fp.selector))
	}
}

func (fp *AcceptRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type AcceptRequest_FieldSubPath struct {
	selector AcceptRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ AcceptRequest_FieldPath = (*AcceptRequest_FieldSubPath)(nil)

func (fps *AcceptRequest_FieldSubPath) Selector() AcceptRequest_FieldPathSelector {
	return fps.selector
}
func (fps *AcceptRequest_FieldSubPath) AsOpenRequestSubPath() (AcceptRequestOpenRequest_FieldPath, bool) {
	res, ok := fps.subPath.(AcceptRequestOpenRequest_FieldPath)
	return res, ok
}
func (fps *AcceptRequest_FieldSubPath) AsResumeRequestSubPath() (AcceptRequestResumeRequest_FieldPath, bool) {
	res, ok := fps.subPath.(AcceptRequestResumeRequest_FieldPath)
	return res, ok
}
func (fps *AcceptRequest_FieldSubPath) AsDataSubPath() (Data_FieldPath, bool) {
	res, ok := fps.subPath.(Data_FieldPath)
	return res, ok
}
func (fps *AcceptRequest_FieldSubPath) AsAckSubPath() (Ack_FieldPath, bool) {
	res, ok := fps.subPath.(Ack_FieldPath)
	return res, ok
}
func (fps *AcceptRequest_FieldSubPath) AsCloseSubPath() (Close_FieldPath, bool) {
	res, ok := fps.subPath.(Close_FieldPath)
	return res, ok
}
func (fps *AcceptRequest_FieldSubPath) AsErrorSubPath() (Error_FieldPath, bool) {
	res, ok := fps.subPath.(Error_FieldPath)
	return res, ok
}
func (fps *AcceptRequest_FieldSubPath) AsPingSubPath() (Ping_FieldPath, bool) {
	res, ok := fps.subPath.(Ping_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *AcceptRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *AcceptRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source AcceptRequest
func (fps *AcceptRequest_FieldSubPath) Get(source *AcceptRequest) (values []interface{}) {
	switch fps.selector {
	case AcceptRequest_FieldPathSelectorOpenRequest:
		values = append(values, fps.subPath.GetRaw(source.GetOpenRequest())...)
	case AcceptRequest_FieldPathSelectorResumeRequest:
		values = append(values, fps.subPath.GetRaw(source.GetResumeRequest())...)
	case AcceptRequest_FieldPathSelectorData:
		values = append(values, fps.subPath.GetRaw(source.GetData())...)
	case AcceptRequest_FieldPathSelectorAck:
		values = append(values, fps.subPath.GetRaw(source.GetAck())...)
	case AcceptRequest_FieldPathSelectorClose:
		values = append(values, fps.subPath.GetRaw(source.GetClose())...)
	case AcceptRequest_FieldPathSelectorError:
		values = append(values, fps.subPath.GetRaw(source.GetError())...)
	case AcceptRequest_FieldPathSelectorPing:
		values = append(values, fps.subPath.GetRaw(source.GetPing())...)
	default:
		panic(fmt.Sprintf("Invalid selector for AcceptRequest: %d", fps.selector))
	}
	return
}

func (fps *AcceptRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*AcceptRequest))
}

// GetSingle returns value of selected field from source AcceptRequest
func (fps *AcceptRequest_FieldSubPath) GetSingle(source *AcceptRequest) (interface{}, bool) {
	switch fps.selector {
	case AcceptRequest_FieldPathSelectorOpenRequest:
		if source.GetOpenRequest() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetOpenRequest())
	case AcceptRequest_FieldPathSelectorResumeRequest:
		if source.GetResumeRequest() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetResumeRequest())
	case AcceptRequest_FieldPathSelectorData:
		if source.GetData() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetData())
	case AcceptRequest_FieldPathSelectorAck:
		if source.GetAck() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetAck())
	case AcceptRequest_FieldPathSelectorClose:
		if source.GetClose() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetClose())
	case AcceptRequest_FieldPathSelectorError:
		if source.GetError() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetError())
	case AcceptRequest_FieldPathSelectorPing:
		if source.GetPing() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPing())
	default:
		panic(fmt.Sprintf("Invalid selector for AcceptRequest: %d", fps.selector))
	}
}

func (fps *AcceptRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*AcceptRequest))
}

// GetDefault returns a default value of the field type
func (fps *AcceptRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *AcceptRequest_FieldSubPath) ClearValue(item *AcceptRequest) {
	if item != nil {
		switch fps.selector {
		case AcceptRequest_FieldPathSelectorOpenRequest:
			if item.Message != nil {
				if item, ok := item.Message.(*AcceptRequest_OpenRequest_); ok {
					fps.subPath.ClearValueRaw(item.OpenRequest)
				}
			}
		case AcceptRequest_FieldPathSelectorResumeRequest:
			if item.Message != nil {
				if item, ok := item.Message.(*AcceptRequest_ResumeRequest_); ok {
					fps.subPath.ClearValueRaw(item.ResumeRequest)
				}
			}
		case AcceptRequest_FieldPathSelectorData:
			if item.Message != nil {
				if item, ok := item.Message.(*AcceptRequest_Data); ok {
					fps.subPath.ClearValueRaw(item.Data)
				}
			}
		case AcceptRequest_FieldPathSelectorAck:
			if item.Message != nil {
				if item, ok := item.Message.(*AcceptRequest_Ack); ok {
					fps.subPath.ClearValueRaw(item.Ack)
				}
			}
		case AcceptRequest_FieldPathSelectorClose:
			if item.Message != nil {
				if item, ok := item.Message.(*AcceptRequest_Close); ok {
					fps.subPath.ClearValueRaw(item.Close)
				}
			}
		case AcceptRequest_FieldPathSelectorError:
			if item.Message != nil {
				if item, ok := item.Message.(*AcceptRequest_Error); ok {
					fps.subPath.ClearValueRaw(item.Error)
				}
			}
		case AcceptRequest_FieldPathSelectorPing:
			if item.Message != nil {
				if item, ok := item.Message.(*AcceptRequest_Ping); ok {
					fps.subPath.ClearValueRaw(item.Ping)
				}
			}
		default:
			panic(fmt.Sprintf("Invalid selector for AcceptRequest: %d", fps.selector))
		}
	}
}

func (fps *AcceptRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*AcceptRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *AcceptRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *AcceptRequest_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&AcceptRequest_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *AcceptRequest_FieldSubPath) WithIValue(value interface{}) AcceptRequest_FieldPathValue {
	return &AcceptRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *AcceptRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *AcceptRequest_FieldSubPath) WithIArrayOfValues(values interface{}) AcceptRequest_FieldPathArrayOfValues {
	return &AcceptRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *AcceptRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *AcceptRequest_FieldSubPath) WithIArrayItemValue(value interface{}) AcceptRequest_FieldPathArrayItemValue {
	return &AcceptRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *AcceptRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// AcceptRequest_FieldPathValue allows storing values for AcceptRequest fields according to their type
type AcceptRequest_FieldPathValue interface {
	AcceptRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **AcceptRequest)
	CompareWith(*AcceptRequest) (cmp int, comparable bool)
}

func ParseAcceptRequest_FieldPathValue(pathStr, valueStr string) (AcceptRequest_FieldPathValue, error) {
	fp, err := ParseAcceptRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing AcceptRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(AcceptRequest_FieldPathValue), nil
}

func MustParseAcceptRequest_FieldPathValue(pathStr, valueStr string) AcceptRequest_FieldPathValue {
	fpv, err := ParseAcceptRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type AcceptRequest_FieldTerminalPathValue struct {
	AcceptRequest_FieldTerminalPath
	value interface{}
}

var _ AcceptRequest_FieldPathValue = (*AcceptRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'AcceptRequest' as interface{}
func (fpv *AcceptRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *AcceptRequest_FieldTerminalPathValue) AsOpenRequestValue() (*AcceptRequest_OpenRequest, bool) {
	res, ok := fpv.value.(*AcceptRequest_OpenRequest)
	return res, ok
}
func (fpv *AcceptRequest_FieldTerminalPathValue) AsResumeRequestValue() (*AcceptRequest_ResumeRequest, bool) {
	res, ok := fpv.value.(*AcceptRequest_ResumeRequest)
	return res, ok
}
func (fpv *AcceptRequest_FieldTerminalPathValue) AsDataValue() (*Data, bool) {
	res, ok := fpv.value.(*Data)
	return res, ok
}
func (fpv *AcceptRequest_FieldTerminalPathValue) AsAckValue() (*Ack, bool) {
	res, ok := fpv.value.(*Ack)
	return res, ok
}
func (fpv *AcceptRequest_FieldTerminalPathValue) AsCloseValue() (*Close, bool) {
	res, ok := fpv.value.(*Close)
	return res, ok
}
func (fpv *AcceptRequest_FieldTerminalPathValue) AsErrorValue() (*Error, bool) {
	res, ok := fpv.value.(*Error)
	return res, ok
}
func (fpv *AcceptRequest_FieldTerminalPathValue) AsPingValue() (*Ping, bool) {
	res, ok := fpv.value.(*Ping)
	return res, ok
}

// SetTo stores value for selected field for object AcceptRequest
func (fpv *AcceptRequest_FieldTerminalPathValue) SetTo(target **AcceptRequest) {
	if *target == nil {
		*target = new(AcceptRequest)
	}
	switch fpv.selector {
	case AcceptRequest_FieldPathSelectorOpenRequest:
		if _, ok := (*target).Message.(*AcceptRequest_OpenRequest_); !ok {
			(*target).Message = &AcceptRequest_OpenRequest_{}
		}
		(*target).Message.(*AcceptRequest_OpenRequest_).OpenRequest = fpv.value.(*AcceptRequest_OpenRequest)
	case AcceptRequest_FieldPathSelectorResumeRequest:
		if _, ok := (*target).Message.(*AcceptRequest_ResumeRequest_); !ok {
			(*target).Message = &AcceptRequest_ResumeRequest_{}
		}
		(*target).Message.(*AcceptRequest_ResumeRequest_).ResumeRequest = fpv.value.(*AcceptRequest_ResumeRequest)
	case AcceptRequest_FieldPathSelectorData:
		if _, ok := (*target).Message.(*AcceptRequest_Data); !ok {
			(*target).Message = &AcceptRequest_Data{}
		}
		(*target).Message.(*AcceptRequest_Data).Data = fpv.value.(*Data)
	case AcceptRequest_FieldPathSelectorAck:
		if _, ok := (*target).Message.(*AcceptRequest_Ack); !ok {
			(*target).Message = &AcceptRequest_Ack{}
		}
		(*target).Message.(*AcceptRequest_Ack).Ack = fpv.value.(*Ack)
	case AcceptRequest_FieldPathSelectorClose:
		if _, ok := (*target).Message.(*AcceptRequest_Close); !ok {
			(*target).Message = &AcceptRequest_Close{}
		}
		(*target).Message.(*AcceptRequest_Close).Close = fpv.value.(*Close)
	case AcceptRequest_FieldPathSelectorError:
		if _, ok := (*target).Message.(*AcceptRequest_Error); !ok {
			(*target).Message = &AcceptRequest_Error{}
		}
		(*target).Message.(*AcceptRequest_Error).Error = fpv.value.(*Error)
	case AcceptRequest_FieldPathSelectorPing:
		if _, ok := (*target).Message.(*AcceptRequest_Ping); !ok {
			(*target).Message = &AcceptRequest_Ping{}
		}
		(*target).Message.(*AcceptRequest_Ping).Ping = fpv.value.(*Ping)
	default:
		panic(fmt.Sprintf("Invalid selector for AcceptRequest: %d", fpv.selector))
	}
}

func (fpv *AcceptRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*AcceptRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'AcceptRequest_FieldTerminalPathValue' with the value under path in 'AcceptRequest'.
func (fpv *AcceptRequest_FieldTerminalPathValue) CompareWith(source *AcceptRequest) (int, bool) {
	switch fpv.selector {
	case AcceptRequest_FieldPathSelectorOpenRequest:
		return 0, false
	case AcceptRequest_FieldPathSelectorResumeRequest:
		return 0, false
	case AcceptRequest_FieldPathSelectorData:
		return 0, false
	case AcceptRequest_FieldPathSelectorAck:
		return 0, false
	case AcceptRequest_FieldPathSelectorClose:
		return 0, false
	case AcceptRequest_FieldPathSelectorError:
		return 0, false
	case AcceptRequest_FieldPathSelectorPing:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for AcceptRequest: %d", fpv.selector))
	}
}

func (fpv *AcceptRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*AcceptRequest))
}

type AcceptRequest_FieldSubPathValue struct {
	AcceptRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ AcceptRequest_FieldPathValue = (*AcceptRequest_FieldSubPathValue)(nil)

func (fpvs *AcceptRequest_FieldSubPathValue) AsOpenRequestPathValue() (AcceptRequestOpenRequest_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(AcceptRequestOpenRequest_FieldPathValue)
	return res, ok
}
func (fpvs *AcceptRequest_FieldSubPathValue) AsResumeRequestPathValue() (AcceptRequestResumeRequest_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(AcceptRequestResumeRequest_FieldPathValue)
	return res, ok
}
func (fpvs *AcceptRequest_FieldSubPathValue) AsDataPathValue() (Data_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(Data_FieldPathValue)
	return res, ok
}
func (fpvs *AcceptRequest_FieldSubPathValue) AsAckPathValue() (Ack_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(Ack_FieldPathValue)
	return res, ok
}
func (fpvs *AcceptRequest_FieldSubPathValue) AsClosePathValue() (Close_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(Close_FieldPathValue)
	return res, ok
}
func (fpvs *AcceptRequest_FieldSubPathValue) AsErrorPathValue() (Error_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(Error_FieldPathValue)
	return res, ok
}
func (fpvs *AcceptRequest_FieldSubPathValue) AsPingPathValue() (Ping_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(Ping_FieldPathValue)
	return res, ok
}

func (fpvs *AcceptRequest_FieldSubPathValue) SetTo(target **AcceptRequest) {
	if *target == nil {
		*target = new(AcceptRequest)
	}
	switch fpvs.Selector() {
	case AcceptRequest_FieldPathSelectorOpenRequest:
		if _, ok := (*target).Message.(*AcceptRequest_OpenRequest_); !ok {
			(*target).Message = &AcceptRequest_OpenRequest_{}
		}
		fpvs.subPathValue.(AcceptRequestOpenRequest_FieldPathValue).SetTo(&(*target).Message.(*AcceptRequest_OpenRequest_).OpenRequest)
	case AcceptRequest_FieldPathSelectorResumeRequest:
		if _, ok := (*target).Message.(*AcceptRequest_ResumeRequest_); !ok {
			(*target).Message = &AcceptRequest_ResumeRequest_{}
		}
		fpvs.subPathValue.(AcceptRequestResumeRequest_FieldPathValue).SetTo(&(*target).Message.(*AcceptRequest_ResumeRequest_).ResumeRequest)
	case AcceptRequest_FieldPathSelectorData:
		if _, ok := (*target).Message.(*AcceptRequest_Data); !ok {
			(*target).Message = &AcceptRequest_Data{}
		}
		fpvs.subPathValue.(Data_FieldPathValue).SetTo(&(*target).Message.(*AcceptRequest_Data).Data)
	case AcceptRequest_FieldPathSelectorAck:
		if _, ok := (*target).Message.(*AcceptRequest_Ack); !ok {
			(*target).Message = &AcceptRequest_Ack{}
		}
		fpvs.subPathValue.(Ack_FieldPathValue).SetTo(&(*target).Message.(*AcceptRequest_Ack).Ack)
	case AcceptRequest_FieldPathSelectorClose:
		if _, ok := (*target).Message.(*AcceptRequest_Close); !ok {
			(*target).Message = &AcceptRequest_Close{}
		}
		fpvs.subPathValue.(Close_FieldPathValue).SetTo(&(*target).Message.(*AcceptRequest_Close).Close)
	case AcceptRequest_FieldPathSelectorError:
		if _, ok := (*target).Message.(*AcceptRequest_Error); !ok {
			(*target).Message = &AcceptRequest_Error{}
		}
		fpvs.subPathValue.(Error_FieldPathValue).SetTo(&(*target).Message.(*AcceptRequest_Error).Error)
	case AcceptRequest_FieldPathSelectorPing:
		if _, ok := (*target).Message.(*AcceptRequest_Ping); !ok {
			(*target).Message = &AcceptRequest_Ping{}
		}
		fpvs.subPathValue.(Ping_FieldPathValue).SetTo(&(*target).Message.(*AcceptRequest_Ping).Ping)
	default:
		panic(fmt.Sprintf("Invalid selector for AcceptRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *AcceptRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*AcceptRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *AcceptRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *AcceptRequest_FieldSubPathValue) CompareWith(source *AcceptRequest) (int, bool) {
	switch fpvs.Selector() {
	case AcceptRequest_FieldPathSelectorOpenRequest:
		return fpvs.subPathValue.(AcceptRequestOpenRequest_FieldPathValue).CompareWith(source.GetOpenRequest())
	case AcceptRequest_FieldPathSelectorResumeRequest:
		return fpvs.subPathValue.(AcceptRequestResumeRequest_FieldPathValue).CompareWith(source.GetResumeRequest())
	case AcceptRequest_FieldPathSelectorData:
		return fpvs.subPathValue.(Data_FieldPathValue).CompareWith(source.GetData())
	case AcceptRequest_FieldPathSelectorAck:
		return fpvs.subPathValue.(Ack_FieldPathValue).CompareWith(source.GetAck())
	case AcceptRequest_FieldPathSelectorClose:
		return fpvs.subPathValue.(Close_FieldPathValue).CompareWith(source.GetClose())
	case AcceptRequest_FieldPathSelectorError:
		return fpvs.subPathValue.(Error_FieldPathValue).CompareWith(source.GetError())
	case AcceptRequest_FieldPathSelectorPing:
		return fpvs.subPathValue.(Ping_FieldPathValue).CompareWith(source.GetPing())
	default:
		panic(fmt.Sprintf("Invalid selector for AcceptRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *AcceptRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*AcceptRequest))
}

// AcceptRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for AcceptRequest according to their type
// Present only for array (repeated) types.
type AcceptRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	AcceptRequest_FieldPath
	ContainsValue(*AcceptRequest) bool
}

// ParseAcceptRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseAcceptRequest_FieldPathArrayItemValue(pathStr, valueStr string) (AcceptRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseAcceptRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing AcceptRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(AcceptRequest_FieldPathArrayItemValue), nil
}

func MustParseAcceptRequest_FieldPathArrayItemValue(pathStr, valueStr string) AcceptRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseAcceptRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type AcceptRequest_FieldTerminalPathArrayItemValue struct {
	AcceptRequest_FieldTerminalPath
	value interface{}
}

var _ AcceptRequest_FieldPathArrayItemValue = (*AcceptRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object AcceptRequest as interface{}
func (fpaiv *AcceptRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *AcceptRequest_FieldTerminalPathArrayItemValue) GetSingle(source *AcceptRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *AcceptRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*AcceptRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'AcceptRequest'
func (fpaiv *AcceptRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *AcceptRequest) bool {
	slice := fpaiv.AcceptRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type AcceptRequest_FieldSubPathArrayItemValue struct {
	AcceptRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *AcceptRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *AcceptRequest_FieldSubPathArrayItemValue) AsOpenRequestPathItemValue() (AcceptRequestOpenRequest_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(AcceptRequestOpenRequest_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *AcceptRequest_FieldSubPathArrayItemValue) AsResumeRequestPathItemValue() (AcceptRequestResumeRequest_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(AcceptRequestResumeRequest_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *AcceptRequest_FieldSubPathArrayItemValue) AsDataPathItemValue() (Data_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(Data_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *AcceptRequest_FieldSubPathArrayItemValue) AsAckPathItemValue() (Ack_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(Ack_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *AcceptRequest_FieldSubPathArrayItemValue) AsClosePathItemValue() (Close_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(Close_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *AcceptRequest_FieldSubPathArrayItemValue) AsErrorPathItemValue() (Error_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(Error_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *AcceptRequest_FieldSubPathArrayItemValue) AsPingPathItemValue() (Ping_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(Ping_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'AcceptRequest'
func (fpaivs *AcceptRequest_FieldSubPathArrayItemValue) ContainsValue(source *AcceptRequest) bool {
	switch fpaivs.Selector() {
	case AcceptRequest_FieldPathSelectorOpenRequest:
		return fpaivs.subPathItemValue.(AcceptRequestOpenRequest_FieldPathArrayItemValue).ContainsValue(source.GetOpenRequest())
	case AcceptRequest_FieldPathSelectorResumeRequest:
		return fpaivs.subPathItemValue.(AcceptRequestResumeRequest_FieldPathArrayItemValue).ContainsValue(source.GetResumeRequest())
	case AcceptRequest_FieldPathSelectorData:
		return fpaivs.subPathItemValue.(Data_FieldPathArrayItemValue).ContainsValue(source.GetData())
	case AcceptRequest_FieldPathSelectorAck:
		return fpaivs.subPathItemValue.(Ack_FieldPathArrayItemValue).ContainsValue(source.GetAck())
	case AcceptRequest_FieldPathSelectorClose:
		return fpaivs.subPathItemValue.(Close_FieldPathArrayItemValue).ContainsValue(source.GetClose())
	case AcceptRequest_FieldPathSelectorError:
		return fpaivs.subPathItemValue.(Error_FieldPathArrayItemValue).ContainsValue(source.GetError())
	case AcceptRequest_FieldPathSelectorPing:
		return fpaivs.subPathItemValue.(Ping_FieldPathArrayItemValue).ContainsValue(source.GetPing())
	default:
		panic(fmt.Sprintf("Invalid selector for AcceptRequest: %d", fpaivs.Selector()))
	}
}

// AcceptRequest_FieldPathArrayOfValues allows storing slice of values for AcceptRequest fields according to their type
type AcceptRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	AcceptRequest_FieldPath
}

func ParseAcceptRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (AcceptRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseAcceptRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing AcceptRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(AcceptRequest_FieldPathArrayOfValues), nil
}

func MustParseAcceptRequest_FieldPathArrayOfValues(pathStr, valuesStr string) AcceptRequest_FieldPathArrayOfValues {
	fpaov, err := ParseAcceptRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type AcceptRequest_FieldTerminalPathArrayOfValues struct {
	AcceptRequest_FieldTerminalPath
	values interface{}
}

var _ AcceptRequest_FieldPathArrayOfValues = (*AcceptRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *AcceptRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case AcceptRequest_FieldPathSelectorOpenRequest:
		for _, v := range fpaov.values.([]*AcceptRequest_OpenRequest) {
			values = append(values, v)
		}
	case AcceptRequest_FieldPathSelectorResumeRequest:
		for _, v := range fpaov.values.([]*AcceptRequest_ResumeRequest) {
			values = append(values, v)
		}
	case AcceptRequest_FieldPathSelectorData:
		for _, v := range fpaov.values.([]*Data) {
			values = append(values, v)
		}
	case AcceptRequest_FieldPathSelectorAck:
		for _, v := range fpaov.values.([]*Ack) {
			values = append(values, v)
		}
	case AcceptRequest_FieldPathSelectorClose:
		for _, v := range fpaov.values.([]*Close) {
			values = append(values, v)
		}
	case AcceptRequest_FieldPathSelectorError:
		for _, v := range fpaov.values.([]*Error) {
			values = append(values, v)
		}
	case AcceptRequest_FieldPathSelectorPing:
		for _, v := range fpaov.values.([]*Ping) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *AcceptRequest_FieldTerminalPathArrayOfValues) AsOpenRequestArrayOfValues() ([]*AcceptRequest_OpenRequest, bool) {
	res, ok := fpaov.values.([]*AcceptRequest_OpenRequest)
	return res, ok
}
func (fpaov *AcceptRequest_FieldTerminalPathArrayOfValues) AsResumeRequestArrayOfValues() ([]*AcceptRequest_ResumeRequest, bool) {
	res, ok := fpaov.values.([]*AcceptRequest_ResumeRequest)
	return res, ok
}
func (fpaov *AcceptRequest_FieldTerminalPathArrayOfValues) AsDataArrayOfValues() ([]*Data, bool) {
	res, ok := fpaov.values.([]*Data)
	return res, ok
}
func (fpaov *AcceptRequest_FieldTerminalPathArrayOfValues) AsAckArrayOfValues() ([]*Ack, bool) {
	res, ok := fpaov.values.([]*Ack)
	return res, ok
}
func (fpaov *AcceptRequest_FieldTerminalPathArrayOfValues) AsCloseArrayOfValues() ([]*Close, bool) {
	res, ok := fpaov.values.([]*Close)
	return res, ok
}
func (fpaov *AcceptRequest_FieldTerminalPathArrayOfValues) AsErrorArrayOfValues() ([]*Error, bool) {
	res, ok := fpaov.values.([]*Error)
	return res, ok
}
func (fpaov *AcceptRequest_FieldTerminalPathArrayOfValues) AsPingArrayOfValues() ([]*Ping, bool) {
	res, ok := fpaov.values.([]*Ping)
	return res, ok
}

type AcceptRequest_FieldSubPathArrayOfValues struct {
	AcceptRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ AcceptRequest_FieldPathArrayOfValues = (*AcceptRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *AcceptRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *AcceptRequest_FieldSubPathArrayOfValues) AsOpenRequestPathArrayOfValues() (AcceptRequestOpenRequest_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(AcceptRequestOpenRequest_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *AcceptRequest_FieldSubPathArrayOfValues) AsResumeRequestPathArrayOfValues() (AcceptRequestResumeRequest_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(AcceptRequestResumeRequest_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *AcceptRequest_FieldSubPathArrayOfValues) AsDataPathArrayOfValues() (Data_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(Data_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *AcceptRequest_FieldSubPathArrayOfValues) AsAckPathArrayOfValues() (Ack_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(Ack_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *AcceptRequest_FieldSubPathArrayOfValues) AsClosePathArrayOfValues() (Close_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(Close_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *AcceptRequest_FieldSubPathArrayOfValues) AsErrorPathArrayOfValues() (Error_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(Error_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *AcceptRequest_FieldSubPathArrayOfValues) AsPingPathArrayOfValues() (Ping_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(Ping_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type AcceptRequestOpenRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() AcceptRequestOpenRequest_FieldPathSelector
	Get(source *AcceptRequest_OpenRequest) []interface{}
	GetSingle(source *AcceptRequest_OpenRequest) (interface{}, bool)
	ClearValue(item *AcceptRequest_OpenRequest)

	// Those methods build corresponding AcceptRequestOpenRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) AcceptRequestOpenRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) AcceptRequestOpenRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) AcceptRequestOpenRequest_FieldPathArrayItemValue
}

type AcceptRequestOpenRequest_FieldPathSelector int32

const (
	AcceptRequestOpenRequest_FieldPathSelectorProject   AcceptRequestOpenRequest_FieldPathSelector = 0
	AcceptRequestOpenRequest_FieldPathSelectorRegionId  AcceptRequestOpenRequest_FieldPathSelector = 1
	AcceptRequestOpenRequest_FieldPathSelectorName      AcceptRequestOpenRequest_FieldPathSelector = 2
	AcceptRequestOpenRequest_FieldPathSelectorSessionId AcceptRequestOpenRequest_FieldPathSelector = 3
	AcceptRequestOpenRequest_FieldPathSelectorChannelId AcceptRequestOpenRequest_FieldPathSelector = 4
)

func (s AcceptRequestOpenRequest_FieldPathSelector) String() string {
	switch s {
	case AcceptRequestOpenRequest_FieldPathSelectorProject:
		return "project"
	case AcceptRequestOpenRequest_FieldPathSelectorRegionId:
		return "region_id"
	case AcceptRequestOpenRequest_FieldPathSelectorName:
		return "name"
	case AcceptRequestOpenRequest_FieldPathSelectorSessionId:
		return "session_id"
	case AcceptRequestOpenRequest_FieldPathSelectorChannelId:
		return "channel_id"
	default:
		panic(fmt.Sprintf("Invalid selector for AcceptRequest_OpenRequest: %d", s))
	}
}

func BuildAcceptRequestOpenRequest_FieldPath(fp gotenobject.RawFieldPath) (AcceptRequestOpenRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object AcceptRequest_OpenRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "project":
			return &AcceptRequestOpenRequest_FieldTerminalPath{selector: AcceptRequestOpenRequest_FieldPathSelectorProject}, nil
		case "region_id", "regionId", "region-id":
			return &AcceptRequestOpenRequest_FieldTerminalPath{selector: AcceptRequestOpenRequest_FieldPathSelectorRegionId}, nil
		case "name":
			return &AcceptRequestOpenRequest_FieldTerminalPath{selector: AcceptRequestOpenRequest_FieldPathSelectorName}, nil
		case "session_id", "sessionId", "session-id":
			return &AcceptRequestOpenRequest_FieldTerminalPath{selector: AcceptRequestOpenRequest_FieldPathSelectorSessionId}, nil
		case "channel_id", "channelId", "channel-id":
			return &AcceptRequestOpenRequest_FieldTerminalPath{selector: AcceptRequestOpenRequest_FieldPathSelectorChannelId}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object AcceptRequest_OpenRequest", fp)
}

func ParseAcceptRequestOpenRequest_FieldPath(rawField string) (AcceptRequestOpenRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildAcceptRequestOpenRequest_FieldPath(fp)
}

func MustParseAcceptRequestOpenRequest_FieldPath(rawField string) AcceptRequestOpenRequest_FieldPath {
	fp, err := ParseAcceptRequestOpenRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type AcceptRequestOpenRequest_FieldTerminalPath struct {
	selector AcceptRequestOpenRequest_FieldPathSelector
}

var _ AcceptRequestOpenRequest_FieldPath = (*AcceptRequestOpenRequest_FieldTerminalPath)(nil)

func (fp *AcceptRequestOpenRequest_FieldTerminalPath) Selector() AcceptRequestOpenRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *AcceptRequestOpenRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *AcceptRequestOpenRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source AcceptRequest_OpenRequest
func (fp *AcceptRequestOpenRequest_FieldTerminalPath) Get(source *AcceptRequest_OpenRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case AcceptRequestOpenRequest_FieldPathSelectorProject:
			if source.Project != nil {
				values = append(values, source.Project)
			}
		case AcceptRequestOpenRequest_FieldPathSelectorRegionId:
			values = append(values, source.RegionId)
		case AcceptRequestOpenRequest_FieldPathSelectorName:
			values = append(values, source.Name)
		case AcceptRequestOpenRequest_FieldPathSelectorSessionId:
			values = append(values, source.SessionId)
		case AcceptRequestOpenRequest_FieldPathSelectorChannelId:
			values = append(values, source.ChannelId)
		default:
			panic(fmt.Sprintf("Invalid selector for AcceptRequest_OpenRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *AcceptRequestOpenRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*AcceptRequest_OpenRequest))
}

// GetSingle returns value pointed by specific field of from source AcceptRequest_OpenRequest
func (fp *AcceptRequestOpenRequest_FieldTerminalPath) GetSingle(source *AcceptRequest_OpenRequest) (interface{}, bool) {
	switch fp.selector {
	case AcceptRequestOpenRequest_FieldPathSelectorProject:
		res := source.GetProject()
		return res, res != nil
	case AcceptRequestOpenRequest_FieldPathSelectorRegionId:
		return source.GetRegionId(), source != nil
	case AcceptRequestOpenRequest_FieldPathSelectorName:
		return source.GetName(), source != nil
	case AcceptRequestOpenRequest_FieldPathSelectorSessionId:
		return source.GetSessionId(), source != nil
	case AcceptRequestOpenRequest_FieldPathSelectorChannelId:
		return source.GetChannelId(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for AcceptRequest_OpenRequest: %d", fp.selector))
	}
}

func (fp *AcceptRequestOpenRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*AcceptRequest_OpenRequest))
}

// GetDefault returns a default value of the field type
func (fp *AcceptRequestOpenRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case AcceptRequestOpenRequest_FieldPathSelectorProject:
		return (*project.Reference)(nil)
	case AcceptRequestOpenRequest_FieldPathSelectorRegionId:
		return ""
	case AcceptRequestOpenRequest_FieldPathSelectorName:
		return ""
	case AcceptRequestOpenRequest_FieldPathSelectorSessionId:
		return uint64(0)
	case AcceptRequestOpenRequest_FieldPathSelectorChannelId:
		return uint64(0)
	default:
		panic(fmt.Sprintf("Invalid selector for AcceptRequest_OpenRequest: %d", fp.selector))
	}
}

func (fp *AcceptRequestOpenRequest_FieldTerminalPath) ClearValue(item *AcceptRequest_OpenRequest) {
	if item != nil {
		switch fp.selector {
		case AcceptRequestOpenRequest_FieldPathSelectorProject:
			item.Project = nil
		case AcceptRequestOpenRequest_FieldPathSelectorRegionId:
			item.RegionId = ""
		case AcceptRequestOpenRequest_FieldPathSelectorName:
			item.Name = ""
		case AcceptRequestOpenRequest_FieldPathSelectorSessionId:
			item.SessionId = uint64(0)
		case AcceptRequestOpenRequest_FieldPathSelectorChannelId:
			item.ChannelId = uint64(0)
		default:
			panic(fmt.Sprintf("Invalid selector for AcceptRequest_OpenRequest: %d", fp.selector))
		}
	}
}

func (fp *AcceptRequestOpenRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*AcceptRequest_OpenRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *AcceptRequestOpenRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == AcceptRequestOpenRequest_FieldPathSelectorProject ||
		fp.selector == AcceptRequestOpenRequest_FieldPathSelectorRegionId ||
		fp.selector == AcceptRequestOpenRequest_FieldPathSelectorName ||
		fp.selector == AcceptRequestOpenRequest_FieldPathSelectorSessionId ||
		fp.selector == AcceptRequestOpenRequest_FieldPathSelectorChannelId
}

func (fp *AcceptRequestOpenRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *AcceptRequestOpenRequest_FieldTerminalPath) WithIValue(value interface{}) AcceptRequestOpenRequest_FieldPathValue {
	switch fp.selector {
	case AcceptRequestOpenRequest_FieldPathSelectorProject:
		return &AcceptRequestOpenRequest_FieldTerminalPathValue{AcceptRequestOpenRequest_FieldTerminalPath: *fp, value: value.(*project.Reference)}
	case AcceptRequestOpenRequest_FieldPathSelectorRegionId:
		return &AcceptRequestOpenRequest_FieldTerminalPathValue{AcceptRequestOpenRequest_FieldTerminalPath: *fp, value: value.(string)}
	case AcceptRequestOpenRequest_FieldPathSelectorName:
		return &AcceptRequestOpenRequest_FieldTerminalPathValue{AcceptRequestOpenRequest_FieldTerminalPath: *fp, value: value.(string)}
	case AcceptRequestOpenRequest_FieldPathSelectorSessionId:
		return &AcceptRequestOpenRequest_FieldTerminalPathValue{AcceptRequestOpenRequest_FieldTerminalPath: *fp, value: value.(uint64)}
	case AcceptRequestOpenRequest_FieldPathSelectorChannelId:
		return &AcceptRequestOpenRequest_FieldTerminalPathValue{AcceptRequestOpenRequest_FieldTerminalPath: *fp, value: value.(uint64)}
	default:
		panic(fmt.Sprintf("Invalid selector for AcceptRequest_OpenRequest: %d", fp.selector))
	}
}

func (fp *AcceptRequestOpenRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *AcceptRequestOpenRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) AcceptRequestOpenRequest_FieldPathArrayOfValues {
	fpaov := &AcceptRequestOpenRequest_FieldTerminalPathArrayOfValues{AcceptRequestOpenRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case AcceptRequestOpenRequest_FieldPathSelectorProject:
		return &AcceptRequestOpenRequest_FieldTerminalPathArrayOfValues{AcceptRequestOpenRequest_FieldTerminalPath: *fp, values: values.([]*project.Reference)}
	case AcceptRequestOpenRequest_FieldPathSelectorRegionId:
		return &AcceptRequestOpenRequest_FieldTerminalPathArrayOfValues{AcceptRequestOpenRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case AcceptRequestOpenRequest_FieldPathSelectorName:
		return &AcceptRequestOpenRequest_FieldTerminalPathArrayOfValues{AcceptRequestOpenRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case AcceptRequestOpenRequest_FieldPathSelectorSessionId:
		return &AcceptRequestOpenRequest_FieldTerminalPathArrayOfValues{AcceptRequestOpenRequest_FieldTerminalPath: *fp, values: values.([]uint64)}
	case AcceptRequestOpenRequest_FieldPathSelectorChannelId:
		return &AcceptRequestOpenRequest_FieldTerminalPathArrayOfValues{AcceptRequestOpenRequest_FieldTerminalPath: *fp, values: values.([]uint64)}
	default:
		panic(fmt.Sprintf("Invalid selector for AcceptRequest_OpenRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *AcceptRequestOpenRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *AcceptRequestOpenRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) AcceptRequestOpenRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for AcceptRequest_OpenRequest: %d", fp.selector))
	}
}

func (fp *AcceptRequestOpenRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// AcceptRequestOpenRequest_FieldPathValue allows storing values for OpenRequest fields according to their type
type AcceptRequestOpenRequest_FieldPathValue interface {
	AcceptRequestOpenRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **AcceptRequest_OpenRequest)
	CompareWith(*AcceptRequest_OpenRequest) (cmp int, comparable bool)
}

func ParseAcceptRequestOpenRequest_FieldPathValue(pathStr, valueStr string) (AcceptRequestOpenRequest_FieldPathValue, error) {
	fp, err := ParseAcceptRequestOpenRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing OpenRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(AcceptRequestOpenRequest_FieldPathValue), nil
}

func MustParseAcceptRequestOpenRequest_FieldPathValue(pathStr, valueStr string) AcceptRequestOpenRequest_FieldPathValue {
	fpv, err := ParseAcceptRequestOpenRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type AcceptRequestOpenRequest_FieldTerminalPathValue struct {
	AcceptRequestOpenRequest_FieldTerminalPath
	value interface{}
}

var _ AcceptRequestOpenRequest_FieldPathValue = (*AcceptRequestOpenRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'OpenRequest' as interface{}
func (fpv *AcceptRequestOpenRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *AcceptRequestOpenRequest_FieldTerminalPathValue) AsProjectValue() (*project.Reference, bool) {
	res, ok := fpv.value.(*project.Reference)
	return res, ok
}
func (fpv *AcceptRequestOpenRequest_FieldTerminalPathValue) AsRegionIdValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *AcceptRequestOpenRequest_FieldTerminalPathValue) AsNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *AcceptRequestOpenRequest_FieldTerminalPathValue) AsSessionIdValue() (uint64, bool) {
	res, ok := fpv.value.(uint64)
	return res, ok
}
func (fpv *AcceptRequestOpenRequest_FieldTerminalPathValue) AsChannelIdValue() (uint64, bool) {
	res, ok := fpv.value.(uint64)
	return res, ok
}

// SetTo stores value for selected field for object OpenRequest
func (fpv *AcceptRequestOpenRequest_FieldTerminalPathValue) SetTo(target **AcceptRequest_OpenRequest) {
	if *target == nil {
		*target = new(AcceptRequest_OpenRequest)
	}
	switch fpv.selector {
	case AcceptRequestOpenRequest_FieldPathSelectorProject:
		(*target).Project = fpv.value.(*project.Reference)
	case AcceptRequestOpenRequest_FieldPathSelectorRegionId:
		(*target).RegionId = fpv.value.(string)
	case AcceptRequestOpenRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(string)
	case AcceptRequestOpenRequest_FieldPathSelectorSessionId:
		(*target).SessionId = fpv.value.(uint64)
	case AcceptRequestOpenRequest_FieldPathSelectorChannelId:
		(*target).ChannelId = fpv.value.(uint64)
	default:
		panic(fmt.Sprintf("Invalid selector for AcceptRequest_OpenRequest: %d", fpv.selector))
	}
}

func (fpv *AcceptRequestOpenRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*AcceptRequest_OpenRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'AcceptRequestOpenRequest_FieldTerminalPathValue' with the value under path in 'AcceptRequest_OpenRequest'.
func (fpv *AcceptRequestOpenRequest_FieldTerminalPathValue) CompareWith(source *AcceptRequest_OpenRequest) (int, bool) {
	switch fpv.selector {
	case AcceptRequestOpenRequest_FieldPathSelectorProject:
		leftValue := fpv.value.(*project.Reference)
		rightValue := source.GetProject()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case AcceptRequestOpenRequest_FieldPathSelectorRegionId:
		leftValue := fpv.value.(string)
		rightValue := source.GetRegionId()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case AcceptRequestOpenRequest_FieldPathSelectorName:
		leftValue := fpv.value.(string)
		rightValue := source.GetName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case AcceptRequestOpenRequest_FieldPathSelectorSessionId:
		leftValue := fpv.value.(uint64)
		rightValue := source.GetSessionId()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case AcceptRequestOpenRequest_FieldPathSelectorChannelId:
		leftValue := fpv.value.(uint64)
		rightValue := source.GetChannelId()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for AcceptRequest_OpenRequest: %d", fpv.selector))
	}
}

func (fpv *AcceptRequestOpenRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*AcceptRequest_OpenRequest))
}

// AcceptRequestOpenRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for OpenRequest according to their type
// Present only for array (repeated) types.
type AcceptRequestOpenRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	AcceptRequestOpenRequest_FieldPath
	ContainsValue(*AcceptRequest_OpenRequest) bool
}

// ParseAcceptRequestOpenRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseAcceptRequestOpenRequest_FieldPathArrayItemValue(pathStr, valueStr string) (AcceptRequestOpenRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseAcceptRequestOpenRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing OpenRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(AcceptRequestOpenRequest_FieldPathArrayItemValue), nil
}

func MustParseAcceptRequestOpenRequest_FieldPathArrayItemValue(pathStr, valueStr string) AcceptRequestOpenRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseAcceptRequestOpenRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type AcceptRequestOpenRequest_FieldTerminalPathArrayItemValue struct {
	AcceptRequestOpenRequest_FieldTerminalPath
	value interface{}
}

var _ AcceptRequestOpenRequest_FieldPathArrayItemValue = (*AcceptRequestOpenRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object AcceptRequest_OpenRequest as interface{}
func (fpaiv *AcceptRequestOpenRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *AcceptRequestOpenRequest_FieldTerminalPathArrayItemValue) GetSingle(source *AcceptRequest_OpenRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *AcceptRequestOpenRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*AcceptRequest_OpenRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'OpenRequest'
func (fpaiv *AcceptRequestOpenRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *AcceptRequest_OpenRequest) bool {
	slice := fpaiv.AcceptRequestOpenRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// AcceptRequestOpenRequest_FieldPathArrayOfValues allows storing slice of values for OpenRequest fields according to their type
type AcceptRequestOpenRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	AcceptRequestOpenRequest_FieldPath
}

func ParseAcceptRequestOpenRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (AcceptRequestOpenRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseAcceptRequestOpenRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing OpenRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(AcceptRequestOpenRequest_FieldPathArrayOfValues), nil
}

func MustParseAcceptRequestOpenRequest_FieldPathArrayOfValues(pathStr, valuesStr string) AcceptRequestOpenRequest_FieldPathArrayOfValues {
	fpaov, err := ParseAcceptRequestOpenRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type AcceptRequestOpenRequest_FieldTerminalPathArrayOfValues struct {
	AcceptRequestOpenRequest_FieldTerminalPath
	values interface{}
}

var _ AcceptRequestOpenRequest_FieldPathArrayOfValues = (*AcceptRequestOpenRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *AcceptRequestOpenRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case AcceptRequestOpenRequest_FieldPathSelectorProject:
		for _, v := range fpaov.values.([]*project.Reference) {
			values = append(values, v)
		}
	case AcceptRequestOpenRequest_FieldPathSelectorRegionId:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case AcceptRequestOpenRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case AcceptRequestOpenRequest_FieldPathSelectorSessionId:
		for _, v := range fpaov.values.([]uint64) {
			values = append(values, v)
		}
	case AcceptRequestOpenRequest_FieldPathSelectorChannelId:
		for _, v := range fpaov.values.([]uint64) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *AcceptRequestOpenRequest_FieldTerminalPathArrayOfValues) AsProjectArrayOfValues() ([]*project.Reference, bool) {
	res, ok := fpaov.values.([]*project.Reference)
	return res, ok
}
func (fpaov *AcceptRequestOpenRequest_FieldTerminalPathArrayOfValues) AsRegionIdArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *AcceptRequestOpenRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *AcceptRequestOpenRequest_FieldTerminalPathArrayOfValues) AsSessionIdArrayOfValues() ([]uint64, bool) {
	res, ok := fpaov.values.([]uint64)
	return res, ok
}
func (fpaov *AcceptRequestOpenRequest_FieldTerminalPathArrayOfValues) AsChannelIdArrayOfValues() ([]uint64, bool) {
	res, ok := fpaov.values.([]uint64)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type AcceptRequestResumeRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() AcceptRequestResumeRequest_FieldPathSelector
	Get(source *AcceptRequest_ResumeRequest) []interface{}
	GetSingle(source *AcceptRequest_ResumeRequest) (interface{}, bool)
	ClearValue(item *AcceptRequest_ResumeRequest)

	// Those methods build corresponding AcceptRequestResumeRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) AcceptRequestResumeRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) AcceptRequestResumeRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) AcceptRequestResumeRequest_FieldPathArrayItemValue
}

type AcceptRequestResumeRequest_FieldPathSelector int32

const (
	AcceptRequestResumeRequest_FieldPathSelectorProject       AcceptRequestResumeRequest_FieldPathSelector = 0
	AcceptRequestResumeRequest_FieldPathSelectorRegionId      AcceptRequestResumeRequest_FieldPathSelector = 1
	AcceptRequestResumeRequest_FieldPathSelectorName          AcceptRequestResumeRequest_FieldPathSelector = 2
	AcceptRequestResumeRequest_FieldPathSelectorSessionId     AcceptRequestResumeRequest_FieldPathSelector = 3
	AcceptRequestResumeRequest_FieldPathSelectorChannelId     AcceptRequestResumeRequest_FieldPathSelector = 4
	AcceptRequestResumeRequest_FieldPathSelectorLastMessageId AcceptRequestResumeRequest_FieldPathSelector = 5
)

func (s AcceptRequestResumeRequest_FieldPathSelector) String() string {
	switch s {
	case AcceptRequestResumeRequest_FieldPathSelectorProject:
		return "project"
	case AcceptRequestResumeRequest_FieldPathSelectorRegionId:
		return "region_id"
	case AcceptRequestResumeRequest_FieldPathSelectorName:
		return "name"
	case AcceptRequestResumeRequest_FieldPathSelectorSessionId:
		return "session_id"
	case AcceptRequestResumeRequest_FieldPathSelectorChannelId:
		return "channel_id"
	case AcceptRequestResumeRequest_FieldPathSelectorLastMessageId:
		return "last_message_id"
	default:
		panic(fmt.Sprintf("Invalid selector for AcceptRequest_ResumeRequest: %d", s))
	}
}

func BuildAcceptRequestResumeRequest_FieldPath(fp gotenobject.RawFieldPath) (AcceptRequestResumeRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object AcceptRequest_ResumeRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "project":
			return &AcceptRequestResumeRequest_FieldTerminalPath{selector: AcceptRequestResumeRequest_FieldPathSelectorProject}, nil
		case "region_id", "regionId", "region-id":
			return &AcceptRequestResumeRequest_FieldTerminalPath{selector: AcceptRequestResumeRequest_FieldPathSelectorRegionId}, nil
		case "name":
			return &AcceptRequestResumeRequest_FieldTerminalPath{selector: AcceptRequestResumeRequest_FieldPathSelectorName}, nil
		case "session_id", "sessionId", "session-id":
			return &AcceptRequestResumeRequest_FieldTerminalPath{selector: AcceptRequestResumeRequest_FieldPathSelectorSessionId}, nil
		case "channel_id", "channelId", "channel-id":
			return &AcceptRequestResumeRequest_FieldTerminalPath{selector: AcceptRequestResumeRequest_FieldPathSelectorChannelId}, nil
		case "last_message_id", "lastMessageId", "last-message-id":
			return &AcceptRequestResumeRequest_FieldTerminalPath{selector: AcceptRequestResumeRequest_FieldPathSelectorLastMessageId}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object AcceptRequest_ResumeRequest", fp)
}

func ParseAcceptRequestResumeRequest_FieldPath(rawField string) (AcceptRequestResumeRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildAcceptRequestResumeRequest_FieldPath(fp)
}

func MustParseAcceptRequestResumeRequest_FieldPath(rawField string) AcceptRequestResumeRequest_FieldPath {
	fp, err := ParseAcceptRequestResumeRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type AcceptRequestResumeRequest_FieldTerminalPath struct {
	selector AcceptRequestResumeRequest_FieldPathSelector
}

var _ AcceptRequestResumeRequest_FieldPath = (*AcceptRequestResumeRequest_FieldTerminalPath)(nil)

func (fp *AcceptRequestResumeRequest_FieldTerminalPath) Selector() AcceptRequestResumeRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *AcceptRequestResumeRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *AcceptRequestResumeRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source AcceptRequest_ResumeRequest
func (fp *AcceptRequestResumeRequest_FieldTerminalPath) Get(source *AcceptRequest_ResumeRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case AcceptRequestResumeRequest_FieldPathSelectorProject:
			if source.Project != nil {
				values = append(values, source.Project)
			}
		case AcceptRequestResumeRequest_FieldPathSelectorRegionId:
			values = append(values, source.RegionId)
		case AcceptRequestResumeRequest_FieldPathSelectorName:
			values = append(values, source.Name)
		case AcceptRequestResumeRequest_FieldPathSelectorSessionId:
			values = append(values, source.SessionId)
		case AcceptRequestResumeRequest_FieldPathSelectorChannelId:
			values = append(values, source.ChannelId)
		case AcceptRequestResumeRequest_FieldPathSelectorLastMessageId:
			values = append(values, source.LastMessageId)
		default:
			panic(fmt.Sprintf("Invalid selector for AcceptRequest_ResumeRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *AcceptRequestResumeRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*AcceptRequest_ResumeRequest))
}

// GetSingle returns value pointed by specific field of from source AcceptRequest_ResumeRequest
func (fp *AcceptRequestResumeRequest_FieldTerminalPath) GetSingle(source *AcceptRequest_ResumeRequest) (interface{}, bool) {
	switch fp.selector {
	case AcceptRequestResumeRequest_FieldPathSelectorProject:
		res := source.GetProject()
		return res, res != nil
	case AcceptRequestResumeRequest_FieldPathSelectorRegionId:
		return source.GetRegionId(), source != nil
	case AcceptRequestResumeRequest_FieldPathSelectorName:
		return source.GetName(), source != nil
	case AcceptRequestResumeRequest_FieldPathSelectorSessionId:
		return source.GetSessionId(), source != nil
	case AcceptRequestResumeRequest_FieldPathSelectorChannelId:
		return source.GetChannelId(), source != nil
	case AcceptRequestResumeRequest_FieldPathSelectorLastMessageId:
		return source.GetLastMessageId(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for AcceptRequest_ResumeRequest: %d", fp.selector))
	}
}

func (fp *AcceptRequestResumeRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*AcceptRequest_ResumeRequest))
}

// GetDefault returns a default value of the field type
func (fp *AcceptRequestResumeRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case AcceptRequestResumeRequest_FieldPathSelectorProject:
		return (*project.Reference)(nil)
	case AcceptRequestResumeRequest_FieldPathSelectorRegionId:
		return ""
	case AcceptRequestResumeRequest_FieldPathSelectorName:
		return ""
	case AcceptRequestResumeRequest_FieldPathSelectorSessionId:
		return uint64(0)
	case AcceptRequestResumeRequest_FieldPathSelectorChannelId:
		return uint64(0)
	case AcceptRequestResumeRequest_FieldPathSelectorLastMessageId:
		return uint64(0)
	default:
		panic(fmt.Sprintf("Invalid selector for AcceptRequest_ResumeRequest: %d", fp.selector))
	}
}

func (fp *AcceptRequestResumeRequest_FieldTerminalPath) ClearValue(item *AcceptRequest_ResumeRequest) {
	if item != nil {
		switch fp.selector {
		case AcceptRequestResumeRequest_FieldPathSelectorProject:
			item.Project = nil
		case AcceptRequestResumeRequest_FieldPathSelectorRegionId:
			item.RegionId = ""
		case AcceptRequestResumeRequest_FieldPathSelectorName:
			item.Name = ""
		case AcceptRequestResumeRequest_FieldPathSelectorSessionId:
			item.SessionId = uint64(0)
		case AcceptRequestResumeRequest_FieldPathSelectorChannelId:
			item.ChannelId = uint64(0)
		case AcceptRequestResumeRequest_FieldPathSelectorLastMessageId:
			item.LastMessageId = uint64(0)
		default:
			panic(fmt.Sprintf("Invalid selector for AcceptRequest_ResumeRequest: %d", fp.selector))
		}
	}
}

func (fp *AcceptRequestResumeRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*AcceptRequest_ResumeRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *AcceptRequestResumeRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == AcceptRequestResumeRequest_FieldPathSelectorProject ||
		fp.selector == AcceptRequestResumeRequest_FieldPathSelectorRegionId ||
		fp.selector == AcceptRequestResumeRequest_FieldPathSelectorName ||
		fp.selector == AcceptRequestResumeRequest_FieldPathSelectorSessionId ||
		fp.selector == AcceptRequestResumeRequest_FieldPathSelectorChannelId ||
		fp.selector == AcceptRequestResumeRequest_FieldPathSelectorLastMessageId
}

func (fp *AcceptRequestResumeRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *AcceptRequestResumeRequest_FieldTerminalPath) WithIValue(value interface{}) AcceptRequestResumeRequest_FieldPathValue {
	switch fp.selector {
	case AcceptRequestResumeRequest_FieldPathSelectorProject:
		return &AcceptRequestResumeRequest_FieldTerminalPathValue{AcceptRequestResumeRequest_FieldTerminalPath: *fp, value: value.(*project.Reference)}
	case AcceptRequestResumeRequest_FieldPathSelectorRegionId:
		return &AcceptRequestResumeRequest_FieldTerminalPathValue{AcceptRequestResumeRequest_FieldTerminalPath: *fp, value: value.(string)}
	case AcceptRequestResumeRequest_FieldPathSelectorName:
		return &AcceptRequestResumeRequest_FieldTerminalPathValue{AcceptRequestResumeRequest_FieldTerminalPath: *fp, value: value.(string)}
	case AcceptRequestResumeRequest_FieldPathSelectorSessionId:
		return &AcceptRequestResumeRequest_FieldTerminalPathValue{AcceptRequestResumeRequest_FieldTerminalPath: *fp, value: value.(uint64)}
	case AcceptRequestResumeRequest_FieldPathSelectorChannelId:
		return &AcceptRequestResumeRequest_FieldTerminalPathValue{AcceptRequestResumeRequest_FieldTerminalPath: *fp, value: value.(uint64)}
	case AcceptRequestResumeRequest_FieldPathSelectorLastMessageId:
		return &AcceptRequestResumeRequest_FieldTerminalPathValue{AcceptRequestResumeRequest_FieldTerminalPath: *fp, value: value.(uint64)}
	default:
		panic(fmt.Sprintf("Invalid selector for AcceptRequest_ResumeRequest: %d", fp.selector))
	}
}

func (fp *AcceptRequestResumeRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *AcceptRequestResumeRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) AcceptRequestResumeRequest_FieldPathArrayOfValues {
	fpaov := &AcceptRequestResumeRequest_FieldTerminalPathArrayOfValues{AcceptRequestResumeRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case AcceptRequestResumeRequest_FieldPathSelectorProject:
		return &AcceptRequestResumeRequest_FieldTerminalPathArrayOfValues{AcceptRequestResumeRequest_FieldTerminalPath: *fp, values: values.([]*project.Reference)}
	case AcceptRequestResumeRequest_FieldPathSelectorRegionId:
		return &AcceptRequestResumeRequest_FieldTerminalPathArrayOfValues{AcceptRequestResumeRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case AcceptRequestResumeRequest_FieldPathSelectorName:
		return &AcceptRequestResumeRequest_FieldTerminalPathArrayOfValues{AcceptRequestResumeRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case AcceptRequestResumeRequest_FieldPathSelectorSessionId:
		return &AcceptRequestResumeRequest_FieldTerminalPathArrayOfValues{AcceptRequestResumeRequest_FieldTerminalPath: *fp, values: values.([]uint64)}
	case AcceptRequestResumeRequest_FieldPathSelectorChannelId:
		return &AcceptRequestResumeRequest_FieldTerminalPathArrayOfValues{AcceptRequestResumeRequest_FieldTerminalPath: *fp, values: values.([]uint64)}
	case AcceptRequestResumeRequest_FieldPathSelectorLastMessageId:
		return &AcceptRequestResumeRequest_FieldTerminalPathArrayOfValues{AcceptRequestResumeRequest_FieldTerminalPath: *fp, values: values.([]uint64)}
	default:
		panic(fmt.Sprintf("Invalid selector for AcceptRequest_ResumeRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *AcceptRequestResumeRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *AcceptRequestResumeRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) AcceptRequestResumeRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for AcceptRequest_ResumeRequest: %d", fp.selector))
	}
}

func (fp *AcceptRequestResumeRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// AcceptRequestResumeRequest_FieldPathValue allows storing values for ResumeRequest fields according to their type
type AcceptRequestResumeRequest_FieldPathValue interface {
	AcceptRequestResumeRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **AcceptRequest_ResumeRequest)
	CompareWith(*AcceptRequest_ResumeRequest) (cmp int, comparable bool)
}

func ParseAcceptRequestResumeRequest_FieldPathValue(pathStr, valueStr string) (AcceptRequestResumeRequest_FieldPathValue, error) {
	fp, err := ParseAcceptRequestResumeRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ResumeRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(AcceptRequestResumeRequest_FieldPathValue), nil
}

func MustParseAcceptRequestResumeRequest_FieldPathValue(pathStr, valueStr string) AcceptRequestResumeRequest_FieldPathValue {
	fpv, err := ParseAcceptRequestResumeRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type AcceptRequestResumeRequest_FieldTerminalPathValue struct {
	AcceptRequestResumeRequest_FieldTerminalPath
	value interface{}
}

var _ AcceptRequestResumeRequest_FieldPathValue = (*AcceptRequestResumeRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ResumeRequest' as interface{}
func (fpv *AcceptRequestResumeRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *AcceptRequestResumeRequest_FieldTerminalPathValue) AsProjectValue() (*project.Reference, bool) {
	res, ok := fpv.value.(*project.Reference)
	return res, ok
}
func (fpv *AcceptRequestResumeRequest_FieldTerminalPathValue) AsRegionIdValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *AcceptRequestResumeRequest_FieldTerminalPathValue) AsNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *AcceptRequestResumeRequest_FieldTerminalPathValue) AsSessionIdValue() (uint64, bool) {
	res, ok := fpv.value.(uint64)
	return res, ok
}
func (fpv *AcceptRequestResumeRequest_FieldTerminalPathValue) AsChannelIdValue() (uint64, bool) {
	res, ok := fpv.value.(uint64)
	return res, ok
}
func (fpv *AcceptRequestResumeRequest_FieldTerminalPathValue) AsLastMessageIdValue() (uint64, bool) {
	res, ok := fpv.value.(uint64)
	return res, ok
}

// SetTo stores value for selected field for object ResumeRequest
func (fpv *AcceptRequestResumeRequest_FieldTerminalPathValue) SetTo(target **AcceptRequest_ResumeRequest) {
	if *target == nil {
		*target = new(AcceptRequest_ResumeRequest)
	}
	switch fpv.selector {
	case AcceptRequestResumeRequest_FieldPathSelectorProject:
		(*target).Project = fpv.value.(*project.Reference)
	case AcceptRequestResumeRequest_FieldPathSelectorRegionId:
		(*target).RegionId = fpv.value.(string)
	case AcceptRequestResumeRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(string)
	case AcceptRequestResumeRequest_FieldPathSelectorSessionId:
		(*target).SessionId = fpv.value.(uint64)
	case AcceptRequestResumeRequest_FieldPathSelectorChannelId:
		(*target).ChannelId = fpv.value.(uint64)
	case AcceptRequestResumeRequest_FieldPathSelectorLastMessageId:
		(*target).LastMessageId = fpv.value.(uint64)
	default:
		panic(fmt.Sprintf("Invalid selector for AcceptRequest_ResumeRequest: %d", fpv.selector))
	}
}

func (fpv *AcceptRequestResumeRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*AcceptRequest_ResumeRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'AcceptRequestResumeRequest_FieldTerminalPathValue' with the value under path in 'AcceptRequest_ResumeRequest'.
func (fpv *AcceptRequestResumeRequest_FieldTerminalPathValue) CompareWith(source *AcceptRequest_ResumeRequest) (int, bool) {
	switch fpv.selector {
	case AcceptRequestResumeRequest_FieldPathSelectorProject:
		leftValue := fpv.value.(*project.Reference)
		rightValue := source.GetProject()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case AcceptRequestResumeRequest_FieldPathSelectorRegionId:
		leftValue := fpv.value.(string)
		rightValue := source.GetRegionId()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case AcceptRequestResumeRequest_FieldPathSelectorName:
		leftValue := fpv.value.(string)
		rightValue := source.GetName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case AcceptRequestResumeRequest_FieldPathSelectorSessionId:
		leftValue := fpv.value.(uint64)
		rightValue := source.GetSessionId()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case AcceptRequestResumeRequest_FieldPathSelectorChannelId:
		leftValue := fpv.value.(uint64)
		rightValue := source.GetChannelId()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case AcceptRequestResumeRequest_FieldPathSelectorLastMessageId:
		leftValue := fpv.value.(uint64)
		rightValue := source.GetLastMessageId()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for AcceptRequest_ResumeRequest: %d", fpv.selector))
	}
}

func (fpv *AcceptRequestResumeRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*AcceptRequest_ResumeRequest))
}

// AcceptRequestResumeRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for ResumeRequest according to their type
// Present only for array (repeated) types.
type AcceptRequestResumeRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	AcceptRequestResumeRequest_FieldPath
	ContainsValue(*AcceptRequest_ResumeRequest) bool
}

// ParseAcceptRequestResumeRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseAcceptRequestResumeRequest_FieldPathArrayItemValue(pathStr, valueStr string) (AcceptRequestResumeRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseAcceptRequestResumeRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ResumeRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(AcceptRequestResumeRequest_FieldPathArrayItemValue), nil
}

func MustParseAcceptRequestResumeRequest_FieldPathArrayItemValue(pathStr, valueStr string) AcceptRequestResumeRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseAcceptRequestResumeRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type AcceptRequestResumeRequest_FieldTerminalPathArrayItemValue struct {
	AcceptRequestResumeRequest_FieldTerminalPath
	value interface{}
}

var _ AcceptRequestResumeRequest_FieldPathArrayItemValue = (*AcceptRequestResumeRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object AcceptRequest_ResumeRequest as interface{}
func (fpaiv *AcceptRequestResumeRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *AcceptRequestResumeRequest_FieldTerminalPathArrayItemValue) GetSingle(source *AcceptRequest_ResumeRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *AcceptRequestResumeRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*AcceptRequest_ResumeRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ResumeRequest'
func (fpaiv *AcceptRequestResumeRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *AcceptRequest_ResumeRequest) bool {
	slice := fpaiv.AcceptRequestResumeRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// AcceptRequestResumeRequest_FieldPathArrayOfValues allows storing slice of values for ResumeRequest fields according to their type
type AcceptRequestResumeRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	AcceptRequestResumeRequest_FieldPath
}

func ParseAcceptRequestResumeRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (AcceptRequestResumeRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseAcceptRequestResumeRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ResumeRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(AcceptRequestResumeRequest_FieldPathArrayOfValues), nil
}

func MustParseAcceptRequestResumeRequest_FieldPathArrayOfValues(pathStr, valuesStr string) AcceptRequestResumeRequest_FieldPathArrayOfValues {
	fpaov, err := ParseAcceptRequestResumeRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type AcceptRequestResumeRequest_FieldTerminalPathArrayOfValues struct {
	AcceptRequestResumeRequest_FieldTerminalPath
	values interface{}
}

var _ AcceptRequestResumeRequest_FieldPathArrayOfValues = (*AcceptRequestResumeRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *AcceptRequestResumeRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case AcceptRequestResumeRequest_FieldPathSelectorProject:
		for _, v := range fpaov.values.([]*project.Reference) {
			values = append(values, v)
		}
	case AcceptRequestResumeRequest_FieldPathSelectorRegionId:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case AcceptRequestResumeRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case AcceptRequestResumeRequest_FieldPathSelectorSessionId:
		for _, v := range fpaov.values.([]uint64) {
			values = append(values, v)
		}
	case AcceptRequestResumeRequest_FieldPathSelectorChannelId:
		for _, v := range fpaov.values.([]uint64) {
			values = append(values, v)
		}
	case AcceptRequestResumeRequest_FieldPathSelectorLastMessageId:
		for _, v := range fpaov.values.([]uint64) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *AcceptRequestResumeRequest_FieldTerminalPathArrayOfValues) AsProjectArrayOfValues() ([]*project.Reference, bool) {
	res, ok := fpaov.values.([]*project.Reference)
	return res, ok
}
func (fpaov *AcceptRequestResumeRequest_FieldTerminalPathArrayOfValues) AsRegionIdArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *AcceptRequestResumeRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *AcceptRequestResumeRequest_FieldTerminalPathArrayOfValues) AsSessionIdArrayOfValues() ([]uint64, bool) {
	res, ok := fpaov.values.([]uint64)
	return res, ok
}
func (fpaov *AcceptRequestResumeRequest_FieldTerminalPathArrayOfValues) AsChannelIdArrayOfValues() ([]uint64, bool) {
	res, ok := fpaov.values.([]uint64)
	return res, ok
}
func (fpaov *AcceptRequestResumeRequest_FieldTerminalPathArrayOfValues) AsLastMessageIdArrayOfValues() ([]uint64, bool) {
	res, ok := fpaov.values.([]uint64)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type AcceptResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() AcceptResponse_FieldPathSelector
	Get(source *AcceptResponse) []interface{}
	GetSingle(source *AcceptResponse) (interface{}, bool)
	ClearValue(item *AcceptResponse)

	// Those methods build corresponding AcceptResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) AcceptResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) AcceptResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) AcceptResponse_FieldPathArrayItemValue
}

type AcceptResponse_FieldPathSelector int32

const (
	AcceptResponse_FieldPathSelectorData  AcceptResponse_FieldPathSelector = 0
	AcceptResponse_FieldPathSelectorAck   AcceptResponse_FieldPathSelector = 1
	AcceptResponse_FieldPathSelectorClose AcceptResponse_FieldPathSelector = 2
	AcceptResponse_FieldPathSelectorError AcceptResponse_FieldPathSelector = 3
)

func (s AcceptResponse_FieldPathSelector) String() string {
	switch s {
	case AcceptResponse_FieldPathSelectorData:
		return "data"
	case AcceptResponse_FieldPathSelectorAck:
		return "ack"
	case AcceptResponse_FieldPathSelectorClose:
		return "close"
	case AcceptResponse_FieldPathSelectorError:
		return "error"
	default:
		panic(fmt.Sprintf("Invalid selector for AcceptResponse: %d", s))
	}
}

func BuildAcceptResponse_FieldPath(fp gotenobject.RawFieldPath) (AcceptResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object AcceptResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "data":
			return &AcceptResponse_FieldTerminalPath{selector: AcceptResponse_FieldPathSelectorData}, nil
		case "ack":
			return &AcceptResponse_FieldTerminalPath{selector: AcceptResponse_FieldPathSelectorAck}, nil
		case "close":
			return &AcceptResponse_FieldTerminalPath{selector: AcceptResponse_FieldPathSelectorClose}, nil
		case "error":
			return &AcceptResponse_FieldTerminalPath{selector: AcceptResponse_FieldPathSelectorError}, nil
		}
	} else {
		switch fp[0] {
		case "data":
			if subpath, err := BuildData_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &AcceptResponse_FieldSubPath{selector: AcceptResponse_FieldPathSelectorData, subPath: subpath}, nil
			}
		case "ack":
			if subpath, err := BuildAck_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &AcceptResponse_FieldSubPath{selector: AcceptResponse_FieldPathSelectorAck, subPath: subpath}, nil
			}
		case "close":
			if subpath, err := BuildClose_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &AcceptResponse_FieldSubPath{selector: AcceptResponse_FieldPathSelectorClose, subPath: subpath}, nil
			}
		case "error":
			if subpath, err := BuildError_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &AcceptResponse_FieldSubPath{selector: AcceptResponse_FieldPathSelectorError, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object AcceptResponse", fp)
}

func ParseAcceptResponse_FieldPath(rawField string) (AcceptResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildAcceptResponse_FieldPath(fp)
}

func MustParseAcceptResponse_FieldPath(rawField string) AcceptResponse_FieldPath {
	fp, err := ParseAcceptResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type AcceptResponse_FieldTerminalPath struct {
	selector AcceptResponse_FieldPathSelector
}

var _ AcceptResponse_FieldPath = (*AcceptResponse_FieldTerminalPath)(nil)

func (fp *AcceptResponse_FieldTerminalPath) Selector() AcceptResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *AcceptResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *AcceptResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source AcceptResponse
func (fp *AcceptResponse_FieldTerminalPath) Get(source *AcceptResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case AcceptResponse_FieldPathSelectorData:
			if source, ok := source.Message.(*AcceptResponse_Data); ok && source != nil {
				if source.Data != nil {
					values = append(values, source.Data)
				}
			}
		case AcceptResponse_FieldPathSelectorAck:
			if source, ok := source.Message.(*AcceptResponse_Ack); ok && source != nil {
				if source.Ack != nil {
					values = append(values, source.Ack)
				}
			}
		case AcceptResponse_FieldPathSelectorClose:
			if source, ok := source.Message.(*AcceptResponse_Close); ok && source != nil {
				if source.Close != nil {
					values = append(values, source.Close)
				}
			}
		case AcceptResponse_FieldPathSelectorError:
			if source, ok := source.Message.(*AcceptResponse_Error); ok && source != nil {
				if source.Error != nil {
					values = append(values, source.Error)
				}
			}
		default:
			panic(fmt.Sprintf("Invalid selector for AcceptResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *AcceptResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*AcceptResponse))
}

// GetSingle returns value pointed by specific field of from source AcceptResponse
func (fp *AcceptResponse_FieldTerminalPath) GetSingle(source *AcceptResponse) (interface{}, bool) {
	switch fp.selector {
	case AcceptResponse_FieldPathSelectorData:
		res := source.GetData()
		return res, res != nil
	case AcceptResponse_FieldPathSelectorAck:
		res := source.GetAck()
		return res, res != nil
	case AcceptResponse_FieldPathSelectorClose:
		res := source.GetClose()
		return res, res != nil
	case AcceptResponse_FieldPathSelectorError:
		res := source.GetError()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for AcceptResponse: %d", fp.selector))
	}
}

func (fp *AcceptResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*AcceptResponse))
}

// GetDefault returns a default value of the field type
func (fp *AcceptResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case AcceptResponse_FieldPathSelectorData:
		return (*Data)(nil)
	case AcceptResponse_FieldPathSelectorAck:
		return (*Ack)(nil)
	case AcceptResponse_FieldPathSelectorClose:
		return (*Close)(nil)
	case AcceptResponse_FieldPathSelectorError:
		return (*Error)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for AcceptResponse: %d", fp.selector))
	}
}

func (fp *AcceptResponse_FieldTerminalPath) ClearValue(item *AcceptResponse) {
	if item != nil {
		switch fp.selector {
		case AcceptResponse_FieldPathSelectorData:
			if item, ok := item.Message.(*AcceptResponse_Data); ok {
				item.Data = nil
			}
		case AcceptResponse_FieldPathSelectorAck:
			if item, ok := item.Message.(*AcceptResponse_Ack); ok {
				item.Ack = nil
			}
		case AcceptResponse_FieldPathSelectorClose:
			if item, ok := item.Message.(*AcceptResponse_Close); ok {
				item.Close = nil
			}
		case AcceptResponse_FieldPathSelectorError:
			if item, ok := item.Message.(*AcceptResponse_Error); ok {
				item.Error = nil
			}
		default:
			panic(fmt.Sprintf("Invalid selector for AcceptResponse: %d", fp.selector))
		}
	}
}

func (fp *AcceptResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*AcceptResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *AcceptResponse_FieldTerminalPath) IsLeaf() bool {
	return false
}

func (fp *AcceptResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *AcceptResponse_FieldTerminalPath) WithIValue(value interface{}) AcceptResponse_FieldPathValue {
	switch fp.selector {
	case AcceptResponse_FieldPathSelectorData:
		return &AcceptResponse_FieldTerminalPathValue{AcceptResponse_FieldTerminalPath: *fp, value: value.(*Data)}
	case AcceptResponse_FieldPathSelectorAck:
		return &AcceptResponse_FieldTerminalPathValue{AcceptResponse_FieldTerminalPath: *fp, value: value.(*Ack)}
	case AcceptResponse_FieldPathSelectorClose:
		return &AcceptResponse_FieldTerminalPathValue{AcceptResponse_FieldTerminalPath: *fp, value: value.(*Close)}
	case AcceptResponse_FieldPathSelectorError:
		return &AcceptResponse_FieldTerminalPathValue{AcceptResponse_FieldTerminalPath: *fp, value: value.(*Error)}
	default:
		panic(fmt.Sprintf("Invalid selector for AcceptResponse: %d", fp.selector))
	}
}

func (fp *AcceptResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *AcceptResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) AcceptResponse_FieldPathArrayOfValues {
	fpaov := &AcceptResponse_FieldTerminalPathArrayOfValues{AcceptResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case AcceptResponse_FieldPathSelectorData:
		return &AcceptResponse_FieldTerminalPathArrayOfValues{AcceptResponse_FieldTerminalPath: *fp, values: values.([]*Data)}
	case AcceptResponse_FieldPathSelectorAck:
		return &AcceptResponse_FieldTerminalPathArrayOfValues{AcceptResponse_FieldTerminalPath: *fp, values: values.([]*Ack)}
	case AcceptResponse_FieldPathSelectorClose:
		return &AcceptResponse_FieldTerminalPathArrayOfValues{AcceptResponse_FieldTerminalPath: *fp, values: values.([]*Close)}
	case AcceptResponse_FieldPathSelectorError:
		return &AcceptResponse_FieldTerminalPathArrayOfValues{AcceptResponse_FieldTerminalPath: *fp, values: values.([]*Error)}
	default:
		panic(fmt.Sprintf("Invalid selector for AcceptResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *AcceptResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *AcceptResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) AcceptResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for AcceptResponse: %d", fp.selector))
	}
}

func (fp *AcceptResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type AcceptResponse_FieldSubPath struct {
	selector AcceptResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ AcceptResponse_FieldPath = (*AcceptResponse_FieldSubPath)(nil)

func (fps *AcceptResponse_FieldSubPath) Selector() AcceptResponse_FieldPathSelector {
	return fps.selector
}
func (fps *AcceptResponse_FieldSubPath) AsDataSubPath() (Data_FieldPath, bool) {
	res, ok := fps.subPath.(Data_FieldPath)
	return res, ok
}
func (fps *AcceptResponse_FieldSubPath) AsAckSubPath() (Ack_FieldPath, bool) {
	res, ok := fps.subPath.(Ack_FieldPath)
	return res, ok
}
func (fps *AcceptResponse_FieldSubPath) AsCloseSubPath() (Close_FieldPath, bool) {
	res, ok := fps.subPath.(Close_FieldPath)
	return res, ok
}
func (fps *AcceptResponse_FieldSubPath) AsErrorSubPath() (Error_FieldPath, bool) {
	res, ok := fps.subPath.(Error_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *AcceptResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *AcceptResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source AcceptResponse
func (fps *AcceptResponse_FieldSubPath) Get(source *AcceptResponse) (values []interface{}) {
	switch fps.selector {
	case AcceptResponse_FieldPathSelectorData:
		values = append(values, fps.subPath.GetRaw(source.GetData())...)
	case AcceptResponse_FieldPathSelectorAck:
		values = append(values, fps.subPath.GetRaw(source.GetAck())...)
	case AcceptResponse_FieldPathSelectorClose:
		values = append(values, fps.subPath.GetRaw(source.GetClose())...)
	case AcceptResponse_FieldPathSelectorError:
		values = append(values, fps.subPath.GetRaw(source.GetError())...)
	default:
		panic(fmt.Sprintf("Invalid selector for AcceptResponse: %d", fps.selector))
	}
	return
}

func (fps *AcceptResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*AcceptResponse))
}

// GetSingle returns value of selected field from source AcceptResponse
func (fps *AcceptResponse_FieldSubPath) GetSingle(source *AcceptResponse) (interface{}, bool) {
	switch fps.selector {
	case AcceptResponse_FieldPathSelectorData:
		if source.GetData() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetData())
	case AcceptResponse_FieldPathSelectorAck:
		if source.GetAck() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetAck())
	case AcceptResponse_FieldPathSelectorClose:
		if source.GetClose() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetClose())
	case AcceptResponse_FieldPathSelectorError:
		if source.GetError() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetError())
	default:
		panic(fmt.Sprintf("Invalid selector for AcceptResponse: %d", fps.selector))
	}
}

func (fps *AcceptResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*AcceptResponse))
}

// GetDefault returns a default value of the field type
func (fps *AcceptResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *AcceptResponse_FieldSubPath) ClearValue(item *AcceptResponse) {
	if item != nil {
		switch fps.selector {
		case AcceptResponse_FieldPathSelectorData:
			if item.Message != nil {
				if item, ok := item.Message.(*AcceptResponse_Data); ok {
					fps.subPath.ClearValueRaw(item.Data)
				}
			}
		case AcceptResponse_FieldPathSelectorAck:
			if item.Message != nil {
				if item, ok := item.Message.(*AcceptResponse_Ack); ok {
					fps.subPath.ClearValueRaw(item.Ack)
				}
			}
		case AcceptResponse_FieldPathSelectorClose:
			if item.Message != nil {
				if item, ok := item.Message.(*AcceptResponse_Close); ok {
					fps.subPath.ClearValueRaw(item.Close)
				}
			}
		case AcceptResponse_FieldPathSelectorError:
			if item.Message != nil {
				if item, ok := item.Message.(*AcceptResponse_Error); ok {
					fps.subPath.ClearValueRaw(item.Error)
				}
			}
		default:
			panic(fmt.Sprintf("Invalid selector for AcceptResponse: %d", fps.selector))
		}
	}
}

func (fps *AcceptResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*AcceptResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *AcceptResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *AcceptResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&AcceptResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *AcceptResponse_FieldSubPath) WithIValue(value interface{}) AcceptResponse_FieldPathValue {
	return &AcceptResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *AcceptResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *AcceptResponse_FieldSubPath) WithIArrayOfValues(values interface{}) AcceptResponse_FieldPathArrayOfValues {
	return &AcceptResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *AcceptResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *AcceptResponse_FieldSubPath) WithIArrayItemValue(value interface{}) AcceptResponse_FieldPathArrayItemValue {
	return &AcceptResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *AcceptResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// AcceptResponse_FieldPathValue allows storing values for AcceptResponse fields according to their type
type AcceptResponse_FieldPathValue interface {
	AcceptResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **AcceptResponse)
	CompareWith(*AcceptResponse) (cmp int, comparable bool)
}

func ParseAcceptResponse_FieldPathValue(pathStr, valueStr string) (AcceptResponse_FieldPathValue, error) {
	fp, err := ParseAcceptResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing AcceptResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(AcceptResponse_FieldPathValue), nil
}

func MustParseAcceptResponse_FieldPathValue(pathStr, valueStr string) AcceptResponse_FieldPathValue {
	fpv, err := ParseAcceptResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type AcceptResponse_FieldTerminalPathValue struct {
	AcceptResponse_FieldTerminalPath
	value interface{}
}

var _ AcceptResponse_FieldPathValue = (*AcceptResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'AcceptResponse' as interface{}
func (fpv *AcceptResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *AcceptResponse_FieldTerminalPathValue) AsDataValue() (*Data, bool) {
	res, ok := fpv.value.(*Data)
	return res, ok
}
func (fpv *AcceptResponse_FieldTerminalPathValue) AsAckValue() (*Ack, bool) {
	res, ok := fpv.value.(*Ack)
	return res, ok
}
func (fpv *AcceptResponse_FieldTerminalPathValue) AsCloseValue() (*Close, bool) {
	res, ok := fpv.value.(*Close)
	return res, ok
}
func (fpv *AcceptResponse_FieldTerminalPathValue) AsErrorValue() (*Error, bool) {
	res, ok := fpv.value.(*Error)
	return res, ok
}

// SetTo stores value for selected field for object AcceptResponse
func (fpv *AcceptResponse_FieldTerminalPathValue) SetTo(target **AcceptResponse) {
	if *target == nil {
		*target = new(AcceptResponse)
	}
	switch fpv.selector {
	case AcceptResponse_FieldPathSelectorData:
		if _, ok := (*target).Message.(*AcceptResponse_Data); !ok {
			(*target).Message = &AcceptResponse_Data{}
		}
		(*target).Message.(*AcceptResponse_Data).Data = fpv.value.(*Data)
	case AcceptResponse_FieldPathSelectorAck:
		if _, ok := (*target).Message.(*AcceptResponse_Ack); !ok {
			(*target).Message = &AcceptResponse_Ack{}
		}
		(*target).Message.(*AcceptResponse_Ack).Ack = fpv.value.(*Ack)
	case AcceptResponse_FieldPathSelectorClose:
		if _, ok := (*target).Message.(*AcceptResponse_Close); !ok {
			(*target).Message = &AcceptResponse_Close{}
		}
		(*target).Message.(*AcceptResponse_Close).Close = fpv.value.(*Close)
	case AcceptResponse_FieldPathSelectorError:
		if _, ok := (*target).Message.(*AcceptResponse_Error); !ok {
			(*target).Message = &AcceptResponse_Error{}
		}
		(*target).Message.(*AcceptResponse_Error).Error = fpv.value.(*Error)
	default:
		panic(fmt.Sprintf("Invalid selector for AcceptResponse: %d", fpv.selector))
	}
}

func (fpv *AcceptResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*AcceptResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'AcceptResponse_FieldTerminalPathValue' with the value under path in 'AcceptResponse'.
func (fpv *AcceptResponse_FieldTerminalPathValue) CompareWith(source *AcceptResponse) (int, bool) {
	switch fpv.selector {
	case AcceptResponse_FieldPathSelectorData:
		return 0, false
	case AcceptResponse_FieldPathSelectorAck:
		return 0, false
	case AcceptResponse_FieldPathSelectorClose:
		return 0, false
	case AcceptResponse_FieldPathSelectorError:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for AcceptResponse: %d", fpv.selector))
	}
}

func (fpv *AcceptResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*AcceptResponse))
}

type AcceptResponse_FieldSubPathValue struct {
	AcceptResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ AcceptResponse_FieldPathValue = (*AcceptResponse_FieldSubPathValue)(nil)

func (fpvs *AcceptResponse_FieldSubPathValue) AsDataPathValue() (Data_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(Data_FieldPathValue)
	return res, ok
}
func (fpvs *AcceptResponse_FieldSubPathValue) AsAckPathValue() (Ack_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(Ack_FieldPathValue)
	return res, ok
}
func (fpvs *AcceptResponse_FieldSubPathValue) AsClosePathValue() (Close_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(Close_FieldPathValue)
	return res, ok
}
func (fpvs *AcceptResponse_FieldSubPathValue) AsErrorPathValue() (Error_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(Error_FieldPathValue)
	return res, ok
}

func (fpvs *AcceptResponse_FieldSubPathValue) SetTo(target **AcceptResponse) {
	if *target == nil {
		*target = new(AcceptResponse)
	}
	switch fpvs.Selector() {
	case AcceptResponse_FieldPathSelectorData:
		if _, ok := (*target).Message.(*AcceptResponse_Data); !ok {
			(*target).Message = &AcceptResponse_Data{}
		}
		fpvs.subPathValue.(Data_FieldPathValue).SetTo(&(*target).Message.(*AcceptResponse_Data).Data)
	case AcceptResponse_FieldPathSelectorAck:
		if _, ok := (*target).Message.(*AcceptResponse_Ack); !ok {
			(*target).Message = &AcceptResponse_Ack{}
		}
		fpvs.subPathValue.(Ack_FieldPathValue).SetTo(&(*target).Message.(*AcceptResponse_Ack).Ack)
	case AcceptResponse_FieldPathSelectorClose:
		if _, ok := (*target).Message.(*AcceptResponse_Close); !ok {
			(*target).Message = &AcceptResponse_Close{}
		}
		fpvs.subPathValue.(Close_FieldPathValue).SetTo(&(*target).Message.(*AcceptResponse_Close).Close)
	case AcceptResponse_FieldPathSelectorError:
		if _, ok := (*target).Message.(*AcceptResponse_Error); !ok {
			(*target).Message = &AcceptResponse_Error{}
		}
		fpvs.subPathValue.(Error_FieldPathValue).SetTo(&(*target).Message.(*AcceptResponse_Error).Error)
	default:
		panic(fmt.Sprintf("Invalid selector for AcceptResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *AcceptResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*AcceptResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *AcceptResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *AcceptResponse_FieldSubPathValue) CompareWith(source *AcceptResponse) (int, bool) {
	switch fpvs.Selector() {
	case AcceptResponse_FieldPathSelectorData:
		return fpvs.subPathValue.(Data_FieldPathValue).CompareWith(source.GetData())
	case AcceptResponse_FieldPathSelectorAck:
		return fpvs.subPathValue.(Ack_FieldPathValue).CompareWith(source.GetAck())
	case AcceptResponse_FieldPathSelectorClose:
		return fpvs.subPathValue.(Close_FieldPathValue).CompareWith(source.GetClose())
	case AcceptResponse_FieldPathSelectorError:
		return fpvs.subPathValue.(Error_FieldPathValue).CompareWith(source.GetError())
	default:
		panic(fmt.Sprintf("Invalid selector for AcceptResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *AcceptResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*AcceptResponse))
}

// AcceptResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for AcceptResponse according to their type
// Present only for array (repeated) types.
type AcceptResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	AcceptResponse_FieldPath
	ContainsValue(*AcceptResponse) bool
}

// ParseAcceptResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseAcceptResponse_FieldPathArrayItemValue(pathStr, valueStr string) (AcceptResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseAcceptResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing AcceptResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(AcceptResponse_FieldPathArrayItemValue), nil
}

func MustParseAcceptResponse_FieldPathArrayItemValue(pathStr, valueStr string) AcceptResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseAcceptResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type AcceptResponse_FieldTerminalPathArrayItemValue struct {
	AcceptResponse_FieldTerminalPath
	value interface{}
}

var _ AcceptResponse_FieldPathArrayItemValue = (*AcceptResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object AcceptResponse as interface{}
func (fpaiv *AcceptResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *AcceptResponse_FieldTerminalPathArrayItemValue) GetSingle(source *AcceptResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *AcceptResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*AcceptResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'AcceptResponse'
func (fpaiv *AcceptResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *AcceptResponse) bool {
	slice := fpaiv.AcceptResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type AcceptResponse_FieldSubPathArrayItemValue struct {
	AcceptResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *AcceptResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *AcceptResponse_FieldSubPathArrayItemValue) AsDataPathItemValue() (Data_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(Data_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *AcceptResponse_FieldSubPathArrayItemValue) AsAckPathItemValue() (Ack_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(Ack_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *AcceptResponse_FieldSubPathArrayItemValue) AsClosePathItemValue() (Close_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(Close_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *AcceptResponse_FieldSubPathArrayItemValue) AsErrorPathItemValue() (Error_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(Error_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'AcceptResponse'
func (fpaivs *AcceptResponse_FieldSubPathArrayItemValue) ContainsValue(source *AcceptResponse) bool {
	switch fpaivs.Selector() {
	case AcceptResponse_FieldPathSelectorData:
		return fpaivs.subPathItemValue.(Data_FieldPathArrayItemValue).ContainsValue(source.GetData())
	case AcceptResponse_FieldPathSelectorAck:
		return fpaivs.subPathItemValue.(Ack_FieldPathArrayItemValue).ContainsValue(source.GetAck())
	case AcceptResponse_FieldPathSelectorClose:
		return fpaivs.subPathItemValue.(Close_FieldPathArrayItemValue).ContainsValue(source.GetClose())
	case AcceptResponse_FieldPathSelectorError:
		return fpaivs.subPathItemValue.(Error_FieldPathArrayItemValue).ContainsValue(source.GetError())
	default:
		panic(fmt.Sprintf("Invalid selector for AcceptResponse: %d", fpaivs.Selector()))
	}
}

// AcceptResponse_FieldPathArrayOfValues allows storing slice of values for AcceptResponse fields according to their type
type AcceptResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	AcceptResponse_FieldPath
}

func ParseAcceptResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (AcceptResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseAcceptResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing AcceptResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(AcceptResponse_FieldPathArrayOfValues), nil
}

func MustParseAcceptResponse_FieldPathArrayOfValues(pathStr, valuesStr string) AcceptResponse_FieldPathArrayOfValues {
	fpaov, err := ParseAcceptResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type AcceptResponse_FieldTerminalPathArrayOfValues struct {
	AcceptResponse_FieldTerminalPath
	values interface{}
}

var _ AcceptResponse_FieldPathArrayOfValues = (*AcceptResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *AcceptResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case AcceptResponse_FieldPathSelectorData:
		for _, v := range fpaov.values.([]*Data) {
			values = append(values, v)
		}
	case AcceptResponse_FieldPathSelectorAck:
		for _, v := range fpaov.values.([]*Ack) {
			values = append(values, v)
		}
	case AcceptResponse_FieldPathSelectorClose:
		for _, v := range fpaov.values.([]*Close) {
			values = append(values, v)
		}
	case AcceptResponse_FieldPathSelectorError:
		for _, v := range fpaov.values.([]*Error) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *AcceptResponse_FieldTerminalPathArrayOfValues) AsDataArrayOfValues() ([]*Data, bool) {
	res, ok := fpaov.values.([]*Data)
	return res, ok
}
func (fpaov *AcceptResponse_FieldTerminalPathArrayOfValues) AsAckArrayOfValues() ([]*Ack, bool) {
	res, ok := fpaov.values.([]*Ack)
	return res, ok
}
func (fpaov *AcceptResponse_FieldTerminalPathArrayOfValues) AsCloseArrayOfValues() ([]*Close, bool) {
	res, ok := fpaov.values.([]*Close)
	return res, ok
}
func (fpaov *AcceptResponse_FieldTerminalPathArrayOfValues) AsErrorArrayOfValues() ([]*Error, bool) {
	res, ok := fpaov.values.([]*Error)
	return res, ok
}

type AcceptResponse_FieldSubPathArrayOfValues struct {
	AcceptResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ AcceptResponse_FieldPathArrayOfValues = (*AcceptResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *AcceptResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *AcceptResponse_FieldSubPathArrayOfValues) AsDataPathArrayOfValues() (Data_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(Data_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *AcceptResponse_FieldSubPathArrayOfValues) AsAckPathArrayOfValues() (Ack_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(Ack_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *AcceptResponse_FieldSubPathArrayOfValues) AsClosePathArrayOfValues() (Close_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(Close_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *AcceptResponse_FieldSubPathArrayOfValues) AsErrorPathArrayOfValues() (Error_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(Error_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type Ping_FieldPath interface {
	gotenobject.FieldPath
	Selector() Ping_FieldPathSelector
	Get(source *Ping) []interface{}
	GetSingle(source *Ping) (interface{}, bool)
	ClearValue(item *Ping)

	// Those methods build corresponding Ping_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) Ping_FieldPathValue
	WithIArrayOfValues(values interface{}) Ping_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) Ping_FieldPathArrayItemValue
}

type Ping_FieldPathSelector int32

func (s Ping_FieldPathSelector) String() string {
	switch s {
	default:
		panic(fmt.Sprintf("Invalid selector for Ping: %d", s))
	}
}

func BuildPing_FieldPath(fp gotenobject.RawFieldPath) (Ping_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Ping")
	}
	if len(fp) == 1 {
		switch fp[0] {
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Ping", fp)
}

func ParsePing_FieldPath(rawField string) (Ping_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildPing_FieldPath(fp)
}

func MustParsePing_FieldPath(rawField string) Ping_FieldPath {
	fp, err := ParsePing_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type Ping_FieldTerminalPath struct {
	selector Ping_FieldPathSelector
}

var _ Ping_FieldPath = (*Ping_FieldTerminalPath)(nil)

func (fp *Ping_FieldTerminalPath) Selector() Ping_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *Ping_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *Ping_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Ping
func (fp *Ping_FieldTerminalPath) Get(source *Ping) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		default:
			panic(fmt.Sprintf("Invalid selector for Ping: %d", fp.selector))
		}
	}
	return
}

func (fp *Ping_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Ping))
}

// GetSingle returns value pointed by specific field of from source Ping
func (fp *Ping_FieldTerminalPath) GetSingle(source *Ping) (interface{}, bool) {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Ping: %d", fp.selector))
	}
}

func (fp *Ping_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Ping))
}

// GetDefault returns a default value of the field type
func (fp *Ping_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Ping: %d", fp.selector))
	}
}

func (fp *Ping_FieldTerminalPath) ClearValue(item *Ping) {
	if item != nil {
		switch fp.selector {
		default:
			panic(fmt.Sprintf("Invalid selector for Ping: %d", fp.selector))
		}
	}
}

func (fp *Ping_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Ping))
}

// IsLeaf - whether field path is holds simple value
func (fp *Ping_FieldTerminalPath) IsLeaf() bool {
	return false
}

func (fp *Ping_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *Ping_FieldTerminalPath) WithIValue(value interface{}) Ping_FieldPathValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Ping: %d", fp.selector))
	}
}

func (fp *Ping_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *Ping_FieldTerminalPath) WithIArrayOfValues(values interface{}) Ping_FieldPathArrayOfValues {
	fpaov := &Ping_FieldTerminalPathArrayOfValues{Ping_FieldTerminalPath: *fp}
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Ping: %d", fp.selector))
	}
	return fpaov
}

func (fp *Ping_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *Ping_FieldTerminalPath) WithIArrayItemValue(value interface{}) Ping_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Ping: %d", fp.selector))
	}
}

func (fp *Ping_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// Ping_FieldPathValue allows storing values for Ping fields according to their type
type Ping_FieldPathValue interface {
	Ping_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Ping)
	CompareWith(*Ping) (cmp int, comparable bool)
}

func ParsePing_FieldPathValue(pathStr, valueStr string) (Ping_FieldPathValue, error) {
	fp, err := ParsePing_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Ping field path value from %s: %v", valueStr, err)
	}
	return fpv.(Ping_FieldPathValue), nil
}

func MustParsePing_FieldPathValue(pathStr, valueStr string) Ping_FieldPathValue {
	fpv, err := ParsePing_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type Ping_FieldTerminalPathValue struct {
	Ping_FieldTerminalPath
	value interface{}
}

var _ Ping_FieldPathValue = (*Ping_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Ping' as interface{}
func (fpv *Ping_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}

// SetTo stores value for selected field for object Ping
func (fpv *Ping_FieldTerminalPathValue) SetTo(target **Ping) {
	if *target == nil {
		*target = new(Ping)
	}
	switch fpv.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Ping: %d", fpv.selector))
	}
}

func (fpv *Ping_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Ping)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'Ping_FieldTerminalPathValue' with the value under path in 'Ping'.
func (fpv *Ping_FieldTerminalPathValue) CompareWith(source *Ping) (int, bool) {
	switch fpv.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Ping: %d", fpv.selector))
	}
}

func (fpv *Ping_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Ping))
}

// Ping_FieldPathArrayItemValue allows storing single item in Path-specific values for Ping according to their type
// Present only for array (repeated) types.
type Ping_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	Ping_FieldPath
	ContainsValue(*Ping) bool
}

// ParsePing_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParsePing_FieldPathArrayItemValue(pathStr, valueStr string) (Ping_FieldPathArrayItemValue, error) {
	fp, err := ParsePing_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Ping field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(Ping_FieldPathArrayItemValue), nil
}

func MustParsePing_FieldPathArrayItemValue(pathStr, valueStr string) Ping_FieldPathArrayItemValue {
	fpaiv, err := ParsePing_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type Ping_FieldTerminalPathArrayItemValue struct {
	Ping_FieldTerminalPath
	value interface{}
}

var _ Ping_FieldPathArrayItemValue = (*Ping_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Ping as interface{}
func (fpaiv *Ping_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *Ping_FieldTerminalPathArrayItemValue) GetSingle(source *Ping) (interface{}, bool) {
	return nil, false
}

func (fpaiv *Ping_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Ping))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Ping'
func (fpaiv *Ping_FieldTerminalPathArrayItemValue) ContainsValue(source *Ping) bool {
	slice := fpaiv.Ping_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// Ping_FieldPathArrayOfValues allows storing slice of values for Ping fields according to their type
type Ping_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	Ping_FieldPath
}

func ParsePing_FieldPathArrayOfValues(pathStr, valuesStr string) (Ping_FieldPathArrayOfValues, error) {
	fp, err := ParsePing_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Ping field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(Ping_FieldPathArrayOfValues), nil
}

func MustParsePing_FieldPathArrayOfValues(pathStr, valuesStr string) Ping_FieldPathArrayOfValues {
	fpaov, err := ParsePing_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type Ping_FieldTerminalPathArrayOfValues struct {
	Ping_FieldTerminalPath
	values interface{}
}

var _ Ping_FieldPathArrayOfValues = (*Ping_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *Ping_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	}
	return
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type Data_FieldPath interface {
	gotenobject.FieldPath
	Selector() Data_FieldPathSelector
	Get(source *Data) []interface{}
	GetSingle(source *Data) (interface{}, bool)
	ClearValue(item *Data)

	// Those methods build corresponding Data_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) Data_FieldPathValue
	WithIArrayOfValues(values interface{}) Data_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) Data_FieldPathArrayItemValue
}

type Data_FieldPathSelector int32

const (
	Data_FieldPathSelectorId          Data_FieldPathSelector = 0
	Data_FieldPathSelectorBytes       Data_FieldPathSelector = 1
	Data_FieldPathSelectorAckRequired Data_FieldPathSelector = 2
)

func (s Data_FieldPathSelector) String() string {
	switch s {
	case Data_FieldPathSelectorId:
		return "id"
	case Data_FieldPathSelectorBytes:
		return "bytes"
	case Data_FieldPathSelectorAckRequired:
		return "ack_required"
	default:
		panic(fmt.Sprintf("Invalid selector for Data: %d", s))
	}
}

func BuildData_FieldPath(fp gotenobject.RawFieldPath) (Data_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Data")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "id":
			return &Data_FieldTerminalPath{selector: Data_FieldPathSelectorId}, nil
		case "bytes":
			return &Data_FieldTerminalPath{selector: Data_FieldPathSelectorBytes}, nil
		case "ack_required", "ackRequired", "ack-required":
			return &Data_FieldTerminalPath{selector: Data_FieldPathSelectorAckRequired}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Data", fp)
}

func ParseData_FieldPath(rawField string) (Data_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildData_FieldPath(fp)
}

func MustParseData_FieldPath(rawField string) Data_FieldPath {
	fp, err := ParseData_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type Data_FieldTerminalPath struct {
	selector Data_FieldPathSelector
}

var _ Data_FieldPath = (*Data_FieldTerminalPath)(nil)

func (fp *Data_FieldTerminalPath) Selector() Data_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *Data_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *Data_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Data
func (fp *Data_FieldTerminalPath) Get(source *Data) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case Data_FieldPathSelectorId:
			values = append(values, source.Id)
		case Data_FieldPathSelectorBytes:
			values = append(values, source.Bytes)
		case Data_FieldPathSelectorAckRequired:
			values = append(values, source.AckRequired)
		default:
			panic(fmt.Sprintf("Invalid selector for Data: %d", fp.selector))
		}
	}
	return
}

func (fp *Data_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Data))
}

// GetSingle returns value pointed by specific field of from source Data
func (fp *Data_FieldTerminalPath) GetSingle(source *Data) (interface{}, bool) {
	switch fp.selector {
	case Data_FieldPathSelectorId:
		return source.GetId(), source != nil
	case Data_FieldPathSelectorBytes:
		res := source.GetBytes()
		return res, res != nil
	case Data_FieldPathSelectorAckRequired:
		return source.GetAckRequired(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Data: %d", fp.selector))
	}
}

func (fp *Data_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Data))
}

// GetDefault returns a default value of the field type
func (fp *Data_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case Data_FieldPathSelectorId:
		return uint64(0)
	case Data_FieldPathSelectorBytes:
		return ([]byte)(nil)
	case Data_FieldPathSelectorAckRequired:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for Data: %d", fp.selector))
	}
}

func (fp *Data_FieldTerminalPath) ClearValue(item *Data) {
	if item != nil {
		switch fp.selector {
		case Data_FieldPathSelectorId:
			item.Id = uint64(0)
		case Data_FieldPathSelectorBytes:
			item.Bytes = nil
		case Data_FieldPathSelectorAckRequired:
			item.AckRequired = false
		default:
			panic(fmt.Sprintf("Invalid selector for Data: %d", fp.selector))
		}
	}
}

func (fp *Data_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Data))
}

// IsLeaf - whether field path is holds simple value
func (fp *Data_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == Data_FieldPathSelectorId ||
		fp.selector == Data_FieldPathSelectorBytes ||
		fp.selector == Data_FieldPathSelectorAckRequired
}

func (fp *Data_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *Data_FieldTerminalPath) WithIValue(value interface{}) Data_FieldPathValue {
	switch fp.selector {
	case Data_FieldPathSelectorId:
		return &Data_FieldTerminalPathValue{Data_FieldTerminalPath: *fp, value: value.(uint64)}
	case Data_FieldPathSelectorBytes:
		return &Data_FieldTerminalPathValue{Data_FieldTerminalPath: *fp, value: value.([]byte)}
	case Data_FieldPathSelectorAckRequired:
		return &Data_FieldTerminalPathValue{Data_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for Data: %d", fp.selector))
	}
}

func (fp *Data_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *Data_FieldTerminalPath) WithIArrayOfValues(values interface{}) Data_FieldPathArrayOfValues {
	fpaov := &Data_FieldTerminalPathArrayOfValues{Data_FieldTerminalPath: *fp}
	switch fp.selector {
	case Data_FieldPathSelectorId:
		return &Data_FieldTerminalPathArrayOfValues{Data_FieldTerminalPath: *fp, values: values.([]uint64)}
	case Data_FieldPathSelectorBytes:
		return &Data_FieldTerminalPathArrayOfValues{Data_FieldTerminalPath: *fp, values: values.([][]byte)}
	case Data_FieldPathSelectorAckRequired:
		return &Data_FieldTerminalPathArrayOfValues{Data_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for Data: %d", fp.selector))
	}
	return fpaov
}

func (fp *Data_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *Data_FieldTerminalPath) WithIArrayItemValue(value interface{}) Data_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Data: %d", fp.selector))
	}
}

func (fp *Data_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// Data_FieldPathValue allows storing values for Data fields according to their type
type Data_FieldPathValue interface {
	Data_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Data)
	CompareWith(*Data) (cmp int, comparable bool)
}

func ParseData_FieldPathValue(pathStr, valueStr string) (Data_FieldPathValue, error) {
	fp, err := ParseData_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Data field path value from %s: %v", valueStr, err)
	}
	return fpv.(Data_FieldPathValue), nil
}

func MustParseData_FieldPathValue(pathStr, valueStr string) Data_FieldPathValue {
	fpv, err := ParseData_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type Data_FieldTerminalPathValue struct {
	Data_FieldTerminalPath
	value interface{}
}

var _ Data_FieldPathValue = (*Data_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Data' as interface{}
func (fpv *Data_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *Data_FieldTerminalPathValue) AsIdValue() (uint64, bool) {
	res, ok := fpv.value.(uint64)
	return res, ok
}
func (fpv *Data_FieldTerminalPathValue) AsBytesValue() ([]byte, bool) {
	res, ok := fpv.value.([]byte)
	return res, ok
}
func (fpv *Data_FieldTerminalPathValue) AsAckRequiredValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object Data
func (fpv *Data_FieldTerminalPathValue) SetTo(target **Data) {
	if *target == nil {
		*target = new(Data)
	}
	switch fpv.selector {
	case Data_FieldPathSelectorId:
		(*target).Id = fpv.value.(uint64)
	case Data_FieldPathSelectorBytes:
		(*target).Bytes = fpv.value.([]byte)
	case Data_FieldPathSelectorAckRequired:
		(*target).AckRequired = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for Data: %d", fpv.selector))
	}
}

func (fpv *Data_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Data)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'Data_FieldTerminalPathValue' with the value under path in 'Data'.
func (fpv *Data_FieldTerminalPathValue) CompareWith(source *Data) (int, bool) {
	switch fpv.selector {
	case Data_FieldPathSelectorId:
		leftValue := fpv.value.(uint64)
		rightValue := source.GetId()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case Data_FieldPathSelectorBytes:
		return 0, false
	case Data_FieldPathSelectorAckRequired:
		leftValue := fpv.value.(bool)
		rightValue := source.GetAckRequired()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Data: %d", fpv.selector))
	}
}

func (fpv *Data_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Data))
}

// Data_FieldPathArrayItemValue allows storing single item in Path-specific values for Data according to their type
// Present only for array (repeated) types.
type Data_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	Data_FieldPath
	ContainsValue(*Data) bool
}

// ParseData_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseData_FieldPathArrayItemValue(pathStr, valueStr string) (Data_FieldPathArrayItemValue, error) {
	fp, err := ParseData_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Data field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(Data_FieldPathArrayItemValue), nil
}

func MustParseData_FieldPathArrayItemValue(pathStr, valueStr string) Data_FieldPathArrayItemValue {
	fpaiv, err := ParseData_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type Data_FieldTerminalPathArrayItemValue struct {
	Data_FieldTerminalPath
	value interface{}
}

var _ Data_FieldPathArrayItemValue = (*Data_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Data as interface{}
func (fpaiv *Data_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *Data_FieldTerminalPathArrayItemValue) GetSingle(source *Data) (interface{}, bool) {
	return nil, false
}

func (fpaiv *Data_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Data))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Data'
func (fpaiv *Data_FieldTerminalPathArrayItemValue) ContainsValue(source *Data) bool {
	slice := fpaiv.Data_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// Data_FieldPathArrayOfValues allows storing slice of values for Data fields according to their type
type Data_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	Data_FieldPath
}

func ParseData_FieldPathArrayOfValues(pathStr, valuesStr string) (Data_FieldPathArrayOfValues, error) {
	fp, err := ParseData_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Data field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(Data_FieldPathArrayOfValues), nil
}

func MustParseData_FieldPathArrayOfValues(pathStr, valuesStr string) Data_FieldPathArrayOfValues {
	fpaov, err := ParseData_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type Data_FieldTerminalPathArrayOfValues struct {
	Data_FieldTerminalPath
	values interface{}
}

var _ Data_FieldPathArrayOfValues = (*Data_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *Data_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case Data_FieldPathSelectorId:
		for _, v := range fpaov.values.([]uint64) {
			values = append(values, v)
		}
	case Data_FieldPathSelectorBytes:
		for _, v := range fpaov.values.([][]byte) {
			values = append(values, v)
		}
	case Data_FieldPathSelectorAckRequired:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *Data_FieldTerminalPathArrayOfValues) AsIdArrayOfValues() ([]uint64, bool) {
	res, ok := fpaov.values.([]uint64)
	return res, ok
}
func (fpaov *Data_FieldTerminalPathArrayOfValues) AsBytesArrayOfValues() ([][]byte, bool) {
	res, ok := fpaov.values.([][]byte)
	return res, ok
}
func (fpaov *Data_FieldTerminalPathArrayOfValues) AsAckRequiredArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type Ack_FieldPath interface {
	gotenobject.FieldPath
	Selector() Ack_FieldPathSelector
	Get(source *Ack) []interface{}
	GetSingle(source *Ack) (interface{}, bool)
	ClearValue(item *Ack)

	// Those methods build corresponding Ack_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) Ack_FieldPathValue
	WithIArrayOfValues(values interface{}) Ack_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) Ack_FieldPathArrayItemValue
}

type Ack_FieldPathSelector int32

const (
	Ack_FieldPathSelectorId Ack_FieldPathSelector = 0
)

func (s Ack_FieldPathSelector) String() string {
	switch s {
	case Ack_FieldPathSelectorId:
		return "id"
	default:
		panic(fmt.Sprintf("Invalid selector for Ack: %d", s))
	}
}

func BuildAck_FieldPath(fp gotenobject.RawFieldPath) (Ack_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Ack")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "id":
			return &Ack_FieldTerminalPath{selector: Ack_FieldPathSelectorId}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Ack", fp)
}

func ParseAck_FieldPath(rawField string) (Ack_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildAck_FieldPath(fp)
}

func MustParseAck_FieldPath(rawField string) Ack_FieldPath {
	fp, err := ParseAck_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type Ack_FieldTerminalPath struct {
	selector Ack_FieldPathSelector
}

var _ Ack_FieldPath = (*Ack_FieldTerminalPath)(nil)

func (fp *Ack_FieldTerminalPath) Selector() Ack_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *Ack_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *Ack_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Ack
func (fp *Ack_FieldTerminalPath) Get(source *Ack) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case Ack_FieldPathSelectorId:
			values = append(values, source.Id)
		default:
			panic(fmt.Sprintf("Invalid selector for Ack: %d", fp.selector))
		}
	}
	return
}

func (fp *Ack_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Ack))
}

// GetSingle returns value pointed by specific field of from source Ack
func (fp *Ack_FieldTerminalPath) GetSingle(source *Ack) (interface{}, bool) {
	switch fp.selector {
	case Ack_FieldPathSelectorId:
		return source.GetId(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Ack: %d", fp.selector))
	}
}

func (fp *Ack_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Ack))
}

// GetDefault returns a default value of the field type
func (fp *Ack_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case Ack_FieldPathSelectorId:
		return uint64(0)
	default:
		panic(fmt.Sprintf("Invalid selector for Ack: %d", fp.selector))
	}
}

func (fp *Ack_FieldTerminalPath) ClearValue(item *Ack) {
	if item != nil {
		switch fp.selector {
		case Ack_FieldPathSelectorId:
			item.Id = uint64(0)
		default:
			panic(fmt.Sprintf("Invalid selector for Ack: %d", fp.selector))
		}
	}
}

func (fp *Ack_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Ack))
}

// IsLeaf - whether field path is holds simple value
func (fp *Ack_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == Ack_FieldPathSelectorId
}

func (fp *Ack_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *Ack_FieldTerminalPath) WithIValue(value interface{}) Ack_FieldPathValue {
	switch fp.selector {
	case Ack_FieldPathSelectorId:
		return &Ack_FieldTerminalPathValue{Ack_FieldTerminalPath: *fp, value: value.(uint64)}
	default:
		panic(fmt.Sprintf("Invalid selector for Ack: %d", fp.selector))
	}
}

func (fp *Ack_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *Ack_FieldTerminalPath) WithIArrayOfValues(values interface{}) Ack_FieldPathArrayOfValues {
	fpaov := &Ack_FieldTerminalPathArrayOfValues{Ack_FieldTerminalPath: *fp}
	switch fp.selector {
	case Ack_FieldPathSelectorId:
		return &Ack_FieldTerminalPathArrayOfValues{Ack_FieldTerminalPath: *fp, values: values.([]uint64)}
	default:
		panic(fmt.Sprintf("Invalid selector for Ack: %d", fp.selector))
	}
	return fpaov
}

func (fp *Ack_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *Ack_FieldTerminalPath) WithIArrayItemValue(value interface{}) Ack_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Ack: %d", fp.selector))
	}
}

func (fp *Ack_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// Ack_FieldPathValue allows storing values for Ack fields according to their type
type Ack_FieldPathValue interface {
	Ack_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Ack)
	CompareWith(*Ack) (cmp int, comparable bool)
}

func ParseAck_FieldPathValue(pathStr, valueStr string) (Ack_FieldPathValue, error) {
	fp, err := ParseAck_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Ack field path value from %s: %v", valueStr, err)
	}
	return fpv.(Ack_FieldPathValue), nil
}

func MustParseAck_FieldPathValue(pathStr, valueStr string) Ack_FieldPathValue {
	fpv, err := ParseAck_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type Ack_FieldTerminalPathValue struct {
	Ack_FieldTerminalPath
	value interface{}
}

var _ Ack_FieldPathValue = (*Ack_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Ack' as interface{}
func (fpv *Ack_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *Ack_FieldTerminalPathValue) AsIdValue() (uint64, bool) {
	res, ok := fpv.value.(uint64)
	return res, ok
}

// SetTo stores value for selected field for object Ack
func (fpv *Ack_FieldTerminalPathValue) SetTo(target **Ack) {
	if *target == nil {
		*target = new(Ack)
	}
	switch fpv.selector {
	case Ack_FieldPathSelectorId:
		(*target).Id = fpv.value.(uint64)
	default:
		panic(fmt.Sprintf("Invalid selector for Ack: %d", fpv.selector))
	}
}

func (fpv *Ack_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Ack)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'Ack_FieldTerminalPathValue' with the value under path in 'Ack'.
func (fpv *Ack_FieldTerminalPathValue) CompareWith(source *Ack) (int, bool) {
	switch fpv.selector {
	case Ack_FieldPathSelectorId:
		leftValue := fpv.value.(uint64)
		rightValue := source.GetId()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Ack: %d", fpv.selector))
	}
}

func (fpv *Ack_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Ack))
}

// Ack_FieldPathArrayItemValue allows storing single item in Path-specific values for Ack according to their type
// Present only for array (repeated) types.
type Ack_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	Ack_FieldPath
	ContainsValue(*Ack) bool
}

// ParseAck_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseAck_FieldPathArrayItemValue(pathStr, valueStr string) (Ack_FieldPathArrayItemValue, error) {
	fp, err := ParseAck_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Ack field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(Ack_FieldPathArrayItemValue), nil
}

func MustParseAck_FieldPathArrayItemValue(pathStr, valueStr string) Ack_FieldPathArrayItemValue {
	fpaiv, err := ParseAck_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type Ack_FieldTerminalPathArrayItemValue struct {
	Ack_FieldTerminalPath
	value interface{}
}

var _ Ack_FieldPathArrayItemValue = (*Ack_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Ack as interface{}
func (fpaiv *Ack_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *Ack_FieldTerminalPathArrayItemValue) GetSingle(source *Ack) (interface{}, bool) {
	return nil, false
}

func (fpaiv *Ack_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Ack))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Ack'
func (fpaiv *Ack_FieldTerminalPathArrayItemValue) ContainsValue(source *Ack) bool {
	slice := fpaiv.Ack_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// Ack_FieldPathArrayOfValues allows storing slice of values for Ack fields according to their type
type Ack_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	Ack_FieldPath
}

func ParseAck_FieldPathArrayOfValues(pathStr, valuesStr string) (Ack_FieldPathArrayOfValues, error) {
	fp, err := ParseAck_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Ack field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(Ack_FieldPathArrayOfValues), nil
}

func MustParseAck_FieldPathArrayOfValues(pathStr, valuesStr string) Ack_FieldPathArrayOfValues {
	fpaov, err := ParseAck_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type Ack_FieldTerminalPathArrayOfValues struct {
	Ack_FieldTerminalPath
	values interface{}
}

var _ Ack_FieldPathArrayOfValues = (*Ack_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *Ack_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case Ack_FieldPathSelectorId:
		for _, v := range fpaov.values.([]uint64) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *Ack_FieldTerminalPathArrayOfValues) AsIdArrayOfValues() ([]uint64, bool) {
	res, ok := fpaov.values.([]uint64)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type Close_FieldPath interface {
	gotenobject.FieldPath
	Selector() Close_FieldPathSelector
	Get(source *Close) []interface{}
	GetSingle(source *Close) (interface{}, bool)
	ClearValue(item *Close)

	// Those methods build corresponding Close_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) Close_FieldPathValue
	WithIArrayOfValues(values interface{}) Close_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) Close_FieldPathArrayItemValue
}

type Close_FieldPathSelector int32

const (
	Close_FieldPathSelectorId Close_FieldPathSelector = 0
)

func (s Close_FieldPathSelector) String() string {
	switch s {
	case Close_FieldPathSelectorId:
		return "id"
	default:
		panic(fmt.Sprintf("Invalid selector for Close: %d", s))
	}
}

func BuildClose_FieldPath(fp gotenobject.RawFieldPath) (Close_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Close")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "id":
			return &Close_FieldTerminalPath{selector: Close_FieldPathSelectorId}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Close", fp)
}

func ParseClose_FieldPath(rawField string) (Close_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildClose_FieldPath(fp)
}

func MustParseClose_FieldPath(rawField string) Close_FieldPath {
	fp, err := ParseClose_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type Close_FieldTerminalPath struct {
	selector Close_FieldPathSelector
}

var _ Close_FieldPath = (*Close_FieldTerminalPath)(nil)

func (fp *Close_FieldTerminalPath) Selector() Close_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *Close_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *Close_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Close
func (fp *Close_FieldTerminalPath) Get(source *Close) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case Close_FieldPathSelectorId:
			values = append(values, source.Id)
		default:
			panic(fmt.Sprintf("Invalid selector for Close: %d", fp.selector))
		}
	}
	return
}

func (fp *Close_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Close))
}

// GetSingle returns value pointed by specific field of from source Close
func (fp *Close_FieldTerminalPath) GetSingle(source *Close) (interface{}, bool) {
	switch fp.selector {
	case Close_FieldPathSelectorId:
		return source.GetId(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Close: %d", fp.selector))
	}
}

func (fp *Close_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Close))
}

// GetDefault returns a default value of the field type
func (fp *Close_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case Close_FieldPathSelectorId:
		return uint64(0)
	default:
		panic(fmt.Sprintf("Invalid selector for Close: %d", fp.selector))
	}
}

func (fp *Close_FieldTerminalPath) ClearValue(item *Close) {
	if item != nil {
		switch fp.selector {
		case Close_FieldPathSelectorId:
			item.Id = uint64(0)
		default:
			panic(fmt.Sprintf("Invalid selector for Close: %d", fp.selector))
		}
	}
}

func (fp *Close_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Close))
}

// IsLeaf - whether field path is holds simple value
func (fp *Close_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == Close_FieldPathSelectorId
}

func (fp *Close_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *Close_FieldTerminalPath) WithIValue(value interface{}) Close_FieldPathValue {
	switch fp.selector {
	case Close_FieldPathSelectorId:
		return &Close_FieldTerminalPathValue{Close_FieldTerminalPath: *fp, value: value.(uint64)}
	default:
		panic(fmt.Sprintf("Invalid selector for Close: %d", fp.selector))
	}
}

func (fp *Close_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *Close_FieldTerminalPath) WithIArrayOfValues(values interface{}) Close_FieldPathArrayOfValues {
	fpaov := &Close_FieldTerminalPathArrayOfValues{Close_FieldTerminalPath: *fp}
	switch fp.selector {
	case Close_FieldPathSelectorId:
		return &Close_FieldTerminalPathArrayOfValues{Close_FieldTerminalPath: *fp, values: values.([]uint64)}
	default:
		panic(fmt.Sprintf("Invalid selector for Close: %d", fp.selector))
	}
	return fpaov
}

func (fp *Close_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *Close_FieldTerminalPath) WithIArrayItemValue(value interface{}) Close_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Close: %d", fp.selector))
	}
}

func (fp *Close_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// Close_FieldPathValue allows storing values for Close fields according to their type
type Close_FieldPathValue interface {
	Close_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Close)
	CompareWith(*Close) (cmp int, comparable bool)
}

func ParseClose_FieldPathValue(pathStr, valueStr string) (Close_FieldPathValue, error) {
	fp, err := ParseClose_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Close field path value from %s: %v", valueStr, err)
	}
	return fpv.(Close_FieldPathValue), nil
}

func MustParseClose_FieldPathValue(pathStr, valueStr string) Close_FieldPathValue {
	fpv, err := ParseClose_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type Close_FieldTerminalPathValue struct {
	Close_FieldTerminalPath
	value interface{}
}

var _ Close_FieldPathValue = (*Close_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Close' as interface{}
func (fpv *Close_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *Close_FieldTerminalPathValue) AsIdValue() (uint64, bool) {
	res, ok := fpv.value.(uint64)
	return res, ok
}

// SetTo stores value for selected field for object Close
func (fpv *Close_FieldTerminalPathValue) SetTo(target **Close) {
	if *target == nil {
		*target = new(Close)
	}
	switch fpv.selector {
	case Close_FieldPathSelectorId:
		(*target).Id = fpv.value.(uint64)
	default:
		panic(fmt.Sprintf("Invalid selector for Close: %d", fpv.selector))
	}
}

func (fpv *Close_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Close)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'Close_FieldTerminalPathValue' with the value under path in 'Close'.
func (fpv *Close_FieldTerminalPathValue) CompareWith(source *Close) (int, bool) {
	switch fpv.selector {
	case Close_FieldPathSelectorId:
		leftValue := fpv.value.(uint64)
		rightValue := source.GetId()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Close: %d", fpv.selector))
	}
}

func (fpv *Close_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Close))
}

// Close_FieldPathArrayItemValue allows storing single item in Path-specific values for Close according to their type
// Present only for array (repeated) types.
type Close_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	Close_FieldPath
	ContainsValue(*Close) bool
}

// ParseClose_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseClose_FieldPathArrayItemValue(pathStr, valueStr string) (Close_FieldPathArrayItemValue, error) {
	fp, err := ParseClose_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Close field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(Close_FieldPathArrayItemValue), nil
}

func MustParseClose_FieldPathArrayItemValue(pathStr, valueStr string) Close_FieldPathArrayItemValue {
	fpaiv, err := ParseClose_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type Close_FieldTerminalPathArrayItemValue struct {
	Close_FieldTerminalPath
	value interface{}
}

var _ Close_FieldPathArrayItemValue = (*Close_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Close as interface{}
func (fpaiv *Close_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *Close_FieldTerminalPathArrayItemValue) GetSingle(source *Close) (interface{}, bool) {
	return nil, false
}

func (fpaiv *Close_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Close))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Close'
func (fpaiv *Close_FieldTerminalPathArrayItemValue) ContainsValue(source *Close) bool {
	slice := fpaiv.Close_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// Close_FieldPathArrayOfValues allows storing slice of values for Close fields according to their type
type Close_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	Close_FieldPath
}

func ParseClose_FieldPathArrayOfValues(pathStr, valuesStr string) (Close_FieldPathArrayOfValues, error) {
	fp, err := ParseClose_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Close field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(Close_FieldPathArrayOfValues), nil
}

func MustParseClose_FieldPathArrayOfValues(pathStr, valuesStr string) Close_FieldPathArrayOfValues {
	fpaov, err := ParseClose_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type Close_FieldTerminalPathArrayOfValues struct {
	Close_FieldTerminalPath
	values interface{}
}

var _ Close_FieldPathArrayOfValues = (*Close_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *Close_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case Close_FieldPathSelectorId:
		for _, v := range fpaov.values.([]uint64) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *Close_FieldTerminalPathArrayOfValues) AsIdArrayOfValues() ([]uint64, bool) {
	res, ok := fpaov.values.([]uint64)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type Error_FieldPath interface {
	gotenobject.FieldPath
	Selector() Error_FieldPathSelector
	Get(source *Error) []interface{}
	GetSingle(source *Error) (interface{}, bool)
	ClearValue(item *Error)

	// Those methods build corresponding Error_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) Error_FieldPathValue
	WithIArrayOfValues(values interface{}) Error_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) Error_FieldPathArrayItemValue
}

type Error_FieldPathSelector int32

const (
	Error_FieldPathSelectorId      Error_FieldPathSelector = 0
	Error_FieldPathSelectorMessage Error_FieldPathSelector = 1
)

func (s Error_FieldPathSelector) String() string {
	switch s {
	case Error_FieldPathSelectorId:
		return "id"
	case Error_FieldPathSelectorMessage:
		return "message"
	default:
		panic(fmt.Sprintf("Invalid selector for Error: %d", s))
	}
}

func BuildError_FieldPath(fp gotenobject.RawFieldPath) (Error_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Error")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "id":
			return &Error_FieldTerminalPath{selector: Error_FieldPathSelectorId}, nil
		case "message":
			return &Error_FieldTerminalPath{selector: Error_FieldPathSelectorMessage}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Error", fp)
}

func ParseError_FieldPath(rawField string) (Error_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildError_FieldPath(fp)
}

func MustParseError_FieldPath(rawField string) Error_FieldPath {
	fp, err := ParseError_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type Error_FieldTerminalPath struct {
	selector Error_FieldPathSelector
}

var _ Error_FieldPath = (*Error_FieldTerminalPath)(nil)

func (fp *Error_FieldTerminalPath) Selector() Error_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *Error_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *Error_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Error
func (fp *Error_FieldTerminalPath) Get(source *Error) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case Error_FieldPathSelectorId:
			values = append(values, source.Id)
		case Error_FieldPathSelectorMessage:
			values = append(values, source.Message)
		default:
			panic(fmt.Sprintf("Invalid selector for Error: %d", fp.selector))
		}
	}
	return
}

func (fp *Error_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Error))
}

// GetSingle returns value pointed by specific field of from source Error
func (fp *Error_FieldTerminalPath) GetSingle(source *Error) (interface{}, bool) {
	switch fp.selector {
	case Error_FieldPathSelectorId:
		return source.GetId(), source != nil
	case Error_FieldPathSelectorMessage:
		return source.GetMessage(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Error: %d", fp.selector))
	}
}

func (fp *Error_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Error))
}

// GetDefault returns a default value of the field type
func (fp *Error_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case Error_FieldPathSelectorId:
		return uint64(0)
	case Error_FieldPathSelectorMessage:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for Error: %d", fp.selector))
	}
}

func (fp *Error_FieldTerminalPath) ClearValue(item *Error) {
	if item != nil {
		switch fp.selector {
		case Error_FieldPathSelectorId:
			item.Id = uint64(0)
		case Error_FieldPathSelectorMessage:
			item.Message = ""
		default:
			panic(fmt.Sprintf("Invalid selector for Error: %d", fp.selector))
		}
	}
}

func (fp *Error_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Error))
}

// IsLeaf - whether field path is holds simple value
func (fp *Error_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == Error_FieldPathSelectorId ||
		fp.selector == Error_FieldPathSelectorMessage
}

func (fp *Error_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *Error_FieldTerminalPath) WithIValue(value interface{}) Error_FieldPathValue {
	switch fp.selector {
	case Error_FieldPathSelectorId:
		return &Error_FieldTerminalPathValue{Error_FieldTerminalPath: *fp, value: value.(uint64)}
	case Error_FieldPathSelectorMessage:
		return &Error_FieldTerminalPathValue{Error_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Error: %d", fp.selector))
	}
}

func (fp *Error_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *Error_FieldTerminalPath) WithIArrayOfValues(values interface{}) Error_FieldPathArrayOfValues {
	fpaov := &Error_FieldTerminalPathArrayOfValues{Error_FieldTerminalPath: *fp}
	switch fp.selector {
	case Error_FieldPathSelectorId:
		return &Error_FieldTerminalPathArrayOfValues{Error_FieldTerminalPath: *fp, values: values.([]uint64)}
	case Error_FieldPathSelectorMessage:
		return &Error_FieldTerminalPathArrayOfValues{Error_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Error: %d", fp.selector))
	}
	return fpaov
}

func (fp *Error_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *Error_FieldTerminalPath) WithIArrayItemValue(value interface{}) Error_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Error: %d", fp.selector))
	}
}

func (fp *Error_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// Error_FieldPathValue allows storing values for Error fields according to their type
type Error_FieldPathValue interface {
	Error_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Error)
	CompareWith(*Error) (cmp int, comparable bool)
}

func ParseError_FieldPathValue(pathStr, valueStr string) (Error_FieldPathValue, error) {
	fp, err := ParseError_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Error field path value from %s: %v", valueStr, err)
	}
	return fpv.(Error_FieldPathValue), nil
}

func MustParseError_FieldPathValue(pathStr, valueStr string) Error_FieldPathValue {
	fpv, err := ParseError_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type Error_FieldTerminalPathValue struct {
	Error_FieldTerminalPath
	value interface{}
}

var _ Error_FieldPathValue = (*Error_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Error' as interface{}
func (fpv *Error_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *Error_FieldTerminalPathValue) AsIdValue() (uint64, bool) {
	res, ok := fpv.value.(uint64)
	return res, ok
}
func (fpv *Error_FieldTerminalPathValue) AsMessageValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object Error
func (fpv *Error_FieldTerminalPathValue) SetTo(target **Error) {
	if *target == nil {
		*target = new(Error)
	}
	switch fpv.selector {
	case Error_FieldPathSelectorId:
		(*target).Id = fpv.value.(uint64)
	case Error_FieldPathSelectorMessage:
		(*target).Message = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for Error: %d", fpv.selector))
	}
}

func (fpv *Error_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Error)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'Error_FieldTerminalPathValue' with the value under path in 'Error'.
func (fpv *Error_FieldTerminalPathValue) CompareWith(source *Error) (int, bool) {
	switch fpv.selector {
	case Error_FieldPathSelectorId:
		leftValue := fpv.value.(uint64)
		rightValue := source.GetId()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case Error_FieldPathSelectorMessage:
		leftValue := fpv.value.(string)
		rightValue := source.GetMessage()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Error: %d", fpv.selector))
	}
}

func (fpv *Error_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Error))
}

// Error_FieldPathArrayItemValue allows storing single item in Path-specific values for Error according to their type
// Present only for array (repeated) types.
type Error_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	Error_FieldPath
	ContainsValue(*Error) bool
}

// ParseError_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseError_FieldPathArrayItemValue(pathStr, valueStr string) (Error_FieldPathArrayItemValue, error) {
	fp, err := ParseError_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Error field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(Error_FieldPathArrayItemValue), nil
}

func MustParseError_FieldPathArrayItemValue(pathStr, valueStr string) Error_FieldPathArrayItemValue {
	fpaiv, err := ParseError_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type Error_FieldTerminalPathArrayItemValue struct {
	Error_FieldTerminalPath
	value interface{}
}

var _ Error_FieldPathArrayItemValue = (*Error_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Error as interface{}
func (fpaiv *Error_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *Error_FieldTerminalPathArrayItemValue) GetSingle(source *Error) (interface{}, bool) {
	return nil, false
}

func (fpaiv *Error_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Error))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Error'
func (fpaiv *Error_FieldTerminalPathArrayItemValue) ContainsValue(source *Error) bool {
	slice := fpaiv.Error_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// Error_FieldPathArrayOfValues allows storing slice of values for Error fields according to their type
type Error_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	Error_FieldPath
}

func ParseError_FieldPathArrayOfValues(pathStr, valuesStr string) (Error_FieldPathArrayOfValues, error) {
	fp, err := ParseError_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Error field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(Error_FieldPathArrayOfValues), nil
}

func MustParseError_FieldPathArrayOfValues(pathStr, valuesStr string) Error_FieldPathArrayOfValues {
	fpaov, err := ParseError_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type Error_FieldTerminalPathArrayOfValues struct {
	Error_FieldTerminalPath
	values interface{}
}

var _ Error_FieldPathArrayOfValues = (*Error_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *Error_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case Error_FieldPathSelectorId:
		for _, v := range fpaov.values.([]uint64) {
			values = append(values, v)
		}
	case Error_FieldPathSelectorMessage:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *Error_FieldTerminalPathArrayOfValues) AsIdArrayOfValues() ([]uint64, bool) {
	res, ok := fpaov.values.([]uint64)
	return res, ok
}
func (fpaov *Error_FieldTerminalPathArrayOfValues) AsMessageArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
