// Code generated by protoc-gen-goten-resource
// Resource: TsConditionTemplate
// DO NOT EDIT!!!

package ts_condition_template

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
	gotenfilter "github.com/cloudwan/goten-sdk/runtime/resource/filter"
)

// proto imports
import (
	rcommon "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/common"
	document "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/document"
	notification_channel "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/notification_channel"
	policy_template "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/policy_template"
	api "github.com/cloudwan/edgelq-sdk/common/api"
	iam_iam_common "github.com/cloudwan/edgelq-sdk/iam/resources/v1/common"
	iam_organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1/organization"
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1/project"
	logging_bucket "github.com/cloudwan/edgelq-sdk/logging/resources/v1/bucket"
	logging_common "github.com/cloudwan/edgelq-sdk/logging/resources/v1/common"
	logging_log "github.com/cloudwan/edgelq-sdk/logging/resources/v1/log"
	logging_log_descriptor "github.com/cloudwan/edgelq-sdk/logging/resources/v1/log_descriptor"
	monitoring_common "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/common"
	monitoring_metric_descriptor "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/metric_descriptor"
	monitoring_monitored_resource_descriptor "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/monitored_resource_descriptor"
	monitoring_project "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/project"
	monitoring_time_serie "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/time_serie"
	meta_common "github.com/cloudwan/goten-sdk/meta-service/resources/v1/common"
	meta_resource "github.com/cloudwan/goten-sdk/meta-service/resources/v1/resource"
	meta_service "github.com/cloudwan/goten-sdk/meta-service/resources/v1/service"
	meta "github.com/cloudwan/goten-sdk/types/meta"
	multi_region_policy "github.com/cloudwan/goten-sdk/types/multi_region_policy"
	anypb "google.golang.org/protobuf/types/known/anypb"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// ensure the imports are used
var (
	_ = gotenresource.ConditionContainsTypeAll
	_ = gotenfilter.AND
)

// make sure we're using proto imports
var (
	_ = &document.Document{}
	_ = &notification_channel.NotificationChannel{}
	_ = &policy_template.PolicyTemplate{}
	_ = &rcommon.LogCndSpec{}
	_ = api.LaunchStage(0)
	_ = &iam_iam_common.PCR{}
	_ = &iam_organization.Organization{}
	_ = &iam_project.Project{}
	_ = &logging_bucket.Bucket{}
	_ = &logging_common.LabelDescriptor{}
	_ = &logging_log.Log{}
	_ = &logging_log_descriptor.LogDescriptor{}
	_ = &monitoring_common.LabelDescriptor{}
	_ = &monitoring_metric_descriptor.MetricDescriptor{}
	_ = &monitoring_monitored_resource_descriptor.MonitoredResourceDescriptor{}
	_ = &monitoring_project.Project{}
	_ = &monitoring_time_serie.Point{}
	_ = &anypb.Any{}
	_ = &durationpb.Duration{}
	_ = &fieldmaskpb.FieldMask{}
	_ = &structpb.Struct{}
	_ = &timestamppb.Timestamp{}
	_ = &meta_common.LabelledDomain{}
	_ = &meta_resource.Resource{}
	_ = &meta_service.Service{}
	_ = &meta.Meta{}
	_ = &multi_region_policy.MultiRegionPolicy{}
)

type FilterBuilderOrCondition interface {
	_IsTsConditionTemplateFilterBuilderOrCondition()
}

type FilterBuilder struct {
	conds  []FilterCondition
	useNot bool
	op     gotenfilter.CompositeOperator
}

func NewFilterBuilder() *FilterBuilder {
	return NewAndFilterBuilder()
}

func NewAndFilterBuilder() *FilterBuilder {
	return &FilterBuilder{
		op: gotenfilter.AND,
	}
}

func NewOrFilterBuilder() *FilterBuilder {
	return &FilterBuilder{
		op: gotenfilter.OR,
	}
}

func (b *FilterBuilder) _IsTsConditionTemplateFilterBuilderOrCondition() {}

func (b *FilterBuilder) With(condOrBuilder FilterBuilderOrCondition, opts ...gotenfilter.FilterConditionOption) *FilterBuilder {
	var cond FilterCondition
	switch typedObj := condOrBuilder.(type) {
	case *Filter:
		cond = typedObj.GetCondition()
	case *FilterBuilder:
		cond = &FilterConditionComposite{Operator: typedObj.op, Conditions: typedObj.conds}
	case FilterCondition:
		cond = typedObj
	default:
		panic("Unknown condition or builder type")
	}
	cfg := gotenfilter.MakeFilterCondOptions(opts)
	if cfg.IsNot() {
		cond = &FilterConditionNot{cond}
	}
	b.conds = append(b.conds, cond)
	return b
}

func (b *FilterBuilder) Where(opts ...gotenfilter.FilterConditionOption) *filterCndBuilder {
	cfg := gotenfilter.MakeFilterCondOptions(opts)
	b.useNot = cfg.IsNot()
	return &filterCndBuilder{builder: b}
}

func (b *FilterBuilder) WherePath(fp TsConditionTemplate_FieldPath, opts ...gotenfilter.FilterConditionOption) *filterCndBuilderAnyPath {
	cfg := gotenfilter.MakeFilterCondOptions(opts)
	b.useNot = cfg.IsNot()
	return &filterCndBuilderAnyPath{builder: b, fp: fp}
}

func (b *FilterBuilder) Filter() *Filter {
	return &Filter{
		FilterCondition: &FilterConditionComposite{Operator: b.op, Conditions: b.conds},
	}
}

func (b *FilterBuilder) addCond(cond FilterCondition) *FilterBuilder {
	if b.useNot {
		cond = &FilterConditionNot{cond}
		b.useNot = false
	}
	b.conds = append(b.conds, cond)
	return b
}

type filterCndBuilderAnyPath struct {
	builder *FilterBuilder
	fp      TsConditionTemplate_FieldPath
}

func (b *filterCndBuilderAnyPath) Eq(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderAnyPath) Neq(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderAnyPath) Gt(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderAnyPath) Gte(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderAnyPath) Lt(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderAnyPath) Lte(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderAnyPath) In(values interface{}) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsConditionTemplate_FieldPathArrayOfValues: b.fp.WithIArrayOfValues(values),
	})
}

func (b *filterCndBuilderAnyPath) NotIn(values interface{}) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsConditionTemplate_FieldPathArrayOfValues: b.fp.WithIArrayOfValues(values),
	})
}

func (b *filterCndBuilderAnyPath) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: b.fp,
	})
}

func (b *filterCndBuilderAnyPath) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: b.fp,
	})
}

func (b *filterCndBuilderAnyPath) Contains(value interface{}) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: b.fp,
		Value:     b.fp.WithIArrayItemValue(value),
	})
}

func (b *filterCndBuilderAnyPath) ContainsAnyOf(values []interface{}) *FilterBuilder {
	itemValues := make([]TsConditionTemplate_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, b.fp.WithIArrayItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: b.fp,
		Values:    itemValues,
	})
}

func (b *filterCndBuilderAnyPath) ContainsAll(values []interface{}) *FilterBuilder {
	itemValues := make([]TsConditionTemplate_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, b.fp.WithIArrayItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: b.fp,
		Values:    itemValues,
	})
}

func (b *filterCndBuilderAnyPath) compare(op gotenfilter.CompareOperator, value interface{}) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		TsConditionTemplate_FieldPathValue: b.fp.WithIValue(value),
	})
}

type filterCndBuilder struct {
	builder *FilterBuilder
}

func (b *filterCndBuilder) Name() *filterCndBuilderName {
	return &filterCndBuilderName{builder: b.builder}
}

func (b *filterCndBuilder) Metadata() *filterCndBuilderMetadata {
	return &filterCndBuilderMetadata{builder: b.builder}
}

func (b *filterCndBuilder) DisplayName() *filterCndBuilderDisplayName {
	return &filterCndBuilderDisplayName{builder: b.builder}
}

func (b *filterCndBuilder) Description() *filterCndBuilderDescription {
	return &filterCndBuilderDescription{builder: b.builder}
}

func (b *filterCndBuilder) SupportingDocs() *filterCndBuilderSupportingDocs {
	return &filterCndBuilderSupportingDocs{builder: b.builder}
}

func (b *filterCndBuilder) SpecTemplate() *filterCndBuilderSpecTemplate {
	return &filterCndBuilderSpecTemplate{builder: b.builder}
}

type filterCndBuilderName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderName) Eq(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderName) Neq(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderName) Gt(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderName) Gte(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderName) Lt(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderName) Lte(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderName) In(values []*Name) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderName) NotIn(values []*Name) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().Name().FieldPath(),
	})
}

func (b *filterCndBuilderName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().Name().FieldPath(),
	})
}

func (b *filterCndBuilderName) compare(op gotenfilter.CompareOperator, value *Name) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		TsConditionTemplate_FieldPathValue: NewTsConditionTemplateFieldPathBuilder().Name().WithValue(value),
	})
}

type filterCndBuilderMetadata struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadata) Eq(value *meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadata) Neq(value *meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadata) Gt(value *meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadata) Gte(value *meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadata) Lt(value *meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadata) Lte(value *meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadata) In(values []*meta.Meta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().Metadata().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadata) NotIn(values []*meta.Meta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().Metadata().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadata) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().Metadata().FieldPath(),
	})
}

func (b *filterCndBuilderMetadata) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().Metadata().FieldPath(),
	})
}

func (b *filterCndBuilderMetadata) compare(op gotenfilter.CompareOperator, value *meta.Meta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		TsConditionTemplate_FieldPathValue: NewTsConditionTemplateFieldPathBuilder().Metadata().WithValue(value),
	})
}

func (b *filterCndBuilderMetadata) CreateTime() *filterCndBuilderMetadataCreateTime {
	return &filterCndBuilderMetadataCreateTime{builder: b.builder}
}

func (b *filterCndBuilderMetadata) UpdateTime() *filterCndBuilderMetadataUpdateTime {
	return &filterCndBuilderMetadataUpdateTime{builder: b.builder}
}

func (b *filterCndBuilderMetadata) DeleteTime() *filterCndBuilderMetadataDeleteTime {
	return &filterCndBuilderMetadataDeleteTime{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Uuid() *filterCndBuilderMetadataUuid {
	return &filterCndBuilderMetadataUuid{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Tags() *filterCndBuilderMetadataTags {
	return &filterCndBuilderMetadataTags{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Labels() *filterCndBuilderMetadataLabels {
	return &filterCndBuilderMetadataLabels{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Annotations() *filterCndBuilderMetadataAnnotations {
	return &filterCndBuilderMetadataAnnotations{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Generation() *filterCndBuilderMetadataGeneration {
	return &filterCndBuilderMetadataGeneration{builder: b.builder}
}

func (b *filterCndBuilderMetadata) ResourceVersion() *filterCndBuilderMetadataResourceVersion {
	return &filterCndBuilderMetadataResourceVersion{builder: b.builder}
}

func (b *filterCndBuilderMetadata) OwnerReferences() *filterCndBuilderMetadataOwnerReferences {
	return &filterCndBuilderMetadataOwnerReferences{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Shards() *filterCndBuilderMetadataShards {
	return &filterCndBuilderMetadataShards{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Syncing() *filterCndBuilderMetadataSyncing {
	return &filterCndBuilderMetadataSyncing{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Lifecycle() *filterCndBuilderMetadataLifecycle {
	return &filterCndBuilderMetadataLifecycle{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Services() *filterCndBuilderMetadataServices {
	return &filterCndBuilderMetadataServices{builder: b.builder}
}

type filterCndBuilderMetadataCreateTime struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataCreateTime) Eq(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataCreateTime) Neq(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataCreateTime) Gt(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataCreateTime) Gte(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataCreateTime) Lt(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataCreateTime) Lte(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataCreateTime) In(values []*timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().Metadata().CreateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataCreateTime) NotIn(values []*timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().Metadata().CreateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataCreateTime) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().Metadata().CreateTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataCreateTime) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().Metadata().CreateTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataCreateTime) compare(op gotenfilter.CompareOperator, value *timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		TsConditionTemplate_FieldPathValue: NewTsConditionTemplateFieldPathBuilder().Metadata().CreateTime().WithValue(value),
	})
}

type filterCndBuilderMetadataUpdateTime struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataUpdateTime) Eq(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Neq(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Gt(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Gte(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Lt(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Lte(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataUpdateTime) In(values []*timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().Metadata().UpdateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataUpdateTime) NotIn(values []*timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().Metadata().UpdateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataUpdateTime) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().Metadata().UpdateTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataUpdateTime) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().Metadata().UpdateTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataUpdateTime) compare(op gotenfilter.CompareOperator, value *timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		TsConditionTemplate_FieldPathValue: NewTsConditionTemplateFieldPathBuilder().Metadata().UpdateTime().WithValue(value),
	})
}

type filterCndBuilderMetadataDeleteTime struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataDeleteTime) Eq(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataDeleteTime) Neq(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataDeleteTime) Gt(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataDeleteTime) Gte(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataDeleteTime) Lt(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataDeleteTime) Lte(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataDeleteTime) In(values []*timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().Metadata().DeleteTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataDeleteTime) NotIn(values []*timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().Metadata().DeleteTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataDeleteTime) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().Metadata().DeleteTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataDeleteTime) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().Metadata().DeleteTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataDeleteTime) compare(op gotenfilter.CompareOperator, value *timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		TsConditionTemplate_FieldPathValue: NewTsConditionTemplateFieldPathBuilder().Metadata().DeleteTime().WithValue(value),
	})
}

type filterCndBuilderMetadataUuid struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataUuid) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataUuid) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataUuid) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataUuid) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataUuid) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataUuid) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataUuid) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().Metadata().Uuid().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataUuid) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().Metadata().Uuid().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataUuid) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().Metadata().Uuid().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataUuid) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().Metadata().Uuid().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataUuid) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		TsConditionTemplate_FieldPathValue: NewTsConditionTemplateFieldPathBuilder().Metadata().Uuid().WithValue(value),
	})
}

type filterCndBuilderMetadataTags struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataTags) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataTags) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataTags) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataTags) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataTags) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataTags) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataTags) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().Metadata().Tags().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataTags) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().Metadata().Tags().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataTags) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().Metadata().Tags().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataTags) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().Metadata().Tags().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataTags) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewTsConditionTemplateFieldPathBuilder().Metadata().Tags().FieldPath(),
		Value:     NewTsConditionTemplateFieldPathBuilder().Metadata().Tags().WithItemValue(value),
	})
}

func (b *filterCndBuilderMetadataTags) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewTsConditionTemplateFieldPathBuilder().Metadata().Tags()
	itemValues := make([]TsConditionTemplate_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewTsConditionTemplateFieldPathBuilder().Metadata().Tags().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataTags) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewTsConditionTemplateFieldPathBuilder().Metadata().Tags()
	itemValues := make([]TsConditionTemplate_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewTsConditionTemplateFieldPathBuilder().Metadata().Tags().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataTags) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		TsConditionTemplate_FieldPathValue: NewTsConditionTemplateFieldPathBuilder().Metadata().Tags().WithValue(value),
	})
}

type filterCndBuilderMetadataLabels struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataLabels) Eq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataLabels) Neq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataLabels) Gt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataLabels) Gte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataLabels) Lt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataLabels) Lte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataLabels) In(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().Metadata().Labels().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLabels) NotIn(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().Metadata().Labels().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLabels) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().Metadata().Labels().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLabels) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().Metadata().Labels().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLabels) compare(op gotenfilter.CompareOperator, value map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		TsConditionTemplate_FieldPathValue: NewTsConditionTemplateFieldPathBuilder().Metadata().Labels().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataLabels) WithKey(key string) *mapFilterCndBuilderMetadataLabels {
	return &mapFilterCndBuilderMetadataLabels{builder: b.builder, key: key}
}

type mapFilterCndBuilderMetadataLabels struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderMetadataLabels) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderMetadataLabels) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().Metadata().Labels().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataLabels) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().Metadata().Labels().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataLabels) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().Metadata().Labels().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataLabels) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().Metadata().Labels().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataLabels) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		TsConditionTemplate_FieldPathValue: NewTsConditionTemplateFieldPathBuilder().Metadata().Labels().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderMetadataAnnotations struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataAnnotations) Eq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataAnnotations) Neq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataAnnotations) Gt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataAnnotations) Gte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataAnnotations) Lt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataAnnotations) Lte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataAnnotations) In(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().Metadata().Annotations().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataAnnotations) NotIn(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().Metadata().Annotations().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataAnnotations) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().Metadata().Annotations().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataAnnotations) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().Metadata().Annotations().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataAnnotations) compare(op gotenfilter.CompareOperator, value map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		TsConditionTemplate_FieldPathValue: NewTsConditionTemplateFieldPathBuilder().Metadata().Annotations().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataAnnotations) WithKey(key string) *mapFilterCndBuilderMetadataAnnotations {
	return &mapFilterCndBuilderMetadataAnnotations{builder: b.builder, key: key}
}

type mapFilterCndBuilderMetadataAnnotations struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderMetadataAnnotations) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().Metadata().Annotations().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataAnnotations) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().Metadata().Annotations().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataAnnotations) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().Metadata().Annotations().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataAnnotations) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().Metadata().Annotations().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataAnnotations) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		TsConditionTemplate_FieldPathValue: NewTsConditionTemplateFieldPathBuilder().Metadata().Annotations().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderMetadataGeneration struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataGeneration) Eq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataGeneration) Neq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataGeneration) Gt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataGeneration) Gte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataGeneration) Lt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataGeneration) Lte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataGeneration) In(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().Metadata().Generation().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataGeneration) NotIn(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().Metadata().Generation().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataGeneration) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().Metadata().Generation().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataGeneration) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().Metadata().Generation().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataGeneration) compare(op gotenfilter.CompareOperator, value int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		TsConditionTemplate_FieldPathValue: NewTsConditionTemplateFieldPathBuilder().Metadata().Generation().WithValue(value),
	})
}

type filterCndBuilderMetadataResourceVersion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataResourceVersion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataResourceVersion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().Metadata().ResourceVersion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataResourceVersion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().Metadata().ResourceVersion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataResourceVersion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().Metadata().ResourceVersion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataResourceVersion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().Metadata().ResourceVersion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataResourceVersion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		TsConditionTemplate_FieldPathValue: NewTsConditionTemplateFieldPathBuilder().Metadata().ResourceVersion().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferences struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferences) Eq(value []*meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Neq(value []*meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Gt(value []*meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Gte(value []*meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Lt(value []*meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Lte(value []*meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) In(values [][]*meta.OwnerReference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().Metadata().OwnerReferences().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) NotIn(values [][]*meta.OwnerReference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().Metadata().OwnerReferences().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) Contains(value *meta.OwnerReference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewTsConditionTemplateFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
		Value:     NewTsConditionTemplateFieldPathBuilder().Metadata().OwnerReferences().WithItemValue(value),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) ContainsAnyOf(values []*meta.OwnerReference) *FilterBuilder {
	pathSelector := NewTsConditionTemplateFieldPathBuilder().Metadata().OwnerReferences()
	itemValues := make([]TsConditionTemplate_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewTsConditionTemplateFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) ContainsAll(values []*meta.OwnerReference) *FilterBuilder {
	pathSelector := NewTsConditionTemplateFieldPathBuilder().Metadata().OwnerReferences()
	itemValues := make([]TsConditionTemplate_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewTsConditionTemplateFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) compare(op gotenfilter.CompareOperator, value []*meta.OwnerReference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		TsConditionTemplate_FieldPathValue: NewTsConditionTemplateFieldPathBuilder().Metadata().OwnerReferences().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) Kind() *filterCndBuilderMetadataOwnerReferencesKind {
	return &filterCndBuilderMetadataOwnerReferencesKind{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) Version() *filterCndBuilderMetadataOwnerReferencesVersion {
	return &filterCndBuilderMetadataOwnerReferencesVersion{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) Name() *filterCndBuilderMetadataOwnerReferencesName {
	return &filterCndBuilderMetadataOwnerReferencesName{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) Region() *filterCndBuilderMetadataOwnerReferencesRegion {
	return &filterCndBuilderMetadataOwnerReferencesRegion{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) Controller() *filterCndBuilderMetadataOwnerReferencesController {
	return &filterCndBuilderMetadataOwnerReferencesController{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) RequiresOwnerReference() *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference {
	return &filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) UnsetOnDelete() *filterCndBuilderMetadataOwnerReferencesUnsetOnDelete {
	return &filterCndBuilderMetadataOwnerReferencesUnsetOnDelete{builder: b.builder}
}

type filterCndBuilderMetadataOwnerReferencesKind struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().Metadata().OwnerReferences().Kind().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().Metadata().OwnerReferences().Kind().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().Metadata().OwnerReferences().Kind().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().Metadata().OwnerReferences().Kind().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		TsConditionTemplate_FieldPathValue: NewTsConditionTemplateFieldPathBuilder().Metadata().OwnerReferences().Kind().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesVersion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().Metadata().OwnerReferences().Version().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().Metadata().OwnerReferences().Version().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().Metadata().OwnerReferences().Version().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().Metadata().OwnerReferences().Version().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		TsConditionTemplate_FieldPathValue: NewTsConditionTemplateFieldPathBuilder().Metadata().OwnerReferences().Version().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().Metadata().OwnerReferences().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().Metadata().OwnerReferences().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().Metadata().OwnerReferences().Name().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().Metadata().OwnerReferences().Name().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		TsConditionTemplate_FieldPathValue: NewTsConditionTemplateFieldPathBuilder().Metadata().OwnerReferences().Name().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesRegion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().Metadata().OwnerReferences().Region().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().Metadata().OwnerReferences().Region().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().Metadata().OwnerReferences().Region().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().Metadata().OwnerReferences().Region().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		TsConditionTemplate_FieldPathValue: NewTsConditionTemplateFieldPathBuilder().Metadata().OwnerReferences().Region().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesController struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().Metadata().OwnerReferences().Controller().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesController) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().Metadata().OwnerReferences().Controller().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesController) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().Metadata().OwnerReferences().Controller().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesController) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().Metadata().OwnerReferences().Controller().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesController) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		TsConditionTemplate_FieldPathValue: NewTsConditionTemplateFieldPathBuilder().Metadata().OwnerReferences().Controller().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().Metadata().OwnerReferences().RequiresOwnerReference().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().Metadata().OwnerReferences().RequiresOwnerReference().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().Metadata().OwnerReferences().RequiresOwnerReference().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().Metadata().OwnerReferences().RequiresOwnerReference().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		TsConditionTemplate_FieldPathValue: NewTsConditionTemplateFieldPathBuilder().Metadata().OwnerReferences().RequiresOwnerReference().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesUnsetOnDelete struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesUnsetOnDelete) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesUnsetOnDelete) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesUnsetOnDelete) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesUnsetOnDelete) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesUnsetOnDelete) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesUnsetOnDelete) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesUnsetOnDelete) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().Metadata().OwnerReferences().UnsetOnDelete().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesUnsetOnDelete) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().Metadata().OwnerReferences().UnsetOnDelete().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesUnsetOnDelete) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().Metadata().OwnerReferences().UnsetOnDelete().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesUnsetOnDelete) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().Metadata().OwnerReferences().UnsetOnDelete().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesUnsetOnDelete) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		TsConditionTemplate_FieldPathValue: NewTsConditionTemplateFieldPathBuilder().Metadata().OwnerReferences().UnsetOnDelete().WithValue(value),
	})
}

type filterCndBuilderMetadataShards struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataShards) Eq(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataShards) Neq(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataShards) Gt(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataShards) Gte(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataShards) Lt(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataShards) Lte(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataShards) In(values []map[string]int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().Metadata().Shards().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataShards) NotIn(values []map[string]int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().Metadata().Shards().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataShards) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().Metadata().Shards().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataShards) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().Metadata().Shards().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataShards) compare(op gotenfilter.CompareOperator, value map[string]int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		TsConditionTemplate_FieldPathValue: NewTsConditionTemplateFieldPathBuilder().Metadata().Shards().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataShards) WithKey(key string) *mapFilterCndBuilderMetadataShards {
	return &mapFilterCndBuilderMetadataShards{builder: b.builder, key: key}
}

type mapFilterCndBuilderMetadataShards struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderMetadataShards) Eq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderMetadataShards) Neq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderMetadataShards) Gt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderMetadataShards) Gte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderMetadataShards) Lt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderMetadataShards) Lte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderMetadataShards) In(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().Metadata().Shards().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataShards) NotIn(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().Metadata().Shards().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataShards) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().Metadata().Shards().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataShards) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().Metadata().Shards().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataShards) compare(op gotenfilter.CompareOperator, value int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		TsConditionTemplate_FieldPathValue: NewTsConditionTemplateFieldPathBuilder().Metadata().Shards().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderMetadataSyncing struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataSyncing) Eq(value *meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataSyncing) Neq(value *meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataSyncing) Gt(value *meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataSyncing) Gte(value *meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataSyncing) Lt(value *meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataSyncing) Lte(value *meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataSyncing) In(values []*meta.SyncingMeta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().Metadata().Syncing().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncing) NotIn(values []*meta.SyncingMeta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().Metadata().Syncing().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncing) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().Metadata().Syncing().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncing) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().Metadata().Syncing().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncing) compare(op gotenfilter.CompareOperator, value *meta.SyncingMeta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		TsConditionTemplate_FieldPathValue: NewTsConditionTemplateFieldPathBuilder().Metadata().Syncing().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataSyncing) OwningRegion() *filterCndBuilderMetadataSyncingOwningRegion {
	return &filterCndBuilderMetadataSyncingOwningRegion{builder: b.builder}
}

func (b *filterCndBuilderMetadataSyncing) Regions() *filterCndBuilderMetadataSyncingRegions {
	return &filterCndBuilderMetadataSyncingRegions{builder: b.builder}
}

type filterCndBuilderMetadataSyncingOwningRegion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().Metadata().Syncing().OwningRegion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().Metadata().Syncing().OwningRegion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().Metadata().Syncing().OwningRegion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().Metadata().Syncing().OwningRegion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		TsConditionTemplate_FieldPathValue: NewTsConditionTemplateFieldPathBuilder().Metadata().Syncing().OwningRegion().WithValue(value),
	})
}

type filterCndBuilderMetadataSyncingRegions struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataSyncingRegions) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().Metadata().Syncing().Regions().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().Metadata().Syncing().Regions().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewTsConditionTemplateFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
		Value:     NewTsConditionTemplateFieldPathBuilder().Metadata().Syncing().Regions().WithItemValue(value),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewTsConditionTemplateFieldPathBuilder().Metadata().Syncing().Regions()
	itemValues := make([]TsConditionTemplate_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewTsConditionTemplateFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewTsConditionTemplateFieldPathBuilder().Metadata().Syncing().Regions()
	itemValues := make([]TsConditionTemplate_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewTsConditionTemplateFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		TsConditionTemplate_FieldPathValue: NewTsConditionTemplateFieldPathBuilder().Metadata().Syncing().Regions().WithValue(value),
	})
}

type filterCndBuilderMetadataLifecycle struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataLifecycle) Eq(value *meta.Lifecycle) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataLifecycle) Neq(value *meta.Lifecycle) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataLifecycle) Gt(value *meta.Lifecycle) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataLifecycle) Gte(value *meta.Lifecycle) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataLifecycle) Lt(value *meta.Lifecycle) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataLifecycle) Lte(value *meta.Lifecycle) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataLifecycle) In(values []*meta.Lifecycle) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().Metadata().Lifecycle().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLifecycle) NotIn(values []*meta.Lifecycle) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().Metadata().Lifecycle().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLifecycle) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().Metadata().Lifecycle().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLifecycle) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().Metadata().Lifecycle().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLifecycle) compare(op gotenfilter.CompareOperator, value *meta.Lifecycle) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		TsConditionTemplate_FieldPathValue: NewTsConditionTemplateFieldPathBuilder().Metadata().Lifecycle().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataLifecycle) State() *filterCndBuilderMetadataLifecycleState {
	return &filterCndBuilderMetadataLifecycleState{builder: b.builder}
}

func (b *filterCndBuilderMetadataLifecycle) BlockDeletion() *filterCndBuilderMetadataLifecycleBlockDeletion {
	return &filterCndBuilderMetadataLifecycleBlockDeletion{builder: b.builder}
}

type filterCndBuilderMetadataLifecycleState struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataLifecycleState) Eq(value meta.Lifecycle_State) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataLifecycleState) Neq(value meta.Lifecycle_State) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataLifecycleState) Gt(value meta.Lifecycle_State) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataLifecycleState) Gte(value meta.Lifecycle_State) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataLifecycleState) Lt(value meta.Lifecycle_State) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataLifecycleState) Lte(value meta.Lifecycle_State) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataLifecycleState) In(values []meta.Lifecycle_State) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().Metadata().Lifecycle().State().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLifecycleState) NotIn(values []meta.Lifecycle_State) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().Metadata().Lifecycle().State().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLifecycleState) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().Metadata().Lifecycle().State().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLifecycleState) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().Metadata().Lifecycle().State().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLifecycleState) compare(op gotenfilter.CompareOperator, value meta.Lifecycle_State) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		TsConditionTemplate_FieldPathValue: NewTsConditionTemplateFieldPathBuilder().Metadata().Lifecycle().State().WithValue(value),
	})
}

type filterCndBuilderMetadataLifecycleBlockDeletion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().Metadata().Lifecycle().BlockDeletion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().Metadata().Lifecycle().BlockDeletion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().Metadata().Lifecycle().BlockDeletion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().Metadata().Lifecycle().BlockDeletion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		TsConditionTemplate_FieldPathValue: NewTsConditionTemplateFieldPathBuilder().Metadata().Lifecycle().BlockDeletion().WithValue(value),
	})
}

type filterCndBuilderMetadataServices struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataServices) Eq(value *meta.ServicesInfo) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataServices) Neq(value *meta.ServicesInfo) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataServices) Gt(value *meta.ServicesInfo) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataServices) Gte(value *meta.ServicesInfo) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataServices) Lt(value *meta.ServicesInfo) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataServices) Lte(value *meta.ServicesInfo) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataServices) In(values []*meta.ServicesInfo) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().Metadata().Services().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataServices) NotIn(values []*meta.ServicesInfo) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().Metadata().Services().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataServices) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().Metadata().Services().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataServices) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().Metadata().Services().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataServices) compare(op gotenfilter.CompareOperator, value *meta.ServicesInfo) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		TsConditionTemplate_FieldPathValue: NewTsConditionTemplateFieldPathBuilder().Metadata().Services().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataServices) OwningService() *filterCndBuilderMetadataServicesOwningService {
	return &filterCndBuilderMetadataServicesOwningService{builder: b.builder}
}

func (b *filterCndBuilderMetadataServices) AllowedServices() *filterCndBuilderMetadataServicesAllowedServices {
	return &filterCndBuilderMetadataServicesAllowedServices{builder: b.builder}
}

type filterCndBuilderMetadataServicesOwningService struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataServicesOwningService) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataServicesOwningService) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataServicesOwningService) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataServicesOwningService) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataServicesOwningService) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataServicesOwningService) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataServicesOwningService) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().Metadata().Services().OwningService().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataServicesOwningService) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().Metadata().Services().OwningService().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataServicesOwningService) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().Metadata().Services().OwningService().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataServicesOwningService) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().Metadata().Services().OwningService().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataServicesOwningService) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		TsConditionTemplate_FieldPathValue: NewTsConditionTemplateFieldPathBuilder().Metadata().Services().OwningService().WithValue(value),
	})
}

type filterCndBuilderMetadataServicesAllowedServices struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataServicesAllowedServices) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataServicesAllowedServices) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataServicesAllowedServices) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataServicesAllowedServices) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataServicesAllowedServices) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataServicesAllowedServices) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataServicesAllowedServices) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().Metadata().Services().AllowedServices().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataServicesAllowedServices) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().Metadata().Services().AllowedServices().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataServicesAllowedServices) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().Metadata().Services().AllowedServices().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataServicesAllowedServices) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().Metadata().Services().AllowedServices().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataServicesAllowedServices) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewTsConditionTemplateFieldPathBuilder().Metadata().Services().AllowedServices().FieldPath(),
		Value:     NewTsConditionTemplateFieldPathBuilder().Metadata().Services().AllowedServices().WithItemValue(value),
	})
}

func (b *filterCndBuilderMetadataServicesAllowedServices) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewTsConditionTemplateFieldPathBuilder().Metadata().Services().AllowedServices()
	itemValues := make([]TsConditionTemplate_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewTsConditionTemplateFieldPathBuilder().Metadata().Services().AllowedServices().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataServicesAllowedServices) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewTsConditionTemplateFieldPathBuilder().Metadata().Services().AllowedServices()
	itemValues := make([]TsConditionTemplate_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewTsConditionTemplateFieldPathBuilder().Metadata().Services().AllowedServices().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataServicesAllowedServices) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		TsConditionTemplate_FieldPathValue: NewTsConditionTemplateFieldPathBuilder().Metadata().Services().AllowedServices().WithValue(value),
	})
}

type filterCndBuilderDisplayName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderDisplayName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderDisplayName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderDisplayName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderDisplayName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderDisplayName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderDisplayName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderDisplayName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().DisplayName().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderDisplayName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().DisplayName().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderDisplayName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().DisplayName().FieldPath(),
	})
}

func (b *filterCndBuilderDisplayName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().DisplayName().FieldPath(),
	})
}

func (b *filterCndBuilderDisplayName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		TsConditionTemplate_FieldPathValue: NewTsConditionTemplateFieldPathBuilder().DisplayName().WithValue(value),
	})
}

type filterCndBuilderDescription struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderDescription) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderDescription) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderDescription) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderDescription) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderDescription) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderDescription) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderDescription) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().Description().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderDescription) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().Description().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderDescription) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().Description().FieldPath(),
	})
}

func (b *filterCndBuilderDescription) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().Description().FieldPath(),
	})
}

func (b *filterCndBuilderDescription) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		TsConditionTemplate_FieldPathValue: NewTsConditionTemplateFieldPathBuilder().Description().WithValue(value),
	})
}

type filterCndBuilderSupportingDocs struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSupportingDocs) Eq(value []*document.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSupportingDocs) Neq(value []*document.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSupportingDocs) Gt(value []*document.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSupportingDocs) Gte(value []*document.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSupportingDocs) Lt(value []*document.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSupportingDocs) Lte(value []*document.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSupportingDocs) In(values [][]*document.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().SupportingDocs().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSupportingDocs) NotIn(values [][]*document.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().SupportingDocs().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSupportingDocs) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SupportingDocs().FieldPath(),
	})
}

func (b *filterCndBuilderSupportingDocs) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SupportingDocs().FieldPath(),
	})
}

func (b *filterCndBuilderSupportingDocs) Contains(value *document.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SupportingDocs().FieldPath(),
		Value:     NewTsConditionTemplateFieldPathBuilder().SupportingDocs().WithItemValue(value),
	})
}

func (b *filterCndBuilderSupportingDocs) ContainsAnyOf(values []*document.Reference) *FilterBuilder {
	pathSelector := NewTsConditionTemplateFieldPathBuilder().SupportingDocs()
	itemValues := make([]TsConditionTemplate_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SupportingDocs().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSupportingDocs) ContainsAll(values []*document.Reference) *FilterBuilder {
	pathSelector := NewTsConditionTemplateFieldPathBuilder().SupportingDocs()
	itemValues := make([]TsConditionTemplate_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SupportingDocs().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSupportingDocs) compare(op gotenfilter.CompareOperator, value []*document.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		TsConditionTemplate_FieldPathValue: NewTsConditionTemplateFieldPathBuilder().SupportingDocs().WithValue(value),
	})
}

type filterCndBuilderSpecTemplate struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplate) Eq(value *rcommon.TsCndSpec) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplate) Neq(value *rcommon.TsCndSpec) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplate) Gt(value *rcommon.TsCndSpec) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplate) Gte(value *rcommon.TsCndSpec) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplate) Lt(value *rcommon.TsCndSpec) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplate) Lte(value *rcommon.TsCndSpec) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplate) In(values []*rcommon.TsCndSpec) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplate) NotIn(values []*rcommon.TsCndSpec) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplate) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplate) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplate) compare(op gotenfilter.CompareOperator, value *rcommon.TsCndSpec) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		TsConditionTemplate_FieldPathValue: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplate) Queries() *filterCndBuilderSpecTemplateQueries {
	return &filterCndBuilderSpecTemplateQueries{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplate) QueryGroupBy() *filterCndBuilderSpecTemplateQueryGroupBy {
	return &filterCndBuilderSpecTemplateQueryGroupBy{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplate) ThresholdAlerting() *filterCndBuilderSpecTemplateThresholdAlerting {
	return &filterCndBuilderSpecTemplateThresholdAlerting{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplate) AnomalyAlerting() *filterCndBuilderSpecTemplateAnomalyAlerting {
	return &filterCndBuilderSpecTemplateAnomalyAlerting{builder: b.builder}
}

type filterCndBuilderSpecTemplateQueries struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateQueries) Eq(value []*rcommon.TsCndSpec_Query) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateQueries) Neq(value []*rcommon.TsCndSpec_Query) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateQueries) Gt(value []*rcommon.TsCndSpec_Query) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateQueries) Gte(value []*rcommon.TsCndSpec_Query) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateQueries) Lt(value []*rcommon.TsCndSpec_Query) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateQueries) Lte(value []*rcommon.TsCndSpec_Query) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateQueries) In(values [][]*rcommon.TsCndSpec_Query) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().Queries().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateQueries) NotIn(values [][]*rcommon.TsCndSpec_Query) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().Queries().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateQueries) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().Queries().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateQueries) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().Queries().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateQueries) Contains(value *rcommon.TsCndSpec_Query) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().Queries().FieldPath(),
		Value:     NewTsConditionTemplateFieldPathBuilder().SpecTemplate().Queries().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateQueries) ContainsAnyOf(values []*rcommon.TsCndSpec_Query) *FilterBuilder {
	pathSelector := NewTsConditionTemplateFieldPathBuilder().SpecTemplate().Queries()
	itemValues := make([]TsConditionTemplate_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().Queries().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateQueries) ContainsAll(values []*rcommon.TsCndSpec_Query) *FilterBuilder {
	pathSelector := NewTsConditionTemplateFieldPathBuilder().SpecTemplate().Queries()
	itemValues := make([]TsConditionTemplate_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().Queries().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateQueries) compare(op gotenfilter.CompareOperator, value []*rcommon.TsCndSpec_Query) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		TsConditionTemplate_FieldPathValue: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().Queries().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateQueries) Name() *filterCndBuilderSpecTemplateQueriesName {
	return &filterCndBuilderSpecTemplateQueriesName{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateQueries) Filter() *filterCndBuilderSpecTemplateQueriesFilter {
	return &filterCndBuilderSpecTemplateQueriesFilter{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateQueries) Aligner() *filterCndBuilderSpecTemplateQueriesAligner {
	return &filterCndBuilderSpecTemplateQueriesAligner{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateQueries) Reducer() *filterCndBuilderSpecTemplateQueriesReducer {
	return &filterCndBuilderSpecTemplateQueriesReducer{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateQueries) MaxValue() *filterCndBuilderSpecTemplateQueriesMaxValue {
	return &filterCndBuilderSpecTemplateQueriesMaxValue{builder: b.builder}
}

type filterCndBuilderSpecTemplateQueriesName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateQueriesName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateQueriesName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateQueriesName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateQueriesName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateQueriesName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateQueriesName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateQueriesName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().Queries().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateQueriesName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().Queries().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateQueriesName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().Queries().Name().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateQueriesName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().Queries().Name().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateQueriesName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		TsConditionTemplate_FieldPathValue: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().Queries().Name().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateQueriesFilter struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateQueriesFilter) Eq(value *monitoring_time_serie.Filter) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateQueriesFilter) Neq(value *monitoring_time_serie.Filter) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateQueriesFilter) Gt(value *monitoring_time_serie.Filter) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateQueriesFilter) Gte(value *monitoring_time_serie.Filter) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateQueriesFilter) Lt(value *monitoring_time_serie.Filter) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateQueriesFilter) Lte(value *monitoring_time_serie.Filter) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateQueriesFilter) In(values []*monitoring_time_serie.Filter) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().Queries().Filter().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateQueriesFilter) NotIn(values []*monitoring_time_serie.Filter) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().Queries().Filter().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateQueriesFilter) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().Queries().Filter().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateQueriesFilter) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().Queries().Filter().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateQueriesFilter) compare(op gotenfilter.CompareOperator, value *monitoring_time_serie.Filter) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		TsConditionTemplate_FieldPathValue: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().Queries().Filter().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateQueriesAligner struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateQueriesAligner) Eq(value monitoring_common.Aggregation_Aligner) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateQueriesAligner) Neq(value monitoring_common.Aggregation_Aligner) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateQueriesAligner) Gt(value monitoring_common.Aggregation_Aligner) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateQueriesAligner) Gte(value monitoring_common.Aggregation_Aligner) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateQueriesAligner) Lt(value monitoring_common.Aggregation_Aligner) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateQueriesAligner) Lte(value monitoring_common.Aggregation_Aligner) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateQueriesAligner) In(values []monitoring_common.Aggregation_Aligner) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().Queries().Aligner().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateQueriesAligner) NotIn(values []monitoring_common.Aggregation_Aligner) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().Queries().Aligner().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateQueriesAligner) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().Queries().Aligner().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateQueriesAligner) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().Queries().Aligner().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateQueriesAligner) compare(op gotenfilter.CompareOperator, value monitoring_common.Aggregation_Aligner) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		TsConditionTemplate_FieldPathValue: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().Queries().Aligner().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateQueriesReducer struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateQueriesReducer) Eq(value monitoring_common.Aggregation_Reducer) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateQueriesReducer) Neq(value monitoring_common.Aggregation_Reducer) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateQueriesReducer) Gt(value monitoring_common.Aggregation_Reducer) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateQueriesReducer) Gte(value monitoring_common.Aggregation_Reducer) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateQueriesReducer) Lt(value monitoring_common.Aggregation_Reducer) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateQueriesReducer) Lte(value monitoring_common.Aggregation_Reducer) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateQueriesReducer) In(values []monitoring_common.Aggregation_Reducer) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().Queries().Reducer().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateQueriesReducer) NotIn(values []monitoring_common.Aggregation_Reducer) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().Queries().Reducer().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateQueriesReducer) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().Queries().Reducer().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateQueriesReducer) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().Queries().Reducer().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateQueriesReducer) compare(op gotenfilter.CompareOperator, value monitoring_common.Aggregation_Reducer) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		TsConditionTemplate_FieldPathValue: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().Queries().Reducer().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateQueriesMaxValue struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateQueriesMaxValue) Eq(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateQueriesMaxValue) Neq(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateQueriesMaxValue) Gt(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateQueriesMaxValue) Gte(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateQueriesMaxValue) Lt(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateQueriesMaxValue) Lte(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateQueriesMaxValue) In(values []float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().Queries().MaxValue().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateQueriesMaxValue) NotIn(values []float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().Queries().MaxValue().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateQueriesMaxValue) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().Queries().MaxValue().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateQueriesMaxValue) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().Queries().MaxValue().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateQueriesMaxValue) compare(op gotenfilter.CompareOperator, value float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		TsConditionTemplate_FieldPathValue: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().Queries().MaxValue().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateQueryGroupBy struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateQueryGroupBy) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateQueryGroupBy) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateQueryGroupBy) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateQueryGroupBy) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateQueryGroupBy) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateQueryGroupBy) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateQueryGroupBy) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().QueryGroupBy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateQueryGroupBy) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().QueryGroupBy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateQueryGroupBy) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().QueryGroupBy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateQueryGroupBy) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().QueryGroupBy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateQueryGroupBy) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().QueryGroupBy().FieldPath(),
		Value:     NewTsConditionTemplateFieldPathBuilder().SpecTemplate().QueryGroupBy().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateQueryGroupBy) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewTsConditionTemplateFieldPathBuilder().SpecTemplate().QueryGroupBy()
	itemValues := make([]TsConditionTemplate_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().QueryGroupBy().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateQueryGroupBy) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewTsConditionTemplateFieldPathBuilder().SpecTemplate().QueryGroupBy()
	itemValues := make([]TsConditionTemplate_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().QueryGroupBy().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateQueryGroupBy) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		TsConditionTemplate_FieldPathValue: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().QueryGroupBy().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateThresholdAlerting struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateThresholdAlerting) Eq(value *rcommon.TsCndSpec_ThresholdAlertingCfg) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlerting) Neq(value *rcommon.TsCndSpec_ThresholdAlertingCfg) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlerting) Gt(value *rcommon.TsCndSpec_ThresholdAlertingCfg) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlerting) Gte(value *rcommon.TsCndSpec_ThresholdAlertingCfg) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlerting) Lt(value *rcommon.TsCndSpec_ThresholdAlertingCfg) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlerting) Lte(value *rcommon.TsCndSpec_ThresholdAlertingCfg) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlerting) In(values []*rcommon.TsCndSpec_ThresholdAlertingCfg) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateThresholdAlerting) NotIn(values []*rcommon.TsCndSpec_ThresholdAlertingCfg) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateThresholdAlerting) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateThresholdAlerting) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateThresholdAlerting) compare(op gotenfilter.CompareOperator, value *rcommon.TsCndSpec_ThresholdAlertingCfg) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		TsConditionTemplate_FieldPathValue: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateThresholdAlerting) Operator() *filterCndBuilderSpecTemplateThresholdAlertingOperator {
	return &filterCndBuilderSpecTemplateThresholdAlertingOperator{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateThresholdAlerting) AlignmentPeriod() *filterCndBuilderSpecTemplateThresholdAlertingAlignmentPeriod {
	return &filterCndBuilderSpecTemplateThresholdAlertingAlignmentPeriod{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateThresholdAlerting) RaiseAfter() *filterCndBuilderSpecTemplateThresholdAlertingRaiseAfter {
	return &filterCndBuilderSpecTemplateThresholdAlertingRaiseAfter{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateThresholdAlerting) SilenceAfter() *filterCndBuilderSpecTemplateThresholdAlertingSilenceAfter {
	return &filterCndBuilderSpecTemplateThresholdAlertingSilenceAfter{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateThresholdAlerting) PerQueryThresholds() *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholds {
	return &filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholds{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateThresholdAlerting) AdaptiveThresholdsDetectionPeriod() *filterCndBuilderSpecTemplateThresholdAlertingAdaptiveThresholdsDetectionPeriod {
	return &filterCndBuilderSpecTemplateThresholdAlertingAdaptiveThresholdsDetectionPeriod{builder: b.builder}
}

type filterCndBuilderSpecTemplateThresholdAlertingOperator struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingOperator) Eq(value rcommon.TsCndSpec_ThresholdAlertingCfg_Operator) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingOperator) Neq(value rcommon.TsCndSpec_ThresholdAlertingCfg_Operator) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingOperator) Gt(value rcommon.TsCndSpec_ThresholdAlertingCfg_Operator) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingOperator) Gte(value rcommon.TsCndSpec_ThresholdAlertingCfg_Operator) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingOperator) Lt(value rcommon.TsCndSpec_ThresholdAlertingCfg_Operator) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingOperator) Lte(value rcommon.TsCndSpec_ThresholdAlertingCfg_Operator) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingOperator) In(values []rcommon.TsCndSpec_ThresholdAlertingCfg_Operator) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().Operator().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingOperator) NotIn(values []rcommon.TsCndSpec_ThresholdAlertingCfg_Operator) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().Operator().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingOperator) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().Operator().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingOperator) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().Operator().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingOperator) compare(op gotenfilter.CompareOperator, value rcommon.TsCndSpec_ThresholdAlertingCfg_Operator) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		TsConditionTemplate_FieldPathValue: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().Operator().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateThresholdAlertingAlignmentPeriod struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingAlignmentPeriod) Eq(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingAlignmentPeriod) Neq(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingAlignmentPeriod) Gt(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingAlignmentPeriod) Gte(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingAlignmentPeriod) Lt(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingAlignmentPeriod) Lte(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingAlignmentPeriod) In(values []*durationpb.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().AlignmentPeriod().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingAlignmentPeriod) NotIn(values []*durationpb.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().AlignmentPeriod().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingAlignmentPeriod) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().AlignmentPeriod().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingAlignmentPeriod) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().AlignmentPeriod().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingAlignmentPeriod) compare(op gotenfilter.CompareOperator, value *durationpb.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		TsConditionTemplate_FieldPathValue: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().AlignmentPeriod().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateThresholdAlertingRaiseAfter struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingRaiseAfter) Eq(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingRaiseAfter) Neq(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingRaiseAfter) Gt(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingRaiseAfter) Gte(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingRaiseAfter) Lt(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingRaiseAfter) Lte(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingRaiseAfter) In(values []*durationpb.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().RaiseAfter().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingRaiseAfter) NotIn(values []*durationpb.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().RaiseAfter().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingRaiseAfter) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().RaiseAfter().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingRaiseAfter) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().RaiseAfter().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingRaiseAfter) compare(op gotenfilter.CompareOperator, value *durationpb.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		TsConditionTemplate_FieldPathValue: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().RaiseAfter().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateThresholdAlertingSilenceAfter struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingSilenceAfter) Eq(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingSilenceAfter) Neq(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingSilenceAfter) Gt(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingSilenceAfter) Gte(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingSilenceAfter) Lt(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingSilenceAfter) Lte(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingSilenceAfter) In(values []*durationpb.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().SilenceAfter().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingSilenceAfter) NotIn(values []*durationpb.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().SilenceAfter().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingSilenceAfter) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().SilenceAfter().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingSilenceAfter) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().SilenceAfter().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingSilenceAfter) compare(op gotenfilter.CompareOperator, value *durationpb.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		TsConditionTemplate_FieldPathValue: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().SilenceAfter().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholds struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholds) Eq(value []*rcommon.TsCndSpec_ThresholdAlertingCfg_AlertingThresholds) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholds) Neq(value []*rcommon.TsCndSpec_ThresholdAlertingCfg_AlertingThresholds) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholds) Gt(value []*rcommon.TsCndSpec_ThresholdAlertingCfg_AlertingThresholds) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholds) Gte(value []*rcommon.TsCndSpec_ThresholdAlertingCfg_AlertingThresholds) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholds) Lt(value []*rcommon.TsCndSpec_ThresholdAlertingCfg_AlertingThresholds) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholds) Lte(value []*rcommon.TsCndSpec_ThresholdAlertingCfg_AlertingThresholds) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholds) In(values [][]*rcommon.TsCndSpec_ThresholdAlertingCfg_AlertingThresholds) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().PerQueryThresholds().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholds) NotIn(values [][]*rcommon.TsCndSpec_ThresholdAlertingCfg_AlertingThresholds) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().PerQueryThresholds().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholds) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().PerQueryThresholds().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholds) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().PerQueryThresholds().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholds) Contains(value *rcommon.TsCndSpec_ThresholdAlertingCfg_AlertingThresholds) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().PerQueryThresholds().FieldPath(),
		Value:     NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().PerQueryThresholds().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholds) ContainsAnyOf(values []*rcommon.TsCndSpec_ThresholdAlertingCfg_AlertingThresholds) *FilterBuilder {
	pathSelector := NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().PerQueryThresholds()
	itemValues := make([]TsConditionTemplate_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().PerQueryThresholds().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholds) ContainsAll(values []*rcommon.TsCndSpec_ThresholdAlertingCfg_AlertingThresholds) *FilterBuilder {
	pathSelector := NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().PerQueryThresholds()
	itemValues := make([]TsConditionTemplate_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().PerQueryThresholds().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholds) compare(op gotenfilter.CompareOperator, value []*rcommon.TsCndSpec_ThresholdAlertingCfg_AlertingThresholds) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		TsConditionTemplate_FieldPathValue: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().PerQueryThresholds().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholds) AutoAdaptUpper() *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsAutoAdaptUpper {
	return &filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsAutoAdaptUpper{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholds) AutoAdaptLower() *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsAutoAdaptLower {
	return &filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsAutoAdaptLower{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholds) MaxUpper() *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMaxUpper {
	return &filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMaxUpper{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholds) MaxLower() *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMaxLower {
	return &filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMaxLower{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholds) MinUpper() *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMinUpper {
	return &filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMinUpper{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholds) MinLower() *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMinLower {
	return &filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMinLower{builder: b.builder}
}

type filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsAutoAdaptUpper struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsAutoAdaptUpper) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsAutoAdaptUpper) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsAutoAdaptUpper) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsAutoAdaptUpper) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsAutoAdaptUpper) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsAutoAdaptUpper) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsAutoAdaptUpper) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().PerQueryThresholds().AutoAdaptUpper().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsAutoAdaptUpper) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().PerQueryThresholds().AutoAdaptUpper().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsAutoAdaptUpper) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().PerQueryThresholds().AutoAdaptUpper().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsAutoAdaptUpper) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().PerQueryThresholds().AutoAdaptUpper().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsAutoAdaptUpper) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		TsConditionTemplate_FieldPathValue: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().PerQueryThresholds().AutoAdaptUpper().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsAutoAdaptLower struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsAutoAdaptLower) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsAutoAdaptLower) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsAutoAdaptLower) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsAutoAdaptLower) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsAutoAdaptLower) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsAutoAdaptLower) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsAutoAdaptLower) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().PerQueryThresholds().AutoAdaptLower().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsAutoAdaptLower) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().PerQueryThresholds().AutoAdaptLower().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsAutoAdaptLower) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().PerQueryThresholds().AutoAdaptLower().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsAutoAdaptLower) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().PerQueryThresholds().AutoAdaptLower().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsAutoAdaptLower) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		TsConditionTemplate_FieldPathValue: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().PerQueryThresholds().AutoAdaptLower().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMaxUpper struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMaxUpper) Eq(value *rcommon.AlertingThreshold) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMaxUpper) Neq(value *rcommon.AlertingThreshold) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMaxUpper) Gt(value *rcommon.AlertingThreshold) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMaxUpper) Gte(value *rcommon.AlertingThreshold) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMaxUpper) Lt(value *rcommon.AlertingThreshold) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMaxUpper) Lte(value *rcommon.AlertingThreshold) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMaxUpper) In(values []*rcommon.AlertingThreshold) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().PerQueryThresholds().MaxUpper().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMaxUpper) NotIn(values []*rcommon.AlertingThreshold) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().PerQueryThresholds().MaxUpper().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMaxUpper) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().PerQueryThresholds().MaxUpper().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMaxUpper) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().PerQueryThresholds().MaxUpper().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMaxUpper) compare(op gotenfilter.CompareOperator, value *rcommon.AlertingThreshold) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		TsConditionTemplate_FieldPathValue: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().PerQueryThresholds().MaxUpper().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMaxUpper) Value() *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMaxUpperValue {
	return &filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMaxUpperValue{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMaxUpper) IsInclusive() *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMaxUpperIsInclusive {
	return &filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMaxUpperIsInclusive{builder: b.builder}
}

type filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMaxUpperValue struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMaxUpperValue) Eq(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMaxUpperValue) Neq(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMaxUpperValue) Gt(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMaxUpperValue) Gte(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMaxUpperValue) Lt(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMaxUpperValue) Lte(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMaxUpperValue) In(values []float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().PerQueryThresholds().MaxUpper().Value().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMaxUpperValue) NotIn(values []float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().PerQueryThresholds().MaxUpper().Value().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMaxUpperValue) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().PerQueryThresholds().MaxUpper().Value().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMaxUpperValue) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().PerQueryThresholds().MaxUpper().Value().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMaxUpperValue) compare(op gotenfilter.CompareOperator, value float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		TsConditionTemplate_FieldPathValue: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().PerQueryThresholds().MaxUpper().Value().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMaxUpperIsInclusive struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMaxUpperIsInclusive) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMaxUpperIsInclusive) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMaxUpperIsInclusive) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMaxUpperIsInclusive) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMaxUpperIsInclusive) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMaxUpperIsInclusive) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMaxUpperIsInclusive) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().PerQueryThresholds().MaxUpper().IsInclusive().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMaxUpperIsInclusive) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().PerQueryThresholds().MaxUpper().IsInclusive().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMaxUpperIsInclusive) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().PerQueryThresholds().MaxUpper().IsInclusive().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMaxUpperIsInclusive) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().PerQueryThresholds().MaxUpper().IsInclusive().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMaxUpperIsInclusive) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		TsConditionTemplate_FieldPathValue: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().PerQueryThresholds().MaxUpper().IsInclusive().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMaxLower struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMaxLower) Eq(value *rcommon.AlertingThreshold) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMaxLower) Neq(value *rcommon.AlertingThreshold) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMaxLower) Gt(value *rcommon.AlertingThreshold) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMaxLower) Gte(value *rcommon.AlertingThreshold) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMaxLower) Lt(value *rcommon.AlertingThreshold) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMaxLower) Lte(value *rcommon.AlertingThreshold) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMaxLower) In(values []*rcommon.AlertingThreshold) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().PerQueryThresholds().MaxLower().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMaxLower) NotIn(values []*rcommon.AlertingThreshold) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().PerQueryThresholds().MaxLower().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMaxLower) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().PerQueryThresholds().MaxLower().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMaxLower) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().PerQueryThresholds().MaxLower().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMaxLower) compare(op gotenfilter.CompareOperator, value *rcommon.AlertingThreshold) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		TsConditionTemplate_FieldPathValue: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().PerQueryThresholds().MaxLower().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMaxLower) Value() *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMaxLowerValue {
	return &filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMaxLowerValue{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMaxLower) IsInclusive() *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMaxLowerIsInclusive {
	return &filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMaxLowerIsInclusive{builder: b.builder}
}

type filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMaxLowerValue struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMaxLowerValue) Eq(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMaxLowerValue) Neq(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMaxLowerValue) Gt(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMaxLowerValue) Gte(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMaxLowerValue) Lt(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMaxLowerValue) Lte(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMaxLowerValue) In(values []float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().PerQueryThresholds().MaxLower().Value().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMaxLowerValue) NotIn(values []float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().PerQueryThresholds().MaxLower().Value().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMaxLowerValue) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().PerQueryThresholds().MaxLower().Value().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMaxLowerValue) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().PerQueryThresholds().MaxLower().Value().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMaxLowerValue) compare(op gotenfilter.CompareOperator, value float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		TsConditionTemplate_FieldPathValue: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().PerQueryThresholds().MaxLower().Value().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMaxLowerIsInclusive struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMaxLowerIsInclusive) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMaxLowerIsInclusive) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMaxLowerIsInclusive) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMaxLowerIsInclusive) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMaxLowerIsInclusive) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMaxLowerIsInclusive) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMaxLowerIsInclusive) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().PerQueryThresholds().MaxLower().IsInclusive().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMaxLowerIsInclusive) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().PerQueryThresholds().MaxLower().IsInclusive().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMaxLowerIsInclusive) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().PerQueryThresholds().MaxLower().IsInclusive().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMaxLowerIsInclusive) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().PerQueryThresholds().MaxLower().IsInclusive().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMaxLowerIsInclusive) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		TsConditionTemplate_FieldPathValue: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().PerQueryThresholds().MaxLower().IsInclusive().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMinUpper struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMinUpper) Eq(value *rcommon.AlertingThreshold) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMinUpper) Neq(value *rcommon.AlertingThreshold) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMinUpper) Gt(value *rcommon.AlertingThreshold) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMinUpper) Gte(value *rcommon.AlertingThreshold) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMinUpper) Lt(value *rcommon.AlertingThreshold) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMinUpper) Lte(value *rcommon.AlertingThreshold) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMinUpper) In(values []*rcommon.AlertingThreshold) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().PerQueryThresholds().MinUpper().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMinUpper) NotIn(values []*rcommon.AlertingThreshold) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().PerQueryThresholds().MinUpper().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMinUpper) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().PerQueryThresholds().MinUpper().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMinUpper) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().PerQueryThresholds().MinUpper().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMinUpper) compare(op gotenfilter.CompareOperator, value *rcommon.AlertingThreshold) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		TsConditionTemplate_FieldPathValue: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().PerQueryThresholds().MinUpper().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMinUpper) Value() *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMinUpperValue {
	return &filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMinUpperValue{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMinUpper) IsInclusive() *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMinUpperIsInclusive {
	return &filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMinUpperIsInclusive{builder: b.builder}
}

type filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMinUpperValue struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMinUpperValue) Eq(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMinUpperValue) Neq(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMinUpperValue) Gt(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMinUpperValue) Gte(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMinUpperValue) Lt(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMinUpperValue) Lte(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMinUpperValue) In(values []float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().PerQueryThresholds().MinUpper().Value().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMinUpperValue) NotIn(values []float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().PerQueryThresholds().MinUpper().Value().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMinUpperValue) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().PerQueryThresholds().MinUpper().Value().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMinUpperValue) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().PerQueryThresholds().MinUpper().Value().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMinUpperValue) compare(op gotenfilter.CompareOperator, value float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		TsConditionTemplate_FieldPathValue: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().PerQueryThresholds().MinUpper().Value().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMinUpperIsInclusive struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMinUpperIsInclusive) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMinUpperIsInclusive) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMinUpperIsInclusive) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMinUpperIsInclusive) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMinUpperIsInclusive) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMinUpperIsInclusive) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMinUpperIsInclusive) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().PerQueryThresholds().MinUpper().IsInclusive().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMinUpperIsInclusive) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().PerQueryThresholds().MinUpper().IsInclusive().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMinUpperIsInclusive) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().PerQueryThresholds().MinUpper().IsInclusive().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMinUpperIsInclusive) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().PerQueryThresholds().MinUpper().IsInclusive().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMinUpperIsInclusive) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		TsConditionTemplate_FieldPathValue: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().PerQueryThresholds().MinUpper().IsInclusive().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMinLower struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMinLower) Eq(value *rcommon.AlertingThreshold) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMinLower) Neq(value *rcommon.AlertingThreshold) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMinLower) Gt(value *rcommon.AlertingThreshold) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMinLower) Gte(value *rcommon.AlertingThreshold) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMinLower) Lt(value *rcommon.AlertingThreshold) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMinLower) Lte(value *rcommon.AlertingThreshold) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMinLower) In(values []*rcommon.AlertingThreshold) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().PerQueryThresholds().MinLower().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMinLower) NotIn(values []*rcommon.AlertingThreshold) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().PerQueryThresholds().MinLower().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMinLower) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().PerQueryThresholds().MinLower().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMinLower) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().PerQueryThresholds().MinLower().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMinLower) compare(op gotenfilter.CompareOperator, value *rcommon.AlertingThreshold) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		TsConditionTemplate_FieldPathValue: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().PerQueryThresholds().MinLower().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMinLower) Value() *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMinLowerValue {
	return &filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMinLowerValue{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMinLower) IsInclusive() *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMinLowerIsInclusive {
	return &filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMinLowerIsInclusive{builder: b.builder}
}

type filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMinLowerValue struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMinLowerValue) Eq(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMinLowerValue) Neq(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMinLowerValue) Gt(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMinLowerValue) Gte(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMinLowerValue) Lt(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMinLowerValue) Lte(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMinLowerValue) In(values []float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().PerQueryThresholds().MinLower().Value().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMinLowerValue) NotIn(values []float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().PerQueryThresholds().MinLower().Value().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMinLowerValue) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().PerQueryThresholds().MinLower().Value().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMinLowerValue) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().PerQueryThresholds().MinLower().Value().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMinLowerValue) compare(op gotenfilter.CompareOperator, value float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		TsConditionTemplate_FieldPathValue: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().PerQueryThresholds().MinLower().Value().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMinLowerIsInclusive struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMinLowerIsInclusive) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMinLowerIsInclusive) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMinLowerIsInclusive) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMinLowerIsInclusive) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMinLowerIsInclusive) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMinLowerIsInclusive) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMinLowerIsInclusive) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().PerQueryThresholds().MinLower().IsInclusive().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMinLowerIsInclusive) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().PerQueryThresholds().MinLower().IsInclusive().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMinLowerIsInclusive) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().PerQueryThresholds().MinLower().IsInclusive().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMinLowerIsInclusive) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().PerQueryThresholds().MinLower().IsInclusive().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingPerQueryThresholdsMinLowerIsInclusive) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		TsConditionTemplate_FieldPathValue: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().PerQueryThresholds().MinLower().IsInclusive().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateThresholdAlertingAdaptiveThresholdsDetectionPeriod struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingAdaptiveThresholdsDetectionPeriod) Eq(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingAdaptiveThresholdsDetectionPeriod) Neq(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingAdaptiveThresholdsDetectionPeriod) Gt(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingAdaptiveThresholdsDetectionPeriod) Gte(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingAdaptiveThresholdsDetectionPeriod) Lt(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingAdaptiveThresholdsDetectionPeriod) Lte(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingAdaptiveThresholdsDetectionPeriod) In(values []*durationpb.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().AdaptiveThresholdsDetectionPeriod().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingAdaptiveThresholdsDetectionPeriod) NotIn(values []*durationpb.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().AdaptiveThresholdsDetectionPeriod().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingAdaptiveThresholdsDetectionPeriod) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().AdaptiveThresholdsDetectionPeriod().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingAdaptiveThresholdsDetectionPeriod) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().AdaptiveThresholdsDetectionPeriod().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateThresholdAlertingAdaptiveThresholdsDetectionPeriod) compare(op gotenfilter.CompareOperator, value *durationpb.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		TsConditionTemplate_FieldPathValue: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().ThresholdAlerting().AdaptiveThresholdsDetectionPeriod().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateAnomalyAlerting struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateAnomalyAlerting) Eq(value []*rcommon.TsCndSpec_AnomalyAlertingCfg) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlerting) Neq(value []*rcommon.TsCndSpec_AnomalyAlertingCfg) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlerting) Gt(value []*rcommon.TsCndSpec_AnomalyAlertingCfg) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlerting) Gte(value []*rcommon.TsCndSpec_AnomalyAlertingCfg) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlerting) Lt(value []*rcommon.TsCndSpec_AnomalyAlertingCfg) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlerting) Lte(value []*rcommon.TsCndSpec_AnomalyAlertingCfg) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlerting) In(values [][]*rcommon.TsCndSpec_AnomalyAlertingCfg) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().AnomalyAlerting().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateAnomalyAlerting) NotIn(values [][]*rcommon.TsCndSpec_AnomalyAlertingCfg) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().AnomalyAlerting().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateAnomalyAlerting) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().AnomalyAlerting().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateAnomalyAlerting) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().AnomalyAlerting().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateAnomalyAlerting) Contains(value *rcommon.TsCndSpec_AnomalyAlertingCfg) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().AnomalyAlerting().FieldPath(),
		Value:     NewTsConditionTemplateFieldPathBuilder().SpecTemplate().AnomalyAlerting().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateAnomalyAlerting) ContainsAnyOf(values []*rcommon.TsCndSpec_AnomalyAlertingCfg) *FilterBuilder {
	pathSelector := NewTsConditionTemplateFieldPathBuilder().SpecTemplate().AnomalyAlerting()
	itemValues := make([]TsConditionTemplate_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().AnomalyAlerting().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateAnomalyAlerting) ContainsAll(values []*rcommon.TsCndSpec_AnomalyAlertingCfg) *FilterBuilder {
	pathSelector := NewTsConditionTemplateFieldPathBuilder().SpecTemplate().AnomalyAlerting()
	itemValues := make([]TsConditionTemplate_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().AnomalyAlerting().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateAnomalyAlerting) compare(op gotenfilter.CompareOperator, value []*rcommon.TsCndSpec_AnomalyAlertingCfg) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		TsConditionTemplate_FieldPathValue: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().AnomalyAlerting().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateAnomalyAlerting) AnalysisWindow() *filterCndBuilderSpecTemplateAnomalyAlertingAnalysisWindow {
	return &filterCndBuilderSpecTemplateAnomalyAlertingAnalysisWindow{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateAnomalyAlerting) StepInterval() *filterCndBuilderSpecTemplateAnomalyAlertingStepInterval {
	return &filterCndBuilderSpecTemplateAnomalyAlertingStepInterval{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateAnomalyAlerting) TrainStepInterval() *filterCndBuilderSpecTemplateAnomalyAlertingTrainStepInterval {
	return &filterCndBuilderSpecTemplateAnomalyAlertingTrainStepInterval{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateAnomalyAlerting) AlignmentPeriod() *filterCndBuilderSpecTemplateAnomalyAlertingAlignmentPeriod {
	return &filterCndBuilderSpecTemplateAnomalyAlertingAlignmentPeriod{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateAnomalyAlerting) LstmAutoencoder() *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoder {
	return &filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoder{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateAnomalyAlerting) RaiseAfter() *filterCndBuilderSpecTemplateAnomalyAlertingRaiseAfter {
	return &filterCndBuilderSpecTemplateAnomalyAlertingRaiseAfter{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateAnomalyAlerting) SilenceAfter() *filterCndBuilderSpecTemplateAnomalyAlertingSilenceAfter {
	return &filterCndBuilderSpecTemplateAnomalyAlertingSilenceAfter{builder: b.builder}
}

type filterCndBuilderSpecTemplateAnomalyAlertingAnalysisWindow struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingAnalysisWindow) Eq(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingAnalysisWindow) Neq(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingAnalysisWindow) Gt(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingAnalysisWindow) Gte(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingAnalysisWindow) Lt(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingAnalysisWindow) Lte(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingAnalysisWindow) In(values []*durationpb.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().AnomalyAlerting().AnalysisWindow().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingAnalysisWindow) NotIn(values []*durationpb.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().AnomalyAlerting().AnalysisWindow().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingAnalysisWindow) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().AnomalyAlerting().AnalysisWindow().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingAnalysisWindow) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().AnomalyAlerting().AnalysisWindow().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingAnalysisWindow) compare(op gotenfilter.CompareOperator, value *durationpb.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		TsConditionTemplate_FieldPathValue: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().AnomalyAlerting().AnalysisWindow().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateAnomalyAlertingStepInterval struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingStepInterval) Eq(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingStepInterval) Neq(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingStepInterval) Gt(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingStepInterval) Gte(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingStepInterval) Lt(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingStepInterval) Lte(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingStepInterval) In(values []*durationpb.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().AnomalyAlerting().StepInterval().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingStepInterval) NotIn(values []*durationpb.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().AnomalyAlerting().StepInterval().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingStepInterval) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().AnomalyAlerting().StepInterval().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingStepInterval) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().AnomalyAlerting().StepInterval().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingStepInterval) compare(op gotenfilter.CompareOperator, value *durationpb.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		TsConditionTemplate_FieldPathValue: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().AnomalyAlerting().StepInterval().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateAnomalyAlertingTrainStepInterval struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingTrainStepInterval) Eq(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingTrainStepInterval) Neq(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingTrainStepInterval) Gt(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingTrainStepInterval) Gte(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingTrainStepInterval) Lt(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingTrainStepInterval) Lte(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingTrainStepInterval) In(values []*durationpb.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().AnomalyAlerting().TrainStepInterval().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingTrainStepInterval) NotIn(values []*durationpb.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().AnomalyAlerting().TrainStepInterval().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingTrainStepInterval) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().AnomalyAlerting().TrainStepInterval().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingTrainStepInterval) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().AnomalyAlerting().TrainStepInterval().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingTrainStepInterval) compare(op gotenfilter.CompareOperator, value *durationpb.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		TsConditionTemplate_FieldPathValue: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().AnomalyAlerting().TrainStepInterval().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateAnomalyAlertingAlignmentPeriod struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingAlignmentPeriod) Eq(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingAlignmentPeriod) Neq(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingAlignmentPeriod) Gt(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingAlignmentPeriod) Gte(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingAlignmentPeriod) Lt(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingAlignmentPeriod) Lte(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingAlignmentPeriod) In(values []*durationpb.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().AnomalyAlerting().AlignmentPeriod().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingAlignmentPeriod) NotIn(values []*durationpb.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().AnomalyAlerting().AlignmentPeriod().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingAlignmentPeriod) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().AnomalyAlerting().AlignmentPeriod().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingAlignmentPeriod) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().AnomalyAlerting().AlignmentPeriod().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingAlignmentPeriod) compare(op gotenfilter.CompareOperator, value *durationpb.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		TsConditionTemplate_FieldPathValue: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().AnomalyAlerting().AlignmentPeriod().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoder struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoder) Eq(value *rcommon.TsCndSpec_AnomalyAlertingCfg_LstmAutoEncoder) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoder) Neq(value *rcommon.TsCndSpec_AnomalyAlertingCfg_LstmAutoEncoder) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoder) Gt(value *rcommon.TsCndSpec_AnomalyAlertingCfg_LstmAutoEncoder) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoder) Gte(value *rcommon.TsCndSpec_AnomalyAlertingCfg_LstmAutoEncoder) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoder) Lt(value *rcommon.TsCndSpec_AnomalyAlertingCfg_LstmAutoEncoder) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoder) Lte(value *rcommon.TsCndSpec_AnomalyAlertingCfg_LstmAutoEncoder) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoder) In(values []*rcommon.TsCndSpec_AnomalyAlertingCfg_LstmAutoEncoder) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().AnomalyAlerting().LstmAutoencoder().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoder) NotIn(values []*rcommon.TsCndSpec_AnomalyAlertingCfg_LstmAutoEncoder) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().AnomalyAlerting().LstmAutoencoder().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoder) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().AnomalyAlerting().LstmAutoencoder().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoder) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().AnomalyAlerting().LstmAutoencoder().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoder) compare(op gotenfilter.CompareOperator, value *rcommon.TsCndSpec_AnomalyAlertingCfg_LstmAutoEncoder) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		TsConditionTemplate_FieldPathValue: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().AnomalyAlerting().LstmAutoencoder().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoder) HiddenSize() *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderHiddenSize {
	return &filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderHiddenSize{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoder) LearnRate() *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderLearnRate {
	return &filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderLearnRate{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoder) MaxTrainingEpochs() *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderMaxTrainingEpochs {
	return &filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderMaxTrainingEpochs{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoder) MinTrainingEpochs() *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderMinTrainingEpochs {
	return &filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderMinTrainingEpochs{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoder) AcceptableTrainingError() *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderAcceptableTrainingError {
	return &filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderAcceptableTrainingError{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoder) TrainingPeriod() *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderTrainingPeriod {
	return &filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderTrainingPeriod{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoder) CheckPeriodFraction() *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderCheckPeriodFraction {
	return &filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderCheckPeriodFraction{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoder) TeacherForceAtInference() *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderTeacherForceAtInference {
	return &filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderTeacherForceAtInference{builder: b.builder}
}

type filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderHiddenSize struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderHiddenSize) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderHiddenSize) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderHiddenSize) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderHiddenSize) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderHiddenSize) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderHiddenSize) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderHiddenSize) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().AnomalyAlerting().LstmAutoencoder().HiddenSize().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderHiddenSize) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().AnomalyAlerting().LstmAutoencoder().HiddenSize().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderHiddenSize) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().AnomalyAlerting().LstmAutoencoder().HiddenSize().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderHiddenSize) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().AnomalyAlerting().LstmAutoencoder().HiddenSize().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderHiddenSize) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		TsConditionTemplate_FieldPathValue: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().AnomalyAlerting().LstmAutoencoder().HiddenSize().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderLearnRate struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderLearnRate) Eq(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderLearnRate) Neq(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderLearnRate) Gt(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderLearnRate) Gte(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderLearnRate) Lt(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderLearnRate) Lte(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderLearnRate) In(values []float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().AnomalyAlerting().LstmAutoencoder().LearnRate().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderLearnRate) NotIn(values []float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().AnomalyAlerting().LstmAutoencoder().LearnRate().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderLearnRate) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().AnomalyAlerting().LstmAutoencoder().LearnRate().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderLearnRate) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().AnomalyAlerting().LstmAutoencoder().LearnRate().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderLearnRate) compare(op gotenfilter.CompareOperator, value float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		TsConditionTemplate_FieldPathValue: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().AnomalyAlerting().LstmAutoencoder().LearnRate().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderMaxTrainingEpochs struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderMaxTrainingEpochs) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderMaxTrainingEpochs) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderMaxTrainingEpochs) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderMaxTrainingEpochs) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderMaxTrainingEpochs) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderMaxTrainingEpochs) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderMaxTrainingEpochs) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().AnomalyAlerting().LstmAutoencoder().MaxTrainingEpochs().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderMaxTrainingEpochs) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().AnomalyAlerting().LstmAutoencoder().MaxTrainingEpochs().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderMaxTrainingEpochs) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().AnomalyAlerting().LstmAutoencoder().MaxTrainingEpochs().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderMaxTrainingEpochs) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().AnomalyAlerting().LstmAutoencoder().MaxTrainingEpochs().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderMaxTrainingEpochs) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		TsConditionTemplate_FieldPathValue: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().AnomalyAlerting().LstmAutoencoder().MaxTrainingEpochs().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderMinTrainingEpochs struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderMinTrainingEpochs) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderMinTrainingEpochs) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderMinTrainingEpochs) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderMinTrainingEpochs) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderMinTrainingEpochs) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderMinTrainingEpochs) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderMinTrainingEpochs) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().AnomalyAlerting().LstmAutoencoder().MinTrainingEpochs().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderMinTrainingEpochs) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().AnomalyAlerting().LstmAutoencoder().MinTrainingEpochs().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderMinTrainingEpochs) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().AnomalyAlerting().LstmAutoencoder().MinTrainingEpochs().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderMinTrainingEpochs) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().AnomalyAlerting().LstmAutoencoder().MinTrainingEpochs().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderMinTrainingEpochs) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		TsConditionTemplate_FieldPathValue: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().AnomalyAlerting().LstmAutoencoder().MinTrainingEpochs().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderAcceptableTrainingError struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderAcceptableTrainingError) Eq(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderAcceptableTrainingError) Neq(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderAcceptableTrainingError) Gt(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderAcceptableTrainingError) Gte(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderAcceptableTrainingError) Lt(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderAcceptableTrainingError) Lte(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderAcceptableTrainingError) In(values []float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().AnomalyAlerting().LstmAutoencoder().AcceptableTrainingError().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderAcceptableTrainingError) NotIn(values []float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().AnomalyAlerting().LstmAutoencoder().AcceptableTrainingError().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderAcceptableTrainingError) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().AnomalyAlerting().LstmAutoencoder().AcceptableTrainingError().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderAcceptableTrainingError) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().AnomalyAlerting().LstmAutoencoder().AcceptableTrainingError().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderAcceptableTrainingError) compare(op gotenfilter.CompareOperator, value float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		TsConditionTemplate_FieldPathValue: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().AnomalyAlerting().LstmAutoencoder().AcceptableTrainingError().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderTrainingPeriod struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderTrainingPeriod) Eq(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderTrainingPeriod) Neq(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderTrainingPeriod) Gt(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderTrainingPeriod) Gte(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderTrainingPeriod) Lt(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderTrainingPeriod) Lte(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderTrainingPeriod) In(values []*durationpb.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().AnomalyAlerting().LstmAutoencoder().TrainingPeriod().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderTrainingPeriod) NotIn(values []*durationpb.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().AnomalyAlerting().LstmAutoencoder().TrainingPeriod().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderTrainingPeriod) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().AnomalyAlerting().LstmAutoencoder().TrainingPeriod().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderTrainingPeriod) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().AnomalyAlerting().LstmAutoencoder().TrainingPeriod().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderTrainingPeriod) compare(op gotenfilter.CompareOperator, value *durationpb.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		TsConditionTemplate_FieldPathValue: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().AnomalyAlerting().LstmAutoencoder().TrainingPeriod().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderCheckPeriodFraction struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderCheckPeriodFraction) Eq(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderCheckPeriodFraction) Neq(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderCheckPeriodFraction) Gt(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderCheckPeriodFraction) Gte(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderCheckPeriodFraction) Lt(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderCheckPeriodFraction) Lte(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderCheckPeriodFraction) In(values []float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().AnomalyAlerting().LstmAutoencoder().CheckPeriodFraction().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderCheckPeriodFraction) NotIn(values []float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().AnomalyAlerting().LstmAutoencoder().CheckPeriodFraction().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderCheckPeriodFraction) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().AnomalyAlerting().LstmAutoencoder().CheckPeriodFraction().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderCheckPeriodFraction) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().AnomalyAlerting().LstmAutoencoder().CheckPeriodFraction().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderCheckPeriodFraction) compare(op gotenfilter.CompareOperator, value float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		TsConditionTemplate_FieldPathValue: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().AnomalyAlerting().LstmAutoencoder().CheckPeriodFraction().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderTeacherForceAtInference struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderTeacherForceAtInference) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderTeacherForceAtInference) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderTeacherForceAtInference) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderTeacherForceAtInference) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderTeacherForceAtInference) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderTeacherForceAtInference) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderTeacherForceAtInference) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().AnomalyAlerting().LstmAutoencoder().TeacherForceAtInference().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderTeacherForceAtInference) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().AnomalyAlerting().LstmAutoencoder().TeacherForceAtInference().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderTeacherForceAtInference) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().AnomalyAlerting().LstmAutoencoder().TeacherForceAtInference().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderTeacherForceAtInference) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().AnomalyAlerting().LstmAutoencoder().TeacherForceAtInference().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingLstmAutoencoderTeacherForceAtInference) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		TsConditionTemplate_FieldPathValue: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().AnomalyAlerting().LstmAutoencoder().TeacherForceAtInference().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateAnomalyAlertingRaiseAfter struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingRaiseAfter) Eq(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingRaiseAfter) Neq(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingRaiseAfter) Gt(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingRaiseAfter) Gte(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingRaiseAfter) Lt(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingRaiseAfter) Lte(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingRaiseAfter) In(values []*durationpb.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().AnomalyAlerting().RaiseAfter().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingRaiseAfter) NotIn(values []*durationpb.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().AnomalyAlerting().RaiseAfter().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingRaiseAfter) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().AnomalyAlerting().RaiseAfter().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingRaiseAfter) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().AnomalyAlerting().RaiseAfter().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingRaiseAfter) compare(op gotenfilter.CompareOperator, value *durationpb.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		TsConditionTemplate_FieldPathValue: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().AnomalyAlerting().RaiseAfter().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateAnomalyAlertingSilenceAfter struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingSilenceAfter) Eq(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingSilenceAfter) Neq(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingSilenceAfter) Gt(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingSilenceAfter) Gte(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingSilenceAfter) Lt(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingSilenceAfter) Lte(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingSilenceAfter) In(values []*durationpb.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().AnomalyAlerting().SilenceAfter().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingSilenceAfter) NotIn(values []*durationpb.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsConditionTemplate_FieldPathArrayOfValues: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().AnomalyAlerting().SilenceAfter().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingSilenceAfter) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().AnomalyAlerting().SilenceAfter().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingSilenceAfter) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().AnomalyAlerting().SilenceAfter().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateAnomalyAlertingSilenceAfter) compare(op gotenfilter.CompareOperator, value *durationpb.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		TsConditionTemplate_FieldPathValue: NewTsConditionTemplateFieldPathBuilder().SpecTemplate().AnomalyAlerting().SilenceAfter().WithValue(value),
	})
}
