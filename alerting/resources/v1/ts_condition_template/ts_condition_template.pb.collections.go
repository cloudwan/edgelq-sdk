// Code generated by protoc-gen-goten-resource
// Resource: TsConditionTemplate
// DO NOT EDIT!!!

package ts_condition_template

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	document "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/document"
	policy_template "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/policy_template"
	ts_condition "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/ts_condition"
	meta "github.com/cloudwan/goten-sdk/types/meta"
)

// ensure the imports are used
var (
	_ = new(gotenresource.ListQuery)
)

// make sure we're using proto imports
var (
	_ = &document.Document{}
	_ = &policy_template.PolicyTemplate{}
	_ = &ts_condition.TsCondition{}
	_ = &meta.Meta{}
)

type TsConditionTemplateList []*TsConditionTemplate

func (l TsConditionTemplateList) Append(item gotenresource.Resource) gotenresource.ResourceList {
	return append(l, item.(*TsConditionTemplate))
}

func (l TsConditionTemplateList) AppendList(list gotenresource.ResourceList) gotenresource.ResourceList {
	return append(l, list.(TsConditionTemplateList)...)
}

func (l TsConditionTemplateList) Slice(first, second int) gotenresource.ResourceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l TsConditionTemplateList) At(idx int) gotenresource.Resource {
	return l[idx]
}

func (l TsConditionTemplateList) Set(idx int, res gotenresource.Resource) {
	l[idx] = res.(*TsConditionTemplate)
}

func (l TsConditionTemplateList) Length() int {
	return len(l)
}

type TsConditionTemplateChangeList []*TsConditionTemplateChange

func (l TsConditionTemplateChangeList) Append(item gotenresource.ResourceChange) gotenresource.ResourceChangeList {
	return append(l, item.(*TsConditionTemplateChange))
}

func (l TsConditionTemplateChangeList) AppendList(list gotenresource.ResourceChangeList) gotenresource.ResourceChangeList {
	return append(l, list.(TsConditionTemplateChangeList)...)
}

func (l TsConditionTemplateChangeList) Slice(first, second int) gotenresource.ResourceChangeList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l TsConditionTemplateChangeList) At(idx int) gotenresource.ResourceChange {
	return l[idx]
}

func (l TsConditionTemplateChangeList) Set(idx int, change gotenresource.ResourceChange) {
	l[idx] = change.(*TsConditionTemplateChange)
}

func (l TsConditionTemplateChangeList) Length() int {
	return len(l)
}

type TsConditionTemplateNameList []*Name

func (l TsConditionTemplateNameList) Append(name gotenresource.Name) gotenresource.NameList {
	return append(l, name.(*Name))
}

func (l TsConditionTemplateNameList) AppendList(list gotenresource.NameList) gotenresource.NameList {
	return append(l, list.(TsConditionTemplateNameList)...)
}

func (l TsConditionTemplateNameList) Slice(first, second int) gotenresource.NameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l TsConditionTemplateNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l TsConditionTemplateNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*Name)
}

func (l TsConditionTemplateNameList) Length() int {
	return len(l)
}

type TsConditionTemplateReferenceList []*Reference

func (l TsConditionTemplateReferenceList) Append(ref gotenresource.Reference) gotenresource.ReferenceList {
	return append(l, ref.(*Reference))
}

func (l TsConditionTemplateReferenceList) AppendList(list gotenresource.ReferenceList) gotenresource.ReferenceList {
	return append(l, list.(TsConditionTemplateReferenceList)...)
}

func (l TsConditionTemplateReferenceList) Slice(first, second int) gotenresource.ReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l TsConditionTemplateReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l TsConditionTemplateReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*Reference)
}

func (l TsConditionTemplateReferenceList) Length() int {
	return len(l)
}

type TsConditionTemplateParentNameList []*ParentName

func (l TsConditionTemplateParentNameList) Append(name gotenresource.Name) gotenresource.ParentNameList {
	return append(l, name.(*ParentName))
}

func (l TsConditionTemplateParentNameList) AppendList(list gotenresource.ParentNameList) gotenresource.ParentNameList {
	return append(l, list.(TsConditionTemplateParentNameList)...)
}

func (l TsConditionTemplateParentNameList) Slice(first, second int) gotenresource.ParentNameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l TsConditionTemplateParentNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l TsConditionTemplateParentNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*ParentName)
}

func (l TsConditionTemplateParentNameList) Length() int {
	return len(l)
}

type TsConditionTemplateParentReferenceList []*ParentReference

func (l TsConditionTemplateParentReferenceList) Append(ref gotenresource.Reference) gotenresource.ParentReferenceList {
	return append(l, ref.(*ParentReference))
}

func (l TsConditionTemplateParentReferenceList) AppendList(list gotenresource.ParentReferenceList) gotenresource.ParentReferenceList {
	return append(l, list.(TsConditionTemplateParentReferenceList)...)
}

func (l TsConditionTemplateParentReferenceList) Slice(first, second int) gotenresource.ParentReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l TsConditionTemplateParentReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l TsConditionTemplateParentReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*ParentReference)
}

func (l TsConditionTemplateParentReferenceList) Length() int {
	return len(l)
}

type TsConditionTemplateMap map[Name]*TsConditionTemplate

func (m TsConditionTemplateMap) Get(name gotenresource.Name) gotenresource.Resource {
	return m[*name.(*Name)]
}

func (m TsConditionTemplateMap) Set(res gotenresource.Resource) {
	tRes := res.(*TsConditionTemplate)
	m[*tRes.Name] = tRes
}

func (m TsConditionTemplateMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m TsConditionTemplateMap) Length() int {
	return len(m)
}

func (m TsConditionTemplateMap) ForEach(cb func(gotenresource.Name, gotenresource.Resource) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}

type TsConditionTemplateChangeMap map[Name]*TsConditionTemplateChange

func (m TsConditionTemplateChangeMap) Get(name gotenresource.Name) gotenresource.ResourceChange {
	return m[*name.(*Name)]
}

func (m TsConditionTemplateChangeMap) Set(change gotenresource.ResourceChange) {
	tChange := change.(*TsConditionTemplateChange)
	m[*tChange.GetTsConditionTemplateName()] = tChange
}

func (m TsConditionTemplateChangeMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m TsConditionTemplateChangeMap) Length() int {
	return len(m)
}

func (m TsConditionTemplateChangeMap) ForEach(cb func(gotenresource.Name, gotenresource.ResourceChange) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}
