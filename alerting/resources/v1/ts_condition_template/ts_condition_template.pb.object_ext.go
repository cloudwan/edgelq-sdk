// Code generated by protoc-gen-goten-object
// File: edgelq/alerting/proto/v1/ts_condition_template.proto
// DO NOT EDIT!!!

package ts_condition_template

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	googlefieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	document "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/document"
	policy_template "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/policy_template"
	ts_condition "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/ts_condition"
	meta "github.com/cloudwan/goten-sdk/types/meta"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = googlefieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &document.Document{}
	_ = &policy_template.PolicyTemplate{}
	_ = &ts_condition.TsCondition{}
	_ = &meta.Meta{}
)

func (o *TsConditionTemplate) GotenObjectExt() {}

func (o *TsConditionTemplate) MakeFullFieldMask() *TsConditionTemplate_FieldMask {
	return FullTsConditionTemplate_FieldMask()
}

func (o *TsConditionTemplate) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullTsConditionTemplate_FieldMask()
}

func (o *TsConditionTemplate) MakeDiffFieldMask(other *TsConditionTemplate) *TsConditionTemplate_FieldMask {
	if o == nil && other == nil {
		return &TsConditionTemplate_FieldMask{}
	}
	if o == nil || other == nil {
		return FullTsConditionTemplate_FieldMask()
	}

	res := &TsConditionTemplate_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &TsConditionTemplate_FieldTerminalPath{selector: TsConditionTemplate_FieldPathSelectorName})
	}
	{
		subMask := o.GetMetadata().MakeDiffFieldMask(other.GetMetadata())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &TsConditionTemplate_FieldTerminalPath{selector: TsConditionTemplate_FieldPathSelectorMetadata})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &TsConditionTemplate_FieldSubPath{selector: TsConditionTemplate_FieldPathSelectorMetadata, subPath: subpath})
			}
		}
	}
	if o.GetDisplayName() != other.GetDisplayName() {
		res.Paths = append(res.Paths, &TsConditionTemplate_FieldTerminalPath{selector: TsConditionTemplate_FieldPathSelectorDisplayName})
	}
	if o.GetDescription() != other.GetDescription() {
		res.Paths = append(res.Paths, &TsConditionTemplate_FieldTerminalPath{selector: TsConditionTemplate_FieldPathSelectorDescription})
	}

	if len(o.GetSupportingDocs()) == len(other.GetSupportingDocs()) {
		for i, lValue := range o.GetSupportingDocs() {
			rValue := other.GetSupportingDocs()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &TsConditionTemplate_FieldTerminalPath{selector: TsConditionTemplate_FieldPathSelectorSupportingDocs})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &TsConditionTemplate_FieldTerminalPath{selector: TsConditionTemplate_FieldPathSelectorSupportingDocs})
	}
	{
		subMask := o.GetSpecTemplate().MakeDiffFieldMask(other.GetSpecTemplate())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &TsConditionTemplate_FieldTerminalPath{selector: TsConditionTemplate_FieldPathSelectorSpecTemplate})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &TsConditionTemplate_FieldSubPath{selector: TsConditionTemplate_FieldPathSelectorSpecTemplate, subPath: subpath})
			}
		}
	}
	return res
}

func (o *TsConditionTemplate) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*TsConditionTemplate))
}

func (o *TsConditionTemplate) Clone() *TsConditionTemplate {
	if o == nil {
		return nil
	}
	result := &TsConditionTemplate{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &Name{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Metadata = o.Metadata.Clone()
	result.DisplayName = o.DisplayName
	result.Description = o.Description
	result.SupportingDocs = make([]*document.Reference, len(o.SupportingDocs))
	for i, sourceValue := range o.SupportingDocs {
		if sourceValue == nil {
			result.SupportingDocs[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.SupportingDocs[i] = &document.Reference{}
			if err := result.SupportingDocs[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	result.SpecTemplate = o.SpecTemplate.Clone()
	return result
}

func (o *TsConditionTemplate) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *TsConditionTemplate) Merge(source *TsConditionTemplate) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &Name{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetMetadata() != nil {
		if o.Metadata == nil {
			o.Metadata = new(meta.Meta)
		}
		o.Metadata.Merge(source.GetMetadata())
	}
	o.DisplayName = source.GetDisplayName()
	o.Description = source.GetDescription()
	for _, sourceValue := range source.GetSupportingDocs() {
		exists := false
		for _, currentValue := range o.SupportingDocs {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *document.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &document.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.SupportingDocs = append(o.SupportingDocs, newDstElement)
		}
	}

	if source.GetSpecTemplate() != nil {
		if o.SpecTemplate == nil {
			o.SpecTemplate = new(ts_condition.TsCondition_Spec)
		}
		o.SpecTemplate.Merge(source.GetSpecTemplate())
	}
}

func (o *TsConditionTemplate) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*TsConditionTemplate))
}
