// Code generated by protoc-gen-goten-validate
// File: edgelq/alerting/proto/v1/notification_msg.proto
// DO NOT EDIT!!!

package notification_msg

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	gotenvalidate "github.com/cloudwan/goten-sdk/runtime/validate"
)

// proto imports
import (
	alert "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/alert"
	log_condition "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/log_condition"
	policy "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/policy"
	ts_condition "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/ts_condition"
	iam_organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1/organization"
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1/project"
	monitoring_common "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/common"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

var (
	_ = bytes.Equal
	_ = errors.New
	_ = fmt.Errorf
	_ = net.ParseIP
	_ = regexp.Match
	_ = strings.Split
	_ = time.Now
	_ = utf8.RuneCountInString
	_ = url.Parse
	_ = gotenvalidate.NewValidationError
)

// make sure we're using proto imports
var (
	_ = &alert.Alert{}
	_ = &log_condition.LogCondition{}
	_ = &policy.Policy{}
	_ = &ts_condition.TsCondition{}
	_ = &iam_organization.Organization{}
	_ = &iam_project.Project{}
	_ = &monitoring_common.LabelDescriptor{}
	_ = &durationpb.Duration{}
	_ = &timestamppb.Timestamp{}
)

func (obj *NotificationMsg) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if subobj, ok := interface{}(obj.NewFiringAlerts).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("NotificationMsg", "newFiringAlerts", obj.NewFiringAlerts, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.AlertsEscalatedByAiToOperator).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("NotificationMsg", "alertsEscalatedByAiToOperator", obj.AlertsEscalatedByAiToOperator, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.AlertsAwaitingForApprovalWithAiRemediation).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("NotificationMsg", "alertsAwaitingForApprovalWithAiRemediation", obj.AlertsAwaitingForApprovalWithAiRemediation, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.AlertsFlaggedToIgnoreByAi).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("NotificationMsg", "alertsFlaggedToIgnoreByAi", obj.AlertsFlaggedToIgnoreByAi, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.AlertsWithConditionMarkedForAdjustingByAi).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("NotificationMsg", "alertsWithConditionMarkedForAdjustingByAi", obj.AlertsWithConditionMarkedForAdjustingByAi, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.AlertsWithAiRemediationApplied).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("NotificationMsg", "alertsWithAiRemediationApplied", obj.AlertsWithAiRemediationApplied, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.AlertsWithOperatorRemediationApplied).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("NotificationMsg", "alertsWithOperatorRemediationApplied", obj.AlertsWithOperatorRemediationApplied, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.StoppedAlerts).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("NotificationMsg", "stoppedAlerts", obj.StoppedAlerts, "nested object validation failed", err)
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *NotificationMsg_AlertsGroup) GotenValidate() error {
	if obj == nil {
		return nil
	}
	for idx, elem := range obj.ByCondition {
		if subobj, ok := interface{}(elem).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("AlertsGroup", "byCondition", obj.ByCondition[idx], "nested object validation failed", err)
			}
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *NotificationMsg_AlertsGroup_ConditionAlerts) GotenValidate() error {
	if obj == nil {
		return nil
	}
	for idx, elem := range obj.Alerts {
		if subobj, ok := interface{}(elem).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("ConditionAlerts", "alerts", obj.Alerts[idx], "nested object validation failed", err)
			}
		}
	}
	switch opt := obj.Type.(type) {
	case *NotificationMsg_AlertsGroup_ConditionAlerts_TimeSeriesCondition:
		if subobj, ok := interface{}(opt.TimeSeriesCondition).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("ConditionAlerts", "timeSeriesCondition", opt.TimeSeriesCondition, "nested object validation failed", err)
			}
		}
	case *NotificationMsg_AlertsGroup_ConditionAlerts_LogCondition:
		if subobj, ok := interface{}(opt.LogCondition).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("ConditionAlerts", "logCondition", opt.LogCondition, "nested object validation failed", err)
			}
		}
	default:
		_ = opt
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *NotificationMsg_AlertsGroup_ConditionAlerts_TsCndType) GotenValidate() error {
	if obj == nil {
		return nil
	}
	for idx, elem := range obj.Queries {
		if subobj, ok := interface{}(elem).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("TsCndType", "queries", obj.Queries[idx], "nested object validation failed", err)
			}
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *NotificationMsg_AlertsGroup_ConditionAlerts_LogCndType) GotenValidate() error {
	if obj == nil {
		return nil
	}
	for idx, elem := range obj.Queries {
		if subobj, ok := interface{}(elem).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("LogCndType", "queries", obj.Queries[idx], "nested object validation failed", err)
			}
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *NotificationMsg_AlertsGroup_ConditionAlerts_Alert) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if subobj, ok := interface{}(obj.Identification).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("Alert", "identification", obj.Identification, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.ViolationInfo).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("Alert", "violationInfo", obj.ViolationInfo, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.AiHandling).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("Alert", "aiHandling", obj.AiHandling, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.OperatorHandling).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("Alert", "operatorHandling", obj.OperatorHandling, "nested object validation failed", err)
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *NotificationMsg_AlertsGroup_ConditionAlerts_TsCndType_Query) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if subobj, ok := interface{}(obj.Aggregation).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("Query", "aggregation", obj.Aggregation, "nested object validation failed", err)
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *NotificationMsg_AlertsGroup_ConditionAlerts_LogCndType_Query) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *NotificationMsg_AlertsGroup_ConditionAlerts_Alert_Identification) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *NotificationMsg_AlertsGroup_ConditionAlerts_Alert_ViolationInfo) GotenValidate() error {
	if obj == nil {
		return nil
	}
	for idx, elem := range obj.TimeSeries {
		if subobj, ok := interface{}(elem).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("ViolationInfo", "timeSeries", obj.TimeSeries[idx], "nested object validation failed", err)
			}
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *NotificationMsg_AlertsGroup_ConditionAlerts_Alert_AiHandling) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if subobj, ok := interface{}(obj.AiRemediation).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("AiHandling", "aiRemediation", obj.AiRemediation, "nested object validation failed", err)
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *NotificationMsg_AlertsGroup_ConditionAlerts_Alert_OperatorHandling) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *NotificationMsg_AlertsGroup_ConditionAlerts_Alert_ViolationInfo_TimeSeries) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if subobj, ok := interface{}(obj.UpperThreshold).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("TimeSeries", "upperThreshold", obj.UpperThreshold, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.LowerThreshold).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("TimeSeries", "lowerThreshold", obj.LowerThreshold, "nested object validation failed", err)
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
