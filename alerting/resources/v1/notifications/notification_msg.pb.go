// Code generated by protoc-gen-goten-go
// File: edgelq/alerting/proto/v1/notification_msg.proto
// DO NOT EDIT!!!

package notification_msg

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	alert "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/alert"
	rcommon "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/common"
	log_condition "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/log_condition"
	policy "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/policy"
	ts_condition "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/ts_condition"
	iam_organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1/organization"
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1/project"
	monitoring_common "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/common"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &alert.Alert{}
	_ = &log_condition.LogCondition{}
	_ = &policy.Policy{}
	_ = &rcommon.LogCndSpec{}
	_ = &ts_condition.TsCondition{}
	_ = &iam_organization.Organization{}
	_ = &iam_project.Project{}
	_ = &monitoring_common.LabelDescriptor{}
	_ = &durationpb.Duration{}
	_ = &timestamppb.Timestamp{}
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NotificationMsg_AlertsGroup_ConditionAlerts_Alert_Type int32

const (
	NotificationMsg_AlertsGroup_ConditionAlerts_Alert_UNDEFINED          NotificationMsg_AlertsGroup_ConditionAlerts_Alert_Type = 0
	NotificationMsg_AlertsGroup_ConditionAlerts_Alert_TS_BASED_ANOMALY   NotificationMsg_AlertsGroup_ConditionAlerts_Alert_Type = 1
	NotificationMsg_AlertsGroup_ConditionAlerts_Alert_TS_BASED_THRESHOLD NotificationMsg_AlertsGroup_ConditionAlerts_Alert_Type = 2
	NotificationMsg_AlertsGroup_ConditionAlerts_Alert_LOG_BASED          NotificationMsg_AlertsGroup_ConditionAlerts_Alert_Type = 3
)

var (
	NotificationMsg_AlertsGroup_ConditionAlerts_Alert_Type_name = map[int32]string{
		0: "UNDEFINED",
		1: "TS_BASED_ANOMALY",
		2: "TS_BASED_THRESHOLD",
		3: "LOG_BASED",
	}

	NotificationMsg_AlertsGroup_ConditionAlerts_Alert_Type_value = map[string]int32{
		"UNDEFINED":          0,
		"TS_BASED_ANOMALY":   1,
		"TS_BASED_THRESHOLD": 2,
		"LOG_BASED":          3,
	}
)

func (x NotificationMsg_AlertsGroup_ConditionAlerts_Alert_Type) Enum() *NotificationMsg_AlertsGroup_ConditionAlerts_Alert_Type {
	p := new(NotificationMsg_AlertsGroup_ConditionAlerts_Alert_Type)
	*p = x
	return p
}

func (x NotificationMsg_AlertsGroup_ConditionAlerts_Alert_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (NotificationMsg_AlertsGroup_ConditionAlerts_Alert_Type) Descriptor() preflect.EnumDescriptor {
	return edgelq_alerting_proto_v1_notification_msg_proto_enumTypes[0].Descriptor()
}

func (NotificationMsg_AlertsGroup_ConditionAlerts_Alert_Type) Type() preflect.EnumType {
	return &edgelq_alerting_proto_v1_notification_msg_proto_enumTypes[0]
}

func (x NotificationMsg_AlertsGroup_ConditionAlerts_Alert_Type) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use NotificationMsg_AlertsGroup_ConditionAlerts_Alert_Type.ProtoReflect.Descriptor instead.
func (NotificationMsg_AlertsGroup_ConditionAlerts_Alert_Type) EnumDescriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_notification_msg_proto_rawDescGZIP(), []int{0, 0, 0, 2, 0}
}

// NotificationMsg is a notification message sent to channels,
// according to NotificationChannel resource.
type NotificationMsg struct {
	state                                      protoimpl.MessageState
	sizeCache                                  protoimpl.SizeCache
	unknownFields                              protoimpl.UnknownFields
	ProjectFqn                                 *iam_project.Name            `protobuf:"bytes,1,opt,customtype=Name,name=project_fqn,json=projectFqn,proto3" json:"project_fqn,omitempty"`
	ProjectDisplayName                         string                       `protobuf:"bytes,2,opt,name=project_display_name,json=projectDisplayName,proto3" json:"project_display_name,omitempty"`
	OrganizationFqn                            *iam_organization.Name       `protobuf:"bytes,3,opt,customtype=Name,name=organization_fqn,json=organizationFqn,proto3" json:"organization_fqn,omitempty"`
	OrganizationDisplayName                    string                       `protobuf:"bytes,4,opt,name=organization_display_name,json=organizationDisplayName,proto3" json:"organization_display_name,omitempty"`
	PolicyFqn                                  *policy.Name                 `protobuf:"bytes,5,opt,customtype=Name,name=policy_fqn,json=policyFqn,proto3" json:"policy_fqn,omitempty"`
	PolicyDisplayName                          string                       `protobuf:"bytes,6,opt,name=policy_display_name,json=policyDisplayName,proto3" json:"policy_display_name,omitempty"`
	NewFiringAlerts                            *NotificationMsg_AlertsGroup `protobuf:"bytes,7,opt,name=new_firing_alerts,json=newFiringAlerts,proto3" json:"new_firing_alerts,omitempty"`
	AlertsEscalatedByAiToOperator              *NotificationMsg_AlertsGroup `protobuf:"bytes,8,opt,name=alerts_escalated_by_ai_to_operator,json=alertsEscalatedByAiToOperator,proto3" json:"alerts_escalated_by_ai_to_operator,omitempty"`
	AlertsAwaitingForApprovalWithAiRemediation *NotificationMsg_AlertsGroup `protobuf:"bytes,9,opt,name=alerts_awaiting_for_approval_with_ai_remediation,json=alertsAwaitingForApprovalWithAiRemediation,proto3" json:"alerts_awaiting_for_approval_with_ai_remediation,omitempty"`
	AlertsFlaggedToIgnoreByAi                  *NotificationMsg_AlertsGroup `protobuf:"bytes,10,opt,name=alerts_flagged_to_ignore_by_ai,json=alertsFlaggedToIgnoreByAi,proto3" json:"alerts_flagged_to_ignore_by_ai,omitempty"`
	AlertsWithConditionMarkedForAdjustingByAi  *NotificationMsg_AlertsGroup `protobuf:"bytes,11,opt,name=alerts_with_condition_marked_for_adjusting_by_ai,json=alertsWithConditionMarkedForAdjustingByAi,proto3" json:"alerts_with_condition_marked_for_adjusting_by_ai,omitempty"`
	AlertsWithAiRemediationApplied             *NotificationMsg_AlertsGroup `protobuf:"bytes,12,opt,name=alerts_with_ai_remediation_applied,json=alertsWithAiRemediationApplied,proto3" json:"alerts_with_ai_remediation_applied,omitempty"`
	AlertsWithOperatorRemediationApplied       *NotificationMsg_AlertsGroup `protobuf:"bytes,13,opt,name=alerts_with_operator_remediation_applied,json=alertsWithOperatorRemediationApplied,proto3" json:"alerts_with_operator_remediation_applied,omitempty"`
	StoppedAlerts                              *NotificationMsg_AlertsGroup `protobuf:"bytes,14,opt,name=stopped_alerts,json=stoppedAlerts,proto3" json:"stopped_alerts,omitempty"`
}

func (m *NotificationMsg) Reset() {
	*m = NotificationMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_notification_msg_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *NotificationMsg) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*NotificationMsg) ProtoMessage() {}

func (m *NotificationMsg) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_notification_msg_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*NotificationMsg) GotenMessage() {}

// Deprecated, Use NotificationMsg.ProtoReflect.Descriptor instead.
func (*NotificationMsg) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_notification_msg_proto_rawDescGZIP(), []int{0}
}

func (m *NotificationMsg) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *NotificationMsg) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *NotificationMsg) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *NotificationMsg) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *NotificationMsg) GetProjectFqn() *iam_project.Name {
	if m != nil {
		return m.ProjectFqn
	}
	return nil
}

func (m *NotificationMsg) GetProjectDisplayName() string {
	if m != nil {
		return m.ProjectDisplayName
	}
	return ""
}

func (m *NotificationMsg) GetOrganizationFqn() *iam_organization.Name {
	if m != nil {
		return m.OrganizationFqn
	}
	return nil
}

func (m *NotificationMsg) GetOrganizationDisplayName() string {
	if m != nil {
		return m.OrganizationDisplayName
	}
	return ""
}

func (m *NotificationMsg) GetPolicyFqn() *policy.Name {
	if m != nil {
		return m.PolicyFqn
	}
	return nil
}

func (m *NotificationMsg) GetPolicyDisplayName() string {
	if m != nil {
		return m.PolicyDisplayName
	}
	return ""
}

func (m *NotificationMsg) GetNewFiringAlerts() *NotificationMsg_AlertsGroup {
	if m != nil {
		return m.NewFiringAlerts
	}
	return nil
}

func (m *NotificationMsg) GetAlertsEscalatedByAiToOperator() *NotificationMsg_AlertsGroup {
	if m != nil {
		return m.AlertsEscalatedByAiToOperator
	}
	return nil
}

func (m *NotificationMsg) GetAlertsAwaitingForApprovalWithAiRemediation() *NotificationMsg_AlertsGroup {
	if m != nil {
		return m.AlertsAwaitingForApprovalWithAiRemediation
	}
	return nil
}

func (m *NotificationMsg) GetAlertsFlaggedToIgnoreByAi() *NotificationMsg_AlertsGroup {
	if m != nil {
		return m.AlertsFlaggedToIgnoreByAi
	}
	return nil
}

func (m *NotificationMsg) GetAlertsWithConditionMarkedForAdjustingByAi() *NotificationMsg_AlertsGroup {
	if m != nil {
		return m.AlertsWithConditionMarkedForAdjustingByAi
	}
	return nil
}

func (m *NotificationMsg) GetAlertsWithAiRemediationApplied() *NotificationMsg_AlertsGroup {
	if m != nil {
		return m.AlertsWithAiRemediationApplied
	}
	return nil
}

func (m *NotificationMsg) GetAlertsWithOperatorRemediationApplied() *NotificationMsg_AlertsGroup {
	if m != nil {
		return m.AlertsWithOperatorRemediationApplied
	}
	return nil
}

func (m *NotificationMsg) GetStoppedAlerts() *NotificationMsg_AlertsGroup {
	if m != nil {
		return m.StoppedAlerts
	}
	return nil
}

func (m *NotificationMsg) SetProjectFqn(fv *iam_project.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ProjectFqn", "NotificationMsg"))
	}
	m.ProjectFqn = fv
}

func (m *NotificationMsg) SetProjectDisplayName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ProjectDisplayName", "NotificationMsg"))
	}
	m.ProjectDisplayName = fv
}

func (m *NotificationMsg) SetOrganizationFqn(fv *iam_organization.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OrganizationFqn", "NotificationMsg"))
	}
	m.OrganizationFqn = fv
}

func (m *NotificationMsg) SetOrganizationDisplayName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OrganizationDisplayName", "NotificationMsg"))
	}
	m.OrganizationDisplayName = fv
}

func (m *NotificationMsg) SetPolicyFqn(fv *policy.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PolicyFqn", "NotificationMsg"))
	}
	m.PolicyFqn = fv
}

func (m *NotificationMsg) SetPolicyDisplayName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PolicyDisplayName", "NotificationMsg"))
	}
	m.PolicyDisplayName = fv
}

func (m *NotificationMsg) SetNewFiringAlerts(fv *NotificationMsg_AlertsGroup) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NewFiringAlerts", "NotificationMsg"))
	}
	m.NewFiringAlerts = fv
}

func (m *NotificationMsg) SetAlertsEscalatedByAiToOperator(fv *NotificationMsg_AlertsGroup) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AlertsEscalatedByAiToOperator", "NotificationMsg"))
	}
	m.AlertsEscalatedByAiToOperator = fv
}

func (m *NotificationMsg) SetAlertsAwaitingForApprovalWithAiRemediation(fv *NotificationMsg_AlertsGroup) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AlertsAwaitingForApprovalWithAiRemediation", "NotificationMsg"))
	}
	m.AlertsAwaitingForApprovalWithAiRemediation = fv
}

func (m *NotificationMsg) SetAlertsFlaggedToIgnoreByAi(fv *NotificationMsg_AlertsGroup) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AlertsFlaggedToIgnoreByAi", "NotificationMsg"))
	}
	m.AlertsFlaggedToIgnoreByAi = fv
}

func (m *NotificationMsg) SetAlertsWithConditionMarkedForAdjustingByAi(fv *NotificationMsg_AlertsGroup) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AlertsWithConditionMarkedForAdjustingByAi", "NotificationMsg"))
	}
	m.AlertsWithConditionMarkedForAdjustingByAi = fv
}

func (m *NotificationMsg) SetAlertsWithAiRemediationApplied(fv *NotificationMsg_AlertsGroup) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AlertsWithAiRemediationApplied", "NotificationMsg"))
	}
	m.AlertsWithAiRemediationApplied = fv
}

func (m *NotificationMsg) SetAlertsWithOperatorRemediationApplied(fv *NotificationMsg_AlertsGroup) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AlertsWithOperatorRemediationApplied", "NotificationMsg"))
	}
	m.AlertsWithOperatorRemediationApplied = fv
}

func (m *NotificationMsg) SetStoppedAlerts(fv *NotificationMsg_AlertsGroup) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "StoppedAlerts", "NotificationMsg"))
	}
	m.StoppedAlerts = fv
}

type NotificationMsg_AlertsGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	ByCondition   []*NotificationMsg_AlertsGroup_ConditionAlerts `protobuf:"bytes,1,rep,name=by_condition,json=byCondition,proto3" json:"by_condition,omitempty"`
}

func (m *NotificationMsg_AlertsGroup) Reset() {
	*m = NotificationMsg_AlertsGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_notification_msg_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *NotificationMsg_AlertsGroup) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*NotificationMsg_AlertsGroup) ProtoMessage() {}

func (m *NotificationMsg_AlertsGroup) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_notification_msg_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*NotificationMsg_AlertsGroup) GotenMessage() {}

// Deprecated, Use NotificationMsg_AlertsGroup.ProtoReflect.Descriptor instead.
func (*NotificationMsg_AlertsGroup) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_notification_msg_proto_rawDescGZIP(), []int{0, 0}
}

func (m *NotificationMsg_AlertsGroup) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *NotificationMsg_AlertsGroup) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *NotificationMsg_AlertsGroup) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *NotificationMsg_AlertsGroup) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *NotificationMsg_AlertsGroup) GetByCondition() []*NotificationMsg_AlertsGroup_ConditionAlerts {
	if m != nil {
		return m.ByCondition
	}
	return nil
}

func (m *NotificationMsg_AlertsGroup) SetByCondition(fv []*NotificationMsg_AlertsGroup_ConditionAlerts) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ByCondition", "NotificationMsg_AlertsGroup"))
	}
	m.ByCondition = fv
}

type NotificationMsg_AlertsGroup_ConditionAlerts struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	Alerts          []*NotificationMsg_AlertsGroup_ConditionAlerts_Alert `protobuf:"bytes,3,rep,name=alerts,proto3" json:"alerts,omitempty"`
	MoreAlertsCount int32                                                `protobuf:"varint,4,opt,name=more_alerts_count,json=moreAlertsCount,proto3" json:"more_alerts_count,omitempty"`
	// Types that are valid to be assigned to Type:
	//	*NotificationMsg_AlertsGroup_ConditionAlerts_TimeSeriesCondition
	//	*NotificationMsg_AlertsGroup_ConditionAlerts_LogCondition
	Type isNotificationMsg_AlertsGroup_ConditionAlerts_Type `protobuf_oneof:"type"`
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts) Reset() {
	*m = NotificationMsg_AlertsGroup_ConditionAlerts{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_notification_msg_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*NotificationMsg_AlertsGroup_ConditionAlerts) ProtoMessage() {}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_notification_msg_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*NotificationMsg_AlertsGroup_ConditionAlerts) GotenMessage() {}

// Deprecated, Use NotificationMsg_AlertsGroup_ConditionAlerts.ProtoReflect.Descriptor instead.
func (*NotificationMsg_AlertsGroup_ConditionAlerts) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_notification_msg_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

type isNotificationMsg_AlertsGroup_ConditionAlerts_Type interface {
	isNotificationMsg_AlertsGroup_ConditionAlerts_Type()
}

type NotificationMsg_AlertsGroup_ConditionAlerts_TimeSeriesCondition struct {
	TimeSeriesCondition *NotificationMsg_AlertsGroup_ConditionAlerts_TsCndType `protobuf:"bytes,1,opt,name=time_series_condition,json=timeSeriesCondition,proto3,oneof"`
}
type NotificationMsg_AlertsGroup_ConditionAlerts_LogCondition struct {
	LogCondition *NotificationMsg_AlertsGroup_ConditionAlerts_LogCndType `protobuf:"bytes,2,opt,name=log_condition,json=logCondition,proto3,oneof"`
}

func (*NotificationMsg_AlertsGroup_ConditionAlerts_TimeSeriesCondition) isNotificationMsg_AlertsGroup_ConditionAlerts_Type() {
}
func (*NotificationMsg_AlertsGroup_ConditionAlerts_LogCondition) isNotificationMsg_AlertsGroup_ConditionAlerts_Type() {
}
func (m *NotificationMsg_AlertsGroup_ConditionAlerts) GetAlerts() []*NotificationMsg_AlertsGroup_ConditionAlerts_Alert {
	if m != nil {
		return m.Alerts
	}
	return nil
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts) GetMoreAlertsCount() int32 {
	if m != nil {
		return m.MoreAlertsCount
	}
	return int32(0)
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts) GetType() isNotificationMsg_AlertsGroup_ConditionAlerts_Type {
	if m != nil {
		return m.Type
	}
	return nil
}
func (m *NotificationMsg_AlertsGroup_ConditionAlerts) GetTimeSeriesCondition() *NotificationMsg_AlertsGroup_ConditionAlerts_TsCndType {
	if x, ok := m.GetType().(*NotificationMsg_AlertsGroup_ConditionAlerts_TimeSeriesCondition); ok {
		return x.TimeSeriesCondition
	}
	return nil
}
func (m *NotificationMsg_AlertsGroup_ConditionAlerts) GetLogCondition() *NotificationMsg_AlertsGroup_ConditionAlerts_LogCndType {
	if x, ok := m.GetType().(*NotificationMsg_AlertsGroup_ConditionAlerts_LogCondition); ok {
		return x.LogCondition
	}
	return nil
}
func (m *NotificationMsg_AlertsGroup_ConditionAlerts) SetAlerts(fv []*NotificationMsg_AlertsGroup_ConditionAlerts_Alert) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Alerts", "NotificationMsg_AlertsGroup_ConditionAlerts"))
	}
	m.Alerts = fv
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts) SetMoreAlertsCount(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MoreAlertsCount", "NotificationMsg_AlertsGroup_ConditionAlerts"))
	}
	m.MoreAlertsCount = fv
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts) SetType(ofv isNotificationMsg_AlertsGroup_ConditionAlerts_Type) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "isNotificationMsg_AlertsGroup_ConditionAlerts_Type", "NotificationMsg_AlertsGroup_ConditionAlerts"))
	}
	m.Type = ofv
}
func (m *NotificationMsg_AlertsGroup_ConditionAlerts) SetTimeSeriesCondition(fv *NotificationMsg_AlertsGroup_ConditionAlerts_TsCndType) {
	m.SetType(&NotificationMsg_AlertsGroup_ConditionAlerts_TimeSeriesCondition{TimeSeriesCondition: fv})
}
func (m *NotificationMsg_AlertsGroup_ConditionAlerts) SetLogCondition(fv *NotificationMsg_AlertsGroup_ConditionAlerts_LogCndType) {
	m.SetType(&NotificationMsg_AlertsGroup_ConditionAlerts_LogCondition{LogCondition: fv})
}

type NotificationMsg_AlertsGroup_ConditionAlerts_TsCndType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Fqn           *ts_condition.Name                                             `protobuf:"bytes,1,opt,customtype=Name,name=fqn,proto3" json:"fqn,omitempty"`
	DisplayName   string                                                         `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	Queries       []*NotificationMsg_AlertsGroup_ConditionAlerts_TsCndType_Query `protobuf:"bytes,3,rep,name=queries,proto3" json:"queries,omitempty"`
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_TsCndType) Reset() {
	*m = NotificationMsg_AlertsGroup_ConditionAlerts_TsCndType{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_notification_msg_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_TsCndType) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*NotificationMsg_AlertsGroup_ConditionAlerts_TsCndType) ProtoMessage() {}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_TsCndType) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_notification_msg_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*NotificationMsg_AlertsGroup_ConditionAlerts_TsCndType) GotenMessage() {}

// Deprecated, Use NotificationMsg_AlertsGroup_ConditionAlerts_TsCndType.ProtoReflect.Descriptor instead.
func (*NotificationMsg_AlertsGroup_ConditionAlerts_TsCndType) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_notification_msg_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_TsCndType) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_TsCndType) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_TsCndType) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_TsCndType) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_TsCndType) GetFqn() *ts_condition.Name {
	if m != nil {
		return m.Fqn
	}
	return nil
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_TsCndType) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_TsCndType) GetQueries() []*NotificationMsg_AlertsGroup_ConditionAlerts_TsCndType_Query {
	if m != nil {
		return m.Queries
	}
	return nil
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_TsCndType) SetFqn(fv *ts_condition.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Fqn", "NotificationMsg_AlertsGroup_ConditionAlerts_TsCndType"))
	}
	m.Fqn = fv
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_TsCndType) SetDisplayName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DisplayName", "NotificationMsg_AlertsGroup_ConditionAlerts_TsCndType"))
	}
	m.DisplayName = fv
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_TsCndType) SetQueries(fv []*NotificationMsg_AlertsGroup_ConditionAlerts_TsCndType_Query) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Queries", "NotificationMsg_AlertsGroup_ConditionAlerts_TsCndType"))
	}
	m.Queries = fv
}

type NotificationMsg_AlertsGroup_ConditionAlerts_LogCndType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Fqn           *log_condition.Name                                             `protobuf:"bytes,1,opt,customtype=Name,name=fqn,proto3" json:"fqn,omitempty"`
	DisplayName   string                                                          `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	Queries       []*NotificationMsg_AlertsGroup_ConditionAlerts_LogCndType_Query `protobuf:"bytes,3,rep,name=queries,proto3" json:"queries,omitempty"`
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_LogCndType) Reset() {
	*m = NotificationMsg_AlertsGroup_ConditionAlerts_LogCndType{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_notification_msg_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_LogCndType) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*NotificationMsg_AlertsGroup_ConditionAlerts_LogCndType) ProtoMessage() {}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_LogCndType) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_notification_msg_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*NotificationMsg_AlertsGroup_ConditionAlerts_LogCndType) GotenMessage() {}

// Deprecated, Use NotificationMsg_AlertsGroup_ConditionAlerts_LogCndType.ProtoReflect.Descriptor instead.
func (*NotificationMsg_AlertsGroup_ConditionAlerts_LogCndType) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_notification_msg_proto_rawDescGZIP(), []int{0, 0, 0, 1}
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_LogCndType) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_LogCndType) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_LogCndType) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_LogCndType) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_LogCndType) GetFqn() *log_condition.Name {
	if m != nil {
		return m.Fqn
	}
	return nil
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_LogCndType) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_LogCndType) GetQueries() []*NotificationMsg_AlertsGroup_ConditionAlerts_LogCndType_Query {
	if m != nil {
		return m.Queries
	}
	return nil
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_LogCndType) SetFqn(fv *log_condition.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Fqn", "NotificationMsg_AlertsGroup_ConditionAlerts_LogCndType"))
	}
	m.Fqn = fv
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_LogCndType) SetDisplayName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DisplayName", "NotificationMsg_AlertsGroup_ConditionAlerts_LogCndType"))
	}
	m.DisplayName = fv
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_LogCndType) SetQueries(fv []*NotificationMsg_AlertsGroup_ConditionAlerts_LogCndType_Query) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Queries", "NotificationMsg_AlertsGroup_ConditionAlerts_LogCndType"))
	}
	m.Queries = fv
}

type NotificationMsg_AlertsGroup_ConditionAlerts_Alert struct {
	state            protoimpl.MessageState
	sizeCache        protoimpl.SizeCache
	unknownFields    protoimpl.UnknownFields
	Type             NotificationMsg_AlertsGroup_ConditionAlerts_Alert_Type              `protobuf:"varint,1,opt,name=type,proto3,enum=ntt.alerting.v1.NotificationMsg_AlertsGroup_ConditionAlerts_Alert_Type" json:"type,omitempty"`
	Fqn              *alert.Name                                                         `protobuf:"bytes,2,opt,customtype=Name,name=fqn,proto3" json:"fqn,omitempty"`
	DisplayName      string                                                              `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	IsFiring         bool                                                                `protobuf:"varint,4,opt,name=is_firing,json=isFiring,proto3" json:"is_firing,omitempty"`
	StartTime        *timestamppb.Timestamp                                              `protobuf:"bytes,5,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	StopTime         *timestamppb.Timestamp                                              `protobuf:"bytes,6,opt,name=stop_time,json=stopTime,proto3" json:"stop_time,omitempty"`
	Identification   *NotificationMsg_AlertsGroup_ConditionAlerts_Alert_Identification   `protobuf:"bytes,7,opt,name=identification,proto3" json:"identification,omitempty"`
	ViolationInfo    *NotificationMsg_AlertsGroup_ConditionAlerts_Alert_ViolationInfo    `protobuf:"bytes,8,opt,name=violation_info,json=violationInfo,proto3" json:"violation_info,omitempty"`
	EscalationLevel  alert.Alert_State_EscalationLevel                                   `protobuf:"varint,9,opt,name=escalation_level,json=escalationLevel,proto3,enum=ntt.alerting.v1.Alert_State_EscalationLevel" json:"escalation_level,omitempty"`
	AiHandling       *NotificationMsg_AlertsGroup_ConditionAlerts_Alert_AiHandling       `protobuf:"bytes,10,opt,name=ai_handling,json=aiHandling,proto3" json:"ai_handling,omitempty"`
	OperatorHandling *NotificationMsg_AlertsGroup_ConditionAlerts_Alert_OperatorHandling `protobuf:"bytes,11,opt,name=operator_handling,json=operatorHandling,proto3" json:"operator_handling,omitempty"`
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert) Reset() {
	*m = NotificationMsg_AlertsGroup_ConditionAlerts_Alert{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_notification_msg_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*NotificationMsg_AlertsGroup_ConditionAlerts_Alert) ProtoMessage() {}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_notification_msg_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*NotificationMsg_AlertsGroup_ConditionAlerts_Alert) GotenMessage() {}

// Deprecated, Use NotificationMsg_AlertsGroup_ConditionAlerts_Alert.ProtoReflect.Descriptor instead.
func (*NotificationMsg_AlertsGroup_ConditionAlerts_Alert) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_notification_msg_proto_rawDescGZIP(), []int{0, 0, 0, 2}
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert) GetType() NotificationMsg_AlertsGroup_ConditionAlerts_Alert_Type {
	if m != nil {
		return m.Type
	}
	return NotificationMsg_AlertsGroup_ConditionAlerts_Alert_UNDEFINED
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert) GetFqn() *alert.Name {
	if m != nil {
		return m.Fqn
	}
	return nil
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert) GetIsFiring() bool {
	if m != nil {
		return m.IsFiring
	}
	return false
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert) GetStartTime() *timestamppb.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert) GetStopTime() *timestamppb.Timestamp {
	if m != nil {
		return m.StopTime
	}
	return nil
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert) GetIdentification() *NotificationMsg_AlertsGroup_ConditionAlerts_Alert_Identification {
	if m != nil {
		return m.Identification
	}
	return nil
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert) GetViolationInfo() *NotificationMsg_AlertsGroup_ConditionAlerts_Alert_ViolationInfo {
	if m != nil {
		return m.ViolationInfo
	}
	return nil
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert) GetEscalationLevel() alert.Alert_State_EscalationLevel {
	if m != nil {
		return m.EscalationLevel
	}
	return alert.Alert_State_NONE
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert) GetAiHandling() *NotificationMsg_AlertsGroup_ConditionAlerts_Alert_AiHandling {
	if m != nil {
		return m.AiHandling
	}
	return nil
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert) GetOperatorHandling() *NotificationMsg_AlertsGroup_ConditionAlerts_Alert_OperatorHandling {
	if m != nil {
		return m.OperatorHandling
	}
	return nil
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert) SetType(fv NotificationMsg_AlertsGroup_ConditionAlerts_Alert_Type) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Type", "NotificationMsg_AlertsGroup_ConditionAlerts_Alert"))
	}
	m.Type = fv
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert) SetFqn(fv *alert.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Fqn", "NotificationMsg_AlertsGroup_ConditionAlerts_Alert"))
	}
	m.Fqn = fv
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert) SetDisplayName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DisplayName", "NotificationMsg_AlertsGroup_ConditionAlerts_Alert"))
	}
	m.DisplayName = fv
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert) SetIsFiring(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IsFiring", "NotificationMsg_AlertsGroup_ConditionAlerts_Alert"))
	}
	m.IsFiring = fv
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert) SetStartTime(fv *timestamppb.Timestamp) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "StartTime", "NotificationMsg_AlertsGroup_ConditionAlerts_Alert"))
	}
	m.StartTime = fv
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert) SetStopTime(fv *timestamppb.Timestamp) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "StopTime", "NotificationMsg_AlertsGroup_ConditionAlerts_Alert"))
	}
	m.StopTime = fv
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert) SetIdentification(fv *NotificationMsg_AlertsGroup_ConditionAlerts_Alert_Identification) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Identification", "NotificationMsg_AlertsGroup_ConditionAlerts_Alert"))
	}
	m.Identification = fv
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert) SetViolationInfo(fv *NotificationMsg_AlertsGroup_ConditionAlerts_Alert_ViolationInfo) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ViolationInfo", "NotificationMsg_AlertsGroup_ConditionAlerts_Alert"))
	}
	m.ViolationInfo = fv
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert) SetEscalationLevel(fv alert.Alert_State_EscalationLevel) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "EscalationLevel", "NotificationMsg_AlertsGroup_ConditionAlerts_Alert"))
	}
	m.EscalationLevel = fv
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert) SetAiHandling(fv *NotificationMsg_AlertsGroup_ConditionAlerts_Alert_AiHandling) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AiHandling", "NotificationMsg_AlertsGroup_ConditionAlerts_Alert"))
	}
	m.AiHandling = fv
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert) SetOperatorHandling(fv *NotificationMsg_AlertsGroup_ConditionAlerts_Alert_OperatorHandling) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OperatorHandling", "NotificationMsg_AlertsGroup_ConditionAlerts_Alert"))
	}
	m.OperatorHandling = fv
}

type NotificationMsg_AlertsGroup_ConditionAlerts_TsCndType_Query struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Description   string                         `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	Filter        string                         `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
	Aggregation   *monitoring_common.Aggregation `protobuf:"bytes,3,opt,name=aggregation,proto3" json:"aggregation,omitempty"`
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_TsCndType_Query) Reset() {
	*m = NotificationMsg_AlertsGroup_ConditionAlerts_TsCndType_Query{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_notification_msg_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_TsCndType_Query) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*NotificationMsg_AlertsGroup_ConditionAlerts_TsCndType_Query) ProtoMessage() {}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_TsCndType_Query) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_notification_msg_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*NotificationMsg_AlertsGroup_ConditionAlerts_TsCndType_Query) GotenMessage() {}

// Deprecated, Use NotificationMsg_AlertsGroup_ConditionAlerts_TsCndType_Query.ProtoReflect.Descriptor instead.
func (*NotificationMsg_AlertsGroup_ConditionAlerts_TsCndType_Query) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_notification_msg_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0}
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_TsCndType_Query) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_TsCndType_Query) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_TsCndType_Query) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_TsCndType_Query) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_TsCndType_Query) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_TsCndType_Query) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_TsCndType_Query) GetAggregation() *monitoring_common.Aggregation {
	if m != nil {
		return m.Aggregation
	}
	return nil
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_TsCndType_Query) SetDescription(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Description", "NotificationMsg_AlertsGroup_ConditionAlerts_TsCndType_Query"))
	}
	m.Description = fv
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_TsCndType_Query) SetFilter(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Filter", "NotificationMsg_AlertsGroup_ConditionAlerts_TsCndType_Query"))
	}
	m.Filter = fv
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_TsCndType_Query) SetAggregation(fv *monitoring_common.Aggregation) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Aggregation", "NotificationMsg_AlertsGroup_ConditionAlerts_TsCndType_Query"))
	}
	m.Aggregation = fv
}

type NotificationMsg_AlertsGroup_ConditionAlerts_LogCndType_Query struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Description   string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	Filter        string `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_LogCndType_Query) Reset() {
	*m = NotificationMsg_AlertsGroup_ConditionAlerts_LogCndType_Query{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_notification_msg_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_LogCndType_Query) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*NotificationMsg_AlertsGroup_ConditionAlerts_LogCndType_Query) ProtoMessage() {}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_LogCndType_Query) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_notification_msg_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*NotificationMsg_AlertsGroup_ConditionAlerts_LogCndType_Query) GotenMessage() {}

// Deprecated, Use NotificationMsg_AlertsGroup_ConditionAlerts_LogCndType_Query.ProtoReflect.Descriptor instead.
func (*NotificationMsg_AlertsGroup_ConditionAlerts_LogCndType_Query) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_notification_msg_proto_rawDescGZIP(), []int{0, 0, 0, 1, 0}
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_LogCndType_Query) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_LogCndType_Query) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_LogCndType_Query) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_LogCndType_Query) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_LogCndType_Query) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_LogCndType_Query) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_LogCndType_Query) SetDescription(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Description", "NotificationMsg_AlertsGroup_ConditionAlerts_LogCndType_Query"))
	}
	m.Description = fv
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_LogCndType_Query) SetFilter(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Filter", "NotificationMsg_AlertsGroup_ConditionAlerts_LogCndType_Query"))
	}
	m.Filter = fv
}

type NotificationMsg_AlertsGroup_ConditionAlerts_Alert_Identification struct {
	state          protoimpl.MessageState
	sizeCache      protoimpl.SizeCache
	unknownFields  protoimpl.UnknownFields
	LogLabels      map[string]string `protobuf:"bytes,1,rep,name=log_labels,json=logLabels,proto3" json:"log_labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MetricLabels   map[string]string `protobuf:"bytes,2,rep,name=metric_labels,json=metricLabels,proto3" json:"metric_labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ResourceLabels map[string]string `protobuf:"bytes,3,rep,name=resource_labels,json=resourceLabels,proto3" json:"resource_labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert_Identification) Reset() {
	*m = NotificationMsg_AlertsGroup_ConditionAlerts_Alert_Identification{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_notification_msg_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert_Identification) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*NotificationMsg_AlertsGroup_ConditionAlerts_Alert_Identification) ProtoMessage() {}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert_Identification) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_notification_msg_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*NotificationMsg_AlertsGroup_ConditionAlerts_Alert_Identification) GotenMessage() {}

// Deprecated, Use NotificationMsg_AlertsGroup_ConditionAlerts_Alert_Identification.ProtoReflect.Descriptor instead.
func (*NotificationMsg_AlertsGroup_ConditionAlerts_Alert_Identification) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_notification_msg_proto_rawDescGZIP(), []int{0, 0, 0, 2, 0}
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert_Identification) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert_Identification) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert_Identification) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert_Identification) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert_Identification) GetLogLabels() map[string]string {
	if m != nil {
		return m.LogLabels
	}
	return nil
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert_Identification) GetMetricLabels() map[string]string {
	if m != nil {
		return m.MetricLabels
	}
	return nil
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert_Identification) GetResourceLabels() map[string]string {
	if m != nil {
		return m.ResourceLabels
	}
	return nil
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert_Identification) SetLogLabels(fv map[string]string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "LogLabels", "NotificationMsg_AlertsGroup_ConditionAlerts_Alert_Identification"))
	}
	m.LogLabels = fv
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert_Identification) SetMetricLabels(fv map[string]string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MetricLabels", "NotificationMsg_AlertsGroup_ConditionAlerts_Alert_Identification"))
	}
	m.MetricLabels = fv
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert_Identification) SetResourceLabels(fv map[string]string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResourceLabels", "NotificationMsg_AlertsGroup_ConditionAlerts_Alert_Identification"))
	}
	m.ResourceLabels = fv
}

type NotificationMsg_AlertsGroup_ConditionAlerts_Alert_ViolationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	LogValue      string                                                                        `protobuf:"bytes,1,opt,name=log_value,json=logValue,proto3" json:"log_value,omitempty"`
	TimeSeries    []*NotificationMsg_AlertsGroup_ConditionAlerts_Alert_ViolationInfo_TimeSeries `protobuf:"bytes,2,rep,name=time_series,json=timeSeries,proto3" json:"time_series,omitempty"`
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert_ViolationInfo) Reset() {
	*m = NotificationMsg_AlertsGroup_ConditionAlerts_Alert_ViolationInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_notification_msg_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert_ViolationInfo) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*NotificationMsg_AlertsGroup_ConditionAlerts_Alert_ViolationInfo) ProtoMessage() {}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert_ViolationInfo) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_notification_msg_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*NotificationMsg_AlertsGroup_ConditionAlerts_Alert_ViolationInfo) GotenMessage() {}

// Deprecated, Use NotificationMsg_AlertsGroup_ConditionAlerts_Alert_ViolationInfo.ProtoReflect.Descriptor instead.
func (*NotificationMsg_AlertsGroup_ConditionAlerts_Alert_ViolationInfo) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_notification_msg_proto_rawDescGZIP(), []int{0, 0, 0, 2, 1}
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert_ViolationInfo) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert_ViolationInfo) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert_ViolationInfo) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert_ViolationInfo) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert_ViolationInfo) GetLogValue() string {
	if m != nil {
		return m.LogValue
	}
	return ""
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert_ViolationInfo) GetTimeSeries() []*NotificationMsg_AlertsGroup_ConditionAlerts_Alert_ViolationInfo_TimeSeries {
	if m != nil {
		return m.TimeSeries
	}
	return nil
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert_ViolationInfo) SetLogValue(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "LogValue", "NotificationMsg_AlertsGroup_ConditionAlerts_Alert_ViolationInfo"))
	}
	m.LogValue = fv
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert_ViolationInfo) SetTimeSeries(fv []*NotificationMsg_AlertsGroup_ConditionAlerts_Alert_ViolationInfo_TimeSeries) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TimeSeries", "NotificationMsg_AlertsGroup_ConditionAlerts_Alert_ViolationInfo"))
	}
	m.TimeSeries = fv
}

type NotificationMsg_AlertsGroup_ConditionAlerts_Alert_AiHandling struct {
	state                protoimpl.MessageState
	sizeCache            protoimpl.SizeCache
	unknownFields        protoimpl.UnknownFields
	CurrentState         alert.Alert_State_AiHandlingState               `protobuf:"varint,1,opt,name=current_state,json=currentState,proto3,enum=ntt.alerting.v1.Alert_State_AiHandlingState" json:"current_state,omitempty"`
	TroubleshootingNotes string                                          `protobuf:"bytes,2,opt,name=troubleshooting_notes,json=troubleshootingNotes,proto3" json:"troubleshooting_notes,omitempty"`
	AiRemediation        *rcommon.PolicySpec_AIAgentHandling_Remediation `protobuf:"bytes,3,opt,name=ai_remediation,json=aiRemediation,proto3" json:"ai_remediation,omitempty"`
	RemediationArg       string                                          `protobuf:"bytes,4,opt,name=remediation_arg,json=remediationArg,proto3" json:"remediation_arg,omitempty"`
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert_AiHandling) Reset() {
	*m = NotificationMsg_AlertsGroup_ConditionAlerts_Alert_AiHandling{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_notification_msg_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert_AiHandling) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*NotificationMsg_AlertsGroup_ConditionAlerts_Alert_AiHandling) ProtoMessage() {}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert_AiHandling) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_notification_msg_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*NotificationMsg_AlertsGroup_ConditionAlerts_Alert_AiHandling) GotenMessage() {}

// Deprecated, Use NotificationMsg_AlertsGroup_ConditionAlerts_Alert_AiHandling.ProtoReflect.Descriptor instead.
func (*NotificationMsg_AlertsGroup_ConditionAlerts_Alert_AiHandling) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_notification_msg_proto_rawDescGZIP(), []int{0, 0, 0, 2, 2}
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert_AiHandling) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert_AiHandling) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert_AiHandling) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert_AiHandling) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert_AiHandling) GetCurrentState() alert.Alert_State_AiHandlingState {
	if m != nil {
		return m.CurrentState
	}
	return alert.Alert_State_AI_AGENT_NOT_INVOLVED
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert_AiHandling) GetTroubleshootingNotes() string {
	if m != nil {
		return m.TroubleshootingNotes
	}
	return ""
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert_AiHandling) GetAiRemediation() *rcommon.PolicySpec_AIAgentHandling_Remediation {
	if m != nil {
		return m.AiRemediation
	}
	return nil
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert_AiHandling) GetRemediationArg() string {
	if m != nil {
		return m.RemediationArg
	}
	return ""
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert_AiHandling) SetCurrentState(fv alert.Alert_State_AiHandlingState) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CurrentState", "NotificationMsg_AlertsGroup_ConditionAlerts_Alert_AiHandling"))
	}
	m.CurrentState = fv
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert_AiHandling) SetTroubleshootingNotes(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TroubleshootingNotes", "NotificationMsg_AlertsGroup_ConditionAlerts_Alert_AiHandling"))
	}
	m.TroubleshootingNotes = fv
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert_AiHandling) SetAiRemediation(fv *rcommon.PolicySpec_AIAgentHandling_Remediation) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AiRemediation", "NotificationMsg_AlertsGroup_ConditionAlerts_Alert_AiHandling"))
	}
	m.AiRemediation = fv
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert_AiHandling) SetRemediationArg(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "RemediationArg", "NotificationMsg_AlertsGroup_ConditionAlerts_Alert_AiHandling"))
	}
	m.RemediationArg = fv
}

type NotificationMsg_AlertsGroup_ConditionAlerts_Alert_OperatorHandling struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	CurrentState  alert.Alert_State_OperatorHandlingState `protobuf:"varint,1,opt,name=current_state,json=currentState,proto3,enum=ntt.alerting.v1.Alert_State_OperatorHandlingState" json:"current_state,omitempty"`
	Notes         string                                  `protobuf:"bytes,2,opt,name=notes,proto3" json:"notes,omitempty"`
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert_OperatorHandling) Reset() {
	*m = NotificationMsg_AlertsGroup_ConditionAlerts_Alert_OperatorHandling{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_notification_msg_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert_OperatorHandling) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*NotificationMsg_AlertsGroup_ConditionAlerts_Alert_OperatorHandling) ProtoMessage() {}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert_OperatorHandling) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_notification_msg_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*NotificationMsg_AlertsGroup_ConditionAlerts_Alert_OperatorHandling) GotenMessage() {}

// Deprecated, Use NotificationMsg_AlertsGroup_ConditionAlerts_Alert_OperatorHandling.ProtoReflect.Descriptor instead.
func (*NotificationMsg_AlertsGroup_ConditionAlerts_Alert_OperatorHandling) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_notification_msg_proto_rawDescGZIP(), []int{0, 0, 0, 2, 3}
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert_OperatorHandling) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert_OperatorHandling) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert_OperatorHandling) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert_OperatorHandling) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert_OperatorHandling) GetCurrentState() alert.Alert_State_OperatorHandlingState {
	if m != nil {
		return m.CurrentState
	}
	return alert.Alert_State_OP_NOT_INVOLVED
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert_OperatorHandling) GetNotes() string {
	if m != nil {
		return m.Notes
	}
	return ""
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert_OperatorHandling) SetCurrentState(fv alert.Alert_State_OperatorHandlingState) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CurrentState", "NotificationMsg_AlertsGroup_ConditionAlerts_Alert_OperatorHandling"))
	}
	m.CurrentState = fv
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert_OperatorHandling) SetNotes(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Notes", "NotificationMsg_AlertsGroup_ConditionAlerts_Alert_OperatorHandling"))
	}
	m.Notes = fv
}

type NotificationMsg_AlertsGroup_ConditionAlerts_Alert_ViolationInfo_TimeSeries struct {
	state          protoimpl.MessageState
	sizeCache      protoimpl.SizeCache
	unknownFields  protoimpl.UnknownFields
	Query          string                     `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Values         []float64                  `protobuf:"fixed64,2,rep,packed,name=values,proto3" json:"values,omitempty"`
	UpperThreshold *rcommon.AlertingThreshold `protobuf:"bytes,3,opt,name=upper_threshold,json=upperThreshold,proto3" json:"upper_threshold,omitempty"`
	LowerThreshold *rcommon.AlertingThreshold `protobuf:"bytes,4,opt,name=lower_threshold,json=lowerThreshold,proto3" json:"lower_threshold,omitempty"`
	RaisedAfter    *durationpb.Duration       `protobuf:"bytes,5,opt,name=raised_after,json=raisedAfter,proto3" json:"raised_after,omitempty"`
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert_ViolationInfo_TimeSeries) Reset() {
	*m = NotificationMsg_AlertsGroup_ConditionAlerts_Alert_ViolationInfo_TimeSeries{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_notification_msg_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert_ViolationInfo_TimeSeries) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*NotificationMsg_AlertsGroup_ConditionAlerts_Alert_ViolationInfo_TimeSeries) ProtoMessage() {}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert_ViolationInfo_TimeSeries) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_notification_msg_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*NotificationMsg_AlertsGroup_ConditionAlerts_Alert_ViolationInfo_TimeSeries) GotenMessage() {}

// Deprecated, Use NotificationMsg_AlertsGroup_ConditionAlerts_Alert_ViolationInfo_TimeSeries.ProtoReflect.Descriptor instead.
func (*NotificationMsg_AlertsGroup_ConditionAlerts_Alert_ViolationInfo_TimeSeries) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_notification_msg_proto_rawDescGZIP(), []int{0, 0, 0, 2, 1, 0}
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert_ViolationInfo_TimeSeries) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert_ViolationInfo_TimeSeries) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert_ViolationInfo_TimeSeries) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert_ViolationInfo_TimeSeries) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert_ViolationInfo_TimeSeries) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert_ViolationInfo_TimeSeries) GetValues() []float64 {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert_ViolationInfo_TimeSeries) GetUpperThreshold() *rcommon.AlertingThreshold {
	if m != nil {
		return m.UpperThreshold
	}
	return nil
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert_ViolationInfo_TimeSeries) GetLowerThreshold() *rcommon.AlertingThreshold {
	if m != nil {
		return m.LowerThreshold
	}
	return nil
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert_ViolationInfo_TimeSeries) GetRaisedAfter() *durationpb.Duration {
	if m != nil {
		return m.RaisedAfter
	}
	return nil
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert_ViolationInfo_TimeSeries) SetQuery(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Query", "NotificationMsg_AlertsGroup_ConditionAlerts_Alert_ViolationInfo_TimeSeries"))
	}
	m.Query = fv
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert_ViolationInfo_TimeSeries) SetValues(fv []float64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Values", "NotificationMsg_AlertsGroup_ConditionAlerts_Alert_ViolationInfo_TimeSeries"))
	}
	m.Values = fv
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert_ViolationInfo_TimeSeries) SetUpperThreshold(fv *rcommon.AlertingThreshold) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "UpperThreshold", "NotificationMsg_AlertsGroup_ConditionAlerts_Alert_ViolationInfo_TimeSeries"))
	}
	m.UpperThreshold = fv
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert_ViolationInfo_TimeSeries) SetLowerThreshold(fv *rcommon.AlertingThreshold) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "LowerThreshold", "NotificationMsg_AlertsGroup_ConditionAlerts_Alert_ViolationInfo_TimeSeries"))
	}
	m.LowerThreshold = fv
}

func (m *NotificationMsg_AlertsGroup_ConditionAlerts_Alert_ViolationInfo_TimeSeries) SetRaisedAfter(fv *durationpb.Duration) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "RaisedAfter", "NotificationMsg_AlertsGroup_ConditionAlerts_Alert_ViolationInfo_TimeSeries"))
	}
	m.RaisedAfter = fv
}

var edgelq_alerting_proto_v1_notification_msg_proto preflect.FileDescriptor

var edgelq_alerting_proto_v1_notification_msg_proto_rawDesc = []byte{
	0x0a, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x73, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0f, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x31, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67,
	0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20,
	0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x24, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x24, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x70, 0x65, 0x63, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x65, 0x64, 0x67,
	0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x34, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa9, 0x26, 0x0a, 0x0f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x12, 0x3f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x66, 0x71, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xb2,
	0xda, 0x21, 0x1a, 0x0a, 0x18, 0x0a, 0x16, 0x69, 0x61, 0x6d, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x6c,
	0x71, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x0a, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x71, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x10, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x71, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0xb2, 0xda, 0x21, 0x1f, 0x0a, 0x1d, 0x0a, 0x1b, 0x69,
	0x61, 0x6d, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x71, 0x6e, 0x12, 0x3a, 0x0a, 0x19, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x5f, 0x66, 0x71, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xb2, 0xda, 0x21,
	0x0a, 0x0a, 0x08, 0x0a, 0x06, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x09, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x46, 0x71, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x58, 0x0a, 0x11, 0x6e, 0x65, 0x77, 0x5f, 0x66, 0x69,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x73, 0x67, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x0f, 0x6e, 0x65, 0x77, 0x46, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73,
	0x12, 0x77, 0x0a, 0x22, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x5f, 0x65, 0x73, 0x63, 0x61, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x61, 0x69, 0x5f, 0x74, 0x6f, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x2e, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x1d, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x73, 0x45, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x41, 0x69, 0x54,
	0x6f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x92, 0x01, 0x0a, 0x30, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x73, 0x5f, 0x61, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x6f,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f,
	0x61, 0x69, 0x5f, 0x72, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x2a, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x41, 0x77, 0x61, 0x69, 0x74, 0x69,
	0x6e, 0x67, 0x46, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x57, 0x69, 0x74,
	0x68, 0x41, 0x69, 0x52, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6f,
	0x0a, 0x1e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x67, 0x65, 0x64,
	0x5f, 0x74, 0x6f, 0x5f, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x62, 0x79, 0x5f, 0x61, 0x69,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x19, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x46, 0x6c, 0x61, 0x67,
	0x67, 0x65, 0x64, 0x54, 0x6f, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x42, 0x79, 0x41, 0x69, 0x12,
	0x91, 0x01, 0x0a, 0x30, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x64,
	0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x62,
	0x79, 0x5f, 0x61, 0x69, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x2e, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x29, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73,
	0x57, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x42,
	0x79, 0x41, 0x69, 0x12, 0x78, 0x0a, 0x22, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x5f, 0x77, 0x69,
	0x74, 0x68, 0x5f, 0x61, 0x69, 0x5f, 0x72, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73,
	0x67, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x1e, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x41, 0x69, 0x52, 0x65, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x12, 0x84, 0x01,
	0x0a, 0x28, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x73, 0x67, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x24,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x52, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x65, 0x64, 0x12, 0x53, 0x0a, 0x0e, 0x73, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x2e, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0d, 0x73, 0x74, 0x6f, 0x70,
	0x70, 0x65, 0x64, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x1a, 0xf4, 0x1b, 0x0a, 0x0b, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x5f, 0x0a, 0x0c, 0x62, 0x79, 0x5f,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3c, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73,
	0x67, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x52, 0x0b, 0x62,
	0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x83, 0x1b, 0x0a, 0x0f, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x12, 0x7c,
	0x0a, 0x15, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x2e,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2e, 0x54, 0x73, 0x43, 0x6e,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x13, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6e, 0x0a, 0x0d,
	0x6c, 0x6f, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x73, 0x2e, 0x4c, 0x6f, 0x67, 0x43, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x0c,
	0x6c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x06,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x2e, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x52, 0x06, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x6f, 0x72, 0x65,
	0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0f, 0x6d, 0x6f, 0x72, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x1a, 0xc3, 0x02, 0x0a, 0x09, 0x54, 0x73, 0x43, 0x6e, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x25, 0x0a, 0x03, 0x66, 0x71, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x13, 0xb2, 0xda, 0x21, 0x0f, 0x0a, 0x0d, 0x0a, 0x0b, 0x54, 0x73, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x66, 0x71, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x66, 0x0a, 0x07,
	0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4c, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x2e,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2e, 0x54, 0x73, 0x43, 0x6e,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x07, 0x71, 0x75, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x1a, 0x83, 0x01, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x0b, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x34, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x83, 0x02, 0x0a, 0x0a, 0x4c,
	0x6f, 0x67, 0x43, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x03, 0x66, 0x71, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xb2, 0xda, 0x21, 0x10, 0x0a, 0x0e, 0x0a, 0x0c,
	0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x66, 0x71,
	0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x67, 0x0a, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x73, 0x2e, 0x4c, 0x6f, 0x67, 0x43, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x1a, 0x41, 0x0a,
	0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x1a, 0xa5, 0x13, 0x0a, 0x05, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x5b, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x47, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x03, 0x66, 0x71, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xb2, 0xda, 0x21, 0x09, 0x0a, 0x07, 0x0a, 0x05, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x52, 0x03, 0x66, 0x71, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69,
	0x73, 0x5f, 0x66, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x69, 0x73, 0x46, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x79, 0x0a, 0x0e,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x73, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x77, 0x0a, 0x0e, 0x76, 0x69, 0x6f, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x50, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73,
	0x67, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2e, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x2e, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0d, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x57, 0x0a, 0x10, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x45, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x0f, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x6e, 0x0a, 0x0b, 0x61, 0x69, 0x5f,
	0x68, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x67,
	0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2e, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x2e, 0x41, 0x69, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x61,
	0x69, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x80, 0x01, 0x0a, 0x11, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x73, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x10, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x1a, 0xef, 0x04, 0x0a,
	0x0e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x7f, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x60, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x73, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x6f, 0x67, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x12, 0x88, 0x01, 0x0a, 0x0d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x63, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x8e, 0x01, 0x0a, 0x0f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x65, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x73, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x3c, 0x0a, 0x0e,
	0x4c, 0x6f, 0x67, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xbf,
	0x03, 0x0a, 0x0d, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x7c, 0x0a,
	0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x5b, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x73, 0x67, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73,
	0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52,
	0x0a, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x1a, 0x92, 0x02, 0x0a, 0x0a,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x01,
	0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x4b, 0x0a, 0x0f, 0x75, 0x70, 0x70, 0x65,
	0x72, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x0e, 0x75, 0x70, 0x70, 0x65, 0x72, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x4b, 0x0a, 0x0f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x52, 0x0e, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x12, 0x3c, 0x0a, 0x0c, 0x72, 0x61, 0x69, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x66, 0x74,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x72, 0x61, 0x69, 0x73, 0x65, 0x64, 0x41, 0x66, 0x74, 0x65, 0x72,
	0x1a, 0x9d, 0x02, 0x0a, 0x0a, 0x41, 0x69, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x12,
	0x51, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x69, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x33, 0x0a, 0x15, 0x74, 0x72, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x73, 0x68, 0x6f,
	0x6f, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x74, 0x72, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x73, 0x68, 0x6f, 0x6f, 0x74, 0x69,
	0x6e, 0x67, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x5e, 0x0a, 0x0e, 0x61, 0x69, 0x5f, 0x72, 0x65,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x41, 0x49, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x61, 0x69, 0x52, 0x65, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x72, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x72, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x67,
	0x1a, 0x81, 0x01, 0x0a, 0x10, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x57, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e,
	0x6f, 0x74, 0x65, 0x73, 0x22, 0x52, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09,
	0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x54,
	0x53, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x44, 0x5f, 0x41, 0x4e, 0x4f, 0x4d, 0x41, 0x4c, 0x59, 0x10,
	0x01, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x53, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x44, 0x5f, 0x54, 0x48,
	0x52, 0x45, 0x53, 0x48, 0x4f, 0x4c, 0x44, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x4f, 0x47,
	0x5f, 0x42, 0x41, 0x53, 0x45, 0x44, 0x10, 0x03, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x42, 0x55, 0xe8, 0xde, 0x21, 0x01, 0x5a, 0x4f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65,
	0x6c, 0x71, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3b, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x73, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	edgelq_alerting_proto_v1_notification_msg_proto_rawDescOnce sync.Once
	edgelq_alerting_proto_v1_notification_msg_proto_rawDescData = edgelq_alerting_proto_v1_notification_msg_proto_rawDesc
)

func edgelq_alerting_proto_v1_notification_msg_proto_rawDescGZIP() []byte {
	edgelq_alerting_proto_v1_notification_msg_proto_rawDescOnce.Do(func() {
		edgelq_alerting_proto_v1_notification_msg_proto_rawDescData = protoimpl.X.CompressGZIP(edgelq_alerting_proto_v1_notification_msg_proto_rawDescData)
	})
	return edgelq_alerting_proto_v1_notification_msg_proto_rawDescData
}

var edgelq_alerting_proto_v1_notification_msg_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var edgelq_alerting_proto_v1_notification_msg_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var edgelq_alerting_proto_v1_notification_msg_proto_goTypes = []interface{}{
	(NotificationMsg_AlertsGroup_ConditionAlerts_Alert_Type)(0), // 0: ntt.alerting.v1.NotificationMsg_AlertsGroup_ConditionAlerts_Alert_Type
	(*NotificationMsg)(nil),                                                    // 1: ntt.alerting.v1.NotificationMsg
	(*NotificationMsg_AlertsGroup)(nil),                                        // 2: ntt.alerting.v1.NotificationMsg.AlertsGroup
	(*NotificationMsg_AlertsGroup_ConditionAlerts)(nil),                        // 3: ntt.alerting.v1.NotificationMsg.AlertsGroup.ConditionAlerts
	(*NotificationMsg_AlertsGroup_ConditionAlerts_TsCndType)(nil),              // 4: ntt.alerting.v1.NotificationMsg.AlertsGroup.ConditionAlerts.TsCndType
	(*NotificationMsg_AlertsGroup_ConditionAlerts_LogCndType)(nil),             // 5: ntt.alerting.v1.NotificationMsg.AlertsGroup.ConditionAlerts.LogCndType
	(*NotificationMsg_AlertsGroup_ConditionAlerts_Alert)(nil),                  // 6: ntt.alerting.v1.NotificationMsg.AlertsGroup.ConditionAlerts.Alert
	(*NotificationMsg_AlertsGroup_ConditionAlerts_TsCndType_Query)(nil),        // 7: ntt.alerting.v1.NotificationMsg.AlertsGroup.ConditionAlerts.TsCndType.Query
	(*NotificationMsg_AlertsGroup_ConditionAlerts_LogCndType_Query)(nil),       // 8: ntt.alerting.v1.NotificationMsg.AlertsGroup.ConditionAlerts.LogCndType.Query
	(*NotificationMsg_AlertsGroup_ConditionAlerts_Alert_Identification)(nil),   // 9: ntt.alerting.v1.NotificationMsg.AlertsGroup.ConditionAlerts.Alert.Identification
	(*NotificationMsg_AlertsGroup_ConditionAlerts_Alert_ViolationInfo)(nil),    // 10: ntt.alerting.v1.NotificationMsg.AlertsGroup.ConditionAlerts.Alert.ViolationInfo
	(*NotificationMsg_AlertsGroup_ConditionAlerts_Alert_AiHandling)(nil),       // 11: ntt.alerting.v1.NotificationMsg.AlertsGroup.ConditionAlerts.Alert.AiHandling
	(*NotificationMsg_AlertsGroup_ConditionAlerts_Alert_OperatorHandling)(nil), // 12: ntt.alerting.v1.NotificationMsg.AlertsGroup.ConditionAlerts.Alert.OperatorHandling
	nil, // 13: ntt.alerting.v1.NotificationMsg.AlertsGroup.ConditionAlerts.Alert.Identification.LogLabelsEntry
	nil, // 14: ntt.alerting.v1.NotificationMsg.AlertsGroup.ConditionAlerts.Alert.Identification.MetricLabelsEntry
	nil, // 15: ntt.alerting.v1.NotificationMsg.AlertsGroup.ConditionAlerts.Alert.Identification.ResourceLabelsEntry
	(*NotificationMsg_AlertsGroup_ConditionAlerts_Alert_ViolationInfo_TimeSeries)(nil), // 16: ntt.alerting.v1.NotificationMsg.AlertsGroup.ConditionAlerts.Alert.ViolationInfo.TimeSeries
	(*monitoring_common.Aggregation)(nil),                                              // 17: ntt.monitoring.v4.Aggregation
	(*timestamppb.Timestamp)(nil),                                                      // 18: google.protobuf.Timestamp
	(alert.Alert_State_EscalationLevel)(0),                                             // 19: ntt.alerting.v1.Alert_State_EscalationLevel
	(*rcommon.AlertingThreshold)(nil),                                                  // 20: ntt.alerting.v1.AlertingThreshold
	(*durationpb.Duration)(nil),                                                        // 21: google.protobuf.Duration
	(alert.Alert_State_AiHandlingState)(0),                                             // 22: ntt.alerting.v1.Alert_State_AiHandlingState
	(*rcommon.PolicySpec_AIAgentHandling_Remediation)(nil),                             // 23: ntt.alerting.v1.PolicySpec.AIAgentHandling.Remediation
	(alert.Alert_State_OperatorHandlingState)(0),                                       // 24: ntt.alerting.v1.Alert_State_OperatorHandlingState
}
var edgelq_alerting_proto_v1_notification_msg_proto_depIdxs = []int32{
	2,  // 0: ntt.alerting.v1.NotificationMsg.new_firing_alerts:type_name -> ntt.alerting.v1.NotificationMsg.AlertsGroup
	2,  // 1: ntt.alerting.v1.NotificationMsg.alerts_escalated_by_ai_to_operator:type_name -> ntt.alerting.v1.NotificationMsg.AlertsGroup
	2,  // 2: ntt.alerting.v1.NotificationMsg.alerts_awaiting_for_approval_with_ai_remediation:type_name -> ntt.alerting.v1.NotificationMsg.AlertsGroup
	2,  // 3: ntt.alerting.v1.NotificationMsg.alerts_flagged_to_ignore_by_ai:type_name -> ntt.alerting.v1.NotificationMsg.AlertsGroup
	2,  // 4: ntt.alerting.v1.NotificationMsg.alerts_with_condition_marked_for_adjusting_by_ai:type_name -> ntt.alerting.v1.NotificationMsg.AlertsGroup
	2,  // 5: ntt.alerting.v1.NotificationMsg.alerts_with_ai_remediation_applied:type_name -> ntt.alerting.v1.NotificationMsg.AlertsGroup
	2,  // 6: ntt.alerting.v1.NotificationMsg.alerts_with_operator_remediation_applied:type_name -> ntt.alerting.v1.NotificationMsg.AlertsGroup
	2,  // 7: ntt.alerting.v1.NotificationMsg.stopped_alerts:type_name -> ntt.alerting.v1.NotificationMsg.AlertsGroup
	3,  // 8: ntt.alerting.v1.NotificationMsg.AlertsGroup.by_condition:type_name -> ntt.alerting.v1.NotificationMsg.AlertsGroup.ConditionAlerts
	4,  // 9: ntt.alerting.v1.NotificationMsg.AlertsGroup.ConditionAlerts.time_series_condition:type_name -> ntt.alerting.v1.NotificationMsg.AlertsGroup.ConditionAlerts.TsCndType
	5,  // 10: ntt.alerting.v1.NotificationMsg.AlertsGroup.ConditionAlerts.log_condition:type_name -> ntt.alerting.v1.NotificationMsg.AlertsGroup.ConditionAlerts.LogCndType
	6,  // 11: ntt.alerting.v1.NotificationMsg.AlertsGroup.ConditionAlerts.alerts:type_name -> ntt.alerting.v1.NotificationMsg.AlertsGroup.ConditionAlerts.Alert
	7,  // 12: ntt.alerting.v1.NotificationMsg.AlertsGroup.ConditionAlerts.TsCndType.queries:type_name -> ntt.alerting.v1.NotificationMsg.AlertsGroup.ConditionAlerts.TsCndType.Query
	8,  // 13: ntt.alerting.v1.NotificationMsg.AlertsGroup.ConditionAlerts.LogCndType.queries:type_name -> ntt.alerting.v1.NotificationMsg.AlertsGroup.ConditionAlerts.LogCndType.Query
	0,  // 14: ntt.alerting.v1.NotificationMsg.AlertsGroup.ConditionAlerts.Alert.type:type_name -> ntt.alerting.v1.NotificationMsg_AlertsGroup_ConditionAlerts_Alert_Type
	18, // 15: ntt.alerting.v1.NotificationMsg.AlertsGroup.ConditionAlerts.Alert.start_time:type_name -> google.protobuf.Timestamp
	18, // 16: ntt.alerting.v1.NotificationMsg.AlertsGroup.ConditionAlerts.Alert.stop_time:type_name -> google.protobuf.Timestamp
	9,  // 17: ntt.alerting.v1.NotificationMsg.AlertsGroup.ConditionAlerts.Alert.identification:type_name -> ntt.alerting.v1.NotificationMsg.AlertsGroup.ConditionAlerts.Alert.Identification
	10, // 18: ntt.alerting.v1.NotificationMsg.AlertsGroup.ConditionAlerts.Alert.violation_info:type_name -> ntt.alerting.v1.NotificationMsg.AlertsGroup.ConditionAlerts.Alert.ViolationInfo
	19, // 19: ntt.alerting.v1.NotificationMsg.AlertsGroup.ConditionAlerts.Alert.escalation_level:type_name -> ntt.alerting.v1.Alert_State_EscalationLevel
	11, // 20: ntt.alerting.v1.NotificationMsg.AlertsGroup.ConditionAlerts.Alert.ai_handling:type_name -> ntt.alerting.v1.NotificationMsg.AlertsGroup.ConditionAlerts.Alert.AiHandling
	12, // 21: ntt.alerting.v1.NotificationMsg.AlertsGroup.ConditionAlerts.Alert.operator_handling:type_name -> ntt.alerting.v1.NotificationMsg.AlertsGroup.ConditionAlerts.Alert.OperatorHandling
	17, // 22: ntt.alerting.v1.NotificationMsg.AlertsGroup.ConditionAlerts.TsCndType.Query.aggregation:type_name -> ntt.monitoring.v4.Aggregation
	13, // 23: ntt.alerting.v1.NotificationMsg.AlertsGroup.ConditionAlerts.Alert.Identification.log_labels:type_name -> ntt.alerting.v1.NotificationMsg.AlertsGroup.ConditionAlerts.Alert.Identification.LogLabelsEntry
	14, // 24: ntt.alerting.v1.NotificationMsg.AlertsGroup.ConditionAlerts.Alert.Identification.metric_labels:type_name -> ntt.alerting.v1.NotificationMsg.AlertsGroup.ConditionAlerts.Alert.Identification.MetricLabelsEntry
	15, // 25: ntt.alerting.v1.NotificationMsg.AlertsGroup.ConditionAlerts.Alert.Identification.resource_labels:type_name -> ntt.alerting.v1.NotificationMsg.AlertsGroup.ConditionAlerts.Alert.Identification.ResourceLabelsEntry
	16, // 26: ntt.alerting.v1.NotificationMsg.AlertsGroup.ConditionAlerts.Alert.ViolationInfo.time_series:type_name -> ntt.alerting.v1.NotificationMsg.AlertsGroup.ConditionAlerts.Alert.ViolationInfo.TimeSeries
	22, // 27: ntt.alerting.v1.NotificationMsg.AlertsGroup.ConditionAlerts.Alert.AiHandling.current_state:type_name -> ntt.alerting.v1.Alert_State_AiHandlingState
	23, // 28: ntt.alerting.v1.NotificationMsg.AlertsGroup.ConditionAlerts.Alert.AiHandling.ai_remediation:type_name -> ntt.alerting.v1.PolicySpec.AIAgentHandling.Remediation
	24, // 29: ntt.alerting.v1.NotificationMsg.AlertsGroup.ConditionAlerts.Alert.OperatorHandling.current_state:type_name -> ntt.alerting.v1.Alert_State_OperatorHandlingState
	20, // 30: ntt.alerting.v1.NotificationMsg.AlertsGroup.ConditionAlerts.Alert.ViolationInfo.TimeSeries.upper_threshold:type_name -> ntt.alerting.v1.AlertingThreshold
	20, // 31: ntt.alerting.v1.NotificationMsg.AlertsGroup.ConditionAlerts.Alert.ViolationInfo.TimeSeries.lower_threshold:type_name -> ntt.alerting.v1.AlertingThreshold
	21, // 32: ntt.alerting.v1.NotificationMsg.AlertsGroup.ConditionAlerts.Alert.ViolationInfo.TimeSeries.raised_after:type_name -> google.protobuf.Duration
	33, // [33:33] is the sub-list for method output_type
	33, // [33:33] is the sub-list for method input_type
	33, // [33:33] is the sub-list for extension type_name
	33, // [33:33] is the sub-list for extension extendee
	0,  // [0:33] is the sub-list for field type_name
}

func init() { edgelq_alerting_proto_v1_notification_msg_proto_init() }
func edgelq_alerting_proto_v1_notification_msg_proto_init() {
	if edgelq_alerting_proto_v1_notification_msg_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		edgelq_alerting_proto_v1_notification_msg_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_notification_msg_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationMsg_AlertsGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_notification_msg_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationMsg_AlertsGroup_ConditionAlerts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_notification_msg_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationMsg_AlertsGroup_ConditionAlerts_TsCndType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_notification_msg_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationMsg_AlertsGroup_ConditionAlerts_LogCndType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_notification_msg_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationMsg_AlertsGroup_ConditionAlerts_Alert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_notification_msg_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationMsg_AlertsGroup_ConditionAlerts_TsCndType_Query); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_notification_msg_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationMsg_AlertsGroup_ConditionAlerts_LogCndType_Query); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_notification_msg_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationMsg_AlertsGroup_ConditionAlerts_Alert_Identification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_notification_msg_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationMsg_AlertsGroup_ConditionAlerts_Alert_ViolationInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_notification_msg_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationMsg_AlertsGroup_ConditionAlerts_Alert_AiHandling); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_notification_msg_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationMsg_AlertsGroup_ConditionAlerts_Alert_OperatorHandling); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_notification_msg_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationMsg_AlertsGroup_ConditionAlerts_Alert_ViolationInfo_TimeSeries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	edgelq_alerting_proto_v1_notification_msg_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*NotificationMsg_AlertsGroup_ConditionAlerts_TimeSeriesCondition)(nil),
		(*NotificationMsg_AlertsGroup_ConditionAlerts_LogCondition)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: edgelq_alerting_proto_v1_notification_msg_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           edgelq_alerting_proto_v1_notification_msg_proto_goTypes,
		DependencyIndexes: edgelq_alerting_proto_v1_notification_msg_proto_depIdxs,
		EnumInfos:         edgelq_alerting_proto_v1_notification_msg_proto_enumTypes,
		MessageInfos:      edgelq_alerting_proto_v1_notification_msg_proto_msgTypes,
	}.Build()
	edgelq_alerting_proto_v1_notification_msg_proto = out.File
	edgelq_alerting_proto_v1_notification_msg_proto_rawDesc = nil
	edgelq_alerting_proto_v1_notification_msg_proto_goTypes = nil
	edgelq_alerting_proto_v1_notification_msg_proto_depIdxs = nil
}
