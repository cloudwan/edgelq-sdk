// Code generated by protoc-gen-goten-go
// File: edgelq/alerting/proto/v1/specs.proto
// DO NOT EDIT!!!

package rcommon

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	logging_log "github.com/cloudwan/edgelq-sdk/logging/resources/v1/log"
	monitoring_common "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/common"
	monitoring_time_serie "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/time_serie"
	meta_resource "github.com/cloudwan/goten-sdk/meta-service/resources/v1/resource"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &logging_log.Log{}
	_ = &monitoring_common.LabelDescriptor{}
	_ = &monitoring_time_serie.Point{}
	_ = &durationpb.Duration{}
	_ = &fieldmaskpb.FieldMask{}
	_ = &meta_resource.Resource{}
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Operator informs if only one trigger must be satisfied to
// trigger an Alert, or all.
type LogCndSpec_Query_CompositeTrigger_Operator int32

const (
	// UNDEFINED is not allowed
	LogCndSpec_Query_CompositeTrigger_UNDEFINED LogCndSpec_Query_CompositeTrigger_Operator = 0
	// AND tells that all triggers must be on for Alert to be created
	LogCndSpec_Query_CompositeTrigger_AND LogCndSpec_Query_CompositeTrigger_Operator = 1
	// OR tells that Alert should be raised based on any trigger
	// condition.
	LogCndSpec_Query_CompositeTrigger_OR LogCndSpec_Query_CompositeTrigger_Operator = 2
)

var (
	LogCndSpec_Query_CompositeTrigger_Operator_name = map[int32]string{
		0: "UNDEFINED",
		1: "AND",
		2: "OR",
	}

	LogCndSpec_Query_CompositeTrigger_Operator_value = map[string]int32{
		"UNDEFINED": 0,
		"AND":       1,
		"OR":        2,
	}
)

func (x LogCndSpec_Query_CompositeTrigger_Operator) Enum() *LogCndSpec_Query_CompositeTrigger_Operator {
	p := new(LogCndSpec_Query_CompositeTrigger_Operator)
	*p = x
	return p
}

func (x LogCndSpec_Query_CompositeTrigger_Operator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (LogCndSpec_Query_CompositeTrigger_Operator) Descriptor() preflect.EnumDescriptor {
	return edgelq_alerting_proto_v1_specs_proto_enumTypes[0].Descriptor()
}

func (LogCndSpec_Query_CompositeTrigger_Operator) Type() preflect.EnumType {
	return &edgelq_alerting_proto_v1_specs_proto_enumTypes[0]
}

func (x LogCndSpec_Query_CompositeTrigger_Operator) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use LogCndSpec_Query_CompositeTrigger_Operator.ProtoReflect.Descriptor instead.
func (LogCndSpec_Query_CompositeTrigger_Operator) EnumDescriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_specs_proto_rawDescGZIP(), []int{0, 0, 2, 0}
}

// Operator informs if whether all or one of queries must be crossed
// for alert to be generated.
type TsCndSpec_ThresholdAlertingCfg_Operator int32

const (
	// UNDEFINED is not allowed
	TsCndSpec_ThresholdAlertingCfg_UNDEFINED TsCndSpec_ThresholdAlertingCfg_Operator = 0
	// AND indicates that all thresholds must be crossed for
	// alert ti be triggered.
	TsCndSpec_ThresholdAlertingCfg_AND TsCndSpec_ThresholdAlertingCfg_Operator = 1
	// OR indicates that Alert should be raised if any of queries
	// violates threshold.
	TsCndSpec_ThresholdAlertingCfg_OR TsCndSpec_ThresholdAlertingCfg_Operator = 2
)

var (
	TsCndSpec_ThresholdAlertingCfg_Operator_name = map[int32]string{
		0: "UNDEFINED",
		1: "AND",
		2: "OR",
	}

	TsCndSpec_ThresholdAlertingCfg_Operator_value = map[string]int32{
		"UNDEFINED": 0,
		"AND":       1,
		"OR":        2,
	}
)

func (x TsCndSpec_ThresholdAlertingCfg_Operator) Enum() *TsCndSpec_ThresholdAlertingCfg_Operator {
	p := new(TsCndSpec_ThresholdAlertingCfg_Operator)
	*p = x
	return p
}

func (x TsCndSpec_ThresholdAlertingCfg_Operator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (TsCndSpec_ThresholdAlertingCfg_Operator) Descriptor() preflect.EnumDescriptor {
	return edgelq_alerting_proto_v1_specs_proto_enumTypes[1].Descriptor()
}

func (TsCndSpec_ThresholdAlertingCfg_Operator) Type() preflect.EnumType {
	return &edgelq_alerting_proto_v1_specs_proto_enumTypes[1]
}

func (x TsCndSpec_ThresholdAlertingCfg_Operator) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use TsCndSpec_ThresholdAlertingCfg_Operator.ProtoReflect.Descriptor instead.
func (TsCndSpec_ThresholdAlertingCfg_Operator) EnumDescriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_specs_proto_rawDescGZIP(), []int{1, 1, 0}
}

// ProcessingLocation indicates if alerts should be detected on Edge
// or in backend. Edge may be preferred for various reasons:
// * Alerts can be raised closer to the source.
// * Conditions can use more sophisticated methods, like local small AI
// anomaly
//   detector models. In backend, performance may not be guaranteed, if
//   there are a lot of pending trainings.
// Backend is preferred when:
// * We want to alert based on metrics that dont make sense on edge (like
// connectivity).
// * Alerting resoucrce is not "edge" type. For example, we monitor some
// network targets
//   monitored by multiple distributed probes.
type PolicySpec_ProcessingLocation int32

const (
	// UNDEFINED is invalid
	PolicySpec_UNDEFINED PolicySpec_ProcessingLocation = 0
	// Alerts will be detected and generated in the backend.
	PolicySpec_BACKEND PolicySpec_ProcessingLocation = 1
	// Alerts will be detected and generated on the edge.
	PolicySpec_EDGE PolicySpec_ProcessingLocation = 2
)

var (
	PolicySpec_ProcessingLocation_name = map[int32]string{
		0: "UNDEFINED",
		1: "BACKEND",
		2: "EDGE",
	}

	PolicySpec_ProcessingLocation_value = map[string]int32{
		"UNDEFINED": 0,
		"BACKEND":   1,
		"EDGE":      2,
	}
)

func (x PolicySpec_ProcessingLocation) Enum() *PolicySpec_ProcessingLocation {
	p := new(PolicySpec_ProcessingLocation)
	*p = x
	return p
}

func (x PolicySpec_ProcessingLocation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (PolicySpec_ProcessingLocation) Descriptor() preflect.EnumDescriptor {
	return edgelq_alerting_proto_v1_specs_proto_enumTypes[2].Descriptor()
}

func (PolicySpec_ProcessingLocation) Type() preflect.EnumType {
	return &edgelq_alerting_proto_v1_specs_proto_enumTypes[2]
}

func (x PolicySpec_ProcessingLocation) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use PolicySpec_ProcessingLocation.ProtoReflect.Descriptor instead.
func (PolicySpec_ProcessingLocation) EnumDescriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_specs_proto_rawDescGZIP(), []int{2, 0}
}

// UsageContext exact descriptor type where label key can be found.
type PolicySpec_ResourceIdentity_LabelInfo_UsageContext int32

const (
	// UNDEFINED - not allowed
	PolicySpec_ResourceIdentity_LabelInfo_UNDEFINED PolicySpec_ResourceIdentity_LabelInfo_UsageContext = 0
	// Indicates that label of given key can be found in
	// monitoring.edgelq.com/MetricDescriptor resource.
	PolicySpec_ResourceIdentity_LabelInfo_METRIC_LABEL PolicySpec_ResourceIdentity_LabelInfo_UsageContext = 1
	// Indicates that label of given key can be found in
	// monitoring.edgelq.com/MonitoredResourceDescriptor resource.
	PolicySpec_ResourceIdentity_LabelInfo_RESOURCE_LABEL PolicySpec_ResourceIdentity_LabelInfo_UsageContext = 2
	// Indicates that label of given key can be found in
	// logging.edgelq.com/LogDescriptor resource.
	PolicySpec_ResourceIdentity_LabelInfo_LOG_LABEL PolicySpec_ResourceIdentity_LabelInfo_UsageContext = 3
)

var (
	PolicySpec_ResourceIdentity_LabelInfo_UsageContext_name = map[int32]string{
		0: "UNDEFINED",
		1: "METRIC_LABEL",
		2: "RESOURCE_LABEL",
		3: "LOG_LABEL",
	}

	PolicySpec_ResourceIdentity_LabelInfo_UsageContext_value = map[string]int32{
		"UNDEFINED":      0,
		"METRIC_LABEL":   1,
		"RESOURCE_LABEL": 2,
		"LOG_LABEL":      3,
	}
)

func (x PolicySpec_ResourceIdentity_LabelInfo_UsageContext) Enum() *PolicySpec_ResourceIdentity_LabelInfo_UsageContext {
	p := new(PolicySpec_ResourceIdentity_LabelInfo_UsageContext)
	*p = x
	return p
}

func (x PolicySpec_ResourceIdentity_LabelInfo_UsageContext) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (PolicySpec_ResourceIdentity_LabelInfo_UsageContext) Descriptor() preflect.EnumDescriptor {
	return edgelq_alerting_proto_v1_specs_proto_enumTypes[3].Descriptor()
}

func (PolicySpec_ResourceIdentity_LabelInfo_UsageContext) Type() preflect.EnumType {
	return &edgelq_alerting_proto_v1_specs_proto_enumTypes[3]
}

func (x PolicySpec_ResourceIdentity_LabelInfo_UsageContext) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use PolicySpec_ResourceIdentity_LabelInfo_UsageContext.ProtoReflect.Descriptor instead.
func (PolicySpec_ResourceIdentity_LabelInfo_UsageContext) EnumDescriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_specs_proto_rawDescGZIP(), []int{2, 0, 0, 0}
}

// Type of NotificationChannel
type NotificationChannelSpec_Type int32

const (
	// Type is unknown
	NotificationChannelSpec_TYPE_UNSPECIFIED NotificationChannelSpec_Type = 0
	// Email NotificationChannel
	NotificationChannelSpec_EMAIL NotificationChannelSpec_Type = 1
	// Slack NotificationChannel
	NotificationChannelSpec_SLACK NotificationChannelSpec_Type = 2
	// Webhook NotificationChannel
	NotificationChannelSpec_WEBHOOK NotificationChannelSpec_Type = 3
)

var (
	NotificationChannelSpec_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "EMAIL",
		2: "SLACK",
		3: "WEBHOOK",
	}

	NotificationChannelSpec_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"EMAIL":            1,
		"SLACK":            2,
		"WEBHOOK":          3,
	}
)

func (x NotificationChannelSpec_Type) Enum() *NotificationChannelSpec_Type {
	p := new(NotificationChannelSpec_Type)
	*p = x
	return p
}

func (x NotificationChannelSpec_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (NotificationChannelSpec_Type) Descriptor() preflect.EnumDescriptor {
	return edgelq_alerting_proto_v1_specs_proto_enumTypes[4].Descriptor()
}

func (NotificationChannelSpec_Type) Type() preflect.EnumType {
	return &edgelq_alerting_proto_v1_specs_proto_enumTypes[4]
}

func (x NotificationChannelSpec_Type) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use NotificationChannelSpec_Type.ProtoReflect.Descriptor instead.
func (NotificationChannelSpec_Type) EnumDescriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_specs_proto_rawDescGZIP(), []int{3, 0}
}

// EventKind specifies interesting alert state change which may
// trigger a notification generation.
type NotificationChannelSpec_EventKind int32

const (
	// Undefined is not allowed
	NotificationChannelSpec_UNDEFINED NotificationChannelSpec_EventKind = 0
	// This kind must be used if we want to generate a notification
	// for a new firing alert.
	NotificationChannelSpec_NEW_FIRING NotificationChannelSpec_EventKind = 1
	// This kind must be used if we want to generate a notification
	// for an alert that has been pushed to Operator (escalated by
	// AI Agent).
	NotificationChannelSpec_AI_ESCALATED_TO_OPERATOR NotificationChannelSpec_EventKind = 2
	// This kind must be used if we want to generate a notification
	// for an alert which received remediation recommendation by
	// AI Agent, and which requires operator approval.
	NotificationChannelSpec_AI_REMEDIATION_AWAITING_APPROVAL NotificationChannelSpec_EventKind = 3
	// This kind must be used if we want to generate a notification
	// for an alert which has been considered as a temporary violation
	// by AI Agent.
	NotificationChannelSpec_AI_IGNORED_AS_TMP NotificationChannelSpec_EventKind = 4
	// This kind must be used if we want to generate a notification
	// for an alert which has been considered as a false positive,
	// and for which alerting thresholds should be adjusted.
	NotificationChannelSpec_AI_ADJUSTED_ENTRIES NotificationChannelSpec_EventKind = 5
	// This kind must be used if we want to generate a notification
	// for an alert for which AI agent applied recommendation.
	NotificationChannelSpec_AI_REMEDIATION_APPLIED NotificationChannelSpec_EventKind = 6
	// This kind must be used if we want to generate a notification
	// for an alert for which operator applied recommendation.
	NotificationChannelSpec_OP_REMEDIATION_APPLIED NotificationChannelSpec_EventKind = 7
	// This kind must be used if we want to generate a notification
	// for an alert that stopped firing.
	NotificationChannelSpec_STOPPED_FIRING NotificationChannelSpec_EventKind = 8
)

var (
	NotificationChannelSpec_EventKind_name = map[int32]string{
		0: "UNDEFINED",
		1: "NEW_FIRING",
		2: "AI_ESCALATED_TO_OPERATOR",
		3: "AI_REMEDIATION_AWAITING_APPROVAL",
		4: "AI_IGNORED_AS_TMP",
		5: "AI_ADJUSTED_ENTRIES",
		6: "AI_REMEDIATION_APPLIED",
		7: "OP_REMEDIATION_APPLIED",
		8: "STOPPED_FIRING",
	}

	NotificationChannelSpec_EventKind_value = map[string]int32{
		"UNDEFINED":                        0,
		"NEW_FIRING":                       1,
		"AI_ESCALATED_TO_OPERATOR":         2,
		"AI_REMEDIATION_AWAITING_APPROVAL": 3,
		"AI_IGNORED_AS_TMP":                4,
		"AI_ADJUSTED_ENTRIES":              5,
		"AI_REMEDIATION_APPLIED":           6,
		"OP_REMEDIATION_APPLIED":           7,
		"STOPPED_FIRING":                   8,
	}
)

func (x NotificationChannelSpec_EventKind) Enum() *NotificationChannelSpec_EventKind {
	p := new(NotificationChannelSpec_EventKind)
	*p = x
	return p
}

func (x NotificationChannelSpec_EventKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (NotificationChannelSpec_EventKind) Descriptor() preflect.EnumDescriptor {
	return edgelq_alerting_proto_v1_specs_proto_enumTypes[5].Descriptor()
}

func (NotificationChannelSpec_EventKind) Type() preflect.EnumType {
	return &edgelq_alerting_proto_v1_specs_proto_enumTypes[5]
}

func (x NotificationChannelSpec_EventKind) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use NotificationChannelSpec_EventKind.ProtoReflect.Descriptor instead.
func (NotificationChannelSpec_EventKind) EnumDescriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_specs_proto_rawDescGZIP(), []int{3, 1}
}

// LogCndSpec informs what Logging queries should be monitored for alerting, and
// what content should be considered as violation.
type LogCndSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Specifies logging query
	Query *LogCndSpec_Query `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	// Group by labels inform how to split monitored Logs stream. Each
	// unique combination of label values is considered separately as own
	// alerting bucket.
	// All labels defined in Policy must be defined here.
	GroupByLabels []string `protobuf:"bytes,2,rep,name=group_by_labels,json=groupByLabels,proto3" json:"group_by_labels,omitempty"`
}

func (m *LogCndSpec) Reset() {
	*m = LogCndSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_specs_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *LogCndSpec) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*LogCndSpec) ProtoMessage() {}

func (m *LogCndSpec) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_specs_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*LogCndSpec) GotenMessage() {}

// Deprecated, Use LogCndSpec.ProtoReflect.Descriptor instead.
func (*LogCndSpec) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_specs_proto_rawDescGZIP(), []int{0}
}

func (m *LogCndSpec) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *LogCndSpec) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *LogCndSpec) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *LogCndSpec) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *LogCndSpec) GetQuery() *LogCndSpec_Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *LogCndSpec) GetGroupByLabels() []string {
	if m != nil {
		return m.GroupByLabels
	}
	return nil
}

func (m *LogCndSpec) SetQuery(fv *LogCndSpec_Query) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Query", "LogCndSpec"))
	}
	m.Query = fv
}

func (m *LogCndSpec) SetGroupByLabels(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "GroupByLabels", "LogCndSpec"))
	}
	m.GroupByLabels = fv
}

// TsCndSpec defines time series queries and thresholds/anomaly detectors.
type TsCndSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// List of observed queries. Each by default can raise alert by
	// threshold. If anomaly detectors are specified, they try to learn
	// all time series together.
	Queries []*TsCndSpec_Query `protobuf:"bytes,1,rep,name=queries,proto3" json:"queries,omitempty"`
	// List of group by labels applied to all queries.
	// Each unique combination of group_by is tracked separately.
	// It has its own adaptive thresholds, its own anomaly detectors.
	// One such representation has a form of resource TsEntry.
	// Group by fields must define all labels defined in Policy.
	QueryGroupBy []string `protobuf:"bytes,2,rep,name=query_group_by,json=queryGroupBy,proto3" json:"query_group_by,omitempty"`
	// Threshold alerting configuration
	ThresholdAlerting *TsCndSpec_ThresholdAlertingCfg `protobuf:"bytes,3,opt,name=threshold_alerting,json=thresholdAlerting,proto3" json:"threshold_alerting,omitempty"`
	// All anomaly detectors. Its possible to define multiple
	// detectors with different analysis window. It is advisable
	// to create one detector catching long window (1 day, step
	// interval 15 minutes), followed by small window (15 minutes,
	// step interval 1 minute). This should catch sudden and small
	// anomalies, along with long term unexpected changes.
	// Maintaining long window (1 day) along with small interval
	// (1 minute) would be too costly.
	// Other option detectors may be:
	// 1 day / 30 minutes + 30 minutes / 1 minute.
	AnomalyAlerting []*TsCndSpec_AnomalyAlertingCfg `protobuf:"bytes,5,rep,name=anomaly_alerting,json=anomalyAlerting,proto3" json:"anomaly_alerting,omitempty"`
}

func (m *TsCndSpec) Reset() {
	*m = TsCndSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_specs_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *TsCndSpec) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*TsCndSpec) ProtoMessage() {}

func (m *TsCndSpec) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_specs_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*TsCndSpec) GotenMessage() {}

// Deprecated, Use TsCndSpec.ProtoReflect.Descriptor instead.
func (*TsCndSpec) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_specs_proto_rawDescGZIP(), []int{1}
}

func (m *TsCndSpec) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *TsCndSpec) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *TsCndSpec) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *TsCndSpec) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *TsCndSpec) GetQueries() []*TsCndSpec_Query {
	if m != nil {
		return m.Queries
	}
	return nil
}

func (m *TsCndSpec) GetQueryGroupBy() []string {
	if m != nil {
		return m.QueryGroupBy
	}
	return nil
}

func (m *TsCndSpec) GetThresholdAlerting() *TsCndSpec_ThresholdAlertingCfg {
	if m != nil {
		return m.ThresholdAlerting
	}
	return nil
}

func (m *TsCndSpec) GetAnomalyAlerting() []*TsCndSpec_AnomalyAlertingCfg {
	if m != nil {
		return m.AnomalyAlerting
	}
	return nil
}

func (m *TsCndSpec) SetQueries(fv []*TsCndSpec_Query) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Queries", "TsCndSpec"))
	}
	m.Queries = fv
}

func (m *TsCndSpec) SetQueryGroupBy(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "QueryGroupBy", "TsCndSpec"))
	}
	m.QueryGroupBy = fv
}

func (m *TsCndSpec) SetThresholdAlerting(fv *TsCndSpec_ThresholdAlertingCfg) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ThresholdAlerting", "TsCndSpec"))
	}
	m.ThresholdAlerting = fv
}

func (m *TsCndSpec) SetAnomalyAlerting(fv []*TsCndSpec_AnomalyAlertingCfg) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AnomalyAlerting", "TsCndSpec"))
	}
	m.AnomalyAlerting = fv
}

// PolicySpec defines common specification parts shared by all conditions
// within:
// * Enabled flag
// * Processing location
// * Standard troubleshooting queries to be executed for triggered alerts.
// * Shared resource type identity
// * Whether and how AI agent should be handling alerts
type PolicySpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Enabled controls whether conditions within are active or not.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Decides whether alerting is executed in backend or at the edge.
	// This field cannot be modified.
	ProcessingLocation PolicySpec_ProcessingLocation `protobuf:"varint,2,opt,name=processing_location,json=processingLocation,proto3,enum=ntt.alerting.v1.PolicySpec_ProcessingLocation" json:"processing_location,omitempty"`
	// Resource identity shared by all conditions/alerts within policy.
	ResourceIdentity *PolicySpec_ResourceIdentity `protobuf:"bytes,6,opt,name=resource_identity,json=resourceIdentity,proto3" json:"resource_identity,omitempty"`
	// List of all supporting queries to be executed for alerts within Policy.
	SupportingQueries []*PolicySpec_SupportingAlertQuery `protobuf:"bytes,7,rep,name=supporting_queries,json=supportingQueries,proto3" json:"supporting_queries,omitempty"`
	// Defines AI agent handling for alerts within this policy
	AiAgent *PolicySpec_AIAgentHandling `protobuf:"bytes,8,opt,name=ai_agent,json=aiAgent,proto3" json:"ai_agent,omitempty"`
}

func (m *PolicySpec) Reset() {
	*m = PolicySpec{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_specs_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *PolicySpec) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*PolicySpec) ProtoMessage() {}

func (m *PolicySpec) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_specs_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*PolicySpec) GotenMessage() {}

// Deprecated, Use PolicySpec.ProtoReflect.Descriptor instead.
func (*PolicySpec) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_specs_proto_rawDescGZIP(), []int{2}
}

func (m *PolicySpec) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *PolicySpec) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *PolicySpec) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *PolicySpec) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *PolicySpec) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *PolicySpec) GetProcessingLocation() PolicySpec_ProcessingLocation {
	if m != nil {
		return m.ProcessingLocation
	}
	return PolicySpec_UNDEFINED
}

func (m *PolicySpec) GetResourceIdentity() *PolicySpec_ResourceIdentity {
	if m != nil {
		return m.ResourceIdentity
	}
	return nil
}

func (m *PolicySpec) GetSupportingQueries() []*PolicySpec_SupportingAlertQuery {
	if m != nil {
		return m.SupportingQueries
	}
	return nil
}

func (m *PolicySpec) GetAiAgent() *PolicySpec_AIAgentHandling {
	if m != nil {
		return m.AiAgent
	}
	return nil
}

func (m *PolicySpec) SetEnabled(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Enabled", "PolicySpec"))
	}
	m.Enabled = fv
}

func (m *PolicySpec) SetProcessingLocation(fv PolicySpec_ProcessingLocation) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ProcessingLocation", "PolicySpec"))
	}
	m.ProcessingLocation = fv
}

func (m *PolicySpec) SetResourceIdentity(fv *PolicySpec_ResourceIdentity) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResourceIdentity", "PolicySpec"))
	}
	m.ResourceIdentity = fv
}

func (m *PolicySpec) SetSupportingQueries(fv []*PolicySpec_SupportingAlertQuery) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SupportingQueries", "PolicySpec"))
	}
	m.SupportingQueries = fv
}

func (m *PolicySpec) SetAiAgent(fv *PolicySpec_AIAgentHandling) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AiAgent", "PolicySpec"))
	}
	m.AiAgent = fv
}

// NotificationChannelSpec informs what kind of channel it is, and how to send
// there messages.
type NotificationChannelSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Enabled flag. Whether the NotificationChannel is enabled or not. Disabled
	// channels will not be used for alerting.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Type. Corresponding spec should a oneof field.
	Type NotificationChannelSpec_Type `protobuf:"varint,2,opt,name=type,proto3,enum=ntt.alerting.v1.NotificationChannelSpec_Type" json:"type,omitempty"`
	// List of alert state event kinds when we want to send a notification.
	EnabledKinds []NotificationChannelSpec_EventKind `protobuf:"varint,8,rep,packed,name=enabled_kinds,json=enabledKinds,proto3,enum=ntt.alerting.v1.NotificationChannelSpec_EventKind" json:"enabled_kinds,omitempty"`
	// Email
	Email *NotificationChannelSpec_Email `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	// Slack
	Slack *NotificationChannelSpec_Slack `protobuf:"bytes,4,opt,name=slack,proto3" json:"slack,omitempty"`
	// Webhook endpoint
	Webhook *NotificationChannelSpec_Webhook `protobuf:"bytes,5,opt,name=webhook,proto3" json:"webhook,omitempty"`
	// Default language for invitation is english (eng)
	// Configuring unsupported language will fallback to english
	// Currently only sendgrid uses this.
	NotificationLanguageCode string `protobuf:"bytes,6,opt,name=notification_language_code,json=notificationLanguageCode,proto3" json:"notification_language_code,omitempty"`
	// Notification mask contains list of fields to include in the message.
	// It must match NotificationMsg
	NotificationMask *fieldmaskpb.FieldMask `protobuf:"bytes,7,opt,name=notification_mask,json=notificationMask,proto3" json:"notification_mask,omitempty"`
	// If bigger than 0, then number of alert bodies in message
	// will be cut to this value.
	MaxAlertBodiesInMsg int32 `protobuf:"varint,9,opt,name=max_alert_bodies_in_msg,json=maxAlertBodiesInMsg,proto3" json:"max_alert_bodies_in_msg,omitempty"`
	// This field matters if max_alert_bodies_in_msg is bigger than 0.
	// If this field has value true, then notification message will only
	// inform how many alerts additionally were raised on top of provided
	// in the notification.
	// If false, multiple notifications will be generated.
	PutOnlyAlertsCounterWhenOverflowing bool `protobuf:"varint,10,opt,name=put_only_alerts_counter_when_overflowing,json=putOnlyAlertsCounterWhenOverflowing,proto3" json:"put_only_alerts_counter_when_overflowing,omitempty"`
}

func (m *NotificationChannelSpec) Reset() {
	*m = NotificationChannelSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_specs_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *NotificationChannelSpec) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*NotificationChannelSpec) ProtoMessage() {}

func (m *NotificationChannelSpec) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_specs_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*NotificationChannelSpec) GotenMessage() {}

// Deprecated, Use NotificationChannelSpec.ProtoReflect.Descriptor instead.
func (*NotificationChannelSpec) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_specs_proto_rawDescGZIP(), []int{3}
}

func (m *NotificationChannelSpec) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *NotificationChannelSpec) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *NotificationChannelSpec) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *NotificationChannelSpec) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *NotificationChannelSpec) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *NotificationChannelSpec) GetType() NotificationChannelSpec_Type {
	if m != nil {
		return m.Type
	}
	return NotificationChannelSpec_TYPE_UNSPECIFIED
}

func (m *NotificationChannelSpec) GetEnabledKinds() []NotificationChannelSpec_EventKind {
	if m != nil {
		return m.EnabledKinds
	}
	return nil
}

func (m *NotificationChannelSpec) GetEmail() *NotificationChannelSpec_Email {
	if m != nil {
		return m.Email
	}
	return nil
}

func (m *NotificationChannelSpec) GetSlack() *NotificationChannelSpec_Slack {
	if m != nil {
		return m.Slack
	}
	return nil
}

func (m *NotificationChannelSpec) GetWebhook() *NotificationChannelSpec_Webhook {
	if m != nil {
		return m.Webhook
	}
	return nil
}

func (m *NotificationChannelSpec) GetNotificationLanguageCode() string {
	if m != nil {
		return m.NotificationLanguageCode
	}
	return ""
}

func (m *NotificationChannelSpec) GetNotificationMask() *fieldmaskpb.FieldMask {
	if m != nil {
		return m.NotificationMask
	}
	return nil
}

func (m *NotificationChannelSpec) GetMaxAlertBodiesInMsg() int32 {
	if m != nil {
		return m.MaxAlertBodiesInMsg
	}
	return int32(0)
}

func (m *NotificationChannelSpec) GetPutOnlyAlertsCounterWhenOverflowing() bool {
	if m != nil {
		return m.PutOnlyAlertsCounterWhenOverflowing
	}
	return false
}

func (m *NotificationChannelSpec) SetEnabled(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Enabled", "NotificationChannelSpec"))
	}
	m.Enabled = fv
}

func (m *NotificationChannelSpec) SetType(fv NotificationChannelSpec_Type) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Type", "NotificationChannelSpec"))
	}
	m.Type = fv
}

func (m *NotificationChannelSpec) SetEnabledKinds(fv []NotificationChannelSpec_EventKind) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "EnabledKinds", "NotificationChannelSpec"))
	}
	m.EnabledKinds = fv
}

func (m *NotificationChannelSpec) SetEmail(fv *NotificationChannelSpec_Email) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Email", "NotificationChannelSpec"))
	}
	m.Email = fv
}

func (m *NotificationChannelSpec) SetSlack(fv *NotificationChannelSpec_Slack) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Slack", "NotificationChannelSpec"))
	}
	m.Slack = fv
}

func (m *NotificationChannelSpec) SetWebhook(fv *NotificationChannelSpec_Webhook) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Webhook", "NotificationChannelSpec"))
	}
	m.Webhook = fv
}

func (m *NotificationChannelSpec) SetNotificationLanguageCode(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NotificationLanguageCode", "NotificationChannelSpec"))
	}
	m.NotificationLanguageCode = fv
}

func (m *NotificationChannelSpec) SetNotificationMask(fv *fieldmaskpb.FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NotificationMask", "NotificationChannelSpec"))
	}
	m.NotificationMask = fv
}

func (m *NotificationChannelSpec) SetMaxAlertBodiesInMsg(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MaxAlertBodiesInMsg", "NotificationChannelSpec"))
	}
	m.MaxAlertBodiesInMsg = fv
}

func (m *NotificationChannelSpec) SetPutOnlyAlertsCounterWhenOverflowing(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PutOnlyAlertsCounterWhenOverflowing", "NotificationChannelSpec"))
	}
	m.PutOnlyAlertsCounterWhenOverflowing = fv
}

// AlertingThreshold defines threshold value for alerting.
type AlertingThreshold struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Value that must not be crossed.
	Value float64 `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	// If true, then alert is raised when exact specified value is
	// reached. Otherwise, it has to be crossed.
	IsInclusive bool `protobuf:"varint,2,opt,name=is_inclusive,json=isInclusive,proto3" json:"is_inclusive,omitempty"`
}

func (m *AlertingThreshold) Reset() {
	*m = AlertingThreshold{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_specs_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *AlertingThreshold) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*AlertingThreshold) ProtoMessage() {}

func (m *AlertingThreshold) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_specs_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*AlertingThreshold) GotenMessage() {}

// Deprecated, Use AlertingThreshold.ProtoReflect.Descriptor instead.
func (*AlertingThreshold) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_specs_proto_rawDescGZIP(), []int{4}
}

func (m *AlertingThreshold) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *AlertingThreshold) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *AlertingThreshold) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *AlertingThreshold) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *AlertingThreshold) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return float64(0)
}

func (m *AlertingThreshold) GetIsInclusive() bool {
	if m != nil {
		return m.IsInclusive
	}
	return false
}

func (m *AlertingThreshold) SetValue(fv float64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Value", "AlertingThreshold"))
	}
	m.Value = fv
}

func (m *AlertingThreshold) SetIsInclusive(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IsInclusive", "AlertingThreshold"))
	}
	m.IsInclusive = fv
}

// Query specifies what logging query should be monitored.
type LogCndSpec_Query struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Filter used to continuously observe log query output.
	Filter *logging_log.Filter `protobuf:"bytes,2,opt,customtype=Filter,name=filter,proto3" json:"filter,omitempty"`
	// Trigger under which Alert is raised
	Trigger *LogCndSpec_Query_TriggerCnd `protobuf:"bytes,3,opt,name=trigger,proto3" json:"trigger,omitempty"`
	// Informs how long alert should be maintained in firing state since last
	// occurrence.
	MinDuration *durationpb.Duration `protobuf:"bytes,4,opt,name=min_duration,json=minDuration,proto3" json:"min_duration,omitempty"`
}

func (m *LogCndSpec_Query) Reset() {
	*m = LogCndSpec_Query{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_specs_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *LogCndSpec_Query) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*LogCndSpec_Query) ProtoMessage() {}

func (m *LogCndSpec_Query) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_specs_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*LogCndSpec_Query) GotenMessage() {}

// Deprecated, Use LogCndSpec_Query.ProtoReflect.Descriptor instead.
func (*LogCndSpec_Query) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_specs_proto_rawDescGZIP(), []int{0, 0}
}

func (m *LogCndSpec_Query) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *LogCndSpec_Query) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *LogCndSpec_Query) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *LogCndSpec_Query) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *LogCndSpec_Query) GetFilter() *logging_log.Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *LogCndSpec_Query) GetTrigger() *LogCndSpec_Query_TriggerCnd {
	if m != nil {
		return m.Trigger
	}
	return nil
}

func (m *LogCndSpec_Query) GetMinDuration() *durationpb.Duration {
	if m != nil {
		return m.MinDuration
	}
	return nil
}

func (m *LogCndSpec_Query) SetFilter(fv *logging_log.Filter) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Filter", "LogCndSpec_Query"))
	}
	m.Filter = fv
}

func (m *LogCndSpec_Query) SetTrigger(fv *LogCndSpec_Query_TriggerCnd) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Trigger", "LogCndSpec_Query"))
	}
	m.Trigger = fv
}

func (m *LogCndSpec_Query) SetMinDuration(fv *durationpb.Duration) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MinDuration", "LogCndSpec_Query"))
	}
	m.MinDuration = fv
}

// LabelTrigger informs what label Log must have to be considered as a
// violation.
type LogCndSpec_Query_LabelTrigger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Label key
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Triggering label values.
	Values []string `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
}

func (m *LogCndSpec_Query_LabelTrigger) Reset() {
	*m = LogCndSpec_Query_LabelTrigger{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_specs_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *LogCndSpec_Query_LabelTrigger) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*LogCndSpec_Query_LabelTrigger) ProtoMessage() {}

func (m *LogCndSpec_Query_LabelTrigger) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_specs_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*LogCndSpec_Query_LabelTrigger) GotenMessage() {}

// Deprecated, Use LogCndSpec_Query_LabelTrigger.ProtoReflect.Descriptor instead.
func (*LogCndSpec_Query_LabelTrigger) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_specs_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (m *LogCndSpec_Query_LabelTrigger) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *LogCndSpec_Query_LabelTrigger) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *LogCndSpec_Query_LabelTrigger) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *LogCndSpec_Query_LabelTrigger) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *LogCndSpec_Query_LabelTrigger) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *LogCndSpec_Query_LabelTrigger) GetValues() []string {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *LogCndSpec_Query_LabelTrigger) SetKey(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Key", "LogCndSpec_Query_LabelTrigger"))
	}
	m.Key = fv
}

func (m *LogCndSpec_Query_LabelTrigger) SetValues(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Values", "LogCndSpec_Query_LabelTrigger"))
	}
	m.Values = fv
}

// StringPayloadTrigger informs what text content of log is
// triggering an alert.
type LogCndSpec_Query_StringPayloadTrigger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Optional selector inside log data field. It should be ignored
	// if log entry is just a string or byte array. It can be used if log
	// is some JSON object, and we search for specific fields.
	ObjectSelector string `protobuf:"bytes,1,opt,name=object_selector,json=objectSelector,proto3" json:"object_selector,omitempty"`
	// Regex that log content must satisfy to trigger an alert
	Regex string `protobuf:"bytes,2,opt,name=regex,proto3" json:"regex,omitempty"`
}

func (m *LogCndSpec_Query_StringPayloadTrigger) Reset() {
	*m = LogCndSpec_Query_StringPayloadTrigger{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_specs_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *LogCndSpec_Query_StringPayloadTrigger) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*LogCndSpec_Query_StringPayloadTrigger) ProtoMessage() {}

func (m *LogCndSpec_Query_StringPayloadTrigger) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_specs_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*LogCndSpec_Query_StringPayloadTrigger) GotenMessage() {}

// Deprecated, Use LogCndSpec_Query_StringPayloadTrigger.ProtoReflect.Descriptor instead.
func (*LogCndSpec_Query_StringPayloadTrigger) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_specs_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (m *LogCndSpec_Query_StringPayloadTrigger) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *LogCndSpec_Query_StringPayloadTrigger) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *LogCndSpec_Query_StringPayloadTrigger) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *LogCndSpec_Query_StringPayloadTrigger) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *LogCndSpec_Query_StringPayloadTrigger) GetObjectSelector() string {
	if m != nil {
		return m.ObjectSelector
	}
	return ""
}

func (m *LogCndSpec_Query_StringPayloadTrigger) GetRegex() string {
	if m != nil {
		return m.Regex
	}
	return ""
}

func (m *LogCndSpec_Query_StringPayloadTrigger) SetObjectSelector(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ObjectSelector", "LogCndSpec_Query_StringPayloadTrigger"))
	}
	m.ObjectSelector = fv
}

func (m *LogCndSpec_Query_StringPayloadTrigger) SetRegex(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Regex", "LogCndSpec_Query_StringPayloadTrigger"))
	}
	m.Regex = fv
}

// CompositeTrigger collects multiple triggers together.
type LogCndSpec_Query_CompositeTrigger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// List of triggers.
	Triggers []*LogCndSpec_Query_TriggerCnd `protobuf:"bytes,1,rep,name=triggers,proto3" json:"triggers,omitempty"`
	// Operator combining triggers
	Operator LogCndSpec_Query_CompositeTrigger_Operator `protobuf:"varint,2,opt,name=operator,proto3,enum=ntt.alerting.v1.LogCndSpec_Query_CompositeTrigger_Operator" json:"operator,omitempty"`
}

func (m *LogCndSpec_Query_CompositeTrigger) Reset() {
	*m = LogCndSpec_Query_CompositeTrigger{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_specs_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *LogCndSpec_Query_CompositeTrigger) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*LogCndSpec_Query_CompositeTrigger) ProtoMessage() {}

func (m *LogCndSpec_Query_CompositeTrigger) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_specs_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*LogCndSpec_Query_CompositeTrigger) GotenMessage() {}

// Deprecated, Use LogCndSpec_Query_CompositeTrigger.ProtoReflect.Descriptor instead.
func (*LogCndSpec_Query_CompositeTrigger) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_specs_proto_rawDescGZIP(), []int{0, 0, 2}
}

func (m *LogCndSpec_Query_CompositeTrigger) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *LogCndSpec_Query_CompositeTrigger) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *LogCndSpec_Query_CompositeTrigger) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *LogCndSpec_Query_CompositeTrigger) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *LogCndSpec_Query_CompositeTrigger) GetTriggers() []*LogCndSpec_Query_TriggerCnd {
	if m != nil {
		return m.Triggers
	}
	return nil
}

func (m *LogCndSpec_Query_CompositeTrigger) GetOperator() LogCndSpec_Query_CompositeTrigger_Operator {
	if m != nil {
		return m.Operator
	}
	return LogCndSpec_Query_CompositeTrigger_UNDEFINED
}

func (m *LogCndSpec_Query_CompositeTrigger) SetTriggers(fv []*LogCndSpec_Query_TriggerCnd) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Triggers", "LogCndSpec_Query_CompositeTrigger"))
	}
	m.Triggers = fv
}

func (m *LogCndSpec_Query_CompositeTrigger) SetOperator(fv LogCndSpec_Query_CompositeTrigger_Operator) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Operator", "LogCndSpec_Query_CompositeTrigger"))
	}
	m.Operator = fv
}

// TriggerCnd wraps a trigger deciding when to trigger an alert.
// It inspects each Log individually.
type LogCndSpec_Query_TriggerCnd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Types that are valid to be assigned to Type:
	//	*LogCndSpec_Query_TriggerCnd_Label
	//	*LogCndSpec_Query_TriggerCnd_StringContent
	//	*LogCndSpec_Query_TriggerCnd_Composite
	Type isLogCndSpec_Query_TriggerCnd_Type `protobuf_oneof:"type"`
}

func (m *LogCndSpec_Query_TriggerCnd) Reset() {
	*m = LogCndSpec_Query_TriggerCnd{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_specs_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *LogCndSpec_Query_TriggerCnd) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*LogCndSpec_Query_TriggerCnd) ProtoMessage() {}

func (m *LogCndSpec_Query_TriggerCnd) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_specs_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*LogCndSpec_Query_TriggerCnd) GotenMessage() {}

// Deprecated, Use LogCndSpec_Query_TriggerCnd.ProtoReflect.Descriptor instead.
func (*LogCndSpec_Query_TriggerCnd) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_specs_proto_rawDescGZIP(), []int{0, 0, 3}
}

func (m *LogCndSpec_Query_TriggerCnd) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *LogCndSpec_Query_TriggerCnd) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *LogCndSpec_Query_TriggerCnd) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *LogCndSpec_Query_TriggerCnd) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

type isLogCndSpec_Query_TriggerCnd_Type interface {
	isLogCndSpec_Query_TriggerCnd_Type()
}

type LogCndSpec_Query_TriggerCnd_Label struct {
	// Trigger based on label
	Label *LogCndSpec_Query_LabelTrigger `protobuf:"bytes,1,opt,name=label,proto3,oneof"`
}
type LogCndSpec_Query_TriggerCnd_StringContent struct {
	// Trigger based on log textual content
	StringContent *LogCndSpec_Query_StringPayloadTrigger `protobuf:"bytes,2,opt,name=string_content,json=stringContent,proto3,oneof"`
}
type LogCndSpec_Query_TriggerCnd_Composite struct {
	// Composite trigger combining multiple smaller ones
	Composite *LogCndSpec_Query_CompositeTrigger `protobuf:"bytes,3,opt,name=composite,proto3,oneof"`
}

func (*LogCndSpec_Query_TriggerCnd_Label) isLogCndSpec_Query_TriggerCnd_Type()         {}
func (*LogCndSpec_Query_TriggerCnd_StringContent) isLogCndSpec_Query_TriggerCnd_Type() {}
func (*LogCndSpec_Query_TriggerCnd_Composite) isLogCndSpec_Query_TriggerCnd_Type()     {}
func (m *LogCndSpec_Query_TriggerCnd) GetType() isLogCndSpec_Query_TriggerCnd_Type {
	if m != nil {
		return m.Type
	}
	return nil
}
func (m *LogCndSpec_Query_TriggerCnd) GetLabel() *LogCndSpec_Query_LabelTrigger {
	if x, ok := m.GetType().(*LogCndSpec_Query_TriggerCnd_Label); ok {
		return x.Label
	}
	return nil
}
func (m *LogCndSpec_Query_TriggerCnd) GetStringContent() *LogCndSpec_Query_StringPayloadTrigger {
	if x, ok := m.GetType().(*LogCndSpec_Query_TriggerCnd_StringContent); ok {
		return x.StringContent
	}
	return nil
}
func (m *LogCndSpec_Query_TriggerCnd) GetComposite() *LogCndSpec_Query_CompositeTrigger {
	if x, ok := m.GetType().(*LogCndSpec_Query_TriggerCnd_Composite); ok {
		return x.Composite
	}
	return nil
}
func (m *LogCndSpec_Query_TriggerCnd) SetType(ofv isLogCndSpec_Query_TriggerCnd_Type) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "isLogCndSpec_Query_TriggerCnd_Type", "LogCndSpec_Query_TriggerCnd"))
	}
	m.Type = ofv
}
func (m *LogCndSpec_Query_TriggerCnd) SetLabel(fv *LogCndSpec_Query_LabelTrigger) {
	m.SetType(&LogCndSpec_Query_TriggerCnd_Label{Label: fv})
}
func (m *LogCndSpec_Query_TriggerCnd) SetStringContent(fv *LogCndSpec_Query_StringPayloadTrigger) {
	m.SetType(&LogCndSpec_Query_TriggerCnd_StringContent{StringContent: fv})
}
func (m *LogCndSpec_Query_TriggerCnd) SetComposite(fv *LogCndSpec_Query_CompositeTrigger) {
	m.SetType(&LogCndSpec_Query_TriggerCnd_Composite{Composite: fv})
}

// Query defines a single TimeSeries query and basic alerting thresholds.
type TsCndSpec_Query struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Query description.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Time series query filter
	Filter *monitoring_time_serie.Filter `protobuf:"bytes,2,opt,customtype=Filter,name=filter,proto3" json:"filter,omitempty"`
	// Aligner applied on individual TimeSeries.
	Aligner monitoring_common.Aggregation_Aligner `protobuf:"varint,3,opt,name=aligner,proto3,enum=ntt.monitoring.v4.Aggregation_Aligner" json:"aligner,omitempty"`
	// Reducer applied across TimeSeries according to Spec.query_group_by
	// field in the Spec.
	Reducer monitoring_common.Aggregation_Reducer `protobuf:"varint,4,opt,name=reducer,proto3,enum=ntt.monitoring.v4.Aggregation_Reducer" json:"reducer,omitempty"`
	// Maximum value (approximated) that time series values will have for this
	// query. It is a soft value: If higher values are detected,
	// thresholds/anomaly models will adjust to them. If set to 0, it will be
	// auto-detected (heuristic). If time series are negative, max_value
	// should indicate maximum value FROM zero: Therefore, it can be a
	// negative value.
	MaxValue float64 `protobuf:"fixed64,5,opt,name=max_value,json=maxValue,proto3" json:"max_value,omitempty"`
}

func (m *TsCndSpec_Query) Reset() {
	*m = TsCndSpec_Query{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_specs_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *TsCndSpec_Query) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*TsCndSpec_Query) ProtoMessage() {}

func (m *TsCndSpec_Query) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_specs_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*TsCndSpec_Query) GotenMessage() {}

// Deprecated, Use TsCndSpec_Query.ProtoReflect.Descriptor instead.
func (*TsCndSpec_Query) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_specs_proto_rawDescGZIP(), []int{1, 0}
}

func (m *TsCndSpec_Query) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *TsCndSpec_Query) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *TsCndSpec_Query) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *TsCndSpec_Query) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *TsCndSpec_Query) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TsCndSpec_Query) GetFilter() *monitoring_time_serie.Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *TsCndSpec_Query) GetAligner() monitoring_common.Aggregation_Aligner {
	if m != nil {
		return m.Aligner
	}
	return monitoring_common.Aggregation_ALIGN_NONE
}

func (m *TsCndSpec_Query) GetReducer() monitoring_common.Aggregation_Reducer {
	if m != nil {
		return m.Reducer
	}
	return monitoring_common.Aggregation_REDUCE_NONE
}

func (m *TsCndSpec_Query) GetMaxValue() float64 {
	if m != nil {
		return m.MaxValue
	}
	return float64(0)
}

func (m *TsCndSpec_Query) SetName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "TsCndSpec_Query"))
	}
	m.Name = fv
}

func (m *TsCndSpec_Query) SetFilter(fv *monitoring_time_serie.Filter) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Filter", "TsCndSpec_Query"))
	}
	m.Filter = fv
}

func (m *TsCndSpec_Query) SetAligner(fv monitoring_common.Aggregation_Aligner) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Aligner", "TsCndSpec_Query"))
	}
	m.Aligner = fv
}

func (m *TsCndSpec_Query) SetReducer(fv monitoring_common.Aggregation_Reducer) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Reducer", "TsCndSpec_Query"))
	}
	m.Reducer = fv
}

func (m *TsCndSpec_Query) SetMaxValue(fv float64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MaxValue", "TsCndSpec_Query"))
	}
	m.MaxValue = fv
}

// ThresholdAlertingCfg describes when alerts of THRESHOLD type
// must be raised.
type TsCndSpec_ThresholdAlertingCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Operator for threshold-type alerts
	Operator TsCndSpec_ThresholdAlertingCfg_Operator `protobuf:"varint,1,opt,name=operator,proto3,enum=ntt.alerting.v1.TsCndSpec_ThresholdAlertingCfg_Operator" json:"operator,omitempty"`
	// Alignment period for data points used to monitor thresholds.
	AlignmentPeriod *durationpb.Duration `protobuf:"bytes,2,opt,name=alignment_period,json=alignmentPeriod,proto3" json:"alignment_period,omitempty"`
	// Violation duration after which alert must be raised.
	RaiseAfter *durationpb.Duration `protobuf:"bytes,3,opt,name=raise_after,json=raiseAfter,proto3" json:"raise_after,omitempty"`
	// Duration after which Alert stops firing when violations no longer
	// occur. By default, equals to raise_after.
	SilenceAfter *durationpb.Duration `protobuf:"bytes,4,opt,name=silence_after,json=silenceAfter,proto3" json:"silence_after,omitempty"`
	// Thresholds per each query (in same order).
	PerQueryThresholds []*TsCndSpec_ThresholdAlertingCfg_AlertingThresholds `protobuf:"bytes,5,rep,name=per_query_thresholds,json=perQueryThresholds,proto3" json:"per_query_thresholds,omitempty"`
	// This field is recommended to be set if adaptive thresholds are used.
	// For each unique group by fields combination, dynamic thresholds will
	// be detected based on historic data of specified length.
	// One week by default.
	AdaptiveThresholdsDetectionPeriod *durationpb.Duration `protobuf:"bytes,6,opt,name=adaptive_thresholds_detection_period,json=adaptiveThresholdsDetectionPeriod,proto3" json:"adaptive_thresholds_detection_period,omitempty"`
}

func (m *TsCndSpec_ThresholdAlertingCfg) Reset() {
	*m = TsCndSpec_ThresholdAlertingCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_specs_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *TsCndSpec_ThresholdAlertingCfg) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*TsCndSpec_ThresholdAlertingCfg) ProtoMessage() {}

func (m *TsCndSpec_ThresholdAlertingCfg) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_specs_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*TsCndSpec_ThresholdAlertingCfg) GotenMessage() {}

// Deprecated, Use TsCndSpec_ThresholdAlertingCfg.ProtoReflect.Descriptor instead.
func (*TsCndSpec_ThresholdAlertingCfg) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_specs_proto_rawDescGZIP(), []int{1, 1}
}

func (m *TsCndSpec_ThresholdAlertingCfg) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *TsCndSpec_ThresholdAlertingCfg) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *TsCndSpec_ThresholdAlertingCfg) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *TsCndSpec_ThresholdAlertingCfg) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *TsCndSpec_ThresholdAlertingCfg) GetOperator() TsCndSpec_ThresholdAlertingCfg_Operator {
	if m != nil {
		return m.Operator
	}
	return TsCndSpec_ThresholdAlertingCfg_UNDEFINED
}

func (m *TsCndSpec_ThresholdAlertingCfg) GetAlignmentPeriod() *durationpb.Duration {
	if m != nil {
		return m.AlignmentPeriod
	}
	return nil
}

func (m *TsCndSpec_ThresholdAlertingCfg) GetRaiseAfter() *durationpb.Duration {
	if m != nil {
		return m.RaiseAfter
	}
	return nil
}

func (m *TsCndSpec_ThresholdAlertingCfg) GetSilenceAfter() *durationpb.Duration {
	if m != nil {
		return m.SilenceAfter
	}
	return nil
}

func (m *TsCndSpec_ThresholdAlertingCfg) GetPerQueryThresholds() []*TsCndSpec_ThresholdAlertingCfg_AlertingThresholds {
	if m != nil {
		return m.PerQueryThresholds
	}
	return nil
}

func (m *TsCndSpec_ThresholdAlertingCfg) GetAdaptiveThresholdsDetectionPeriod() *durationpb.Duration {
	if m != nil {
		return m.AdaptiveThresholdsDetectionPeriod
	}
	return nil
}

func (m *TsCndSpec_ThresholdAlertingCfg) SetOperator(fv TsCndSpec_ThresholdAlertingCfg_Operator) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Operator", "TsCndSpec_ThresholdAlertingCfg"))
	}
	m.Operator = fv
}

func (m *TsCndSpec_ThresholdAlertingCfg) SetAlignmentPeriod(fv *durationpb.Duration) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AlignmentPeriod", "TsCndSpec_ThresholdAlertingCfg"))
	}
	m.AlignmentPeriod = fv
}

func (m *TsCndSpec_ThresholdAlertingCfg) SetRaiseAfter(fv *durationpb.Duration) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "RaiseAfter", "TsCndSpec_ThresholdAlertingCfg"))
	}
	m.RaiseAfter = fv
}

func (m *TsCndSpec_ThresholdAlertingCfg) SetSilenceAfter(fv *durationpb.Duration) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SilenceAfter", "TsCndSpec_ThresholdAlertingCfg"))
	}
	m.SilenceAfter = fv
}

func (m *TsCndSpec_ThresholdAlertingCfg) SetPerQueryThresholds(fv []*TsCndSpec_ThresholdAlertingCfg_AlertingThresholds) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PerQueryThresholds", "TsCndSpec_ThresholdAlertingCfg"))
	}
	m.PerQueryThresholds = fv
}

func (m *TsCndSpec_ThresholdAlertingCfg) SetAdaptiveThresholdsDetectionPeriod(fv *durationpb.Duration) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AdaptiveThresholdsDetectionPeriod", "TsCndSpec_ThresholdAlertingCfg"))
	}
	m.AdaptiveThresholdsDetectionPeriod = fv
}

// AnomalyDetector defines AI/ML based anomaly detector.
// It can catch anomalies that are more sophisticated
// than max/min thresholds.
type TsCndSpec_AnomalyAlertingCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Sliding analysis window observed at once by AI model.
	// For larger windows, it is highly advisable for query_ap
	// to be accordingly larger.
	AnalysisWindow *durationpb.Duration `protobuf:"bytes,1,opt,name=analysis_window,json=analysisWindow,proto3" json:"analysis_window,omitempty"`
	// Duration of each time step in sliding analysis window.
	// Anomaly detection is run after each step.
	StepInterval *durationpb.Duration `protobuf:"bytes,2,opt,name=step_interval,json=stepInterval,proto3" json:"step_interval,omitempty"`
	// It is like step interval, but special used for training only.
	// For example, we may want to run anomaly detection of size 30 minutes
	// each 5 minutes. But in training, to reduce number of batches, we may
	// prefer larger value, like 15 minutes or maybe even 30.
	TrainStepInterval *durationpb.Duration `protobuf:"bytes,7,opt,name=train_step_interval,json=trainStepInterval,proto3" json:"train_step_interval,omitempty"`
	// Granularity of data points within each step.
	AlignmentPeriod *durationpb.Duration `protobuf:"bytes,3,opt,name=alignment_period,json=alignmentPeriod,proto3" json:"alignment_period,omitempty"`
	RaiseAfter      *durationpb.Duration `protobuf:"bytes,5,opt,name=raise_after,json=raiseAfter,proto3" json:"raise_after,omitempty"`
	SilenceAfter    *durationpb.Duration `protobuf:"bytes,6,opt,name=silence_after,json=silenceAfter,proto3" json:"silence_after,omitempty"`
	// Types that are valid to be assigned to Model:
	//	*TsCndSpec_AnomalyAlertingCfg_LstmAutoencoder
	Model isTsCndSpec_AnomalyAlertingCfg_Model `protobuf_oneof:"model"`
}

func (m *TsCndSpec_AnomalyAlertingCfg) Reset() {
	*m = TsCndSpec_AnomalyAlertingCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_specs_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *TsCndSpec_AnomalyAlertingCfg) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*TsCndSpec_AnomalyAlertingCfg) ProtoMessage() {}

func (m *TsCndSpec_AnomalyAlertingCfg) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_specs_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*TsCndSpec_AnomalyAlertingCfg) GotenMessage() {}

// Deprecated, Use TsCndSpec_AnomalyAlertingCfg.ProtoReflect.Descriptor instead.
func (*TsCndSpec_AnomalyAlertingCfg) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_specs_proto_rawDescGZIP(), []int{1, 2}
}

func (m *TsCndSpec_AnomalyAlertingCfg) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *TsCndSpec_AnomalyAlertingCfg) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *TsCndSpec_AnomalyAlertingCfg) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *TsCndSpec_AnomalyAlertingCfg) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

type isTsCndSpec_AnomalyAlertingCfg_Model interface {
	isTsCndSpec_AnomalyAlertingCfg_Model()
}

type TsCndSpec_AnomalyAlertingCfg_LstmAutoencoder struct {
	LstmAutoencoder *TsCndSpec_AnomalyAlertingCfg_LstmAutoEncoder `protobuf:"bytes,4,opt,name=lstm_autoencoder,json=lstmAutoencoder,proto3,oneof"`
}

func (*TsCndSpec_AnomalyAlertingCfg_LstmAutoencoder) isTsCndSpec_AnomalyAlertingCfg_Model() {}
func (m *TsCndSpec_AnomalyAlertingCfg) GetAnalysisWindow() *durationpb.Duration {
	if m != nil {
		return m.AnalysisWindow
	}
	return nil
}

func (m *TsCndSpec_AnomalyAlertingCfg) GetStepInterval() *durationpb.Duration {
	if m != nil {
		return m.StepInterval
	}
	return nil
}

func (m *TsCndSpec_AnomalyAlertingCfg) GetTrainStepInterval() *durationpb.Duration {
	if m != nil {
		return m.TrainStepInterval
	}
	return nil
}

func (m *TsCndSpec_AnomalyAlertingCfg) GetAlignmentPeriod() *durationpb.Duration {
	if m != nil {
		return m.AlignmentPeriod
	}
	return nil
}

func (m *TsCndSpec_AnomalyAlertingCfg) GetRaiseAfter() *durationpb.Duration {
	if m != nil {
		return m.RaiseAfter
	}
	return nil
}

func (m *TsCndSpec_AnomalyAlertingCfg) GetSilenceAfter() *durationpb.Duration {
	if m != nil {
		return m.SilenceAfter
	}
	return nil
}

func (m *TsCndSpec_AnomalyAlertingCfg) GetModel() isTsCndSpec_AnomalyAlertingCfg_Model {
	if m != nil {
		return m.Model
	}
	return nil
}
func (m *TsCndSpec_AnomalyAlertingCfg) GetLstmAutoencoder() *TsCndSpec_AnomalyAlertingCfg_LstmAutoEncoder {
	if x, ok := m.GetModel().(*TsCndSpec_AnomalyAlertingCfg_LstmAutoencoder); ok {
		return x.LstmAutoencoder
	}
	return nil
}
func (m *TsCndSpec_AnomalyAlertingCfg) SetAnalysisWindow(fv *durationpb.Duration) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AnalysisWindow", "TsCndSpec_AnomalyAlertingCfg"))
	}
	m.AnalysisWindow = fv
}

func (m *TsCndSpec_AnomalyAlertingCfg) SetStepInterval(fv *durationpb.Duration) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "StepInterval", "TsCndSpec_AnomalyAlertingCfg"))
	}
	m.StepInterval = fv
}

func (m *TsCndSpec_AnomalyAlertingCfg) SetTrainStepInterval(fv *durationpb.Duration) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TrainStepInterval", "TsCndSpec_AnomalyAlertingCfg"))
	}
	m.TrainStepInterval = fv
}

func (m *TsCndSpec_AnomalyAlertingCfg) SetAlignmentPeriod(fv *durationpb.Duration) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AlignmentPeriod", "TsCndSpec_AnomalyAlertingCfg"))
	}
	m.AlignmentPeriod = fv
}

func (m *TsCndSpec_AnomalyAlertingCfg) SetRaiseAfter(fv *durationpb.Duration) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "RaiseAfter", "TsCndSpec_AnomalyAlertingCfg"))
	}
	m.RaiseAfter = fv
}

func (m *TsCndSpec_AnomalyAlertingCfg) SetSilenceAfter(fv *durationpb.Duration) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SilenceAfter", "TsCndSpec_AnomalyAlertingCfg"))
	}
	m.SilenceAfter = fv
}

func (m *TsCndSpec_AnomalyAlertingCfg) SetModel(ofv isTsCndSpec_AnomalyAlertingCfg_Model) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "isTsCndSpec_AnomalyAlertingCfg_Model", "TsCndSpec_AnomalyAlertingCfg"))
	}
	m.Model = ofv
}
func (m *TsCndSpec_AnomalyAlertingCfg) SetLstmAutoencoder(fv *TsCndSpec_AnomalyAlertingCfg_LstmAutoEncoder) {
	m.SetModel(&TsCndSpec_AnomalyAlertingCfg_LstmAutoencoder{LstmAutoencoder: fv})
}

// AlertingThresholds represents all thresholds.
// When they are crossed by time series values, alert will be raised.
// Max thresholds are active all the time.
// Adaptive thresholds are active when anomaly detectors
// are not available (not defined or in training).
// It is also possible to set minimal lower/upper thresholds,
// to avoid adaptive thresholds being to insensitive.
// Overall, alert is raised when value drops below
// lower threshold or above upper threshold. Working
// allowed range is between.
// Values must always satisfy condition:
// Upper max > Upper min > Lower min > Lower max
type TsCndSpec_ThresholdAlertingCfg_AlertingThresholds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Whether upper threshold should be set and adaptive.
	AutoAdaptUpper bool `protobuf:"varint,1,opt,name=auto_adapt_upper,json=autoAdaptUpper,proto3" json:"auto_adapt_upper,omitempty"`
	// Whether lower threshold should be set and adaptive.
	AutoAdaptLower bool `protobuf:"varint,2,opt,name=auto_adapt_lower,json=autoAdaptLower,proto3" json:"auto_adapt_lower,omitempty"`
	// Maximum allowed upper threshold. When crossed ABOVE,
	// alert is raised. Can be set to nil, but in that
	// case max_lower is mandatory.
	// Adaptive upper threshold cannot be set below it.
	MaxUpper *AlertingThreshold `protobuf:"bytes,3,opt,name=max_upper,json=maxUpper,proto3" json:"max_upper,omitempty"`
	// Maximum allowed lower threshold. When crossed BELOW,
	// alert is raised. Can be set to nil, but in that
	// case max_upper is mandatory.
	// Adaptive lower threshold cannot be set below it.
	MaxLower *AlertingThreshold `protobuf:"bytes,4,opt,name=max_lower,json=maxLower,proto3" json:"max_lower,omitempty"`
	// Minimal allowed adaptive upper threshold.
	// It is applicable only if auto_adapt_upper is true.
	// Adaptive upper threshold cannot be set below it.
	// It must be smaller than max_upper.
	MinUpper *AlertingThreshold `protobuf:"bytes,5,opt,name=min_upper,json=minUpper,proto3" json:"min_upper,omitempty"`
	// Minimal allowed adaptive lower threshold.
	// It is applicable only if auto_adapt_lower is true.
	// Adaptive lower threshold cannot be set above it.
	// It must be bigger than max_lower.
	MinLower *AlertingThreshold `protobuf:"bytes,6,opt,name=min_lower,json=minLower,proto3" json:"min_lower,omitempty"`
}

func (m *TsCndSpec_ThresholdAlertingCfg_AlertingThresholds) Reset() {
	*m = TsCndSpec_ThresholdAlertingCfg_AlertingThresholds{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_specs_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *TsCndSpec_ThresholdAlertingCfg_AlertingThresholds) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*TsCndSpec_ThresholdAlertingCfg_AlertingThresholds) ProtoMessage() {}

func (m *TsCndSpec_ThresholdAlertingCfg_AlertingThresholds) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_specs_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*TsCndSpec_ThresholdAlertingCfg_AlertingThresholds) GotenMessage() {}

// Deprecated, Use TsCndSpec_ThresholdAlertingCfg_AlertingThresholds.ProtoReflect.Descriptor instead.
func (*TsCndSpec_ThresholdAlertingCfg_AlertingThresholds) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_specs_proto_rawDescGZIP(), []int{1, 1, 0}
}

func (m *TsCndSpec_ThresholdAlertingCfg_AlertingThresholds) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *TsCndSpec_ThresholdAlertingCfg_AlertingThresholds) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *TsCndSpec_ThresholdAlertingCfg_AlertingThresholds) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *TsCndSpec_ThresholdAlertingCfg_AlertingThresholds) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *TsCndSpec_ThresholdAlertingCfg_AlertingThresholds) GetAutoAdaptUpper() bool {
	if m != nil {
		return m.AutoAdaptUpper
	}
	return false
}

func (m *TsCndSpec_ThresholdAlertingCfg_AlertingThresholds) GetAutoAdaptLower() bool {
	if m != nil {
		return m.AutoAdaptLower
	}
	return false
}

func (m *TsCndSpec_ThresholdAlertingCfg_AlertingThresholds) GetMaxUpper() *AlertingThreshold {
	if m != nil {
		return m.MaxUpper
	}
	return nil
}

func (m *TsCndSpec_ThresholdAlertingCfg_AlertingThresholds) GetMaxLower() *AlertingThreshold {
	if m != nil {
		return m.MaxLower
	}
	return nil
}

func (m *TsCndSpec_ThresholdAlertingCfg_AlertingThresholds) GetMinUpper() *AlertingThreshold {
	if m != nil {
		return m.MinUpper
	}
	return nil
}

func (m *TsCndSpec_ThresholdAlertingCfg_AlertingThresholds) GetMinLower() *AlertingThreshold {
	if m != nil {
		return m.MinLower
	}
	return nil
}

func (m *TsCndSpec_ThresholdAlertingCfg_AlertingThresholds) SetAutoAdaptUpper(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AutoAdaptUpper", "TsCndSpec_ThresholdAlertingCfg_AlertingThresholds"))
	}
	m.AutoAdaptUpper = fv
}

func (m *TsCndSpec_ThresholdAlertingCfg_AlertingThresholds) SetAutoAdaptLower(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AutoAdaptLower", "TsCndSpec_ThresholdAlertingCfg_AlertingThresholds"))
	}
	m.AutoAdaptLower = fv
}

func (m *TsCndSpec_ThresholdAlertingCfg_AlertingThresholds) SetMaxUpper(fv *AlertingThreshold) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MaxUpper", "TsCndSpec_ThresholdAlertingCfg_AlertingThresholds"))
	}
	m.MaxUpper = fv
}

func (m *TsCndSpec_ThresholdAlertingCfg_AlertingThresholds) SetMaxLower(fv *AlertingThreshold) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MaxLower", "TsCndSpec_ThresholdAlertingCfg_AlertingThresholds"))
	}
	m.MaxLower = fv
}

func (m *TsCndSpec_ThresholdAlertingCfg_AlertingThresholds) SetMinUpper(fv *AlertingThreshold) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MinUpper", "TsCndSpec_ThresholdAlertingCfg_AlertingThresholds"))
	}
	m.MinUpper = fv
}

func (m *TsCndSpec_ThresholdAlertingCfg_AlertingThresholds) SetMinLower(fv *AlertingThreshold) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MinLower", "TsCndSpec_ThresholdAlertingCfg_AlertingThresholds"))
	}
	m.MinLower = fv
}

// LstmAutoEncoder defines LSTM AutoEncoder model for anomaly detection.
type TsCndSpec_AnomalyAlertingCfg_LstmAutoEncoder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Hidden size. Larger increases model size.
	HiddenSize int32 `protobuf:"varint,1,opt,name=hidden_size,json=hiddenSize,proto3" json:"hidden_size,omitempty"`
	// Learn rate used in Adam optimizer.
	// This is suggested value. System may iterate other well known
	// working values for best detection.
	LearnRate float64 `protobuf:"fixed64,2,opt,name=learn_rate,json=learnRate,proto3" json:"learn_rate,omitempty"`
	// Maximum number of epochs after which training must stop.
	MaxTrainingEpochs int32 `protobuf:"varint,3,opt,name=max_training_epochs,json=maxTrainingEpochs,proto3" json:"max_training_epochs,omitempty"`
	// Minimum number of training epochs model must train.
	MinTrainingEpochs int32 `protobuf:"varint,4,opt,name=min_training_epochs,json=minTrainingEpochs,proto3" json:"min_training_epochs,omitempty"`
	// Minimum acceptable error after training stops.
	// When it is achieved, check samples are used to determine
	// actual error rates.
	// Too large value may cause overfit.
	// This is suggested value. System may find other values
	// giving better results.
	AcceptableTrainingError float64 `protobuf:"fixed64,5,opt,name=acceptable_training_error,json=acceptableTrainingError,proto3" json:"acceptable_training_error,omitempty"`
	// How much time must be obtained for training purposes.
	TrainingPeriod *durationpb.Duration `protobuf:"bytes,6,opt,name=training_period,json=trainingPeriod,proto3" json:"training_period,omitempty"`
	// Training period, analysis window and training step interval
	// directly influence how many training samples are created.
	// Fraction is then used for detecting practical anomalies
	// and initializing anomaly thresholds.
	CheckPeriodFraction float64 `protobuf:"fixed64,7,opt,name=check_period_fraction,json=checkPeriodFraction,proto3" json:"check_period_fraction,omitempty"`
	// Enables teacher force mode during inference.
	// It greatly reduces false positives, but may
	// silence some actual small anomalies.
	// It is especially important when time series data
	// can change behavior persistently. For example, new
	// workload was added to CPU.
	TeacherForceAtInference bool `protobuf:"varint,8,opt,name=teacher_force_at_inference,json=teacherForceAtInference,proto3" json:"teacher_force_at_inference,omitempty"`
}

func (m *TsCndSpec_AnomalyAlertingCfg_LstmAutoEncoder) Reset() {
	*m = TsCndSpec_AnomalyAlertingCfg_LstmAutoEncoder{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_specs_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *TsCndSpec_AnomalyAlertingCfg_LstmAutoEncoder) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*TsCndSpec_AnomalyAlertingCfg_LstmAutoEncoder) ProtoMessage() {}

func (m *TsCndSpec_AnomalyAlertingCfg_LstmAutoEncoder) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_specs_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*TsCndSpec_AnomalyAlertingCfg_LstmAutoEncoder) GotenMessage() {}

// Deprecated, Use TsCndSpec_AnomalyAlertingCfg_LstmAutoEncoder.ProtoReflect.Descriptor instead.
func (*TsCndSpec_AnomalyAlertingCfg_LstmAutoEncoder) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_specs_proto_rawDescGZIP(), []int{1, 2, 0}
}

func (m *TsCndSpec_AnomalyAlertingCfg_LstmAutoEncoder) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *TsCndSpec_AnomalyAlertingCfg_LstmAutoEncoder) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *TsCndSpec_AnomalyAlertingCfg_LstmAutoEncoder) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *TsCndSpec_AnomalyAlertingCfg_LstmAutoEncoder) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *TsCndSpec_AnomalyAlertingCfg_LstmAutoEncoder) GetHiddenSize() int32 {
	if m != nil {
		return m.HiddenSize
	}
	return int32(0)
}

func (m *TsCndSpec_AnomalyAlertingCfg_LstmAutoEncoder) GetLearnRate() float64 {
	if m != nil {
		return m.LearnRate
	}
	return float64(0)
}

func (m *TsCndSpec_AnomalyAlertingCfg_LstmAutoEncoder) GetMaxTrainingEpochs() int32 {
	if m != nil {
		return m.MaxTrainingEpochs
	}
	return int32(0)
}

func (m *TsCndSpec_AnomalyAlertingCfg_LstmAutoEncoder) GetMinTrainingEpochs() int32 {
	if m != nil {
		return m.MinTrainingEpochs
	}
	return int32(0)
}

func (m *TsCndSpec_AnomalyAlertingCfg_LstmAutoEncoder) GetAcceptableTrainingError() float64 {
	if m != nil {
		return m.AcceptableTrainingError
	}
	return float64(0)
}

func (m *TsCndSpec_AnomalyAlertingCfg_LstmAutoEncoder) GetTrainingPeriod() *durationpb.Duration {
	if m != nil {
		return m.TrainingPeriod
	}
	return nil
}

func (m *TsCndSpec_AnomalyAlertingCfg_LstmAutoEncoder) GetCheckPeriodFraction() float64 {
	if m != nil {
		return m.CheckPeriodFraction
	}
	return float64(0)
}

func (m *TsCndSpec_AnomalyAlertingCfg_LstmAutoEncoder) GetTeacherForceAtInference() bool {
	if m != nil {
		return m.TeacherForceAtInference
	}
	return false
}

func (m *TsCndSpec_AnomalyAlertingCfg_LstmAutoEncoder) SetHiddenSize(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "HiddenSize", "TsCndSpec_AnomalyAlertingCfg_LstmAutoEncoder"))
	}
	m.HiddenSize = fv
}

func (m *TsCndSpec_AnomalyAlertingCfg_LstmAutoEncoder) SetLearnRate(fv float64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "LearnRate", "TsCndSpec_AnomalyAlertingCfg_LstmAutoEncoder"))
	}
	m.LearnRate = fv
}

func (m *TsCndSpec_AnomalyAlertingCfg_LstmAutoEncoder) SetMaxTrainingEpochs(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MaxTrainingEpochs", "TsCndSpec_AnomalyAlertingCfg_LstmAutoEncoder"))
	}
	m.MaxTrainingEpochs = fv
}

func (m *TsCndSpec_AnomalyAlertingCfg_LstmAutoEncoder) SetMinTrainingEpochs(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MinTrainingEpochs", "TsCndSpec_AnomalyAlertingCfg_LstmAutoEncoder"))
	}
	m.MinTrainingEpochs = fv
}

func (m *TsCndSpec_AnomalyAlertingCfg_LstmAutoEncoder) SetAcceptableTrainingError(fv float64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AcceptableTrainingError", "TsCndSpec_AnomalyAlertingCfg_LstmAutoEncoder"))
	}
	m.AcceptableTrainingError = fv
}

func (m *TsCndSpec_AnomalyAlertingCfg_LstmAutoEncoder) SetTrainingPeriod(fv *durationpb.Duration) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TrainingPeriod", "TsCndSpec_AnomalyAlertingCfg_LstmAutoEncoder"))
	}
	m.TrainingPeriod = fv
}

func (m *TsCndSpec_AnomalyAlertingCfg_LstmAutoEncoder) SetCheckPeriodFraction(fv float64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CheckPeriodFraction", "TsCndSpec_AnomalyAlertingCfg_LstmAutoEncoder"))
	}
	m.CheckPeriodFraction = fv
}

func (m *TsCndSpec_AnomalyAlertingCfg_LstmAutoEncoder) SetTeacherForceAtInference(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TeacherForceAtInference", "TsCndSpec_AnomalyAlertingCfg_LstmAutoEncoder"))
	}
	m.TeacherForceAtInference = fv
}

// ResourceIdentity informs which MAIN resource type is generating
// time series/logs on which conditions are built. For core EdgeLQ,
// ResourceIdentity must point always to devices.edgelq.com/Device
// resource, even if we are creating policy for
// applications.edgelq.com/Pod conditions.
// 3rd party services can pick something else.
// In EdgeLQ, it will be necessary to create separate Policy
// objects, if one is for Device conditions, and other for Pod
// conditions. Both will point to devices.edgelq.com/Device as
// main resource identity, both will have to specify device_id
// LabelInfo. Second one will have to specify pod_id LabelInfo.
type PolicySpec_ResourceIdentity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Reference to primary alerting resource kind.
	// For EdgeLQ, it is services/devices.edgelq.com/resources/Device
	// resource. Pods belong to device, so everything is device scoped. 3rd
	// party services can provide different resource type.
	AlertingResource *meta_resource.Reference `protobuf:"bytes,1,opt,customtype=Reference,name=alerting_resource,json=alertingResource,proto3" json:"alerting_resource,omitempty"`
	// All interesting labels that can be found in ALL Log/Ts Conditions
	// group by fields within Policy.
	// It is necessary to provide labels to at least satisfy name pattern
	// of main alerting_resource. It is optional to provide more labels,
	// in order to identify auxiliary resources.
	// By default, there are 2 built-in LabelInfo objects:
	// * key: "project_id", points to project name segment. It is mapped
	//   to project of TimeSeries or Log object
	// * key: "region_id", points to region name segment. It is mapped
	//   to region of TimeSeries or Log object.
	Labels []*PolicySpec_ResourceIdentity_LabelInfo `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty"`
	// List of name patterns of main alerting resource kind.
	// Note that all name segments (divided by each even "/" character)
	// must be satisfied within labels.mapped_name_segment fields,
	// with exception of "project" and "region", which are built-in.
	// TODO: As of now, only one pattern. However, it should be possible to
	// deduce name patterns from meta.goten.com service, so they are not
	// provided here at all.
	// Name pattern must conform to standard goten style name pattern. For
	// example, name pattern of devices.edgelq.com/Device is
	// "projects/{project}/regions/{region}/devices/{device}".
	NamePatterns []string `protobuf:"bytes,3,rep,name=name_patterns,json=namePatterns,proto3" json:"name_patterns,omitempty"`
}

func (m *PolicySpec_ResourceIdentity) Reset() {
	*m = PolicySpec_ResourceIdentity{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_specs_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *PolicySpec_ResourceIdentity) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*PolicySpec_ResourceIdentity) ProtoMessage() {}

func (m *PolicySpec_ResourceIdentity) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_specs_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*PolicySpec_ResourceIdentity) GotenMessage() {}

// Deprecated, Use PolicySpec_ResourceIdentity.ProtoReflect.Descriptor instead.
func (*PolicySpec_ResourceIdentity) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_specs_proto_rawDescGZIP(), []int{2, 0}
}

func (m *PolicySpec_ResourceIdentity) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *PolicySpec_ResourceIdentity) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *PolicySpec_ResourceIdentity) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *PolicySpec_ResourceIdentity) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *PolicySpec_ResourceIdentity) GetAlertingResource() *meta_resource.Reference {
	if m != nil {
		return m.AlertingResource
	}
	return nil
}

func (m *PolicySpec_ResourceIdentity) GetLabels() []*PolicySpec_ResourceIdentity_LabelInfo {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *PolicySpec_ResourceIdentity) GetNamePatterns() []string {
	if m != nil {
		return m.NamePatterns
	}
	return nil
}

func (m *PolicySpec_ResourceIdentity) SetAlertingResource(fv *meta_resource.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AlertingResource", "PolicySpec_ResourceIdentity"))
	}
	m.AlertingResource = fv
}

func (m *PolicySpec_ResourceIdentity) SetLabels(fv []*PolicySpec_ResourceIdentity_LabelInfo) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Labels", "PolicySpec_ResourceIdentity"))
	}
	m.Labels = fv
}

func (m *PolicySpec_ResourceIdentity) SetNamePatterns(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NamePatterns", "PolicySpec_ResourceIdentity"))
	}
	m.NamePatterns = fv
}

// SupportingAlertQuery specifies a common supporting troubleshooting query
// that can be used to investigate any Alert within current Policy.
// This is especially important for alerts handling by AI agent. Outputs
// from these queries can be used by AI agents.
//
// Important: Many query spec string fields have _template suffix. It means
// that their values may contain variable values that are replaced for each
// specific Alert instance. Those variables have a format: <$LABEL_KEY>,
// where $LABEL_KEY must be one of the label keys specified in
// resource_identity field. For example, if we can have a Policy like this:
// {
//   "resourceIdentity": {
//     "alertingResource": "services/devices.edgelq.com/resources/Device",
//     "labels": [
//       {
//         "key": "device_id",
//         "contexts": [RESOURCE_LABEL, LOG_LABEL],
//         "mappedNameSegment": "device"
//       }
//     ],
//     "namePatterns":
//     ["projects/{project}/regions/{region}/devices/{device}"]
//   },
//   "supportingQueries": [
//      {
//        "tsQuery": {
//          "description": "..."
//          "filterTemplate":
//          "metric.type=\"devices.edgelq.com/Device/connected\"
//            AND resource.labels.device_id=\"<device_id>\""
//          "aggregation": {...}
//        }
//      }
//   ]
// }
// In above example, we define one LabelInfo with device_id field.
// Therefore, alerting service will find and replace each substring
// <device_id> with specific value from Alert resource. If we have Alert
// with label device_id = "test-x", Alerting service will execute TimeSeries
// query with filter metric.type=\"devices.edgelq.com/Device/connected\" AND
//   resource.labels.device_id=\"test-x\""
// Note that values <project_id> and <region_id> are always built-in, and
// will expand to project/region indicated by Alert.
type PolicySpec_SupportingAlertQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Types that are valid to be assigned to Query:
	//	*PolicySpec_SupportingAlertQuery_TsQuery_
	//	*PolicySpec_SupportingAlertQuery_LogQuery_
	//	*PolicySpec_SupportingAlertQuery_RestGetQuery_
	//	*PolicySpec_SupportingAlertQuery_RestListQuery_
	Query isPolicySpec_SupportingAlertQuery_Query `protobuf_oneof:"query"`
}

func (m *PolicySpec_SupportingAlertQuery) Reset() {
	*m = PolicySpec_SupportingAlertQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_specs_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *PolicySpec_SupportingAlertQuery) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*PolicySpec_SupportingAlertQuery) ProtoMessage() {}

func (m *PolicySpec_SupportingAlertQuery) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_specs_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*PolicySpec_SupportingAlertQuery) GotenMessage() {}

// Deprecated, Use PolicySpec_SupportingAlertQuery.ProtoReflect.Descriptor instead.
func (*PolicySpec_SupportingAlertQuery) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_specs_proto_rawDescGZIP(), []int{2, 1}
}

func (m *PolicySpec_SupportingAlertQuery) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *PolicySpec_SupportingAlertQuery) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *PolicySpec_SupportingAlertQuery) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *PolicySpec_SupportingAlertQuery) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

type isPolicySpec_SupportingAlertQuery_Query interface {
	isPolicySpec_SupportingAlertQuery_Query()
}

type PolicySpec_SupportingAlertQuery_TsQuery_ struct {
	// Time Series query
	TsQuery *PolicySpec_SupportingAlertQuery_TsQuery `protobuf:"bytes,1,opt,name=ts_query,json=tsQuery,proto3,oneof"`
}
type PolicySpec_SupportingAlertQuery_LogQuery_ struct {
	// Log query
	LogQuery *PolicySpec_SupportingAlertQuery_LogQuery `protobuf:"bytes,2,opt,name=log_query,json=logQuery,proto3,oneof"`
}
type PolicySpec_SupportingAlertQuery_RestGetQuery_ struct {
	// Rest Get query
	RestGetQuery *PolicySpec_SupportingAlertQuery_RestGetQuery `protobuf:"bytes,5,opt,name=rest_get_query,json=restGetQuery,proto3,oneof"`
}
type PolicySpec_SupportingAlertQuery_RestListQuery_ struct {
	// Rest List query
	RestListQuery *PolicySpec_SupportingAlertQuery_RestListQuery `protobuf:"bytes,6,opt,name=rest_list_query,json=restListQuery,proto3,oneof"`
}

func (*PolicySpec_SupportingAlertQuery_TsQuery_) isPolicySpec_SupportingAlertQuery_Query()       {}
func (*PolicySpec_SupportingAlertQuery_LogQuery_) isPolicySpec_SupportingAlertQuery_Query()      {}
func (*PolicySpec_SupportingAlertQuery_RestGetQuery_) isPolicySpec_SupportingAlertQuery_Query()  {}
func (*PolicySpec_SupportingAlertQuery_RestListQuery_) isPolicySpec_SupportingAlertQuery_Query() {}
func (m *PolicySpec_SupportingAlertQuery) GetQuery() isPolicySpec_SupportingAlertQuery_Query {
	if m != nil {
		return m.Query
	}
	return nil
}
func (m *PolicySpec_SupportingAlertQuery) GetTsQuery() *PolicySpec_SupportingAlertQuery_TsQuery {
	if x, ok := m.GetQuery().(*PolicySpec_SupportingAlertQuery_TsQuery_); ok {
		return x.TsQuery
	}
	return nil
}
func (m *PolicySpec_SupportingAlertQuery) GetLogQuery() *PolicySpec_SupportingAlertQuery_LogQuery {
	if x, ok := m.GetQuery().(*PolicySpec_SupportingAlertQuery_LogQuery_); ok {
		return x.LogQuery
	}
	return nil
}
func (m *PolicySpec_SupportingAlertQuery) GetRestGetQuery() *PolicySpec_SupportingAlertQuery_RestGetQuery {
	if x, ok := m.GetQuery().(*PolicySpec_SupportingAlertQuery_RestGetQuery_); ok {
		return x.RestGetQuery
	}
	return nil
}
func (m *PolicySpec_SupportingAlertQuery) GetRestListQuery() *PolicySpec_SupportingAlertQuery_RestListQuery {
	if x, ok := m.GetQuery().(*PolicySpec_SupportingAlertQuery_RestListQuery_); ok {
		return x.RestListQuery
	}
	return nil
}
func (m *PolicySpec_SupportingAlertQuery) SetQuery(ofv isPolicySpec_SupportingAlertQuery_Query) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "isPolicySpec_SupportingAlertQuery_Query", "PolicySpec_SupportingAlertQuery"))
	}
	m.Query = ofv
}
func (m *PolicySpec_SupportingAlertQuery) SetTsQuery(fv *PolicySpec_SupportingAlertQuery_TsQuery) {
	m.SetQuery(&PolicySpec_SupportingAlertQuery_TsQuery_{TsQuery: fv})
}
func (m *PolicySpec_SupportingAlertQuery) SetLogQuery(fv *PolicySpec_SupportingAlertQuery_LogQuery) {
	m.SetQuery(&PolicySpec_SupportingAlertQuery_LogQuery_{LogQuery: fv})
}
func (m *PolicySpec_SupportingAlertQuery) SetRestGetQuery(fv *PolicySpec_SupportingAlertQuery_RestGetQuery) {
	m.SetQuery(&PolicySpec_SupportingAlertQuery_RestGetQuery_{RestGetQuery: fv})
}
func (m *PolicySpec_SupportingAlertQuery) SetRestListQuery(fv *PolicySpec_SupportingAlertQuery_RestListQuery) {
	m.SetQuery(&PolicySpec_SupportingAlertQuery_RestListQuery_{RestListQuery: fv})
}

// AIAgentHandling defines instructions for AI agent how to handle alerts
// generated within current Policy.
type PolicySpec_AIAgentHandling struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Whether AI agent handling is enabled.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Whether AI agent is allowed to SSH into alerting resource for further
	// investigation outside of defined queries. To have an effect, it is
	// necessary to specify edge_connectivity field.
	EnabledConnectivity bool `protobuf:"varint,2,opt,name=enabled_connectivity,json=enabledConnectivity,proto3" json:"enabled_connectivity,omitempty"`
	// Whether remediation's proposed by AI agent should be automatically
	// accepted without operator consent (full autonomous mode).
	AutoAcceptRemediation bool `protobuf:"varint,3,opt,name=auto_accept_remediation,json=autoAcceptRemediation,proto3" json:"auto_accept_remediation,omitempty"`
	// Describes how to connect to alerting resource in a context of Alert.
	EdgeConnectivity *PolicySpec_AIAgentHandling_EdgeConnectivity `protobuf:"bytes,4,opt,name=edge_connectivity,json=edgeConnectivity,proto3" json:"edge_connectivity,omitempty"`
	// Specifies list of suggested remediations for AI agent to apply
	RemediationOptions []*PolicySpec_AIAgentHandling_Remediation `protobuf:"bytes,6,rep,name=remediation_options,json=remediationOptions,proto3" json:"remediation_options,omitempty"`
}

func (m *PolicySpec_AIAgentHandling) Reset() {
	*m = PolicySpec_AIAgentHandling{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_specs_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *PolicySpec_AIAgentHandling) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*PolicySpec_AIAgentHandling) ProtoMessage() {}

func (m *PolicySpec_AIAgentHandling) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_specs_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*PolicySpec_AIAgentHandling) GotenMessage() {}

// Deprecated, Use PolicySpec_AIAgentHandling.ProtoReflect.Descriptor instead.
func (*PolicySpec_AIAgentHandling) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_specs_proto_rawDescGZIP(), []int{2, 2}
}

func (m *PolicySpec_AIAgentHandling) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *PolicySpec_AIAgentHandling) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *PolicySpec_AIAgentHandling) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *PolicySpec_AIAgentHandling) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *PolicySpec_AIAgentHandling) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *PolicySpec_AIAgentHandling) GetEnabledConnectivity() bool {
	if m != nil {
		return m.EnabledConnectivity
	}
	return false
}

func (m *PolicySpec_AIAgentHandling) GetAutoAcceptRemediation() bool {
	if m != nil {
		return m.AutoAcceptRemediation
	}
	return false
}

func (m *PolicySpec_AIAgentHandling) GetEdgeConnectivity() *PolicySpec_AIAgentHandling_EdgeConnectivity {
	if m != nil {
		return m.EdgeConnectivity
	}
	return nil
}

func (m *PolicySpec_AIAgentHandling) GetRemediationOptions() []*PolicySpec_AIAgentHandling_Remediation {
	if m != nil {
		return m.RemediationOptions
	}
	return nil
}

func (m *PolicySpec_AIAgentHandling) SetEnabled(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Enabled", "PolicySpec_AIAgentHandling"))
	}
	m.Enabled = fv
}

func (m *PolicySpec_AIAgentHandling) SetEnabledConnectivity(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "EnabledConnectivity", "PolicySpec_AIAgentHandling"))
	}
	m.EnabledConnectivity = fv
}

func (m *PolicySpec_AIAgentHandling) SetAutoAcceptRemediation(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AutoAcceptRemediation", "PolicySpec_AIAgentHandling"))
	}
	m.AutoAcceptRemediation = fv
}

func (m *PolicySpec_AIAgentHandling) SetEdgeConnectivity(fv *PolicySpec_AIAgentHandling_EdgeConnectivity) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "EdgeConnectivity", "PolicySpec_AIAgentHandling"))
	}
	m.EdgeConnectivity = fv
}

func (m *PolicySpec_AIAgentHandling) SetRemediationOptions(fv []*PolicySpec_AIAgentHandling_Remediation) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "RemediationOptions", "PolicySpec_AIAgentHandling"))
	}
	m.RemediationOptions = fv
}

// LabelInfo binds a label from Log/TimeSeries object into
// specific name segment of a resource associated with an Alert
// raised within current Policy.
// Multiple LabelInfo instances within ResourceIdentity are used to
// reconstruct full resource names.
// For example, resource type devices.edgelq.com/Device has a single
// known name pattern
// projects/{project}/regions/{region}/devices/{device}. There are 3 name
// segments: project, region, and device. Segments "project" and "region"
// are built-in always and dont have to be defined. Policy owner will have
// to provide single LabelInfo in this case, for device segment only.
// LabelInfo may be used to point to other auxiliary resources. For
// example, if Policy focuses on conditions for
// applications.edgelq.com/Pod resource type, administrator can create
// Policy with 2 LabelInfo objects: One with device_id as primary key,
// because it will be Device generating all time series (also for pods),
// then other LabelInfo must contain object with key equal to pod_id.
type PolicySpec_ResourceIdentity_LabelInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Label key that must be present in TsCondition/LogCondition group by
	// fields list. Refer to labels defined in relevant
	// monitoring.edgelq.com/MonitoredResourceDescriptor,
	// monitoring.edgelq.com/MetricDescriptor, or
	// logging.edgelq.com/LogDescriptor resources for which you want to
	// create conditions. Note that "key" must match exactly one of a labels
	// (byte to byte) specified in interesting descriptors. For example, in
	// MonitoredResourceDescriptor of type devices.edgelq.com/Device you may
	// find label with key "device_id". This must be specified in
	// LabelInfo.key if you want to create Policy focusing on Device
	// resource.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// List of all contexts where label with specified key can be found.
	// It may be more than one position. For example device_id label can
	// be found in LogDescriptor or MonitoredResourceDescriptor. In this
	// case, we need to set 2 values in contexts field: RESOURCE_LABEL and
	// LOG_LABEL.
	Contexts []PolicySpec_ResourceIdentity_LabelInfo_UsageContext `protobuf:"varint,2,rep,packed,name=contexts,proto3,enum=ntt.alerting.v1.PolicySpec_ResourceIdentity_LabelInfo_UsageContext" json:"contexts,omitempty"`
	// Name segment value in name pattern. This is always
	// lowerSingularCamelCase resource type name. For example, for LabelInfo
	// with key device_id, if it points to devices.edgelq.com/Device
	// resource type, mapped_name_segment must be equal to "device" value
	// (which is lower camel case).
	MappedNameSegment string `protobuf:"bytes,3,opt,name=mapped_name_segment,json=mappedNameSegment,proto3" json:"mapped_name_segment,omitempty"`
}

func (m *PolicySpec_ResourceIdentity_LabelInfo) Reset() {
	*m = PolicySpec_ResourceIdentity_LabelInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_specs_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *PolicySpec_ResourceIdentity_LabelInfo) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*PolicySpec_ResourceIdentity_LabelInfo) ProtoMessage() {}

func (m *PolicySpec_ResourceIdentity_LabelInfo) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_specs_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*PolicySpec_ResourceIdentity_LabelInfo) GotenMessage() {}

// Deprecated, Use PolicySpec_ResourceIdentity_LabelInfo.ProtoReflect.Descriptor instead.
func (*PolicySpec_ResourceIdentity_LabelInfo) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_specs_proto_rawDescGZIP(), []int{2, 0, 0}
}

func (m *PolicySpec_ResourceIdentity_LabelInfo) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *PolicySpec_ResourceIdentity_LabelInfo) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *PolicySpec_ResourceIdentity_LabelInfo) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *PolicySpec_ResourceIdentity_LabelInfo) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *PolicySpec_ResourceIdentity_LabelInfo) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *PolicySpec_ResourceIdentity_LabelInfo) GetContexts() []PolicySpec_ResourceIdentity_LabelInfo_UsageContext {
	if m != nil {
		return m.Contexts
	}
	return nil
}

func (m *PolicySpec_ResourceIdentity_LabelInfo) GetMappedNameSegment() string {
	if m != nil {
		return m.MappedNameSegment
	}
	return ""
}

func (m *PolicySpec_ResourceIdentity_LabelInfo) SetKey(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Key", "PolicySpec_ResourceIdentity_LabelInfo"))
	}
	m.Key = fv
}

func (m *PolicySpec_ResourceIdentity_LabelInfo) SetContexts(fv []PolicySpec_ResourceIdentity_LabelInfo_UsageContext) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Contexts", "PolicySpec_ResourceIdentity_LabelInfo"))
	}
	m.Contexts = fv
}

func (m *PolicySpec_ResourceIdentity_LabelInfo) SetMappedNameSegment(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MappedNameSegment", "PolicySpec_ResourceIdentity_LabelInfo"))
	}
	m.MappedNameSegment = fv
}

// TsQuery describes TimeSeries query to execute for each specific alert.
// Time interval will be set around alert time.
type PolicySpec_SupportingAlertQuery_TsQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Query description.
	Description string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	// TimeSeries filter template. All substrings <$LABEL_KEY> will be
	// replaced according to the resource_identity.labels field.
	FilterTemplate string `protobuf:"bytes,2,opt,name=filter_template,json=filterTemplate,proto3" json:"filter_template,omitempty"`
	// TimeSeries aggregation object.
	Aggregation *monitoring_common.Aggregation `protobuf:"bytes,3,opt,name=aggregation,proto3" json:"aggregation,omitempty"`
}

func (m *PolicySpec_SupportingAlertQuery_TsQuery) Reset() {
	*m = PolicySpec_SupportingAlertQuery_TsQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_specs_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *PolicySpec_SupportingAlertQuery_TsQuery) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*PolicySpec_SupportingAlertQuery_TsQuery) ProtoMessage() {}

func (m *PolicySpec_SupportingAlertQuery_TsQuery) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_specs_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*PolicySpec_SupportingAlertQuery_TsQuery) GotenMessage() {}

// Deprecated, Use PolicySpec_SupportingAlertQuery_TsQuery.ProtoReflect.Descriptor instead.
func (*PolicySpec_SupportingAlertQuery_TsQuery) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_specs_proto_rawDescGZIP(), []int{2, 1, 0}
}

func (m *PolicySpec_SupportingAlertQuery_TsQuery) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *PolicySpec_SupportingAlertQuery_TsQuery) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *PolicySpec_SupportingAlertQuery_TsQuery) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *PolicySpec_SupportingAlertQuery_TsQuery) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *PolicySpec_SupportingAlertQuery_TsQuery) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *PolicySpec_SupportingAlertQuery_TsQuery) GetFilterTemplate() string {
	if m != nil {
		return m.FilterTemplate
	}
	return ""
}

func (m *PolicySpec_SupportingAlertQuery_TsQuery) GetAggregation() *monitoring_common.Aggregation {
	if m != nil {
		return m.Aggregation
	}
	return nil
}

func (m *PolicySpec_SupportingAlertQuery_TsQuery) SetDescription(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Description", "PolicySpec_SupportingAlertQuery_TsQuery"))
	}
	m.Description = fv
}

func (m *PolicySpec_SupportingAlertQuery_TsQuery) SetFilterTemplate(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FilterTemplate", "PolicySpec_SupportingAlertQuery_TsQuery"))
	}
	m.FilterTemplate = fv
}

func (m *PolicySpec_SupportingAlertQuery_TsQuery) SetAggregation(fv *monitoring_common.Aggregation) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Aggregation", "PolicySpec_SupportingAlertQuery_TsQuery"))
	}
	m.Aggregation = fv
}

// LogQuery describes Log query to execute for each specific alert.
// Time interval will be set around alert time.
type PolicySpec_SupportingAlertQuery_LogQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Query description.
	Description string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	// Log filter template. All substrings <$LABEL_KEY> will be
	// replaced according to the resource_identity.labels field.
	FilterTemplate string `protobuf:"bytes,2,opt,name=filter_template,json=filterTemplate,proto3" json:"filter_template,omitempty"`
}

func (m *PolicySpec_SupportingAlertQuery_LogQuery) Reset() {
	*m = PolicySpec_SupportingAlertQuery_LogQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_specs_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *PolicySpec_SupportingAlertQuery_LogQuery) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*PolicySpec_SupportingAlertQuery_LogQuery) ProtoMessage() {}

func (m *PolicySpec_SupportingAlertQuery_LogQuery) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_specs_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*PolicySpec_SupportingAlertQuery_LogQuery) GotenMessage() {}

// Deprecated, Use PolicySpec_SupportingAlertQuery_LogQuery.ProtoReflect.Descriptor instead.
func (*PolicySpec_SupportingAlertQuery_LogQuery) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_specs_proto_rawDescGZIP(), []int{2, 1, 1}
}

func (m *PolicySpec_SupportingAlertQuery_LogQuery) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *PolicySpec_SupportingAlertQuery_LogQuery) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *PolicySpec_SupportingAlertQuery_LogQuery) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *PolicySpec_SupportingAlertQuery_LogQuery) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *PolicySpec_SupportingAlertQuery_LogQuery) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *PolicySpec_SupportingAlertQuery_LogQuery) GetFilterTemplate() string {
	if m != nil {
		return m.FilterTemplate
	}
	return ""
}

func (m *PolicySpec_SupportingAlertQuery_LogQuery) SetDescription(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Description", "PolicySpec_SupportingAlertQuery_LogQuery"))
	}
	m.Description = fv
}

func (m *PolicySpec_SupportingAlertQuery_LogQuery) SetFilterTemplate(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FilterTemplate", "PolicySpec_SupportingAlertQuery_LogQuery"))
	}
	m.FilterTemplate = fv
}

// RestGetQuery allows to fetch specific resource body to be included in
// investigation data.
// It is optimized for fetching resources from EdgeLQ style services.
// It is not possible as of now to use GRPC API, because alerting resource
// can be used by 3rd party service on top of EdgeLQ platform.
type PolicySpec_SupportingAlertQuery_RestGetQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Description of resource we are fetching
	Description string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	// Endpoint (with scheme) from which we want to fetch resource. For
	// example, it can be https://devices.apis.edgelq.com value, if we want
	// to access a resource from devices.edgelq.com service. Endpoint may
	// differ depending on environment (production or staging).
	// TODO: Replace with reference to meta.goten.com/Service
	Endpoint string `protobuf:"bytes,2,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// Path template to be appended to access specific resource.
	// EdgeLQ based services use standard paths for Get requests.
	// It is: /$API_VERSION/$RESOURCE_NAME.
	// For example, path_template for devices.edgelq.com/Device
	// resource in version v1, path_template must have a format:
	// "/v1/projects/<project_id>/regions/<region_id>/devices/<device_id>".
	// All substrings <$LABEL_KEY> will be replaced according to the
	// resource_identity.labels field.
	PathTemplate string `protobuf:"bytes,3,opt,name=path_template,json=pathTemplate,proto3" json:"path_template,omitempty"`
	// It must be NAME, BASIC, DETAIL or FULL - like in each standard Get
	// request in EdgeLQ based platform.
	View string `protobuf:"bytes,4,opt,name=view,proto3" json:"view,omitempty"`
	// List of additional fields to obtain on top of those defined within
	// view. Fields must be comma separated, and use lower_snake_case
	// notion.
	FieldMask string `protobuf:"bytes,5,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
}

func (m *PolicySpec_SupportingAlertQuery_RestGetQuery) Reset() {
	*m = PolicySpec_SupportingAlertQuery_RestGetQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_specs_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *PolicySpec_SupportingAlertQuery_RestGetQuery) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*PolicySpec_SupportingAlertQuery_RestGetQuery) ProtoMessage() {}

func (m *PolicySpec_SupportingAlertQuery_RestGetQuery) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_specs_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*PolicySpec_SupportingAlertQuery_RestGetQuery) GotenMessage() {}

// Deprecated, Use PolicySpec_SupportingAlertQuery_RestGetQuery.ProtoReflect.Descriptor instead.
func (*PolicySpec_SupportingAlertQuery_RestGetQuery) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_specs_proto_rawDescGZIP(), []int{2, 1, 2}
}

func (m *PolicySpec_SupportingAlertQuery_RestGetQuery) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *PolicySpec_SupportingAlertQuery_RestGetQuery) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *PolicySpec_SupportingAlertQuery_RestGetQuery) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *PolicySpec_SupportingAlertQuery_RestGetQuery) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *PolicySpec_SupportingAlertQuery_RestGetQuery) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *PolicySpec_SupportingAlertQuery_RestGetQuery) GetEndpoint() string {
	if m != nil {
		return m.Endpoint
	}
	return ""
}

func (m *PolicySpec_SupportingAlertQuery_RestGetQuery) GetPathTemplate() string {
	if m != nil {
		return m.PathTemplate
	}
	return ""
}

func (m *PolicySpec_SupportingAlertQuery_RestGetQuery) GetView() string {
	if m != nil {
		return m.View
	}
	return ""
}

func (m *PolicySpec_SupportingAlertQuery_RestGetQuery) GetFieldMask() string {
	if m != nil {
		return m.FieldMask
	}
	return ""
}

func (m *PolicySpec_SupportingAlertQuery_RestGetQuery) SetDescription(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Description", "PolicySpec_SupportingAlertQuery_RestGetQuery"))
	}
	m.Description = fv
}

func (m *PolicySpec_SupportingAlertQuery_RestGetQuery) SetEndpoint(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Endpoint", "PolicySpec_SupportingAlertQuery_RestGetQuery"))
	}
	m.Endpoint = fv
}

func (m *PolicySpec_SupportingAlertQuery_RestGetQuery) SetPathTemplate(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PathTemplate", "PolicySpec_SupportingAlertQuery_RestGetQuery"))
	}
	m.PathTemplate = fv
}

func (m *PolicySpec_SupportingAlertQuery_RestGetQuery) SetView(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "PolicySpec_SupportingAlertQuery_RestGetQuery"))
	}
	m.View = fv
}

func (m *PolicySpec_SupportingAlertQuery_RestGetQuery) SetFieldMask(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "PolicySpec_SupportingAlertQuery_RestGetQuery"))
	}
	m.FieldMask = fv
}

// RestListQuery allows to fetch specific list of resource bodies to be
// included in investigation data.
// It is optimized for fetching resources from EdgeLQ style services.
// It is not possible as of now to use GRPC API, because alerting resource
// can be used by 3rd party service on top of EdgeLQ platform.
type PolicySpec_SupportingAlertQuery_RestListQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Description of resources we are fetching
	Description string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	// Endpoint (with scheme) from which we want to fetch resource. For
	// example, it can be https://applications.apis.edgelq.com value, if we
	// want to access a resource from applications.edgelq.com service.
	// Endpoint may differ depending on environment (production or staging).
	// TODO: Replace with reference to meta.goten.com/Service
	Endpoint string `protobuf:"bytes,2,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// Path template to be appended to access specific resource.
	// EdgeLQ based services use standard paths for List requests.
	// It is:
	// /$API_VERSION/$RESOURCE_PARENT_NAME/$PLURAL_RESOURCE_TYPE_NAME. For
	// example, to fetch list of pods (applications.edgelq.com service), we
	// would use path_template like this:
	// "/v1/projects/<project_id>/regions/<region_id>/pods".
	// All substrings <$LABEL_KEY> will be replaced according to the
	// resource_identity.labels field.
	PathTemplate string `protobuf:"bytes,3,opt,name=path_template,json=pathTemplate,proto3" json:"path_template,omitempty"`
	// It must be NAME, BASIC, DETAIL or FULL - like in each standard List
	// request in EdgeLQ based platform.
	View string `protobuf:"bytes,4,opt,name=view,proto3" json:"view,omitempty"`
	// List of additional fields to obtain on top of those defined within
	// view. Fields must be comma separated, and use lower_snake_case
	// notion.
	FieldMask string `protobuf:"bytes,5,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	// Optional filter template to be used to filter collection. For
	// example, if we want to obtain list of pods running on a device, we
	// should populate it with value:
	// "spec.node=\"projects/<project_id>/regions/<region_id>/devices/<device_id>\"".
	FilterTemplate string `protobuf:"bytes,6,opt,name=filter_template,json=filterTemplate,proto3" json:"filter_template,omitempty"`
}

func (m *PolicySpec_SupportingAlertQuery_RestListQuery) Reset() {
	*m = PolicySpec_SupportingAlertQuery_RestListQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_specs_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *PolicySpec_SupportingAlertQuery_RestListQuery) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*PolicySpec_SupportingAlertQuery_RestListQuery) ProtoMessage() {}

func (m *PolicySpec_SupportingAlertQuery_RestListQuery) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_specs_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*PolicySpec_SupportingAlertQuery_RestListQuery) GotenMessage() {}

// Deprecated, Use PolicySpec_SupportingAlertQuery_RestListQuery.ProtoReflect.Descriptor instead.
func (*PolicySpec_SupportingAlertQuery_RestListQuery) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_specs_proto_rawDescGZIP(), []int{2, 1, 3}
}

func (m *PolicySpec_SupportingAlertQuery_RestListQuery) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *PolicySpec_SupportingAlertQuery_RestListQuery) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *PolicySpec_SupportingAlertQuery_RestListQuery) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *PolicySpec_SupportingAlertQuery_RestListQuery) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *PolicySpec_SupportingAlertQuery_RestListQuery) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *PolicySpec_SupportingAlertQuery_RestListQuery) GetEndpoint() string {
	if m != nil {
		return m.Endpoint
	}
	return ""
}

func (m *PolicySpec_SupportingAlertQuery_RestListQuery) GetPathTemplate() string {
	if m != nil {
		return m.PathTemplate
	}
	return ""
}

func (m *PolicySpec_SupportingAlertQuery_RestListQuery) GetView() string {
	if m != nil {
		return m.View
	}
	return ""
}

func (m *PolicySpec_SupportingAlertQuery_RestListQuery) GetFieldMask() string {
	if m != nil {
		return m.FieldMask
	}
	return ""
}

func (m *PolicySpec_SupportingAlertQuery_RestListQuery) GetFilterTemplate() string {
	if m != nil {
		return m.FilterTemplate
	}
	return ""
}

func (m *PolicySpec_SupportingAlertQuery_RestListQuery) SetDescription(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Description", "PolicySpec_SupportingAlertQuery_RestListQuery"))
	}
	m.Description = fv
}

func (m *PolicySpec_SupportingAlertQuery_RestListQuery) SetEndpoint(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Endpoint", "PolicySpec_SupportingAlertQuery_RestListQuery"))
	}
	m.Endpoint = fv
}

func (m *PolicySpec_SupportingAlertQuery_RestListQuery) SetPathTemplate(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PathTemplate", "PolicySpec_SupportingAlertQuery_RestListQuery"))
	}
	m.PathTemplate = fv
}

func (m *PolicySpec_SupportingAlertQuery_RestListQuery) SetView(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "PolicySpec_SupportingAlertQuery_RestListQuery"))
	}
	m.View = fv
}

func (m *PolicySpec_SupportingAlertQuery_RestListQuery) SetFieldMask(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "PolicySpec_SupportingAlertQuery_RestListQuery"))
	}
	m.FieldMask = fv
}

func (m *PolicySpec_SupportingAlertQuery_RestListQuery) SetFilterTemplate(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FilterTemplate", "PolicySpec_SupportingAlertQuery_RestListQuery"))
	}
	m.FilterTemplate = fv
}

// EdgeConnectivity describes means of accessing alerting resource for
// troubleshooting purposes.
type PolicySpec_AIAgentHandling_EdgeConnectivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Optional list of allowed binaries that AI agent can use. This can be
	// used to restrict potential errors, or indicate what utils are
	// available.
	AllowedBins []string `protobuf:"bytes,4,rep,name=allowed_bins,json=allowedBins,proto3" json:"allowed_bins,omitempty"`
	// Types that are valid to be assigned to Type:
	//	*PolicySpec_AIAgentHandling_EdgeConnectivity_DeviceSsh
	//	*PolicySpec_AIAgentHandling_EdgeConnectivity_ProxiesSsh
	//	*PolicySpec_AIAgentHandling_EdgeConnectivity_PodSsh
	Type isPolicySpec_AIAgentHandling_EdgeConnectivity_Type `protobuf_oneof:"type"`
}

func (m *PolicySpec_AIAgentHandling_EdgeConnectivity) Reset() {
	*m = PolicySpec_AIAgentHandling_EdgeConnectivity{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_specs_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *PolicySpec_AIAgentHandling_EdgeConnectivity) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*PolicySpec_AIAgentHandling_EdgeConnectivity) ProtoMessage() {}

func (m *PolicySpec_AIAgentHandling_EdgeConnectivity) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_specs_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*PolicySpec_AIAgentHandling_EdgeConnectivity) GotenMessage() {}

// Deprecated, Use PolicySpec_AIAgentHandling_EdgeConnectivity.ProtoReflect.Descriptor instead.
func (*PolicySpec_AIAgentHandling_EdgeConnectivity) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_specs_proto_rawDescGZIP(), []int{2, 2, 0}
}

func (m *PolicySpec_AIAgentHandling_EdgeConnectivity) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *PolicySpec_AIAgentHandling_EdgeConnectivity) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *PolicySpec_AIAgentHandling_EdgeConnectivity) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *PolicySpec_AIAgentHandling_EdgeConnectivity) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

type isPolicySpec_AIAgentHandling_EdgeConnectivity_Type interface {
	isPolicySpec_AIAgentHandling_EdgeConnectivity_Type()
}

type PolicySpec_AIAgentHandling_EdgeConnectivity_DeviceSsh struct {
	// Device SSH connectivity
	DeviceSsh *PolicySpec_AIAgentHandling_EdgeConnectivity_DeviceSSH `protobuf:"bytes,1,opt,name=device_ssh,json=deviceSsh,proto3,oneof"`
}
type PolicySpec_AIAgentHandling_EdgeConnectivity_ProxiesSsh struct {
	// Proxies SSH connectivity
	ProxiesSsh *PolicySpec_AIAgentHandling_EdgeConnectivity_ProxiesSSH `protobuf:"bytes,2,opt,name=proxies_ssh,json=proxiesSsh,proto3,oneof"`
}
type PolicySpec_AIAgentHandling_EdgeConnectivity_PodSsh struct {
	// Pod SSH connectivity
	PodSsh *PolicySpec_AIAgentHandling_EdgeConnectivity_PodSSH `protobuf:"bytes,3,opt,name=pod_ssh,json=podSsh,proto3,oneof"`
}

func (*PolicySpec_AIAgentHandling_EdgeConnectivity_DeviceSsh) isPolicySpec_AIAgentHandling_EdgeConnectivity_Type() {
}
func (*PolicySpec_AIAgentHandling_EdgeConnectivity_ProxiesSsh) isPolicySpec_AIAgentHandling_EdgeConnectivity_Type() {
}
func (*PolicySpec_AIAgentHandling_EdgeConnectivity_PodSsh) isPolicySpec_AIAgentHandling_EdgeConnectivity_Type() {
}
func (m *PolicySpec_AIAgentHandling_EdgeConnectivity) GetAllowedBins() []string {
	if m != nil {
		return m.AllowedBins
	}
	return nil
}

func (m *PolicySpec_AIAgentHandling_EdgeConnectivity) GetType() isPolicySpec_AIAgentHandling_EdgeConnectivity_Type {
	if m != nil {
		return m.Type
	}
	return nil
}
func (m *PolicySpec_AIAgentHandling_EdgeConnectivity) GetDeviceSsh() *PolicySpec_AIAgentHandling_EdgeConnectivity_DeviceSSH {
	if x, ok := m.GetType().(*PolicySpec_AIAgentHandling_EdgeConnectivity_DeviceSsh); ok {
		return x.DeviceSsh
	}
	return nil
}
func (m *PolicySpec_AIAgentHandling_EdgeConnectivity) GetProxiesSsh() *PolicySpec_AIAgentHandling_EdgeConnectivity_ProxiesSSH {
	if x, ok := m.GetType().(*PolicySpec_AIAgentHandling_EdgeConnectivity_ProxiesSsh); ok {
		return x.ProxiesSsh
	}
	return nil
}
func (m *PolicySpec_AIAgentHandling_EdgeConnectivity) GetPodSsh() *PolicySpec_AIAgentHandling_EdgeConnectivity_PodSSH {
	if x, ok := m.GetType().(*PolicySpec_AIAgentHandling_EdgeConnectivity_PodSsh); ok {
		return x.PodSsh
	}
	return nil
}
func (m *PolicySpec_AIAgentHandling_EdgeConnectivity) SetAllowedBins(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AllowedBins", "PolicySpec_AIAgentHandling_EdgeConnectivity"))
	}
	m.AllowedBins = fv
}

func (m *PolicySpec_AIAgentHandling_EdgeConnectivity) SetType(ofv isPolicySpec_AIAgentHandling_EdgeConnectivity_Type) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "isPolicySpec_AIAgentHandling_EdgeConnectivity_Type", "PolicySpec_AIAgentHandling_EdgeConnectivity"))
	}
	m.Type = ofv
}
func (m *PolicySpec_AIAgentHandling_EdgeConnectivity) SetDeviceSsh(fv *PolicySpec_AIAgentHandling_EdgeConnectivity_DeviceSSH) {
	m.SetType(&PolicySpec_AIAgentHandling_EdgeConnectivity_DeviceSsh{DeviceSsh: fv})
}
func (m *PolicySpec_AIAgentHandling_EdgeConnectivity) SetProxiesSsh(fv *PolicySpec_AIAgentHandling_EdgeConnectivity_ProxiesSSH) {
	m.SetType(&PolicySpec_AIAgentHandling_EdgeConnectivity_ProxiesSsh{ProxiesSsh: fv})
}
func (m *PolicySpec_AIAgentHandling_EdgeConnectivity) SetPodSsh(fv *PolicySpec_AIAgentHandling_EdgeConnectivity_PodSSH) {
	m.SetType(&PolicySpec_AIAgentHandling_EdgeConnectivity_PodSsh{PodSsh: fv})
}

// Remediation indicates option available to AI agent.
type PolicySpec_AIAgentHandling_Remediation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Types that are valid to be assigned to Type:
	//	*PolicySpec_AIAgentHandling_Remediation_FixInSsh
	//	*PolicySpec_AIAgentHandling_Remediation_Reboot_
	Type isPolicySpec_AIAgentHandling_Remediation_Type `protobuf_oneof:"type"`
}

func (m *PolicySpec_AIAgentHandling_Remediation) Reset() {
	*m = PolicySpec_AIAgentHandling_Remediation{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_specs_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *PolicySpec_AIAgentHandling_Remediation) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*PolicySpec_AIAgentHandling_Remediation) ProtoMessage() {}

func (m *PolicySpec_AIAgentHandling_Remediation) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_specs_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*PolicySpec_AIAgentHandling_Remediation) GotenMessage() {}

// Deprecated, Use PolicySpec_AIAgentHandling_Remediation.ProtoReflect.Descriptor instead.
func (*PolicySpec_AIAgentHandling_Remediation) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_specs_proto_rawDescGZIP(), []int{2, 2, 1}
}

func (m *PolicySpec_AIAgentHandling_Remediation) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *PolicySpec_AIAgentHandling_Remediation) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *PolicySpec_AIAgentHandling_Remediation) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *PolicySpec_AIAgentHandling_Remediation) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

type isPolicySpec_AIAgentHandling_Remediation_Type interface {
	isPolicySpec_AIAgentHandling_Remediation_Type()
}

type PolicySpec_AIAgentHandling_Remediation_FixInSsh struct {
	// FixInSSH remediation type.
	FixInSsh *PolicySpec_AIAgentHandling_Remediation_FixInSSH `protobuf:"bytes,1,opt,name=fix_in_ssh,json=fixInSsh,proto3,oneof"`
}
type PolicySpec_AIAgentHandling_Remediation_Reboot_ struct {
	// Reboot remediation type.
	// It can be specified only if resource identity points to
	// devices.edgelq.com/Device, and if pod_id is specified as
	// one of the available labels.
	Reboot *PolicySpec_AIAgentHandling_Remediation_Reboot `protobuf:"bytes,2,opt,name=reboot,proto3,oneof"`
}

func (*PolicySpec_AIAgentHandling_Remediation_FixInSsh) isPolicySpec_AIAgentHandling_Remediation_Type() {
}
func (*PolicySpec_AIAgentHandling_Remediation_Reboot_) isPolicySpec_AIAgentHandling_Remediation_Type() {
}
func (m *PolicySpec_AIAgentHandling_Remediation) GetType() isPolicySpec_AIAgentHandling_Remediation_Type {
	if m != nil {
		return m.Type
	}
	return nil
}
func (m *PolicySpec_AIAgentHandling_Remediation) GetFixInSsh() *PolicySpec_AIAgentHandling_Remediation_FixInSSH {
	if x, ok := m.GetType().(*PolicySpec_AIAgentHandling_Remediation_FixInSsh); ok {
		return x.FixInSsh
	}
	return nil
}
func (m *PolicySpec_AIAgentHandling_Remediation) GetReboot() *PolicySpec_AIAgentHandling_Remediation_Reboot {
	if x, ok := m.GetType().(*PolicySpec_AIAgentHandling_Remediation_Reboot_); ok {
		return x.Reboot
	}
	return nil
}
func (m *PolicySpec_AIAgentHandling_Remediation) SetType(ofv isPolicySpec_AIAgentHandling_Remediation_Type) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "isPolicySpec_AIAgentHandling_Remediation_Type", "PolicySpec_AIAgentHandling_Remediation"))
	}
	m.Type = ofv
}
func (m *PolicySpec_AIAgentHandling_Remediation) SetFixInSsh(fv *PolicySpec_AIAgentHandling_Remediation_FixInSSH) {
	m.SetType(&PolicySpec_AIAgentHandling_Remediation_FixInSsh{FixInSsh: fv})
}
func (m *PolicySpec_AIAgentHandling_Remediation) SetReboot(fv *PolicySpec_AIAgentHandling_Remediation_Reboot) {
	m.SetType(&PolicySpec_AIAgentHandling_Remediation_Reboot_{Reboot: fv})
}

// DeviceSSH informs that AI agent can SSH into alerting resource using
// standard droplet-exposed SSH tunnel.
// It is necessary to provide LabelInfo with device_id key in resource
// identity, but its possible to use DeviceSSH connectivity for
// non-Device alerts too. It is only necessary that alerting resource
// runs a droplet process.
type PolicySpec_AIAgentHandling_EdgeConnectivity_DeviceSSH struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Client name for self-identification. Can be any unique name like
	// "llm-alerting-agent".
	ClientName string `protobuf:"bytes,1,opt,name=client_name,json=clientName,proto3" json:"client_name,omitempty"`
}

func (m *PolicySpec_AIAgentHandling_EdgeConnectivity_DeviceSSH) Reset() {
	*m = PolicySpec_AIAgentHandling_EdgeConnectivity_DeviceSSH{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_specs_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *PolicySpec_AIAgentHandling_EdgeConnectivity_DeviceSSH) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*PolicySpec_AIAgentHandling_EdgeConnectivity_DeviceSSH) ProtoMessage() {}

func (m *PolicySpec_AIAgentHandling_EdgeConnectivity_DeviceSSH) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_specs_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*PolicySpec_AIAgentHandling_EdgeConnectivity_DeviceSSH) GotenMessage() {}

// Deprecated, Use PolicySpec_AIAgentHandling_EdgeConnectivity_DeviceSSH.ProtoReflect.Descriptor instead.
func (*PolicySpec_AIAgentHandling_EdgeConnectivity_DeviceSSH) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_specs_proto_rawDescGZIP(), []int{2, 2, 0, 0}
}

func (m *PolicySpec_AIAgentHandling_EdgeConnectivity_DeviceSSH) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *PolicySpec_AIAgentHandling_EdgeConnectivity_DeviceSSH) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *PolicySpec_AIAgentHandling_EdgeConnectivity_DeviceSSH) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *PolicySpec_AIAgentHandling_EdgeConnectivity_DeviceSSH) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *PolicySpec_AIAgentHandling_EdgeConnectivity_DeviceSSH) GetClientName() string {
	if m != nil {
		return m.ClientName
	}
	return ""
}

func (m *PolicySpec_AIAgentHandling_EdgeConnectivity_DeviceSSH) SetClientName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ClientName", "PolicySpec_AIAgentHandling_EdgeConnectivity_DeviceSSH"))
	}
	m.ClientName = fv
}

// ProxiesSSH informs that AI agent can SSH into alerting resource using
// proxies service, standard SSH connectivity messages. It is assumed
// that some process on alerting resource is connected to proxies
// exposing SSH tunnel. Refer to Connect method in Proxies.
type PolicySpec_AIAgentHandling_EdgeConnectivity_ProxiesSSH struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Service domain to use in Connect request.
	ServiceDomain string `protobuf:"bytes,1,opt,name=service_domain,json=serviceDomain,proto3" json:"service_domain,omitempty"`
	// Provider name template to use in Connect request.
	// All substrings <$LABEL_KEY> will be replaced according to the
	// resource_identity.labels field, plus special <project_id> and
	// <region_id>.
	ProviderNameTmpl string `protobuf:"bytes,2,opt,name=provider_name_tmpl,json=providerNameTmpl,proto3" json:"provider_name_tmpl,omitempty"`
	// Client name for self-identification. Can be any unique name like
	// "llm-alerting-agent".
	ClientName string `protobuf:"bytes,3,opt,name=client_name,json=clientName,proto3" json:"client_name,omitempty"`
	// Service name to use in Connect request.
	ServiceName string `protobuf:"bytes,4,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
}

func (m *PolicySpec_AIAgentHandling_EdgeConnectivity_ProxiesSSH) Reset() {
	*m = PolicySpec_AIAgentHandling_EdgeConnectivity_ProxiesSSH{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_specs_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *PolicySpec_AIAgentHandling_EdgeConnectivity_ProxiesSSH) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*PolicySpec_AIAgentHandling_EdgeConnectivity_ProxiesSSH) ProtoMessage() {}

func (m *PolicySpec_AIAgentHandling_EdgeConnectivity_ProxiesSSH) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_specs_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*PolicySpec_AIAgentHandling_EdgeConnectivity_ProxiesSSH) GotenMessage() {}

// Deprecated, Use PolicySpec_AIAgentHandling_EdgeConnectivity_ProxiesSSH.ProtoReflect.Descriptor instead.
func (*PolicySpec_AIAgentHandling_EdgeConnectivity_ProxiesSSH) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_specs_proto_rawDescGZIP(), []int{2, 2, 0, 1}
}

func (m *PolicySpec_AIAgentHandling_EdgeConnectivity_ProxiesSSH) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *PolicySpec_AIAgentHandling_EdgeConnectivity_ProxiesSSH) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *PolicySpec_AIAgentHandling_EdgeConnectivity_ProxiesSSH) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *PolicySpec_AIAgentHandling_EdgeConnectivity_ProxiesSSH) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *PolicySpec_AIAgentHandling_EdgeConnectivity_ProxiesSSH) GetServiceDomain() string {
	if m != nil {
		return m.ServiceDomain
	}
	return ""
}

func (m *PolicySpec_AIAgentHandling_EdgeConnectivity_ProxiesSSH) GetProviderNameTmpl() string {
	if m != nil {
		return m.ProviderNameTmpl
	}
	return ""
}

func (m *PolicySpec_AIAgentHandling_EdgeConnectivity_ProxiesSSH) GetClientName() string {
	if m != nil {
		return m.ClientName
	}
	return ""
}

func (m *PolicySpec_AIAgentHandling_EdgeConnectivity_ProxiesSSH) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *PolicySpec_AIAgentHandling_EdgeConnectivity_ProxiesSSH) SetServiceDomain(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ServiceDomain", "PolicySpec_AIAgentHandling_EdgeConnectivity_ProxiesSSH"))
	}
	m.ServiceDomain = fv
}

func (m *PolicySpec_AIAgentHandling_EdgeConnectivity_ProxiesSSH) SetProviderNameTmpl(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ProviderNameTmpl", "PolicySpec_AIAgentHandling_EdgeConnectivity_ProxiesSSH"))
	}
	m.ProviderNameTmpl = fv
}

func (m *PolicySpec_AIAgentHandling_EdgeConnectivity_ProxiesSSH) SetClientName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ClientName", "PolicySpec_AIAgentHandling_EdgeConnectivity_ProxiesSSH"))
	}
	m.ClientName = fv
}

func (m *PolicySpec_AIAgentHandling_EdgeConnectivity_ProxiesSSH) SetServiceName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ServiceName", "PolicySpec_AIAgentHandling_EdgeConnectivity_ProxiesSSH"))
	}
	m.ServiceName = fv
}

// PodSSH can be used if application is running as a Pod supported by
// droplet.
// TODO: Not implemented
type PolicySpec_AIAgentHandling_EdgeConnectivity_PodSSH struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Client name for self-identification. Can be any unique name like
	// "llm-alerting-agent".
	ClientName string `protobuf:"bytes,1,opt,name=client_name,json=clientName,proto3" json:"client_name,omitempty"`
	// Username to use.
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
}

func (m *PolicySpec_AIAgentHandling_EdgeConnectivity_PodSSH) Reset() {
	*m = PolicySpec_AIAgentHandling_EdgeConnectivity_PodSSH{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_specs_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *PolicySpec_AIAgentHandling_EdgeConnectivity_PodSSH) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*PolicySpec_AIAgentHandling_EdgeConnectivity_PodSSH) ProtoMessage() {}

func (m *PolicySpec_AIAgentHandling_EdgeConnectivity_PodSSH) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_specs_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*PolicySpec_AIAgentHandling_EdgeConnectivity_PodSSH) GotenMessage() {}

// Deprecated, Use PolicySpec_AIAgentHandling_EdgeConnectivity_PodSSH.ProtoReflect.Descriptor instead.
func (*PolicySpec_AIAgentHandling_EdgeConnectivity_PodSSH) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_specs_proto_rawDescGZIP(), []int{2, 2, 0, 2}
}

func (m *PolicySpec_AIAgentHandling_EdgeConnectivity_PodSSH) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *PolicySpec_AIAgentHandling_EdgeConnectivity_PodSSH) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *PolicySpec_AIAgentHandling_EdgeConnectivity_PodSSH) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *PolicySpec_AIAgentHandling_EdgeConnectivity_PodSSH) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *PolicySpec_AIAgentHandling_EdgeConnectivity_PodSSH) GetClientName() string {
	if m != nil {
		return m.ClientName
	}
	return ""
}

func (m *PolicySpec_AIAgentHandling_EdgeConnectivity_PodSSH) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *PolicySpec_AIAgentHandling_EdgeConnectivity_PodSSH) SetClientName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ClientName", "PolicySpec_AIAgentHandling_EdgeConnectivity_PodSSH"))
	}
	m.ClientName = fv
}

func (m *PolicySpec_AIAgentHandling_EdgeConnectivity_PodSSH) SetUsername(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Username", "PolicySpec_AIAgentHandling_EdgeConnectivity_PodSSH"))
	}
	m.Username = fv
}

// FixInSSH declares that issue should be fixed using SSH shell.
// AI Agent should provide a command to execute in shell.
// This option can be used only if EdgeConnectivity is specified.
type PolicySpec_AIAgentHandling_Remediation_FixInSSH struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (m *PolicySpec_AIAgentHandling_Remediation_FixInSSH) Reset() {
	*m = PolicySpec_AIAgentHandling_Remediation_FixInSSH{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_specs_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *PolicySpec_AIAgentHandling_Remediation_FixInSSH) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*PolicySpec_AIAgentHandling_Remediation_FixInSSH) ProtoMessage() {}

func (m *PolicySpec_AIAgentHandling_Remediation_FixInSSH) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_specs_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*PolicySpec_AIAgentHandling_Remediation_FixInSSH) GotenMessage() {}

// Deprecated, Use PolicySpec_AIAgentHandling_Remediation_FixInSSH.ProtoReflect.Descriptor instead.
func (*PolicySpec_AIAgentHandling_Remediation_FixInSSH) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_specs_proto_rawDescGZIP(), []int{2, 2, 1, 0}
}

func (m *PolicySpec_AIAgentHandling_Remediation_FixInSSH) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *PolicySpec_AIAgentHandling_Remediation_FixInSSH) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *PolicySpec_AIAgentHandling_Remediation_FixInSSH) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *PolicySpec_AIAgentHandling_Remediation_FixInSSH) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

// Reboot is a special type of remediation applicable only and only
// for pods -> it is necessary to provide LabelInfo with pod_id key.
// Pod will be restarted to remediate an issue.
type PolicySpec_AIAgentHandling_Remediation_Reboot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (m *PolicySpec_AIAgentHandling_Remediation_Reboot) Reset() {
	*m = PolicySpec_AIAgentHandling_Remediation_Reboot{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_specs_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *PolicySpec_AIAgentHandling_Remediation_Reboot) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*PolicySpec_AIAgentHandling_Remediation_Reboot) ProtoMessage() {}

func (m *PolicySpec_AIAgentHandling_Remediation_Reboot) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_specs_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*PolicySpec_AIAgentHandling_Remediation_Reboot) GotenMessage() {}

// Deprecated, Use PolicySpec_AIAgentHandling_Remediation_Reboot.ProtoReflect.Descriptor instead.
func (*PolicySpec_AIAgentHandling_Remediation_Reboot) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_specs_proto_rawDescGZIP(), []int{2, 2, 1, 1}
}

func (m *PolicySpec_AIAgentHandling_Remediation_Reboot) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *PolicySpec_AIAgentHandling_Remediation_Reboot) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *PolicySpec_AIAgentHandling_Remediation_Reboot) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *PolicySpec_AIAgentHandling_Remediation_Reboot) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

// Email Spec
type NotificationChannelSpec_Email struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Email Addresses
	Addresses []string `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
}

func (m *NotificationChannelSpec_Email) Reset() {
	*m = NotificationChannelSpec_Email{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_specs_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *NotificationChannelSpec_Email) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*NotificationChannelSpec_Email) ProtoMessage() {}

func (m *NotificationChannelSpec_Email) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_specs_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*NotificationChannelSpec_Email) GotenMessage() {}

// Deprecated, Use NotificationChannelSpec_Email.ProtoReflect.Descriptor instead.
func (*NotificationChannelSpec_Email) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_specs_proto_rawDescGZIP(), []int{3, 0}
}

func (m *NotificationChannelSpec_Email) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *NotificationChannelSpec_Email) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *NotificationChannelSpec_Email) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *NotificationChannelSpec_Email) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *NotificationChannelSpec_Email) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

func (m *NotificationChannelSpec_Email) SetAddresses(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Addresses", "NotificationChannelSpec_Email"))
	}
	m.Addresses = fv
}

// Slack Spec
type NotificationChannelSpec_Slack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Slack Incoming Webhook URL
	IncomingWebhook string `protobuf:"bytes,1,opt,name=incoming_webhook,json=incomingWebhook,proto3" json:"incoming_webhook,omitempty"`
}

func (m *NotificationChannelSpec_Slack) Reset() {
	*m = NotificationChannelSpec_Slack{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_specs_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *NotificationChannelSpec_Slack) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*NotificationChannelSpec_Slack) ProtoMessage() {}

func (m *NotificationChannelSpec_Slack) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_specs_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*NotificationChannelSpec_Slack) GotenMessage() {}

// Deprecated, Use NotificationChannelSpec_Slack.ProtoReflect.Descriptor instead.
func (*NotificationChannelSpec_Slack) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_specs_proto_rawDescGZIP(), []int{3, 1}
}

func (m *NotificationChannelSpec_Slack) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *NotificationChannelSpec_Slack) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *NotificationChannelSpec_Slack) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *NotificationChannelSpec_Slack) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *NotificationChannelSpec_Slack) GetIncomingWebhook() string {
	if m != nil {
		return m.IncomingWebhook
	}
	return ""
}

func (m *NotificationChannelSpec_Slack) SetIncomingWebhook(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IncomingWebhook", "NotificationChannelSpec_Slack"))
	}
	m.IncomingWebhook = fv
}

// PagerDuty Spec
type NotificationChannelSpec_PagerDuty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// PagerDuty Service Key
	ServiceKey string `protobuf:"bytes,1,opt,name=service_key,json=serviceKey,proto3" json:"service_key,omitempty"`
}

func (m *NotificationChannelSpec_PagerDuty) Reset() {
	*m = NotificationChannelSpec_PagerDuty{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_specs_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *NotificationChannelSpec_PagerDuty) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*NotificationChannelSpec_PagerDuty) ProtoMessage() {}

func (m *NotificationChannelSpec_PagerDuty) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_specs_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*NotificationChannelSpec_PagerDuty) GotenMessage() {}

// Deprecated, Use NotificationChannelSpec_PagerDuty.ProtoReflect.Descriptor instead.
func (*NotificationChannelSpec_PagerDuty) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_specs_proto_rawDescGZIP(), []int{3, 2}
}

func (m *NotificationChannelSpec_PagerDuty) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *NotificationChannelSpec_PagerDuty) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *NotificationChannelSpec_PagerDuty) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *NotificationChannelSpec_PagerDuty) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *NotificationChannelSpec_PagerDuty) GetServiceKey() string {
	if m != nil {
		return m.ServiceKey
	}
	return ""
}

func (m *NotificationChannelSpec_PagerDuty) SetServiceKey(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ServiceKey", "NotificationChannelSpec_PagerDuty"))
	}
	m.ServiceKey = fv
}

// Webhook Spec
type NotificationChannelSpec_Webhook struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Webhook URL
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// Headers
	Headers []*NotificationChannelSpec_Webhook_Header `protobuf:"bytes,2,rep,name=headers,proto3" json:"headers,omitempty"`
	// default is 0 means all the alerts in a notification are sent in single
	// request. Breaking into multiple messages may be significantly slower
	// than sending a single message.
	// For example, to use 250KB chunks, set 0.25 MB
	MaxMessageSizeMb float64 `protobuf:"fixed64,5,opt,name=max_message_size_mb,json=maxMessageSizeMb,proto3" json:"max_message_size_mb,omitempty"`
}

func (m *NotificationChannelSpec_Webhook) Reset() {
	*m = NotificationChannelSpec_Webhook{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_specs_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *NotificationChannelSpec_Webhook) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*NotificationChannelSpec_Webhook) ProtoMessage() {}

func (m *NotificationChannelSpec_Webhook) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_specs_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*NotificationChannelSpec_Webhook) GotenMessage() {}

// Deprecated, Use NotificationChannelSpec_Webhook.ProtoReflect.Descriptor instead.
func (*NotificationChannelSpec_Webhook) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_specs_proto_rawDescGZIP(), []int{3, 3}
}

func (m *NotificationChannelSpec_Webhook) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *NotificationChannelSpec_Webhook) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *NotificationChannelSpec_Webhook) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *NotificationChannelSpec_Webhook) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *NotificationChannelSpec_Webhook) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *NotificationChannelSpec_Webhook) GetHeaders() []*NotificationChannelSpec_Webhook_Header {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *NotificationChannelSpec_Webhook) GetMaxMessageSizeMb() float64 {
	if m != nil {
		return m.MaxMessageSizeMb
	}
	return float64(0)
}

func (m *NotificationChannelSpec_Webhook) SetUrl(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Url", "NotificationChannelSpec_Webhook"))
	}
	m.Url = fv
}

func (m *NotificationChannelSpec_Webhook) SetHeaders(fv []*NotificationChannelSpec_Webhook_Header) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Headers", "NotificationChannelSpec_Webhook"))
	}
	m.Headers = fv
}

func (m *NotificationChannelSpec_Webhook) SetMaxMessageSizeMb(fv float64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MaxMessageSizeMb", "NotificationChannelSpec_Webhook"))
	}
	m.MaxMessageSizeMb = fv
}

// Header
type NotificationChannelSpec_Webhook_Header struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Key           string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value         string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *NotificationChannelSpec_Webhook_Header) Reset() {
	*m = NotificationChannelSpec_Webhook_Header{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_specs_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *NotificationChannelSpec_Webhook_Header) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*NotificationChannelSpec_Webhook_Header) ProtoMessage() {}

func (m *NotificationChannelSpec_Webhook_Header) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_specs_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*NotificationChannelSpec_Webhook_Header) GotenMessage() {}

// Deprecated, Use NotificationChannelSpec_Webhook_Header.ProtoReflect.Descriptor instead.
func (*NotificationChannelSpec_Webhook_Header) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_specs_proto_rawDescGZIP(), []int{3, 3, 0}
}

func (m *NotificationChannelSpec_Webhook_Header) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *NotificationChannelSpec_Webhook_Header) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *NotificationChannelSpec_Webhook_Header) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *NotificationChannelSpec_Webhook_Header) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *NotificationChannelSpec_Webhook_Header) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *NotificationChannelSpec_Webhook_Header) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *NotificationChannelSpec_Webhook_Header) SetKey(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Key", "NotificationChannelSpec_Webhook_Header"))
	}
	m.Key = fv
}

func (m *NotificationChannelSpec_Webhook_Header) SetValue(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Value", "NotificationChannelSpec_Webhook_Header"))
	}
	m.Value = fv
}

var edgelq_alerting_proto_v1_specs_proto preflect.FileDescriptor

var edgelq_alerting_proto_v1_specs_proto_rawDesc = []byte{
	0x0a, 0x24, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x70, 0x65, 0x63, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x65, 0x64, 0x67,
	0x65, 0x6c, 0x71, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2f, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x65, 0x64, 0x67,
	0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x34, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd3, 0x08, 0x0a, 0x0a, 0x4c, 0x6f, 0x67, 0x43, 0x6e, 0x64, 0x53,
	0x70, 0x65, 0x63, 0x12, 0x41, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x43, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x63, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x08, 0xca, 0xc6, 0x27, 0x04, 0x62, 0x02, 0x08, 0x01, 0x52,
	0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x38, 0x0a, 0x0f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x62, 0x79, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42,
	0x10, 0xca, 0xc6, 0x27, 0x0c, 0x42, 0x0a, 0x0a, 0x02, 0x08, 0x01, 0x12, 0x02, 0x08, 0x08, 0x18,
	0x01, 0x52, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x1a, 0xc7, 0x07, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x36, 0x0a, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xb2, 0xda, 0x21, 0x1a,
	0x1a, 0x18, 0x0a, 0x16, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x64, 0x67, 0x65,
	0x6c, 0x71, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4c, 0x6f, 0x67, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x50, 0x0a, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x43, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x63,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6e,
	0x64, 0x42, 0x08, 0xca, 0xc6, 0x27, 0x04, 0x62, 0x02, 0x08, 0x01, 0x52, 0x07, 0x74, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x0c, 0x6d, 0x69, 0x6e, 0x5f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0xca, 0xc6, 0x27, 0x06, 0x5a, 0x04, 0x32, 0x02, 0x08,
	0x3c, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x63,
	0x0a, 0x0c, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x1e,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xca, 0xc6, 0x27,
	0x08, 0x2a, 0x06, 0x3a, 0x02, 0x08, 0x40, 0x68, 0x01, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x33,
	0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x1b,
	0xca, 0xc6, 0x27, 0x17, 0x42, 0x15, 0x0a, 0x02, 0x08, 0x01, 0x12, 0x02, 0x08, 0x19, 0x18, 0x01,
	0x22, 0x09, 0x2a, 0x07, 0x3a, 0x03, 0x08, 0x80, 0x01, 0x68, 0x01, 0x52, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x1a, 0x71, 0x0a, 0x14, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x0f, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xca, 0xc6, 0x27, 0x08, 0x2a, 0x06, 0x32, 0x00, 0x3a, 0x02,
	0x08, 0x40, 0x52, 0x0e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x22, 0x0a, 0x05, 0x72, 0x65, 0x67, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0c, 0xca, 0xc6, 0x27, 0x08, 0x2a, 0x06, 0x3a, 0x02, 0x08, 0x40, 0x68, 0x01, 0x52,
	0x05, 0x72, 0x65, 0x67, 0x65, 0x78, 0x1a, 0xf7, 0x01, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x54, 0x0a, 0x08, 0x74,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x6f, 0x67, 0x43, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6e, 0x64, 0x42, 0x0a, 0xca, 0xc6, 0x27,
	0x06, 0x42, 0x04, 0x12, 0x02, 0x08, 0x08, 0x52, 0x08, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x73, 0x12, 0x61, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x43, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x63,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x42, 0x08, 0xca, 0xc6, 0x27, 0x04, 0x3a, 0x02, 0x10, 0x01, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x22, 0x2a, 0x0a, 0x08, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x07, 0x0a, 0x03, 0x41, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x52, 0x10, 0x02,
	0x1a, 0x97, 0x02, 0x0a, 0x0a, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6e, 0x64, 0x12,
	0x46, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x6f, 0x67, 0x43, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x48, 0x00,
	0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x5f, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x36, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x43, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x52, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f,
	0x67, 0x43, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x48,
	0x00, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x3a, 0x04, 0xe8, 0xde,
	0x21, 0x00, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xe9, 0x15, 0x0a, 0x09, 0x54,
	0x73, 0x43, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x63, 0x12, 0x4a, 0x0a, 0x07, 0x71, 0x75, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x73, 0x43, 0x6e,
	0x64, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x0e, 0xca, 0xc6, 0x27,
	0x0a, 0x42, 0x08, 0x0a, 0x02, 0x08, 0x01, 0x12, 0x02, 0x08, 0x10, 0x52, 0x07, 0x71, 0x75, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x0e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0e, 0xca, 0xc6,
	0x27, 0x0a, 0x42, 0x08, 0x0a, 0x00, 0x12, 0x02, 0x08, 0x08, 0x18, 0x01, 0x52, 0x0c, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x12, 0x68, 0x0a, 0x12, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x73, 0x43, 0x6e, 0x64, 0x53, 0x70,
	0x65, 0x63, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x43, 0x66, 0x67, 0x42, 0x08, 0xca, 0xc6, 0x27, 0x04, 0x62, 0x02, 0x08,
	0x01, 0x52, 0x11, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0x66, 0x0a, 0x10, 0x61, 0x6e, 0x6f, 0x6d, 0x61, 0x6c, 0x79, 0x5f,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x73, 0x43, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x41, 0x6e, 0x6f, 0x6d, 0x61,
	0x6c, 0x79, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x66, 0x67, 0x42, 0x0c, 0xca,
	0xc6, 0x27, 0x08, 0x42, 0x06, 0x0a, 0x00, 0x12, 0x02, 0x08, 0x04, 0x52, 0x0f, 0x61, 0x6e, 0x6f,
	0x6d, 0x61, 0x6c, 0x79, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x1a, 0x8c, 0x02, 0x0a,
	0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x21, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xca, 0xc6, 0x27, 0x09, 0x2a, 0x07, 0x3a, 0x03, 0x08, 0x80,
	0x02, 0x68, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0xb2, 0xda, 0x21, 0x23, 0x1a,
	0x21, 0x0a, 0x1f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x64,
	0x67, 0x65, 0x6c, 0x71, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72,
	0x69, 0x65, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x07, 0x61, 0x6c,
	0x69, 0x67, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e,
	0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x6c, 0x69, 0x67,
	0x6e, 0x65, 0x72, 0x52, 0x07, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x07,
	0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x34, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65,
	0x64, 0x75, 0x63, 0x65, 0x72, 0x52, 0x07, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x72, 0x12, 0x1b,
	0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x86, 0x08, 0x0a, 0x14,
	0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x43, 0x66, 0x67, 0x12, 0x5e, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x73, 0x43, 0x6e, 0x64, 0x53, 0x70,
	0x65, 0x63, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x43, 0x66, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x42, 0x08, 0xca, 0xc6, 0x27, 0x04, 0x3a, 0x02, 0x10, 0x01, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x80, 0x01, 0x0a, 0x10, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x3a, 0xca, 0xc6, 0x27, 0x36,
	0x5a, 0x34, 0x3a, 0x02, 0x08, 0x3c, 0x3a, 0x03, 0x08, 0xb4, 0x01, 0x3a, 0x03, 0x08, 0xac, 0x02,
	0x3a, 0x03, 0x08, 0x84, 0x07, 0x3a, 0x03, 0x08, 0x88, 0x0e, 0x3a, 0x03, 0x08, 0x90, 0x1c, 0x3a,
	0x03, 0x08, 0xb0, 0x54, 0x3a, 0x04, 0x08, 0xe0, 0xa8, 0x01, 0x3a, 0x04, 0x08, 0xc0, 0xd1, 0x02,
	0x3a, 0x04, 0x08, 0x80, 0xa3, 0x05, 0x52, 0x0f, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x44, 0x0a, 0x0b, 0x72, 0x61, 0x69, 0x73, 0x65,
	0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0xca, 0xc6, 0x27, 0x04, 0x5a, 0x02, 0x2a,
	0x00, 0x52, 0x0a, 0x72, 0x61, 0x69, 0x73, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x3e, 0x0a,
	0x0d, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0c, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x74, 0x0a,
	0x14, 0x70, 0x65, 0x72, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x73,
	0x43, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x66, 0x67, 0x2e, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x52,
	0x12, 0x70, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x73, 0x12, 0x74, 0x0a, 0x24, 0x61, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0xca, 0xc6,
	0x27, 0x04, 0x5a, 0x02, 0x32, 0x00, 0x52, 0x21, 0x61, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65,
	0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x1a, 0xec, 0x02, 0x0a, 0x12, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73,
	0x12, 0x28, 0x0a, 0x10, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x5f, 0x75,
	0x70, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x61, 0x75, 0x74, 0x6f,
	0x41, 0x64, 0x61, 0x70, 0x74, 0x55, 0x70, 0x70, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x75,
	0x74, 0x6f, 0x5f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x61, 0x75, 0x74, 0x6f, 0x41, 0x64, 0x61, 0x70, 0x74, 0x4c,
	0x6f, 0x77, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x75, 0x70, 0x70, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x08, 0x6d, 0x61, 0x78,
	0x55, 0x70, 0x70, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x6f, 0x77,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x08, 0x6d, 0x61,
	0x78, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x75, 0x70,
	0x70, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x08, 0x6d,
	0x69, 0x6e, 0x55, 0x70, 0x70, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x6c,
	0x6f, 0x77, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x08,
	0x6d, 0x69, 0x6e, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x22, 0x2a, 0x0a, 0x08, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02,
	0x4f, 0x52, 0x10, 0x02, 0x1a, 0xef, 0x08, 0x0a, 0x12, 0x41, 0x6e, 0x6f, 0x6d, 0x61, 0x6c, 0x79,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x66, 0x67, 0x12, 0x4f, 0x0a, 0x0f, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x0b, 0xca, 0xc6, 0x27, 0x07, 0x5a, 0x05, 0x32, 0x03, 0x08, 0x88, 0x0e, 0x52, 0x0e, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x4b, 0x0a, 0x0d,
	0x73, 0x74, 0x65, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0b,
	0xca, 0xc6, 0x27, 0x07, 0x5a, 0x05, 0x32, 0x03, 0x08, 0xac, 0x02, 0x52, 0x0c, 0x73, 0x74, 0x65,
	0x70, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x56, 0x0a, 0x13, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x0b, 0xca, 0xc6, 0x27, 0x07, 0x5a, 0x05, 0x32, 0x03, 0x08, 0xac, 0x02, 0x52, 0x11,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x12, 0x80, 0x01, 0x0a, 0x10, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x3a, 0xca, 0xc6, 0x27, 0x36, 0x5a, 0x34, 0x3a,
	0x02, 0x08, 0x3c, 0x3a, 0x03, 0x08, 0xb4, 0x01, 0x3a, 0x03, 0x08, 0xac, 0x02, 0x3a, 0x03, 0x08,
	0x84, 0x07, 0x3a, 0x03, 0x08, 0x88, 0x0e, 0x3a, 0x03, 0x08, 0x90, 0x1c, 0x3a, 0x03, 0x08, 0xb0,
	0x54, 0x3a, 0x04, 0x08, 0xe0, 0xa8, 0x01, 0x3a, 0x04, 0x08, 0xc0, 0xd1, 0x02, 0x3a, 0x04, 0x08,
	0x80, 0xa3, 0x05, 0x52, 0x0f, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x12, 0x6a, 0x0a, 0x10, 0x6c, 0x73, 0x74, 0x6d, 0x5f, 0x61, 0x75, 0x74,
	0x6f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x73, 0x43, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x41, 0x6e, 0x6f, 0x6d, 0x61,
	0x6c, 0x79, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x66, 0x67, 0x2e, 0x4c, 0x73,
	0x74, 0x6d, 0x41, 0x75, 0x74, 0x6f, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52,
	0x0f, 0x6c, 0x73, 0x74, 0x6d, 0x41, 0x75, 0x74, 0x6f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72,
	0x12, 0x44, 0x0a, 0x0b, 0x72, 0x61, 0x69, 0x73, 0x65, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x08, 0xca, 0xc6, 0x27, 0x04, 0x5a, 0x02, 0x2a, 0x00, 0x52, 0x0a, 0x72, 0x61, 0x69, 0x73,
	0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x0d, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x63,
	0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x1a, 0xe4, 0x03, 0x0a, 0x0f, 0x4c, 0x73, 0x74, 0x6d, 0x41,
	0x75, 0x74, 0x6f, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x0b, 0x68, 0x69,
	0x64, 0x64, 0x65, 0x6e, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x0e, 0xca, 0xc6, 0x27, 0x0a, 0x12, 0x08, 0x1a, 0x02, 0x08, 0x40, 0x2a, 0x02, 0x08, 0x08, 0x52,
	0x0a, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6c,
	0x65, 0x61, 0x72, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x13, 0x6d, 0x61,
	0x78, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0f, 0xca, 0xc6, 0x27, 0x0b, 0x12, 0x09, 0x1a,
	0x03, 0x08, 0x80, 0x08, 0x2a, 0x02, 0x08, 0x20, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x54, 0x72, 0x61,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x73, 0x12, 0x3f, 0x0a, 0x13, 0x6d,
	0x69, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0f, 0xca, 0xc6, 0x27, 0x0b, 0x12, 0x09,
	0x1a, 0x03, 0x08, 0x80, 0x08, 0x2a, 0x02, 0x08, 0x20, 0x52, 0x11, 0x6d, 0x69, 0x6e, 0x54, 0x72,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x73, 0x12, 0x3a, 0x0a, 0x19,
	0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x17, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x52, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0xca, 0xc6,
	0x27, 0x0a, 0x5a, 0x08, 0x08, 0x01, 0x32, 0x04, 0x08, 0x80, 0xa3, 0x05, 0x52, 0x0e, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x32, 0x0a, 0x15,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x66, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x3b, 0x0a, 0x1a, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x5f, 0x61, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x46, 0x6f, 0x72,
	0x63, 0x65, 0x41, 0x74, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x07, 0x0a,
	0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x22, 0xca, 0x1c, 0x0a, 0x0a, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x53, 0x70, 0x65, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x69, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0xca, 0xc6,
	0x27, 0x04, 0x3a, 0x02, 0x10, 0x01, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x63, 0x0a, 0x11, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x70,
	0x65, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x42, 0x08, 0xca, 0xc6, 0x27, 0x04, 0x62, 0x02, 0x08, 0x01, 0x52, 0x10, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x5f, 0x0a, 0x12, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x11, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x12, 0x46, 0x0a, 0x08, 0x61, 0x69, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x70, 0x65, 0x63, 0x2e,
	0x41, 0x49, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x52,
	0x07, 0x61, 0x69, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x1a, 0xad, 0x04, 0x0a, 0x10, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x4e, 0x0a,
	0x11, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0xb2, 0xda, 0x21, 0x1d, 0x12, 0x1b,
	0x0a, 0x17, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x10, 0x05, 0x52, 0x10, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x5e, 0x0a,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x0e, 0xca, 0xc6, 0x27, 0x0a, 0x42, 0x08, 0x0a, 0x02, 0x08,
	0x01, 0x12, 0x02, 0x08, 0x08, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x33, 0x0a,
	0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x0e, 0xca, 0xc6, 0x27, 0x0a, 0x42, 0x08, 0x0a, 0x02, 0x08, 0x01,
	0x12, 0x02, 0x08, 0x01, 0x52, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x73, 0x1a, 0xb3, 0x02, 0x0a, 0x09, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1e, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xca,
	0xc6, 0x27, 0x08, 0x2a, 0x06, 0x3a, 0x02, 0x08, 0x40, 0x68, 0x01, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x73, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x43, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x70, 0x65, 0x63, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x42, 0x12, 0xca, 0xc6, 0x27, 0x0e, 0x42, 0x0c, 0x0a,
	0x02, 0x08, 0x01, 0x18, 0x01, 0x22, 0x04, 0x3a, 0x02, 0x10, 0x01, 0x52, 0x08, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x73, 0x12, 0x3d, 0x0a, 0x13, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0d, 0xca, 0xc6, 0x27, 0x09, 0x2a, 0x07, 0x3a, 0x03, 0x08, 0x80, 0x01, 0x68,
	0x01, 0x52, 0x11, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x22, 0x52, 0x0a, 0x0c, 0x55, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x4c, 0x41,
	0x42, 0x45, 0x4c, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x4f, 0x47,
	0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x10, 0x03, 0x1a, 0xe8, 0x09, 0x0a, 0x14, 0x53, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x55, 0x0a, 0x08, 0x74, 0x73, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x70, 0x65, 0x63,
	0x2e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x54, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52,
	0x07, 0x74, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x58, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4c, 0x6f,
	0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x65, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x52, 0x65, 0x73,
	0x74, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x65, 0x73,
	0x74, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x68, 0x0a, 0x0f, 0x72, 0x65, 0x73,
	0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x70, 0x65, 0x63, 0x2e,
	0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x48, 0x00, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x1a, 0xbe, 0x01, 0x0a, 0x07, 0x54, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x2f, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xca, 0xc6, 0x27, 0x09, 0x2a, 0x07, 0x3a, 0x03, 0x08, 0x80,
	0x02, 0x68, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x36, 0x0a, 0x0f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xca, 0xc6, 0x27, 0x09, 0x2a,
	0x07, 0x3a, 0x03, 0x08, 0x80, 0x02, 0x68, 0x01, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x34, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0xca,
	0xc6, 0x27, 0x04, 0x62, 0x02, 0x08, 0x01, 0x52, 0x0b, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x73, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x2f, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xca, 0xc6, 0x27, 0x09, 0x2a, 0x07, 0x3a, 0x03, 0x08,
	0x80, 0x02, 0x68, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x36, 0x0a, 0x0f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xca, 0xc6, 0x27, 0x09,
	0x2a, 0x07, 0x3a, 0x03, 0x08, 0x80, 0x02, 0x68, 0x01, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x1a, 0xea, 0x01, 0x0a, 0x0c, 0x52, 0x65,
	0x73, 0x74, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x2f, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0d, 0xca, 0xc6, 0x27, 0x09, 0x2a, 0x07, 0x3a, 0x03, 0x08, 0x80, 0x02, 0x68, 0x01, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x08, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xca,
	0xc6, 0x27, 0x09, 0x2a, 0x07, 0x52, 0x03, 0x88, 0x01, 0x01, 0x68, 0x01, 0x52, 0x08, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x0d, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xca,
	0xc6, 0x27, 0x09, 0x2a, 0x07, 0x3a, 0x03, 0x08, 0x80, 0x02, 0x68, 0x01, 0x52, 0x0c, 0x70, 0x61,
	0x74, 0x68, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x76, 0x69,
	0x65, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xca, 0xc6, 0x27, 0x06, 0x2a, 0x04,
	0x3a, 0x02, 0x08, 0x20, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x12, 0x2a, 0x0a, 0x0a, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b,
	0xca, 0xc6, 0x27, 0x07, 0x2a, 0x05, 0x3a, 0x03, 0x08, 0x80, 0x04, 0x52, 0x09, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x1a, 0xa1, 0x02, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x2f, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xca,
	0xc6, 0x27, 0x09, 0x2a, 0x07, 0x3a, 0x03, 0x08, 0x80, 0x02, 0x68, 0x01, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x08, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xca, 0xc6, 0x27,
	0x09, 0x2a, 0x07, 0x52, 0x03, 0x88, 0x01, 0x01, 0x68, 0x01, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x0d, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xca, 0xc6, 0x27,
	0x09, 0x2a, 0x07, 0x3a, 0x03, 0x08, 0x80, 0x02, 0x68, 0x01, 0x52, 0x0c, 0x70, 0x61, 0x74, 0x68,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xca, 0xc6, 0x27, 0x06, 0x2a, 0x04, 0x3a, 0x02,
	0x08, 0x20, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x12, 0x2a, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xca, 0xc6,
	0x27, 0x07, 0x2a, 0x05, 0x3a, 0x03, 0x08, 0x80, 0x04, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x4d, 0x61, 0x73, 0x6b, 0x12, 0x34, 0x0a, 0x0f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xca,
	0xc6, 0x27, 0x07, 0x2a, 0x05, 0x3a, 0x03, 0x08, 0x80, 0x02, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x1a, 0xcb, 0x0a, 0x0a, 0x0f, 0x41, 0x49, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x48,
	0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x31, 0x0a, 0x14, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x13, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x12, 0x36, 0x0a, 0x17, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x61, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x5f, 0x72, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x61, 0x75, 0x74, 0x6f, 0x41, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x69, 0x0a, 0x11,
	0x65, 0x64, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x53, 0x70, 0x65, 0x63, 0x2e, 0x41, 0x49, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x6e, 0x64,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x10, 0x65, 0x64, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x68, 0x0a, 0x13, 0x72, 0x65, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x70, 0x65,
	0x63, 0x2e, 0x41, 0x49, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x52, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x72,
	0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x1a, 0xf3, 0x05, 0x0a, 0x10, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x67, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x73, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x41, 0x49, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x48,
	0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x53, 0x48, 0x48, 0x00, 0x52, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x73, 0x68, 0x12,
	0x6a, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x73, 0x5f, 0x73, 0x73, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x70, 0x65,
	0x63, 0x2e, 0x41, 0x49, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x73, 0x53, 0x53, 0x48, 0x48, 0x00, 0x52,
	0x0a, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x73, 0x53, 0x73, 0x68, 0x12, 0x5e, 0x0a, 0x07, 0x70,
	0x6f, 0x64, 0x5f, 0x73, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x41, 0x49, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x50, 0x6f, 0x64, 0x53, 0x53,
	0x48, 0x48, 0x00, 0x52, 0x06, 0x70, 0x6f, 0x64, 0x53, 0x73, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x62, 0x69, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0b, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x42, 0x69, 0x6e, 0x73, 0x1a, 0x3a,
	0x0a, 0x09, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x53, 0x48, 0x12, 0x2d, 0x0a, 0x0b, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0c, 0xca, 0xc6, 0x27, 0x08, 0x2a, 0x06, 0x3a, 0x02, 0x08, 0x40, 0x68, 0x01, 0x52, 0x0a,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0xdf, 0x01, 0x0a, 0x0a, 0x50,
	0x72, 0x6f, 0x78, 0x69, 0x65, 0x73, 0x53, 0x53, 0x48, 0x12, 0x33, 0x0a, 0x0e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0c, 0xca, 0xc6, 0x27, 0x08, 0x2a, 0x06, 0x3a, 0x02, 0x08, 0x40, 0x68, 0x01, 0x52,
	0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x3b,
	0x0a, 0x12, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f,
	0x74, 0x6d, 0x70, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xca, 0xc6, 0x27, 0x09,
	0x2a, 0x07, 0x3a, 0x03, 0x08, 0x80, 0x02, 0x68, 0x01, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x6d, 0x70, 0x6c, 0x12, 0x2d, 0x0a, 0x0b, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0c, 0xca, 0xc6, 0x27, 0x08, 0x2a, 0x06, 0x3a, 0x02, 0x08, 0x40, 0x68, 0x01, 0x52, 0x0a,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x0c, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0d, 0xca, 0xc6, 0x27, 0x09, 0x2a, 0x07, 0x3a, 0x03, 0x08, 0x80, 0x01, 0x68, 0x01, 0x52,
	0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x61, 0x0a, 0x06,
	0x50, 0x6f, 0x64, 0x53, 0x53, 0x48, 0x12, 0x2d, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xca, 0xc6, 0x27,
	0x08, 0x2a, 0x06, 0x3a, 0x02, 0x08, 0x40, 0x68, 0x01, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xca, 0xc6, 0x27, 0x08, 0x2a, 0x06, 0x3a,
	0x02, 0x08, 0x20, 0x68, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0xe7, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x60, 0x0a, 0x0a, 0x66, 0x69, 0x78, 0x5f, 0x69,
	0x6e, 0x5f, 0x73, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x41, 0x49, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x48, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x78, 0x49, 0x6e, 0x53, 0x53, 0x48, 0x48, 0x00, 0x52,
	0x08, 0x66, 0x69, 0x78, 0x49, 0x6e, 0x53, 0x73, 0x68, 0x12, 0x58, 0x0a, 0x06, 0x72, 0x65, 0x62,
	0x6f, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x41, 0x49, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x48, 0x61,
	0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x62,
	0x6f, 0x6f, 0x74, 0x1a, 0x0a, 0x0a, 0x08, 0x46, 0x69, 0x78, 0x49, 0x6e, 0x53, 0x53, 0x48, 0x1a,
	0x08, 0x0a, 0x06, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x22, 0x3a, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x44, 0x45, 0x46,
	0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x41, 0x43, 0x4b, 0x45, 0x4e,
	0x44, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x45, 0x44, 0x47, 0x45, 0x10, 0x02, 0x4a, 0x04, 0x08,
	0x03, 0x10, 0x04, 0x22, 0xe6, 0x0a, 0x0a, 0x17, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x12,
	0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x4b, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x70, 0x65,
	0x63, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x08, 0xca, 0xc6, 0x27, 0x04, 0x3a, 0x02, 0x10, 0x01,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x65, 0x0a, 0x0d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x32, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4b, 0x69, 0x6e,
	0x64, 0x42, 0x0c, 0xca, 0xc6, 0x27, 0x08, 0x42, 0x06, 0x22, 0x04, 0x3a, 0x02, 0x10, 0x01, 0x52,
	0x0c, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4b, 0x69, 0x6e, 0x64, 0x73, 0x12, 0x44, 0x0a,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x44, 0x0a, 0x05, 0x73, 0x6c, 0x61, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x53, 0x6c, 0x61,
	0x63, 0x6b, 0x52, 0x05, 0x73, 0x6c, 0x61, 0x63, 0x6b, 0x12, 0x4a, 0x0a, 0x07, 0x77, 0x65, 0x62,
	0x68, 0x6f, 0x6f, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x53, 0x70, 0x65, 0x63, 0x2e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x07, 0x77, 0x65,
	0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x12, 0x3c, 0x0a, 0x1a, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x47, 0x0a, 0x11, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x10, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x3e, 0x0a, 0x17,
	0x6d, 0x61, 0x78, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x62, 0x6f, 0x64, 0x69, 0x65, 0x73,
	0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0xca,
	0xc6, 0x27, 0x04, 0x12, 0x02, 0x2a, 0x00, 0x52, 0x13, 0x6d, 0x61, 0x78, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x42, 0x6f, 0x64, 0x69, 0x65, 0x73, 0x49, 0x6e, 0x4d, 0x73, 0x67, 0x12, 0x55, 0x0a, 0x28,
	0x70, 0x75, 0x74, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x77, 0x68, 0x65, 0x6e, 0x5f, 0x6f, 0x76, 0x65,
	0x72, 0x66, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x23,
	0x70, 0x75, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x57, 0x68, 0x65, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77,
	0x69, 0x6e, 0x67, 0x1a, 0x25, 0x0a, 0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1c, 0x0a, 0x09,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x1a, 0x32, 0x0a, 0x05, 0x53, 0x6c,
	0x61, 0x63, 0x6b, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x5f,
	0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69,
	0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x1a, 0x2c,
	0x0a, 0x09, 0x50, 0x61, 0x67, 0x65, 0x72, 0x44, 0x75, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x1a, 0xcf, 0x01, 0x0a,
	0x07, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x51, 0x0a, 0x07, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x2e, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x2d, 0x0a,
	0x13, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x5f, 0x6d, 0x62, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x4d, 0x62, 0x1a, 0x30, 0x0a, 0x06,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3f,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05,
	0x45, 0x4d, 0x41, 0x49, 0x4c, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x4c, 0x41, 0x43, 0x4b,
	0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x45, 0x42, 0x48, 0x4f, 0x4f, 0x4b, 0x10, 0x03, 0x22,
	0xea, 0x01, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x0d, 0x0a,
	0x09, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a,
	0x4e, 0x45, 0x57, 0x5f, 0x46, 0x49, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18,
	0x41, 0x49, 0x5f, 0x45, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x54, 0x4f, 0x5f,
	0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x49,
	0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x57, 0x41,
	0x49, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x41, 0x4c, 0x10, 0x03,
	0x12, 0x15, 0x0a, 0x11, 0x41, 0x49, 0x5f, 0x49, 0x47, 0x4e, 0x4f, 0x52, 0x45, 0x44, 0x5f, 0x41,
	0x53, 0x5f, 0x54, 0x4d, 0x50, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x49, 0x5f, 0x41, 0x44,
	0x4a, 0x55, 0x53, 0x54, 0x45, 0x44, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x49, 0x45, 0x53, 0x10, 0x05,
	0x12, 0x1a, 0x0a, 0x16, 0x41, 0x49, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x45, 0x44, 0x10, 0x06, 0x12, 0x1a, 0x0a, 0x16,
	0x4f, 0x50, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41,
	0x50, 0x50, 0x4c, 0x49, 0x45, 0x44, 0x10, 0x07, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x4f, 0x50,
	0x50, 0x45, 0x44, 0x5f, 0x46, 0x49, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x08, 0x22, 0x4c, 0x0a, 0x11,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69,
	0x73, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x42, 0x45, 0xe8, 0xde, 0x21, 0x01,
	0x5a, 0x3f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x3b, 0x72, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	edgelq_alerting_proto_v1_specs_proto_rawDescOnce sync.Once
	edgelq_alerting_proto_v1_specs_proto_rawDescData = edgelq_alerting_proto_v1_specs_proto_rawDesc
)

func edgelq_alerting_proto_v1_specs_proto_rawDescGZIP() []byte {
	edgelq_alerting_proto_v1_specs_proto_rawDescOnce.Do(func() {
		edgelq_alerting_proto_v1_specs_proto_rawDescData = protoimpl.X.CompressGZIP(edgelq_alerting_proto_v1_specs_proto_rawDescData)
	})
	return edgelq_alerting_proto_v1_specs_proto_rawDescData
}

var edgelq_alerting_proto_v1_specs_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var edgelq_alerting_proto_v1_specs_proto_msgTypes = make([]protoimpl.MessageInfo, 35)
var edgelq_alerting_proto_v1_specs_proto_goTypes = []interface{}{
	(LogCndSpec_Query_CompositeTrigger_Operator)(0),                // 0: ntt.alerting.v1.LogCndSpec_Query_CompositeTrigger_Operator
	(TsCndSpec_ThresholdAlertingCfg_Operator)(0),                   // 1: ntt.alerting.v1.TsCndSpec_ThresholdAlertingCfg_Operator
	(PolicySpec_ProcessingLocation)(0),                             // 2: ntt.alerting.v1.PolicySpec_ProcessingLocation
	(PolicySpec_ResourceIdentity_LabelInfo_UsageContext)(0),        // 3: ntt.alerting.v1.PolicySpec_ResourceIdentity_LabelInfo_UsageContext
	(NotificationChannelSpec_Type)(0),                              // 4: ntt.alerting.v1.NotificationChannelSpec_Type
	(NotificationChannelSpec_EventKind)(0),                         // 5: ntt.alerting.v1.NotificationChannelSpec_EventKind
	(*LogCndSpec)(nil),                                             // 6: ntt.alerting.v1.LogCndSpec
	(*TsCndSpec)(nil),                                              // 7: ntt.alerting.v1.TsCndSpec
	(*PolicySpec)(nil),                                             // 8: ntt.alerting.v1.PolicySpec
	(*NotificationChannelSpec)(nil),                                // 9: ntt.alerting.v1.NotificationChannelSpec
	(*AlertingThreshold)(nil),                                      // 10: ntt.alerting.v1.AlertingThreshold
	(*LogCndSpec_Query)(nil),                                       // 11: ntt.alerting.v1.LogCndSpec.Query
	(*LogCndSpec_Query_LabelTrigger)(nil),                          // 12: ntt.alerting.v1.LogCndSpec.Query.LabelTrigger
	(*LogCndSpec_Query_StringPayloadTrigger)(nil),                  // 13: ntt.alerting.v1.LogCndSpec.Query.StringPayloadTrigger
	(*LogCndSpec_Query_CompositeTrigger)(nil),                      // 14: ntt.alerting.v1.LogCndSpec.Query.CompositeTrigger
	(*LogCndSpec_Query_TriggerCnd)(nil),                            // 15: ntt.alerting.v1.LogCndSpec.Query.TriggerCnd
	(*TsCndSpec_Query)(nil),                                        // 16: ntt.alerting.v1.TsCndSpec.Query
	(*TsCndSpec_ThresholdAlertingCfg)(nil),                         // 17: ntt.alerting.v1.TsCndSpec.ThresholdAlertingCfg
	(*TsCndSpec_AnomalyAlertingCfg)(nil),                           // 18: ntt.alerting.v1.TsCndSpec.AnomalyAlertingCfg
	(*TsCndSpec_ThresholdAlertingCfg_AlertingThresholds)(nil),      // 19: ntt.alerting.v1.TsCndSpec.ThresholdAlertingCfg.AlertingThresholds
	(*TsCndSpec_AnomalyAlertingCfg_LstmAutoEncoder)(nil),           // 20: ntt.alerting.v1.TsCndSpec.AnomalyAlertingCfg.LstmAutoEncoder
	(*PolicySpec_ResourceIdentity)(nil),                            // 21: ntt.alerting.v1.PolicySpec.ResourceIdentity
	(*PolicySpec_SupportingAlertQuery)(nil),                        // 22: ntt.alerting.v1.PolicySpec.SupportingAlertQuery
	(*PolicySpec_AIAgentHandling)(nil),                             // 23: ntt.alerting.v1.PolicySpec.AIAgentHandling
	(*PolicySpec_ResourceIdentity_LabelInfo)(nil),                  // 24: ntt.alerting.v1.PolicySpec.ResourceIdentity.LabelInfo
	(*PolicySpec_SupportingAlertQuery_TsQuery)(nil),                // 25: ntt.alerting.v1.PolicySpec.SupportingAlertQuery.TsQuery
	(*PolicySpec_SupportingAlertQuery_LogQuery)(nil),               // 26: ntt.alerting.v1.PolicySpec.SupportingAlertQuery.LogQuery
	(*PolicySpec_SupportingAlertQuery_RestGetQuery)(nil),           // 27: ntt.alerting.v1.PolicySpec.SupportingAlertQuery.RestGetQuery
	(*PolicySpec_SupportingAlertQuery_RestListQuery)(nil),          // 28: ntt.alerting.v1.PolicySpec.SupportingAlertQuery.RestListQuery
	(*PolicySpec_AIAgentHandling_EdgeConnectivity)(nil),            // 29: ntt.alerting.v1.PolicySpec.AIAgentHandling.EdgeConnectivity
	(*PolicySpec_AIAgentHandling_Remediation)(nil),                 // 30: ntt.alerting.v1.PolicySpec.AIAgentHandling.Remediation
	(*PolicySpec_AIAgentHandling_EdgeConnectivity_DeviceSSH)(nil),  // 31: ntt.alerting.v1.PolicySpec.AIAgentHandling.EdgeConnectivity.DeviceSSH
	(*PolicySpec_AIAgentHandling_EdgeConnectivity_ProxiesSSH)(nil), // 32: ntt.alerting.v1.PolicySpec.AIAgentHandling.EdgeConnectivity.ProxiesSSH
	(*PolicySpec_AIAgentHandling_EdgeConnectivity_PodSSH)(nil),     // 33: ntt.alerting.v1.PolicySpec.AIAgentHandling.EdgeConnectivity.PodSSH
	(*PolicySpec_AIAgentHandling_Remediation_FixInSSH)(nil),        // 34: ntt.alerting.v1.PolicySpec.AIAgentHandling.Remediation.FixInSSH
	(*PolicySpec_AIAgentHandling_Remediation_Reboot)(nil),          // 35: ntt.alerting.v1.PolicySpec.AIAgentHandling.Remediation.Reboot
	(*NotificationChannelSpec_Email)(nil),                          // 36: ntt.alerting.v1.NotificationChannelSpec.Email
	(*NotificationChannelSpec_Slack)(nil),                          // 37: ntt.alerting.v1.NotificationChannelSpec.Slack
	(*NotificationChannelSpec_PagerDuty)(nil),                      // 38: ntt.alerting.v1.NotificationChannelSpec.PagerDuty
	(*NotificationChannelSpec_Webhook)(nil),                        // 39: ntt.alerting.v1.NotificationChannelSpec.Webhook
	(*NotificationChannelSpec_Webhook_Header)(nil),                 // 40: ntt.alerting.v1.NotificationChannelSpec.Webhook.Header
	(*durationpb.Duration)(nil),                                    // 41: google.protobuf.Duration
	(monitoring_common.Aggregation_Aligner)(0),                     // 42: ntt.monitoring.v4.Aggregation_Aligner
	(monitoring_common.Aggregation_Reducer)(0),                     // 43: ntt.monitoring.v4.Aggregation_Reducer
	(*monitoring_common.Aggregation)(nil),                          // 44: ntt.monitoring.v4.Aggregation
	(*fieldmaskpb.FieldMask)(nil),                                  // 45: google.protobuf.FieldMask
}
var edgelq_alerting_proto_v1_specs_proto_depIdxs = []int32{
	11, // 0: ntt.alerting.v1.LogCndSpec.query:type_name -> ntt.alerting.v1.LogCndSpec.Query
	16, // 1: ntt.alerting.v1.TsCndSpec.queries:type_name -> ntt.alerting.v1.TsCndSpec.Query
	17, // 2: ntt.alerting.v1.TsCndSpec.threshold_alerting:type_name -> ntt.alerting.v1.TsCndSpec.ThresholdAlertingCfg
	18, // 3: ntt.alerting.v1.TsCndSpec.anomaly_alerting:type_name -> ntt.alerting.v1.TsCndSpec.AnomalyAlertingCfg
	2,  // 4: ntt.alerting.v1.PolicySpec.processing_location:type_name -> ntt.alerting.v1.PolicySpec_ProcessingLocation
	21, // 5: ntt.alerting.v1.PolicySpec.resource_identity:type_name -> ntt.alerting.v1.PolicySpec.ResourceIdentity
	22, // 6: ntt.alerting.v1.PolicySpec.supporting_queries:type_name -> ntt.alerting.v1.PolicySpec.SupportingAlertQuery
	23, // 7: ntt.alerting.v1.PolicySpec.ai_agent:type_name -> ntt.alerting.v1.PolicySpec.AIAgentHandling
	4,  // 8: ntt.alerting.v1.NotificationChannelSpec.type:type_name -> ntt.alerting.v1.NotificationChannelSpec_Type
	5,  // 9: ntt.alerting.v1.NotificationChannelSpec.enabled_kinds:type_name -> ntt.alerting.v1.NotificationChannelSpec_EventKind
	36, // 10: ntt.alerting.v1.NotificationChannelSpec.email:type_name -> ntt.alerting.v1.NotificationChannelSpec.Email
	37, // 11: ntt.alerting.v1.NotificationChannelSpec.slack:type_name -> ntt.alerting.v1.NotificationChannelSpec.Slack
	39, // 12: ntt.alerting.v1.NotificationChannelSpec.webhook:type_name -> ntt.alerting.v1.NotificationChannelSpec.Webhook
	45, // 13: ntt.alerting.v1.NotificationChannelSpec.notification_mask:type_name -> google.protobuf.FieldMask
	15, // 14: ntt.alerting.v1.LogCndSpec.Query.trigger:type_name -> ntt.alerting.v1.LogCndSpec.Query.TriggerCnd
	41, // 15: ntt.alerting.v1.LogCndSpec.Query.min_duration:type_name -> google.protobuf.Duration
	15, // 16: ntt.alerting.v1.LogCndSpec.Query.CompositeTrigger.triggers:type_name -> ntt.alerting.v1.LogCndSpec.Query.TriggerCnd
	0,  // 17: ntt.alerting.v1.LogCndSpec.Query.CompositeTrigger.operator:type_name -> ntt.alerting.v1.LogCndSpec_Query_CompositeTrigger_Operator
	12, // 18: ntt.alerting.v1.LogCndSpec.Query.TriggerCnd.label:type_name -> ntt.alerting.v1.LogCndSpec.Query.LabelTrigger
	13, // 19: ntt.alerting.v1.LogCndSpec.Query.TriggerCnd.string_content:type_name -> ntt.alerting.v1.LogCndSpec.Query.StringPayloadTrigger
	14, // 20: ntt.alerting.v1.LogCndSpec.Query.TriggerCnd.composite:type_name -> ntt.alerting.v1.LogCndSpec.Query.CompositeTrigger
	42, // 21: ntt.alerting.v1.TsCndSpec.Query.aligner:type_name -> ntt.monitoring.v4.Aggregation_Aligner
	43, // 22: ntt.alerting.v1.TsCndSpec.Query.reducer:type_name -> ntt.monitoring.v4.Aggregation_Reducer
	1,  // 23: ntt.alerting.v1.TsCndSpec.ThresholdAlertingCfg.operator:type_name -> ntt.alerting.v1.TsCndSpec_ThresholdAlertingCfg_Operator
	41, // 24: ntt.alerting.v1.TsCndSpec.ThresholdAlertingCfg.alignment_period:type_name -> google.protobuf.Duration
	41, // 25: ntt.alerting.v1.TsCndSpec.ThresholdAlertingCfg.raise_after:type_name -> google.protobuf.Duration
	41, // 26: ntt.alerting.v1.TsCndSpec.ThresholdAlertingCfg.silence_after:type_name -> google.protobuf.Duration
	19, // 27: ntt.alerting.v1.TsCndSpec.ThresholdAlertingCfg.per_query_thresholds:type_name -> ntt.alerting.v1.TsCndSpec.ThresholdAlertingCfg.AlertingThresholds
	41, // 28: ntt.alerting.v1.TsCndSpec.ThresholdAlertingCfg.adaptive_thresholds_detection_period:type_name -> google.protobuf.Duration
	41, // 29: ntt.alerting.v1.TsCndSpec.AnomalyAlertingCfg.analysis_window:type_name -> google.protobuf.Duration
	41, // 30: ntt.alerting.v1.TsCndSpec.AnomalyAlertingCfg.step_interval:type_name -> google.protobuf.Duration
	41, // 31: ntt.alerting.v1.TsCndSpec.AnomalyAlertingCfg.train_step_interval:type_name -> google.protobuf.Duration
	41, // 32: ntt.alerting.v1.TsCndSpec.AnomalyAlertingCfg.alignment_period:type_name -> google.protobuf.Duration
	20, // 33: ntt.alerting.v1.TsCndSpec.AnomalyAlertingCfg.lstm_autoencoder:type_name -> ntt.alerting.v1.TsCndSpec.AnomalyAlertingCfg.LstmAutoEncoder
	41, // 34: ntt.alerting.v1.TsCndSpec.AnomalyAlertingCfg.raise_after:type_name -> google.protobuf.Duration
	41, // 35: ntt.alerting.v1.TsCndSpec.AnomalyAlertingCfg.silence_after:type_name -> google.protobuf.Duration
	10, // 36: ntt.alerting.v1.TsCndSpec.ThresholdAlertingCfg.AlertingThresholds.max_upper:type_name -> ntt.alerting.v1.AlertingThreshold
	10, // 37: ntt.alerting.v1.TsCndSpec.ThresholdAlertingCfg.AlertingThresholds.max_lower:type_name -> ntt.alerting.v1.AlertingThreshold
	10, // 38: ntt.alerting.v1.TsCndSpec.ThresholdAlertingCfg.AlertingThresholds.min_upper:type_name -> ntt.alerting.v1.AlertingThreshold
	10, // 39: ntt.alerting.v1.TsCndSpec.ThresholdAlertingCfg.AlertingThresholds.min_lower:type_name -> ntt.alerting.v1.AlertingThreshold
	41, // 40: ntt.alerting.v1.TsCndSpec.AnomalyAlertingCfg.LstmAutoEncoder.training_period:type_name -> google.protobuf.Duration
	24, // 41: ntt.alerting.v1.PolicySpec.ResourceIdentity.labels:type_name -> ntt.alerting.v1.PolicySpec.ResourceIdentity.LabelInfo
	25, // 42: ntt.alerting.v1.PolicySpec.SupportingAlertQuery.ts_query:type_name -> ntt.alerting.v1.PolicySpec.SupportingAlertQuery.TsQuery
	26, // 43: ntt.alerting.v1.PolicySpec.SupportingAlertQuery.log_query:type_name -> ntt.alerting.v1.PolicySpec.SupportingAlertQuery.LogQuery
	27, // 44: ntt.alerting.v1.PolicySpec.SupportingAlertQuery.rest_get_query:type_name -> ntt.alerting.v1.PolicySpec.SupportingAlertQuery.RestGetQuery
	28, // 45: ntt.alerting.v1.PolicySpec.SupportingAlertQuery.rest_list_query:type_name -> ntt.alerting.v1.PolicySpec.SupportingAlertQuery.RestListQuery
	29, // 46: ntt.alerting.v1.PolicySpec.AIAgentHandling.edge_connectivity:type_name -> ntt.alerting.v1.PolicySpec.AIAgentHandling.EdgeConnectivity
	30, // 47: ntt.alerting.v1.PolicySpec.AIAgentHandling.remediation_options:type_name -> ntt.alerting.v1.PolicySpec.AIAgentHandling.Remediation
	3,  // 48: ntt.alerting.v1.PolicySpec.ResourceIdentity.LabelInfo.contexts:type_name -> ntt.alerting.v1.PolicySpec_ResourceIdentity_LabelInfo_UsageContext
	44, // 49: ntt.alerting.v1.PolicySpec.SupportingAlertQuery.TsQuery.aggregation:type_name -> ntt.monitoring.v4.Aggregation
	31, // 50: ntt.alerting.v1.PolicySpec.AIAgentHandling.EdgeConnectivity.device_ssh:type_name -> ntt.alerting.v1.PolicySpec.AIAgentHandling.EdgeConnectivity.DeviceSSH
	32, // 51: ntt.alerting.v1.PolicySpec.AIAgentHandling.EdgeConnectivity.proxies_ssh:type_name -> ntt.alerting.v1.PolicySpec.AIAgentHandling.EdgeConnectivity.ProxiesSSH
	33, // 52: ntt.alerting.v1.PolicySpec.AIAgentHandling.EdgeConnectivity.pod_ssh:type_name -> ntt.alerting.v1.PolicySpec.AIAgentHandling.EdgeConnectivity.PodSSH
	34, // 53: ntt.alerting.v1.PolicySpec.AIAgentHandling.Remediation.fix_in_ssh:type_name -> ntt.alerting.v1.PolicySpec.AIAgentHandling.Remediation.FixInSSH
	35, // 54: ntt.alerting.v1.PolicySpec.AIAgentHandling.Remediation.reboot:type_name -> ntt.alerting.v1.PolicySpec.AIAgentHandling.Remediation.Reboot
	40, // 55: ntt.alerting.v1.NotificationChannelSpec.Webhook.headers:type_name -> ntt.alerting.v1.NotificationChannelSpec.Webhook.Header
	56, // [56:56] is the sub-list for method output_type
	56, // [56:56] is the sub-list for method input_type
	56, // [56:56] is the sub-list for extension type_name
	56, // [56:56] is the sub-list for extension extendee
	0,  // [0:56] is the sub-list for field type_name
}

func init() { edgelq_alerting_proto_v1_specs_proto_init() }
func edgelq_alerting_proto_v1_specs_proto_init() {
	if edgelq_alerting_proto_v1_specs_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		edgelq_alerting_proto_v1_specs_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogCndSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_specs_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TsCndSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_specs_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicySpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_specs_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationChannelSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_specs_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlertingThreshold); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_specs_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogCndSpec_Query); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_specs_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogCndSpec_Query_LabelTrigger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_specs_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogCndSpec_Query_StringPayloadTrigger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_specs_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogCndSpec_Query_CompositeTrigger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_specs_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogCndSpec_Query_TriggerCnd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_specs_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TsCndSpec_Query); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_specs_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TsCndSpec_ThresholdAlertingCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_specs_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TsCndSpec_AnomalyAlertingCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_specs_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TsCndSpec_ThresholdAlertingCfg_AlertingThresholds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_specs_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TsCndSpec_AnomalyAlertingCfg_LstmAutoEncoder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_specs_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicySpec_ResourceIdentity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_specs_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicySpec_SupportingAlertQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_specs_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicySpec_AIAgentHandling); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_specs_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicySpec_ResourceIdentity_LabelInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_specs_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicySpec_SupportingAlertQuery_TsQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_specs_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicySpec_SupportingAlertQuery_LogQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_specs_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicySpec_SupportingAlertQuery_RestGetQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_specs_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicySpec_SupportingAlertQuery_RestListQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_specs_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicySpec_AIAgentHandling_EdgeConnectivity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_specs_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicySpec_AIAgentHandling_Remediation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_specs_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicySpec_AIAgentHandling_EdgeConnectivity_DeviceSSH); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_specs_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicySpec_AIAgentHandling_EdgeConnectivity_ProxiesSSH); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_specs_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicySpec_AIAgentHandling_EdgeConnectivity_PodSSH); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_specs_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicySpec_AIAgentHandling_Remediation_FixInSSH); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_specs_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicySpec_AIAgentHandling_Remediation_Reboot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_specs_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationChannelSpec_Email); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_specs_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationChannelSpec_Slack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_specs_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationChannelSpec_PagerDuty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_specs_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationChannelSpec_Webhook); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_specs_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationChannelSpec_Webhook_Header); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	edgelq_alerting_proto_v1_specs_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*LogCndSpec_Query_TriggerCnd_Label)(nil),
		(*LogCndSpec_Query_TriggerCnd_StringContent)(nil),
		(*LogCndSpec_Query_TriggerCnd_Composite)(nil),
	}
	edgelq_alerting_proto_v1_specs_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*TsCndSpec_AnomalyAlertingCfg_LstmAutoencoder)(nil),
	}
	edgelq_alerting_proto_v1_specs_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*PolicySpec_SupportingAlertQuery_TsQuery_)(nil),
		(*PolicySpec_SupportingAlertQuery_LogQuery_)(nil),
		(*PolicySpec_SupportingAlertQuery_RestGetQuery_)(nil),
		(*PolicySpec_SupportingAlertQuery_RestListQuery_)(nil),
	}
	edgelq_alerting_proto_v1_specs_proto_msgTypes[23].OneofWrappers = []interface{}{
		(*PolicySpec_AIAgentHandling_EdgeConnectivity_DeviceSsh)(nil),
		(*PolicySpec_AIAgentHandling_EdgeConnectivity_ProxiesSsh)(nil),
		(*PolicySpec_AIAgentHandling_EdgeConnectivity_PodSsh)(nil),
	}
	edgelq_alerting_proto_v1_specs_proto_msgTypes[24].OneofWrappers = []interface{}{
		(*PolicySpec_AIAgentHandling_Remediation_FixInSsh)(nil),
		(*PolicySpec_AIAgentHandling_Remediation_Reboot_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: edgelq_alerting_proto_v1_specs_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   35,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           edgelq_alerting_proto_v1_specs_proto_goTypes,
		DependencyIndexes: edgelq_alerting_proto_v1_specs_proto_depIdxs,
		EnumInfos:         edgelq_alerting_proto_v1_specs_proto_enumTypes,
		MessageInfos:      edgelq_alerting_proto_v1_specs_proto_msgTypes,
	}.Build()
	edgelq_alerting_proto_v1_specs_proto = out.File
	edgelq_alerting_proto_v1_specs_proto_rawDesc = nil
	edgelq_alerting_proto_v1_specs_proto_goTypes = nil
	edgelq_alerting_proto_v1_specs_proto_depIdxs = nil
}
