// Code generated by protoc-gen-goten-object
// File: edgelq/alerting/proto/v1/specs.proto
// DO NOT EDIT!!!

package rcommon

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	googlefieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	logging_log "github.com/cloudwan/edgelq-sdk/logging/resources/v1/log"
	monitoring_common "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/common"
	monitoring_time_serie "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/time_serie"
	meta_resource "github.com/cloudwan/goten-sdk/meta-service/resources/v1/resource"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = googlefieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &logging_log.Log{}
	_ = &monitoring_common.LabelDescriptor{}
	_ = &monitoring_time_serie.Point{}
	_ = &durationpb.Duration{}
	_ = &fieldmaskpb.FieldMask{}
	_ = &meta_resource.Resource{}
)

func (o *LogCndSpec) GotenObjectExt() {}

func (o *LogCndSpec) MakeFullFieldMask() *LogCndSpec_FieldMask {
	return FullLogCndSpec_FieldMask()
}

func (o *LogCndSpec) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullLogCndSpec_FieldMask()
}

func (o *LogCndSpec) MakeDiffFieldMask(other *LogCndSpec) *LogCndSpec_FieldMask {
	if o == nil && other == nil {
		return &LogCndSpec_FieldMask{}
	}
	if o == nil || other == nil {
		return FullLogCndSpec_FieldMask()
	}

	res := &LogCndSpec_FieldMask{}
	{
		subMask := o.GetQuery().MakeDiffFieldMask(other.GetQuery())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &LogCndSpec_FieldTerminalPath{selector: LogCndSpec_FieldPathSelectorQuery})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &LogCndSpec_FieldSubPath{selector: LogCndSpec_FieldPathSelectorQuery, subPath: subpath})
			}
		}
	}

	if len(o.GetGroupByLabels()) == len(other.GetGroupByLabels()) {
		for i, lValue := range o.GetGroupByLabels() {
			rValue := other.GetGroupByLabels()[i]
			if lValue != rValue {
				res.Paths = append(res.Paths, &LogCndSpec_FieldTerminalPath{selector: LogCndSpec_FieldPathSelectorGroupByLabels})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &LogCndSpec_FieldTerminalPath{selector: LogCndSpec_FieldPathSelectorGroupByLabels})
	}
	return res
}

func (o *LogCndSpec) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*LogCndSpec))
}

func (o *LogCndSpec) Clone() *LogCndSpec {
	if o == nil {
		return nil
	}
	result := &LogCndSpec{}
	result.Query = o.Query.Clone()
	result.GroupByLabels = make([]string, len(o.GroupByLabels))
	for i, sourceValue := range o.GroupByLabels {
		result.GroupByLabels[i] = sourceValue
	}
	return result
}

func (o *LogCndSpec) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *LogCndSpec) Merge(source *LogCndSpec) {
	if source.GetQuery() != nil {
		if o.Query == nil {
			o.Query = new(LogCndSpec_Query)
		}
		o.Query.Merge(source.GetQuery())
	}
	for _, sourceValue := range source.GetGroupByLabels() {
		exists := false
		for _, currentValue := range o.GroupByLabels {
			if currentValue == sourceValue {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement string
			newDstElement = sourceValue
			o.GroupByLabels = append(o.GroupByLabels, newDstElement)
		}
	}

}

func (o *LogCndSpec) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*LogCndSpec))
}

func (o *LogCndSpec_Query) GotenObjectExt() {}

func (o *LogCndSpec_Query) MakeFullFieldMask() *LogCndSpec_Query_FieldMask {
	return FullLogCndSpec_Query_FieldMask()
}

func (o *LogCndSpec_Query) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullLogCndSpec_Query_FieldMask()
}

func (o *LogCndSpec_Query) MakeDiffFieldMask(other *LogCndSpec_Query) *LogCndSpec_Query_FieldMask {
	if o == nil && other == nil {
		return &LogCndSpec_Query_FieldMask{}
	}
	if o == nil || other == nil {
		return FullLogCndSpec_Query_FieldMask()
	}

	res := &LogCndSpec_Query_FieldMask{}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &LogCndSpecQuery_FieldTerminalPath{selector: LogCndSpecQuery_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetTrigger(), other.GetTrigger()) {
		res.Paths = append(res.Paths, &LogCndSpecQuery_FieldTerminalPath{selector: LogCndSpecQuery_FieldPathSelectorTrigger})
	}
	if !proto.Equal(o.GetMinDuration(), other.GetMinDuration()) {
		res.Paths = append(res.Paths, &LogCndSpecQuery_FieldTerminalPath{selector: LogCndSpecQuery_FieldPathSelectorMinDuration})
	}
	return res
}

func (o *LogCndSpec_Query) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*LogCndSpec_Query))
}

func (o *LogCndSpec_Query) Clone() *LogCndSpec_Query {
	if o == nil {
		return nil
	}
	result := &LogCndSpec_Query{}
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &logging_log.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Trigger = proto.Clone(o.Trigger).(*LogCndSpec_Query_TriggerCnd)
	result.MinDuration = proto.Clone(o.MinDuration).(*durationpb.Duration)
	return result
}

func (o *LogCndSpec_Query) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *LogCndSpec_Query) Merge(source *LogCndSpec_Query) {
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &logging_log.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetTrigger() != nil {
		if o.Trigger == nil {
			o.Trigger = new(LogCndSpec_Query_TriggerCnd)
		}
		proto.Merge(o.Trigger, source.GetTrigger())
	}
	if source.GetMinDuration() != nil {
		if o.MinDuration == nil {
			o.MinDuration = new(durationpb.Duration)
		}
		proto.Merge(o.MinDuration, source.GetMinDuration())
	}
}

func (o *LogCndSpec_Query) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*LogCndSpec_Query))
}

func (o *LogCndSpec_Query_LabelTrigger) GotenObjectExt() {}

func (o *LogCndSpec_Query_LabelTrigger) MakeFullFieldMask() *LogCndSpec_Query_LabelTrigger_FieldMask {
	return FullLogCndSpec_Query_LabelTrigger_FieldMask()
}

func (o *LogCndSpec_Query_LabelTrigger) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullLogCndSpec_Query_LabelTrigger_FieldMask()
}

func (o *LogCndSpec_Query_LabelTrigger) MakeDiffFieldMask(other *LogCndSpec_Query_LabelTrigger) *LogCndSpec_Query_LabelTrigger_FieldMask {
	if o == nil && other == nil {
		return &LogCndSpec_Query_LabelTrigger_FieldMask{}
	}
	if o == nil || other == nil {
		return FullLogCndSpec_Query_LabelTrigger_FieldMask()
	}

	res := &LogCndSpec_Query_LabelTrigger_FieldMask{}
	if o.GetKey() != other.GetKey() {
		res.Paths = append(res.Paths, &LogCndSpecQueryLabelTrigger_FieldTerminalPath{selector: LogCndSpecQueryLabelTrigger_FieldPathSelectorKey})
	}

	if len(o.GetValues()) == len(other.GetValues()) {
		for i, lValue := range o.GetValues() {
			rValue := other.GetValues()[i]
			if lValue != rValue {
				res.Paths = append(res.Paths, &LogCndSpecQueryLabelTrigger_FieldTerminalPath{selector: LogCndSpecQueryLabelTrigger_FieldPathSelectorValues})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &LogCndSpecQueryLabelTrigger_FieldTerminalPath{selector: LogCndSpecQueryLabelTrigger_FieldPathSelectorValues})
	}
	return res
}

func (o *LogCndSpec_Query_LabelTrigger) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*LogCndSpec_Query_LabelTrigger))
}

func (o *LogCndSpec_Query_LabelTrigger) Clone() *LogCndSpec_Query_LabelTrigger {
	if o == nil {
		return nil
	}
	result := &LogCndSpec_Query_LabelTrigger{}
	result.Key = o.Key
	result.Values = make([]string, len(o.Values))
	for i, sourceValue := range o.Values {
		result.Values[i] = sourceValue
	}
	return result
}

func (o *LogCndSpec_Query_LabelTrigger) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *LogCndSpec_Query_LabelTrigger) Merge(source *LogCndSpec_Query_LabelTrigger) {
	o.Key = source.GetKey()
	for _, sourceValue := range source.GetValues() {
		exists := false
		for _, currentValue := range o.Values {
			if currentValue == sourceValue {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement string
			newDstElement = sourceValue
			o.Values = append(o.Values, newDstElement)
		}
	}

}

func (o *LogCndSpec_Query_LabelTrigger) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*LogCndSpec_Query_LabelTrigger))
}

func (o *LogCndSpec_Query_StringPayloadTrigger) GotenObjectExt() {}

func (o *LogCndSpec_Query_StringPayloadTrigger) MakeFullFieldMask() *LogCndSpec_Query_StringPayloadTrigger_FieldMask {
	return FullLogCndSpec_Query_StringPayloadTrigger_FieldMask()
}

func (o *LogCndSpec_Query_StringPayloadTrigger) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullLogCndSpec_Query_StringPayloadTrigger_FieldMask()
}

func (o *LogCndSpec_Query_StringPayloadTrigger) MakeDiffFieldMask(other *LogCndSpec_Query_StringPayloadTrigger) *LogCndSpec_Query_StringPayloadTrigger_FieldMask {
	if o == nil && other == nil {
		return &LogCndSpec_Query_StringPayloadTrigger_FieldMask{}
	}
	if o == nil || other == nil {
		return FullLogCndSpec_Query_StringPayloadTrigger_FieldMask()
	}

	res := &LogCndSpec_Query_StringPayloadTrigger_FieldMask{}
	if o.GetObjectSelector() != other.GetObjectSelector() {
		res.Paths = append(res.Paths, &LogCndSpecQueryStringPayloadTrigger_FieldTerminalPath{selector: LogCndSpecQueryStringPayloadTrigger_FieldPathSelectorObjectSelector})
	}
	if o.GetRegex() != other.GetRegex() {
		res.Paths = append(res.Paths, &LogCndSpecQueryStringPayloadTrigger_FieldTerminalPath{selector: LogCndSpecQueryStringPayloadTrigger_FieldPathSelectorRegex})
	}
	return res
}

func (o *LogCndSpec_Query_StringPayloadTrigger) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*LogCndSpec_Query_StringPayloadTrigger))
}

func (o *LogCndSpec_Query_StringPayloadTrigger) Clone() *LogCndSpec_Query_StringPayloadTrigger {
	if o == nil {
		return nil
	}
	result := &LogCndSpec_Query_StringPayloadTrigger{}
	result.ObjectSelector = o.ObjectSelector
	result.Regex = o.Regex
	return result
}

func (o *LogCndSpec_Query_StringPayloadTrigger) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *LogCndSpec_Query_StringPayloadTrigger) Merge(source *LogCndSpec_Query_StringPayloadTrigger) {
	o.ObjectSelector = source.GetObjectSelector()
	o.Regex = source.GetRegex()
}

func (o *LogCndSpec_Query_StringPayloadTrigger) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*LogCndSpec_Query_StringPayloadTrigger))
}

func (o *LogCndSpec_Query_CompositeTrigger) GotenObjectExt() {}

func (o *LogCndSpec_Query_CompositeTrigger) MakeFullFieldMask() *LogCndSpec_Query_CompositeTrigger_FieldMask {
	return FullLogCndSpec_Query_CompositeTrigger_FieldMask()
}

func (o *LogCndSpec_Query_CompositeTrigger) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullLogCndSpec_Query_CompositeTrigger_FieldMask()
}

func (o *LogCndSpec_Query_CompositeTrigger) MakeDiffFieldMask(other *LogCndSpec_Query_CompositeTrigger) *LogCndSpec_Query_CompositeTrigger_FieldMask {
	if o == nil && other == nil {
		return &LogCndSpec_Query_CompositeTrigger_FieldMask{}
	}
	if o == nil || other == nil {
		return FullLogCndSpec_Query_CompositeTrigger_FieldMask()
	}

	res := &LogCndSpec_Query_CompositeTrigger_FieldMask{}

	if len(o.GetTriggers()) == len(other.GetTriggers()) {
		for i, lValue := range o.GetTriggers() {
			rValue := other.GetTriggers()[i]
			if !proto.Equal(lValue, rValue) {
				res.Paths = append(res.Paths, &LogCndSpecQueryCompositeTrigger_FieldTerminalPath{selector: LogCndSpecQueryCompositeTrigger_FieldPathSelectorTriggers})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &LogCndSpecQueryCompositeTrigger_FieldTerminalPath{selector: LogCndSpecQueryCompositeTrigger_FieldPathSelectorTriggers})
	}
	if o.GetOperator() != other.GetOperator() {
		res.Paths = append(res.Paths, &LogCndSpecQueryCompositeTrigger_FieldTerminalPath{selector: LogCndSpecQueryCompositeTrigger_FieldPathSelectorOperator})
	}
	return res
}

func (o *LogCndSpec_Query_CompositeTrigger) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*LogCndSpec_Query_CompositeTrigger))
}

func (o *LogCndSpec_Query_CompositeTrigger) Clone() *LogCndSpec_Query_CompositeTrigger {
	if o == nil {
		return nil
	}
	result := &LogCndSpec_Query_CompositeTrigger{}
	result.Triggers = make([]*LogCndSpec_Query_TriggerCnd, len(o.Triggers))
	for i, sourceValue := range o.Triggers {
		result.Triggers[i] = proto.Clone(sourceValue).(*LogCndSpec_Query_TriggerCnd)
	}
	result.Operator = o.Operator
	return result
}

func (o *LogCndSpec_Query_CompositeTrigger) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *LogCndSpec_Query_CompositeTrigger) Merge(source *LogCndSpec_Query_CompositeTrigger) {
	for _, sourceValue := range source.GetTriggers() {
		exists := false
		for _, currentValue := range o.Triggers {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *LogCndSpec_Query_TriggerCnd
			if sourceValue != nil {
				newDstElement = new(LogCndSpec_Query_TriggerCnd)
				proto.Merge(newDstElement, sourceValue)
			}
			o.Triggers = append(o.Triggers, newDstElement)
		}
	}

	o.Operator = source.GetOperator()
}

func (o *LogCndSpec_Query_CompositeTrigger) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*LogCndSpec_Query_CompositeTrigger))
}

func (o *TsCndSpec) GotenObjectExt() {}

func (o *TsCndSpec) MakeFullFieldMask() *TsCndSpec_FieldMask {
	return FullTsCndSpec_FieldMask()
}

func (o *TsCndSpec) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullTsCndSpec_FieldMask()
}

func (o *TsCndSpec) MakeDiffFieldMask(other *TsCndSpec) *TsCndSpec_FieldMask {
	if o == nil && other == nil {
		return &TsCndSpec_FieldMask{}
	}
	if o == nil || other == nil {
		return FullTsCndSpec_FieldMask()
	}

	res := &TsCndSpec_FieldMask{}

	if len(o.GetQueries()) == len(other.GetQueries()) {
		for i, lValue := range o.GetQueries() {
			rValue := other.GetQueries()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &TsCndSpec_FieldTerminalPath{selector: TsCndSpec_FieldPathSelectorQueries})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &TsCndSpec_FieldTerminalPath{selector: TsCndSpec_FieldPathSelectorQueries})
	}

	if len(o.GetQueryGroupBy()) == len(other.GetQueryGroupBy()) {
		for i, lValue := range o.GetQueryGroupBy() {
			rValue := other.GetQueryGroupBy()[i]
			if lValue != rValue {
				res.Paths = append(res.Paths, &TsCndSpec_FieldTerminalPath{selector: TsCndSpec_FieldPathSelectorQueryGroupBy})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &TsCndSpec_FieldTerminalPath{selector: TsCndSpec_FieldPathSelectorQueryGroupBy})
	}
	{
		subMask := o.GetThresholdAlerting().MakeDiffFieldMask(other.GetThresholdAlerting())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &TsCndSpec_FieldTerminalPath{selector: TsCndSpec_FieldPathSelectorThresholdAlerting})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &TsCndSpec_FieldSubPath{selector: TsCndSpec_FieldPathSelectorThresholdAlerting, subPath: subpath})
			}
		}
	}

	if len(o.GetAnomalyAlerting()) == len(other.GetAnomalyAlerting()) {
		for i, lValue := range o.GetAnomalyAlerting() {
			rValue := other.GetAnomalyAlerting()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &TsCndSpec_FieldTerminalPath{selector: TsCndSpec_FieldPathSelectorAnomalyAlerting})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &TsCndSpec_FieldTerminalPath{selector: TsCndSpec_FieldPathSelectorAnomalyAlerting})
	}
	return res
}

func (o *TsCndSpec) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*TsCndSpec))
}

func (o *TsCndSpec) Clone() *TsCndSpec {
	if o == nil {
		return nil
	}
	result := &TsCndSpec{}
	result.Queries = make([]*TsCndSpec_Query, len(o.Queries))
	for i, sourceValue := range o.Queries {
		result.Queries[i] = sourceValue.Clone()
	}
	result.QueryGroupBy = make([]string, len(o.QueryGroupBy))
	for i, sourceValue := range o.QueryGroupBy {
		result.QueryGroupBy[i] = sourceValue
	}
	result.ThresholdAlerting = o.ThresholdAlerting.Clone()
	result.AnomalyAlerting = make([]*TsCndSpec_AnomalyAlertingCfg, len(o.AnomalyAlerting))
	for i, sourceValue := range o.AnomalyAlerting {
		result.AnomalyAlerting[i] = sourceValue.Clone()
	}
	return result
}

func (o *TsCndSpec) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *TsCndSpec) Merge(source *TsCndSpec) {
	for _, sourceValue := range source.GetQueries() {
		exists := false
		for _, currentValue := range o.Queries {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *TsCndSpec_Query
			if sourceValue != nil {
				newDstElement = new(TsCndSpec_Query)
				newDstElement.Merge(sourceValue)
			}
			o.Queries = append(o.Queries, newDstElement)
		}
	}

	for _, sourceValue := range source.GetQueryGroupBy() {
		exists := false
		for _, currentValue := range o.QueryGroupBy {
			if currentValue == sourceValue {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement string
			newDstElement = sourceValue
			o.QueryGroupBy = append(o.QueryGroupBy, newDstElement)
		}
	}

	if source.GetThresholdAlerting() != nil {
		if o.ThresholdAlerting == nil {
			o.ThresholdAlerting = new(TsCndSpec_ThresholdAlertingCfg)
		}
		o.ThresholdAlerting.Merge(source.GetThresholdAlerting())
	}
	for _, sourceValue := range source.GetAnomalyAlerting() {
		exists := false
		for _, currentValue := range o.AnomalyAlerting {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *TsCndSpec_AnomalyAlertingCfg
			if sourceValue != nil {
				newDstElement = new(TsCndSpec_AnomalyAlertingCfg)
				newDstElement.Merge(sourceValue)
			}
			o.AnomalyAlerting = append(o.AnomalyAlerting, newDstElement)
		}
	}

}

func (o *TsCndSpec) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*TsCndSpec))
}

func (o *TsCndSpec_Query) GotenObjectExt() {}

func (o *TsCndSpec_Query) MakeFullFieldMask() *TsCndSpec_Query_FieldMask {
	return FullTsCndSpec_Query_FieldMask()
}

func (o *TsCndSpec_Query) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullTsCndSpec_Query_FieldMask()
}

func (o *TsCndSpec_Query) MakeDiffFieldMask(other *TsCndSpec_Query) *TsCndSpec_Query_FieldMask {
	if o == nil && other == nil {
		return &TsCndSpec_Query_FieldMask{}
	}
	if o == nil || other == nil {
		return FullTsCndSpec_Query_FieldMask()
	}

	res := &TsCndSpec_Query_FieldMask{}
	if o.GetName() != other.GetName() {
		res.Paths = append(res.Paths, &TsCndSpecQuery_FieldTerminalPath{selector: TsCndSpecQuery_FieldPathSelectorName})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &TsCndSpecQuery_FieldTerminalPath{selector: TsCndSpecQuery_FieldPathSelectorFilter})
	}
	if o.GetAligner() != other.GetAligner() {
		res.Paths = append(res.Paths, &TsCndSpecQuery_FieldTerminalPath{selector: TsCndSpecQuery_FieldPathSelectorAligner})
	}
	if o.GetReducer() != other.GetReducer() {
		res.Paths = append(res.Paths, &TsCndSpecQuery_FieldTerminalPath{selector: TsCndSpecQuery_FieldPathSelectorReducer})
	}
	if o.GetMaxValue() != other.GetMaxValue() {
		res.Paths = append(res.Paths, &TsCndSpecQuery_FieldTerminalPath{selector: TsCndSpecQuery_FieldPathSelectorMaxValue})
	}
	return res
}

func (o *TsCndSpec_Query) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*TsCndSpec_Query))
}

func (o *TsCndSpec_Query) Clone() *TsCndSpec_Query {
	if o == nil {
		return nil
	}
	result := &TsCndSpec_Query{}
	result.Name = o.Name
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &monitoring_time_serie.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Aligner = o.Aligner
	result.Reducer = o.Reducer
	result.MaxValue = o.MaxValue
	return result
}

func (o *TsCndSpec_Query) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *TsCndSpec_Query) Merge(source *TsCndSpec_Query) {
	o.Name = source.GetName()
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &monitoring_time_serie.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	o.Aligner = source.GetAligner()
	o.Reducer = source.GetReducer()
	o.MaxValue = source.GetMaxValue()
}

func (o *TsCndSpec_Query) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*TsCndSpec_Query))
}

func (o *TsCndSpec_ThresholdAlertingCfg) GotenObjectExt() {}

func (o *TsCndSpec_ThresholdAlertingCfg) MakeFullFieldMask() *TsCndSpec_ThresholdAlertingCfg_FieldMask {
	return FullTsCndSpec_ThresholdAlertingCfg_FieldMask()
}

func (o *TsCndSpec_ThresholdAlertingCfg) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullTsCndSpec_ThresholdAlertingCfg_FieldMask()
}

func (o *TsCndSpec_ThresholdAlertingCfg) MakeDiffFieldMask(other *TsCndSpec_ThresholdAlertingCfg) *TsCndSpec_ThresholdAlertingCfg_FieldMask {
	if o == nil && other == nil {
		return &TsCndSpec_ThresholdAlertingCfg_FieldMask{}
	}
	if o == nil || other == nil {
		return FullTsCndSpec_ThresholdAlertingCfg_FieldMask()
	}

	res := &TsCndSpec_ThresholdAlertingCfg_FieldMask{}
	if o.GetOperator() != other.GetOperator() {
		res.Paths = append(res.Paths, &TsCndSpecThresholdAlertingCfg_FieldTerminalPath{selector: TsCndSpecThresholdAlertingCfg_FieldPathSelectorOperator})
	}
	if !proto.Equal(o.GetAlignmentPeriod(), other.GetAlignmentPeriod()) {
		res.Paths = append(res.Paths, &TsCndSpecThresholdAlertingCfg_FieldTerminalPath{selector: TsCndSpecThresholdAlertingCfg_FieldPathSelectorAlignmentPeriod})
	}
	if !proto.Equal(o.GetRaiseAfter(), other.GetRaiseAfter()) {
		res.Paths = append(res.Paths, &TsCndSpecThresholdAlertingCfg_FieldTerminalPath{selector: TsCndSpecThresholdAlertingCfg_FieldPathSelectorRaiseAfter})
	}
	if !proto.Equal(o.GetSilenceAfter(), other.GetSilenceAfter()) {
		res.Paths = append(res.Paths, &TsCndSpecThresholdAlertingCfg_FieldTerminalPath{selector: TsCndSpecThresholdAlertingCfg_FieldPathSelectorSilenceAfter})
	}

	if len(o.GetPerQueryThresholds()) == len(other.GetPerQueryThresholds()) {
		for i, lValue := range o.GetPerQueryThresholds() {
			rValue := other.GetPerQueryThresholds()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &TsCndSpecThresholdAlertingCfg_FieldTerminalPath{selector: TsCndSpecThresholdAlertingCfg_FieldPathSelectorPerQueryThresholds})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &TsCndSpecThresholdAlertingCfg_FieldTerminalPath{selector: TsCndSpecThresholdAlertingCfg_FieldPathSelectorPerQueryThresholds})
	}
	if !proto.Equal(o.GetAdaptiveThresholdsDetectionPeriod(), other.GetAdaptiveThresholdsDetectionPeriod()) {
		res.Paths = append(res.Paths, &TsCndSpecThresholdAlertingCfg_FieldTerminalPath{selector: TsCndSpecThresholdAlertingCfg_FieldPathSelectorAdaptiveThresholdsDetectionPeriod})
	}
	return res
}

func (o *TsCndSpec_ThresholdAlertingCfg) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*TsCndSpec_ThresholdAlertingCfg))
}

func (o *TsCndSpec_ThresholdAlertingCfg) Clone() *TsCndSpec_ThresholdAlertingCfg {
	if o == nil {
		return nil
	}
	result := &TsCndSpec_ThresholdAlertingCfg{}
	result.Operator = o.Operator
	result.AlignmentPeriod = proto.Clone(o.AlignmentPeriod).(*durationpb.Duration)
	result.RaiseAfter = proto.Clone(o.RaiseAfter).(*durationpb.Duration)
	result.SilenceAfter = proto.Clone(o.SilenceAfter).(*durationpb.Duration)
	result.PerQueryThresholds = make([]*TsCndSpec_ThresholdAlertingCfg_AlertingThresholds, len(o.PerQueryThresholds))
	for i, sourceValue := range o.PerQueryThresholds {
		result.PerQueryThresholds[i] = sourceValue.Clone()
	}
	result.AdaptiveThresholdsDetectionPeriod = proto.Clone(o.AdaptiveThresholdsDetectionPeriod).(*durationpb.Duration)
	return result
}

func (o *TsCndSpec_ThresholdAlertingCfg) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *TsCndSpec_ThresholdAlertingCfg) Merge(source *TsCndSpec_ThresholdAlertingCfg) {
	o.Operator = source.GetOperator()
	if source.GetAlignmentPeriod() != nil {
		if o.AlignmentPeriod == nil {
			o.AlignmentPeriod = new(durationpb.Duration)
		}
		proto.Merge(o.AlignmentPeriod, source.GetAlignmentPeriod())
	}
	if source.GetRaiseAfter() != nil {
		if o.RaiseAfter == nil {
			o.RaiseAfter = new(durationpb.Duration)
		}
		proto.Merge(o.RaiseAfter, source.GetRaiseAfter())
	}
	if source.GetSilenceAfter() != nil {
		if o.SilenceAfter == nil {
			o.SilenceAfter = new(durationpb.Duration)
		}
		proto.Merge(o.SilenceAfter, source.GetSilenceAfter())
	}
	for _, sourceValue := range source.GetPerQueryThresholds() {
		exists := false
		for _, currentValue := range o.PerQueryThresholds {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *TsCndSpec_ThresholdAlertingCfg_AlertingThresholds
			if sourceValue != nil {
				newDstElement = new(TsCndSpec_ThresholdAlertingCfg_AlertingThresholds)
				newDstElement.Merge(sourceValue)
			}
			o.PerQueryThresholds = append(o.PerQueryThresholds, newDstElement)
		}
	}

	if source.GetAdaptiveThresholdsDetectionPeriod() != nil {
		if o.AdaptiveThresholdsDetectionPeriod == nil {
			o.AdaptiveThresholdsDetectionPeriod = new(durationpb.Duration)
		}
		proto.Merge(o.AdaptiveThresholdsDetectionPeriod, source.GetAdaptiveThresholdsDetectionPeriod())
	}
}

func (o *TsCndSpec_ThresholdAlertingCfg) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*TsCndSpec_ThresholdAlertingCfg))
}

func (o *TsCndSpec_AnomalyAlertingCfg) GotenObjectExt() {}

func (o *TsCndSpec_AnomalyAlertingCfg) MakeFullFieldMask() *TsCndSpec_AnomalyAlertingCfg_FieldMask {
	return FullTsCndSpec_AnomalyAlertingCfg_FieldMask()
}

func (o *TsCndSpec_AnomalyAlertingCfg) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullTsCndSpec_AnomalyAlertingCfg_FieldMask()
}

func (o *TsCndSpec_AnomalyAlertingCfg) MakeDiffFieldMask(other *TsCndSpec_AnomalyAlertingCfg) *TsCndSpec_AnomalyAlertingCfg_FieldMask {
	if o == nil && other == nil {
		return &TsCndSpec_AnomalyAlertingCfg_FieldMask{}
	}
	if o == nil || other == nil {
		return FullTsCndSpec_AnomalyAlertingCfg_FieldMask()
	}

	res := &TsCndSpec_AnomalyAlertingCfg_FieldMask{}
	if !proto.Equal(o.GetAnalysisWindow(), other.GetAnalysisWindow()) {
		res.Paths = append(res.Paths, &TsCndSpecAnomalyAlertingCfg_FieldTerminalPath{selector: TsCndSpecAnomalyAlertingCfg_FieldPathSelectorAnalysisWindow})
	}
	if !proto.Equal(o.GetStepInterval(), other.GetStepInterval()) {
		res.Paths = append(res.Paths, &TsCndSpecAnomalyAlertingCfg_FieldTerminalPath{selector: TsCndSpecAnomalyAlertingCfg_FieldPathSelectorStepInterval})
	}
	if !proto.Equal(o.GetTrainStepInterval(), other.GetTrainStepInterval()) {
		res.Paths = append(res.Paths, &TsCndSpecAnomalyAlertingCfg_FieldTerminalPath{selector: TsCndSpecAnomalyAlertingCfg_FieldPathSelectorTrainStepInterval})
	}
	if !proto.Equal(o.GetAlignmentPeriod(), other.GetAlignmentPeriod()) {
		res.Paths = append(res.Paths, &TsCndSpecAnomalyAlertingCfg_FieldTerminalPath{selector: TsCndSpecAnomalyAlertingCfg_FieldPathSelectorAlignmentPeriod})
	}
	{
		_, leftSelected := o.Model.(*TsCndSpec_AnomalyAlertingCfg_LstmAutoencoder)
		_, rightSelected := other.Model.(*TsCndSpec_AnomalyAlertingCfg_LstmAutoencoder)
		if leftSelected == rightSelected {
			subMask := o.GetLstmAutoencoder().MakeDiffFieldMask(other.GetLstmAutoencoder())
			if subMask.IsFull() {
				res.Paths = append(res.Paths, &TsCndSpecAnomalyAlertingCfg_FieldTerminalPath{selector: TsCndSpecAnomalyAlertingCfg_FieldPathSelectorLstmAutoencoder})
			} else {
				for _, subpath := range subMask.Paths {
					res.Paths = append(res.Paths, &TsCndSpecAnomalyAlertingCfg_FieldSubPath{selector: TsCndSpecAnomalyAlertingCfg_FieldPathSelectorLstmAutoencoder, subPath: subpath})
				}
			}
		} else {
			res.Paths = append(res.Paths, &TsCndSpecAnomalyAlertingCfg_FieldTerminalPath{selector: TsCndSpecAnomalyAlertingCfg_FieldPathSelectorLstmAutoencoder})
		}
	}
	if !proto.Equal(o.GetRaiseAfter(), other.GetRaiseAfter()) {
		res.Paths = append(res.Paths, &TsCndSpecAnomalyAlertingCfg_FieldTerminalPath{selector: TsCndSpecAnomalyAlertingCfg_FieldPathSelectorRaiseAfter})
	}
	if !proto.Equal(o.GetSilenceAfter(), other.GetSilenceAfter()) {
		res.Paths = append(res.Paths, &TsCndSpecAnomalyAlertingCfg_FieldTerminalPath{selector: TsCndSpecAnomalyAlertingCfg_FieldPathSelectorSilenceAfter})
	}
	return res
}

func (o *TsCndSpec_AnomalyAlertingCfg) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*TsCndSpec_AnomalyAlertingCfg))
}

func (o *TsCndSpec_AnomalyAlertingCfg) Clone() *TsCndSpec_AnomalyAlertingCfg {
	if o == nil {
		return nil
	}
	result := &TsCndSpec_AnomalyAlertingCfg{}
	result.AnalysisWindow = proto.Clone(o.AnalysisWindow).(*durationpb.Duration)
	result.StepInterval = proto.Clone(o.StepInterval).(*durationpb.Duration)
	result.TrainStepInterval = proto.Clone(o.TrainStepInterval).(*durationpb.Duration)
	result.AlignmentPeriod = proto.Clone(o.AlignmentPeriod).(*durationpb.Duration)
	if o, ok := o.Model.(*TsCndSpec_AnomalyAlertingCfg_LstmAutoencoder); ok {
		result.Model = (*TsCndSpec_AnomalyAlertingCfg_LstmAutoencoder)(nil)
		if o != nil {
			result.Model = &TsCndSpec_AnomalyAlertingCfg_LstmAutoencoder{}
			result := result.Model.(*TsCndSpec_AnomalyAlertingCfg_LstmAutoencoder)
			result.LstmAutoencoder = o.LstmAutoencoder.Clone()
		}
	}
	result.RaiseAfter = proto.Clone(o.RaiseAfter).(*durationpb.Duration)
	result.SilenceAfter = proto.Clone(o.SilenceAfter).(*durationpb.Duration)
	return result
}

func (o *TsCndSpec_AnomalyAlertingCfg) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *TsCndSpec_AnomalyAlertingCfg) Merge(source *TsCndSpec_AnomalyAlertingCfg) {
	if source.GetAnalysisWindow() != nil {
		if o.AnalysisWindow == nil {
			o.AnalysisWindow = new(durationpb.Duration)
		}
		proto.Merge(o.AnalysisWindow, source.GetAnalysisWindow())
	}
	if source.GetStepInterval() != nil {
		if o.StepInterval == nil {
			o.StepInterval = new(durationpb.Duration)
		}
		proto.Merge(o.StepInterval, source.GetStepInterval())
	}
	if source.GetTrainStepInterval() != nil {
		if o.TrainStepInterval == nil {
			o.TrainStepInterval = new(durationpb.Duration)
		}
		proto.Merge(o.TrainStepInterval, source.GetTrainStepInterval())
	}
	if source.GetAlignmentPeriod() != nil {
		if o.AlignmentPeriod == nil {
			o.AlignmentPeriod = new(durationpb.Duration)
		}
		proto.Merge(o.AlignmentPeriod, source.GetAlignmentPeriod())
	}
	if source, ok := source.GetModel().(*TsCndSpec_AnomalyAlertingCfg_LstmAutoencoder); ok {
		if dstOneOf, ok := o.Model.(*TsCndSpec_AnomalyAlertingCfg_LstmAutoencoder); !ok || dstOneOf == nil {
			o.Model = &TsCndSpec_AnomalyAlertingCfg_LstmAutoencoder{}
		}
		if source != nil {
			o := o.Model.(*TsCndSpec_AnomalyAlertingCfg_LstmAutoencoder)
			if source.LstmAutoencoder != nil {
				if o.LstmAutoencoder == nil {
					o.LstmAutoencoder = new(TsCndSpec_AnomalyAlertingCfg_LstmAutoEncoder)
				}
				o.LstmAutoencoder.Merge(source.LstmAutoencoder)
			}
		}
	}
	if source.GetRaiseAfter() != nil {
		if o.RaiseAfter == nil {
			o.RaiseAfter = new(durationpb.Duration)
		}
		proto.Merge(o.RaiseAfter, source.GetRaiseAfter())
	}
	if source.GetSilenceAfter() != nil {
		if o.SilenceAfter == nil {
			o.SilenceAfter = new(durationpb.Duration)
		}
		proto.Merge(o.SilenceAfter, source.GetSilenceAfter())
	}
}

func (o *TsCndSpec_AnomalyAlertingCfg) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*TsCndSpec_AnomalyAlertingCfg))
}

func (o *TsCndSpec_ThresholdAlertingCfg_AlertingThresholds) GotenObjectExt() {}

func (o *TsCndSpec_ThresholdAlertingCfg_AlertingThresholds) MakeFullFieldMask() *TsCndSpec_ThresholdAlertingCfg_AlertingThresholds_FieldMask {
	return FullTsCndSpec_ThresholdAlertingCfg_AlertingThresholds_FieldMask()
}

func (o *TsCndSpec_ThresholdAlertingCfg_AlertingThresholds) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullTsCndSpec_ThresholdAlertingCfg_AlertingThresholds_FieldMask()
}

func (o *TsCndSpec_ThresholdAlertingCfg_AlertingThresholds) MakeDiffFieldMask(other *TsCndSpec_ThresholdAlertingCfg_AlertingThresholds) *TsCndSpec_ThresholdAlertingCfg_AlertingThresholds_FieldMask {
	if o == nil && other == nil {
		return &TsCndSpec_ThresholdAlertingCfg_AlertingThresholds_FieldMask{}
	}
	if o == nil || other == nil {
		return FullTsCndSpec_ThresholdAlertingCfg_AlertingThresholds_FieldMask()
	}

	res := &TsCndSpec_ThresholdAlertingCfg_AlertingThresholds_FieldMask{}
	if o.GetAutoAdaptUpper() != other.GetAutoAdaptUpper() {
		res.Paths = append(res.Paths, &TsCndSpecThresholdAlertingCfgAlertingThresholds_FieldTerminalPath{selector: TsCndSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorAutoAdaptUpper})
	}
	if o.GetAutoAdaptLower() != other.GetAutoAdaptLower() {
		res.Paths = append(res.Paths, &TsCndSpecThresholdAlertingCfgAlertingThresholds_FieldTerminalPath{selector: TsCndSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorAutoAdaptLower})
	}
	{
		subMask := o.GetMaxUpper().MakeDiffFieldMask(other.GetMaxUpper())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &TsCndSpecThresholdAlertingCfgAlertingThresholds_FieldTerminalPath{selector: TsCndSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorMaxUpper})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &TsCndSpecThresholdAlertingCfgAlertingThresholds_FieldSubPath{selector: TsCndSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorMaxUpper, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetMaxLower().MakeDiffFieldMask(other.GetMaxLower())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &TsCndSpecThresholdAlertingCfgAlertingThresholds_FieldTerminalPath{selector: TsCndSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorMaxLower})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &TsCndSpecThresholdAlertingCfgAlertingThresholds_FieldSubPath{selector: TsCndSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorMaxLower, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetMinUpper().MakeDiffFieldMask(other.GetMinUpper())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &TsCndSpecThresholdAlertingCfgAlertingThresholds_FieldTerminalPath{selector: TsCndSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorMinUpper})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &TsCndSpecThresholdAlertingCfgAlertingThresholds_FieldSubPath{selector: TsCndSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorMinUpper, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetMinLower().MakeDiffFieldMask(other.GetMinLower())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &TsCndSpecThresholdAlertingCfgAlertingThresholds_FieldTerminalPath{selector: TsCndSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorMinLower})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &TsCndSpecThresholdAlertingCfgAlertingThresholds_FieldSubPath{selector: TsCndSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorMinLower, subPath: subpath})
			}
		}
	}
	return res
}

func (o *TsCndSpec_ThresholdAlertingCfg_AlertingThresholds) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*TsCndSpec_ThresholdAlertingCfg_AlertingThresholds))
}

func (o *TsCndSpec_ThresholdAlertingCfg_AlertingThresholds) Clone() *TsCndSpec_ThresholdAlertingCfg_AlertingThresholds {
	if o == nil {
		return nil
	}
	result := &TsCndSpec_ThresholdAlertingCfg_AlertingThresholds{}
	result.AutoAdaptUpper = o.AutoAdaptUpper
	result.AutoAdaptLower = o.AutoAdaptLower
	result.MaxUpper = o.MaxUpper.Clone()
	result.MaxLower = o.MaxLower.Clone()
	result.MinUpper = o.MinUpper.Clone()
	result.MinLower = o.MinLower.Clone()
	return result
}

func (o *TsCndSpec_ThresholdAlertingCfg_AlertingThresholds) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *TsCndSpec_ThresholdAlertingCfg_AlertingThresholds) Merge(source *TsCndSpec_ThresholdAlertingCfg_AlertingThresholds) {
	o.AutoAdaptUpper = source.GetAutoAdaptUpper()
	o.AutoAdaptLower = source.GetAutoAdaptLower()
	if source.GetMaxUpper() != nil {
		if o.MaxUpper == nil {
			o.MaxUpper = new(AlertingThreshold)
		}
		o.MaxUpper.Merge(source.GetMaxUpper())
	}
	if source.GetMaxLower() != nil {
		if o.MaxLower == nil {
			o.MaxLower = new(AlertingThreshold)
		}
		o.MaxLower.Merge(source.GetMaxLower())
	}
	if source.GetMinUpper() != nil {
		if o.MinUpper == nil {
			o.MinUpper = new(AlertingThreshold)
		}
		o.MinUpper.Merge(source.GetMinUpper())
	}
	if source.GetMinLower() != nil {
		if o.MinLower == nil {
			o.MinLower = new(AlertingThreshold)
		}
		o.MinLower.Merge(source.GetMinLower())
	}
}

func (o *TsCndSpec_ThresholdAlertingCfg_AlertingThresholds) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*TsCndSpec_ThresholdAlertingCfg_AlertingThresholds))
}

func (o *TsCndSpec_AnomalyAlertingCfg_LstmAutoEncoder) GotenObjectExt() {}

func (o *TsCndSpec_AnomalyAlertingCfg_LstmAutoEncoder) MakeFullFieldMask() *TsCndSpec_AnomalyAlertingCfg_LstmAutoEncoder_FieldMask {
	return FullTsCndSpec_AnomalyAlertingCfg_LstmAutoEncoder_FieldMask()
}

func (o *TsCndSpec_AnomalyAlertingCfg_LstmAutoEncoder) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullTsCndSpec_AnomalyAlertingCfg_LstmAutoEncoder_FieldMask()
}

func (o *TsCndSpec_AnomalyAlertingCfg_LstmAutoEncoder) MakeDiffFieldMask(other *TsCndSpec_AnomalyAlertingCfg_LstmAutoEncoder) *TsCndSpec_AnomalyAlertingCfg_LstmAutoEncoder_FieldMask {
	if o == nil && other == nil {
		return &TsCndSpec_AnomalyAlertingCfg_LstmAutoEncoder_FieldMask{}
	}
	if o == nil || other == nil {
		return FullTsCndSpec_AnomalyAlertingCfg_LstmAutoEncoder_FieldMask()
	}

	res := &TsCndSpec_AnomalyAlertingCfg_LstmAutoEncoder_FieldMask{}
	if o.GetHiddenSize() != other.GetHiddenSize() {
		res.Paths = append(res.Paths, &TsCndSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPath{selector: TsCndSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorHiddenSize})
	}
	if o.GetLearnRate() != other.GetLearnRate() {
		res.Paths = append(res.Paths, &TsCndSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPath{selector: TsCndSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorLearnRate})
	}
	if o.GetMaxTrainingEpochs() != other.GetMaxTrainingEpochs() {
		res.Paths = append(res.Paths, &TsCndSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPath{selector: TsCndSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorMaxTrainingEpochs})
	}
	if o.GetMinTrainingEpochs() != other.GetMinTrainingEpochs() {
		res.Paths = append(res.Paths, &TsCndSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPath{selector: TsCndSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorMinTrainingEpochs})
	}
	if o.GetAcceptableTrainingError() != other.GetAcceptableTrainingError() {
		res.Paths = append(res.Paths, &TsCndSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPath{selector: TsCndSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorAcceptableTrainingError})
	}
	if !proto.Equal(o.GetTrainingPeriod(), other.GetTrainingPeriod()) {
		res.Paths = append(res.Paths, &TsCndSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPath{selector: TsCndSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorTrainingPeriod})
	}
	if o.GetCheckPeriodFraction() != other.GetCheckPeriodFraction() {
		res.Paths = append(res.Paths, &TsCndSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPath{selector: TsCndSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorCheckPeriodFraction})
	}
	if o.GetTeacherForceAtInference() != other.GetTeacherForceAtInference() {
		res.Paths = append(res.Paths, &TsCndSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPath{selector: TsCndSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorTeacherForceAtInference})
	}
	return res
}

func (o *TsCndSpec_AnomalyAlertingCfg_LstmAutoEncoder) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*TsCndSpec_AnomalyAlertingCfg_LstmAutoEncoder))
}

func (o *TsCndSpec_AnomalyAlertingCfg_LstmAutoEncoder) Clone() *TsCndSpec_AnomalyAlertingCfg_LstmAutoEncoder {
	if o == nil {
		return nil
	}
	result := &TsCndSpec_AnomalyAlertingCfg_LstmAutoEncoder{}
	result.HiddenSize = o.HiddenSize
	result.LearnRate = o.LearnRate
	result.MaxTrainingEpochs = o.MaxTrainingEpochs
	result.MinTrainingEpochs = o.MinTrainingEpochs
	result.AcceptableTrainingError = o.AcceptableTrainingError
	result.TrainingPeriod = proto.Clone(o.TrainingPeriod).(*durationpb.Duration)
	result.CheckPeriodFraction = o.CheckPeriodFraction
	result.TeacherForceAtInference = o.TeacherForceAtInference
	return result
}

func (o *TsCndSpec_AnomalyAlertingCfg_LstmAutoEncoder) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *TsCndSpec_AnomalyAlertingCfg_LstmAutoEncoder) Merge(source *TsCndSpec_AnomalyAlertingCfg_LstmAutoEncoder) {
	o.HiddenSize = source.GetHiddenSize()
	o.LearnRate = source.GetLearnRate()
	o.MaxTrainingEpochs = source.GetMaxTrainingEpochs()
	o.MinTrainingEpochs = source.GetMinTrainingEpochs()
	o.AcceptableTrainingError = source.GetAcceptableTrainingError()
	if source.GetTrainingPeriod() != nil {
		if o.TrainingPeriod == nil {
			o.TrainingPeriod = new(durationpb.Duration)
		}
		proto.Merge(o.TrainingPeriod, source.GetTrainingPeriod())
	}
	o.CheckPeriodFraction = source.GetCheckPeriodFraction()
	o.TeacherForceAtInference = source.GetTeacherForceAtInference()
}

func (o *TsCndSpec_AnomalyAlertingCfg_LstmAutoEncoder) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*TsCndSpec_AnomalyAlertingCfg_LstmAutoEncoder))
}

func (o *PolicySpec) GotenObjectExt() {}

func (o *PolicySpec) MakeFullFieldMask() *PolicySpec_FieldMask {
	return FullPolicySpec_FieldMask()
}

func (o *PolicySpec) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullPolicySpec_FieldMask()
}

func (o *PolicySpec) MakeDiffFieldMask(other *PolicySpec) *PolicySpec_FieldMask {
	if o == nil && other == nil {
		return &PolicySpec_FieldMask{}
	}
	if o == nil || other == nil {
		return FullPolicySpec_FieldMask()
	}

	res := &PolicySpec_FieldMask{}
	if o.GetEnabled() != other.GetEnabled() {
		res.Paths = append(res.Paths, &PolicySpec_FieldTerminalPath{selector: PolicySpec_FieldPathSelectorEnabled})
	}
	if o.GetProcessingLocation() != other.GetProcessingLocation() {
		res.Paths = append(res.Paths, &PolicySpec_FieldTerminalPath{selector: PolicySpec_FieldPathSelectorProcessingLocation})
	}
	{
		subMask := o.GetResourceIdentity().MakeDiffFieldMask(other.GetResourceIdentity())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &PolicySpec_FieldTerminalPath{selector: PolicySpec_FieldPathSelectorResourceIdentity})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &PolicySpec_FieldSubPath{selector: PolicySpec_FieldPathSelectorResourceIdentity, subPath: subpath})
			}
		}
	}

	if len(o.GetSupportingQueries()) == len(other.GetSupportingQueries()) {
		for i, lValue := range o.GetSupportingQueries() {
			rValue := other.GetSupportingQueries()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &PolicySpec_FieldTerminalPath{selector: PolicySpec_FieldPathSelectorSupportingQueries})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &PolicySpec_FieldTerminalPath{selector: PolicySpec_FieldPathSelectorSupportingQueries})
	}
	{
		subMask := o.GetAiAgent().MakeDiffFieldMask(other.GetAiAgent())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &PolicySpec_FieldTerminalPath{selector: PolicySpec_FieldPathSelectorAiAgent})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &PolicySpec_FieldSubPath{selector: PolicySpec_FieldPathSelectorAiAgent, subPath: subpath})
			}
		}
	}
	return res
}

func (o *PolicySpec) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*PolicySpec))
}

func (o *PolicySpec) Clone() *PolicySpec {
	if o == nil {
		return nil
	}
	result := &PolicySpec{}
	result.Enabled = o.Enabled
	result.ProcessingLocation = o.ProcessingLocation
	result.ResourceIdentity = o.ResourceIdentity.Clone()
	result.SupportingQueries = make([]*PolicySpec_SupportingAlertQuery, len(o.SupportingQueries))
	for i, sourceValue := range o.SupportingQueries {
		result.SupportingQueries[i] = sourceValue.Clone()
	}
	result.AiAgent = o.AiAgent.Clone()
	return result
}

func (o *PolicySpec) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *PolicySpec) Merge(source *PolicySpec) {
	o.Enabled = source.GetEnabled()
	o.ProcessingLocation = source.GetProcessingLocation()
	if source.GetResourceIdentity() != nil {
		if o.ResourceIdentity == nil {
			o.ResourceIdentity = new(PolicySpec_ResourceIdentity)
		}
		o.ResourceIdentity.Merge(source.GetResourceIdentity())
	}
	for _, sourceValue := range source.GetSupportingQueries() {
		exists := false
		for _, currentValue := range o.SupportingQueries {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *PolicySpec_SupportingAlertQuery
			if sourceValue != nil {
				newDstElement = new(PolicySpec_SupportingAlertQuery)
				newDstElement.Merge(sourceValue)
			}
			o.SupportingQueries = append(o.SupportingQueries, newDstElement)
		}
	}

	if source.GetAiAgent() != nil {
		if o.AiAgent == nil {
			o.AiAgent = new(PolicySpec_AIAgentHandling)
		}
		o.AiAgent.Merge(source.GetAiAgent())
	}
}

func (o *PolicySpec) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*PolicySpec))
}

func (o *PolicySpec_ResourceIdentity) GotenObjectExt() {}

func (o *PolicySpec_ResourceIdentity) MakeFullFieldMask() *PolicySpec_ResourceIdentity_FieldMask {
	return FullPolicySpec_ResourceIdentity_FieldMask()
}

func (o *PolicySpec_ResourceIdentity) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullPolicySpec_ResourceIdentity_FieldMask()
}

func (o *PolicySpec_ResourceIdentity) MakeDiffFieldMask(other *PolicySpec_ResourceIdentity) *PolicySpec_ResourceIdentity_FieldMask {
	if o == nil && other == nil {
		return &PolicySpec_ResourceIdentity_FieldMask{}
	}
	if o == nil || other == nil {
		return FullPolicySpec_ResourceIdentity_FieldMask()
	}

	res := &PolicySpec_ResourceIdentity_FieldMask{}
	if o.GetAlertingResource().String() != other.GetAlertingResource().String() {
		res.Paths = append(res.Paths, &PolicySpecResourceIdentity_FieldTerminalPath{selector: PolicySpecResourceIdentity_FieldPathSelectorAlertingResource})
	}

	if len(o.GetLabels()) == len(other.GetLabels()) {
		for i, lValue := range o.GetLabels() {
			rValue := other.GetLabels()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &PolicySpecResourceIdentity_FieldTerminalPath{selector: PolicySpecResourceIdentity_FieldPathSelectorLabels})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &PolicySpecResourceIdentity_FieldTerminalPath{selector: PolicySpecResourceIdentity_FieldPathSelectorLabels})
	}

	if len(o.GetNamePatterns()) == len(other.GetNamePatterns()) {
		for i, lValue := range o.GetNamePatterns() {
			rValue := other.GetNamePatterns()[i]
			if lValue != rValue {
				res.Paths = append(res.Paths, &PolicySpecResourceIdentity_FieldTerminalPath{selector: PolicySpecResourceIdentity_FieldPathSelectorNamePatterns})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &PolicySpecResourceIdentity_FieldTerminalPath{selector: PolicySpecResourceIdentity_FieldPathSelectorNamePatterns})
	}
	return res
}

func (o *PolicySpec_ResourceIdentity) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*PolicySpec_ResourceIdentity))
}

func (o *PolicySpec_ResourceIdentity) Clone() *PolicySpec_ResourceIdentity {
	if o == nil {
		return nil
	}
	result := &PolicySpec_ResourceIdentity{}
	if o.AlertingResource == nil {
		result.AlertingResource = nil
	} else if data, err := o.AlertingResource.ProtoString(); err != nil {
		panic(err)
	} else {
		result.AlertingResource = &meta_resource.Reference{}
		if err := result.AlertingResource.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Labels = make([]*PolicySpec_ResourceIdentity_LabelInfo, len(o.Labels))
	for i, sourceValue := range o.Labels {
		result.Labels[i] = sourceValue.Clone()
	}
	result.NamePatterns = make([]string, len(o.NamePatterns))
	for i, sourceValue := range o.NamePatterns {
		result.NamePatterns[i] = sourceValue
	}
	return result
}

func (o *PolicySpec_ResourceIdentity) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *PolicySpec_ResourceIdentity) Merge(source *PolicySpec_ResourceIdentity) {
	if source.GetAlertingResource() != nil {
		if data, err := source.GetAlertingResource().ProtoString(); err != nil {
			panic(err)
		} else {
			o.AlertingResource = &meta_resource.Reference{}
			if err := o.AlertingResource.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.AlertingResource = nil
	}
	for _, sourceValue := range source.GetLabels() {
		exists := false
		for _, currentValue := range o.Labels {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *PolicySpec_ResourceIdentity_LabelInfo
			if sourceValue != nil {
				newDstElement = new(PolicySpec_ResourceIdentity_LabelInfo)
				newDstElement.Merge(sourceValue)
			}
			o.Labels = append(o.Labels, newDstElement)
		}
	}

	for _, sourceValue := range source.GetNamePatterns() {
		exists := false
		for _, currentValue := range o.NamePatterns {
			if currentValue == sourceValue {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement string
			newDstElement = sourceValue
			o.NamePatterns = append(o.NamePatterns, newDstElement)
		}
	}

}

func (o *PolicySpec_ResourceIdentity) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*PolicySpec_ResourceIdentity))
}

func (o *PolicySpec_SupportingAlertQuery) GotenObjectExt() {}

func (o *PolicySpec_SupportingAlertQuery) MakeFullFieldMask() *PolicySpec_SupportingAlertQuery_FieldMask {
	return FullPolicySpec_SupportingAlertQuery_FieldMask()
}

func (o *PolicySpec_SupportingAlertQuery) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullPolicySpec_SupportingAlertQuery_FieldMask()
}

func (o *PolicySpec_SupportingAlertQuery) MakeDiffFieldMask(other *PolicySpec_SupportingAlertQuery) *PolicySpec_SupportingAlertQuery_FieldMask {
	if o == nil && other == nil {
		return &PolicySpec_SupportingAlertQuery_FieldMask{}
	}
	if o == nil || other == nil {
		return FullPolicySpec_SupportingAlertQuery_FieldMask()
	}

	res := &PolicySpec_SupportingAlertQuery_FieldMask{}
	{
		_, leftSelected := o.Query.(*PolicySpec_SupportingAlertQuery_TsQuery_)
		_, rightSelected := other.Query.(*PolicySpec_SupportingAlertQuery_TsQuery_)
		if leftSelected == rightSelected {
			subMask := o.GetTsQuery().MakeDiffFieldMask(other.GetTsQuery())
			if subMask.IsFull() {
				res.Paths = append(res.Paths, &PolicySpecSupportingAlertQuery_FieldTerminalPath{selector: PolicySpecSupportingAlertQuery_FieldPathSelectorTsQuery})
			} else {
				for _, subpath := range subMask.Paths {
					res.Paths = append(res.Paths, &PolicySpecSupportingAlertQuery_FieldSubPath{selector: PolicySpecSupportingAlertQuery_FieldPathSelectorTsQuery, subPath: subpath})
				}
			}
		} else {
			res.Paths = append(res.Paths, &PolicySpecSupportingAlertQuery_FieldTerminalPath{selector: PolicySpecSupportingAlertQuery_FieldPathSelectorTsQuery})
		}
	}
	{
		_, leftSelected := o.Query.(*PolicySpec_SupportingAlertQuery_LogQuery_)
		_, rightSelected := other.Query.(*PolicySpec_SupportingAlertQuery_LogQuery_)
		if leftSelected == rightSelected {
			subMask := o.GetLogQuery().MakeDiffFieldMask(other.GetLogQuery())
			if subMask.IsFull() {
				res.Paths = append(res.Paths, &PolicySpecSupportingAlertQuery_FieldTerminalPath{selector: PolicySpecSupportingAlertQuery_FieldPathSelectorLogQuery})
			} else {
				for _, subpath := range subMask.Paths {
					res.Paths = append(res.Paths, &PolicySpecSupportingAlertQuery_FieldSubPath{selector: PolicySpecSupportingAlertQuery_FieldPathSelectorLogQuery, subPath: subpath})
				}
			}
		} else {
			res.Paths = append(res.Paths, &PolicySpecSupportingAlertQuery_FieldTerminalPath{selector: PolicySpecSupportingAlertQuery_FieldPathSelectorLogQuery})
		}
	}
	{
		_, leftSelected := o.Query.(*PolicySpec_SupportingAlertQuery_RestGetQuery_)
		_, rightSelected := other.Query.(*PolicySpec_SupportingAlertQuery_RestGetQuery_)
		if leftSelected == rightSelected {
			subMask := o.GetRestGetQuery().MakeDiffFieldMask(other.GetRestGetQuery())
			if subMask.IsFull() {
				res.Paths = append(res.Paths, &PolicySpecSupportingAlertQuery_FieldTerminalPath{selector: PolicySpecSupportingAlertQuery_FieldPathSelectorRestGetQuery})
			} else {
				for _, subpath := range subMask.Paths {
					res.Paths = append(res.Paths, &PolicySpecSupportingAlertQuery_FieldSubPath{selector: PolicySpecSupportingAlertQuery_FieldPathSelectorRestGetQuery, subPath: subpath})
				}
			}
		} else {
			res.Paths = append(res.Paths, &PolicySpecSupportingAlertQuery_FieldTerminalPath{selector: PolicySpecSupportingAlertQuery_FieldPathSelectorRestGetQuery})
		}
	}
	{
		_, leftSelected := o.Query.(*PolicySpec_SupportingAlertQuery_RestListQuery_)
		_, rightSelected := other.Query.(*PolicySpec_SupportingAlertQuery_RestListQuery_)
		if leftSelected == rightSelected {
			subMask := o.GetRestListQuery().MakeDiffFieldMask(other.GetRestListQuery())
			if subMask.IsFull() {
				res.Paths = append(res.Paths, &PolicySpecSupportingAlertQuery_FieldTerminalPath{selector: PolicySpecSupportingAlertQuery_FieldPathSelectorRestListQuery})
			} else {
				for _, subpath := range subMask.Paths {
					res.Paths = append(res.Paths, &PolicySpecSupportingAlertQuery_FieldSubPath{selector: PolicySpecSupportingAlertQuery_FieldPathSelectorRestListQuery, subPath: subpath})
				}
			}
		} else {
			res.Paths = append(res.Paths, &PolicySpecSupportingAlertQuery_FieldTerminalPath{selector: PolicySpecSupportingAlertQuery_FieldPathSelectorRestListQuery})
		}
	}
	return res
}

func (o *PolicySpec_SupportingAlertQuery) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*PolicySpec_SupportingAlertQuery))
}

func (o *PolicySpec_SupportingAlertQuery) Clone() *PolicySpec_SupportingAlertQuery {
	if o == nil {
		return nil
	}
	result := &PolicySpec_SupportingAlertQuery{}
	if o, ok := o.Query.(*PolicySpec_SupportingAlertQuery_TsQuery_); ok {
		result.Query = (*PolicySpec_SupportingAlertQuery_TsQuery_)(nil)
		if o != nil {
			result.Query = &PolicySpec_SupportingAlertQuery_TsQuery_{}
			result := result.Query.(*PolicySpec_SupportingAlertQuery_TsQuery_)
			result.TsQuery = o.TsQuery.Clone()
		}
	}
	if o, ok := o.Query.(*PolicySpec_SupportingAlertQuery_LogQuery_); ok {
		result.Query = (*PolicySpec_SupportingAlertQuery_LogQuery_)(nil)
		if o != nil {
			result.Query = &PolicySpec_SupportingAlertQuery_LogQuery_{}
			result := result.Query.(*PolicySpec_SupportingAlertQuery_LogQuery_)
			result.LogQuery = o.LogQuery.Clone()
		}
	}
	if o, ok := o.Query.(*PolicySpec_SupportingAlertQuery_RestGetQuery_); ok {
		result.Query = (*PolicySpec_SupportingAlertQuery_RestGetQuery_)(nil)
		if o != nil {
			result.Query = &PolicySpec_SupportingAlertQuery_RestGetQuery_{}
			result := result.Query.(*PolicySpec_SupportingAlertQuery_RestGetQuery_)
			result.RestGetQuery = o.RestGetQuery.Clone()
		}
	}
	if o, ok := o.Query.(*PolicySpec_SupportingAlertQuery_RestListQuery_); ok {
		result.Query = (*PolicySpec_SupportingAlertQuery_RestListQuery_)(nil)
		if o != nil {
			result.Query = &PolicySpec_SupportingAlertQuery_RestListQuery_{}
			result := result.Query.(*PolicySpec_SupportingAlertQuery_RestListQuery_)
			result.RestListQuery = o.RestListQuery.Clone()
		}
	}
	return result
}

func (o *PolicySpec_SupportingAlertQuery) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *PolicySpec_SupportingAlertQuery) Merge(source *PolicySpec_SupportingAlertQuery) {
	if source, ok := source.GetQuery().(*PolicySpec_SupportingAlertQuery_TsQuery_); ok {
		if dstOneOf, ok := o.Query.(*PolicySpec_SupportingAlertQuery_TsQuery_); !ok || dstOneOf == nil {
			o.Query = &PolicySpec_SupportingAlertQuery_TsQuery_{}
		}
		if source != nil {
			o := o.Query.(*PolicySpec_SupportingAlertQuery_TsQuery_)
			if source.TsQuery != nil {
				if o.TsQuery == nil {
					o.TsQuery = new(PolicySpec_SupportingAlertQuery_TsQuery)
				}
				o.TsQuery.Merge(source.TsQuery)
			}
		}
	}
	if source, ok := source.GetQuery().(*PolicySpec_SupportingAlertQuery_LogQuery_); ok {
		if dstOneOf, ok := o.Query.(*PolicySpec_SupportingAlertQuery_LogQuery_); !ok || dstOneOf == nil {
			o.Query = &PolicySpec_SupportingAlertQuery_LogQuery_{}
		}
		if source != nil {
			o := o.Query.(*PolicySpec_SupportingAlertQuery_LogQuery_)
			if source.LogQuery != nil {
				if o.LogQuery == nil {
					o.LogQuery = new(PolicySpec_SupportingAlertQuery_LogQuery)
				}
				o.LogQuery.Merge(source.LogQuery)
			}
		}
	}
	if source, ok := source.GetQuery().(*PolicySpec_SupportingAlertQuery_RestGetQuery_); ok {
		if dstOneOf, ok := o.Query.(*PolicySpec_SupportingAlertQuery_RestGetQuery_); !ok || dstOneOf == nil {
			o.Query = &PolicySpec_SupportingAlertQuery_RestGetQuery_{}
		}
		if source != nil {
			o := o.Query.(*PolicySpec_SupportingAlertQuery_RestGetQuery_)
			if source.RestGetQuery != nil {
				if o.RestGetQuery == nil {
					o.RestGetQuery = new(PolicySpec_SupportingAlertQuery_RestGetQuery)
				}
				o.RestGetQuery.Merge(source.RestGetQuery)
			}
		}
	}
	if source, ok := source.GetQuery().(*PolicySpec_SupportingAlertQuery_RestListQuery_); ok {
		if dstOneOf, ok := o.Query.(*PolicySpec_SupportingAlertQuery_RestListQuery_); !ok || dstOneOf == nil {
			o.Query = &PolicySpec_SupportingAlertQuery_RestListQuery_{}
		}
		if source != nil {
			o := o.Query.(*PolicySpec_SupportingAlertQuery_RestListQuery_)
			if source.RestListQuery != nil {
				if o.RestListQuery == nil {
					o.RestListQuery = new(PolicySpec_SupportingAlertQuery_RestListQuery)
				}
				o.RestListQuery.Merge(source.RestListQuery)
			}
		}
	}
}

func (o *PolicySpec_SupportingAlertQuery) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*PolicySpec_SupportingAlertQuery))
}

func (o *PolicySpec_AIAgentHandling) GotenObjectExt() {}

func (o *PolicySpec_AIAgentHandling) MakeFullFieldMask() *PolicySpec_AIAgentHandling_FieldMask {
	return FullPolicySpec_AIAgentHandling_FieldMask()
}

func (o *PolicySpec_AIAgentHandling) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullPolicySpec_AIAgentHandling_FieldMask()
}

func (o *PolicySpec_AIAgentHandling) MakeDiffFieldMask(other *PolicySpec_AIAgentHandling) *PolicySpec_AIAgentHandling_FieldMask {
	if o == nil && other == nil {
		return &PolicySpec_AIAgentHandling_FieldMask{}
	}
	if o == nil || other == nil {
		return FullPolicySpec_AIAgentHandling_FieldMask()
	}

	res := &PolicySpec_AIAgentHandling_FieldMask{}
	if o.GetEnabled() != other.GetEnabled() {
		res.Paths = append(res.Paths, &PolicySpecAIAgentHandling_FieldTerminalPath{selector: PolicySpecAIAgentHandling_FieldPathSelectorEnabled})
	}
	if o.GetEnabledConnectivity() != other.GetEnabledConnectivity() {
		res.Paths = append(res.Paths, &PolicySpecAIAgentHandling_FieldTerminalPath{selector: PolicySpecAIAgentHandling_FieldPathSelectorEnabledConnectivity})
	}
	if o.GetAutoAcceptRemediation() != other.GetAutoAcceptRemediation() {
		res.Paths = append(res.Paths, &PolicySpecAIAgentHandling_FieldTerminalPath{selector: PolicySpecAIAgentHandling_FieldPathSelectorAutoAcceptRemediation})
	}
	{
		subMask := o.GetEdgeConnectivity().MakeDiffFieldMask(other.GetEdgeConnectivity())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &PolicySpecAIAgentHandling_FieldTerminalPath{selector: PolicySpecAIAgentHandling_FieldPathSelectorEdgeConnectivity})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &PolicySpecAIAgentHandling_FieldSubPath{selector: PolicySpecAIAgentHandling_FieldPathSelectorEdgeConnectivity, subPath: subpath})
			}
		}
	}

	if len(o.GetRemediationOptions()) == len(other.GetRemediationOptions()) {
		for i, lValue := range o.GetRemediationOptions() {
			rValue := other.GetRemediationOptions()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &PolicySpecAIAgentHandling_FieldTerminalPath{selector: PolicySpecAIAgentHandling_FieldPathSelectorRemediationOptions})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &PolicySpecAIAgentHandling_FieldTerminalPath{selector: PolicySpecAIAgentHandling_FieldPathSelectorRemediationOptions})
	}
	return res
}

func (o *PolicySpec_AIAgentHandling) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*PolicySpec_AIAgentHandling))
}

func (o *PolicySpec_AIAgentHandling) Clone() *PolicySpec_AIAgentHandling {
	if o == nil {
		return nil
	}
	result := &PolicySpec_AIAgentHandling{}
	result.Enabled = o.Enabled
	result.EnabledConnectivity = o.EnabledConnectivity
	result.AutoAcceptRemediation = o.AutoAcceptRemediation
	result.EdgeConnectivity = o.EdgeConnectivity.Clone()
	result.RemediationOptions = make([]*PolicySpec_AIAgentHandling_Remediation, len(o.RemediationOptions))
	for i, sourceValue := range o.RemediationOptions {
		result.RemediationOptions[i] = sourceValue.Clone()
	}
	return result
}

func (o *PolicySpec_AIAgentHandling) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *PolicySpec_AIAgentHandling) Merge(source *PolicySpec_AIAgentHandling) {
	o.Enabled = source.GetEnabled()
	o.EnabledConnectivity = source.GetEnabledConnectivity()
	o.AutoAcceptRemediation = source.GetAutoAcceptRemediation()
	if source.GetEdgeConnectivity() != nil {
		if o.EdgeConnectivity == nil {
			o.EdgeConnectivity = new(PolicySpec_AIAgentHandling_EdgeConnectivity)
		}
		o.EdgeConnectivity.Merge(source.GetEdgeConnectivity())
	}
	for _, sourceValue := range source.GetRemediationOptions() {
		exists := false
		for _, currentValue := range o.RemediationOptions {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *PolicySpec_AIAgentHandling_Remediation
			if sourceValue != nil {
				newDstElement = new(PolicySpec_AIAgentHandling_Remediation)
				newDstElement.Merge(sourceValue)
			}
			o.RemediationOptions = append(o.RemediationOptions, newDstElement)
		}
	}

}

func (o *PolicySpec_AIAgentHandling) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*PolicySpec_AIAgentHandling))
}

func (o *PolicySpec_ResourceIdentity_LabelInfo) GotenObjectExt() {}

func (o *PolicySpec_ResourceIdentity_LabelInfo) MakeFullFieldMask() *PolicySpec_ResourceIdentity_LabelInfo_FieldMask {
	return FullPolicySpec_ResourceIdentity_LabelInfo_FieldMask()
}

func (o *PolicySpec_ResourceIdentity_LabelInfo) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullPolicySpec_ResourceIdentity_LabelInfo_FieldMask()
}

func (o *PolicySpec_ResourceIdentity_LabelInfo) MakeDiffFieldMask(other *PolicySpec_ResourceIdentity_LabelInfo) *PolicySpec_ResourceIdentity_LabelInfo_FieldMask {
	if o == nil && other == nil {
		return &PolicySpec_ResourceIdentity_LabelInfo_FieldMask{}
	}
	if o == nil || other == nil {
		return FullPolicySpec_ResourceIdentity_LabelInfo_FieldMask()
	}

	res := &PolicySpec_ResourceIdentity_LabelInfo_FieldMask{}
	if o.GetKey() != other.GetKey() {
		res.Paths = append(res.Paths, &PolicySpecResourceIdentityLabelInfo_FieldTerminalPath{selector: PolicySpecResourceIdentityLabelInfo_FieldPathSelectorKey})
	}

	if len(o.GetContexts()) == len(other.GetContexts()) {
		for i, lValue := range o.GetContexts() {
			rValue := other.GetContexts()[i]
			if lValue != rValue {
				res.Paths = append(res.Paths, &PolicySpecResourceIdentityLabelInfo_FieldTerminalPath{selector: PolicySpecResourceIdentityLabelInfo_FieldPathSelectorContexts})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &PolicySpecResourceIdentityLabelInfo_FieldTerminalPath{selector: PolicySpecResourceIdentityLabelInfo_FieldPathSelectorContexts})
	}
	if o.GetMappedNameSegment() != other.GetMappedNameSegment() {
		res.Paths = append(res.Paths, &PolicySpecResourceIdentityLabelInfo_FieldTerminalPath{selector: PolicySpecResourceIdentityLabelInfo_FieldPathSelectorMappedNameSegment})
	}
	return res
}

func (o *PolicySpec_ResourceIdentity_LabelInfo) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*PolicySpec_ResourceIdentity_LabelInfo))
}

func (o *PolicySpec_ResourceIdentity_LabelInfo) Clone() *PolicySpec_ResourceIdentity_LabelInfo {
	if o == nil {
		return nil
	}
	result := &PolicySpec_ResourceIdentity_LabelInfo{}
	result.Key = o.Key
	result.Contexts = make([]PolicySpec_ResourceIdentity_LabelInfo_UsageContext, len(o.Contexts))
	for i, sourceValue := range o.Contexts {
		result.Contexts[i] = sourceValue
	}
	result.MappedNameSegment = o.MappedNameSegment
	return result
}

func (o *PolicySpec_ResourceIdentity_LabelInfo) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *PolicySpec_ResourceIdentity_LabelInfo) Merge(source *PolicySpec_ResourceIdentity_LabelInfo) {
	o.Key = source.GetKey()
	for _, sourceValue := range source.GetContexts() {
		exists := false
		for _, currentValue := range o.Contexts {
			if currentValue == sourceValue {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement PolicySpec_ResourceIdentity_LabelInfo_UsageContext
			newDstElement = sourceValue
			o.Contexts = append(o.Contexts, newDstElement)
		}
	}

	o.MappedNameSegment = source.GetMappedNameSegment()
}

func (o *PolicySpec_ResourceIdentity_LabelInfo) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*PolicySpec_ResourceIdentity_LabelInfo))
}

func (o *PolicySpec_SupportingAlertQuery_TsQuery) GotenObjectExt() {}

func (o *PolicySpec_SupportingAlertQuery_TsQuery) MakeFullFieldMask() *PolicySpec_SupportingAlertQuery_TsQuery_FieldMask {
	return FullPolicySpec_SupportingAlertQuery_TsQuery_FieldMask()
}

func (o *PolicySpec_SupportingAlertQuery_TsQuery) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullPolicySpec_SupportingAlertQuery_TsQuery_FieldMask()
}

func (o *PolicySpec_SupportingAlertQuery_TsQuery) MakeDiffFieldMask(other *PolicySpec_SupportingAlertQuery_TsQuery) *PolicySpec_SupportingAlertQuery_TsQuery_FieldMask {
	if o == nil && other == nil {
		return &PolicySpec_SupportingAlertQuery_TsQuery_FieldMask{}
	}
	if o == nil || other == nil {
		return FullPolicySpec_SupportingAlertQuery_TsQuery_FieldMask()
	}

	res := &PolicySpec_SupportingAlertQuery_TsQuery_FieldMask{}
	if o.GetDescription() != other.GetDescription() {
		res.Paths = append(res.Paths, &PolicySpecSupportingAlertQueryTsQuery_FieldTerminalPath{selector: PolicySpecSupportingAlertQueryTsQuery_FieldPathSelectorDescription})
	}
	if o.GetFilterTemplate() != other.GetFilterTemplate() {
		res.Paths = append(res.Paths, &PolicySpecSupportingAlertQueryTsQuery_FieldTerminalPath{selector: PolicySpecSupportingAlertQueryTsQuery_FieldPathSelectorFilterTemplate})
	}
	{
		subMask := o.GetAggregation().MakeDiffFieldMask(other.GetAggregation())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &PolicySpecSupportingAlertQueryTsQuery_FieldTerminalPath{selector: PolicySpecSupportingAlertQueryTsQuery_FieldPathSelectorAggregation})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &PolicySpecSupportingAlertQueryTsQuery_FieldSubPath{selector: PolicySpecSupportingAlertQueryTsQuery_FieldPathSelectorAggregation, subPath: subpath})
			}
		}
	}
	return res
}

func (o *PolicySpec_SupportingAlertQuery_TsQuery) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*PolicySpec_SupportingAlertQuery_TsQuery))
}

func (o *PolicySpec_SupportingAlertQuery_TsQuery) Clone() *PolicySpec_SupportingAlertQuery_TsQuery {
	if o == nil {
		return nil
	}
	result := &PolicySpec_SupportingAlertQuery_TsQuery{}
	result.Description = o.Description
	result.FilterTemplate = o.FilterTemplate
	result.Aggregation = o.Aggregation.Clone()
	return result
}

func (o *PolicySpec_SupportingAlertQuery_TsQuery) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *PolicySpec_SupportingAlertQuery_TsQuery) Merge(source *PolicySpec_SupportingAlertQuery_TsQuery) {
	o.Description = source.GetDescription()
	o.FilterTemplate = source.GetFilterTemplate()
	if source.GetAggregation() != nil {
		if o.Aggregation == nil {
			o.Aggregation = new(monitoring_common.Aggregation)
		}
		o.Aggregation.Merge(source.GetAggregation())
	}
}

func (o *PolicySpec_SupportingAlertQuery_TsQuery) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*PolicySpec_SupportingAlertQuery_TsQuery))
}

func (o *PolicySpec_SupportingAlertQuery_LogQuery) GotenObjectExt() {}

func (o *PolicySpec_SupportingAlertQuery_LogQuery) MakeFullFieldMask() *PolicySpec_SupportingAlertQuery_LogQuery_FieldMask {
	return FullPolicySpec_SupportingAlertQuery_LogQuery_FieldMask()
}

func (o *PolicySpec_SupportingAlertQuery_LogQuery) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullPolicySpec_SupportingAlertQuery_LogQuery_FieldMask()
}

func (o *PolicySpec_SupportingAlertQuery_LogQuery) MakeDiffFieldMask(other *PolicySpec_SupportingAlertQuery_LogQuery) *PolicySpec_SupportingAlertQuery_LogQuery_FieldMask {
	if o == nil && other == nil {
		return &PolicySpec_SupportingAlertQuery_LogQuery_FieldMask{}
	}
	if o == nil || other == nil {
		return FullPolicySpec_SupportingAlertQuery_LogQuery_FieldMask()
	}

	res := &PolicySpec_SupportingAlertQuery_LogQuery_FieldMask{}
	if o.GetDescription() != other.GetDescription() {
		res.Paths = append(res.Paths, &PolicySpecSupportingAlertQueryLogQuery_FieldTerminalPath{selector: PolicySpecSupportingAlertQueryLogQuery_FieldPathSelectorDescription})
	}
	if o.GetFilterTemplate() != other.GetFilterTemplate() {
		res.Paths = append(res.Paths, &PolicySpecSupportingAlertQueryLogQuery_FieldTerminalPath{selector: PolicySpecSupportingAlertQueryLogQuery_FieldPathSelectorFilterTemplate})
	}
	return res
}

func (o *PolicySpec_SupportingAlertQuery_LogQuery) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*PolicySpec_SupportingAlertQuery_LogQuery))
}

func (o *PolicySpec_SupportingAlertQuery_LogQuery) Clone() *PolicySpec_SupportingAlertQuery_LogQuery {
	if o == nil {
		return nil
	}
	result := &PolicySpec_SupportingAlertQuery_LogQuery{}
	result.Description = o.Description
	result.FilterTemplate = o.FilterTemplate
	return result
}

func (o *PolicySpec_SupportingAlertQuery_LogQuery) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *PolicySpec_SupportingAlertQuery_LogQuery) Merge(source *PolicySpec_SupportingAlertQuery_LogQuery) {
	o.Description = source.GetDescription()
	o.FilterTemplate = source.GetFilterTemplate()
}

func (o *PolicySpec_SupportingAlertQuery_LogQuery) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*PolicySpec_SupportingAlertQuery_LogQuery))
}

func (o *PolicySpec_SupportingAlertQuery_RestGetQuery) GotenObjectExt() {}

func (o *PolicySpec_SupportingAlertQuery_RestGetQuery) MakeFullFieldMask() *PolicySpec_SupportingAlertQuery_RestGetQuery_FieldMask {
	return FullPolicySpec_SupportingAlertQuery_RestGetQuery_FieldMask()
}

func (o *PolicySpec_SupportingAlertQuery_RestGetQuery) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullPolicySpec_SupportingAlertQuery_RestGetQuery_FieldMask()
}

func (o *PolicySpec_SupportingAlertQuery_RestGetQuery) MakeDiffFieldMask(other *PolicySpec_SupportingAlertQuery_RestGetQuery) *PolicySpec_SupportingAlertQuery_RestGetQuery_FieldMask {
	if o == nil && other == nil {
		return &PolicySpec_SupportingAlertQuery_RestGetQuery_FieldMask{}
	}
	if o == nil || other == nil {
		return FullPolicySpec_SupportingAlertQuery_RestGetQuery_FieldMask()
	}

	res := &PolicySpec_SupportingAlertQuery_RestGetQuery_FieldMask{}
	if o.GetDescription() != other.GetDescription() {
		res.Paths = append(res.Paths, &PolicySpecSupportingAlertQueryRestGetQuery_FieldTerminalPath{selector: PolicySpecSupportingAlertQueryRestGetQuery_FieldPathSelectorDescription})
	}
	if o.GetEndpoint() != other.GetEndpoint() {
		res.Paths = append(res.Paths, &PolicySpecSupportingAlertQueryRestGetQuery_FieldTerminalPath{selector: PolicySpecSupportingAlertQueryRestGetQuery_FieldPathSelectorEndpoint})
	}
	if o.GetPathTemplate() != other.GetPathTemplate() {
		res.Paths = append(res.Paths, &PolicySpecSupportingAlertQueryRestGetQuery_FieldTerminalPath{selector: PolicySpecSupportingAlertQueryRestGetQuery_FieldPathSelectorPathTemplate})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &PolicySpecSupportingAlertQueryRestGetQuery_FieldTerminalPath{selector: PolicySpecSupportingAlertQueryRestGetQuery_FieldPathSelectorView})
	}
	if o.GetFieldMask() != other.GetFieldMask() {
		res.Paths = append(res.Paths, &PolicySpecSupportingAlertQueryRestGetQuery_FieldTerminalPath{selector: PolicySpecSupportingAlertQueryRestGetQuery_FieldPathSelectorFieldMask})
	}
	return res
}

func (o *PolicySpec_SupportingAlertQuery_RestGetQuery) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*PolicySpec_SupportingAlertQuery_RestGetQuery))
}

func (o *PolicySpec_SupportingAlertQuery_RestGetQuery) Clone() *PolicySpec_SupportingAlertQuery_RestGetQuery {
	if o == nil {
		return nil
	}
	result := &PolicySpec_SupportingAlertQuery_RestGetQuery{}
	result.Description = o.Description
	result.Endpoint = o.Endpoint
	result.PathTemplate = o.PathTemplate
	result.View = o.View
	result.FieldMask = o.FieldMask
	return result
}

func (o *PolicySpec_SupportingAlertQuery_RestGetQuery) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *PolicySpec_SupportingAlertQuery_RestGetQuery) Merge(source *PolicySpec_SupportingAlertQuery_RestGetQuery) {
	o.Description = source.GetDescription()
	o.Endpoint = source.GetEndpoint()
	o.PathTemplate = source.GetPathTemplate()
	o.View = source.GetView()
	o.FieldMask = source.GetFieldMask()
}

func (o *PolicySpec_SupportingAlertQuery_RestGetQuery) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*PolicySpec_SupportingAlertQuery_RestGetQuery))
}

func (o *PolicySpec_SupportingAlertQuery_RestListQuery) GotenObjectExt() {}

func (o *PolicySpec_SupportingAlertQuery_RestListQuery) MakeFullFieldMask() *PolicySpec_SupportingAlertQuery_RestListQuery_FieldMask {
	return FullPolicySpec_SupportingAlertQuery_RestListQuery_FieldMask()
}

func (o *PolicySpec_SupportingAlertQuery_RestListQuery) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullPolicySpec_SupportingAlertQuery_RestListQuery_FieldMask()
}

func (o *PolicySpec_SupportingAlertQuery_RestListQuery) MakeDiffFieldMask(other *PolicySpec_SupportingAlertQuery_RestListQuery) *PolicySpec_SupportingAlertQuery_RestListQuery_FieldMask {
	if o == nil && other == nil {
		return &PolicySpec_SupportingAlertQuery_RestListQuery_FieldMask{}
	}
	if o == nil || other == nil {
		return FullPolicySpec_SupportingAlertQuery_RestListQuery_FieldMask()
	}

	res := &PolicySpec_SupportingAlertQuery_RestListQuery_FieldMask{}
	if o.GetDescription() != other.GetDescription() {
		res.Paths = append(res.Paths, &PolicySpecSupportingAlertQueryRestListQuery_FieldTerminalPath{selector: PolicySpecSupportingAlertQueryRestListQuery_FieldPathSelectorDescription})
	}
	if o.GetEndpoint() != other.GetEndpoint() {
		res.Paths = append(res.Paths, &PolicySpecSupportingAlertQueryRestListQuery_FieldTerminalPath{selector: PolicySpecSupportingAlertQueryRestListQuery_FieldPathSelectorEndpoint})
	}
	if o.GetPathTemplate() != other.GetPathTemplate() {
		res.Paths = append(res.Paths, &PolicySpecSupportingAlertQueryRestListQuery_FieldTerminalPath{selector: PolicySpecSupportingAlertQueryRestListQuery_FieldPathSelectorPathTemplate})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &PolicySpecSupportingAlertQueryRestListQuery_FieldTerminalPath{selector: PolicySpecSupportingAlertQueryRestListQuery_FieldPathSelectorView})
	}
	if o.GetFieldMask() != other.GetFieldMask() {
		res.Paths = append(res.Paths, &PolicySpecSupportingAlertQueryRestListQuery_FieldTerminalPath{selector: PolicySpecSupportingAlertQueryRestListQuery_FieldPathSelectorFieldMask})
	}
	if o.GetFilterTemplate() != other.GetFilterTemplate() {
		res.Paths = append(res.Paths, &PolicySpecSupportingAlertQueryRestListQuery_FieldTerminalPath{selector: PolicySpecSupportingAlertQueryRestListQuery_FieldPathSelectorFilterTemplate})
	}
	return res
}

func (o *PolicySpec_SupportingAlertQuery_RestListQuery) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*PolicySpec_SupportingAlertQuery_RestListQuery))
}

func (o *PolicySpec_SupportingAlertQuery_RestListQuery) Clone() *PolicySpec_SupportingAlertQuery_RestListQuery {
	if o == nil {
		return nil
	}
	result := &PolicySpec_SupportingAlertQuery_RestListQuery{}
	result.Description = o.Description
	result.Endpoint = o.Endpoint
	result.PathTemplate = o.PathTemplate
	result.View = o.View
	result.FieldMask = o.FieldMask
	result.FilterTemplate = o.FilterTemplate
	return result
}

func (o *PolicySpec_SupportingAlertQuery_RestListQuery) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *PolicySpec_SupportingAlertQuery_RestListQuery) Merge(source *PolicySpec_SupportingAlertQuery_RestListQuery) {
	o.Description = source.GetDescription()
	o.Endpoint = source.GetEndpoint()
	o.PathTemplate = source.GetPathTemplate()
	o.View = source.GetView()
	o.FieldMask = source.GetFieldMask()
	o.FilterTemplate = source.GetFilterTemplate()
}

func (o *PolicySpec_SupportingAlertQuery_RestListQuery) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*PolicySpec_SupportingAlertQuery_RestListQuery))
}

func (o *PolicySpec_AIAgentHandling_EdgeConnectivity) GotenObjectExt() {}

func (o *PolicySpec_AIAgentHandling_EdgeConnectivity) MakeFullFieldMask() *PolicySpec_AIAgentHandling_EdgeConnectivity_FieldMask {
	return FullPolicySpec_AIAgentHandling_EdgeConnectivity_FieldMask()
}

func (o *PolicySpec_AIAgentHandling_EdgeConnectivity) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullPolicySpec_AIAgentHandling_EdgeConnectivity_FieldMask()
}

func (o *PolicySpec_AIAgentHandling_EdgeConnectivity) MakeDiffFieldMask(other *PolicySpec_AIAgentHandling_EdgeConnectivity) *PolicySpec_AIAgentHandling_EdgeConnectivity_FieldMask {
	if o == nil && other == nil {
		return &PolicySpec_AIAgentHandling_EdgeConnectivity_FieldMask{}
	}
	if o == nil || other == nil {
		return FullPolicySpec_AIAgentHandling_EdgeConnectivity_FieldMask()
	}

	res := &PolicySpec_AIAgentHandling_EdgeConnectivity_FieldMask{}
	{
		_, leftSelected := o.Type.(*PolicySpec_AIAgentHandling_EdgeConnectivity_DeviceSsh)
		_, rightSelected := other.Type.(*PolicySpec_AIAgentHandling_EdgeConnectivity_DeviceSsh)
		if leftSelected == rightSelected {
			subMask := o.GetDeviceSsh().MakeDiffFieldMask(other.GetDeviceSsh())
			if subMask.IsFull() {
				res.Paths = append(res.Paths, &PolicySpecAIAgentHandlingEdgeConnectivity_FieldTerminalPath{selector: PolicySpecAIAgentHandlingEdgeConnectivity_FieldPathSelectorDeviceSsh})
			} else {
				for _, subpath := range subMask.Paths {
					res.Paths = append(res.Paths, &PolicySpecAIAgentHandlingEdgeConnectivity_FieldSubPath{selector: PolicySpecAIAgentHandlingEdgeConnectivity_FieldPathSelectorDeviceSsh, subPath: subpath})
				}
			}
		} else {
			res.Paths = append(res.Paths, &PolicySpecAIAgentHandlingEdgeConnectivity_FieldTerminalPath{selector: PolicySpecAIAgentHandlingEdgeConnectivity_FieldPathSelectorDeviceSsh})
		}
	}
	{
		_, leftSelected := o.Type.(*PolicySpec_AIAgentHandling_EdgeConnectivity_ProxiesSsh)
		_, rightSelected := other.Type.(*PolicySpec_AIAgentHandling_EdgeConnectivity_ProxiesSsh)
		if leftSelected == rightSelected {
			subMask := o.GetProxiesSsh().MakeDiffFieldMask(other.GetProxiesSsh())
			if subMask.IsFull() {
				res.Paths = append(res.Paths, &PolicySpecAIAgentHandlingEdgeConnectivity_FieldTerminalPath{selector: PolicySpecAIAgentHandlingEdgeConnectivity_FieldPathSelectorProxiesSsh})
			} else {
				for _, subpath := range subMask.Paths {
					res.Paths = append(res.Paths, &PolicySpecAIAgentHandlingEdgeConnectivity_FieldSubPath{selector: PolicySpecAIAgentHandlingEdgeConnectivity_FieldPathSelectorProxiesSsh, subPath: subpath})
				}
			}
		} else {
			res.Paths = append(res.Paths, &PolicySpecAIAgentHandlingEdgeConnectivity_FieldTerminalPath{selector: PolicySpecAIAgentHandlingEdgeConnectivity_FieldPathSelectorProxiesSsh})
		}
	}
	{
		_, leftSelected := o.Type.(*PolicySpec_AIAgentHandling_EdgeConnectivity_PodSsh)
		_, rightSelected := other.Type.(*PolicySpec_AIAgentHandling_EdgeConnectivity_PodSsh)
		if leftSelected == rightSelected {
			subMask := o.GetPodSsh().MakeDiffFieldMask(other.GetPodSsh())
			if subMask.IsFull() {
				res.Paths = append(res.Paths, &PolicySpecAIAgentHandlingEdgeConnectivity_FieldTerminalPath{selector: PolicySpecAIAgentHandlingEdgeConnectivity_FieldPathSelectorPodSsh})
			} else {
				for _, subpath := range subMask.Paths {
					res.Paths = append(res.Paths, &PolicySpecAIAgentHandlingEdgeConnectivity_FieldSubPath{selector: PolicySpecAIAgentHandlingEdgeConnectivity_FieldPathSelectorPodSsh, subPath: subpath})
				}
			}
		} else {
			res.Paths = append(res.Paths, &PolicySpecAIAgentHandlingEdgeConnectivity_FieldTerminalPath{selector: PolicySpecAIAgentHandlingEdgeConnectivity_FieldPathSelectorPodSsh})
		}
	}

	if len(o.GetAllowedBins()) == len(other.GetAllowedBins()) {
		for i, lValue := range o.GetAllowedBins() {
			rValue := other.GetAllowedBins()[i]
			if lValue != rValue {
				res.Paths = append(res.Paths, &PolicySpecAIAgentHandlingEdgeConnectivity_FieldTerminalPath{selector: PolicySpecAIAgentHandlingEdgeConnectivity_FieldPathSelectorAllowedBins})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &PolicySpecAIAgentHandlingEdgeConnectivity_FieldTerminalPath{selector: PolicySpecAIAgentHandlingEdgeConnectivity_FieldPathSelectorAllowedBins})
	}
	return res
}

func (o *PolicySpec_AIAgentHandling_EdgeConnectivity) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*PolicySpec_AIAgentHandling_EdgeConnectivity))
}

func (o *PolicySpec_AIAgentHandling_EdgeConnectivity) Clone() *PolicySpec_AIAgentHandling_EdgeConnectivity {
	if o == nil {
		return nil
	}
	result := &PolicySpec_AIAgentHandling_EdgeConnectivity{}
	if o, ok := o.Type.(*PolicySpec_AIAgentHandling_EdgeConnectivity_DeviceSsh); ok {
		result.Type = (*PolicySpec_AIAgentHandling_EdgeConnectivity_DeviceSsh)(nil)
		if o != nil {
			result.Type = &PolicySpec_AIAgentHandling_EdgeConnectivity_DeviceSsh{}
			result := result.Type.(*PolicySpec_AIAgentHandling_EdgeConnectivity_DeviceSsh)
			result.DeviceSsh = o.DeviceSsh.Clone()
		}
	}
	if o, ok := o.Type.(*PolicySpec_AIAgentHandling_EdgeConnectivity_ProxiesSsh); ok {
		result.Type = (*PolicySpec_AIAgentHandling_EdgeConnectivity_ProxiesSsh)(nil)
		if o != nil {
			result.Type = &PolicySpec_AIAgentHandling_EdgeConnectivity_ProxiesSsh{}
			result := result.Type.(*PolicySpec_AIAgentHandling_EdgeConnectivity_ProxiesSsh)
			result.ProxiesSsh = o.ProxiesSsh.Clone()
		}
	}
	if o, ok := o.Type.(*PolicySpec_AIAgentHandling_EdgeConnectivity_PodSsh); ok {
		result.Type = (*PolicySpec_AIAgentHandling_EdgeConnectivity_PodSsh)(nil)
		if o != nil {
			result.Type = &PolicySpec_AIAgentHandling_EdgeConnectivity_PodSsh{}
			result := result.Type.(*PolicySpec_AIAgentHandling_EdgeConnectivity_PodSsh)
			result.PodSsh = o.PodSsh.Clone()
		}
	}
	result.AllowedBins = make([]string, len(o.AllowedBins))
	for i, sourceValue := range o.AllowedBins {
		result.AllowedBins[i] = sourceValue
	}
	return result
}

func (o *PolicySpec_AIAgentHandling_EdgeConnectivity) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *PolicySpec_AIAgentHandling_EdgeConnectivity) Merge(source *PolicySpec_AIAgentHandling_EdgeConnectivity) {
	if source, ok := source.GetType().(*PolicySpec_AIAgentHandling_EdgeConnectivity_DeviceSsh); ok {
		if dstOneOf, ok := o.Type.(*PolicySpec_AIAgentHandling_EdgeConnectivity_DeviceSsh); !ok || dstOneOf == nil {
			o.Type = &PolicySpec_AIAgentHandling_EdgeConnectivity_DeviceSsh{}
		}
		if source != nil {
			o := o.Type.(*PolicySpec_AIAgentHandling_EdgeConnectivity_DeviceSsh)
			if source.DeviceSsh != nil {
				if o.DeviceSsh == nil {
					o.DeviceSsh = new(PolicySpec_AIAgentHandling_EdgeConnectivity_DeviceSSH)
				}
				o.DeviceSsh.Merge(source.DeviceSsh)
			}
		}
	}
	if source, ok := source.GetType().(*PolicySpec_AIAgentHandling_EdgeConnectivity_ProxiesSsh); ok {
		if dstOneOf, ok := o.Type.(*PolicySpec_AIAgentHandling_EdgeConnectivity_ProxiesSsh); !ok || dstOneOf == nil {
			o.Type = &PolicySpec_AIAgentHandling_EdgeConnectivity_ProxiesSsh{}
		}
		if source != nil {
			o := o.Type.(*PolicySpec_AIAgentHandling_EdgeConnectivity_ProxiesSsh)
			if source.ProxiesSsh != nil {
				if o.ProxiesSsh == nil {
					o.ProxiesSsh = new(PolicySpec_AIAgentHandling_EdgeConnectivity_ProxiesSSH)
				}
				o.ProxiesSsh.Merge(source.ProxiesSsh)
			}
		}
	}
	if source, ok := source.GetType().(*PolicySpec_AIAgentHandling_EdgeConnectivity_PodSsh); ok {
		if dstOneOf, ok := o.Type.(*PolicySpec_AIAgentHandling_EdgeConnectivity_PodSsh); !ok || dstOneOf == nil {
			o.Type = &PolicySpec_AIAgentHandling_EdgeConnectivity_PodSsh{}
		}
		if source != nil {
			o := o.Type.(*PolicySpec_AIAgentHandling_EdgeConnectivity_PodSsh)
			if source.PodSsh != nil {
				if o.PodSsh == nil {
					o.PodSsh = new(PolicySpec_AIAgentHandling_EdgeConnectivity_PodSSH)
				}
				o.PodSsh.Merge(source.PodSsh)
			}
		}
	}
	for _, sourceValue := range source.GetAllowedBins() {
		exists := false
		for _, currentValue := range o.AllowedBins {
			if currentValue == sourceValue {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement string
			newDstElement = sourceValue
			o.AllowedBins = append(o.AllowedBins, newDstElement)
		}
	}

}

func (o *PolicySpec_AIAgentHandling_EdgeConnectivity) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*PolicySpec_AIAgentHandling_EdgeConnectivity))
}

func (o *PolicySpec_AIAgentHandling_Remediation) GotenObjectExt() {}

func (o *PolicySpec_AIAgentHandling_Remediation) MakeFullFieldMask() *PolicySpec_AIAgentHandling_Remediation_FieldMask {
	return FullPolicySpec_AIAgentHandling_Remediation_FieldMask()
}

func (o *PolicySpec_AIAgentHandling_Remediation) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullPolicySpec_AIAgentHandling_Remediation_FieldMask()
}

func (o *PolicySpec_AIAgentHandling_Remediation) MakeDiffFieldMask(other *PolicySpec_AIAgentHandling_Remediation) *PolicySpec_AIAgentHandling_Remediation_FieldMask {
	if o == nil && other == nil {
		return &PolicySpec_AIAgentHandling_Remediation_FieldMask{}
	}
	if o == nil || other == nil {
		return FullPolicySpec_AIAgentHandling_Remediation_FieldMask()
	}

	res := &PolicySpec_AIAgentHandling_Remediation_FieldMask{}
	{
		_, leftSelected := o.Type.(*PolicySpec_AIAgentHandling_Remediation_FixInSsh)
		_, rightSelected := other.Type.(*PolicySpec_AIAgentHandling_Remediation_FixInSsh)
		if leftSelected == rightSelected {
			subMask := o.GetFixInSsh().MakeDiffFieldMask(other.GetFixInSsh())
			if subMask.IsFull() {
				res.Paths = append(res.Paths, &PolicySpecAIAgentHandlingRemediation_FieldTerminalPath{selector: PolicySpecAIAgentHandlingRemediation_FieldPathSelectorFixInSsh})
			} else {
				for _, subpath := range subMask.Paths {
					res.Paths = append(res.Paths, &PolicySpecAIAgentHandlingRemediation_FieldSubPath{selector: PolicySpecAIAgentHandlingRemediation_FieldPathSelectorFixInSsh, subPath: subpath})
				}
			}
		} else {
			res.Paths = append(res.Paths, &PolicySpecAIAgentHandlingRemediation_FieldTerminalPath{selector: PolicySpecAIAgentHandlingRemediation_FieldPathSelectorFixInSsh})
		}
	}
	{
		_, leftSelected := o.Type.(*PolicySpec_AIAgentHandling_Remediation_Reboot_)
		_, rightSelected := other.Type.(*PolicySpec_AIAgentHandling_Remediation_Reboot_)
		if leftSelected == rightSelected {
			subMask := o.GetReboot().MakeDiffFieldMask(other.GetReboot())
			if subMask.IsFull() {
				res.Paths = append(res.Paths, &PolicySpecAIAgentHandlingRemediation_FieldTerminalPath{selector: PolicySpecAIAgentHandlingRemediation_FieldPathSelectorReboot})
			} else {
				for _, subpath := range subMask.Paths {
					res.Paths = append(res.Paths, &PolicySpecAIAgentHandlingRemediation_FieldSubPath{selector: PolicySpecAIAgentHandlingRemediation_FieldPathSelectorReboot, subPath: subpath})
				}
			}
		} else {
			res.Paths = append(res.Paths, &PolicySpecAIAgentHandlingRemediation_FieldTerminalPath{selector: PolicySpecAIAgentHandlingRemediation_FieldPathSelectorReboot})
		}
	}
	return res
}

func (o *PolicySpec_AIAgentHandling_Remediation) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*PolicySpec_AIAgentHandling_Remediation))
}

func (o *PolicySpec_AIAgentHandling_Remediation) Clone() *PolicySpec_AIAgentHandling_Remediation {
	if o == nil {
		return nil
	}
	result := &PolicySpec_AIAgentHandling_Remediation{}
	if o, ok := o.Type.(*PolicySpec_AIAgentHandling_Remediation_FixInSsh); ok {
		result.Type = (*PolicySpec_AIAgentHandling_Remediation_FixInSsh)(nil)
		if o != nil {
			result.Type = &PolicySpec_AIAgentHandling_Remediation_FixInSsh{}
			result := result.Type.(*PolicySpec_AIAgentHandling_Remediation_FixInSsh)
			result.FixInSsh = o.FixInSsh.Clone()
		}
	}
	if o, ok := o.Type.(*PolicySpec_AIAgentHandling_Remediation_Reboot_); ok {
		result.Type = (*PolicySpec_AIAgentHandling_Remediation_Reboot_)(nil)
		if o != nil {
			result.Type = &PolicySpec_AIAgentHandling_Remediation_Reboot_{}
			result := result.Type.(*PolicySpec_AIAgentHandling_Remediation_Reboot_)
			result.Reboot = o.Reboot.Clone()
		}
	}
	return result
}

func (o *PolicySpec_AIAgentHandling_Remediation) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *PolicySpec_AIAgentHandling_Remediation) Merge(source *PolicySpec_AIAgentHandling_Remediation) {
	if source, ok := source.GetType().(*PolicySpec_AIAgentHandling_Remediation_FixInSsh); ok {
		if dstOneOf, ok := o.Type.(*PolicySpec_AIAgentHandling_Remediation_FixInSsh); !ok || dstOneOf == nil {
			o.Type = &PolicySpec_AIAgentHandling_Remediation_FixInSsh{}
		}
		if source != nil {
			o := o.Type.(*PolicySpec_AIAgentHandling_Remediation_FixInSsh)
			if source.FixInSsh != nil {
				if o.FixInSsh == nil {
					o.FixInSsh = new(PolicySpec_AIAgentHandling_Remediation_FixInSSH)
				}
				o.FixInSsh.Merge(source.FixInSsh)
			}
		}
	}
	if source, ok := source.GetType().(*PolicySpec_AIAgentHandling_Remediation_Reboot_); ok {
		if dstOneOf, ok := o.Type.(*PolicySpec_AIAgentHandling_Remediation_Reboot_); !ok || dstOneOf == nil {
			o.Type = &PolicySpec_AIAgentHandling_Remediation_Reboot_{}
		}
		if source != nil {
			o := o.Type.(*PolicySpec_AIAgentHandling_Remediation_Reboot_)
			if source.Reboot != nil {
				if o.Reboot == nil {
					o.Reboot = new(PolicySpec_AIAgentHandling_Remediation_Reboot)
				}
				o.Reboot.Merge(source.Reboot)
			}
		}
	}
}

func (o *PolicySpec_AIAgentHandling_Remediation) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*PolicySpec_AIAgentHandling_Remediation))
}

func (o *PolicySpec_AIAgentHandling_EdgeConnectivity_DeviceSSH) GotenObjectExt() {}

func (o *PolicySpec_AIAgentHandling_EdgeConnectivity_DeviceSSH) MakeFullFieldMask() *PolicySpec_AIAgentHandling_EdgeConnectivity_DeviceSSH_FieldMask {
	return FullPolicySpec_AIAgentHandling_EdgeConnectivity_DeviceSSH_FieldMask()
}

func (o *PolicySpec_AIAgentHandling_EdgeConnectivity_DeviceSSH) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullPolicySpec_AIAgentHandling_EdgeConnectivity_DeviceSSH_FieldMask()
}

func (o *PolicySpec_AIAgentHandling_EdgeConnectivity_DeviceSSH) MakeDiffFieldMask(other *PolicySpec_AIAgentHandling_EdgeConnectivity_DeviceSSH) *PolicySpec_AIAgentHandling_EdgeConnectivity_DeviceSSH_FieldMask {
	if o == nil && other == nil {
		return &PolicySpec_AIAgentHandling_EdgeConnectivity_DeviceSSH_FieldMask{}
	}
	if o == nil || other == nil {
		return FullPolicySpec_AIAgentHandling_EdgeConnectivity_DeviceSSH_FieldMask()
	}

	res := &PolicySpec_AIAgentHandling_EdgeConnectivity_DeviceSSH_FieldMask{}
	if o.GetClientName() != other.GetClientName() {
		res.Paths = append(res.Paths, &PolicySpecAIAgentHandlingEdgeConnectivityDeviceSSH_FieldTerminalPath{selector: PolicySpecAIAgentHandlingEdgeConnectivityDeviceSSH_FieldPathSelectorClientName})
	}
	return res
}

func (o *PolicySpec_AIAgentHandling_EdgeConnectivity_DeviceSSH) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*PolicySpec_AIAgentHandling_EdgeConnectivity_DeviceSSH))
}

func (o *PolicySpec_AIAgentHandling_EdgeConnectivity_DeviceSSH) Clone() *PolicySpec_AIAgentHandling_EdgeConnectivity_DeviceSSH {
	if o == nil {
		return nil
	}
	result := &PolicySpec_AIAgentHandling_EdgeConnectivity_DeviceSSH{}
	result.ClientName = o.ClientName
	return result
}

func (o *PolicySpec_AIAgentHandling_EdgeConnectivity_DeviceSSH) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *PolicySpec_AIAgentHandling_EdgeConnectivity_DeviceSSH) Merge(source *PolicySpec_AIAgentHandling_EdgeConnectivity_DeviceSSH) {
	o.ClientName = source.GetClientName()
}

func (o *PolicySpec_AIAgentHandling_EdgeConnectivity_DeviceSSH) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*PolicySpec_AIAgentHandling_EdgeConnectivity_DeviceSSH))
}

func (o *PolicySpec_AIAgentHandling_EdgeConnectivity_ProxiesSSH) GotenObjectExt() {}

func (o *PolicySpec_AIAgentHandling_EdgeConnectivity_ProxiesSSH) MakeFullFieldMask() *PolicySpec_AIAgentHandling_EdgeConnectivity_ProxiesSSH_FieldMask {
	return FullPolicySpec_AIAgentHandling_EdgeConnectivity_ProxiesSSH_FieldMask()
}

func (o *PolicySpec_AIAgentHandling_EdgeConnectivity_ProxiesSSH) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullPolicySpec_AIAgentHandling_EdgeConnectivity_ProxiesSSH_FieldMask()
}

func (o *PolicySpec_AIAgentHandling_EdgeConnectivity_ProxiesSSH) MakeDiffFieldMask(other *PolicySpec_AIAgentHandling_EdgeConnectivity_ProxiesSSH) *PolicySpec_AIAgentHandling_EdgeConnectivity_ProxiesSSH_FieldMask {
	if o == nil && other == nil {
		return &PolicySpec_AIAgentHandling_EdgeConnectivity_ProxiesSSH_FieldMask{}
	}
	if o == nil || other == nil {
		return FullPolicySpec_AIAgentHandling_EdgeConnectivity_ProxiesSSH_FieldMask()
	}

	res := &PolicySpec_AIAgentHandling_EdgeConnectivity_ProxiesSSH_FieldMask{}
	if o.GetServiceDomain() != other.GetServiceDomain() {
		res.Paths = append(res.Paths, &PolicySpecAIAgentHandlingEdgeConnectivityProxiesSSH_FieldTerminalPath{selector: PolicySpecAIAgentHandlingEdgeConnectivityProxiesSSH_FieldPathSelectorServiceDomain})
	}
	if o.GetProviderNameTmpl() != other.GetProviderNameTmpl() {
		res.Paths = append(res.Paths, &PolicySpecAIAgentHandlingEdgeConnectivityProxiesSSH_FieldTerminalPath{selector: PolicySpecAIAgentHandlingEdgeConnectivityProxiesSSH_FieldPathSelectorProviderNameTmpl})
	}
	if o.GetClientName() != other.GetClientName() {
		res.Paths = append(res.Paths, &PolicySpecAIAgentHandlingEdgeConnectivityProxiesSSH_FieldTerminalPath{selector: PolicySpecAIAgentHandlingEdgeConnectivityProxiesSSH_FieldPathSelectorClientName})
	}
	if o.GetServiceName() != other.GetServiceName() {
		res.Paths = append(res.Paths, &PolicySpecAIAgentHandlingEdgeConnectivityProxiesSSH_FieldTerminalPath{selector: PolicySpecAIAgentHandlingEdgeConnectivityProxiesSSH_FieldPathSelectorServiceName})
	}
	return res
}

func (o *PolicySpec_AIAgentHandling_EdgeConnectivity_ProxiesSSH) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*PolicySpec_AIAgentHandling_EdgeConnectivity_ProxiesSSH))
}

func (o *PolicySpec_AIAgentHandling_EdgeConnectivity_ProxiesSSH) Clone() *PolicySpec_AIAgentHandling_EdgeConnectivity_ProxiesSSH {
	if o == nil {
		return nil
	}
	result := &PolicySpec_AIAgentHandling_EdgeConnectivity_ProxiesSSH{}
	result.ServiceDomain = o.ServiceDomain
	result.ProviderNameTmpl = o.ProviderNameTmpl
	result.ClientName = o.ClientName
	result.ServiceName = o.ServiceName
	return result
}

func (o *PolicySpec_AIAgentHandling_EdgeConnectivity_ProxiesSSH) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *PolicySpec_AIAgentHandling_EdgeConnectivity_ProxiesSSH) Merge(source *PolicySpec_AIAgentHandling_EdgeConnectivity_ProxiesSSH) {
	o.ServiceDomain = source.GetServiceDomain()
	o.ProviderNameTmpl = source.GetProviderNameTmpl()
	o.ClientName = source.GetClientName()
	o.ServiceName = source.GetServiceName()
}

func (o *PolicySpec_AIAgentHandling_EdgeConnectivity_ProxiesSSH) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*PolicySpec_AIAgentHandling_EdgeConnectivity_ProxiesSSH))
}

func (o *PolicySpec_AIAgentHandling_EdgeConnectivity_PodSSH) GotenObjectExt() {}

func (o *PolicySpec_AIAgentHandling_EdgeConnectivity_PodSSH) MakeFullFieldMask() *PolicySpec_AIAgentHandling_EdgeConnectivity_PodSSH_FieldMask {
	return FullPolicySpec_AIAgentHandling_EdgeConnectivity_PodSSH_FieldMask()
}

func (o *PolicySpec_AIAgentHandling_EdgeConnectivity_PodSSH) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullPolicySpec_AIAgentHandling_EdgeConnectivity_PodSSH_FieldMask()
}

func (o *PolicySpec_AIAgentHandling_EdgeConnectivity_PodSSH) MakeDiffFieldMask(other *PolicySpec_AIAgentHandling_EdgeConnectivity_PodSSH) *PolicySpec_AIAgentHandling_EdgeConnectivity_PodSSH_FieldMask {
	if o == nil && other == nil {
		return &PolicySpec_AIAgentHandling_EdgeConnectivity_PodSSH_FieldMask{}
	}
	if o == nil || other == nil {
		return FullPolicySpec_AIAgentHandling_EdgeConnectivity_PodSSH_FieldMask()
	}

	res := &PolicySpec_AIAgentHandling_EdgeConnectivity_PodSSH_FieldMask{}
	if o.GetClientName() != other.GetClientName() {
		res.Paths = append(res.Paths, &PolicySpecAIAgentHandlingEdgeConnectivityPodSSH_FieldTerminalPath{selector: PolicySpecAIAgentHandlingEdgeConnectivityPodSSH_FieldPathSelectorClientName})
	}
	if o.GetUsername() != other.GetUsername() {
		res.Paths = append(res.Paths, &PolicySpecAIAgentHandlingEdgeConnectivityPodSSH_FieldTerminalPath{selector: PolicySpecAIAgentHandlingEdgeConnectivityPodSSH_FieldPathSelectorUsername})
	}
	return res
}

func (o *PolicySpec_AIAgentHandling_EdgeConnectivity_PodSSH) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*PolicySpec_AIAgentHandling_EdgeConnectivity_PodSSH))
}

func (o *PolicySpec_AIAgentHandling_EdgeConnectivity_PodSSH) Clone() *PolicySpec_AIAgentHandling_EdgeConnectivity_PodSSH {
	if o == nil {
		return nil
	}
	result := &PolicySpec_AIAgentHandling_EdgeConnectivity_PodSSH{}
	result.ClientName = o.ClientName
	result.Username = o.Username
	return result
}

func (o *PolicySpec_AIAgentHandling_EdgeConnectivity_PodSSH) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *PolicySpec_AIAgentHandling_EdgeConnectivity_PodSSH) Merge(source *PolicySpec_AIAgentHandling_EdgeConnectivity_PodSSH) {
	o.ClientName = source.GetClientName()
	o.Username = source.GetUsername()
}

func (o *PolicySpec_AIAgentHandling_EdgeConnectivity_PodSSH) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*PolicySpec_AIAgentHandling_EdgeConnectivity_PodSSH))
}

func (o *PolicySpec_AIAgentHandling_Remediation_FixInSSH) GotenObjectExt() {}

func (o *PolicySpec_AIAgentHandling_Remediation_FixInSSH) MakeFullFieldMask() *PolicySpec_AIAgentHandling_Remediation_FixInSSH_FieldMask {
	return FullPolicySpec_AIAgentHandling_Remediation_FixInSSH_FieldMask()
}

func (o *PolicySpec_AIAgentHandling_Remediation_FixInSSH) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullPolicySpec_AIAgentHandling_Remediation_FixInSSH_FieldMask()
}

func (o *PolicySpec_AIAgentHandling_Remediation_FixInSSH) MakeDiffFieldMask(other *PolicySpec_AIAgentHandling_Remediation_FixInSSH) *PolicySpec_AIAgentHandling_Remediation_FixInSSH_FieldMask {
	if o == nil && other == nil {
		return &PolicySpec_AIAgentHandling_Remediation_FixInSSH_FieldMask{}
	}
	if o == nil || other == nil {
		return FullPolicySpec_AIAgentHandling_Remediation_FixInSSH_FieldMask()
	}

	res := &PolicySpec_AIAgentHandling_Remediation_FixInSSH_FieldMask{}
	return res
}

func (o *PolicySpec_AIAgentHandling_Remediation_FixInSSH) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*PolicySpec_AIAgentHandling_Remediation_FixInSSH))
}

func (o *PolicySpec_AIAgentHandling_Remediation_FixInSSH) Clone() *PolicySpec_AIAgentHandling_Remediation_FixInSSH {
	if o == nil {
		return nil
	}
	result := &PolicySpec_AIAgentHandling_Remediation_FixInSSH{}
	return result
}

func (o *PolicySpec_AIAgentHandling_Remediation_FixInSSH) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *PolicySpec_AIAgentHandling_Remediation_FixInSSH) Merge(source *PolicySpec_AIAgentHandling_Remediation_FixInSSH) {
}

func (o *PolicySpec_AIAgentHandling_Remediation_FixInSSH) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*PolicySpec_AIAgentHandling_Remediation_FixInSSH))
}

func (o *PolicySpec_AIAgentHandling_Remediation_Reboot) GotenObjectExt() {}

func (o *PolicySpec_AIAgentHandling_Remediation_Reboot) MakeFullFieldMask() *PolicySpec_AIAgentHandling_Remediation_Reboot_FieldMask {
	return FullPolicySpec_AIAgentHandling_Remediation_Reboot_FieldMask()
}

func (o *PolicySpec_AIAgentHandling_Remediation_Reboot) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullPolicySpec_AIAgentHandling_Remediation_Reboot_FieldMask()
}

func (o *PolicySpec_AIAgentHandling_Remediation_Reboot) MakeDiffFieldMask(other *PolicySpec_AIAgentHandling_Remediation_Reboot) *PolicySpec_AIAgentHandling_Remediation_Reboot_FieldMask {
	if o == nil && other == nil {
		return &PolicySpec_AIAgentHandling_Remediation_Reboot_FieldMask{}
	}
	if o == nil || other == nil {
		return FullPolicySpec_AIAgentHandling_Remediation_Reboot_FieldMask()
	}

	res := &PolicySpec_AIAgentHandling_Remediation_Reboot_FieldMask{}
	return res
}

func (o *PolicySpec_AIAgentHandling_Remediation_Reboot) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*PolicySpec_AIAgentHandling_Remediation_Reboot))
}

func (o *PolicySpec_AIAgentHandling_Remediation_Reboot) Clone() *PolicySpec_AIAgentHandling_Remediation_Reboot {
	if o == nil {
		return nil
	}
	result := &PolicySpec_AIAgentHandling_Remediation_Reboot{}
	return result
}

func (o *PolicySpec_AIAgentHandling_Remediation_Reboot) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *PolicySpec_AIAgentHandling_Remediation_Reboot) Merge(source *PolicySpec_AIAgentHandling_Remediation_Reboot) {
}

func (o *PolicySpec_AIAgentHandling_Remediation_Reboot) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*PolicySpec_AIAgentHandling_Remediation_Reboot))
}

func (o *NotificationChannelSpec) GotenObjectExt() {}

func (o *NotificationChannelSpec) MakeFullFieldMask() *NotificationChannelSpec_FieldMask {
	return FullNotificationChannelSpec_FieldMask()
}

func (o *NotificationChannelSpec) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullNotificationChannelSpec_FieldMask()
}

func (o *NotificationChannelSpec) MakeDiffFieldMask(other *NotificationChannelSpec) *NotificationChannelSpec_FieldMask {
	if o == nil && other == nil {
		return &NotificationChannelSpec_FieldMask{}
	}
	if o == nil || other == nil {
		return FullNotificationChannelSpec_FieldMask()
	}

	res := &NotificationChannelSpec_FieldMask{}
	if o.GetEnabled() != other.GetEnabled() {
		res.Paths = append(res.Paths, &NotificationChannelSpec_FieldTerminalPath{selector: NotificationChannelSpec_FieldPathSelectorEnabled})
	}
	if o.GetType() != other.GetType() {
		res.Paths = append(res.Paths, &NotificationChannelSpec_FieldTerminalPath{selector: NotificationChannelSpec_FieldPathSelectorType})
	}

	if len(o.GetEnabledKinds()) == len(other.GetEnabledKinds()) {
		for i, lValue := range o.GetEnabledKinds() {
			rValue := other.GetEnabledKinds()[i]
			if lValue != rValue {
				res.Paths = append(res.Paths, &NotificationChannelSpec_FieldTerminalPath{selector: NotificationChannelSpec_FieldPathSelectorEnabledKinds})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &NotificationChannelSpec_FieldTerminalPath{selector: NotificationChannelSpec_FieldPathSelectorEnabledKinds})
	}
	{
		subMask := o.GetEmail().MakeDiffFieldMask(other.GetEmail())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &NotificationChannelSpec_FieldTerminalPath{selector: NotificationChannelSpec_FieldPathSelectorEmail})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &NotificationChannelSpec_FieldSubPath{selector: NotificationChannelSpec_FieldPathSelectorEmail, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetSlack().MakeDiffFieldMask(other.GetSlack())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &NotificationChannelSpec_FieldTerminalPath{selector: NotificationChannelSpec_FieldPathSelectorSlack})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &NotificationChannelSpec_FieldSubPath{selector: NotificationChannelSpec_FieldPathSelectorSlack, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetWebhook().MakeDiffFieldMask(other.GetWebhook())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &NotificationChannelSpec_FieldTerminalPath{selector: NotificationChannelSpec_FieldPathSelectorWebhook})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &NotificationChannelSpec_FieldSubPath{selector: NotificationChannelSpec_FieldPathSelectorWebhook, subPath: subpath})
			}
		}
	}
	if o.GetNotificationLanguageCode() != other.GetNotificationLanguageCode() {
		res.Paths = append(res.Paths, &NotificationChannelSpec_FieldTerminalPath{selector: NotificationChannelSpec_FieldPathSelectorNotificationLanguageCode})
	}
	if !proto.Equal(o.GetNotificationMask(), other.GetNotificationMask()) {
		res.Paths = append(res.Paths, &NotificationChannelSpec_FieldTerminalPath{selector: NotificationChannelSpec_FieldPathSelectorNotificationMask})
	}
	if o.GetMaxAlertBodiesInMsg() != other.GetMaxAlertBodiesInMsg() {
		res.Paths = append(res.Paths, &NotificationChannelSpec_FieldTerminalPath{selector: NotificationChannelSpec_FieldPathSelectorMaxAlertBodiesInMsg})
	}
	if o.GetPutOnlyAlertsCounterWhenOverflowing() != other.GetPutOnlyAlertsCounterWhenOverflowing() {
		res.Paths = append(res.Paths, &NotificationChannelSpec_FieldTerminalPath{selector: NotificationChannelSpec_FieldPathSelectorPutOnlyAlertsCounterWhenOverflowing})
	}
	return res
}

func (o *NotificationChannelSpec) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*NotificationChannelSpec))
}

func (o *NotificationChannelSpec) Clone() *NotificationChannelSpec {
	if o == nil {
		return nil
	}
	result := &NotificationChannelSpec{}
	result.Enabled = o.Enabled
	result.Type = o.Type
	result.EnabledKinds = make([]NotificationChannelSpec_EventKind, len(o.EnabledKinds))
	for i, sourceValue := range o.EnabledKinds {
		result.EnabledKinds[i] = sourceValue
	}
	result.Email = o.Email.Clone()
	result.Slack = o.Slack.Clone()
	result.Webhook = o.Webhook.Clone()
	result.NotificationLanguageCode = o.NotificationLanguageCode
	result.NotificationMask = proto.Clone(o.NotificationMask).(*fieldmaskpb.FieldMask)
	result.MaxAlertBodiesInMsg = o.MaxAlertBodiesInMsg
	result.PutOnlyAlertsCounterWhenOverflowing = o.PutOnlyAlertsCounterWhenOverflowing
	return result
}

func (o *NotificationChannelSpec) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *NotificationChannelSpec) Merge(source *NotificationChannelSpec) {
	o.Enabled = source.GetEnabled()
	o.Type = source.GetType()
	for _, sourceValue := range source.GetEnabledKinds() {
		exists := false
		for _, currentValue := range o.EnabledKinds {
			if currentValue == sourceValue {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement NotificationChannelSpec_EventKind
			newDstElement = sourceValue
			o.EnabledKinds = append(o.EnabledKinds, newDstElement)
		}
	}

	if source.GetEmail() != nil {
		if o.Email == nil {
			o.Email = new(NotificationChannelSpec_Email)
		}
		o.Email.Merge(source.GetEmail())
	}
	if source.GetSlack() != nil {
		if o.Slack == nil {
			o.Slack = new(NotificationChannelSpec_Slack)
		}
		o.Slack.Merge(source.GetSlack())
	}
	if source.GetWebhook() != nil {
		if o.Webhook == nil {
			o.Webhook = new(NotificationChannelSpec_Webhook)
		}
		o.Webhook.Merge(source.GetWebhook())
	}
	o.NotificationLanguageCode = source.GetNotificationLanguageCode()
	if source.GetNotificationMask() != nil {
		if o.NotificationMask == nil {
			o.NotificationMask = new(fieldmaskpb.FieldMask)
		}
		proto.Merge(o.NotificationMask, source.GetNotificationMask())
	}
	o.MaxAlertBodiesInMsg = source.GetMaxAlertBodiesInMsg()
	o.PutOnlyAlertsCounterWhenOverflowing = source.GetPutOnlyAlertsCounterWhenOverflowing()
}

func (o *NotificationChannelSpec) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*NotificationChannelSpec))
}

func (o *NotificationChannelSpec_Email) GotenObjectExt() {}

func (o *NotificationChannelSpec_Email) MakeFullFieldMask() *NotificationChannelSpec_Email_FieldMask {
	return FullNotificationChannelSpec_Email_FieldMask()
}

func (o *NotificationChannelSpec_Email) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullNotificationChannelSpec_Email_FieldMask()
}

func (o *NotificationChannelSpec_Email) MakeDiffFieldMask(other *NotificationChannelSpec_Email) *NotificationChannelSpec_Email_FieldMask {
	if o == nil && other == nil {
		return &NotificationChannelSpec_Email_FieldMask{}
	}
	if o == nil || other == nil {
		return FullNotificationChannelSpec_Email_FieldMask()
	}

	res := &NotificationChannelSpec_Email_FieldMask{}

	if len(o.GetAddresses()) == len(other.GetAddresses()) {
		for i, lValue := range o.GetAddresses() {
			rValue := other.GetAddresses()[i]
			if lValue != rValue {
				res.Paths = append(res.Paths, &NotificationChannelSpecEmail_FieldTerminalPath{selector: NotificationChannelSpecEmail_FieldPathSelectorAddresses})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &NotificationChannelSpecEmail_FieldTerminalPath{selector: NotificationChannelSpecEmail_FieldPathSelectorAddresses})
	}
	return res
}

func (o *NotificationChannelSpec_Email) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*NotificationChannelSpec_Email))
}

func (o *NotificationChannelSpec_Email) Clone() *NotificationChannelSpec_Email {
	if o == nil {
		return nil
	}
	result := &NotificationChannelSpec_Email{}
	result.Addresses = make([]string, len(o.Addresses))
	for i, sourceValue := range o.Addresses {
		result.Addresses[i] = sourceValue
	}
	return result
}

func (o *NotificationChannelSpec_Email) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *NotificationChannelSpec_Email) Merge(source *NotificationChannelSpec_Email) {
	for _, sourceValue := range source.GetAddresses() {
		exists := false
		for _, currentValue := range o.Addresses {
			if currentValue == sourceValue {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement string
			newDstElement = sourceValue
			o.Addresses = append(o.Addresses, newDstElement)
		}
	}

}

func (o *NotificationChannelSpec_Email) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*NotificationChannelSpec_Email))
}

func (o *NotificationChannelSpec_Slack) GotenObjectExt() {}

func (o *NotificationChannelSpec_Slack) MakeFullFieldMask() *NotificationChannelSpec_Slack_FieldMask {
	return FullNotificationChannelSpec_Slack_FieldMask()
}

func (o *NotificationChannelSpec_Slack) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullNotificationChannelSpec_Slack_FieldMask()
}

func (o *NotificationChannelSpec_Slack) MakeDiffFieldMask(other *NotificationChannelSpec_Slack) *NotificationChannelSpec_Slack_FieldMask {
	if o == nil && other == nil {
		return &NotificationChannelSpec_Slack_FieldMask{}
	}
	if o == nil || other == nil {
		return FullNotificationChannelSpec_Slack_FieldMask()
	}

	res := &NotificationChannelSpec_Slack_FieldMask{}
	if o.GetIncomingWebhook() != other.GetIncomingWebhook() {
		res.Paths = append(res.Paths, &NotificationChannelSpecSlack_FieldTerminalPath{selector: NotificationChannelSpecSlack_FieldPathSelectorIncomingWebhook})
	}
	return res
}

func (o *NotificationChannelSpec_Slack) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*NotificationChannelSpec_Slack))
}

func (o *NotificationChannelSpec_Slack) Clone() *NotificationChannelSpec_Slack {
	if o == nil {
		return nil
	}
	result := &NotificationChannelSpec_Slack{}
	result.IncomingWebhook = o.IncomingWebhook
	return result
}

func (o *NotificationChannelSpec_Slack) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *NotificationChannelSpec_Slack) Merge(source *NotificationChannelSpec_Slack) {
	o.IncomingWebhook = source.GetIncomingWebhook()
}

func (o *NotificationChannelSpec_Slack) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*NotificationChannelSpec_Slack))
}

func (o *NotificationChannelSpec_PagerDuty) GotenObjectExt() {}

func (o *NotificationChannelSpec_PagerDuty) MakeFullFieldMask() *NotificationChannelSpec_PagerDuty_FieldMask {
	return FullNotificationChannelSpec_PagerDuty_FieldMask()
}

func (o *NotificationChannelSpec_PagerDuty) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullNotificationChannelSpec_PagerDuty_FieldMask()
}

func (o *NotificationChannelSpec_PagerDuty) MakeDiffFieldMask(other *NotificationChannelSpec_PagerDuty) *NotificationChannelSpec_PagerDuty_FieldMask {
	if o == nil && other == nil {
		return &NotificationChannelSpec_PagerDuty_FieldMask{}
	}
	if o == nil || other == nil {
		return FullNotificationChannelSpec_PagerDuty_FieldMask()
	}

	res := &NotificationChannelSpec_PagerDuty_FieldMask{}
	if o.GetServiceKey() != other.GetServiceKey() {
		res.Paths = append(res.Paths, &NotificationChannelSpecPagerDuty_FieldTerminalPath{selector: NotificationChannelSpecPagerDuty_FieldPathSelectorServiceKey})
	}
	return res
}

func (o *NotificationChannelSpec_PagerDuty) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*NotificationChannelSpec_PagerDuty))
}

func (o *NotificationChannelSpec_PagerDuty) Clone() *NotificationChannelSpec_PagerDuty {
	if o == nil {
		return nil
	}
	result := &NotificationChannelSpec_PagerDuty{}
	result.ServiceKey = o.ServiceKey
	return result
}

func (o *NotificationChannelSpec_PagerDuty) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *NotificationChannelSpec_PagerDuty) Merge(source *NotificationChannelSpec_PagerDuty) {
	o.ServiceKey = source.GetServiceKey()
}

func (o *NotificationChannelSpec_PagerDuty) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*NotificationChannelSpec_PagerDuty))
}

func (o *NotificationChannelSpec_Webhook) GotenObjectExt() {}

func (o *NotificationChannelSpec_Webhook) MakeFullFieldMask() *NotificationChannelSpec_Webhook_FieldMask {
	return FullNotificationChannelSpec_Webhook_FieldMask()
}

func (o *NotificationChannelSpec_Webhook) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullNotificationChannelSpec_Webhook_FieldMask()
}

func (o *NotificationChannelSpec_Webhook) MakeDiffFieldMask(other *NotificationChannelSpec_Webhook) *NotificationChannelSpec_Webhook_FieldMask {
	if o == nil && other == nil {
		return &NotificationChannelSpec_Webhook_FieldMask{}
	}
	if o == nil || other == nil {
		return FullNotificationChannelSpec_Webhook_FieldMask()
	}

	res := &NotificationChannelSpec_Webhook_FieldMask{}
	if o.GetUrl() != other.GetUrl() {
		res.Paths = append(res.Paths, &NotificationChannelSpecWebhook_FieldTerminalPath{selector: NotificationChannelSpecWebhook_FieldPathSelectorUrl})
	}

	if len(o.GetHeaders()) == len(other.GetHeaders()) {
		for i, lValue := range o.GetHeaders() {
			rValue := other.GetHeaders()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &NotificationChannelSpecWebhook_FieldTerminalPath{selector: NotificationChannelSpecWebhook_FieldPathSelectorHeaders})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &NotificationChannelSpecWebhook_FieldTerminalPath{selector: NotificationChannelSpecWebhook_FieldPathSelectorHeaders})
	}
	if o.GetMaxMessageSizeMb() != other.GetMaxMessageSizeMb() {
		res.Paths = append(res.Paths, &NotificationChannelSpecWebhook_FieldTerminalPath{selector: NotificationChannelSpecWebhook_FieldPathSelectorMaxMessageSizeMb})
	}
	return res
}

func (o *NotificationChannelSpec_Webhook) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*NotificationChannelSpec_Webhook))
}

func (o *NotificationChannelSpec_Webhook) Clone() *NotificationChannelSpec_Webhook {
	if o == nil {
		return nil
	}
	result := &NotificationChannelSpec_Webhook{}
	result.Url = o.Url
	result.Headers = make([]*NotificationChannelSpec_Webhook_Header, len(o.Headers))
	for i, sourceValue := range o.Headers {
		result.Headers[i] = sourceValue.Clone()
	}
	result.MaxMessageSizeMb = o.MaxMessageSizeMb
	return result
}

func (o *NotificationChannelSpec_Webhook) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *NotificationChannelSpec_Webhook) Merge(source *NotificationChannelSpec_Webhook) {
	o.Url = source.GetUrl()
	for _, sourceValue := range source.GetHeaders() {
		exists := false
		for _, currentValue := range o.Headers {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *NotificationChannelSpec_Webhook_Header
			if sourceValue != nil {
				newDstElement = new(NotificationChannelSpec_Webhook_Header)
				newDstElement.Merge(sourceValue)
			}
			o.Headers = append(o.Headers, newDstElement)
		}
	}

	o.MaxMessageSizeMb = source.GetMaxMessageSizeMb()
}

func (o *NotificationChannelSpec_Webhook) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*NotificationChannelSpec_Webhook))
}

func (o *NotificationChannelSpec_Webhook_Header) GotenObjectExt() {}

func (o *NotificationChannelSpec_Webhook_Header) MakeFullFieldMask() *NotificationChannelSpec_Webhook_Header_FieldMask {
	return FullNotificationChannelSpec_Webhook_Header_FieldMask()
}

func (o *NotificationChannelSpec_Webhook_Header) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullNotificationChannelSpec_Webhook_Header_FieldMask()
}

func (o *NotificationChannelSpec_Webhook_Header) MakeDiffFieldMask(other *NotificationChannelSpec_Webhook_Header) *NotificationChannelSpec_Webhook_Header_FieldMask {
	if o == nil && other == nil {
		return &NotificationChannelSpec_Webhook_Header_FieldMask{}
	}
	if o == nil || other == nil {
		return FullNotificationChannelSpec_Webhook_Header_FieldMask()
	}

	res := &NotificationChannelSpec_Webhook_Header_FieldMask{}
	if o.GetKey() != other.GetKey() {
		res.Paths = append(res.Paths, &NotificationChannelSpecWebhookHeader_FieldTerminalPath{selector: NotificationChannelSpecWebhookHeader_FieldPathSelectorKey})
	}
	if o.GetValue() != other.GetValue() {
		res.Paths = append(res.Paths, &NotificationChannelSpecWebhookHeader_FieldTerminalPath{selector: NotificationChannelSpecWebhookHeader_FieldPathSelectorValue})
	}
	return res
}

func (o *NotificationChannelSpec_Webhook_Header) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*NotificationChannelSpec_Webhook_Header))
}

func (o *NotificationChannelSpec_Webhook_Header) Clone() *NotificationChannelSpec_Webhook_Header {
	if o == nil {
		return nil
	}
	result := &NotificationChannelSpec_Webhook_Header{}
	result.Key = o.Key
	result.Value = o.Value
	return result
}

func (o *NotificationChannelSpec_Webhook_Header) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *NotificationChannelSpec_Webhook_Header) Merge(source *NotificationChannelSpec_Webhook_Header) {
	o.Key = source.GetKey()
	o.Value = source.GetValue()
}

func (o *NotificationChannelSpec_Webhook_Header) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*NotificationChannelSpec_Webhook_Header))
}

func (o *AlertingThreshold) GotenObjectExt() {}

func (o *AlertingThreshold) MakeFullFieldMask() *AlertingThreshold_FieldMask {
	return FullAlertingThreshold_FieldMask()
}

func (o *AlertingThreshold) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullAlertingThreshold_FieldMask()
}

func (o *AlertingThreshold) MakeDiffFieldMask(other *AlertingThreshold) *AlertingThreshold_FieldMask {
	if o == nil && other == nil {
		return &AlertingThreshold_FieldMask{}
	}
	if o == nil || other == nil {
		return FullAlertingThreshold_FieldMask()
	}

	res := &AlertingThreshold_FieldMask{}
	if o.GetValue() != other.GetValue() {
		res.Paths = append(res.Paths, &AlertingThreshold_FieldTerminalPath{selector: AlertingThreshold_FieldPathSelectorValue})
	}
	if o.GetIsInclusive() != other.GetIsInclusive() {
		res.Paths = append(res.Paths, &AlertingThreshold_FieldTerminalPath{selector: AlertingThreshold_FieldPathSelectorIsInclusive})
	}
	return res
}

func (o *AlertingThreshold) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*AlertingThreshold))
}

func (o *AlertingThreshold) Clone() *AlertingThreshold {
	if o == nil {
		return nil
	}
	result := &AlertingThreshold{}
	result.Value = o.Value
	result.IsInclusive = o.IsInclusive
	return result
}

func (o *AlertingThreshold) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *AlertingThreshold) Merge(source *AlertingThreshold) {
	o.Value = source.GetValue()
	o.IsInclusive = source.GetIsInclusive()
}

func (o *AlertingThreshold) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*AlertingThreshold))
}
