// Code generated by protoc-gen-goten-resource
// Resource: TsEntry
// DO NOT EDIT!!!

package ts_entry

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	rcommon "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/common"
	ts_condition "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/ts_condition"
	monitoring_common "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/common"
	meta "github.com/cloudwan/goten-sdk/types/meta"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// ensure the imports are used
var (
	_ = new(gotenresource.ListQuery)
)

// make sure we're using proto imports
var (
	_ = &rcommon.LogCndSpec{}
	_ = &ts_condition.TsCondition{}
	_ = &monitoring_common.LabelDescriptor{}
	_ = &durationpb.Duration{}
	_ = &timestamppb.Timestamp{}
	_ = &meta.Meta{}
)

type TsEntryList []*TsEntry

func (l TsEntryList) Append(item gotenresource.Resource) gotenresource.ResourceList {
	return append(l, item.(*TsEntry))
}

func (l TsEntryList) AppendList(list gotenresource.ResourceList) gotenresource.ResourceList {
	return append(l, list.(TsEntryList)...)
}

func (l TsEntryList) Slice(first, second int) gotenresource.ResourceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l TsEntryList) At(idx int) gotenresource.Resource {
	return l[idx]
}

func (l TsEntryList) Set(idx int, res gotenresource.Resource) {
	l[idx] = res.(*TsEntry)
}

func (l TsEntryList) Length() int {
	return len(l)
}

type TsEntryChangeList []*TsEntryChange

func (l TsEntryChangeList) Append(item gotenresource.ResourceChange) gotenresource.ResourceChangeList {
	return append(l, item.(*TsEntryChange))
}

func (l TsEntryChangeList) AppendList(list gotenresource.ResourceChangeList) gotenresource.ResourceChangeList {
	return append(l, list.(TsEntryChangeList)...)
}

func (l TsEntryChangeList) Slice(first, second int) gotenresource.ResourceChangeList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l TsEntryChangeList) At(idx int) gotenresource.ResourceChange {
	return l[idx]
}

func (l TsEntryChangeList) Set(idx int, change gotenresource.ResourceChange) {
	l[idx] = change.(*TsEntryChange)
}

func (l TsEntryChangeList) Length() int {
	return len(l)
}

type TsEntryNameList []*Name

func (l TsEntryNameList) Append(name gotenresource.Name) gotenresource.NameList {
	return append(l, name.(*Name))
}

func (l TsEntryNameList) AppendList(list gotenresource.NameList) gotenresource.NameList {
	return append(l, list.(TsEntryNameList)...)
}

func (l TsEntryNameList) Slice(first, second int) gotenresource.NameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l TsEntryNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l TsEntryNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*Name)
}

func (l TsEntryNameList) Length() int {
	return len(l)
}

type TsEntryReferenceList []*Reference

func (l TsEntryReferenceList) Append(ref gotenresource.Reference) gotenresource.ReferenceList {
	return append(l, ref.(*Reference))
}

func (l TsEntryReferenceList) AppendList(list gotenresource.ReferenceList) gotenresource.ReferenceList {
	return append(l, list.(TsEntryReferenceList)...)
}

func (l TsEntryReferenceList) Slice(first, second int) gotenresource.ReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l TsEntryReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l TsEntryReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*Reference)
}

func (l TsEntryReferenceList) Length() int {
	return len(l)
}

type TsEntryParentNameList []*ParentName

func (l TsEntryParentNameList) Append(name gotenresource.Name) gotenresource.ParentNameList {
	return append(l, name.(*ParentName))
}

func (l TsEntryParentNameList) AppendList(list gotenresource.ParentNameList) gotenresource.ParentNameList {
	return append(l, list.(TsEntryParentNameList)...)
}

func (l TsEntryParentNameList) Slice(first, second int) gotenresource.ParentNameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l TsEntryParentNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l TsEntryParentNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*ParentName)
}

func (l TsEntryParentNameList) Length() int {
	return len(l)
}

type TsEntryParentReferenceList []*ParentReference

func (l TsEntryParentReferenceList) Append(ref gotenresource.Reference) gotenresource.ParentReferenceList {
	return append(l, ref.(*ParentReference))
}

func (l TsEntryParentReferenceList) AppendList(list gotenresource.ParentReferenceList) gotenresource.ParentReferenceList {
	return append(l, list.(TsEntryParentReferenceList)...)
}

func (l TsEntryParentReferenceList) Slice(first, second int) gotenresource.ParentReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l TsEntryParentReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l TsEntryParentReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*ParentReference)
}

func (l TsEntryParentReferenceList) Length() int {
	return len(l)
}

type TsEntryMap map[Name]*TsEntry

func (m TsEntryMap) Get(name gotenresource.Name) gotenresource.Resource {
	return m[*name.(*Name)]
}

func (m TsEntryMap) Set(res gotenresource.Resource) {
	tRes := res.(*TsEntry)
	m[*tRes.Name] = tRes
}

func (m TsEntryMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m TsEntryMap) Length() int {
	return len(m)
}

func (m TsEntryMap) ForEach(cb func(gotenresource.Name, gotenresource.Resource) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}

type TsEntryChangeMap map[Name]*TsEntryChange

func (m TsEntryChangeMap) Get(name gotenresource.Name) gotenresource.ResourceChange {
	return m[*name.(*Name)]
}

func (m TsEntryChangeMap) Set(change gotenresource.ResourceChange) {
	tChange := change.(*TsEntryChange)
	m[*tChange.GetTsEntryName()] = tChange
}

func (m TsEntryChangeMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m TsEntryChangeMap) Length() int {
	return len(m)
}

func (m TsEntryChangeMap) ForEach(cb func(gotenresource.Name, gotenresource.ResourceChange) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}
