// Code generated by protoc-gen-goten-go
// File: edgelq/alerting/proto/v1/ts_entry.proto
// DO NOT EDIT!!!

package ts_entry

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	rcommon "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/common"
	ts_condition "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/ts_condition"
	monitoring_common "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/common"
	meta "github.com/cloudwan/goten-sdk/types/meta"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &rcommon.LogCndSpec{}
	_ = &ts_condition.TsCondition{}
	_ = &monitoring_common.LabelDescriptor{}
	_ = &durationpb.Duration{}
	_ = &timestamppb.Timestamp{}
	_ = &meta.Meta{}
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// TsEntry contains stateful data for each unique Group by fields
// combination within individual TsCondition resource. Each TsEntry
// has own set of alerts too.
// TsEntry contains dynamic thresholds or anomaly detection models.
type TsEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of TsEntry
	// When creating a new instance, this field is optional and if not provided,
	// it will be generated automatically. Last ID segment must conform to the
	// following regex: [\\w+/=]{1,256}
	Name *Name `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty"`
	// Metadata is an object with information like create, update and delete time
	// (for async deleted resources), has user labels/annotations, sharding
	// information, multi-region syncing information and may have non-schema
	// owners (useful for taking ownership of resources belonging to lower level
	// services by higher ones).
	Metadata *meta.Meta `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Identification information
	Info *TsEntry_Info `protobuf:"bytes,3,opt,name=info,proto3" json:"info,omitempty"`
	// State with anomaly detection models and dynamic thresholds.
	State *TsEntry_State `protobuf:"bytes,4,opt,name=state,proto3" json:"state,omitempty"`
	// Internal field.
	Internal *TsEntry_Internal `protobuf:"bytes,5,opt,name=internal,proto3" json:"internal,omitempty"`
}

func (m *TsEntry) Reset() {
	*m = TsEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_ts_entry_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *TsEntry) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*TsEntry) ProtoMessage() {}

func (m *TsEntry) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_ts_entry_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*TsEntry) GotenMessage() {}

// Deprecated, Use TsEntry.ProtoReflect.Descriptor instead.
func (*TsEntry) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_ts_entry_proto_rawDescGZIP(), []int{0}
}

func (m *TsEntry) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *TsEntry) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *TsEntry) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *TsEntry) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *TsEntry) GetName() *Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *TsEntry) GetMetadata() *meta.Meta {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *TsEntry) GetInfo() *TsEntry_Info {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *TsEntry) GetState() *TsEntry_State {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *TsEntry) GetInternal() *TsEntry_Internal {
	if m != nil {
		return m.Internal
	}
	return nil
}

func (m *TsEntry) SetName(fv *Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "TsEntry"))
	}
	m.Name = fv
}

func (m *TsEntry) SetMetadata(fv *meta.Meta) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Metadata", "TsEntry"))
	}
	m.Metadata = fv
}

func (m *TsEntry) SetInfo(fv *TsEntry_Info) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Info", "TsEntry"))
	}
	m.Info = fv
}

func (m *TsEntry) SetState(fv *TsEntry_State) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "State", "TsEntry"))
	}
	m.State = fv
}

func (m *TsEntry) SetInternal(fv *TsEntry_Internal) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Internal", "TsEntry"))
	}
	m.Internal = fv
}

// Info provides unique description of a resource.
type TsEntry_Info struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Alerting resource points to the original resource associated with this
	// TsEntry. This meta reference works like dynamic type (any service, any
	// resource).
	// TODO: We could use of "DynamicReference" message type. It can be similar
	// to OwnerReference, except it works more like reference (uses
	// EstablishReferences...). It can support most normal behaviors, like
	// CASCADE DELETE/UNSET.
	AlertingResource *meta.OwnerReference `protobuf:"bytes,1,opt,name=alerting_resource,json=alertingResource,proto3" json:"alerting_resource,omitempty"`
	// Binary time series key containing labels information.
	GroupByKey []byte `protobuf:"bytes,2,opt,name=group_by_key,json=groupByKey,proto3" json:"group_by_key,omitempty"`
	// Common metric labels
	CommonMetricLabels map[string]string `protobuf:"bytes,3,rep,name=common_metric_labels,json=commonMetricLabels,proto3" json:"common_metric_labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Common resource labels.
	CommonResourceLabels map[string]string `protobuf:"bytes,4,rep,name=common_resource_labels,json=commonResourceLabels,proto3" json:"common_resource_labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *TsEntry_Info) Reset() {
	*m = TsEntry_Info{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_ts_entry_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *TsEntry_Info) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*TsEntry_Info) ProtoMessage() {}

func (m *TsEntry_Info) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_ts_entry_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*TsEntry_Info) GotenMessage() {}

// Deprecated, Use TsEntry_Info.ProtoReflect.Descriptor instead.
func (*TsEntry_Info) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_ts_entry_proto_rawDescGZIP(), []int{0, 0}
}

func (m *TsEntry_Info) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *TsEntry_Info) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *TsEntry_Info) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *TsEntry_Info) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *TsEntry_Info) GetAlertingResource() *meta.OwnerReference {
	if m != nil {
		return m.AlertingResource
	}
	return nil
}

func (m *TsEntry_Info) GetGroupByKey() []byte {
	if m != nil {
		return m.GroupByKey
	}
	return nil
}

func (m *TsEntry_Info) GetCommonMetricLabels() map[string]string {
	if m != nil {
		return m.CommonMetricLabels
	}
	return nil
}

func (m *TsEntry_Info) GetCommonResourceLabels() map[string]string {
	if m != nil {
		return m.CommonResourceLabels
	}
	return nil
}

func (m *TsEntry_Info) SetAlertingResource(fv *meta.OwnerReference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AlertingResource", "TsEntry_Info"))
	}
	m.AlertingResource = fv
}

func (m *TsEntry_Info) SetGroupByKey(fv []byte) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "GroupByKey", "TsEntry_Info"))
	}
	m.GroupByKey = fv
}

func (m *TsEntry_Info) SetCommonMetricLabels(fv map[string]string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CommonMetricLabels", "TsEntry_Info"))
	}
	m.CommonMetricLabels = fv
}

func (m *TsEntry_Info) SetCommonResourceLabels(fv map[string]string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CommonResourceLabels", "TsEntry_Info"))
	}
	m.CommonResourceLabels = fv
}

// State contains all stateful data that is necessary for alert
// detection: Individualised adaptive thresholds and anomaly
// detection models.
type TsEntry_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Anomaly detection models for each analysis window.
	Models []*TsEntry_State_AnomalyModelData `protobuf:"bytes,1,rep,name=models,proto3" json:"models,omitempty"`
	// Adaptive thresholds (per each query in TsCondition).
	Thresholds []*TsEntry_State_AdaptiveThresholdInfo `protobuf:"bytes,2,rep,name=thresholds,proto3" json:"thresholds,omitempty"`
}

func (m *TsEntry_State) Reset() {
	*m = TsEntry_State{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_ts_entry_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *TsEntry_State) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*TsEntry_State) ProtoMessage() {}

func (m *TsEntry_State) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_ts_entry_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*TsEntry_State) GotenMessage() {}

// Deprecated, Use TsEntry_State.ProtoReflect.Descriptor instead.
func (*TsEntry_State) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_ts_entry_proto_rawDescGZIP(), []int{0, 1}
}

func (m *TsEntry_State) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *TsEntry_State) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *TsEntry_State) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *TsEntry_State) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *TsEntry_State) GetModels() []*TsEntry_State_AnomalyModelData {
	if m != nil {
		return m.Models
	}
	return nil
}

func (m *TsEntry_State) GetThresholds() []*TsEntry_State_AdaptiveThresholdInfo {
	if m != nil {
		return m.Thresholds
	}
	return nil
}

func (m *TsEntry_State) SetModels(fv []*TsEntry_State_AnomalyModelData) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Models", "TsEntry_State"))
	}
	m.Models = fv
}

func (m *TsEntry_State) SetThresholds(fv []*TsEntry_State_AdaptiveThresholdInfo) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Thresholds", "TsEntry_State"))
	}
	m.Thresholds = fv
}

// Internal data.
type TsEntry_Internal struct {
	state            protoimpl.MessageState
	sizeCache        protoimpl.SizeCache
	unknownFields    protoimpl.UnknownFields
	AlertingLocation rcommon.PolicySpec_ProcessingLocation `protobuf:"varint,1,opt,name=alerting_location,json=alertingLocation,proto3,enum=ntt.alerting.v1.PolicySpec_ProcessingLocation" json:"alerting_location,omitempty"`
	SpecGeneration   int32                                 `protobuf:"varint,2,opt,name=spec_generation,json=specGeneration,proto3" json:"spec_generation,omitempty"`
}

func (m *TsEntry_Internal) Reset() {
	*m = TsEntry_Internal{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_ts_entry_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *TsEntry_Internal) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*TsEntry_Internal) ProtoMessage() {}

func (m *TsEntry_Internal) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_ts_entry_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*TsEntry_Internal) GotenMessage() {}

// Deprecated, Use TsEntry_Internal.ProtoReflect.Descriptor instead.
func (*TsEntry_Internal) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_ts_entry_proto_rawDescGZIP(), []int{0, 2}
}

func (m *TsEntry_Internal) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *TsEntry_Internal) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *TsEntry_Internal) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *TsEntry_Internal) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *TsEntry_Internal) GetAlertingLocation() rcommon.PolicySpec_ProcessingLocation {
	if m != nil {
		return m.AlertingLocation
	}
	return rcommon.PolicySpec_UNDEFINED
}

func (m *TsEntry_Internal) GetSpecGeneration() int32 {
	if m != nil {
		return m.SpecGeneration
	}
	return int32(0)
}

func (m *TsEntry_Internal) SetAlertingLocation(fv rcommon.PolicySpec_ProcessingLocation) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AlertingLocation", "TsEntry_Internal"))
	}
	m.AlertingLocation = fv
}

func (m *TsEntry_Internal) SetSpecGeneration(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SpecGeneration", "TsEntry_Internal"))
	}
	m.SpecGeneration = fv
}

// AnomalyModelData contains data for specific analysis window.
type TsEntry_State_AnomalyModelData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Analysis window size.
	AnalysisWindow *durationpb.Duration `protobuf:"bytes,1,opt,name=analysis_window,json=analysisWindow,proto3" json:"analysis_window,omitempty"`
	// Model binary data.
	ModelData []byte `protobuf:"bytes,2,opt,name=model_data,json=modelData,proto3" json:"model_data,omitempty"`
	// Average training errors (one float per each query)
	TrainingMeanErr []float64 `protobuf:"fixed64,3,rep,packed,name=training_mean_err,json=trainingMeanErr,proto3" json:"training_mean_err,omitempty"`
	// Maximum training errors (one float per each query)
	TrainingMaxErr []float64 `protobuf:"fixed64,4,rep,packed,name=training_max_err,json=trainingMaxErr,proto3" json:"training_max_err,omitempty"`
	// Number of epochs used to train model
	TrainedInEpochs int32 `protobuf:"varint,5,opt,name=trained_in_epochs,json=trainedInEpochs,proto3" json:"trained_in_epochs,omitempty"`
	// Informs how long it took to train this model.
	TrainedIn *durationpb.Duration `protobuf:"bytes,6,opt,name=trained_in,json=trainedIn,proto3" json:"trained_in,omitempty"`
	// Indicates if another training should be executed, and when.
	TrainAfter *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=train_after,json=trainAfter,proto3" json:"train_after,omitempty"`
	// Training period that was selected for this model.
	TrainingPeriod *monitoring_common.TimeInterval `protobuf:"bytes,8,opt,name=training_period,json=trainingPeriod,proto3" json:"training_period,omitempty"`
	// Sensitiveness (also called anomaly thresholds) per each
	// query in TsCondition.
	// Alert is raised when anomaly is detected for any of
	// time series data.
	Sensitiveness []*TsEntry_State_AnomalyModelSensitiveness `protobuf:"bytes,9,rep,name=sensitiveness,proto3" json:"sensitiveness,omitempty"`
}

func (m *TsEntry_State_AnomalyModelData) Reset() {
	*m = TsEntry_State_AnomalyModelData{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_ts_entry_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *TsEntry_State_AnomalyModelData) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*TsEntry_State_AnomalyModelData) ProtoMessage() {}

func (m *TsEntry_State_AnomalyModelData) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_ts_entry_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*TsEntry_State_AnomalyModelData) GotenMessage() {}

// Deprecated, Use TsEntry_State_AnomalyModelData.ProtoReflect.Descriptor instead.
func (*TsEntry_State_AnomalyModelData) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_ts_entry_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (m *TsEntry_State_AnomalyModelData) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *TsEntry_State_AnomalyModelData) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *TsEntry_State_AnomalyModelData) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *TsEntry_State_AnomalyModelData) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *TsEntry_State_AnomalyModelData) GetAnalysisWindow() *durationpb.Duration {
	if m != nil {
		return m.AnalysisWindow
	}
	return nil
}

func (m *TsEntry_State_AnomalyModelData) GetModelData() []byte {
	if m != nil {
		return m.ModelData
	}
	return nil
}

func (m *TsEntry_State_AnomalyModelData) GetTrainingMeanErr() []float64 {
	if m != nil {
		return m.TrainingMeanErr
	}
	return nil
}

func (m *TsEntry_State_AnomalyModelData) GetTrainingMaxErr() []float64 {
	if m != nil {
		return m.TrainingMaxErr
	}
	return nil
}

func (m *TsEntry_State_AnomalyModelData) GetTrainedInEpochs() int32 {
	if m != nil {
		return m.TrainedInEpochs
	}
	return int32(0)
}

func (m *TsEntry_State_AnomalyModelData) GetTrainedIn() *durationpb.Duration {
	if m != nil {
		return m.TrainedIn
	}
	return nil
}

func (m *TsEntry_State_AnomalyModelData) GetTrainAfter() *timestamppb.Timestamp {
	if m != nil {
		return m.TrainAfter
	}
	return nil
}

func (m *TsEntry_State_AnomalyModelData) GetTrainingPeriod() *monitoring_common.TimeInterval {
	if m != nil {
		return m.TrainingPeriod
	}
	return nil
}

func (m *TsEntry_State_AnomalyModelData) GetSensitiveness() []*TsEntry_State_AnomalyModelSensitiveness {
	if m != nil {
		return m.Sensitiveness
	}
	return nil
}

func (m *TsEntry_State_AnomalyModelData) SetAnalysisWindow(fv *durationpb.Duration) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AnalysisWindow", "TsEntry_State_AnomalyModelData"))
	}
	m.AnalysisWindow = fv
}

func (m *TsEntry_State_AnomalyModelData) SetModelData(fv []byte) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ModelData", "TsEntry_State_AnomalyModelData"))
	}
	m.ModelData = fv
}

func (m *TsEntry_State_AnomalyModelData) SetTrainingMeanErr(fv []float64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TrainingMeanErr", "TsEntry_State_AnomalyModelData"))
	}
	m.TrainingMeanErr = fv
}

func (m *TsEntry_State_AnomalyModelData) SetTrainingMaxErr(fv []float64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TrainingMaxErr", "TsEntry_State_AnomalyModelData"))
	}
	m.TrainingMaxErr = fv
}

func (m *TsEntry_State_AnomalyModelData) SetTrainedInEpochs(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TrainedInEpochs", "TsEntry_State_AnomalyModelData"))
	}
	m.TrainedInEpochs = fv
}

func (m *TsEntry_State_AnomalyModelData) SetTrainedIn(fv *durationpb.Duration) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TrainedIn", "TsEntry_State_AnomalyModelData"))
	}
	m.TrainedIn = fv
}

func (m *TsEntry_State_AnomalyModelData) SetTrainAfter(fv *timestamppb.Timestamp) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TrainAfter", "TsEntry_State_AnomalyModelData"))
	}
	m.TrainAfter = fv
}

func (m *TsEntry_State_AnomalyModelData) SetTrainingPeriod(fv *monitoring_common.TimeInterval) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TrainingPeriod", "TsEntry_State_AnomalyModelData"))
	}
	m.TrainingPeriod = fv
}

func (m *TsEntry_State_AnomalyModelData) SetSensitiveness(fv []*TsEntry_State_AnomalyModelSensitiveness) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Sensitiveness", "TsEntry_State_AnomalyModelData"))
	}
	m.Sensitiveness = fv
}

// AnomalyModelSensitiveness defines when anomaly is considered
// large enough to warrant new alert creation.
type TsEntry_State_AnomalyModelSensitiveness struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of the matching query in TsCondition
	QueryName string `protobuf:"bytes,1,opt,name=query_name,json=queryName,proto3" json:"query_name,omitempty"`
	// Threshold after which anomaly is considered too big.
	AnomalyThreshold float64 `protobuf:"fixed64,2,opt,name=anomaly_threshold,json=anomalyThreshold,proto3" json:"anomaly_threshold,omitempty"`
}

func (m *TsEntry_State_AnomalyModelSensitiveness) Reset() {
	*m = TsEntry_State_AnomalyModelSensitiveness{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_ts_entry_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *TsEntry_State_AnomalyModelSensitiveness) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*TsEntry_State_AnomalyModelSensitiveness) ProtoMessage() {}

func (m *TsEntry_State_AnomalyModelSensitiveness) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_ts_entry_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*TsEntry_State_AnomalyModelSensitiveness) GotenMessage() {}

// Deprecated, Use TsEntry_State_AnomalyModelSensitiveness.ProtoReflect.Descriptor instead.
func (*TsEntry_State_AnomalyModelSensitiveness) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_ts_entry_proto_rawDescGZIP(), []int{0, 1, 1}
}

func (m *TsEntry_State_AnomalyModelSensitiveness) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *TsEntry_State_AnomalyModelSensitiveness) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *TsEntry_State_AnomalyModelSensitiveness) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *TsEntry_State_AnomalyModelSensitiveness) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *TsEntry_State_AnomalyModelSensitiveness) GetQueryName() string {
	if m != nil {
		return m.QueryName
	}
	return ""
}

func (m *TsEntry_State_AnomalyModelSensitiveness) GetAnomalyThreshold() float64 {
	if m != nil {
		return m.AnomalyThreshold
	}
	return float64(0)
}

func (m *TsEntry_State_AnomalyModelSensitiveness) SetQueryName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "QueryName", "TsEntry_State_AnomalyModelSensitiveness"))
	}
	m.QueryName = fv
}

func (m *TsEntry_State_AnomalyModelSensitiveness) SetAnomalyThreshold(fv float64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AnomalyThreshold", "TsEntry_State_AnomalyModelSensitiveness"))
	}
	m.AnomalyThreshold = fv
}

// AdaptiveThresholdInfo contains dynamic adaptive thresholds.
type TsEntry_State_AdaptiveThresholdInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Matching query name in TsCondition
	QueryName string `protobuf:"bytes,1,opt,name=query_name,json=queryName,proto3" json:"query_name,omitempty"`
	// Lower threshold value. Values below are considered violations.
	Lower *rcommon.AlertingThreshold `protobuf:"bytes,2,opt,name=lower,proto3" json:"lower,omitempty"`
	// Upper threshold value. Values above are considered violations.
	Upper *rcommon.AlertingThreshold `protobuf:"bytes,3,opt,name=upper,proto3" json:"upper,omitempty"`
	// Contains timestamp when thresholds should be adapted and checked
	// after.
	NextCheck *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=next_check,json=nextCheck,proto3" json:"next_check,omitempty"`
}

func (m *TsEntry_State_AdaptiveThresholdInfo) Reset() {
	*m = TsEntry_State_AdaptiveThresholdInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_ts_entry_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *TsEntry_State_AdaptiveThresholdInfo) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*TsEntry_State_AdaptiveThresholdInfo) ProtoMessage() {}

func (m *TsEntry_State_AdaptiveThresholdInfo) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_ts_entry_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*TsEntry_State_AdaptiveThresholdInfo) GotenMessage() {}

// Deprecated, Use TsEntry_State_AdaptiveThresholdInfo.ProtoReflect.Descriptor instead.
func (*TsEntry_State_AdaptiveThresholdInfo) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_ts_entry_proto_rawDescGZIP(), []int{0, 1, 2}
}

func (m *TsEntry_State_AdaptiveThresholdInfo) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *TsEntry_State_AdaptiveThresholdInfo) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *TsEntry_State_AdaptiveThresholdInfo) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *TsEntry_State_AdaptiveThresholdInfo) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *TsEntry_State_AdaptiveThresholdInfo) GetQueryName() string {
	if m != nil {
		return m.QueryName
	}
	return ""
}

func (m *TsEntry_State_AdaptiveThresholdInfo) GetLower() *rcommon.AlertingThreshold {
	if m != nil {
		return m.Lower
	}
	return nil
}

func (m *TsEntry_State_AdaptiveThresholdInfo) GetUpper() *rcommon.AlertingThreshold {
	if m != nil {
		return m.Upper
	}
	return nil
}

func (m *TsEntry_State_AdaptiveThresholdInfo) GetNextCheck() *timestamppb.Timestamp {
	if m != nil {
		return m.NextCheck
	}
	return nil
}

func (m *TsEntry_State_AdaptiveThresholdInfo) SetQueryName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "QueryName", "TsEntry_State_AdaptiveThresholdInfo"))
	}
	m.QueryName = fv
}

func (m *TsEntry_State_AdaptiveThresholdInfo) SetLower(fv *rcommon.AlertingThreshold) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Lower", "TsEntry_State_AdaptiveThresholdInfo"))
	}
	m.Lower = fv
}

func (m *TsEntry_State_AdaptiveThresholdInfo) SetUpper(fv *rcommon.AlertingThreshold) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Upper", "TsEntry_State_AdaptiveThresholdInfo"))
	}
	m.Upper = fv
}

func (m *TsEntry_State_AdaptiveThresholdInfo) SetNextCheck(fv *timestamppb.Timestamp) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NextCheck", "TsEntry_State_AdaptiveThresholdInfo"))
	}
	m.NextCheck = fv
}

var edgelq_alerting_proto_v1_ts_entry_proto preflect.FileDescriptor

var edgelq_alerting_proto_v1_ts_entry_proto_rawDesc = []byte{
	0x0a, 0x27, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x73, 0x5f, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x6e, 0x74, 0x74, 0x2e, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x74, 0x65, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24,
	0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x65,
	0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x34, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31,
	0x2f, 0x73, 0x70, 0x65, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa9, 0x1a, 0x0a,
	0x07, 0x54, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xb2, 0xda, 0x21, 0x0b, 0x0a, 0x09, 0x0a, 0x07,
	0x54, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x37, 0x0a, 0x04,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x04, 0xf0, 0xd9, 0x21, 0x01, 0x52,
	0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x34, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3d, 0x0a, 0x08, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x1a, 0xda, 0x03, 0x0a, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x48, 0x0a, 0x11, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x10, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x20, 0x0a,
	0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x12,
	0x67, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x6d, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x14, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x45, 0x0a, 0x17, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x47,
	0x0a, 0x19, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x92, 0x08, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x47, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x41, 0x6e, 0x6f, 0x6d, 0x61, 0x6c, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x12, 0x54, 0x0a, 0x0a, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x41,
	0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73,
	0x1a, 0x98, 0x04, 0x0a, 0x10, 0x41, 0x6e, 0x6f, 0x6d, 0x61, 0x6c, 0x79, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x0f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x61, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x01, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x61,
	0x6e, 0x45, 0x72, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x65, 0x72, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28, 0x01, 0x52, 0x0e,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x78, 0x45, 0x72, 0x72, 0x12, 0x2a,
	0x0a, 0x11, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x65, 0x70, 0x6f,
	0x63, 0x68, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x65, 0x64, 0x49, 0x6e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x73, 0x12, 0x38, 0x0a, 0x0a, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x65, 0x64, 0x49, 0x6e, 0x12, 0x3b, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x66,
	0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x41, 0x66, 0x74, 0x65,
	0x72, 0x12, 0x48, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x0e, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x5e, 0x0a, 0x0d, 0x73,
	0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x41, 0x6e, 0x6f, 0x6d, 0x61, 0x6c, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53,
	0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x0d, 0x73, 0x65,
	0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x1a, 0x67, 0x0a, 0x19, 0x41,
	0x6e, 0x6f, 0x6d, 0x61, 0x6c, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x65, 0x6e, 0x73, 0x69,
	0x74, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x6e, 0x6f, 0x6d, 0x61,
	0x6c, 0x79, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x10, 0x61, 0x6e, 0x6f, 0x6d, 0x61, 0x6c, 0x79, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x1a, 0xe5, 0x01, 0x0a, 0x15, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76,
	0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d,
	0x0a, 0x0a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a,
	0x05, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x52, 0x05, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x05, 0x75, 0x70, 0x70, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x05, 0x75, 0x70, 0x70, 0x65,
	0x72, 0x12, 0x39, 0x0a, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x1a, 0x96, 0x01, 0x0a,
	0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x61, 0x0a, 0x11, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x70, 0x65,
	0x63, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0xf0, 0xd9, 0x21, 0x01, 0x52, 0x10, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f,
	0x73, 0x70, 0x65, 0x63, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x70, 0x65, 0x63, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x90, 0x0b, 0xea, 0x41, 0x85, 0x01, 0x0a, 0x1b, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x54, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x66, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x7d, 0x2f,
	0x74, 0x73, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x74, 0x73,
	0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x74, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x74, 0x73, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x7d, 0x92, 0xd9, 0x21, 0x90, 0x08, 0x0a, 0x09, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x12, 0x09, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x1a, 0x0b, 0x54, 0x73,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x18, 0x67, 0x6f, 0x74, 0x65, 0x6e,
	0x2e, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x2a, 0x0e, 0x5b, 0x5c, 0x77, 0x2b, 0x2f, 0x3d, 0x5d, 0x7b, 0x31, 0x2c, 0x32,
	0x35, 0x36, 0x7d, 0x38, 0x05, 0x42, 0xa9, 0x02, 0x08, 0x02, 0x12, 0x06, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x1b, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x0d, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x2c, 0x0a, 0x1b, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x64, 0x12,
	0x0d, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x36,
	0x0a, 0x1c, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x16,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x20, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x20, 0x77,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x12, 0x31, 0x0a, 0x1a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65,
	0x6e, 0x65, 0x73, 0x73, 0x12, 0x13, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x20, 0x73, 0x65, 0x6e, 0x73,
	0x69, 0x74, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x16, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x2e, 0x6c, 0x6f,
	0x77, 0x65, 0x72, 0x12, 0x10, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x20, 0x74, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x73, 0x12, 0x2a, 0x0a, 0x16, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x2e, 0x75, 0x70, 0x70, 0x65, 0x72, 0x12,
	0x10, 0x55, 0x70, 0x70, 0x65, 0x72, 0x20, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x73, 0x42, 0x92, 0x05, 0x08, 0x03, 0x12, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d,
	0x0a, 0x16, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x13, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69,
	0x61, 0x74, 0x65, 0x64, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x31, 0x0a,
	0x19, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x14, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x20, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x12, 0x35, 0x0a, 0x1b, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12,
	0x16, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x36, 0x0a, 0x1c, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x16, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x20, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x20, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x12,
	0x3c, 0x0a, 0x1e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x61, 0x6e, 0x5f, 0x65, 0x72,
	0x72, 0x12, 0x1a, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x20, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x20, 0x6d, 0x65, 0x61, 0x6e, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x3a, 0x0a,
	0x1d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x65, 0x72, 0x72, 0x12, 0x19,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x20, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x6d,
	0x61, 0x78, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x3d, 0x0a, 0x1e, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x65,
	0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x73, 0x12, 0x1b, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x20, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x73, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x17, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64,
	0x5f, 0x69, 0x6e, 0x12, 0x13, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x20, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x18, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x5f, 0x61,
	0x66, 0x74, 0x65, 0x72, 0x12, 0x1d, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x20, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x64, 0x20, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x1c, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x12, 0x19, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x20, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x31,
	0x0a, 0x1a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x73,
	0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x13, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x20, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73,
	0x73, 0x12, 0x23, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x74, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x73, 0x12, 0x0f, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x73, 0x20, 0x64, 0x61, 0x74, 0x61, 0xb2, 0xdf, 0x21, 0xb6, 0x01, 0x0a, 0x95, 0x01, 0x0a, 0x75,
	0x0a, 0x12, 0x62, 0x79, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x1b, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x6e, 0x61, 0x6d,
	0x65, 0x1a, 0x42, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x2d,
	0x2f, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2d, 0x2f,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2d, 0x2f, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x2f, 0x2d, 0x12, 0x1c, 0x0a, 0x1a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x1a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0xda, 0x94, 0x23, 0x02, 0x08, 0x01, 0xe2, 0xde, 0x21, 0x02, 0x08, 0x02, 0xc2, 0x85, 0x2c,
	0x27, 0x22, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x2a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x42, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x08,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x42, 0x8a, 0x02, 0xe8, 0xde, 0x21, 0x01, 0xd2,
	0xff, 0xd0, 0x02, 0x47, 0x0a, 0x0e, 0x74, 0x73, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x12, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71,
	0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f,
	0x76, 0x31, 0x2f, 0x74, 0x73, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0xa2, 0x80, 0xd1, 0x02, 0x49,
	0x0a, 0x0f, 0x74, 0x73, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x31,
	0x2f, 0x74, 0x73, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x62, 0x2e, 0x76,
	0x31, 0x42, 0x0c, 0x54, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x42, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x2f, 0x76, 0x31, 0x2f, 0x74, 0x73, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x3b, 0x74, 0x73, 0x5f,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	edgelq_alerting_proto_v1_ts_entry_proto_rawDescOnce sync.Once
	edgelq_alerting_proto_v1_ts_entry_proto_rawDescData = edgelq_alerting_proto_v1_ts_entry_proto_rawDesc
)

func edgelq_alerting_proto_v1_ts_entry_proto_rawDescGZIP() []byte {
	edgelq_alerting_proto_v1_ts_entry_proto_rawDescOnce.Do(func() {
		edgelq_alerting_proto_v1_ts_entry_proto_rawDescData = protoimpl.X.CompressGZIP(edgelq_alerting_proto_v1_ts_entry_proto_rawDescData)
	})
	return edgelq_alerting_proto_v1_ts_entry_proto_rawDescData
}

var edgelq_alerting_proto_v1_ts_entry_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var edgelq_alerting_proto_v1_ts_entry_proto_goTypes = []interface{}{
	(*TsEntry)(nil),                        // 0: ntt.alerting.v1.TsEntry
	(*TsEntry_Info)(nil),                   // 1: ntt.alerting.v1.TsEntry.Info
	(*TsEntry_State)(nil),                  // 2: ntt.alerting.v1.TsEntry.State
	(*TsEntry_Internal)(nil),               // 3: ntt.alerting.v1.TsEntry.Internal
	nil,                                    // 4: ntt.alerting.v1.TsEntry.Info.CommonMetricLabelsEntry
	nil,                                    // 5: ntt.alerting.v1.TsEntry.Info.CommonResourceLabelsEntry
	(*TsEntry_State_AnomalyModelData)(nil), // 6: ntt.alerting.v1.TsEntry.State.AnomalyModelData
	(*TsEntry_State_AnomalyModelSensitiveness)(nil), // 7: ntt.alerting.v1.TsEntry.State.AnomalyModelSensitiveness
	(*TsEntry_State_AdaptiveThresholdInfo)(nil),     // 8: ntt.alerting.v1.TsEntry.State.AdaptiveThresholdInfo
	(*meta.Meta)(nil),                          // 9: goten.types.Meta
	(*meta.OwnerReference)(nil),                // 10: goten.types.OwnerReference
	(*durationpb.Duration)(nil),                // 11: google.protobuf.Duration
	(*timestamppb.Timestamp)(nil),              // 12: google.protobuf.Timestamp
	(*monitoring_common.TimeInterval)(nil),     // 13: ntt.monitoring.v4.TimeInterval
	(*rcommon.AlertingThreshold)(nil),          // 14: ntt.alerting.v1.AlertingThreshold
	(rcommon.PolicySpec_ProcessingLocation)(0), // 15: ntt.alerting.v1.PolicySpec_ProcessingLocation
}
var edgelq_alerting_proto_v1_ts_entry_proto_depIdxs = []int32{
	9,  // 0: ntt.alerting.v1.TsEntry.metadata:type_name -> goten.types.Meta
	1,  // 1: ntt.alerting.v1.TsEntry.info:type_name -> ntt.alerting.v1.TsEntry.Info
	2,  // 2: ntt.alerting.v1.TsEntry.state:type_name -> ntt.alerting.v1.TsEntry.State
	3,  // 3: ntt.alerting.v1.TsEntry.internal:type_name -> ntt.alerting.v1.TsEntry.Internal
	10, // 4: ntt.alerting.v1.TsEntry.Info.alerting_resource:type_name -> goten.types.OwnerReference
	4,  // 5: ntt.alerting.v1.TsEntry.Info.common_metric_labels:type_name -> ntt.alerting.v1.TsEntry.Info.CommonMetricLabelsEntry
	5,  // 6: ntt.alerting.v1.TsEntry.Info.common_resource_labels:type_name -> ntt.alerting.v1.TsEntry.Info.CommonResourceLabelsEntry
	6,  // 7: ntt.alerting.v1.TsEntry.State.models:type_name -> ntt.alerting.v1.TsEntry.State.AnomalyModelData
	8,  // 8: ntt.alerting.v1.TsEntry.State.thresholds:type_name -> ntt.alerting.v1.TsEntry.State.AdaptiveThresholdInfo
	15, // 9: ntt.alerting.v1.TsEntry.Internal.alerting_location:type_name -> ntt.alerting.v1.PolicySpec_ProcessingLocation
	11, // 10: ntt.alerting.v1.TsEntry.State.AnomalyModelData.analysis_window:type_name -> google.protobuf.Duration
	11, // 11: ntt.alerting.v1.TsEntry.State.AnomalyModelData.trained_in:type_name -> google.protobuf.Duration
	12, // 12: ntt.alerting.v1.TsEntry.State.AnomalyModelData.train_after:type_name -> google.protobuf.Timestamp
	13, // 13: ntt.alerting.v1.TsEntry.State.AnomalyModelData.training_period:type_name -> ntt.monitoring.v4.TimeInterval
	7,  // 14: ntt.alerting.v1.TsEntry.State.AnomalyModelData.sensitiveness:type_name -> ntt.alerting.v1.TsEntry.State.AnomalyModelSensitiveness
	14, // 15: ntt.alerting.v1.TsEntry.State.AdaptiveThresholdInfo.lower:type_name -> ntt.alerting.v1.AlertingThreshold
	14, // 16: ntt.alerting.v1.TsEntry.State.AdaptiveThresholdInfo.upper:type_name -> ntt.alerting.v1.AlertingThreshold
	12, // 17: ntt.alerting.v1.TsEntry.State.AdaptiveThresholdInfo.next_check:type_name -> google.protobuf.Timestamp
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { edgelq_alerting_proto_v1_ts_entry_proto_init() }
func edgelq_alerting_proto_v1_ts_entry_proto_init() {
	if edgelq_alerting_proto_v1_ts_entry_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		edgelq_alerting_proto_v1_ts_entry_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TsEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_ts_entry_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TsEntry_Info); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_ts_entry_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TsEntry_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_ts_entry_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TsEntry_Internal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_ts_entry_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TsEntry_State_AnomalyModelData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_ts_entry_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TsEntry_State_AnomalyModelSensitiveness); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_ts_entry_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TsEntry_State_AdaptiveThresholdInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: edgelq_alerting_proto_v1_ts_entry_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           edgelq_alerting_proto_v1_ts_entry_proto_goTypes,
		DependencyIndexes: edgelq_alerting_proto_v1_ts_entry_proto_depIdxs,
		MessageInfos:      edgelq_alerting_proto_v1_ts_entry_proto_msgTypes,
	}.Build()
	edgelq_alerting_proto_v1_ts_entry_proto = out.File
	edgelq_alerting_proto_v1_ts_entry_proto_rawDesc = nil
	edgelq_alerting_proto_v1_ts_entry_proto_goTypes = nil
	edgelq_alerting_proto_v1_ts_entry_proto_depIdxs = nil
}
