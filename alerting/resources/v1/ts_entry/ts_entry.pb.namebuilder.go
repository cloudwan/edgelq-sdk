// Code generated by protoc-gen-goten-resource
// Resource: TsEntry
// DO NOT EDIT!!!

package ts_entry

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	policy "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/policy"
	ts_condition "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/ts_condition"
	monitoring_common "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/common"
	meta "github.com/cloudwan/goten-sdk/types/meta"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// make sure we're using proto imports
var (
	_ = &policy.Policy{}
	_ = &ts_condition.TsCondition{}
	_ = &monitoring_common.LabelDescriptor{}
	_ = &durationpb.Duration{}
	_ = &timestamppb.Timestamp{}
	_ = &meta.Meta{}
)

const (
	NamePattern_Project_Policy_TsCondition_Region = "projects/{project}/policies/{policy}/tsConditions/{ts_condition}/regions/{region}/tsEntries/{ts_entry}"
)

type NamePattern struct {
	Pattern gotenresource.NamePattern `firestore:"pattern"`
}

type NameBuilder struct {
	nameObj Name
}

func NewNameBuilder() *NameBuilder {
	return &NameBuilder{
		nameObj: Name{
			TsEntryId: gotenresource.WildcardId,
			ParentName: ParentName{
				NamePattern: NamePattern{
					// Set default pattern - just first.
					Pattern: NamePattern_Project_Policy_TsCondition_Region,
				},
				RegionId: gotenresource.WildcardId,
			},
		},
	}
}

func (b *NameBuilder) Name() *Name {
	copied := b.nameObj
	return &copied
}

func (b *NameBuilder) Reference() *Reference {
	return b.nameObj.AsReference()
}

func (b *NameBuilder) Parent() *ParentName {
	copied := b.nameObj.ParentName
	return &copied
}

func (b *NameBuilder) ParentReference() *ParentReference {
	return b.nameObj.ParentName.AsReference()
}

func (b *NameBuilder) SetId(id string) *NameBuilder {
	b.nameObj.TsEntryId = id
	return b
}

func (b *NameBuilder) SetTsCondition(parent *ts_condition.Name) *NameBuilder {
	parentName := &b.nameObj.ParentName

	switch parent.Pattern {
	case ts_condition.NamePattern_Project_Policy:
		parentName.Pattern = NamePattern_Project_Policy_TsCondition_Region
	}
	parentName.ProjectId = parent.ProjectId
	parentName.PolicyId = parent.PolicyId
	parentName.TsConditionId = parent.TsConditionId
	return b
}

func (b *NameBuilder) SetProjectId(id string) *NameBuilder {
	parentName := &b.nameObj.ParentName
	parentName.ProjectId = id

	// Set pattern if something matches for this set of IDs
	if parentName.ProjectId != "" && parentName.PolicyId != "" && parentName.TsConditionId != "" && parentName.RegionId != "" {
		parentName.Pattern = NamePattern_Project_Policy_TsCondition_Region
	}
	return b
}

func (b *NameBuilder) SetPolicyId(id string) *NameBuilder {
	parentName := &b.nameObj.ParentName
	parentName.PolicyId = id

	// Set pattern if something matches for this set of IDs
	if parentName.ProjectId != "" && parentName.PolicyId != "" && parentName.TsConditionId != "" && parentName.RegionId != "" {
		parentName.Pattern = NamePattern_Project_Policy_TsCondition_Region
	}
	return b
}

func (b *NameBuilder) SetTsConditionId(id string) *NameBuilder {
	parentName := &b.nameObj.ParentName
	parentName.TsConditionId = id

	// Set pattern if something matches for this set of IDs
	if parentName.ProjectId != "" && parentName.PolicyId != "" && parentName.TsConditionId != "" && parentName.RegionId != "" {
		parentName.Pattern = NamePattern_Project_Policy_TsCondition_Region
	}
	return b
}

func (b *NameBuilder) SetRegionId(id string) *NameBuilder {
	parentName := &b.nameObj.ParentName
	parentName.RegionId = id

	// Set pattern if something matches for this set of IDs
	if parentName.ProjectId != "" && parentName.PolicyId != "" && parentName.TsConditionId != "" && parentName.RegionId != "" {
		parentName.Pattern = NamePattern_Project_Policy_TsCondition_Region
	}
	return b
}
