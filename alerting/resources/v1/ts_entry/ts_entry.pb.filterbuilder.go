// Code generated by protoc-gen-goten-resource
// Resource: TsEntry
// DO NOT EDIT!!!

package ts_entry

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
	gotenfilter "github.com/cloudwan/goten-sdk/runtime/resource/filter"
)

// proto imports
import (
	rcommon "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/common"
	document "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/document"
	notification_channel "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/notification_channel"
	policy "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/policy"
	policy_template "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/policy_template"
	ts_condition "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/ts_condition"
	ts_condition_template "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/ts_condition_template"
	api "github.com/cloudwan/edgelq-sdk/common/api"
	iam_iam_common "github.com/cloudwan/edgelq-sdk/iam/resources/v1/common"
	iam_organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1/organization"
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1/project"
	logging_bucket "github.com/cloudwan/edgelq-sdk/logging/resources/v1/bucket"
	logging_common "github.com/cloudwan/edgelq-sdk/logging/resources/v1/common"
	logging_log "github.com/cloudwan/edgelq-sdk/logging/resources/v1/log"
	logging_log_descriptor "github.com/cloudwan/edgelq-sdk/logging/resources/v1/log_descriptor"
	monitoring_common "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/common"
	monitoring_metric_descriptor "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/metric_descriptor"
	monitoring_monitored_resource_descriptor "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/monitored_resource_descriptor"
	monitoring_project "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/project"
	monitoring_time_serie "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/time_serie"
	meta_common "github.com/cloudwan/goten-sdk/meta-service/resources/v1/common"
	meta_resource "github.com/cloudwan/goten-sdk/meta-service/resources/v1/resource"
	meta_service "github.com/cloudwan/goten-sdk/meta-service/resources/v1/service"
	meta "github.com/cloudwan/goten-sdk/types/meta"
	multi_region_policy "github.com/cloudwan/goten-sdk/types/multi_region_policy"
	anypb "google.golang.org/protobuf/types/known/anypb"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// ensure the imports are used
var (
	_ = gotenresource.ConditionContainsTypeAll
	_ = gotenfilter.AND
)

// make sure we're using proto imports
var (
	_ = &document.Document{}
	_ = &notification_channel.NotificationChannel{}
	_ = &policy.Policy{}
	_ = &policy_template.PolicyTemplate{}
	_ = &rcommon.LogCndSpec{}
	_ = &ts_condition.TsCondition{}
	_ = &ts_condition_template.TsConditionTemplate{}
	_ = api.LaunchStage(0)
	_ = &iam_iam_common.PCR{}
	_ = &iam_organization.Organization{}
	_ = &iam_project.Project{}
	_ = &logging_bucket.Bucket{}
	_ = &logging_common.LabelDescriptor{}
	_ = &logging_log.Log{}
	_ = &logging_log_descriptor.LogDescriptor{}
	_ = &monitoring_common.LabelDescriptor{}
	_ = &monitoring_metric_descriptor.MetricDescriptor{}
	_ = &monitoring_monitored_resource_descriptor.MonitoredResourceDescriptor{}
	_ = &monitoring_project.Project{}
	_ = &monitoring_time_serie.Point{}
	_ = &anypb.Any{}
	_ = &durationpb.Duration{}
	_ = &fieldmaskpb.FieldMask{}
	_ = &structpb.Struct{}
	_ = &timestamppb.Timestamp{}
	_ = &meta_common.LabelledDomain{}
	_ = &meta_resource.Resource{}
	_ = &meta_service.Service{}
	_ = &meta.Meta{}
	_ = &multi_region_policy.MultiRegionPolicy{}
)

type FilterBuilderOrCondition interface {
	_IsTsEntryFilterBuilderOrCondition()
}

type FilterBuilder struct {
	conds  []FilterCondition
	useNot bool
	op     gotenfilter.CompositeOperator
}

func NewFilterBuilder() *FilterBuilder {
	return NewAndFilterBuilder()
}

func NewAndFilterBuilder() *FilterBuilder {
	return &FilterBuilder{
		op: gotenfilter.AND,
	}
}

func NewOrFilterBuilder() *FilterBuilder {
	return &FilterBuilder{
		op: gotenfilter.OR,
	}
}

func (b *FilterBuilder) _IsTsEntryFilterBuilderOrCondition() {}

func (b *FilterBuilder) With(condOrBuilder FilterBuilderOrCondition, opts ...gotenfilter.FilterConditionOption) *FilterBuilder {
	var cond FilterCondition
	switch typedObj := condOrBuilder.(type) {
	case *Filter:
		cond = typedObj.GetCondition()
	case *FilterBuilder:
		cond = &FilterConditionComposite{Operator: typedObj.op, Conditions: typedObj.conds}
	case FilterCondition:
		cond = typedObj
	default:
		panic("Unknown condition or builder type")
	}
	cfg := gotenfilter.MakeFilterCondOptions(opts)
	if cfg.IsNot() {
		cond = &FilterConditionNot{cond}
	}
	b.conds = append(b.conds, cond)
	return b
}

func (b *FilterBuilder) Where(opts ...gotenfilter.FilterConditionOption) *filterCndBuilder {
	cfg := gotenfilter.MakeFilterCondOptions(opts)
	b.useNot = cfg.IsNot()
	return &filterCndBuilder{builder: b}
}

func (b *FilterBuilder) WherePath(fp TsEntry_FieldPath, opts ...gotenfilter.FilterConditionOption) *filterCndBuilderAnyPath {
	cfg := gotenfilter.MakeFilterCondOptions(opts)
	b.useNot = cfg.IsNot()
	return &filterCndBuilderAnyPath{builder: b, fp: fp}
}

func (b *FilterBuilder) Filter() *Filter {
	return &Filter{
		FilterCondition: &FilterConditionComposite{Operator: b.op, Conditions: b.conds},
	}
}

func (b *FilterBuilder) addCond(cond FilterCondition) *FilterBuilder {
	if b.useNot {
		cond = &FilterConditionNot{cond}
		b.useNot = false
	}
	b.conds = append(b.conds, cond)
	return b
}

type filterCndBuilderAnyPath struct {
	builder *FilterBuilder
	fp      TsEntry_FieldPath
}

func (b *filterCndBuilderAnyPath) Eq(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderAnyPath) Neq(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderAnyPath) Gt(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderAnyPath) Gte(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderAnyPath) Lt(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderAnyPath) Lte(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderAnyPath) In(values interface{}) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsEntry_FieldPathArrayOfValues: b.fp.WithIArrayOfValues(values),
	})
}

func (b *filterCndBuilderAnyPath) NotIn(values interface{}) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsEntry_FieldPathArrayOfValues: b.fp.WithIArrayOfValues(values),
	})
}

func (b *filterCndBuilderAnyPath) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: b.fp,
	})
}

func (b *filterCndBuilderAnyPath) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: b.fp,
	})
}

func (b *filterCndBuilderAnyPath) Contains(value interface{}) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: b.fp,
		Value:     b.fp.WithIArrayItemValue(value),
	})
}

func (b *filterCndBuilderAnyPath) ContainsAnyOf(values []interface{}) *FilterBuilder {
	itemValues := make([]TsEntry_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, b.fp.WithIArrayItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: b.fp,
		Values:    itemValues,
	})
}

func (b *filterCndBuilderAnyPath) ContainsAll(values []interface{}) *FilterBuilder {
	itemValues := make([]TsEntry_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, b.fp.WithIArrayItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: b.fp,
		Values:    itemValues,
	})
}

func (b *filterCndBuilderAnyPath) compare(op gotenfilter.CompareOperator, value interface{}) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:               op,
		TsEntry_FieldPathValue: b.fp.WithIValue(value),
	})
}

type filterCndBuilder struct {
	builder *FilterBuilder
}

func (b *filterCndBuilder) Name() *filterCndBuilderName {
	return &filterCndBuilderName{builder: b.builder}
}

func (b *filterCndBuilder) Metadata() *filterCndBuilderMetadata {
	return &filterCndBuilderMetadata{builder: b.builder}
}

func (b *filterCndBuilder) Info() *filterCndBuilderInfo {
	return &filterCndBuilderInfo{builder: b.builder}
}

func (b *filterCndBuilder) State() *filterCndBuilderState {
	return &filterCndBuilderState{builder: b.builder}
}

func (b *filterCndBuilder) Internal() *filterCndBuilderInternal {
	return &filterCndBuilderInternal{builder: b.builder}
}

type filterCndBuilderName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderName) Eq(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderName) Neq(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderName) Gt(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderName) Gte(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderName) Lt(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderName) Lte(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderName) In(values []*Name) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderName) NotIn(values []*Name) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsEntryFieldPathBuilder().Name().FieldPath(),
	})
}

func (b *filterCndBuilderName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsEntryFieldPathBuilder().Name().FieldPath(),
	})
}

func (b *filterCndBuilderName) compare(op gotenfilter.CompareOperator, value *Name) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:               op,
		TsEntry_FieldPathValue: NewTsEntryFieldPathBuilder().Name().WithValue(value),
	})
}

type filterCndBuilderMetadata struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadata) Eq(value *meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadata) Neq(value *meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadata) Gt(value *meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadata) Gte(value *meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadata) Lt(value *meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadata) Lte(value *meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadata) In(values []*meta.Meta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Metadata().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadata) NotIn(values []*meta.Meta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Metadata().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadata) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsEntryFieldPathBuilder().Metadata().FieldPath(),
	})
}

func (b *filterCndBuilderMetadata) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsEntryFieldPathBuilder().Metadata().FieldPath(),
	})
}

func (b *filterCndBuilderMetadata) compare(op gotenfilter.CompareOperator, value *meta.Meta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:               op,
		TsEntry_FieldPathValue: NewTsEntryFieldPathBuilder().Metadata().WithValue(value),
	})
}

func (b *filterCndBuilderMetadata) CreateTime() *filterCndBuilderMetadataCreateTime {
	return &filterCndBuilderMetadataCreateTime{builder: b.builder}
}

func (b *filterCndBuilderMetadata) UpdateTime() *filterCndBuilderMetadataUpdateTime {
	return &filterCndBuilderMetadataUpdateTime{builder: b.builder}
}

func (b *filterCndBuilderMetadata) DeleteTime() *filterCndBuilderMetadataDeleteTime {
	return &filterCndBuilderMetadataDeleteTime{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Uuid() *filterCndBuilderMetadataUuid {
	return &filterCndBuilderMetadataUuid{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Tags() *filterCndBuilderMetadataTags {
	return &filterCndBuilderMetadataTags{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Labels() *filterCndBuilderMetadataLabels {
	return &filterCndBuilderMetadataLabels{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Annotations() *filterCndBuilderMetadataAnnotations {
	return &filterCndBuilderMetadataAnnotations{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Generation() *filterCndBuilderMetadataGeneration {
	return &filterCndBuilderMetadataGeneration{builder: b.builder}
}

func (b *filterCndBuilderMetadata) ResourceVersion() *filterCndBuilderMetadataResourceVersion {
	return &filterCndBuilderMetadataResourceVersion{builder: b.builder}
}

func (b *filterCndBuilderMetadata) OwnerReferences() *filterCndBuilderMetadataOwnerReferences {
	return &filterCndBuilderMetadataOwnerReferences{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Shards() *filterCndBuilderMetadataShards {
	return &filterCndBuilderMetadataShards{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Syncing() *filterCndBuilderMetadataSyncing {
	return &filterCndBuilderMetadataSyncing{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Lifecycle() *filterCndBuilderMetadataLifecycle {
	return &filterCndBuilderMetadataLifecycle{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Services() *filterCndBuilderMetadataServices {
	return &filterCndBuilderMetadataServices{builder: b.builder}
}

type filterCndBuilderMetadataCreateTime struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataCreateTime) Eq(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataCreateTime) Neq(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataCreateTime) Gt(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataCreateTime) Gte(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataCreateTime) Lt(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataCreateTime) Lte(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataCreateTime) In(values []*timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Metadata().CreateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataCreateTime) NotIn(values []*timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Metadata().CreateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataCreateTime) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsEntryFieldPathBuilder().Metadata().CreateTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataCreateTime) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsEntryFieldPathBuilder().Metadata().CreateTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataCreateTime) compare(op gotenfilter.CompareOperator, value *timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:               op,
		TsEntry_FieldPathValue: NewTsEntryFieldPathBuilder().Metadata().CreateTime().WithValue(value),
	})
}

type filterCndBuilderMetadataUpdateTime struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataUpdateTime) Eq(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Neq(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Gt(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Gte(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Lt(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Lte(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataUpdateTime) In(values []*timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Metadata().UpdateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataUpdateTime) NotIn(values []*timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Metadata().UpdateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataUpdateTime) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsEntryFieldPathBuilder().Metadata().UpdateTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataUpdateTime) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsEntryFieldPathBuilder().Metadata().UpdateTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataUpdateTime) compare(op gotenfilter.CompareOperator, value *timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:               op,
		TsEntry_FieldPathValue: NewTsEntryFieldPathBuilder().Metadata().UpdateTime().WithValue(value),
	})
}

type filterCndBuilderMetadataDeleteTime struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataDeleteTime) Eq(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataDeleteTime) Neq(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataDeleteTime) Gt(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataDeleteTime) Gte(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataDeleteTime) Lt(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataDeleteTime) Lte(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataDeleteTime) In(values []*timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Metadata().DeleteTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataDeleteTime) NotIn(values []*timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Metadata().DeleteTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataDeleteTime) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsEntryFieldPathBuilder().Metadata().DeleteTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataDeleteTime) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsEntryFieldPathBuilder().Metadata().DeleteTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataDeleteTime) compare(op gotenfilter.CompareOperator, value *timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:               op,
		TsEntry_FieldPathValue: NewTsEntryFieldPathBuilder().Metadata().DeleteTime().WithValue(value),
	})
}

type filterCndBuilderMetadataUuid struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataUuid) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataUuid) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataUuid) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataUuid) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataUuid) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataUuid) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataUuid) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Metadata().Uuid().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataUuid) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Metadata().Uuid().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataUuid) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsEntryFieldPathBuilder().Metadata().Uuid().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataUuid) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsEntryFieldPathBuilder().Metadata().Uuid().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataUuid) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:               op,
		TsEntry_FieldPathValue: NewTsEntryFieldPathBuilder().Metadata().Uuid().WithValue(value),
	})
}

type filterCndBuilderMetadataTags struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataTags) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataTags) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataTags) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataTags) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataTags) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataTags) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataTags) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Metadata().Tags().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataTags) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Metadata().Tags().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataTags) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsEntryFieldPathBuilder().Metadata().Tags().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataTags) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsEntryFieldPathBuilder().Metadata().Tags().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataTags) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewTsEntryFieldPathBuilder().Metadata().Tags().FieldPath(),
		Value:     NewTsEntryFieldPathBuilder().Metadata().Tags().WithItemValue(value),
	})
}

func (b *filterCndBuilderMetadataTags) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewTsEntryFieldPathBuilder().Metadata().Tags()
	itemValues := make([]TsEntry_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewTsEntryFieldPathBuilder().Metadata().Tags().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataTags) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewTsEntryFieldPathBuilder().Metadata().Tags()
	itemValues := make([]TsEntry_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewTsEntryFieldPathBuilder().Metadata().Tags().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataTags) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:               op,
		TsEntry_FieldPathValue: NewTsEntryFieldPathBuilder().Metadata().Tags().WithValue(value),
	})
}

type filterCndBuilderMetadataLabels struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataLabels) Eq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataLabels) Neq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataLabels) Gt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataLabels) Gte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataLabels) Lt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataLabels) Lte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataLabels) In(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Metadata().Labels().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLabels) NotIn(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Metadata().Labels().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLabels) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsEntryFieldPathBuilder().Metadata().Labels().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLabels) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsEntryFieldPathBuilder().Metadata().Labels().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLabels) compare(op gotenfilter.CompareOperator, value map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:               op,
		TsEntry_FieldPathValue: NewTsEntryFieldPathBuilder().Metadata().Labels().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataLabels) WithKey(key string) *mapFilterCndBuilderMetadataLabels {
	return &mapFilterCndBuilderMetadataLabels{builder: b.builder, key: key}
}

type mapFilterCndBuilderMetadataLabels struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderMetadataLabels) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderMetadataLabels) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Metadata().Labels().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataLabels) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Metadata().Labels().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataLabels) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsEntryFieldPathBuilder().Metadata().Labels().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataLabels) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsEntryFieldPathBuilder().Metadata().Labels().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataLabels) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:               op,
		TsEntry_FieldPathValue: NewTsEntryFieldPathBuilder().Metadata().Labels().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderMetadataAnnotations struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataAnnotations) Eq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataAnnotations) Neq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataAnnotations) Gt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataAnnotations) Gte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataAnnotations) Lt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataAnnotations) Lte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataAnnotations) In(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Metadata().Annotations().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataAnnotations) NotIn(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Metadata().Annotations().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataAnnotations) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsEntryFieldPathBuilder().Metadata().Annotations().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataAnnotations) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsEntryFieldPathBuilder().Metadata().Annotations().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataAnnotations) compare(op gotenfilter.CompareOperator, value map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:               op,
		TsEntry_FieldPathValue: NewTsEntryFieldPathBuilder().Metadata().Annotations().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataAnnotations) WithKey(key string) *mapFilterCndBuilderMetadataAnnotations {
	return &mapFilterCndBuilderMetadataAnnotations{builder: b.builder, key: key}
}

type mapFilterCndBuilderMetadataAnnotations struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderMetadataAnnotations) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Metadata().Annotations().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataAnnotations) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Metadata().Annotations().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataAnnotations) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsEntryFieldPathBuilder().Metadata().Annotations().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataAnnotations) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsEntryFieldPathBuilder().Metadata().Annotations().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataAnnotations) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:               op,
		TsEntry_FieldPathValue: NewTsEntryFieldPathBuilder().Metadata().Annotations().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderMetadataGeneration struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataGeneration) Eq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataGeneration) Neq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataGeneration) Gt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataGeneration) Gte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataGeneration) Lt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataGeneration) Lte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataGeneration) In(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Metadata().Generation().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataGeneration) NotIn(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Metadata().Generation().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataGeneration) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsEntryFieldPathBuilder().Metadata().Generation().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataGeneration) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsEntryFieldPathBuilder().Metadata().Generation().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataGeneration) compare(op gotenfilter.CompareOperator, value int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:               op,
		TsEntry_FieldPathValue: NewTsEntryFieldPathBuilder().Metadata().Generation().WithValue(value),
	})
}

type filterCndBuilderMetadataResourceVersion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataResourceVersion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataResourceVersion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Metadata().ResourceVersion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataResourceVersion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Metadata().ResourceVersion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataResourceVersion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsEntryFieldPathBuilder().Metadata().ResourceVersion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataResourceVersion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsEntryFieldPathBuilder().Metadata().ResourceVersion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataResourceVersion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:               op,
		TsEntry_FieldPathValue: NewTsEntryFieldPathBuilder().Metadata().ResourceVersion().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferences struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferences) Eq(value []*meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Neq(value []*meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Gt(value []*meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Gte(value []*meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Lt(value []*meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Lte(value []*meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) In(values [][]*meta.OwnerReference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Metadata().OwnerReferences().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) NotIn(values [][]*meta.OwnerReference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Metadata().OwnerReferences().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsEntryFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsEntryFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) Contains(value *meta.OwnerReference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewTsEntryFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
		Value:     NewTsEntryFieldPathBuilder().Metadata().OwnerReferences().WithItemValue(value),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) ContainsAnyOf(values []*meta.OwnerReference) *FilterBuilder {
	pathSelector := NewTsEntryFieldPathBuilder().Metadata().OwnerReferences()
	itemValues := make([]TsEntry_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewTsEntryFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) ContainsAll(values []*meta.OwnerReference) *FilterBuilder {
	pathSelector := NewTsEntryFieldPathBuilder().Metadata().OwnerReferences()
	itemValues := make([]TsEntry_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewTsEntryFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) compare(op gotenfilter.CompareOperator, value []*meta.OwnerReference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:               op,
		TsEntry_FieldPathValue: NewTsEntryFieldPathBuilder().Metadata().OwnerReferences().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) Kind() *filterCndBuilderMetadataOwnerReferencesKind {
	return &filterCndBuilderMetadataOwnerReferencesKind{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) Version() *filterCndBuilderMetadataOwnerReferencesVersion {
	return &filterCndBuilderMetadataOwnerReferencesVersion{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) Name() *filterCndBuilderMetadataOwnerReferencesName {
	return &filterCndBuilderMetadataOwnerReferencesName{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) Region() *filterCndBuilderMetadataOwnerReferencesRegion {
	return &filterCndBuilderMetadataOwnerReferencesRegion{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) Controller() *filterCndBuilderMetadataOwnerReferencesController {
	return &filterCndBuilderMetadataOwnerReferencesController{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) RequiresOwnerReference() *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference {
	return &filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) UnsetOnDelete() *filterCndBuilderMetadataOwnerReferencesUnsetOnDelete {
	return &filterCndBuilderMetadataOwnerReferencesUnsetOnDelete{builder: b.builder}
}

type filterCndBuilderMetadataOwnerReferencesKind struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Metadata().OwnerReferences().Kind().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Metadata().OwnerReferences().Kind().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsEntryFieldPathBuilder().Metadata().OwnerReferences().Kind().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsEntryFieldPathBuilder().Metadata().OwnerReferences().Kind().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:               op,
		TsEntry_FieldPathValue: NewTsEntryFieldPathBuilder().Metadata().OwnerReferences().Kind().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesVersion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Metadata().OwnerReferences().Version().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Metadata().OwnerReferences().Version().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsEntryFieldPathBuilder().Metadata().OwnerReferences().Version().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsEntryFieldPathBuilder().Metadata().OwnerReferences().Version().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:               op,
		TsEntry_FieldPathValue: NewTsEntryFieldPathBuilder().Metadata().OwnerReferences().Version().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Metadata().OwnerReferences().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Metadata().OwnerReferences().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsEntryFieldPathBuilder().Metadata().OwnerReferences().Name().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsEntryFieldPathBuilder().Metadata().OwnerReferences().Name().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:               op,
		TsEntry_FieldPathValue: NewTsEntryFieldPathBuilder().Metadata().OwnerReferences().Name().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesRegion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Metadata().OwnerReferences().Region().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Metadata().OwnerReferences().Region().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsEntryFieldPathBuilder().Metadata().OwnerReferences().Region().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsEntryFieldPathBuilder().Metadata().OwnerReferences().Region().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:               op,
		TsEntry_FieldPathValue: NewTsEntryFieldPathBuilder().Metadata().OwnerReferences().Region().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesController struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Metadata().OwnerReferences().Controller().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesController) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Metadata().OwnerReferences().Controller().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesController) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsEntryFieldPathBuilder().Metadata().OwnerReferences().Controller().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesController) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsEntryFieldPathBuilder().Metadata().OwnerReferences().Controller().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesController) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:               op,
		TsEntry_FieldPathValue: NewTsEntryFieldPathBuilder().Metadata().OwnerReferences().Controller().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Metadata().OwnerReferences().RequiresOwnerReference().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Metadata().OwnerReferences().RequiresOwnerReference().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsEntryFieldPathBuilder().Metadata().OwnerReferences().RequiresOwnerReference().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsEntryFieldPathBuilder().Metadata().OwnerReferences().RequiresOwnerReference().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:               op,
		TsEntry_FieldPathValue: NewTsEntryFieldPathBuilder().Metadata().OwnerReferences().RequiresOwnerReference().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesUnsetOnDelete struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesUnsetOnDelete) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesUnsetOnDelete) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesUnsetOnDelete) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesUnsetOnDelete) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesUnsetOnDelete) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesUnsetOnDelete) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesUnsetOnDelete) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Metadata().OwnerReferences().UnsetOnDelete().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesUnsetOnDelete) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Metadata().OwnerReferences().UnsetOnDelete().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesUnsetOnDelete) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsEntryFieldPathBuilder().Metadata().OwnerReferences().UnsetOnDelete().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesUnsetOnDelete) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsEntryFieldPathBuilder().Metadata().OwnerReferences().UnsetOnDelete().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesUnsetOnDelete) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:               op,
		TsEntry_FieldPathValue: NewTsEntryFieldPathBuilder().Metadata().OwnerReferences().UnsetOnDelete().WithValue(value),
	})
}

type filterCndBuilderMetadataShards struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataShards) Eq(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataShards) Neq(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataShards) Gt(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataShards) Gte(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataShards) Lt(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataShards) Lte(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataShards) In(values []map[string]int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Metadata().Shards().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataShards) NotIn(values []map[string]int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Metadata().Shards().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataShards) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsEntryFieldPathBuilder().Metadata().Shards().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataShards) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsEntryFieldPathBuilder().Metadata().Shards().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataShards) compare(op gotenfilter.CompareOperator, value map[string]int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:               op,
		TsEntry_FieldPathValue: NewTsEntryFieldPathBuilder().Metadata().Shards().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataShards) WithKey(key string) *mapFilterCndBuilderMetadataShards {
	return &mapFilterCndBuilderMetadataShards{builder: b.builder, key: key}
}

type mapFilterCndBuilderMetadataShards struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderMetadataShards) Eq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderMetadataShards) Neq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderMetadataShards) Gt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderMetadataShards) Gte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderMetadataShards) Lt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderMetadataShards) Lte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderMetadataShards) In(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Metadata().Shards().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataShards) NotIn(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Metadata().Shards().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataShards) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsEntryFieldPathBuilder().Metadata().Shards().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataShards) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsEntryFieldPathBuilder().Metadata().Shards().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataShards) compare(op gotenfilter.CompareOperator, value int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:               op,
		TsEntry_FieldPathValue: NewTsEntryFieldPathBuilder().Metadata().Shards().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderMetadataSyncing struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataSyncing) Eq(value *meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataSyncing) Neq(value *meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataSyncing) Gt(value *meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataSyncing) Gte(value *meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataSyncing) Lt(value *meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataSyncing) Lte(value *meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataSyncing) In(values []*meta.SyncingMeta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Metadata().Syncing().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncing) NotIn(values []*meta.SyncingMeta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Metadata().Syncing().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncing) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsEntryFieldPathBuilder().Metadata().Syncing().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncing) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsEntryFieldPathBuilder().Metadata().Syncing().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncing) compare(op gotenfilter.CompareOperator, value *meta.SyncingMeta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:               op,
		TsEntry_FieldPathValue: NewTsEntryFieldPathBuilder().Metadata().Syncing().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataSyncing) OwningRegion() *filterCndBuilderMetadataSyncingOwningRegion {
	return &filterCndBuilderMetadataSyncingOwningRegion{builder: b.builder}
}

func (b *filterCndBuilderMetadataSyncing) Regions() *filterCndBuilderMetadataSyncingRegions {
	return &filterCndBuilderMetadataSyncingRegions{builder: b.builder}
}

type filterCndBuilderMetadataSyncingOwningRegion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Metadata().Syncing().OwningRegion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Metadata().Syncing().OwningRegion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsEntryFieldPathBuilder().Metadata().Syncing().OwningRegion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsEntryFieldPathBuilder().Metadata().Syncing().OwningRegion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:               op,
		TsEntry_FieldPathValue: NewTsEntryFieldPathBuilder().Metadata().Syncing().OwningRegion().WithValue(value),
	})
}

type filterCndBuilderMetadataSyncingRegions struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataSyncingRegions) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Metadata().Syncing().Regions().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Metadata().Syncing().Regions().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsEntryFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsEntryFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewTsEntryFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
		Value:     NewTsEntryFieldPathBuilder().Metadata().Syncing().Regions().WithItemValue(value),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewTsEntryFieldPathBuilder().Metadata().Syncing().Regions()
	itemValues := make([]TsEntry_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewTsEntryFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewTsEntryFieldPathBuilder().Metadata().Syncing().Regions()
	itemValues := make([]TsEntry_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewTsEntryFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:               op,
		TsEntry_FieldPathValue: NewTsEntryFieldPathBuilder().Metadata().Syncing().Regions().WithValue(value),
	})
}

type filterCndBuilderMetadataLifecycle struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataLifecycle) Eq(value *meta.Lifecycle) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataLifecycle) Neq(value *meta.Lifecycle) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataLifecycle) Gt(value *meta.Lifecycle) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataLifecycle) Gte(value *meta.Lifecycle) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataLifecycle) Lt(value *meta.Lifecycle) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataLifecycle) Lte(value *meta.Lifecycle) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataLifecycle) In(values []*meta.Lifecycle) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Metadata().Lifecycle().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLifecycle) NotIn(values []*meta.Lifecycle) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Metadata().Lifecycle().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLifecycle) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsEntryFieldPathBuilder().Metadata().Lifecycle().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLifecycle) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsEntryFieldPathBuilder().Metadata().Lifecycle().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLifecycle) compare(op gotenfilter.CompareOperator, value *meta.Lifecycle) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:               op,
		TsEntry_FieldPathValue: NewTsEntryFieldPathBuilder().Metadata().Lifecycle().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataLifecycle) State() *filterCndBuilderMetadataLifecycleState {
	return &filterCndBuilderMetadataLifecycleState{builder: b.builder}
}

func (b *filterCndBuilderMetadataLifecycle) BlockDeletion() *filterCndBuilderMetadataLifecycleBlockDeletion {
	return &filterCndBuilderMetadataLifecycleBlockDeletion{builder: b.builder}
}

type filterCndBuilderMetadataLifecycleState struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataLifecycleState) Eq(value meta.Lifecycle_State) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataLifecycleState) Neq(value meta.Lifecycle_State) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataLifecycleState) Gt(value meta.Lifecycle_State) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataLifecycleState) Gte(value meta.Lifecycle_State) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataLifecycleState) Lt(value meta.Lifecycle_State) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataLifecycleState) Lte(value meta.Lifecycle_State) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataLifecycleState) In(values []meta.Lifecycle_State) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Metadata().Lifecycle().State().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLifecycleState) NotIn(values []meta.Lifecycle_State) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Metadata().Lifecycle().State().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLifecycleState) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsEntryFieldPathBuilder().Metadata().Lifecycle().State().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLifecycleState) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsEntryFieldPathBuilder().Metadata().Lifecycle().State().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLifecycleState) compare(op gotenfilter.CompareOperator, value meta.Lifecycle_State) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:               op,
		TsEntry_FieldPathValue: NewTsEntryFieldPathBuilder().Metadata().Lifecycle().State().WithValue(value),
	})
}

type filterCndBuilderMetadataLifecycleBlockDeletion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Metadata().Lifecycle().BlockDeletion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Metadata().Lifecycle().BlockDeletion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsEntryFieldPathBuilder().Metadata().Lifecycle().BlockDeletion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsEntryFieldPathBuilder().Metadata().Lifecycle().BlockDeletion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:               op,
		TsEntry_FieldPathValue: NewTsEntryFieldPathBuilder().Metadata().Lifecycle().BlockDeletion().WithValue(value),
	})
}

type filterCndBuilderMetadataServices struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataServices) Eq(value *meta.ServicesInfo) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataServices) Neq(value *meta.ServicesInfo) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataServices) Gt(value *meta.ServicesInfo) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataServices) Gte(value *meta.ServicesInfo) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataServices) Lt(value *meta.ServicesInfo) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataServices) Lte(value *meta.ServicesInfo) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataServices) In(values []*meta.ServicesInfo) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Metadata().Services().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataServices) NotIn(values []*meta.ServicesInfo) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Metadata().Services().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataServices) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsEntryFieldPathBuilder().Metadata().Services().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataServices) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsEntryFieldPathBuilder().Metadata().Services().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataServices) compare(op gotenfilter.CompareOperator, value *meta.ServicesInfo) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:               op,
		TsEntry_FieldPathValue: NewTsEntryFieldPathBuilder().Metadata().Services().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataServices) OwningService() *filterCndBuilderMetadataServicesOwningService {
	return &filterCndBuilderMetadataServicesOwningService{builder: b.builder}
}

func (b *filterCndBuilderMetadataServices) AllowedServices() *filterCndBuilderMetadataServicesAllowedServices {
	return &filterCndBuilderMetadataServicesAllowedServices{builder: b.builder}
}

type filterCndBuilderMetadataServicesOwningService struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataServicesOwningService) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataServicesOwningService) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataServicesOwningService) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataServicesOwningService) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataServicesOwningService) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataServicesOwningService) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataServicesOwningService) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Metadata().Services().OwningService().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataServicesOwningService) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Metadata().Services().OwningService().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataServicesOwningService) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsEntryFieldPathBuilder().Metadata().Services().OwningService().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataServicesOwningService) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsEntryFieldPathBuilder().Metadata().Services().OwningService().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataServicesOwningService) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:               op,
		TsEntry_FieldPathValue: NewTsEntryFieldPathBuilder().Metadata().Services().OwningService().WithValue(value),
	})
}

type filterCndBuilderMetadataServicesAllowedServices struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataServicesAllowedServices) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataServicesAllowedServices) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataServicesAllowedServices) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataServicesAllowedServices) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataServicesAllowedServices) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataServicesAllowedServices) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataServicesAllowedServices) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Metadata().Services().AllowedServices().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataServicesAllowedServices) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Metadata().Services().AllowedServices().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataServicesAllowedServices) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsEntryFieldPathBuilder().Metadata().Services().AllowedServices().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataServicesAllowedServices) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsEntryFieldPathBuilder().Metadata().Services().AllowedServices().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataServicesAllowedServices) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewTsEntryFieldPathBuilder().Metadata().Services().AllowedServices().FieldPath(),
		Value:     NewTsEntryFieldPathBuilder().Metadata().Services().AllowedServices().WithItemValue(value),
	})
}

func (b *filterCndBuilderMetadataServicesAllowedServices) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewTsEntryFieldPathBuilder().Metadata().Services().AllowedServices()
	itemValues := make([]TsEntry_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewTsEntryFieldPathBuilder().Metadata().Services().AllowedServices().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataServicesAllowedServices) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewTsEntryFieldPathBuilder().Metadata().Services().AllowedServices()
	itemValues := make([]TsEntry_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewTsEntryFieldPathBuilder().Metadata().Services().AllowedServices().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataServicesAllowedServices) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:               op,
		TsEntry_FieldPathValue: NewTsEntryFieldPathBuilder().Metadata().Services().AllowedServices().WithValue(value),
	})
}

type filterCndBuilderInfo struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderInfo) Eq(value *TsEntry_Info) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderInfo) Neq(value *TsEntry_Info) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderInfo) Gt(value *TsEntry_Info) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderInfo) Gte(value *TsEntry_Info) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderInfo) Lt(value *TsEntry_Info) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderInfo) Lte(value *TsEntry_Info) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderInfo) In(values []*TsEntry_Info) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Info().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInfo) NotIn(values []*TsEntry_Info) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Info().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInfo) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsEntryFieldPathBuilder().Info().FieldPath(),
	})
}

func (b *filterCndBuilderInfo) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsEntryFieldPathBuilder().Info().FieldPath(),
	})
}

func (b *filterCndBuilderInfo) compare(op gotenfilter.CompareOperator, value *TsEntry_Info) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:               op,
		TsEntry_FieldPathValue: NewTsEntryFieldPathBuilder().Info().WithValue(value),
	})
}

func (b *filterCndBuilderInfo) AlertingResource() *filterCndBuilderInfoAlertingResource {
	return &filterCndBuilderInfoAlertingResource{builder: b.builder}
}

func (b *filterCndBuilderInfo) GroupByKey() *filterCndBuilderInfoGroupByKey {
	return &filterCndBuilderInfoGroupByKey{builder: b.builder}
}

func (b *filterCndBuilderInfo) CommonMetricLabels() *filterCndBuilderInfoCommonMetricLabels {
	return &filterCndBuilderInfoCommonMetricLabels{builder: b.builder}
}

func (b *filterCndBuilderInfo) CommonResourceLabels() *filterCndBuilderInfoCommonResourceLabels {
	return &filterCndBuilderInfoCommonResourceLabels{builder: b.builder}
}

type filterCndBuilderInfoAlertingResource struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderInfoAlertingResource) Eq(value *meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderInfoAlertingResource) Neq(value *meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderInfoAlertingResource) Gt(value *meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderInfoAlertingResource) Gte(value *meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderInfoAlertingResource) Lt(value *meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderInfoAlertingResource) Lte(value *meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderInfoAlertingResource) In(values []*meta.OwnerReference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Info().AlertingResource().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInfoAlertingResource) NotIn(values []*meta.OwnerReference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Info().AlertingResource().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInfoAlertingResource) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsEntryFieldPathBuilder().Info().AlertingResource().FieldPath(),
	})
}

func (b *filterCndBuilderInfoAlertingResource) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsEntryFieldPathBuilder().Info().AlertingResource().FieldPath(),
	})
}

func (b *filterCndBuilderInfoAlertingResource) compare(op gotenfilter.CompareOperator, value *meta.OwnerReference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:               op,
		TsEntry_FieldPathValue: NewTsEntryFieldPathBuilder().Info().AlertingResource().WithValue(value),
	})
}

func (b *filterCndBuilderInfoAlertingResource) Kind() *filterCndBuilderInfoAlertingResourceKind {
	return &filterCndBuilderInfoAlertingResourceKind{builder: b.builder}
}

func (b *filterCndBuilderInfoAlertingResource) Version() *filterCndBuilderInfoAlertingResourceVersion {
	return &filterCndBuilderInfoAlertingResourceVersion{builder: b.builder}
}

func (b *filterCndBuilderInfoAlertingResource) Name() *filterCndBuilderInfoAlertingResourceName {
	return &filterCndBuilderInfoAlertingResourceName{builder: b.builder}
}

func (b *filterCndBuilderInfoAlertingResource) Region() *filterCndBuilderInfoAlertingResourceRegion {
	return &filterCndBuilderInfoAlertingResourceRegion{builder: b.builder}
}

func (b *filterCndBuilderInfoAlertingResource) Controller() *filterCndBuilderInfoAlertingResourceController {
	return &filterCndBuilderInfoAlertingResourceController{builder: b.builder}
}

func (b *filterCndBuilderInfoAlertingResource) RequiresOwnerReference() *filterCndBuilderInfoAlertingResourceRequiresOwnerReference {
	return &filterCndBuilderInfoAlertingResourceRequiresOwnerReference{builder: b.builder}
}

func (b *filterCndBuilderInfoAlertingResource) UnsetOnDelete() *filterCndBuilderInfoAlertingResourceUnsetOnDelete {
	return &filterCndBuilderInfoAlertingResourceUnsetOnDelete{builder: b.builder}
}

type filterCndBuilderInfoAlertingResourceKind struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderInfoAlertingResourceKind) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderInfoAlertingResourceKind) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderInfoAlertingResourceKind) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderInfoAlertingResourceKind) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderInfoAlertingResourceKind) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderInfoAlertingResourceKind) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderInfoAlertingResourceKind) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Info().AlertingResource().Kind().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInfoAlertingResourceKind) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Info().AlertingResource().Kind().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInfoAlertingResourceKind) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsEntryFieldPathBuilder().Info().AlertingResource().Kind().FieldPath(),
	})
}

func (b *filterCndBuilderInfoAlertingResourceKind) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsEntryFieldPathBuilder().Info().AlertingResource().Kind().FieldPath(),
	})
}

func (b *filterCndBuilderInfoAlertingResourceKind) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:               op,
		TsEntry_FieldPathValue: NewTsEntryFieldPathBuilder().Info().AlertingResource().Kind().WithValue(value),
	})
}

type filterCndBuilderInfoAlertingResourceVersion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderInfoAlertingResourceVersion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderInfoAlertingResourceVersion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderInfoAlertingResourceVersion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderInfoAlertingResourceVersion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderInfoAlertingResourceVersion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderInfoAlertingResourceVersion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderInfoAlertingResourceVersion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Info().AlertingResource().Version().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInfoAlertingResourceVersion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Info().AlertingResource().Version().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInfoAlertingResourceVersion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsEntryFieldPathBuilder().Info().AlertingResource().Version().FieldPath(),
	})
}

func (b *filterCndBuilderInfoAlertingResourceVersion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsEntryFieldPathBuilder().Info().AlertingResource().Version().FieldPath(),
	})
}

func (b *filterCndBuilderInfoAlertingResourceVersion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:               op,
		TsEntry_FieldPathValue: NewTsEntryFieldPathBuilder().Info().AlertingResource().Version().WithValue(value),
	})
}

type filterCndBuilderInfoAlertingResourceName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderInfoAlertingResourceName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderInfoAlertingResourceName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderInfoAlertingResourceName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderInfoAlertingResourceName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderInfoAlertingResourceName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderInfoAlertingResourceName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderInfoAlertingResourceName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Info().AlertingResource().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInfoAlertingResourceName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Info().AlertingResource().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInfoAlertingResourceName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsEntryFieldPathBuilder().Info().AlertingResource().Name().FieldPath(),
	})
}

func (b *filterCndBuilderInfoAlertingResourceName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsEntryFieldPathBuilder().Info().AlertingResource().Name().FieldPath(),
	})
}

func (b *filterCndBuilderInfoAlertingResourceName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:               op,
		TsEntry_FieldPathValue: NewTsEntryFieldPathBuilder().Info().AlertingResource().Name().WithValue(value),
	})
}

type filterCndBuilderInfoAlertingResourceRegion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderInfoAlertingResourceRegion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderInfoAlertingResourceRegion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderInfoAlertingResourceRegion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderInfoAlertingResourceRegion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderInfoAlertingResourceRegion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderInfoAlertingResourceRegion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderInfoAlertingResourceRegion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Info().AlertingResource().Region().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInfoAlertingResourceRegion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Info().AlertingResource().Region().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInfoAlertingResourceRegion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsEntryFieldPathBuilder().Info().AlertingResource().Region().FieldPath(),
	})
}

func (b *filterCndBuilderInfoAlertingResourceRegion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsEntryFieldPathBuilder().Info().AlertingResource().Region().FieldPath(),
	})
}

func (b *filterCndBuilderInfoAlertingResourceRegion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:               op,
		TsEntry_FieldPathValue: NewTsEntryFieldPathBuilder().Info().AlertingResource().Region().WithValue(value),
	})
}

type filterCndBuilderInfoAlertingResourceController struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderInfoAlertingResourceController) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderInfoAlertingResourceController) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderInfoAlertingResourceController) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderInfoAlertingResourceController) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderInfoAlertingResourceController) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderInfoAlertingResourceController) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderInfoAlertingResourceController) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Info().AlertingResource().Controller().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInfoAlertingResourceController) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Info().AlertingResource().Controller().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInfoAlertingResourceController) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsEntryFieldPathBuilder().Info().AlertingResource().Controller().FieldPath(),
	})
}

func (b *filterCndBuilderInfoAlertingResourceController) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsEntryFieldPathBuilder().Info().AlertingResource().Controller().FieldPath(),
	})
}

func (b *filterCndBuilderInfoAlertingResourceController) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:               op,
		TsEntry_FieldPathValue: NewTsEntryFieldPathBuilder().Info().AlertingResource().Controller().WithValue(value),
	})
}

type filterCndBuilderInfoAlertingResourceRequiresOwnerReference struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderInfoAlertingResourceRequiresOwnerReference) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderInfoAlertingResourceRequiresOwnerReference) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderInfoAlertingResourceRequiresOwnerReference) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderInfoAlertingResourceRequiresOwnerReference) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderInfoAlertingResourceRequiresOwnerReference) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderInfoAlertingResourceRequiresOwnerReference) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderInfoAlertingResourceRequiresOwnerReference) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Info().AlertingResource().RequiresOwnerReference().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInfoAlertingResourceRequiresOwnerReference) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Info().AlertingResource().RequiresOwnerReference().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInfoAlertingResourceRequiresOwnerReference) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsEntryFieldPathBuilder().Info().AlertingResource().RequiresOwnerReference().FieldPath(),
	})
}

func (b *filterCndBuilderInfoAlertingResourceRequiresOwnerReference) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsEntryFieldPathBuilder().Info().AlertingResource().RequiresOwnerReference().FieldPath(),
	})
}

func (b *filterCndBuilderInfoAlertingResourceRequiresOwnerReference) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:               op,
		TsEntry_FieldPathValue: NewTsEntryFieldPathBuilder().Info().AlertingResource().RequiresOwnerReference().WithValue(value),
	})
}

type filterCndBuilderInfoAlertingResourceUnsetOnDelete struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderInfoAlertingResourceUnsetOnDelete) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderInfoAlertingResourceUnsetOnDelete) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderInfoAlertingResourceUnsetOnDelete) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderInfoAlertingResourceUnsetOnDelete) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderInfoAlertingResourceUnsetOnDelete) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderInfoAlertingResourceUnsetOnDelete) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderInfoAlertingResourceUnsetOnDelete) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Info().AlertingResource().UnsetOnDelete().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInfoAlertingResourceUnsetOnDelete) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Info().AlertingResource().UnsetOnDelete().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInfoAlertingResourceUnsetOnDelete) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsEntryFieldPathBuilder().Info().AlertingResource().UnsetOnDelete().FieldPath(),
	})
}

func (b *filterCndBuilderInfoAlertingResourceUnsetOnDelete) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsEntryFieldPathBuilder().Info().AlertingResource().UnsetOnDelete().FieldPath(),
	})
}

func (b *filterCndBuilderInfoAlertingResourceUnsetOnDelete) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:               op,
		TsEntry_FieldPathValue: NewTsEntryFieldPathBuilder().Info().AlertingResource().UnsetOnDelete().WithValue(value),
	})
}

type filterCndBuilderInfoGroupByKey struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderInfoGroupByKey) Eq(value []byte) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderInfoGroupByKey) Neq(value []byte) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderInfoGroupByKey) Gt(value []byte) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderInfoGroupByKey) Gte(value []byte) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderInfoGroupByKey) Lt(value []byte) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderInfoGroupByKey) Lte(value []byte) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderInfoGroupByKey) In(values [][]byte) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Info().GroupByKey().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInfoGroupByKey) NotIn(values [][]byte) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Info().GroupByKey().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInfoGroupByKey) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsEntryFieldPathBuilder().Info().GroupByKey().FieldPath(),
	})
}

func (b *filterCndBuilderInfoGroupByKey) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsEntryFieldPathBuilder().Info().GroupByKey().FieldPath(),
	})
}

func (b *filterCndBuilderInfoGroupByKey) compare(op gotenfilter.CompareOperator, value []byte) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:               op,
		TsEntry_FieldPathValue: NewTsEntryFieldPathBuilder().Info().GroupByKey().WithValue(value),
	})
}

type filterCndBuilderInfoCommonMetricLabels struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderInfoCommonMetricLabels) Eq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderInfoCommonMetricLabels) Neq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderInfoCommonMetricLabels) Gt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderInfoCommonMetricLabels) Gte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderInfoCommonMetricLabels) Lt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderInfoCommonMetricLabels) Lte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderInfoCommonMetricLabels) In(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Info().CommonMetricLabels().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInfoCommonMetricLabels) NotIn(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Info().CommonMetricLabels().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInfoCommonMetricLabels) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsEntryFieldPathBuilder().Info().CommonMetricLabels().FieldPath(),
	})
}

func (b *filterCndBuilderInfoCommonMetricLabels) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsEntryFieldPathBuilder().Info().CommonMetricLabels().FieldPath(),
	})
}

func (b *filterCndBuilderInfoCommonMetricLabels) compare(op gotenfilter.CompareOperator, value map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:               op,
		TsEntry_FieldPathValue: NewTsEntryFieldPathBuilder().Info().CommonMetricLabels().WithValue(value),
	})
}

func (b *filterCndBuilderInfoCommonMetricLabels) WithKey(key string) *mapFilterCndBuilderInfoCommonMetricLabels {
	return &mapFilterCndBuilderInfoCommonMetricLabels{builder: b.builder, key: key}
}

type mapFilterCndBuilderInfoCommonMetricLabels struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderInfoCommonMetricLabels) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderInfoCommonMetricLabels) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderInfoCommonMetricLabels) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderInfoCommonMetricLabels) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderInfoCommonMetricLabels) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderInfoCommonMetricLabels) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderInfoCommonMetricLabels) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Info().CommonMetricLabels().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderInfoCommonMetricLabels) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Info().CommonMetricLabels().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderInfoCommonMetricLabels) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsEntryFieldPathBuilder().Info().CommonMetricLabels().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderInfoCommonMetricLabels) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsEntryFieldPathBuilder().Info().CommonMetricLabels().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderInfoCommonMetricLabels) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:               op,
		TsEntry_FieldPathValue: NewTsEntryFieldPathBuilder().Info().CommonMetricLabels().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderInfoCommonResourceLabels struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderInfoCommonResourceLabels) Eq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderInfoCommonResourceLabels) Neq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderInfoCommonResourceLabels) Gt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderInfoCommonResourceLabels) Gte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderInfoCommonResourceLabels) Lt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderInfoCommonResourceLabels) Lte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderInfoCommonResourceLabels) In(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Info().CommonResourceLabels().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInfoCommonResourceLabels) NotIn(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Info().CommonResourceLabels().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInfoCommonResourceLabels) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsEntryFieldPathBuilder().Info().CommonResourceLabels().FieldPath(),
	})
}

func (b *filterCndBuilderInfoCommonResourceLabels) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsEntryFieldPathBuilder().Info().CommonResourceLabels().FieldPath(),
	})
}

func (b *filterCndBuilderInfoCommonResourceLabels) compare(op gotenfilter.CompareOperator, value map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:               op,
		TsEntry_FieldPathValue: NewTsEntryFieldPathBuilder().Info().CommonResourceLabels().WithValue(value),
	})
}

func (b *filterCndBuilderInfoCommonResourceLabels) WithKey(key string) *mapFilterCndBuilderInfoCommonResourceLabels {
	return &mapFilterCndBuilderInfoCommonResourceLabels{builder: b.builder, key: key}
}

type mapFilterCndBuilderInfoCommonResourceLabels struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderInfoCommonResourceLabels) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderInfoCommonResourceLabels) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderInfoCommonResourceLabels) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderInfoCommonResourceLabels) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderInfoCommonResourceLabels) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderInfoCommonResourceLabels) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderInfoCommonResourceLabels) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Info().CommonResourceLabels().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderInfoCommonResourceLabels) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Info().CommonResourceLabels().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderInfoCommonResourceLabels) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsEntryFieldPathBuilder().Info().CommonResourceLabels().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderInfoCommonResourceLabels) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsEntryFieldPathBuilder().Info().CommonResourceLabels().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderInfoCommonResourceLabels) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:               op,
		TsEntry_FieldPathValue: NewTsEntryFieldPathBuilder().Info().CommonResourceLabels().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderState struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderState) Eq(value *TsEntry_State) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderState) Neq(value *TsEntry_State) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderState) Gt(value *TsEntry_State) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderState) Gte(value *TsEntry_State) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderState) Lt(value *TsEntry_State) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderState) Lte(value *TsEntry_State) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderState) In(values []*TsEntry_State) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().State().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderState) NotIn(values []*TsEntry_State) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().State().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderState) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsEntryFieldPathBuilder().State().FieldPath(),
	})
}

func (b *filterCndBuilderState) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsEntryFieldPathBuilder().State().FieldPath(),
	})
}

func (b *filterCndBuilderState) compare(op gotenfilter.CompareOperator, value *TsEntry_State) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:               op,
		TsEntry_FieldPathValue: NewTsEntryFieldPathBuilder().State().WithValue(value),
	})
}

func (b *filterCndBuilderState) Models() *filterCndBuilderStateModels {
	return &filterCndBuilderStateModels{builder: b.builder}
}

func (b *filterCndBuilderState) Thresholds() *filterCndBuilderStateThresholds {
	return &filterCndBuilderStateThresholds{builder: b.builder}
}

type filterCndBuilderStateModels struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStateModels) Eq(value []*TsEntry_State_AnomalyModelData) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStateModels) Neq(value []*TsEntry_State_AnomalyModelData) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStateModels) Gt(value []*TsEntry_State_AnomalyModelData) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStateModels) Gte(value []*TsEntry_State_AnomalyModelData) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStateModels) Lt(value []*TsEntry_State_AnomalyModelData) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStateModels) Lte(value []*TsEntry_State_AnomalyModelData) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStateModels) In(values [][]*TsEntry_State_AnomalyModelData) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().State().Models().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateModels) NotIn(values [][]*TsEntry_State_AnomalyModelData) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().State().Models().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateModels) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsEntryFieldPathBuilder().State().Models().FieldPath(),
	})
}

func (b *filterCndBuilderStateModels) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsEntryFieldPathBuilder().State().Models().FieldPath(),
	})
}

func (b *filterCndBuilderStateModels) Contains(value *TsEntry_State_AnomalyModelData) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewTsEntryFieldPathBuilder().State().Models().FieldPath(),
		Value:     NewTsEntryFieldPathBuilder().State().Models().WithItemValue(value),
	})
}

func (b *filterCndBuilderStateModels) ContainsAnyOf(values []*TsEntry_State_AnomalyModelData) *FilterBuilder {
	pathSelector := NewTsEntryFieldPathBuilder().State().Models()
	itemValues := make([]TsEntry_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewTsEntryFieldPathBuilder().State().Models().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderStateModels) ContainsAll(values []*TsEntry_State_AnomalyModelData) *FilterBuilder {
	pathSelector := NewTsEntryFieldPathBuilder().State().Models()
	itemValues := make([]TsEntry_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewTsEntryFieldPathBuilder().State().Models().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderStateModels) compare(op gotenfilter.CompareOperator, value []*TsEntry_State_AnomalyModelData) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:               op,
		TsEntry_FieldPathValue: NewTsEntryFieldPathBuilder().State().Models().WithValue(value),
	})
}

func (b *filterCndBuilderStateModels) AnalysisWindow() *filterCndBuilderStateModelsAnalysisWindow {
	return &filterCndBuilderStateModelsAnalysisWindow{builder: b.builder}
}

func (b *filterCndBuilderStateModels) ModelData() *filterCndBuilderStateModelsModelData {
	return &filterCndBuilderStateModelsModelData{builder: b.builder}
}

func (b *filterCndBuilderStateModels) TrainingMeanErr() *filterCndBuilderStateModelsTrainingMeanErr {
	return &filterCndBuilderStateModelsTrainingMeanErr{builder: b.builder}
}

func (b *filterCndBuilderStateModels) TrainingMaxErr() *filterCndBuilderStateModelsTrainingMaxErr {
	return &filterCndBuilderStateModelsTrainingMaxErr{builder: b.builder}
}

func (b *filterCndBuilderStateModels) TrainedInEpochs() *filterCndBuilderStateModelsTrainedInEpochs {
	return &filterCndBuilderStateModelsTrainedInEpochs{builder: b.builder}
}

func (b *filterCndBuilderStateModels) TrainedIn() *filterCndBuilderStateModelsTrainedIn {
	return &filterCndBuilderStateModelsTrainedIn{builder: b.builder}
}

func (b *filterCndBuilderStateModels) TrainAfter() *filterCndBuilderStateModelsTrainAfter {
	return &filterCndBuilderStateModelsTrainAfter{builder: b.builder}
}

func (b *filterCndBuilderStateModels) TrainingPeriod() *filterCndBuilderStateModelsTrainingPeriod {
	return &filterCndBuilderStateModelsTrainingPeriod{builder: b.builder}
}

func (b *filterCndBuilderStateModels) Sensitiveness() *filterCndBuilderStateModelsSensitiveness {
	return &filterCndBuilderStateModelsSensitiveness{builder: b.builder}
}

type filterCndBuilderStateModelsAnalysisWindow struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStateModelsAnalysisWindow) Eq(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStateModelsAnalysisWindow) Neq(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStateModelsAnalysisWindow) Gt(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStateModelsAnalysisWindow) Gte(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStateModelsAnalysisWindow) Lt(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStateModelsAnalysisWindow) Lte(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStateModelsAnalysisWindow) In(values []*durationpb.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().State().Models().AnalysisWindow().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateModelsAnalysisWindow) NotIn(values []*durationpb.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().State().Models().AnalysisWindow().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateModelsAnalysisWindow) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsEntryFieldPathBuilder().State().Models().AnalysisWindow().FieldPath(),
	})
}

func (b *filterCndBuilderStateModelsAnalysisWindow) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsEntryFieldPathBuilder().State().Models().AnalysisWindow().FieldPath(),
	})
}

func (b *filterCndBuilderStateModelsAnalysisWindow) compare(op gotenfilter.CompareOperator, value *durationpb.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:               op,
		TsEntry_FieldPathValue: NewTsEntryFieldPathBuilder().State().Models().AnalysisWindow().WithValue(value),
	})
}

type filterCndBuilderStateModelsModelData struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStateModelsModelData) Eq(value []byte) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStateModelsModelData) Neq(value []byte) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStateModelsModelData) Gt(value []byte) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStateModelsModelData) Gte(value []byte) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStateModelsModelData) Lt(value []byte) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStateModelsModelData) Lte(value []byte) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStateModelsModelData) In(values [][]byte) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().State().Models().ModelData().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateModelsModelData) NotIn(values [][]byte) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().State().Models().ModelData().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateModelsModelData) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsEntryFieldPathBuilder().State().Models().ModelData().FieldPath(),
	})
}

func (b *filterCndBuilderStateModelsModelData) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsEntryFieldPathBuilder().State().Models().ModelData().FieldPath(),
	})
}

func (b *filterCndBuilderStateModelsModelData) compare(op gotenfilter.CompareOperator, value []byte) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:               op,
		TsEntry_FieldPathValue: NewTsEntryFieldPathBuilder().State().Models().ModelData().WithValue(value),
	})
}

type filterCndBuilderStateModelsTrainingMeanErr struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStateModelsTrainingMeanErr) Eq(value []float64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStateModelsTrainingMeanErr) Neq(value []float64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStateModelsTrainingMeanErr) Gt(value []float64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStateModelsTrainingMeanErr) Gte(value []float64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStateModelsTrainingMeanErr) Lt(value []float64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStateModelsTrainingMeanErr) Lte(value []float64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStateModelsTrainingMeanErr) In(values [][]float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().State().Models().TrainingMeanErr().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateModelsTrainingMeanErr) NotIn(values [][]float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().State().Models().TrainingMeanErr().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateModelsTrainingMeanErr) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsEntryFieldPathBuilder().State().Models().TrainingMeanErr().FieldPath(),
	})
}

func (b *filterCndBuilderStateModelsTrainingMeanErr) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsEntryFieldPathBuilder().State().Models().TrainingMeanErr().FieldPath(),
	})
}

func (b *filterCndBuilderStateModelsTrainingMeanErr) Contains(value float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewTsEntryFieldPathBuilder().State().Models().TrainingMeanErr().FieldPath(),
		Value:     NewTsEntryFieldPathBuilder().State().Models().TrainingMeanErr().WithItemValue(value),
	})
}

func (b *filterCndBuilderStateModelsTrainingMeanErr) ContainsAnyOf(values []float64) *FilterBuilder {
	pathSelector := NewTsEntryFieldPathBuilder().State().Models().TrainingMeanErr()
	itemValues := make([]TsEntry_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewTsEntryFieldPathBuilder().State().Models().TrainingMeanErr().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderStateModelsTrainingMeanErr) ContainsAll(values []float64) *FilterBuilder {
	pathSelector := NewTsEntryFieldPathBuilder().State().Models().TrainingMeanErr()
	itemValues := make([]TsEntry_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewTsEntryFieldPathBuilder().State().Models().TrainingMeanErr().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderStateModelsTrainingMeanErr) compare(op gotenfilter.CompareOperator, value []float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:               op,
		TsEntry_FieldPathValue: NewTsEntryFieldPathBuilder().State().Models().TrainingMeanErr().WithValue(value),
	})
}

type filterCndBuilderStateModelsTrainingMaxErr struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStateModelsTrainingMaxErr) Eq(value []float64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStateModelsTrainingMaxErr) Neq(value []float64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStateModelsTrainingMaxErr) Gt(value []float64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStateModelsTrainingMaxErr) Gte(value []float64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStateModelsTrainingMaxErr) Lt(value []float64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStateModelsTrainingMaxErr) Lte(value []float64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStateModelsTrainingMaxErr) In(values [][]float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().State().Models().TrainingMaxErr().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateModelsTrainingMaxErr) NotIn(values [][]float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().State().Models().TrainingMaxErr().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateModelsTrainingMaxErr) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsEntryFieldPathBuilder().State().Models().TrainingMaxErr().FieldPath(),
	})
}

func (b *filterCndBuilderStateModelsTrainingMaxErr) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsEntryFieldPathBuilder().State().Models().TrainingMaxErr().FieldPath(),
	})
}

func (b *filterCndBuilderStateModelsTrainingMaxErr) Contains(value float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewTsEntryFieldPathBuilder().State().Models().TrainingMaxErr().FieldPath(),
		Value:     NewTsEntryFieldPathBuilder().State().Models().TrainingMaxErr().WithItemValue(value),
	})
}

func (b *filterCndBuilderStateModelsTrainingMaxErr) ContainsAnyOf(values []float64) *FilterBuilder {
	pathSelector := NewTsEntryFieldPathBuilder().State().Models().TrainingMaxErr()
	itemValues := make([]TsEntry_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewTsEntryFieldPathBuilder().State().Models().TrainingMaxErr().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderStateModelsTrainingMaxErr) ContainsAll(values []float64) *FilterBuilder {
	pathSelector := NewTsEntryFieldPathBuilder().State().Models().TrainingMaxErr()
	itemValues := make([]TsEntry_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewTsEntryFieldPathBuilder().State().Models().TrainingMaxErr().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderStateModelsTrainingMaxErr) compare(op gotenfilter.CompareOperator, value []float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:               op,
		TsEntry_FieldPathValue: NewTsEntryFieldPathBuilder().State().Models().TrainingMaxErr().WithValue(value),
	})
}

type filterCndBuilderStateModelsTrainedInEpochs struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStateModelsTrainedInEpochs) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStateModelsTrainedInEpochs) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStateModelsTrainedInEpochs) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStateModelsTrainedInEpochs) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStateModelsTrainedInEpochs) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStateModelsTrainedInEpochs) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStateModelsTrainedInEpochs) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().State().Models().TrainedInEpochs().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateModelsTrainedInEpochs) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().State().Models().TrainedInEpochs().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateModelsTrainedInEpochs) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsEntryFieldPathBuilder().State().Models().TrainedInEpochs().FieldPath(),
	})
}

func (b *filterCndBuilderStateModelsTrainedInEpochs) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsEntryFieldPathBuilder().State().Models().TrainedInEpochs().FieldPath(),
	})
}

func (b *filterCndBuilderStateModelsTrainedInEpochs) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:               op,
		TsEntry_FieldPathValue: NewTsEntryFieldPathBuilder().State().Models().TrainedInEpochs().WithValue(value),
	})
}

type filterCndBuilderStateModelsTrainedIn struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStateModelsTrainedIn) Eq(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStateModelsTrainedIn) Neq(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStateModelsTrainedIn) Gt(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStateModelsTrainedIn) Gte(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStateModelsTrainedIn) Lt(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStateModelsTrainedIn) Lte(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStateModelsTrainedIn) In(values []*durationpb.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().State().Models().TrainedIn().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateModelsTrainedIn) NotIn(values []*durationpb.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().State().Models().TrainedIn().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateModelsTrainedIn) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsEntryFieldPathBuilder().State().Models().TrainedIn().FieldPath(),
	})
}

func (b *filterCndBuilderStateModelsTrainedIn) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsEntryFieldPathBuilder().State().Models().TrainedIn().FieldPath(),
	})
}

func (b *filterCndBuilderStateModelsTrainedIn) compare(op gotenfilter.CompareOperator, value *durationpb.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:               op,
		TsEntry_FieldPathValue: NewTsEntryFieldPathBuilder().State().Models().TrainedIn().WithValue(value),
	})
}

type filterCndBuilderStateModelsTrainAfter struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStateModelsTrainAfter) Eq(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStateModelsTrainAfter) Neq(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStateModelsTrainAfter) Gt(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStateModelsTrainAfter) Gte(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStateModelsTrainAfter) Lt(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStateModelsTrainAfter) Lte(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStateModelsTrainAfter) In(values []*timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().State().Models().TrainAfter().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateModelsTrainAfter) NotIn(values []*timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().State().Models().TrainAfter().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateModelsTrainAfter) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsEntryFieldPathBuilder().State().Models().TrainAfter().FieldPath(),
	})
}

func (b *filterCndBuilderStateModelsTrainAfter) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsEntryFieldPathBuilder().State().Models().TrainAfter().FieldPath(),
	})
}

func (b *filterCndBuilderStateModelsTrainAfter) compare(op gotenfilter.CompareOperator, value *timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:               op,
		TsEntry_FieldPathValue: NewTsEntryFieldPathBuilder().State().Models().TrainAfter().WithValue(value),
	})
}

type filterCndBuilderStateModelsTrainingPeriod struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStateModelsTrainingPeriod) Eq(value *monitoring_common.TimeInterval) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStateModelsTrainingPeriod) Neq(value *monitoring_common.TimeInterval) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStateModelsTrainingPeriod) Gt(value *monitoring_common.TimeInterval) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStateModelsTrainingPeriod) Gte(value *monitoring_common.TimeInterval) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStateModelsTrainingPeriod) Lt(value *monitoring_common.TimeInterval) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStateModelsTrainingPeriod) Lte(value *monitoring_common.TimeInterval) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStateModelsTrainingPeriod) In(values []*monitoring_common.TimeInterval) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().State().Models().TrainingPeriod().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateModelsTrainingPeriod) NotIn(values []*monitoring_common.TimeInterval) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().State().Models().TrainingPeriod().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateModelsTrainingPeriod) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsEntryFieldPathBuilder().State().Models().TrainingPeriod().FieldPath(),
	})
}

func (b *filterCndBuilderStateModelsTrainingPeriod) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsEntryFieldPathBuilder().State().Models().TrainingPeriod().FieldPath(),
	})
}

func (b *filterCndBuilderStateModelsTrainingPeriod) compare(op gotenfilter.CompareOperator, value *monitoring_common.TimeInterval) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:               op,
		TsEntry_FieldPathValue: NewTsEntryFieldPathBuilder().State().Models().TrainingPeriod().WithValue(value),
	})
}

func (b *filterCndBuilderStateModelsTrainingPeriod) EndTime() *filterCndBuilderStateModelsTrainingPeriodEndTime {
	return &filterCndBuilderStateModelsTrainingPeriodEndTime{builder: b.builder}
}

func (b *filterCndBuilderStateModelsTrainingPeriod) StartTime() *filterCndBuilderStateModelsTrainingPeriodStartTime {
	return &filterCndBuilderStateModelsTrainingPeriodStartTime{builder: b.builder}
}

type filterCndBuilderStateModelsTrainingPeriodEndTime struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStateModelsTrainingPeriodEndTime) Eq(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStateModelsTrainingPeriodEndTime) Neq(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStateModelsTrainingPeriodEndTime) Gt(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStateModelsTrainingPeriodEndTime) Gte(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStateModelsTrainingPeriodEndTime) Lt(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStateModelsTrainingPeriodEndTime) Lte(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStateModelsTrainingPeriodEndTime) In(values []*timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().State().Models().TrainingPeriod().EndTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateModelsTrainingPeriodEndTime) NotIn(values []*timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().State().Models().TrainingPeriod().EndTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateModelsTrainingPeriodEndTime) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsEntryFieldPathBuilder().State().Models().TrainingPeriod().EndTime().FieldPath(),
	})
}

func (b *filterCndBuilderStateModelsTrainingPeriodEndTime) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsEntryFieldPathBuilder().State().Models().TrainingPeriod().EndTime().FieldPath(),
	})
}

func (b *filterCndBuilderStateModelsTrainingPeriodEndTime) compare(op gotenfilter.CompareOperator, value *timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:               op,
		TsEntry_FieldPathValue: NewTsEntryFieldPathBuilder().State().Models().TrainingPeriod().EndTime().WithValue(value),
	})
}

type filterCndBuilderStateModelsTrainingPeriodStartTime struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStateModelsTrainingPeriodStartTime) Eq(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStateModelsTrainingPeriodStartTime) Neq(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStateModelsTrainingPeriodStartTime) Gt(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStateModelsTrainingPeriodStartTime) Gte(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStateModelsTrainingPeriodStartTime) Lt(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStateModelsTrainingPeriodStartTime) Lte(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStateModelsTrainingPeriodStartTime) In(values []*timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().State().Models().TrainingPeriod().StartTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateModelsTrainingPeriodStartTime) NotIn(values []*timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().State().Models().TrainingPeriod().StartTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateModelsTrainingPeriodStartTime) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsEntryFieldPathBuilder().State().Models().TrainingPeriod().StartTime().FieldPath(),
	})
}

func (b *filterCndBuilderStateModelsTrainingPeriodStartTime) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsEntryFieldPathBuilder().State().Models().TrainingPeriod().StartTime().FieldPath(),
	})
}

func (b *filterCndBuilderStateModelsTrainingPeriodStartTime) compare(op gotenfilter.CompareOperator, value *timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:               op,
		TsEntry_FieldPathValue: NewTsEntryFieldPathBuilder().State().Models().TrainingPeriod().StartTime().WithValue(value),
	})
}

type filterCndBuilderStateModelsSensitiveness struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStateModelsSensitiveness) Eq(value []*TsEntry_State_AnomalyModelSensitiveness) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStateModelsSensitiveness) Neq(value []*TsEntry_State_AnomalyModelSensitiveness) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStateModelsSensitiveness) Gt(value []*TsEntry_State_AnomalyModelSensitiveness) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStateModelsSensitiveness) Gte(value []*TsEntry_State_AnomalyModelSensitiveness) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStateModelsSensitiveness) Lt(value []*TsEntry_State_AnomalyModelSensitiveness) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStateModelsSensitiveness) Lte(value []*TsEntry_State_AnomalyModelSensitiveness) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStateModelsSensitiveness) In(values [][]*TsEntry_State_AnomalyModelSensitiveness) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().State().Models().Sensitiveness().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateModelsSensitiveness) NotIn(values [][]*TsEntry_State_AnomalyModelSensitiveness) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().State().Models().Sensitiveness().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateModelsSensitiveness) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsEntryFieldPathBuilder().State().Models().Sensitiveness().FieldPath(),
	})
}

func (b *filterCndBuilderStateModelsSensitiveness) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsEntryFieldPathBuilder().State().Models().Sensitiveness().FieldPath(),
	})
}

func (b *filterCndBuilderStateModelsSensitiveness) Contains(value *TsEntry_State_AnomalyModelSensitiveness) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewTsEntryFieldPathBuilder().State().Models().Sensitiveness().FieldPath(),
		Value:     NewTsEntryFieldPathBuilder().State().Models().Sensitiveness().WithItemValue(value),
	})
}

func (b *filterCndBuilderStateModelsSensitiveness) ContainsAnyOf(values []*TsEntry_State_AnomalyModelSensitiveness) *FilterBuilder {
	pathSelector := NewTsEntryFieldPathBuilder().State().Models().Sensitiveness()
	itemValues := make([]TsEntry_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewTsEntryFieldPathBuilder().State().Models().Sensitiveness().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderStateModelsSensitiveness) ContainsAll(values []*TsEntry_State_AnomalyModelSensitiveness) *FilterBuilder {
	pathSelector := NewTsEntryFieldPathBuilder().State().Models().Sensitiveness()
	itemValues := make([]TsEntry_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewTsEntryFieldPathBuilder().State().Models().Sensitiveness().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderStateModelsSensitiveness) compare(op gotenfilter.CompareOperator, value []*TsEntry_State_AnomalyModelSensitiveness) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:               op,
		TsEntry_FieldPathValue: NewTsEntryFieldPathBuilder().State().Models().Sensitiveness().WithValue(value),
	})
}

func (b *filterCndBuilderStateModelsSensitiveness) QueryName() *filterCndBuilderStateModelsSensitivenessQueryName {
	return &filterCndBuilderStateModelsSensitivenessQueryName{builder: b.builder}
}

func (b *filterCndBuilderStateModelsSensitiveness) AnomalyThreshold() *filterCndBuilderStateModelsSensitivenessAnomalyThreshold {
	return &filterCndBuilderStateModelsSensitivenessAnomalyThreshold{builder: b.builder}
}

type filterCndBuilderStateModelsSensitivenessQueryName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStateModelsSensitivenessQueryName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStateModelsSensitivenessQueryName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStateModelsSensitivenessQueryName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStateModelsSensitivenessQueryName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStateModelsSensitivenessQueryName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStateModelsSensitivenessQueryName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStateModelsSensitivenessQueryName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().State().Models().Sensitiveness().QueryName().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateModelsSensitivenessQueryName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().State().Models().Sensitiveness().QueryName().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateModelsSensitivenessQueryName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsEntryFieldPathBuilder().State().Models().Sensitiveness().QueryName().FieldPath(),
	})
}

func (b *filterCndBuilderStateModelsSensitivenessQueryName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsEntryFieldPathBuilder().State().Models().Sensitiveness().QueryName().FieldPath(),
	})
}

func (b *filterCndBuilderStateModelsSensitivenessQueryName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:               op,
		TsEntry_FieldPathValue: NewTsEntryFieldPathBuilder().State().Models().Sensitiveness().QueryName().WithValue(value),
	})
}

type filterCndBuilderStateModelsSensitivenessAnomalyThreshold struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStateModelsSensitivenessAnomalyThreshold) Eq(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStateModelsSensitivenessAnomalyThreshold) Neq(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStateModelsSensitivenessAnomalyThreshold) Gt(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStateModelsSensitivenessAnomalyThreshold) Gte(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStateModelsSensitivenessAnomalyThreshold) Lt(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStateModelsSensitivenessAnomalyThreshold) Lte(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStateModelsSensitivenessAnomalyThreshold) In(values []float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().State().Models().Sensitiveness().AnomalyThreshold().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateModelsSensitivenessAnomalyThreshold) NotIn(values []float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().State().Models().Sensitiveness().AnomalyThreshold().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateModelsSensitivenessAnomalyThreshold) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsEntryFieldPathBuilder().State().Models().Sensitiveness().AnomalyThreshold().FieldPath(),
	})
}

func (b *filterCndBuilderStateModelsSensitivenessAnomalyThreshold) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsEntryFieldPathBuilder().State().Models().Sensitiveness().AnomalyThreshold().FieldPath(),
	})
}

func (b *filterCndBuilderStateModelsSensitivenessAnomalyThreshold) compare(op gotenfilter.CompareOperator, value float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:               op,
		TsEntry_FieldPathValue: NewTsEntryFieldPathBuilder().State().Models().Sensitiveness().AnomalyThreshold().WithValue(value),
	})
}

type filterCndBuilderStateThresholds struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStateThresholds) Eq(value []*TsEntry_State_AdaptiveThresholdInfo) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStateThresholds) Neq(value []*TsEntry_State_AdaptiveThresholdInfo) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStateThresholds) Gt(value []*TsEntry_State_AdaptiveThresholdInfo) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStateThresholds) Gte(value []*TsEntry_State_AdaptiveThresholdInfo) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStateThresholds) Lt(value []*TsEntry_State_AdaptiveThresholdInfo) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStateThresholds) Lte(value []*TsEntry_State_AdaptiveThresholdInfo) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStateThresholds) In(values [][]*TsEntry_State_AdaptiveThresholdInfo) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().State().Thresholds().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateThresholds) NotIn(values [][]*TsEntry_State_AdaptiveThresholdInfo) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().State().Thresholds().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateThresholds) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsEntryFieldPathBuilder().State().Thresholds().FieldPath(),
	})
}

func (b *filterCndBuilderStateThresholds) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsEntryFieldPathBuilder().State().Thresholds().FieldPath(),
	})
}

func (b *filterCndBuilderStateThresholds) Contains(value *TsEntry_State_AdaptiveThresholdInfo) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewTsEntryFieldPathBuilder().State().Thresholds().FieldPath(),
		Value:     NewTsEntryFieldPathBuilder().State().Thresholds().WithItemValue(value),
	})
}

func (b *filterCndBuilderStateThresholds) ContainsAnyOf(values []*TsEntry_State_AdaptiveThresholdInfo) *FilterBuilder {
	pathSelector := NewTsEntryFieldPathBuilder().State().Thresholds()
	itemValues := make([]TsEntry_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewTsEntryFieldPathBuilder().State().Thresholds().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderStateThresholds) ContainsAll(values []*TsEntry_State_AdaptiveThresholdInfo) *FilterBuilder {
	pathSelector := NewTsEntryFieldPathBuilder().State().Thresholds()
	itemValues := make([]TsEntry_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewTsEntryFieldPathBuilder().State().Thresholds().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderStateThresholds) compare(op gotenfilter.CompareOperator, value []*TsEntry_State_AdaptiveThresholdInfo) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:               op,
		TsEntry_FieldPathValue: NewTsEntryFieldPathBuilder().State().Thresholds().WithValue(value),
	})
}

func (b *filterCndBuilderStateThresholds) QueryName() *filterCndBuilderStateThresholdsQueryName {
	return &filterCndBuilderStateThresholdsQueryName{builder: b.builder}
}

func (b *filterCndBuilderStateThresholds) Lower() *filterCndBuilderStateThresholdsLower {
	return &filterCndBuilderStateThresholdsLower{builder: b.builder}
}

func (b *filterCndBuilderStateThresholds) Upper() *filterCndBuilderStateThresholdsUpper {
	return &filterCndBuilderStateThresholdsUpper{builder: b.builder}
}

func (b *filterCndBuilderStateThresholds) NextCheck() *filterCndBuilderStateThresholdsNextCheck {
	return &filterCndBuilderStateThresholdsNextCheck{builder: b.builder}
}

type filterCndBuilderStateThresholdsQueryName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStateThresholdsQueryName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStateThresholdsQueryName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStateThresholdsQueryName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStateThresholdsQueryName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStateThresholdsQueryName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStateThresholdsQueryName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStateThresholdsQueryName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().State().Thresholds().QueryName().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateThresholdsQueryName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().State().Thresholds().QueryName().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateThresholdsQueryName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsEntryFieldPathBuilder().State().Thresholds().QueryName().FieldPath(),
	})
}

func (b *filterCndBuilderStateThresholdsQueryName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsEntryFieldPathBuilder().State().Thresholds().QueryName().FieldPath(),
	})
}

func (b *filterCndBuilderStateThresholdsQueryName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:               op,
		TsEntry_FieldPathValue: NewTsEntryFieldPathBuilder().State().Thresholds().QueryName().WithValue(value),
	})
}

type filterCndBuilderStateThresholdsLower struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStateThresholdsLower) Eq(value *rcommon.AlertingThreshold) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStateThresholdsLower) Neq(value *rcommon.AlertingThreshold) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStateThresholdsLower) Gt(value *rcommon.AlertingThreshold) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStateThresholdsLower) Gte(value *rcommon.AlertingThreshold) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStateThresholdsLower) Lt(value *rcommon.AlertingThreshold) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStateThresholdsLower) Lte(value *rcommon.AlertingThreshold) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStateThresholdsLower) In(values []*rcommon.AlertingThreshold) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().State().Thresholds().Lower().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateThresholdsLower) NotIn(values []*rcommon.AlertingThreshold) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().State().Thresholds().Lower().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateThresholdsLower) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsEntryFieldPathBuilder().State().Thresholds().Lower().FieldPath(),
	})
}

func (b *filterCndBuilderStateThresholdsLower) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsEntryFieldPathBuilder().State().Thresholds().Lower().FieldPath(),
	})
}

func (b *filterCndBuilderStateThresholdsLower) compare(op gotenfilter.CompareOperator, value *rcommon.AlertingThreshold) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:               op,
		TsEntry_FieldPathValue: NewTsEntryFieldPathBuilder().State().Thresholds().Lower().WithValue(value),
	})
}

func (b *filterCndBuilderStateThresholdsLower) Value() *filterCndBuilderStateThresholdsLowerValue {
	return &filterCndBuilderStateThresholdsLowerValue{builder: b.builder}
}

func (b *filterCndBuilderStateThresholdsLower) IsInclusive() *filterCndBuilderStateThresholdsLowerIsInclusive {
	return &filterCndBuilderStateThresholdsLowerIsInclusive{builder: b.builder}
}

type filterCndBuilderStateThresholdsLowerValue struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStateThresholdsLowerValue) Eq(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStateThresholdsLowerValue) Neq(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStateThresholdsLowerValue) Gt(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStateThresholdsLowerValue) Gte(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStateThresholdsLowerValue) Lt(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStateThresholdsLowerValue) Lte(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStateThresholdsLowerValue) In(values []float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().State().Thresholds().Lower().Value().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateThresholdsLowerValue) NotIn(values []float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().State().Thresholds().Lower().Value().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateThresholdsLowerValue) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsEntryFieldPathBuilder().State().Thresholds().Lower().Value().FieldPath(),
	})
}

func (b *filterCndBuilderStateThresholdsLowerValue) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsEntryFieldPathBuilder().State().Thresholds().Lower().Value().FieldPath(),
	})
}

func (b *filterCndBuilderStateThresholdsLowerValue) compare(op gotenfilter.CompareOperator, value float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:               op,
		TsEntry_FieldPathValue: NewTsEntryFieldPathBuilder().State().Thresholds().Lower().Value().WithValue(value),
	})
}

type filterCndBuilderStateThresholdsLowerIsInclusive struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStateThresholdsLowerIsInclusive) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStateThresholdsLowerIsInclusive) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStateThresholdsLowerIsInclusive) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStateThresholdsLowerIsInclusive) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStateThresholdsLowerIsInclusive) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStateThresholdsLowerIsInclusive) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStateThresholdsLowerIsInclusive) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().State().Thresholds().Lower().IsInclusive().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateThresholdsLowerIsInclusive) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().State().Thresholds().Lower().IsInclusive().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateThresholdsLowerIsInclusive) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsEntryFieldPathBuilder().State().Thresholds().Lower().IsInclusive().FieldPath(),
	})
}

func (b *filterCndBuilderStateThresholdsLowerIsInclusive) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsEntryFieldPathBuilder().State().Thresholds().Lower().IsInclusive().FieldPath(),
	})
}

func (b *filterCndBuilderStateThresholdsLowerIsInclusive) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:               op,
		TsEntry_FieldPathValue: NewTsEntryFieldPathBuilder().State().Thresholds().Lower().IsInclusive().WithValue(value),
	})
}

type filterCndBuilderStateThresholdsUpper struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStateThresholdsUpper) Eq(value *rcommon.AlertingThreshold) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStateThresholdsUpper) Neq(value *rcommon.AlertingThreshold) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStateThresholdsUpper) Gt(value *rcommon.AlertingThreshold) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStateThresholdsUpper) Gte(value *rcommon.AlertingThreshold) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStateThresholdsUpper) Lt(value *rcommon.AlertingThreshold) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStateThresholdsUpper) Lte(value *rcommon.AlertingThreshold) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStateThresholdsUpper) In(values []*rcommon.AlertingThreshold) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().State().Thresholds().Upper().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateThresholdsUpper) NotIn(values []*rcommon.AlertingThreshold) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().State().Thresholds().Upper().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateThresholdsUpper) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsEntryFieldPathBuilder().State().Thresholds().Upper().FieldPath(),
	})
}

func (b *filterCndBuilderStateThresholdsUpper) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsEntryFieldPathBuilder().State().Thresholds().Upper().FieldPath(),
	})
}

func (b *filterCndBuilderStateThresholdsUpper) compare(op gotenfilter.CompareOperator, value *rcommon.AlertingThreshold) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:               op,
		TsEntry_FieldPathValue: NewTsEntryFieldPathBuilder().State().Thresholds().Upper().WithValue(value),
	})
}

func (b *filterCndBuilderStateThresholdsUpper) Value() *filterCndBuilderStateThresholdsUpperValue {
	return &filterCndBuilderStateThresholdsUpperValue{builder: b.builder}
}

func (b *filterCndBuilderStateThresholdsUpper) IsInclusive() *filterCndBuilderStateThresholdsUpperIsInclusive {
	return &filterCndBuilderStateThresholdsUpperIsInclusive{builder: b.builder}
}

type filterCndBuilderStateThresholdsUpperValue struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStateThresholdsUpperValue) Eq(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStateThresholdsUpperValue) Neq(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStateThresholdsUpperValue) Gt(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStateThresholdsUpperValue) Gte(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStateThresholdsUpperValue) Lt(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStateThresholdsUpperValue) Lte(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStateThresholdsUpperValue) In(values []float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().State().Thresholds().Upper().Value().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateThresholdsUpperValue) NotIn(values []float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().State().Thresholds().Upper().Value().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateThresholdsUpperValue) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsEntryFieldPathBuilder().State().Thresholds().Upper().Value().FieldPath(),
	})
}

func (b *filterCndBuilderStateThresholdsUpperValue) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsEntryFieldPathBuilder().State().Thresholds().Upper().Value().FieldPath(),
	})
}

func (b *filterCndBuilderStateThresholdsUpperValue) compare(op gotenfilter.CompareOperator, value float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:               op,
		TsEntry_FieldPathValue: NewTsEntryFieldPathBuilder().State().Thresholds().Upper().Value().WithValue(value),
	})
}

type filterCndBuilderStateThresholdsUpperIsInclusive struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStateThresholdsUpperIsInclusive) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStateThresholdsUpperIsInclusive) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStateThresholdsUpperIsInclusive) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStateThresholdsUpperIsInclusive) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStateThresholdsUpperIsInclusive) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStateThresholdsUpperIsInclusive) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStateThresholdsUpperIsInclusive) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().State().Thresholds().Upper().IsInclusive().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateThresholdsUpperIsInclusive) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().State().Thresholds().Upper().IsInclusive().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateThresholdsUpperIsInclusive) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsEntryFieldPathBuilder().State().Thresholds().Upper().IsInclusive().FieldPath(),
	})
}

func (b *filterCndBuilderStateThresholdsUpperIsInclusive) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsEntryFieldPathBuilder().State().Thresholds().Upper().IsInclusive().FieldPath(),
	})
}

func (b *filterCndBuilderStateThresholdsUpperIsInclusive) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:               op,
		TsEntry_FieldPathValue: NewTsEntryFieldPathBuilder().State().Thresholds().Upper().IsInclusive().WithValue(value),
	})
}

type filterCndBuilderStateThresholdsNextCheck struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStateThresholdsNextCheck) Eq(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStateThresholdsNextCheck) Neq(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStateThresholdsNextCheck) Gt(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStateThresholdsNextCheck) Gte(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStateThresholdsNextCheck) Lt(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStateThresholdsNextCheck) Lte(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStateThresholdsNextCheck) In(values []*timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().State().Thresholds().NextCheck().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateThresholdsNextCheck) NotIn(values []*timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().State().Thresholds().NextCheck().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateThresholdsNextCheck) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsEntryFieldPathBuilder().State().Thresholds().NextCheck().FieldPath(),
	})
}

func (b *filterCndBuilderStateThresholdsNextCheck) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsEntryFieldPathBuilder().State().Thresholds().NextCheck().FieldPath(),
	})
}

func (b *filterCndBuilderStateThresholdsNextCheck) compare(op gotenfilter.CompareOperator, value *timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:               op,
		TsEntry_FieldPathValue: NewTsEntryFieldPathBuilder().State().Thresholds().NextCheck().WithValue(value),
	})
}

type filterCndBuilderInternal struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderInternal) Eq(value *TsEntry_Internal) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderInternal) Neq(value *TsEntry_Internal) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderInternal) Gt(value *TsEntry_Internal) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderInternal) Gte(value *TsEntry_Internal) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderInternal) Lt(value *TsEntry_Internal) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderInternal) Lte(value *TsEntry_Internal) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderInternal) In(values []*TsEntry_Internal) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Internal().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInternal) NotIn(values []*TsEntry_Internal) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Internal().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInternal) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsEntryFieldPathBuilder().Internal().FieldPath(),
	})
}

func (b *filterCndBuilderInternal) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsEntryFieldPathBuilder().Internal().FieldPath(),
	})
}

func (b *filterCndBuilderInternal) compare(op gotenfilter.CompareOperator, value *TsEntry_Internal) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:               op,
		TsEntry_FieldPathValue: NewTsEntryFieldPathBuilder().Internal().WithValue(value),
	})
}

func (b *filterCndBuilderInternal) AlertingLocation() *filterCndBuilderInternalAlertingLocation {
	return &filterCndBuilderInternalAlertingLocation{builder: b.builder}
}

func (b *filterCndBuilderInternal) SpecGeneration() *filterCndBuilderInternalSpecGeneration {
	return &filterCndBuilderInternalSpecGeneration{builder: b.builder}
}

type filterCndBuilderInternalAlertingLocation struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderInternalAlertingLocation) Eq(value rcommon.PolicySpec_ProcessingLocation) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderInternalAlertingLocation) Neq(value rcommon.PolicySpec_ProcessingLocation) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderInternalAlertingLocation) Gt(value rcommon.PolicySpec_ProcessingLocation) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderInternalAlertingLocation) Gte(value rcommon.PolicySpec_ProcessingLocation) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderInternalAlertingLocation) Lt(value rcommon.PolicySpec_ProcessingLocation) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderInternalAlertingLocation) Lte(value rcommon.PolicySpec_ProcessingLocation) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderInternalAlertingLocation) In(values []rcommon.PolicySpec_ProcessingLocation) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Internal().AlertingLocation().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInternalAlertingLocation) NotIn(values []rcommon.PolicySpec_ProcessingLocation) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Internal().AlertingLocation().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInternalAlertingLocation) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsEntryFieldPathBuilder().Internal().AlertingLocation().FieldPath(),
	})
}

func (b *filterCndBuilderInternalAlertingLocation) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsEntryFieldPathBuilder().Internal().AlertingLocation().FieldPath(),
	})
}

func (b *filterCndBuilderInternalAlertingLocation) compare(op gotenfilter.CompareOperator, value rcommon.PolicySpec_ProcessingLocation) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:               op,
		TsEntry_FieldPathValue: NewTsEntryFieldPathBuilder().Internal().AlertingLocation().WithValue(value),
	})
}

type filterCndBuilderInternalSpecGeneration struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderInternalSpecGeneration) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderInternalSpecGeneration) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderInternalSpecGeneration) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderInternalSpecGeneration) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderInternalSpecGeneration) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderInternalSpecGeneration) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderInternalSpecGeneration) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Internal().SpecGeneration().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInternalSpecGeneration) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsEntry_FieldPathArrayOfValues: NewTsEntryFieldPathBuilder().Internal().SpecGeneration().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInternalSpecGeneration) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsEntryFieldPathBuilder().Internal().SpecGeneration().FieldPath(),
	})
}

func (b *filterCndBuilderInternalSpecGeneration) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsEntryFieldPathBuilder().Internal().SpecGeneration().FieldPath(),
	})
}

func (b *filterCndBuilderInternalSpecGeneration) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:               op,
		TsEntry_FieldPathValue: NewTsEntryFieldPathBuilder().Internal().SpecGeneration().WithValue(value),
	})
}
