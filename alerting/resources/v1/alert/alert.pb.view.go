// Code generated by protoc-gen-goten-resource
// Resource: Alert
// DO NOT EDIT!!!

package alert

import (
	googlefieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"

	"github.com/cloudwan/goten-sdk/types/view"
)

// proto imports
import (
	log_condition "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/log_condition"
	notification_channel "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/notification_channel"
	policy "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/policy"
	ts_condition "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/ts_condition"
	meta "github.com/cloudwan/goten-sdk/types/meta"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// ensure the imports are used
var (
	_ = googlefieldmaskpb.FieldMask{}

	_ = view.View_UNSPECIFIED
)

// make sure we're using proto imports
var (
	_ = &log_condition.LogCondition{}
	_ = &notification_channel.NotificationChannel{}
	_ = &policy.Policy{}
	_ = &ts_condition.TsCondition{}
	_ = &durationpb.Duration{}
	_ = &timestamppb.Timestamp{}
	_ = &meta.Meta{}
)

func ResourceViewFieldMask(viewName view.View, extraMask *Alert_FieldMask) *Alert_FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}

	switch viewName {
	case view.View_UNSPECIFIED:
		return extraMask
	case view.View_FULL:
		return nil
	case view.View_BASIC:
		protoFieldMask.Paths = append(protoFieldMask.Paths, "name", "display_name", "alerting_resource.name", "state.is_firing", "state.escalation_level", "state.ai_agent_handling_state", "state.operator_handling_state", "state.start_time", "state.end_time")
		break
	case view.View_DETAIL:
		protoFieldMask.Paths = append(protoFieldMask.Paths, "name", "display_name", "alerting_resource", "ts_info.type", "ts_info.anomaly_window_size", "ts_info.metric_types", "ts_info.resource_types", "ts_info.common_metric_labels", "ts_info.common_resource_labels", "ts_info.time_series", "log_info.types", "log_info.common_log_labels", "log_info.violating_log", "state.is_firing", "state.escalation_level", "state.ai_agent_handling_state", "state.ai_agent_diagnosis_notes", "state.ai_remediation_arg", "state.operator_handling_state", "state.operator_notes", "state.start_time", "state.end_time")
		break
	case view.View_NAME:
		protoFieldMask.Paths = append(protoFieldMask.Paths, "name", "display_name")
		break
	default:
		return extraMask
	}
	if extraMask != nil {
		protoFieldMask.Paths = append(protoFieldMask.Paths, extraMask.ToProtoFieldMask().Paths...)
	}
	res := &Alert_FieldMask{}
	_ = res.FromProtoFieldMask(protoFieldMask)
	return res
}
