// Code generated by protoc-gen-goten-object
// File: edgelq/alerting/proto/v1/alert.proto
// DO NOT EDIT!!!

package alert

import (
	"encoding/json"
	"strings"

	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	googlefieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	log_condition "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/log_condition"
	notification_channel "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/notification_channel"
	policy "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/policy"
	ts_condition "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/ts_condition"
	meta "github.com/cloudwan/goten-sdk/types/meta"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = strings.Builder{}

	_ = codes.NotFound
	_ = status.Status{}
	_ = new(proto.Message)
	_ = new(preflect.Message)
	_ = googlefieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldMask)
)

// make sure we're using proto imports
var (
	_ = &log_condition.LogCondition{}
	_ = &notification_channel.NotificationChannel{}
	_ = &policy.Policy{}
	_ = &ts_condition.TsCondition{}
	_ = &durationpb.Duration{}
	_ = &timestamppb.Timestamp{}
	_ = &meta.Meta{}
)

type Alert_FieldMask struct {
	Paths []Alert_FieldPath
}

func FullAlert_FieldMask() *Alert_FieldMask {
	res := &Alert_FieldMask{}
	res.Paths = append(res.Paths, &Alert_FieldTerminalPath{selector: Alert_FieldPathSelectorName})
	res.Paths = append(res.Paths, &Alert_FieldTerminalPath{selector: Alert_FieldPathSelectorMetadata})
	res.Paths = append(res.Paths, &Alert_FieldTerminalPath{selector: Alert_FieldPathSelectorDisplayName})
	res.Paths = append(res.Paths, &Alert_FieldTerminalPath{selector: Alert_FieldPathSelectorAlertingResource})
	res.Paths = append(res.Paths, &Alert_FieldTerminalPath{selector: Alert_FieldPathSelectorTsInfo})
	res.Paths = append(res.Paths, &Alert_FieldTerminalPath{selector: Alert_FieldPathSelectorLogInfo})
	res.Paths = append(res.Paths, &Alert_FieldTerminalPath{selector: Alert_FieldPathSelectorState})
	res.Paths = append(res.Paths, &Alert_FieldTerminalPath{selector: Alert_FieldPathSelectorInternal})
	return res
}

func (fieldMask *Alert_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

func (fieldMask *Alert_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 8)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*Alert_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *Alert_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseAlert_FieldPath(raw)
	})
}

func (fieldMask *Alert_FieldMask) ProtoMessage() {}

func (fieldMask *Alert_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *Alert_FieldMask) Subtract(other *Alert_FieldMask) *Alert_FieldMask {
	result := &Alert_FieldMask{}
	removedSelectors := make([]bool, 8)
	otherSubMasks := map[Alert_FieldPathSelector]gotenobject.FieldMask{
		Alert_FieldPathSelectorMetadata:         &meta.Meta_FieldMask{},
		Alert_FieldPathSelectorAlertingResource: &meta.OwnerReference_FieldMask{},
		Alert_FieldPathSelectorTsInfo:           &Alert_TsInfo_FieldMask{},
		Alert_FieldPathSelectorLogInfo:          &Alert_LogInfo_FieldMask{},
		Alert_FieldPathSelectorState:            &Alert_State_FieldMask{},
		Alert_FieldPathSelectorInternal:         &Alert_Internal_FieldMask{},
	}
	mySubMasks := map[Alert_FieldPathSelector]gotenobject.FieldMask{
		Alert_FieldPathSelectorMetadata:         &meta.Meta_FieldMask{},
		Alert_FieldPathSelectorAlertingResource: &meta.OwnerReference_FieldMask{},
		Alert_FieldPathSelectorTsInfo:           &Alert_TsInfo_FieldMask{},
		Alert_FieldPathSelectorLogInfo:          &Alert_LogInfo_FieldMask{},
		Alert_FieldPathSelectorState:            &Alert_State_FieldMask{},
		Alert_FieldPathSelectorInternal:         &Alert_Internal_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *Alert_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *Alert_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*Alert_FieldTerminalPath); ok {
					switch tp.selector {
					case Alert_FieldPathSelectorMetadata:
						mySubMasks[Alert_FieldPathSelectorMetadata] = meta.FullMeta_FieldMask()
					case Alert_FieldPathSelectorAlertingResource:
						mySubMasks[Alert_FieldPathSelectorAlertingResource] = meta.FullOwnerReference_FieldMask()
					case Alert_FieldPathSelectorTsInfo:
						mySubMasks[Alert_FieldPathSelectorTsInfo] = FullAlert_TsInfo_FieldMask()
					case Alert_FieldPathSelectorLogInfo:
						mySubMasks[Alert_FieldPathSelectorLogInfo] = FullAlert_LogInfo_FieldMask()
					case Alert_FieldPathSelectorState:
						mySubMasks[Alert_FieldPathSelectorState] = FullAlert_State_FieldMask()
					case Alert_FieldPathSelectorInternal:
						mySubMasks[Alert_FieldPathSelectorInternal] = FullAlert_Internal_FieldMask()
					}
				} else if tp, ok := path.(*Alert_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &Alert_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *Alert_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*Alert_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *Alert_FieldMask) FilterInputFields() *Alert_FieldMask {
	result := &Alert_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case Alert_FieldPathSelectorDisplayName:
		case Alert_FieldPathSelectorInternal:
		case Alert_FieldPathSelectorMetadata:
			if _, ok := path.(*Alert_FieldTerminalPath); ok {
				for _, subpath := range meta.FullMeta_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &Alert_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*Alert_FieldSubPath); ok {
				selectedMask := &meta.Meta_FieldMask{
					Paths: []meta.Meta_FieldPath{sub.subPath.(meta.Meta_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &Alert_FieldSubPath{selector: Alert_FieldPathSelectorMetadata, subPath: allowedPath})
				}
			}
		case Alert_FieldPathSelectorTsInfo:
			if _, ok := path.(*Alert_FieldTerminalPath); ok {
				for _, subpath := range FullAlert_TsInfo_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &Alert_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*Alert_FieldSubPath); ok {
				selectedMask := &Alert_TsInfo_FieldMask{
					Paths: []AlertTsInfo_FieldPath{sub.subPath.(AlertTsInfo_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &Alert_FieldSubPath{selector: Alert_FieldPathSelectorTsInfo, subPath: allowedPath})
				}
			}
		case Alert_FieldPathSelectorLogInfo:
			if _, ok := path.(*Alert_FieldTerminalPath); ok {
				for _, subpath := range FullAlert_LogInfo_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &Alert_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*Alert_FieldSubPath); ok {
				selectedMask := &Alert_LogInfo_FieldMask{
					Paths: []AlertLogInfo_FieldPath{sub.subPath.(AlertLogInfo_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &Alert_FieldSubPath{selector: Alert_FieldPathSelectorLogInfo, subPath: allowedPath})
				}
			}
		case Alert_FieldPathSelectorState:
			if _, ok := path.(*Alert_FieldTerminalPath); ok {
				for _, subpath := range FullAlert_State_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &Alert_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*Alert_FieldSubPath); ok {
				selectedMask := &Alert_State_FieldMask{
					Paths: []AlertState_FieldPath{sub.subPath.(AlertState_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &Alert_FieldSubPath{selector: Alert_FieldPathSelectorState, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *Alert_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *Alert_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]Alert_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseAlert_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask Alert_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *Alert_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Alert_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask Alert_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *Alert_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Alert_FieldMask) AppendPath(path Alert_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *Alert_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(Alert_FieldPath))
}

func (fieldMask *Alert_FieldMask) GetPaths() []Alert_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *Alert_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *Alert_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseAlert_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *Alert_FieldMask) Set(target, source *Alert) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *Alert_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*Alert), source.(*Alert))
}

func (fieldMask *Alert_FieldMask) Project(source *Alert) *Alert {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &Alert{}
	metadataMask := &meta.Meta_FieldMask{}
	wholeMetadataAccepted := false
	alertingResourceMask := &meta.OwnerReference_FieldMask{}
	wholeAlertingResourceAccepted := false
	tsInfoMask := &Alert_TsInfo_FieldMask{}
	wholeTsInfoAccepted := false
	logInfoMask := &Alert_LogInfo_FieldMask{}
	wholeLogInfoAccepted := false
	stateMask := &Alert_State_FieldMask{}
	wholeStateAccepted := false
	internalMask := &Alert_Internal_FieldMask{}
	wholeInternalAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *Alert_FieldTerminalPath:
			switch tp.selector {
			case Alert_FieldPathSelectorName:
				result.Name = source.Name
			case Alert_FieldPathSelectorMetadata:
				result.Metadata = source.Metadata
				wholeMetadataAccepted = true
			case Alert_FieldPathSelectorDisplayName:
				result.DisplayName = source.DisplayName
			case Alert_FieldPathSelectorAlertingResource:
				result.AlertingResource = source.AlertingResource
				wholeAlertingResourceAccepted = true
			case Alert_FieldPathSelectorTsInfo:
				if source, ok := source.Info.(*Alert_TsInfo_); ok {
					result.Info = &Alert_TsInfo_{
						TsInfo: source.TsInfo,
					}
				}
				wholeTsInfoAccepted = true
			case Alert_FieldPathSelectorLogInfo:
				if source, ok := source.Info.(*Alert_LogInfo_); ok {
					result.Info = &Alert_LogInfo_{
						LogInfo: source.LogInfo,
					}
				}
				wholeLogInfoAccepted = true
			case Alert_FieldPathSelectorState:
				result.State = source.State
				wholeStateAccepted = true
			case Alert_FieldPathSelectorInternal:
				result.Internal = source.Internal
				wholeInternalAccepted = true
			}
		case *Alert_FieldSubPath:
			switch tp.selector {
			case Alert_FieldPathSelectorMetadata:
				metadataMask.AppendPath(tp.subPath.(meta.Meta_FieldPath))
			case Alert_FieldPathSelectorAlertingResource:
				alertingResourceMask.AppendPath(tp.subPath.(meta.OwnerReference_FieldPath))
			case Alert_FieldPathSelectorTsInfo:
				tsInfoMask.AppendPath(tp.subPath.(AlertTsInfo_FieldPath))
			case Alert_FieldPathSelectorLogInfo:
				logInfoMask.AppendPath(tp.subPath.(AlertLogInfo_FieldPath))
			case Alert_FieldPathSelectorState:
				stateMask.AppendPath(tp.subPath.(AlertState_FieldPath))
			case Alert_FieldPathSelectorInternal:
				internalMask.AppendPath(tp.subPath.(AlertInternal_FieldPath))
			}
		}
	}
	if wholeMetadataAccepted == false && len(metadataMask.Paths) > 0 {
		result.Metadata = metadataMask.Project(source.GetMetadata())
	}
	if wholeAlertingResourceAccepted == false && len(alertingResourceMask.Paths) > 0 {
		result.AlertingResource = alertingResourceMask.Project(source.GetAlertingResource())
	}
	if wholeTsInfoAccepted == false && len(tsInfoMask.Paths) > 0 {
		if asOneOf, ok := source.Info.(*Alert_TsInfo_); ok {
			result.Info = (*Alert_TsInfo_)(nil)
			if asOneOf != nil {
				oneOfRes := &Alert_TsInfo_{}
				oneOfRes.TsInfo = tsInfoMask.Project(asOneOf.TsInfo)
				result.Info = oneOfRes
			}
		}
	}
	if wholeLogInfoAccepted == false && len(logInfoMask.Paths) > 0 {
		if asOneOf, ok := source.Info.(*Alert_LogInfo_); ok {
			result.Info = (*Alert_LogInfo_)(nil)
			if asOneOf != nil {
				oneOfRes := &Alert_LogInfo_{}
				oneOfRes.LogInfo = logInfoMask.Project(asOneOf.LogInfo)
				result.Info = oneOfRes
			}
		}
	}
	if wholeStateAccepted == false && len(stateMask.Paths) > 0 {
		result.State = stateMask.Project(source.GetState())
	}
	if wholeInternalAccepted == false && len(internalMask.Paths) > 0 {
		result.Internal = internalMask.Project(source.GetInternal())
	}
	return result
}

func (fieldMask *Alert_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*Alert))
}

func (fieldMask *Alert_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type Alert_TsInfo_FieldMask struct {
	Paths []AlertTsInfo_FieldPath
}

func FullAlert_TsInfo_FieldMask() *Alert_TsInfo_FieldMask {
	res := &Alert_TsInfo_FieldMask{}
	res.Paths = append(res.Paths, &AlertTsInfo_FieldTerminalPath{selector: AlertTsInfo_FieldPathSelectorType})
	res.Paths = append(res.Paths, &AlertTsInfo_FieldTerminalPath{selector: AlertTsInfo_FieldPathSelectorAnomalyWindowSize})
	res.Paths = append(res.Paths, &AlertTsInfo_FieldTerminalPath{selector: AlertTsInfo_FieldPathSelectorCommonKey})
	res.Paths = append(res.Paths, &AlertTsInfo_FieldTerminalPath{selector: AlertTsInfo_FieldPathSelectorMetricTypes})
	res.Paths = append(res.Paths, &AlertTsInfo_FieldTerminalPath{selector: AlertTsInfo_FieldPathSelectorResourceTypes})
	res.Paths = append(res.Paths, &AlertTsInfo_FieldTerminalPath{selector: AlertTsInfo_FieldPathSelectorCommonMetricLabels})
	res.Paths = append(res.Paths, &AlertTsInfo_FieldTerminalPath{selector: AlertTsInfo_FieldPathSelectorCommonResourceLabels})
	res.Paths = append(res.Paths, &AlertTsInfo_FieldTerminalPath{selector: AlertTsInfo_FieldPathSelectorTimeSeries})
	return res
}

func (fieldMask *Alert_TsInfo_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

func (fieldMask *Alert_TsInfo_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 8)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*AlertTsInfo_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *Alert_TsInfo_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseAlertTsInfo_FieldPath(raw)
	})
}

func (fieldMask *Alert_TsInfo_FieldMask) ProtoMessage() {}

func (fieldMask *Alert_TsInfo_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *Alert_TsInfo_FieldMask) Subtract(other *Alert_TsInfo_FieldMask) *Alert_TsInfo_FieldMask {
	result := &Alert_TsInfo_FieldMask{}
	removedSelectors := make([]bool, 8)
	otherSubMasks := map[AlertTsInfo_FieldPathSelector]gotenobject.FieldMask{
		AlertTsInfo_FieldPathSelectorTimeSeries: &Alert_TsInfo_TimeSeries_FieldMask{},
	}
	mySubMasks := map[AlertTsInfo_FieldPathSelector]gotenobject.FieldMask{
		AlertTsInfo_FieldPathSelectorTimeSeries: &Alert_TsInfo_TimeSeries_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *AlertTsInfo_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *AlertTsInfo_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*AlertTsInfo_FieldTerminalPath); ok {
					switch tp.selector {
					case AlertTsInfo_FieldPathSelectorTimeSeries:
						mySubMasks[AlertTsInfo_FieldPathSelectorTimeSeries] = FullAlert_TsInfo_TimeSeries_FieldMask()
					}
				} else if tp, ok := path.(*AlertTsInfo_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &AlertTsInfo_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *Alert_TsInfo_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*Alert_TsInfo_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *Alert_TsInfo_FieldMask) FilterInputFields() *Alert_TsInfo_FieldMask {
	result := &Alert_TsInfo_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case AlertTsInfo_FieldPathSelectorMetricTypes:
		case AlertTsInfo_FieldPathSelectorResourceTypes:
		case AlertTsInfo_FieldPathSelectorCommonMetricLabels:
		case AlertTsInfo_FieldPathSelectorCommonResourceLabels:
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *Alert_TsInfo_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *Alert_TsInfo_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]AlertTsInfo_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseAlertTsInfo_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask Alert_TsInfo_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *Alert_TsInfo_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Alert_TsInfo_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask Alert_TsInfo_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *Alert_TsInfo_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Alert_TsInfo_FieldMask) AppendPath(path AlertTsInfo_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *Alert_TsInfo_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(AlertTsInfo_FieldPath))
}

func (fieldMask *Alert_TsInfo_FieldMask) GetPaths() []AlertTsInfo_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *Alert_TsInfo_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *Alert_TsInfo_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseAlertTsInfo_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *Alert_TsInfo_FieldMask) Set(target, source *Alert_TsInfo) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *Alert_TsInfo_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*Alert_TsInfo), source.(*Alert_TsInfo))
}

func (fieldMask *Alert_TsInfo_FieldMask) Project(source *Alert_TsInfo) *Alert_TsInfo {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &Alert_TsInfo{}
	timeSeriesMask := &Alert_TsInfo_TimeSeries_FieldMask{}
	wholeTimeSeriesAccepted := false
	var commonMetricLabelsMapKeys []string
	wholeCommonMetricLabelsAccepted := false
	var commonResourceLabelsMapKeys []string
	wholeCommonResourceLabelsAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *AlertTsInfo_FieldTerminalPath:
			switch tp.selector {
			case AlertTsInfo_FieldPathSelectorType:
				result.Type = source.Type
			case AlertTsInfo_FieldPathSelectorAnomalyWindowSize:
				result.AnomalyWindowSize = source.AnomalyWindowSize
			case AlertTsInfo_FieldPathSelectorCommonKey:
				result.CommonKey = source.CommonKey
			case AlertTsInfo_FieldPathSelectorMetricTypes:
				result.MetricTypes = source.MetricTypes
			case AlertTsInfo_FieldPathSelectorResourceTypes:
				result.ResourceTypes = source.ResourceTypes
			case AlertTsInfo_FieldPathSelectorCommonMetricLabels:
				result.CommonMetricLabels = source.CommonMetricLabels
				wholeCommonMetricLabelsAccepted = true
			case AlertTsInfo_FieldPathSelectorCommonResourceLabels:
				result.CommonResourceLabels = source.CommonResourceLabels
				wholeCommonResourceLabelsAccepted = true
			case AlertTsInfo_FieldPathSelectorTimeSeries:
				result.TimeSeries = source.TimeSeries
				wholeTimeSeriesAccepted = true
			}
		case *AlertTsInfo_FieldSubPath:
			switch tp.selector {
			case AlertTsInfo_FieldPathSelectorTimeSeries:
				timeSeriesMask.AppendPath(tp.subPath.(AlertTsInfoTimeSeries_FieldPath))
			}
		case *AlertTsInfo_FieldPathMap:
			switch tp.selector {
			case AlertTsInfo_FieldPathSelectorCommonMetricLabels:
				commonMetricLabelsMapKeys = append(commonMetricLabelsMapKeys, tp.key)
			case AlertTsInfo_FieldPathSelectorCommonResourceLabels:
				commonResourceLabelsMapKeys = append(commonResourceLabelsMapKeys, tp.key)
			}
		}
	}
	if wholeCommonMetricLabelsAccepted == false && len(commonMetricLabelsMapKeys) > 0 && source.GetCommonMetricLabels() != nil {
		copiedMap := map[string]string{}
		sourceMap := source.GetCommonMetricLabels()
		for _, key := range commonMetricLabelsMapKeys {
			copiedMap[key] = sourceMap[key]
		}
		result.CommonMetricLabels = copiedMap
	}
	if wholeCommonResourceLabelsAccepted == false && len(commonResourceLabelsMapKeys) > 0 && source.GetCommonResourceLabels() != nil {
		copiedMap := map[string]string{}
		sourceMap := source.GetCommonResourceLabels()
		for _, key := range commonResourceLabelsMapKeys {
			copiedMap[key] = sourceMap[key]
		}
		result.CommonResourceLabels = copiedMap
	}
	if wholeTimeSeriesAccepted == false && len(timeSeriesMask.Paths) > 0 {
		for _, sourceItem := range source.GetTimeSeries() {
			result.TimeSeries = append(result.TimeSeries, timeSeriesMask.Project(sourceItem))
		}
	}
	return result
}

func (fieldMask *Alert_TsInfo_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*Alert_TsInfo))
}

func (fieldMask *Alert_TsInfo_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type Alert_LogInfo_FieldMask struct {
	Paths []AlertLogInfo_FieldPath
}

func FullAlert_LogInfo_FieldMask() *Alert_LogInfo_FieldMask {
	res := &Alert_LogInfo_FieldMask{}
	res.Paths = append(res.Paths, &AlertLogInfo_FieldTerminalPath{selector: AlertLogInfo_FieldPathSelectorCommonKey})
	res.Paths = append(res.Paths, &AlertLogInfo_FieldTerminalPath{selector: AlertLogInfo_FieldPathSelectorLogTypes})
	res.Paths = append(res.Paths, &AlertLogInfo_FieldTerminalPath{selector: AlertLogInfo_FieldPathSelectorCommonLogLabels})
	res.Paths = append(res.Paths, &AlertLogInfo_FieldTerminalPath{selector: AlertLogInfo_FieldPathSelectorViolatingLog})
	return res
}

func (fieldMask *Alert_LogInfo_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

func (fieldMask *Alert_LogInfo_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 4)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*AlertLogInfo_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *Alert_LogInfo_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseAlertLogInfo_FieldPath(raw)
	})
}

func (fieldMask *Alert_LogInfo_FieldMask) ProtoMessage() {}

func (fieldMask *Alert_LogInfo_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *Alert_LogInfo_FieldMask) Subtract(other *Alert_LogInfo_FieldMask) *Alert_LogInfo_FieldMask {
	result := &Alert_LogInfo_FieldMask{}
	removedSelectors := make([]bool, 4)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *AlertLogInfo_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *Alert_LogInfo_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*Alert_LogInfo_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *Alert_LogInfo_FieldMask) FilterInputFields() *Alert_LogInfo_FieldMask {
	result := &Alert_LogInfo_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case AlertLogInfo_FieldPathSelectorLogTypes:
		case AlertLogInfo_FieldPathSelectorCommonLogLabels:
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *Alert_LogInfo_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *Alert_LogInfo_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]AlertLogInfo_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseAlertLogInfo_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask Alert_LogInfo_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *Alert_LogInfo_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Alert_LogInfo_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask Alert_LogInfo_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *Alert_LogInfo_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Alert_LogInfo_FieldMask) AppendPath(path AlertLogInfo_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *Alert_LogInfo_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(AlertLogInfo_FieldPath))
}

func (fieldMask *Alert_LogInfo_FieldMask) GetPaths() []AlertLogInfo_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *Alert_LogInfo_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *Alert_LogInfo_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseAlertLogInfo_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *Alert_LogInfo_FieldMask) Set(target, source *Alert_LogInfo) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *Alert_LogInfo_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*Alert_LogInfo), source.(*Alert_LogInfo))
}

func (fieldMask *Alert_LogInfo_FieldMask) Project(source *Alert_LogInfo) *Alert_LogInfo {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &Alert_LogInfo{}
	var commonLogLabelsMapKeys []string
	wholeCommonLogLabelsAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *AlertLogInfo_FieldTerminalPath:
			switch tp.selector {
			case AlertLogInfo_FieldPathSelectorCommonKey:
				result.CommonKey = source.CommonKey
			case AlertLogInfo_FieldPathSelectorLogTypes:
				result.LogTypes = source.LogTypes
			case AlertLogInfo_FieldPathSelectorCommonLogLabels:
				result.CommonLogLabels = source.CommonLogLabels
				wholeCommonLogLabelsAccepted = true
			case AlertLogInfo_FieldPathSelectorViolatingLog:
				result.ViolatingLog = source.ViolatingLog
			}
		case *AlertLogInfo_FieldPathMap:
			switch tp.selector {
			case AlertLogInfo_FieldPathSelectorCommonLogLabels:
				commonLogLabelsMapKeys = append(commonLogLabelsMapKeys, tp.key)
			}
		}
	}
	if wholeCommonLogLabelsAccepted == false && len(commonLogLabelsMapKeys) > 0 && source.GetCommonLogLabels() != nil {
		copiedMap := map[string]string{}
		sourceMap := source.GetCommonLogLabels()
		for _, key := range commonLogLabelsMapKeys {
			copiedMap[key] = sourceMap[key]
		}
		result.CommonLogLabels = copiedMap
	}
	return result
}

func (fieldMask *Alert_LogInfo_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*Alert_LogInfo))
}

func (fieldMask *Alert_LogInfo_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type Alert_State_FieldMask struct {
	Paths []AlertState_FieldPath
}

func FullAlert_State_FieldMask() *Alert_State_FieldMask {
	res := &Alert_State_FieldMask{}
	res.Paths = append(res.Paths, &AlertState_FieldTerminalPath{selector: AlertState_FieldPathSelectorIsFiring})
	res.Paths = append(res.Paths, &AlertState_FieldTerminalPath{selector: AlertState_FieldPathSelectorStartTime})
	res.Paths = append(res.Paths, &AlertState_FieldTerminalPath{selector: AlertState_FieldPathSelectorEndTime})
	res.Paths = append(res.Paths, &AlertState_FieldTerminalPath{selector: AlertState_FieldPathSelectorNotificationStatuses})
	res.Paths = append(res.Paths, &AlertState_FieldTerminalPath{selector: AlertState_FieldPathSelectorEscalationLevel})
	res.Paths = append(res.Paths, &AlertState_FieldTerminalPath{selector: AlertState_FieldPathSelectorAiAgentHandlingState})
	res.Paths = append(res.Paths, &AlertState_FieldTerminalPath{selector: AlertState_FieldPathSelectorAiAgentLastStateChangeTime})
	res.Paths = append(res.Paths, &AlertState_FieldTerminalPath{selector: AlertState_FieldPathSelectorAiAgentDiagnosisNotes})
	res.Paths = append(res.Paths, &AlertState_FieldTerminalPath{selector: AlertState_FieldPathSelectorAiRemediationArg})
	res.Paths = append(res.Paths, &AlertState_FieldTerminalPath{selector: AlertState_FieldPathSelectorAiRemediation})
	res.Paths = append(res.Paths, &AlertState_FieldTerminalPath{selector: AlertState_FieldPathSelectorOperatorHandlingState})
	res.Paths = append(res.Paths, &AlertState_FieldTerminalPath{selector: AlertState_FieldPathSelectorOperatorLastStateChangeTime})
	res.Paths = append(res.Paths, &AlertState_FieldTerminalPath{selector: AlertState_FieldPathSelectorOperatorNotes})
	res.Paths = append(res.Paths, &AlertState_FieldTerminalPath{selector: AlertState_FieldPathSelectorLifecycleCompleted})
	return res
}

func (fieldMask *Alert_State_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

func (fieldMask *Alert_State_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 14)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*AlertState_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *Alert_State_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseAlertState_FieldPath(raw)
	})
}

func (fieldMask *Alert_State_FieldMask) ProtoMessage() {}

func (fieldMask *Alert_State_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *Alert_State_FieldMask) Subtract(other *Alert_State_FieldMask) *Alert_State_FieldMask {
	result := &Alert_State_FieldMask{}
	removedSelectors := make([]bool, 14)
	otherSubMasks := map[AlertState_FieldPathSelector]gotenobject.FieldMask{
		AlertState_FieldPathSelectorNotificationStatuses: &Alert_State_Notification_FieldMask{},
		AlertState_FieldPathSelectorAiRemediation:        &policy.Policy_Spec_AIAgentHandling_Remediation_FieldMask{},
	}
	mySubMasks := map[AlertState_FieldPathSelector]gotenobject.FieldMask{
		AlertState_FieldPathSelectorNotificationStatuses: &Alert_State_Notification_FieldMask{},
		AlertState_FieldPathSelectorAiRemediation:        &policy.Policy_Spec_AIAgentHandling_Remediation_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *AlertState_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *AlertState_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*AlertState_FieldTerminalPath); ok {
					switch tp.selector {
					case AlertState_FieldPathSelectorNotificationStatuses:
						mySubMasks[AlertState_FieldPathSelectorNotificationStatuses] = FullAlert_State_Notification_FieldMask()
					case AlertState_FieldPathSelectorAiRemediation:
						mySubMasks[AlertState_FieldPathSelectorAiRemediation] = policy.FullPolicy_Spec_AIAgentHandling_Remediation_FieldMask()
					}
				} else if tp, ok := path.(*AlertState_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &AlertState_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *Alert_State_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*Alert_State_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *Alert_State_FieldMask) FilterInputFields() *Alert_State_FieldMask {
	result := &Alert_State_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case AlertState_FieldPathSelectorNotificationStatuses:
		case AlertState_FieldPathSelectorAiAgentLastStateChangeTime:
		case AlertState_FieldPathSelectorOperatorLastStateChangeTime:
		case AlertState_FieldPathSelectorLifecycleCompleted:
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *Alert_State_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *Alert_State_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]AlertState_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseAlertState_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask Alert_State_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *Alert_State_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Alert_State_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask Alert_State_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *Alert_State_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Alert_State_FieldMask) AppendPath(path AlertState_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *Alert_State_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(AlertState_FieldPath))
}

func (fieldMask *Alert_State_FieldMask) GetPaths() []AlertState_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *Alert_State_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *Alert_State_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseAlertState_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *Alert_State_FieldMask) Set(target, source *Alert_State) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *Alert_State_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*Alert_State), source.(*Alert_State))
}

func (fieldMask *Alert_State_FieldMask) Project(source *Alert_State) *Alert_State {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &Alert_State{}
	notificationStatusesMask := &Alert_State_Notification_FieldMask{}
	wholeNotificationStatusesAccepted := false
	aiRemediationMask := &policy.Policy_Spec_AIAgentHandling_Remediation_FieldMask{}
	wholeAiRemediationAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *AlertState_FieldTerminalPath:
			switch tp.selector {
			case AlertState_FieldPathSelectorIsFiring:
				result.IsFiring = source.IsFiring
			case AlertState_FieldPathSelectorStartTime:
				result.StartTime = source.StartTime
			case AlertState_FieldPathSelectorEndTime:
				result.EndTime = source.EndTime
			case AlertState_FieldPathSelectorNotificationStatuses:
				result.NotificationStatuses = source.NotificationStatuses
				wholeNotificationStatusesAccepted = true
			case AlertState_FieldPathSelectorEscalationLevel:
				result.EscalationLevel = source.EscalationLevel
			case AlertState_FieldPathSelectorAiAgentHandlingState:
				result.AiAgentHandlingState = source.AiAgentHandlingState
			case AlertState_FieldPathSelectorAiAgentLastStateChangeTime:
				result.AiAgentLastStateChangeTime = source.AiAgentLastStateChangeTime
			case AlertState_FieldPathSelectorAiAgentDiagnosisNotes:
				result.AiAgentDiagnosisNotes = source.AiAgentDiagnosisNotes
			case AlertState_FieldPathSelectorAiRemediationArg:
				result.AiRemediationArg = source.AiRemediationArg
			case AlertState_FieldPathSelectorAiRemediation:
				result.AiRemediation = source.AiRemediation
				wholeAiRemediationAccepted = true
			case AlertState_FieldPathSelectorOperatorHandlingState:
				result.OperatorHandlingState = source.OperatorHandlingState
			case AlertState_FieldPathSelectorOperatorLastStateChangeTime:
				result.OperatorLastStateChangeTime = source.OperatorLastStateChangeTime
			case AlertState_FieldPathSelectorOperatorNotes:
				result.OperatorNotes = source.OperatorNotes
			case AlertState_FieldPathSelectorLifecycleCompleted:
				result.LifecycleCompleted = source.LifecycleCompleted
			}
		case *AlertState_FieldSubPath:
			switch tp.selector {
			case AlertState_FieldPathSelectorNotificationStatuses:
				notificationStatusesMask.AppendPath(tp.subPath.(AlertStateNotification_FieldPath))
			case AlertState_FieldPathSelectorAiRemediation:
				aiRemediationMask.AppendPath(tp.subPath.(policy.PolicySpecAIAgentHandlingRemediation_FieldPath))
			}
		}
	}
	if wholeNotificationStatusesAccepted == false && len(notificationStatusesMask.Paths) > 0 {
		for _, sourceItem := range source.GetNotificationStatuses() {
			result.NotificationStatuses = append(result.NotificationStatuses, notificationStatusesMask.Project(sourceItem))
		}
	}
	if wholeAiRemediationAccepted == false && len(aiRemediationMask.Paths) > 0 {
		result.AiRemediation = aiRemediationMask.Project(source.GetAiRemediation())
	}
	return result
}

func (fieldMask *Alert_State_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*Alert_State))
}

func (fieldMask *Alert_State_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type Alert_Internal_FieldMask struct {
	Paths []AlertInternal_FieldPath
}

func FullAlert_Internal_FieldMask() *Alert_Internal_FieldMask {
	res := &Alert_Internal_FieldMask{}
	res.Paths = append(res.Paths, &AlertInternal_FieldTerminalPath{selector: AlertInternal_FieldPathSelectorAlertingLocation})
	return res
}

func (fieldMask *Alert_Internal_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

func (fieldMask *Alert_Internal_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 1)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*AlertInternal_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *Alert_Internal_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseAlertInternal_FieldPath(raw)
	})
}

func (fieldMask *Alert_Internal_FieldMask) ProtoMessage() {}

func (fieldMask *Alert_Internal_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *Alert_Internal_FieldMask) Subtract(other *Alert_Internal_FieldMask) *Alert_Internal_FieldMask {
	result := &Alert_Internal_FieldMask{}
	removedSelectors := make([]bool, 1)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *AlertInternal_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *Alert_Internal_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*Alert_Internal_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *Alert_Internal_FieldMask) FilterInputFields() *Alert_Internal_FieldMask {
	result := &Alert_Internal_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *Alert_Internal_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *Alert_Internal_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]AlertInternal_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseAlertInternal_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask Alert_Internal_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *Alert_Internal_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Alert_Internal_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask Alert_Internal_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *Alert_Internal_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Alert_Internal_FieldMask) AppendPath(path AlertInternal_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *Alert_Internal_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(AlertInternal_FieldPath))
}

func (fieldMask *Alert_Internal_FieldMask) GetPaths() []AlertInternal_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *Alert_Internal_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *Alert_Internal_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseAlertInternal_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *Alert_Internal_FieldMask) Set(target, source *Alert_Internal) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *Alert_Internal_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*Alert_Internal), source.(*Alert_Internal))
}

func (fieldMask *Alert_Internal_FieldMask) Project(source *Alert_Internal) *Alert_Internal {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &Alert_Internal{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *AlertInternal_FieldTerminalPath:
			switch tp.selector {
			case AlertInternal_FieldPathSelectorAlertingLocation:
				result.AlertingLocation = source.AlertingLocation
			}
		}
	}
	return result
}

func (fieldMask *Alert_Internal_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*Alert_Internal))
}

func (fieldMask *Alert_Internal_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type Alert_TsInfo_TimeSeries_FieldMask struct {
	Paths []AlertTsInfoTimeSeries_FieldPath
}

func FullAlert_TsInfo_TimeSeries_FieldMask() *Alert_TsInfo_TimeSeries_FieldMask {
	res := &Alert_TsInfo_TimeSeries_FieldMask{}
	res.Paths = append(res.Paths, &AlertTsInfoTimeSeries_FieldTerminalPath{selector: AlertTsInfoTimeSeries_FieldPathSelectorQueryName})
	res.Paths = append(res.Paths, &AlertTsInfoTimeSeries_FieldTerminalPath{selector: AlertTsInfoTimeSeries_FieldPathSelectorValues})
	res.Paths = append(res.Paths, &AlertTsInfoTimeSeries_FieldTerminalPath{selector: AlertTsInfoTimeSeries_FieldPathSelectorAnomalies})
	res.Paths = append(res.Paths, &AlertTsInfoTimeSeries_FieldTerminalPath{selector: AlertTsInfoTimeSeries_FieldPathSelectorUpperThreshold})
	res.Paths = append(res.Paths, &AlertTsInfoTimeSeries_FieldTerminalPath{selector: AlertTsInfoTimeSeries_FieldPathSelectorLowerThreshold})
	res.Paths = append(res.Paths, &AlertTsInfoTimeSeries_FieldTerminalPath{selector: AlertTsInfoTimeSeries_FieldPathSelectorAnomalyThreshold})
	res.Paths = append(res.Paths, &AlertTsInfoTimeSeries_FieldTerminalPath{selector: AlertTsInfoTimeSeries_FieldPathSelectorAfterDuration})
	return res
}

func (fieldMask *Alert_TsInfo_TimeSeries_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

func (fieldMask *Alert_TsInfo_TimeSeries_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 7)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*AlertTsInfoTimeSeries_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *Alert_TsInfo_TimeSeries_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseAlertTsInfoTimeSeries_FieldPath(raw)
	})
}

func (fieldMask *Alert_TsInfo_TimeSeries_FieldMask) ProtoMessage() {}

func (fieldMask *Alert_TsInfo_TimeSeries_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *Alert_TsInfo_TimeSeries_FieldMask) Subtract(other *Alert_TsInfo_TimeSeries_FieldMask) *Alert_TsInfo_TimeSeries_FieldMask {
	result := &Alert_TsInfo_TimeSeries_FieldMask{}
	removedSelectors := make([]bool, 7)
	otherSubMasks := map[AlertTsInfoTimeSeries_FieldPathSelector]gotenobject.FieldMask{
		AlertTsInfoTimeSeries_FieldPathSelectorUpperThreshold: &ts_condition.AlertingThreshold_FieldMask{},
		AlertTsInfoTimeSeries_FieldPathSelectorLowerThreshold: &ts_condition.AlertingThreshold_FieldMask{},
	}
	mySubMasks := map[AlertTsInfoTimeSeries_FieldPathSelector]gotenobject.FieldMask{
		AlertTsInfoTimeSeries_FieldPathSelectorUpperThreshold: &ts_condition.AlertingThreshold_FieldMask{},
		AlertTsInfoTimeSeries_FieldPathSelectorLowerThreshold: &ts_condition.AlertingThreshold_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *AlertTsInfoTimeSeries_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *AlertTsInfoTimeSeries_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*AlertTsInfoTimeSeries_FieldTerminalPath); ok {
					switch tp.selector {
					case AlertTsInfoTimeSeries_FieldPathSelectorUpperThreshold:
						mySubMasks[AlertTsInfoTimeSeries_FieldPathSelectorUpperThreshold] = ts_condition.FullAlertingThreshold_FieldMask()
					case AlertTsInfoTimeSeries_FieldPathSelectorLowerThreshold:
						mySubMasks[AlertTsInfoTimeSeries_FieldPathSelectorLowerThreshold] = ts_condition.FullAlertingThreshold_FieldMask()
					}
				} else if tp, ok := path.(*AlertTsInfoTimeSeries_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &AlertTsInfoTimeSeries_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *Alert_TsInfo_TimeSeries_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*Alert_TsInfo_TimeSeries_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *Alert_TsInfo_TimeSeries_FieldMask) FilterInputFields() *Alert_TsInfo_TimeSeries_FieldMask {
	result := &Alert_TsInfo_TimeSeries_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *Alert_TsInfo_TimeSeries_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *Alert_TsInfo_TimeSeries_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]AlertTsInfoTimeSeries_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseAlertTsInfoTimeSeries_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask Alert_TsInfo_TimeSeries_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *Alert_TsInfo_TimeSeries_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Alert_TsInfo_TimeSeries_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask Alert_TsInfo_TimeSeries_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *Alert_TsInfo_TimeSeries_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Alert_TsInfo_TimeSeries_FieldMask) AppendPath(path AlertTsInfoTimeSeries_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *Alert_TsInfo_TimeSeries_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(AlertTsInfoTimeSeries_FieldPath))
}

func (fieldMask *Alert_TsInfo_TimeSeries_FieldMask) GetPaths() []AlertTsInfoTimeSeries_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *Alert_TsInfo_TimeSeries_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *Alert_TsInfo_TimeSeries_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseAlertTsInfoTimeSeries_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *Alert_TsInfo_TimeSeries_FieldMask) Set(target, source *Alert_TsInfo_TimeSeries) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *Alert_TsInfo_TimeSeries_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*Alert_TsInfo_TimeSeries), source.(*Alert_TsInfo_TimeSeries))
}

func (fieldMask *Alert_TsInfo_TimeSeries_FieldMask) Project(source *Alert_TsInfo_TimeSeries) *Alert_TsInfo_TimeSeries {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &Alert_TsInfo_TimeSeries{}
	upperThresholdMask := &ts_condition.AlertingThreshold_FieldMask{}
	wholeUpperThresholdAccepted := false
	lowerThresholdMask := &ts_condition.AlertingThreshold_FieldMask{}
	wholeLowerThresholdAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *AlertTsInfoTimeSeries_FieldTerminalPath:
			switch tp.selector {
			case AlertTsInfoTimeSeries_FieldPathSelectorQueryName:
				result.QueryName = source.QueryName
			case AlertTsInfoTimeSeries_FieldPathSelectorValues:
				result.Values = source.Values
			case AlertTsInfoTimeSeries_FieldPathSelectorAnomalies:
				result.Anomalies = source.Anomalies
			case AlertTsInfoTimeSeries_FieldPathSelectorUpperThreshold:
				result.UpperThreshold = source.UpperThreshold
				wholeUpperThresholdAccepted = true
			case AlertTsInfoTimeSeries_FieldPathSelectorLowerThreshold:
				result.LowerThreshold = source.LowerThreshold
				wholeLowerThresholdAccepted = true
			case AlertTsInfoTimeSeries_FieldPathSelectorAnomalyThreshold:
				result.AnomalyThreshold = source.AnomalyThreshold
			case AlertTsInfoTimeSeries_FieldPathSelectorAfterDuration:
				result.AfterDuration = source.AfterDuration
			}
		case *AlertTsInfoTimeSeries_FieldSubPath:
			switch tp.selector {
			case AlertTsInfoTimeSeries_FieldPathSelectorUpperThreshold:
				upperThresholdMask.AppendPath(tp.subPath.(ts_condition.AlertingThreshold_FieldPath))
			case AlertTsInfoTimeSeries_FieldPathSelectorLowerThreshold:
				lowerThresholdMask.AppendPath(tp.subPath.(ts_condition.AlertingThreshold_FieldPath))
			}
		}
	}
	if wholeUpperThresholdAccepted == false && len(upperThresholdMask.Paths) > 0 {
		result.UpperThreshold = upperThresholdMask.Project(source.GetUpperThreshold())
	}
	if wholeLowerThresholdAccepted == false && len(lowerThresholdMask.Paths) > 0 {
		result.LowerThreshold = lowerThresholdMask.Project(source.GetLowerThreshold())
	}
	return result
}

func (fieldMask *Alert_TsInfo_TimeSeries_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*Alert_TsInfo_TimeSeries))
}

func (fieldMask *Alert_TsInfo_TimeSeries_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type Alert_State_Notification_FieldMask struct {
	Paths []AlertStateNotification_FieldPath
}

func FullAlert_State_Notification_FieldMask() *Alert_State_Notification_FieldMask {
	res := &Alert_State_Notification_FieldMask{}
	res.Paths = append(res.Paths, &AlertStateNotification_FieldTerminalPath{selector: AlertStateNotification_FieldPathSelectorKind})
	res.Paths = append(res.Paths, &AlertStateNotification_FieldTerminalPath{selector: AlertStateNotification_FieldPathSelectorPendingChannels})
	return res
}

func (fieldMask *Alert_State_Notification_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

func (fieldMask *Alert_State_Notification_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*AlertStateNotification_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *Alert_State_Notification_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseAlertStateNotification_FieldPath(raw)
	})
}

func (fieldMask *Alert_State_Notification_FieldMask) ProtoMessage() {}

func (fieldMask *Alert_State_Notification_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *Alert_State_Notification_FieldMask) Subtract(other *Alert_State_Notification_FieldMask) *Alert_State_Notification_FieldMask {
	result := &Alert_State_Notification_FieldMask{}
	removedSelectors := make([]bool, 2)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *AlertStateNotification_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *Alert_State_Notification_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*Alert_State_Notification_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *Alert_State_Notification_FieldMask) FilterInputFields() *Alert_State_Notification_FieldMask {
	result := &Alert_State_Notification_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *Alert_State_Notification_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *Alert_State_Notification_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]AlertStateNotification_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseAlertStateNotification_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask Alert_State_Notification_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *Alert_State_Notification_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Alert_State_Notification_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask Alert_State_Notification_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *Alert_State_Notification_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Alert_State_Notification_FieldMask) AppendPath(path AlertStateNotification_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *Alert_State_Notification_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(AlertStateNotification_FieldPath))
}

func (fieldMask *Alert_State_Notification_FieldMask) GetPaths() []AlertStateNotification_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *Alert_State_Notification_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *Alert_State_Notification_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseAlertStateNotification_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *Alert_State_Notification_FieldMask) Set(target, source *Alert_State_Notification) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *Alert_State_Notification_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*Alert_State_Notification), source.(*Alert_State_Notification))
}

func (fieldMask *Alert_State_Notification_FieldMask) Project(source *Alert_State_Notification) *Alert_State_Notification {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &Alert_State_Notification{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *AlertStateNotification_FieldTerminalPath:
			switch tp.selector {
			case AlertStateNotification_FieldPathSelectorKind:
				result.Kind = source.Kind
			case AlertStateNotification_FieldPathSelectorPendingChannels:
				result.PendingChannels = source.PendingChannels
			}
		}
	}
	return result
}

func (fieldMask *Alert_State_Notification_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*Alert_State_Notification))
}

func (fieldMask *Alert_State_Notification_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}
