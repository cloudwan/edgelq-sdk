// Code generated by protoc-gen-goten-validate
// File: edgelq/alerting/proto/v1/alert.proto
// DO NOT EDIT!!!

package alert

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	gotenvalidate "github.com/cloudwan/goten-sdk/runtime/validate"
)

// proto imports
import (
	rcommon "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/common"
	log_condition "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/log_condition"
	notification_channel "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/notification_channel"
	ts_condition "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/ts_condition"
	meta "github.com/cloudwan/goten-sdk/types/meta"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

var (
	_ = bytes.Equal
	_ = errors.New
	_ = fmt.Errorf
	_ = net.ParseIP
	_ = regexp.Match
	_ = strings.Split
	_ = time.Now
	_ = utf8.RuneCountInString
	_ = url.Parse
	_ = gotenvalidate.NewValidationError
)

// make sure we're using proto imports
var (
	_ = &log_condition.LogCondition{}
	_ = &notification_channel.NotificationChannel{}
	_ = &rcommon.LogCndSpec{}
	_ = &ts_condition.TsCondition{}
	_ = &durationpb.Duration{}
	_ = &timestamppb.Timestamp{}
	_ = &meta.Meta{}
)

func (obj *Alert) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if subobj, ok := interface{}(obj.Metadata).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("Alert", "metadata", obj.Metadata, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.AlertingResource).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("Alert", "alertingResource", obj.AlertingResource, "nested object validation failed", err)
		}
	}
	if obj.State == nil {
		return gotenvalidate.NewValidationError("Alert", "state", obj.State, "field is required", nil)
	}
	if subobj, ok := interface{}(obj.State).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("Alert", "state", obj.State, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.Internal).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("Alert", "internal", obj.Internal, "nested object validation failed", err)
		}
	}
	switch opt := obj.Info.(type) {
	case *Alert_TsInfo_:
		if subobj, ok := interface{}(opt.TsInfo).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("Alert", "tsInfo", opt.TsInfo, "nested object validation failed", err)
			}
		}
	case *Alert_LogInfo_:
		if subobj, ok := interface{}(opt.LogInfo).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("Alert", "logInfo", opt.LogInfo, "nested object validation failed", err)
			}
		}
	default:
		_ = opt
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Alert_TsInfo) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if _, ok := Alert_TsInfo_Type_name[int32(obj.Type)]; !ok {
		return gotenvalidate.NewValidationError("TsInfo", "type", obj.Type, "field must be a defined enum value", nil)
	}
	for idx, elem := range obj.TimeSeries {
		if subobj, ok := interface{}(elem).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("TsInfo", "timeSeries", obj.TimeSeries[idx], "nested object validation failed", err)
			}
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Alert_LogInfo) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Alert_State) GotenValidate() error {
	if obj == nil {
		return nil
	}
	for idx, elem := range obj.NotificationStatuses {
		if subobj, ok := interface{}(elem).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("State", "notificationStatuses", obj.NotificationStatuses[idx], "nested object validation failed", err)
			}
		}
	}
	if _, ok := Alert_State_EscalationLevel_name[int32(obj.EscalationLevel)]; !ok {
		return gotenvalidate.NewValidationError("State", "escalationLevel", obj.EscalationLevel, "field must be a defined enum value", nil)
	}
	if subobj, ok := interface{}(obj.AiRemediation).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("State", "aiRemediation", obj.AiRemediation, "nested object validation failed", err)
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Alert_Internal) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Alert_TsInfo_TimeSeries) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if len(obj.QueryName) > 256 {
		return gotenvalidate.NewValidationError("TimeSeries", "queryName", obj.QueryName, "field must contain at most 256 characters", nil)
	}
	if obj.QueryName == "" {
		return gotenvalidate.NewValidationError("TimeSeries", "queryName", obj.QueryName, "field is required", nil)
	}
	if subobj, ok := interface{}(obj.UpperThreshold).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("TimeSeries", "upperThreshold", obj.UpperThreshold, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.LowerThreshold).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("TimeSeries", "lowerThreshold", obj.LowerThreshold, "nested object validation failed", err)
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Alert_State_Notification) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
