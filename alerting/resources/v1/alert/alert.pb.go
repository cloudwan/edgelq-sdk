// Code generated by protoc-gen-goten-go
// File: edgelq/alerting/proto/v1/alert.proto
// DO NOT EDIT!!!

package alert

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	log_condition "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/log_condition"
	notification_channel "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/notification_channel"
	policy "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/policy"
	ts_condition "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/ts_condition"
	meta "github.com/cloudwan/goten-sdk/types/meta"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &log_condition.LogCondition{}
	_ = &notification_channel.NotificationChannel{}
	_ = &policy.Policy{}
	_ = &ts_condition.TsCondition{}
	_ = &durationpb.Duration{}
	_ = &timestamppb.Timestamp{}
	_ = &meta.Meta{}
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Type of TimeSeries based alert
type Alert_TsInfo_Type int32

const (
	Alert_TsInfo_UNDEFINED Alert_TsInfo_Type = 0
	// ANOMALY indicates that irregular data pattern was spotted in
	// time series data (anomaly values crossed anomaly thresholds).
	Alert_TsInfo_ANOMALY Alert_TsInfo_Type = 1
	// THRESHOLD indicates that time series values crossed specified
	// thresholds (lower or upper threshold).
	Alert_TsInfo_THRESHOLD Alert_TsInfo_Type = 2
)

var (
	Alert_TsInfo_Type_name = map[int32]string{
		0: "UNDEFINED",
		1: "ANOMALY",
		2: "THRESHOLD",
	}

	Alert_TsInfo_Type_value = map[string]int32{
		"UNDEFINED": 0,
		"ANOMALY":   1,
		"THRESHOLD": 2,
	}
)

func (x Alert_TsInfo_Type) Enum() *Alert_TsInfo_Type {
	p := new(Alert_TsInfo_Type)
	*p = x
	return p
}

func (x Alert_TsInfo_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (Alert_TsInfo_Type) Descriptor() preflect.EnumDescriptor {
	return edgelq_alerting_proto_v1_alert_proto_enumTypes[0].Descriptor()
}

func (Alert_TsInfo_Type) Type() preflect.EnumType {
	return &edgelq_alerting_proto_v1_alert_proto_enumTypes[0]
}

func (x Alert_TsInfo_Type) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use Alert_TsInfo_Type.ProtoReflect.Descriptor instead.
func (Alert_TsInfo_Type) EnumDescriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_alert_proto_rawDescGZIP(), []int{0, 0, 0}
}

// AiHandlingState informs what is a handling state
// of an alert from AI agent point of view. It is
// active when escalation_level points to AI_AGENT.
type Alert_State_AiHandlingState int32

const (
	// AI Agent is not involved in handling this alert.
	Alert_State_AI_AGENT_NOT_INVOLVED Alert_State_AiHandlingState = 0
	// Alert is new and awaits handling by AI agent.
	// This is always initial state for AI agent after
	// firing.
	// It can move to AI_ESCALATED_TO_OPERATOR, AI_IGNORE_AS_TEMPORARY,
	// AI_ADJUST_CND_ENTRY, or AI_REMEDIATION_PROPOSED.
	Alert_State_AI_AWAITING_HANDLING Alert_State_AiHandlingState = 1
	// This state is active is AI agent escalated alert
	// to an operator, due to inability to solve it.
	// This is terminal state after which handling is passed to OPERATOR,
	// escalation_level changes.
	Alert_State_AI_ESCALATED_TO_OPERATOR Alert_State_AiHandlingState = 2
	// AI Agent informed that, while TimeSeries/Logs data
	// indeed contain abnormal values, they are caused
	// by transient and unharmful reason, and it should
	// stop firing soon.
	// This is false positive alert.
	// This is semi-terminal state. It can move to AI_ESCALATED_TO_OPERATOR
	// if alert persist despite being flagged as transient issue.
	Alert_State_AI_IGNORE_AS_TEMPORARY Alert_State_AiHandlingState = 3
	// AI Agent informed that this alert is a false
	// positive, and TimeSeries/Logs violating entries
	// in fact should not be classified as a violation.
	// Switching alert to this state will cause corresponding
	// TsEntry to adjust its thresholds, or retrain AI anomaly
	// detection models.
	// This is usually a terminal state, after which alert is silenced
	// and TsEntry tries to assume violating data is normal.
	// However, if thresholds cannot be updated, alert will switch to
	// AI_ESCALATED_TO_OPERATOR.
	Alert_State_AI_ADJUST_CND_ENTRY Alert_State_AiHandlingState = 4
	// AI Agent identified this is a genuine alert, but for which
	// it is able to fix. Remediation is only proposed, and requires
	// approval from OPERATOR. Note that this is unique situation,
	// where field escalation_level in State object points to AI_AGENT,
	// but OPERATOR is requires to provide an update.
	// Alert is technically still being handled by AI Agent, but
	// waiting for OPERATOR confirmation.
	Alert_State_AI_REMEDIATION_PROPOSED Alert_State_AiHandlingState = 5
	// This state is followed by AI_REMEDIATION_PROPOSED after OPERATOR
	// agrees to execute, or if automatic approval is enabled. AI Agent
	// will then proceed to applying remediation.
	// It will move to AI_REMEDIATION_APPLIED after remediation is applied.
	Alert_State_AI_REMEDIATION_APPROVED Alert_State_AiHandlingState = 6
	// This state indicates that remediation has been applied. If after some
	// time issue persists, then it switches to AI_ESCALATED_TO_OPERATOR.
	Alert_State_AI_REMEDIATION_APPLIED Alert_State_AiHandlingState = 7
)

var (
	Alert_State_AiHandlingState_name = map[int32]string{
		0: "AI_AGENT_NOT_INVOLVED",
		1: "AI_AWAITING_HANDLING",
		2: "AI_ESCALATED_TO_OPERATOR",
		3: "AI_IGNORE_AS_TEMPORARY",
		4: "AI_ADJUST_CND_ENTRY",
		5: "AI_REMEDIATION_PROPOSED",
		6: "AI_REMEDIATION_APPROVED",
		7: "AI_REMEDIATION_APPLIED",
	}

	Alert_State_AiHandlingState_value = map[string]int32{
		"AI_AGENT_NOT_INVOLVED":    0,
		"AI_AWAITING_HANDLING":     1,
		"AI_ESCALATED_TO_OPERATOR": 2,
		"AI_IGNORE_AS_TEMPORARY":   3,
		"AI_ADJUST_CND_ENTRY":      4,
		"AI_REMEDIATION_PROPOSED":  5,
		"AI_REMEDIATION_APPROVED":  6,
		"AI_REMEDIATION_APPLIED":   7,
	}
)

func (x Alert_State_AiHandlingState) Enum() *Alert_State_AiHandlingState {
	p := new(Alert_State_AiHandlingState)
	*p = x
	return p
}

func (x Alert_State_AiHandlingState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (Alert_State_AiHandlingState) Descriptor() preflect.EnumDescriptor {
	return edgelq_alerting_proto_v1_alert_proto_enumTypes[1].Descriptor()
}

func (Alert_State_AiHandlingState) Type() preflect.EnumType {
	return &edgelq_alerting_proto_v1_alert_proto_enumTypes[1]
}

func (x Alert_State_AiHandlingState) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use Alert_State_AiHandlingState.ProtoReflect.Descriptor instead.
func (Alert_State_AiHandlingState) EnumDescriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_alert_proto_rawDescGZIP(), []int{0, 2, 0}
}

// AiHandlingState informs what is a handling state
// of an alert from OPERATOR point of view.
type Alert_State_OperatorHandlingState int32

const (
	// Operator is not involved in handling this alert.
	Alert_State_OP_NOT_INVOLVED Alert_State_OperatorHandlingState = 0
	// Alert waits for Operator to handle it. This is
	// initial state when escalation level switches to
	// OPERATOR.
	// From here, it can switch to any of remaining
	// states. It may be also switched back to AI Agent
	// if operator will it.
	Alert_State_OP_AWAITING_HANDLING Alert_State_OperatorHandlingState = 1
	// This can be a first state of Alert after OP_AWAITING_HANDLING,
	// if operator wants to acknowledge alert without informing about
	// final decision.
	Alert_State_OP_ACKNOWLEDGED Alert_State_OperatorHandlingState = 2
	// Operator informed that, while TimeSeries/Logs data
	// indeed contain abnormal values, they are caused
	// by transient and unharmful reason, and it should
	// stop firing soon. This is false positive alert.
	// This may be terminal state if alert stops firing soon.
	// Otherwise, it will go back to OP_AWAITING_HANDLING.
	Alert_State_OP_IGNORE_AS_TEMPORARY Alert_State_OperatorHandlingState = 3
	// Operator informed that this alert is a false
	// positive, and TimeSeries/Logs violating entries
	// in fact should not be classified as a violation.
	// Switching alert to this state will cause corresponding
	// TsEntry to adjust its thresholds, or retrain AI anomaly
	// detection models, whatever is relevant.
	// This is usually a terminal state, after which alert is silenced
	// and TsEntry tries to assume violating data is normal.
	// However, if thresholds cannot be updated, alert will switch to
	// OP_AWAITING_HANDLING automatically.
	Alert_State_OP_ADJUST_CND_ENTRY Alert_State_OperatorHandlingState = 4
	// This state indicates that remediation has been applied. If after some
	// time issue persists, then it switches to OP_AWAITING_HANDLING.
	Alert_State_OP_REMEDIATION_APPLIED Alert_State_OperatorHandlingState = 5
)

var (
	Alert_State_OperatorHandlingState_name = map[int32]string{
		0: "OP_NOT_INVOLVED",
		1: "OP_AWAITING_HANDLING",
		2: "OP_ACKNOWLEDGED",
		3: "OP_IGNORE_AS_TEMPORARY",
		4: "OP_ADJUST_CND_ENTRY",
		5: "OP_REMEDIATION_APPLIED",
	}

	Alert_State_OperatorHandlingState_value = map[string]int32{
		"OP_NOT_INVOLVED":        0,
		"OP_AWAITING_HANDLING":   1,
		"OP_ACKNOWLEDGED":        2,
		"OP_IGNORE_AS_TEMPORARY": 3,
		"OP_ADJUST_CND_ENTRY":    4,
		"OP_REMEDIATION_APPLIED": 5,
	}
)

func (x Alert_State_OperatorHandlingState) Enum() *Alert_State_OperatorHandlingState {
	p := new(Alert_State_OperatorHandlingState)
	*p = x
	return p
}

func (x Alert_State_OperatorHandlingState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (Alert_State_OperatorHandlingState) Descriptor() preflect.EnumDescriptor {
	return edgelq_alerting_proto_v1_alert_proto_enumTypes[2].Descriptor()
}

func (Alert_State_OperatorHandlingState) Type() preflect.EnumType {
	return &edgelq_alerting_proto_v1_alert_proto_enumTypes[2]
}

func (x Alert_State_OperatorHandlingState) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use Alert_State_OperatorHandlingState.ProtoReflect.Descriptor instead.
func (Alert_State_OperatorHandlingState) EnumDescriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_alert_proto_rawDescGZIP(), []int{0, 2, 1}
}

// EscalationLevel informs who is handling an alert.
type Alert_State_EscalationLevel int32

const (
	// None is invalid state.
	Alert_State_NONE Alert_State_EscalationLevel = 0
	// Alert is handled by AI Agent now
	Alert_State_AI_AGENT Alert_State_EscalationLevel = 1
	// Alert is handled by OPERATOR now.
	Alert_State_OPERATOR Alert_State_EscalationLevel = 2
)

var (
	Alert_State_EscalationLevel_name = map[int32]string{
		0: "NONE",
		1: "AI_AGENT",
		2: "OPERATOR",
	}

	Alert_State_EscalationLevel_value = map[string]int32{
		"NONE":     0,
		"AI_AGENT": 1,
		"OPERATOR": 2,
	}
)

func (x Alert_State_EscalationLevel) Enum() *Alert_State_EscalationLevel {
	p := new(Alert_State_EscalationLevel)
	*p = x
	return p
}

func (x Alert_State_EscalationLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (Alert_State_EscalationLevel) Descriptor() preflect.EnumDescriptor {
	return edgelq_alerting_proto_v1_alert_proto_enumTypes[3].Descriptor()
}

func (Alert_State_EscalationLevel) Type() preflect.EnumType {
	return &edgelq_alerting_proto_v1_alert_proto_enumTypes[3]
}

func (x Alert_State_EscalationLevel) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use Alert_State_EscalationLevel.ProtoReflect.Descriptor instead.
func (Alert_State_EscalationLevel) EnumDescriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_alert_proto_rawDescGZIP(), []int{0, 2, 2}
}

// Alert describes an abnormal situation indicated by TimeSeries or Logs.
// Alert is always associated with a single resource type, as indicated
// in Policy object.
// It contains relevant information: TimeSeries/Logs values that caused
// the issue, starting time, ending time, if alert stopped, current
// handling state (by both operator and AI agent).
// Each Alert belongs to a single TsCondition/LogCondition resource, and
// is always associated with some unique TsEntry - they share alerting
// resource reference.
// Relationship Alert <-> TsEntry is N <-> 1
// Relationship Alert <-> TsCondition/LogCondition is N <-> 1
type Alert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of Alert
	// When creating a new instance, this field is optional and if not provided,
	// it will be generated automatically. Last ID segment must conform to the
	// following regex: [a-zA-Z0-9_.:-]{1,128}
	Name *Name `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty"`
	// Metadata is an object with information like create, update and delete time
	// (for async deleted resources), has user labels/annotations, sharding
	// information, multi-region syncing information and may have non-schema
	// owners (useful for taking ownership of resources belonging to lower level
	// services by higher ones).
	Metadata *meta.Meta `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Display name informing about basic params (condition display name and
	// alerting resource)
	DisplayName string `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Alerting resource points to the original resource which generated alert.
	// This meta reference works like dynamic type (any service, any resource).
	// TODO: We could use of "DynamicReference" message type. It can be similar to
	// OwnerReference, except it works more like reference (uses
	// EstablishReferences...). It can support most normal behaviors, like CASCADE
	// DELETE/UNSET.
	AlertingResource *meta.OwnerReference `protobuf:"bytes,4,opt,name=alerting_resource,json=alertingResource,proto3" json:"alerting_resource,omitempty"`
	// State of alert
	State *Alert_State `protobuf:"bytes,8,opt,name=state,proto3" json:"state,omitempty"`
	// Internal field.
	Internal *Alert_Internal `protobuf:"bytes,9,opt,name=internal,proto3" json:"internal,omitempty"`
	// Types that are valid to be assigned to Info:
	//	*Alert_TsInfo_
	//	*Alert_LogInfo_
	Info isAlert_Info `protobuf_oneof:"info"`
}

func (m *Alert) Reset() {
	*m = Alert{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_alert_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Alert) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Alert) ProtoMessage() {}

func (m *Alert) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_alert_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Alert) GotenMessage() {}

// Deprecated, Use Alert.ProtoReflect.Descriptor instead.
func (*Alert) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_alert_proto_rawDescGZIP(), []int{0}
}

func (m *Alert) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Alert) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Alert) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Alert) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

type isAlert_Info interface {
	isAlert_Info()
}

type Alert_TsInfo_ struct {
	// Informs about alert based on TimeSeries data.
	TsInfo *Alert_TsInfo `protobuf:"bytes,6,opt,name=ts_info,json=tsInfo,proto3,oneof"`
}
type Alert_LogInfo_ struct {
	// Informs about alert based on Log data.
	LogInfo *Alert_LogInfo `protobuf:"bytes,7,opt,name=log_info,json=logInfo,proto3,oneof"`
}

func (*Alert_TsInfo_) isAlert_Info()  {}
func (*Alert_LogInfo_) isAlert_Info() {}
func (m *Alert) GetName() *Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *Alert) GetMetadata() *meta.Meta {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Alert) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *Alert) GetAlertingResource() *meta.OwnerReference {
	if m != nil {
		return m.AlertingResource
	}
	return nil
}

func (m *Alert) GetState() *Alert_State {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *Alert) GetInternal() *Alert_Internal {
	if m != nil {
		return m.Internal
	}
	return nil
}

func (m *Alert) GetInfo() isAlert_Info {
	if m != nil {
		return m.Info
	}
	return nil
}
func (m *Alert) GetTsInfo() *Alert_TsInfo {
	if x, ok := m.GetInfo().(*Alert_TsInfo_); ok {
		return x.TsInfo
	}
	return nil
}
func (m *Alert) GetLogInfo() *Alert_LogInfo {
	if x, ok := m.GetInfo().(*Alert_LogInfo_); ok {
		return x.LogInfo
	}
	return nil
}
func (m *Alert) SetName(fv *Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "Alert"))
	}
	m.Name = fv
}

func (m *Alert) SetMetadata(fv *meta.Meta) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Metadata", "Alert"))
	}
	m.Metadata = fv
}

func (m *Alert) SetDisplayName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DisplayName", "Alert"))
	}
	m.DisplayName = fv
}

func (m *Alert) SetAlertingResource(fv *meta.OwnerReference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AlertingResource", "Alert"))
	}
	m.AlertingResource = fv
}

func (m *Alert) SetState(fv *Alert_State) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "State", "Alert"))
	}
	m.State = fv
}

func (m *Alert) SetInternal(fv *Alert_Internal) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Internal", "Alert"))
	}
	m.Internal = fv
}

func (m *Alert) SetInfo(ofv isAlert_Info) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "isAlert_Info", "Alert"))
	}
	m.Info = ofv
}
func (m *Alert) SetTsInfo(fv *Alert_TsInfo) {
	m.SetInfo(&Alert_TsInfo_{TsInfo: fv})
}
func (m *Alert) SetLogInfo(fv *Alert_LogInfo) {
	m.SetInfo(&Alert_LogInfo_{LogInfo: fv})
}

// TsInfo contains Alert data created based on TimeSeries data.
type Alert_TsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Type of TimeSeries alert - based on ANOMALY or THRESHOLD.
	Type Alert_TsInfo_Type `protobuf:"varint,1,opt,name=type,proto3,enum=ntt.alerting.v1.Alert_TsInfo_Type" json:"type,omitempty"`
	// If alert type is ANOMALY, then this field is populated
	// and informs for what window size anomaly was detected.
	AnomalyWindowSize *durationpb.Duration `protobuf:"bytes,2,opt,name=anomaly_window_size,json=anomalyWindowSize,proto3" json:"anomaly_window_size,omitempty"`
	// Binary key describing common metric/resource labels
	CommonKey []byte `protobuf:"bytes,3,opt,name=common_key,json=commonKey,proto3" json:"common_key,omitempty"`
	// List of metric types used in TsCondition
	MetricTypes []string `protobuf:"bytes,4,rep,name=metric_types,json=metricTypes,proto3" json:"metric_types,omitempty"`
	// List of resource types used in TsCondition
	ResourceTypes []string `protobuf:"bytes,5,rep,name=resource_types,json=resourceTypes,proto3" json:"resource_types,omitempty"`
	// Metric labels by which we grouped TimeSeries data.
	CommonMetricLabels map[string]string `protobuf:"bytes,6,rep,name=common_metric_labels,json=commonMetricLabels,proto3" json:"common_metric_labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Resource labels by which we grouped TimeSeries data.
	CommonResourceLabels map[string]string `protobuf:"bytes,7,rep,name=common_resource_labels,json=commonResourceLabels,proto3" json:"common_resource_labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// All TimeSeries corresponding to each TsCondition.Spec.Query object,
	// according to unique combination of group by fields: resource/metric
	// labels.
	TimeSeries []*Alert_TsInfo_TimeSeries `protobuf:"bytes,8,rep,name=time_series,json=timeSeries,proto3" json:"time_series,omitempty"`
}

func (m *Alert_TsInfo) Reset() {
	*m = Alert_TsInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_alert_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Alert_TsInfo) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Alert_TsInfo) ProtoMessage() {}

func (m *Alert_TsInfo) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_alert_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Alert_TsInfo) GotenMessage() {}

// Deprecated, Use Alert_TsInfo.ProtoReflect.Descriptor instead.
func (*Alert_TsInfo) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_alert_proto_rawDescGZIP(), []int{0, 0}
}

func (m *Alert_TsInfo) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Alert_TsInfo) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Alert_TsInfo) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Alert_TsInfo) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Alert_TsInfo) GetType() Alert_TsInfo_Type {
	if m != nil {
		return m.Type
	}
	return Alert_TsInfo_UNDEFINED
}

func (m *Alert_TsInfo) GetAnomalyWindowSize() *durationpb.Duration {
	if m != nil {
		return m.AnomalyWindowSize
	}
	return nil
}

func (m *Alert_TsInfo) GetCommonKey() []byte {
	if m != nil {
		return m.CommonKey
	}
	return nil
}

func (m *Alert_TsInfo) GetMetricTypes() []string {
	if m != nil {
		return m.MetricTypes
	}
	return nil
}

func (m *Alert_TsInfo) GetResourceTypes() []string {
	if m != nil {
		return m.ResourceTypes
	}
	return nil
}

func (m *Alert_TsInfo) GetCommonMetricLabels() map[string]string {
	if m != nil {
		return m.CommonMetricLabels
	}
	return nil
}

func (m *Alert_TsInfo) GetCommonResourceLabels() map[string]string {
	if m != nil {
		return m.CommonResourceLabels
	}
	return nil
}

func (m *Alert_TsInfo) GetTimeSeries() []*Alert_TsInfo_TimeSeries {
	if m != nil {
		return m.TimeSeries
	}
	return nil
}

func (m *Alert_TsInfo) SetType(fv Alert_TsInfo_Type) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Type", "Alert_TsInfo"))
	}
	m.Type = fv
}

func (m *Alert_TsInfo) SetAnomalyWindowSize(fv *durationpb.Duration) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AnomalyWindowSize", "Alert_TsInfo"))
	}
	m.AnomalyWindowSize = fv
}

func (m *Alert_TsInfo) SetCommonKey(fv []byte) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CommonKey", "Alert_TsInfo"))
	}
	m.CommonKey = fv
}

func (m *Alert_TsInfo) SetMetricTypes(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MetricTypes", "Alert_TsInfo"))
	}
	m.MetricTypes = fv
}

func (m *Alert_TsInfo) SetResourceTypes(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResourceTypes", "Alert_TsInfo"))
	}
	m.ResourceTypes = fv
}

func (m *Alert_TsInfo) SetCommonMetricLabels(fv map[string]string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CommonMetricLabels", "Alert_TsInfo"))
	}
	m.CommonMetricLabels = fv
}

func (m *Alert_TsInfo) SetCommonResourceLabels(fv map[string]string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CommonResourceLabels", "Alert_TsInfo"))
	}
	m.CommonResourceLabels = fv
}

func (m *Alert_TsInfo) SetTimeSeries(fv []*Alert_TsInfo_TimeSeries) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TimeSeries", "Alert_TsInfo"))
	}
	m.TimeSeries = fv
}

// LogInfo contains Alert data created based on Log data.
type Alert_LogInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Binary key describing common labels
	CommonKey []byte `protobuf:"bytes,1,opt,name=common_key,json=commonKey,proto3" json:"common_key,omitempty"`
	// List of log descriptor types specified in parent LogCondition
	LogTypes []string `protobuf:"bytes,2,rep,name=log_types,json=logTypes,proto3" json:"log_types,omitempty"`
	// Log labels by which we grouped Logs data.
	CommonLogLabels map[string]string `protobuf:"bytes,3,rep,name=common_log_labels,json=commonLogLabels,proto3" json:"common_log_labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Content of violating log
	ViolatingLog string `protobuf:"bytes,4,opt,name=violating_log,json=violatingLog,proto3" json:"violating_log,omitempty"`
}

func (m *Alert_LogInfo) Reset() {
	*m = Alert_LogInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_alert_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Alert_LogInfo) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Alert_LogInfo) ProtoMessage() {}

func (m *Alert_LogInfo) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_alert_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Alert_LogInfo) GotenMessage() {}

// Deprecated, Use Alert_LogInfo.ProtoReflect.Descriptor instead.
func (*Alert_LogInfo) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_alert_proto_rawDescGZIP(), []int{0, 1}
}

func (m *Alert_LogInfo) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Alert_LogInfo) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Alert_LogInfo) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Alert_LogInfo) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Alert_LogInfo) GetCommonKey() []byte {
	if m != nil {
		return m.CommonKey
	}
	return nil
}

func (m *Alert_LogInfo) GetLogTypes() []string {
	if m != nil {
		return m.LogTypes
	}
	return nil
}

func (m *Alert_LogInfo) GetCommonLogLabels() map[string]string {
	if m != nil {
		return m.CommonLogLabels
	}
	return nil
}

func (m *Alert_LogInfo) GetViolatingLog() string {
	if m != nil {
		return m.ViolatingLog
	}
	return ""
}

func (m *Alert_LogInfo) SetCommonKey(fv []byte) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CommonKey", "Alert_LogInfo"))
	}
	m.CommonKey = fv
}

func (m *Alert_LogInfo) SetLogTypes(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "LogTypes", "Alert_LogInfo"))
	}
	m.LogTypes = fv
}

func (m *Alert_LogInfo) SetCommonLogLabels(fv map[string]string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CommonLogLabels", "Alert_LogInfo"))
	}
	m.CommonLogLabels = fv
}

func (m *Alert_LogInfo) SetViolatingLog(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ViolatingLog", "Alert_LogInfo"))
	}
	m.ViolatingLog = fv
}

// State is responsible for managing lifecycle of Alert.
// Each Alert
type Alert_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Informs if alert is still firing
	IsFiring bool `protobuf:"varint,1,opt,name=is_firing,json=isFiring,proto3" json:"is_firing,omitempty"`
	// Time when alert was raised
	StartTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// Time when alert was silenced, if no longer firing
	EndTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// Informs where notifications about alert state changes
	// must be sent.
	NotificationStatuses []*Alert_State_Notification `protobuf:"bytes,4,rep,name=notification_statuses,json=notificationStatuses,proto3" json:"notification_statuses,omitempty"`
	// Informs who is handling alert as of now.
	EscalationLevel Alert_State_EscalationLevel `protobuf:"varint,5,opt,name=escalation_level,json=escalationLevel,proto3,enum=ntt.alerting.v1.Alert_State_EscalationLevel" json:"escalation_level,omitempty"`
	// Informs current state of alert handling by AI Agent if
	// escalation level is AI_AGENT. If alert is on operator side,
	// it will contain last decision made by AI agent.
	AiAgentHandlingState Alert_State_AiHandlingState `protobuf:"varint,6,opt,name=ai_agent_handling_state,json=aiAgentHandlingState,proto3,enum=ntt.alerting.v1.Alert_State_AiHandlingState" json:"ai_agent_handling_state,omitempty"`
	// Informs when was the last state change of ai_agent_handling_state field.
	AiAgentLastStateChangeTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=ai_agent_last_state_change_time,json=aiAgentLastStateChangeTime,proto3" json:"ai_agent_last_state_change_time,omitempty"`
	// Contains AI Agent troubleshooting notes. If agent SSHed to alerting
	// resource, it will also contain history of shell for visibility purposes.
	AiAgentDiagnosisNotes string `protobuf:"bytes,8,opt,name=ai_agent_diagnosis_notes,json=aiAgentDiagnosisNotes,proto3" json:"ai_agent_diagnosis_notes,omitempty"`
	// Optional remediation information from AI Agent. This field may be
	// populated when field ai_agent_handling_state switches to
	// AI_REMEDIATION_PROPOSED, if necessary. For example, if AI Agent wants to
	// SSH and execute some commands, it will contain these commands.
	AiRemediationArg string `protobuf:"bytes,9,opt,name=ai_remediation_arg,json=aiRemediationArg,proto3" json:"ai_remediation_arg,omitempty"`
	// Remediation type proposed by AI Agent to fix an alert. This field is
	// populated when field ai_agent_handling_state switches to
	// AI_REMEDIATION_PROPOSED. Informs what kind of remediation AI Agent wants
	// to execute.
	AiRemediation *policy.Policy_Spec_AIAgentHandling_Remediation `protobuf:"bytes,10,opt,name=ai_remediation,json=aiRemediation,proto3" json:"ai_remediation,omitempty"`
	// Informs current state of alert handling by Operator if
	// escalation level is OPERATOR. If alert is on AI_AGENT side,
	// it will contain last decision made by operator.
	OperatorHandlingState Alert_State_OperatorHandlingState `protobuf:"varint,11,opt,name=operator_handling_state,json=operatorHandlingState,proto3,enum=ntt.alerting.v1.Alert_State_OperatorHandlingState" json:"operator_handling_state,omitempty"`
	// Informs when was the last state change of operator_handling_state field.
	OperatorLastStateChangeTime *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=operator_last_state_change_time,json=operatorLastStateChangeTime,proto3" json:"operator_last_state_change_time,omitempty"`
	// Optional operator notes.
	OperatorNotes string `protobuf:"bytes,13,opt,name=operator_notes,json=operatorNotes,proto3" json:"operator_notes,omitempty"`
	// Alert has ended and any needed notifications are processed
	LifecycleCompleted bool `protobuf:"varint,14,opt,name=lifecycle_completed,json=lifecycleCompleted,proto3" json:"lifecycle_completed,omitempty"`
}

func (m *Alert_State) Reset() {
	*m = Alert_State{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_alert_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Alert_State) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Alert_State) ProtoMessage() {}

func (m *Alert_State) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_alert_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Alert_State) GotenMessage() {}

// Deprecated, Use Alert_State.ProtoReflect.Descriptor instead.
func (*Alert_State) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_alert_proto_rawDescGZIP(), []int{0, 2}
}

func (m *Alert_State) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Alert_State) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Alert_State) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Alert_State) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Alert_State) GetIsFiring() bool {
	if m != nil {
		return m.IsFiring
	}
	return false
}

func (m *Alert_State) GetStartTime() *timestamppb.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *Alert_State) GetEndTime() *timestamppb.Timestamp {
	if m != nil {
		return m.EndTime
	}
	return nil
}

func (m *Alert_State) GetNotificationStatuses() []*Alert_State_Notification {
	if m != nil {
		return m.NotificationStatuses
	}
	return nil
}

func (m *Alert_State) GetEscalationLevel() Alert_State_EscalationLevel {
	if m != nil {
		return m.EscalationLevel
	}
	return Alert_State_NONE
}

func (m *Alert_State) GetAiAgentHandlingState() Alert_State_AiHandlingState {
	if m != nil {
		return m.AiAgentHandlingState
	}
	return Alert_State_AI_AGENT_NOT_INVOLVED
}

func (m *Alert_State) GetAiAgentLastStateChangeTime() *timestamppb.Timestamp {
	if m != nil {
		return m.AiAgentLastStateChangeTime
	}
	return nil
}

func (m *Alert_State) GetAiAgentDiagnosisNotes() string {
	if m != nil {
		return m.AiAgentDiagnosisNotes
	}
	return ""
}

func (m *Alert_State) GetAiRemediationArg() string {
	if m != nil {
		return m.AiRemediationArg
	}
	return ""
}

func (m *Alert_State) GetAiRemediation() *policy.Policy_Spec_AIAgentHandling_Remediation {
	if m != nil {
		return m.AiRemediation
	}
	return nil
}

func (m *Alert_State) GetOperatorHandlingState() Alert_State_OperatorHandlingState {
	if m != nil {
		return m.OperatorHandlingState
	}
	return Alert_State_OP_NOT_INVOLVED
}

func (m *Alert_State) GetOperatorLastStateChangeTime() *timestamppb.Timestamp {
	if m != nil {
		return m.OperatorLastStateChangeTime
	}
	return nil
}

func (m *Alert_State) GetOperatorNotes() string {
	if m != nil {
		return m.OperatorNotes
	}
	return ""
}

func (m *Alert_State) GetLifecycleCompleted() bool {
	if m != nil {
		return m.LifecycleCompleted
	}
	return false
}

func (m *Alert_State) SetIsFiring(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IsFiring", "Alert_State"))
	}
	m.IsFiring = fv
}

func (m *Alert_State) SetStartTime(fv *timestamppb.Timestamp) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "StartTime", "Alert_State"))
	}
	m.StartTime = fv
}

func (m *Alert_State) SetEndTime(fv *timestamppb.Timestamp) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "EndTime", "Alert_State"))
	}
	m.EndTime = fv
}

func (m *Alert_State) SetNotificationStatuses(fv []*Alert_State_Notification) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NotificationStatuses", "Alert_State"))
	}
	m.NotificationStatuses = fv
}

func (m *Alert_State) SetEscalationLevel(fv Alert_State_EscalationLevel) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "EscalationLevel", "Alert_State"))
	}
	m.EscalationLevel = fv
}

func (m *Alert_State) SetAiAgentHandlingState(fv Alert_State_AiHandlingState) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AiAgentHandlingState", "Alert_State"))
	}
	m.AiAgentHandlingState = fv
}

func (m *Alert_State) SetAiAgentLastStateChangeTime(fv *timestamppb.Timestamp) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AiAgentLastStateChangeTime", "Alert_State"))
	}
	m.AiAgentLastStateChangeTime = fv
}

func (m *Alert_State) SetAiAgentDiagnosisNotes(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AiAgentDiagnosisNotes", "Alert_State"))
	}
	m.AiAgentDiagnosisNotes = fv
}

func (m *Alert_State) SetAiRemediationArg(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AiRemediationArg", "Alert_State"))
	}
	m.AiRemediationArg = fv
}

func (m *Alert_State) SetAiRemediation(fv *policy.Policy_Spec_AIAgentHandling_Remediation) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AiRemediation", "Alert_State"))
	}
	m.AiRemediation = fv
}

func (m *Alert_State) SetOperatorHandlingState(fv Alert_State_OperatorHandlingState) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OperatorHandlingState", "Alert_State"))
	}
	m.OperatorHandlingState = fv
}

func (m *Alert_State) SetOperatorLastStateChangeTime(fv *timestamppb.Timestamp) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OperatorLastStateChangeTime", "Alert_State"))
	}
	m.OperatorLastStateChangeTime = fv
}

func (m *Alert_State) SetOperatorNotes(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OperatorNotes", "Alert_State"))
	}
	m.OperatorNotes = fv
}

func (m *Alert_State) SetLifecycleCompleted(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "LifecycleCompleted", "Alert_State"))
	}
	m.LifecycleCompleted = fv
}

// Internal data.
type Alert_Internal struct {
	state            protoimpl.MessageState
	sizeCache        protoimpl.SizeCache
	unknownFields    protoimpl.UnknownFields
	AlertingLocation policy.Policy_Spec_ProcessingLocation `protobuf:"varint,1,opt,name=alerting_location,json=alertingLocation,proto3,enum=ntt.alerting.v1.Policy_Spec_ProcessingLocation" json:"alerting_location,omitempty"`
}

func (m *Alert_Internal) Reset() {
	*m = Alert_Internal{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_alert_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Alert_Internal) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Alert_Internal) ProtoMessage() {}

func (m *Alert_Internal) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_alert_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Alert_Internal) GotenMessage() {}

// Deprecated, Use Alert_Internal.ProtoReflect.Descriptor instead.
func (*Alert_Internal) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_alert_proto_rawDescGZIP(), []int{0, 3}
}

func (m *Alert_Internal) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Alert_Internal) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Alert_Internal) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Alert_Internal) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Alert_Internal) GetAlertingLocation() policy.Policy_Spec_ProcessingLocation {
	if m != nil {
		return m.AlertingLocation
	}
	return policy.Policy_Spec_UNDEFINED
}

func (m *Alert_Internal) SetAlertingLocation(fv policy.Policy_Spec_ProcessingLocation) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AlertingLocation", "Alert_Internal"))
	}
	m.AlertingLocation = fv
}

// TimeSeries object matches single TsCondition.Spec.Query object
// in parent TsCondition. It contains TimeSeries data points
// at a time of violation, along with relevant information, like
// thresholds specified in TsEntry.
type Alert_TsInfo_TimeSeries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Query name of the matching TsCondition.Spec.Query object
	QueryName string `protobuf:"bytes,1,opt,name=query_name,json=queryName,proto3" json:"query_name,omitempty"`
	// TimeSeries data values during violation start. They will
	// be outside of lower/upper thresholds range for THRESHOLD
	// type alerts.
	Values []float64 `protobuf:"fixed64,2,rep,packed,name=values,proto3" json:"values,omitempty"`
	// Corresponding detected anomaly values (square errors). Populated
	// for ANOMALY type of alerts. They will be larger than
	// anomaly threshold for ANOMALY type of alerts.
	Anomalies []float64 `protobuf:"fixed64,3,rep,packed,name=anomalies,proto3" json:"anomalies,omitempty"`
	// Upper threshold that was active during violation.
	// Populated for THRESHOLD type of alerts.
	UpperThreshold *ts_condition.AlertingThreshold `protobuf:"bytes,4,opt,name=upper_threshold,json=upperThreshold,proto3" json:"upper_threshold,omitempty"`
	// Lower threshold that was active during violation.
	// Populated for THRESHOLD type of alerts.
	LowerThreshold *ts_condition.AlertingThreshold `protobuf:"bytes,5,opt,name=lower_threshold,json=lowerThreshold,proto3" json:"lower_threshold,omitempty"`
	// Anomaly threshold that was active during violation.
	// Populated for ANOMALY type of alerts.
	AnomalyThreshold float64 `protobuf:"fixed64,7,opt,name=anomaly_threshold,json=anomalyThreshold,proto3" json:"anomaly_threshold,omitempty"`
	// Informs how long violation was active at the time
	// of raising alert.
	AfterDuration *durationpb.Duration `protobuf:"bytes,6,opt,name=after_duration,json=afterDuration,proto3" json:"after_duration,omitempty"`
}

func (m *Alert_TsInfo_TimeSeries) Reset() {
	*m = Alert_TsInfo_TimeSeries{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_alert_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Alert_TsInfo_TimeSeries) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Alert_TsInfo_TimeSeries) ProtoMessage() {}

func (m *Alert_TsInfo_TimeSeries) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_alert_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Alert_TsInfo_TimeSeries) GotenMessage() {}

// Deprecated, Use Alert_TsInfo_TimeSeries.ProtoReflect.Descriptor instead.
func (*Alert_TsInfo_TimeSeries) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_alert_proto_rawDescGZIP(), []int{0, 0, 2}
}

func (m *Alert_TsInfo_TimeSeries) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Alert_TsInfo_TimeSeries) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Alert_TsInfo_TimeSeries) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Alert_TsInfo_TimeSeries) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Alert_TsInfo_TimeSeries) GetQueryName() string {
	if m != nil {
		return m.QueryName
	}
	return ""
}

func (m *Alert_TsInfo_TimeSeries) GetValues() []float64 {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *Alert_TsInfo_TimeSeries) GetAnomalies() []float64 {
	if m != nil {
		return m.Anomalies
	}
	return nil
}

func (m *Alert_TsInfo_TimeSeries) GetUpperThreshold() *ts_condition.AlertingThreshold {
	if m != nil {
		return m.UpperThreshold
	}
	return nil
}

func (m *Alert_TsInfo_TimeSeries) GetLowerThreshold() *ts_condition.AlertingThreshold {
	if m != nil {
		return m.LowerThreshold
	}
	return nil
}

func (m *Alert_TsInfo_TimeSeries) GetAnomalyThreshold() float64 {
	if m != nil {
		return m.AnomalyThreshold
	}
	return float64(0)
}

func (m *Alert_TsInfo_TimeSeries) GetAfterDuration() *durationpb.Duration {
	if m != nil {
		return m.AfterDuration
	}
	return nil
}

func (m *Alert_TsInfo_TimeSeries) SetQueryName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "QueryName", "Alert_TsInfo_TimeSeries"))
	}
	m.QueryName = fv
}

func (m *Alert_TsInfo_TimeSeries) SetValues(fv []float64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Values", "Alert_TsInfo_TimeSeries"))
	}
	m.Values = fv
}

func (m *Alert_TsInfo_TimeSeries) SetAnomalies(fv []float64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Anomalies", "Alert_TsInfo_TimeSeries"))
	}
	m.Anomalies = fv
}

func (m *Alert_TsInfo_TimeSeries) SetUpperThreshold(fv *ts_condition.AlertingThreshold) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "UpperThreshold", "Alert_TsInfo_TimeSeries"))
	}
	m.UpperThreshold = fv
}

func (m *Alert_TsInfo_TimeSeries) SetLowerThreshold(fv *ts_condition.AlertingThreshold) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "LowerThreshold", "Alert_TsInfo_TimeSeries"))
	}
	m.LowerThreshold = fv
}

func (m *Alert_TsInfo_TimeSeries) SetAnomalyThreshold(fv float64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AnomalyThreshold", "Alert_TsInfo_TimeSeries"))
	}
	m.AnomalyThreshold = fv
}

func (m *Alert_TsInfo_TimeSeries) SetAfterDuration(fv *durationpb.Duration) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AfterDuration", "Alert_TsInfo_TimeSeries"))
	}
	m.AfterDuration = fv
}

// Notification informs about pending notifications that must
// be sent due to changes in Alert state.
type Alert_State_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Kind informs what type of State has changed, and for which
	// we need to send notifications.
	Kind policy.Policy_Spec_Notification_Kind `protobuf:"varint,1,opt,name=kind,proto3,enum=ntt.alerting.v1.Policy_Spec_Notification_Kind" json:"kind,omitempty"`
	// Informs about list of channels to where notification
	// should be sent according to the corresponding kind.
	PendingChannels []*notification_channel.Reference `protobuf:"bytes,2,rep,customtype=Reference,name=pending_channels,json=pendingChannels,proto3" json:"pending_channels,omitempty"`
}

func (m *Alert_State_Notification) Reset() {
	*m = Alert_State_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_alert_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Alert_State_Notification) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Alert_State_Notification) ProtoMessage() {}

func (m *Alert_State_Notification) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_alert_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Alert_State_Notification) GotenMessage() {}

// Deprecated, Use Alert_State_Notification.ProtoReflect.Descriptor instead.
func (*Alert_State_Notification) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_alert_proto_rawDescGZIP(), []int{0, 2, 0}
}

func (m *Alert_State_Notification) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Alert_State_Notification) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Alert_State_Notification) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Alert_State_Notification) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Alert_State_Notification) GetKind() policy.Policy_Spec_Notification_Kind {
	if m != nil {
		return m.Kind
	}
	return policy.Policy_Spec_Notification_UNDEFINED
}

func (m *Alert_State_Notification) GetPendingChannels() []*notification_channel.Reference {
	if m != nil {
		return m.PendingChannels
	}
	return nil
}

func (m *Alert_State_Notification) SetKind(fv policy.Policy_Spec_Notification_Kind) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Kind", "Alert_State_Notification"))
	}
	m.Kind = fv
}

func (m *Alert_State_Notification) SetPendingChannels(fv []*notification_channel.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PendingChannels", "Alert_State_Notification"))
	}
	m.PendingChannels = fv
}

var edgelq_alerting_proto_v1_alert_proto preflect.FileDescriptor

var edgelq_alerting_proto_v1_alert_proto_rawDesc = []byte{
	0x0a, 0x24, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x65, 0x64, 0x67,
	0x65, 0x6c, 0x71, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x16, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f,
	0x6d, 0x65, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x65, 0x64, 0x67, 0x65,
	0x6c, 0x71, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x2b, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x73, 0x5f, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf4,
	0x2f, 0x0a, 0x05, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x21, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xb2, 0xda, 0x21, 0x09, 0x0a, 0x07, 0x0a, 0x05,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x27, 0x0a, 0x0c, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x04, 0xf0, 0xd9, 0x21, 0x01, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x11, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x10, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x38, 0x0a,
	0x07, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x54, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52,
	0x06, 0x74, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3b, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x2e, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x07, 0x6c, 0x6f, 0x67,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3c, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x42, 0x08, 0xca, 0xc6, 0x27, 0x04, 0x62, 0x02, 0x08, 0x01, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x42, 0x04, 0xf0, 0xd9, 0x21, 0x01, 0x52, 0x08, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x1a, 0xf8, 0x08, 0x0a, 0x06, 0x54, 0x73, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x40, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x54, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x08, 0xca, 0xc6, 0x27, 0x04, 0x3a, 0x02, 0x10, 0x01, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x49, 0x0a, 0x13, 0x61, 0x6e, 0x6f, 0x6d, 0x61, 0x6c, 0x79, 0x5f, 0x77, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x61, 0x6e, 0x6f, 0x6d,
	0x61, 0x6c, 0x79, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x0c,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x04, 0xf0, 0xd9, 0x21, 0x01, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x42, 0x04, 0xf0,
	0xd9, 0x21, 0x01, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x12, 0x6d, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x35, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x54, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x04, 0xf0, 0xd9, 0x21, 0x01, 0x52, 0x12, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x12, 0x73, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x37, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x54, 0x73, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x04, 0xf0, 0xd9, 0x21, 0x01,
	0x52, 0x14, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x49, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x2e, 0x54, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x1a, 0x45, 0x0a, 0x17, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x47, 0x0a, 0x19, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0xf9, 0x02, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x12, 0x2c, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xca, 0xc6, 0x27, 0x09, 0x2a, 0x07, 0x3a, 0x03, 0x08, 0x80,
	0x02, 0x68, 0x01, 0x52, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x01, 0x52, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6e, 0x6f, 0x6d, 0x61, 0x6c,
	0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x01, 0x52, 0x09, 0x61, 0x6e, 0x6f, 0x6d, 0x61,
	0x6c, 0x69, 0x65, 0x73, 0x12, 0x4b, 0x0a, 0x0f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x52, 0x0e, 0x75, 0x70, 0x70, 0x65, 0x72, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x12, 0x4b, 0x0a, 0x0f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x0e,
	0x6c, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x2b,
	0x0a, 0x11, 0x61, 0x6e, 0x6f, 0x6d, 0x61, 0x6c, 0x79, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x61, 0x6e, 0x6f, 0x6d, 0x61,
	0x6c, 0x79, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x40, 0x0a, 0x0e, 0x61,
	0x66, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d,
	0x61, 0x66, 0x74, 0x65, 0x72, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x31, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x4e, 0x4f, 0x4d, 0x41, 0x4c, 0x59, 0x10,
	0x01, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x48, 0x52, 0x45, 0x53, 0x48, 0x4f, 0x4c, 0x44, 0x10, 0x02,
	0x1a, 0x9b, 0x02, 0x0a, 0x07, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x21, 0x0a, 0x09, 0x6c,
	0x6f, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x04,
	0xf0, 0xd9, 0x21, 0x01, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x65,
	0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x2e, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x4c, 0x6f, 0x67, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x04,
	0xf0, 0xd9, 0x21, 0x01, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x6c, 0x6f, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x69,
	0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x67, 0x1a, 0x42, 0x0a, 0x14, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x9e,
	0x0d, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x66,
	0x69, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x46,
	0x69, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x64, 0x0a, 0x15, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x04, 0xf0, 0xd9, 0x21, 0x01, 0x52, 0x14, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x61, 0x0a,
	0x10, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x45, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x08, 0xca, 0xc6, 0x27, 0x04, 0x3a, 0x02, 0x10, 0x01, 0x52,
	0x0f, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x63, 0x0a, 0x17, 0x61, 0x69, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x6e,
	0x64, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2c, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x41, 0x69, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x14, 0x61, 0x69, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x65, 0x0a, 0x1f, 0x61, 0x69, 0x5f, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0xf0, 0xd9, 0x21, 0x01,
	0x52, 0x1a, 0x61, 0x69, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x18,
	0x61, 0x69, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x69, 0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x61, 0x69, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73,
	0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x69, 0x5f, 0x72, 0x65, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x72, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x61, 0x69, 0x52, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x72, 0x67, 0x12, 0x5f, 0x0a, 0x0e, 0x61, 0x69, 0x5f, 0x72, 0x65, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x41, 0x49, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x61, 0x69, 0x52, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6a, 0x0a, 0x17, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x61, 0x6e, 0x64,
	0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x15, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x66, 0x0a, 0x1f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0xf0, 0xd9, 0x21, 0x01, 0x52, 0x1b, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12,
	0x35, 0x0a, 0x13, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0xf0, 0xd9,
	0x21, 0x01, 0x52, 0x12, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x1a, 0x9c, 0x01, 0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53,
	0x70, 0x65, 0x63, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x48, 0x0a, 0x10, 0x70,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x1d, 0xb2, 0xda, 0x21, 0x19, 0x12, 0x17, 0x0a, 0x13, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x10, 0x04, 0x52, 0x0f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x22, 0xef, 0x01, 0x0a, 0x0f, 0x41, 0x69, 0x48, 0x61, 0x6e, 0x64,
	0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x49, 0x5f,
	0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x4f, 0x4c, 0x56,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x49, 0x5f, 0x41, 0x57, 0x41, 0x49, 0x54,
	0x49, 0x4e, 0x47, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x4c, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x1c,
	0x0a, 0x18, 0x41, 0x49, 0x5f, 0x45, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x54,
	0x4f, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16,
	0x41, 0x49, 0x5f, 0x49, 0x47, 0x4e, 0x4f, 0x52, 0x45, 0x5f, 0x41, 0x53, 0x5f, 0x54, 0x45, 0x4d,
	0x50, 0x4f, 0x52, 0x41, 0x52, 0x59, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x49, 0x5f, 0x41,
	0x44, 0x4a, 0x55, 0x53, 0x54, 0x5f, 0x43, 0x4e, 0x44, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x10,
	0x04, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x49, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x05, 0x12, 0x1b,
	0x0a, 0x17, 0x41, 0x49, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x06, 0x12, 0x1a, 0x0a, 0x16, 0x41,
	0x49, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x50,
	0x50, 0x4c, 0x49, 0x45, 0x44, 0x10, 0x07, 0x22, 0xac, 0x01, 0x0a, 0x15, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x50, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x4f,
	0x4c, 0x56, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x50, 0x5f, 0x41, 0x57, 0x41,
	0x49, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x4c, 0x49, 0x4e, 0x47, 0x10, 0x01,
	0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x50, 0x5f, 0x41, 0x43, 0x4b, 0x4e, 0x4f, 0x57, 0x4c, 0x45, 0x44,
	0x47, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x50, 0x5f, 0x49, 0x47, 0x4e, 0x4f,
	0x52, 0x45, 0x5f, 0x41, 0x53, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x4f, 0x52, 0x41, 0x52, 0x59, 0x10,
	0x03, 0x12, 0x17, 0x0a, 0x13, 0x4f, 0x50, 0x5f, 0x41, 0x44, 0x4a, 0x55, 0x53, 0x54, 0x5f, 0x43,
	0x4e, 0x44, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x50,
	0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x50,
	0x4c, 0x49, 0x45, 0x44, 0x10, 0x05, 0x22, 0x37, 0x0a, 0x0f, 0x45, 0x73, 0x63, 0x61, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e,
	0x45, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x49, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x10,
	0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x02, 0x1a,
	0x68, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x5c, 0x0a, 0x11, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x53, 0x70, 0x65, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x81, 0x13, 0xea, 0x41, 0xe1, 0x01,
	0x0a, 0x19, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x6c,
	0x71, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x60, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x7d, 0x2f, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b,
	0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x7b, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x7d, 0x12, 0x62, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x7d, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x7d, 0x2f, 0x6c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x7b, 0x6c, 0x6f, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x7d, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x7d, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x7b, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x7d, 0x92, 0xd9, 0x21, 0xaa, 0x0b, 0x0a, 0x06, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x12, 0x06,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x1a, 0x0b, 0x54, 0x73, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0x0c, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x18, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2a, 0x16, 0x5b, 0x61, 0x2d,
	0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x2e, 0x3a, 0x2d, 0x5d, 0x7b, 0x31, 0x2c, 0x31,
	0x32, 0x38, 0x7d, 0x38, 0x05, 0x42, 0xd5, 0x02, 0x08, 0x02, 0x12, 0x0c, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x20, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x16, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x11, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x73, 0x5f,
	0x66, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x09, 0x49, 0x73, 0x20, 0x46, 0x69, 0x72, 0x69, 0x6e,
	0x67, 0x12, 0x2a, 0x0a, 0x16, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x65, 0x73, 0x63, 0x61, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x10, 0x45, 0x73, 0x63,
	0x61, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x38, 0x0a,
	0x1d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x69, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f,
	0x68, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x17,
	0x41, 0x49, 0x20, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x20, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e,
	0x67, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x1d, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x69,
	0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x17, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x20, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x1e, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x0a, 0x53, 0x74, 0x61, 0x72, 0x74, 0x20, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x08, 0x45, 0x6e, 0x64, 0x20, 0x54, 0x69, 0x6d, 0x65, 0x42, 0xf0, 0x07,
	0x08, 0x03, 0x12, 0x0c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x20, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b,
	0x0a, 0x11, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x16, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x64, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x0c, 0x74,
	0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x12, 0x15, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x20, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x20, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x4b, 0x0a, 0x1b, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x61, 0x6e,
	0x6f, 0x6d, 0x61, 0x6c, 0x79, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x12, 0x2c, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x20, 0x61, 0x6e, 0x6f, 0x6d, 0x61, 0x6c, 0x79,
	0x20, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x20, 0x73, 0x69, 0x7a, 0x65, 0x20, 0x75, 0x73, 0x65,
	0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2a, 0x0a, 0x14, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x12, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x20, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x20, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x16, 0x74,
	0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x14, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x20, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x1c, 0x74,
	0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x13, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x20, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x12, 0x37, 0x0a, 0x1e, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x12, 0x15, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x32, 0x0a, 0x13, 0x74, 0x73, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x12, 0x1b, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x20, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x2c, 0x0a,
	0x0e, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x1a, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x20, 0x6c, 0x6f, 0x67, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x6f, 0x72, 0x20, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x1a, 0x6c,
	0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6c,
	0x6f, 0x67, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x10, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x20, 0x6c, 0x6f, 0x67, 0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x2d, 0x0a, 0x16, 0x6c,
	0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x6c, 0x6f, 0x67, 0x12, 0x13, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x20, 0x76, 0x69, 0x6f,
	0x6c, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x6c, 0x6f, 0x67, 0x12, 0x1c, 0x0a, 0x0f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x09, 0x49,
	0x73, 0x20, 0x46, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x2a, 0x0a, 0x16, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x10, 0x45, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x38, 0x0a, 0x1d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x69,
	0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x17, 0x41, 0x49, 0x20, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x20,
	0x68, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x40,
	0x0a, 0x1e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x69, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x5f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x73,
	0x12, 0x1e, 0x41, 0x49, 0x20, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x20, 0x74, 0x72, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x73, 0x68, 0x6f, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x6e, 0x6f, 0x74, 0x65, 0x73,
	0x12, 0x30, 0x0a, 0x18, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x69, 0x5f, 0x72, 0x65, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x72, 0x67, 0x12, 0x14, 0x41, 0x49,
	0x20, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x20, 0x72, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x1d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x17, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x20, 0x68, 0x61,
	0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x14,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e,
	0x6f, 0x74, 0x65, 0x73, 0x12, 0x0e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x20, 0x6e,
	0x6f, 0x74, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x0a, 0x53, 0x74, 0x61, 0x72, 0x74, 0x20,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x08, 0x45, 0x6e, 0x64, 0x20, 0x54, 0x69, 0x6d, 0x65,
	0xb2, 0xdf, 0x21, 0x83, 0x05, 0x0a, 0xe3, 0x04, 0x0a, 0xae, 0x01, 0x0a, 0x17, 0x62, 0x79, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x10, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x1a, 0x3f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x2f, 0x2d, 0x2f, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x2d, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2d, 0x2f, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x2d, 0x1a, 0x40, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x2f, 0x2d, 0x2f, 0x6c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2d, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2d,
	0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x2d, 0x0a, 0xe7, 0x02, 0x0a, 0x16, 0x62, 0x79,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0x10, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x1a, 0x46, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x2f, 0x7b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x7d, 0x2f, 0x74, 0x73, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2d, 0x2f, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x2d, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x2d, 0x1a, 0x47,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x7d, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x7d, 0x2f, 0x6c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x2d, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2d, 0x2f, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x2d, 0x1a, 0x53, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x7d, 0x2f, 0x74, 0x73,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x74, 0x73, 0x5f, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x2d, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x2d, 0x1a, 0x55, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d,
	0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x7d, 0x2f, 0x6c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x7b, 0x6c, 0x6f, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x7d,
	0x2f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2d, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x73, 0x2f, 0x2d, 0x12, 0x13, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x73, 0x5f,
	0x66, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x31, 0x0a, 0x16, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x6e, 0x61,
	0x6d, 0x65, 0x1a, 0x17, 0x62, 0x79, 0x53, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x69,
	0x6d, 0x65, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1b, 0x0a, 0x19, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x5f, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0xda, 0x94, 0x23, 0x02, 0x08, 0x01, 0xe2, 0xde,
	0x21, 0x02, 0x08, 0x02, 0xc2, 0x85, 0x2c, 0x55, 0x22, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x0c,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x07, 0x74, 0x73,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x08, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x22,
	0x11, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x42, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x42, 0x06, 0x0a,
	0x04, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0xf6, 0x01, 0xe8, 0xde, 0x21, 0x01, 0xd2, 0xff, 0xd0, 0x02,
	0x41, 0x0a, 0x0b, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x32,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0xa2, 0x80, 0xd1, 0x02, 0x43, 0x0a, 0x0c, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c,
	0x71, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x62, 0x2e,
	0x76, 0x31, 0x42, 0x0a, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x3c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f,
	0x76, 0x31, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x3b, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	edgelq_alerting_proto_v1_alert_proto_rawDescOnce sync.Once
	edgelq_alerting_proto_v1_alert_proto_rawDescData = edgelq_alerting_proto_v1_alert_proto_rawDesc
)

func edgelq_alerting_proto_v1_alert_proto_rawDescGZIP() []byte {
	edgelq_alerting_proto_v1_alert_proto_rawDescOnce.Do(func() {
		edgelq_alerting_proto_v1_alert_proto_rawDescData = protoimpl.X.CompressGZIP(edgelq_alerting_proto_v1_alert_proto_rawDescData)
	})
	return edgelq_alerting_proto_v1_alert_proto_rawDescData
}

var edgelq_alerting_proto_v1_alert_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var edgelq_alerting_proto_v1_alert_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var edgelq_alerting_proto_v1_alert_proto_goTypes = []interface{}{
	(Alert_TsInfo_Type)(0),                 // 0: ntt.alerting.v1.Alert_TsInfo_Type
	(Alert_State_AiHandlingState)(0),       // 1: ntt.alerting.v1.Alert_State_AiHandlingState
	(Alert_State_OperatorHandlingState)(0), // 2: ntt.alerting.v1.Alert_State_OperatorHandlingState
	(Alert_State_EscalationLevel)(0),       // 3: ntt.alerting.v1.Alert_State_EscalationLevel
	(*Alert)(nil),                          // 4: ntt.alerting.v1.Alert
	(*Alert_TsInfo)(nil),                   // 5: ntt.alerting.v1.Alert.TsInfo
	(*Alert_LogInfo)(nil),                  // 6: ntt.alerting.v1.Alert.LogInfo
	(*Alert_State)(nil),                    // 7: ntt.alerting.v1.Alert.State
	(*Alert_Internal)(nil),                 // 8: ntt.alerting.v1.Alert.Internal
	nil,                                    // 9: ntt.alerting.v1.Alert.TsInfo.CommonMetricLabelsEntry
	nil,                                    // 10: ntt.alerting.v1.Alert.TsInfo.CommonResourceLabelsEntry
	(*Alert_TsInfo_TimeSeries)(nil),        // 11: ntt.alerting.v1.Alert.TsInfo.TimeSeries
	nil,                                    // 12: ntt.alerting.v1.Alert.LogInfo.CommonLogLabelsEntry
	(*Alert_State_Notification)(nil),       // 13: ntt.alerting.v1.Alert.State.Notification
	(*meta.Meta)(nil),                      // 14: goten.types.Meta
	(*meta.OwnerReference)(nil),            // 15: goten.types.OwnerReference
	(*durationpb.Duration)(nil),            // 16: google.protobuf.Duration
	(*ts_condition.AlertingThreshold)(nil), // 17: ntt.alerting.v1.AlertingThreshold
	(*timestamppb.Timestamp)(nil),          // 18: google.protobuf.Timestamp
	(*policy.Policy_Spec_AIAgentHandling_Remediation)(nil), // 19: ntt.alerting.v1.Policy.Spec.AIAgentHandling.Remediation
	(policy.Policy_Spec_Notification_Kind)(0),              // 20: ntt.alerting.v1.Policy_Spec_Notification_Kind
	(policy.Policy_Spec_ProcessingLocation)(0),             // 21: ntt.alerting.v1.Policy_Spec_ProcessingLocation
}
var edgelq_alerting_proto_v1_alert_proto_depIdxs = []int32{
	14, // 0: ntt.alerting.v1.Alert.metadata:type_name -> goten.types.Meta
	15, // 1: ntt.alerting.v1.Alert.alerting_resource:type_name -> goten.types.OwnerReference
	5,  // 2: ntt.alerting.v1.Alert.ts_info:type_name -> ntt.alerting.v1.Alert.TsInfo
	6,  // 3: ntt.alerting.v1.Alert.log_info:type_name -> ntt.alerting.v1.Alert.LogInfo
	7,  // 4: ntt.alerting.v1.Alert.state:type_name -> ntt.alerting.v1.Alert.State
	8,  // 5: ntt.alerting.v1.Alert.internal:type_name -> ntt.alerting.v1.Alert.Internal
	0,  // 6: ntt.alerting.v1.Alert.TsInfo.type:type_name -> ntt.alerting.v1.Alert_TsInfo_Type
	16, // 7: ntt.alerting.v1.Alert.TsInfo.anomaly_window_size:type_name -> google.protobuf.Duration
	9,  // 8: ntt.alerting.v1.Alert.TsInfo.common_metric_labels:type_name -> ntt.alerting.v1.Alert.TsInfo.CommonMetricLabelsEntry
	10, // 9: ntt.alerting.v1.Alert.TsInfo.common_resource_labels:type_name -> ntt.alerting.v1.Alert.TsInfo.CommonResourceLabelsEntry
	11, // 10: ntt.alerting.v1.Alert.TsInfo.time_series:type_name -> ntt.alerting.v1.Alert.TsInfo.TimeSeries
	12, // 11: ntt.alerting.v1.Alert.LogInfo.common_log_labels:type_name -> ntt.alerting.v1.Alert.LogInfo.CommonLogLabelsEntry
	18, // 12: ntt.alerting.v1.Alert.State.start_time:type_name -> google.protobuf.Timestamp
	18, // 13: ntt.alerting.v1.Alert.State.end_time:type_name -> google.protobuf.Timestamp
	13, // 14: ntt.alerting.v1.Alert.State.notification_statuses:type_name -> ntt.alerting.v1.Alert.State.Notification
	3,  // 15: ntt.alerting.v1.Alert.State.escalation_level:type_name -> ntt.alerting.v1.Alert_State_EscalationLevel
	1,  // 16: ntt.alerting.v1.Alert.State.ai_agent_handling_state:type_name -> ntt.alerting.v1.Alert_State_AiHandlingState
	18, // 17: ntt.alerting.v1.Alert.State.ai_agent_last_state_change_time:type_name -> google.protobuf.Timestamp
	19, // 18: ntt.alerting.v1.Alert.State.ai_remediation:type_name -> ntt.alerting.v1.Policy.Spec.AIAgentHandling.Remediation
	2,  // 19: ntt.alerting.v1.Alert.State.operator_handling_state:type_name -> ntt.alerting.v1.Alert_State_OperatorHandlingState
	18, // 20: ntt.alerting.v1.Alert.State.operator_last_state_change_time:type_name -> google.protobuf.Timestamp
	21, // 21: ntt.alerting.v1.Alert.Internal.alerting_location:type_name -> ntt.alerting.v1.Policy_Spec_ProcessingLocation
	17, // 22: ntt.alerting.v1.Alert.TsInfo.TimeSeries.upper_threshold:type_name -> ntt.alerting.v1.AlertingThreshold
	17, // 23: ntt.alerting.v1.Alert.TsInfo.TimeSeries.lower_threshold:type_name -> ntt.alerting.v1.AlertingThreshold
	16, // 24: ntt.alerting.v1.Alert.TsInfo.TimeSeries.after_duration:type_name -> google.protobuf.Duration
	20, // 25: ntt.alerting.v1.Alert.State.Notification.kind:type_name -> ntt.alerting.v1.Policy_Spec_Notification_Kind
	26, // [26:26] is the sub-list for method output_type
	26, // [26:26] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { edgelq_alerting_proto_v1_alert_proto_init() }
func edgelq_alerting_proto_v1_alert_proto_init() {
	if edgelq_alerting_proto_v1_alert_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		edgelq_alerting_proto_v1_alert_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Alert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_alert_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Alert_TsInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_alert_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Alert_LogInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_alert_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Alert_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_alert_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Alert_Internal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_alert_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Alert_TsInfo_TimeSeries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_alert_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Alert_State_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	edgelq_alerting_proto_v1_alert_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Alert_TsInfo_)(nil),
		(*Alert_LogInfo_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: edgelq_alerting_proto_v1_alert_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           edgelq_alerting_proto_v1_alert_proto_goTypes,
		DependencyIndexes: edgelq_alerting_proto_v1_alert_proto_depIdxs,
		EnumInfos:         edgelq_alerting_proto_v1_alert_proto_enumTypes,
		MessageInfos:      edgelq_alerting_proto_v1_alert_proto_msgTypes,
	}.Build()
	edgelq_alerting_proto_v1_alert_proto = out.File
	edgelq_alerting_proto_v1_alert_proto_rawDesc = nil
	edgelq_alerting_proto_v1_alert_proto_goTypes = nil
	edgelq_alerting_proto_v1_alert_proto_depIdxs = nil
}
