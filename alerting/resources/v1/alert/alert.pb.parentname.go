// Code generated by protoc-gen-goten-resource
// Resource: Alert
// DO NOT EDIT!!!

package alert

import (
	"fmt"
	"net/url"
	"reflect"
	"regexp"
	"strings"

	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/proto"

	"github.com/cloudwan/goten-sdk/runtime/goten"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	rcommon "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/common"
	log_condition "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/log_condition"
	notification_channel "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/notification_channel"
	ts_condition "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/ts_condition"
	meta "github.com/cloudwan/goten-sdk/types/meta"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// ensure the imports are used
var (
	_ = codes.NotFound
	_ = new(fmt.Stringer)
	_ = new(proto.Message)
	_ = status.Status{}
	_ = url.URL{}
	_ = strings.Builder{}

	_ = new(goten.GotenMessage)
	_ = new(gotenresource.ListQuery)
)

// make sure we're using proto imports
var (
	_ = &log_condition.LogCondition{}
	_ = &notification_channel.NotificationChannel{}
	_ = &rcommon.LogCndSpec{}
	_ = &ts_condition.TsCondition{}
	_ = &durationpb.Duration{}
	_ = &timestamppb.Timestamp{}
	_ = &meta.Meta{}
)

var parentRegexPath_Project_Policy_TsCondition_Region = regexp.MustCompile("^projects/(?P<project_id>-|[\\w][\\w.-]{0,127})/policies/(?P<policy_id>-|[\\w][\\w.-]{0,127})/tsConditions/(?P<ts_condition_id>-|[\\w][\\w.-]{0,127})/regions/(?P<region_id>-|[a-z][a-z0-9\\-]{0,28}[a-z0-9])$")
var parentRegexPath_Project_Policy_LogCondition_Region = regexp.MustCompile("^projects/(?P<project_id>-|[\\w][\\w.-]{0,127})/policies/(?P<policy_id>-|[\\w][\\w.-]{0,127})/logConditions/(?P<log_condition_id>-|[\\w][\\w.-]{0,127})/regions/(?P<region_id>-|[a-z][a-z0-9\\-]{0,28}[a-z0-9])$")

type ParentName struct {
	NamePattern
	ProjectId      string `firestore:"projectId"`
	PolicyId       string `firestore:"policyId"`
	TsConditionId  string `firestore:"tsConditionId"`
	RegionId       string `firestore:"regionId"`
	LogConditionId string `firestore:"logConditionId"`
}

func ParseParentName(name string) (*ParentName, error) {
	var matches []string
	if matches = parentRegexPath_Project_Policy_TsCondition_Region.FindStringSubmatch(name); matches != nil {
		return NewNameBuilder().
			SetProjectId(matches[1]).
			SetPolicyId(matches[2]).
			SetTsConditionId(matches[3]).
			SetRegionId(matches[4]).
			Parent(), nil
	}
	if matches = parentRegexPath_Project_Policy_LogCondition_Region.FindStringSubmatch(name); matches != nil {
		return NewNameBuilder().
			SetProjectId(matches[1]).
			SetPolicyId(matches[2]).
			SetLogConditionId(matches[3]).
			SetRegionId(matches[4]).
			Parent(), nil
	}

	return nil, status.Errorf(codes.InvalidArgument, "unable to parse '%s' as Alert parent name", name)
}

func MustParseParentName(name string) *ParentName {
	result, err := ParseParentName(name)
	if err != nil {
		panic(err)
	}
	return result
}

func (name *ParentName) SetFromSegments(segments gotenresource.NameSegments) error {
	if len(segments) == 4 && segments[0].CollectionLowerJson == "projects" && segments[1].CollectionLowerJson == "policies" && segments[2].CollectionLowerJson == "tsConditions" && segments[3].CollectionLowerJson == "regions" {
		name.Pattern = NamePattern_Project_Policy_TsCondition_Region
		name.ProjectId = segments[0].Id
		name.PolicyId = segments[1].Id
		name.TsConditionId = segments[2].Id
		name.RegionId = segments[3].Id
		return nil
	} else if len(segments) == 4 && segments[0].CollectionLowerJson == "projects" && segments[1].CollectionLowerJson == "policies" && segments[2].CollectionLowerJson == "logConditions" && segments[3].CollectionLowerJson == "regions" {
		name.Pattern = NamePattern_Project_Policy_LogCondition_Region
		name.ProjectId = segments[0].Id
		name.PolicyId = segments[1].Id
		name.LogConditionId = segments[2].Id
		name.RegionId = segments[3].Id
		return nil
	}
	return status.Errorf(codes.InvalidArgument, "unable to use segments %s to form Alert parent name", segments)
}

func (name *ParentName) GetTsConditionName() *ts_condition.Name {
	if name == nil {
		return nil
	}

	switch name.Pattern {
	case NamePattern_Project_Policy_TsCondition_Region:
		return ts_condition.NewNameBuilder().
			SetId(name.TsConditionId).
			SetProjectId(name.ProjectId).
			SetPolicyId(name.PolicyId).
			Name()
	default:
		return nil
	}
}

func (name *ParentName) GetLogConditionName() *log_condition.Name {
	if name == nil {
		return nil
	}

	switch name.Pattern {
	case NamePattern_Project_Policy_LogCondition_Region:
		return log_condition.NewNameBuilder().
			SetId(name.LogConditionId).
			SetProjectId(name.ProjectId).
			SetPolicyId(name.PolicyId).
			Name()
	default:
		return nil
	}
}

func (name *ParentName) IsSpecified() bool {
	if name == nil || name.Pattern == "" {
		return false
	}
	switch name.Pattern {
	case NamePattern_Project_Policy_TsCondition_Region:
		return name.ProjectId != "" && name.PolicyId != "" && name.TsConditionId != "" && name.RegionId != ""
	case NamePattern_Project_Policy_LogCondition_Region:
		return name.ProjectId != "" && name.PolicyId != "" && name.LogConditionId != "" && name.RegionId != ""
	}
	return false
}

func (name *ParentName) IsFullyQualified() bool {
	if name == nil || name.Pattern == "" {
		return false
	}

	switch name.Pattern {
	case NamePattern_Project_Policy_TsCondition_Region:
		return name.ProjectId != "" && name.ProjectId != gotenresource.WildcardId && name.PolicyId != "" && name.PolicyId != gotenresource.WildcardId && name.TsConditionId != "" && name.TsConditionId != gotenresource.WildcardId && name.RegionId != "" && name.RegionId != gotenresource.WildcardId
	case NamePattern_Project_Policy_LogCondition_Region:
		return name.ProjectId != "" && name.ProjectId != gotenresource.WildcardId && name.PolicyId != "" && name.PolicyId != gotenresource.WildcardId && name.LogConditionId != "" && name.LogConditionId != gotenresource.WildcardId && name.RegionId != "" && name.RegionId != gotenresource.WildcardId
	}

	return false
}

func (name *ParentName) FullyQualifiedName() (string, error) {
	if !name.IsFullyQualified() {
		return "", status.Errorf(codes.InvalidArgument, "Parent name for Alert is not fully qualified")
	}
	return fmt.Sprintf("//alerting.edgelq.com/%s", name.String()), nil
}

func (name *ParentName) GetResourceDescriptor() gotenresource.Descriptor {
	return descriptor
}

func (name *ParentName) GetPattern() gotenresource.NamePattern {
	if name == nil {
		return ""
	}
	return name.Pattern
}

func (name *ParentName) GetIdParts() map[string]string {
	if name != nil {
		return map[string]string{
			"projectId":      name.ProjectId,
			"policyId":       name.PolicyId,
			"tsConditionId":  name.TsConditionId,
			"regionId":       name.RegionId,
			"logConditionId": name.LogConditionId,
		}
	}
	return map[string]string{
		"projectId":      "",
		"policyId":       "",
		"tsConditionId":  "",
		"regionId":       "",
		"logConditionId": "",
	}
}

func (name *ParentName) GetSegments() gotenresource.NameSegments {
	if name == nil {
		return nil
	}

	switch name.Pattern {
	case NamePattern_Project_Policy_TsCondition_Region:
		return gotenresource.NameSegments{
			gotenresource.NameSegment{
				CollectionLowerJson: "projects",
				Id:                  name.ProjectId,
			},
			gotenresource.NameSegment{
				CollectionLowerJson: "policies",
				Id:                  name.PolicyId,
			},
			gotenresource.NameSegment{
				CollectionLowerJson: "tsConditions",
				Id:                  name.TsConditionId,
			},
			gotenresource.NameSegment{
				CollectionLowerJson: "regions",
				Id:                  name.RegionId,
			},
		}
	case NamePattern_Project_Policy_LogCondition_Region:
		return gotenresource.NameSegments{
			gotenresource.NameSegment{
				CollectionLowerJson: "projects",
				Id:                  name.ProjectId,
			},
			gotenresource.NameSegment{
				CollectionLowerJson: "policies",
				Id:                  name.PolicyId,
			},
			gotenresource.NameSegment{
				CollectionLowerJson: "logConditions",
				Id:                  name.LogConditionId,
			},
			gotenresource.NameSegment{
				CollectionLowerJson: "regions",
				Id:                  name.RegionId,
			},
		}
	}
	return nil
}

func (name *ParentName) GetIParentName() gotenresource.Name {
	return nil
}

func (name *ParentName) GetIUnderlyingParentName() gotenresource.Name {
	return nil
}

func (name *ParentName) String() string {
	if name == nil {
		return "<nil>"
	}

	if valueStr, err := name.ProtoString(); err != nil {
		panic(err)
	} else {
		return valueStr
	}
}

func (name *ParentName) DescendsFrom(ancestor string) bool {
	if name == nil {
		return false
	}

	switch name.Pattern {
	case NamePattern_Project_Policy_TsCondition_Region:
		return ancestor == "projects" || ancestor == "policies" || ancestor == "tsConditions" || ancestor == "regions"
	case NamePattern_Project_Policy_LogCondition_Region:
		return ancestor == "projects" || ancestor == "policies" || ancestor == "logConditions" || ancestor == "regions"
	}

	return false
}

func (name *ParentName) AsReference() *ParentReference {
	return &ParentReference{ParentName: *name}
}

func (name *ParentName) AsRawReference() gotenresource.Reference {
	return name.AsReference()
}

// implement methods required by protobuf-go library for string-struct conversion

func (name *ParentName) ProtoString() (string, error) {
	if name == nil {
		return "", nil
	}
	switch name.Pattern {
	case NamePattern_Project_Policy_TsCondition_Region:
		return "projects/" + name.ProjectId + "/policies/" + name.PolicyId + "/tsConditions/" + name.TsConditionId + "/regions/" + name.RegionId, nil
	case NamePattern_Project_Policy_LogCondition_Region:
		return "projects/" + name.ProjectId + "/policies/" + name.PolicyId + "/logConditions/" + name.LogConditionId + "/regions/" + name.RegionId, nil
	}
	return "", nil
}

func (name *ParentName) ParseProtoString(data string) error {
	parsed, err := ParseParentName(data)
	if err != nil {
		return err
	}
	*name = *parsed
	return nil
}

// GotenEqual returns true if other is of same type and paths are equal (implements goten.Equaler interface)
func (name *ParentName) GotenEqual(other interface{}) bool {
	if other == nil {
		return name == nil
	}
	other1, ok := other.(*ParentName)
	if !ok {
		other2, ok := other.(ParentName)
		if ok {
			other1 = &other2
		} else {
			return false
		}
	}
	if other1 == nil {
		return name == nil
	} else if name == nil {
		return false
	}
	if name.ProjectId != other1.ProjectId {
		return false
	}
	if name.PolicyId != other1.PolicyId {
		return false
	}
	if name.TsConditionId != other1.TsConditionId {
		return false
	}
	if name.RegionId != other1.RegionId {
		return false
	}
	if name.LogConditionId != other1.LogConditionId {
		return false
	}
	if name.Pattern != other1.Pattern {
		return false
	}

	return true
}

// Matches is same as GotenEqual, but also will accept "other" if name is wildcard.
func (name *ParentName) Matches(other interface{}) bool {
	if other == nil {
		return name == nil
	}
	other1, ok := other.(*ParentName)
	if !ok {
		other2, ok := other.(ParentName)
		if ok {
			other1 = &other2
		} else {
			return false
		}
	}
	if other1 == nil {
		return name == nil
	} else if name == nil {
		return false
	}

	if name.Pattern != other1.Pattern {
		return false
	}
	switch name.Pattern {
	case NamePattern_Project_Policy_TsCondition_Region:
		if name.ProjectId != other1.ProjectId &&
			name.ProjectId != gotenresource.WildcardId {
			return false
		}
		if name.PolicyId != other1.PolicyId &&
			name.PolicyId != gotenresource.WildcardId {
			return false
		}
		if name.TsConditionId != other1.TsConditionId &&
			name.TsConditionId != gotenresource.WildcardId {
			return false
		}
		if name.RegionId != other1.RegionId &&
			name.RegionId != gotenresource.WildcardId {
			return false
		}
	case NamePattern_Project_Policy_LogCondition_Region:
		if name.ProjectId != other1.ProjectId &&
			name.ProjectId != gotenresource.WildcardId {
			return false
		}
		if name.PolicyId != other1.PolicyId &&
			name.PolicyId != gotenresource.WildcardId {
			return false
		}
		if name.LogConditionId != other1.LogConditionId &&
			name.LogConditionId != gotenresource.WildcardId {
			return false
		}
		if name.RegionId != other1.RegionId &&
			name.RegionId != gotenresource.WildcardId {
			return false
		}
	}

	return true
}

// implement CustomTypeCliValue method
func (name *ParentName) SetFromCliFlag(raw string) error {
	parsedName, err := ParseParentName(raw)
	if err != nil {
		return err
	}
	*name = *parsedName
	return nil
}

type ParentReference struct {
	ParentName
	tsCondition  *ts_condition.TsCondition
	logCondition *log_condition.LogCondition
}

func MakeParentReference(name *ParentName) (*ParentReference, error) {
	return &ParentReference{
		ParentName: *name,
	}, nil
}

func ParseParentReference(name string) (*ParentReference, error) {
	parsedName, err := ParseParentName(name)
	if err != nil {
		return nil, err
	}
	return MakeParentReference(parsedName)
}

func MustParseParentReference(name string) *ParentReference {
	result, err := ParseParentReference(name)
	if err != nil {
		panic(err)
	}
	return result
}
func (ref *ParentReference) GetTsConditionReference() *ts_condition.Reference {
	if ref == nil {
		return nil
	}

	switch ref.Pattern {
	case NamePattern_Project_Policy_TsCondition_Region:
		return ts_condition.NewNameBuilder().
			SetId(ref.TsConditionId).
			SetProjectId(ref.ProjectId).
			SetPolicyId(ref.PolicyId).
			Reference()
	default:
		return nil
	}
}
func (ref *ParentReference) GetLogConditionReference() *log_condition.Reference {
	if ref == nil {
		return nil
	}

	switch ref.Pattern {
	case NamePattern_Project_Policy_LogCondition_Region:
		return log_condition.NewNameBuilder().
			SetId(ref.LogConditionId).
			SetProjectId(ref.ProjectId).
			SetPolicyId(ref.PolicyId).
			Reference()
	default:
		return nil
	}
}

func (ref *ParentReference) GetUnderlyingReference() gotenresource.Reference {
	if ref == nil {
		return nil
	}
	tsConditionRef := ref.GetTsConditionReference()
	if tsConditionRef != nil {
		return tsConditionRef
	}
	logConditionRef := ref.GetLogConditionReference()
	if logConditionRef != nil {
		return logConditionRef
	}

	return nil
}

func (ref *ParentReference) ResolveRaw(res gotenresource.Resource) error {
	switch typedRes := res.(type) {
	case *ts_condition.TsCondition:
		if name := ref.GetTsConditionName(); name == nil {
			return status.Errorf(codes.InvalidArgument, "cannot set TsCondition as parent of Alert, because pattern does not match")
		}
		ref.tsCondition = typedRes
		return nil
	case *log_condition.LogCondition:
		if name := ref.GetLogConditionName(); name == nil {
			return status.Errorf(codes.InvalidArgument, "cannot set LogCondition as parent of Alert, because pattern does not match")
		}
		ref.logCondition = typedRes
		return nil
	default:
		return status.Errorf(codes.Internal, "Invalid parent type for Alert, got %s", reflect.TypeOf(res).Elem().Name())
	}
}

func (ref *ParentReference) Resolved() bool {
	if name := ref.GetTsConditionName(); name != nil {
		return ref.tsCondition != nil
	}
	if name := ref.GetLogConditionName(); name != nil {
		return ref.logCondition != nil
	}
	return true
}

func (ref *ParentReference) ClearCached() {
	ref.tsCondition = nil
	ref.logCondition = nil
}

func (ref *ParentReference) GetTsCondition() *ts_condition.TsCondition {
	if ref == nil {
		return nil
	}
	return ref.tsCondition
}
func (ref *ParentReference) GetLogCondition() *log_condition.LogCondition {
	if ref == nil {
		return nil
	}
	return ref.logCondition
}

func (ref *ParentReference) GetRawResource() gotenresource.Resource {
	if name := ref.ParentName.GetTsConditionName(); name != nil {
		return ref.tsCondition
	}
	if name := ref.ParentName.GetLogConditionName(); name != nil {
		return ref.logCondition
	}
	return nil
}

func (ref *ParentReference) IsFullyQualified() bool {
	if ref == nil {
		return false
	}
	return ref.ParentName.IsFullyQualified()
}

func (ref *ParentReference) IsSpecified() bool {
	if ref == nil {
		return false
	}
	return ref.ParentName.IsSpecified()
}

func (ref *ParentReference) GetResourceDescriptor() gotenresource.Descriptor {
	return descriptor
}

func (ref *ParentReference) GetPattern() gotenresource.NamePattern {
	if ref == nil {
		return ""
	}
	return ref.Pattern
}

func (ref *ParentReference) GetIdParts() map[string]string {
	if ref != nil {
		return ref.ParentName.GetIdParts()
	}
	return map[string]string{
		"projectId":      "",
		"policyId":       "",
		"tsConditionId":  "",
		"regionId":       "",
		"logConditionId": "",
	}
}

func (ref *ParentReference) GetSegments() gotenresource.NameSegments {
	if ref != nil {
		return ref.ParentName.GetSegments()
	}
	return nil
}

func (ref *ParentReference) GetIParentName() gotenresource.Name {
	return nil
}

func (ref *ParentReference) GetIUnderlyingParentName() gotenresource.Name {
	return nil
}

func (ref *ParentReference) String() string {
	if ref == nil {
		return "<nil>"
	}
	return ref.ParentName.String()
}

// implement methods required by protobuf-go library for string-struct conversion

func (ref *ParentReference) ProtoString() (string, error) {
	if ref == nil {
		return "", nil
	}
	return ref.ParentName.ProtoString()
}

func (ref *ParentReference) ParseProtoString(data string) error {
	parsed, err := ParseParentReference(data)
	if err != nil {
		return err
	}
	*ref = *parsed
	return nil
}

// GotenEqual returns true if other is of same type and paths are equal (implements goten.Equaler interface)
func (ref *ParentReference) GotenEqual(other interface{}) bool {
	if other == nil {
		return ref == nil
	}
	other1, ok := other.(*ParentReference)
	if !ok {
		other2, ok := other.(ParentReference)
		if ok {
			other1 = &other2
		} else {
			return false
		}
	}
	if other1 == nil {
		return ref == nil
	} else if ref == nil {
		return false
	}
	if ref.tsCondition != other1.tsCondition {
		return false
	}
	if ref.logCondition != other1.logCondition {
		return false
	}

	return ref.ParentName.GotenEqual(other1.ParentName)
}

// Matches is same as GotenEqual, but also will accept "other" if name is wildcard.
func (name *ParentReference) Matches(other interface{}) bool {
	if other == nil {
		return name == nil
	}
	other1, ok := other.(*ParentReference)
	if !ok {
		other2, ok := other.(ParentReference)
		if ok {
			other1 = &other2
		} else {
			return false
		}
	}
	if other1 == nil {
		return name == nil
	} else if name == nil {
		return false
	}
	return name.ParentName.Matches(&other1.ParentName)
}

// implement CustomTypeCliValue method
func (ref *ParentReference) SetFromCliFlag(raw string) error {
	parsedRef, err := ParseParentReference(raw)
	if err != nil {
		return err
	}
	*ref = *parsedRef
	return nil
}
