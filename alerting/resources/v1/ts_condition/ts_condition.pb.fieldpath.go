// Code generated by protoc-gen-goten-object
// File: edgelq/alerting/proto/v1/ts_condition.proto
// DO NOT EDIT!!!

package ts_condition

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
	"github.com/cloudwan/goten-sdk/runtime/strcase"
)

// proto imports
import (
	document "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/document"
	policy "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/policy"
	monitoring_common "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/common"
	monitoring_time_serie "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/time_serie"
	meta "github.com/cloudwan/goten-sdk/types/meta"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &document.Document{}
	_ = &policy.Policy{}
	_ = &monitoring_common.LabelDescriptor{}
	_ = &monitoring_time_serie.Point{}
	_ = &durationpb.Duration{}
	_ = &meta.Meta{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type TsCondition_FieldPath interface {
	gotenobject.FieldPath
	Selector() TsCondition_FieldPathSelector
	Get(source *TsCondition) []interface{}
	GetSingle(source *TsCondition) (interface{}, bool)
	ClearValue(item *TsCondition)

	// Those methods build corresponding TsCondition_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) TsCondition_FieldPathValue
	WithIArrayOfValues(values interface{}) TsCondition_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) TsCondition_FieldPathArrayItemValue
}

type TsCondition_FieldPathSelector int32

const (
	TsCondition_FieldPathSelectorName           TsCondition_FieldPathSelector = 0
	TsCondition_FieldPathSelectorMetadata       TsCondition_FieldPathSelector = 1
	TsCondition_FieldPathSelectorDisplayName    TsCondition_FieldPathSelector = 2
	TsCondition_FieldPathSelectorDescription    TsCondition_FieldPathSelector = 3
	TsCondition_FieldPathSelectorSupportingDocs TsCondition_FieldPathSelector = 4
	TsCondition_FieldPathSelectorSpec           TsCondition_FieldPathSelector = 5
	TsCondition_FieldPathSelectorInternal       TsCondition_FieldPathSelector = 6
	TsCondition_FieldPathSelectorFilterSelector TsCondition_FieldPathSelector = 7
)

func (s TsCondition_FieldPathSelector) String() string {
	switch s {
	case TsCondition_FieldPathSelectorName:
		return "name"
	case TsCondition_FieldPathSelectorMetadata:
		return "metadata"
	case TsCondition_FieldPathSelectorDisplayName:
		return "display_name"
	case TsCondition_FieldPathSelectorDescription:
		return "description"
	case TsCondition_FieldPathSelectorSupportingDocs:
		return "supporting_docs"
	case TsCondition_FieldPathSelectorSpec:
		return "spec"
	case TsCondition_FieldPathSelectorInternal:
		return "internal"
	case TsCondition_FieldPathSelectorFilterSelector:
		return "filter_selector"
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition: %d", s))
	}
}

func BuildTsCondition_FieldPath(fp gotenobject.RawFieldPath) (TsCondition_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object TsCondition")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &TsCondition_FieldTerminalPath{selector: TsCondition_FieldPathSelectorName}, nil
		case "metadata":
			return &TsCondition_FieldTerminalPath{selector: TsCondition_FieldPathSelectorMetadata}, nil
		case "display_name", "displayName", "display-name":
			return &TsCondition_FieldTerminalPath{selector: TsCondition_FieldPathSelectorDisplayName}, nil
		case "description":
			return &TsCondition_FieldTerminalPath{selector: TsCondition_FieldPathSelectorDescription}, nil
		case "supporting_docs", "supportingDocs", "supporting-docs":
			return &TsCondition_FieldTerminalPath{selector: TsCondition_FieldPathSelectorSupportingDocs}, nil
		case "spec":
			return &TsCondition_FieldTerminalPath{selector: TsCondition_FieldPathSelectorSpec}, nil
		case "internal":
			return &TsCondition_FieldTerminalPath{selector: TsCondition_FieldPathSelectorInternal}, nil
		case "filter_selector", "filterSelector", "filter-selector":
			return &TsCondition_FieldTerminalPath{selector: TsCondition_FieldPathSelectorFilterSelector}, nil
		}
	} else {
		switch fp[0] {
		case "metadata":
			if subpath, err := meta.BuildMeta_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &TsCondition_FieldSubPath{selector: TsCondition_FieldPathSelectorMetadata, subPath: subpath}, nil
			}
		case "spec":
			if subpath, err := BuildTsConditionSpec_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &TsCondition_FieldSubPath{selector: TsCondition_FieldPathSelectorSpec, subPath: subpath}, nil
			}
		case "internal":
			if subpath, err := BuildTsConditionInternal_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &TsCondition_FieldSubPath{selector: TsCondition_FieldPathSelectorInternal, subPath: subpath}, nil
			}
		case "filter_selector", "filterSelector", "filter-selector":
			if subpath, err := BuildTsConditionSelector_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &TsCondition_FieldSubPath{selector: TsCondition_FieldPathSelectorFilterSelector, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object TsCondition", fp)
}

func ParseTsCondition_FieldPath(rawField string) (TsCondition_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildTsCondition_FieldPath(fp)
}

func MustParseTsCondition_FieldPath(rawField string) TsCondition_FieldPath {
	fp, err := ParseTsCondition_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type TsCondition_FieldTerminalPath struct {
	selector TsCondition_FieldPathSelector
}

var _ TsCondition_FieldPath = (*TsCondition_FieldTerminalPath)(nil)

func (fp *TsCondition_FieldTerminalPath) Selector() TsCondition_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *TsCondition_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *TsCondition_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source TsCondition
func (fp *TsCondition_FieldTerminalPath) Get(source *TsCondition) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case TsCondition_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case TsCondition_FieldPathSelectorMetadata:
			if source.Metadata != nil {
				values = append(values, source.Metadata)
			}
		case TsCondition_FieldPathSelectorDisplayName:
			values = append(values, source.DisplayName)
		case TsCondition_FieldPathSelectorDescription:
			values = append(values, source.Description)
		case TsCondition_FieldPathSelectorSupportingDocs:
			for _, value := range source.GetSupportingDocs() {
				values = append(values, value)
			}
		case TsCondition_FieldPathSelectorSpec:
			if source.Spec != nil {
				values = append(values, source.Spec)
			}
		case TsCondition_FieldPathSelectorInternal:
			if source.Internal != nil {
				values = append(values, source.Internal)
			}
		case TsCondition_FieldPathSelectorFilterSelector:
			if source.FilterSelector != nil {
				values = append(values, source.FilterSelector)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for TsCondition: %d", fp.selector))
		}
	}
	return
}

func (fp *TsCondition_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*TsCondition))
}

// GetSingle returns value pointed by specific field of from source TsCondition
func (fp *TsCondition_FieldTerminalPath) GetSingle(source *TsCondition) (interface{}, bool) {
	switch fp.selector {
	case TsCondition_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case TsCondition_FieldPathSelectorMetadata:
		res := source.GetMetadata()
		return res, res != nil
	case TsCondition_FieldPathSelectorDisplayName:
		return source.GetDisplayName(), source != nil
	case TsCondition_FieldPathSelectorDescription:
		return source.GetDescription(), source != nil
	case TsCondition_FieldPathSelectorSupportingDocs:
		res := source.GetSupportingDocs()
		return res, res != nil
	case TsCondition_FieldPathSelectorSpec:
		res := source.GetSpec()
		return res, res != nil
	case TsCondition_FieldPathSelectorInternal:
		res := source.GetInternal()
		return res, res != nil
	case TsCondition_FieldPathSelectorFilterSelector:
		res := source.GetFilterSelector()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition: %d", fp.selector))
	}
}

func (fp *TsCondition_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*TsCondition))
}

// GetDefault returns a default value of the field type
func (fp *TsCondition_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case TsCondition_FieldPathSelectorName:
		return (*Name)(nil)
	case TsCondition_FieldPathSelectorMetadata:
		return (*meta.Meta)(nil)
	case TsCondition_FieldPathSelectorDisplayName:
		return ""
	case TsCondition_FieldPathSelectorDescription:
		return ""
	case TsCondition_FieldPathSelectorSupportingDocs:
		return ([]*document.Reference)(nil)
	case TsCondition_FieldPathSelectorSpec:
		return (*TsCondition_Spec)(nil)
	case TsCondition_FieldPathSelectorInternal:
		return (*TsCondition_Internal)(nil)
	case TsCondition_FieldPathSelectorFilterSelector:
		return (*TsCondition_Selector)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition: %d", fp.selector))
	}
}

func (fp *TsCondition_FieldTerminalPath) ClearValue(item *TsCondition) {
	if item != nil {
		switch fp.selector {
		case TsCondition_FieldPathSelectorName:
			item.Name = nil
		case TsCondition_FieldPathSelectorMetadata:
			item.Metadata = nil
		case TsCondition_FieldPathSelectorDisplayName:
			item.DisplayName = ""
		case TsCondition_FieldPathSelectorDescription:
			item.Description = ""
		case TsCondition_FieldPathSelectorSupportingDocs:
			item.SupportingDocs = nil
		case TsCondition_FieldPathSelectorSpec:
			item.Spec = nil
		case TsCondition_FieldPathSelectorInternal:
			item.Internal = nil
		case TsCondition_FieldPathSelectorFilterSelector:
			item.FilterSelector = nil
		default:
			panic(fmt.Sprintf("Invalid selector for TsCondition: %d", fp.selector))
		}
	}
}

func (fp *TsCondition_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*TsCondition))
}

// IsLeaf - whether field path is holds simple value
func (fp *TsCondition_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == TsCondition_FieldPathSelectorName ||
		fp.selector == TsCondition_FieldPathSelectorDisplayName ||
		fp.selector == TsCondition_FieldPathSelectorDescription ||
		fp.selector == TsCondition_FieldPathSelectorSupportingDocs
}

func (fp *TsCondition_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *TsCondition_FieldTerminalPath) WithIValue(value interface{}) TsCondition_FieldPathValue {
	switch fp.selector {
	case TsCondition_FieldPathSelectorName:
		return &TsCondition_FieldTerminalPathValue{TsCondition_FieldTerminalPath: *fp, value: value.(*Name)}
	case TsCondition_FieldPathSelectorMetadata:
		return &TsCondition_FieldTerminalPathValue{TsCondition_FieldTerminalPath: *fp, value: value.(*meta.Meta)}
	case TsCondition_FieldPathSelectorDisplayName:
		return &TsCondition_FieldTerminalPathValue{TsCondition_FieldTerminalPath: *fp, value: value.(string)}
	case TsCondition_FieldPathSelectorDescription:
		return &TsCondition_FieldTerminalPathValue{TsCondition_FieldTerminalPath: *fp, value: value.(string)}
	case TsCondition_FieldPathSelectorSupportingDocs:
		return &TsCondition_FieldTerminalPathValue{TsCondition_FieldTerminalPath: *fp, value: value.([]*document.Reference)}
	case TsCondition_FieldPathSelectorSpec:
		return &TsCondition_FieldTerminalPathValue{TsCondition_FieldTerminalPath: *fp, value: value.(*TsCondition_Spec)}
	case TsCondition_FieldPathSelectorInternal:
		return &TsCondition_FieldTerminalPathValue{TsCondition_FieldTerminalPath: *fp, value: value.(*TsCondition_Internal)}
	case TsCondition_FieldPathSelectorFilterSelector:
		return &TsCondition_FieldTerminalPathValue{TsCondition_FieldTerminalPath: *fp, value: value.(*TsCondition_Selector)}
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition: %d", fp.selector))
	}
}

func (fp *TsCondition_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *TsCondition_FieldTerminalPath) WithIArrayOfValues(values interface{}) TsCondition_FieldPathArrayOfValues {
	fpaov := &TsCondition_FieldTerminalPathArrayOfValues{TsCondition_FieldTerminalPath: *fp}
	switch fp.selector {
	case TsCondition_FieldPathSelectorName:
		return &TsCondition_FieldTerminalPathArrayOfValues{TsCondition_FieldTerminalPath: *fp, values: values.([]*Name)}
	case TsCondition_FieldPathSelectorMetadata:
		return &TsCondition_FieldTerminalPathArrayOfValues{TsCondition_FieldTerminalPath: *fp, values: values.([]*meta.Meta)}
	case TsCondition_FieldPathSelectorDisplayName:
		return &TsCondition_FieldTerminalPathArrayOfValues{TsCondition_FieldTerminalPath: *fp, values: values.([]string)}
	case TsCondition_FieldPathSelectorDescription:
		return &TsCondition_FieldTerminalPathArrayOfValues{TsCondition_FieldTerminalPath: *fp, values: values.([]string)}
	case TsCondition_FieldPathSelectorSupportingDocs:
		return &TsCondition_FieldTerminalPathArrayOfValues{TsCondition_FieldTerminalPath: *fp, values: values.([][]*document.Reference)}
	case TsCondition_FieldPathSelectorSpec:
		return &TsCondition_FieldTerminalPathArrayOfValues{TsCondition_FieldTerminalPath: *fp, values: values.([]*TsCondition_Spec)}
	case TsCondition_FieldPathSelectorInternal:
		return &TsCondition_FieldTerminalPathArrayOfValues{TsCondition_FieldTerminalPath: *fp, values: values.([]*TsCondition_Internal)}
	case TsCondition_FieldPathSelectorFilterSelector:
		return &TsCondition_FieldTerminalPathArrayOfValues{TsCondition_FieldTerminalPath: *fp, values: values.([]*TsCondition_Selector)}
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition: %d", fp.selector))
	}
	return fpaov
}

func (fp *TsCondition_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *TsCondition_FieldTerminalPath) WithIArrayItemValue(value interface{}) TsCondition_FieldPathArrayItemValue {
	switch fp.selector {
	case TsCondition_FieldPathSelectorSupportingDocs:
		return &TsCondition_FieldTerminalPathArrayItemValue{TsCondition_FieldTerminalPath: *fp, value: value.(*document.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition: %d", fp.selector))
	}
}

func (fp *TsCondition_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type TsCondition_FieldSubPath struct {
	selector TsCondition_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ TsCondition_FieldPath = (*TsCondition_FieldSubPath)(nil)

func (fps *TsCondition_FieldSubPath) Selector() TsCondition_FieldPathSelector {
	return fps.selector
}
func (fps *TsCondition_FieldSubPath) AsMetadataSubPath() (meta.Meta_FieldPath, bool) {
	res, ok := fps.subPath.(meta.Meta_FieldPath)
	return res, ok
}
func (fps *TsCondition_FieldSubPath) AsSpecSubPath() (TsConditionSpec_FieldPath, bool) {
	res, ok := fps.subPath.(TsConditionSpec_FieldPath)
	return res, ok
}
func (fps *TsCondition_FieldSubPath) AsInternalSubPath() (TsConditionInternal_FieldPath, bool) {
	res, ok := fps.subPath.(TsConditionInternal_FieldPath)
	return res, ok
}
func (fps *TsCondition_FieldSubPath) AsFilterSelectorSubPath() (TsConditionSelector_FieldPath, bool) {
	res, ok := fps.subPath.(TsConditionSelector_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *TsCondition_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *TsCondition_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source TsCondition
func (fps *TsCondition_FieldSubPath) Get(source *TsCondition) (values []interface{}) {
	switch fps.selector {
	case TsCondition_FieldPathSelectorMetadata:
		values = append(values, fps.subPath.GetRaw(source.GetMetadata())...)
	case TsCondition_FieldPathSelectorSpec:
		values = append(values, fps.subPath.GetRaw(source.GetSpec())...)
	case TsCondition_FieldPathSelectorInternal:
		values = append(values, fps.subPath.GetRaw(source.GetInternal())...)
	case TsCondition_FieldPathSelectorFilterSelector:
		values = append(values, fps.subPath.GetRaw(source.GetFilterSelector())...)
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition: %d", fps.selector))
	}
	return
}

func (fps *TsCondition_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*TsCondition))
}

// GetSingle returns value of selected field from source TsCondition
func (fps *TsCondition_FieldSubPath) GetSingle(source *TsCondition) (interface{}, bool) {
	switch fps.selector {
	case TsCondition_FieldPathSelectorMetadata:
		if source.GetMetadata() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetMetadata())
	case TsCondition_FieldPathSelectorSpec:
		if source.GetSpec() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetSpec())
	case TsCondition_FieldPathSelectorInternal:
		if source.GetInternal() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetInternal())
	case TsCondition_FieldPathSelectorFilterSelector:
		if source.GetFilterSelector() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetFilterSelector())
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition: %d", fps.selector))
	}
}

func (fps *TsCondition_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*TsCondition))
}

// GetDefault returns a default value of the field type
func (fps *TsCondition_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *TsCondition_FieldSubPath) ClearValue(item *TsCondition) {
	if item != nil {
		switch fps.selector {
		case TsCondition_FieldPathSelectorMetadata:
			fps.subPath.ClearValueRaw(item.Metadata)
		case TsCondition_FieldPathSelectorSpec:
			fps.subPath.ClearValueRaw(item.Spec)
		case TsCondition_FieldPathSelectorInternal:
			fps.subPath.ClearValueRaw(item.Internal)
		case TsCondition_FieldPathSelectorFilterSelector:
			fps.subPath.ClearValueRaw(item.FilterSelector)
		default:
			panic(fmt.Sprintf("Invalid selector for TsCondition: %d", fps.selector))
		}
	}
}

func (fps *TsCondition_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*TsCondition))
}

// IsLeaf - whether field path is holds simple value
func (fps *TsCondition_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *TsCondition_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&TsCondition_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *TsCondition_FieldSubPath) WithIValue(value interface{}) TsCondition_FieldPathValue {
	return &TsCondition_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *TsCondition_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *TsCondition_FieldSubPath) WithIArrayOfValues(values interface{}) TsCondition_FieldPathArrayOfValues {
	return &TsCondition_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *TsCondition_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *TsCondition_FieldSubPath) WithIArrayItemValue(value interface{}) TsCondition_FieldPathArrayItemValue {
	return &TsCondition_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *TsCondition_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// TsCondition_FieldPathValue allows storing values for TsCondition fields according to their type
type TsCondition_FieldPathValue interface {
	TsCondition_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **TsCondition)
	CompareWith(*TsCondition) (cmp int, comparable bool)
}

func ParseTsCondition_FieldPathValue(pathStr, valueStr string) (TsCondition_FieldPathValue, error) {
	fp, err := ParseTsCondition_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing TsCondition field path value from %s: %v", valueStr, err)
	}
	return fpv.(TsCondition_FieldPathValue), nil
}

func MustParseTsCondition_FieldPathValue(pathStr, valueStr string) TsCondition_FieldPathValue {
	fpv, err := ParseTsCondition_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type TsCondition_FieldTerminalPathValue struct {
	TsCondition_FieldTerminalPath
	value interface{}
}

var _ TsCondition_FieldPathValue = (*TsCondition_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'TsCondition' as interface{}
func (fpv *TsCondition_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *TsCondition_FieldTerminalPathValue) AsNameValue() (*Name, bool) {
	res, ok := fpv.value.(*Name)
	return res, ok
}
func (fpv *TsCondition_FieldTerminalPathValue) AsMetadataValue() (*meta.Meta, bool) {
	res, ok := fpv.value.(*meta.Meta)
	return res, ok
}
func (fpv *TsCondition_FieldTerminalPathValue) AsDisplayNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *TsCondition_FieldTerminalPathValue) AsDescriptionValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *TsCondition_FieldTerminalPathValue) AsSupportingDocsValue() ([]*document.Reference, bool) {
	res, ok := fpv.value.([]*document.Reference)
	return res, ok
}
func (fpv *TsCondition_FieldTerminalPathValue) AsSpecValue() (*TsCondition_Spec, bool) {
	res, ok := fpv.value.(*TsCondition_Spec)
	return res, ok
}
func (fpv *TsCondition_FieldTerminalPathValue) AsInternalValue() (*TsCondition_Internal, bool) {
	res, ok := fpv.value.(*TsCondition_Internal)
	return res, ok
}
func (fpv *TsCondition_FieldTerminalPathValue) AsFilterSelectorValue() (*TsCondition_Selector, bool) {
	res, ok := fpv.value.(*TsCondition_Selector)
	return res, ok
}

// SetTo stores value for selected field for object TsCondition
func (fpv *TsCondition_FieldTerminalPathValue) SetTo(target **TsCondition) {
	if *target == nil {
		*target = new(TsCondition)
	}
	switch fpv.selector {
	case TsCondition_FieldPathSelectorName:
		(*target).Name = fpv.value.(*Name)
	case TsCondition_FieldPathSelectorMetadata:
		(*target).Metadata = fpv.value.(*meta.Meta)
	case TsCondition_FieldPathSelectorDisplayName:
		(*target).DisplayName = fpv.value.(string)
	case TsCondition_FieldPathSelectorDescription:
		(*target).Description = fpv.value.(string)
	case TsCondition_FieldPathSelectorSupportingDocs:
		(*target).SupportingDocs = fpv.value.([]*document.Reference)
	case TsCondition_FieldPathSelectorSpec:
		(*target).Spec = fpv.value.(*TsCondition_Spec)
	case TsCondition_FieldPathSelectorInternal:
		(*target).Internal = fpv.value.(*TsCondition_Internal)
	case TsCondition_FieldPathSelectorFilterSelector:
		(*target).FilterSelector = fpv.value.(*TsCondition_Selector)
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition: %d", fpv.selector))
	}
}

func (fpv *TsCondition_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*TsCondition)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'TsCondition_FieldTerminalPathValue' with the value under path in 'TsCondition'.
func (fpv *TsCondition_FieldTerminalPathValue) CompareWith(source *TsCondition) (int, bool) {
	switch fpv.selector {
	case TsCondition_FieldPathSelectorName:
		leftValue := fpv.value.(*Name)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case TsCondition_FieldPathSelectorMetadata:
		return 0, false
	case TsCondition_FieldPathSelectorDisplayName:
		leftValue := fpv.value.(string)
		rightValue := source.GetDisplayName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case TsCondition_FieldPathSelectorDescription:
		leftValue := fpv.value.(string)
		rightValue := source.GetDescription()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case TsCondition_FieldPathSelectorSupportingDocs:
		return 0, false
	case TsCondition_FieldPathSelectorSpec:
		return 0, false
	case TsCondition_FieldPathSelectorInternal:
		return 0, false
	case TsCondition_FieldPathSelectorFilterSelector:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition: %d", fpv.selector))
	}
}

func (fpv *TsCondition_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*TsCondition))
}

type TsCondition_FieldSubPathValue struct {
	TsCondition_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ TsCondition_FieldPathValue = (*TsCondition_FieldSubPathValue)(nil)

func (fpvs *TsCondition_FieldSubPathValue) AsMetadataPathValue() (meta.Meta_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(meta.Meta_FieldPathValue)
	return res, ok
}
func (fpvs *TsCondition_FieldSubPathValue) AsSpecPathValue() (TsConditionSpec_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(TsConditionSpec_FieldPathValue)
	return res, ok
}
func (fpvs *TsCondition_FieldSubPathValue) AsInternalPathValue() (TsConditionInternal_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(TsConditionInternal_FieldPathValue)
	return res, ok
}
func (fpvs *TsCondition_FieldSubPathValue) AsFilterSelectorPathValue() (TsConditionSelector_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(TsConditionSelector_FieldPathValue)
	return res, ok
}

func (fpvs *TsCondition_FieldSubPathValue) SetTo(target **TsCondition) {
	if *target == nil {
		*target = new(TsCondition)
	}
	switch fpvs.Selector() {
	case TsCondition_FieldPathSelectorMetadata:
		fpvs.subPathValue.(meta.Meta_FieldPathValue).SetTo(&(*target).Metadata)
	case TsCondition_FieldPathSelectorSpec:
		fpvs.subPathValue.(TsConditionSpec_FieldPathValue).SetTo(&(*target).Spec)
	case TsCondition_FieldPathSelectorInternal:
		fpvs.subPathValue.(TsConditionInternal_FieldPathValue).SetTo(&(*target).Internal)
	case TsCondition_FieldPathSelectorFilterSelector:
		fpvs.subPathValue.(TsConditionSelector_FieldPathValue).SetTo(&(*target).FilterSelector)
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition: %d", fpvs.Selector()))
	}
}

func (fpvs *TsCondition_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*TsCondition)
	fpvs.SetTo(&typedObject)
}

func (fpvs *TsCondition_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *TsCondition_FieldSubPathValue) CompareWith(source *TsCondition) (int, bool) {
	switch fpvs.Selector() {
	case TsCondition_FieldPathSelectorMetadata:
		return fpvs.subPathValue.(meta.Meta_FieldPathValue).CompareWith(source.GetMetadata())
	case TsCondition_FieldPathSelectorSpec:
		return fpvs.subPathValue.(TsConditionSpec_FieldPathValue).CompareWith(source.GetSpec())
	case TsCondition_FieldPathSelectorInternal:
		return fpvs.subPathValue.(TsConditionInternal_FieldPathValue).CompareWith(source.GetInternal())
	case TsCondition_FieldPathSelectorFilterSelector:
		return fpvs.subPathValue.(TsConditionSelector_FieldPathValue).CompareWith(source.GetFilterSelector())
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition: %d", fpvs.Selector()))
	}
}

func (fpvs *TsCondition_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*TsCondition))
}

// TsCondition_FieldPathArrayItemValue allows storing single item in Path-specific values for TsCondition according to their type
// Present only for array (repeated) types.
type TsCondition_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	TsCondition_FieldPath
	ContainsValue(*TsCondition) bool
}

// ParseTsCondition_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseTsCondition_FieldPathArrayItemValue(pathStr, valueStr string) (TsCondition_FieldPathArrayItemValue, error) {
	fp, err := ParseTsCondition_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing TsCondition field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(TsCondition_FieldPathArrayItemValue), nil
}

func MustParseTsCondition_FieldPathArrayItemValue(pathStr, valueStr string) TsCondition_FieldPathArrayItemValue {
	fpaiv, err := ParseTsCondition_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type TsCondition_FieldTerminalPathArrayItemValue struct {
	TsCondition_FieldTerminalPath
	value interface{}
}

var _ TsCondition_FieldPathArrayItemValue = (*TsCondition_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object TsCondition as interface{}
func (fpaiv *TsCondition_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *TsCondition_FieldTerminalPathArrayItemValue) AsSupportingDocsItemValue() (*document.Reference, bool) {
	res, ok := fpaiv.value.(*document.Reference)
	return res, ok
}

func (fpaiv *TsCondition_FieldTerminalPathArrayItemValue) GetSingle(source *TsCondition) (interface{}, bool) {
	return nil, false
}

func (fpaiv *TsCondition_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*TsCondition))
}

// Contains returns a boolean indicating if value that is being held is present in given 'TsCondition'
func (fpaiv *TsCondition_FieldTerminalPathArrayItemValue) ContainsValue(source *TsCondition) bool {
	slice := fpaiv.TsCondition_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type TsCondition_FieldSubPathArrayItemValue struct {
	TsCondition_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *TsCondition_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *TsCondition_FieldSubPathArrayItemValue) AsMetadataPathItemValue() (meta.Meta_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(meta.Meta_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *TsCondition_FieldSubPathArrayItemValue) AsSpecPathItemValue() (TsConditionSpec_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(TsConditionSpec_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *TsCondition_FieldSubPathArrayItemValue) AsInternalPathItemValue() (TsConditionInternal_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(TsConditionInternal_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *TsCondition_FieldSubPathArrayItemValue) AsFilterSelectorPathItemValue() (TsConditionSelector_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(TsConditionSelector_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'TsCondition'
func (fpaivs *TsCondition_FieldSubPathArrayItemValue) ContainsValue(source *TsCondition) bool {
	switch fpaivs.Selector() {
	case TsCondition_FieldPathSelectorMetadata:
		return fpaivs.subPathItemValue.(meta.Meta_FieldPathArrayItemValue).ContainsValue(source.GetMetadata())
	case TsCondition_FieldPathSelectorSpec:
		return fpaivs.subPathItemValue.(TsConditionSpec_FieldPathArrayItemValue).ContainsValue(source.GetSpec())
	case TsCondition_FieldPathSelectorInternal:
		return fpaivs.subPathItemValue.(TsConditionInternal_FieldPathArrayItemValue).ContainsValue(source.GetInternal())
	case TsCondition_FieldPathSelectorFilterSelector:
		return fpaivs.subPathItemValue.(TsConditionSelector_FieldPathArrayItemValue).ContainsValue(source.GetFilterSelector())
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition: %d", fpaivs.Selector()))
	}
}

// TsCondition_FieldPathArrayOfValues allows storing slice of values for TsCondition fields according to their type
type TsCondition_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	TsCondition_FieldPath
}

func ParseTsCondition_FieldPathArrayOfValues(pathStr, valuesStr string) (TsCondition_FieldPathArrayOfValues, error) {
	fp, err := ParseTsCondition_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing TsCondition field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(TsCondition_FieldPathArrayOfValues), nil
}

func MustParseTsCondition_FieldPathArrayOfValues(pathStr, valuesStr string) TsCondition_FieldPathArrayOfValues {
	fpaov, err := ParseTsCondition_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type TsCondition_FieldTerminalPathArrayOfValues struct {
	TsCondition_FieldTerminalPath
	values interface{}
}

var _ TsCondition_FieldPathArrayOfValues = (*TsCondition_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *TsCondition_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case TsCondition_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*Name) {
			values = append(values, v)
		}
	case TsCondition_FieldPathSelectorMetadata:
		for _, v := range fpaov.values.([]*meta.Meta) {
			values = append(values, v)
		}
	case TsCondition_FieldPathSelectorDisplayName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case TsCondition_FieldPathSelectorDescription:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case TsCondition_FieldPathSelectorSupportingDocs:
		for _, v := range fpaov.values.([][]*document.Reference) {
			values = append(values, v)
		}
	case TsCondition_FieldPathSelectorSpec:
		for _, v := range fpaov.values.([]*TsCondition_Spec) {
			values = append(values, v)
		}
	case TsCondition_FieldPathSelectorInternal:
		for _, v := range fpaov.values.([]*TsCondition_Internal) {
			values = append(values, v)
		}
	case TsCondition_FieldPathSelectorFilterSelector:
		for _, v := range fpaov.values.([]*TsCondition_Selector) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *TsCondition_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*Name, bool) {
	res, ok := fpaov.values.([]*Name)
	return res, ok
}
func (fpaov *TsCondition_FieldTerminalPathArrayOfValues) AsMetadataArrayOfValues() ([]*meta.Meta, bool) {
	res, ok := fpaov.values.([]*meta.Meta)
	return res, ok
}
func (fpaov *TsCondition_FieldTerminalPathArrayOfValues) AsDisplayNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *TsCondition_FieldTerminalPathArrayOfValues) AsDescriptionArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *TsCondition_FieldTerminalPathArrayOfValues) AsSupportingDocsArrayOfValues() ([][]*document.Reference, bool) {
	res, ok := fpaov.values.([][]*document.Reference)
	return res, ok
}
func (fpaov *TsCondition_FieldTerminalPathArrayOfValues) AsSpecArrayOfValues() ([]*TsCondition_Spec, bool) {
	res, ok := fpaov.values.([]*TsCondition_Spec)
	return res, ok
}
func (fpaov *TsCondition_FieldTerminalPathArrayOfValues) AsInternalArrayOfValues() ([]*TsCondition_Internal, bool) {
	res, ok := fpaov.values.([]*TsCondition_Internal)
	return res, ok
}
func (fpaov *TsCondition_FieldTerminalPathArrayOfValues) AsFilterSelectorArrayOfValues() ([]*TsCondition_Selector, bool) {
	res, ok := fpaov.values.([]*TsCondition_Selector)
	return res, ok
}

type TsCondition_FieldSubPathArrayOfValues struct {
	TsCondition_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ TsCondition_FieldPathArrayOfValues = (*TsCondition_FieldSubPathArrayOfValues)(nil)

func (fpsaov *TsCondition_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *TsCondition_FieldSubPathArrayOfValues) AsMetadataPathArrayOfValues() (meta.Meta_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(meta.Meta_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *TsCondition_FieldSubPathArrayOfValues) AsSpecPathArrayOfValues() (TsConditionSpec_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(TsConditionSpec_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *TsCondition_FieldSubPathArrayOfValues) AsInternalPathArrayOfValues() (TsConditionInternal_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(TsConditionInternal_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *TsCondition_FieldSubPathArrayOfValues) AsFilterSelectorPathArrayOfValues() (TsConditionSelector_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(TsConditionSelector_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type TsConditionSpec_FieldPath interface {
	gotenobject.FieldPath
	Selector() TsConditionSpec_FieldPathSelector
	Get(source *TsCondition_Spec) []interface{}
	GetSingle(source *TsCondition_Spec) (interface{}, bool)
	ClearValue(item *TsCondition_Spec)

	// Those methods build corresponding TsConditionSpec_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) TsConditionSpec_FieldPathValue
	WithIArrayOfValues(values interface{}) TsConditionSpec_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) TsConditionSpec_FieldPathArrayItemValue
}

type TsConditionSpec_FieldPathSelector int32

const (
	TsConditionSpec_FieldPathSelectorQueries           TsConditionSpec_FieldPathSelector = 0
	TsConditionSpec_FieldPathSelectorQueryGroupBy      TsConditionSpec_FieldPathSelector = 1
	TsConditionSpec_FieldPathSelectorThresholdAlerting TsConditionSpec_FieldPathSelector = 2
	TsConditionSpec_FieldPathSelectorAnomalyAlerting   TsConditionSpec_FieldPathSelector = 3
)

func (s TsConditionSpec_FieldPathSelector) String() string {
	switch s {
	case TsConditionSpec_FieldPathSelectorQueries:
		return "queries"
	case TsConditionSpec_FieldPathSelectorQueryGroupBy:
		return "query_group_by"
	case TsConditionSpec_FieldPathSelectorThresholdAlerting:
		return "threshold_alerting"
	case TsConditionSpec_FieldPathSelectorAnomalyAlerting:
		return "anomaly_alerting"
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Spec: %d", s))
	}
}

func BuildTsConditionSpec_FieldPath(fp gotenobject.RawFieldPath) (TsConditionSpec_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object TsCondition_Spec")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "queries":
			return &TsConditionSpec_FieldTerminalPath{selector: TsConditionSpec_FieldPathSelectorQueries}, nil
		case "query_group_by", "queryGroupBy", "query-group-by":
			return &TsConditionSpec_FieldTerminalPath{selector: TsConditionSpec_FieldPathSelectorQueryGroupBy}, nil
		case "threshold_alerting", "thresholdAlerting", "threshold-alerting":
			return &TsConditionSpec_FieldTerminalPath{selector: TsConditionSpec_FieldPathSelectorThresholdAlerting}, nil
		case "anomaly_alerting", "anomalyAlerting", "anomaly-alerting":
			return &TsConditionSpec_FieldTerminalPath{selector: TsConditionSpec_FieldPathSelectorAnomalyAlerting}, nil
		}
	} else {
		switch fp[0] {
		case "queries":
			if subpath, err := BuildTsConditionSpecQuery_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &TsConditionSpec_FieldSubPath{selector: TsConditionSpec_FieldPathSelectorQueries, subPath: subpath}, nil
			}
		case "threshold_alerting", "thresholdAlerting", "threshold-alerting":
			if subpath, err := BuildTsConditionSpecThresholdAlertingCfg_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &TsConditionSpec_FieldSubPath{selector: TsConditionSpec_FieldPathSelectorThresholdAlerting, subPath: subpath}, nil
			}
		case "anomaly_alerting", "anomalyAlerting", "anomaly-alerting":
			if subpath, err := BuildTsConditionSpecAnomalyAlertingCfg_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &TsConditionSpec_FieldSubPath{selector: TsConditionSpec_FieldPathSelectorAnomalyAlerting, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object TsCondition_Spec", fp)
}

func ParseTsConditionSpec_FieldPath(rawField string) (TsConditionSpec_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildTsConditionSpec_FieldPath(fp)
}

func MustParseTsConditionSpec_FieldPath(rawField string) TsConditionSpec_FieldPath {
	fp, err := ParseTsConditionSpec_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type TsConditionSpec_FieldTerminalPath struct {
	selector TsConditionSpec_FieldPathSelector
}

var _ TsConditionSpec_FieldPath = (*TsConditionSpec_FieldTerminalPath)(nil)

func (fp *TsConditionSpec_FieldTerminalPath) Selector() TsConditionSpec_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *TsConditionSpec_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *TsConditionSpec_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source TsCondition_Spec
func (fp *TsConditionSpec_FieldTerminalPath) Get(source *TsCondition_Spec) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case TsConditionSpec_FieldPathSelectorQueries:
			for _, value := range source.GetQueries() {
				values = append(values, value)
			}
		case TsConditionSpec_FieldPathSelectorQueryGroupBy:
			for _, value := range source.GetQueryGroupBy() {
				values = append(values, value)
			}
		case TsConditionSpec_FieldPathSelectorThresholdAlerting:
			if source.ThresholdAlerting != nil {
				values = append(values, source.ThresholdAlerting)
			}
		case TsConditionSpec_FieldPathSelectorAnomalyAlerting:
			for _, value := range source.GetAnomalyAlerting() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for TsCondition_Spec: %d", fp.selector))
		}
	}
	return
}

func (fp *TsConditionSpec_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*TsCondition_Spec))
}

// GetSingle returns value pointed by specific field of from source TsCondition_Spec
func (fp *TsConditionSpec_FieldTerminalPath) GetSingle(source *TsCondition_Spec) (interface{}, bool) {
	switch fp.selector {
	case TsConditionSpec_FieldPathSelectorQueries:
		res := source.GetQueries()
		return res, res != nil
	case TsConditionSpec_FieldPathSelectorQueryGroupBy:
		res := source.GetQueryGroupBy()
		return res, res != nil
	case TsConditionSpec_FieldPathSelectorThresholdAlerting:
		res := source.GetThresholdAlerting()
		return res, res != nil
	case TsConditionSpec_FieldPathSelectorAnomalyAlerting:
		res := source.GetAnomalyAlerting()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Spec: %d", fp.selector))
	}
}

func (fp *TsConditionSpec_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*TsCondition_Spec))
}

// GetDefault returns a default value of the field type
func (fp *TsConditionSpec_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case TsConditionSpec_FieldPathSelectorQueries:
		return ([]*TsCondition_Spec_Query)(nil)
	case TsConditionSpec_FieldPathSelectorQueryGroupBy:
		return ([]string)(nil)
	case TsConditionSpec_FieldPathSelectorThresholdAlerting:
		return (*TsCondition_Spec_ThresholdAlertingCfg)(nil)
	case TsConditionSpec_FieldPathSelectorAnomalyAlerting:
		return ([]*TsCondition_Spec_AnomalyAlertingCfg)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Spec: %d", fp.selector))
	}
}

func (fp *TsConditionSpec_FieldTerminalPath) ClearValue(item *TsCondition_Spec) {
	if item != nil {
		switch fp.selector {
		case TsConditionSpec_FieldPathSelectorQueries:
			item.Queries = nil
		case TsConditionSpec_FieldPathSelectorQueryGroupBy:
			item.QueryGroupBy = nil
		case TsConditionSpec_FieldPathSelectorThresholdAlerting:
			item.ThresholdAlerting = nil
		case TsConditionSpec_FieldPathSelectorAnomalyAlerting:
			item.AnomalyAlerting = nil
		default:
			panic(fmt.Sprintf("Invalid selector for TsCondition_Spec: %d", fp.selector))
		}
	}
}

func (fp *TsConditionSpec_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*TsCondition_Spec))
}

// IsLeaf - whether field path is holds simple value
func (fp *TsConditionSpec_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == TsConditionSpec_FieldPathSelectorQueryGroupBy
}

func (fp *TsConditionSpec_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *TsConditionSpec_FieldTerminalPath) WithIValue(value interface{}) TsConditionSpec_FieldPathValue {
	switch fp.selector {
	case TsConditionSpec_FieldPathSelectorQueries:
		return &TsConditionSpec_FieldTerminalPathValue{TsConditionSpec_FieldTerminalPath: *fp, value: value.([]*TsCondition_Spec_Query)}
	case TsConditionSpec_FieldPathSelectorQueryGroupBy:
		return &TsConditionSpec_FieldTerminalPathValue{TsConditionSpec_FieldTerminalPath: *fp, value: value.([]string)}
	case TsConditionSpec_FieldPathSelectorThresholdAlerting:
		return &TsConditionSpec_FieldTerminalPathValue{TsConditionSpec_FieldTerminalPath: *fp, value: value.(*TsCondition_Spec_ThresholdAlertingCfg)}
	case TsConditionSpec_FieldPathSelectorAnomalyAlerting:
		return &TsConditionSpec_FieldTerminalPathValue{TsConditionSpec_FieldTerminalPath: *fp, value: value.([]*TsCondition_Spec_AnomalyAlertingCfg)}
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Spec: %d", fp.selector))
	}
}

func (fp *TsConditionSpec_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *TsConditionSpec_FieldTerminalPath) WithIArrayOfValues(values interface{}) TsConditionSpec_FieldPathArrayOfValues {
	fpaov := &TsConditionSpec_FieldTerminalPathArrayOfValues{TsConditionSpec_FieldTerminalPath: *fp}
	switch fp.selector {
	case TsConditionSpec_FieldPathSelectorQueries:
		return &TsConditionSpec_FieldTerminalPathArrayOfValues{TsConditionSpec_FieldTerminalPath: *fp, values: values.([][]*TsCondition_Spec_Query)}
	case TsConditionSpec_FieldPathSelectorQueryGroupBy:
		return &TsConditionSpec_FieldTerminalPathArrayOfValues{TsConditionSpec_FieldTerminalPath: *fp, values: values.([][]string)}
	case TsConditionSpec_FieldPathSelectorThresholdAlerting:
		return &TsConditionSpec_FieldTerminalPathArrayOfValues{TsConditionSpec_FieldTerminalPath: *fp, values: values.([]*TsCondition_Spec_ThresholdAlertingCfg)}
	case TsConditionSpec_FieldPathSelectorAnomalyAlerting:
		return &TsConditionSpec_FieldTerminalPathArrayOfValues{TsConditionSpec_FieldTerminalPath: *fp, values: values.([][]*TsCondition_Spec_AnomalyAlertingCfg)}
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Spec: %d", fp.selector))
	}
	return fpaov
}

func (fp *TsConditionSpec_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *TsConditionSpec_FieldTerminalPath) WithIArrayItemValue(value interface{}) TsConditionSpec_FieldPathArrayItemValue {
	switch fp.selector {
	case TsConditionSpec_FieldPathSelectorQueries:
		return &TsConditionSpec_FieldTerminalPathArrayItemValue{TsConditionSpec_FieldTerminalPath: *fp, value: value.(*TsCondition_Spec_Query)}
	case TsConditionSpec_FieldPathSelectorQueryGroupBy:
		return &TsConditionSpec_FieldTerminalPathArrayItemValue{TsConditionSpec_FieldTerminalPath: *fp, value: value.(string)}
	case TsConditionSpec_FieldPathSelectorAnomalyAlerting:
		return &TsConditionSpec_FieldTerminalPathArrayItemValue{TsConditionSpec_FieldTerminalPath: *fp, value: value.(*TsCondition_Spec_AnomalyAlertingCfg)}
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Spec: %d", fp.selector))
	}
}

func (fp *TsConditionSpec_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type TsConditionSpec_FieldSubPath struct {
	selector TsConditionSpec_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ TsConditionSpec_FieldPath = (*TsConditionSpec_FieldSubPath)(nil)

func (fps *TsConditionSpec_FieldSubPath) Selector() TsConditionSpec_FieldPathSelector {
	return fps.selector
}
func (fps *TsConditionSpec_FieldSubPath) AsQueriesSubPath() (TsConditionSpecQuery_FieldPath, bool) {
	res, ok := fps.subPath.(TsConditionSpecQuery_FieldPath)
	return res, ok
}
func (fps *TsConditionSpec_FieldSubPath) AsThresholdAlertingSubPath() (TsConditionSpecThresholdAlertingCfg_FieldPath, bool) {
	res, ok := fps.subPath.(TsConditionSpecThresholdAlertingCfg_FieldPath)
	return res, ok
}
func (fps *TsConditionSpec_FieldSubPath) AsAnomalyAlertingSubPath() (TsConditionSpecAnomalyAlertingCfg_FieldPath, bool) {
	res, ok := fps.subPath.(TsConditionSpecAnomalyAlertingCfg_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *TsConditionSpec_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *TsConditionSpec_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source TsCondition_Spec
func (fps *TsConditionSpec_FieldSubPath) Get(source *TsCondition_Spec) (values []interface{}) {
	switch fps.selector {
	case TsConditionSpec_FieldPathSelectorQueries:
		for _, item := range source.GetQueries() {
			values = append(values, fps.subPath.GetRaw(item)...)
		}
	case TsConditionSpec_FieldPathSelectorThresholdAlerting:
		values = append(values, fps.subPath.GetRaw(source.GetThresholdAlerting())...)
	case TsConditionSpec_FieldPathSelectorAnomalyAlerting:
		for _, item := range source.GetAnomalyAlerting() {
			values = append(values, fps.subPath.GetRaw(item)...)
		}
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Spec: %d", fps.selector))
	}
	return
}

func (fps *TsConditionSpec_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*TsCondition_Spec))
}

// GetSingle returns value of selected field from source TsCondition_Spec
func (fps *TsConditionSpec_FieldSubPath) GetSingle(source *TsCondition_Spec) (interface{}, bool) {
	switch fps.selector {
	case TsConditionSpec_FieldPathSelectorQueries:
		if len(source.GetQueries()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetQueries()[0])
	case TsConditionSpec_FieldPathSelectorThresholdAlerting:
		if source.GetThresholdAlerting() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetThresholdAlerting())
	case TsConditionSpec_FieldPathSelectorAnomalyAlerting:
		if len(source.GetAnomalyAlerting()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetAnomalyAlerting()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Spec: %d", fps.selector))
	}
}

func (fps *TsConditionSpec_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*TsCondition_Spec))
}

// GetDefault returns a default value of the field type
func (fps *TsConditionSpec_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *TsConditionSpec_FieldSubPath) ClearValue(item *TsCondition_Spec) {
	if item != nil {
		switch fps.selector {
		case TsConditionSpec_FieldPathSelectorQueries:
			for _, subItem := range item.Queries {
				fps.subPath.ClearValueRaw(subItem)
			}
		case TsConditionSpec_FieldPathSelectorThresholdAlerting:
			fps.subPath.ClearValueRaw(item.ThresholdAlerting)
		case TsConditionSpec_FieldPathSelectorAnomalyAlerting:
			for _, subItem := range item.AnomalyAlerting {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for TsCondition_Spec: %d", fps.selector))
		}
	}
}

func (fps *TsConditionSpec_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*TsCondition_Spec))
}

// IsLeaf - whether field path is holds simple value
func (fps *TsConditionSpec_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *TsConditionSpec_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&TsConditionSpec_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *TsConditionSpec_FieldSubPath) WithIValue(value interface{}) TsConditionSpec_FieldPathValue {
	return &TsConditionSpec_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *TsConditionSpec_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *TsConditionSpec_FieldSubPath) WithIArrayOfValues(values interface{}) TsConditionSpec_FieldPathArrayOfValues {
	return &TsConditionSpec_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *TsConditionSpec_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *TsConditionSpec_FieldSubPath) WithIArrayItemValue(value interface{}) TsConditionSpec_FieldPathArrayItemValue {
	return &TsConditionSpec_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *TsConditionSpec_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// TsConditionSpec_FieldPathValue allows storing values for Spec fields according to their type
type TsConditionSpec_FieldPathValue interface {
	TsConditionSpec_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **TsCondition_Spec)
	CompareWith(*TsCondition_Spec) (cmp int, comparable bool)
}

func ParseTsConditionSpec_FieldPathValue(pathStr, valueStr string) (TsConditionSpec_FieldPathValue, error) {
	fp, err := ParseTsConditionSpec_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Spec field path value from %s: %v", valueStr, err)
	}
	return fpv.(TsConditionSpec_FieldPathValue), nil
}

func MustParseTsConditionSpec_FieldPathValue(pathStr, valueStr string) TsConditionSpec_FieldPathValue {
	fpv, err := ParseTsConditionSpec_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type TsConditionSpec_FieldTerminalPathValue struct {
	TsConditionSpec_FieldTerminalPath
	value interface{}
}

var _ TsConditionSpec_FieldPathValue = (*TsConditionSpec_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Spec' as interface{}
func (fpv *TsConditionSpec_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *TsConditionSpec_FieldTerminalPathValue) AsQueriesValue() ([]*TsCondition_Spec_Query, bool) {
	res, ok := fpv.value.([]*TsCondition_Spec_Query)
	return res, ok
}
func (fpv *TsConditionSpec_FieldTerminalPathValue) AsQueryGroupByValue() ([]string, bool) {
	res, ok := fpv.value.([]string)
	return res, ok
}
func (fpv *TsConditionSpec_FieldTerminalPathValue) AsThresholdAlertingValue() (*TsCondition_Spec_ThresholdAlertingCfg, bool) {
	res, ok := fpv.value.(*TsCondition_Spec_ThresholdAlertingCfg)
	return res, ok
}
func (fpv *TsConditionSpec_FieldTerminalPathValue) AsAnomalyAlertingValue() ([]*TsCondition_Spec_AnomalyAlertingCfg, bool) {
	res, ok := fpv.value.([]*TsCondition_Spec_AnomalyAlertingCfg)
	return res, ok
}

// SetTo stores value for selected field for object Spec
func (fpv *TsConditionSpec_FieldTerminalPathValue) SetTo(target **TsCondition_Spec) {
	if *target == nil {
		*target = new(TsCondition_Spec)
	}
	switch fpv.selector {
	case TsConditionSpec_FieldPathSelectorQueries:
		(*target).Queries = fpv.value.([]*TsCondition_Spec_Query)
	case TsConditionSpec_FieldPathSelectorQueryGroupBy:
		(*target).QueryGroupBy = fpv.value.([]string)
	case TsConditionSpec_FieldPathSelectorThresholdAlerting:
		(*target).ThresholdAlerting = fpv.value.(*TsCondition_Spec_ThresholdAlertingCfg)
	case TsConditionSpec_FieldPathSelectorAnomalyAlerting:
		(*target).AnomalyAlerting = fpv.value.([]*TsCondition_Spec_AnomalyAlertingCfg)
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Spec: %d", fpv.selector))
	}
}

func (fpv *TsConditionSpec_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*TsCondition_Spec)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'TsConditionSpec_FieldTerminalPathValue' with the value under path in 'TsCondition_Spec'.
func (fpv *TsConditionSpec_FieldTerminalPathValue) CompareWith(source *TsCondition_Spec) (int, bool) {
	switch fpv.selector {
	case TsConditionSpec_FieldPathSelectorQueries:
		return 0, false
	case TsConditionSpec_FieldPathSelectorQueryGroupBy:
		return 0, false
	case TsConditionSpec_FieldPathSelectorThresholdAlerting:
		return 0, false
	case TsConditionSpec_FieldPathSelectorAnomalyAlerting:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Spec: %d", fpv.selector))
	}
}

func (fpv *TsConditionSpec_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*TsCondition_Spec))
}

type TsConditionSpec_FieldSubPathValue struct {
	TsConditionSpec_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ TsConditionSpec_FieldPathValue = (*TsConditionSpec_FieldSubPathValue)(nil)

func (fpvs *TsConditionSpec_FieldSubPathValue) AsQueriesPathValue() (TsConditionSpecQuery_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(TsConditionSpecQuery_FieldPathValue)
	return res, ok
}
func (fpvs *TsConditionSpec_FieldSubPathValue) AsThresholdAlertingPathValue() (TsConditionSpecThresholdAlertingCfg_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(TsConditionSpecThresholdAlertingCfg_FieldPathValue)
	return res, ok
}
func (fpvs *TsConditionSpec_FieldSubPathValue) AsAnomalyAlertingPathValue() (TsConditionSpecAnomalyAlertingCfg_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(TsConditionSpecAnomalyAlertingCfg_FieldPathValue)
	return res, ok
}

func (fpvs *TsConditionSpec_FieldSubPathValue) SetTo(target **TsCondition_Spec) {
	if *target == nil {
		*target = new(TsCondition_Spec)
	}
	switch fpvs.Selector() {
	case TsConditionSpec_FieldPathSelectorQueries:
		panic("FieldPath setter is unsupported for array subpaths")
	case TsConditionSpec_FieldPathSelectorThresholdAlerting:
		fpvs.subPathValue.(TsConditionSpecThresholdAlertingCfg_FieldPathValue).SetTo(&(*target).ThresholdAlerting)
	case TsConditionSpec_FieldPathSelectorAnomalyAlerting:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Spec: %d", fpvs.Selector()))
	}
}

func (fpvs *TsConditionSpec_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*TsCondition_Spec)
	fpvs.SetTo(&typedObject)
}

func (fpvs *TsConditionSpec_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *TsConditionSpec_FieldSubPathValue) CompareWith(source *TsCondition_Spec) (int, bool) {
	switch fpvs.Selector() {
	case TsConditionSpec_FieldPathSelectorQueries:
		return 0, false // repeated field
	case TsConditionSpec_FieldPathSelectorThresholdAlerting:
		return fpvs.subPathValue.(TsConditionSpecThresholdAlertingCfg_FieldPathValue).CompareWith(source.GetThresholdAlerting())
	case TsConditionSpec_FieldPathSelectorAnomalyAlerting:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Spec: %d", fpvs.Selector()))
	}
}

func (fpvs *TsConditionSpec_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*TsCondition_Spec))
}

// TsConditionSpec_FieldPathArrayItemValue allows storing single item in Path-specific values for Spec according to their type
// Present only for array (repeated) types.
type TsConditionSpec_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	TsConditionSpec_FieldPath
	ContainsValue(*TsCondition_Spec) bool
}

// ParseTsConditionSpec_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseTsConditionSpec_FieldPathArrayItemValue(pathStr, valueStr string) (TsConditionSpec_FieldPathArrayItemValue, error) {
	fp, err := ParseTsConditionSpec_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Spec field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(TsConditionSpec_FieldPathArrayItemValue), nil
}

func MustParseTsConditionSpec_FieldPathArrayItemValue(pathStr, valueStr string) TsConditionSpec_FieldPathArrayItemValue {
	fpaiv, err := ParseTsConditionSpec_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type TsConditionSpec_FieldTerminalPathArrayItemValue struct {
	TsConditionSpec_FieldTerminalPath
	value interface{}
}

var _ TsConditionSpec_FieldPathArrayItemValue = (*TsConditionSpec_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object TsCondition_Spec as interface{}
func (fpaiv *TsConditionSpec_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *TsConditionSpec_FieldTerminalPathArrayItemValue) AsQueriesItemValue() (*TsCondition_Spec_Query, bool) {
	res, ok := fpaiv.value.(*TsCondition_Spec_Query)
	return res, ok
}
func (fpaiv *TsConditionSpec_FieldTerminalPathArrayItemValue) AsQueryGroupByItemValue() (string, bool) {
	res, ok := fpaiv.value.(string)
	return res, ok
}
func (fpaiv *TsConditionSpec_FieldTerminalPathArrayItemValue) AsAnomalyAlertingItemValue() (*TsCondition_Spec_AnomalyAlertingCfg, bool) {
	res, ok := fpaiv.value.(*TsCondition_Spec_AnomalyAlertingCfg)
	return res, ok
}

func (fpaiv *TsConditionSpec_FieldTerminalPathArrayItemValue) GetSingle(source *TsCondition_Spec) (interface{}, bool) {
	return nil, false
}

func (fpaiv *TsConditionSpec_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*TsCondition_Spec))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Spec'
func (fpaiv *TsConditionSpec_FieldTerminalPathArrayItemValue) ContainsValue(source *TsCondition_Spec) bool {
	slice := fpaiv.TsConditionSpec_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type TsConditionSpec_FieldSubPathArrayItemValue struct {
	TsConditionSpec_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *TsConditionSpec_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *TsConditionSpec_FieldSubPathArrayItemValue) AsQueriesPathItemValue() (TsConditionSpecQuery_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(TsConditionSpecQuery_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *TsConditionSpec_FieldSubPathArrayItemValue) AsThresholdAlertingPathItemValue() (TsConditionSpecThresholdAlertingCfg_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(TsConditionSpecThresholdAlertingCfg_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *TsConditionSpec_FieldSubPathArrayItemValue) AsAnomalyAlertingPathItemValue() (TsConditionSpecAnomalyAlertingCfg_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(TsConditionSpecAnomalyAlertingCfg_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'Spec'
func (fpaivs *TsConditionSpec_FieldSubPathArrayItemValue) ContainsValue(source *TsCondition_Spec) bool {
	switch fpaivs.Selector() {
	case TsConditionSpec_FieldPathSelectorQueries:
		return false // repeated/map field
	case TsConditionSpec_FieldPathSelectorThresholdAlerting:
		return fpaivs.subPathItemValue.(TsConditionSpecThresholdAlertingCfg_FieldPathArrayItemValue).ContainsValue(source.GetThresholdAlerting())
	case TsConditionSpec_FieldPathSelectorAnomalyAlerting:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Spec: %d", fpaivs.Selector()))
	}
}

// TsConditionSpec_FieldPathArrayOfValues allows storing slice of values for Spec fields according to their type
type TsConditionSpec_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	TsConditionSpec_FieldPath
}

func ParseTsConditionSpec_FieldPathArrayOfValues(pathStr, valuesStr string) (TsConditionSpec_FieldPathArrayOfValues, error) {
	fp, err := ParseTsConditionSpec_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Spec field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(TsConditionSpec_FieldPathArrayOfValues), nil
}

func MustParseTsConditionSpec_FieldPathArrayOfValues(pathStr, valuesStr string) TsConditionSpec_FieldPathArrayOfValues {
	fpaov, err := ParseTsConditionSpec_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type TsConditionSpec_FieldTerminalPathArrayOfValues struct {
	TsConditionSpec_FieldTerminalPath
	values interface{}
}

var _ TsConditionSpec_FieldPathArrayOfValues = (*TsConditionSpec_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *TsConditionSpec_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case TsConditionSpec_FieldPathSelectorQueries:
		for _, v := range fpaov.values.([][]*TsCondition_Spec_Query) {
			values = append(values, v)
		}
	case TsConditionSpec_FieldPathSelectorQueryGroupBy:
		for _, v := range fpaov.values.([][]string) {
			values = append(values, v)
		}
	case TsConditionSpec_FieldPathSelectorThresholdAlerting:
		for _, v := range fpaov.values.([]*TsCondition_Spec_ThresholdAlertingCfg) {
			values = append(values, v)
		}
	case TsConditionSpec_FieldPathSelectorAnomalyAlerting:
		for _, v := range fpaov.values.([][]*TsCondition_Spec_AnomalyAlertingCfg) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *TsConditionSpec_FieldTerminalPathArrayOfValues) AsQueriesArrayOfValues() ([][]*TsCondition_Spec_Query, bool) {
	res, ok := fpaov.values.([][]*TsCondition_Spec_Query)
	return res, ok
}
func (fpaov *TsConditionSpec_FieldTerminalPathArrayOfValues) AsQueryGroupByArrayOfValues() ([][]string, bool) {
	res, ok := fpaov.values.([][]string)
	return res, ok
}
func (fpaov *TsConditionSpec_FieldTerminalPathArrayOfValues) AsThresholdAlertingArrayOfValues() ([]*TsCondition_Spec_ThresholdAlertingCfg, bool) {
	res, ok := fpaov.values.([]*TsCondition_Spec_ThresholdAlertingCfg)
	return res, ok
}
func (fpaov *TsConditionSpec_FieldTerminalPathArrayOfValues) AsAnomalyAlertingArrayOfValues() ([][]*TsCondition_Spec_AnomalyAlertingCfg, bool) {
	res, ok := fpaov.values.([][]*TsCondition_Spec_AnomalyAlertingCfg)
	return res, ok
}

type TsConditionSpec_FieldSubPathArrayOfValues struct {
	TsConditionSpec_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ TsConditionSpec_FieldPathArrayOfValues = (*TsConditionSpec_FieldSubPathArrayOfValues)(nil)

func (fpsaov *TsConditionSpec_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *TsConditionSpec_FieldSubPathArrayOfValues) AsQueriesPathArrayOfValues() (TsConditionSpecQuery_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(TsConditionSpecQuery_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *TsConditionSpec_FieldSubPathArrayOfValues) AsThresholdAlertingPathArrayOfValues() (TsConditionSpecThresholdAlertingCfg_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(TsConditionSpecThresholdAlertingCfg_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *TsConditionSpec_FieldSubPathArrayOfValues) AsAnomalyAlertingPathArrayOfValues() (TsConditionSpecAnomalyAlertingCfg_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(TsConditionSpecAnomalyAlertingCfg_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type TsConditionInternal_FieldPath interface {
	gotenobject.FieldPath
	Selector() TsConditionInternal_FieldPathSelector
	Get(source *TsCondition_Internal) []interface{}
	GetSingle(source *TsCondition_Internal) (interface{}, bool)
	ClearValue(item *TsCondition_Internal)

	// Those methods build corresponding TsConditionInternal_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) TsConditionInternal_FieldPathValue
	WithIArrayOfValues(values interface{}) TsConditionInternal_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) TsConditionInternal_FieldPathArrayItemValue
}

type TsConditionInternal_FieldPathSelector int32

const (
	TsConditionInternal_FieldPathSelectorCommonKeyKset       TsConditionInternal_FieldPathSelector = 0
	TsConditionInternal_FieldPathSelectorEntrySpecGeneration TsConditionInternal_FieldPathSelector = 1
	TsConditionInternal_FieldPathSelectorAlertingLocation    TsConditionInternal_FieldPathSelector = 2
)

func (s TsConditionInternal_FieldPathSelector) String() string {
	switch s {
	case TsConditionInternal_FieldPathSelectorCommonKeyKset:
		return "common_key_kset"
	case TsConditionInternal_FieldPathSelectorEntrySpecGeneration:
		return "entry_spec_generation"
	case TsConditionInternal_FieldPathSelectorAlertingLocation:
		return "alerting_location"
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Internal: %d", s))
	}
}

func BuildTsConditionInternal_FieldPath(fp gotenobject.RawFieldPath) (TsConditionInternal_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object TsCondition_Internal")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "common_key_kset", "commonKeyKset", "common-key-kset":
			return &TsConditionInternal_FieldTerminalPath{selector: TsConditionInternal_FieldPathSelectorCommonKeyKset}, nil
		case "entry_spec_generation", "entrySpecGeneration", "entry-spec-generation":
			return &TsConditionInternal_FieldTerminalPath{selector: TsConditionInternal_FieldPathSelectorEntrySpecGeneration}, nil
		case "alerting_location", "alertingLocation", "alerting-location":
			return &TsConditionInternal_FieldTerminalPath{selector: TsConditionInternal_FieldPathSelectorAlertingLocation}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object TsCondition_Internal", fp)
}

func ParseTsConditionInternal_FieldPath(rawField string) (TsConditionInternal_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildTsConditionInternal_FieldPath(fp)
}

func MustParseTsConditionInternal_FieldPath(rawField string) TsConditionInternal_FieldPath {
	fp, err := ParseTsConditionInternal_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type TsConditionInternal_FieldTerminalPath struct {
	selector TsConditionInternal_FieldPathSelector
}

var _ TsConditionInternal_FieldPath = (*TsConditionInternal_FieldTerminalPath)(nil)

func (fp *TsConditionInternal_FieldTerminalPath) Selector() TsConditionInternal_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *TsConditionInternal_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *TsConditionInternal_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source TsCondition_Internal
func (fp *TsConditionInternal_FieldTerminalPath) Get(source *TsCondition_Internal) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case TsConditionInternal_FieldPathSelectorCommonKeyKset:
			values = append(values, source.CommonKeyKset)
		case TsConditionInternal_FieldPathSelectorEntrySpecGeneration:
			values = append(values, source.EntrySpecGeneration)
		case TsConditionInternal_FieldPathSelectorAlertingLocation:
			values = append(values, source.AlertingLocation)
		default:
			panic(fmt.Sprintf("Invalid selector for TsCondition_Internal: %d", fp.selector))
		}
	}
	return
}

func (fp *TsConditionInternal_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*TsCondition_Internal))
}

// GetSingle returns value pointed by specific field of from source TsCondition_Internal
func (fp *TsConditionInternal_FieldTerminalPath) GetSingle(source *TsCondition_Internal) (interface{}, bool) {
	switch fp.selector {
	case TsConditionInternal_FieldPathSelectorCommonKeyKset:
		res := source.GetCommonKeyKset()
		return res, res != nil
	case TsConditionInternal_FieldPathSelectorEntrySpecGeneration:
		return source.GetEntrySpecGeneration(), source != nil
	case TsConditionInternal_FieldPathSelectorAlertingLocation:
		return source.GetAlertingLocation(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Internal: %d", fp.selector))
	}
}

func (fp *TsConditionInternal_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*TsCondition_Internal))
}

// GetDefault returns a default value of the field type
func (fp *TsConditionInternal_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case TsConditionInternal_FieldPathSelectorCommonKeyKset:
		return ([]byte)(nil)
	case TsConditionInternal_FieldPathSelectorEntrySpecGeneration:
		return int32(0)
	case TsConditionInternal_FieldPathSelectorAlertingLocation:
		return policy.Policy_Spec_UNDEFINED
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Internal: %d", fp.selector))
	}
}

func (fp *TsConditionInternal_FieldTerminalPath) ClearValue(item *TsCondition_Internal) {
	if item != nil {
		switch fp.selector {
		case TsConditionInternal_FieldPathSelectorCommonKeyKset:
			item.CommonKeyKset = nil
		case TsConditionInternal_FieldPathSelectorEntrySpecGeneration:
			item.EntrySpecGeneration = int32(0)
		case TsConditionInternal_FieldPathSelectorAlertingLocation:
			item.AlertingLocation = policy.Policy_Spec_UNDEFINED
		default:
			panic(fmt.Sprintf("Invalid selector for TsCondition_Internal: %d", fp.selector))
		}
	}
}

func (fp *TsConditionInternal_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*TsCondition_Internal))
}

// IsLeaf - whether field path is holds simple value
func (fp *TsConditionInternal_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == TsConditionInternal_FieldPathSelectorCommonKeyKset ||
		fp.selector == TsConditionInternal_FieldPathSelectorEntrySpecGeneration ||
		fp.selector == TsConditionInternal_FieldPathSelectorAlertingLocation
}

func (fp *TsConditionInternal_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *TsConditionInternal_FieldTerminalPath) WithIValue(value interface{}) TsConditionInternal_FieldPathValue {
	switch fp.selector {
	case TsConditionInternal_FieldPathSelectorCommonKeyKset:
		return &TsConditionInternal_FieldTerminalPathValue{TsConditionInternal_FieldTerminalPath: *fp, value: value.([]byte)}
	case TsConditionInternal_FieldPathSelectorEntrySpecGeneration:
		return &TsConditionInternal_FieldTerminalPathValue{TsConditionInternal_FieldTerminalPath: *fp, value: value.(int32)}
	case TsConditionInternal_FieldPathSelectorAlertingLocation:
		return &TsConditionInternal_FieldTerminalPathValue{TsConditionInternal_FieldTerminalPath: *fp, value: value.(policy.Policy_Spec_ProcessingLocation)}
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Internal: %d", fp.selector))
	}
}

func (fp *TsConditionInternal_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *TsConditionInternal_FieldTerminalPath) WithIArrayOfValues(values interface{}) TsConditionInternal_FieldPathArrayOfValues {
	fpaov := &TsConditionInternal_FieldTerminalPathArrayOfValues{TsConditionInternal_FieldTerminalPath: *fp}
	switch fp.selector {
	case TsConditionInternal_FieldPathSelectorCommonKeyKset:
		return &TsConditionInternal_FieldTerminalPathArrayOfValues{TsConditionInternal_FieldTerminalPath: *fp, values: values.([][]byte)}
	case TsConditionInternal_FieldPathSelectorEntrySpecGeneration:
		return &TsConditionInternal_FieldTerminalPathArrayOfValues{TsConditionInternal_FieldTerminalPath: *fp, values: values.([]int32)}
	case TsConditionInternal_FieldPathSelectorAlertingLocation:
		return &TsConditionInternal_FieldTerminalPathArrayOfValues{TsConditionInternal_FieldTerminalPath: *fp, values: values.([]policy.Policy_Spec_ProcessingLocation)}
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Internal: %d", fp.selector))
	}
	return fpaov
}

func (fp *TsConditionInternal_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *TsConditionInternal_FieldTerminalPath) WithIArrayItemValue(value interface{}) TsConditionInternal_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Internal: %d", fp.selector))
	}
}

func (fp *TsConditionInternal_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// TsConditionInternal_FieldPathValue allows storing values for Internal fields according to their type
type TsConditionInternal_FieldPathValue interface {
	TsConditionInternal_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **TsCondition_Internal)
	CompareWith(*TsCondition_Internal) (cmp int, comparable bool)
}

func ParseTsConditionInternal_FieldPathValue(pathStr, valueStr string) (TsConditionInternal_FieldPathValue, error) {
	fp, err := ParseTsConditionInternal_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Internal field path value from %s: %v", valueStr, err)
	}
	return fpv.(TsConditionInternal_FieldPathValue), nil
}

func MustParseTsConditionInternal_FieldPathValue(pathStr, valueStr string) TsConditionInternal_FieldPathValue {
	fpv, err := ParseTsConditionInternal_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type TsConditionInternal_FieldTerminalPathValue struct {
	TsConditionInternal_FieldTerminalPath
	value interface{}
}

var _ TsConditionInternal_FieldPathValue = (*TsConditionInternal_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Internal' as interface{}
func (fpv *TsConditionInternal_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *TsConditionInternal_FieldTerminalPathValue) AsCommonKeyKsetValue() ([]byte, bool) {
	res, ok := fpv.value.([]byte)
	return res, ok
}
func (fpv *TsConditionInternal_FieldTerminalPathValue) AsEntrySpecGenerationValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *TsConditionInternal_FieldTerminalPathValue) AsAlertingLocationValue() (policy.Policy_Spec_ProcessingLocation, bool) {
	res, ok := fpv.value.(policy.Policy_Spec_ProcessingLocation)
	return res, ok
}

// SetTo stores value for selected field for object Internal
func (fpv *TsConditionInternal_FieldTerminalPathValue) SetTo(target **TsCondition_Internal) {
	if *target == nil {
		*target = new(TsCondition_Internal)
	}
	switch fpv.selector {
	case TsConditionInternal_FieldPathSelectorCommonKeyKset:
		(*target).CommonKeyKset = fpv.value.([]byte)
	case TsConditionInternal_FieldPathSelectorEntrySpecGeneration:
		(*target).EntrySpecGeneration = fpv.value.(int32)
	case TsConditionInternal_FieldPathSelectorAlertingLocation:
		(*target).AlertingLocation = fpv.value.(policy.Policy_Spec_ProcessingLocation)
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Internal: %d", fpv.selector))
	}
}

func (fpv *TsConditionInternal_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*TsCondition_Internal)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'TsConditionInternal_FieldTerminalPathValue' with the value under path in 'TsCondition_Internal'.
func (fpv *TsConditionInternal_FieldTerminalPathValue) CompareWith(source *TsCondition_Internal) (int, bool) {
	switch fpv.selector {
	case TsConditionInternal_FieldPathSelectorCommonKeyKset:
		return 0, false
	case TsConditionInternal_FieldPathSelectorEntrySpecGeneration:
		leftValue := fpv.value.(int32)
		rightValue := source.GetEntrySpecGeneration()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case TsConditionInternal_FieldPathSelectorAlertingLocation:
		leftValue := fpv.value.(policy.Policy_Spec_ProcessingLocation)
		rightValue := source.GetAlertingLocation()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Internal: %d", fpv.selector))
	}
}

func (fpv *TsConditionInternal_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*TsCondition_Internal))
}

// TsConditionInternal_FieldPathArrayItemValue allows storing single item in Path-specific values for Internal according to their type
// Present only for array (repeated) types.
type TsConditionInternal_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	TsConditionInternal_FieldPath
	ContainsValue(*TsCondition_Internal) bool
}

// ParseTsConditionInternal_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseTsConditionInternal_FieldPathArrayItemValue(pathStr, valueStr string) (TsConditionInternal_FieldPathArrayItemValue, error) {
	fp, err := ParseTsConditionInternal_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Internal field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(TsConditionInternal_FieldPathArrayItemValue), nil
}

func MustParseTsConditionInternal_FieldPathArrayItemValue(pathStr, valueStr string) TsConditionInternal_FieldPathArrayItemValue {
	fpaiv, err := ParseTsConditionInternal_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type TsConditionInternal_FieldTerminalPathArrayItemValue struct {
	TsConditionInternal_FieldTerminalPath
	value interface{}
}

var _ TsConditionInternal_FieldPathArrayItemValue = (*TsConditionInternal_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object TsCondition_Internal as interface{}
func (fpaiv *TsConditionInternal_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *TsConditionInternal_FieldTerminalPathArrayItemValue) GetSingle(source *TsCondition_Internal) (interface{}, bool) {
	return nil, false
}

func (fpaiv *TsConditionInternal_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*TsCondition_Internal))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Internal'
func (fpaiv *TsConditionInternal_FieldTerminalPathArrayItemValue) ContainsValue(source *TsCondition_Internal) bool {
	slice := fpaiv.TsConditionInternal_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// TsConditionInternal_FieldPathArrayOfValues allows storing slice of values for Internal fields according to their type
type TsConditionInternal_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	TsConditionInternal_FieldPath
}

func ParseTsConditionInternal_FieldPathArrayOfValues(pathStr, valuesStr string) (TsConditionInternal_FieldPathArrayOfValues, error) {
	fp, err := ParseTsConditionInternal_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Internal field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(TsConditionInternal_FieldPathArrayOfValues), nil
}

func MustParseTsConditionInternal_FieldPathArrayOfValues(pathStr, valuesStr string) TsConditionInternal_FieldPathArrayOfValues {
	fpaov, err := ParseTsConditionInternal_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type TsConditionInternal_FieldTerminalPathArrayOfValues struct {
	TsConditionInternal_FieldTerminalPath
	values interface{}
}

var _ TsConditionInternal_FieldPathArrayOfValues = (*TsConditionInternal_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *TsConditionInternal_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case TsConditionInternal_FieldPathSelectorCommonKeyKset:
		for _, v := range fpaov.values.([][]byte) {
			values = append(values, v)
		}
	case TsConditionInternal_FieldPathSelectorEntrySpecGeneration:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case TsConditionInternal_FieldPathSelectorAlertingLocation:
		for _, v := range fpaov.values.([]policy.Policy_Spec_ProcessingLocation) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *TsConditionInternal_FieldTerminalPathArrayOfValues) AsCommonKeyKsetArrayOfValues() ([][]byte, bool) {
	res, ok := fpaov.values.([][]byte)
	return res, ok
}
func (fpaov *TsConditionInternal_FieldTerminalPathArrayOfValues) AsEntrySpecGenerationArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *TsConditionInternal_FieldTerminalPathArrayOfValues) AsAlertingLocationArrayOfValues() ([]policy.Policy_Spec_ProcessingLocation, bool) {
	res, ok := fpaov.values.([]policy.Policy_Spec_ProcessingLocation)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type TsConditionSelector_FieldPath interface {
	gotenobject.FieldPath
	Selector() TsConditionSelector_FieldPathSelector
	Get(source *TsCondition_Selector) []interface{}
	GetSingle(source *TsCondition_Selector) (interface{}, bool)
	ClearValue(item *TsCondition_Selector)

	// Those methods build corresponding TsConditionSelector_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) TsConditionSelector_FieldPathValue
	WithIArrayOfValues(values interface{}) TsConditionSelector_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) TsConditionSelector_FieldPathArrayItemValue
}

type TsConditionSelector_FieldPathSelector int32

const (
	TsConditionSelector_FieldPathSelectorMetricTypes          TsConditionSelector_FieldPathSelector = 0
	TsConditionSelector_FieldPathSelectorResourceTypes        TsConditionSelector_FieldPathSelector = 1
	TsConditionSelector_FieldPathSelectorCommonMetricLabels   TsConditionSelector_FieldPathSelector = 2
	TsConditionSelector_FieldPathSelectorCommonResourceLabels TsConditionSelector_FieldPathSelector = 3
)

func (s TsConditionSelector_FieldPathSelector) String() string {
	switch s {
	case TsConditionSelector_FieldPathSelectorMetricTypes:
		return "metric_types"
	case TsConditionSelector_FieldPathSelectorResourceTypes:
		return "resource_types"
	case TsConditionSelector_FieldPathSelectorCommonMetricLabels:
		return "common_metric_labels"
	case TsConditionSelector_FieldPathSelectorCommonResourceLabels:
		return "common_resource_labels"
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Selector: %d", s))
	}
}

func BuildTsConditionSelector_FieldPath(fp gotenobject.RawFieldPath) (TsConditionSelector_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object TsCondition_Selector")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "metric_types", "metricTypes", "metric-types":
			return &TsConditionSelector_FieldTerminalPath{selector: TsConditionSelector_FieldPathSelectorMetricTypes}, nil
		case "resource_types", "resourceTypes", "resource-types":
			return &TsConditionSelector_FieldTerminalPath{selector: TsConditionSelector_FieldPathSelectorResourceTypes}, nil
		case "common_metric_labels", "commonMetricLabels", "common-metric-labels":
			return &TsConditionSelector_FieldTerminalPath{selector: TsConditionSelector_FieldPathSelectorCommonMetricLabels}, nil
		case "common_resource_labels", "commonResourceLabels", "common-resource-labels":
			return &TsConditionSelector_FieldTerminalPath{selector: TsConditionSelector_FieldPathSelectorCommonResourceLabels}, nil
		}
	} else {
		switch fp[0] {
		case "common_metric_labels", "commonMetricLabels", "common-metric-labels":
			if len(fp) > 2 {
				return nil, status.Errorf(codes.InvalidArgument, "sub path for maps ('%s') are not supported (object TsCondition_Selector)", fp)
			}
			return &TsConditionSelector_FieldPathMap{selector: TsConditionSelector_FieldPathSelectorCommonMetricLabels, key: fp[1]}, nil
		case "common_resource_labels", "commonResourceLabels", "common-resource-labels":
			if len(fp) > 2 {
				return nil, status.Errorf(codes.InvalidArgument, "sub path for maps ('%s') are not supported (object TsCondition_Selector)", fp)
			}
			return &TsConditionSelector_FieldPathMap{selector: TsConditionSelector_FieldPathSelectorCommonResourceLabels, key: fp[1]}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object TsCondition_Selector", fp)
}

func ParseTsConditionSelector_FieldPath(rawField string) (TsConditionSelector_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildTsConditionSelector_FieldPath(fp)
}

func MustParseTsConditionSelector_FieldPath(rawField string) TsConditionSelector_FieldPath {
	fp, err := ParseTsConditionSelector_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type TsConditionSelector_FieldTerminalPath struct {
	selector TsConditionSelector_FieldPathSelector
}

var _ TsConditionSelector_FieldPath = (*TsConditionSelector_FieldTerminalPath)(nil)

func (fp *TsConditionSelector_FieldTerminalPath) Selector() TsConditionSelector_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *TsConditionSelector_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *TsConditionSelector_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source TsCondition_Selector
func (fp *TsConditionSelector_FieldTerminalPath) Get(source *TsCondition_Selector) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case TsConditionSelector_FieldPathSelectorMetricTypes:
			for _, value := range source.GetMetricTypes() {
				values = append(values, value)
			}
		case TsConditionSelector_FieldPathSelectorResourceTypes:
			for _, value := range source.GetResourceTypes() {
				values = append(values, value)
			}
		case TsConditionSelector_FieldPathSelectorCommonMetricLabels:
			if source.CommonMetricLabels != nil {
				values = append(values, source.CommonMetricLabels)
			}
		case TsConditionSelector_FieldPathSelectorCommonResourceLabels:
			if source.CommonResourceLabels != nil {
				values = append(values, source.CommonResourceLabels)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for TsCondition_Selector: %d", fp.selector))
		}
	}
	return
}

func (fp *TsConditionSelector_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*TsCondition_Selector))
}

// GetSingle returns value pointed by specific field of from source TsCondition_Selector
func (fp *TsConditionSelector_FieldTerminalPath) GetSingle(source *TsCondition_Selector) (interface{}, bool) {
	switch fp.selector {
	case TsConditionSelector_FieldPathSelectorMetricTypes:
		res := source.GetMetricTypes()
		return res, res != nil
	case TsConditionSelector_FieldPathSelectorResourceTypes:
		res := source.GetResourceTypes()
		return res, res != nil
	case TsConditionSelector_FieldPathSelectorCommonMetricLabels:
		res := source.GetCommonMetricLabels()
		return res, res != nil
	case TsConditionSelector_FieldPathSelectorCommonResourceLabels:
		res := source.GetCommonResourceLabels()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Selector: %d", fp.selector))
	}
}

func (fp *TsConditionSelector_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*TsCondition_Selector))
}

// GetDefault returns a default value of the field type
func (fp *TsConditionSelector_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case TsConditionSelector_FieldPathSelectorMetricTypes:
		return ([]string)(nil)
	case TsConditionSelector_FieldPathSelectorResourceTypes:
		return ([]string)(nil)
	case TsConditionSelector_FieldPathSelectorCommonMetricLabels:
		return (map[string]*TsCondition_Selector_Strings)(nil)
	case TsConditionSelector_FieldPathSelectorCommonResourceLabels:
		return (map[string]*TsCondition_Selector_Strings)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Selector: %d", fp.selector))
	}
}

func (fp *TsConditionSelector_FieldTerminalPath) ClearValue(item *TsCondition_Selector) {
	if item != nil {
		switch fp.selector {
		case TsConditionSelector_FieldPathSelectorMetricTypes:
			item.MetricTypes = nil
		case TsConditionSelector_FieldPathSelectorResourceTypes:
			item.ResourceTypes = nil
		case TsConditionSelector_FieldPathSelectorCommonMetricLabels:
			item.CommonMetricLabels = nil
		case TsConditionSelector_FieldPathSelectorCommonResourceLabels:
			item.CommonResourceLabels = nil
		default:
			panic(fmt.Sprintf("Invalid selector for TsCondition_Selector: %d", fp.selector))
		}
	}
}

func (fp *TsConditionSelector_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*TsCondition_Selector))
}

// IsLeaf - whether field path is holds simple value
func (fp *TsConditionSelector_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == TsConditionSelector_FieldPathSelectorMetricTypes ||
		fp.selector == TsConditionSelector_FieldPathSelectorResourceTypes
}

func (fp *TsConditionSelector_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *TsConditionSelector_FieldTerminalPath) WithIValue(value interface{}) TsConditionSelector_FieldPathValue {
	switch fp.selector {
	case TsConditionSelector_FieldPathSelectorMetricTypes:
		return &TsConditionSelector_FieldTerminalPathValue{TsConditionSelector_FieldTerminalPath: *fp, value: value.([]string)}
	case TsConditionSelector_FieldPathSelectorResourceTypes:
		return &TsConditionSelector_FieldTerminalPathValue{TsConditionSelector_FieldTerminalPath: *fp, value: value.([]string)}
	case TsConditionSelector_FieldPathSelectorCommonMetricLabels:
		return &TsConditionSelector_FieldTerminalPathValue{TsConditionSelector_FieldTerminalPath: *fp, value: value.(map[string]*TsCondition_Selector_Strings)}
	case TsConditionSelector_FieldPathSelectorCommonResourceLabels:
		return &TsConditionSelector_FieldTerminalPathValue{TsConditionSelector_FieldTerminalPath: *fp, value: value.(map[string]*TsCondition_Selector_Strings)}
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Selector: %d", fp.selector))
	}
}

func (fp *TsConditionSelector_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *TsConditionSelector_FieldTerminalPath) WithIArrayOfValues(values interface{}) TsConditionSelector_FieldPathArrayOfValues {
	fpaov := &TsConditionSelector_FieldTerminalPathArrayOfValues{TsConditionSelector_FieldTerminalPath: *fp}
	switch fp.selector {
	case TsConditionSelector_FieldPathSelectorMetricTypes:
		return &TsConditionSelector_FieldTerminalPathArrayOfValues{TsConditionSelector_FieldTerminalPath: *fp, values: values.([][]string)}
	case TsConditionSelector_FieldPathSelectorResourceTypes:
		return &TsConditionSelector_FieldTerminalPathArrayOfValues{TsConditionSelector_FieldTerminalPath: *fp, values: values.([][]string)}
	case TsConditionSelector_FieldPathSelectorCommonMetricLabels:
		return &TsConditionSelector_FieldTerminalPathArrayOfValues{TsConditionSelector_FieldTerminalPath: *fp, values: values.([]map[string]*TsCondition_Selector_Strings)}
	case TsConditionSelector_FieldPathSelectorCommonResourceLabels:
		return &TsConditionSelector_FieldTerminalPathArrayOfValues{TsConditionSelector_FieldTerminalPath: *fp, values: values.([]map[string]*TsCondition_Selector_Strings)}
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Selector: %d", fp.selector))
	}
	return fpaov
}

func (fp *TsConditionSelector_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *TsConditionSelector_FieldTerminalPath) WithIArrayItemValue(value interface{}) TsConditionSelector_FieldPathArrayItemValue {
	switch fp.selector {
	case TsConditionSelector_FieldPathSelectorMetricTypes:
		return &TsConditionSelector_FieldTerminalPathArrayItemValue{TsConditionSelector_FieldTerminalPath: *fp, value: value.(string)}
	case TsConditionSelector_FieldPathSelectorResourceTypes:
		return &TsConditionSelector_FieldTerminalPathArrayItemValue{TsConditionSelector_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Selector: %d", fp.selector))
	}
}

func (fp *TsConditionSelector_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// FieldPath for map type with additional Key information
type TsConditionSelector_FieldPathMap struct {
	key      string
	selector TsConditionSelector_FieldPathSelector
}

var _ TsConditionSelector_FieldPath = (*TsConditionSelector_FieldPathMap)(nil)

func (fpm *TsConditionSelector_FieldPathMap) Selector() TsConditionSelector_FieldPathSelector {
	return fpm.selector
}

func (fpm *TsConditionSelector_FieldPathMap) Key() string {
	return fpm.key
}

// String returns path representation in proto convention
func (fpm *TsConditionSelector_FieldPathMap) String() string {
	return fpm.selector.String() + "." + fpm.key
}

// JSONString returns path representation is JSON convention. Note that map keys are not transformed
func (fpm *TsConditionSelector_FieldPathMap) JSONString() string {
	return strcase.ToLowerCamel(fpm.selector.String()) + "." + fpm.key
}

// Get returns all values pointed by selected field map key from source TsCondition_Selector
func (fpm *TsConditionSelector_FieldPathMap) Get(source *TsCondition_Selector) (values []interface{}) {
	switch fpm.selector {
	case TsConditionSelector_FieldPathSelectorCommonMetricLabels:
		if value, ok := source.GetCommonMetricLabels()[fpm.key]; ok {
			values = append(values, value)
		}
	case TsConditionSelector_FieldPathSelectorCommonResourceLabels:
		if value, ok := source.GetCommonResourceLabels()[fpm.key]; ok {
			values = append(values, value)
		}
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Selector: %d", fpm.selector))
	}
	return
}

func (fpm *TsConditionSelector_FieldPathMap) GetRaw(source proto.Message) []interface{} {
	return fpm.Get(source.(*TsCondition_Selector))
}

// GetSingle returns value by selected field map key from source TsCondition_Selector
func (fpm *TsConditionSelector_FieldPathMap) GetSingle(source *TsCondition_Selector) (interface{}, bool) {
	switch fpm.selector {
	case TsConditionSelector_FieldPathSelectorCommonMetricLabels:
		res, ok := source.GetCommonMetricLabels()[fpm.key]
		return res, ok
	case TsConditionSelector_FieldPathSelectorCommonResourceLabels:
		res, ok := source.GetCommonResourceLabels()[fpm.key]
		return res, ok
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Selector: %d", fpm.selector))
	}
}

func (fpm *TsConditionSelector_FieldPathMap) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpm.GetSingle(source.(*TsCondition_Selector))
}

// GetDefault returns a default value of the field type
func (fpm *TsConditionSelector_FieldPathMap) GetDefault() interface{} {
	switch fpm.selector {
	case TsConditionSelector_FieldPathSelectorCommonMetricLabels:
		var v *TsCondition_Selector_Strings
		return v
	case TsConditionSelector_FieldPathSelectorCommonResourceLabels:
		var v *TsCondition_Selector_Strings
		return v
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Selector: %d", fpm.selector))
	}
}

func (fpm *TsConditionSelector_FieldPathMap) ClearValue(item *TsCondition_Selector) {
	if item != nil {
		switch fpm.selector {
		case TsConditionSelector_FieldPathSelectorCommonMetricLabels:
			delete(item.CommonMetricLabels, fpm.key)
		case TsConditionSelector_FieldPathSelectorCommonResourceLabels:
			delete(item.CommonResourceLabels, fpm.key)
		default:
			panic(fmt.Sprintf("Invalid selector for TsCondition_Selector: %d", fpm.selector))
		}
	}
}

func (fpm *TsConditionSelector_FieldPathMap) ClearValueRaw(item proto.Message) {
	fpm.ClearValue(item.(*TsCondition_Selector))
}

// IsLeaf - whether field path is holds simple value
func (fpm *TsConditionSelector_FieldPathMap) IsLeaf() bool {
	switch fpm.selector {
	case TsConditionSelector_FieldPathSelectorCommonMetricLabels:
		return false
	case TsConditionSelector_FieldPathSelectorCommonResourceLabels:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Selector: %d", fpm.selector))
	}
}

func (fpm *TsConditionSelector_FieldPathMap) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fpm}
}

func (fpm *TsConditionSelector_FieldPathMap) WithIValue(value interface{}) TsConditionSelector_FieldPathValue {
	switch fpm.selector {
	case TsConditionSelector_FieldPathSelectorCommonMetricLabels:
		return &TsConditionSelector_FieldPathMapValue{TsConditionSelector_FieldPathMap: *fpm, value: value.(*TsCondition_Selector_Strings)}
	case TsConditionSelector_FieldPathSelectorCommonResourceLabels:
		return &TsConditionSelector_FieldPathMapValue{TsConditionSelector_FieldPathMap: *fpm, value: value.(*TsCondition_Selector_Strings)}
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Selector: %d", fpm.selector))
	}
}

func (fpm *TsConditionSelector_FieldPathMap) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fpm.WithIValue(value)
}

func (fpm *TsConditionSelector_FieldPathMap) WithIArrayOfValues(values interface{}) TsConditionSelector_FieldPathArrayOfValues {
	switch fpm.selector {
	case TsConditionSelector_FieldPathSelectorCommonMetricLabels:
		return &TsConditionSelector_FieldPathMapArrayOfValues{TsConditionSelector_FieldPathMap: *fpm, values: values.([]*TsCondition_Selector_Strings)}
	case TsConditionSelector_FieldPathSelectorCommonResourceLabels:
		return &TsConditionSelector_FieldPathMapArrayOfValues{TsConditionSelector_FieldPathMap: *fpm, values: values.([]*TsCondition_Selector_Strings)}
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Selector: %d", fpm.selector))
	}
}

func (fpm *TsConditionSelector_FieldPathMap) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fpm.WithIArrayOfValues(values)
}

func (fpm *TsConditionSelector_FieldPathMap) WithIArrayItemValue(value interface{}) TsConditionSelector_FieldPathArrayItemValue {
	panic("Cannot create array item value from map fieldpath")
}

func (fpm *TsConditionSelector_FieldPathMap) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fpm.WithIArrayItemValue(value)
}

// TsConditionSelector_FieldPathValue allows storing values for Selector fields according to their type
type TsConditionSelector_FieldPathValue interface {
	TsConditionSelector_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **TsCondition_Selector)
	CompareWith(*TsCondition_Selector) (cmp int, comparable bool)
}

func ParseTsConditionSelector_FieldPathValue(pathStr, valueStr string) (TsConditionSelector_FieldPathValue, error) {
	fp, err := ParseTsConditionSelector_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Selector field path value from %s: %v", valueStr, err)
	}
	return fpv.(TsConditionSelector_FieldPathValue), nil
}

func MustParseTsConditionSelector_FieldPathValue(pathStr, valueStr string) TsConditionSelector_FieldPathValue {
	fpv, err := ParseTsConditionSelector_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type TsConditionSelector_FieldTerminalPathValue struct {
	TsConditionSelector_FieldTerminalPath
	value interface{}
}

var _ TsConditionSelector_FieldPathValue = (*TsConditionSelector_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Selector' as interface{}
func (fpv *TsConditionSelector_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *TsConditionSelector_FieldTerminalPathValue) AsMetricTypesValue() ([]string, bool) {
	res, ok := fpv.value.([]string)
	return res, ok
}
func (fpv *TsConditionSelector_FieldTerminalPathValue) AsResourceTypesValue() ([]string, bool) {
	res, ok := fpv.value.([]string)
	return res, ok
}
func (fpv *TsConditionSelector_FieldTerminalPathValue) AsCommonMetricLabelsValue() (map[string]*TsCondition_Selector_Strings, bool) {
	res, ok := fpv.value.(map[string]*TsCondition_Selector_Strings)
	return res, ok
}
func (fpv *TsConditionSelector_FieldTerminalPathValue) AsCommonResourceLabelsValue() (map[string]*TsCondition_Selector_Strings, bool) {
	res, ok := fpv.value.(map[string]*TsCondition_Selector_Strings)
	return res, ok
}

// SetTo stores value for selected field for object Selector
func (fpv *TsConditionSelector_FieldTerminalPathValue) SetTo(target **TsCondition_Selector) {
	if *target == nil {
		*target = new(TsCondition_Selector)
	}
	switch fpv.selector {
	case TsConditionSelector_FieldPathSelectorMetricTypes:
		(*target).MetricTypes = fpv.value.([]string)
	case TsConditionSelector_FieldPathSelectorResourceTypes:
		(*target).ResourceTypes = fpv.value.([]string)
	case TsConditionSelector_FieldPathSelectorCommonMetricLabels:
		(*target).CommonMetricLabels = fpv.value.(map[string]*TsCondition_Selector_Strings)
	case TsConditionSelector_FieldPathSelectorCommonResourceLabels:
		(*target).CommonResourceLabels = fpv.value.(map[string]*TsCondition_Selector_Strings)
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Selector: %d", fpv.selector))
	}
}

func (fpv *TsConditionSelector_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*TsCondition_Selector)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'TsConditionSelector_FieldTerminalPathValue' with the value under path in 'TsCondition_Selector'.
func (fpv *TsConditionSelector_FieldTerminalPathValue) CompareWith(source *TsCondition_Selector) (int, bool) {
	switch fpv.selector {
	case TsConditionSelector_FieldPathSelectorMetricTypes:
		return 0, false
	case TsConditionSelector_FieldPathSelectorResourceTypes:
		return 0, false
	case TsConditionSelector_FieldPathSelectorCommonMetricLabels:
		return 0, false
	case TsConditionSelector_FieldPathSelectorCommonResourceLabels:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Selector: %d", fpv.selector))
	}
}

func (fpv *TsConditionSelector_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*TsCondition_Selector))
}

type TsConditionSelector_FieldPathMapValue struct {
	TsConditionSelector_FieldPathMap
	value interface{}
}

var _ TsConditionSelector_FieldPathValue = (*TsConditionSelector_FieldPathMapValue)(nil)

// GetValue returns value stored under selected field in Selector as interface{}
func (fpmv *TsConditionSelector_FieldPathMapValue) GetRawValue() interface{} {
	return fpmv.value
}
func (fpmv *TsConditionSelector_FieldPathMapValue) AsCommonMetricLabelsElementValue() (*TsCondition_Selector_Strings, bool) {
	res, ok := fpmv.value.(*TsCondition_Selector_Strings)
	return res, ok
}
func (fpmv *TsConditionSelector_FieldPathMapValue) AsCommonResourceLabelsElementValue() (*TsCondition_Selector_Strings, bool) {
	res, ok := fpmv.value.(*TsCondition_Selector_Strings)
	return res, ok
}

// SetTo stores value for selected field in Selector
func (fpmv *TsConditionSelector_FieldPathMapValue) SetTo(target **TsCondition_Selector) {
	if *target == nil {
		*target = new(TsCondition_Selector)
	}
	switch fpmv.selector {
	case TsConditionSelector_FieldPathSelectorCommonMetricLabels:
		if (*target).CommonMetricLabels == nil {
			(*target).CommonMetricLabels = make(map[string]*TsCondition_Selector_Strings)
		}
		(*target).CommonMetricLabels[fpmv.key] = fpmv.value.(*TsCondition_Selector_Strings)
	case TsConditionSelector_FieldPathSelectorCommonResourceLabels:
		if (*target).CommonResourceLabels == nil {
			(*target).CommonResourceLabels = make(map[string]*TsCondition_Selector_Strings)
		}
		(*target).CommonResourceLabels[fpmv.key] = fpmv.value.(*TsCondition_Selector_Strings)
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Selector: %d", fpmv.selector))
	}
}

func (fpmv *TsConditionSelector_FieldPathMapValue) SetToRaw(target proto.Message) {
	typedObject := target.(*TsCondition_Selector)
	fpmv.SetTo(&typedObject)
}

// CompareWith compares value in the 'TsConditionSelector_FieldPathMapValue' with the value under path in 'TsCondition_Selector'.
func (fpmv *TsConditionSelector_FieldPathMapValue) CompareWith(source *TsCondition_Selector) (int, bool) {
	switch fpmv.selector {
	case TsConditionSelector_FieldPathSelectorCommonMetricLabels:
		return 0, false
	case TsConditionSelector_FieldPathSelectorCommonResourceLabels:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Selector: %d", fpmv.selector))
	}
}

func (fpmv *TsConditionSelector_FieldPathMapValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpmv.CompareWith(source.(*TsCondition_Selector))
}

// TsConditionSelector_FieldPathArrayItemValue allows storing single item in Path-specific values for Selector according to their type
// Present only for array (repeated) types.
type TsConditionSelector_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	TsConditionSelector_FieldPath
	ContainsValue(*TsCondition_Selector) bool
}

// ParseTsConditionSelector_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseTsConditionSelector_FieldPathArrayItemValue(pathStr, valueStr string) (TsConditionSelector_FieldPathArrayItemValue, error) {
	fp, err := ParseTsConditionSelector_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Selector field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(TsConditionSelector_FieldPathArrayItemValue), nil
}

func MustParseTsConditionSelector_FieldPathArrayItemValue(pathStr, valueStr string) TsConditionSelector_FieldPathArrayItemValue {
	fpaiv, err := ParseTsConditionSelector_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type TsConditionSelector_FieldTerminalPathArrayItemValue struct {
	TsConditionSelector_FieldTerminalPath
	value interface{}
}

var _ TsConditionSelector_FieldPathArrayItemValue = (*TsConditionSelector_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object TsCondition_Selector as interface{}
func (fpaiv *TsConditionSelector_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *TsConditionSelector_FieldTerminalPathArrayItemValue) AsMetricTypesItemValue() (string, bool) {
	res, ok := fpaiv.value.(string)
	return res, ok
}
func (fpaiv *TsConditionSelector_FieldTerminalPathArrayItemValue) AsResourceTypesItemValue() (string, bool) {
	res, ok := fpaiv.value.(string)
	return res, ok
}

func (fpaiv *TsConditionSelector_FieldTerminalPathArrayItemValue) GetSingle(source *TsCondition_Selector) (interface{}, bool) {
	return nil, false
}

func (fpaiv *TsConditionSelector_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*TsCondition_Selector))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Selector'
func (fpaiv *TsConditionSelector_FieldTerminalPathArrayItemValue) ContainsValue(source *TsCondition_Selector) bool {
	slice := fpaiv.TsConditionSelector_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// TsConditionSelector_FieldPathArrayOfValues allows storing slice of values for Selector fields according to their type
type TsConditionSelector_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	TsConditionSelector_FieldPath
}

func ParseTsConditionSelector_FieldPathArrayOfValues(pathStr, valuesStr string) (TsConditionSelector_FieldPathArrayOfValues, error) {
	fp, err := ParseTsConditionSelector_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Selector field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(TsConditionSelector_FieldPathArrayOfValues), nil
}

func MustParseTsConditionSelector_FieldPathArrayOfValues(pathStr, valuesStr string) TsConditionSelector_FieldPathArrayOfValues {
	fpaov, err := ParseTsConditionSelector_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type TsConditionSelector_FieldTerminalPathArrayOfValues struct {
	TsConditionSelector_FieldTerminalPath
	values interface{}
}

var _ TsConditionSelector_FieldPathArrayOfValues = (*TsConditionSelector_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *TsConditionSelector_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case TsConditionSelector_FieldPathSelectorMetricTypes:
		for _, v := range fpaov.values.([][]string) {
			values = append(values, v)
		}
	case TsConditionSelector_FieldPathSelectorResourceTypes:
		for _, v := range fpaov.values.([][]string) {
			values = append(values, v)
		}
	case TsConditionSelector_FieldPathSelectorCommonMetricLabels:
		for _, v := range fpaov.values.([]map[string]*TsCondition_Selector_Strings) {
			values = append(values, v)
		}
	case TsConditionSelector_FieldPathSelectorCommonResourceLabels:
		for _, v := range fpaov.values.([]map[string]*TsCondition_Selector_Strings) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *TsConditionSelector_FieldTerminalPathArrayOfValues) AsMetricTypesArrayOfValues() ([][]string, bool) {
	res, ok := fpaov.values.([][]string)
	return res, ok
}
func (fpaov *TsConditionSelector_FieldTerminalPathArrayOfValues) AsResourceTypesArrayOfValues() ([][]string, bool) {
	res, ok := fpaov.values.([][]string)
	return res, ok
}
func (fpaov *TsConditionSelector_FieldTerminalPathArrayOfValues) AsCommonMetricLabelsArrayOfValues() ([]map[string]*TsCondition_Selector_Strings, bool) {
	res, ok := fpaov.values.([]map[string]*TsCondition_Selector_Strings)
	return res, ok
}
func (fpaov *TsConditionSelector_FieldTerminalPathArrayOfValues) AsCommonResourceLabelsArrayOfValues() ([]map[string]*TsCondition_Selector_Strings, bool) {
	res, ok := fpaov.values.([]map[string]*TsCondition_Selector_Strings)
	return res, ok
}

type TsConditionSelector_FieldPathMapArrayOfValues struct {
	TsConditionSelector_FieldPathMap
	values interface{}
}

var _ TsConditionSelector_FieldPathArrayOfValues = (*TsConditionSelector_FieldPathMapArrayOfValues)(nil)

func (fpmaov *TsConditionSelector_FieldPathMapArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpmaov.selector {
	case TsConditionSelector_FieldPathSelectorCommonMetricLabels:
		for _, v := range fpmaov.values.([]*TsCondition_Selector_Strings) {
			values = append(values, v)
		}
	case TsConditionSelector_FieldPathSelectorCommonResourceLabels:
		for _, v := range fpmaov.values.([]*TsCondition_Selector_Strings) {
			values = append(values, v)
		}
	}
	return
}
func (fpmaov *TsConditionSelector_FieldPathMapArrayOfValues) AsCommonMetricLabelsArrayOfElementValues() ([]*TsCondition_Selector_Strings, bool) {
	res, ok := fpmaov.values.([]*TsCondition_Selector_Strings)
	return res, ok
}
func (fpmaov *TsConditionSelector_FieldPathMapArrayOfValues) AsCommonResourceLabelsArrayOfElementValues() ([]*TsCondition_Selector_Strings, bool) {
	res, ok := fpmaov.values.([]*TsCondition_Selector_Strings)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type TsConditionSpecQuery_FieldPath interface {
	gotenobject.FieldPath
	Selector() TsConditionSpecQuery_FieldPathSelector
	Get(source *TsCondition_Spec_Query) []interface{}
	GetSingle(source *TsCondition_Spec_Query) (interface{}, bool)
	ClearValue(item *TsCondition_Spec_Query)

	// Those methods build corresponding TsConditionSpecQuery_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) TsConditionSpecQuery_FieldPathValue
	WithIArrayOfValues(values interface{}) TsConditionSpecQuery_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) TsConditionSpecQuery_FieldPathArrayItemValue
}

type TsConditionSpecQuery_FieldPathSelector int32

const (
	TsConditionSpecQuery_FieldPathSelectorName     TsConditionSpecQuery_FieldPathSelector = 0
	TsConditionSpecQuery_FieldPathSelectorFilter   TsConditionSpecQuery_FieldPathSelector = 1
	TsConditionSpecQuery_FieldPathSelectorAligner  TsConditionSpecQuery_FieldPathSelector = 2
	TsConditionSpecQuery_FieldPathSelectorReducer  TsConditionSpecQuery_FieldPathSelector = 3
	TsConditionSpecQuery_FieldPathSelectorMaxValue TsConditionSpecQuery_FieldPathSelector = 4
)

func (s TsConditionSpecQuery_FieldPathSelector) String() string {
	switch s {
	case TsConditionSpecQuery_FieldPathSelectorName:
		return "name"
	case TsConditionSpecQuery_FieldPathSelectorFilter:
		return "filter"
	case TsConditionSpecQuery_FieldPathSelectorAligner:
		return "aligner"
	case TsConditionSpecQuery_FieldPathSelectorReducer:
		return "reducer"
	case TsConditionSpecQuery_FieldPathSelectorMaxValue:
		return "max_value"
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Spec_Query: %d", s))
	}
}

func BuildTsConditionSpecQuery_FieldPath(fp gotenobject.RawFieldPath) (TsConditionSpecQuery_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object TsCondition_Spec_Query")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &TsConditionSpecQuery_FieldTerminalPath{selector: TsConditionSpecQuery_FieldPathSelectorName}, nil
		case "filter":
			return &TsConditionSpecQuery_FieldTerminalPath{selector: TsConditionSpecQuery_FieldPathSelectorFilter}, nil
		case "aligner":
			return &TsConditionSpecQuery_FieldTerminalPath{selector: TsConditionSpecQuery_FieldPathSelectorAligner}, nil
		case "reducer":
			return &TsConditionSpecQuery_FieldTerminalPath{selector: TsConditionSpecQuery_FieldPathSelectorReducer}, nil
		case "max_value", "maxValue", "max-value":
			return &TsConditionSpecQuery_FieldTerminalPath{selector: TsConditionSpecQuery_FieldPathSelectorMaxValue}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object TsCondition_Spec_Query", fp)
}

func ParseTsConditionSpecQuery_FieldPath(rawField string) (TsConditionSpecQuery_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildTsConditionSpecQuery_FieldPath(fp)
}

func MustParseTsConditionSpecQuery_FieldPath(rawField string) TsConditionSpecQuery_FieldPath {
	fp, err := ParseTsConditionSpecQuery_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type TsConditionSpecQuery_FieldTerminalPath struct {
	selector TsConditionSpecQuery_FieldPathSelector
}

var _ TsConditionSpecQuery_FieldPath = (*TsConditionSpecQuery_FieldTerminalPath)(nil)

func (fp *TsConditionSpecQuery_FieldTerminalPath) Selector() TsConditionSpecQuery_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *TsConditionSpecQuery_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *TsConditionSpecQuery_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source TsCondition_Spec_Query
func (fp *TsConditionSpecQuery_FieldTerminalPath) Get(source *TsCondition_Spec_Query) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case TsConditionSpecQuery_FieldPathSelectorName:
			values = append(values, source.Name)
		case TsConditionSpecQuery_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case TsConditionSpecQuery_FieldPathSelectorAligner:
			values = append(values, source.Aligner)
		case TsConditionSpecQuery_FieldPathSelectorReducer:
			values = append(values, source.Reducer)
		case TsConditionSpecQuery_FieldPathSelectorMaxValue:
			values = append(values, source.MaxValue)
		default:
			panic(fmt.Sprintf("Invalid selector for TsCondition_Spec_Query: %d", fp.selector))
		}
	}
	return
}

func (fp *TsConditionSpecQuery_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*TsCondition_Spec_Query))
}

// GetSingle returns value pointed by specific field of from source TsCondition_Spec_Query
func (fp *TsConditionSpecQuery_FieldTerminalPath) GetSingle(source *TsCondition_Spec_Query) (interface{}, bool) {
	switch fp.selector {
	case TsConditionSpecQuery_FieldPathSelectorName:
		return source.GetName(), source != nil
	case TsConditionSpecQuery_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case TsConditionSpecQuery_FieldPathSelectorAligner:
		return source.GetAligner(), source != nil
	case TsConditionSpecQuery_FieldPathSelectorReducer:
		return source.GetReducer(), source != nil
	case TsConditionSpecQuery_FieldPathSelectorMaxValue:
		return source.GetMaxValue(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Spec_Query: %d", fp.selector))
	}
}

func (fp *TsConditionSpecQuery_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*TsCondition_Spec_Query))
}

// GetDefault returns a default value of the field type
func (fp *TsConditionSpecQuery_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case TsConditionSpecQuery_FieldPathSelectorName:
		return ""
	case TsConditionSpecQuery_FieldPathSelectorFilter:
		return (*monitoring_time_serie.Filter)(nil)
	case TsConditionSpecQuery_FieldPathSelectorAligner:
		return monitoring_common.Aggregation_ALIGN_NONE
	case TsConditionSpecQuery_FieldPathSelectorReducer:
		return monitoring_common.Aggregation_REDUCE_NONE
	case TsConditionSpecQuery_FieldPathSelectorMaxValue:
		return float64(0)
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Spec_Query: %d", fp.selector))
	}
}

func (fp *TsConditionSpecQuery_FieldTerminalPath) ClearValue(item *TsCondition_Spec_Query) {
	if item != nil {
		switch fp.selector {
		case TsConditionSpecQuery_FieldPathSelectorName:
			item.Name = ""
		case TsConditionSpecQuery_FieldPathSelectorFilter:
			item.Filter = nil
		case TsConditionSpecQuery_FieldPathSelectorAligner:
			item.Aligner = monitoring_common.Aggregation_ALIGN_NONE
		case TsConditionSpecQuery_FieldPathSelectorReducer:
			item.Reducer = monitoring_common.Aggregation_REDUCE_NONE
		case TsConditionSpecQuery_FieldPathSelectorMaxValue:
			item.MaxValue = float64(0)
		default:
			panic(fmt.Sprintf("Invalid selector for TsCondition_Spec_Query: %d", fp.selector))
		}
	}
}

func (fp *TsConditionSpecQuery_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*TsCondition_Spec_Query))
}

// IsLeaf - whether field path is holds simple value
func (fp *TsConditionSpecQuery_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == TsConditionSpecQuery_FieldPathSelectorName ||
		fp.selector == TsConditionSpecQuery_FieldPathSelectorFilter ||
		fp.selector == TsConditionSpecQuery_FieldPathSelectorAligner ||
		fp.selector == TsConditionSpecQuery_FieldPathSelectorReducer ||
		fp.selector == TsConditionSpecQuery_FieldPathSelectorMaxValue
}

func (fp *TsConditionSpecQuery_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *TsConditionSpecQuery_FieldTerminalPath) WithIValue(value interface{}) TsConditionSpecQuery_FieldPathValue {
	switch fp.selector {
	case TsConditionSpecQuery_FieldPathSelectorName:
		return &TsConditionSpecQuery_FieldTerminalPathValue{TsConditionSpecQuery_FieldTerminalPath: *fp, value: value.(string)}
	case TsConditionSpecQuery_FieldPathSelectorFilter:
		return &TsConditionSpecQuery_FieldTerminalPathValue{TsConditionSpecQuery_FieldTerminalPath: *fp, value: value.(*monitoring_time_serie.Filter)}
	case TsConditionSpecQuery_FieldPathSelectorAligner:
		return &TsConditionSpecQuery_FieldTerminalPathValue{TsConditionSpecQuery_FieldTerminalPath: *fp, value: value.(monitoring_common.Aggregation_Aligner)}
	case TsConditionSpecQuery_FieldPathSelectorReducer:
		return &TsConditionSpecQuery_FieldTerminalPathValue{TsConditionSpecQuery_FieldTerminalPath: *fp, value: value.(monitoring_common.Aggregation_Reducer)}
	case TsConditionSpecQuery_FieldPathSelectorMaxValue:
		return &TsConditionSpecQuery_FieldTerminalPathValue{TsConditionSpecQuery_FieldTerminalPath: *fp, value: value.(float64)}
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Spec_Query: %d", fp.selector))
	}
}

func (fp *TsConditionSpecQuery_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *TsConditionSpecQuery_FieldTerminalPath) WithIArrayOfValues(values interface{}) TsConditionSpecQuery_FieldPathArrayOfValues {
	fpaov := &TsConditionSpecQuery_FieldTerminalPathArrayOfValues{TsConditionSpecQuery_FieldTerminalPath: *fp}
	switch fp.selector {
	case TsConditionSpecQuery_FieldPathSelectorName:
		return &TsConditionSpecQuery_FieldTerminalPathArrayOfValues{TsConditionSpecQuery_FieldTerminalPath: *fp, values: values.([]string)}
	case TsConditionSpecQuery_FieldPathSelectorFilter:
		return &TsConditionSpecQuery_FieldTerminalPathArrayOfValues{TsConditionSpecQuery_FieldTerminalPath: *fp, values: values.([]*monitoring_time_serie.Filter)}
	case TsConditionSpecQuery_FieldPathSelectorAligner:
		return &TsConditionSpecQuery_FieldTerminalPathArrayOfValues{TsConditionSpecQuery_FieldTerminalPath: *fp, values: values.([]monitoring_common.Aggregation_Aligner)}
	case TsConditionSpecQuery_FieldPathSelectorReducer:
		return &TsConditionSpecQuery_FieldTerminalPathArrayOfValues{TsConditionSpecQuery_FieldTerminalPath: *fp, values: values.([]monitoring_common.Aggregation_Reducer)}
	case TsConditionSpecQuery_FieldPathSelectorMaxValue:
		return &TsConditionSpecQuery_FieldTerminalPathArrayOfValues{TsConditionSpecQuery_FieldTerminalPath: *fp, values: values.([]float64)}
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Spec_Query: %d", fp.selector))
	}
	return fpaov
}

func (fp *TsConditionSpecQuery_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *TsConditionSpecQuery_FieldTerminalPath) WithIArrayItemValue(value interface{}) TsConditionSpecQuery_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Spec_Query: %d", fp.selector))
	}
}

func (fp *TsConditionSpecQuery_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// TsConditionSpecQuery_FieldPathValue allows storing values for Query fields according to their type
type TsConditionSpecQuery_FieldPathValue interface {
	TsConditionSpecQuery_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **TsCondition_Spec_Query)
	CompareWith(*TsCondition_Spec_Query) (cmp int, comparable bool)
}

func ParseTsConditionSpecQuery_FieldPathValue(pathStr, valueStr string) (TsConditionSpecQuery_FieldPathValue, error) {
	fp, err := ParseTsConditionSpecQuery_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Query field path value from %s: %v", valueStr, err)
	}
	return fpv.(TsConditionSpecQuery_FieldPathValue), nil
}

func MustParseTsConditionSpecQuery_FieldPathValue(pathStr, valueStr string) TsConditionSpecQuery_FieldPathValue {
	fpv, err := ParseTsConditionSpecQuery_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type TsConditionSpecQuery_FieldTerminalPathValue struct {
	TsConditionSpecQuery_FieldTerminalPath
	value interface{}
}

var _ TsConditionSpecQuery_FieldPathValue = (*TsConditionSpecQuery_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Query' as interface{}
func (fpv *TsConditionSpecQuery_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *TsConditionSpecQuery_FieldTerminalPathValue) AsNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *TsConditionSpecQuery_FieldTerminalPathValue) AsFilterValue() (*monitoring_time_serie.Filter, bool) {
	res, ok := fpv.value.(*monitoring_time_serie.Filter)
	return res, ok
}
func (fpv *TsConditionSpecQuery_FieldTerminalPathValue) AsAlignerValue() (monitoring_common.Aggregation_Aligner, bool) {
	res, ok := fpv.value.(monitoring_common.Aggregation_Aligner)
	return res, ok
}
func (fpv *TsConditionSpecQuery_FieldTerminalPathValue) AsReducerValue() (monitoring_common.Aggregation_Reducer, bool) {
	res, ok := fpv.value.(monitoring_common.Aggregation_Reducer)
	return res, ok
}
func (fpv *TsConditionSpecQuery_FieldTerminalPathValue) AsMaxValueValue() (float64, bool) {
	res, ok := fpv.value.(float64)
	return res, ok
}

// SetTo stores value for selected field for object Query
func (fpv *TsConditionSpecQuery_FieldTerminalPathValue) SetTo(target **TsCondition_Spec_Query) {
	if *target == nil {
		*target = new(TsCondition_Spec_Query)
	}
	switch fpv.selector {
	case TsConditionSpecQuery_FieldPathSelectorName:
		(*target).Name = fpv.value.(string)
	case TsConditionSpecQuery_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*monitoring_time_serie.Filter)
	case TsConditionSpecQuery_FieldPathSelectorAligner:
		(*target).Aligner = fpv.value.(monitoring_common.Aggregation_Aligner)
	case TsConditionSpecQuery_FieldPathSelectorReducer:
		(*target).Reducer = fpv.value.(monitoring_common.Aggregation_Reducer)
	case TsConditionSpecQuery_FieldPathSelectorMaxValue:
		(*target).MaxValue = fpv.value.(float64)
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Spec_Query: %d", fpv.selector))
	}
}

func (fpv *TsConditionSpecQuery_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*TsCondition_Spec_Query)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'TsConditionSpecQuery_FieldTerminalPathValue' with the value under path in 'TsCondition_Spec_Query'.
func (fpv *TsConditionSpecQuery_FieldTerminalPathValue) CompareWith(source *TsCondition_Spec_Query) (int, bool) {
	switch fpv.selector {
	case TsConditionSpecQuery_FieldPathSelectorName:
		leftValue := fpv.value.(string)
		rightValue := source.GetName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case TsConditionSpecQuery_FieldPathSelectorFilter:
		return 0, false
	case TsConditionSpecQuery_FieldPathSelectorAligner:
		leftValue := fpv.value.(monitoring_common.Aggregation_Aligner)
		rightValue := source.GetAligner()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case TsConditionSpecQuery_FieldPathSelectorReducer:
		leftValue := fpv.value.(monitoring_common.Aggregation_Reducer)
		rightValue := source.GetReducer()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case TsConditionSpecQuery_FieldPathSelectorMaxValue:
		leftValue := fpv.value.(float64)
		rightValue := source.GetMaxValue()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Spec_Query: %d", fpv.selector))
	}
}

func (fpv *TsConditionSpecQuery_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*TsCondition_Spec_Query))
}

// TsConditionSpecQuery_FieldPathArrayItemValue allows storing single item in Path-specific values for Query according to their type
// Present only for array (repeated) types.
type TsConditionSpecQuery_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	TsConditionSpecQuery_FieldPath
	ContainsValue(*TsCondition_Spec_Query) bool
}

// ParseTsConditionSpecQuery_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseTsConditionSpecQuery_FieldPathArrayItemValue(pathStr, valueStr string) (TsConditionSpecQuery_FieldPathArrayItemValue, error) {
	fp, err := ParseTsConditionSpecQuery_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Query field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(TsConditionSpecQuery_FieldPathArrayItemValue), nil
}

func MustParseTsConditionSpecQuery_FieldPathArrayItemValue(pathStr, valueStr string) TsConditionSpecQuery_FieldPathArrayItemValue {
	fpaiv, err := ParseTsConditionSpecQuery_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type TsConditionSpecQuery_FieldTerminalPathArrayItemValue struct {
	TsConditionSpecQuery_FieldTerminalPath
	value interface{}
}

var _ TsConditionSpecQuery_FieldPathArrayItemValue = (*TsConditionSpecQuery_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object TsCondition_Spec_Query as interface{}
func (fpaiv *TsConditionSpecQuery_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *TsConditionSpecQuery_FieldTerminalPathArrayItemValue) GetSingle(source *TsCondition_Spec_Query) (interface{}, bool) {
	return nil, false
}

func (fpaiv *TsConditionSpecQuery_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*TsCondition_Spec_Query))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Query'
func (fpaiv *TsConditionSpecQuery_FieldTerminalPathArrayItemValue) ContainsValue(source *TsCondition_Spec_Query) bool {
	slice := fpaiv.TsConditionSpecQuery_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// TsConditionSpecQuery_FieldPathArrayOfValues allows storing slice of values for Query fields according to their type
type TsConditionSpecQuery_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	TsConditionSpecQuery_FieldPath
}

func ParseTsConditionSpecQuery_FieldPathArrayOfValues(pathStr, valuesStr string) (TsConditionSpecQuery_FieldPathArrayOfValues, error) {
	fp, err := ParseTsConditionSpecQuery_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Query field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(TsConditionSpecQuery_FieldPathArrayOfValues), nil
}

func MustParseTsConditionSpecQuery_FieldPathArrayOfValues(pathStr, valuesStr string) TsConditionSpecQuery_FieldPathArrayOfValues {
	fpaov, err := ParseTsConditionSpecQuery_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type TsConditionSpecQuery_FieldTerminalPathArrayOfValues struct {
	TsConditionSpecQuery_FieldTerminalPath
	values interface{}
}

var _ TsConditionSpecQuery_FieldPathArrayOfValues = (*TsConditionSpecQuery_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *TsConditionSpecQuery_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case TsConditionSpecQuery_FieldPathSelectorName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case TsConditionSpecQuery_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*monitoring_time_serie.Filter) {
			values = append(values, v)
		}
	case TsConditionSpecQuery_FieldPathSelectorAligner:
		for _, v := range fpaov.values.([]monitoring_common.Aggregation_Aligner) {
			values = append(values, v)
		}
	case TsConditionSpecQuery_FieldPathSelectorReducer:
		for _, v := range fpaov.values.([]monitoring_common.Aggregation_Reducer) {
			values = append(values, v)
		}
	case TsConditionSpecQuery_FieldPathSelectorMaxValue:
		for _, v := range fpaov.values.([]float64) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *TsConditionSpecQuery_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *TsConditionSpecQuery_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*monitoring_time_serie.Filter, bool) {
	res, ok := fpaov.values.([]*monitoring_time_serie.Filter)
	return res, ok
}
func (fpaov *TsConditionSpecQuery_FieldTerminalPathArrayOfValues) AsAlignerArrayOfValues() ([]monitoring_common.Aggregation_Aligner, bool) {
	res, ok := fpaov.values.([]monitoring_common.Aggregation_Aligner)
	return res, ok
}
func (fpaov *TsConditionSpecQuery_FieldTerminalPathArrayOfValues) AsReducerArrayOfValues() ([]monitoring_common.Aggregation_Reducer, bool) {
	res, ok := fpaov.values.([]monitoring_common.Aggregation_Reducer)
	return res, ok
}
func (fpaov *TsConditionSpecQuery_FieldTerminalPathArrayOfValues) AsMaxValueArrayOfValues() ([]float64, bool) {
	res, ok := fpaov.values.([]float64)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type TsConditionSpecThresholdAlertingCfg_FieldPath interface {
	gotenobject.FieldPath
	Selector() TsConditionSpecThresholdAlertingCfg_FieldPathSelector
	Get(source *TsCondition_Spec_ThresholdAlertingCfg) []interface{}
	GetSingle(source *TsCondition_Spec_ThresholdAlertingCfg) (interface{}, bool)
	ClearValue(item *TsCondition_Spec_ThresholdAlertingCfg)

	// Those methods build corresponding TsConditionSpecThresholdAlertingCfg_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) TsConditionSpecThresholdAlertingCfg_FieldPathValue
	WithIArrayOfValues(values interface{}) TsConditionSpecThresholdAlertingCfg_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) TsConditionSpecThresholdAlertingCfg_FieldPathArrayItemValue
}

type TsConditionSpecThresholdAlertingCfg_FieldPathSelector int32

const (
	TsConditionSpecThresholdAlertingCfg_FieldPathSelectorOperator                          TsConditionSpecThresholdAlertingCfg_FieldPathSelector = 0
	TsConditionSpecThresholdAlertingCfg_FieldPathSelectorAlignmentPeriod                   TsConditionSpecThresholdAlertingCfg_FieldPathSelector = 1
	TsConditionSpecThresholdAlertingCfg_FieldPathSelectorRaiseAfter                        TsConditionSpecThresholdAlertingCfg_FieldPathSelector = 2
	TsConditionSpecThresholdAlertingCfg_FieldPathSelectorSilenceAfter                      TsConditionSpecThresholdAlertingCfg_FieldPathSelector = 3
	TsConditionSpecThresholdAlertingCfg_FieldPathSelectorPerQueryThresholds                TsConditionSpecThresholdAlertingCfg_FieldPathSelector = 4
	TsConditionSpecThresholdAlertingCfg_FieldPathSelectorAdaptiveThresholdsDetectionPeriod TsConditionSpecThresholdAlertingCfg_FieldPathSelector = 5
)

func (s TsConditionSpecThresholdAlertingCfg_FieldPathSelector) String() string {
	switch s {
	case TsConditionSpecThresholdAlertingCfg_FieldPathSelectorOperator:
		return "operator"
	case TsConditionSpecThresholdAlertingCfg_FieldPathSelectorAlignmentPeriod:
		return "alignment_period"
	case TsConditionSpecThresholdAlertingCfg_FieldPathSelectorRaiseAfter:
		return "raise_after"
	case TsConditionSpecThresholdAlertingCfg_FieldPathSelectorSilenceAfter:
		return "silence_after"
	case TsConditionSpecThresholdAlertingCfg_FieldPathSelectorPerQueryThresholds:
		return "per_query_thresholds"
	case TsConditionSpecThresholdAlertingCfg_FieldPathSelectorAdaptiveThresholdsDetectionPeriod:
		return "adaptive_thresholds_detection_period"
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Spec_ThresholdAlertingCfg: %d", s))
	}
}

func BuildTsConditionSpecThresholdAlertingCfg_FieldPath(fp gotenobject.RawFieldPath) (TsConditionSpecThresholdAlertingCfg_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object TsCondition_Spec_ThresholdAlertingCfg")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "operator":
			return &TsConditionSpecThresholdAlertingCfg_FieldTerminalPath{selector: TsConditionSpecThresholdAlertingCfg_FieldPathSelectorOperator}, nil
		case "alignment_period", "alignmentPeriod", "alignment-period":
			return &TsConditionSpecThresholdAlertingCfg_FieldTerminalPath{selector: TsConditionSpecThresholdAlertingCfg_FieldPathSelectorAlignmentPeriod}, nil
		case "raise_after", "raiseAfter", "raise-after":
			return &TsConditionSpecThresholdAlertingCfg_FieldTerminalPath{selector: TsConditionSpecThresholdAlertingCfg_FieldPathSelectorRaiseAfter}, nil
		case "silence_after", "silenceAfter", "silence-after":
			return &TsConditionSpecThresholdAlertingCfg_FieldTerminalPath{selector: TsConditionSpecThresholdAlertingCfg_FieldPathSelectorSilenceAfter}, nil
		case "per_query_thresholds", "perQueryThresholds", "per-query-thresholds":
			return &TsConditionSpecThresholdAlertingCfg_FieldTerminalPath{selector: TsConditionSpecThresholdAlertingCfg_FieldPathSelectorPerQueryThresholds}, nil
		case "adaptive_thresholds_detection_period", "adaptiveThresholdsDetectionPeriod", "adaptive-thresholds-detection-period":
			return &TsConditionSpecThresholdAlertingCfg_FieldTerminalPath{selector: TsConditionSpecThresholdAlertingCfg_FieldPathSelectorAdaptiveThresholdsDetectionPeriod}, nil
		}
	} else {
		switch fp[0] {
		case "per_query_thresholds", "perQueryThresholds", "per-query-thresholds":
			if subpath, err := BuildTsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &TsConditionSpecThresholdAlertingCfg_FieldSubPath{selector: TsConditionSpecThresholdAlertingCfg_FieldPathSelectorPerQueryThresholds, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object TsCondition_Spec_ThresholdAlertingCfg", fp)
}

func ParseTsConditionSpecThresholdAlertingCfg_FieldPath(rawField string) (TsConditionSpecThresholdAlertingCfg_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildTsConditionSpecThresholdAlertingCfg_FieldPath(fp)
}

func MustParseTsConditionSpecThresholdAlertingCfg_FieldPath(rawField string) TsConditionSpecThresholdAlertingCfg_FieldPath {
	fp, err := ParseTsConditionSpecThresholdAlertingCfg_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type TsConditionSpecThresholdAlertingCfg_FieldTerminalPath struct {
	selector TsConditionSpecThresholdAlertingCfg_FieldPathSelector
}

var _ TsConditionSpecThresholdAlertingCfg_FieldPath = (*TsConditionSpecThresholdAlertingCfg_FieldTerminalPath)(nil)

func (fp *TsConditionSpecThresholdAlertingCfg_FieldTerminalPath) Selector() TsConditionSpecThresholdAlertingCfg_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *TsConditionSpecThresholdAlertingCfg_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *TsConditionSpecThresholdAlertingCfg_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source TsCondition_Spec_ThresholdAlertingCfg
func (fp *TsConditionSpecThresholdAlertingCfg_FieldTerminalPath) Get(source *TsCondition_Spec_ThresholdAlertingCfg) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case TsConditionSpecThresholdAlertingCfg_FieldPathSelectorOperator:
			values = append(values, source.Operator)
		case TsConditionSpecThresholdAlertingCfg_FieldPathSelectorAlignmentPeriod:
			if source.AlignmentPeriod != nil {
				values = append(values, source.AlignmentPeriod)
			}
		case TsConditionSpecThresholdAlertingCfg_FieldPathSelectorRaiseAfter:
			if source.RaiseAfter != nil {
				values = append(values, source.RaiseAfter)
			}
		case TsConditionSpecThresholdAlertingCfg_FieldPathSelectorSilenceAfter:
			if source.SilenceAfter != nil {
				values = append(values, source.SilenceAfter)
			}
		case TsConditionSpecThresholdAlertingCfg_FieldPathSelectorPerQueryThresholds:
			for _, value := range source.GetPerQueryThresholds() {
				values = append(values, value)
			}
		case TsConditionSpecThresholdAlertingCfg_FieldPathSelectorAdaptiveThresholdsDetectionPeriod:
			if source.AdaptiveThresholdsDetectionPeriod != nil {
				values = append(values, source.AdaptiveThresholdsDetectionPeriod)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for TsCondition_Spec_ThresholdAlertingCfg: %d", fp.selector))
		}
	}
	return
}

func (fp *TsConditionSpecThresholdAlertingCfg_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*TsCondition_Spec_ThresholdAlertingCfg))
}

// GetSingle returns value pointed by specific field of from source TsCondition_Spec_ThresholdAlertingCfg
func (fp *TsConditionSpecThresholdAlertingCfg_FieldTerminalPath) GetSingle(source *TsCondition_Spec_ThresholdAlertingCfg) (interface{}, bool) {
	switch fp.selector {
	case TsConditionSpecThresholdAlertingCfg_FieldPathSelectorOperator:
		return source.GetOperator(), source != nil
	case TsConditionSpecThresholdAlertingCfg_FieldPathSelectorAlignmentPeriod:
		res := source.GetAlignmentPeriod()
		return res, res != nil
	case TsConditionSpecThresholdAlertingCfg_FieldPathSelectorRaiseAfter:
		res := source.GetRaiseAfter()
		return res, res != nil
	case TsConditionSpecThresholdAlertingCfg_FieldPathSelectorSilenceAfter:
		res := source.GetSilenceAfter()
		return res, res != nil
	case TsConditionSpecThresholdAlertingCfg_FieldPathSelectorPerQueryThresholds:
		res := source.GetPerQueryThresholds()
		return res, res != nil
	case TsConditionSpecThresholdAlertingCfg_FieldPathSelectorAdaptiveThresholdsDetectionPeriod:
		res := source.GetAdaptiveThresholdsDetectionPeriod()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Spec_ThresholdAlertingCfg: %d", fp.selector))
	}
}

func (fp *TsConditionSpecThresholdAlertingCfg_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*TsCondition_Spec_ThresholdAlertingCfg))
}

// GetDefault returns a default value of the field type
func (fp *TsConditionSpecThresholdAlertingCfg_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case TsConditionSpecThresholdAlertingCfg_FieldPathSelectorOperator:
		return TsCondition_Spec_ThresholdAlertingCfg_UNDEFINED
	case TsConditionSpecThresholdAlertingCfg_FieldPathSelectorAlignmentPeriod:
		return (*durationpb.Duration)(nil)
	case TsConditionSpecThresholdAlertingCfg_FieldPathSelectorRaiseAfter:
		return (*durationpb.Duration)(nil)
	case TsConditionSpecThresholdAlertingCfg_FieldPathSelectorSilenceAfter:
		return (*durationpb.Duration)(nil)
	case TsConditionSpecThresholdAlertingCfg_FieldPathSelectorPerQueryThresholds:
		return ([]*TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds)(nil)
	case TsConditionSpecThresholdAlertingCfg_FieldPathSelectorAdaptiveThresholdsDetectionPeriod:
		return (*durationpb.Duration)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Spec_ThresholdAlertingCfg: %d", fp.selector))
	}
}

func (fp *TsConditionSpecThresholdAlertingCfg_FieldTerminalPath) ClearValue(item *TsCondition_Spec_ThresholdAlertingCfg) {
	if item != nil {
		switch fp.selector {
		case TsConditionSpecThresholdAlertingCfg_FieldPathSelectorOperator:
			item.Operator = TsCondition_Spec_ThresholdAlertingCfg_UNDEFINED
		case TsConditionSpecThresholdAlertingCfg_FieldPathSelectorAlignmentPeriod:
			item.AlignmentPeriod = nil
		case TsConditionSpecThresholdAlertingCfg_FieldPathSelectorRaiseAfter:
			item.RaiseAfter = nil
		case TsConditionSpecThresholdAlertingCfg_FieldPathSelectorSilenceAfter:
			item.SilenceAfter = nil
		case TsConditionSpecThresholdAlertingCfg_FieldPathSelectorPerQueryThresholds:
			item.PerQueryThresholds = nil
		case TsConditionSpecThresholdAlertingCfg_FieldPathSelectorAdaptiveThresholdsDetectionPeriod:
			item.AdaptiveThresholdsDetectionPeriod = nil
		default:
			panic(fmt.Sprintf("Invalid selector for TsCondition_Spec_ThresholdAlertingCfg: %d", fp.selector))
		}
	}
}

func (fp *TsConditionSpecThresholdAlertingCfg_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*TsCondition_Spec_ThresholdAlertingCfg))
}

// IsLeaf - whether field path is holds simple value
func (fp *TsConditionSpecThresholdAlertingCfg_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == TsConditionSpecThresholdAlertingCfg_FieldPathSelectorOperator ||
		fp.selector == TsConditionSpecThresholdAlertingCfg_FieldPathSelectorAlignmentPeriod ||
		fp.selector == TsConditionSpecThresholdAlertingCfg_FieldPathSelectorRaiseAfter ||
		fp.selector == TsConditionSpecThresholdAlertingCfg_FieldPathSelectorSilenceAfter ||
		fp.selector == TsConditionSpecThresholdAlertingCfg_FieldPathSelectorAdaptiveThresholdsDetectionPeriod
}

func (fp *TsConditionSpecThresholdAlertingCfg_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *TsConditionSpecThresholdAlertingCfg_FieldTerminalPath) WithIValue(value interface{}) TsConditionSpecThresholdAlertingCfg_FieldPathValue {
	switch fp.selector {
	case TsConditionSpecThresholdAlertingCfg_FieldPathSelectorOperator:
		return &TsConditionSpecThresholdAlertingCfg_FieldTerminalPathValue{TsConditionSpecThresholdAlertingCfg_FieldTerminalPath: *fp, value: value.(TsCondition_Spec_ThresholdAlertingCfg_Operator)}
	case TsConditionSpecThresholdAlertingCfg_FieldPathSelectorAlignmentPeriod:
		return &TsConditionSpecThresholdAlertingCfg_FieldTerminalPathValue{TsConditionSpecThresholdAlertingCfg_FieldTerminalPath: *fp, value: value.(*durationpb.Duration)}
	case TsConditionSpecThresholdAlertingCfg_FieldPathSelectorRaiseAfter:
		return &TsConditionSpecThresholdAlertingCfg_FieldTerminalPathValue{TsConditionSpecThresholdAlertingCfg_FieldTerminalPath: *fp, value: value.(*durationpb.Duration)}
	case TsConditionSpecThresholdAlertingCfg_FieldPathSelectorSilenceAfter:
		return &TsConditionSpecThresholdAlertingCfg_FieldTerminalPathValue{TsConditionSpecThresholdAlertingCfg_FieldTerminalPath: *fp, value: value.(*durationpb.Duration)}
	case TsConditionSpecThresholdAlertingCfg_FieldPathSelectorPerQueryThresholds:
		return &TsConditionSpecThresholdAlertingCfg_FieldTerminalPathValue{TsConditionSpecThresholdAlertingCfg_FieldTerminalPath: *fp, value: value.([]*TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds)}
	case TsConditionSpecThresholdAlertingCfg_FieldPathSelectorAdaptiveThresholdsDetectionPeriod:
		return &TsConditionSpecThresholdAlertingCfg_FieldTerminalPathValue{TsConditionSpecThresholdAlertingCfg_FieldTerminalPath: *fp, value: value.(*durationpb.Duration)}
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Spec_ThresholdAlertingCfg: %d", fp.selector))
	}
}

func (fp *TsConditionSpecThresholdAlertingCfg_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *TsConditionSpecThresholdAlertingCfg_FieldTerminalPath) WithIArrayOfValues(values interface{}) TsConditionSpecThresholdAlertingCfg_FieldPathArrayOfValues {
	fpaov := &TsConditionSpecThresholdAlertingCfg_FieldTerminalPathArrayOfValues{TsConditionSpecThresholdAlertingCfg_FieldTerminalPath: *fp}
	switch fp.selector {
	case TsConditionSpecThresholdAlertingCfg_FieldPathSelectorOperator:
		return &TsConditionSpecThresholdAlertingCfg_FieldTerminalPathArrayOfValues{TsConditionSpecThresholdAlertingCfg_FieldTerminalPath: *fp, values: values.([]TsCondition_Spec_ThresholdAlertingCfg_Operator)}
	case TsConditionSpecThresholdAlertingCfg_FieldPathSelectorAlignmentPeriod:
		return &TsConditionSpecThresholdAlertingCfg_FieldTerminalPathArrayOfValues{TsConditionSpecThresholdAlertingCfg_FieldTerminalPath: *fp, values: values.([]*durationpb.Duration)}
	case TsConditionSpecThresholdAlertingCfg_FieldPathSelectorRaiseAfter:
		return &TsConditionSpecThresholdAlertingCfg_FieldTerminalPathArrayOfValues{TsConditionSpecThresholdAlertingCfg_FieldTerminalPath: *fp, values: values.([]*durationpb.Duration)}
	case TsConditionSpecThresholdAlertingCfg_FieldPathSelectorSilenceAfter:
		return &TsConditionSpecThresholdAlertingCfg_FieldTerminalPathArrayOfValues{TsConditionSpecThresholdAlertingCfg_FieldTerminalPath: *fp, values: values.([]*durationpb.Duration)}
	case TsConditionSpecThresholdAlertingCfg_FieldPathSelectorPerQueryThresholds:
		return &TsConditionSpecThresholdAlertingCfg_FieldTerminalPathArrayOfValues{TsConditionSpecThresholdAlertingCfg_FieldTerminalPath: *fp, values: values.([][]*TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds)}
	case TsConditionSpecThresholdAlertingCfg_FieldPathSelectorAdaptiveThresholdsDetectionPeriod:
		return &TsConditionSpecThresholdAlertingCfg_FieldTerminalPathArrayOfValues{TsConditionSpecThresholdAlertingCfg_FieldTerminalPath: *fp, values: values.([]*durationpb.Duration)}
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Spec_ThresholdAlertingCfg: %d", fp.selector))
	}
	return fpaov
}

func (fp *TsConditionSpecThresholdAlertingCfg_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *TsConditionSpecThresholdAlertingCfg_FieldTerminalPath) WithIArrayItemValue(value interface{}) TsConditionSpecThresholdAlertingCfg_FieldPathArrayItemValue {
	switch fp.selector {
	case TsConditionSpecThresholdAlertingCfg_FieldPathSelectorPerQueryThresholds:
		return &TsConditionSpecThresholdAlertingCfg_FieldTerminalPathArrayItemValue{TsConditionSpecThresholdAlertingCfg_FieldTerminalPath: *fp, value: value.(*TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds)}
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Spec_ThresholdAlertingCfg: %d", fp.selector))
	}
}

func (fp *TsConditionSpecThresholdAlertingCfg_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type TsConditionSpecThresholdAlertingCfg_FieldSubPath struct {
	selector TsConditionSpecThresholdAlertingCfg_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ TsConditionSpecThresholdAlertingCfg_FieldPath = (*TsConditionSpecThresholdAlertingCfg_FieldSubPath)(nil)

func (fps *TsConditionSpecThresholdAlertingCfg_FieldSubPath) Selector() TsConditionSpecThresholdAlertingCfg_FieldPathSelector {
	return fps.selector
}
func (fps *TsConditionSpecThresholdAlertingCfg_FieldSubPath) AsPerQueryThresholdsSubPath() (TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPath, bool) {
	res, ok := fps.subPath.(TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *TsConditionSpecThresholdAlertingCfg_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *TsConditionSpecThresholdAlertingCfg_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source TsCondition_Spec_ThresholdAlertingCfg
func (fps *TsConditionSpecThresholdAlertingCfg_FieldSubPath) Get(source *TsCondition_Spec_ThresholdAlertingCfg) (values []interface{}) {
	switch fps.selector {
	case TsConditionSpecThresholdAlertingCfg_FieldPathSelectorPerQueryThresholds:
		for _, item := range source.GetPerQueryThresholds() {
			values = append(values, fps.subPath.GetRaw(item)...)
		}
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Spec_ThresholdAlertingCfg: %d", fps.selector))
	}
	return
}

func (fps *TsConditionSpecThresholdAlertingCfg_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*TsCondition_Spec_ThresholdAlertingCfg))
}

// GetSingle returns value of selected field from source TsCondition_Spec_ThresholdAlertingCfg
func (fps *TsConditionSpecThresholdAlertingCfg_FieldSubPath) GetSingle(source *TsCondition_Spec_ThresholdAlertingCfg) (interface{}, bool) {
	switch fps.selector {
	case TsConditionSpecThresholdAlertingCfg_FieldPathSelectorPerQueryThresholds:
		if len(source.GetPerQueryThresholds()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPerQueryThresholds()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Spec_ThresholdAlertingCfg: %d", fps.selector))
	}
}

func (fps *TsConditionSpecThresholdAlertingCfg_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*TsCondition_Spec_ThresholdAlertingCfg))
}

// GetDefault returns a default value of the field type
func (fps *TsConditionSpecThresholdAlertingCfg_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *TsConditionSpecThresholdAlertingCfg_FieldSubPath) ClearValue(item *TsCondition_Spec_ThresholdAlertingCfg) {
	if item != nil {
		switch fps.selector {
		case TsConditionSpecThresholdAlertingCfg_FieldPathSelectorPerQueryThresholds:
			for _, subItem := range item.PerQueryThresholds {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for TsCondition_Spec_ThresholdAlertingCfg: %d", fps.selector))
		}
	}
}

func (fps *TsConditionSpecThresholdAlertingCfg_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*TsCondition_Spec_ThresholdAlertingCfg))
}

// IsLeaf - whether field path is holds simple value
func (fps *TsConditionSpecThresholdAlertingCfg_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *TsConditionSpecThresholdAlertingCfg_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&TsConditionSpecThresholdAlertingCfg_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *TsConditionSpecThresholdAlertingCfg_FieldSubPath) WithIValue(value interface{}) TsConditionSpecThresholdAlertingCfg_FieldPathValue {
	return &TsConditionSpecThresholdAlertingCfg_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *TsConditionSpecThresholdAlertingCfg_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *TsConditionSpecThresholdAlertingCfg_FieldSubPath) WithIArrayOfValues(values interface{}) TsConditionSpecThresholdAlertingCfg_FieldPathArrayOfValues {
	return &TsConditionSpecThresholdAlertingCfg_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *TsConditionSpecThresholdAlertingCfg_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *TsConditionSpecThresholdAlertingCfg_FieldSubPath) WithIArrayItemValue(value interface{}) TsConditionSpecThresholdAlertingCfg_FieldPathArrayItemValue {
	return &TsConditionSpecThresholdAlertingCfg_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *TsConditionSpecThresholdAlertingCfg_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// TsConditionSpecThresholdAlertingCfg_FieldPathValue allows storing values for ThresholdAlertingCfg fields according to their type
type TsConditionSpecThresholdAlertingCfg_FieldPathValue interface {
	TsConditionSpecThresholdAlertingCfg_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **TsCondition_Spec_ThresholdAlertingCfg)
	CompareWith(*TsCondition_Spec_ThresholdAlertingCfg) (cmp int, comparable bool)
}

func ParseTsConditionSpecThresholdAlertingCfg_FieldPathValue(pathStr, valueStr string) (TsConditionSpecThresholdAlertingCfg_FieldPathValue, error) {
	fp, err := ParseTsConditionSpecThresholdAlertingCfg_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ThresholdAlertingCfg field path value from %s: %v", valueStr, err)
	}
	return fpv.(TsConditionSpecThresholdAlertingCfg_FieldPathValue), nil
}

func MustParseTsConditionSpecThresholdAlertingCfg_FieldPathValue(pathStr, valueStr string) TsConditionSpecThresholdAlertingCfg_FieldPathValue {
	fpv, err := ParseTsConditionSpecThresholdAlertingCfg_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type TsConditionSpecThresholdAlertingCfg_FieldTerminalPathValue struct {
	TsConditionSpecThresholdAlertingCfg_FieldTerminalPath
	value interface{}
}

var _ TsConditionSpecThresholdAlertingCfg_FieldPathValue = (*TsConditionSpecThresholdAlertingCfg_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ThresholdAlertingCfg' as interface{}
func (fpv *TsConditionSpecThresholdAlertingCfg_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *TsConditionSpecThresholdAlertingCfg_FieldTerminalPathValue) AsOperatorValue() (TsCondition_Spec_ThresholdAlertingCfg_Operator, bool) {
	res, ok := fpv.value.(TsCondition_Spec_ThresholdAlertingCfg_Operator)
	return res, ok
}
func (fpv *TsConditionSpecThresholdAlertingCfg_FieldTerminalPathValue) AsAlignmentPeriodValue() (*durationpb.Duration, bool) {
	res, ok := fpv.value.(*durationpb.Duration)
	return res, ok
}
func (fpv *TsConditionSpecThresholdAlertingCfg_FieldTerminalPathValue) AsRaiseAfterValue() (*durationpb.Duration, bool) {
	res, ok := fpv.value.(*durationpb.Duration)
	return res, ok
}
func (fpv *TsConditionSpecThresholdAlertingCfg_FieldTerminalPathValue) AsSilenceAfterValue() (*durationpb.Duration, bool) {
	res, ok := fpv.value.(*durationpb.Duration)
	return res, ok
}
func (fpv *TsConditionSpecThresholdAlertingCfg_FieldTerminalPathValue) AsPerQueryThresholdsValue() ([]*TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds, bool) {
	res, ok := fpv.value.([]*TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds)
	return res, ok
}
func (fpv *TsConditionSpecThresholdAlertingCfg_FieldTerminalPathValue) AsAdaptiveThresholdsDetectionPeriodValue() (*durationpb.Duration, bool) {
	res, ok := fpv.value.(*durationpb.Duration)
	return res, ok
}

// SetTo stores value for selected field for object ThresholdAlertingCfg
func (fpv *TsConditionSpecThresholdAlertingCfg_FieldTerminalPathValue) SetTo(target **TsCondition_Spec_ThresholdAlertingCfg) {
	if *target == nil {
		*target = new(TsCondition_Spec_ThresholdAlertingCfg)
	}
	switch fpv.selector {
	case TsConditionSpecThresholdAlertingCfg_FieldPathSelectorOperator:
		(*target).Operator = fpv.value.(TsCondition_Spec_ThresholdAlertingCfg_Operator)
	case TsConditionSpecThresholdAlertingCfg_FieldPathSelectorAlignmentPeriod:
		(*target).AlignmentPeriod = fpv.value.(*durationpb.Duration)
	case TsConditionSpecThresholdAlertingCfg_FieldPathSelectorRaiseAfter:
		(*target).RaiseAfter = fpv.value.(*durationpb.Duration)
	case TsConditionSpecThresholdAlertingCfg_FieldPathSelectorSilenceAfter:
		(*target).SilenceAfter = fpv.value.(*durationpb.Duration)
	case TsConditionSpecThresholdAlertingCfg_FieldPathSelectorPerQueryThresholds:
		(*target).PerQueryThresholds = fpv.value.([]*TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds)
	case TsConditionSpecThresholdAlertingCfg_FieldPathSelectorAdaptiveThresholdsDetectionPeriod:
		(*target).AdaptiveThresholdsDetectionPeriod = fpv.value.(*durationpb.Duration)
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Spec_ThresholdAlertingCfg: %d", fpv.selector))
	}
}

func (fpv *TsConditionSpecThresholdAlertingCfg_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*TsCondition_Spec_ThresholdAlertingCfg)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'TsConditionSpecThresholdAlertingCfg_FieldTerminalPathValue' with the value under path in 'TsCondition_Spec_ThresholdAlertingCfg'.
func (fpv *TsConditionSpecThresholdAlertingCfg_FieldTerminalPathValue) CompareWith(source *TsCondition_Spec_ThresholdAlertingCfg) (int, bool) {
	switch fpv.selector {
	case TsConditionSpecThresholdAlertingCfg_FieldPathSelectorOperator:
		leftValue := fpv.value.(TsCondition_Spec_ThresholdAlertingCfg_Operator)
		rightValue := source.GetOperator()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case TsConditionSpecThresholdAlertingCfg_FieldPathSelectorAlignmentPeriod:
		leftValue := fpv.value.(*durationpb.Duration)
		rightValue := source.GetAlignmentPeriod()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.AsDuration() == rightValue.AsDuration() {
			return 0, true
		} else if leftValue.AsDuration() < rightValue.AsDuration() {
			return -1, true
		} else {
			return 1, true
		}
	case TsConditionSpecThresholdAlertingCfg_FieldPathSelectorRaiseAfter:
		leftValue := fpv.value.(*durationpb.Duration)
		rightValue := source.GetRaiseAfter()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.AsDuration() == rightValue.AsDuration() {
			return 0, true
		} else if leftValue.AsDuration() < rightValue.AsDuration() {
			return -1, true
		} else {
			return 1, true
		}
	case TsConditionSpecThresholdAlertingCfg_FieldPathSelectorSilenceAfter:
		leftValue := fpv.value.(*durationpb.Duration)
		rightValue := source.GetSilenceAfter()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.AsDuration() == rightValue.AsDuration() {
			return 0, true
		} else if leftValue.AsDuration() < rightValue.AsDuration() {
			return -1, true
		} else {
			return 1, true
		}
	case TsConditionSpecThresholdAlertingCfg_FieldPathSelectorPerQueryThresholds:
		return 0, false
	case TsConditionSpecThresholdAlertingCfg_FieldPathSelectorAdaptiveThresholdsDetectionPeriod:
		leftValue := fpv.value.(*durationpb.Duration)
		rightValue := source.GetAdaptiveThresholdsDetectionPeriod()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.AsDuration() == rightValue.AsDuration() {
			return 0, true
		} else if leftValue.AsDuration() < rightValue.AsDuration() {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Spec_ThresholdAlertingCfg: %d", fpv.selector))
	}
}

func (fpv *TsConditionSpecThresholdAlertingCfg_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*TsCondition_Spec_ThresholdAlertingCfg))
}

type TsConditionSpecThresholdAlertingCfg_FieldSubPathValue struct {
	TsConditionSpecThresholdAlertingCfg_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ TsConditionSpecThresholdAlertingCfg_FieldPathValue = (*TsConditionSpecThresholdAlertingCfg_FieldSubPathValue)(nil)

func (fpvs *TsConditionSpecThresholdAlertingCfg_FieldSubPathValue) AsPerQueryThresholdsPathValue() (TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathValue)
	return res, ok
}

func (fpvs *TsConditionSpecThresholdAlertingCfg_FieldSubPathValue) SetTo(target **TsCondition_Spec_ThresholdAlertingCfg) {
	if *target == nil {
		*target = new(TsCondition_Spec_ThresholdAlertingCfg)
	}
	switch fpvs.Selector() {
	case TsConditionSpecThresholdAlertingCfg_FieldPathSelectorPerQueryThresholds:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Spec_ThresholdAlertingCfg: %d", fpvs.Selector()))
	}
}

func (fpvs *TsConditionSpecThresholdAlertingCfg_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*TsCondition_Spec_ThresholdAlertingCfg)
	fpvs.SetTo(&typedObject)
}

func (fpvs *TsConditionSpecThresholdAlertingCfg_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *TsConditionSpecThresholdAlertingCfg_FieldSubPathValue) CompareWith(source *TsCondition_Spec_ThresholdAlertingCfg) (int, bool) {
	switch fpvs.Selector() {
	case TsConditionSpecThresholdAlertingCfg_FieldPathSelectorPerQueryThresholds:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Spec_ThresholdAlertingCfg: %d", fpvs.Selector()))
	}
}

func (fpvs *TsConditionSpecThresholdAlertingCfg_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*TsCondition_Spec_ThresholdAlertingCfg))
}

// TsConditionSpecThresholdAlertingCfg_FieldPathArrayItemValue allows storing single item in Path-specific values for ThresholdAlertingCfg according to their type
// Present only for array (repeated) types.
type TsConditionSpecThresholdAlertingCfg_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	TsConditionSpecThresholdAlertingCfg_FieldPath
	ContainsValue(*TsCondition_Spec_ThresholdAlertingCfg) bool
}

// ParseTsConditionSpecThresholdAlertingCfg_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseTsConditionSpecThresholdAlertingCfg_FieldPathArrayItemValue(pathStr, valueStr string) (TsConditionSpecThresholdAlertingCfg_FieldPathArrayItemValue, error) {
	fp, err := ParseTsConditionSpecThresholdAlertingCfg_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ThresholdAlertingCfg field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(TsConditionSpecThresholdAlertingCfg_FieldPathArrayItemValue), nil
}

func MustParseTsConditionSpecThresholdAlertingCfg_FieldPathArrayItemValue(pathStr, valueStr string) TsConditionSpecThresholdAlertingCfg_FieldPathArrayItemValue {
	fpaiv, err := ParseTsConditionSpecThresholdAlertingCfg_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type TsConditionSpecThresholdAlertingCfg_FieldTerminalPathArrayItemValue struct {
	TsConditionSpecThresholdAlertingCfg_FieldTerminalPath
	value interface{}
}

var _ TsConditionSpecThresholdAlertingCfg_FieldPathArrayItemValue = (*TsConditionSpecThresholdAlertingCfg_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object TsCondition_Spec_ThresholdAlertingCfg as interface{}
func (fpaiv *TsConditionSpecThresholdAlertingCfg_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *TsConditionSpecThresholdAlertingCfg_FieldTerminalPathArrayItemValue) AsPerQueryThresholdsItemValue() (*TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds, bool) {
	res, ok := fpaiv.value.(*TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds)
	return res, ok
}

func (fpaiv *TsConditionSpecThresholdAlertingCfg_FieldTerminalPathArrayItemValue) GetSingle(source *TsCondition_Spec_ThresholdAlertingCfg) (interface{}, bool) {
	return nil, false
}

func (fpaiv *TsConditionSpecThresholdAlertingCfg_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*TsCondition_Spec_ThresholdAlertingCfg))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ThresholdAlertingCfg'
func (fpaiv *TsConditionSpecThresholdAlertingCfg_FieldTerminalPathArrayItemValue) ContainsValue(source *TsCondition_Spec_ThresholdAlertingCfg) bool {
	slice := fpaiv.TsConditionSpecThresholdAlertingCfg_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type TsConditionSpecThresholdAlertingCfg_FieldSubPathArrayItemValue struct {
	TsConditionSpecThresholdAlertingCfg_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *TsConditionSpecThresholdAlertingCfg_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *TsConditionSpecThresholdAlertingCfg_FieldSubPathArrayItemValue) AsPerQueryThresholdsPathItemValue() (TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ThresholdAlertingCfg'
func (fpaivs *TsConditionSpecThresholdAlertingCfg_FieldSubPathArrayItemValue) ContainsValue(source *TsCondition_Spec_ThresholdAlertingCfg) bool {
	switch fpaivs.Selector() {
	case TsConditionSpecThresholdAlertingCfg_FieldPathSelectorPerQueryThresholds:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Spec_ThresholdAlertingCfg: %d", fpaivs.Selector()))
	}
}

// TsConditionSpecThresholdAlertingCfg_FieldPathArrayOfValues allows storing slice of values for ThresholdAlertingCfg fields according to their type
type TsConditionSpecThresholdAlertingCfg_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	TsConditionSpecThresholdAlertingCfg_FieldPath
}

func ParseTsConditionSpecThresholdAlertingCfg_FieldPathArrayOfValues(pathStr, valuesStr string) (TsConditionSpecThresholdAlertingCfg_FieldPathArrayOfValues, error) {
	fp, err := ParseTsConditionSpecThresholdAlertingCfg_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ThresholdAlertingCfg field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(TsConditionSpecThresholdAlertingCfg_FieldPathArrayOfValues), nil
}

func MustParseTsConditionSpecThresholdAlertingCfg_FieldPathArrayOfValues(pathStr, valuesStr string) TsConditionSpecThresholdAlertingCfg_FieldPathArrayOfValues {
	fpaov, err := ParseTsConditionSpecThresholdAlertingCfg_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type TsConditionSpecThresholdAlertingCfg_FieldTerminalPathArrayOfValues struct {
	TsConditionSpecThresholdAlertingCfg_FieldTerminalPath
	values interface{}
}

var _ TsConditionSpecThresholdAlertingCfg_FieldPathArrayOfValues = (*TsConditionSpecThresholdAlertingCfg_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *TsConditionSpecThresholdAlertingCfg_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case TsConditionSpecThresholdAlertingCfg_FieldPathSelectorOperator:
		for _, v := range fpaov.values.([]TsCondition_Spec_ThresholdAlertingCfg_Operator) {
			values = append(values, v)
		}
	case TsConditionSpecThresholdAlertingCfg_FieldPathSelectorAlignmentPeriod:
		for _, v := range fpaov.values.([]*durationpb.Duration) {
			values = append(values, v)
		}
	case TsConditionSpecThresholdAlertingCfg_FieldPathSelectorRaiseAfter:
		for _, v := range fpaov.values.([]*durationpb.Duration) {
			values = append(values, v)
		}
	case TsConditionSpecThresholdAlertingCfg_FieldPathSelectorSilenceAfter:
		for _, v := range fpaov.values.([]*durationpb.Duration) {
			values = append(values, v)
		}
	case TsConditionSpecThresholdAlertingCfg_FieldPathSelectorPerQueryThresholds:
		for _, v := range fpaov.values.([][]*TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds) {
			values = append(values, v)
		}
	case TsConditionSpecThresholdAlertingCfg_FieldPathSelectorAdaptiveThresholdsDetectionPeriod:
		for _, v := range fpaov.values.([]*durationpb.Duration) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *TsConditionSpecThresholdAlertingCfg_FieldTerminalPathArrayOfValues) AsOperatorArrayOfValues() ([]TsCondition_Spec_ThresholdAlertingCfg_Operator, bool) {
	res, ok := fpaov.values.([]TsCondition_Spec_ThresholdAlertingCfg_Operator)
	return res, ok
}
func (fpaov *TsConditionSpecThresholdAlertingCfg_FieldTerminalPathArrayOfValues) AsAlignmentPeriodArrayOfValues() ([]*durationpb.Duration, bool) {
	res, ok := fpaov.values.([]*durationpb.Duration)
	return res, ok
}
func (fpaov *TsConditionSpecThresholdAlertingCfg_FieldTerminalPathArrayOfValues) AsRaiseAfterArrayOfValues() ([]*durationpb.Duration, bool) {
	res, ok := fpaov.values.([]*durationpb.Duration)
	return res, ok
}
func (fpaov *TsConditionSpecThresholdAlertingCfg_FieldTerminalPathArrayOfValues) AsSilenceAfterArrayOfValues() ([]*durationpb.Duration, bool) {
	res, ok := fpaov.values.([]*durationpb.Duration)
	return res, ok
}
func (fpaov *TsConditionSpecThresholdAlertingCfg_FieldTerminalPathArrayOfValues) AsPerQueryThresholdsArrayOfValues() ([][]*TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds, bool) {
	res, ok := fpaov.values.([][]*TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds)
	return res, ok
}
func (fpaov *TsConditionSpecThresholdAlertingCfg_FieldTerminalPathArrayOfValues) AsAdaptiveThresholdsDetectionPeriodArrayOfValues() ([]*durationpb.Duration, bool) {
	res, ok := fpaov.values.([]*durationpb.Duration)
	return res, ok
}

type TsConditionSpecThresholdAlertingCfg_FieldSubPathArrayOfValues struct {
	TsConditionSpecThresholdAlertingCfg_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ TsConditionSpecThresholdAlertingCfg_FieldPathArrayOfValues = (*TsConditionSpecThresholdAlertingCfg_FieldSubPathArrayOfValues)(nil)

func (fpsaov *TsConditionSpecThresholdAlertingCfg_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *TsConditionSpecThresholdAlertingCfg_FieldSubPathArrayOfValues) AsPerQueryThresholdsPathArrayOfValues() (TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type TsConditionSpecAnomalyAlertingCfg_FieldPath interface {
	gotenobject.FieldPath
	Selector() TsConditionSpecAnomalyAlertingCfg_FieldPathSelector
	Get(source *TsCondition_Spec_AnomalyAlertingCfg) []interface{}
	GetSingle(source *TsCondition_Spec_AnomalyAlertingCfg) (interface{}, bool)
	ClearValue(item *TsCondition_Spec_AnomalyAlertingCfg)

	// Those methods build corresponding TsConditionSpecAnomalyAlertingCfg_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) TsConditionSpecAnomalyAlertingCfg_FieldPathValue
	WithIArrayOfValues(values interface{}) TsConditionSpecAnomalyAlertingCfg_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) TsConditionSpecAnomalyAlertingCfg_FieldPathArrayItemValue
}

type TsConditionSpecAnomalyAlertingCfg_FieldPathSelector int32

const (
	TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorAnalysisWindow    TsConditionSpecAnomalyAlertingCfg_FieldPathSelector = 0
	TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorStepInterval      TsConditionSpecAnomalyAlertingCfg_FieldPathSelector = 1
	TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorTrainStepInterval TsConditionSpecAnomalyAlertingCfg_FieldPathSelector = 2
	TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorAlignmentPeriod   TsConditionSpecAnomalyAlertingCfg_FieldPathSelector = 3
	TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorLstmAutoencoder   TsConditionSpecAnomalyAlertingCfg_FieldPathSelector = 4
	TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorRaiseAfter        TsConditionSpecAnomalyAlertingCfg_FieldPathSelector = 5
	TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorSilenceAfter      TsConditionSpecAnomalyAlertingCfg_FieldPathSelector = 6
)

func (s TsConditionSpecAnomalyAlertingCfg_FieldPathSelector) String() string {
	switch s {
	case TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorAnalysisWindow:
		return "analysis_window"
	case TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorStepInterval:
		return "step_interval"
	case TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorTrainStepInterval:
		return "train_step_interval"
	case TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorAlignmentPeriod:
		return "alignment_period"
	case TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorLstmAutoencoder:
		return "lstm_autoencoder"
	case TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorRaiseAfter:
		return "raise_after"
	case TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorSilenceAfter:
		return "silence_after"
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Spec_AnomalyAlertingCfg: %d", s))
	}
}

func BuildTsConditionSpecAnomalyAlertingCfg_FieldPath(fp gotenobject.RawFieldPath) (TsConditionSpecAnomalyAlertingCfg_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object TsCondition_Spec_AnomalyAlertingCfg")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "analysis_window", "analysisWindow", "analysis-window":
			return &TsConditionSpecAnomalyAlertingCfg_FieldTerminalPath{selector: TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorAnalysisWindow}, nil
		case "step_interval", "stepInterval", "step-interval":
			return &TsConditionSpecAnomalyAlertingCfg_FieldTerminalPath{selector: TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorStepInterval}, nil
		case "train_step_interval", "trainStepInterval", "train-step-interval":
			return &TsConditionSpecAnomalyAlertingCfg_FieldTerminalPath{selector: TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorTrainStepInterval}, nil
		case "alignment_period", "alignmentPeriod", "alignment-period":
			return &TsConditionSpecAnomalyAlertingCfg_FieldTerminalPath{selector: TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorAlignmentPeriod}, nil
		case "lstm_autoencoder", "lstmAutoencoder", "lstm-autoencoder":
			return &TsConditionSpecAnomalyAlertingCfg_FieldTerminalPath{selector: TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorLstmAutoencoder}, nil
		case "raise_after", "raiseAfter", "raise-after":
			return &TsConditionSpecAnomalyAlertingCfg_FieldTerminalPath{selector: TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorRaiseAfter}, nil
		case "silence_after", "silenceAfter", "silence-after":
			return &TsConditionSpecAnomalyAlertingCfg_FieldTerminalPath{selector: TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorSilenceAfter}, nil
		}
	} else {
		switch fp[0] {
		case "lstm_autoencoder", "lstmAutoencoder", "lstm-autoencoder":
			if subpath, err := BuildTsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &TsConditionSpecAnomalyAlertingCfg_FieldSubPath{selector: TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorLstmAutoencoder, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object TsCondition_Spec_AnomalyAlertingCfg", fp)
}

func ParseTsConditionSpecAnomalyAlertingCfg_FieldPath(rawField string) (TsConditionSpecAnomalyAlertingCfg_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildTsConditionSpecAnomalyAlertingCfg_FieldPath(fp)
}

func MustParseTsConditionSpecAnomalyAlertingCfg_FieldPath(rawField string) TsConditionSpecAnomalyAlertingCfg_FieldPath {
	fp, err := ParseTsConditionSpecAnomalyAlertingCfg_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type TsConditionSpecAnomalyAlertingCfg_FieldTerminalPath struct {
	selector TsConditionSpecAnomalyAlertingCfg_FieldPathSelector
}

var _ TsConditionSpecAnomalyAlertingCfg_FieldPath = (*TsConditionSpecAnomalyAlertingCfg_FieldTerminalPath)(nil)

func (fp *TsConditionSpecAnomalyAlertingCfg_FieldTerminalPath) Selector() TsConditionSpecAnomalyAlertingCfg_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *TsConditionSpecAnomalyAlertingCfg_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *TsConditionSpecAnomalyAlertingCfg_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source TsCondition_Spec_AnomalyAlertingCfg
func (fp *TsConditionSpecAnomalyAlertingCfg_FieldTerminalPath) Get(source *TsCondition_Spec_AnomalyAlertingCfg) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorAnalysisWindow:
			if source.AnalysisWindow != nil {
				values = append(values, source.AnalysisWindow)
			}
		case TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorStepInterval:
			if source.StepInterval != nil {
				values = append(values, source.StepInterval)
			}
		case TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorTrainStepInterval:
			if source.TrainStepInterval != nil {
				values = append(values, source.TrainStepInterval)
			}
		case TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorAlignmentPeriod:
			if source.AlignmentPeriod != nil {
				values = append(values, source.AlignmentPeriod)
			}
		case TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorLstmAutoencoder:
			if source, ok := source.Model.(*TsCondition_Spec_AnomalyAlertingCfg_LstmAutoencoder); ok && source != nil {
				if source.LstmAutoencoder != nil {
					values = append(values, source.LstmAutoencoder)
				}
			}
		case TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorRaiseAfter:
			if source.RaiseAfter != nil {
				values = append(values, source.RaiseAfter)
			}
		case TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorSilenceAfter:
			if source.SilenceAfter != nil {
				values = append(values, source.SilenceAfter)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for TsCondition_Spec_AnomalyAlertingCfg: %d", fp.selector))
		}
	}
	return
}

func (fp *TsConditionSpecAnomalyAlertingCfg_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*TsCondition_Spec_AnomalyAlertingCfg))
}

// GetSingle returns value pointed by specific field of from source TsCondition_Spec_AnomalyAlertingCfg
func (fp *TsConditionSpecAnomalyAlertingCfg_FieldTerminalPath) GetSingle(source *TsCondition_Spec_AnomalyAlertingCfg) (interface{}, bool) {
	switch fp.selector {
	case TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorAnalysisWindow:
		res := source.GetAnalysisWindow()
		return res, res != nil
	case TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorStepInterval:
		res := source.GetStepInterval()
		return res, res != nil
	case TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorTrainStepInterval:
		res := source.GetTrainStepInterval()
		return res, res != nil
	case TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorAlignmentPeriod:
		res := source.GetAlignmentPeriod()
		return res, res != nil
	case TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorLstmAutoencoder:
		// if object nil or oneof not active, return "default" type with false flag.
		if source == nil {
			return source.GetLstmAutoencoder(), false
		}
		_, oneOfSelected := source.Model.(*TsCondition_Spec_AnomalyAlertingCfg_LstmAutoencoder)
		if !oneOfSelected {
			return source.GetLstmAutoencoder(), false // to return "type" information
		}
		res := source.GetLstmAutoencoder()
		return res, res != nil
	case TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorRaiseAfter:
		res := source.GetRaiseAfter()
		return res, res != nil
	case TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorSilenceAfter:
		res := source.GetSilenceAfter()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Spec_AnomalyAlertingCfg: %d", fp.selector))
	}
}

func (fp *TsConditionSpecAnomalyAlertingCfg_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*TsCondition_Spec_AnomalyAlertingCfg))
}

// GetDefault returns a default value of the field type
func (fp *TsConditionSpecAnomalyAlertingCfg_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorAnalysisWindow:
		return (*durationpb.Duration)(nil)
	case TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorStepInterval:
		return (*durationpb.Duration)(nil)
	case TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorTrainStepInterval:
		return (*durationpb.Duration)(nil)
	case TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorAlignmentPeriod:
		return (*durationpb.Duration)(nil)
	case TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorLstmAutoencoder:
		return (*TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder)(nil)
	case TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorRaiseAfter:
		return (*durationpb.Duration)(nil)
	case TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorSilenceAfter:
		return (*durationpb.Duration)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Spec_AnomalyAlertingCfg: %d", fp.selector))
	}
}

func (fp *TsConditionSpecAnomalyAlertingCfg_FieldTerminalPath) ClearValue(item *TsCondition_Spec_AnomalyAlertingCfg) {
	if item != nil {
		switch fp.selector {
		case TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorAnalysisWindow:
			item.AnalysisWindow = nil
		case TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorStepInterval:
			item.StepInterval = nil
		case TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorTrainStepInterval:
			item.TrainStepInterval = nil
		case TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorAlignmentPeriod:
			item.AlignmentPeriod = nil
		case TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorLstmAutoencoder:
			if item, ok := item.Model.(*TsCondition_Spec_AnomalyAlertingCfg_LstmAutoencoder); ok {
				item.LstmAutoencoder = nil
			}
		case TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorRaiseAfter:
			item.RaiseAfter = nil
		case TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorSilenceAfter:
			item.SilenceAfter = nil
		default:
			panic(fmt.Sprintf("Invalid selector for TsCondition_Spec_AnomalyAlertingCfg: %d", fp.selector))
		}
	}
}

func (fp *TsConditionSpecAnomalyAlertingCfg_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*TsCondition_Spec_AnomalyAlertingCfg))
}

// IsLeaf - whether field path is holds simple value
func (fp *TsConditionSpecAnomalyAlertingCfg_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorAnalysisWindow ||
		fp.selector == TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorStepInterval ||
		fp.selector == TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorTrainStepInterval ||
		fp.selector == TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorAlignmentPeriod ||
		fp.selector == TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorRaiseAfter ||
		fp.selector == TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorSilenceAfter
}

func (fp *TsConditionSpecAnomalyAlertingCfg_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *TsConditionSpecAnomalyAlertingCfg_FieldTerminalPath) WithIValue(value interface{}) TsConditionSpecAnomalyAlertingCfg_FieldPathValue {
	switch fp.selector {
	case TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorAnalysisWindow:
		return &TsConditionSpecAnomalyAlertingCfg_FieldTerminalPathValue{TsConditionSpecAnomalyAlertingCfg_FieldTerminalPath: *fp, value: value.(*durationpb.Duration)}
	case TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorStepInterval:
		return &TsConditionSpecAnomalyAlertingCfg_FieldTerminalPathValue{TsConditionSpecAnomalyAlertingCfg_FieldTerminalPath: *fp, value: value.(*durationpb.Duration)}
	case TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorTrainStepInterval:
		return &TsConditionSpecAnomalyAlertingCfg_FieldTerminalPathValue{TsConditionSpecAnomalyAlertingCfg_FieldTerminalPath: *fp, value: value.(*durationpb.Duration)}
	case TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorAlignmentPeriod:
		return &TsConditionSpecAnomalyAlertingCfg_FieldTerminalPathValue{TsConditionSpecAnomalyAlertingCfg_FieldTerminalPath: *fp, value: value.(*durationpb.Duration)}
	case TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorLstmAutoencoder:
		return &TsConditionSpecAnomalyAlertingCfg_FieldTerminalPathValue{TsConditionSpecAnomalyAlertingCfg_FieldTerminalPath: *fp, value: value.(*TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder)}
	case TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorRaiseAfter:
		return &TsConditionSpecAnomalyAlertingCfg_FieldTerminalPathValue{TsConditionSpecAnomalyAlertingCfg_FieldTerminalPath: *fp, value: value.(*durationpb.Duration)}
	case TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorSilenceAfter:
		return &TsConditionSpecAnomalyAlertingCfg_FieldTerminalPathValue{TsConditionSpecAnomalyAlertingCfg_FieldTerminalPath: *fp, value: value.(*durationpb.Duration)}
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Spec_AnomalyAlertingCfg: %d", fp.selector))
	}
}

func (fp *TsConditionSpecAnomalyAlertingCfg_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *TsConditionSpecAnomalyAlertingCfg_FieldTerminalPath) WithIArrayOfValues(values interface{}) TsConditionSpecAnomalyAlertingCfg_FieldPathArrayOfValues {
	fpaov := &TsConditionSpecAnomalyAlertingCfg_FieldTerminalPathArrayOfValues{TsConditionSpecAnomalyAlertingCfg_FieldTerminalPath: *fp}
	switch fp.selector {
	case TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorAnalysisWindow:
		return &TsConditionSpecAnomalyAlertingCfg_FieldTerminalPathArrayOfValues{TsConditionSpecAnomalyAlertingCfg_FieldTerminalPath: *fp, values: values.([]*durationpb.Duration)}
	case TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorStepInterval:
		return &TsConditionSpecAnomalyAlertingCfg_FieldTerminalPathArrayOfValues{TsConditionSpecAnomalyAlertingCfg_FieldTerminalPath: *fp, values: values.([]*durationpb.Duration)}
	case TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorTrainStepInterval:
		return &TsConditionSpecAnomalyAlertingCfg_FieldTerminalPathArrayOfValues{TsConditionSpecAnomalyAlertingCfg_FieldTerminalPath: *fp, values: values.([]*durationpb.Duration)}
	case TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorAlignmentPeriod:
		return &TsConditionSpecAnomalyAlertingCfg_FieldTerminalPathArrayOfValues{TsConditionSpecAnomalyAlertingCfg_FieldTerminalPath: *fp, values: values.([]*durationpb.Duration)}
	case TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorLstmAutoencoder:
		return &TsConditionSpecAnomalyAlertingCfg_FieldTerminalPathArrayOfValues{TsConditionSpecAnomalyAlertingCfg_FieldTerminalPath: *fp, values: values.([]*TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder)}
	case TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorRaiseAfter:
		return &TsConditionSpecAnomalyAlertingCfg_FieldTerminalPathArrayOfValues{TsConditionSpecAnomalyAlertingCfg_FieldTerminalPath: *fp, values: values.([]*durationpb.Duration)}
	case TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorSilenceAfter:
		return &TsConditionSpecAnomalyAlertingCfg_FieldTerminalPathArrayOfValues{TsConditionSpecAnomalyAlertingCfg_FieldTerminalPath: *fp, values: values.([]*durationpb.Duration)}
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Spec_AnomalyAlertingCfg: %d", fp.selector))
	}
	return fpaov
}

func (fp *TsConditionSpecAnomalyAlertingCfg_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *TsConditionSpecAnomalyAlertingCfg_FieldTerminalPath) WithIArrayItemValue(value interface{}) TsConditionSpecAnomalyAlertingCfg_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Spec_AnomalyAlertingCfg: %d", fp.selector))
	}
}

func (fp *TsConditionSpecAnomalyAlertingCfg_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type TsConditionSpecAnomalyAlertingCfg_FieldSubPath struct {
	selector TsConditionSpecAnomalyAlertingCfg_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ TsConditionSpecAnomalyAlertingCfg_FieldPath = (*TsConditionSpecAnomalyAlertingCfg_FieldSubPath)(nil)

func (fps *TsConditionSpecAnomalyAlertingCfg_FieldSubPath) Selector() TsConditionSpecAnomalyAlertingCfg_FieldPathSelector {
	return fps.selector
}
func (fps *TsConditionSpecAnomalyAlertingCfg_FieldSubPath) AsLstmAutoencoderSubPath() (TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPath, bool) {
	res, ok := fps.subPath.(TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *TsConditionSpecAnomalyAlertingCfg_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *TsConditionSpecAnomalyAlertingCfg_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source TsCondition_Spec_AnomalyAlertingCfg
func (fps *TsConditionSpecAnomalyAlertingCfg_FieldSubPath) Get(source *TsCondition_Spec_AnomalyAlertingCfg) (values []interface{}) {
	switch fps.selector {
	case TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorLstmAutoencoder:
		values = append(values, fps.subPath.GetRaw(source.GetLstmAutoencoder())...)
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Spec_AnomalyAlertingCfg: %d", fps.selector))
	}
	return
}

func (fps *TsConditionSpecAnomalyAlertingCfg_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*TsCondition_Spec_AnomalyAlertingCfg))
}

// GetSingle returns value of selected field from source TsCondition_Spec_AnomalyAlertingCfg
func (fps *TsConditionSpecAnomalyAlertingCfg_FieldSubPath) GetSingle(source *TsCondition_Spec_AnomalyAlertingCfg) (interface{}, bool) {
	switch fps.selector {
	case TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorLstmAutoencoder:
		if source.GetLstmAutoencoder() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetLstmAutoencoder())
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Spec_AnomalyAlertingCfg: %d", fps.selector))
	}
}

func (fps *TsConditionSpecAnomalyAlertingCfg_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*TsCondition_Spec_AnomalyAlertingCfg))
}

// GetDefault returns a default value of the field type
func (fps *TsConditionSpecAnomalyAlertingCfg_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *TsConditionSpecAnomalyAlertingCfg_FieldSubPath) ClearValue(item *TsCondition_Spec_AnomalyAlertingCfg) {
	if item != nil {
		switch fps.selector {
		case TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorLstmAutoencoder:
			if item.Model != nil {
				if item, ok := item.Model.(*TsCondition_Spec_AnomalyAlertingCfg_LstmAutoencoder); ok {
					fps.subPath.ClearValueRaw(item.LstmAutoencoder)
				}
			}
		default:
			panic(fmt.Sprintf("Invalid selector for TsCondition_Spec_AnomalyAlertingCfg: %d", fps.selector))
		}
	}
}

func (fps *TsConditionSpecAnomalyAlertingCfg_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*TsCondition_Spec_AnomalyAlertingCfg))
}

// IsLeaf - whether field path is holds simple value
func (fps *TsConditionSpecAnomalyAlertingCfg_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *TsConditionSpecAnomalyAlertingCfg_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&TsConditionSpecAnomalyAlertingCfg_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *TsConditionSpecAnomalyAlertingCfg_FieldSubPath) WithIValue(value interface{}) TsConditionSpecAnomalyAlertingCfg_FieldPathValue {
	return &TsConditionSpecAnomalyAlertingCfg_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *TsConditionSpecAnomalyAlertingCfg_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *TsConditionSpecAnomalyAlertingCfg_FieldSubPath) WithIArrayOfValues(values interface{}) TsConditionSpecAnomalyAlertingCfg_FieldPathArrayOfValues {
	return &TsConditionSpecAnomalyAlertingCfg_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *TsConditionSpecAnomalyAlertingCfg_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *TsConditionSpecAnomalyAlertingCfg_FieldSubPath) WithIArrayItemValue(value interface{}) TsConditionSpecAnomalyAlertingCfg_FieldPathArrayItemValue {
	return &TsConditionSpecAnomalyAlertingCfg_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *TsConditionSpecAnomalyAlertingCfg_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// TsConditionSpecAnomalyAlertingCfg_FieldPathValue allows storing values for AnomalyAlertingCfg fields according to their type
type TsConditionSpecAnomalyAlertingCfg_FieldPathValue interface {
	TsConditionSpecAnomalyAlertingCfg_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **TsCondition_Spec_AnomalyAlertingCfg)
	CompareWith(*TsCondition_Spec_AnomalyAlertingCfg) (cmp int, comparable bool)
}

func ParseTsConditionSpecAnomalyAlertingCfg_FieldPathValue(pathStr, valueStr string) (TsConditionSpecAnomalyAlertingCfg_FieldPathValue, error) {
	fp, err := ParseTsConditionSpecAnomalyAlertingCfg_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing AnomalyAlertingCfg field path value from %s: %v", valueStr, err)
	}
	return fpv.(TsConditionSpecAnomalyAlertingCfg_FieldPathValue), nil
}

func MustParseTsConditionSpecAnomalyAlertingCfg_FieldPathValue(pathStr, valueStr string) TsConditionSpecAnomalyAlertingCfg_FieldPathValue {
	fpv, err := ParseTsConditionSpecAnomalyAlertingCfg_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type TsConditionSpecAnomalyAlertingCfg_FieldTerminalPathValue struct {
	TsConditionSpecAnomalyAlertingCfg_FieldTerminalPath
	value interface{}
}

var _ TsConditionSpecAnomalyAlertingCfg_FieldPathValue = (*TsConditionSpecAnomalyAlertingCfg_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'AnomalyAlertingCfg' as interface{}
func (fpv *TsConditionSpecAnomalyAlertingCfg_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *TsConditionSpecAnomalyAlertingCfg_FieldTerminalPathValue) AsAnalysisWindowValue() (*durationpb.Duration, bool) {
	res, ok := fpv.value.(*durationpb.Duration)
	return res, ok
}
func (fpv *TsConditionSpecAnomalyAlertingCfg_FieldTerminalPathValue) AsStepIntervalValue() (*durationpb.Duration, bool) {
	res, ok := fpv.value.(*durationpb.Duration)
	return res, ok
}
func (fpv *TsConditionSpecAnomalyAlertingCfg_FieldTerminalPathValue) AsTrainStepIntervalValue() (*durationpb.Duration, bool) {
	res, ok := fpv.value.(*durationpb.Duration)
	return res, ok
}
func (fpv *TsConditionSpecAnomalyAlertingCfg_FieldTerminalPathValue) AsAlignmentPeriodValue() (*durationpb.Duration, bool) {
	res, ok := fpv.value.(*durationpb.Duration)
	return res, ok
}
func (fpv *TsConditionSpecAnomalyAlertingCfg_FieldTerminalPathValue) AsLstmAutoencoderValue() (*TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder, bool) {
	res, ok := fpv.value.(*TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder)
	return res, ok
}
func (fpv *TsConditionSpecAnomalyAlertingCfg_FieldTerminalPathValue) AsRaiseAfterValue() (*durationpb.Duration, bool) {
	res, ok := fpv.value.(*durationpb.Duration)
	return res, ok
}
func (fpv *TsConditionSpecAnomalyAlertingCfg_FieldTerminalPathValue) AsSilenceAfterValue() (*durationpb.Duration, bool) {
	res, ok := fpv.value.(*durationpb.Duration)
	return res, ok
}

// SetTo stores value for selected field for object AnomalyAlertingCfg
func (fpv *TsConditionSpecAnomalyAlertingCfg_FieldTerminalPathValue) SetTo(target **TsCondition_Spec_AnomalyAlertingCfg) {
	if *target == nil {
		*target = new(TsCondition_Spec_AnomalyAlertingCfg)
	}
	switch fpv.selector {
	case TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorAnalysisWindow:
		(*target).AnalysisWindow = fpv.value.(*durationpb.Duration)
	case TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorStepInterval:
		(*target).StepInterval = fpv.value.(*durationpb.Duration)
	case TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorTrainStepInterval:
		(*target).TrainStepInterval = fpv.value.(*durationpb.Duration)
	case TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorAlignmentPeriod:
		(*target).AlignmentPeriod = fpv.value.(*durationpb.Duration)
	case TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorLstmAutoencoder:
		if _, ok := (*target).Model.(*TsCondition_Spec_AnomalyAlertingCfg_LstmAutoencoder); !ok {
			(*target).Model = &TsCondition_Spec_AnomalyAlertingCfg_LstmAutoencoder{}
		}
		(*target).Model.(*TsCondition_Spec_AnomalyAlertingCfg_LstmAutoencoder).LstmAutoencoder = fpv.value.(*TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder)
	case TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorRaiseAfter:
		(*target).RaiseAfter = fpv.value.(*durationpb.Duration)
	case TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorSilenceAfter:
		(*target).SilenceAfter = fpv.value.(*durationpb.Duration)
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Spec_AnomalyAlertingCfg: %d", fpv.selector))
	}
}

func (fpv *TsConditionSpecAnomalyAlertingCfg_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*TsCondition_Spec_AnomalyAlertingCfg)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'TsConditionSpecAnomalyAlertingCfg_FieldTerminalPathValue' with the value under path in 'TsCondition_Spec_AnomalyAlertingCfg'.
func (fpv *TsConditionSpecAnomalyAlertingCfg_FieldTerminalPathValue) CompareWith(source *TsCondition_Spec_AnomalyAlertingCfg) (int, bool) {
	switch fpv.selector {
	case TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorAnalysisWindow:
		leftValue := fpv.value.(*durationpb.Duration)
		rightValue := source.GetAnalysisWindow()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.AsDuration() == rightValue.AsDuration() {
			return 0, true
		} else if leftValue.AsDuration() < rightValue.AsDuration() {
			return -1, true
		} else {
			return 1, true
		}
	case TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorStepInterval:
		leftValue := fpv.value.(*durationpb.Duration)
		rightValue := source.GetStepInterval()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.AsDuration() == rightValue.AsDuration() {
			return 0, true
		} else if leftValue.AsDuration() < rightValue.AsDuration() {
			return -1, true
		} else {
			return 1, true
		}
	case TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorTrainStepInterval:
		leftValue := fpv.value.(*durationpb.Duration)
		rightValue := source.GetTrainStepInterval()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.AsDuration() == rightValue.AsDuration() {
			return 0, true
		} else if leftValue.AsDuration() < rightValue.AsDuration() {
			return -1, true
		} else {
			return 1, true
		}
	case TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorAlignmentPeriod:
		leftValue := fpv.value.(*durationpb.Duration)
		rightValue := source.GetAlignmentPeriod()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.AsDuration() == rightValue.AsDuration() {
			return 0, true
		} else if leftValue.AsDuration() < rightValue.AsDuration() {
			return -1, true
		} else {
			return 1, true
		}
	case TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorLstmAutoencoder:
		return 0, false
	case TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorRaiseAfter:
		leftValue := fpv.value.(*durationpb.Duration)
		rightValue := source.GetRaiseAfter()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.AsDuration() == rightValue.AsDuration() {
			return 0, true
		} else if leftValue.AsDuration() < rightValue.AsDuration() {
			return -1, true
		} else {
			return 1, true
		}
	case TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorSilenceAfter:
		leftValue := fpv.value.(*durationpb.Duration)
		rightValue := source.GetSilenceAfter()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.AsDuration() == rightValue.AsDuration() {
			return 0, true
		} else if leftValue.AsDuration() < rightValue.AsDuration() {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Spec_AnomalyAlertingCfg: %d", fpv.selector))
	}
}

func (fpv *TsConditionSpecAnomalyAlertingCfg_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*TsCondition_Spec_AnomalyAlertingCfg))
}

type TsConditionSpecAnomalyAlertingCfg_FieldSubPathValue struct {
	TsConditionSpecAnomalyAlertingCfg_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ TsConditionSpecAnomalyAlertingCfg_FieldPathValue = (*TsConditionSpecAnomalyAlertingCfg_FieldSubPathValue)(nil)

func (fpvs *TsConditionSpecAnomalyAlertingCfg_FieldSubPathValue) AsLstmAutoencoderPathValue() (TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathValue)
	return res, ok
}

func (fpvs *TsConditionSpecAnomalyAlertingCfg_FieldSubPathValue) SetTo(target **TsCondition_Spec_AnomalyAlertingCfg) {
	if *target == nil {
		*target = new(TsCondition_Spec_AnomalyAlertingCfg)
	}
	switch fpvs.Selector() {
	case TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorLstmAutoencoder:
		if _, ok := (*target).Model.(*TsCondition_Spec_AnomalyAlertingCfg_LstmAutoencoder); !ok {
			(*target).Model = &TsCondition_Spec_AnomalyAlertingCfg_LstmAutoencoder{}
		}
		fpvs.subPathValue.(TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathValue).SetTo(&(*target).Model.(*TsCondition_Spec_AnomalyAlertingCfg_LstmAutoencoder).LstmAutoencoder)
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Spec_AnomalyAlertingCfg: %d", fpvs.Selector()))
	}
}

func (fpvs *TsConditionSpecAnomalyAlertingCfg_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*TsCondition_Spec_AnomalyAlertingCfg)
	fpvs.SetTo(&typedObject)
}

func (fpvs *TsConditionSpecAnomalyAlertingCfg_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *TsConditionSpecAnomalyAlertingCfg_FieldSubPathValue) CompareWith(source *TsCondition_Spec_AnomalyAlertingCfg) (int, bool) {
	switch fpvs.Selector() {
	case TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorLstmAutoencoder:
		return fpvs.subPathValue.(TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathValue).CompareWith(source.GetLstmAutoencoder())
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Spec_AnomalyAlertingCfg: %d", fpvs.Selector()))
	}
}

func (fpvs *TsConditionSpecAnomalyAlertingCfg_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*TsCondition_Spec_AnomalyAlertingCfg))
}

// TsConditionSpecAnomalyAlertingCfg_FieldPathArrayItemValue allows storing single item in Path-specific values for AnomalyAlertingCfg according to their type
// Present only for array (repeated) types.
type TsConditionSpecAnomalyAlertingCfg_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	TsConditionSpecAnomalyAlertingCfg_FieldPath
	ContainsValue(*TsCondition_Spec_AnomalyAlertingCfg) bool
}

// ParseTsConditionSpecAnomalyAlertingCfg_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseTsConditionSpecAnomalyAlertingCfg_FieldPathArrayItemValue(pathStr, valueStr string) (TsConditionSpecAnomalyAlertingCfg_FieldPathArrayItemValue, error) {
	fp, err := ParseTsConditionSpecAnomalyAlertingCfg_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing AnomalyAlertingCfg field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(TsConditionSpecAnomalyAlertingCfg_FieldPathArrayItemValue), nil
}

func MustParseTsConditionSpecAnomalyAlertingCfg_FieldPathArrayItemValue(pathStr, valueStr string) TsConditionSpecAnomalyAlertingCfg_FieldPathArrayItemValue {
	fpaiv, err := ParseTsConditionSpecAnomalyAlertingCfg_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type TsConditionSpecAnomalyAlertingCfg_FieldTerminalPathArrayItemValue struct {
	TsConditionSpecAnomalyAlertingCfg_FieldTerminalPath
	value interface{}
}

var _ TsConditionSpecAnomalyAlertingCfg_FieldPathArrayItemValue = (*TsConditionSpecAnomalyAlertingCfg_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object TsCondition_Spec_AnomalyAlertingCfg as interface{}
func (fpaiv *TsConditionSpecAnomalyAlertingCfg_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *TsConditionSpecAnomalyAlertingCfg_FieldTerminalPathArrayItemValue) GetSingle(source *TsCondition_Spec_AnomalyAlertingCfg) (interface{}, bool) {
	return nil, false
}

func (fpaiv *TsConditionSpecAnomalyAlertingCfg_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*TsCondition_Spec_AnomalyAlertingCfg))
}

// Contains returns a boolean indicating if value that is being held is present in given 'AnomalyAlertingCfg'
func (fpaiv *TsConditionSpecAnomalyAlertingCfg_FieldTerminalPathArrayItemValue) ContainsValue(source *TsCondition_Spec_AnomalyAlertingCfg) bool {
	slice := fpaiv.TsConditionSpecAnomalyAlertingCfg_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type TsConditionSpecAnomalyAlertingCfg_FieldSubPathArrayItemValue struct {
	TsConditionSpecAnomalyAlertingCfg_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *TsConditionSpecAnomalyAlertingCfg_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *TsConditionSpecAnomalyAlertingCfg_FieldSubPathArrayItemValue) AsLstmAutoencoderPathItemValue() (TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'AnomalyAlertingCfg'
func (fpaivs *TsConditionSpecAnomalyAlertingCfg_FieldSubPathArrayItemValue) ContainsValue(source *TsCondition_Spec_AnomalyAlertingCfg) bool {
	switch fpaivs.Selector() {
	case TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorLstmAutoencoder:
		return fpaivs.subPathItemValue.(TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathArrayItemValue).ContainsValue(source.GetLstmAutoencoder())
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Spec_AnomalyAlertingCfg: %d", fpaivs.Selector()))
	}
}

// TsConditionSpecAnomalyAlertingCfg_FieldPathArrayOfValues allows storing slice of values for AnomalyAlertingCfg fields according to their type
type TsConditionSpecAnomalyAlertingCfg_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	TsConditionSpecAnomalyAlertingCfg_FieldPath
}

func ParseTsConditionSpecAnomalyAlertingCfg_FieldPathArrayOfValues(pathStr, valuesStr string) (TsConditionSpecAnomalyAlertingCfg_FieldPathArrayOfValues, error) {
	fp, err := ParseTsConditionSpecAnomalyAlertingCfg_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing AnomalyAlertingCfg field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(TsConditionSpecAnomalyAlertingCfg_FieldPathArrayOfValues), nil
}

func MustParseTsConditionSpecAnomalyAlertingCfg_FieldPathArrayOfValues(pathStr, valuesStr string) TsConditionSpecAnomalyAlertingCfg_FieldPathArrayOfValues {
	fpaov, err := ParseTsConditionSpecAnomalyAlertingCfg_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type TsConditionSpecAnomalyAlertingCfg_FieldTerminalPathArrayOfValues struct {
	TsConditionSpecAnomalyAlertingCfg_FieldTerminalPath
	values interface{}
}

var _ TsConditionSpecAnomalyAlertingCfg_FieldPathArrayOfValues = (*TsConditionSpecAnomalyAlertingCfg_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *TsConditionSpecAnomalyAlertingCfg_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorAnalysisWindow:
		for _, v := range fpaov.values.([]*durationpb.Duration) {
			values = append(values, v)
		}
	case TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorStepInterval:
		for _, v := range fpaov.values.([]*durationpb.Duration) {
			values = append(values, v)
		}
	case TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorTrainStepInterval:
		for _, v := range fpaov.values.([]*durationpb.Duration) {
			values = append(values, v)
		}
	case TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorAlignmentPeriod:
		for _, v := range fpaov.values.([]*durationpb.Duration) {
			values = append(values, v)
		}
	case TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorLstmAutoencoder:
		for _, v := range fpaov.values.([]*TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder) {
			values = append(values, v)
		}
	case TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorRaiseAfter:
		for _, v := range fpaov.values.([]*durationpb.Duration) {
			values = append(values, v)
		}
	case TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorSilenceAfter:
		for _, v := range fpaov.values.([]*durationpb.Duration) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *TsConditionSpecAnomalyAlertingCfg_FieldTerminalPathArrayOfValues) AsAnalysisWindowArrayOfValues() ([]*durationpb.Duration, bool) {
	res, ok := fpaov.values.([]*durationpb.Duration)
	return res, ok
}
func (fpaov *TsConditionSpecAnomalyAlertingCfg_FieldTerminalPathArrayOfValues) AsStepIntervalArrayOfValues() ([]*durationpb.Duration, bool) {
	res, ok := fpaov.values.([]*durationpb.Duration)
	return res, ok
}
func (fpaov *TsConditionSpecAnomalyAlertingCfg_FieldTerminalPathArrayOfValues) AsTrainStepIntervalArrayOfValues() ([]*durationpb.Duration, bool) {
	res, ok := fpaov.values.([]*durationpb.Duration)
	return res, ok
}
func (fpaov *TsConditionSpecAnomalyAlertingCfg_FieldTerminalPathArrayOfValues) AsAlignmentPeriodArrayOfValues() ([]*durationpb.Duration, bool) {
	res, ok := fpaov.values.([]*durationpb.Duration)
	return res, ok
}
func (fpaov *TsConditionSpecAnomalyAlertingCfg_FieldTerminalPathArrayOfValues) AsLstmAutoencoderArrayOfValues() ([]*TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder, bool) {
	res, ok := fpaov.values.([]*TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder)
	return res, ok
}
func (fpaov *TsConditionSpecAnomalyAlertingCfg_FieldTerminalPathArrayOfValues) AsRaiseAfterArrayOfValues() ([]*durationpb.Duration, bool) {
	res, ok := fpaov.values.([]*durationpb.Duration)
	return res, ok
}
func (fpaov *TsConditionSpecAnomalyAlertingCfg_FieldTerminalPathArrayOfValues) AsSilenceAfterArrayOfValues() ([]*durationpb.Duration, bool) {
	res, ok := fpaov.values.([]*durationpb.Duration)
	return res, ok
}

type TsConditionSpecAnomalyAlertingCfg_FieldSubPathArrayOfValues struct {
	TsConditionSpecAnomalyAlertingCfg_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ TsConditionSpecAnomalyAlertingCfg_FieldPathArrayOfValues = (*TsConditionSpecAnomalyAlertingCfg_FieldSubPathArrayOfValues)(nil)

func (fpsaov *TsConditionSpecAnomalyAlertingCfg_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *TsConditionSpecAnomalyAlertingCfg_FieldSubPathArrayOfValues) AsLstmAutoencoderPathArrayOfValues() (TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPath interface {
	gotenobject.FieldPath
	Selector() TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelector
	Get(source *TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds) []interface{}
	GetSingle(source *TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds) (interface{}, bool)
	ClearValue(item *TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds)

	// Those methods build corresponding TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathValue
	WithIArrayOfValues(values interface{}) TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathArrayItemValue
}

type TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelector int32

const (
	TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorAutoAdaptUpper TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelector = 0
	TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorAutoAdaptLower TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelector = 1
	TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorMaxUpper       TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelector = 2
	TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorMaxLower       TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelector = 3
)

func (s TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelector) String() string {
	switch s {
	case TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorAutoAdaptUpper:
		return "auto_adapt_upper"
	case TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorAutoAdaptLower:
		return "auto_adapt_lower"
	case TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorMaxUpper:
		return "max_upper"
	case TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorMaxLower:
		return "max_lower"
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds: %d", s))
	}
}

func BuildTsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPath(fp gotenobject.RawFieldPath) (TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "auto_adapt_upper", "autoAdaptUpper", "auto-adapt-upper":
			return &TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldTerminalPath{selector: TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorAutoAdaptUpper}, nil
		case "auto_adapt_lower", "autoAdaptLower", "auto-adapt-lower":
			return &TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldTerminalPath{selector: TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorAutoAdaptLower}, nil
		case "max_upper", "maxUpper", "max-upper":
			return &TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldTerminalPath{selector: TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorMaxUpper}, nil
		case "max_lower", "maxLower", "max-lower":
			return &TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldTerminalPath{selector: TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorMaxLower}, nil
		}
	} else {
		switch fp[0] {
		case "max_upper", "maxUpper", "max-upper":
			if subpath, err := BuildAlertingThreshold_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldSubPath{selector: TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorMaxUpper, subPath: subpath}, nil
			}
		case "max_lower", "maxLower", "max-lower":
			if subpath, err := BuildAlertingThreshold_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldSubPath{selector: TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorMaxLower, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds", fp)
}

func ParseTsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPath(rawField string) (TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildTsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPath(fp)
}

func MustParseTsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPath(rawField string) TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPath {
	fp, err := ParseTsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldTerminalPath struct {
	selector TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelector
}

var _ TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPath = (*TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldTerminalPath)(nil)

func (fp *TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldTerminalPath) Selector() TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds
func (fp *TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldTerminalPath) Get(source *TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorAutoAdaptUpper:
			values = append(values, source.AutoAdaptUpper)
		case TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorAutoAdaptLower:
			values = append(values, source.AutoAdaptLower)
		case TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorMaxUpper:
			if source.MaxUpper != nil {
				values = append(values, source.MaxUpper)
			}
		case TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorMaxLower:
			if source.MaxLower != nil {
				values = append(values, source.MaxLower)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds: %d", fp.selector))
		}
	}
	return
}

func (fp *TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds))
}

// GetSingle returns value pointed by specific field of from source TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds
func (fp *TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldTerminalPath) GetSingle(source *TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds) (interface{}, bool) {
	switch fp.selector {
	case TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorAutoAdaptUpper:
		return source.GetAutoAdaptUpper(), source != nil
	case TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorAutoAdaptLower:
		return source.GetAutoAdaptLower(), source != nil
	case TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorMaxUpper:
		res := source.GetMaxUpper()
		return res, res != nil
	case TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorMaxLower:
		res := source.GetMaxLower()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds: %d", fp.selector))
	}
}

func (fp *TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds))
}

// GetDefault returns a default value of the field type
func (fp *TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorAutoAdaptUpper:
		return false
	case TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorAutoAdaptLower:
		return false
	case TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorMaxUpper:
		return (*AlertingThreshold)(nil)
	case TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorMaxLower:
		return (*AlertingThreshold)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds: %d", fp.selector))
	}
}

func (fp *TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldTerminalPath) ClearValue(item *TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds) {
	if item != nil {
		switch fp.selector {
		case TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorAutoAdaptUpper:
			item.AutoAdaptUpper = false
		case TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorAutoAdaptLower:
			item.AutoAdaptLower = false
		case TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorMaxUpper:
			item.MaxUpper = nil
		case TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorMaxLower:
			item.MaxLower = nil
		default:
			panic(fmt.Sprintf("Invalid selector for TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds: %d", fp.selector))
		}
	}
}

func (fp *TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds))
}

// IsLeaf - whether field path is holds simple value
func (fp *TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorAutoAdaptUpper ||
		fp.selector == TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorAutoAdaptLower
}

func (fp *TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldTerminalPath) WithIValue(value interface{}) TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathValue {
	switch fp.selector {
	case TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorAutoAdaptUpper:
		return &TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldTerminalPathValue{TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldTerminalPath: *fp, value: value.(bool)}
	case TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorAutoAdaptLower:
		return &TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldTerminalPathValue{TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldTerminalPath: *fp, value: value.(bool)}
	case TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorMaxUpper:
		return &TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldTerminalPathValue{TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldTerminalPath: *fp, value: value.(*AlertingThreshold)}
	case TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorMaxLower:
		return &TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldTerminalPathValue{TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldTerminalPath: *fp, value: value.(*AlertingThreshold)}
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds: %d", fp.selector))
	}
}

func (fp *TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldTerminalPath) WithIArrayOfValues(values interface{}) TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathArrayOfValues {
	fpaov := &TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldTerminalPathArrayOfValues{TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldTerminalPath: *fp}
	switch fp.selector {
	case TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorAutoAdaptUpper:
		return &TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldTerminalPathArrayOfValues{TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldTerminalPath: *fp, values: values.([]bool)}
	case TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorAutoAdaptLower:
		return &TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldTerminalPathArrayOfValues{TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldTerminalPath: *fp, values: values.([]bool)}
	case TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorMaxUpper:
		return &TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldTerminalPathArrayOfValues{TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldTerminalPath: *fp, values: values.([]*AlertingThreshold)}
	case TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorMaxLower:
		return &TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldTerminalPathArrayOfValues{TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldTerminalPath: *fp, values: values.([]*AlertingThreshold)}
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds: %d", fp.selector))
	}
	return fpaov
}

func (fp *TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldTerminalPath) WithIArrayItemValue(value interface{}) TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds: %d", fp.selector))
	}
}

func (fp *TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldSubPath struct {
	selector TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPath = (*TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldSubPath)(nil)

func (fps *TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldSubPath) Selector() TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelector {
	return fps.selector
}
func (fps *TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldSubPath) AsMaxUpperSubPath() (AlertingThreshold_FieldPath, bool) {
	res, ok := fps.subPath.(AlertingThreshold_FieldPath)
	return res, ok
}
func (fps *TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldSubPath) AsMaxLowerSubPath() (AlertingThreshold_FieldPath, bool) {
	res, ok := fps.subPath.(AlertingThreshold_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds
func (fps *TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldSubPath) Get(source *TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds) (values []interface{}) {
	switch fps.selector {
	case TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorMaxUpper:
		values = append(values, fps.subPath.GetRaw(source.GetMaxUpper())...)
	case TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorMaxLower:
		values = append(values, fps.subPath.GetRaw(source.GetMaxLower())...)
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds: %d", fps.selector))
	}
	return
}

func (fps *TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds))
}

// GetSingle returns value of selected field from source TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds
func (fps *TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldSubPath) GetSingle(source *TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds) (interface{}, bool) {
	switch fps.selector {
	case TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorMaxUpper:
		if source.GetMaxUpper() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetMaxUpper())
	case TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorMaxLower:
		if source.GetMaxLower() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetMaxLower())
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds: %d", fps.selector))
	}
}

func (fps *TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds))
}

// GetDefault returns a default value of the field type
func (fps *TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldSubPath) ClearValue(item *TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds) {
	if item != nil {
		switch fps.selector {
		case TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorMaxUpper:
			fps.subPath.ClearValueRaw(item.MaxUpper)
		case TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorMaxLower:
			fps.subPath.ClearValueRaw(item.MaxLower)
		default:
			panic(fmt.Sprintf("Invalid selector for TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds: %d", fps.selector))
		}
	}
}

func (fps *TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds))
}

// IsLeaf - whether field path is holds simple value
func (fps *TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldSubPath) WithIValue(value interface{}) TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathValue {
	return &TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldSubPath) WithIArrayOfValues(values interface{}) TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathArrayOfValues {
	return &TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldSubPath) WithIArrayItemValue(value interface{}) TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathArrayItemValue {
	return &TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathValue allows storing values for AlertingThresholds fields according to their type
type TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathValue interface {
	TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds)
	CompareWith(*TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds) (cmp int, comparable bool)
}

func ParseTsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathValue(pathStr, valueStr string) (TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathValue, error) {
	fp, err := ParseTsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing AlertingThresholds field path value from %s: %v", valueStr, err)
	}
	return fpv.(TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathValue), nil
}

func MustParseTsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathValue(pathStr, valueStr string) TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathValue {
	fpv, err := ParseTsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldTerminalPathValue struct {
	TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldTerminalPath
	value interface{}
}

var _ TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathValue = (*TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'AlertingThresholds' as interface{}
func (fpv *TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldTerminalPathValue) AsAutoAdaptUpperValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldTerminalPathValue) AsAutoAdaptLowerValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldTerminalPathValue) AsMaxUpperValue() (*AlertingThreshold, bool) {
	res, ok := fpv.value.(*AlertingThreshold)
	return res, ok
}
func (fpv *TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldTerminalPathValue) AsMaxLowerValue() (*AlertingThreshold, bool) {
	res, ok := fpv.value.(*AlertingThreshold)
	return res, ok
}

// SetTo stores value for selected field for object AlertingThresholds
func (fpv *TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldTerminalPathValue) SetTo(target **TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds) {
	if *target == nil {
		*target = new(TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds)
	}
	switch fpv.selector {
	case TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorAutoAdaptUpper:
		(*target).AutoAdaptUpper = fpv.value.(bool)
	case TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorAutoAdaptLower:
		(*target).AutoAdaptLower = fpv.value.(bool)
	case TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorMaxUpper:
		(*target).MaxUpper = fpv.value.(*AlertingThreshold)
	case TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorMaxLower:
		(*target).MaxLower = fpv.value.(*AlertingThreshold)
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds: %d", fpv.selector))
	}
}

func (fpv *TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldTerminalPathValue' with the value under path in 'TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds'.
func (fpv *TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldTerminalPathValue) CompareWith(source *TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds) (int, bool) {
	switch fpv.selector {
	case TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorAutoAdaptUpper:
		leftValue := fpv.value.(bool)
		rightValue := source.GetAutoAdaptUpper()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorAutoAdaptLower:
		leftValue := fpv.value.(bool)
		rightValue := source.GetAutoAdaptLower()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorMaxUpper:
		return 0, false
	case TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorMaxLower:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds: %d", fpv.selector))
	}
}

func (fpv *TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds))
}

type TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldSubPathValue struct {
	TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathValue = (*TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldSubPathValue)(nil)

func (fpvs *TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldSubPathValue) AsMaxUpperPathValue() (AlertingThreshold_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(AlertingThreshold_FieldPathValue)
	return res, ok
}
func (fpvs *TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldSubPathValue) AsMaxLowerPathValue() (AlertingThreshold_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(AlertingThreshold_FieldPathValue)
	return res, ok
}

func (fpvs *TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldSubPathValue) SetTo(target **TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds) {
	if *target == nil {
		*target = new(TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds)
	}
	switch fpvs.Selector() {
	case TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorMaxUpper:
		fpvs.subPathValue.(AlertingThreshold_FieldPathValue).SetTo(&(*target).MaxUpper)
	case TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorMaxLower:
		fpvs.subPathValue.(AlertingThreshold_FieldPathValue).SetTo(&(*target).MaxLower)
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds: %d", fpvs.Selector()))
	}
}

func (fpvs *TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds)
	fpvs.SetTo(&typedObject)
}

func (fpvs *TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldSubPathValue) CompareWith(source *TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds) (int, bool) {
	switch fpvs.Selector() {
	case TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorMaxUpper:
		return fpvs.subPathValue.(AlertingThreshold_FieldPathValue).CompareWith(source.GetMaxUpper())
	case TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorMaxLower:
		return fpvs.subPathValue.(AlertingThreshold_FieldPathValue).CompareWith(source.GetMaxLower())
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds: %d", fpvs.Selector()))
	}
}

func (fpvs *TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds))
}

// TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathArrayItemValue allows storing single item in Path-specific values for AlertingThresholds according to their type
// Present only for array (repeated) types.
type TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPath
	ContainsValue(*TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds) bool
}

// ParseTsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseTsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathArrayItemValue(pathStr, valueStr string) (TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathArrayItemValue, error) {
	fp, err := ParseTsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing AlertingThresholds field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathArrayItemValue), nil
}

func MustParseTsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathArrayItemValue(pathStr, valueStr string) TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathArrayItemValue {
	fpaiv, err := ParseTsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldTerminalPathArrayItemValue struct {
	TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldTerminalPath
	value interface{}
}

var _ TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathArrayItemValue = (*TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds as interface{}
func (fpaiv *TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldTerminalPathArrayItemValue) GetSingle(source *TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds) (interface{}, bool) {
	return nil, false
}

func (fpaiv *TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds))
}

// Contains returns a boolean indicating if value that is being held is present in given 'AlertingThresholds'
func (fpaiv *TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldTerminalPathArrayItemValue) ContainsValue(source *TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds) bool {
	slice := fpaiv.TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldSubPathArrayItemValue struct {
	TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldSubPathArrayItemValue) AsMaxUpperPathItemValue() (AlertingThreshold_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(AlertingThreshold_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldSubPathArrayItemValue) AsMaxLowerPathItemValue() (AlertingThreshold_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(AlertingThreshold_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'AlertingThresholds'
func (fpaivs *TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldSubPathArrayItemValue) ContainsValue(source *TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds) bool {
	switch fpaivs.Selector() {
	case TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorMaxUpper:
		return fpaivs.subPathItemValue.(AlertingThreshold_FieldPathArrayItemValue).ContainsValue(source.GetMaxUpper())
	case TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorMaxLower:
		return fpaivs.subPathItemValue.(AlertingThreshold_FieldPathArrayItemValue).ContainsValue(source.GetMaxLower())
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds: %d", fpaivs.Selector()))
	}
}

// TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathArrayOfValues allows storing slice of values for AlertingThresholds fields according to their type
type TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPath
}

func ParseTsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathArrayOfValues(pathStr, valuesStr string) (TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathArrayOfValues, error) {
	fp, err := ParseTsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing AlertingThresholds field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathArrayOfValues), nil
}

func MustParseTsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathArrayOfValues(pathStr, valuesStr string) TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathArrayOfValues {
	fpaov, err := ParseTsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldTerminalPathArrayOfValues struct {
	TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldTerminalPath
	values interface{}
}

var _ TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathArrayOfValues = (*TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorAutoAdaptUpper:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorAutoAdaptLower:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorMaxUpper:
		for _, v := range fpaov.values.([]*AlertingThreshold) {
			values = append(values, v)
		}
	case TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorMaxLower:
		for _, v := range fpaov.values.([]*AlertingThreshold) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldTerminalPathArrayOfValues) AsAutoAdaptUpperArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldTerminalPathArrayOfValues) AsAutoAdaptLowerArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldTerminalPathArrayOfValues) AsMaxUpperArrayOfValues() ([]*AlertingThreshold, bool) {
	res, ok := fpaov.values.([]*AlertingThreshold)
	return res, ok
}
func (fpaov *TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldTerminalPathArrayOfValues) AsMaxLowerArrayOfValues() ([]*AlertingThreshold, bool) {
	res, ok := fpaov.values.([]*AlertingThreshold)
	return res, ok
}

type TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldSubPathArrayOfValues struct {
	TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathArrayOfValues = (*TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldSubPathArrayOfValues)(nil)

func (fpsaov *TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldSubPathArrayOfValues) AsMaxUpperPathArrayOfValues() (AlertingThreshold_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(AlertingThreshold_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldSubPathArrayOfValues) AsMaxLowerPathArrayOfValues() (AlertingThreshold_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(AlertingThreshold_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPath interface {
	gotenobject.FieldPath
	Selector() TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelector
	Get(source *TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder) []interface{}
	GetSingle(source *TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder) (interface{}, bool)
	ClearValue(item *TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder)

	// Those methods build corresponding TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathValue
	WithIArrayOfValues(values interface{}) TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathArrayItemValue
}

type TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelector int32

const (
	TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorHiddenSize              TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelector = 0
	TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorLearnRate               TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelector = 1
	TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorMaxTrainingEpochs       TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelector = 2
	TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorMinTrainingEpochs       TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelector = 3
	TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorAcceptableTrainingError TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelector = 4
	TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorTrainingPeriod          TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelector = 5
	TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorCheckPeriodFraction     TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelector = 6
)

func (s TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelector) String() string {
	switch s {
	case TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorHiddenSize:
		return "hidden_size"
	case TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorLearnRate:
		return "learn_rate"
	case TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorMaxTrainingEpochs:
		return "max_training_epochs"
	case TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorMinTrainingEpochs:
		return "min_training_epochs"
	case TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorAcceptableTrainingError:
		return "acceptable_training_error"
	case TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorTrainingPeriod:
		return "training_period"
	case TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorCheckPeriodFraction:
		return "check_period_fraction"
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder: %d", s))
	}
}

func BuildTsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPath(fp gotenobject.RawFieldPath) (TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "hidden_size", "hiddenSize", "hidden-size":
			return &TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPath{selector: TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorHiddenSize}, nil
		case "learn_rate", "learnRate", "learn-rate":
			return &TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPath{selector: TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorLearnRate}, nil
		case "max_training_epochs", "maxTrainingEpochs", "max-training-epochs":
			return &TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPath{selector: TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorMaxTrainingEpochs}, nil
		case "min_training_epochs", "minTrainingEpochs", "min-training-epochs":
			return &TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPath{selector: TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorMinTrainingEpochs}, nil
		case "acceptable_training_error", "acceptableTrainingError", "acceptable-training-error":
			return &TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPath{selector: TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorAcceptableTrainingError}, nil
		case "training_period", "trainingPeriod", "training-period":
			return &TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPath{selector: TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorTrainingPeriod}, nil
		case "check_period_fraction", "checkPeriodFraction", "check-period-fraction":
			return &TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPath{selector: TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorCheckPeriodFraction}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder", fp)
}

func ParseTsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPath(rawField string) (TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildTsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPath(fp)
}

func MustParseTsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPath(rawField string) TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPath {
	fp, err := ParseTsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPath struct {
	selector TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelector
}

var _ TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPath = (*TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPath)(nil)

func (fp *TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPath) Selector() TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder
func (fp *TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPath) Get(source *TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorHiddenSize:
			values = append(values, source.HiddenSize)
		case TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorLearnRate:
			values = append(values, source.LearnRate)
		case TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorMaxTrainingEpochs:
			values = append(values, source.MaxTrainingEpochs)
		case TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorMinTrainingEpochs:
			values = append(values, source.MinTrainingEpochs)
		case TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorAcceptableTrainingError:
			values = append(values, source.AcceptableTrainingError)
		case TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorTrainingPeriod:
			if source.TrainingPeriod != nil {
				values = append(values, source.TrainingPeriod)
			}
		case TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorCheckPeriodFraction:
			values = append(values, source.CheckPeriodFraction)
		default:
			panic(fmt.Sprintf("Invalid selector for TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder: %d", fp.selector))
		}
	}
	return
}

func (fp *TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder))
}

// GetSingle returns value pointed by specific field of from source TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder
func (fp *TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPath) GetSingle(source *TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder) (interface{}, bool) {
	switch fp.selector {
	case TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorHiddenSize:
		return source.GetHiddenSize(), source != nil
	case TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorLearnRate:
		return source.GetLearnRate(), source != nil
	case TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorMaxTrainingEpochs:
		return source.GetMaxTrainingEpochs(), source != nil
	case TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorMinTrainingEpochs:
		return source.GetMinTrainingEpochs(), source != nil
	case TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorAcceptableTrainingError:
		return source.GetAcceptableTrainingError(), source != nil
	case TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorTrainingPeriod:
		res := source.GetTrainingPeriod()
		return res, res != nil
	case TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorCheckPeriodFraction:
		return source.GetCheckPeriodFraction(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder: %d", fp.selector))
	}
}

func (fp *TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder))
}

// GetDefault returns a default value of the field type
func (fp *TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorHiddenSize:
		return int32(0)
	case TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorLearnRate:
		return float64(0)
	case TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorMaxTrainingEpochs:
		return int32(0)
	case TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorMinTrainingEpochs:
		return int32(0)
	case TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorAcceptableTrainingError:
		return float64(0)
	case TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorTrainingPeriod:
		return (*durationpb.Duration)(nil)
	case TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorCheckPeriodFraction:
		return float64(0)
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder: %d", fp.selector))
	}
}

func (fp *TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPath) ClearValue(item *TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder) {
	if item != nil {
		switch fp.selector {
		case TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorHiddenSize:
			item.HiddenSize = int32(0)
		case TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorLearnRate:
			item.LearnRate = float64(0)
		case TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorMaxTrainingEpochs:
			item.MaxTrainingEpochs = int32(0)
		case TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorMinTrainingEpochs:
			item.MinTrainingEpochs = int32(0)
		case TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorAcceptableTrainingError:
			item.AcceptableTrainingError = float64(0)
		case TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorTrainingPeriod:
			item.TrainingPeriod = nil
		case TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorCheckPeriodFraction:
			item.CheckPeriodFraction = float64(0)
		default:
			panic(fmt.Sprintf("Invalid selector for TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder: %d", fp.selector))
		}
	}
}

func (fp *TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder))
}

// IsLeaf - whether field path is holds simple value
func (fp *TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorHiddenSize ||
		fp.selector == TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorLearnRate ||
		fp.selector == TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorMaxTrainingEpochs ||
		fp.selector == TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorMinTrainingEpochs ||
		fp.selector == TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorAcceptableTrainingError ||
		fp.selector == TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorTrainingPeriod ||
		fp.selector == TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorCheckPeriodFraction
}

func (fp *TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPath) WithIValue(value interface{}) TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathValue {
	switch fp.selector {
	case TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorHiddenSize:
		return &TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPathValue{TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPath: *fp, value: value.(int32)}
	case TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorLearnRate:
		return &TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPathValue{TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPath: *fp, value: value.(float64)}
	case TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorMaxTrainingEpochs:
		return &TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPathValue{TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPath: *fp, value: value.(int32)}
	case TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorMinTrainingEpochs:
		return &TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPathValue{TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPath: *fp, value: value.(int32)}
	case TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorAcceptableTrainingError:
		return &TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPathValue{TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPath: *fp, value: value.(float64)}
	case TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorTrainingPeriod:
		return &TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPathValue{TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPath: *fp, value: value.(*durationpb.Duration)}
	case TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorCheckPeriodFraction:
		return &TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPathValue{TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPath: *fp, value: value.(float64)}
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder: %d", fp.selector))
	}
}

func (fp *TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPath) WithIArrayOfValues(values interface{}) TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathArrayOfValues {
	fpaov := &TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPathArrayOfValues{TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPath: *fp}
	switch fp.selector {
	case TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorHiddenSize:
		return &TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPathArrayOfValues{TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPath: *fp, values: values.([]int32)}
	case TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorLearnRate:
		return &TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPathArrayOfValues{TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPath: *fp, values: values.([]float64)}
	case TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorMaxTrainingEpochs:
		return &TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPathArrayOfValues{TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPath: *fp, values: values.([]int32)}
	case TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorMinTrainingEpochs:
		return &TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPathArrayOfValues{TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPath: *fp, values: values.([]int32)}
	case TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorAcceptableTrainingError:
		return &TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPathArrayOfValues{TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPath: *fp, values: values.([]float64)}
	case TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorTrainingPeriod:
		return &TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPathArrayOfValues{TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPath: *fp, values: values.([]*durationpb.Duration)}
	case TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorCheckPeriodFraction:
		return &TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPathArrayOfValues{TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPath: *fp, values: values.([]float64)}
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder: %d", fp.selector))
	}
	return fpaov
}

func (fp *TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPath) WithIArrayItemValue(value interface{}) TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder: %d", fp.selector))
	}
}

func (fp *TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathValue allows storing values for LstmAutoEncoder fields according to their type
type TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathValue interface {
	TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder)
	CompareWith(*TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder) (cmp int, comparable bool)
}

func ParseTsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathValue(pathStr, valueStr string) (TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathValue, error) {
	fp, err := ParseTsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing LstmAutoEncoder field path value from %s: %v", valueStr, err)
	}
	return fpv.(TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathValue), nil
}

func MustParseTsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathValue(pathStr, valueStr string) TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathValue {
	fpv, err := ParseTsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPathValue struct {
	TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPath
	value interface{}
}

var _ TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathValue = (*TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'LstmAutoEncoder' as interface{}
func (fpv *TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPathValue) AsHiddenSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPathValue) AsLearnRateValue() (float64, bool) {
	res, ok := fpv.value.(float64)
	return res, ok
}
func (fpv *TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPathValue) AsMaxTrainingEpochsValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPathValue) AsMinTrainingEpochsValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPathValue) AsAcceptableTrainingErrorValue() (float64, bool) {
	res, ok := fpv.value.(float64)
	return res, ok
}
func (fpv *TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPathValue) AsTrainingPeriodValue() (*durationpb.Duration, bool) {
	res, ok := fpv.value.(*durationpb.Duration)
	return res, ok
}
func (fpv *TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPathValue) AsCheckPeriodFractionValue() (float64, bool) {
	res, ok := fpv.value.(float64)
	return res, ok
}

// SetTo stores value for selected field for object LstmAutoEncoder
func (fpv *TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPathValue) SetTo(target **TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder) {
	if *target == nil {
		*target = new(TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder)
	}
	switch fpv.selector {
	case TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorHiddenSize:
		(*target).HiddenSize = fpv.value.(int32)
	case TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorLearnRate:
		(*target).LearnRate = fpv.value.(float64)
	case TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorMaxTrainingEpochs:
		(*target).MaxTrainingEpochs = fpv.value.(int32)
	case TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorMinTrainingEpochs:
		(*target).MinTrainingEpochs = fpv.value.(int32)
	case TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorAcceptableTrainingError:
		(*target).AcceptableTrainingError = fpv.value.(float64)
	case TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorTrainingPeriod:
		(*target).TrainingPeriod = fpv.value.(*durationpb.Duration)
	case TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorCheckPeriodFraction:
		(*target).CheckPeriodFraction = fpv.value.(float64)
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder: %d", fpv.selector))
	}
}

func (fpv *TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPathValue' with the value under path in 'TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder'.
func (fpv *TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPathValue) CompareWith(source *TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder) (int, bool) {
	switch fpv.selector {
	case TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorHiddenSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetHiddenSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorLearnRate:
		leftValue := fpv.value.(float64)
		rightValue := source.GetLearnRate()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorMaxTrainingEpochs:
		leftValue := fpv.value.(int32)
		rightValue := source.GetMaxTrainingEpochs()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorMinTrainingEpochs:
		leftValue := fpv.value.(int32)
		rightValue := source.GetMinTrainingEpochs()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorAcceptableTrainingError:
		leftValue := fpv.value.(float64)
		rightValue := source.GetAcceptableTrainingError()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorTrainingPeriod:
		leftValue := fpv.value.(*durationpb.Duration)
		rightValue := source.GetTrainingPeriod()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.AsDuration() == rightValue.AsDuration() {
			return 0, true
		} else if leftValue.AsDuration() < rightValue.AsDuration() {
			return -1, true
		} else {
			return 1, true
		}
	case TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorCheckPeriodFraction:
		leftValue := fpv.value.(float64)
		rightValue := source.GetCheckPeriodFraction()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder: %d", fpv.selector))
	}
}

func (fpv *TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder))
}

// TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathArrayItemValue allows storing single item in Path-specific values for LstmAutoEncoder according to their type
// Present only for array (repeated) types.
type TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPath
	ContainsValue(*TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder) bool
}

// ParseTsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseTsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathArrayItemValue(pathStr, valueStr string) (TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathArrayItemValue, error) {
	fp, err := ParseTsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing LstmAutoEncoder field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathArrayItemValue), nil
}

func MustParseTsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathArrayItemValue(pathStr, valueStr string) TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathArrayItemValue {
	fpaiv, err := ParseTsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPathArrayItemValue struct {
	TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPath
	value interface{}
}

var _ TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathArrayItemValue = (*TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder as interface{}
func (fpaiv *TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPathArrayItemValue) GetSingle(source *TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder) (interface{}, bool) {
	return nil, false
}

func (fpaiv *TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder))
}

// Contains returns a boolean indicating if value that is being held is present in given 'LstmAutoEncoder'
func (fpaiv *TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPathArrayItemValue) ContainsValue(source *TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder) bool {
	slice := fpaiv.TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathArrayOfValues allows storing slice of values for LstmAutoEncoder fields according to their type
type TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPath
}

func ParseTsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathArrayOfValues(pathStr, valuesStr string) (TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathArrayOfValues, error) {
	fp, err := ParseTsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing LstmAutoEncoder field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathArrayOfValues), nil
}

func MustParseTsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathArrayOfValues(pathStr, valuesStr string) TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathArrayOfValues {
	fpaov, err := ParseTsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPathArrayOfValues struct {
	TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPath
	values interface{}
}

var _ TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathArrayOfValues = (*TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorHiddenSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorLearnRate:
		for _, v := range fpaov.values.([]float64) {
			values = append(values, v)
		}
	case TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorMaxTrainingEpochs:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorMinTrainingEpochs:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorAcceptableTrainingError:
		for _, v := range fpaov.values.([]float64) {
			values = append(values, v)
		}
	case TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorTrainingPeriod:
		for _, v := range fpaov.values.([]*durationpb.Duration) {
			values = append(values, v)
		}
	case TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorCheckPeriodFraction:
		for _, v := range fpaov.values.([]float64) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPathArrayOfValues) AsHiddenSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPathArrayOfValues) AsLearnRateArrayOfValues() ([]float64, bool) {
	res, ok := fpaov.values.([]float64)
	return res, ok
}
func (fpaov *TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPathArrayOfValues) AsMaxTrainingEpochsArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPathArrayOfValues) AsMinTrainingEpochsArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPathArrayOfValues) AsAcceptableTrainingErrorArrayOfValues() ([]float64, bool) {
	res, ok := fpaov.values.([]float64)
	return res, ok
}
func (fpaov *TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPathArrayOfValues) AsTrainingPeriodArrayOfValues() ([]*durationpb.Duration, bool) {
	res, ok := fpaov.values.([]*durationpb.Duration)
	return res, ok
}
func (fpaov *TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPathArrayOfValues) AsCheckPeriodFractionArrayOfValues() ([]float64, bool) {
	res, ok := fpaov.values.([]float64)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type TsConditionSelectorStrings_FieldPath interface {
	gotenobject.FieldPath
	Selector() TsConditionSelectorStrings_FieldPathSelector
	Get(source *TsCondition_Selector_Strings) []interface{}
	GetSingle(source *TsCondition_Selector_Strings) (interface{}, bool)
	ClearValue(item *TsCondition_Selector_Strings)

	// Those methods build corresponding TsConditionSelectorStrings_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) TsConditionSelectorStrings_FieldPathValue
	WithIArrayOfValues(values interface{}) TsConditionSelectorStrings_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) TsConditionSelectorStrings_FieldPathArrayItemValue
}

type TsConditionSelectorStrings_FieldPathSelector int32

const (
	TsConditionSelectorStrings_FieldPathSelectorValues TsConditionSelectorStrings_FieldPathSelector = 0
)

func (s TsConditionSelectorStrings_FieldPathSelector) String() string {
	switch s {
	case TsConditionSelectorStrings_FieldPathSelectorValues:
		return "values"
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Selector_Strings: %d", s))
	}
}

func BuildTsConditionSelectorStrings_FieldPath(fp gotenobject.RawFieldPath) (TsConditionSelectorStrings_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object TsCondition_Selector_Strings")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "values":
			return &TsConditionSelectorStrings_FieldTerminalPath{selector: TsConditionSelectorStrings_FieldPathSelectorValues}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object TsCondition_Selector_Strings", fp)
}

func ParseTsConditionSelectorStrings_FieldPath(rawField string) (TsConditionSelectorStrings_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildTsConditionSelectorStrings_FieldPath(fp)
}

func MustParseTsConditionSelectorStrings_FieldPath(rawField string) TsConditionSelectorStrings_FieldPath {
	fp, err := ParseTsConditionSelectorStrings_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type TsConditionSelectorStrings_FieldTerminalPath struct {
	selector TsConditionSelectorStrings_FieldPathSelector
}

var _ TsConditionSelectorStrings_FieldPath = (*TsConditionSelectorStrings_FieldTerminalPath)(nil)

func (fp *TsConditionSelectorStrings_FieldTerminalPath) Selector() TsConditionSelectorStrings_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *TsConditionSelectorStrings_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *TsConditionSelectorStrings_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source TsCondition_Selector_Strings
func (fp *TsConditionSelectorStrings_FieldTerminalPath) Get(source *TsCondition_Selector_Strings) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case TsConditionSelectorStrings_FieldPathSelectorValues:
			for _, value := range source.GetValues() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for TsCondition_Selector_Strings: %d", fp.selector))
		}
	}
	return
}

func (fp *TsConditionSelectorStrings_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*TsCondition_Selector_Strings))
}

// GetSingle returns value pointed by specific field of from source TsCondition_Selector_Strings
func (fp *TsConditionSelectorStrings_FieldTerminalPath) GetSingle(source *TsCondition_Selector_Strings) (interface{}, bool) {
	switch fp.selector {
	case TsConditionSelectorStrings_FieldPathSelectorValues:
		res := source.GetValues()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Selector_Strings: %d", fp.selector))
	}
}

func (fp *TsConditionSelectorStrings_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*TsCondition_Selector_Strings))
}

// GetDefault returns a default value of the field type
func (fp *TsConditionSelectorStrings_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case TsConditionSelectorStrings_FieldPathSelectorValues:
		return ([]string)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Selector_Strings: %d", fp.selector))
	}
}

func (fp *TsConditionSelectorStrings_FieldTerminalPath) ClearValue(item *TsCondition_Selector_Strings) {
	if item != nil {
		switch fp.selector {
		case TsConditionSelectorStrings_FieldPathSelectorValues:
			item.Values = nil
		default:
			panic(fmt.Sprintf("Invalid selector for TsCondition_Selector_Strings: %d", fp.selector))
		}
	}
}

func (fp *TsConditionSelectorStrings_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*TsCondition_Selector_Strings))
}

// IsLeaf - whether field path is holds simple value
func (fp *TsConditionSelectorStrings_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == TsConditionSelectorStrings_FieldPathSelectorValues
}

func (fp *TsConditionSelectorStrings_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *TsConditionSelectorStrings_FieldTerminalPath) WithIValue(value interface{}) TsConditionSelectorStrings_FieldPathValue {
	switch fp.selector {
	case TsConditionSelectorStrings_FieldPathSelectorValues:
		return &TsConditionSelectorStrings_FieldTerminalPathValue{TsConditionSelectorStrings_FieldTerminalPath: *fp, value: value.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Selector_Strings: %d", fp.selector))
	}
}

func (fp *TsConditionSelectorStrings_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *TsConditionSelectorStrings_FieldTerminalPath) WithIArrayOfValues(values interface{}) TsConditionSelectorStrings_FieldPathArrayOfValues {
	fpaov := &TsConditionSelectorStrings_FieldTerminalPathArrayOfValues{TsConditionSelectorStrings_FieldTerminalPath: *fp}
	switch fp.selector {
	case TsConditionSelectorStrings_FieldPathSelectorValues:
		return &TsConditionSelectorStrings_FieldTerminalPathArrayOfValues{TsConditionSelectorStrings_FieldTerminalPath: *fp, values: values.([][]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Selector_Strings: %d", fp.selector))
	}
	return fpaov
}

func (fp *TsConditionSelectorStrings_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *TsConditionSelectorStrings_FieldTerminalPath) WithIArrayItemValue(value interface{}) TsConditionSelectorStrings_FieldPathArrayItemValue {
	switch fp.selector {
	case TsConditionSelectorStrings_FieldPathSelectorValues:
		return &TsConditionSelectorStrings_FieldTerminalPathArrayItemValue{TsConditionSelectorStrings_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Selector_Strings: %d", fp.selector))
	}
}

func (fp *TsConditionSelectorStrings_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// TsConditionSelectorStrings_FieldPathValue allows storing values for Strings fields according to their type
type TsConditionSelectorStrings_FieldPathValue interface {
	TsConditionSelectorStrings_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **TsCondition_Selector_Strings)
	CompareWith(*TsCondition_Selector_Strings) (cmp int, comparable bool)
}

func ParseTsConditionSelectorStrings_FieldPathValue(pathStr, valueStr string) (TsConditionSelectorStrings_FieldPathValue, error) {
	fp, err := ParseTsConditionSelectorStrings_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Strings field path value from %s: %v", valueStr, err)
	}
	return fpv.(TsConditionSelectorStrings_FieldPathValue), nil
}

func MustParseTsConditionSelectorStrings_FieldPathValue(pathStr, valueStr string) TsConditionSelectorStrings_FieldPathValue {
	fpv, err := ParseTsConditionSelectorStrings_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type TsConditionSelectorStrings_FieldTerminalPathValue struct {
	TsConditionSelectorStrings_FieldTerminalPath
	value interface{}
}

var _ TsConditionSelectorStrings_FieldPathValue = (*TsConditionSelectorStrings_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Strings' as interface{}
func (fpv *TsConditionSelectorStrings_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *TsConditionSelectorStrings_FieldTerminalPathValue) AsValuesValue() ([]string, bool) {
	res, ok := fpv.value.([]string)
	return res, ok
}

// SetTo stores value for selected field for object Strings
func (fpv *TsConditionSelectorStrings_FieldTerminalPathValue) SetTo(target **TsCondition_Selector_Strings) {
	if *target == nil {
		*target = new(TsCondition_Selector_Strings)
	}
	switch fpv.selector {
	case TsConditionSelectorStrings_FieldPathSelectorValues:
		(*target).Values = fpv.value.([]string)
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Selector_Strings: %d", fpv.selector))
	}
}

func (fpv *TsConditionSelectorStrings_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*TsCondition_Selector_Strings)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'TsConditionSelectorStrings_FieldTerminalPathValue' with the value under path in 'TsCondition_Selector_Strings'.
func (fpv *TsConditionSelectorStrings_FieldTerminalPathValue) CompareWith(source *TsCondition_Selector_Strings) (int, bool) {
	switch fpv.selector {
	case TsConditionSelectorStrings_FieldPathSelectorValues:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Selector_Strings: %d", fpv.selector))
	}
}

func (fpv *TsConditionSelectorStrings_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*TsCondition_Selector_Strings))
}

// TsConditionSelectorStrings_FieldPathArrayItemValue allows storing single item in Path-specific values for Strings according to their type
// Present only for array (repeated) types.
type TsConditionSelectorStrings_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	TsConditionSelectorStrings_FieldPath
	ContainsValue(*TsCondition_Selector_Strings) bool
}

// ParseTsConditionSelectorStrings_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseTsConditionSelectorStrings_FieldPathArrayItemValue(pathStr, valueStr string) (TsConditionSelectorStrings_FieldPathArrayItemValue, error) {
	fp, err := ParseTsConditionSelectorStrings_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Strings field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(TsConditionSelectorStrings_FieldPathArrayItemValue), nil
}

func MustParseTsConditionSelectorStrings_FieldPathArrayItemValue(pathStr, valueStr string) TsConditionSelectorStrings_FieldPathArrayItemValue {
	fpaiv, err := ParseTsConditionSelectorStrings_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type TsConditionSelectorStrings_FieldTerminalPathArrayItemValue struct {
	TsConditionSelectorStrings_FieldTerminalPath
	value interface{}
}

var _ TsConditionSelectorStrings_FieldPathArrayItemValue = (*TsConditionSelectorStrings_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object TsCondition_Selector_Strings as interface{}
func (fpaiv *TsConditionSelectorStrings_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *TsConditionSelectorStrings_FieldTerminalPathArrayItemValue) AsValuesItemValue() (string, bool) {
	res, ok := fpaiv.value.(string)
	return res, ok
}

func (fpaiv *TsConditionSelectorStrings_FieldTerminalPathArrayItemValue) GetSingle(source *TsCondition_Selector_Strings) (interface{}, bool) {
	return nil, false
}

func (fpaiv *TsConditionSelectorStrings_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*TsCondition_Selector_Strings))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Strings'
func (fpaiv *TsConditionSelectorStrings_FieldTerminalPathArrayItemValue) ContainsValue(source *TsCondition_Selector_Strings) bool {
	slice := fpaiv.TsConditionSelectorStrings_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// TsConditionSelectorStrings_FieldPathArrayOfValues allows storing slice of values for Strings fields according to their type
type TsConditionSelectorStrings_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	TsConditionSelectorStrings_FieldPath
}

func ParseTsConditionSelectorStrings_FieldPathArrayOfValues(pathStr, valuesStr string) (TsConditionSelectorStrings_FieldPathArrayOfValues, error) {
	fp, err := ParseTsConditionSelectorStrings_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Strings field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(TsConditionSelectorStrings_FieldPathArrayOfValues), nil
}

func MustParseTsConditionSelectorStrings_FieldPathArrayOfValues(pathStr, valuesStr string) TsConditionSelectorStrings_FieldPathArrayOfValues {
	fpaov, err := ParseTsConditionSelectorStrings_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type TsConditionSelectorStrings_FieldTerminalPathArrayOfValues struct {
	TsConditionSelectorStrings_FieldTerminalPath
	values interface{}
}

var _ TsConditionSelectorStrings_FieldPathArrayOfValues = (*TsConditionSelectorStrings_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *TsConditionSelectorStrings_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case TsConditionSelectorStrings_FieldPathSelectorValues:
		for _, v := range fpaov.values.([][]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *TsConditionSelectorStrings_FieldTerminalPathArrayOfValues) AsValuesArrayOfValues() ([][]string, bool) {
	res, ok := fpaov.values.([][]string)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type AlertingThreshold_FieldPath interface {
	gotenobject.FieldPath
	Selector() AlertingThreshold_FieldPathSelector
	Get(source *AlertingThreshold) []interface{}
	GetSingle(source *AlertingThreshold) (interface{}, bool)
	ClearValue(item *AlertingThreshold)

	// Those methods build corresponding AlertingThreshold_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) AlertingThreshold_FieldPathValue
	WithIArrayOfValues(values interface{}) AlertingThreshold_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) AlertingThreshold_FieldPathArrayItemValue
}

type AlertingThreshold_FieldPathSelector int32

const (
	AlertingThreshold_FieldPathSelectorValue       AlertingThreshold_FieldPathSelector = 0
	AlertingThreshold_FieldPathSelectorIsInclusive AlertingThreshold_FieldPathSelector = 1
)

func (s AlertingThreshold_FieldPathSelector) String() string {
	switch s {
	case AlertingThreshold_FieldPathSelectorValue:
		return "value"
	case AlertingThreshold_FieldPathSelectorIsInclusive:
		return "is_inclusive"
	default:
		panic(fmt.Sprintf("Invalid selector for AlertingThreshold: %d", s))
	}
}

func BuildAlertingThreshold_FieldPath(fp gotenobject.RawFieldPath) (AlertingThreshold_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object AlertingThreshold")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "value":
			return &AlertingThreshold_FieldTerminalPath{selector: AlertingThreshold_FieldPathSelectorValue}, nil
		case "is_inclusive", "isInclusive", "is-inclusive":
			return &AlertingThreshold_FieldTerminalPath{selector: AlertingThreshold_FieldPathSelectorIsInclusive}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object AlertingThreshold", fp)
}

func ParseAlertingThreshold_FieldPath(rawField string) (AlertingThreshold_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildAlertingThreshold_FieldPath(fp)
}

func MustParseAlertingThreshold_FieldPath(rawField string) AlertingThreshold_FieldPath {
	fp, err := ParseAlertingThreshold_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type AlertingThreshold_FieldTerminalPath struct {
	selector AlertingThreshold_FieldPathSelector
}

var _ AlertingThreshold_FieldPath = (*AlertingThreshold_FieldTerminalPath)(nil)

func (fp *AlertingThreshold_FieldTerminalPath) Selector() AlertingThreshold_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *AlertingThreshold_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *AlertingThreshold_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source AlertingThreshold
func (fp *AlertingThreshold_FieldTerminalPath) Get(source *AlertingThreshold) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case AlertingThreshold_FieldPathSelectorValue:
			values = append(values, source.Value)
		case AlertingThreshold_FieldPathSelectorIsInclusive:
			values = append(values, source.IsInclusive)
		default:
			panic(fmt.Sprintf("Invalid selector for AlertingThreshold: %d", fp.selector))
		}
	}
	return
}

func (fp *AlertingThreshold_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*AlertingThreshold))
}

// GetSingle returns value pointed by specific field of from source AlertingThreshold
func (fp *AlertingThreshold_FieldTerminalPath) GetSingle(source *AlertingThreshold) (interface{}, bool) {
	switch fp.selector {
	case AlertingThreshold_FieldPathSelectorValue:
		return source.GetValue(), source != nil
	case AlertingThreshold_FieldPathSelectorIsInclusive:
		return source.GetIsInclusive(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for AlertingThreshold: %d", fp.selector))
	}
}

func (fp *AlertingThreshold_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*AlertingThreshold))
}

// GetDefault returns a default value of the field type
func (fp *AlertingThreshold_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case AlertingThreshold_FieldPathSelectorValue:
		return float64(0)
	case AlertingThreshold_FieldPathSelectorIsInclusive:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for AlertingThreshold: %d", fp.selector))
	}
}

func (fp *AlertingThreshold_FieldTerminalPath) ClearValue(item *AlertingThreshold) {
	if item != nil {
		switch fp.selector {
		case AlertingThreshold_FieldPathSelectorValue:
			item.Value = float64(0)
		case AlertingThreshold_FieldPathSelectorIsInclusive:
			item.IsInclusive = false
		default:
			panic(fmt.Sprintf("Invalid selector for AlertingThreshold: %d", fp.selector))
		}
	}
}

func (fp *AlertingThreshold_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*AlertingThreshold))
}

// IsLeaf - whether field path is holds simple value
func (fp *AlertingThreshold_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == AlertingThreshold_FieldPathSelectorValue ||
		fp.selector == AlertingThreshold_FieldPathSelectorIsInclusive
}

func (fp *AlertingThreshold_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *AlertingThreshold_FieldTerminalPath) WithIValue(value interface{}) AlertingThreshold_FieldPathValue {
	switch fp.selector {
	case AlertingThreshold_FieldPathSelectorValue:
		return &AlertingThreshold_FieldTerminalPathValue{AlertingThreshold_FieldTerminalPath: *fp, value: value.(float64)}
	case AlertingThreshold_FieldPathSelectorIsInclusive:
		return &AlertingThreshold_FieldTerminalPathValue{AlertingThreshold_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for AlertingThreshold: %d", fp.selector))
	}
}

func (fp *AlertingThreshold_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *AlertingThreshold_FieldTerminalPath) WithIArrayOfValues(values interface{}) AlertingThreshold_FieldPathArrayOfValues {
	fpaov := &AlertingThreshold_FieldTerminalPathArrayOfValues{AlertingThreshold_FieldTerminalPath: *fp}
	switch fp.selector {
	case AlertingThreshold_FieldPathSelectorValue:
		return &AlertingThreshold_FieldTerminalPathArrayOfValues{AlertingThreshold_FieldTerminalPath: *fp, values: values.([]float64)}
	case AlertingThreshold_FieldPathSelectorIsInclusive:
		return &AlertingThreshold_FieldTerminalPathArrayOfValues{AlertingThreshold_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for AlertingThreshold: %d", fp.selector))
	}
	return fpaov
}

func (fp *AlertingThreshold_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *AlertingThreshold_FieldTerminalPath) WithIArrayItemValue(value interface{}) AlertingThreshold_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for AlertingThreshold: %d", fp.selector))
	}
}

func (fp *AlertingThreshold_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// AlertingThreshold_FieldPathValue allows storing values for AlertingThreshold fields according to their type
type AlertingThreshold_FieldPathValue interface {
	AlertingThreshold_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **AlertingThreshold)
	CompareWith(*AlertingThreshold) (cmp int, comparable bool)
}

func ParseAlertingThreshold_FieldPathValue(pathStr, valueStr string) (AlertingThreshold_FieldPathValue, error) {
	fp, err := ParseAlertingThreshold_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing AlertingThreshold field path value from %s: %v", valueStr, err)
	}
	return fpv.(AlertingThreshold_FieldPathValue), nil
}

func MustParseAlertingThreshold_FieldPathValue(pathStr, valueStr string) AlertingThreshold_FieldPathValue {
	fpv, err := ParseAlertingThreshold_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type AlertingThreshold_FieldTerminalPathValue struct {
	AlertingThreshold_FieldTerminalPath
	value interface{}
}

var _ AlertingThreshold_FieldPathValue = (*AlertingThreshold_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'AlertingThreshold' as interface{}
func (fpv *AlertingThreshold_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *AlertingThreshold_FieldTerminalPathValue) AsValueValue() (float64, bool) {
	res, ok := fpv.value.(float64)
	return res, ok
}
func (fpv *AlertingThreshold_FieldTerminalPathValue) AsIsInclusiveValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object AlertingThreshold
func (fpv *AlertingThreshold_FieldTerminalPathValue) SetTo(target **AlertingThreshold) {
	if *target == nil {
		*target = new(AlertingThreshold)
	}
	switch fpv.selector {
	case AlertingThreshold_FieldPathSelectorValue:
		(*target).Value = fpv.value.(float64)
	case AlertingThreshold_FieldPathSelectorIsInclusive:
		(*target).IsInclusive = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for AlertingThreshold: %d", fpv.selector))
	}
}

func (fpv *AlertingThreshold_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*AlertingThreshold)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'AlertingThreshold_FieldTerminalPathValue' with the value under path in 'AlertingThreshold'.
func (fpv *AlertingThreshold_FieldTerminalPathValue) CompareWith(source *AlertingThreshold) (int, bool) {
	switch fpv.selector {
	case AlertingThreshold_FieldPathSelectorValue:
		leftValue := fpv.value.(float64)
		rightValue := source.GetValue()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case AlertingThreshold_FieldPathSelectorIsInclusive:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsInclusive()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for AlertingThreshold: %d", fpv.selector))
	}
}

func (fpv *AlertingThreshold_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*AlertingThreshold))
}

// AlertingThreshold_FieldPathArrayItemValue allows storing single item in Path-specific values for AlertingThreshold according to their type
// Present only for array (repeated) types.
type AlertingThreshold_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	AlertingThreshold_FieldPath
	ContainsValue(*AlertingThreshold) bool
}

// ParseAlertingThreshold_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseAlertingThreshold_FieldPathArrayItemValue(pathStr, valueStr string) (AlertingThreshold_FieldPathArrayItemValue, error) {
	fp, err := ParseAlertingThreshold_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing AlertingThreshold field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(AlertingThreshold_FieldPathArrayItemValue), nil
}

func MustParseAlertingThreshold_FieldPathArrayItemValue(pathStr, valueStr string) AlertingThreshold_FieldPathArrayItemValue {
	fpaiv, err := ParseAlertingThreshold_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type AlertingThreshold_FieldTerminalPathArrayItemValue struct {
	AlertingThreshold_FieldTerminalPath
	value interface{}
}

var _ AlertingThreshold_FieldPathArrayItemValue = (*AlertingThreshold_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object AlertingThreshold as interface{}
func (fpaiv *AlertingThreshold_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *AlertingThreshold_FieldTerminalPathArrayItemValue) GetSingle(source *AlertingThreshold) (interface{}, bool) {
	return nil, false
}

func (fpaiv *AlertingThreshold_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*AlertingThreshold))
}

// Contains returns a boolean indicating if value that is being held is present in given 'AlertingThreshold'
func (fpaiv *AlertingThreshold_FieldTerminalPathArrayItemValue) ContainsValue(source *AlertingThreshold) bool {
	slice := fpaiv.AlertingThreshold_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// AlertingThreshold_FieldPathArrayOfValues allows storing slice of values for AlertingThreshold fields according to their type
type AlertingThreshold_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	AlertingThreshold_FieldPath
}

func ParseAlertingThreshold_FieldPathArrayOfValues(pathStr, valuesStr string) (AlertingThreshold_FieldPathArrayOfValues, error) {
	fp, err := ParseAlertingThreshold_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing AlertingThreshold field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(AlertingThreshold_FieldPathArrayOfValues), nil
}

func MustParseAlertingThreshold_FieldPathArrayOfValues(pathStr, valuesStr string) AlertingThreshold_FieldPathArrayOfValues {
	fpaov, err := ParseAlertingThreshold_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type AlertingThreshold_FieldTerminalPathArrayOfValues struct {
	AlertingThreshold_FieldTerminalPath
	values interface{}
}

var _ AlertingThreshold_FieldPathArrayOfValues = (*AlertingThreshold_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *AlertingThreshold_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case AlertingThreshold_FieldPathSelectorValue:
		for _, v := range fpaov.values.([]float64) {
			values = append(values, v)
		}
	case AlertingThreshold_FieldPathSelectorIsInclusive:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *AlertingThreshold_FieldTerminalPathArrayOfValues) AsValueArrayOfValues() ([]float64, bool) {
	res, ok := fpaov.values.([]float64)
	return res, ok
}
func (fpaov *AlertingThreshold_FieldTerminalPathArrayOfValues) AsIsInclusiveArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
