// Code generated by protoc-gen-goten-object
// File: edgelq/alerting/proto/v1/ts_condition.proto
// DO NOT EDIT!!!

package ts_condition

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
	"github.com/cloudwan/goten-sdk/runtime/strcase"
)

// proto imports
import (
	rcommon "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/common"
	document "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/document"
	policy "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/policy"
	ts_condition_template "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/ts_condition_template"
	meta "github.com/cloudwan/goten-sdk/types/meta"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &document.Document{}
	_ = &policy.Policy{}
	_ = &rcommon.LogCndSpec{}
	_ = &ts_condition_template.TsConditionTemplate{}
	_ = &fieldmaskpb.FieldMask{}
	_ = &meta.Meta{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type TsCondition_FieldPath interface {
	gotenobject.FieldPath
	Selector() TsCondition_FieldPathSelector
	Get(source *TsCondition) []interface{}
	GetSingle(source *TsCondition) (interface{}, bool)
	ClearValue(item *TsCondition)

	// Those methods build corresponding TsCondition_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) TsCondition_FieldPathValue
	WithIArrayOfValues(values interface{}) TsCondition_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) TsCondition_FieldPathArrayItemValue
}

type TsCondition_FieldPathSelector int32

const (
	TsCondition_FieldPathSelectorName           TsCondition_FieldPathSelector = 0
	TsCondition_FieldPathSelectorMetadata       TsCondition_FieldPathSelector = 1
	TsCondition_FieldPathSelectorDisplayName    TsCondition_FieldPathSelector = 2
	TsCondition_FieldPathSelectorDescription    TsCondition_FieldPathSelector = 3
	TsCondition_FieldPathSelectorSupportingDocs TsCondition_FieldPathSelector = 4
	TsCondition_FieldPathSelectorSpec           TsCondition_FieldPathSelector = 5
	TsCondition_FieldPathSelectorInternal       TsCondition_FieldPathSelector = 6
	TsCondition_FieldPathSelectorFilterSelector TsCondition_FieldPathSelector = 7
	TsCondition_FieldPathSelectorTemplateSource TsCondition_FieldPathSelector = 8
)

func (s TsCondition_FieldPathSelector) String() string {
	switch s {
	case TsCondition_FieldPathSelectorName:
		return "name"
	case TsCondition_FieldPathSelectorMetadata:
		return "metadata"
	case TsCondition_FieldPathSelectorDisplayName:
		return "display_name"
	case TsCondition_FieldPathSelectorDescription:
		return "description"
	case TsCondition_FieldPathSelectorSupportingDocs:
		return "supporting_docs"
	case TsCondition_FieldPathSelectorSpec:
		return "spec"
	case TsCondition_FieldPathSelectorInternal:
		return "internal"
	case TsCondition_FieldPathSelectorFilterSelector:
		return "filter_selector"
	case TsCondition_FieldPathSelectorTemplateSource:
		return "template_source"
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition: %d", s))
	}
}

func BuildTsCondition_FieldPath(fp gotenobject.RawFieldPath) (TsCondition_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object TsCondition")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &TsCondition_FieldTerminalPath{selector: TsCondition_FieldPathSelectorName}, nil
		case "metadata":
			return &TsCondition_FieldTerminalPath{selector: TsCondition_FieldPathSelectorMetadata}, nil
		case "display_name", "displayName", "display-name":
			return &TsCondition_FieldTerminalPath{selector: TsCondition_FieldPathSelectorDisplayName}, nil
		case "description":
			return &TsCondition_FieldTerminalPath{selector: TsCondition_FieldPathSelectorDescription}, nil
		case "supporting_docs", "supportingDocs", "supporting-docs":
			return &TsCondition_FieldTerminalPath{selector: TsCondition_FieldPathSelectorSupportingDocs}, nil
		case "spec":
			return &TsCondition_FieldTerminalPath{selector: TsCondition_FieldPathSelectorSpec}, nil
		case "internal":
			return &TsCondition_FieldTerminalPath{selector: TsCondition_FieldPathSelectorInternal}, nil
		case "filter_selector", "filterSelector", "filter-selector":
			return &TsCondition_FieldTerminalPath{selector: TsCondition_FieldPathSelectorFilterSelector}, nil
		case "template_source", "templateSource", "template-source":
			return &TsCondition_FieldTerminalPath{selector: TsCondition_FieldPathSelectorTemplateSource}, nil
		}
	} else {
		switch fp[0] {
		case "metadata":
			if subpath, err := meta.BuildMeta_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &TsCondition_FieldSubPath{selector: TsCondition_FieldPathSelectorMetadata, subPath: subpath}, nil
			}
		case "spec":
			if subpath, err := rcommon.BuildTsCndSpec_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &TsCondition_FieldSubPath{selector: TsCondition_FieldPathSelectorSpec, subPath: subpath}, nil
			}
		case "internal":
			if subpath, err := BuildTsConditionInternal_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &TsCondition_FieldSubPath{selector: TsCondition_FieldPathSelectorInternal, subPath: subpath}, nil
			}
		case "filter_selector", "filterSelector", "filter-selector":
			if subpath, err := BuildTsConditionSelector_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &TsCondition_FieldSubPath{selector: TsCondition_FieldPathSelectorFilterSelector, subPath: subpath}, nil
			}
		case "template_source", "templateSource", "template-source":
			if subpath, err := BuildTsConditionTemplateSource_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &TsCondition_FieldSubPath{selector: TsCondition_FieldPathSelectorTemplateSource, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object TsCondition", fp)
}

func ParseTsCondition_FieldPath(rawField string) (TsCondition_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildTsCondition_FieldPath(fp)
}

func MustParseTsCondition_FieldPath(rawField string) TsCondition_FieldPath {
	fp, err := ParseTsCondition_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type TsCondition_FieldTerminalPath struct {
	selector TsCondition_FieldPathSelector
}

var _ TsCondition_FieldPath = (*TsCondition_FieldTerminalPath)(nil)

func (fp *TsCondition_FieldTerminalPath) Selector() TsCondition_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *TsCondition_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *TsCondition_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source TsCondition
func (fp *TsCondition_FieldTerminalPath) Get(source *TsCondition) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case TsCondition_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case TsCondition_FieldPathSelectorMetadata:
			if source.Metadata != nil {
				values = append(values, source.Metadata)
			}
		case TsCondition_FieldPathSelectorDisplayName:
			values = append(values, source.DisplayName)
		case TsCondition_FieldPathSelectorDescription:
			values = append(values, source.Description)
		case TsCondition_FieldPathSelectorSupportingDocs:
			for _, value := range source.GetSupportingDocs() {
				values = append(values, value)
			}
		case TsCondition_FieldPathSelectorSpec:
			if source.Spec != nil {
				values = append(values, source.Spec)
			}
		case TsCondition_FieldPathSelectorInternal:
			if source.Internal != nil {
				values = append(values, source.Internal)
			}
		case TsCondition_FieldPathSelectorFilterSelector:
			if source.FilterSelector != nil {
				values = append(values, source.FilterSelector)
			}
		case TsCondition_FieldPathSelectorTemplateSource:
			if source.TemplateSource != nil {
				values = append(values, source.TemplateSource)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for TsCondition: %d", fp.selector))
		}
	}
	return
}

func (fp *TsCondition_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*TsCondition))
}

// GetSingle returns value pointed by specific field of from source TsCondition
func (fp *TsCondition_FieldTerminalPath) GetSingle(source *TsCondition) (interface{}, bool) {
	switch fp.selector {
	case TsCondition_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case TsCondition_FieldPathSelectorMetadata:
		res := source.GetMetadata()
		return res, res != nil
	case TsCondition_FieldPathSelectorDisplayName:
		return source.GetDisplayName(), source != nil
	case TsCondition_FieldPathSelectorDescription:
		return source.GetDescription(), source != nil
	case TsCondition_FieldPathSelectorSupportingDocs:
		res := source.GetSupportingDocs()
		return res, res != nil
	case TsCondition_FieldPathSelectorSpec:
		res := source.GetSpec()
		return res, res != nil
	case TsCondition_FieldPathSelectorInternal:
		res := source.GetInternal()
		return res, res != nil
	case TsCondition_FieldPathSelectorFilterSelector:
		res := source.GetFilterSelector()
		return res, res != nil
	case TsCondition_FieldPathSelectorTemplateSource:
		res := source.GetTemplateSource()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition: %d", fp.selector))
	}
}

func (fp *TsCondition_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*TsCondition))
}

// GetDefault returns a default value of the field type
func (fp *TsCondition_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case TsCondition_FieldPathSelectorName:
		return (*Name)(nil)
	case TsCondition_FieldPathSelectorMetadata:
		return (*meta.Meta)(nil)
	case TsCondition_FieldPathSelectorDisplayName:
		return ""
	case TsCondition_FieldPathSelectorDescription:
		return ""
	case TsCondition_FieldPathSelectorSupportingDocs:
		return ([]*document.Reference)(nil)
	case TsCondition_FieldPathSelectorSpec:
		return (*rcommon.TsCndSpec)(nil)
	case TsCondition_FieldPathSelectorInternal:
		return (*TsCondition_Internal)(nil)
	case TsCondition_FieldPathSelectorFilterSelector:
		return (*TsCondition_Selector)(nil)
	case TsCondition_FieldPathSelectorTemplateSource:
		return (*TsCondition_TemplateSource)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition: %d", fp.selector))
	}
}

func (fp *TsCondition_FieldTerminalPath) ClearValue(item *TsCondition) {
	if item != nil {
		switch fp.selector {
		case TsCondition_FieldPathSelectorName:
			item.Name = nil
		case TsCondition_FieldPathSelectorMetadata:
			item.Metadata = nil
		case TsCondition_FieldPathSelectorDisplayName:
			item.DisplayName = ""
		case TsCondition_FieldPathSelectorDescription:
			item.Description = ""
		case TsCondition_FieldPathSelectorSupportingDocs:
			item.SupportingDocs = nil
		case TsCondition_FieldPathSelectorSpec:
			item.Spec = nil
		case TsCondition_FieldPathSelectorInternal:
			item.Internal = nil
		case TsCondition_FieldPathSelectorFilterSelector:
			item.FilterSelector = nil
		case TsCondition_FieldPathSelectorTemplateSource:
			item.TemplateSource = nil
		default:
			panic(fmt.Sprintf("Invalid selector for TsCondition: %d", fp.selector))
		}
	}
}

func (fp *TsCondition_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*TsCondition))
}

// IsLeaf - whether field path is holds simple value
func (fp *TsCondition_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == TsCondition_FieldPathSelectorName ||
		fp.selector == TsCondition_FieldPathSelectorDisplayName ||
		fp.selector == TsCondition_FieldPathSelectorDescription ||
		fp.selector == TsCondition_FieldPathSelectorSupportingDocs
}

func (fp *TsCondition_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *TsCondition_FieldTerminalPath) WithIValue(value interface{}) TsCondition_FieldPathValue {
	switch fp.selector {
	case TsCondition_FieldPathSelectorName:
		return &TsCondition_FieldTerminalPathValue{TsCondition_FieldTerminalPath: *fp, value: value.(*Name)}
	case TsCondition_FieldPathSelectorMetadata:
		return &TsCondition_FieldTerminalPathValue{TsCondition_FieldTerminalPath: *fp, value: value.(*meta.Meta)}
	case TsCondition_FieldPathSelectorDisplayName:
		return &TsCondition_FieldTerminalPathValue{TsCondition_FieldTerminalPath: *fp, value: value.(string)}
	case TsCondition_FieldPathSelectorDescription:
		return &TsCondition_FieldTerminalPathValue{TsCondition_FieldTerminalPath: *fp, value: value.(string)}
	case TsCondition_FieldPathSelectorSupportingDocs:
		return &TsCondition_FieldTerminalPathValue{TsCondition_FieldTerminalPath: *fp, value: value.([]*document.Reference)}
	case TsCondition_FieldPathSelectorSpec:
		return &TsCondition_FieldTerminalPathValue{TsCondition_FieldTerminalPath: *fp, value: value.(*rcommon.TsCndSpec)}
	case TsCondition_FieldPathSelectorInternal:
		return &TsCondition_FieldTerminalPathValue{TsCondition_FieldTerminalPath: *fp, value: value.(*TsCondition_Internal)}
	case TsCondition_FieldPathSelectorFilterSelector:
		return &TsCondition_FieldTerminalPathValue{TsCondition_FieldTerminalPath: *fp, value: value.(*TsCondition_Selector)}
	case TsCondition_FieldPathSelectorTemplateSource:
		return &TsCondition_FieldTerminalPathValue{TsCondition_FieldTerminalPath: *fp, value: value.(*TsCondition_TemplateSource)}
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition: %d", fp.selector))
	}
}

func (fp *TsCondition_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *TsCondition_FieldTerminalPath) WithIArrayOfValues(values interface{}) TsCondition_FieldPathArrayOfValues {
	fpaov := &TsCondition_FieldTerminalPathArrayOfValues{TsCondition_FieldTerminalPath: *fp}
	switch fp.selector {
	case TsCondition_FieldPathSelectorName:
		return &TsCondition_FieldTerminalPathArrayOfValues{TsCondition_FieldTerminalPath: *fp, values: values.([]*Name)}
	case TsCondition_FieldPathSelectorMetadata:
		return &TsCondition_FieldTerminalPathArrayOfValues{TsCondition_FieldTerminalPath: *fp, values: values.([]*meta.Meta)}
	case TsCondition_FieldPathSelectorDisplayName:
		return &TsCondition_FieldTerminalPathArrayOfValues{TsCondition_FieldTerminalPath: *fp, values: values.([]string)}
	case TsCondition_FieldPathSelectorDescription:
		return &TsCondition_FieldTerminalPathArrayOfValues{TsCondition_FieldTerminalPath: *fp, values: values.([]string)}
	case TsCondition_FieldPathSelectorSupportingDocs:
		return &TsCondition_FieldTerminalPathArrayOfValues{TsCondition_FieldTerminalPath: *fp, values: values.([][]*document.Reference)}
	case TsCondition_FieldPathSelectorSpec:
		return &TsCondition_FieldTerminalPathArrayOfValues{TsCondition_FieldTerminalPath: *fp, values: values.([]*rcommon.TsCndSpec)}
	case TsCondition_FieldPathSelectorInternal:
		return &TsCondition_FieldTerminalPathArrayOfValues{TsCondition_FieldTerminalPath: *fp, values: values.([]*TsCondition_Internal)}
	case TsCondition_FieldPathSelectorFilterSelector:
		return &TsCondition_FieldTerminalPathArrayOfValues{TsCondition_FieldTerminalPath: *fp, values: values.([]*TsCondition_Selector)}
	case TsCondition_FieldPathSelectorTemplateSource:
		return &TsCondition_FieldTerminalPathArrayOfValues{TsCondition_FieldTerminalPath: *fp, values: values.([]*TsCondition_TemplateSource)}
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition: %d", fp.selector))
	}
	return fpaov
}

func (fp *TsCondition_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *TsCondition_FieldTerminalPath) WithIArrayItemValue(value interface{}) TsCondition_FieldPathArrayItemValue {
	switch fp.selector {
	case TsCondition_FieldPathSelectorSupportingDocs:
		return &TsCondition_FieldTerminalPathArrayItemValue{TsCondition_FieldTerminalPath: *fp, value: value.(*document.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition: %d", fp.selector))
	}
}

func (fp *TsCondition_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type TsCondition_FieldSubPath struct {
	selector TsCondition_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ TsCondition_FieldPath = (*TsCondition_FieldSubPath)(nil)

func (fps *TsCondition_FieldSubPath) Selector() TsCondition_FieldPathSelector {
	return fps.selector
}
func (fps *TsCondition_FieldSubPath) AsMetadataSubPath() (meta.Meta_FieldPath, bool) {
	res, ok := fps.subPath.(meta.Meta_FieldPath)
	return res, ok
}
func (fps *TsCondition_FieldSubPath) AsSpecSubPath() (rcommon.TsCndSpec_FieldPath, bool) {
	res, ok := fps.subPath.(rcommon.TsCndSpec_FieldPath)
	return res, ok
}
func (fps *TsCondition_FieldSubPath) AsInternalSubPath() (TsConditionInternal_FieldPath, bool) {
	res, ok := fps.subPath.(TsConditionInternal_FieldPath)
	return res, ok
}
func (fps *TsCondition_FieldSubPath) AsFilterSelectorSubPath() (TsConditionSelector_FieldPath, bool) {
	res, ok := fps.subPath.(TsConditionSelector_FieldPath)
	return res, ok
}
func (fps *TsCondition_FieldSubPath) AsTemplateSourceSubPath() (TsConditionTemplateSource_FieldPath, bool) {
	res, ok := fps.subPath.(TsConditionTemplateSource_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *TsCondition_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *TsCondition_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source TsCondition
func (fps *TsCondition_FieldSubPath) Get(source *TsCondition) (values []interface{}) {
	switch fps.selector {
	case TsCondition_FieldPathSelectorMetadata:
		values = append(values, fps.subPath.GetRaw(source.GetMetadata())...)
	case TsCondition_FieldPathSelectorSpec:
		values = append(values, fps.subPath.GetRaw(source.GetSpec())...)
	case TsCondition_FieldPathSelectorInternal:
		values = append(values, fps.subPath.GetRaw(source.GetInternal())...)
	case TsCondition_FieldPathSelectorFilterSelector:
		values = append(values, fps.subPath.GetRaw(source.GetFilterSelector())...)
	case TsCondition_FieldPathSelectorTemplateSource:
		values = append(values, fps.subPath.GetRaw(source.GetTemplateSource())...)
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition: %d", fps.selector))
	}
	return
}

func (fps *TsCondition_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*TsCondition))
}

// GetSingle returns value of selected field from source TsCondition
func (fps *TsCondition_FieldSubPath) GetSingle(source *TsCondition) (interface{}, bool) {
	switch fps.selector {
	case TsCondition_FieldPathSelectorMetadata:
		if source.GetMetadata() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetMetadata())
	case TsCondition_FieldPathSelectorSpec:
		if source.GetSpec() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetSpec())
	case TsCondition_FieldPathSelectorInternal:
		if source.GetInternal() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetInternal())
	case TsCondition_FieldPathSelectorFilterSelector:
		if source.GetFilterSelector() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetFilterSelector())
	case TsCondition_FieldPathSelectorTemplateSource:
		if source.GetTemplateSource() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetTemplateSource())
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition: %d", fps.selector))
	}
}

func (fps *TsCondition_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*TsCondition))
}

// GetDefault returns a default value of the field type
func (fps *TsCondition_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *TsCondition_FieldSubPath) ClearValue(item *TsCondition) {
	if item != nil {
		switch fps.selector {
		case TsCondition_FieldPathSelectorMetadata:
			fps.subPath.ClearValueRaw(item.Metadata)
		case TsCondition_FieldPathSelectorSpec:
			fps.subPath.ClearValueRaw(item.Spec)
		case TsCondition_FieldPathSelectorInternal:
			fps.subPath.ClearValueRaw(item.Internal)
		case TsCondition_FieldPathSelectorFilterSelector:
			fps.subPath.ClearValueRaw(item.FilterSelector)
		case TsCondition_FieldPathSelectorTemplateSource:
			fps.subPath.ClearValueRaw(item.TemplateSource)
		default:
			panic(fmt.Sprintf("Invalid selector for TsCondition: %d", fps.selector))
		}
	}
}

func (fps *TsCondition_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*TsCondition))
}

// IsLeaf - whether field path is holds simple value
func (fps *TsCondition_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *TsCondition_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&TsCondition_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *TsCondition_FieldSubPath) WithIValue(value interface{}) TsCondition_FieldPathValue {
	return &TsCondition_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *TsCondition_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *TsCondition_FieldSubPath) WithIArrayOfValues(values interface{}) TsCondition_FieldPathArrayOfValues {
	return &TsCondition_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *TsCondition_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *TsCondition_FieldSubPath) WithIArrayItemValue(value interface{}) TsCondition_FieldPathArrayItemValue {
	return &TsCondition_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *TsCondition_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// TsCondition_FieldPathValue allows storing values for TsCondition fields according to their type
type TsCondition_FieldPathValue interface {
	TsCondition_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **TsCondition)
	CompareWith(*TsCondition) (cmp int, comparable bool)
}

func ParseTsCondition_FieldPathValue(pathStr, valueStr string) (TsCondition_FieldPathValue, error) {
	fp, err := ParseTsCondition_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing TsCondition field path value from %s: %v", valueStr, err)
	}
	return fpv.(TsCondition_FieldPathValue), nil
}

func MustParseTsCondition_FieldPathValue(pathStr, valueStr string) TsCondition_FieldPathValue {
	fpv, err := ParseTsCondition_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type TsCondition_FieldTerminalPathValue struct {
	TsCondition_FieldTerminalPath
	value interface{}
}

var _ TsCondition_FieldPathValue = (*TsCondition_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'TsCondition' as interface{}
func (fpv *TsCondition_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *TsCondition_FieldTerminalPathValue) AsNameValue() (*Name, bool) {
	res, ok := fpv.value.(*Name)
	return res, ok
}
func (fpv *TsCondition_FieldTerminalPathValue) AsMetadataValue() (*meta.Meta, bool) {
	res, ok := fpv.value.(*meta.Meta)
	return res, ok
}
func (fpv *TsCondition_FieldTerminalPathValue) AsDisplayNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *TsCondition_FieldTerminalPathValue) AsDescriptionValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *TsCondition_FieldTerminalPathValue) AsSupportingDocsValue() ([]*document.Reference, bool) {
	res, ok := fpv.value.([]*document.Reference)
	return res, ok
}
func (fpv *TsCondition_FieldTerminalPathValue) AsSpecValue() (*rcommon.TsCndSpec, bool) {
	res, ok := fpv.value.(*rcommon.TsCndSpec)
	return res, ok
}
func (fpv *TsCondition_FieldTerminalPathValue) AsInternalValue() (*TsCondition_Internal, bool) {
	res, ok := fpv.value.(*TsCondition_Internal)
	return res, ok
}
func (fpv *TsCondition_FieldTerminalPathValue) AsFilterSelectorValue() (*TsCondition_Selector, bool) {
	res, ok := fpv.value.(*TsCondition_Selector)
	return res, ok
}
func (fpv *TsCondition_FieldTerminalPathValue) AsTemplateSourceValue() (*TsCondition_TemplateSource, bool) {
	res, ok := fpv.value.(*TsCondition_TemplateSource)
	return res, ok
}

// SetTo stores value for selected field for object TsCondition
func (fpv *TsCondition_FieldTerminalPathValue) SetTo(target **TsCondition) {
	if *target == nil {
		*target = new(TsCondition)
	}
	switch fpv.selector {
	case TsCondition_FieldPathSelectorName:
		(*target).Name = fpv.value.(*Name)
	case TsCondition_FieldPathSelectorMetadata:
		(*target).Metadata = fpv.value.(*meta.Meta)
	case TsCondition_FieldPathSelectorDisplayName:
		(*target).DisplayName = fpv.value.(string)
	case TsCondition_FieldPathSelectorDescription:
		(*target).Description = fpv.value.(string)
	case TsCondition_FieldPathSelectorSupportingDocs:
		(*target).SupportingDocs = fpv.value.([]*document.Reference)
	case TsCondition_FieldPathSelectorSpec:
		(*target).Spec = fpv.value.(*rcommon.TsCndSpec)
	case TsCondition_FieldPathSelectorInternal:
		(*target).Internal = fpv.value.(*TsCondition_Internal)
	case TsCondition_FieldPathSelectorFilterSelector:
		(*target).FilterSelector = fpv.value.(*TsCondition_Selector)
	case TsCondition_FieldPathSelectorTemplateSource:
		(*target).TemplateSource = fpv.value.(*TsCondition_TemplateSource)
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition: %d", fpv.selector))
	}
}

func (fpv *TsCondition_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*TsCondition)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'TsCondition_FieldTerminalPathValue' with the value under path in 'TsCondition'.
func (fpv *TsCondition_FieldTerminalPathValue) CompareWith(source *TsCondition) (int, bool) {
	switch fpv.selector {
	case TsCondition_FieldPathSelectorName:
		leftValue := fpv.value.(*Name)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case TsCondition_FieldPathSelectorMetadata:
		return 0, false
	case TsCondition_FieldPathSelectorDisplayName:
		leftValue := fpv.value.(string)
		rightValue := source.GetDisplayName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case TsCondition_FieldPathSelectorDescription:
		leftValue := fpv.value.(string)
		rightValue := source.GetDescription()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case TsCondition_FieldPathSelectorSupportingDocs:
		return 0, false
	case TsCondition_FieldPathSelectorSpec:
		return 0, false
	case TsCondition_FieldPathSelectorInternal:
		return 0, false
	case TsCondition_FieldPathSelectorFilterSelector:
		return 0, false
	case TsCondition_FieldPathSelectorTemplateSource:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition: %d", fpv.selector))
	}
}

func (fpv *TsCondition_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*TsCondition))
}

type TsCondition_FieldSubPathValue struct {
	TsCondition_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ TsCondition_FieldPathValue = (*TsCondition_FieldSubPathValue)(nil)

func (fpvs *TsCondition_FieldSubPathValue) AsMetadataPathValue() (meta.Meta_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(meta.Meta_FieldPathValue)
	return res, ok
}
func (fpvs *TsCondition_FieldSubPathValue) AsSpecPathValue() (rcommon.TsCndSpec_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(rcommon.TsCndSpec_FieldPathValue)
	return res, ok
}
func (fpvs *TsCondition_FieldSubPathValue) AsInternalPathValue() (TsConditionInternal_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(TsConditionInternal_FieldPathValue)
	return res, ok
}
func (fpvs *TsCondition_FieldSubPathValue) AsFilterSelectorPathValue() (TsConditionSelector_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(TsConditionSelector_FieldPathValue)
	return res, ok
}
func (fpvs *TsCondition_FieldSubPathValue) AsTemplateSourcePathValue() (TsConditionTemplateSource_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(TsConditionTemplateSource_FieldPathValue)
	return res, ok
}

func (fpvs *TsCondition_FieldSubPathValue) SetTo(target **TsCondition) {
	if *target == nil {
		*target = new(TsCondition)
	}
	switch fpvs.Selector() {
	case TsCondition_FieldPathSelectorMetadata:
		fpvs.subPathValue.(meta.Meta_FieldPathValue).SetTo(&(*target).Metadata)
	case TsCondition_FieldPathSelectorSpec:
		fpvs.subPathValue.(rcommon.TsCndSpec_FieldPathValue).SetTo(&(*target).Spec)
	case TsCondition_FieldPathSelectorInternal:
		fpvs.subPathValue.(TsConditionInternal_FieldPathValue).SetTo(&(*target).Internal)
	case TsCondition_FieldPathSelectorFilterSelector:
		fpvs.subPathValue.(TsConditionSelector_FieldPathValue).SetTo(&(*target).FilterSelector)
	case TsCondition_FieldPathSelectorTemplateSource:
		fpvs.subPathValue.(TsConditionTemplateSource_FieldPathValue).SetTo(&(*target).TemplateSource)
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition: %d", fpvs.Selector()))
	}
}

func (fpvs *TsCondition_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*TsCondition)
	fpvs.SetTo(&typedObject)
}

func (fpvs *TsCondition_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *TsCondition_FieldSubPathValue) CompareWith(source *TsCondition) (int, bool) {
	switch fpvs.Selector() {
	case TsCondition_FieldPathSelectorMetadata:
		return fpvs.subPathValue.(meta.Meta_FieldPathValue).CompareWith(source.GetMetadata())
	case TsCondition_FieldPathSelectorSpec:
		return fpvs.subPathValue.(rcommon.TsCndSpec_FieldPathValue).CompareWith(source.GetSpec())
	case TsCondition_FieldPathSelectorInternal:
		return fpvs.subPathValue.(TsConditionInternal_FieldPathValue).CompareWith(source.GetInternal())
	case TsCondition_FieldPathSelectorFilterSelector:
		return fpvs.subPathValue.(TsConditionSelector_FieldPathValue).CompareWith(source.GetFilterSelector())
	case TsCondition_FieldPathSelectorTemplateSource:
		return fpvs.subPathValue.(TsConditionTemplateSource_FieldPathValue).CompareWith(source.GetTemplateSource())
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition: %d", fpvs.Selector()))
	}
}

func (fpvs *TsCondition_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*TsCondition))
}

// TsCondition_FieldPathArrayItemValue allows storing single item in Path-specific values for TsCondition according to their type
// Present only for array (repeated) types.
type TsCondition_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	TsCondition_FieldPath
	ContainsValue(*TsCondition) bool
}

// ParseTsCondition_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseTsCondition_FieldPathArrayItemValue(pathStr, valueStr string) (TsCondition_FieldPathArrayItemValue, error) {
	fp, err := ParseTsCondition_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing TsCondition field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(TsCondition_FieldPathArrayItemValue), nil
}

func MustParseTsCondition_FieldPathArrayItemValue(pathStr, valueStr string) TsCondition_FieldPathArrayItemValue {
	fpaiv, err := ParseTsCondition_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type TsCondition_FieldTerminalPathArrayItemValue struct {
	TsCondition_FieldTerminalPath
	value interface{}
}

var _ TsCondition_FieldPathArrayItemValue = (*TsCondition_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object TsCondition as interface{}
func (fpaiv *TsCondition_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *TsCondition_FieldTerminalPathArrayItemValue) AsSupportingDocsItemValue() (*document.Reference, bool) {
	res, ok := fpaiv.value.(*document.Reference)
	return res, ok
}

func (fpaiv *TsCondition_FieldTerminalPathArrayItemValue) GetSingle(source *TsCondition) (interface{}, bool) {
	return nil, false
}

func (fpaiv *TsCondition_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*TsCondition))
}

// Contains returns a boolean indicating if value that is being held is present in given 'TsCondition'
func (fpaiv *TsCondition_FieldTerminalPathArrayItemValue) ContainsValue(source *TsCondition) bool {
	slice := fpaiv.TsCondition_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type TsCondition_FieldSubPathArrayItemValue struct {
	TsCondition_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *TsCondition_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *TsCondition_FieldSubPathArrayItemValue) AsMetadataPathItemValue() (meta.Meta_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(meta.Meta_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *TsCondition_FieldSubPathArrayItemValue) AsSpecPathItemValue() (rcommon.TsCndSpec_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(rcommon.TsCndSpec_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *TsCondition_FieldSubPathArrayItemValue) AsInternalPathItemValue() (TsConditionInternal_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(TsConditionInternal_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *TsCondition_FieldSubPathArrayItemValue) AsFilterSelectorPathItemValue() (TsConditionSelector_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(TsConditionSelector_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *TsCondition_FieldSubPathArrayItemValue) AsTemplateSourcePathItemValue() (TsConditionTemplateSource_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(TsConditionTemplateSource_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'TsCondition'
func (fpaivs *TsCondition_FieldSubPathArrayItemValue) ContainsValue(source *TsCondition) bool {
	switch fpaivs.Selector() {
	case TsCondition_FieldPathSelectorMetadata:
		return fpaivs.subPathItemValue.(meta.Meta_FieldPathArrayItemValue).ContainsValue(source.GetMetadata())
	case TsCondition_FieldPathSelectorSpec:
		return fpaivs.subPathItemValue.(rcommon.TsCndSpec_FieldPathArrayItemValue).ContainsValue(source.GetSpec())
	case TsCondition_FieldPathSelectorInternal:
		return fpaivs.subPathItemValue.(TsConditionInternal_FieldPathArrayItemValue).ContainsValue(source.GetInternal())
	case TsCondition_FieldPathSelectorFilterSelector:
		return fpaivs.subPathItemValue.(TsConditionSelector_FieldPathArrayItemValue).ContainsValue(source.GetFilterSelector())
	case TsCondition_FieldPathSelectorTemplateSource:
		return fpaivs.subPathItemValue.(TsConditionTemplateSource_FieldPathArrayItemValue).ContainsValue(source.GetTemplateSource())
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition: %d", fpaivs.Selector()))
	}
}

// TsCondition_FieldPathArrayOfValues allows storing slice of values for TsCondition fields according to their type
type TsCondition_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	TsCondition_FieldPath
}

func ParseTsCondition_FieldPathArrayOfValues(pathStr, valuesStr string) (TsCondition_FieldPathArrayOfValues, error) {
	fp, err := ParseTsCondition_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing TsCondition field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(TsCondition_FieldPathArrayOfValues), nil
}

func MustParseTsCondition_FieldPathArrayOfValues(pathStr, valuesStr string) TsCondition_FieldPathArrayOfValues {
	fpaov, err := ParseTsCondition_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type TsCondition_FieldTerminalPathArrayOfValues struct {
	TsCondition_FieldTerminalPath
	values interface{}
}

var _ TsCondition_FieldPathArrayOfValues = (*TsCondition_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *TsCondition_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case TsCondition_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*Name) {
			values = append(values, v)
		}
	case TsCondition_FieldPathSelectorMetadata:
		for _, v := range fpaov.values.([]*meta.Meta) {
			values = append(values, v)
		}
	case TsCondition_FieldPathSelectorDisplayName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case TsCondition_FieldPathSelectorDescription:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case TsCondition_FieldPathSelectorSupportingDocs:
		for _, v := range fpaov.values.([][]*document.Reference) {
			values = append(values, v)
		}
	case TsCondition_FieldPathSelectorSpec:
		for _, v := range fpaov.values.([]*rcommon.TsCndSpec) {
			values = append(values, v)
		}
	case TsCondition_FieldPathSelectorInternal:
		for _, v := range fpaov.values.([]*TsCondition_Internal) {
			values = append(values, v)
		}
	case TsCondition_FieldPathSelectorFilterSelector:
		for _, v := range fpaov.values.([]*TsCondition_Selector) {
			values = append(values, v)
		}
	case TsCondition_FieldPathSelectorTemplateSource:
		for _, v := range fpaov.values.([]*TsCondition_TemplateSource) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *TsCondition_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*Name, bool) {
	res, ok := fpaov.values.([]*Name)
	return res, ok
}
func (fpaov *TsCondition_FieldTerminalPathArrayOfValues) AsMetadataArrayOfValues() ([]*meta.Meta, bool) {
	res, ok := fpaov.values.([]*meta.Meta)
	return res, ok
}
func (fpaov *TsCondition_FieldTerminalPathArrayOfValues) AsDisplayNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *TsCondition_FieldTerminalPathArrayOfValues) AsDescriptionArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *TsCondition_FieldTerminalPathArrayOfValues) AsSupportingDocsArrayOfValues() ([][]*document.Reference, bool) {
	res, ok := fpaov.values.([][]*document.Reference)
	return res, ok
}
func (fpaov *TsCondition_FieldTerminalPathArrayOfValues) AsSpecArrayOfValues() ([]*rcommon.TsCndSpec, bool) {
	res, ok := fpaov.values.([]*rcommon.TsCndSpec)
	return res, ok
}
func (fpaov *TsCondition_FieldTerminalPathArrayOfValues) AsInternalArrayOfValues() ([]*TsCondition_Internal, bool) {
	res, ok := fpaov.values.([]*TsCondition_Internal)
	return res, ok
}
func (fpaov *TsCondition_FieldTerminalPathArrayOfValues) AsFilterSelectorArrayOfValues() ([]*TsCondition_Selector, bool) {
	res, ok := fpaov.values.([]*TsCondition_Selector)
	return res, ok
}
func (fpaov *TsCondition_FieldTerminalPathArrayOfValues) AsTemplateSourceArrayOfValues() ([]*TsCondition_TemplateSource, bool) {
	res, ok := fpaov.values.([]*TsCondition_TemplateSource)
	return res, ok
}

type TsCondition_FieldSubPathArrayOfValues struct {
	TsCondition_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ TsCondition_FieldPathArrayOfValues = (*TsCondition_FieldSubPathArrayOfValues)(nil)

func (fpsaov *TsCondition_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *TsCondition_FieldSubPathArrayOfValues) AsMetadataPathArrayOfValues() (meta.Meta_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(meta.Meta_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *TsCondition_FieldSubPathArrayOfValues) AsSpecPathArrayOfValues() (rcommon.TsCndSpec_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(rcommon.TsCndSpec_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *TsCondition_FieldSubPathArrayOfValues) AsInternalPathArrayOfValues() (TsConditionInternal_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(TsConditionInternal_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *TsCondition_FieldSubPathArrayOfValues) AsFilterSelectorPathArrayOfValues() (TsConditionSelector_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(TsConditionSelector_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *TsCondition_FieldSubPathArrayOfValues) AsTemplateSourcePathArrayOfValues() (TsConditionTemplateSource_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(TsConditionTemplateSource_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type TsConditionInternal_FieldPath interface {
	gotenobject.FieldPath
	Selector() TsConditionInternal_FieldPathSelector
	Get(source *TsCondition_Internal) []interface{}
	GetSingle(source *TsCondition_Internal) (interface{}, bool)
	ClearValue(item *TsCondition_Internal)

	// Those methods build corresponding TsConditionInternal_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) TsConditionInternal_FieldPathValue
	WithIArrayOfValues(values interface{}) TsConditionInternal_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) TsConditionInternal_FieldPathArrayItemValue
}

type TsConditionInternal_FieldPathSelector int32

const (
	TsConditionInternal_FieldPathSelectorCommonKeyKset       TsConditionInternal_FieldPathSelector = 0
	TsConditionInternal_FieldPathSelectorEntrySpecGeneration TsConditionInternal_FieldPathSelector = 1
	TsConditionInternal_FieldPathSelectorAlertingLocation    TsConditionInternal_FieldPathSelector = 2
)

func (s TsConditionInternal_FieldPathSelector) String() string {
	switch s {
	case TsConditionInternal_FieldPathSelectorCommonKeyKset:
		return "common_key_kset"
	case TsConditionInternal_FieldPathSelectorEntrySpecGeneration:
		return "entry_spec_generation"
	case TsConditionInternal_FieldPathSelectorAlertingLocation:
		return "alerting_location"
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Internal: %d", s))
	}
}

func BuildTsConditionInternal_FieldPath(fp gotenobject.RawFieldPath) (TsConditionInternal_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object TsCondition_Internal")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "common_key_kset", "commonKeyKset", "common-key-kset":
			return &TsConditionInternal_FieldTerminalPath{selector: TsConditionInternal_FieldPathSelectorCommonKeyKset}, nil
		case "entry_spec_generation", "entrySpecGeneration", "entry-spec-generation":
			return &TsConditionInternal_FieldTerminalPath{selector: TsConditionInternal_FieldPathSelectorEntrySpecGeneration}, nil
		case "alerting_location", "alertingLocation", "alerting-location":
			return &TsConditionInternal_FieldTerminalPath{selector: TsConditionInternal_FieldPathSelectorAlertingLocation}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object TsCondition_Internal", fp)
}

func ParseTsConditionInternal_FieldPath(rawField string) (TsConditionInternal_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildTsConditionInternal_FieldPath(fp)
}

func MustParseTsConditionInternal_FieldPath(rawField string) TsConditionInternal_FieldPath {
	fp, err := ParseTsConditionInternal_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type TsConditionInternal_FieldTerminalPath struct {
	selector TsConditionInternal_FieldPathSelector
}

var _ TsConditionInternal_FieldPath = (*TsConditionInternal_FieldTerminalPath)(nil)

func (fp *TsConditionInternal_FieldTerminalPath) Selector() TsConditionInternal_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *TsConditionInternal_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *TsConditionInternal_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source TsCondition_Internal
func (fp *TsConditionInternal_FieldTerminalPath) Get(source *TsCondition_Internal) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case TsConditionInternal_FieldPathSelectorCommonKeyKset:
			values = append(values, source.CommonKeyKset)
		case TsConditionInternal_FieldPathSelectorEntrySpecGeneration:
			values = append(values, source.EntrySpecGeneration)
		case TsConditionInternal_FieldPathSelectorAlertingLocation:
			values = append(values, source.AlertingLocation)
		default:
			panic(fmt.Sprintf("Invalid selector for TsCondition_Internal: %d", fp.selector))
		}
	}
	return
}

func (fp *TsConditionInternal_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*TsCondition_Internal))
}

// GetSingle returns value pointed by specific field of from source TsCondition_Internal
func (fp *TsConditionInternal_FieldTerminalPath) GetSingle(source *TsCondition_Internal) (interface{}, bool) {
	switch fp.selector {
	case TsConditionInternal_FieldPathSelectorCommonKeyKset:
		res := source.GetCommonKeyKset()
		return res, res != nil
	case TsConditionInternal_FieldPathSelectorEntrySpecGeneration:
		return source.GetEntrySpecGeneration(), source != nil
	case TsConditionInternal_FieldPathSelectorAlertingLocation:
		return source.GetAlertingLocation(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Internal: %d", fp.selector))
	}
}

func (fp *TsConditionInternal_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*TsCondition_Internal))
}

// GetDefault returns a default value of the field type
func (fp *TsConditionInternal_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case TsConditionInternal_FieldPathSelectorCommonKeyKset:
		return ([]byte)(nil)
	case TsConditionInternal_FieldPathSelectorEntrySpecGeneration:
		return int32(0)
	case TsConditionInternal_FieldPathSelectorAlertingLocation:
		return rcommon.PolicySpec_UNDEFINED
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Internal: %d", fp.selector))
	}
}

func (fp *TsConditionInternal_FieldTerminalPath) ClearValue(item *TsCondition_Internal) {
	if item != nil {
		switch fp.selector {
		case TsConditionInternal_FieldPathSelectorCommonKeyKset:
			item.CommonKeyKset = nil
		case TsConditionInternal_FieldPathSelectorEntrySpecGeneration:
			item.EntrySpecGeneration = int32(0)
		case TsConditionInternal_FieldPathSelectorAlertingLocation:
			item.AlertingLocation = rcommon.PolicySpec_UNDEFINED
		default:
			panic(fmt.Sprintf("Invalid selector for TsCondition_Internal: %d", fp.selector))
		}
	}
}

func (fp *TsConditionInternal_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*TsCondition_Internal))
}

// IsLeaf - whether field path is holds simple value
func (fp *TsConditionInternal_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == TsConditionInternal_FieldPathSelectorCommonKeyKset ||
		fp.selector == TsConditionInternal_FieldPathSelectorEntrySpecGeneration ||
		fp.selector == TsConditionInternal_FieldPathSelectorAlertingLocation
}

func (fp *TsConditionInternal_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *TsConditionInternal_FieldTerminalPath) WithIValue(value interface{}) TsConditionInternal_FieldPathValue {
	switch fp.selector {
	case TsConditionInternal_FieldPathSelectorCommonKeyKset:
		return &TsConditionInternal_FieldTerminalPathValue{TsConditionInternal_FieldTerminalPath: *fp, value: value.([]byte)}
	case TsConditionInternal_FieldPathSelectorEntrySpecGeneration:
		return &TsConditionInternal_FieldTerminalPathValue{TsConditionInternal_FieldTerminalPath: *fp, value: value.(int32)}
	case TsConditionInternal_FieldPathSelectorAlertingLocation:
		return &TsConditionInternal_FieldTerminalPathValue{TsConditionInternal_FieldTerminalPath: *fp, value: value.(rcommon.PolicySpec_ProcessingLocation)}
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Internal: %d", fp.selector))
	}
}

func (fp *TsConditionInternal_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *TsConditionInternal_FieldTerminalPath) WithIArrayOfValues(values interface{}) TsConditionInternal_FieldPathArrayOfValues {
	fpaov := &TsConditionInternal_FieldTerminalPathArrayOfValues{TsConditionInternal_FieldTerminalPath: *fp}
	switch fp.selector {
	case TsConditionInternal_FieldPathSelectorCommonKeyKset:
		return &TsConditionInternal_FieldTerminalPathArrayOfValues{TsConditionInternal_FieldTerminalPath: *fp, values: values.([][]byte)}
	case TsConditionInternal_FieldPathSelectorEntrySpecGeneration:
		return &TsConditionInternal_FieldTerminalPathArrayOfValues{TsConditionInternal_FieldTerminalPath: *fp, values: values.([]int32)}
	case TsConditionInternal_FieldPathSelectorAlertingLocation:
		return &TsConditionInternal_FieldTerminalPathArrayOfValues{TsConditionInternal_FieldTerminalPath: *fp, values: values.([]rcommon.PolicySpec_ProcessingLocation)}
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Internal: %d", fp.selector))
	}
	return fpaov
}

func (fp *TsConditionInternal_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *TsConditionInternal_FieldTerminalPath) WithIArrayItemValue(value interface{}) TsConditionInternal_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Internal: %d", fp.selector))
	}
}

func (fp *TsConditionInternal_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// TsConditionInternal_FieldPathValue allows storing values for Internal fields according to their type
type TsConditionInternal_FieldPathValue interface {
	TsConditionInternal_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **TsCondition_Internal)
	CompareWith(*TsCondition_Internal) (cmp int, comparable bool)
}

func ParseTsConditionInternal_FieldPathValue(pathStr, valueStr string) (TsConditionInternal_FieldPathValue, error) {
	fp, err := ParseTsConditionInternal_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Internal field path value from %s: %v", valueStr, err)
	}
	return fpv.(TsConditionInternal_FieldPathValue), nil
}

func MustParseTsConditionInternal_FieldPathValue(pathStr, valueStr string) TsConditionInternal_FieldPathValue {
	fpv, err := ParseTsConditionInternal_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type TsConditionInternal_FieldTerminalPathValue struct {
	TsConditionInternal_FieldTerminalPath
	value interface{}
}

var _ TsConditionInternal_FieldPathValue = (*TsConditionInternal_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Internal' as interface{}
func (fpv *TsConditionInternal_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *TsConditionInternal_FieldTerminalPathValue) AsCommonKeyKsetValue() ([]byte, bool) {
	res, ok := fpv.value.([]byte)
	return res, ok
}
func (fpv *TsConditionInternal_FieldTerminalPathValue) AsEntrySpecGenerationValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *TsConditionInternal_FieldTerminalPathValue) AsAlertingLocationValue() (rcommon.PolicySpec_ProcessingLocation, bool) {
	res, ok := fpv.value.(rcommon.PolicySpec_ProcessingLocation)
	return res, ok
}

// SetTo stores value for selected field for object Internal
func (fpv *TsConditionInternal_FieldTerminalPathValue) SetTo(target **TsCondition_Internal) {
	if *target == nil {
		*target = new(TsCondition_Internal)
	}
	switch fpv.selector {
	case TsConditionInternal_FieldPathSelectorCommonKeyKset:
		(*target).CommonKeyKset = fpv.value.([]byte)
	case TsConditionInternal_FieldPathSelectorEntrySpecGeneration:
		(*target).EntrySpecGeneration = fpv.value.(int32)
	case TsConditionInternal_FieldPathSelectorAlertingLocation:
		(*target).AlertingLocation = fpv.value.(rcommon.PolicySpec_ProcessingLocation)
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Internal: %d", fpv.selector))
	}
}

func (fpv *TsConditionInternal_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*TsCondition_Internal)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'TsConditionInternal_FieldTerminalPathValue' with the value under path in 'TsCondition_Internal'.
func (fpv *TsConditionInternal_FieldTerminalPathValue) CompareWith(source *TsCondition_Internal) (int, bool) {
	switch fpv.selector {
	case TsConditionInternal_FieldPathSelectorCommonKeyKset:
		return 0, false
	case TsConditionInternal_FieldPathSelectorEntrySpecGeneration:
		leftValue := fpv.value.(int32)
		rightValue := source.GetEntrySpecGeneration()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case TsConditionInternal_FieldPathSelectorAlertingLocation:
		leftValue := fpv.value.(rcommon.PolicySpec_ProcessingLocation)
		rightValue := source.GetAlertingLocation()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Internal: %d", fpv.selector))
	}
}

func (fpv *TsConditionInternal_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*TsCondition_Internal))
}

// TsConditionInternal_FieldPathArrayItemValue allows storing single item in Path-specific values for Internal according to their type
// Present only for array (repeated) types.
type TsConditionInternal_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	TsConditionInternal_FieldPath
	ContainsValue(*TsCondition_Internal) bool
}

// ParseTsConditionInternal_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseTsConditionInternal_FieldPathArrayItemValue(pathStr, valueStr string) (TsConditionInternal_FieldPathArrayItemValue, error) {
	fp, err := ParseTsConditionInternal_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Internal field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(TsConditionInternal_FieldPathArrayItemValue), nil
}

func MustParseTsConditionInternal_FieldPathArrayItemValue(pathStr, valueStr string) TsConditionInternal_FieldPathArrayItemValue {
	fpaiv, err := ParseTsConditionInternal_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type TsConditionInternal_FieldTerminalPathArrayItemValue struct {
	TsConditionInternal_FieldTerminalPath
	value interface{}
}

var _ TsConditionInternal_FieldPathArrayItemValue = (*TsConditionInternal_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object TsCondition_Internal as interface{}
func (fpaiv *TsConditionInternal_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *TsConditionInternal_FieldTerminalPathArrayItemValue) GetSingle(source *TsCondition_Internal) (interface{}, bool) {
	return nil, false
}

func (fpaiv *TsConditionInternal_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*TsCondition_Internal))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Internal'
func (fpaiv *TsConditionInternal_FieldTerminalPathArrayItemValue) ContainsValue(source *TsCondition_Internal) bool {
	slice := fpaiv.TsConditionInternal_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// TsConditionInternal_FieldPathArrayOfValues allows storing slice of values for Internal fields according to their type
type TsConditionInternal_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	TsConditionInternal_FieldPath
}

func ParseTsConditionInternal_FieldPathArrayOfValues(pathStr, valuesStr string) (TsConditionInternal_FieldPathArrayOfValues, error) {
	fp, err := ParseTsConditionInternal_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Internal field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(TsConditionInternal_FieldPathArrayOfValues), nil
}

func MustParseTsConditionInternal_FieldPathArrayOfValues(pathStr, valuesStr string) TsConditionInternal_FieldPathArrayOfValues {
	fpaov, err := ParseTsConditionInternal_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type TsConditionInternal_FieldTerminalPathArrayOfValues struct {
	TsConditionInternal_FieldTerminalPath
	values interface{}
}

var _ TsConditionInternal_FieldPathArrayOfValues = (*TsConditionInternal_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *TsConditionInternal_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case TsConditionInternal_FieldPathSelectorCommonKeyKset:
		for _, v := range fpaov.values.([][]byte) {
			values = append(values, v)
		}
	case TsConditionInternal_FieldPathSelectorEntrySpecGeneration:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case TsConditionInternal_FieldPathSelectorAlertingLocation:
		for _, v := range fpaov.values.([]rcommon.PolicySpec_ProcessingLocation) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *TsConditionInternal_FieldTerminalPathArrayOfValues) AsCommonKeyKsetArrayOfValues() ([][]byte, bool) {
	res, ok := fpaov.values.([][]byte)
	return res, ok
}
func (fpaov *TsConditionInternal_FieldTerminalPathArrayOfValues) AsEntrySpecGenerationArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *TsConditionInternal_FieldTerminalPathArrayOfValues) AsAlertingLocationArrayOfValues() ([]rcommon.PolicySpec_ProcessingLocation, bool) {
	res, ok := fpaov.values.([]rcommon.PolicySpec_ProcessingLocation)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type TsConditionSelector_FieldPath interface {
	gotenobject.FieldPath
	Selector() TsConditionSelector_FieldPathSelector
	Get(source *TsCondition_Selector) []interface{}
	GetSingle(source *TsCondition_Selector) (interface{}, bool)
	ClearValue(item *TsCondition_Selector)

	// Those methods build corresponding TsConditionSelector_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) TsConditionSelector_FieldPathValue
	WithIArrayOfValues(values interface{}) TsConditionSelector_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) TsConditionSelector_FieldPathArrayItemValue
}

type TsConditionSelector_FieldPathSelector int32

const (
	TsConditionSelector_FieldPathSelectorMetricTypes          TsConditionSelector_FieldPathSelector = 0
	TsConditionSelector_FieldPathSelectorResourceTypes        TsConditionSelector_FieldPathSelector = 1
	TsConditionSelector_FieldPathSelectorCommonMetricLabels   TsConditionSelector_FieldPathSelector = 2
	TsConditionSelector_FieldPathSelectorCommonResourceLabels TsConditionSelector_FieldPathSelector = 3
)

func (s TsConditionSelector_FieldPathSelector) String() string {
	switch s {
	case TsConditionSelector_FieldPathSelectorMetricTypes:
		return "metric_types"
	case TsConditionSelector_FieldPathSelectorResourceTypes:
		return "resource_types"
	case TsConditionSelector_FieldPathSelectorCommonMetricLabels:
		return "common_metric_labels"
	case TsConditionSelector_FieldPathSelectorCommonResourceLabels:
		return "common_resource_labels"
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Selector: %d", s))
	}
}

func BuildTsConditionSelector_FieldPath(fp gotenobject.RawFieldPath) (TsConditionSelector_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object TsCondition_Selector")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "metric_types", "metricTypes", "metric-types":
			return &TsConditionSelector_FieldTerminalPath{selector: TsConditionSelector_FieldPathSelectorMetricTypes}, nil
		case "resource_types", "resourceTypes", "resource-types":
			return &TsConditionSelector_FieldTerminalPath{selector: TsConditionSelector_FieldPathSelectorResourceTypes}, nil
		case "common_metric_labels", "commonMetricLabels", "common-metric-labels":
			return &TsConditionSelector_FieldTerminalPath{selector: TsConditionSelector_FieldPathSelectorCommonMetricLabels}, nil
		case "common_resource_labels", "commonResourceLabels", "common-resource-labels":
			return &TsConditionSelector_FieldTerminalPath{selector: TsConditionSelector_FieldPathSelectorCommonResourceLabels}, nil
		}
	} else {
		switch fp[0] {
		case "common_metric_labels", "commonMetricLabels", "common-metric-labels":
			if len(fp) > 2 {
				return nil, status.Errorf(codes.InvalidArgument, "sub path for maps ('%s') are not supported (object TsCondition_Selector)", fp)
			}
			return &TsConditionSelector_FieldPathMap{selector: TsConditionSelector_FieldPathSelectorCommonMetricLabels, key: fp[1]}, nil
		case "common_resource_labels", "commonResourceLabels", "common-resource-labels":
			if len(fp) > 2 {
				return nil, status.Errorf(codes.InvalidArgument, "sub path for maps ('%s') are not supported (object TsCondition_Selector)", fp)
			}
			return &TsConditionSelector_FieldPathMap{selector: TsConditionSelector_FieldPathSelectorCommonResourceLabels, key: fp[1]}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object TsCondition_Selector", fp)
}

func ParseTsConditionSelector_FieldPath(rawField string) (TsConditionSelector_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildTsConditionSelector_FieldPath(fp)
}

func MustParseTsConditionSelector_FieldPath(rawField string) TsConditionSelector_FieldPath {
	fp, err := ParseTsConditionSelector_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type TsConditionSelector_FieldTerminalPath struct {
	selector TsConditionSelector_FieldPathSelector
}

var _ TsConditionSelector_FieldPath = (*TsConditionSelector_FieldTerminalPath)(nil)

func (fp *TsConditionSelector_FieldTerminalPath) Selector() TsConditionSelector_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *TsConditionSelector_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *TsConditionSelector_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source TsCondition_Selector
func (fp *TsConditionSelector_FieldTerminalPath) Get(source *TsCondition_Selector) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case TsConditionSelector_FieldPathSelectorMetricTypes:
			for _, value := range source.GetMetricTypes() {
				values = append(values, value)
			}
		case TsConditionSelector_FieldPathSelectorResourceTypes:
			for _, value := range source.GetResourceTypes() {
				values = append(values, value)
			}
		case TsConditionSelector_FieldPathSelectorCommonMetricLabels:
			if source.CommonMetricLabels != nil {
				values = append(values, source.CommonMetricLabels)
			}
		case TsConditionSelector_FieldPathSelectorCommonResourceLabels:
			if source.CommonResourceLabels != nil {
				values = append(values, source.CommonResourceLabels)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for TsCondition_Selector: %d", fp.selector))
		}
	}
	return
}

func (fp *TsConditionSelector_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*TsCondition_Selector))
}

// GetSingle returns value pointed by specific field of from source TsCondition_Selector
func (fp *TsConditionSelector_FieldTerminalPath) GetSingle(source *TsCondition_Selector) (interface{}, bool) {
	switch fp.selector {
	case TsConditionSelector_FieldPathSelectorMetricTypes:
		res := source.GetMetricTypes()
		return res, res != nil
	case TsConditionSelector_FieldPathSelectorResourceTypes:
		res := source.GetResourceTypes()
		return res, res != nil
	case TsConditionSelector_FieldPathSelectorCommonMetricLabels:
		res := source.GetCommonMetricLabels()
		return res, res != nil
	case TsConditionSelector_FieldPathSelectorCommonResourceLabels:
		res := source.GetCommonResourceLabels()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Selector: %d", fp.selector))
	}
}

func (fp *TsConditionSelector_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*TsCondition_Selector))
}

// GetDefault returns a default value of the field type
func (fp *TsConditionSelector_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case TsConditionSelector_FieldPathSelectorMetricTypes:
		return ([]string)(nil)
	case TsConditionSelector_FieldPathSelectorResourceTypes:
		return ([]string)(nil)
	case TsConditionSelector_FieldPathSelectorCommonMetricLabels:
		return (map[string]*TsCondition_Selector_Strings)(nil)
	case TsConditionSelector_FieldPathSelectorCommonResourceLabels:
		return (map[string]*TsCondition_Selector_Strings)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Selector: %d", fp.selector))
	}
}

func (fp *TsConditionSelector_FieldTerminalPath) ClearValue(item *TsCondition_Selector) {
	if item != nil {
		switch fp.selector {
		case TsConditionSelector_FieldPathSelectorMetricTypes:
			item.MetricTypes = nil
		case TsConditionSelector_FieldPathSelectorResourceTypes:
			item.ResourceTypes = nil
		case TsConditionSelector_FieldPathSelectorCommonMetricLabels:
			item.CommonMetricLabels = nil
		case TsConditionSelector_FieldPathSelectorCommonResourceLabels:
			item.CommonResourceLabels = nil
		default:
			panic(fmt.Sprintf("Invalid selector for TsCondition_Selector: %d", fp.selector))
		}
	}
}

func (fp *TsConditionSelector_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*TsCondition_Selector))
}

// IsLeaf - whether field path is holds simple value
func (fp *TsConditionSelector_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == TsConditionSelector_FieldPathSelectorMetricTypes ||
		fp.selector == TsConditionSelector_FieldPathSelectorResourceTypes
}

func (fp *TsConditionSelector_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *TsConditionSelector_FieldTerminalPath) WithIValue(value interface{}) TsConditionSelector_FieldPathValue {
	switch fp.selector {
	case TsConditionSelector_FieldPathSelectorMetricTypes:
		return &TsConditionSelector_FieldTerminalPathValue{TsConditionSelector_FieldTerminalPath: *fp, value: value.([]string)}
	case TsConditionSelector_FieldPathSelectorResourceTypes:
		return &TsConditionSelector_FieldTerminalPathValue{TsConditionSelector_FieldTerminalPath: *fp, value: value.([]string)}
	case TsConditionSelector_FieldPathSelectorCommonMetricLabels:
		return &TsConditionSelector_FieldTerminalPathValue{TsConditionSelector_FieldTerminalPath: *fp, value: value.(map[string]*TsCondition_Selector_Strings)}
	case TsConditionSelector_FieldPathSelectorCommonResourceLabels:
		return &TsConditionSelector_FieldTerminalPathValue{TsConditionSelector_FieldTerminalPath: *fp, value: value.(map[string]*TsCondition_Selector_Strings)}
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Selector: %d", fp.selector))
	}
}

func (fp *TsConditionSelector_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *TsConditionSelector_FieldTerminalPath) WithIArrayOfValues(values interface{}) TsConditionSelector_FieldPathArrayOfValues {
	fpaov := &TsConditionSelector_FieldTerminalPathArrayOfValues{TsConditionSelector_FieldTerminalPath: *fp}
	switch fp.selector {
	case TsConditionSelector_FieldPathSelectorMetricTypes:
		return &TsConditionSelector_FieldTerminalPathArrayOfValues{TsConditionSelector_FieldTerminalPath: *fp, values: values.([][]string)}
	case TsConditionSelector_FieldPathSelectorResourceTypes:
		return &TsConditionSelector_FieldTerminalPathArrayOfValues{TsConditionSelector_FieldTerminalPath: *fp, values: values.([][]string)}
	case TsConditionSelector_FieldPathSelectorCommonMetricLabels:
		return &TsConditionSelector_FieldTerminalPathArrayOfValues{TsConditionSelector_FieldTerminalPath: *fp, values: values.([]map[string]*TsCondition_Selector_Strings)}
	case TsConditionSelector_FieldPathSelectorCommonResourceLabels:
		return &TsConditionSelector_FieldTerminalPathArrayOfValues{TsConditionSelector_FieldTerminalPath: *fp, values: values.([]map[string]*TsCondition_Selector_Strings)}
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Selector: %d", fp.selector))
	}
	return fpaov
}

func (fp *TsConditionSelector_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *TsConditionSelector_FieldTerminalPath) WithIArrayItemValue(value interface{}) TsConditionSelector_FieldPathArrayItemValue {
	switch fp.selector {
	case TsConditionSelector_FieldPathSelectorMetricTypes:
		return &TsConditionSelector_FieldTerminalPathArrayItemValue{TsConditionSelector_FieldTerminalPath: *fp, value: value.(string)}
	case TsConditionSelector_FieldPathSelectorResourceTypes:
		return &TsConditionSelector_FieldTerminalPathArrayItemValue{TsConditionSelector_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Selector: %d", fp.selector))
	}
}

func (fp *TsConditionSelector_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// FieldPath for map type with additional Key information
type TsConditionSelector_FieldPathMap struct {
	key      string
	selector TsConditionSelector_FieldPathSelector
}

var _ TsConditionSelector_FieldPath = (*TsConditionSelector_FieldPathMap)(nil)

func (fpm *TsConditionSelector_FieldPathMap) Selector() TsConditionSelector_FieldPathSelector {
	return fpm.selector
}

func (fpm *TsConditionSelector_FieldPathMap) Key() string {
	return fpm.key
}

// String returns path representation in proto convention
func (fpm *TsConditionSelector_FieldPathMap) String() string {
	return fpm.selector.String() + "." + fpm.key
}

// JSONString returns path representation is JSON convention. Note that map keys are not transformed
func (fpm *TsConditionSelector_FieldPathMap) JSONString() string {
	return strcase.ToLowerCamel(fpm.selector.String()) + "." + fpm.key
}

// Get returns all values pointed by selected field map key from source TsCondition_Selector
func (fpm *TsConditionSelector_FieldPathMap) Get(source *TsCondition_Selector) (values []interface{}) {
	switch fpm.selector {
	case TsConditionSelector_FieldPathSelectorCommonMetricLabels:
		if value, ok := source.GetCommonMetricLabels()[fpm.key]; ok {
			values = append(values, value)
		}
	case TsConditionSelector_FieldPathSelectorCommonResourceLabels:
		if value, ok := source.GetCommonResourceLabels()[fpm.key]; ok {
			values = append(values, value)
		}
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Selector: %d", fpm.selector))
	}
	return
}

func (fpm *TsConditionSelector_FieldPathMap) GetRaw(source proto.Message) []interface{} {
	return fpm.Get(source.(*TsCondition_Selector))
}

// GetSingle returns value by selected field map key from source TsCondition_Selector
func (fpm *TsConditionSelector_FieldPathMap) GetSingle(source *TsCondition_Selector) (interface{}, bool) {
	switch fpm.selector {
	case TsConditionSelector_FieldPathSelectorCommonMetricLabels:
		res, ok := source.GetCommonMetricLabels()[fpm.key]
		return res, ok
	case TsConditionSelector_FieldPathSelectorCommonResourceLabels:
		res, ok := source.GetCommonResourceLabels()[fpm.key]
		return res, ok
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Selector: %d", fpm.selector))
	}
}

func (fpm *TsConditionSelector_FieldPathMap) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpm.GetSingle(source.(*TsCondition_Selector))
}

// GetDefault returns a default value of the field type
func (fpm *TsConditionSelector_FieldPathMap) GetDefault() interface{} {
	switch fpm.selector {
	case TsConditionSelector_FieldPathSelectorCommonMetricLabels:
		var v *TsCondition_Selector_Strings
		return v
	case TsConditionSelector_FieldPathSelectorCommonResourceLabels:
		var v *TsCondition_Selector_Strings
		return v
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Selector: %d", fpm.selector))
	}
}

func (fpm *TsConditionSelector_FieldPathMap) ClearValue(item *TsCondition_Selector) {
	if item != nil {
		switch fpm.selector {
		case TsConditionSelector_FieldPathSelectorCommonMetricLabels:
			delete(item.CommonMetricLabels, fpm.key)
		case TsConditionSelector_FieldPathSelectorCommonResourceLabels:
			delete(item.CommonResourceLabels, fpm.key)
		default:
			panic(fmt.Sprintf("Invalid selector for TsCondition_Selector: %d", fpm.selector))
		}
	}
}

func (fpm *TsConditionSelector_FieldPathMap) ClearValueRaw(item proto.Message) {
	fpm.ClearValue(item.(*TsCondition_Selector))
}

// IsLeaf - whether field path is holds simple value
func (fpm *TsConditionSelector_FieldPathMap) IsLeaf() bool {
	switch fpm.selector {
	case TsConditionSelector_FieldPathSelectorCommonMetricLabels:
		return false
	case TsConditionSelector_FieldPathSelectorCommonResourceLabels:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Selector: %d", fpm.selector))
	}
}

func (fpm *TsConditionSelector_FieldPathMap) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fpm}
}

func (fpm *TsConditionSelector_FieldPathMap) WithIValue(value interface{}) TsConditionSelector_FieldPathValue {
	switch fpm.selector {
	case TsConditionSelector_FieldPathSelectorCommonMetricLabels:
		return &TsConditionSelector_FieldPathMapValue{TsConditionSelector_FieldPathMap: *fpm, value: value.(*TsCondition_Selector_Strings)}
	case TsConditionSelector_FieldPathSelectorCommonResourceLabels:
		return &TsConditionSelector_FieldPathMapValue{TsConditionSelector_FieldPathMap: *fpm, value: value.(*TsCondition_Selector_Strings)}
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Selector: %d", fpm.selector))
	}
}

func (fpm *TsConditionSelector_FieldPathMap) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fpm.WithIValue(value)
}

func (fpm *TsConditionSelector_FieldPathMap) WithIArrayOfValues(values interface{}) TsConditionSelector_FieldPathArrayOfValues {
	switch fpm.selector {
	case TsConditionSelector_FieldPathSelectorCommonMetricLabels:
		return &TsConditionSelector_FieldPathMapArrayOfValues{TsConditionSelector_FieldPathMap: *fpm, values: values.([]*TsCondition_Selector_Strings)}
	case TsConditionSelector_FieldPathSelectorCommonResourceLabels:
		return &TsConditionSelector_FieldPathMapArrayOfValues{TsConditionSelector_FieldPathMap: *fpm, values: values.([]*TsCondition_Selector_Strings)}
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Selector: %d", fpm.selector))
	}
}

func (fpm *TsConditionSelector_FieldPathMap) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fpm.WithIArrayOfValues(values)
}

func (fpm *TsConditionSelector_FieldPathMap) WithIArrayItemValue(value interface{}) TsConditionSelector_FieldPathArrayItemValue {
	panic("Cannot create array item value from map fieldpath")
}

func (fpm *TsConditionSelector_FieldPathMap) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fpm.WithIArrayItemValue(value)
}

// TsConditionSelector_FieldPathValue allows storing values for Selector fields according to their type
type TsConditionSelector_FieldPathValue interface {
	TsConditionSelector_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **TsCondition_Selector)
	CompareWith(*TsCondition_Selector) (cmp int, comparable bool)
}

func ParseTsConditionSelector_FieldPathValue(pathStr, valueStr string) (TsConditionSelector_FieldPathValue, error) {
	fp, err := ParseTsConditionSelector_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Selector field path value from %s: %v", valueStr, err)
	}
	return fpv.(TsConditionSelector_FieldPathValue), nil
}

func MustParseTsConditionSelector_FieldPathValue(pathStr, valueStr string) TsConditionSelector_FieldPathValue {
	fpv, err := ParseTsConditionSelector_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type TsConditionSelector_FieldTerminalPathValue struct {
	TsConditionSelector_FieldTerminalPath
	value interface{}
}

var _ TsConditionSelector_FieldPathValue = (*TsConditionSelector_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Selector' as interface{}
func (fpv *TsConditionSelector_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *TsConditionSelector_FieldTerminalPathValue) AsMetricTypesValue() ([]string, bool) {
	res, ok := fpv.value.([]string)
	return res, ok
}
func (fpv *TsConditionSelector_FieldTerminalPathValue) AsResourceTypesValue() ([]string, bool) {
	res, ok := fpv.value.([]string)
	return res, ok
}
func (fpv *TsConditionSelector_FieldTerminalPathValue) AsCommonMetricLabelsValue() (map[string]*TsCondition_Selector_Strings, bool) {
	res, ok := fpv.value.(map[string]*TsCondition_Selector_Strings)
	return res, ok
}
func (fpv *TsConditionSelector_FieldTerminalPathValue) AsCommonResourceLabelsValue() (map[string]*TsCondition_Selector_Strings, bool) {
	res, ok := fpv.value.(map[string]*TsCondition_Selector_Strings)
	return res, ok
}

// SetTo stores value for selected field for object Selector
func (fpv *TsConditionSelector_FieldTerminalPathValue) SetTo(target **TsCondition_Selector) {
	if *target == nil {
		*target = new(TsCondition_Selector)
	}
	switch fpv.selector {
	case TsConditionSelector_FieldPathSelectorMetricTypes:
		(*target).MetricTypes = fpv.value.([]string)
	case TsConditionSelector_FieldPathSelectorResourceTypes:
		(*target).ResourceTypes = fpv.value.([]string)
	case TsConditionSelector_FieldPathSelectorCommonMetricLabels:
		(*target).CommonMetricLabels = fpv.value.(map[string]*TsCondition_Selector_Strings)
	case TsConditionSelector_FieldPathSelectorCommonResourceLabels:
		(*target).CommonResourceLabels = fpv.value.(map[string]*TsCondition_Selector_Strings)
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Selector: %d", fpv.selector))
	}
}

func (fpv *TsConditionSelector_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*TsCondition_Selector)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'TsConditionSelector_FieldTerminalPathValue' with the value under path in 'TsCondition_Selector'.
func (fpv *TsConditionSelector_FieldTerminalPathValue) CompareWith(source *TsCondition_Selector) (int, bool) {
	switch fpv.selector {
	case TsConditionSelector_FieldPathSelectorMetricTypes:
		return 0, false
	case TsConditionSelector_FieldPathSelectorResourceTypes:
		return 0, false
	case TsConditionSelector_FieldPathSelectorCommonMetricLabels:
		return 0, false
	case TsConditionSelector_FieldPathSelectorCommonResourceLabels:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Selector: %d", fpv.selector))
	}
}

func (fpv *TsConditionSelector_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*TsCondition_Selector))
}

type TsConditionSelector_FieldPathMapValue struct {
	TsConditionSelector_FieldPathMap
	value interface{}
}

var _ TsConditionSelector_FieldPathValue = (*TsConditionSelector_FieldPathMapValue)(nil)

// GetValue returns value stored under selected field in Selector as interface{}
func (fpmv *TsConditionSelector_FieldPathMapValue) GetRawValue() interface{} {
	return fpmv.value
}
func (fpmv *TsConditionSelector_FieldPathMapValue) AsCommonMetricLabelsElementValue() (*TsCondition_Selector_Strings, bool) {
	res, ok := fpmv.value.(*TsCondition_Selector_Strings)
	return res, ok
}
func (fpmv *TsConditionSelector_FieldPathMapValue) AsCommonResourceLabelsElementValue() (*TsCondition_Selector_Strings, bool) {
	res, ok := fpmv.value.(*TsCondition_Selector_Strings)
	return res, ok
}

// SetTo stores value for selected field in Selector
func (fpmv *TsConditionSelector_FieldPathMapValue) SetTo(target **TsCondition_Selector) {
	if *target == nil {
		*target = new(TsCondition_Selector)
	}
	switch fpmv.selector {
	case TsConditionSelector_FieldPathSelectorCommonMetricLabels:
		if (*target).CommonMetricLabels == nil {
			(*target).CommonMetricLabels = make(map[string]*TsCondition_Selector_Strings)
		}
		(*target).CommonMetricLabels[fpmv.key] = fpmv.value.(*TsCondition_Selector_Strings)
	case TsConditionSelector_FieldPathSelectorCommonResourceLabels:
		if (*target).CommonResourceLabels == nil {
			(*target).CommonResourceLabels = make(map[string]*TsCondition_Selector_Strings)
		}
		(*target).CommonResourceLabels[fpmv.key] = fpmv.value.(*TsCondition_Selector_Strings)
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Selector: %d", fpmv.selector))
	}
}

func (fpmv *TsConditionSelector_FieldPathMapValue) SetToRaw(target proto.Message) {
	typedObject := target.(*TsCondition_Selector)
	fpmv.SetTo(&typedObject)
}

// CompareWith compares value in the 'TsConditionSelector_FieldPathMapValue' with the value under path in 'TsCondition_Selector'.
func (fpmv *TsConditionSelector_FieldPathMapValue) CompareWith(source *TsCondition_Selector) (int, bool) {
	switch fpmv.selector {
	case TsConditionSelector_FieldPathSelectorCommonMetricLabels:
		return 0, false
	case TsConditionSelector_FieldPathSelectorCommonResourceLabels:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Selector: %d", fpmv.selector))
	}
}

func (fpmv *TsConditionSelector_FieldPathMapValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpmv.CompareWith(source.(*TsCondition_Selector))
}

// TsConditionSelector_FieldPathArrayItemValue allows storing single item in Path-specific values for Selector according to their type
// Present only for array (repeated) types.
type TsConditionSelector_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	TsConditionSelector_FieldPath
	ContainsValue(*TsCondition_Selector) bool
}

// ParseTsConditionSelector_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseTsConditionSelector_FieldPathArrayItemValue(pathStr, valueStr string) (TsConditionSelector_FieldPathArrayItemValue, error) {
	fp, err := ParseTsConditionSelector_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Selector field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(TsConditionSelector_FieldPathArrayItemValue), nil
}

func MustParseTsConditionSelector_FieldPathArrayItemValue(pathStr, valueStr string) TsConditionSelector_FieldPathArrayItemValue {
	fpaiv, err := ParseTsConditionSelector_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type TsConditionSelector_FieldTerminalPathArrayItemValue struct {
	TsConditionSelector_FieldTerminalPath
	value interface{}
}

var _ TsConditionSelector_FieldPathArrayItemValue = (*TsConditionSelector_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object TsCondition_Selector as interface{}
func (fpaiv *TsConditionSelector_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *TsConditionSelector_FieldTerminalPathArrayItemValue) AsMetricTypesItemValue() (string, bool) {
	res, ok := fpaiv.value.(string)
	return res, ok
}
func (fpaiv *TsConditionSelector_FieldTerminalPathArrayItemValue) AsResourceTypesItemValue() (string, bool) {
	res, ok := fpaiv.value.(string)
	return res, ok
}

func (fpaiv *TsConditionSelector_FieldTerminalPathArrayItemValue) GetSingle(source *TsCondition_Selector) (interface{}, bool) {
	return nil, false
}

func (fpaiv *TsConditionSelector_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*TsCondition_Selector))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Selector'
func (fpaiv *TsConditionSelector_FieldTerminalPathArrayItemValue) ContainsValue(source *TsCondition_Selector) bool {
	slice := fpaiv.TsConditionSelector_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// TsConditionSelector_FieldPathArrayOfValues allows storing slice of values for Selector fields according to their type
type TsConditionSelector_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	TsConditionSelector_FieldPath
}

func ParseTsConditionSelector_FieldPathArrayOfValues(pathStr, valuesStr string) (TsConditionSelector_FieldPathArrayOfValues, error) {
	fp, err := ParseTsConditionSelector_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Selector field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(TsConditionSelector_FieldPathArrayOfValues), nil
}

func MustParseTsConditionSelector_FieldPathArrayOfValues(pathStr, valuesStr string) TsConditionSelector_FieldPathArrayOfValues {
	fpaov, err := ParseTsConditionSelector_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type TsConditionSelector_FieldTerminalPathArrayOfValues struct {
	TsConditionSelector_FieldTerminalPath
	values interface{}
}

var _ TsConditionSelector_FieldPathArrayOfValues = (*TsConditionSelector_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *TsConditionSelector_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case TsConditionSelector_FieldPathSelectorMetricTypes:
		for _, v := range fpaov.values.([][]string) {
			values = append(values, v)
		}
	case TsConditionSelector_FieldPathSelectorResourceTypes:
		for _, v := range fpaov.values.([][]string) {
			values = append(values, v)
		}
	case TsConditionSelector_FieldPathSelectorCommonMetricLabels:
		for _, v := range fpaov.values.([]map[string]*TsCondition_Selector_Strings) {
			values = append(values, v)
		}
	case TsConditionSelector_FieldPathSelectorCommonResourceLabels:
		for _, v := range fpaov.values.([]map[string]*TsCondition_Selector_Strings) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *TsConditionSelector_FieldTerminalPathArrayOfValues) AsMetricTypesArrayOfValues() ([][]string, bool) {
	res, ok := fpaov.values.([][]string)
	return res, ok
}
func (fpaov *TsConditionSelector_FieldTerminalPathArrayOfValues) AsResourceTypesArrayOfValues() ([][]string, bool) {
	res, ok := fpaov.values.([][]string)
	return res, ok
}
func (fpaov *TsConditionSelector_FieldTerminalPathArrayOfValues) AsCommonMetricLabelsArrayOfValues() ([]map[string]*TsCondition_Selector_Strings, bool) {
	res, ok := fpaov.values.([]map[string]*TsCondition_Selector_Strings)
	return res, ok
}
func (fpaov *TsConditionSelector_FieldTerminalPathArrayOfValues) AsCommonResourceLabelsArrayOfValues() ([]map[string]*TsCondition_Selector_Strings, bool) {
	res, ok := fpaov.values.([]map[string]*TsCondition_Selector_Strings)
	return res, ok
}

type TsConditionSelector_FieldPathMapArrayOfValues struct {
	TsConditionSelector_FieldPathMap
	values interface{}
}

var _ TsConditionSelector_FieldPathArrayOfValues = (*TsConditionSelector_FieldPathMapArrayOfValues)(nil)

func (fpmaov *TsConditionSelector_FieldPathMapArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpmaov.selector {
	case TsConditionSelector_FieldPathSelectorCommonMetricLabels:
		for _, v := range fpmaov.values.([]*TsCondition_Selector_Strings) {
			values = append(values, v)
		}
	case TsConditionSelector_FieldPathSelectorCommonResourceLabels:
		for _, v := range fpmaov.values.([]*TsCondition_Selector_Strings) {
			values = append(values, v)
		}
	}
	return
}
func (fpmaov *TsConditionSelector_FieldPathMapArrayOfValues) AsCommonMetricLabelsArrayOfElementValues() ([]*TsCondition_Selector_Strings, bool) {
	res, ok := fpmaov.values.([]*TsCondition_Selector_Strings)
	return res, ok
}
func (fpmaov *TsConditionSelector_FieldPathMapArrayOfValues) AsCommonResourceLabelsArrayOfElementValues() ([]*TsCondition_Selector_Strings, bool) {
	res, ok := fpmaov.values.([]*TsCondition_Selector_Strings)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type TsConditionTemplateSource_FieldPath interface {
	gotenobject.FieldPath
	Selector() TsConditionTemplateSource_FieldPathSelector
	Get(source *TsCondition_TemplateSource) []interface{}
	GetSingle(source *TsCondition_TemplateSource) (interface{}, bool)
	ClearValue(item *TsCondition_TemplateSource)

	// Those methods build corresponding TsConditionTemplateSource_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) TsConditionTemplateSource_FieldPathValue
	WithIArrayOfValues(values interface{}) TsConditionTemplateSource_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) TsConditionTemplateSource_FieldPathArrayItemValue
}

type TsConditionTemplateSource_FieldPathSelector int32

const (
	TsConditionTemplateSource_FieldPathSelectorTemplate      TsConditionTemplateSource_FieldPathSelector = 0
	TsConditionTemplateSource_FieldPathSelectorUpdatedFields TsConditionTemplateSource_FieldPathSelector = 1
)

func (s TsConditionTemplateSource_FieldPathSelector) String() string {
	switch s {
	case TsConditionTemplateSource_FieldPathSelectorTemplate:
		return "template"
	case TsConditionTemplateSource_FieldPathSelectorUpdatedFields:
		return "updated_fields"
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_TemplateSource: %d", s))
	}
}

func BuildTsConditionTemplateSource_FieldPath(fp gotenobject.RawFieldPath) (TsConditionTemplateSource_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object TsCondition_TemplateSource")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "template":
			return &TsConditionTemplateSource_FieldTerminalPath{selector: TsConditionTemplateSource_FieldPathSelectorTemplate}, nil
		case "updated_fields", "updatedFields", "updated-fields":
			return &TsConditionTemplateSource_FieldTerminalPath{selector: TsConditionTemplateSource_FieldPathSelectorUpdatedFields}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object TsCondition_TemplateSource", fp)
}

func ParseTsConditionTemplateSource_FieldPath(rawField string) (TsConditionTemplateSource_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildTsConditionTemplateSource_FieldPath(fp)
}

func MustParseTsConditionTemplateSource_FieldPath(rawField string) TsConditionTemplateSource_FieldPath {
	fp, err := ParseTsConditionTemplateSource_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type TsConditionTemplateSource_FieldTerminalPath struct {
	selector TsConditionTemplateSource_FieldPathSelector
}

var _ TsConditionTemplateSource_FieldPath = (*TsConditionTemplateSource_FieldTerminalPath)(nil)

func (fp *TsConditionTemplateSource_FieldTerminalPath) Selector() TsConditionTemplateSource_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *TsConditionTemplateSource_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *TsConditionTemplateSource_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source TsCondition_TemplateSource
func (fp *TsConditionTemplateSource_FieldTerminalPath) Get(source *TsCondition_TemplateSource) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case TsConditionTemplateSource_FieldPathSelectorTemplate:
			if source.Template != nil {
				values = append(values, source.Template)
			}
		case TsConditionTemplateSource_FieldPathSelectorUpdatedFields:
			if source.UpdatedFields != nil {
				values = append(values, source.UpdatedFields)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for TsCondition_TemplateSource: %d", fp.selector))
		}
	}
	return
}

func (fp *TsConditionTemplateSource_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*TsCondition_TemplateSource))
}

// GetSingle returns value pointed by specific field of from source TsCondition_TemplateSource
func (fp *TsConditionTemplateSource_FieldTerminalPath) GetSingle(source *TsCondition_TemplateSource) (interface{}, bool) {
	switch fp.selector {
	case TsConditionTemplateSource_FieldPathSelectorTemplate:
		res := source.GetTemplate()
		return res, res != nil
	case TsConditionTemplateSource_FieldPathSelectorUpdatedFields:
		res := source.GetUpdatedFields()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_TemplateSource: %d", fp.selector))
	}
}

func (fp *TsConditionTemplateSource_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*TsCondition_TemplateSource))
}

// GetDefault returns a default value of the field type
func (fp *TsConditionTemplateSource_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case TsConditionTemplateSource_FieldPathSelectorTemplate:
		return (*ts_condition_template.Reference)(nil)
	case TsConditionTemplateSource_FieldPathSelectorUpdatedFields:
		return (*fieldmaskpb.FieldMask)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_TemplateSource: %d", fp.selector))
	}
}

func (fp *TsConditionTemplateSource_FieldTerminalPath) ClearValue(item *TsCondition_TemplateSource) {
	if item != nil {
		switch fp.selector {
		case TsConditionTemplateSource_FieldPathSelectorTemplate:
			item.Template = nil
		case TsConditionTemplateSource_FieldPathSelectorUpdatedFields:
			item.UpdatedFields = nil
		default:
			panic(fmt.Sprintf("Invalid selector for TsCondition_TemplateSource: %d", fp.selector))
		}
	}
}

func (fp *TsConditionTemplateSource_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*TsCondition_TemplateSource))
}

// IsLeaf - whether field path is holds simple value
func (fp *TsConditionTemplateSource_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == TsConditionTemplateSource_FieldPathSelectorTemplate ||
		fp.selector == TsConditionTemplateSource_FieldPathSelectorUpdatedFields
}

func (fp *TsConditionTemplateSource_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *TsConditionTemplateSource_FieldTerminalPath) WithIValue(value interface{}) TsConditionTemplateSource_FieldPathValue {
	switch fp.selector {
	case TsConditionTemplateSource_FieldPathSelectorTemplate:
		return &TsConditionTemplateSource_FieldTerminalPathValue{TsConditionTemplateSource_FieldTerminalPath: *fp, value: value.(*ts_condition_template.Reference)}
	case TsConditionTemplateSource_FieldPathSelectorUpdatedFields:
		return &TsConditionTemplateSource_FieldTerminalPathValue{TsConditionTemplateSource_FieldTerminalPath: *fp, value: value.(*fieldmaskpb.FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_TemplateSource: %d", fp.selector))
	}
}

func (fp *TsConditionTemplateSource_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *TsConditionTemplateSource_FieldTerminalPath) WithIArrayOfValues(values interface{}) TsConditionTemplateSource_FieldPathArrayOfValues {
	fpaov := &TsConditionTemplateSource_FieldTerminalPathArrayOfValues{TsConditionTemplateSource_FieldTerminalPath: *fp}
	switch fp.selector {
	case TsConditionTemplateSource_FieldPathSelectorTemplate:
		return &TsConditionTemplateSource_FieldTerminalPathArrayOfValues{TsConditionTemplateSource_FieldTerminalPath: *fp, values: values.([]*ts_condition_template.Reference)}
	case TsConditionTemplateSource_FieldPathSelectorUpdatedFields:
		return &TsConditionTemplateSource_FieldTerminalPathArrayOfValues{TsConditionTemplateSource_FieldTerminalPath: *fp, values: values.([]*fieldmaskpb.FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_TemplateSource: %d", fp.selector))
	}
	return fpaov
}

func (fp *TsConditionTemplateSource_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *TsConditionTemplateSource_FieldTerminalPath) WithIArrayItemValue(value interface{}) TsConditionTemplateSource_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_TemplateSource: %d", fp.selector))
	}
}

func (fp *TsConditionTemplateSource_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// TsConditionTemplateSource_FieldPathValue allows storing values for TemplateSource fields according to their type
type TsConditionTemplateSource_FieldPathValue interface {
	TsConditionTemplateSource_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **TsCondition_TemplateSource)
	CompareWith(*TsCondition_TemplateSource) (cmp int, comparable bool)
}

func ParseTsConditionTemplateSource_FieldPathValue(pathStr, valueStr string) (TsConditionTemplateSource_FieldPathValue, error) {
	fp, err := ParseTsConditionTemplateSource_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing TemplateSource field path value from %s: %v", valueStr, err)
	}
	return fpv.(TsConditionTemplateSource_FieldPathValue), nil
}

func MustParseTsConditionTemplateSource_FieldPathValue(pathStr, valueStr string) TsConditionTemplateSource_FieldPathValue {
	fpv, err := ParseTsConditionTemplateSource_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type TsConditionTemplateSource_FieldTerminalPathValue struct {
	TsConditionTemplateSource_FieldTerminalPath
	value interface{}
}

var _ TsConditionTemplateSource_FieldPathValue = (*TsConditionTemplateSource_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'TemplateSource' as interface{}
func (fpv *TsConditionTemplateSource_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *TsConditionTemplateSource_FieldTerminalPathValue) AsTemplateValue() (*ts_condition_template.Reference, bool) {
	res, ok := fpv.value.(*ts_condition_template.Reference)
	return res, ok
}
func (fpv *TsConditionTemplateSource_FieldTerminalPathValue) AsUpdatedFieldsValue() (*fieldmaskpb.FieldMask, bool) {
	res, ok := fpv.value.(*fieldmaskpb.FieldMask)
	return res, ok
}

// SetTo stores value for selected field for object TemplateSource
func (fpv *TsConditionTemplateSource_FieldTerminalPathValue) SetTo(target **TsCondition_TemplateSource) {
	if *target == nil {
		*target = new(TsCondition_TemplateSource)
	}
	switch fpv.selector {
	case TsConditionTemplateSource_FieldPathSelectorTemplate:
		(*target).Template = fpv.value.(*ts_condition_template.Reference)
	case TsConditionTemplateSource_FieldPathSelectorUpdatedFields:
		(*target).UpdatedFields = fpv.value.(*fieldmaskpb.FieldMask)
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_TemplateSource: %d", fpv.selector))
	}
}

func (fpv *TsConditionTemplateSource_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*TsCondition_TemplateSource)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'TsConditionTemplateSource_FieldTerminalPathValue' with the value under path in 'TsCondition_TemplateSource'.
func (fpv *TsConditionTemplateSource_FieldTerminalPathValue) CompareWith(source *TsCondition_TemplateSource) (int, bool) {
	switch fpv.selector {
	case TsConditionTemplateSource_FieldPathSelectorTemplate:
		leftValue := fpv.value.(*ts_condition_template.Reference)
		rightValue := source.GetTemplate()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case TsConditionTemplateSource_FieldPathSelectorUpdatedFields:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_TemplateSource: %d", fpv.selector))
	}
}

func (fpv *TsConditionTemplateSource_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*TsCondition_TemplateSource))
}

// TsConditionTemplateSource_FieldPathArrayItemValue allows storing single item in Path-specific values for TemplateSource according to their type
// Present only for array (repeated) types.
type TsConditionTemplateSource_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	TsConditionTemplateSource_FieldPath
	ContainsValue(*TsCondition_TemplateSource) bool
}

// ParseTsConditionTemplateSource_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseTsConditionTemplateSource_FieldPathArrayItemValue(pathStr, valueStr string) (TsConditionTemplateSource_FieldPathArrayItemValue, error) {
	fp, err := ParseTsConditionTemplateSource_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing TemplateSource field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(TsConditionTemplateSource_FieldPathArrayItemValue), nil
}

func MustParseTsConditionTemplateSource_FieldPathArrayItemValue(pathStr, valueStr string) TsConditionTemplateSource_FieldPathArrayItemValue {
	fpaiv, err := ParseTsConditionTemplateSource_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type TsConditionTemplateSource_FieldTerminalPathArrayItemValue struct {
	TsConditionTemplateSource_FieldTerminalPath
	value interface{}
}

var _ TsConditionTemplateSource_FieldPathArrayItemValue = (*TsConditionTemplateSource_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object TsCondition_TemplateSource as interface{}
func (fpaiv *TsConditionTemplateSource_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *TsConditionTemplateSource_FieldTerminalPathArrayItemValue) GetSingle(source *TsCondition_TemplateSource) (interface{}, bool) {
	return nil, false
}

func (fpaiv *TsConditionTemplateSource_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*TsCondition_TemplateSource))
}

// Contains returns a boolean indicating if value that is being held is present in given 'TemplateSource'
func (fpaiv *TsConditionTemplateSource_FieldTerminalPathArrayItemValue) ContainsValue(source *TsCondition_TemplateSource) bool {
	slice := fpaiv.TsConditionTemplateSource_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// TsConditionTemplateSource_FieldPathArrayOfValues allows storing slice of values for TemplateSource fields according to their type
type TsConditionTemplateSource_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	TsConditionTemplateSource_FieldPath
}

func ParseTsConditionTemplateSource_FieldPathArrayOfValues(pathStr, valuesStr string) (TsConditionTemplateSource_FieldPathArrayOfValues, error) {
	fp, err := ParseTsConditionTemplateSource_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing TemplateSource field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(TsConditionTemplateSource_FieldPathArrayOfValues), nil
}

func MustParseTsConditionTemplateSource_FieldPathArrayOfValues(pathStr, valuesStr string) TsConditionTemplateSource_FieldPathArrayOfValues {
	fpaov, err := ParseTsConditionTemplateSource_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type TsConditionTemplateSource_FieldTerminalPathArrayOfValues struct {
	TsConditionTemplateSource_FieldTerminalPath
	values interface{}
}

var _ TsConditionTemplateSource_FieldPathArrayOfValues = (*TsConditionTemplateSource_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *TsConditionTemplateSource_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case TsConditionTemplateSource_FieldPathSelectorTemplate:
		for _, v := range fpaov.values.([]*ts_condition_template.Reference) {
			values = append(values, v)
		}
	case TsConditionTemplateSource_FieldPathSelectorUpdatedFields:
		for _, v := range fpaov.values.([]*fieldmaskpb.FieldMask) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *TsConditionTemplateSource_FieldTerminalPathArrayOfValues) AsTemplateArrayOfValues() ([]*ts_condition_template.Reference, bool) {
	res, ok := fpaov.values.([]*ts_condition_template.Reference)
	return res, ok
}
func (fpaov *TsConditionTemplateSource_FieldTerminalPathArrayOfValues) AsUpdatedFieldsArrayOfValues() ([]*fieldmaskpb.FieldMask, bool) {
	res, ok := fpaov.values.([]*fieldmaskpb.FieldMask)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type TsConditionSelectorStrings_FieldPath interface {
	gotenobject.FieldPath
	Selector() TsConditionSelectorStrings_FieldPathSelector
	Get(source *TsCondition_Selector_Strings) []interface{}
	GetSingle(source *TsCondition_Selector_Strings) (interface{}, bool)
	ClearValue(item *TsCondition_Selector_Strings)

	// Those methods build corresponding TsConditionSelectorStrings_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) TsConditionSelectorStrings_FieldPathValue
	WithIArrayOfValues(values interface{}) TsConditionSelectorStrings_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) TsConditionSelectorStrings_FieldPathArrayItemValue
}

type TsConditionSelectorStrings_FieldPathSelector int32

const (
	TsConditionSelectorStrings_FieldPathSelectorValues TsConditionSelectorStrings_FieldPathSelector = 0
)

func (s TsConditionSelectorStrings_FieldPathSelector) String() string {
	switch s {
	case TsConditionSelectorStrings_FieldPathSelectorValues:
		return "values"
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Selector_Strings: %d", s))
	}
}

func BuildTsConditionSelectorStrings_FieldPath(fp gotenobject.RawFieldPath) (TsConditionSelectorStrings_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object TsCondition_Selector_Strings")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "values":
			return &TsConditionSelectorStrings_FieldTerminalPath{selector: TsConditionSelectorStrings_FieldPathSelectorValues}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object TsCondition_Selector_Strings", fp)
}

func ParseTsConditionSelectorStrings_FieldPath(rawField string) (TsConditionSelectorStrings_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildTsConditionSelectorStrings_FieldPath(fp)
}

func MustParseTsConditionSelectorStrings_FieldPath(rawField string) TsConditionSelectorStrings_FieldPath {
	fp, err := ParseTsConditionSelectorStrings_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type TsConditionSelectorStrings_FieldTerminalPath struct {
	selector TsConditionSelectorStrings_FieldPathSelector
}

var _ TsConditionSelectorStrings_FieldPath = (*TsConditionSelectorStrings_FieldTerminalPath)(nil)

func (fp *TsConditionSelectorStrings_FieldTerminalPath) Selector() TsConditionSelectorStrings_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *TsConditionSelectorStrings_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *TsConditionSelectorStrings_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source TsCondition_Selector_Strings
func (fp *TsConditionSelectorStrings_FieldTerminalPath) Get(source *TsCondition_Selector_Strings) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case TsConditionSelectorStrings_FieldPathSelectorValues:
			for _, value := range source.GetValues() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for TsCondition_Selector_Strings: %d", fp.selector))
		}
	}
	return
}

func (fp *TsConditionSelectorStrings_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*TsCondition_Selector_Strings))
}

// GetSingle returns value pointed by specific field of from source TsCondition_Selector_Strings
func (fp *TsConditionSelectorStrings_FieldTerminalPath) GetSingle(source *TsCondition_Selector_Strings) (interface{}, bool) {
	switch fp.selector {
	case TsConditionSelectorStrings_FieldPathSelectorValues:
		res := source.GetValues()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Selector_Strings: %d", fp.selector))
	}
}

func (fp *TsConditionSelectorStrings_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*TsCondition_Selector_Strings))
}

// GetDefault returns a default value of the field type
func (fp *TsConditionSelectorStrings_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case TsConditionSelectorStrings_FieldPathSelectorValues:
		return ([]string)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Selector_Strings: %d", fp.selector))
	}
}

func (fp *TsConditionSelectorStrings_FieldTerminalPath) ClearValue(item *TsCondition_Selector_Strings) {
	if item != nil {
		switch fp.selector {
		case TsConditionSelectorStrings_FieldPathSelectorValues:
			item.Values = nil
		default:
			panic(fmt.Sprintf("Invalid selector for TsCondition_Selector_Strings: %d", fp.selector))
		}
	}
}

func (fp *TsConditionSelectorStrings_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*TsCondition_Selector_Strings))
}

// IsLeaf - whether field path is holds simple value
func (fp *TsConditionSelectorStrings_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == TsConditionSelectorStrings_FieldPathSelectorValues
}

func (fp *TsConditionSelectorStrings_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *TsConditionSelectorStrings_FieldTerminalPath) WithIValue(value interface{}) TsConditionSelectorStrings_FieldPathValue {
	switch fp.selector {
	case TsConditionSelectorStrings_FieldPathSelectorValues:
		return &TsConditionSelectorStrings_FieldTerminalPathValue{TsConditionSelectorStrings_FieldTerminalPath: *fp, value: value.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Selector_Strings: %d", fp.selector))
	}
}

func (fp *TsConditionSelectorStrings_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *TsConditionSelectorStrings_FieldTerminalPath) WithIArrayOfValues(values interface{}) TsConditionSelectorStrings_FieldPathArrayOfValues {
	fpaov := &TsConditionSelectorStrings_FieldTerminalPathArrayOfValues{TsConditionSelectorStrings_FieldTerminalPath: *fp}
	switch fp.selector {
	case TsConditionSelectorStrings_FieldPathSelectorValues:
		return &TsConditionSelectorStrings_FieldTerminalPathArrayOfValues{TsConditionSelectorStrings_FieldTerminalPath: *fp, values: values.([][]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Selector_Strings: %d", fp.selector))
	}
	return fpaov
}

func (fp *TsConditionSelectorStrings_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *TsConditionSelectorStrings_FieldTerminalPath) WithIArrayItemValue(value interface{}) TsConditionSelectorStrings_FieldPathArrayItemValue {
	switch fp.selector {
	case TsConditionSelectorStrings_FieldPathSelectorValues:
		return &TsConditionSelectorStrings_FieldTerminalPathArrayItemValue{TsConditionSelectorStrings_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Selector_Strings: %d", fp.selector))
	}
}

func (fp *TsConditionSelectorStrings_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// TsConditionSelectorStrings_FieldPathValue allows storing values for Strings fields according to their type
type TsConditionSelectorStrings_FieldPathValue interface {
	TsConditionSelectorStrings_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **TsCondition_Selector_Strings)
	CompareWith(*TsCondition_Selector_Strings) (cmp int, comparable bool)
}

func ParseTsConditionSelectorStrings_FieldPathValue(pathStr, valueStr string) (TsConditionSelectorStrings_FieldPathValue, error) {
	fp, err := ParseTsConditionSelectorStrings_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Strings field path value from %s: %v", valueStr, err)
	}
	return fpv.(TsConditionSelectorStrings_FieldPathValue), nil
}

func MustParseTsConditionSelectorStrings_FieldPathValue(pathStr, valueStr string) TsConditionSelectorStrings_FieldPathValue {
	fpv, err := ParseTsConditionSelectorStrings_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type TsConditionSelectorStrings_FieldTerminalPathValue struct {
	TsConditionSelectorStrings_FieldTerminalPath
	value interface{}
}

var _ TsConditionSelectorStrings_FieldPathValue = (*TsConditionSelectorStrings_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Strings' as interface{}
func (fpv *TsConditionSelectorStrings_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *TsConditionSelectorStrings_FieldTerminalPathValue) AsValuesValue() ([]string, bool) {
	res, ok := fpv.value.([]string)
	return res, ok
}

// SetTo stores value for selected field for object Strings
func (fpv *TsConditionSelectorStrings_FieldTerminalPathValue) SetTo(target **TsCondition_Selector_Strings) {
	if *target == nil {
		*target = new(TsCondition_Selector_Strings)
	}
	switch fpv.selector {
	case TsConditionSelectorStrings_FieldPathSelectorValues:
		(*target).Values = fpv.value.([]string)
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Selector_Strings: %d", fpv.selector))
	}
}

func (fpv *TsConditionSelectorStrings_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*TsCondition_Selector_Strings)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'TsConditionSelectorStrings_FieldTerminalPathValue' with the value under path in 'TsCondition_Selector_Strings'.
func (fpv *TsConditionSelectorStrings_FieldTerminalPathValue) CompareWith(source *TsCondition_Selector_Strings) (int, bool) {
	switch fpv.selector {
	case TsConditionSelectorStrings_FieldPathSelectorValues:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for TsCondition_Selector_Strings: %d", fpv.selector))
	}
}

func (fpv *TsConditionSelectorStrings_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*TsCondition_Selector_Strings))
}

// TsConditionSelectorStrings_FieldPathArrayItemValue allows storing single item in Path-specific values for Strings according to their type
// Present only for array (repeated) types.
type TsConditionSelectorStrings_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	TsConditionSelectorStrings_FieldPath
	ContainsValue(*TsCondition_Selector_Strings) bool
}

// ParseTsConditionSelectorStrings_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseTsConditionSelectorStrings_FieldPathArrayItemValue(pathStr, valueStr string) (TsConditionSelectorStrings_FieldPathArrayItemValue, error) {
	fp, err := ParseTsConditionSelectorStrings_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Strings field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(TsConditionSelectorStrings_FieldPathArrayItemValue), nil
}

func MustParseTsConditionSelectorStrings_FieldPathArrayItemValue(pathStr, valueStr string) TsConditionSelectorStrings_FieldPathArrayItemValue {
	fpaiv, err := ParseTsConditionSelectorStrings_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type TsConditionSelectorStrings_FieldTerminalPathArrayItemValue struct {
	TsConditionSelectorStrings_FieldTerminalPath
	value interface{}
}

var _ TsConditionSelectorStrings_FieldPathArrayItemValue = (*TsConditionSelectorStrings_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object TsCondition_Selector_Strings as interface{}
func (fpaiv *TsConditionSelectorStrings_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *TsConditionSelectorStrings_FieldTerminalPathArrayItemValue) AsValuesItemValue() (string, bool) {
	res, ok := fpaiv.value.(string)
	return res, ok
}

func (fpaiv *TsConditionSelectorStrings_FieldTerminalPathArrayItemValue) GetSingle(source *TsCondition_Selector_Strings) (interface{}, bool) {
	return nil, false
}

func (fpaiv *TsConditionSelectorStrings_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*TsCondition_Selector_Strings))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Strings'
func (fpaiv *TsConditionSelectorStrings_FieldTerminalPathArrayItemValue) ContainsValue(source *TsCondition_Selector_Strings) bool {
	slice := fpaiv.TsConditionSelectorStrings_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// TsConditionSelectorStrings_FieldPathArrayOfValues allows storing slice of values for Strings fields according to their type
type TsConditionSelectorStrings_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	TsConditionSelectorStrings_FieldPath
}

func ParseTsConditionSelectorStrings_FieldPathArrayOfValues(pathStr, valuesStr string) (TsConditionSelectorStrings_FieldPathArrayOfValues, error) {
	fp, err := ParseTsConditionSelectorStrings_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Strings field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(TsConditionSelectorStrings_FieldPathArrayOfValues), nil
}

func MustParseTsConditionSelectorStrings_FieldPathArrayOfValues(pathStr, valuesStr string) TsConditionSelectorStrings_FieldPathArrayOfValues {
	fpaov, err := ParseTsConditionSelectorStrings_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type TsConditionSelectorStrings_FieldTerminalPathArrayOfValues struct {
	TsConditionSelectorStrings_FieldTerminalPath
	values interface{}
}

var _ TsConditionSelectorStrings_FieldPathArrayOfValues = (*TsConditionSelectorStrings_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *TsConditionSelectorStrings_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case TsConditionSelectorStrings_FieldPathSelectorValues:
		for _, v := range fpaov.values.([][]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *TsConditionSelectorStrings_FieldTerminalPathArrayOfValues) AsValuesArrayOfValues() ([][]string, bool) {
	res, ok := fpaov.values.([][]string)
	return res, ok
}
