// Code generated by protoc-gen-goten-object
// File: edgelq/alerting/proto/v1/ts_condition.proto
// DO NOT EDIT!!!

package ts_condition

import (
	"encoding/json"
	"strings"

	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	googlefieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	document "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/document"
	policy "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/policy"
	monitoring_common "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/common"
	monitoring_time_serie "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/time_serie"
	meta "github.com/cloudwan/goten-sdk/types/meta"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = strings.Builder{}

	_ = codes.NotFound
	_ = status.Status{}
	_ = new(proto.Message)
	_ = new(preflect.Message)
	_ = googlefieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldMask)
)

// make sure we're using proto imports
var (
	_ = &document.Document{}
	_ = &policy.Policy{}
	_ = &monitoring_common.LabelDescriptor{}
	_ = &monitoring_time_serie.Point{}
	_ = &durationpb.Duration{}
	_ = &meta.Meta{}
)

type TsCondition_FieldMask struct {
	Paths []TsCondition_FieldPath
}

func FullTsCondition_FieldMask() *TsCondition_FieldMask {
	res := &TsCondition_FieldMask{}
	res.Paths = append(res.Paths, &TsCondition_FieldTerminalPath{selector: TsCondition_FieldPathSelectorName})
	res.Paths = append(res.Paths, &TsCondition_FieldTerminalPath{selector: TsCondition_FieldPathSelectorMetadata})
	res.Paths = append(res.Paths, &TsCondition_FieldTerminalPath{selector: TsCondition_FieldPathSelectorDisplayName})
	res.Paths = append(res.Paths, &TsCondition_FieldTerminalPath{selector: TsCondition_FieldPathSelectorDescription})
	res.Paths = append(res.Paths, &TsCondition_FieldTerminalPath{selector: TsCondition_FieldPathSelectorSupportingDocs})
	res.Paths = append(res.Paths, &TsCondition_FieldTerminalPath{selector: TsCondition_FieldPathSelectorSpec})
	res.Paths = append(res.Paths, &TsCondition_FieldTerminalPath{selector: TsCondition_FieldPathSelectorInternal})
	res.Paths = append(res.Paths, &TsCondition_FieldTerminalPath{selector: TsCondition_FieldPathSelectorFilterSelector})
	return res
}

func (fieldMask *TsCondition_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

func (fieldMask *TsCondition_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 8)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*TsCondition_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *TsCondition_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseTsCondition_FieldPath(raw)
	})
}

func (fieldMask *TsCondition_FieldMask) ProtoMessage() {}

func (fieldMask *TsCondition_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *TsCondition_FieldMask) Subtract(other *TsCondition_FieldMask) *TsCondition_FieldMask {
	result := &TsCondition_FieldMask{}
	removedSelectors := make([]bool, 8)
	otherSubMasks := map[TsCondition_FieldPathSelector]gotenobject.FieldMask{
		TsCondition_FieldPathSelectorMetadata:       &meta.Meta_FieldMask{},
		TsCondition_FieldPathSelectorSpec:           &TsCondition_Spec_FieldMask{},
		TsCondition_FieldPathSelectorInternal:       &TsCondition_Internal_FieldMask{},
		TsCondition_FieldPathSelectorFilterSelector: &TsCondition_Selector_FieldMask{},
	}
	mySubMasks := map[TsCondition_FieldPathSelector]gotenobject.FieldMask{
		TsCondition_FieldPathSelectorMetadata:       &meta.Meta_FieldMask{},
		TsCondition_FieldPathSelectorSpec:           &TsCondition_Spec_FieldMask{},
		TsCondition_FieldPathSelectorInternal:       &TsCondition_Internal_FieldMask{},
		TsCondition_FieldPathSelectorFilterSelector: &TsCondition_Selector_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *TsCondition_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *TsCondition_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*TsCondition_FieldTerminalPath); ok {
					switch tp.selector {
					case TsCondition_FieldPathSelectorMetadata:
						mySubMasks[TsCondition_FieldPathSelectorMetadata] = meta.FullMeta_FieldMask()
					case TsCondition_FieldPathSelectorSpec:
						mySubMasks[TsCondition_FieldPathSelectorSpec] = FullTsCondition_Spec_FieldMask()
					case TsCondition_FieldPathSelectorInternal:
						mySubMasks[TsCondition_FieldPathSelectorInternal] = FullTsCondition_Internal_FieldMask()
					case TsCondition_FieldPathSelectorFilterSelector:
						mySubMasks[TsCondition_FieldPathSelectorFilterSelector] = FullTsCondition_Selector_FieldMask()
					}
				} else if tp, ok := path.(*TsCondition_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &TsCondition_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *TsCondition_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*TsCondition_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *TsCondition_FieldMask) FilterInputFields() *TsCondition_FieldMask {
	result := &TsCondition_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case TsCondition_FieldPathSelectorInternal:
		case TsCondition_FieldPathSelectorFilterSelector:
		case TsCondition_FieldPathSelectorMetadata:
			if _, ok := path.(*TsCondition_FieldTerminalPath); ok {
				for _, subpath := range meta.FullMeta_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &TsCondition_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*TsCondition_FieldSubPath); ok {
				selectedMask := &meta.Meta_FieldMask{
					Paths: []meta.Meta_FieldPath{sub.subPath.(meta.Meta_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &TsCondition_FieldSubPath{selector: TsCondition_FieldPathSelectorMetadata, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *TsCondition_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *TsCondition_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]TsCondition_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseTsCondition_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask TsCondition_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *TsCondition_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *TsCondition_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask TsCondition_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *TsCondition_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *TsCondition_FieldMask) AppendPath(path TsCondition_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *TsCondition_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(TsCondition_FieldPath))
}

func (fieldMask *TsCondition_FieldMask) GetPaths() []TsCondition_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *TsCondition_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *TsCondition_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseTsCondition_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *TsCondition_FieldMask) Set(target, source *TsCondition) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *TsCondition_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*TsCondition), source.(*TsCondition))
}

func (fieldMask *TsCondition_FieldMask) Project(source *TsCondition) *TsCondition {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &TsCondition{}
	metadataMask := &meta.Meta_FieldMask{}
	wholeMetadataAccepted := false
	specMask := &TsCondition_Spec_FieldMask{}
	wholeSpecAccepted := false
	internalMask := &TsCondition_Internal_FieldMask{}
	wholeInternalAccepted := false
	filterSelectorMask := &TsCondition_Selector_FieldMask{}
	wholeFilterSelectorAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *TsCondition_FieldTerminalPath:
			switch tp.selector {
			case TsCondition_FieldPathSelectorName:
				result.Name = source.Name
			case TsCondition_FieldPathSelectorMetadata:
				result.Metadata = source.Metadata
				wholeMetadataAccepted = true
			case TsCondition_FieldPathSelectorDisplayName:
				result.DisplayName = source.DisplayName
			case TsCondition_FieldPathSelectorDescription:
				result.Description = source.Description
			case TsCondition_FieldPathSelectorSupportingDocs:
				result.SupportingDocs = source.SupportingDocs
			case TsCondition_FieldPathSelectorSpec:
				result.Spec = source.Spec
				wholeSpecAccepted = true
			case TsCondition_FieldPathSelectorInternal:
				result.Internal = source.Internal
				wholeInternalAccepted = true
			case TsCondition_FieldPathSelectorFilterSelector:
				result.FilterSelector = source.FilterSelector
				wholeFilterSelectorAccepted = true
			}
		case *TsCondition_FieldSubPath:
			switch tp.selector {
			case TsCondition_FieldPathSelectorMetadata:
				metadataMask.AppendPath(tp.subPath.(meta.Meta_FieldPath))
			case TsCondition_FieldPathSelectorSpec:
				specMask.AppendPath(tp.subPath.(TsConditionSpec_FieldPath))
			case TsCondition_FieldPathSelectorInternal:
				internalMask.AppendPath(tp.subPath.(TsConditionInternal_FieldPath))
			case TsCondition_FieldPathSelectorFilterSelector:
				filterSelectorMask.AppendPath(tp.subPath.(TsConditionSelector_FieldPath))
			}
		}
	}
	if wholeMetadataAccepted == false && len(metadataMask.Paths) > 0 {
		result.Metadata = metadataMask.Project(source.GetMetadata())
	}
	if wholeSpecAccepted == false && len(specMask.Paths) > 0 {
		result.Spec = specMask.Project(source.GetSpec())
	}
	if wholeInternalAccepted == false && len(internalMask.Paths) > 0 {
		result.Internal = internalMask.Project(source.GetInternal())
	}
	if wholeFilterSelectorAccepted == false && len(filterSelectorMask.Paths) > 0 {
		result.FilterSelector = filterSelectorMask.Project(source.GetFilterSelector())
	}
	return result
}

func (fieldMask *TsCondition_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*TsCondition))
}

func (fieldMask *TsCondition_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type TsCondition_Spec_FieldMask struct {
	Paths []TsConditionSpec_FieldPath
}

func FullTsCondition_Spec_FieldMask() *TsCondition_Spec_FieldMask {
	res := &TsCondition_Spec_FieldMask{}
	res.Paths = append(res.Paths, &TsConditionSpec_FieldTerminalPath{selector: TsConditionSpec_FieldPathSelectorQueries})
	res.Paths = append(res.Paths, &TsConditionSpec_FieldTerminalPath{selector: TsConditionSpec_FieldPathSelectorQueryGroupBy})
	res.Paths = append(res.Paths, &TsConditionSpec_FieldTerminalPath{selector: TsConditionSpec_FieldPathSelectorThresholdAlerting})
	res.Paths = append(res.Paths, &TsConditionSpec_FieldTerminalPath{selector: TsConditionSpec_FieldPathSelectorAnomalyAlerting})
	return res
}

func (fieldMask *TsCondition_Spec_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

func (fieldMask *TsCondition_Spec_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 4)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*TsConditionSpec_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *TsCondition_Spec_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseTsConditionSpec_FieldPath(raw)
	})
}

func (fieldMask *TsCondition_Spec_FieldMask) ProtoMessage() {}

func (fieldMask *TsCondition_Spec_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *TsCondition_Spec_FieldMask) Subtract(other *TsCondition_Spec_FieldMask) *TsCondition_Spec_FieldMask {
	result := &TsCondition_Spec_FieldMask{}
	removedSelectors := make([]bool, 4)
	otherSubMasks := map[TsConditionSpec_FieldPathSelector]gotenobject.FieldMask{
		TsConditionSpec_FieldPathSelectorQueries:           &TsCondition_Spec_Query_FieldMask{},
		TsConditionSpec_FieldPathSelectorThresholdAlerting: &TsCondition_Spec_ThresholdAlertingCfg_FieldMask{},
		TsConditionSpec_FieldPathSelectorAnomalyAlerting:   &TsCondition_Spec_AnomalyAlertingCfg_FieldMask{},
	}
	mySubMasks := map[TsConditionSpec_FieldPathSelector]gotenobject.FieldMask{
		TsConditionSpec_FieldPathSelectorQueries:           &TsCondition_Spec_Query_FieldMask{},
		TsConditionSpec_FieldPathSelectorThresholdAlerting: &TsCondition_Spec_ThresholdAlertingCfg_FieldMask{},
		TsConditionSpec_FieldPathSelectorAnomalyAlerting:   &TsCondition_Spec_AnomalyAlertingCfg_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *TsConditionSpec_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *TsConditionSpec_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*TsConditionSpec_FieldTerminalPath); ok {
					switch tp.selector {
					case TsConditionSpec_FieldPathSelectorQueries:
						mySubMasks[TsConditionSpec_FieldPathSelectorQueries] = FullTsCondition_Spec_Query_FieldMask()
					case TsConditionSpec_FieldPathSelectorThresholdAlerting:
						mySubMasks[TsConditionSpec_FieldPathSelectorThresholdAlerting] = FullTsCondition_Spec_ThresholdAlertingCfg_FieldMask()
					case TsConditionSpec_FieldPathSelectorAnomalyAlerting:
						mySubMasks[TsConditionSpec_FieldPathSelectorAnomalyAlerting] = FullTsCondition_Spec_AnomalyAlertingCfg_FieldMask()
					}
				} else if tp, ok := path.(*TsConditionSpec_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &TsConditionSpec_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *TsCondition_Spec_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*TsCondition_Spec_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *TsCondition_Spec_FieldMask) FilterInputFields() *TsCondition_Spec_FieldMask {
	result := &TsCondition_Spec_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *TsCondition_Spec_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *TsCondition_Spec_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]TsConditionSpec_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseTsConditionSpec_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask TsCondition_Spec_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *TsCondition_Spec_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *TsCondition_Spec_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask TsCondition_Spec_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *TsCondition_Spec_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *TsCondition_Spec_FieldMask) AppendPath(path TsConditionSpec_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *TsCondition_Spec_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(TsConditionSpec_FieldPath))
}

func (fieldMask *TsCondition_Spec_FieldMask) GetPaths() []TsConditionSpec_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *TsCondition_Spec_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *TsCondition_Spec_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseTsConditionSpec_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *TsCondition_Spec_FieldMask) Set(target, source *TsCondition_Spec) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *TsCondition_Spec_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*TsCondition_Spec), source.(*TsCondition_Spec))
}

func (fieldMask *TsCondition_Spec_FieldMask) Project(source *TsCondition_Spec) *TsCondition_Spec {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &TsCondition_Spec{}
	queriesMask := &TsCondition_Spec_Query_FieldMask{}
	wholeQueriesAccepted := false
	thresholdAlertingMask := &TsCondition_Spec_ThresholdAlertingCfg_FieldMask{}
	wholeThresholdAlertingAccepted := false
	anomalyAlertingMask := &TsCondition_Spec_AnomalyAlertingCfg_FieldMask{}
	wholeAnomalyAlertingAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *TsConditionSpec_FieldTerminalPath:
			switch tp.selector {
			case TsConditionSpec_FieldPathSelectorQueries:
				result.Queries = source.Queries
				wholeQueriesAccepted = true
			case TsConditionSpec_FieldPathSelectorQueryGroupBy:
				result.QueryGroupBy = source.QueryGroupBy
			case TsConditionSpec_FieldPathSelectorThresholdAlerting:
				result.ThresholdAlerting = source.ThresholdAlerting
				wholeThresholdAlertingAccepted = true
			case TsConditionSpec_FieldPathSelectorAnomalyAlerting:
				result.AnomalyAlerting = source.AnomalyAlerting
				wholeAnomalyAlertingAccepted = true
			}
		case *TsConditionSpec_FieldSubPath:
			switch tp.selector {
			case TsConditionSpec_FieldPathSelectorQueries:
				queriesMask.AppendPath(tp.subPath.(TsConditionSpecQuery_FieldPath))
			case TsConditionSpec_FieldPathSelectorThresholdAlerting:
				thresholdAlertingMask.AppendPath(tp.subPath.(TsConditionSpecThresholdAlertingCfg_FieldPath))
			case TsConditionSpec_FieldPathSelectorAnomalyAlerting:
				anomalyAlertingMask.AppendPath(tp.subPath.(TsConditionSpecAnomalyAlertingCfg_FieldPath))
			}
		}
	}
	if wholeQueriesAccepted == false && len(queriesMask.Paths) > 0 {
		for _, sourceItem := range source.GetQueries() {
			result.Queries = append(result.Queries, queriesMask.Project(sourceItem))
		}
	}
	if wholeThresholdAlertingAccepted == false && len(thresholdAlertingMask.Paths) > 0 {
		result.ThresholdAlerting = thresholdAlertingMask.Project(source.GetThresholdAlerting())
	}
	if wholeAnomalyAlertingAccepted == false && len(anomalyAlertingMask.Paths) > 0 {
		for _, sourceItem := range source.GetAnomalyAlerting() {
			result.AnomalyAlerting = append(result.AnomalyAlerting, anomalyAlertingMask.Project(sourceItem))
		}
	}
	return result
}

func (fieldMask *TsCondition_Spec_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*TsCondition_Spec))
}

func (fieldMask *TsCondition_Spec_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type TsCondition_Internal_FieldMask struct {
	Paths []TsConditionInternal_FieldPath
}

func FullTsCondition_Internal_FieldMask() *TsCondition_Internal_FieldMask {
	res := &TsCondition_Internal_FieldMask{}
	res.Paths = append(res.Paths, &TsConditionInternal_FieldTerminalPath{selector: TsConditionInternal_FieldPathSelectorCommonKeyKset})
	res.Paths = append(res.Paths, &TsConditionInternal_FieldTerminalPath{selector: TsConditionInternal_FieldPathSelectorEntrySpecGeneration})
	res.Paths = append(res.Paths, &TsConditionInternal_FieldTerminalPath{selector: TsConditionInternal_FieldPathSelectorAlertingLocation})
	return res
}

func (fieldMask *TsCondition_Internal_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

func (fieldMask *TsCondition_Internal_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*TsConditionInternal_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *TsCondition_Internal_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseTsConditionInternal_FieldPath(raw)
	})
}

func (fieldMask *TsCondition_Internal_FieldMask) ProtoMessage() {}

func (fieldMask *TsCondition_Internal_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *TsCondition_Internal_FieldMask) Subtract(other *TsCondition_Internal_FieldMask) *TsCondition_Internal_FieldMask {
	result := &TsCondition_Internal_FieldMask{}
	removedSelectors := make([]bool, 3)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *TsConditionInternal_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *TsCondition_Internal_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*TsCondition_Internal_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *TsCondition_Internal_FieldMask) FilterInputFields() *TsCondition_Internal_FieldMask {
	result := &TsCondition_Internal_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *TsCondition_Internal_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *TsCondition_Internal_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]TsConditionInternal_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseTsConditionInternal_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask TsCondition_Internal_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *TsCondition_Internal_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *TsCondition_Internal_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask TsCondition_Internal_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *TsCondition_Internal_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *TsCondition_Internal_FieldMask) AppendPath(path TsConditionInternal_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *TsCondition_Internal_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(TsConditionInternal_FieldPath))
}

func (fieldMask *TsCondition_Internal_FieldMask) GetPaths() []TsConditionInternal_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *TsCondition_Internal_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *TsCondition_Internal_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseTsConditionInternal_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *TsCondition_Internal_FieldMask) Set(target, source *TsCondition_Internal) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *TsCondition_Internal_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*TsCondition_Internal), source.(*TsCondition_Internal))
}

func (fieldMask *TsCondition_Internal_FieldMask) Project(source *TsCondition_Internal) *TsCondition_Internal {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &TsCondition_Internal{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *TsConditionInternal_FieldTerminalPath:
			switch tp.selector {
			case TsConditionInternal_FieldPathSelectorCommonKeyKset:
				result.CommonKeyKset = source.CommonKeyKset
			case TsConditionInternal_FieldPathSelectorEntrySpecGeneration:
				result.EntrySpecGeneration = source.EntrySpecGeneration
			case TsConditionInternal_FieldPathSelectorAlertingLocation:
				result.AlertingLocation = source.AlertingLocation
			}
		}
	}
	return result
}

func (fieldMask *TsCondition_Internal_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*TsCondition_Internal))
}

func (fieldMask *TsCondition_Internal_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type TsCondition_Selector_FieldMask struct {
	Paths []TsConditionSelector_FieldPath
}

func FullTsCondition_Selector_FieldMask() *TsCondition_Selector_FieldMask {
	res := &TsCondition_Selector_FieldMask{}
	res.Paths = append(res.Paths, &TsConditionSelector_FieldTerminalPath{selector: TsConditionSelector_FieldPathSelectorMetricTypes})
	res.Paths = append(res.Paths, &TsConditionSelector_FieldTerminalPath{selector: TsConditionSelector_FieldPathSelectorResourceTypes})
	res.Paths = append(res.Paths, &TsConditionSelector_FieldTerminalPath{selector: TsConditionSelector_FieldPathSelectorCommonMetricLabels})
	res.Paths = append(res.Paths, &TsConditionSelector_FieldTerminalPath{selector: TsConditionSelector_FieldPathSelectorCommonResourceLabels})
	return res
}

func (fieldMask *TsCondition_Selector_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

func (fieldMask *TsCondition_Selector_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 4)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*TsConditionSelector_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *TsCondition_Selector_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseTsConditionSelector_FieldPath(raw)
	})
}

func (fieldMask *TsCondition_Selector_FieldMask) ProtoMessage() {}

func (fieldMask *TsCondition_Selector_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *TsCondition_Selector_FieldMask) Subtract(other *TsCondition_Selector_FieldMask) *TsCondition_Selector_FieldMask {
	result := &TsCondition_Selector_FieldMask{}
	removedSelectors := make([]bool, 4)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *TsConditionSelector_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *TsCondition_Selector_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*TsCondition_Selector_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *TsCondition_Selector_FieldMask) FilterInputFields() *TsCondition_Selector_FieldMask {
	result := &TsCondition_Selector_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *TsCondition_Selector_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *TsCondition_Selector_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]TsConditionSelector_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseTsConditionSelector_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask TsCondition_Selector_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *TsCondition_Selector_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *TsCondition_Selector_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask TsCondition_Selector_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *TsCondition_Selector_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *TsCondition_Selector_FieldMask) AppendPath(path TsConditionSelector_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *TsCondition_Selector_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(TsConditionSelector_FieldPath))
}

func (fieldMask *TsCondition_Selector_FieldMask) GetPaths() []TsConditionSelector_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *TsCondition_Selector_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *TsCondition_Selector_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseTsConditionSelector_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *TsCondition_Selector_FieldMask) Set(target, source *TsCondition_Selector) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *TsCondition_Selector_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*TsCondition_Selector), source.(*TsCondition_Selector))
}

func (fieldMask *TsCondition_Selector_FieldMask) Project(source *TsCondition_Selector) *TsCondition_Selector {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &TsCondition_Selector{}
	var commonMetricLabelsMapKeys []string
	wholeCommonMetricLabelsAccepted := false
	var commonResourceLabelsMapKeys []string
	wholeCommonResourceLabelsAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *TsConditionSelector_FieldTerminalPath:
			switch tp.selector {
			case TsConditionSelector_FieldPathSelectorMetricTypes:
				result.MetricTypes = source.MetricTypes
			case TsConditionSelector_FieldPathSelectorResourceTypes:
				result.ResourceTypes = source.ResourceTypes
			case TsConditionSelector_FieldPathSelectorCommonMetricLabels:
				result.CommonMetricLabels = source.CommonMetricLabels
				wholeCommonMetricLabelsAccepted = true
			case TsConditionSelector_FieldPathSelectorCommonResourceLabels:
				result.CommonResourceLabels = source.CommonResourceLabels
				wholeCommonResourceLabelsAccepted = true
			}
		case *TsConditionSelector_FieldPathMap:
			switch tp.selector {
			case TsConditionSelector_FieldPathSelectorCommonMetricLabels:
				commonMetricLabelsMapKeys = append(commonMetricLabelsMapKeys, tp.key)
			case TsConditionSelector_FieldPathSelectorCommonResourceLabels:
				commonResourceLabelsMapKeys = append(commonResourceLabelsMapKeys, tp.key)
			}
		}
	}
	if wholeCommonMetricLabelsAccepted == false && len(commonMetricLabelsMapKeys) > 0 && source.GetCommonMetricLabels() != nil {
		copiedMap := map[string]*TsCondition_Selector_Strings{}
		sourceMap := source.GetCommonMetricLabels()
		for _, key := range commonMetricLabelsMapKeys {
			copiedMap[key] = sourceMap[key]
		}
		result.CommonMetricLabels = copiedMap
	}
	if wholeCommonResourceLabelsAccepted == false && len(commonResourceLabelsMapKeys) > 0 && source.GetCommonResourceLabels() != nil {
		copiedMap := map[string]*TsCondition_Selector_Strings{}
		sourceMap := source.GetCommonResourceLabels()
		for _, key := range commonResourceLabelsMapKeys {
			copiedMap[key] = sourceMap[key]
		}
		result.CommonResourceLabels = copiedMap
	}
	return result
}

func (fieldMask *TsCondition_Selector_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*TsCondition_Selector))
}

func (fieldMask *TsCondition_Selector_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type TsCondition_Spec_Query_FieldMask struct {
	Paths []TsConditionSpecQuery_FieldPath
}

func FullTsCondition_Spec_Query_FieldMask() *TsCondition_Spec_Query_FieldMask {
	res := &TsCondition_Spec_Query_FieldMask{}
	res.Paths = append(res.Paths, &TsConditionSpecQuery_FieldTerminalPath{selector: TsConditionSpecQuery_FieldPathSelectorName})
	res.Paths = append(res.Paths, &TsConditionSpecQuery_FieldTerminalPath{selector: TsConditionSpecQuery_FieldPathSelectorFilter})
	res.Paths = append(res.Paths, &TsConditionSpecQuery_FieldTerminalPath{selector: TsConditionSpecQuery_FieldPathSelectorAligner})
	res.Paths = append(res.Paths, &TsConditionSpecQuery_FieldTerminalPath{selector: TsConditionSpecQuery_FieldPathSelectorReducer})
	res.Paths = append(res.Paths, &TsConditionSpecQuery_FieldTerminalPath{selector: TsConditionSpecQuery_FieldPathSelectorMaxValue})
	return res
}

func (fieldMask *TsCondition_Spec_Query_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

func (fieldMask *TsCondition_Spec_Query_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 5)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*TsConditionSpecQuery_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *TsCondition_Spec_Query_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseTsConditionSpecQuery_FieldPath(raw)
	})
}

func (fieldMask *TsCondition_Spec_Query_FieldMask) ProtoMessage() {}

func (fieldMask *TsCondition_Spec_Query_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *TsCondition_Spec_Query_FieldMask) Subtract(other *TsCondition_Spec_Query_FieldMask) *TsCondition_Spec_Query_FieldMask {
	result := &TsCondition_Spec_Query_FieldMask{}
	removedSelectors := make([]bool, 5)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *TsConditionSpecQuery_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *TsCondition_Spec_Query_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*TsCondition_Spec_Query_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *TsCondition_Spec_Query_FieldMask) FilterInputFields() *TsCondition_Spec_Query_FieldMask {
	result := &TsCondition_Spec_Query_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *TsCondition_Spec_Query_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *TsCondition_Spec_Query_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]TsConditionSpecQuery_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseTsConditionSpecQuery_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask TsCondition_Spec_Query_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *TsCondition_Spec_Query_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *TsCondition_Spec_Query_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask TsCondition_Spec_Query_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *TsCondition_Spec_Query_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *TsCondition_Spec_Query_FieldMask) AppendPath(path TsConditionSpecQuery_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *TsCondition_Spec_Query_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(TsConditionSpecQuery_FieldPath))
}

func (fieldMask *TsCondition_Spec_Query_FieldMask) GetPaths() []TsConditionSpecQuery_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *TsCondition_Spec_Query_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *TsCondition_Spec_Query_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseTsConditionSpecQuery_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *TsCondition_Spec_Query_FieldMask) Set(target, source *TsCondition_Spec_Query) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *TsCondition_Spec_Query_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*TsCondition_Spec_Query), source.(*TsCondition_Spec_Query))
}

func (fieldMask *TsCondition_Spec_Query_FieldMask) Project(source *TsCondition_Spec_Query) *TsCondition_Spec_Query {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &TsCondition_Spec_Query{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *TsConditionSpecQuery_FieldTerminalPath:
			switch tp.selector {
			case TsConditionSpecQuery_FieldPathSelectorName:
				result.Name = source.Name
			case TsConditionSpecQuery_FieldPathSelectorFilter:
				result.Filter = source.Filter
			case TsConditionSpecQuery_FieldPathSelectorAligner:
				result.Aligner = source.Aligner
			case TsConditionSpecQuery_FieldPathSelectorReducer:
				result.Reducer = source.Reducer
			case TsConditionSpecQuery_FieldPathSelectorMaxValue:
				result.MaxValue = source.MaxValue
			}
		}
	}
	return result
}

func (fieldMask *TsCondition_Spec_Query_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*TsCondition_Spec_Query))
}

func (fieldMask *TsCondition_Spec_Query_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type TsCondition_Spec_ThresholdAlertingCfg_FieldMask struct {
	Paths []TsConditionSpecThresholdAlertingCfg_FieldPath
}

func FullTsCondition_Spec_ThresholdAlertingCfg_FieldMask() *TsCondition_Spec_ThresholdAlertingCfg_FieldMask {
	res := &TsCondition_Spec_ThresholdAlertingCfg_FieldMask{}
	res.Paths = append(res.Paths, &TsConditionSpecThresholdAlertingCfg_FieldTerminalPath{selector: TsConditionSpecThresholdAlertingCfg_FieldPathSelectorOperator})
	res.Paths = append(res.Paths, &TsConditionSpecThresholdAlertingCfg_FieldTerminalPath{selector: TsConditionSpecThresholdAlertingCfg_FieldPathSelectorAlignmentPeriod})
	res.Paths = append(res.Paths, &TsConditionSpecThresholdAlertingCfg_FieldTerminalPath{selector: TsConditionSpecThresholdAlertingCfg_FieldPathSelectorRaiseAfter})
	res.Paths = append(res.Paths, &TsConditionSpecThresholdAlertingCfg_FieldTerminalPath{selector: TsConditionSpecThresholdAlertingCfg_FieldPathSelectorSilenceAfter})
	res.Paths = append(res.Paths, &TsConditionSpecThresholdAlertingCfg_FieldTerminalPath{selector: TsConditionSpecThresholdAlertingCfg_FieldPathSelectorPerQueryThresholds})
	res.Paths = append(res.Paths, &TsConditionSpecThresholdAlertingCfg_FieldTerminalPath{selector: TsConditionSpecThresholdAlertingCfg_FieldPathSelectorAdaptiveThresholdsDetectionPeriod})
	return res
}

func (fieldMask *TsCondition_Spec_ThresholdAlertingCfg_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

func (fieldMask *TsCondition_Spec_ThresholdAlertingCfg_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 6)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*TsConditionSpecThresholdAlertingCfg_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *TsCondition_Spec_ThresholdAlertingCfg_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseTsConditionSpecThresholdAlertingCfg_FieldPath(raw)
	})
}

func (fieldMask *TsCondition_Spec_ThresholdAlertingCfg_FieldMask) ProtoMessage() {}

func (fieldMask *TsCondition_Spec_ThresholdAlertingCfg_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *TsCondition_Spec_ThresholdAlertingCfg_FieldMask) Subtract(other *TsCondition_Spec_ThresholdAlertingCfg_FieldMask) *TsCondition_Spec_ThresholdAlertingCfg_FieldMask {
	result := &TsCondition_Spec_ThresholdAlertingCfg_FieldMask{}
	removedSelectors := make([]bool, 6)
	otherSubMasks := map[TsConditionSpecThresholdAlertingCfg_FieldPathSelector]gotenobject.FieldMask{
		TsConditionSpecThresholdAlertingCfg_FieldPathSelectorPerQueryThresholds: &TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds_FieldMask{},
	}
	mySubMasks := map[TsConditionSpecThresholdAlertingCfg_FieldPathSelector]gotenobject.FieldMask{
		TsConditionSpecThresholdAlertingCfg_FieldPathSelectorPerQueryThresholds: &TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *TsConditionSpecThresholdAlertingCfg_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *TsConditionSpecThresholdAlertingCfg_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*TsConditionSpecThresholdAlertingCfg_FieldTerminalPath); ok {
					switch tp.selector {
					case TsConditionSpecThresholdAlertingCfg_FieldPathSelectorPerQueryThresholds:
						mySubMasks[TsConditionSpecThresholdAlertingCfg_FieldPathSelectorPerQueryThresholds] = FullTsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds_FieldMask()
					}
				} else if tp, ok := path.(*TsConditionSpecThresholdAlertingCfg_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &TsConditionSpecThresholdAlertingCfg_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *TsCondition_Spec_ThresholdAlertingCfg_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*TsCondition_Spec_ThresholdAlertingCfg_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *TsCondition_Spec_ThresholdAlertingCfg_FieldMask) FilterInputFields() *TsCondition_Spec_ThresholdAlertingCfg_FieldMask {
	result := &TsCondition_Spec_ThresholdAlertingCfg_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *TsCondition_Spec_ThresholdAlertingCfg_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *TsCondition_Spec_ThresholdAlertingCfg_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]TsConditionSpecThresholdAlertingCfg_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseTsConditionSpecThresholdAlertingCfg_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask TsCondition_Spec_ThresholdAlertingCfg_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *TsCondition_Spec_ThresholdAlertingCfg_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *TsCondition_Spec_ThresholdAlertingCfg_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask TsCondition_Spec_ThresholdAlertingCfg_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *TsCondition_Spec_ThresholdAlertingCfg_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *TsCondition_Spec_ThresholdAlertingCfg_FieldMask) AppendPath(path TsConditionSpecThresholdAlertingCfg_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *TsCondition_Spec_ThresholdAlertingCfg_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(TsConditionSpecThresholdAlertingCfg_FieldPath))
}

func (fieldMask *TsCondition_Spec_ThresholdAlertingCfg_FieldMask) GetPaths() []TsConditionSpecThresholdAlertingCfg_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *TsCondition_Spec_ThresholdAlertingCfg_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *TsCondition_Spec_ThresholdAlertingCfg_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseTsConditionSpecThresholdAlertingCfg_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *TsCondition_Spec_ThresholdAlertingCfg_FieldMask) Set(target, source *TsCondition_Spec_ThresholdAlertingCfg) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *TsCondition_Spec_ThresholdAlertingCfg_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*TsCondition_Spec_ThresholdAlertingCfg), source.(*TsCondition_Spec_ThresholdAlertingCfg))
}

func (fieldMask *TsCondition_Spec_ThresholdAlertingCfg_FieldMask) Project(source *TsCondition_Spec_ThresholdAlertingCfg) *TsCondition_Spec_ThresholdAlertingCfg {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &TsCondition_Spec_ThresholdAlertingCfg{}
	perQueryThresholdsMask := &TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds_FieldMask{}
	wholePerQueryThresholdsAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *TsConditionSpecThresholdAlertingCfg_FieldTerminalPath:
			switch tp.selector {
			case TsConditionSpecThresholdAlertingCfg_FieldPathSelectorOperator:
				result.Operator = source.Operator
			case TsConditionSpecThresholdAlertingCfg_FieldPathSelectorAlignmentPeriod:
				result.AlignmentPeriod = source.AlignmentPeriod
			case TsConditionSpecThresholdAlertingCfg_FieldPathSelectorRaiseAfter:
				result.RaiseAfter = source.RaiseAfter
			case TsConditionSpecThresholdAlertingCfg_FieldPathSelectorSilenceAfter:
				result.SilenceAfter = source.SilenceAfter
			case TsConditionSpecThresholdAlertingCfg_FieldPathSelectorPerQueryThresholds:
				result.PerQueryThresholds = source.PerQueryThresholds
				wholePerQueryThresholdsAccepted = true
			case TsConditionSpecThresholdAlertingCfg_FieldPathSelectorAdaptiveThresholdsDetectionPeriod:
				result.AdaptiveThresholdsDetectionPeriod = source.AdaptiveThresholdsDetectionPeriod
			}
		case *TsConditionSpecThresholdAlertingCfg_FieldSubPath:
			switch tp.selector {
			case TsConditionSpecThresholdAlertingCfg_FieldPathSelectorPerQueryThresholds:
				perQueryThresholdsMask.AppendPath(tp.subPath.(TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPath))
			}
		}
	}
	if wholePerQueryThresholdsAccepted == false && len(perQueryThresholdsMask.Paths) > 0 {
		for _, sourceItem := range source.GetPerQueryThresholds() {
			result.PerQueryThresholds = append(result.PerQueryThresholds, perQueryThresholdsMask.Project(sourceItem))
		}
	}
	return result
}

func (fieldMask *TsCondition_Spec_ThresholdAlertingCfg_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*TsCondition_Spec_ThresholdAlertingCfg))
}

func (fieldMask *TsCondition_Spec_ThresholdAlertingCfg_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type TsCondition_Spec_AnomalyAlertingCfg_FieldMask struct {
	Paths []TsConditionSpecAnomalyAlertingCfg_FieldPath
}

func FullTsCondition_Spec_AnomalyAlertingCfg_FieldMask() *TsCondition_Spec_AnomalyAlertingCfg_FieldMask {
	res := &TsCondition_Spec_AnomalyAlertingCfg_FieldMask{}
	res.Paths = append(res.Paths, &TsConditionSpecAnomalyAlertingCfg_FieldTerminalPath{selector: TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorAnalysisWindow})
	res.Paths = append(res.Paths, &TsConditionSpecAnomalyAlertingCfg_FieldTerminalPath{selector: TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorStepInterval})
	res.Paths = append(res.Paths, &TsConditionSpecAnomalyAlertingCfg_FieldTerminalPath{selector: TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorTrainStepInterval})
	res.Paths = append(res.Paths, &TsConditionSpecAnomalyAlertingCfg_FieldTerminalPath{selector: TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorAlignmentPeriod})
	res.Paths = append(res.Paths, &TsConditionSpecAnomalyAlertingCfg_FieldTerminalPath{selector: TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorLstmAutoencoder})
	res.Paths = append(res.Paths, &TsConditionSpecAnomalyAlertingCfg_FieldTerminalPath{selector: TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorRaiseAfter})
	res.Paths = append(res.Paths, &TsConditionSpecAnomalyAlertingCfg_FieldTerminalPath{selector: TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorSilenceAfter})
	return res
}

func (fieldMask *TsCondition_Spec_AnomalyAlertingCfg_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

func (fieldMask *TsCondition_Spec_AnomalyAlertingCfg_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 7)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*TsConditionSpecAnomalyAlertingCfg_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *TsCondition_Spec_AnomalyAlertingCfg_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseTsConditionSpecAnomalyAlertingCfg_FieldPath(raw)
	})
}

func (fieldMask *TsCondition_Spec_AnomalyAlertingCfg_FieldMask) ProtoMessage() {}

func (fieldMask *TsCondition_Spec_AnomalyAlertingCfg_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *TsCondition_Spec_AnomalyAlertingCfg_FieldMask) Subtract(other *TsCondition_Spec_AnomalyAlertingCfg_FieldMask) *TsCondition_Spec_AnomalyAlertingCfg_FieldMask {
	result := &TsCondition_Spec_AnomalyAlertingCfg_FieldMask{}
	removedSelectors := make([]bool, 7)
	otherSubMasks := map[TsConditionSpecAnomalyAlertingCfg_FieldPathSelector]gotenobject.FieldMask{
		TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorLstmAutoencoder: &TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder_FieldMask{},
	}
	mySubMasks := map[TsConditionSpecAnomalyAlertingCfg_FieldPathSelector]gotenobject.FieldMask{
		TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorLstmAutoencoder: &TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *TsConditionSpecAnomalyAlertingCfg_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *TsConditionSpecAnomalyAlertingCfg_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*TsConditionSpecAnomalyAlertingCfg_FieldTerminalPath); ok {
					switch tp.selector {
					case TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorLstmAutoencoder:
						mySubMasks[TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorLstmAutoencoder] = FullTsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder_FieldMask()
					}
				} else if tp, ok := path.(*TsConditionSpecAnomalyAlertingCfg_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &TsConditionSpecAnomalyAlertingCfg_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *TsCondition_Spec_AnomalyAlertingCfg_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*TsCondition_Spec_AnomalyAlertingCfg_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *TsCondition_Spec_AnomalyAlertingCfg_FieldMask) FilterInputFields() *TsCondition_Spec_AnomalyAlertingCfg_FieldMask {
	result := &TsCondition_Spec_AnomalyAlertingCfg_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *TsCondition_Spec_AnomalyAlertingCfg_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *TsCondition_Spec_AnomalyAlertingCfg_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]TsConditionSpecAnomalyAlertingCfg_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseTsConditionSpecAnomalyAlertingCfg_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask TsCondition_Spec_AnomalyAlertingCfg_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *TsCondition_Spec_AnomalyAlertingCfg_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *TsCondition_Spec_AnomalyAlertingCfg_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask TsCondition_Spec_AnomalyAlertingCfg_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *TsCondition_Spec_AnomalyAlertingCfg_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *TsCondition_Spec_AnomalyAlertingCfg_FieldMask) AppendPath(path TsConditionSpecAnomalyAlertingCfg_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *TsCondition_Spec_AnomalyAlertingCfg_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(TsConditionSpecAnomalyAlertingCfg_FieldPath))
}

func (fieldMask *TsCondition_Spec_AnomalyAlertingCfg_FieldMask) GetPaths() []TsConditionSpecAnomalyAlertingCfg_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *TsCondition_Spec_AnomalyAlertingCfg_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *TsCondition_Spec_AnomalyAlertingCfg_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseTsConditionSpecAnomalyAlertingCfg_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *TsCondition_Spec_AnomalyAlertingCfg_FieldMask) Set(target, source *TsCondition_Spec_AnomalyAlertingCfg) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *TsCondition_Spec_AnomalyAlertingCfg_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*TsCondition_Spec_AnomalyAlertingCfg), source.(*TsCondition_Spec_AnomalyAlertingCfg))
}

func (fieldMask *TsCondition_Spec_AnomalyAlertingCfg_FieldMask) Project(source *TsCondition_Spec_AnomalyAlertingCfg) *TsCondition_Spec_AnomalyAlertingCfg {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &TsCondition_Spec_AnomalyAlertingCfg{}
	lstmAutoencoderMask := &TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder_FieldMask{}
	wholeLstmAutoencoderAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *TsConditionSpecAnomalyAlertingCfg_FieldTerminalPath:
			switch tp.selector {
			case TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorAnalysisWindow:
				result.AnalysisWindow = source.AnalysisWindow
			case TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorStepInterval:
				result.StepInterval = source.StepInterval
			case TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorTrainStepInterval:
				result.TrainStepInterval = source.TrainStepInterval
			case TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorAlignmentPeriod:
				result.AlignmentPeriod = source.AlignmentPeriod
			case TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorLstmAutoencoder:
				if source, ok := source.Model.(*TsCondition_Spec_AnomalyAlertingCfg_LstmAutoencoder); ok {
					result.Model = &TsCondition_Spec_AnomalyAlertingCfg_LstmAutoencoder{
						LstmAutoencoder: source.LstmAutoencoder,
					}
				}
				wholeLstmAutoencoderAccepted = true
			case TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorRaiseAfter:
				result.RaiseAfter = source.RaiseAfter
			case TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorSilenceAfter:
				result.SilenceAfter = source.SilenceAfter
			}
		case *TsConditionSpecAnomalyAlertingCfg_FieldSubPath:
			switch tp.selector {
			case TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorLstmAutoencoder:
				lstmAutoencoderMask.AppendPath(tp.subPath.(TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPath))
			}
		}
	}
	if wholeLstmAutoencoderAccepted == false && len(lstmAutoencoderMask.Paths) > 0 {
		if asOneOf, ok := source.Model.(*TsCondition_Spec_AnomalyAlertingCfg_LstmAutoencoder); ok {
			result.Model = (*TsCondition_Spec_AnomalyAlertingCfg_LstmAutoencoder)(nil)
			if asOneOf != nil {
				oneOfRes := &TsCondition_Spec_AnomalyAlertingCfg_LstmAutoencoder{}
				oneOfRes.LstmAutoencoder = lstmAutoencoderMask.Project(asOneOf.LstmAutoencoder)
				result.Model = oneOfRes
			}
		}
	}
	return result
}

func (fieldMask *TsCondition_Spec_AnomalyAlertingCfg_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*TsCondition_Spec_AnomalyAlertingCfg))
}

func (fieldMask *TsCondition_Spec_AnomalyAlertingCfg_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds_FieldMask struct {
	Paths []TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPath
}

func FullTsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds_FieldMask() *TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds_FieldMask {
	res := &TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds_FieldMask{}
	res.Paths = append(res.Paths, &TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldTerminalPath{selector: TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorAutoAdaptUpper})
	res.Paths = append(res.Paths, &TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldTerminalPath{selector: TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorAutoAdaptLower})
	res.Paths = append(res.Paths, &TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldTerminalPath{selector: TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorMaxUpper})
	res.Paths = append(res.Paths, &TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldTerminalPath{selector: TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorMaxLower})
	return res
}

func (fieldMask *TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

func (fieldMask *TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 4)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseTsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPath(raw)
	})
}

func (fieldMask *TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds_FieldMask) ProtoMessage() {}

func (fieldMask *TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds_FieldMask) Subtract(other *TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds_FieldMask) *TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds_FieldMask {
	result := &TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds_FieldMask{}
	removedSelectors := make([]bool, 4)
	otherSubMasks := map[TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelector]gotenobject.FieldMask{
		TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorMaxUpper: &AlertingThreshold_FieldMask{},
		TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorMaxLower: &AlertingThreshold_FieldMask{},
	}
	mySubMasks := map[TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelector]gotenobject.FieldMask{
		TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorMaxUpper: &AlertingThreshold_FieldMask{},
		TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorMaxLower: &AlertingThreshold_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldTerminalPath); ok {
					switch tp.selector {
					case TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorMaxUpper:
						mySubMasks[TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorMaxUpper] = FullAlertingThreshold_FieldMask()
					case TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorMaxLower:
						mySubMasks[TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorMaxLower] = FullAlertingThreshold_FieldMask()
					}
				} else if tp, ok := path.(*TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds_FieldMask) FilterInputFields() *TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds_FieldMask {
	result := &TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseTsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds_FieldMask) AppendPath(path TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPath))
}

func (fieldMask *TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds_FieldMask) GetPaths() []TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseTsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds_FieldMask) Set(target, source *TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds), source.(*TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds))
}

func (fieldMask *TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds_FieldMask) Project(source *TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds) *TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds{}
	maxUpperMask := &AlertingThreshold_FieldMask{}
	wholeMaxUpperAccepted := false
	maxLowerMask := &AlertingThreshold_FieldMask{}
	wholeMaxLowerAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldTerminalPath:
			switch tp.selector {
			case TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorAutoAdaptUpper:
				result.AutoAdaptUpper = source.AutoAdaptUpper
			case TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorAutoAdaptLower:
				result.AutoAdaptLower = source.AutoAdaptLower
			case TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorMaxUpper:
				result.MaxUpper = source.MaxUpper
				wholeMaxUpperAccepted = true
			case TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorMaxLower:
				result.MaxLower = source.MaxLower
				wholeMaxLowerAccepted = true
			}
		case *TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldSubPath:
			switch tp.selector {
			case TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorMaxUpper:
				maxUpperMask.AppendPath(tp.subPath.(AlertingThreshold_FieldPath))
			case TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorMaxLower:
				maxLowerMask.AppendPath(tp.subPath.(AlertingThreshold_FieldPath))
			}
		}
	}
	if wholeMaxUpperAccepted == false && len(maxUpperMask.Paths) > 0 {
		result.MaxUpper = maxUpperMask.Project(source.GetMaxUpper())
	}
	if wholeMaxLowerAccepted == false && len(maxLowerMask.Paths) > 0 {
		result.MaxLower = maxLowerMask.Project(source.GetMaxLower())
	}
	return result
}

func (fieldMask *TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds))
}

func (fieldMask *TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder_FieldMask struct {
	Paths []TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPath
}

func FullTsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder_FieldMask() *TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder_FieldMask {
	res := &TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder_FieldMask{}
	res.Paths = append(res.Paths, &TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPath{selector: TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorHiddenSize})
	res.Paths = append(res.Paths, &TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPath{selector: TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorLearnRate})
	res.Paths = append(res.Paths, &TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPath{selector: TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorMaxTrainingEpochs})
	res.Paths = append(res.Paths, &TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPath{selector: TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorMinTrainingEpochs})
	res.Paths = append(res.Paths, &TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPath{selector: TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorAcceptableTrainingError})
	res.Paths = append(res.Paths, &TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPath{selector: TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorTrainingPeriod})
	res.Paths = append(res.Paths, &TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPath{selector: TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorCheckPeriodFraction})
	return res
}

func (fieldMask *TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

func (fieldMask *TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 7)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseTsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPath(raw)
	})
}

func (fieldMask *TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder_FieldMask) ProtoMessage() {}

func (fieldMask *TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder_FieldMask) Subtract(other *TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder_FieldMask) *TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder_FieldMask {
	result := &TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder_FieldMask{}
	removedSelectors := make([]bool, 7)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder_FieldMask) FilterInputFields() *TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder_FieldMask {
	result := &TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseTsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder_FieldMask) AppendPath(path TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPath))
}

func (fieldMask *TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder_FieldMask) GetPaths() []TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseTsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder_FieldMask) Set(target, source *TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder), source.(*TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder))
}

func (fieldMask *TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder_FieldMask) Project(source *TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder) *TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPath:
			switch tp.selector {
			case TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorHiddenSize:
				result.HiddenSize = source.HiddenSize
			case TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorLearnRate:
				result.LearnRate = source.LearnRate
			case TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorMaxTrainingEpochs:
				result.MaxTrainingEpochs = source.MaxTrainingEpochs
			case TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorMinTrainingEpochs:
				result.MinTrainingEpochs = source.MinTrainingEpochs
			case TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorAcceptableTrainingError:
				result.AcceptableTrainingError = source.AcceptableTrainingError
			case TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorTrainingPeriod:
				result.TrainingPeriod = source.TrainingPeriod
			case TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorCheckPeriodFraction:
				result.CheckPeriodFraction = source.CheckPeriodFraction
			}
		}
	}
	return result
}

func (fieldMask *TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder))
}

func (fieldMask *TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type TsCondition_Selector_Strings_FieldMask struct {
	Paths []TsConditionSelectorStrings_FieldPath
}

func FullTsCondition_Selector_Strings_FieldMask() *TsCondition_Selector_Strings_FieldMask {
	res := &TsCondition_Selector_Strings_FieldMask{}
	res.Paths = append(res.Paths, &TsConditionSelectorStrings_FieldTerminalPath{selector: TsConditionSelectorStrings_FieldPathSelectorValues})
	return res
}

func (fieldMask *TsCondition_Selector_Strings_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

func (fieldMask *TsCondition_Selector_Strings_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 1)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*TsConditionSelectorStrings_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *TsCondition_Selector_Strings_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseTsConditionSelectorStrings_FieldPath(raw)
	})
}

func (fieldMask *TsCondition_Selector_Strings_FieldMask) ProtoMessage() {}

func (fieldMask *TsCondition_Selector_Strings_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *TsCondition_Selector_Strings_FieldMask) Subtract(other *TsCondition_Selector_Strings_FieldMask) *TsCondition_Selector_Strings_FieldMask {
	result := &TsCondition_Selector_Strings_FieldMask{}
	removedSelectors := make([]bool, 1)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *TsConditionSelectorStrings_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *TsCondition_Selector_Strings_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*TsCondition_Selector_Strings_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *TsCondition_Selector_Strings_FieldMask) FilterInputFields() *TsCondition_Selector_Strings_FieldMask {
	result := &TsCondition_Selector_Strings_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *TsCondition_Selector_Strings_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *TsCondition_Selector_Strings_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]TsConditionSelectorStrings_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseTsConditionSelectorStrings_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask TsCondition_Selector_Strings_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *TsCondition_Selector_Strings_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *TsCondition_Selector_Strings_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask TsCondition_Selector_Strings_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *TsCondition_Selector_Strings_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *TsCondition_Selector_Strings_FieldMask) AppendPath(path TsConditionSelectorStrings_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *TsCondition_Selector_Strings_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(TsConditionSelectorStrings_FieldPath))
}

func (fieldMask *TsCondition_Selector_Strings_FieldMask) GetPaths() []TsConditionSelectorStrings_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *TsCondition_Selector_Strings_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *TsCondition_Selector_Strings_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseTsConditionSelectorStrings_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *TsCondition_Selector_Strings_FieldMask) Set(target, source *TsCondition_Selector_Strings) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *TsCondition_Selector_Strings_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*TsCondition_Selector_Strings), source.(*TsCondition_Selector_Strings))
}

func (fieldMask *TsCondition_Selector_Strings_FieldMask) Project(source *TsCondition_Selector_Strings) *TsCondition_Selector_Strings {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &TsCondition_Selector_Strings{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *TsConditionSelectorStrings_FieldTerminalPath:
			switch tp.selector {
			case TsConditionSelectorStrings_FieldPathSelectorValues:
				result.Values = source.Values
			}
		}
	}
	return result
}

func (fieldMask *TsCondition_Selector_Strings_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*TsCondition_Selector_Strings))
}

func (fieldMask *TsCondition_Selector_Strings_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type AlertingThreshold_FieldMask struct {
	Paths []AlertingThreshold_FieldPath
}

func FullAlertingThreshold_FieldMask() *AlertingThreshold_FieldMask {
	res := &AlertingThreshold_FieldMask{}
	res.Paths = append(res.Paths, &AlertingThreshold_FieldTerminalPath{selector: AlertingThreshold_FieldPathSelectorValue})
	res.Paths = append(res.Paths, &AlertingThreshold_FieldTerminalPath{selector: AlertingThreshold_FieldPathSelectorIsInclusive})
	return res
}

func (fieldMask *AlertingThreshold_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

func (fieldMask *AlertingThreshold_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*AlertingThreshold_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *AlertingThreshold_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseAlertingThreshold_FieldPath(raw)
	})
}

func (fieldMask *AlertingThreshold_FieldMask) ProtoMessage() {}

func (fieldMask *AlertingThreshold_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *AlertingThreshold_FieldMask) Subtract(other *AlertingThreshold_FieldMask) *AlertingThreshold_FieldMask {
	result := &AlertingThreshold_FieldMask{}
	removedSelectors := make([]bool, 2)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *AlertingThreshold_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *AlertingThreshold_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*AlertingThreshold_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *AlertingThreshold_FieldMask) FilterInputFields() *AlertingThreshold_FieldMask {
	result := &AlertingThreshold_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *AlertingThreshold_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *AlertingThreshold_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]AlertingThreshold_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseAlertingThreshold_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask AlertingThreshold_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *AlertingThreshold_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *AlertingThreshold_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask AlertingThreshold_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *AlertingThreshold_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *AlertingThreshold_FieldMask) AppendPath(path AlertingThreshold_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *AlertingThreshold_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(AlertingThreshold_FieldPath))
}

func (fieldMask *AlertingThreshold_FieldMask) GetPaths() []AlertingThreshold_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *AlertingThreshold_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *AlertingThreshold_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseAlertingThreshold_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *AlertingThreshold_FieldMask) Set(target, source *AlertingThreshold) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *AlertingThreshold_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*AlertingThreshold), source.(*AlertingThreshold))
}

func (fieldMask *AlertingThreshold_FieldMask) Project(source *AlertingThreshold) *AlertingThreshold {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &AlertingThreshold{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *AlertingThreshold_FieldTerminalPath:
			switch tp.selector {
			case AlertingThreshold_FieldPathSelectorValue:
				result.Value = source.Value
			case AlertingThreshold_FieldPathSelectorIsInclusive:
				result.IsInclusive = source.IsInclusive
			}
		}
	}
	return result
}

func (fieldMask *AlertingThreshold_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*AlertingThreshold))
}

func (fieldMask *AlertingThreshold_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}
