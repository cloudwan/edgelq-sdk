// Code generated by protoc-gen-goten-object
// File: edgelq/alerting/proto/v1/ts_condition.proto
// DO NOT EDIT!!!

package ts_condition

import (
	"encoding/json"
	"strings"

	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	googlefieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	rcommon "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/common"
	document "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/document"
	policy "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/policy"
	ts_condition_template "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/ts_condition_template"
	meta "github.com/cloudwan/goten-sdk/types/meta"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = strings.Builder{}

	_ = codes.NotFound
	_ = status.Status{}
	_ = new(proto.Message)
	_ = new(preflect.Message)
	_ = googlefieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldMask)
)

// make sure we're using proto imports
var (
	_ = &document.Document{}
	_ = &policy.Policy{}
	_ = &rcommon.LogCndSpec{}
	_ = &ts_condition_template.TsConditionTemplate{}
	_ = &fieldmaskpb.FieldMask{}
	_ = &meta.Meta{}
)

type TsCondition_FieldMask struct {
	Paths []TsCondition_FieldPath
}

func FullTsCondition_FieldMask() *TsCondition_FieldMask {
	res := &TsCondition_FieldMask{}
	res.Paths = append(res.Paths, &TsCondition_FieldTerminalPath{selector: TsCondition_FieldPathSelectorName})
	res.Paths = append(res.Paths, &TsCondition_FieldTerminalPath{selector: TsCondition_FieldPathSelectorMetadata})
	res.Paths = append(res.Paths, &TsCondition_FieldTerminalPath{selector: TsCondition_FieldPathSelectorDisplayName})
	res.Paths = append(res.Paths, &TsCondition_FieldTerminalPath{selector: TsCondition_FieldPathSelectorDescription})
	res.Paths = append(res.Paths, &TsCondition_FieldTerminalPath{selector: TsCondition_FieldPathSelectorSupportingDocs})
	res.Paths = append(res.Paths, &TsCondition_FieldTerminalPath{selector: TsCondition_FieldPathSelectorSpec})
	res.Paths = append(res.Paths, &TsCondition_FieldTerminalPath{selector: TsCondition_FieldPathSelectorInternal})
	res.Paths = append(res.Paths, &TsCondition_FieldTerminalPath{selector: TsCondition_FieldPathSelectorFilterSelector})
	res.Paths = append(res.Paths, &TsCondition_FieldTerminalPath{selector: TsCondition_FieldPathSelectorTemplateSource})
	return res
}

func (fieldMask *TsCondition_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

func (fieldMask *TsCondition_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 9)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*TsCondition_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *TsCondition_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseTsCondition_FieldPath(raw)
	})
}

func (fieldMask *TsCondition_FieldMask) ProtoMessage() {}

func (fieldMask *TsCondition_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *TsCondition_FieldMask) Subtract(other *TsCondition_FieldMask) *TsCondition_FieldMask {
	result := &TsCondition_FieldMask{}
	removedSelectors := make([]bool, 9)
	otherSubMasks := map[TsCondition_FieldPathSelector]gotenobject.FieldMask{
		TsCondition_FieldPathSelectorMetadata:       &meta.Meta_FieldMask{},
		TsCondition_FieldPathSelectorSpec:           &rcommon.TsCndSpec_FieldMask{},
		TsCondition_FieldPathSelectorInternal:       &TsCondition_Internal_FieldMask{},
		TsCondition_FieldPathSelectorFilterSelector: &TsCondition_Selector_FieldMask{},
		TsCondition_FieldPathSelectorTemplateSource: &TsCondition_TemplateSource_FieldMask{},
	}
	mySubMasks := map[TsCondition_FieldPathSelector]gotenobject.FieldMask{
		TsCondition_FieldPathSelectorMetadata:       &meta.Meta_FieldMask{},
		TsCondition_FieldPathSelectorSpec:           &rcommon.TsCndSpec_FieldMask{},
		TsCondition_FieldPathSelectorInternal:       &TsCondition_Internal_FieldMask{},
		TsCondition_FieldPathSelectorFilterSelector: &TsCondition_Selector_FieldMask{},
		TsCondition_FieldPathSelectorTemplateSource: &TsCondition_TemplateSource_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *TsCondition_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *TsCondition_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*TsCondition_FieldTerminalPath); ok {
					switch tp.selector {
					case TsCondition_FieldPathSelectorMetadata:
						mySubMasks[TsCondition_FieldPathSelectorMetadata] = meta.FullMeta_FieldMask()
					case TsCondition_FieldPathSelectorSpec:
						mySubMasks[TsCondition_FieldPathSelectorSpec] = rcommon.FullTsCndSpec_FieldMask()
					case TsCondition_FieldPathSelectorInternal:
						mySubMasks[TsCondition_FieldPathSelectorInternal] = FullTsCondition_Internal_FieldMask()
					case TsCondition_FieldPathSelectorFilterSelector:
						mySubMasks[TsCondition_FieldPathSelectorFilterSelector] = FullTsCondition_Selector_FieldMask()
					case TsCondition_FieldPathSelectorTemplateSource:
						mySubMasks[TsCondition_FieldPathSelectorTemplateSource] = FullTsCondition_TemplateSource_FieldMask()
					}
				} else if tp, ok := path.(*TsCondition_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &TsCondition_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *TsCondition_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*TsCondition_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *TsCondition_FieldMask) FilterInputFields() *TsCondition_FieldMask {
	result := &TsCondition_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case TsCondition_FieldPathSelectorInternal:
		case TsCondition_FieldPathSelectorFilterSelector:
		case TsCondition_FieldPathSelectorMetadata:
			if _, ok := path.(*TsCondition_FieldTerminalPath); ok {
				for _, subpath := range meta.FullMeta_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &TsCondition_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*TsCondition_FieldSubPath); ok {
				selectedMask := &meta.Meta_FieldMask{
					Paths: []meta.Meta_FieldPath{sub.subPath.(meta.Meta_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &TsCondition_FieldSubPath{selector: TsCondition_FieldPathSelectorMetadata, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *TsCondition_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *TsCondition_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]TsCondition_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseTsCondition_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask TsCondition_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *TsCondition_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *TsCondition_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask TsCondition_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *TsCondition_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *TsCondition_FieldMask) AppendPath(path TsCondition_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *TsCondition_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(TsCondition_FieldPath))
}

func (fieldMask *TsCondition_FieldMask) GetPaths() []TsCondition_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *TsCondition_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *TsCondition_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseTsCondition_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *TsCondition_FieldMask) Set(target, source *TsCondition) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *TsCondition_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*TsCondition), source.(*TsCondition))
}

func (fieldMask *TsCondition_FieldMask) Project(source *TsCondition) *TsCondition {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &TsCondition{}
	metadataMask := &meta.Meta_FieldMask{}
	wholeMetadataAccepted := false
	specMask := &rcommon.TsCndSpec_FieldMask{}
	wholeSpecAccepted := false
	internalMask := &TsCondition_Internal_FieldMask{}
	wholeInternalAccepted := false
	filterSelectorMask := &TsCondition_Selector_FieldMask{}
	wholeFilterSelectorAccepted := false
	templateSourceMask := &TsCondition_TemplateSource_FieldMask{}
	wholeTemplateSourceAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *TsCondition_FieldTerminalPath:
			switch tp.selector {
			case TsCondition_FieldPathSelectorName:
				result.Name = source.Name
			case TsCondition_FieldPathSelectorMetadata:
				result.Metadata = source.Metadata
				wholeMetadataAccepted = true
			case TsCondition_FieldPathSelectorDisplayName:
				result.DisplayName = source.DisplayName
			case TsCondition_FieldPathSelectorDescription:
				result.Description = source.Description
			case TsCondition_FieldPathSelectorSupportingDocs:
				result.SupportingDocs = source.SupportingDocs
			case TsCondition_FieldPathSelectorSpec:
				result.Spec = source.Spec
				wholeSpecAccepted = true
			case TsCondition_FieldPathSelectorInternal:
				result.Internal = source.Internal
				wholeInternalAccepted = true
			case TsCondition_FieldPathSelectorFilterSelector:
				result.FilterSelector = source.FilterSelector
				wholeFilterSelectorAccepted = true
			case TsCondition_FieldPathSelectorTemplateSource:
				result.TemplateSource = source.TemplateSource
				wholeTemplateSourceAccepted = true
			}
		case *TsCondition_FieldSubPath:
			switch tp.selector {
			case TsCondition_FieldPathSelectorMetadata:
				metadataMask.AppendPath(tp.subPath.(meta.Meta_FieldPath))
			case TsCondition_FieldPathSelectorSpec:
				specMask.AppendPath(tp.subPath.(rcommon.TsCndSpec_FieldPath))
			case TsCondition_FieldPathSelectorInternal:
				internalMask.AppendPath(tp.subPath.(TsConditionInternal_FieldPath))
			case TsCondition_FieldPathSelectorFilterSelector:
				filterSelectorMask.AppendPath(tp.subPath.(TsConditionSelector_FieldPath))
			case TsCondition_FieldPathSelectorTemplateSource:
				templateSourceMask.AppendPath(tp.subPath.(TsConditionTemplateSource_FieldPath))
			}
		}
	}
	if wholeMetadataAccepted == false && len(metadataMask.Paths) > 0 {
		result.Metadata = metadataMask.Project(source.GetMetadata())
	}
	if wholeSpecAccepted == false && len(specMask.Paths) > 0 {
		result.Spec = specMask.Project(source.GetSpec())
	}
	if wholeInternalAccepted == false && len(internalMask.Paths) > 0 {
		result.Internal = internalMask.Project(source.GetInternal())
	}
	if wholeFilterSelectorAccepted == false && len(filterSelectorMask.Paths) > 0 {
		result.FilterSelector = filterSelectorMask.Project(source.GetFilterSelector())
	}
	if wholeTemplateSourceAccepted == false && len(templateSourceMask.Paths) > 0 {
		result.TemplateSource = templateSourceMask.Project(source.GetTemplateSource())
	}
	return result
}

func (fieldMask *TsCondition_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*TsCondition))
}

func (fieldMask *TsCondition_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type TsCondition_Internal_FieldMask struct {
	Paths []TsConditionInternal_FieldPath
}

func FullTsCondition_Internal_FieldMask() *TsCondition_Internal_FieldMask {
	res := &TsCondition_Internal_FieldMask{}
	res.Paths = append(res.Paths, &TsConditionInternal_FieldTerminalPath{selector: TsConditionInternal_FieldPathSelectorCommonKeyKset})
	res.Paths = append(res.Paths, &TsConditionInternal_FieldTerminalPath{selector: TsConditionInternal_FieldPathSelectorEntrySpecGeneration})
	res.Paths = append(res.Paths, &TsConditionInternal_FieldTerminalPath{selector: TsConditionInternal_FieldPathSelectorAlertingLocation})
	return res
}

func (fieldMask *TsCondition_Internal_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

func (fieldMask *TsCondition_Internal_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*TsConditionInternal_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *TsCondition_Internal_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseTsConditionInternal_FieldPath(raw)
	})
}

func (fieldMask *TsCondition_Internal_FieldMask) ProtoMessage() {}

func (fieldMask *TsCondition_Internal_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *TsCondition_Internal_FieldMask) Subtract(other *TsCondition_Internal_FieldMask) *TsCondition_Internal_FieldMask {
	result := &TsCondition_Internal_FieldMask{}
	removedSelectors := make([]bool, 3)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *TsConditionInternal_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *TsCondition_Internal_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*TsCondition_Internal_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *TsCondition_Internal_FieldMask) FilterInputFields() *TsCondition_Internal_FieldMask {
	result := &TsCondition_Internal_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *TsCondition_Internal_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *TsCondition_Internal_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]TsConditionInternal_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseTsConditionInternal_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask TsCondition_Internal_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *TsCondition_Internal_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *TsCondition_Internal_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask TsCondition_Internal_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *TsCondition_Internal_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *TsCondition_Internal_FieldMask) AppendPath(path TsConditionInternal_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *TsCondition_Internal_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(TsConditionInternal_FieldPath))
}

func (fieldMask *TsCondition_Internal_FieldMask) GetPaths() []TsConditionInternal_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *TsCondition_Internal_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *TsCondition_Internal_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseTsConditionInternal_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *TsCondition_Internal_FieldMask) Set(target, source *TsCondition_Internal) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *TsCondition_Internal_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*TsCondition_Internal), source.(*TsCondition_Internal))
}

func (fieldMask *TsCondition_Internal_FieldMask) Project(source *TsCondition_Internal) *TsCondition_Internal {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &TsCondition_Internal{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *TsConditionInternal_FieldTerminalPath:
			switch tp.selector {
			case TsConditionInternal_FieldPathSelectorCommonKeyKset:
				result.CommonKeyKset = source.CommonKeyKset
			case TsConditionInternal_FieldPathSelectorEntrySpecGeneration:
				result.EntrySpecGeneration = source.EntrySpecGeneration
			case TsConditionInternal_FieldPathSelectorAlertingLocation:
				result.AlertingLocation = source.AlertingLocation
			}
		}
	}
	return result
}

func (fieldMask *TsCondition_Internal_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*TsCondition_Internal))
}

func (fieldMask *TsCondition_Internal_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type TsCondition_Selector_FieldMask struct {
	Paths []TsConditionSelector_FieldPath
}

func FullTsCondition_Selector_FieldMask() *TsCondition_Selector_FieldMask {
	res := &TsCondition_Selector_FieldMask{}
	res.Paths = append(res.Paths, &TsConditionSelector_FieldTerminalPath{selector: TsConditionSelector_FieldPathSelectorMetricTypes})
	res.Paths = append(res.Paths, &TsConditionSelector_FieldTerminalPath{selector: TsConditionSelector_FieldPathSelectorResourceTypes})
	res.Paths = append(res.Paths, &TsConditionSelector_FieldTerminalPath{selector: TsConditionSelector_FieldPathSelectorCommonMetricLabels})
	res.Paths = append(res.Paths, &TsConditionSelector_FieldTerminalPath{selector: TsConditionSelector_FieldPathSelectorCommonResourceLabels})
	return res
}

func (fieldMask *TsCondition_Selector_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

func (fieldMask *TsCondition_Selector_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 4)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*TsConditionSelector_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *TsCondition_Selector_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseTsConditionSelector_FieldPath(raw)
	})
}

func (fieldMask *TsCondition_Selector_FieldMask) ProtoMessage() {}

func (fieldMask *TsCondition_Selector_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *TsCondition_Selector_FieldMask) Subtract(other *TsCondition_Selector_FieldMask) *TsCondition_Selector_FieldMask {
	result := &TsCondition_Selector_FieldMask{}
	removedSelectors := make([]bool, 4)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *TsConditionSelector_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *TsCondition_Selector_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*TsCondition_Selector_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *TsCondition_Selector_FieldMask) FilterInputFields() *TsCondition_Selector_FieldMask {
	result := &TsCondition_Selector_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *TsCondition_Selector_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *TsCondition_Selector_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]TsConditionSelector_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseTsConditionSelector_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask TsCondition_Selector_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *TsCondition_Selector_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *TsCondition_Selector_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask TsCondition_Selector_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *TsCondition_Selector_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *TsCondition_Selector_FieldMask) AppendPath(path TsConditionSelector_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *TsCondition_Selector_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(TsConditionSelector_FieldPath))
}

func (fieldMask *TsCondition_Selector_FieldMask) GetPaths() []TsConditionSelector_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *TsCondition_Selector_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *TsCondition_Selector_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseTsConditionSelector_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *TsCondition_Selector_FieldMask) Set(target, source *TsCondition_Selector) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *TsCondition_Selector_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*TsCondition_Selector), source.(*TsCondition_Selector))
}

func (fieldMask *TsCondition_Selector_FieldMask) Project(source *TsCondition_Selector) *TsCondition_Selector {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &TsCondition_Selector{}
	var commonMetricLabelsMapKeys []string
	wholeCommonMetricLabelsAccepted := false
	var commonResourceLabelsMapKeys []string
	wholeCommonResourceLabelsAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *TsConditionSelector_FieldTerminalPath:
			switch tp.selector {
			case TsConditionSelector_FieldPathSelectorMetricTypes:
				result.MetricTypes = source.MetricTypes
			case TsConditionSelector_FieldPathSelectorResourceTypes:
				result.ResourceTypes = source.ResourceTypes
			case TsConditionSelector_FieldPathSelectorCommonMetricLabels:
				result.CommonMetricLabels = source.CommonMetricLabels
				wholeCommonMetricLabelsAccepted = true
			case TsConditionSelector_FieldPathSelectorCommonResourceLabels:
				result.CommonResourceLabels = source.CommonResourceLabels
				wholeCommonResourceLabelsAccepted = true
			}
		case *TsConditionSelector_FieldPathMap:
			switch tp.selector {
			case TsConditionSelector_FieldPathSelectorCommonMetricLabels:
				commonMetricLabelsMapKeys = append(commonMetricLabelsMapKeys, tp.key)
			case TsConditionSelector_FieldPathSelectorCommonResourceLabels:
				commonResourceLabelsMapKeys = append(commonResourceLabelsMapKeys, tp.key)
			}
		}
	}
	if wholeCommonMetricLabelsAccepted == false && len(commonMetricLabelsMapKeys) > 0 && source.GetCommonMetricLabels() != nil {
		copiedMap := map[string]*TsCondition_Selector_Strings{}
		sourceMap := source.GetCommonMetricLabels()
		for _, key := range commonMetricLabelsMapKeys {
			copiedMap[key] = sourceMap[key]
		}
		result.CommonMetricLabels = copiedMap
	}
	if wholeCommonResourceLabelsAccepted == false && len(commonResourceLabelsMapKeys) > 0 && source.GetCommonResourceLabels() != nil {
		copiedMap := map[string]*TsCondition_Selector_Strings{}
		sourceMap := source.GetCommonResourceLabels()
		for _, key := range commonResourceLabelsMapKeys {
			copiedMap[key] = sourceMap[key]
		}
		result.CommonResourceLabels = copiedMap
	}
	return result
}

func (fieldMask *TsCondition_Selector_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*TsCondition_Selector))
}

func (fieldMask *TsCondition_Selector_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type TsCondition_TemplateSource_FieldMask struct {
	Paths []TsConditionTemplateSource_FieldPath
}

func FullTsCondition_TemplateSource_FieldMask() *TsCondition_TemplateSource_FieldMask {
	res := &TsCondition_TemplateSource_FieldMask{}
	res.Paths = append(res.Paths, &TsConditionTemplateSource_FieldTerminalPath{selector: TsConditionTemplateSource_FieldPathSelectorTemplate})
	res.Paths = append(res.Paths, &TsConditionTemplateSource_FieldTerminalPath{selector: TsConditionTemplateSource_FieldPathSelectorUpdatedFields})
	return res
}

func (fieldMask *TsCondition_TemplateSource_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

func (fieldMask *TsCondition_TemplateSource_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*TsConditionTemplateSource_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *TsCondition_TemplateSource_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseTsConditionTemplateSource_FieldPath(raw)
	})
}

func (fieldMask *TsCondition_TemplateSource_FieldMask) ProtoMessage() {}

func (fieldMask *TsCondition_TemplateSource_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *TsCondition_TemplateSource_FieldMask) Subtract(other *TsCondition_TemplateSource_FieldMask) *TsCondition_TemplateSource_FieldMask {
	result := &TsCondition_TemplateSource_FieldMask{}
	removedSelectors := make([]bool, 2)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *TsConditionTemplateSource_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *TsCondition_TemplateSource_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*TsCondition_TemplateSource_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *TsCondition_TemplateSource_FieldMask) FilterInputFields() *TsCondition_TemplateSource_FieldMask {
	result := &TsCondition_TemplateSource_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *TsCondition_TemplateSource_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *TsCondition_TemplateSource_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]TsConditionTemplateSource_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseTsConditionTemplateSource_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask TsCondition_TemplateSource_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *TsCondition_TemplateSource_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *TsCondition_TemplateSource_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask TsCondition_TemplateSource_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *TsCondition_TemplateSource_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *TsCondition_TemplateSource_FieldMask) AppendPath(path TsConditionTemplateSource_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *TsCondition_TemplateSource_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(TsConditionTemplateSource_FieldPath))
}

func (fieldMask *TsCondition_TemplateSource_FieldMask) GetPaths() []TsConditionTemplateSource_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *TsCondition_TemplateSource_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *TsCondition_TemplateSource_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseTsConditionTemplateSource_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *TsCondition_TemplateSource_FieldMask) Set(target, source *TsCondition_TemplateSource) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *TsCondition_TemplateSource_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*TsCondition_TemplateSource), source.(*TsCondition_TemplateSource))
}

func (fieldMask *TsCondition_TemplateSource_FieldMask) Project(source *TsCondition_TemplateSource) *TsCondition_TemplateSource {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &TsCondition_TemplateSource{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *TsConditionTemplateSource_FieldTerminalPath:
			switch tp.selector {
			case TsConditionTemplateSource_FieldPathSelectorTemplate:
				result.Template = source.Template
			case TsConditionTemplateSource_FieldPathSelectorUpdatedFields:
				result.UpdatedFields = source.UpdatedFields
			}
		}
	}
	return result
}

func (fieldMask *TsCondition_TemplateSource_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*TsCondition_TemplateSource))
}

func (fieldMask *TsCondition_TemplateSource_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type TsCondition_Selector_Strings_FieldMask struct {
	Paths []TsConditionSelectorStrings_FieldPath
}

func FullTsCondition_Selector_Strings_FieldMask() *TsCondition_Selector_Strings_FieldMask {
	res := &TsCondition_Selector_Strings_FieldMask{}
	res.Paths = append(res.Paths, &TsConditionSelectorStrings_FieldTerminalPath{selector: TsConditionSelectorStrings_FieldPathSelectorValues})
	return res
}

func (fieldMask *TsCondition_Selector_Strings_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

func (fieldMask *TsCondition_Selector_Strings_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 1)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*TsConditionSelectorStrings_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *TsCondition_Selector_Strings_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseTsConditionSelectorStrings_FieldPath(raw)
	})
}

func (fieldMask *TsCondition_Selector_Strings_FieldMask) ProtoMessage() {}

func (fieldMask *TsCondition_Selector_Strings_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *TsCondition_Selector_Strings_FieldMask) Subtract(other *TsCondition_Selector_Strings_FieldMask) *TsCondition_Selector_Strings_FieldMask {
	result := &TsCondition_Selector_Strings_FieldMask{}
	removedSelectors := make([]bool, 1)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *TsConditionSelectorStrings_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *TsCondition_Selector_Strings_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*TsCondition_Selector_Strings_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *TsCondition_Selector_Strings_FieldMask) FilterInputFields() *TsCondition_Selector_Strings_FieldMask {
	result := &TsCondition_Selector_Strings_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *TsCondition_Selector_Strings_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *TsCondition_Selector_Strings_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]TsConditionSelectorStrings_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseTsConditionSelectorStrings_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask TsCondition_Selector_Strings_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *TsCondition_Selector_Strings_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *TsCondition_Selector_Strings_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask TsCondition_Selector_Strings_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *TsCondition_Selector_Strings_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *TsCondition_Selector_Strings_FieldMask) AppendPath(path TsConditionSelectorStrings_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *TsCondition_Selector_Strings_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(TsConditionSelectorStrings_FieldPath))
}

func (fieldMask *TsCondition_Selector_Strings_FieldMask) GetPaths() []TsConditionSelectorStrings_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *TsCondition_Selector_Strings_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *TsCondition_Selector_Strings_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseTsConditionSelectorStrings_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *TsCondition_Selector_Strings_FieldMask) Set(target, source *TsCondition_Selector_Strings) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *TsCondition_Selector_Strings_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*TsCondition_Selector_Strings), source.(*TsCondition_Selector_Strings))
}

func (fieldMask *TsCondition_Selector_Strings_FieldMask) Project(source *TsCondition_Selector_Strings) *TsCondition_Selector_Strings {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &TsCondition_Selector_Strings{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *TsConditionSelectorStrings_FieldTerminalPath:
			switch tp.selector {
			case TsConditionSelectorStrings_FieldPathSelectorValues:
				result.Values = source.Values
			}
		}
	}
	return result
}

func (fieldMask *TsCondition_Selector_Strings_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*TsCondition_Selector_Strings))
}

func (fieldMask *TsCondition_Selector_Strings_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}
