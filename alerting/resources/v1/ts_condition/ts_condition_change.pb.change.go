// Code generated by protoc-gen-goten-resource
// Resource change: TsConditionChange
// DO NOT EDIT!!!

package ts_condition

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	policy "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/policy"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
)

// ensure the imports are used
var (
	_ = new(gotenresource.ListQuery)
)

// make sure we're using proto imports
var (
	_ = &policy.Policy{}
	_ = &fieldmaskpb.FieldMask{}
)

func (c *TsConditionChange) IsAdd() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*TsConditionChange_Added_)
	return ok
}

func (c *TsConditionChange) IsModify() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*TsConditionChange_Modified_)
	return ok
}

func (c *TsConditionChange) IsCurrent() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*TsConditionChange_Current_)
	return ok
}

func (c *TsConditionChange) IsDelete() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*TsConditionChange_Removed_)
	return ok
}

func (c *TsConditionChange) GetCurrentViewIndex() int32 {
	switch cType := c.ChangeType.(type) {
	case *TsConditionChange_Added_:
		return cType.Added.ViewIndex
	case *TsConditionChange_Modified_:
		return cType.Modified.ViewIndex
	}
	return 0
}

func (c *TsConditionChange) GetPreviousViewIndex() int32 {
	switch cType := c.ChangeType.(type) {
	case *TsConditionChange_Removed_:
		return cType.Removed.ViewIndex
	case *TsConditionChange_Modified_:
		return cType.Modified.PreviousViewIndex
	}
	return 0
}

func (c *TsConditionChange) GetTsCondition() *TsCondition {
	if c == nil {
		return nil
	}
	switch cType := c.ChangeType.(type) {
	case *TsConditionChange_Added_:
		return cType.Added.TsCondition
	case *TsConditionChange_Modified_:
		return cType.Modified.TsCondition
	case *TsConditionChange_Current_:
		return cType.Current.TsCondition
	case *TsConditionChange_Removed_:
		return nil
	}
	return nil
}

func (c *TsConditionChange) GetRawResource() gotenresource.Resource {
	return c.GetTsCondition()
}

func (c *TsConditionChange) GetTsConditionName() *Name {
	if c == nil {
		return nil
	}
	switch cType := c.ChangeType.(type) {
	case *TsConditionChange_Added_:
		return cType.Added.TsCondition.GetName()
	case *TsConditionChange_Modified_:
		return cType.Modified.Name
	case *TsConditionChange_Current_:
		return cType.Current.TsCondition.GetName()
	case *TsConditionChange_Removed_:
		return cType.Removed.Name
	}
	return nil
}

func (c *TsConditionChange) GetRawName() gotenresource.Name {
	return c.GetTsConditionName()
}

func (c *TsConditionChange) SetAddedRaw(snapshot gotenresource.Resource, idx int) {
	c.ChangeType = &TsConditionChange_Added_{
		Added: &TsConditionChange_Added{
			TsCondition: snapshot.(*TsCondition),
			ViewIndex:   int32(idx),
		},
	}
}

func (c *TsConditionChange) SetModifiedRaw(name gotenresource.Name, snapshot gotenresource.Resource, prevIdx int, newIdx int) {
	c.ChangeType = &TsConditionChange_Modified_{
		Modified: &TsConditionChange_Modified{
			Name:              name.(*Name),
			TsCondition:       snapshot.(*TsCondition),
			PreviousViewIndex: int32(prevIdx),
			ViewIndex:         int32(newIdx),
		},
	}
}

func (c *TsConditionChange) SetCurrentRaw(snapshot gotenresource.Resource) {
	c.ChangeType = &TsConditionChange_Current_{
		Current: &TsConditionChange_Current{
			TsCondition: snapshot.(*TsCondition),
		},
	}
}

func (c *TsConditionChange) SetDeletedRaw(name gotenresource.Name, idx int) {
	c.ChangeType = &TsConditionChange_Removed_{
		Removed: &TsConditionChange_Removed{
			Name:      name.(*Name),
			ViewIndex: int32(idx),
		},
	}
}
