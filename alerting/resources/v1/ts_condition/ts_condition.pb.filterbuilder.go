// Code generated by protoc-gen-goten-resource
// Resource: TsCondition
// DO NOT EDIT!!!

package ts_condition

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
	gotenfilter "github.com/cloudwan/goten-sdk/runtime/resource/filter"
)

// proto imports
import (
	document "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/document"
	notification_channel "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/notification_channel"
	policy "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/policy"
	api "github.com/cloudwan/edgelq-sdk/common/api"
	iam_iam_common "github.com/cloudwan/edgelq-sdk/iam/resources/v1/common"
	iam_organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1/organization"
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1/project"
	monitoring_common "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/common"
	monitoring_metric_descriptor "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/metric_descriptor"
	monitoring_monitored_resource_descriptor "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/monitored_resource_descriptor"
	monitoring_project "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/project"
	monitoring_time_serie "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/time_serie"
	meta_common "github.com/cloudwan/goten-sdk/meta-service/resources/v1/common"
	meta_resource "github.com/cloudwan/goten-sdk/meta-service/resources/v1/resource"
	meta_service "github.com/cloudwan/goten-sdk/meta-service/resources/v1/service"
	meta "github.com/cloudwan/goten-sdk/types/meta"
	multi_region_policy "github.com/cloudwan/goten-sdk/types/multi_region_policy"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// ensure the imports are used
var (
	_ = gotenresource.ConditionContainsTypeAll
	_ = gotenfilter.AND
)

// make sure we're using proto imports
var (
	_ = &document.Document{}
	_ = &notification_channel.NotificationChannel{}
	_ = &policy.Policy{}
	_ = api.LaunchStage(0)
	_ = &iam_iam_common.PCR{}
	_ = &iam_organization.Organization{}
	_ = &iam_project.Project{}
	_ = &monitoring_common.LabelDescriptor{}
	_ = &monitoring_metric_descriptor.MetricDescriptor{}
	_ = &monitoring_monitored_resource_descriptor.MonitoredResourceDescriptor{}
	_ = &monitoring_project.Project{}
	_ = &monitoring_time_serie.Point{}
	_ = &durationpb.Duration{}
	_ = &fieldmaskpb.FieldMask{}
	_ = &timestamppb.Timestamp{}
	_ = &meta_common.LabelledDomain{}
	_ = &meta_resource.Resource{}
	_ = &meta_service.Service{}
	_ = &meta.Meta{}
	_ = &multi_region_policy.MultiRegionPolicy{}
)

type FilterBuilderOrCondition interface {
	_IsTsConditionFilterBuilderOrCondition()
}

type FilterBuilder struct {
	conds  []FilterCondition
	useNot bool
	op     gotenfilter.CompositeOperator
}

func NewFilterBuilder() *FilterBuilder {
	return NewAndFilterBuilder()
}

func NewAndFilterBuilder() *FilterBuilder {
	return &FilterBuilder{
		op: gotenfilter.AND,
	}
}

func NewOrFilterBuilder() *FilterBuilder {
	return &FilterBuilder{
		op: gotenfilter.OR,
	}
}

func (b *FilterBuilder) _IsTsConditionFilterBuilderOrCondition() {}

func (b *FilterBuilder) With(condOrBuilder FilterBuilderOrCondition, opts ...gotenfilter.FilterConditionOption) *FilterBuilder {
	var cond FilterCondition
	switch typedObj := condOrBuilder.(type) {
	case *Filter:
		cond = typedObj.GetCondition()
	case *FilterBuilder:
		cond = &FilterConditionComposite{Operator: typedObj.op, Conditions: typedObj.conds}
	case FilterCondition:
		cond = typedObj
	default:
		panic("Unknown condition or builder type")
	}
	cfg := gotenfilter.MakeFilterCondOptions(opts)
	if cfg.IsNot() {
		cond = &FilterConditionNot{cond}
	}
	b.conds = append(b.conds, cond)
	return b
}

func (b *FilterBuilder) Where(opts ...gotenfilter.FilterConditionOption) *filterCndBuilder {
	cfg := gotenfilter.MakeFilterCondOptions(opts)
	b.useNot = cfg.IsNot()
	return &filterCndBuilder{builder: b}
}

func (b *FilterBuilder) WherePath(fp TsCondition_FieldPath, opts ...gotenfilter.FilterConditionOption) *filterCndBuilderAnyPath {
	cfg := gotenfilter.MakeFilterCondOptions(opts)
	b.useNot = cfg.IsNot()
	return &filterCndBuilderAnyPath{builder: b, fp: fp}
}

func (b *FilterBuilder) Filter() *Filter {
	return &Filter{
		FilterCondition: &FilterConditionComposite{Operator: b.op, Conditions: b.conds},
	}
}

func (b *FilterBuilder) addCond(cond FilterCondition) *FilterBuilder {
	if b.useNot {
		cond = &FilterConditionNot{cond}
		b.useNot = false
	}
	b.conds = append(b.conds, cond)
	return b
}

type filterCndBuilderAnyPath struct {
	builder *FilterBuilder
	fp      TsCondition_FieldPath
}

func (b *filterCndBuilderAnyPath) Eq(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderAnyPath) Neq(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderAnyPath) Gt(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderAnyPath) Gte(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderAnyPath) Lt(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderAnyPath) Lte(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderAnyPath) In(values interface{}) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsCondition_FieldPathArrayOfValues: b.fp.WithIArrayOfValues(values),
	})
}

func (b *filterCndBuilderAnyPath) NotIn(values interface{}) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsCondition_FieldPathArrayOfValues: b.fp.WithIArrayOfValues(values),
	})
}

func (b *filterCndBuilderAnyPath) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: b.fp,
	})
}

func (b *filterCndBuilderAnyPath) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: b.fp,
	})
}

func (b *filterCndBuilderAnyPath) Contains(value interface{}) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: b.fp,
		Value:     b.fp.WithIArrayItemValue(value),
	})
}

func (b *filterCndBuilderAnyPath) ContainsAnyOf(values []interface{}) *FilterBuilder {
	itemValues := make([]TsCondition_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, b.fp.WithIArrayItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: b.fp,
		Values:    itemValues,
	})
}

func (b *filterCndBuilderAnyPath) ContainsAll(values []interface{}) *FilterBuilder {
	itemValues := make([]TsCondition_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, b.fp.WithIArrayItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: b.fp,
		Values:    itemValues,
	})
}

func (b *filterCndBuilderAnyPath) compare(op gotenfilter.CompareOperator, value interface{}) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		TsCondition_FieldPathValue: b.fp.WithIValue(value),
	})
}

type filterCndBuilder struct {
	builder *FilterBuilder
}

func (b *filterCndBuilder) Name() *filterCndBuilderName {
	return &filterCndBuilderName{builder: b.builder}
}

func (b *filterCndBuilder) Metadata() *filterCndBuilderMetadata {
	return &filterCndBuilderMetadata{builder: b.builder}
}

func (b *filterCndBuilder) DisplayName() *filterCndBuilderDisplayName {
	return &filterCndBuilderDisplayName{builder: b.builder}
}

func (b *filterCndBuilder) Description() *filterCndBuilderDescription {
	return &filterCndBuilderDescription{builder: b.builder}
}

func (b *filterCndBuilder) SupportingDocs() *filterCndBuilderSupportingDocs {
	return &filterCndBuilderSupportingDocs{builder: b.builder}
}

func (b *filterCndBuilder) Spec() *filterCndBuilderSpec {
	return &filterCndBuilderSpec{builder: b.builder}
}

func (b *filterCndBuilder) Internal() *filterCndBuilderInternal {
	return &filterCndBuilderInternal{builder: b.builder}
}

func (b *filterCndBuilder) FilterSelector() *filterCndBuilderFilterSelector {
	return &filterCndBuilderFilterSelector{builder: b.builder}
}

type filterCndBuilderName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderName) Eq(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderName) Neq(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderName) Gt(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderName) Gte(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderName) Lt(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderName) Lte(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderName) In(values []*Name) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderName) NotIn(values []*Name) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionFieldPathBuilder().Name().FieldPath(),
	})
}

func (b *filterCndBuilderName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionFieldPathBuilder().Name().FieldPath(),
	})
}

func (b *filterCndBuilderName) compare(op gotenfilter.CompareOperator, value *Name) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		TsCondition_FieldPathValue: NewTsConditionFieldPathBuilder().Name().WithValue(value),
	})
}

type filterCndBuilderMetadata struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadata) Eq(value *meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadata) Neq(value *meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadata) Gt(value *meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadata) Gte(value *meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadata) Lt(value *meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadata) Lte(value *meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadata) In(values []*meta.Meta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Metadata().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadata) NotIn(values []*meta.Meta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Metadata().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadata) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionFieldPathBuilder().Metadata().FieldPath(),
	})
}

func (b *filterCndBuilderMetadata) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionFieldPathBuilder().Metadata().FieldPath(),
	})
}

func (b *filterCndBuilderMetadata) compare(op gotenfilter.CompareOperator, value *meta.Meta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		TsCondition_FieldPathValue: NewTsConditionFieldPathBuilder().Metadata().WithValue(value),
	})
}

func (b *filterCndBuilderMetadata) CreateTime() *filterCndBuilderMetadataCreateTime {
	return &filterCndBuilderMetadataCreateTime{builder: b.builder}
}

func (b *filterCndBuilderMetadata) UpdateTime() *filterCndBuilderMetadataUpdateTime {
	return &filterCndBuilderMetadataUpdateTime{builder: b.builder}
}

func (b *filterCndBuilderMetadata) DeleteTime() *filterCndBuilderMetadataDeleteTime {
	return &filterCndBuilderMetadataDeleteTime{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Uuid() *filterCndBuilderMetadataUuid {
	return &filterCndBuilderMetadataUuid{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Tags() *filterCndBuilderMetadataTags {
	return &filterCndBuilderMetadataTags{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Labels() *filterCndBuilderMetadataLabels {
	return &filterCndBuilderMetadataLabels{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Annotations() *filterCndBuilderMetadataAnnotations {
	return &filterCndBuilderMetadataAnnotations{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Generation() *filterCndBuilderMetadataGeneration {
	return &filterCndBuilderMetadataGeneration{builder: b.builder}
}

func (b *filterCndBuilderMetadata) ResourceVersion() *filterCndBuilderMetadataResourceVersion {
	return &filterCndBuilderMetadataResourceVersion{builder: b.builder}
}

func (b *filterCndBuilderMetadata) OwnerReferences() *filterCndBuilderMetadataOwnerReferences {
	return &filterCndBuilderMetadataOwnerReferences{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Shards() *filterCndBuilderMetadataShards {
	return &filterCndBuilderMetadataShards{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Syncing() *filterCndBuilderMetadataSyncing {
	return &filterCndBuilderMetadataSyncing{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Lifecycle() *filterCndBuilderMetadataLifecycle {
	return &filterCndBuilderMetadataLifecycle{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Services() *filterCndBuilderMetadataServices {
	return &filterCndBuilderMetadataServices{builder: b.builder}
}

type filterCndBuilderMetadataCreateTime struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataCreateTime) Eq(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataCreateTime) Neq(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataCreateTime) Gt(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataCreateTime) Gte(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataCreateTime) Lt(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataCreateTime) Lte(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataCreateTime) In(values []*timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Metadata().CreateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataCreateTime) NotIn(values []*timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Metadata().CreateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataCreateTime) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionFieldPathBuilder().Metadata().CreateTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataCreateTime) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionFieldPathBuilder().Metadata().CreateTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataCreateTime) compare(op gotenfilter.CompareOperator, value *timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		TsCondition_FieldPathValue: NewTsConditionFieldPathBuilder().Metadata().CreateTime().WithValue(value),
	})
}

type filterCndBuilderMetadataUpdateTime struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataUpdateTime) Eq(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Neq(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Gt(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Gte(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Lt(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Lte(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataUpdateTime) In(values []*timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Metadata().UpdateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataUpdateTime) NotIn(values []*timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Metadata().UpdateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataUpdateTime) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionFieldPathBuilder().Metadata().UpdateTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataUpdateTime) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionFieldPathBuilder().Metadata().UpdateTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataUpdateTime) compare(op gotenfilter.CompareOperator, value *timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		TsCondition_FieldPathValue: NewTsConditionFieldPathBuilder().Metadata().UpdateTime().WithValue(value),
	})
}

type filterCndBuilderMetadataDeleteTime struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataDeleteTime) Eq(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataDeleteTime) Neq(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataDeleteTime) Gt(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataDeleteTime) Gte(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataDeleteTime) Lt(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataDeleteTime) Lte(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataDeleteTime) In(values []*timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Metadata().DeleteTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataDeleteTime) NotIn(values []*timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Metadata().DeleteTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataDeleteTime) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionFieldPathBuilder().Metadata().DeleteTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataDeleteTime) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionFieldPathBuilder().Metadata().DeleteTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataDeleteTime) compare(op gotenfilter.CompareOperator, value *timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		TsCondition_FieldPathValue: NewTsConditionFieldPathBuilder().Metadata().DeleteTime().WithValue(value),
	})
}

type filterCndBuilderMetadataUuid struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataUuid) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataUuid) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataUuid) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataUuid) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataUuid) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataUuid) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataUuid) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Metadata().Uuid().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataUuid) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Metadata().Uuid().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataUuid) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionFieldPathBuilder().Metadata().Uuid().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataUuid) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionFieldPathBuilder().Metadata().Uuid().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataUuid) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		TsCondition_FieldPathValue: NewTsConditionFieldPathBuilder().Metadata().Uuid().WithValue(value),
	})
}

type filterCndBuilderMetadataTags struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataTags) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataTags) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataTags) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataTags) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataTags) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataTags) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataTags) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Metadata().Tags().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataTags) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Metadata().Tags().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataTags) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionFieldPathBuilder().Metadata().Tags().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataTags) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionFieldPathBuilder().Metadata().Tags().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataTags) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewTsConditionFieldPathBuilder().Metadata().Tags().FieldPath(),
		Value:     NewTsConditionFieldPathBuilder().Metadata().Tags().WithItemValue(value),
	})
}

func (b *filterCndBuilderMetadataTags) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewTsConditionFieldPathBuilder().Metadata().Tags()
	itemValues := make([]TsCondition_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewTsConditionFieldPathBuilder().Metadata().Tags().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataTags) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewTsConditionFieldPathBuilder().Metadata().Tags()
	itemValues := make([]TsCondition_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewTsConditionFieldPathBuilder().Metadata().Tags().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataTags) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		TsCondition_FieldPathValue: NewTsConditionFieldPathBuilder().Metadata().Tags().WithValue(value),
	})
}

type filterCndBuilderMetadataLabels struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataLabels) Eq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataLabels) Neq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataLabels) Gt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataLabels) Gte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataLabels) Lt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataLabels) Lte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataLabels) In(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Metadata().Labels().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLabels) NotIn(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Metadata().Labels().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLabels) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionFieldPathBuilder().Metadata().Labels().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLabels) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionFieldPathBuilder().Metadata().Labels().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLabels) compare(op gotenfilter.CompareOperator, value map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		TsCondition_FieldPathValue: NewTsConditionFieldPathBuilder().Metadata().Labels().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataLabels) WithKey(key string) *mapFilterCndBuilderMetadataLabels {
	return &mapFilterCndBuilderMetadataLabels{builder: b.builder, key: key}
}

type mapFilterCndBuilderMetadataLabels struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderMetadataLabels) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderMetadataLabels) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Metadata().Labels().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataLabels) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Metadata().Labels().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataLabels) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionFieldPathBuilder().Metadata().Labels().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataLabels) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionFieldPathBuilder().Metadata().Labels().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataLabels) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		TsCondition_FieldPathValue: NewTsConditionFieldPathBuilder().Metadata().Labels().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderMetadataAnnotations struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataAnnotations) Eq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataAnnotations) Neq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataAnnotations) Gt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataAnnotations) Gte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataAnnotations) Lt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataAnnotations) Lte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataAnnotations) In(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Metadata().Annotations().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataAnnotations) NotIn(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Metadata().Annotations().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataAnnotations) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionFieldPathBuilder().Metadata().Annotations().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataAnnotations) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionFieldPathBuilder().Metadata().Annotations().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataAnnotations) compare(op gotenfilter.CompareOperator, value map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		TsCondition_FieldPathValue: NewTsConditionFieldPathBuilder().Metadata().Annotations().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataAnnotations) WithKey(key string) *mapFilterCndBuilderMetadataAnnotations {
	return &mapFilterCndBuilderMetadataAnnotations{builder: b.builder, key: key}
}

type mapFilterCndBuilderMetadataAnnotations struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderMetadataAnnotations) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Metadata().Annotations().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataAnnotations) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Metadata().Annotations().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataAnnotations) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionFieldPathBuilder().Metadata().Annotations().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataAnnotations) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionFieldPathBuilder().Metadata().Annotations().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataAnnotations) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		TsCondition_FieldPathValue: NewTsConditionFieldPathBuilder().Metadata().Annotations().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderMetadataGeneration struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataGeneration) Eq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataGeneration) Neq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataGeneration) Gt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataGeneration) Gte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataGeneration) Lt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataGeneration) Lte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataGeneration) In(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Metadata().Generation().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataGeneration) NotIn(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Metadata().Generation().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataGeneration) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionFieldPathBuilder().Metadata().Generation().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataGeneration) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionFieldPathBuilder().Metadata().Generation().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataGeneration) compare(op gotenfilter.CompareOperator, value int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		TsCondition_FieldPathValue: NewTsConditionFieldPathBuilder().Metadata().Generation().WithValue(value),
	})
}

type filterCndBuilderMetadataResourceVersion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataResourceVersion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataResourceVersion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Metadata().ResourceVersion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataResourceVersion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Metadata().ResourceVersion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataResourceVersion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionFieldPathBuilder().Metadata().ResourceVersion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataResourceVersion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionFieldPathBuilder().Metadata().ResourceVersion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataResourceVersion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		TsCondition_FieldPathValue: NewTsConditionFieldPathBuilder().Metadata().ResourceVersion().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferences struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferences) Eq(value []*meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Neq(value []*meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Gt(value []*meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Gte(value []*meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Lt(value []*meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Lte(value []*meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) In(values [][]*meta.OwnerReference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Metadata().OwnerReferences().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) NotIn(values [][]*meta.OwnerReference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Metadata().OwnerReferences().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) Contains(value *meta.OwnerReference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewTsConditionFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
		Value:     NewTsConditionFieldPathBuilder().Metadata().OwnerReferences().WithItemValue(value),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) ContainsAnyOf(values []*meta.OwnerReference) *FilterBuilder {
	pathSelector := NewTsConditionFieldPathBuilder().Metadata().OwnerReferences()
	itemValues := make([]TsCondition_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewTsConditionFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) ContainsAll(values []*meta.OwnerReference) *FilterBuilder {
	pathSelector := NewTsConditionFieldPathBuilder().Metadata().OwnerReferences()
	itemValues := make([]TsCondition_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewTsConditionFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) compare(op gotenfilter.CompareOperator, value []*meta.OwnerReference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		TsCondition_FieldPathValue: NewTsConditionFieldPathBuilder().Metadata().OwnerReferences().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) Kind() *filterCndBuilderMetadataOwnerReferencesKind {
	return &filterCndBuilderMetadataOwnerReferencesKind{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) Version() *filterCndBuilderMetadataOwnerReferencesVersion {
	return &filterCndBuilderMetadataOwnerReferencesVersion{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) Name() *filterCndBuilderMetadataOwnerReferencesName {
	return &filterCndBuilderMetadataOwnerReferencesName{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) Region() *filterCndBuilderMetadataOwnerReferencesRegion {
	return &filterCndBuilderMetadataOwnerReferencesRegion{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) Controller() *filterCndBuilderMetadataOwnerReferencesController {
	return &filterCndBuilderMetadataOwnerReferencesController{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) RequiresOwnerReference() *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference {
	return &filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) UnsetOnDelete() *filterCndBuilderMetadataOwnerReferencesUnsetOnDelete {
	return &filterCndBuilderMetadataOwnerReferencesUnsetOnDelete{builder: b.builder}
}

type filterCndBuilderMetadataOwnerReferencesKind struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Metadata().OwnerReferences().Kind().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Metadata().OwnerReferences().Kind().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionFieldPathBuilder().Metadata().OwnerReferences().Kind().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionFieldPathBuilder().Metadata().OwnerReferences().Kind().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		TsCondition_FieldPathValue: NewTsConditionFieldPathBuilder().Metadata().OwnerReferences().Kind().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesVersion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Metadata().OwnerReferences().Version().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Metadata().OwnerReferences().Version().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionFieldPathBuilder().Metadata().OwnerReferences().Version().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionFieldPathBuilder().Metadata().OwnerReferences().Version().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		TsCondition_FieldPathValue: NewTsConditionFieldPathBuilder().Metadata().OwnerReferences().Version().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Metadata().OwnerReferences().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Metadata().OwnerReferences().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionFieldPathBuilder().Metadata().OwnerReferences().Name().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionFieldPathBuilder().Metadata().OwnerReferences().Name().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		TsCondition_FieldPathValue: NewTsConditionFieldPathBuilder().Metadata().OwnerReferences().Name().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesRegion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Metadata().OwnerReferences().Region().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Metadata().OwnerReferences().Region().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionFieldPathBuilder().Metadata().OwnerReferences().Region().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionFieldPathBuilder().Metadata().OwnerReferences().Region().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		TsCondition_FieldPathValue: NewTsConditionFieldPathBuilder().Metadata().OwnerReferences().Region().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesController struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Metadata().OwnerReferences().Controller().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesController) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Metadata().OwnerReferences().Controller().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesController) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionFieldPathBuilder().Metadata().OwnerReferences().Controller().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesController) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionFieldPathBuilder().Metadata().OwnerReferences().Controller().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesController) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		TsCondition_FieldPathValue: NewTsConditionFieldPathBuilder().Metadata().OwnerReferences().Controller().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Metadata().OwnerReferences().RequiresOwnerReference().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Metadata().OwnerReferences().RequiresOwnerReference().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionFieldPathBuilder().Metadata().OwnerReferences().RequiresOwnerReference().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionFieldPathBuilder().Metadata().OwnerReferences().RequiresOwnerReference().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		TsCondition_FieldPathValue: NewTsConditionFieldPathBuilder().Metadata().OwnerReferences().RequiresOwnerReference().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesUnsetOnDelete struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesUnsetOnDelete) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesUnsetOnDelete) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesUnsetOnDelete) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesUnsetOnDelete) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesUnsetOnDelete) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesUnsetOnDelete) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesUnsetOnDelete) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Metadata().OwnerReferences().UnsetOnDelete().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesUnsetOnDelete) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Metadata().OwnerReferences().UnsetOnDelete().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesUnsetOnDelete) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionFieldPathBuilder().Metadata().OwnerReferences().UnsetOnDelete().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesUnsetOnDelete) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionFieldPathBuilder().Metadata().OwnerReferences().UnsetOnDelete().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesUnsetOnDelete) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		TsCondition_FieldPathValue: NewTsConditionFieldPathBuilder().Metadata().OwnerReferences().UnsetOnDelete().WithValue(value),
	})
}

type filterCndBuilderMetadataShards struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataShards) Eq(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataShards) Neq(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataShards) Gt(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataShards) Gte(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataShards) Lt(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataShards) Lte(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataShards) In(values []map[string]int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Metadata().Shards().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataShards) NotIn(values []map[string]int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Metadata().Shards().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataShards) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionFieldPathBuilder().Metadata().Shards().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataShards) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionFieldPathBuilder().Metadata().Shards().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataShards) compare(op gotenfilter.CompareOperator, value map[string]int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		TsCondition_FieldPathValue: NewTsConditionFieldPathBuilder().Metadata().Shards().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataShards) WithKey(key string) *mapFilterCndBuilderMetadataShards {
	return &mapFilterCndBuilderMetadataShards{builder: b.builder, key: key}
}

type mapFilterCndBuilderMetadataShards struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderMetadataShards) Eq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderMetadataShards) Neq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderMetadataShards) Gt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderMetadataShards) Gte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderMetadataShards) Lt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderMetadataShards) Lte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderMetadataShards) In(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Metadata().Shards().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataShards) NotIn(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Metadata().Shards().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataShards) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionFieldPathBuilder().Metadata().Shards().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataShards) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionFieldPathBuilder().Metadata().Shards().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataShards) compare(op gotenfilter.CompareOperator, value int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		TsCondition_FieldPathValue: NewTsConditionFieldPathBuilder().Metadata().Shards().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderMetadataSyncing struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataSyncing) Eq(value *meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataSyncing) Neq(value *meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataSyncing) Gt(value *meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataSyncing) Gte(value *meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataSyncing) Lt(value *meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataSyncing) Lte(value *meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataSyncing) In(values []*meta.SyncingMeta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Metadata().Syncing().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncing) NotIn(values []*meta.SyncingMeta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Metadata().Syncing().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncing) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionFieldPathBuilder().Metadata().Syncing().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncing) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionFieldPathBuilder().Metadata().Syncing().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncing) compare(op gotenfilter.CompareOperator, value *meta.SyncingMeta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		TsCondition_FieldPathValue: NewTsConditionFieldPathBuilder().Metadata().Syncing().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataSyncing) OwningRegion() *filterCndBuilderMetadataSyncingOwningRegion {
	return &filterCndBuilderMetadataSyncingOwningRegion{builder: b.builder}
}

func (b *filterCndBuilderMetadataSyncing) Regions() *filterCndBuilderMetadataSyncingRegions {
	return &filterCndBuilderMetadataSyncingRegions{builder: b.builder}
}

type filterCndBuilderMetadataSyncingOwningRegion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Metadata().Syncing().OwningRegion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Metadata().Syncing().OwningRegion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionFieldPathBuilder().Metadata().Syncing().OwningRegion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionFieldPathBuilder().Metadata().Syncing().OwningRegion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		TsCondition_FieldPathValue: NewTsConditionFieldPathBuilder().Metadata().Syncing().OwningRegion().WithValue(value),
	})
}

type filterCndBuilderMetadataSyncingRegions struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataSyncingRegions) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Metadata().Syncing().Regions().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Metadata().Syncing().Regions().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewTsConditionFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
		Value:     NewTsConditionFieldPathBuilder().Metadata().Syncing().Regions().WithItemValue(value),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewTsConditionFieldPathBuilder().Metadata().Syncing().Regions()
	itemValues := make([]TsCondition_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewTsConditionFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewTsConditionFieldPathBuilder().Metadata().Syncing().Regions()
	itemValues := make([]TsCondition_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewTsConditionFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		TsCondition_FieldPathValue: NewTsConditionFieldPathBuilder().Metadata().Syncing().Regions().WithValue(value),
	})
}

type filterCndBuilderMetadataLifecycle struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataLifecycle) Eq(value *meta.Lifecycle) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataLifecycle) Neq(value *meta.Lifecycle) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataLifecycle) Gt(value *meta.Lifecycle) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataLifecycle) Gte(value *meta.Lifecycle) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataLifecycle) Lt(value *meta.Lifecycle) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataLifecycle) Lte(value *meta.Lifecycle) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataLifecycle) In(values []*meta.Lifecycle) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Metadata().Lifecycle().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLifecycle) NotIn(values []*meta.Lifecycle) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Metadata().Lifecycle().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLifecycle) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionFieldPathBuilder().Metadata().Lifecycle().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLifecycle) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionFieldPathBuilder().Metadata().Lifecycle().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLifecycle) compare(op gotenfilter.CompareOperator, value *meta.Lifecycle) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		TsCondition_FieldPathValue: NewTsConditionFieldPathBuilder().Metadata().Lifecycle().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataLifecycle) State() *filterCndBuilderMetadataLifecycleState {
	return &filterCndBuilderMetadataLifecycleState{builder: b.builder}
}

func (b *filterCndBuilderMetadataLifecycle) BlockDeletion() *filterCndBuilderMetadataLifecycleBlockDeletion {
	return &filterCndBuilderMetadataLifecycleBlockDeletion{builder: b.builder}
}

type filterCndBuilderMetadataLifecycleState struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataLifecycleState) Eq(value meta.Lifecycle_State) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataLifecycleState) Neq(value meta.Lifecycle_State) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataLifecycleState) Gt(value meta.Lifecycle_State) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataLifecycleState) Gte(value meta.Lifecycle_State) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataLifecycleState) Lt(value meta.Lifecycle_State) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataLifecycleState) Lte(value meta.Lifecycle_State) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataLifecycleState) In(values []meta.Lifecycle_State) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Metadata().Lifecycle().State().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLifecycleState) NotIn(values []meta.Lifecycle_State) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Metadata().Lifecycle().State().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLifecycleState) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionFieldPathBuilder().Metadata().Lifecycle().State().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLifecycleState) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionFieldPathBuilder().Metadata().Lifecycle().State().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLifecycleState) compare(op gotenfilter.CompareOperator, value meta.Lifecycle_State) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		TsCondition_FieldPathValue: NewTsConditionFieldPathBuilder().Metadata().Lifecycle().State().WithValue(value),
	})
}

type filterCndBuilderMetadataLifecycleBlockDeletion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Metadata().Lifecycle().BlockDeletion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Metadata().Lifecycle().BlockDeletion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionFieldPathBuilder().Metadata().Lifecycle().BlockDeletion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionFieldPathBuilder().Metadata().Lifecycle().BlockDeletion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		TsCondition_FieldPathValue: NewTsConditionFieldPathBuilder().Metadata().Lifecycle().BlockDeletion().WithValue(value),
	})
}

type filterCndBuilderMetadataServices struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataServices) Eq(value *meta.ServicesInfo) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataServices) Neq(value *meta.ServicesInfo) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataServices) Gt(value *meta.ServicesInfo) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataServices) Gte(value *meta.ServicesInfo) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataServices) Lt(value *meta.ServicesInfo) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataServices) Lte(value *meta.ServicesInfo) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataServices) In(values []*meta.ServicesInfo) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Metadata().Services().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataServices) NotIn(values []*meta.ServicesInfo) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Metadata().Services().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataServices) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionFieldPathBuilder().Metadata().Services().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataServices) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionFieldPathBuilder().Metadata().Services().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataServices) compare(op gotenfilter.CompareOperator, value *meta.ServicesInfo) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		TsCondition_FieldPathValue: NewTsConditionFieldPathBuilder().Metadata().Services().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataServices) OwningService() *filterCndBuilderMetadataServicesOwningService {
	return &filterCndBuilderMetadataServicesOwningService{builder: b.builder}
}

func (b *filterCndBuilderMetadataServices) AllowedServices() *filterCndBuilderMetadataServicesAllowedServices {
	return &filterCndBuilderMetadataServicesAllowedServices{builder: b.builder}
}

type filterCndBuilderMetadataServicesOwningService struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataServicesOwningService) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataServicesOwningService) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataServicesOwningService) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataServicesOwningService) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataServicesOwningService) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataServicesOwningService) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataServicesOwningService) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Metadata().Services().OwningService().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataServicesOwningService) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Metadata().Services().OwningService().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataServicesOwningService) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionFieldPathBuilder().Metadata().Services().OwningService().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataServicesOwningService) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionFieldPathBuilder().Metadata().Services().OwningService().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataServicesOwningService) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		TsCondition_FieldPathValue: NewTsConditionFieldPathBuilder().Metadata().Services().OwningService().WithValue(value),
	})
}

type filterCndBuilderMetadataServicesAllowedServices struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataServicesAllowedServices) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataServicesAllowedServices) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataServicesAllowedServices) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataServicesAllowedServices) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataServicesAllowedServices) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataServicesAllowedServices) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataServicesAllowedServices) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Metadata().Services().AllowedServices().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataServicesAllowedServices) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Metadata().Services().AllowedServices().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataServicesAllowedServices) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionFieldPathBuilder().Metadata().Services().AllowedServices().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataServicesAllowedServices) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionFieldPathBuilder().Metadata().Services().AllowedServices().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataServicesAllowedServices) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewTsConditionFieldPathBuilder().Metadata().Services().AllowedServices().FieldPath(),
		Value:     NewTsConditionFieldPathBuilder().Metadata().Services().AllowedServices().WithItemValue(value),
	})
}

func (b *filterCndBuilderMetadataServicesAllowedServices) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewTsConditionFieldPathBuilder().Metadata().Services().AllowedServices()
	itemValues := make([]TsCondition_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewTsConditionFieldPathBuilder().Metadata().Services().AllowedServices().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataServicesAllowedServices) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewTsConditionFieldPathBuilder().Metadata().Services().AllowedServices()
	itemValues := make([]TsCondition_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewTsConditionFieldPathBuilder().Metadata().Services().AllowedServices().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataServicesAllowedServices) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		TsCondition_FieldPathValue: NewTsConditionFieldPathBuilder().Metadata().Services().AllowedServices().WithValue(value),
	})
}

type filterCndBuilderDisplayName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderDisplayName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderDisplayName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderDisplayName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderDisplayName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderDisplayName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderDisplayName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderDisplayName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().DisplayName().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderDisplayName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().DisplayName().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderDisplayName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionFieldPathBuilder().DisplayName().FieldPath(),
	})
}

func (b *filterCndBuilderDisplayName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionFieldPathBuilder().DisplayName().FieldPath(),
	})
}

func (b *filterCndBuilderDisplayName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		TsCondition_FieldPathValue: NewTsConditionFieldPathBuilder().DisplayName().WithValue(value),
	})
}

type filterCndBuilderDescription struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderDescription) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderDescription) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderDescription) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderDescription) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderDescription) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderDescription) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderDescription) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Description().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderDescription) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Description().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderDescription) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionFieldPathBuilder().Description().FieldPath(),
	})
}

func (b *filterCndBuilderDescription) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionFieldPathBuilder().Description().FieldPath(),
	})
}

func (b *filterCndBuilderDescription) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		TsCondition_FieldPathValue: NewTsConditionFieldPathBuilder().Description().WithValue(value),
	})
}

type filterCndBuilderSupportingDocs struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSupportingDocs) Eq(value []*document.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSupportingDocs) Neq(value []*document.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSupportingDocs) Gt(value []*document.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSupportingDocs) Gte(value []*document.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSupportingDocs) Lt(value []*document.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSupportingDocs) Lte(value []*document.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSupportingDocs) In(values [][]*document.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().SupportingDocs().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSupportingDocs) NotIn(values [][]*document.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().SupportingDocs().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSupportingDocs) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionFieldPathBuilder().SupportingDocs().FieldPath(),
	})
}

func (b *filterCndBuilderSupportingDocs) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionFieldPathBuilder().SupportingDocs().FieldPath(),
	})
}

func (b *filterCndBuilderSupportingDocs) Contains(value *document.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewTsConditionFieldPathBuilder().SupportingDocs().FieldPath(),
		Value:     NewTsConditionFieldPathBuilder().SupportingDocs().WithItemValue(value),
	})
}

func (b *filterCndBuilderSupportingDocs) ContainsAnyOf(values []*document.Reference) *FilterBuilder {
	pathSelector := NewTsConditionFieldPathBuilder().SupportingDocs()
	itemValues := make([]TsCondition_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewTsConditionFieldPathBuilder().SupportingDocs().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSupportingDocs) ContainsAll(values []*document.Reference) *FilterBuilder {
	pathSelector := NewTsConditionFieldPathBuilder().SupportingDocs()
	itemValues := make([]TsCondition_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewTsConditionFieldPathBuilder().SupportingDocs().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSupportingDocs) compare(op gotenfilter.CompareOperator, value []*document.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		TsCondition_FieldPathValue: NewTsConditionFieldPathBuilder().SupportingDocs().WithValue(value),
	})
}

type filterCndBuilderSpec struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpec) Eq(value *TsCondition_Spec) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpec) Neq(value *TsCondition_Spec) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpec) Gt(value *TsCondition_Spec) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpec) Gte(value *TsCondition_Spec) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpec) Lt(value *TsCondition_Spec) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpec) Lte(value *TsCondition_Spec) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpec) In(values []*TsCondition_Spec) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Spec().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpec) NotIn(values []*TsCondition_Spec) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Spec().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpec) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionFieldPathBuilder().Spec().FieldPath(),
	})
}

func (b *filterCndBuilderSpec) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionFieldPathBuilder().Spec().FieldPath(),
	})
}

func (b *filterCndBuilderSpec) compare(op gotenfilter.CompareOperator, value *TsCondition_Spec) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		TsCondition_FieldPathValue: NewTsConditionFieldPathBuilder().Spec().WithValue(value),
	})
}

func (b *filterCndBuilderSpec) Queries() *filterCndBuilderSpecQueries {
	return &filterCndBuilderSpecQueries{builder: b.builder}
}

func (b *filterCndBuilderSpec) QueryGroupBy() *filterCndBuilderSpecQueryGroupBy {
	return &filterCndBuilderSpecQueryGroupBy{builder: b.builder}
}

func (b *filterCndBuilderSpec) ThresholdAlerting() *filterCndBuilderSpecThresholdAlerting {
	return &filterCndBuilderSpecThresholdAlerting{builder: b.builder}
}

func (b *filterCndBuilderSpec) AnomalyAlerting() *filterCndBuilderSpecAnomalyAlerting {
	return &filterCndBuilderSpecAnomalyAlerting{builder: b.builder}
}

type filterCndBuilderSpecQueries struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecQueries) Eq(value []*TsCondition_Spec_Query) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecQueries) Neq(value []*TsCondition_Spec_Query) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecQueries) Gt(value []*TsCondition_Spec_Query) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecQueries) Gte(value []*TsCondition_Spec_Query) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecQueries) Lt(value []*TsCondition_Spec_Query) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecQueries) Lte(value []*TsCondition_Spec_Query) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecQueries) In(values [][]*TsCondition_Spec_Query) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Spec().Queries().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecQueries) NotIn(values [][]*TsCondition_Spec_Query) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Spec().Queries().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecQueries) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionFieldPathBuilder().Spec().Queries().FieldPath(),
	})
}

func (b *filterCndBuilderSpecQueries) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionFieldPathBuilder().Spec().Queries().FieldPath(),
	})
}

func (b *filterCndBuilderSpecQueries) Contains(value *TsCondition_Spec_Query) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewTsConditionFieldPathBuilder().Spec().Queries().FieldPath(),
		Value:     NewTsConditionFieldPathBuilder().Spec().Queries().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecQueries) ContainsAnyOf(values []*TsCondition_Spec_Query) *FilterBuilder {
	pathSelector := NewTsConditionFieldPathBuilder().Spec().Queries()
	itemValues := make([]TsCondition_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewTsConditionFieldPathBuilder().Spec().Queries().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecQueries) ContainsAll(values []*TsCondition_Spec_Query) *FilterBuilder {
	pathSelector := NewTsConditionFieldPathBuilder().Spec().Queries()
	itemValues := make([]TsCondition_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewTsConditionFieldPathBuilder().Spec().Queries().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecQueries) compare(op gotenfilter.CompareOperator, value []*TsCondition_Spec_Query) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		TsCondition_FieldPathValue: NewTsConditionFieldPathBuilder().Spec().Queries().WithValue(value),
	})
}

func (b *filterCndBuilderSpecQueries) Name() *filterCndBuilderSpecQueriesName {
	return &filterCndBuilderSpecQueriesName{builder: b.builder}
}

func (b *filterCndBuilderSpecQueries) Filter() *filterCndBuilderSpecQueriesFilter {
	return &filterCndBuilderSpecQueriesFilter{builder: b.builder}
}

func (b *filterCndBuilderSpecQueries) Aligner() *filterCndBuilderSpecQueriesAligner {
	return &filterCndBuilderSpecQueriesAligner{builder: b.builder}
}

func (b *filterCndBuilderSpecQueries) Reducer() *filterCndBuilderSpecQueriesReducer {
	return &filterCndBuilderSpecQueriesReducer{builder: b.builder}
}

func (b *filterCndBuilderSpecQueries) MaxValue() *filterCndBuilderSpecQueriesMaxValue {
	return &filterCndBuilderSpecQueriesMaxValue{builder: b.builder}
}

type filterCndBuilderSpecQueriesName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecQueriesName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecQueriesName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecQueriesName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecQueriesName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecQueriesName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecQueriesName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecQueriesName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Spec().Queries().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecQueriesName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Spec().Queries().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecQueriesName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionFieldPathBuilder().Spec().Queries().Name().FieldPath(),
	})
}

func (b *filterCndBuilderSpecQueriesName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionFieldPathBuilder().Spec().Queries().Name().FieldPath(),
	})
}

func (b *filterCndBuilderSpecQueriesName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		TsCondition_FieldPathValue: NewTsConditionFieldPathBuilder().Spec().Queries().Name().WithValue(value),
	})
}

type filterCndBuilderSpecQueriesFilter struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecQueriesFilter) Eq(value *monitoring_time_serie.Filter) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecQueriesFilter) Neq(value *monitoring_time_serie.Filter) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecQueriesFilter) Gt(value *monitoring_time_serie.Filter) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecQueriesFilter) Gte(value *monitoring_time_serie.Filter) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecQueriesFilter) Lt(value *monitoring_time_serie.Filter) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecQueriesFilter) Lte(value *monitoring_time_serie.Filter) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecQueriesFilter) In(values []*monitoring_time_serie.Filter) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Spec().Queries().Filter().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecQueriesFilter) NotIn(values []*monitoring_time_serie.Filter) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Spec().Queries().Filter().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecQueriesFilter) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionFieldPathBuilder().Spec().Queries().Filter().FieldPath(),
	})
}

func (b *filterCndBuilderSpecQueriesFilter) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionFieldPathBuilder().Spec().Queries().Filter().FieldPath(),
	})
}

func (b *filterCndBuilderSpecQueriesFilter) compare(op gotenfilter.CompareOperator, value *monitoring_time_serie.Filter) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		TsCondition_FieldPathValue: NewTsConditionFieldPathBuilder().Spec().Queries().Filter().WithValue(value),
	})
}

type filterCndBuilderSpecQueriesAligner struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecQueriesAligner) Eq(value monitoring_common.Aggregation_Aligner) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecQueriesAligner) Neq(value monitoring_common.Aggregation_Aligner) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecQueriesAligner) Gt(value monitoring_common.Aggregation_Aligner) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecQueriesAligner) Gte(value monitoring_common.Aggregation_Aligner) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecQueriesAligner) Lt(value monitoring_common.Aggregation_Aligner) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecQueriesAligner) Lte(value monitoring_common.Aggregation_Aligner) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecQueriesAligner) In(values []monitoring_common.Aggregation_Aligner) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Spec().Queries().Aligner().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecQueriesAligner) NotIn(values []monitoring_common.Aggregation_Aligner) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Spec().Queries().Aligner().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecQueriesAligner) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionFieldPathBuilder().Spec().Queries().Aligner().FieldPath(),
	})
}

func (b *filterCndBuilderSpecQueriesAligner) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionFieldPathBuilder().Spec().Queries().Aligner().FieldPath(),
	})
}

func (b *filterCndBuilderSpecQueriesAligner) compare(op gotenfilter.CompareOperator, value monitoring_common.Aggregation_Aligner) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		TsCondition_FieldPathValue: NewTsConditionFieldPathBuilder().Spec().Queries().Aligner().WithValue(value),
	})
}

type filterCndBuilderSpecQueriesReducer struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecQueriesReducer) Eq(value monitoring_common.Aggregation_Reducer) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecQueriesReducer) Neq(value monitoring_common.Aggregation_Reducer) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecQueriesReducer) Gt(value monitoring_common.Aggregation_Reducer) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecQueriesReducer) Gte(value monitoring_common.Aggregation_Reducer) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecQueriesReducer) Lt(value monitoring_common.Aggregation_Reducer) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecQueriesReducer) Lte(value monitoring_common.Aggregation_Reducer) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecQueriesReducer) In(values []monitoring_common.Aggregation_Reducer) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Spec().Queries().Reducer().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecQueriesReducer) NotIn(values []monitoring_common.Aggregation_Reducer) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Spec().Queries().Reducer().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecQueriesReducer) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionFieldPathBuilder().Spec().Queries().Reducer().FieldPath(),
	})
}

func (b *filterCndBuilderSpecQueriesReducer) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionFieldPathBuilder().Spec().Queries().Reducer().FieldPath(),
	})
}

func (b *filterCndBuilderSpecQueriesReducer) compare(op gotenfilter.CompareOperator, value monitoring_common.Aggregation_Reducer) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		TsCondition_FieldPathValue: NewTsConditionFieldPathBuilder().Spec().Queries().Reducer().WithValue(value),
	})
}

type filterCndBuilderSpecQueriesMaxValue struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecQueriesMaxValue) Eq(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecQueriesMaxValue) Neq(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecQueriesMaxValue) Gt(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecQueriesMaxValue) Gte(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecQueriesMaxValue) Lt(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecQueriesMaxValue) Lte(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecQueriesMaxValue) In(values []float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Spec().Queries().MaxValue().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecQueriesMaxValue) NotIn(values []float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Spec().Queries().MaxValue().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecQueriesMaxValue) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionFieldPathBuilder().Spec().Queries().MaxValue().FieldPath(),
	})
}

func (b *filterCndBuilderSpecQueriesMaxValue) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionFieldPathBuilder().Spec().Queries().MaxValue().FieldPath(),
	})
}

func (b *filterCndBuilderSpecQueriesMaxValue) compare(op gotenfilter.CompareOperator, value float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		TsCondition_FieldPathValue: NewTsConditionFieldPathBuilder().Spec().Queries().MaxValue().WithValue(value),
	})
}

type filterCndBuilderSpecQueryGroupBy struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecQueryGroupBy) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecQueryGroupBy) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecQueryGroupBy) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecQueryGroupBy) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecQueryGroupBy) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecQueryGroupBy) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecQueryGroupBy) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Spec().QueryGroupBy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecQueryGroupBy) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Spec().QueryGroupBy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecQueryGroupBy) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionFieldPathBuilder().Spec().QueryGroupBy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecQueryGroupBy) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionFieldPathBuilder().Spec().QueryGroupBy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecQueryGroupBy) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewTsConditionFieldPathBuilder().Spec().QueryGroupBy().FieldPath(),
		Value:     NewTsConditionFieldPathBuilder().Spec().QueryGroupBy().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecQueryGroupBy) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewTsConditionFieldPathBuilder().Spec().QueryGroupBy()
	itemValues := make([]TsCondition_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewTsConditionFieldPathBuilder().Spec().QueryGroupBy().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecQueryGroupBy) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewTsConditionFieldPathBuilder().Spec().QueryGroupBy()
	itemValues := make([]TsCondition_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewTsConditionFieldPathBuilder().Spec().QueryGroupBy().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecQueryGroupBy) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		TsCondition_FieldPathValue: NewTsConditionFieldPathBuilder().Spec().QueryGroupBy().WithValue(value),
	})
}

type filterCndBuilderSpecThresholdAlerting struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecThresholdAlerting) Eq(value *TsCondition_Spec_ThresholdAlertingCfg) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecThresholdAlerting) Neq(value *TsCondition_Spec_ThresholdAlertingCfg) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecThresholdAlerting) Gt(value *TsCondition_Spec_ThresholdAlertingCfg) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecThresholdAlerting) Gte(value *TsCondition_Spec_ThresholdAlertingCfg) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecThresholdAlerting) Lt(value *TsCondition_Spec_ThresholdAlertingCfg) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecThresholdAlerting) Lte(value *TsCondition_Spec_ThresholdAlertingCfg) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecThresholdAlerting) In(values []*TsCondition_Spec_ThresholdAlertingCfg) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Spec().ThresholdAlerting().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecThresholdAlerting) NotIn(values []*TsCondition_Spec_ThresholdAlertingCfg) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Spec().ThresholdAlerting().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecThresholdAlerting) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionFieldPathBuilder().Spec().ThresholdAlerting().FieldPath(),
	})
}

func (b *filterCndBuilderSpecThresholdAlerting) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionFieldPathBuilder().Spec().ThresholdAlerting().FieldPath(),
	})
}

func (b *filterCndBuilderSpecThresholdAlerting) compare(op gotenfilter.CompareOperator, value *TsCondition_Spec_ThresholdAlertingCfg) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		TsCondition_FieldPathValue: NewTsConditionFieldPathBuilder().Spec().ThresholdAlerting().WithValue(value),
	})
}

func (b *filterCndBuilderSpecThresholdAlerting) Operator() *filterCndBuilderSpecThresholdAlertingOperator {
	return &filterCndBuilderSpecThresholdAlertingOperator{builder: b.builder}
}

func (b *filterCndBuilderSpecThresholdAlerting) AlignmentPeriod() *filterCndBuilderSpecThresholdAlertingAlignmentPeriod {
	return &filterCndBuilderSpecThresholdAlertingAlignmentPeriod{builder: b.builder}
}

func (b *filterCndBuilderSpecThresholdAlerting) RaiseAfter() *filterCndBuilderSpecThresholdAlertingRaiseAfter {
	return &filterCndBuilderSpecThresholdAlertingRaiseAfter{builder: b.builder}
}

func (b *filterCndBuilderSpecThresholdAlerting) SilenceAfter() *filterCndBuilderSpecThresholdAlertingSilenceAfter {
	return &filterCndBuilderSpecThresholdAlertingSilenceAfter{builder: b.builder}
}

func (b *filterCndBuilderSpecThresholdAlerting) PerQueryThresholds() *filterCndBuilderSpecThresholdAlertingPerQueryThresholds {
	return &filterCndBuilderSpecThresholdAlertingPerQueryThresholds{builder: b.builder}
}

func (b *filterCndBuilderSpecThresholdAlerting) AdaptiveThresholdsDetectionPeriod() *filterCndBuilderSpecThresholdAlertingAdaptiveThresholdsDetectionPeriod {
	return &filterCndBuilderSpecThresholdAlertingAdaptiveThresholdsDetectionPeriod{builder: b.builder}
}

type filterCndBuilderSpecThresholdAlertingOperator struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecThresholdAlertingOperator) Eq(value TsCondition_Spec_ThresholdAlertingCfg_Operator) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecThresholdAlertingOperator) Neq(value TsCondition_Spec_ThresholdAlertingCfg_Operator) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecThresholdAlertingOperator) Gt(value TsCondition_Spec_ThresholdAlertingCfg_Operator) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecThresholdAlertingOperator) Gte(value TsCondition_Spec_ThresholdAlertingCfg_Operator) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecThresholdAlertingOperator) Lt(value TsCondition_Spec_ThresholdAlertingCfg_Operator) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecThresholdAlertingOperator) Lte(value TsCondition_Spec_ThresholdAlertingCfg_Operator) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecThresholdAlertingOperator) In(values []TsCondition_Spec_ThresholdAlertingCfg_Operator) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Spec().ThresholdAlerting().Operator().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecThresholdAlertingOperator) NotIn(values []TsCondition_Spec_ThresholdAlertingCfg_Operator) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Spec().ThresholdAlerting().Operator().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecThresholdAlertingOperator) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionFieldPathBuilder().Spec().ThresholdAlerting().Operator().FieldPath(),
	})
}

func (b *filterCndBuilderSpecThresholdAlertingOperator) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionFieldPathBuilder().Spec().ThresholdAlerting().Operator().FieldPath(),
	})
}

func (b *filterCndBuilderSpecThresholdAlertingOperator) compare(op gotenfilter.CompareOperator, value TsCondition_Spec_ThresholdAlertingCfg_Operator) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		TsCondition_FieldPathValue: NewTsConditionFieldPathBuilder().Spec().ThresholdAlerting().Operator().WithValue(value),
	})
}

type filterCndBuilderSpecThresholdAlertingAlignmentPeriod struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecThresholdAlertingAlignmentPeriod) Eq(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecThresholdAlertingAlignmentPeriod) Neq(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecThresholdAlertingAlignmentPeriod) Gt(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecThresholdAlertingAlignmentPeriod) Gte(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecThresholdAlertingAlignmentPeriod) Lt(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecThresholdAlertingAlignmentPeriod) Lte(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecThresholdAlertingAlignmentPeriod) In(values []*durationpb.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Spec().ThresholdAlerting().AlignmentPeriod().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecThresholdAlertingAlignmentPeriod) NotIn(values []*durationpb.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Spec().ThresholdAlerting().AlignmentPeriod().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecThresholdAlertingAlignmentPeriod) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionFieldPathBuilder().Spec().ThresholdAlerting().AlignmentPeriod().FieldPath(),
	})
}

func (b *filterCndBuilderSpecThresholdAlertingAlignmentPeriod) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionFieldPathBuilder().Spec().ThresholdAlerting().AlignmentPeriod().FieldPath(),
	})
}

func (b *filterCndBuilderSpecThresholdAlertingAlignmentPeriod) compare(op gotenfilter.CompareOperator, value *durationpb.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		TsCondition_FieldPathValue: NewTsConditionFieldPathBuilder().Spec().ThresholdAlerting().AlignmentPeriod().WithValue(value),
	})
}

type filterCndBuilderSpecThresholdAlertingRaiseAfter struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecThresholdAlertingRaiseAfter) Eq(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecThresholdAlertingRaiseAfter) Neq(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecThresholdAlertingRaiseAfter) Gt(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecThresholdAlertingRaiseAfter) Gte(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecThresholdAlertingRaiseAfter) Lt(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecThresholdAlertingRaiseAfter) Lte(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecThresholdAlertingRaiseAfter) In(values []*durationpb.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Spec().ThresholdAlerting().RaiseAfter().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecThresholdAlertingRaiseAfter) NotIn(values []*durationpb.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Spec().ThresholdAlerting().RaiseAfter().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecThresholdAlertingRaiseAfter) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionFieldPathBuilder().Spec().ThresholdAlerting().RaiseAfter().FieldPath(),
	})
}

func (b *filterCndBuilderSpecThresholdAlertingRaiseAfter) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionFieldPathBuilder().Spec().ThresholdAlerting().RaiseAfter().FieldPath(),
	})
}

func (b *filterCndBuilderSpecThresholdAlertingRaiseAfter) compare(op gotenfilter.CompareOperator, value *durationpb.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		TsCondition_FieldPathValue: NewTsConditionFieldPathBuilder().Spec().ThresholdAlerting().RaiseAfter().WithValue(value),
	})
}

type filterCndBuilderSpecThresholdAlertingSilenceAfter struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecThresholdAlertingSilenceAfter) Eq(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecThresholdAlertingSilenceAfter) Neq(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecThresholdAlertingSilenceAfter) Gt(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecThresholdAlertingSilenceAfter) Gte(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecThresholdAlertingSilenceAfter) Lt(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecThresholdAlertingSilenceAfter) Lte(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecThresholdAlertingSilenceAfter) In(values []*durationpb.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Spec().ThresholdAlerting().SilenceAfter().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecThresholdAlertingSilenceAfter) NotIn(values []*durationpb.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Spec().ThresholdAlerting().SilenceAfter().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecThresholdAlertingSilenceAfter) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionFieldPathBuilder().Spec().ThresholdAlerting().SilenceAfter().FieldPath(),
	})
}

func (b *filterCndBuilderSpecThresholdAlertingSilenceAfter) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionFieldPathBuilder().Spec().ThresholdAlerting().SilenceAfter().FieldPath(),
	})
}

func (b *filterCndBuilderSpecThresholdAlertingSilenceAfter) compare(op gotenfilter.CompareOperator, value *durationpb.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		TsCondition_FieldPathValue: NewTsConditionFieldPathBuilder().Spec().ThresholdAlerting().SilenceAfter().WithValue(value),
	})
}

type filterCndBuilderSpecThresholdAlertingPerQueryThresholds struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholds) Eq(value []*TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholds) Neq(value []*TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholds) Gt(value []*TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholds) Gte(value []*TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholds) Lt(value []*TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholds) Lte(value []*TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholds) In(values [][]*TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Spec().ThresholdAlerting().PerQueryThresholds().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholds) NotIn(values [][]*TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Spec().ThresholdAlerting().PerQueryThresholds().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholds) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionFieldPathBuilder().Spec().ThresholdAlerting().PerQueryThresholds().FieldPath(),
	})
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholds) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionFieldPathBuilder().Spec().ThresholdAlerting().PerQueryThresholds().FieldPath(),
	})
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholds) Contains(value *TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewTsConditionFieldPathBuilder().Spec().ThresholdAlerting().PerQueryThresholds().FieldPath(),
		Value:     NewTsConditionFieldPathBuilder().Spec().ThresholdAlerting().PerQueryThresholds().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholds) ContainsAnyOf(values []*TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds) *FilterBuilder {
	pathSelector := NewTsConditionFieldPathBuilder().Spec().ThresholdAlerting().PerQueryThresholds()
	itemValues := make([]TsCondition_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewTsConditionFieldPathBuilder().Spec().ThresholdAlerting().PerQueryThresholds().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholds) ContainsAll(values []*TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds) *FilterBuilder {
	pathSelector := NewTsConditionFieldPathBuilder().Spec().ThresholdAlerting().PerQueryThresholds()
	itemValues := make([]TsCondition_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewTsConditionFieldPathBuilder().Spec().ThresholdAlerting().PerQueryThresholds().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholds) compare(op gotenfilter.CompareOperator, value []*TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		TsCondition_FieldPathValue: NewTsConditionFieldPathBuilder().Spec().ThresholdAlerting().PerQueryThresholds().WithValue(value),
	})
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholds) AutoAdaptUpper() *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsAutoAdaptUpper {
	return &filterCndBuilderSpecThresholdAlertingPerQueryThresholdsAutoAdaptUpper{builder: b.builder}
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholds) AutoAdaptLower() *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsAutoAdaptLower {
	return &filterCndBuilderSpecThresholdAlertingPerQueryThresholdsAutoAdaptLower{builder: b.builder}
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholds) MaxUpper() *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsMaxUpper {
	return &filterCndBuilderSpecThresholdAlertingPerQueryThresholdsMaxUpper{builder: b.builder}
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholds) MaxLower() *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsMaxLower {
	return &filterCndBuilderSpecThresholdAlertingPerQueryThresholdsMaxLower{builder: b.builder}
}

type filterCndBuilderSpecThresholdAlertingPerQueryThresholdsAutoAdaptUpper struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsAutoAdaptUpper) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsAutoAdaptUpper) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsAutoAdaptUpper) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsAutoAdaptUpper) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsAutoAdaptUpper) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsAutoAdaptUpper) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsAutoAdaptUpper) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Spec().ThresholdAlerting().PerQueryThresholds().AutoAdaptUpper().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsAutoAdaptUpper) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Spec().ThresholdAlerting().PerQueryThresholds().AutoAdaptUpper().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsAutoAdaptUpper) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionFieldPathBuilder().Spec().ThresholdAlerting().PerQueryThresholds().AutoAdaptUpper().FieldPath(),
	})
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsAutoAdaptUpper) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionFieldPathBuilder().Spec().ThresholdAlerting().PerQueryThresholds().AutoAdaptUpper().FieldPath(),
	})
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsAutoAdaptUpper) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		TsCondition_FieldPathValue: NewTsConditionFieldPathBuilder().Spec().ThresholdAlerting().PerQueryThresholds().AutoAdaptUpper().WithValue(value),
	})
}

type filterCndBuilderSpecThresholdAlertingPerQueryThresholdsAutoAdaptLower struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsAutoAdaptLower) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsAutoAdaptLower) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsAutoAdaptLower) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsAutoAdaptLower) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsAutoAdaptLower) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsAutoAdaptLower) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsAutoAdaptLower) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Spec().ThresholdAlerting().PerQueryThresholds().AutoAdaptLower().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsAutoAdaptLower) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Spec().ThresholdAlerting().PerQueryThresholds().AutoAdaptLower().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsAutoAdaptLower) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionFieldPathBuilder().Spec().ThresholdAlerting().PerQueryThresholds().AutoAdaptLower().FieldPath(),
	})
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsAutoAdaptLower) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionFieldPathBuilder().Spec().ThresholdAlerting().PerQueryThresholds().AutoAdaptLower().FieldPath(),
	})
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsAutoAdaptLower) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		TsCondition_FieldPathValue: NewTsConditionFieldPathBuilder().Spec().ThresholdAlerting().PerQueryThresholds().AutoAdaptLower().WithValue(value),
	})
}

type filterCndBuilderSpecThresholdAlertingPerQueryThresholdsMaxUpper struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsMaxUpper) Eq(value *AlertingThreshold) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsMaxUpper) Neq(value *AlertingThreshold) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsMaxUpper) Gt(value *AlertingThreshold) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsMaxUpper) Gte(value *AlertingThreshold) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsMaxUpper) Lt(value *AlertingThreshold) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsMaxUpper) Lte(value *AlertingThreshold) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsMaxUpper) In(values []*AlertingThreshold) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Spec().ThresholdAlerting().PerQueryThresholds().MaxUpper().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsMaxUpper) NotIn(values []*AlertingThreshold) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Spec().ThresholdAlerting().PerQueryThresholds().MaxUpper().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsMaxUpper) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionFieldPathBuilder().Spec().ThresholdAlerting().PerQueryThresholds().MaxUpper().FieldPath(),
	})
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsMaxUpper) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionFieldPathBuilder().Spec().ThresholdAlerting().PerQueryThresholds().MaxUpper().FieldPath(),
	})
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsMaxUpper) compare(op gotenfilter.CompareOperator, value *AlertingThreshold) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		TsCondition_FieldPathValue: NewTsConditionFieldPathBuilder().Spec().ThresholdAlerting().PerQueryThresholds().MaxUpper().WithValue(value),
	})
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsMaxUpper) Value() *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsMaxUpperValue {
	return &filterCndBuilderSpecThresholdAlertingPerQueryThresholdsMaxUpperValue{builder: b.builder}
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsMaxUpper) IsInclusive() *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsMaxUpperIsInclusive {
	return &filterCndBuilderSpecThresholdAlertingPerQueryThresholdsMaxUpperIsInclusive{builder: b.builder}
}

type filterCndBuilderSpecThresholdAlertingPerQueryThresholdsMaxUpperValue struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsMaxUpperValue) Eq(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsMaxUpperValue) Neq(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsMaxUpperValue) Gt(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsMaxUpperValue) Gte(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsMaxUpperValue) Lt(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsMaxUpperValue) Lte(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsMaxUpperValue) In(values []float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Spec().ThresholdAlerting().PerQueryThresholds().MaxUpper().Value().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsMaxUpperValue) NotIn(values []float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Spec().ThresholdAlerting().PerQueryThresholds().MaxUpper().Value().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsMaxUpperValue) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionFieldPathBuilder().Spec().ThresholdAlerting().PerQueryThresholds().MaxUpper().Value().FieldPath(),
	})
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsMaxUpperValue) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionFieldPathBuilder().Spec().ThresholdAlerting().PerQueryThresholds().MaxUpper().Value().FieldPath(),
	})
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsMaxUpperValue) compare(op gotenfilter.CompareOperator, value float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		TsCondition_FieldPathValue: NewTsConditionFieldPathBuilder().Spec().ThresholdAlerting().PerQueryThresholds().MaxUpper().Value().WithValue(value),
	})
}

type filterCndBuilderSpecThresholdAlertingPerQueryThresholdsMaxUpperIsInclusive struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsMaxUpperIsInclusive) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsMaxUpperIsInclusive) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsMaxUpperIsInclusive) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsMaxUpperIsInclusive) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsMaxUpperIsInclusive) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsMaxUpperIsInclusive) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsMaxUpperIsInclusive) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Spec().ThresholdAlerting().PerQueryThresholds().MaxUpper().IsInclusive().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsMaxUpperIsInclusive) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Spec().ThresholdAlerting().PerQueryThresholds().MaxUpper().IsInclusive().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsMaxUpperIsInclusive) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionFieldPathBuilder().Spec().ThresholdAlerting().PerQueryThresholds().MaxUpper().IsInclusive().FieldPath(),
	})
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsMaxUpperIsInclusive) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionFieldPathBuilder().Spec().ThresholdAlerting().PerQueryThresholds().MaxUpper().IsInclusive().FieldPath(),
	})
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsMaxUpperIsInclusive) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		TsCondition_FieldPathValue: NewTsConditionFieldPathBuilder().Spec().ThresholdAlerting().PerQueryThresholds().MaxUpper().IsInclusive().WithValue(value),
	})
}

type filterCndBuilderSpecThresholdAlertingPerQueryThresholdsMaxLower struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsMaxLower) Eq(value *AlertingThreshold) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsMaxLower) Neq(value *AlertingThreshold) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsMaxLower) Gt(value *AlertingThreshold) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsMaxLower) Gte(value *AlertingThreshold) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsMaxLower) Lt(value *AlertingThreshold) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsMaxLower) Lte(value *AlertingThreshold) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsMaxLower) In(values []*AlertingThreshold) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Spec().ThresholdAlerting().PerQueryThresholds().MaxLower().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsMaxLower) NotIn(values []*AlertingThreshold) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Spec().ThresholdAlerting().PerQueryThresholds().MaxLower().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsMaxLower) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionFieldPathBuilder().Spec().ThresholdAlerting().PerQueryThresholds().MaxLower().FieldPath(),
	})
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsMaxLower) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionFieldPathBuilder().Spec().ThresholdAlerting().PerQueryThresholds().MaxLower().FieldPath(),
	})
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsMaxLower) compare(op gotenfilter.CompareOperator, value *AlertingThreshold) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		TsCondition_FieldPathValue: NewTsConditionFieldPathBuilder().Spec().ThresholdAlerting().PerQueryThresholds().MaxLower().WithValue(value),
	})
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsMaxLower) Value() *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsMaxLowerValue {
	return &filterCndBuilderSpecThresholdAlertingPerQueryThresholdsMaxLowerValue{builder: b.builder}
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsMaxLower) IsInclusive() *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsMaxLowerIsInclusive {
	return &filterCndBuilderSpecThresholdAlertingPerQueryThresholdsMaxLowerIsInclusive{builder: b.builder}
}

type filterCndBuilderSpecThresholdAlertingPerQueryThresholdsMaxLowerValue struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsMaxLowerValue) Eq(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsMaxLowerValue) Neq(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsMaxLowerValue) Gt(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsMaxLowerValue) Gte(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsMaxLowerValue) Lt(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsMaxLowerValue) Lte(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsMaxLowerValue) In(values []float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Spec().ThresholdAlerting().PerQueryThresholds().MaxLower().Value().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsMaxLowerValue) NotIn(values []float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Spec().ThresholdAlerting().PerQueryThresholds().MaxLower().Value().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsMaxLowerValue) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionFieldPathBuilder().Spec().ThresholdAlerting().PerQueryThresholds().MaxLower().Value().FieldPath(),
	})
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsMaxLowerValue) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionFieldPathBuilder().Spec().ThresholdAlerting().PerQueryThresholds().MaxLower().Value().FieldPath(),
	})
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsMaxLowerValue) compare(op gotenfilter.CompareOperator, value float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		TsCondition_FieldPathValue: NewTsConditionFieldPathBuilder().Spec().ThresholdAlerting().PerQueryThresholds().MaxLower().Value().WithValue(value),
	})
}

type filterCndBuilderSpecThresholdAlertingPerQueryThresholdsMaxLowerIsInclusive struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsMaxLowerIsInclusive) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsMaxLowerIsInclusive) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsMaxLowerIsInclusive) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsMaxLowerIsInclusive) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsMaxLowerIsInclusive) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsMaxLowerIsInclusive) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsMaxLowerIsInclusive) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Spec().ThresholdAlerting().PerQueryThresholds().MaxLower().IsInclusive().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsMaxLowerIsInclusive) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Spec().ThresholdAlerting().PerQueryThresholds().MaxLower().IsInclusive().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsMaxLowerIsInclusive) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionFieldPathBuilder().Spec().ThresholdAlerting().PerQueryThresholds().MaxLower().IsInclusive().FieldPath(),
	})
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsMaxLowerIsInclusive) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionFieldPathBuilder().Spec().ThresholdAlerting().PerQueryThresholds().MaxLower().IsInclusive().FieldPath(),
	})
}

func (b *filterCndBuilderSpecThresholdAlertingPerQueryThresholdsMaxLowerIsInclusive) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		TsCondition_FieldPathValue: NewTsConditionFieldPathBuilder().Spec().ThresholdAlerting().PerQueryThresholds().MaxLower().IsInclusive().WithValue(value),
	})
}

type filterCndBuilderSpecThresholdAlertingAdaptiveThresholdsDetectionPeriod struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecThresholdAlertingAdaptiveThresholdsDetectionPeriod) Eq(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecThresholdAlertingAdaptiveThresholdsDetectionPeriod) Neq(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecThresholdAlertingAdaptiveThresholdsDetectionPeriod) Gt(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecThresholdAlertingAdaptiveThresholdsDetectionPeriod) Gte(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecThresholdAlertingAdaptiveThresholdsDetectionPeriod) Lt(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecThresholdAlertingAdaptiveThresholdsDetectionPeriod) Lte(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecThresholdAlertingAdaptiveThresholdsDetectionPeriod) In(values []*durationpb.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Spec().ThresholdAlerting().AdaptiveThresholdsDetectionPeriod().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecThresholdAlertingAdaptiveThresholdsDetectionPeriod) NotIn(values []*durationpb.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Spec().ThresholdAlerting().AdaptiveThresholdsDetectionPeriod().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecThresholdAlertingAdaptiveThresholdsDetectionPeriod) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionFieldPathBuilder().Spec().ThresholdAlerting().AdaptiveThresholdsDetectionPeriod().FieldPath(),
	})
}

func (b *filterCndBuilderSpecThresholdAlertingAdaptiveThresholdsDetectionPeriod) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionFieldPathBuilder().Spec().ThresholdAlerting().AdaptiveThresholdsDetectionPeriod().FieldPath(),
	})
}

func (b *filterCndBuilderSpecThresholdAlertingAdaptiveThresholdsDetectionPeriod) compare(op gotenfilter.CompareOperator, value *durationpb.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		TsCondition_FieldPathValue: NewTsConditionFieldPathBuilder().Spec().ThresholdAlerting().AdaptiveThresholdsDetectionPeriod().WithValue(value),
	})
}

type filterCndBuilderSpecAnomalyAlerting struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecAnomalyAlerting) Eq(value []*TsCondition_Spec_AnomalyAlertingCfg) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecAnomalyAlerting) Neq(value []*TsCondition_Spec_AnomalyAlertingCfg) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecAnomalyAlerting) Gt(value []*TsCondition_Spec_AnomalyAlertingCfg) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecAnomalyAlerting) Gte(value []*TsCondition_Spec_AnomalyAlertingCfg) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecAnomalyAlerting) Lt(value []*TsCondition_Spec_AnomalyAlertingCfg) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecAnomalyAlerting) Lte(value []*TsCondition_Spec_AnomalyAlertingCfg) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecAnomalyAlerting) In(values [][]*TsCondition_Spec_AnomalyAlertingCfg) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Spec().AnomalyAlerting().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecAnomalyAlerting) NotIn(values [][]*TsCondition_Spec_AnomalyAlertingCfg) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Spec().AnomalyAlerting().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecAnomalyAlerting) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionFieldPathBuilder().Spec().AnomalyAlerting().FieldPath(),
	})
}

func (b *filterCndBuilderSpecAnomalyAlerting) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionFieldPathBuilder().Spec().AnomalyAlerting().FieldPath(),
	})
}

func (b *filterCndBuilderSpecAnomalyAlerting) Contains(value *TsCondition_Spec_AnomalyAlertingCfg) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewTsConditionFieldPathBuilder().Spec().AnomalyAlerting().FieldPath(),
		Value:     NewTsConditionFieldPathBuilder().Spec().AnomalyAlerting().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecAnomalyAlerting) ContainsAnyOf(values []*TsCondition_Spec_AnomalyAlertingCfg) *FilterBuilder {
	pathSelector := NewTsConditionFieldPathBuilder().Spec().AnomalyAlerting()
	itemValues := make([]TsCondition_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewTsConditionFieldPathBuilder().Spec().AnomalyAlerting().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecAnomalyAlerting) ContainsAll(values []*TsCondition_Spec_AnomalyAlertingCfg) *FilterBuilder {
	pathSelector := NewTsConditionFieldPathBuilder().Spec().AnomalyAlerting()
	itemValues := make([]TsCondition_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewTsConditionFieldPathBuilder().Spec().AnomalyAlerting().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecAnomalyAlerting) compare(op gotenfilter.CompareOperator, value []*TsCondition_Spec_AnomalyAlertingCfg) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		TsCondition_FieldPathValue: NewTsConditionFieldPathBuilder().Spec().AnomalyAlerting().WithValue(value),
	})
}

func (b *filterCndBuilderSpecAnomalyAlerting) AnalysisWindow() *filterCndBuilderSpecAnomalyAlertingAnalysisWindow {
	return &filterCndBuilderSpecAnomalyAlertingAnalysisWindow{builder: b.builder}
}

func (b *filterCndBuilderSpecAnomalyAlerting) StepInterval() *filterCndBuilderSpecAnomalyAlertingStepInterval {
	return &filterCndBuilderSpecAnomalyAlertingStepInterval{builder: b.builder}
}

func (b *filterCndBuilderSpecAnomalyAlerting) TrainStepInterval() *filterCndBuilderSpecAnomalyAlertingTrainStepInterval {
	return &filterCndBuilderSpecAnomalyAlertingTrainStepInterval{builder: b.builder}
}

func (b *filterCndBuilderSpecAnomalyAlerting) AlignmentPeriod() *filterCndBuilderSpecAnomalyAlertingAlignmentPeriod {
	return &filterCndBuilderSpecAnomalyAlertingAlignmentPeriod{builder: b.builder}
}

func (b *filterCndBuilderSpecAnomalyAlerting) LstmAutoencoder() *filterCndBuilderSpecAnomalyAlertingLstmAutoencoder {
	return &filterCndBuilderSpecAnomalyAlertingLstmAutoencoder{builder: b.builder}
}

func (b *filterCndBuilderSpecAnomalyAlerting) RaiseAfter() *filterCndBuilderSpecAnomalyAlertingRaiseAfter {
	return &filterCndBuilderSpecAnomalyAlertingRaiseAfter{builder: b.builder}
}

func (b *filterCndBuilderSpecAnomalyAlerting) SilenceAfter() *filterCndBuilderSpecAnomalyAlertingSilenceAfter {
	return &filterCndBuilderSpecAnomalyAlertingSilenceAfter{builder: b.builder}
}

type filterCndBuilderSpecAnomalyAlertingAnalysisWindow struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecAnomalyAlertingAnalysisWindow) Eq(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecAnomalyAlertingAnalysisWindow) Neq(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecAnomalyAlertingAnalysisWindow) Gt(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecAnomalyAlertingAnalysisWindow) Gte(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecAnomalyAlertingAnalysisWindow) Lt(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecAnomalyAlertingAnalysisWindow) Lte(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecAnomalyAlertingAnalysisWindow) In(values []*durationpb.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Spec().AnomalyAlerting().AnalysisWindow().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecAnomalyAlertingAnalysisWindow) NotIn(values []*durationpb.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Spec().AnomalyAlerting().AnalysisWindow().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecAnomalyAlertingAnalysisWindow) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionFieldPathBuilder().Spec().AnomalyAlerting().AnalysisWindow().FieldPath(),
	})
}

func (b *filterCndBuilderSpecAnomalyAlertingAnalysisWindow) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionFieldPathBuilder().Spec().AnomalyAlerting().AnalysisWindow().FieldPath(),
	})
}

func (b *filterCndBuilderSpecAnomalyAlertingAnalysisWindow) compare(op gotenfilter.CompareOperator, value *durationpb.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		TsCondition_FieldPathValue: NewTsConditionFieldPathBuilder().Spec().AnomalyAlerting().AnalysisWindow().WithValue(value),
	})
}

type filterCndBuilderSpecAnomalyAlertingStepInterval struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecAnomalyAlertingStepInterval) Eq(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecAnomalyAlertingStepInterval) Neq(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecAnomalyAlertingStepInterval) Gt(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecAnomalyAlertingStepInterval) Gte(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecAnomalyAlertingStepInterval) Lt(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecAnomalyAlertingStepInterval) Lte(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecAnomalyAlertingStepInterval) In(values []*durationpb.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Spec().AnomalyAlerting().StepInterval().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecAnomalyAlertingStepInterval) NotIn(values []*durationpb.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Spec().AnomalyAlerting().StepInterval().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecAnomalyAlertingStepInterval) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionFieldPathBuilder().Spec().AnomalyAlerting().StepInterval().FieldPath(),
	})
}

func (b *filterCndBuilderSpecAnomalyAlertingStepInterval) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionFieldPathBuilder().Spec().AnomalyAlerting().StepInterval().FieldPath(),
	})
}

func (b *filterCndBuilderSpecAnomalyAlertingStepInterval) compare(op gotenfilter.CompareOperator, value *durationpb.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		TsCondition_FieldPathValue: NewTsConditionFieldPathBuilder().Spec().AnomalyAlerting().StepInterval().WithValue(value),
	})
}

type filterCndBuilderSpecAnomalyAlertingTrainStepInterval struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecAnomalyAlertingTrainStepInterval) Eq(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecAnomalyAlertingTrainStepInterval) Neq(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecAnomalyAlertingTrainStepInterval) Gt(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecAnomalyAlertingTrainStepInterval) Gte(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecAnomalyAlertingTrainStepInterval) Lt(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecAnomalyAlertingTrainStepInterval) Lte(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecAnomalyAlertingTrainStepInterval) In(values []*durationpb.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Spec().AnomalyAlerting().TrainStepInterval().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecAnomalyAlertingTrainStepInterval) NotIn(values []*durationpb.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Spec().AnomalyAlerting().TrainStepInterval().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecAnomalyAlertingTrainStepInterval) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionFieldPathBuilder().Spec().AnomalyAlerting().TrainStepInterval().FieldPath(),
	})
}

func (b *filterCndBuilderSpecAnomalyAlertingTrainStepInterval) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionFieldPathBuilder().Spec().AnomalyAlerting().TrainStepInterval().FieldPath(),
	})
}

func (b *filterCndBuilderSpecAnomalyAlertingTrainStepInterval) compare(op gotenfilter.CompareOperator, value *durationpb.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		TsCondition_FieldPathValue: NewTsConditionFieldPathBuilder().Spec().AnomalyAlerting().TrainStepInterval().WithValue(value),
	})
}

type filterCndBuilderSpecAnomalyAlertingAlignmentPeriod struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecAnomalyAlertingAlignmentPeriod) Eq(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecAnomalyAlertingAlignmentPeriod) Neq(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecAnomalyAlertingAlignmentPeriod) Gt(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecAnomalyAlertingAlignmentPeriod) Gte(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecAnomalyAlertingAlignmentPeriod) Lt(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecAnomalyAlertingAlignmentPeriod) Lte(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecAnomalyAlertingAlignmentPeriod) In(values []*durationpb.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Spec().AnomalyAlerting().AlignmentPeriod().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecAnomalyAlertingAlignmentPeriod) NotIn(values []*durationpb.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Spec().AnomalyAlerting().AlignmentPeriod().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecAnomalyAlertingAlignmentPeriod) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionFieldPathBuilder().Spec().AnomalyAlerting().AlignmentPeriod().FieldPath(),
	})
}

func (b *filterCndBuilderSpecAnomalyAlertingAlignmentPeriod) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionFieldPathBuilder().Spec().AnomalyAlerting().AlignmentPeriod().FieldPath(),
	})
}

func (b *filterCndBuilderSpecAnomalyAlertingAlignmentPeriod) compare(op gotenfilter.CompareOperator, value *durationpb.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		TsCondition_FieldPathValue: NewTsConditionFieldPathBuilder().Spec().AnomalyAlerting().AlignmentPeriod().WithValue(value),
	})
}

type filterCndBuilderSpecAnomalyAlertingLstmAutoencoder struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecAnomalyAlertingLstmAutoencoder) Eq(value *TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecAnomalyAlertingLstmAutoencoder) Neq(value *TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecAnomalyAlertingLstmAutoencoder) Gt(value *TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecAnomalyAlertingLstmAutoencoder) Gte(value *TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecAnomalyAlertingLstmAutoencoder) Lt(value *TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecAnomalyAlertingLstmAutoencoder) Lte(value *TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecAnomalyAlertingLstmAutoencoder) In(values []*TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Spec().AnomalyAlerting().LstmAutoencoder().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecAnomalyAlertingLstmAutoencoder) NotIn(values []*TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Spec().AnomalyAlerting().LstmAutoencoder().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecAnomalyAlertingLstmAutoencoder) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionFieldPathBuilder().Spec().AnomalyAlerting().LstmAutoencoder().FieldPath(),
	})
}

func (b *filterCndBuilderSpecAnomalyAlertingLstmAutoencoder) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionFieldPathBuilder().Spec().AnomalyAlerting().LstmAutoencoder().FieldPath(),
	})
}

func (b *filterCndBuilderSpecAnomalyAlertingLstmAutoencoder) compare(op gotenfilter.CompareOperator, value *TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		TsCondition_FieldPathValue: NewTsConditionFieldPathBuilder().Spec().AnomalyAlerting().LstmAutoencoder().WithValue(value),
	})
}

func (b *filterCndBuilderSpecAnomalyAlertingLstmAutoencoder) HiddenSize() *filterCndBuilderSpecAnomalyAlertingLstmAutoencoderHiddenSize {
	return &filterCndBuilderSpecAnomalyAlertingLstmAutoencoderHiddenSize{builder: b.builder}
}

func (b *filterCndBuilderSpecAnomalyAlertingLstmAutoencoder) LearnRate() *filterCndBuilderSpecAnomalyAlertingLstmAutoencoderLearnRate {
	return &filterCndBuilderSpecAnomalyAlertingLstmAutoencoderLearnRate{builder: b.builder}
}

func (b *filterCndBuilderSpecAnomalyAlertingLstmAutoencoder) MaxTrainingEpochs() *filterCndBuilderSpecAnomalyAlertingLstmAutoencoderMaxTrainingEpochs {
	return &filterCndBuilderSpecAnomalyAlertingLstmAutoencoderMaxTrainingEpochs{builder: b.builder}
}

func (b *filterCndBuilderSpecAnomalyAlertingLstmAutoencoder) MinTrainingEpochs() *filterCndBuilderSpecAnomalyAlertingLstmAutoencoderMinTrainingEpochs {
	return &filterCndBuilderSpecAnomalyAlertingLstmAutoencoderMinTrainingEpochs{builder: b.builder}
}

func (b *filterCndBuilderSpecAnomalyAlertingLstmAutoencoder) AcceptableTrainingError() *filterCndBuilderSpecAnomalyAlertingLstmAutoencoderAcceptableTrainingError {
	return &filterCndBuilderSpecAnomalyAlertingLstmAutoencoderAcceptableTrainingError{builder: b.builder}
}

func (b *filterCndBuilderSpecAnomalyAlertingLstmAutoencoder) TrainingPeriod() *filterCndBuilderSpecAnomalyAlertingLstmAutoencoderTrainingPeriod {
	return &filterCndBuilderSpecAnomalyAlertingLstmAutoencoderTrainingPeriod{builder: b.builder}
}

func (b *filterCndBuilderSpecAnomalyAlertingLstmAutoencoder) CheckPeriodFraction() *filterCndBuilderSpecAnomalyAlertingLstmAutoencoderCheckPeriodFraction {
	return &filterCndBuilderSpecAnomalyAlertingLstmAutoencoderCheckPeriodFraction{builder: b.builder}
}

type filterCndBuilderSpecAnomalyAlertingLstmAutoencoderHiddenSize struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecAnomalyAlertingLstmAutoencoderHiddenSize) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecAnomalyAlertingLstmAutoencoderHiddenSize) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecAnomalyAlertingLstmAutoencoderHiddenSize) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecAnomalyAlertingLstmAutoencoderHiddenSize) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecAnomalyAlertingLstmAutoencoderHiddenSize) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecAnomalyAlertingLstmAutoencoderHiddenSize) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecAnomalyAlertingLstmAutoencoderHiddenSize) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Spec().AnomalyAlerting().LstmAutoencoder().HiddenSize().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecAnomalyAlertingLstmAutoencoderHiddenSize) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Spec().AnomalyAlerting().LstmAutoencoder().HiddenSize().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecAnomalyAlertingLstmAutoencoderHiddenSize) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionFieldPathBuilder().Spec().AnomalyAlerting().LstmAutoencoder().HiddenSize().FieldPath(),
	})
}

func (b *filterCndBuilderSpecAnomalyAlertingLstmAutoencoderHiddenSize) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionFieldPathBuilder().Spec().AnomalyAlerting().LstmAutoencoder().HiddenSize().FieldPath(),
	})
}

func (b *filterCndBuilderSpecAnomalyAlertingLstmAutoencoderHiddenSize) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		TsCondition_FieldPathValue: NewTsConditionFieldPathBuilder().Spec().AnomalyAlerting().LstmAutoencoder().HiddenSize().WithValue(value),
	})
}

type filterCndBuilderSpecAnomalyAlertingLstmAutoencoderLearnRate struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecAnomalyAlertingLstmAutoencoderLearnRate) Eq(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecAnomalyAlertingLstmAutoencoderLearnRate) Neq(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecAnomalyAlertingLstmAutoencoderLearnRate) Gt(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecAnomalyAlertingLstmAutoencoderLearnRate) Gte(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecAnomalyAlertingLstmAutoencoderLearnRate) Lt(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecAnomalyAlertingLstmAutoencoderLearnRate) Lte(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecAnomalyAlertingLstmAutoencoderLearnRate) In(values []float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Spec().AnomalyAlerting().LstmAutoencoder().LearnRate().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecAnomalyAlertingLstmAutoencoderLearnRate) NotIn(values []float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Spec().AnomalyAlerting().LstmAutoencoder().LearnRate().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecAnomalyAlertingLstmAutoencoderLearnRate) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionFieldPathBuilder().Spec().AnomalyAlerting().LstmAutoencoder().LearnRate().FieldPath(),
	})
}

func (b *filterCndBuilderSpecAnomalyAlertingLstmAutoencoderLearnRate) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionFieldPathBuilder().Spec().AnomalyAlerting().LstmAutoencoder().LearnRate().FieldPath(),
	})
}

func (b *filterCndBuilderSpecAnomalyAlertingLstmAutoencoderLearnRate) compare(op gotenfilter.CompareOperator, value float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		TsCondition_FieldPathValue: NewTsConditionFieldPathBuilder().Spec().AnomalyAlerting().LstmAutoencoder().LearnRate().WithValue(value),
	})
}

type filterCndBuilderSpecAnomalyAlertingLstmAutoencoderMaxTrainingEpochs struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecAnomalyAlertingLstmAutoencoderMaxTrainingEpochs) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecAnomalyAlertingLstmAutoencoderMaxTrainingEpochs) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecAnomalyAlertingLstmAutoencoderMaxTrainingEpochs) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecAnomalyAlertingLstmAutoencoderMaxTrainingEpochs) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecAnomalyAlertingLstmAutoencoderMaxTrainingEpochs) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecAnomalyAlertingLstmAutoencoderMaxTrainingEpochs) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecAnomalyAlertingLstmAutoencoderMaxTrainingEpochs) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Spec().AnomalyAlerting().LstmAutoencoder().MaxTrainingEpochs().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecAnomalyAlertingLstmAutoencoderMaxTrainingEpochs) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Spec().AnomalyAlerting().LstmAutoencoder().MaxTrainingEpochs().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecAnomalyAlertingLstmAutoencoderMaxTrainingEpochs) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionFieldPathBuilder().Spec().AnomalyAlerting().LstmAutoencoder().MaxTrainingEpochs().FieldPath(),
	})
}

func (b *filterCndBuilderSpecAnomalyAlertingLstmAutoencoderMaxTrainingEpochs) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionFieldPathBuilder().Spec().AnomalyAlerting().LstmAutoencoder().MaxTrainingEpochs().FieldPath(),
	})
}

func (b *filterCndBuilderSpecAnomalyAlertingLstmAutoencoderMaxTrainingEpochs) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		TsCondition_FieldPathValue: NewTsConditionFieldPathBuilder().Spec().AnomalyAlerting().LstmAutoencoder().MaxTrainingEpochs().WithValue(value),
	})
}

type filterCndBuilderSpecAnomalyAlertingLstmAutoencoderMinTrainingEpochs struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecAnomalyAlertingLstmAutoencoderMinTrainingEpochs) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecAnomalyAlertingLstmAutoencoderMinTrainingEpochs) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecAnomalyAlertingLstmAutoencoderMinTrainingEpochs) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecAnomalyAlertingLstmAutoencoderMinTrainingEpochs) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecAnomalyAlertingLstmAutoencoderMinTrainingEpochs) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecAnomalyAlertingLstmAutoencoderMinTrainingEpochs) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecAnomalyAlertingLstmAutoencoderMinTrainingEpochs) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Spec().AnomalyAlerting().LstmAutoencoder().MinTrainingEpochs().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecAnomalyAlertingLstmAutoencoderMinTrainingEpochs) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Spec().AnomalyAlerting().LstmAutoencoder().MinTrainingEpochs().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecAnomalyAlertingLstmAutoencoderMinTrainingEpochs) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionFieldPathBuilder().Spec().AnomalyAlerting().LstmAutoencoder().MinTrainingEpochs().FieldPath(),
	})
}

func (b *filterCndBuilderSpecAnomalyAlertingLstmAutoencoderMinTrainingEpochs) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionFieldPathBuilder().Spec().AnomalyAlerting().LstmAutoencoder().MinTrainingEpochs().FieldPath(),
	})
}

func (b *filterCndBuilderSpecAnomalyAlertingLstmAutoencoderMinTrainingEpochs) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		TsCondition_FieldPathValue: NewTsConditionFieldPathBuilder().Spec().AnomalyAlerting().LstmAutoencoder().MinTrainingEpochs().WithValue(value),
	})
}

type filterCndBuilderSpecAnomalyAlertingLstmAutoencoderAcceptableTrainingError struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecAnomalyAlertingLstmAutoencoderAcceptableTrainingError) Eq(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecAnomalyAlertingLstmAutoencoderAcceptableTrainingError) Neq(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecAnomalyAlertingLstmAutoencoderAcceptableTrainingError) Gt(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecAnomalyAlertingLstmAutoencoderAcceptableTrainingError) Gte(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecAnomalyAlertingLstmAutoencoderAcceptableTrainingError) Lt(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecAnomalyAlertingLstmAutoencoderAcceptableTrainingError) Lte(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecAnomalyAlertingLstmAutoencoderAcceptableTrainingError) In(values []float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Spec().AnomalyAlerting().LstmAutoencoder().AcceptableTrainingError().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecAnomalyAlertingLstmAutoencoderAcceptableTrainingError) NotIn(values []float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Spec().AnomalyAlerting().LstmAutoencoder().AcceptableTrainingError().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecAnomalyAlertingLstmAutoencoderAcceptableTrainingError) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionFieldPathBuilder().Spec().AnomalyAlerting().LstmAutoencoder().AcceptableTrainingError().FieldPath(),
	})
}

func (b *filterCndBuilderSpecAnomalyAlertingLstmAutoencoderAcceptableTrainingError) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionFieldPathBuilder().Spec().AnomalyAlerting().LstmAutoencoder().AcceptableTrainingError().FieldPath(),
	})
}

func (b *filterCndBuilderSpecAnomalyAlertingLstmAutoencoderAcceptableTrainingError) compare(op gotenfilter.CompareOperator, value float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		TsCondition_FieldPathValue: NewTsConditionFieldPathBuilder().Spec().AnomalyAlerting().LstmAutoencoder().AcceptableTrainingError().WithValue(value),
	})
}

type filterCndBuilderSpecAnomalyAlertingLstmAutoencoderTrainingPeriod struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecAnomalyAlertingLstmAutoencoderTrainingPeriod) Eq(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecAnomalyAlertingLstmAutoencoderTrainingPeriod) Neq(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecAnomalyAlertingLstmAutoencoderTrainingPeriod) Gt(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecAnomalyAlertingLstmAutoencoderTrainingPeriod) Gte(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecAnomalyAlertingLstmAutoencoderTrainingPeriod) Lt(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecAnomalyAlertingLstmAutoencoderTrainingPeriod) Lte(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecAnomalyAlertingLstmAutoencoderTrainingPeriod) In(values []*durationpb.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Spec().AnomalyAlerting().LstmAutoencoder().TrainingPeriod().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecAnomalyAlertingLstmAutoencoderTrainingPeriod) NotIn(values []*durationpb.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Spec().AnomalyAlerting().LstmAutoencoder().TrainingPeriod().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecAnomalyAlertingLstmAutoencoderTrainingPeriod) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionFieldPathBuilder().Spec().AnomalyAlerting().LstmAutoencoder().TrainingPeriod().FieldPath(),
	})
}

func (b *filterCndBuilderSpecAnomalyAlertingLstmAutoencoderTrainingPeriod) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionFieldPathBuilder().Spec().AnomalyAlerting().LstmAutoencoder().TrainingPeriod().FieldPath(),
	})
}

func (b *filterCndBuilderSpecAnomalyAlertingLstmAutoencoderTrainingPeriod) compare(op gotenfilter.CompareOperator, value *durationpb.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		TsCondition_FieldPathValue: NewTsConditionFieldPathBuilder().Spec().AnomalyAlerting().LstmAutoencoder().TrainingPeriod().WithValue(value),
	})
}

type filterCndBuilderSpecAnomalyAlertingLstmAutoencoderCheckPeriodFraction struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecAnomalyAlertingLstmAutoencoderCheckPeriodFraction) Eq(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecAnomalyAlertingLstmAutoencoderCheckPeriodFraction) Neq(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecAnomalyAlertingLstmAutoencoderCheckPeriodFraction) Gt(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecAnomalyAlertingLstmAutoencoderCheckPeriodFraction) Gte(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecAnomalyAlertingLstmAutoencoderCheckPeriodFraction) Lt(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecAnomalyAlertingLstmAutoencoderCheckPeriodFraction) Lte(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecAnomalyAlertingLstmAutoencoderCheckPeriodFraction) In(values []float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Spec().AnomalyAlerting().LstmAutoencoder().CheckPeriodFraction().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecAnomalyAlertingLstmAutoencoderCheckPeriodFraction) NotIn(values []float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Spec().AnomalyAlerting().LstmAutoencoder().CheckPeriodFraction().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecAnomalyAlertingLstmAutoencoderCheckPeriodFraction) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionFieldPathBuilder().Spec().AnomalyAlerting().LstmAutoencoder().CheckPeriodFraction().FieldPath(),
	})
}

func (b *filterCndBuilderSpecAnomalyAlertingLstmAutoencoderCheckPeriodFraction) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionFieldPathBuilder().Spec().AnomalyAlerting().LstmAutoencoder().CheckPeriodFraction().FieldPath(),
	})
}

func (b *filterCndBuilderSpecAnomalyAlertingLstmAutoencoderCheckPeriodFraction) compare(op gotenfilter.CompareOperator, value float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		TsCondition_FieldPathValue: NewTsConditionFieldPathBuilder().Spec().AnomalyAlerting().LstmAutoencoder().CheckPeriodFraction().WithValue(value),
	})
}

type filterCndBuilderSpecAnomalyAlertingRaiseAfter struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecAnomalyAlertingRaiseAfter) Eq(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecAnomalyAlertingRaiseAfter) Neq(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecAnomalyAlertingRaiseAfter) Gt(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecAnomalyAlertingRaiseAfter) Gte(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecAnomalyAlertingRaiseAfter) Lt(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecAnomalyAlertingRaiseAfter) Lte(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecAnomalyAlertingRaiseAfter) In(values []*durationpb.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Spec().AnomalyAlerting().RaiseAfter().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecAnomalyAlertingRaiseAfter) NotIn(values []*durationpb.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Spec().AnomalyAlerting().RaiseAfter().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecAnomalyAlertingRaiseAfter) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionFieldPathBuilder().Spec().AnomalyAlerting().RaiseAfter().FieldPath(),
	})
}

func (b *filterCndBuilderSpecAnomalyAlertingRaiseAfter) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionFieldPathBuilder().Spec().AnomalyAlerting().RaiseAfter().FieldPath(),
	})
}

func (b *filterCndBuilderSpecAnomalyAlertingRaiseAfter) compare(op gotenfilter.CompareOperator, value *durationpb.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		TsCondition_FieldPathValue: NewTsConditionFieldPathBuilder().Spec().AnomalyAlerting().RaiseAfter().WithValue(value),
	})
}

type filterCndBuilderSpecAnomalyAlertingSilenceAfter struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecAnomalyAlertingSilenceAfter) Eq(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecAnomalyAlertingSilenceAfter) Neq(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecAnomalyAlertingSilenceAfter) Gt(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecAnomalyAlertingSilenceAfter) Gte(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecAnomalyAlertingSilenceAfter) Lt(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecAnomalyAlertingSilenceAfter) Lte(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecAnomalyAlertingSilenceAfter) In(values []*durationpb.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Spec().AnomalyAlerting().SilenceAfter().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecAnomalyAlertingSilenceAfter) NotIn(values []*durationpb.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Spec().AnomalyAlerting().SilenceAfter().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecAnomalyAlertingSilenceAfter) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionFieldPathBuilder().Spec().AnomalyAlerting().SilenceAfter().FieldPath(),
	})
}

func (b *filterCndBuilderSpecAnomalyAlertingSilenceAfter) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionFieldPathBuilder().Spec().AnomalyAlerting().SilenceAfter().FieldPath(),
	})
}

func (b *filterCndBuilderSpecAnomalyAlertingSilenceAfter) compare(op gotenfilter.CompareOperator, value *durationpb.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		TsCondition_FieldPathValue: NewTsConditionFieldPathBuilder().Spec().AnomalyAlerting().SilenceAfter().WithValue(value),
	})
}

type filterCndBuilderInternal struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderInternal) Eq(value *TsCondition_Internal) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderInternal) Neq(value *TsCondition_Internal) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderInternal) Gt(value *TsCondition_Internal) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderInternal) Gte(value *TsCondition_Internal) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderInternal) Lt(value *TsCondition_Internal) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderInternal) Lte(value *TsCondition_Internal) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderInternal) In(values []*TsCondition_Internal) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Internal().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInternal) NotIn(values []*TsCondition_Internal) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Internal().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInternal) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionFieldPathBuilder().Internal().FieldPath(),
	})
}

func (b *filterCndBuilderInternal) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionFieldPathBuilder().Internal().FieldPath(),
	})
}

func (b *filterCndBuilderInternal) compare(op gotenfilter.CompareOperator, value *TsCondition_Internal) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		TsCondition_FieldPathValue: NewTsConditionFieldPathBuilder().Internal().WithValue(value),
	})
}

func (b *filterCndBuilderInternal) CommonKeyKset() *filterCndBuilderInternalCommonKeyKset {
	return &filterCndBuilderInternalCommonKeyKset{builder: b.builder}
}

func (b *filterCndBuilderInternal) EntrySpecGeneration() *filterCndBuilderInternalEntrySpecGeneration {
	return &filterCndBuilderInternalEntrySpecGeneration{builder: b.builder}
}

func (b *filterCndBuilderInternal) AlertingLocation() *filterCndBuilderInternalAlertingLocation {
	return &filterCndBuilderInternalAlertingLocation{builder: b.builder}
}

type filterCndBuilderInternalCommonKeyKset struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderInternalCommonKeyKset) Eq(value []byte) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderInternalCommonKeyKset) Neq(value []byte) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderInternalCommonKeyKset) Gt(value []byte) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderInternalCommonKeyKset) Gte(value []byte) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderInternalCommonKeyKset) Lt(value []byte) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderInternalCommonKeyKset) Lte(value []byte) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderInternalCommonKeyKset) In(values [][]byte) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Internal().CommonKeyKset().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInternalCommonKeyKset) NotIn(values [][]byte) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Internal().CommonKeyKset().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInternalCommonKeyKset) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionFieldPathBuilder().Internal().CommonKeyKset().FieldPath(),
	})
}

func (b *filterCndBuilderInternalCommonKeyKset) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionFieldPathBuilder().Internal().CommonKeyKset().FieldPath(),
	})
}

func (b *filterCndBuilderInternalCommonKeyKset) compare(op gotenfilter.CompareOperator, value []byte) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		TsCondition_FieldPathValue: NewTsConditionFieldPathBuilder().Internal().CommonKeyKset().WithValue(value),
	})
}

type filterCndBuilderInternalEntrySpecGeneration struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderInternalEntrySpecGeneration) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderInternalEntrySpecGeneration) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderInternalEntrySpecGeneration) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderInternalEntrySpecGeneration) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderInternalEntrySpecGeneration) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderInternalEntrySpecGeneration) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderInternalEntrySpecGeneration) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Internal().EntrySpecGeneration().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInternalEntrySpecGeneration) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Internal().EntrySpecGeneration().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInternalEntrySpecGeneration) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionFieldPathBuilder().Internal().EntrySpecGeneration().FieldPath(),
	})
}

func (b *filterCndBuilderInternalEntrySpecGeneration) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionFieldPathBuilder().Internal().EntrySpecGeneration().FieldPath(),
	})
}

func (b *filterCndBuilderInternalEntrySpecGeneration) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		TsCondition_FieldPathValue: NewTsConditionFieldPathBuilder().Internal().EntrySpecGeneration().WithValue(value),
	})
}

type filterCndBuilderInternalAlertingLocation struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderInternalAlertingLocation) Eq(value policy.Policy_Spec_ProcessingLocation) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderInternalAlertingLocation) Neq(value policy.Policy_Spec_ProcessingLocation) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderInternalAlertingLocation) Gt(value policy.Policy_Spec_ProcessingLocation) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderInternalAlertingLocation) Gte(value policy.Policy_Spec_ProcessingLocation) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderInternalAlertingLocation) Lt(value policy.Policy_Spec_ProcessingLocation) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderInternalAlertingLocation) Lte(value policy.Policy_Spec_ProcessingLocation) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderInternalAlertingLocation) In(values []policy.Policy_Spec_ProcessingLocation) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Internal().AlertingLocation().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInternalAlertingLocation) NotIn(values []policy.Policy_Spec_ProcessingLocation) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().Internal().AlertingLocation().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInternalAlertingLocation) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionFieldPathBuilder().Internal().AlertingLocation().FieldPath(),
	})
}

func (b *filterCndBuilderInternalAlertingLocation) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionFieldPathBuilder().Internal().AlertingLocation().FieldPath(),
	})
}

func (b *filterCndBuilderInternalAlertingLocation) compare(op gotenfilter.CompareOperator, value policy.Policy_Spec_ProcessingLocation) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		TsCondition_FieldPathValue: NewTsConditionFieldPathBuilder().Internal().AlertingLocation().WithValue(value),
	})
}

type filterCndBuilderFilterSelector struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderFilterSelector) Eq(value *TsCondition_Selector) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderFilterSelector) Neq(value *TsCondition_Selector) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderFilterSelector) Gt(value *TsCondition_Selector) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderFilterSelector) Gte(value *TsCondition_Selector) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderFilterSelector) Lt(value *TsCondition_Selector) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderFilterSelector) Lte(value *TsCondition_Selector) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderFilterSelector) In(values []*TsCondition_Selector) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().FilterSelector().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderFilterSelector) NotIn(values []*TsCondition_Selector) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().FilterSelector().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderFilterSelector) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionFieldPathBuilder().FilterSelector().FieldPath(),
	})
}

func (b *filterCndBuilderFilterSelector) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionFieldPathBuilder().FilterSelector().FieldPath(),
	})
}

func (b *filterCndBuilderFilterSelector) compare(op gotenfilter.CompareOperator, value *TsCondition_Selector) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		TsCondition_FieldPathValue: NewTsConditionFieldPathBuilder().FilterSelector().WithValue(value),
	})
}

func (b *filterCndBuilderFilterSelector) MetricTypes() *filterCndBuilderFilterSelectorMetricTypes {
	return &filterCndBuilderFilterSelectorMetricTypes{builder: b.builder}
}

func (b *filterCndBuilderFilterSelector) ResourceTypes() *filterCndBuilderFilterSelectorResourceTypes {
	return &filterCndBuilderFilterSelectorResourceTypes{builder: b.builder}
}

func (b *filterCndBuilderFilterSelector) CommonMetricLabels() *filterCndBuilderFilterSelectorCommonMetricLabels {
	return &filterCndBuilderFilterSelectorCommonMetricLabels{builder: b.builder}
}

func (b *filterCndBuilderFilterSelector) CommonResourceLabels() *filterCndBuilderFilterSelectorCommonResourceLabels {
	return &filterCndBuilderFilterSelectorCommonResourceLabels{builder: b.builder}
}

type filterCndBuilderFilterSelectorMetricTypes struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderFilterSelectorMetricTypes) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderFilterSelectorMetricTypes) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderFilterSelectorMetricTypes) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderFilterSelectorMetricTypes) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderFilterSelectorMetricTypes) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderFilterSelectorMetricTypes) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderFilterSelectorMetricTypes) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().FilterSelector().MetricTypes().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderFilterSelectorMetricTypes) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().FilterSelector().MetricTypes().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderFilterSelectorMetricTypes) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionFieldPathBuilder().FilterSelector().MetricTypes().FieldPath(),
	})
}

func (b *filterCndBuilderFilterSelectorMetricTypes) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionFieldPathBuilder().FilterSelector().MetricTypes().FieldPath(),
	})
}

func (b *filterCndBuilderFilterSelectorMetricTypes) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewTsConditionFieldPathBuilder().FilterSelector().MetricTypes().FieldPath(),
		Value:     NewTsConditionFieldPathBuilder().FilterSelector().MetricTypes().WithItemValue(value),
	})
}

func (b *filterCndBuilderFilterSelectorMetricTypes) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewTsConditionFieldPathBuilder().FilterSelector().MetricTypes()
	itemValues := make([]TsCondition_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewTsConditionFieldPathBuilder().FilterSelector().MetricTypes().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderFilterSelectorMetricTypes) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewTsConditionFieldPathBuilder().FilterSelector().MetricTypes()
	itemValues := make([]TsCondition_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewTsConditionFieldPathBuilder().FilterSelector().MetricTypes().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderFilterSelectorMetricTypes) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		TsCondition_FieldPathValue: NewTsConditionFieldPathBuilder().FilterSelector().MetricTypes().WithValue(value),
	})
}

type filterCndBuilderFilterSelectorResourceTypes struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderFilterSelectorResourceTypes) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderFilterSelectorResourceTypes) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderFilterSelectorResourceTypes) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderFilterSelectorResourceTypes) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderFilterSelectorResourceTypes) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderFilterSelectorResourceTypes) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderFilterSelectorResourceTypes) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().FilterSelector().ResourceTypes().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderFilterSelectorResourceTypes) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().FilterSelector().ResourceTypes().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderFilterSelectorResourceTypes) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionFieldPathBuilder().FilterSelector().ResourceTypes().FieldPath(),
	})
}

func (b *filterCndBuilderFilterSelectorResourceTypes) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionFieldPathBuilder().FilterSelector().ResourceTypes().FieldPath(),
	})
}

func (b *filterCndBuilderFilterSelectorResourceTypes) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewTsConditionFieldPathBuilder().FilterSelector().ResourceTypes().FieldPath(),
		Value:     NewTsConditionFieldPathBuilder().FilterSelector().ResourceTypes().WithItemValue(value),
	})
}

func (b *filterCndBuilderFilterSelectorResourceTypes) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewTsConditionFieldPathBuilder().FilterSelector().ResourceTypes()
	itemValues := make([]TsCondition_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewTsConditionFieldPathBuilder().FilterSelector().ResourceTypes().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderFilterSelectorResourceTypes) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewTsConditionFieldPathBuilder().FilterSelector().ResourceTypes()
	itemValues := make([]TsCondition_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewTsConditionFieldPathBuilder().FilterSelector().ResourceTypes().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderFilterSelectorResourceTypes) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		TsCondition_FieldPathValue: NewTsConditionFieldPathBuilder().FilterSelector().ResourceTypes().WithValue(value),
	})
}

type filterCndBuilderFilterSelectorCommonMetricLabels struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderFilterSelectorCommonMetricLabels) Eq(value map[string]*TsCondition_Selector_Strings) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderFilterSelectorCommonMetricLabels) Neq(value map[string]*TsCondition_Selector_Strings) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderFilterSelectorCommonMetricLabels) Gt(value map[string]*TsCondition_Selector_Strings) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderFilterSelectorCommonMetricLabels) Gte(value map[string]*TsCondition_Selector_Strings) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderFilterSelectorCommonMetricLabels) Lt(value map[string]*TsCondition_Selector_Strings) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderFilterSelectorCommonMetricLabels) Lte(value map[string]*TsCondition_Selector_Strings) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderFilterSelectorCommonMetricLabels) In(values []map[string]*TsCondition_Selector_Strings) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().FilterSelector().CommonMetricLabels().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderFilterSelectorCommonMetricLabels) NotIn(values []map[string]*TsCondition_Selector_Strings) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().FilterSelector().CommonMetricLabels().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderFilterSelectorCommonMetricLabels) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionFieldPathBuilder().FilterSelector().CommonMetricLabels().FieldPath(),
	})
}

func (b *filterCndBuilderFilterSelectorCommonMetricLabels) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionFieldPathBuilder().FilterSelector().CommonMetricLabels().FieldPath(),
	})
}

func (b *filterCndBuilderFilterSelectorCommonMetricLabels) compare(op gotenfilter.CompareOperator, value map[string]*TsCondition_Selector_Strings) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		TsCondition_FieldPathValue: NewTsConditionFieldPathBuilder().FilterSelector().CommonMetricLabels().WithValue(value),
	})
}

func (b *filterCndBuilderFilterSelectorCommonMetricLabels) WithKey(key string) *mapFilterCndBuilderFilterSelectorCommonMetricLabels {
	return &mapFilterCndBuilderFilterSelectorCommonMetricLabels{builder: b.builder, key: key}
}

type mapFilterCndBuilderFilterSelectorCommonMetricLabels struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderFilterSelectorCommonMetricLabels) Eq(value *TsCondition_Selector_Strings) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderFilterSelectorCommonMetricLabels) Neq(value *TsCondition_Selector_Strings) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderFilterSelectorCommonMetricLabels) Gt(value *TsCondition_Selector_Strings) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderFilterSelectorCommonMetricLabels) Gte(value *TsCondition_Selector_Strings) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderFilterSelectorCommonMetricLabels) Lt(value *TsCondition_Selector_Strings) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderFilterSelectorCommonMetricLabels) Lte(value *TsCondition_Selector_Strings) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderFilterSelectorCommonMetricLabels) In(values []*TsCondition_Selector_Strings) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().FilterSelector().CommonMetricLabels().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderFilterSelectorCommonMetricLabels) NotIn(values []*TsCondition_Selector_Strings) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().FilterSelector().CommonMetricLabels().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderFilterSelectorCommonMetricLabels) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionFieldPathBuilder().FilterSelector().CommonMetricLabels().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderFilterSelectorCommonMetricLabels) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionFieldPathBuilder().FilterSelector().CommonMetricLabels().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderFilterSelectorCommonMetricLabels) compare(op gotenfilter.CompareOperator, value *TsCondition_Selector_Strings) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		TsCondition_FieldPathValue: NewTsConditionFieldPathBuilder().FilterSelector().CommonMetricLabels().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderFilterSelectorCommonResourceLabels struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderFilterSelectorCommonResourceLabels) Eq(value map[string]*TsCondition_Selector_Strings) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderFilterSelectorCommonResourceLabels) Neq(value map[string]*TsCondition_Selector_Strings) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderFilterSelectorCommonResourceLabels) Gt(value map[string]*TsCondition_Selector_Strings) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderFilterSelectorCommonResourceLabels) Gte(value map[string]*TsCondition_Selector_Strings) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderFilterSelectorCommonResourceLabels) Lt(value map[string]*TsCondition_Selector_Strings) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderFilterSelectorCommonResourceLabels) Lte(value map[string]*TsCondition_Selector_Strings) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderFilterSelectorCommonResourceLabels) In(values []map[string]*TsCondition_Selector_Strings) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().FilterSelector().CommonResourceLabels().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderFilterSelectorCommonResourceLabels) NotIn(values []map[string]*TsCondition_Selector_Strings) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().FilterSelector().CommonResourceLabels().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderFilterSelectorCommonResourceLabels) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionFieldPathBuilder().FilterSelector().CommonResourceLabels().FieldPath(),
	})
}

func (b *filterCndBuilderFilterSelectorCommonResourceLabels) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionFieldPathBuilder().FilterSelector().CommonResourceLabels().FieldPath(),
	})
}

func (b *filterCndBuilderFilterSelectorCommonResourceLabels) compare(op gotenfilter.CompareOperator, value map[string]*TsCondition_Selector_Strings) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		TsCondition_FieldPathValue: NewTsConditionFieldPathBuilder().FilterSelector().CommonResourceLabels().WithValue(value),
	})
}

func (b *filterCndBuilderFilterSelectorCommonResourceLabels) WithKey(key string) *mapFilterCndBuilderFilterSelectorCommonResourceLabels {
	return &mapFilterCndBuilderFilterSelectorCommonResourceLabels{builder: b.builder, key: key}
}

type mapFilterCndBuilderFilterSelectorCommonResourceLabels struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderFilterSelectorCommonResourceLabels) Eq(value *TsCondition_Selector_Strings) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderFilterSelectorCommonResourceLabels) Neq(value *TsCondition_Selector_Strings) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderFilterSelectorCommonResourceLabels) Gt(value *TsCondition_Selector_Strings) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderFilterSelectorCommonResourceLabels) Gte(value *TsCondition_Selector_Strings) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderFilterSelectorCommonResourceLabels) Lt(value *TsCondition_Selector_Strings) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderFilterSelectorCommonResourceLabels) Lte(value *TsCondition_Selector_Strings) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderFilterSelectorCommonResourceLabels) In(values []*TsCondition_Selector_Strings) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().FilterSelector().CommonResourceLabels().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderFilterSelectorCommonResourceLabels) NotIn(values []*TsCondition_Selector_Strings) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		TsCondition_FieldPathArrayOfValues: NewTsConditionFieldPathBuilder().FilterSelector().CommonResourceLabels().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderFilterSelectorCommonResourceLabels) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewTsConditionFieldPathBuilder().FilterSelector().CommonResourceLabels().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderFilterSelectorCommonResourceLabels) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewTsConditionFieldPathBuilder().FilterSelector().CommonResourceLabels().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderFilterSelectorCommonResourceLabels) compare(op gotenfilter.CompareOperator, value *TsCondition_Selector_Strings) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		TsCondition_FieldPathValue: NewTsConditionFieldPathBuilder().FilterSelector().CommonResourceLabels().WithKey(b.key).WithValue(value),
	})
}
