// Code generated by protoc-gen-goten-object
// File: edgelq/alerting/proto/v1/ts_condition.proto
// DO NOT EDIT!!!

package ts_condition

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	googlefieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	rcommon "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/common"
	document "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/document"
	log_condition_template "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/log_condition_template"
	policy "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/policy"
	meta "github.com/cloudwan/goten-sdk/types/meta"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = googlefieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &document.Document{}
	_ = &log_condition_template.LogConditionTemplate{}
	_ = &policy.Policy{}
	_ = &rcommon.LogCndSpec{}
	_ = &fieldmaskpb.FieldMask{}
	_ = &meta.Meta{}
)

func (o *TsCondition) GotenObjectExt() {}

func (o *TsCondition) MakeFullFieldMask() *TsCondition_FieldMask {
	return FullTsCondition_FieldMask()
}

func (o *TsCondition) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullTsCondition_FieldMask()
}

func (o *TsCondition) MakeDiffFieldMask(other *TsCondition) *TsCondition_FieldMask {
	if o == nil && other == nil {
		return &TsCondition_FieldMask{}
	}
	if o == nil || other == nil {
		return FullTsCondition_FieldMask()
	}

	res := &TsCondition_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &TsCondition_FieldTerminalPath{selector: TsCondition_FieldPathSelectorName})
	}
	{
		subMask := o.GetMetadata().MakeDiffFieldMask(other.GetMetadata())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &TsCondition_FieldTerminalPath{selector: TsCondition_FieldPathSelectorMetadata})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &TsCondition_FieldSubPath{selector: TsCondition_FieldPathSelectorMetadata, subPath: subpath})
			}
		}
	}
	if o.GetDisplayName() != other.GetDisplayName() {
		res.Paths = append(res.Paths, &TsCondition_FieldTerminalPath{selector: TsCondition_FieldPathSelectorDisplayName})
	}
	if o.GetDescription() != other.GetDescription() {
		res.Paths = append(res.Paths, &TsCondition_FieldTerminalPath{selector: TsCondition_FieldPathSelectorDescription})
	}

	if len(o.GetSupportingDocs()) == len(other.GetSupportingDocs()) {
		for i, lValue := range o.GetSupportingDocs() {
			rValue := other.GetSupportingDocs()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &TsCondition_FieldTerminalPath{selector: TsCondition_FieldPathSelectorSupportingDocs})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &TsCondition_FieldTerminalPath{selector: TsCondition_FieldPathSelectorSupportingDocs})
	}
	{
		subMask := o.GetSpec().MakeDiffFieldMask(other.GetSpec())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &TsCondition_FieldTerminalPath{selector: TsCondition_FieldPathSelectorSpec})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &TsCondition_FieldSubPath{selector: TsCondition_FieldPathSelectorSpec, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetInternal().MakeDiffFieldMask(other.GetInternal())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &TsCondition_FieldTerminalPath{selector: TsCondition_FieldPathSelectorInternal})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &TsCondition_FieldSubPath{selector: TsCondition_FieldPathSelectorInternal, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetFilterSelector().MakeDiffFieldMask(other.GetFilterSelector())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &TsCondition_FieldTerminalPath{selector: TsCondition_FieldPathSelectorFilterSelector})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &TsCondition_FieldSubPath{selector: TsCondition_FieldPathSelectorFilterSelector, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetTemplateSource().MakeDiffFieldMask(other.GetTemplateSource())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &TsCondition_FieldTerminalPath{selector: TsCondition_FieldPathSelectorTemplateSource})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &TsCondition_FieldSubPath{selector: TsCondition_FieldPathSelectorTemplateSource, subPath: subpath})
			}
		}
	}
	return res
}

func (o *TsCondition) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*TsCondition))
}

func (o *TsCondition) Clone() *TsCondition {
	if o == nil {
		return nil
	}
	result := &TsCondition{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &Name{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Metadata = o.Metadata.Clone()
	result.DisplayName = o.DisplayName
	result.Description = o.Description
	result.SupportingDocs = make([]*document.Reference, len(o.SupportingDocs))
	for i, sourceValue := range o.SupportingDocs {
		if sourceValue == nil {
			result.SupportingDocs[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.SupportingDocs[i] = &document.Reference{}
			if err := result.SupportingDocs[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	result.Spec = o.Spec.Clone()
	result.Internal = o.Internal.Clone()
	result.FilterSelector = o.FilterSelector.Clone()
	result.TemplateSource = o.TemplateSource.Clone()
	return result
}

func (o *TsCondition) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *TsCondition) Merge(source *TsCondition) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &Name{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetMetadata() != nil {
		if o.Metadata == nil {
			o.Metadata = new(meta.Meta)
		}
		o.Metadata.Merge(source.GetMetadata())
	}
	o.DisplayName = source.GetDisplayName()
	o.Description = source.GetDescription()
	for _, sourceValue := range source.GetSupportingDocs() {
		exists := false
		for _, currentValue := range o.SupportingDocs {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *document.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &document.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.SupportingDocs = append(o.SupportingDocs, newDstElement)
		}
	}

	if source.GetSpec() != nil {
		if o.Spec == nil {
			o.Spec = new(rcommon.TsCndSpec)
		}
		o.Spec.Merge(source.GetSpec())
	}
	if source.GetInternal() != nil {
		if o.Internal == nil {
			o.Internal = new(TsCondition_Internal)
		}
		o.Internal.Merge(source.GetInternal())
	}
	if source.GetFilterSelector() != nil {
		if o.FilterSelector == nil {
			o.FilterSelector = new(TsCondition_Selector)
		}
		o.FilterSelector.Merge(source.GetFilterSelector())
	}
	if source.GetTemplateSource() != nil {
		if o.TemplateSource == nil {
			o.TemplateSource = new(TsCondition_TemplateSource)
		}
		o.TemplateSource.Merge(source.GetTemplateSource())
	}
}

func (o *TsCondition) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*TsCondition))
}

func (o *TsCondition_Internal) GotenObjectExt() {}

func (o *TsCondition_Internal) MakeFullFieldMask() *TsCondition_Internal_FieldMask {
	return FullTsCondition_Internal_FieldMask()
}

func (o *TsCondition_Internal) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullTsCondition_Internal_FieldMask()
}

func (o *TsCondition_Internal) MakeDiffFieldMask(other *TsCondition_Internal) *TsCondition_Internal_FieldMask {
	if o == nil && other == nil {
		return &TsCondition_Internal_FieldMask{}
	}
	if o == nil || other == nil {
		return FullTsCondition_Internal_FieldMask()
	}

	res := &TsCondition_Internal_FieldMask{}
	if string(o.GetCommonKeyKset()) != string(other.GetCommonKeyKset()) {
		res.Paths = append(res.Paths, &TsConditionInternal_FieldTerminalPath{selector: TsConditionInternal_FieldPathSelectorCommonKeyKset})
	}
	if o.GetEntrySpecGeneration() != other.GetEntrySpecGeneration() {
		res.Paths = append(res.Paths, &TsConditionInternal_FieldTerminalPath{selector: TsConditionInternal_FieldPathSelectorEntrySpecGeneration})
	}
	if o.GetAlertingLocation() != other.GetAlertingLocation() {
		res.Paths = append(res.Paths, &TsConditionInternal_FieldTerminalPath{selector: TsConditionInternal_FieldPathSelectorAlertingLocation})
	}
	return res
}

func (o *TsCondition_Internal) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*TsCondition_Internal))
}

func (o *TsCondition_Internal) Clone() *TsCondition_Internal {
	if o == nil {
		return nil
	}
	result := &TsCondition_Internal{}
	result.CommonKeyKset = make([]byte, len(o.CommonKeyKset))
	for i, bt := range o.CommonKeyKset {
		result.CommonKeyKset[i] = bt
	}
	result.EntrySpecGeneration = o.EntrySpecGeneration
	result.AlertingLocation = o.AlertingLocation
	return result
}

func (o *TsCondition_Internal) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *TsCondition_Internal) Merge(source *TsCondition_Internal) {
	o.CommonKeyKset = make([]byte, len(source.GetCommonKeyKset()))
	for i, bt := range source.GetCommonKeyKset() {
		o.CommonKeyKset[i] = bt
	}
	o.EntrySpecGeneration = source.GetEntrySpecGeneration()
	o.AlertingLocation = source.GetAlertingLocation()
}

func (o *TsCondition_Internal) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*TsCondition_Internal))
}

func (o *TsCondition_Selector) GotenObjectExt() {}

func (o *TsCondition_Selector) MakeFullFieldMask() *TsCondition_Selector_FieldMask {
	return FullTsCondition_Selector_FieldMask()
}

func (o *TsCondition_Selector) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullTsCondition_Selector_FieldMask()
}

func (o *TsCondition_Selector) MakeDiffFieldMask(other *TsCondition_Selector) *TsCondition_Selector_FieldMask {
	if o == nil && other == nil {
		return &TsCondition_Selector_FieldMask{}
	}
	if o == nil || other == nil {
		return FullTsCondition_Selector_FieldMask()
	}

	res := &TsCondition_Selector_FieldMask{}

	if len(o.GetMetricTypes()) == len(other.GetMetricTypes()) {
		for i, lValue := range o.GetMetricTypes() {
			rValue := other.GetMetricTypes()[i]
			if lValue != rValue {
				res.Paths = append(res.Paths, &TsConditionSelector_FieldTerminalPath{selector: TsConditionSelector_FieldPathSelectorMetricTypes})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &TsConditionSelector_FieldTerminalPath{selector: TsConditionSelector_FieldPathSelectorMetricTypes})
	}

	if len(o.GetResourceTypes()) == len(other.GetResourceTypes()) {
		for i, lValue := range o.GetResourceTypes() {
			rValue := other.GetResourceTypes()[i]
			if lValue != rValue {
				res.Paths = append(res.Paths, &TsConditionSelector_FieldTerminalPath{selector: TsConditionSelector_FieldPathSelectorResourceTypes})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &TsConditionSelector_FieldTerminalPath{selector: TsConditionSelector_FieldPathSelectorResourceTypes})
	}

	if len(o.GetCommonMetricLabels()) == len(other.GetCommonMetricLabels()) {
		for i, lValue := range o.GetCommonMetricLabels() {
			rValue := other.GetCommonMetricLabels()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &TsConditionSelector_FieldTerminalPath{selector: TsConditionSelector_FieldPathSelectorCommonMetricLabels})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &TsConditionSelector_FieldTerminalPath{selector: TsConditionSelector_FieldPathSelectorCommonMetricLabels})
	}

	if len(o.GetCommonResourceLabels()) == len(other.GetCommonResourceLabels()) {
		for i, lValue := range o.GetCommonResourceLabels() {
			rValue := other.GetCommonResourceLabels()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &TsConditionSelector_FieldTerminalPath{selector: TsConditionSelector_FieldPathSelectorCommonResourceLabels})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &TsConditionSelector_FieldTerminalPath{selector: TsConditionSelector_FieldPathSelectorCommonResourceLabels})
	}
	return res
}

func (o *TsCondition_Selector) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*TsCondition_Selector))
}

func (o *TsCondition_Selector) Clone() *TsCondition_Selector {
	if o == nil {
		return nil
	}
	result := &TsCondition_Selector{}
	result.MetricTypes = make([]string, len(o.MetricTypes))
	for i, sourceValue := range o.MetricTypes {
		result.MetricTypes[i] = sourceValue
	}
	result.ResourceTypes = make([]string, len(o.ResourceTypes))
	for i, sourceValue := range o.ResourceTypes {
		result.ResourceTypes[i] = sourceValue
	}
	result.CommonMetricLabels = map[string]*TsCondition_Selector_Strings{}
	for key, sourceValue := range o.CommonMetricLabels {
		result.CommonMetricLabels[key] = sourceValue.Clone()
	}
	result.CommonResourceLabels = map[string]*TsCondition_Selector_Strings{}
	for key, sourceValue := range o.CommonResourceLabels {
		result.CommonResourceLabels[key] = sourceValue.Clone()
	}
	return result
}

func (o *TsCondition_Selector) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *TsCondition_Selector) Merge(source *TsCondition_Selector) {
	for _, sourceValue := range source.GetMetricTypes() {
		exists := false
		for _, currentValue := range o.MetricTypes {
			if currentValue == sourceValue {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement string
			newDstElement = sourceValue
			o.MetricTypes = append(o.MetricTypes, newDstElement)
		}
	}

	for _, sourceValue := range source.GetResourceTypes() {
		exists := false
		for _, currentValue := range o.ResourceTypes {
			if currentValue == sourceValue {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement string
			newDstElement = sourceValue
			o.ResourceTypes = append(o.ResourceTypes, newDstElement)
		}
	}

	if source.GetCommonMetricLabels() != nil {
		if o.CommonMetricLabels == nil {
			o.CommonMetricLabels = make(map[string]*TsCondition_Selector_Strings, len(source.GetCommonMetricLabels()))
		}
		for key, sourceValue := range source.GetCommonMetricLabels() {
			if sourceValue != nil {
				if o.CommonMetricLabels[key] == nil {
					o.CommonMetricLabels[key] = new(TsCondition_Selector_Strings)
				}
				o.CommonMetricLabels[key].Merge(sourceValue)
			}
		}
	}
	if source.GetCommonResourceLabels() != nil {
		if o.CommonResourceLabels == nil {
			o.CommonResourceLabels = make(map[string]*TsCondition_Selector_Strings, len(source.GetCommonResourceLabels()))
		}
		for key, sourceValue := range source.GetCommonResourceLabels() {
			if sourceValue != nil {
				if o.CommonResourceLabels[key] == nil {
					o.CommonResourceLabels[key] = new(TsCondition_Selector_Strings)
				}
				o.CommonResourceLabels[key].Merge(sourceValue)
			}
		}
	}
}

func (o *TsCondition_Selector) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*TsCondition_Selector))
}

func (o *TsCondition_TemplateSource) GotenObjectExt() {}

func (o *TsCondition_TemplateSource) MakeFullFieldMask() *TsCondition_TemplateSource_FieldMask {
	return FullTsCondition_TemplateSource_FieldMask()
}

func (o *TsCondition_TemplateSource) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullTsCondition_TemplateSource_FieldMask()
}

func (o *TsCondition_TemplateSource) MakeDiffFieldMask(other *TsCondition_TemplateSource) *TsCondition_TemplateSource_FieldMask {
	if o == nil && other == nil {
		return &TsCondition_TemplateSource_FieldMask{}
	}
	if o == nil || other == nil {
		return FullTsCondition_TemplateSource_FieldMask()
	}

	res := &TsCondition_TemplateSource_FieldMask{}
	if o.GetTemplate().String() != other.GetTemplate().String() {
		res.Paths = append(res.Paths, &TsConditionTemplateSource_FieldTerminalPath{selector: TsConditionTemplateSource_FieldPathSelectorTemplate})
	}
	if !proto.Equal(o.GetUpdatedFields(), other.GetUpdatedFields()) {
		res.Paths = append(res.Paths, &TsConditionTemplateSource_FieldTerminalPath{selector: TsConditionTemplateSource_FieldPathSelectorUpdatedFields})
	}
	return res
}

func (o *TsCondition_TemplateSource) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*TsCondition_TemplateSource))
}

func (o *TsCondition_TemplateSource) Clone() *TsCondition_TemplateSource {
	if o == nil {
		return nil
	}
	result := &TsCondition_TemplateSource{}
	if o.Template == nil {
		result.Template = nil
	} else if data, err := o.Template.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Template = &log_condition_template.Reference{}
		if err := result.Template.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.UpdatedFields = proto.Clone(o.UpdatedFields).(*fieldmaskpb.FieldMask)
	return result
}

func (o *TsCondition_TemplateSource) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *TsCondition_TemplateSource) Merge(source *TsCondition_TemplateSource) {
	if source.GetTemplate() != nil {
		if data, err := source.GetTemplate().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Template = &log_condition_template.Reference{}
			if err := o.Template.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Template = nil
	}
	if source.GetUpdatedFields() != nil {
		if o.UpdatedFields == nil {
			o.UpdatedFields = new(fieldmaskpb.FieldMask)
		}
		proto.Merge(o.UpdatedFields, source.GetUpdatedFields())
	}
}

func (o *TsCondition_TemplateSource) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*TsCondition_TemplateSource))
}

func (o *TsCondition_Selector_Strings) GotenObjectExt() {}

func (o *TsCondition_Selector_Strings) MakeFullFieldMask() *TsCondition_Selector_Strings_FieldMask {
	return FullTsCondition_Selector_Strings_FieldMask()
}

func (o *TsCondition_Selector_Strings) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullTsCondition_Selector_Strings_FieldMask()
}

func (o *TsCondition_Selector_Strings) MakeDiffFieldMask(other *TsCondition_Selector_Strings) *TsCondition_Selector_Strings_FieldMask {
	if o == nil && other == nil {
		return &TsCondition_Selector_Strings_FieldMask{}
	}
	if o == nil || other == nil {
		return FullTsCondition_Selector_Strings_FieldMask()
	}

	res := &TsCondition_Selector_Strings_FieldMask{}

	if len(o.GetValues()) == len(other.GetValues()) {
		for i, lValue := range o.GetValues() {
			rValue := other.GetValues()[i]
			if lValue != rValue {
				res.Paths = append(res.Paths, &TsConditionSelectorStrings_FieldTerminalPath{selector: TsConditionSelectorStrings_FieldPathSelectorValues})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &TsConditionSelectorStrings_FieldTerminalPath{selector: TsConditionSelectorStrings_FieldPathSelectorValues})
	}
	return res
}

func (o *TsCondition_Selector_Strings) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*TsCondition_Selector_Strings))
}

func (o *TsCondition_Selector_Strings) Clone() *TsCondition_Selector_Strings {
	if o == nil {
		return nil
	}
	result := &TsCondition_Selector_Strings{}
	result.Values = make([]string, len(o.Values))
	for i, sourceValue := range o.Values {
		result.Values[i] = sourceValue
	}
	return result
}

func (o *TsCondition_Selector_Strings) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *TsCondition_Selector_Strings) Merge(source *TsCondition_Selector_Strings) {
	for _, sourceValue := range source.GetValues() {
		exists := false
		for _, currentValue := range o.Values {
			if currentValue == sourceValue {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement string
			newDstElement = sourceValue
			o.Values = append(o.Values, newDstElement)
		}
	}

}

func (o *TsCondition_Selector_Strings) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*TsCondition_Selector_Strings))
}
