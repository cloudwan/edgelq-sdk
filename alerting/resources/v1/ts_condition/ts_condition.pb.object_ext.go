// Code generated by protoc-gen-goten-object
// File: edgelq/alerting/proto/v1/ts_condition.proto
// DO NOT EDIT!!!

package ts_condition

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	googlefieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	document "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/document"
	policy "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/policy"
	monitoring_common "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/common"
	monitoring_time_serie "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/time_serie"
	meta "github.com/cloudwan/goten-sdk/types/meta"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = googlefieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &document.Document{}
	_ = &policy.Policy{}
	_ = &monitoring_common.LabelDescriptor{}
	_ = &monitoring_time_serie.Point{}
	_ = &durationpb.Duration{}
	_ = &meta.Meta{}
)

func (o *TsCondition) GotenObjectExt() {}

func (o *TsCondition) MakeFullFieldMask() *TsCondition_FieldMask {
	return FullTsCondition_FieldMask()
}

func (o *TsCondition) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullTsCondition_FieldMask()
}

func (o *TsCondition) MakeDiffFieldMask(other *TsCondition) *TsCondition_FieldMask {
	if o == nil && other == nil {
		return &TsCondition_FieldMask{}
	}
	if o == nil || other == nil {
		return FullTsCondition_FieldMask()
	}

	res := &TsCondition_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &TsCondition_FieldTerminalPath{selector: TsCondition_FieldPathSelectorName})
	}
	{
		subMask := o.GetMetadata().MakeDiffFieldMask(other.GetMetadata())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &TsCondition_FieldTerminalPath{selector: TsCondition_FieldPathSelectorMetadata})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &TsCondition_FieldSubPath{selector: TsCondition_FieldPathSelectorMetadata, subPath: subpath})
			}
		}
	}
	if o.GetDisplayName() != other.GetDisplayName() {
		res.Paths = append(res.Paths, &TsCondition_FieldTerminalPath{selector: TsCondition_FieldPathSelectorDisplayName})
	}
	if o.GetDescription() != other.GetDescription() {
		res.Paths = append(res.Paths, &TsCondition_FieldTerminalPath{selector: TsCondition_FieldPathSelectorDescription})
	}

	if len(o.GetSupportingDocs()) == len(other.GetSupportingDocs()) {
		for i, lValue := range o.GetSupportingDocs() {
			rValue := other.GetSupportingDocs()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &TsCondition_FieldTerminalPath{selector: TsCondition_FieldPathSelectorSupportingDocs})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &TsCondition_FieldTerminalPath{selector: TsCondition_FieldPathSelectorSupportingDocs})
	}
	{
		subMask := o.GetSpec().MakeDiffFieldMask(other.GetSpec())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &TsCondition_FieldTerminalPath{selector: TsCondition_FieldPathSelectorSpec})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &TsCondition_FieldSubPath{selector: TsCondition_FieldPathSelectorSpec, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetInternal().MakeDiffFieldMask(other.GetInternal())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &TsCondition_FieldTerminalPath{selector: TsCondition_FieldPathSelectorInternal})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &TsCondition_FieldSubPath{selector: TsCondition_FieldPathSelectorInternal, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetFilterSelector().MakeDiffFieldMask(other.GetFilterSelector())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &TsCondition_FieldTerminalPath{selector: TsCondition_FieldPathSelectorFilterSelector})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &TsCondition_FieldSubPath{selector: TsCondition_FieldPathSelectorFilterSelector, subPath: subpath})
			}
		}
	}
	return res
}

func (o *TsCondition) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*TsCondition))
}

func (o *TsCondition) Clone() *TsCondition {
	if o == nil {
		return nil
	}
	result := &TsCondition{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &Name{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Metadata = o.Metadata.Clone()
	result.DisplayName = o.DisplayName
	result.Description = o.Description
	result.SupportingDocs = make([]*document.Reference, len(o.SupportingDocs))
	for i, sourceValue := range o.SupportingDocs {
		if sourceValue == nil {
			result.SupportingDocs[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.SupportingDocs[i] = &document.Reference{}
			if err := result.SupportingDocs[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	result.Spec = o.Spec.Clone()
	result.Internal = o.Internal.Clone()
	result.FilterSelector = o.FilterSelector.Clone()
	return result
}

func (o *TsCondition) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *TsCondition) Merge(source *TsCondition) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &Name{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetMetadata() != nil {
		if o.Metadata == nil {
			o.Metadata = new(meta.Meta)
		}
		o.Metadata.Merge(source.GetMetadata())
	}
	o.DisplayName = source.GetDisplayName()
	o.Description = source.GetDescription()
	for _, sourceValue := range source.GetSupportingDocs() {
		exists := false
		for _, currentValue := range o.SupportingDocs {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *document.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &document.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.SupportingDocs = append(o.SupportingDocs, newDstElement)
		}
	}

	if source.GetSpec() != nil {
		if o.Spec == nil {
			o.Spec = new(TsCondition_Spec)
		}
		o.Spec.Merge(source.GetSpec())
	}
	if source.GetInternal() != nil {
		if o.Internal == nil {
			o.Internal = new(TsCondition_Internal)
		}
		o.Internal.Merge(source.GetInternal())
	}
	if source.GetFilterSelector() != nil {
		if o.FilterSelector == nil {
			o.FilterSelector = new(TsCondition_Selector)
		}
		o.FilterSelector.Merge(source.GetFilterSelector())
	}
}

func (o *TsCondition) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*TsCondition))
}

func (o *TsCondition_Spec) GotenObjectExt() {}

func (o *TsCondition_Spec) MakeFullFieldMask() *TsCondition_Spec_FieldMask {
	return FullTsCondition_Spec_FieldMask()
}

func (o *TsCondition_Spec) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullTsCondition_Spec_FieldMask()
}

func (o *TsCondition_Spec) MakeDiffFieldMask(other *TsCondition_Spec) *TsCondition_Spec_FieldMask {
	if o == nil && other == nil {
		return &TsCondition_Spec_FieldMask{}
	}
	if o == nil || other == nil {
		return FullTsCondition_Spec_FieldMask()
	}

	res := &TsCondition_Spec_FieldMask{}

	if len(o.GetQueries()) == len(other.GetQueries()) {
		for i, lValue := range o.GetQueries() {
			rValue := other.GetQueries()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &TsConditionSpec_FieldTerminalPath{selector: TsConditionSpec_FieldPathSelectorQueries})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &TsConditionSpec_FieldTerminalPath{selector: TsConditionSpec_FieldPathSelectorQueries})
	}

	if len(o.GetQueryGroupBy()) == len(other.GetQueryGroupBy()) {
		for i, lValue := range o.GetQueryGroupBy() {
			rValue := other.GetQueryGroupBy()[i]
			if lValue != rValue {
				res.Paths = append(res.Paths, &TsConditionSpec_FieldTerminalPath{selector: TsConditionSpec_FieldPathSelectorQueryGroupBy})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &TsConditionSpec_FieldTerminalPath{selector: TsConditionSpec_FieldPathSelectorQueryGroupBy})
	}
	{
		subMask := o.GetThresholdAlerting().MakeDiffFieldMask(other.GetThresholdAlerting())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &TsConditionSpec_FieldTerminalPath{selector: TsConditionSpec_FieldPathSelectorThresholdAlerting})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &TsConditionSpec_FieldSubPath{selector: TsConditionSpec_FieldPathSelectorThresholdAlerting, subPath: subpath})
			}
		}
	}

	if len(o.GetAnomalyAlerting()) == len(other.GetAnomalyAlerting()) {
		for i, lValue := range o.GetAnomalyAlerting() {
			rValue := other.GetAnomalyAlerting()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &TsConditionSpec_FieldTerminalPath{selector: TsConditionSpec_FieldPathSelectorAnomalyAlerting})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &TsConditionSpec_FieldTerminalPath{selector: TsConditionSpec_FieldPathSelectorAnomalyAlerting})
	}
	return res
}

func (o *TsCondition_Spec) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*TsCondition_Spec))
}

func (o *TsCondition_Spec) Clone() *TsCondition_Spec {
	if o == nil {
		return nil
	}
	result := &TsCondition_Spec{}
	result.Queries = make([]*TsCondition_Spec_Query, len(o.Queries))
	for i, sourceValue := range o.Queries {
		result.Queries[i] = sourceValue.Clone()
	}
	result.QueryGroupBy = make([]string, len(o.QueryGroupBy))
	for i, sourceValue := range o.QueryGroupBy {
		result.QueryGroupBy[i] = sourceValue
	}
	result.ThresholdAlerting = o.ThresholdAlerting.Clone()
	result.AnomalyAlerting = make([]*TsCondition_Spec_AnomalyAlertingCfg, len(o.AnomalyAlerting))
	for i, sourceValue := range o.AnomalyAlerting {
		result.AnomalyAlerting[i] = sourceValue.Clone()
	}
	return result
}

func (o *TsCondition_Spec) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *TsCondition_Spec) Merge(source *TsCondition_Spec) {
	for _, sourceValue := range source.GetQueries() {
		exists := false
		for _, currentValue := range o.Queries {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *TsCondition_Spec_Query
			if sourceValue != nil {
				newDstElement = new(TsCondition_Spec_Query)
				newDstElement.Merge(sourceValue)
			}
			o.Queries = append(o.Queries, newDstElement)
		}
	}

	for _, sourceValue := range source.GetQueryGroupBy() {
		exists := false
		for _, currentValue := range o.QueryGroupBy {
			if currentValue == sourceValue {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement string
			newDstElement = sourceValue
			o.QueryGroupBy = append(o.QueryGroupBy, newDstElement)
		}
	}

	if source.GetThresholdAlerting() != nil {
		if o.ThresholdAlerting == nil {
			o.ThresholdAlerting = new(TsCondition_Spec_ThresholdAlertingCfg)
		}
		o.ThresholdAlerting.Merge(source.GetThresholdAlerting())
	}
	for _, sourceValue := range source.GetAnomalyAlerting() {
		exists := false
		for _, currentValue := range o.AnomalyAlerting {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *TsCondition_Spec_AnomalyAlertingCfg
			if sourceValue != nil {
				newDstElement = new(TsCondition_Spec_AnomalyAlertingCfg)
				newDstElement.Merge(sourceValue)
			}
			o.AnomalyAlerting = append(o.AnomalyAlerting, newDstElement)
		}
	}

}

func (o *TsCondition_Spec) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*TsCondition_Spec))
}

func (o *TsCondition_Internal) GotenObjectExt() {}

func (o *TsCondition_Internal) MakeFullFieldMask() *TsCondition_Internal_FieldMask {
	return FullTsCondition_Internal_FieldMask()
}

func (o *TsCondition_Internal) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullTsCondition_Internal_FieldMask()
}

func (o *TsCondition_Internal) MakeDiffFieldMask(other *TsCondition_Internal) *TsCondition_Internal_FieldMask {
	if o == nil && other == nil {
		return &TsCondition_Internal_FieldMask{}
	}
	if o == nil || other == nil {
		return FullTsCondition_Internal_FieldMask()
	}

	res := &TsCondition_Internal_FieldMask{}
	if string(o.GetCommonKeyKset()) != string(other.GetCommonKeyKset()) {
		res.Paths = append(res.Paths, &TsConditionInternal_FieldTerminalPath{selector: TsConditionInternal_FieldPathSelectorCommonKeyKset})
	}
	if o.GetEntrySpecGeneration() != other.GetEntrySpecGeneration() {
		res.Paths = append(res.Paths, &TsConditionInternal_FieldTerminalPath{selector: TsConditionInternal_FieldPathSelectorEntrySpecGeneration})
	}
	if o.GetAlertingLocation() != other.GetAlertingLocation() {
		res.Paths = append(res.Paths, &TsConditionInternal_FieldTerminalPath{selector: TsConditionInternal_FieldPathSelectorAlertingLocation})
	}
	return res
}

func (o *TsCondition_Internal) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*TsCondition_Internal))
}

func (o *TsCondition_Internal) Clone() *TsCondition_Internal {
	if o == nil {
		return nil
	}
	result := &TsCondition_Internal{}
	result.CommonKeyKset = make([]byte, len(o.CommonKeyKset))
	for i, bt := range o.CommonKeyKset {
		result.CommonKeyKset[i] = bt
	}
	result.EntrySpecGeneration = o.EntrySpecGeneration
	result.AlertingLocation = o.AlertingLocation
	return result
}

func (o *TsCondition_Internal) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *TsCondition_Internal) Merge(source *TsCondition_Internal) {
	o.CommonKeyKset = make([]byte, len(source.GetCommonKeyKset()))
	for i, bt := range source.GetCommonKeyKset() {
		o.CommonKeyKset[i] = bt
	}
	o.EntrySpecGeneration = source.GetEntrySpecGeneration()
	o.AlertingLocation = source.GetAlertingLocation()
}

func (o *TsCondition_Internal) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*TsCondition_Internal))
}

func (o *TsCondition_Selector) GotenObjectExt() {}

func (o *TsCondition_Selector) MakeFullFieldMask() *TsCondition_Selector_FieldMask {
	return FullTsCondition_Selector_FieldMask()
}

func (o *TsCondition_Selector) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullTsCondition_Selector_FieldMask()
}

func (o *TsCondition_Selector) MakeDiffFieldMask(other *TsCondition_Selector) *TsCondition_Selector_FieldMask {
	if o == nil && other == nil {
		return &TsCondition_Selector_FieldMask{}
	}
	if o == nil || other == nil {
		return FullTsCondition_Selector_FieldMask()
	}

	res := &TsCondition_Selector_FieldMask{}

	if len(o.GetMetricTypes()) == len(other.GetMetricTypes()) {
		for i, lValue := range o.GetMetricTypes() {
			rValue := other.GetMetricTypes()[i]
			if lValue != rValue {
				res.Paths = append(res.Paths, &TsConditionSelector_FieldTerminalPath{selector: TsConditionSelector_FieldPathSelectorMetricTypes})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &TsConditionSelector_FieldTerminalPath{selector: TsConditionSelector_FieldPathSelectorMetricTypes})
	}

	if len(o.GetResourceTypes()) == len(other.GetResourceTypes()) {
		for i, lValue := range o.GetResourceTypes() {
			rValue := other.GetResourceTypes()[i]
			if lValue != rValue {
				res.Paths = append(res.Paths, &TsConditionSelector_FieldTerminalPath{selector: TsConditionSelector_FieldPathSelectorResourceTypes})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &TsConditionSelector_FieldTerminalPath{selector: TsConditionSelector_FieldPathSelectorResourceTypes})
	}

	if len(o.GetCommonMetricLabels()) == len(other.GetCommonMetricLabels()) {
		for i, lValue := range o.GetCommonMetricLabels() {
			rValue := other.GetCommonMetricLabels()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &TsConditionSelector_FieldTerminalPath{selector: TsConditionSelector_FieldPathSelectorCommonMetricLabels})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &TsConditionSelector_FieldTerminalPath{selector: TsConditionSelector_FieldPathSelectorCommonMetricLabels})
	}

	if len(o.GetCommonResourceLabels()) == len(other.GetCommonResourceLabels()) {
		for i, lValue := range o.GetCommonResourceLabels() {
			rValue := other.GetCommonResourceLabels()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &TsConditionSelector_FieldTerminalPath{selector: TsConditionSelector_FieldPathSelectorCommonResourceLabels})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &TsConditionSelector_FieldTerminalPath{selector: TsConditionSelector_FieldPathSelectorCommonResourceLabels})
	}
	return res
}

func (o *TsCondition_Selector) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*TsCondition_Selector))
}

func (o *TsCondition_Selector) Clone() *TsCondition_Selector {
	if o == nil {
		return nil
	}
	result := &TsCondition_Selector{}
	result.MetricTypes = make([]string, len(o.MetricTypes))
	for i, sourceValue := range o.MetricTypes {
		result.MetricTypes[i] = sourceValue
	}
	result.ResourceTypes = make([]string, len(o.ResourceTypes))
	for i, sourceValue := range o.ResourceTypes {
		result.ResourceTypes[i] = sourceValue
	}
	result.CommonMetricLabels = map[string]*TsCondition_Selector_Strings{}
	for key, sourceValue := range o.CommonMetricLabels {
		result.CommonMetricLabels[key] = sourceValue.Clone()
	}
	result.CommonResourceLabels = map[string]*TsCondition_Selector_Strings{}
	for key, sourceValue := range o.CommonResourceLabels {
		result.CommonResourceLabels[key] = sourceValue.Clone()
	}
	return result
}

func (o *TsCondition_Selector) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *TsCondition_Selector) Merge(source *TsCondition_Selector) {
	for _, sourceValue := range source.GetMetricTypes() {
		exists := false
		for _, currentValue := range o.MetricTypes {
			if currentValue == sourceValue {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement string
			newDstElement = sourceValue
			o.MetricTypes = append(o.MetricTypes, newDstElement)
		}
	}

	for _, sourceValue := range source.GetResourceTypes() {
		exists := false
		for _, currentValue := range o.ResourceTypes {
			if currentValue == sourceValue {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement string
			newDstElement = sourceValue
			o.ResourceTypes = append(o.ResourceTypes, newDstElement)
		}
	}

	if source.GetCommonMetricLabels() != nil {
		if o.CommonMetricLabels == nil {
			o.CommonMetricLabels = make(map[string]*TsCondition_Selector_Strings, len(source.GetCommonMetricLabels()))
		}
		for key, sourceValue := range source.GetCommonMetricLabels() {
			if sourceValue != nil {
				if o.CommonMetricLabels[key] == nil {
					o.CommonMetricLabels[key] = new(TsCondition_Selector_Strings)
				}
				o.CommonMetricLabels[key].Merge(sourceValue)
			}
		}
	}
	if source.GetCommonResourceLabels() != nil {
		if o.CommonResourceLabels == nil {
			o.CommonResourceLabels = make(map[string]*TsCondition_Selector_Strings, len(source.GetCommonResourceLabels()))
		}
		for key, sourceValue := range source.GetCommonResourceLabels() {
			if sourceValue != nil {
				if o.CommonResourceLabels[key] == nil {
					o.CommonResourceLabels[key] = new(TsCondition_Selector_Strings)
				}
				o.CommonResourceLabels[key].Merge(sourceValue)
			}
		}
	}
}

func (o *TsCondition_Selector) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*TsCondition_Selector))
}

func (o *TsCondition_Spec_Query) GotenObjectExt() {}

func (o *TsCondition_Spec_Query) MakeFullFieldMask() *TsCondition_Spec_Query_FieldMask {
	return FullTsCondition_Spec_Query_FieldMask()
}

func (o *TsCondition_Spec_Query) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullTsCondition_Spec_Query_FieldMask()
}

func (o *TsCondition_Spec_Query) MakeDiffFieldMask(other *TsCondition_Spec_Query) *TsCondition_Spec_Query_FieldMask {
	if o == nil && other == nil {
		return &TsCondition_Spec_Query_FieldMask{}
	}
	if o == nil || other == nil {
		return FullTsCondition_Spec_Query_FieldMask()
	}

	res := &TsCondition_Spec_Query_FieldMask{}
	if o.GetName() != other.GetName() {
		res.Paths = append(res.Paths, &TsConditionSpecQuery_FieldTerminalPath{selector: TsConditionSpecQuery_FieldPathSelectorName})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &TsConditionSpecQuery_FieldTerminalPath{selector: TsConditionSpecQuery_FieldPathSelectorFilter})
	}
	if o.GetAligner() != other.GetAligner() {
		res.Paths = append(res.Paths, &TsConditionSpecQuery_FieldTerminalPath{selector: TsConditionSpecQuery_FieldPathSelectorAligner})
	}
	if o.GetReducer() != other.GetReducer() {
		res.Paths = append(res.Paths, &TsConditionSpecQuery_FieldTerminalPath{selector: TsConditionSpecQuery_FieldPathSelectorReducer})
	}
	if o.GetMaxValue() != other.GetMaxValue() {
		res.Paths = append(res.Paths, &TsConditionSpecQuery_FieldTerminalPath{selector: TsConditionSpecQuery_FieldPathSelectorMaxValue})
	}
	return res
}

func (o *TsCondition_Spec_Query) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*TsCondition_Spec_Query))
}

func (o *TsCondition_Spec_Query) Clone() *TsCondition_Spec_Query {
	if o == nil {
		return nil
	}
	result := &TsCondition_Spec_Query{}
	result.Name = o.Name
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &monitoring_time_serie.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Aligner = o.Aligner
	result.Reducer = o.Reducer
	result.MaxValue = o.MaxValue
	return result
}

func (o *TsCondition_Spec_Query) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *TsCondition_Spec_Query) Merge(source *TsCondition_Spec_Query) {
	o.Name = source.GetName()
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &monitoring_time_serie.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	o.Aligner = source.GetAligner()
	o.Reducer = source.GetReducer()
	o.MaxValue = source.GetMaxValue()
}

func (o *TsCondition_Spec_Query) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*TsCondition_Spec_Query))
}

func (o *TsCondition_Spec_ThresholdAlertingCfg) GotenObjectExt() {}

func (o *TsCondition_Spec_ThresholdAlertingCfg) MakeFullFieldMask() *TsCondition_Spec_ThresholdAlertingCfg_FieldMask {
	return FullTsCondition_Spec_ThresholdAlertingCfg_FieldMask()
}

func (o *TsCondition_Spec_ThresholdAlertingCfg) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullTsCondition_Spec_ThresholdAlertingCfg_FieldMask()
}

func (o *TsCondition_Spec_ThresholdAlertingCfg) MakeDiffFieldMask(other *TsCondition_Spec_ThresholdAlertingCfg) *TsCondition_Spec_ThresholdAlertingCfg_FieldMask {
	if o == nil && other == nil {
		return &TsCondition_Spec_ThresholdAlertingCfg_FieldMask{}
	}
	if o == nil || other == nil {
		return FullTsCondition_Spec_ThresholdAlertingCfg_FieldMask()
	}

	res := &TsCondition_Spec_ThresholdAlertingCfg_FieldMask{}
	if o.GetOperator() != other.GetOperator() {
		res.Paths = append(res.Paths, &TsConditionSpecThresholdAlertingCfg_FieldTerminalPath{selector: TsConditionSpecThresholdAlertingCfg_FieldPathSelectorOperator})
	}
	if !proto.Equal(o.GetAlignmentPeriod(), other.GetAlignmentPeriod()) {
		res.Paths = append(res.Paths, &TsConditionSpecThresholdAlertingCfg_FieldTerminalPath{selector: TsConditionSpecThresholdAlertingCfg_FieldPathSelectorAlignmentPeriod})
	}
	if !proto.Equal(o.GetRaiseAfter(), other.GetRaiseAfter()) {
		res.Paths = append(res.Paths, &TsConditionSpecThresholdAlertingCfg_FieldTerminalPath{selector: TsConditionSpecThresholdAlertingCfg_FieldPathSelectorRaiseAfter})
	}
	if !proto.Equal(o.GetSilenceAfter(), other.GetSilenceAfter()) {
		res.Paths = append(res.Paths, &TsConditionSpecThresholdAlertingCfg_FieldTerminalPath{selector: TsConditionSpecThresholdAlertingCfg_FieldPathSelectorSilenceAfter})
	}

	if len(o.GetPerQueryThresholds()) == len(other.GetPerQueryThresholds()) {
		for i, lValue := range o.GetPerQueryThresholds() {
			rValue := other.GetPerQueryThresholds()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &TsConditionSpecThresholdAlertingCfg_FieldTerminalPath{selector: TsConditionSpecThresholdAlertingCfg_FieldPathSelectorPerQueryThresholds})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &TsConditionSpecThresholdAlertingCfg_FieldTerminalPath{selector: TsConditionSpecThresholdAlertingCfg_FieldPathSelectorPerQueryThresholds})
	}
	if !proto.Equal(o.GetAdaptiveThresholdsDetectionPeriod(), other.GetAdaptiveThresholdsDetectionPeriod()) {
		res.Paths = append(res.Paths, &TsConditionSpecThresholdAlertingCfg_FieldTerminalPath{selector: TsConditionSpecThresholdAlertingCfg_FieldPathSelectorAdaptiveThresholdsDetectionPeriod})
	}
	return res
}

func (o *TsCondition_Spec_ThresholdAlertingCfg) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*TsCondition_Spec_ThresholdAlertingCfg))
}

func (o *TsCondition_Spec_ThresholdAlertingCfg) Clone() *TsCondition_Spec_ThresholdAlertingCfg {
	if o == nil {
		return nil
	}
	result := &TsCondition_Spec_ThresholdAlertingCfg{}
	result.Operator = o.Operator
	result.AlignmentPeriod = proto.Clone(o.AlignmentPeriod).(*durationpb.Duration)
	result.RaiseAfter = proto.Clone(o.RaiseAfter).(*durationpb.Duration)
	result.SilenceAfter = proto.Clone(o.SilenceAfter).(*durationpb.Duration)
	result.PerQueryThresholds = make([]*TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds, len(o.PerQueryThresholds))
	for i, sourceValue := range o.PerQueryThresholds {
		result.PerQueryThresholds[i] = sourceValue.Clone()
	}
	result.AdaptiveThresholdsDetectionPeriod = proto.Clone(o.AdaptiveThresholdsDetectionPeriod).(*durationpb.Duration)
	return result
}

func (o *TsCondition_Spec_ThresholdAlertingCfg) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *TsCondition_Spec_ThresholdAlertingCfg) Merge(source *TsCondition_Spec_ThresholdAlertingCfg) {
	o.Operator = source.GetOperator()
	if source.GetAlignmentPeriod() != nil {
		if o.AlignmentPeriod == nil {
			o.AlignmentPeriod = new(durationpb.Duration)
		}
		proto.Merge(o.AlignmentPeriod, source.GetAlignmentPeriod())
	}
	if source.GetRaiseAfter() != nil {
		if o.RaiseAfter == nil {
			o.RaiseAfter = new(durationpb.Duration)
		}
		proto.Merge(o.RaiseAfter, source.GetRaiseAfter())
	}
	if source.GetSilenceAfter() != nil {
		if o.SilenceAfter == nil {
			o.SilenceAfter = new(durationpb.Duration)
		}
		proto.Merge(o.SilenceAfter, source.GetSilenceAfter())
	}
	for _, sourceValue := range source.GetPerQueryThresholds() {
		exists := false
		for _, currentValue := range o.PerQueryThresholds {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds
			if sourceValue != nil {
				newDstElement = new(TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds)
				newDstElement.Merge(sourceValue)
			}
			o.PerQueryThresholds = append(o.PerQueryThresholds, newDstElement)
		}
	}

	if source.GetAdaptiveThresholdsDetectionPeriod() != nil {
		if o.AdaptiveThresholdsDetectionPeriod == nil {
			o.AdaptiveThresholdsDetectionPeriod = new(durationpb.Duration)
		}
		proto.Merge(o.AdaptiveThresholdsDetectionPeriod, source.GetAdaptiveThresholdsDetectionPeriod())
	}
}

func (o *TsCondition_Spec_ThresholdAlertingCfg) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*TsCondition_Spec_ThresholdAlertingCfg))
}

func (o *TsCondition_Spec_AnomalyAlertingCfg) GotenObjectExt() {}

func (o *TsCondition_Spec_AnomalyAlertingCfg) MakeFullFieldMask() *TsCondition_Spec_AnomalyAlertingCfg_FieldMask {
	return FullTsCondition_Spec_AnomalyAlertingCfg_FieldMask()
}

func (o *TsCondition_Spec_AnomalyAlertingCfg) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullTsCondition_Spec_AnomalyAlertingCfg_FieldMask()
}

func (o *TsCondition_Spec_AnomalyAlertingCfg) MakeDiffFieldMask(other *TsCondition_Spec_AnomalyAlertingCfg) *TsCondition_Spec_AnomalyAlertingCfg_FieldMask {
	if o == nil && other == nil {
		return &TsCondition_Spec_AnomalyAlertingCfg_FieldMask{}
	}
	if o == nil || other == nil {
		return FullTsCondition_Spec_AnomalyAlertingCfg_FieldMask()
	}

	res := &TsCondition_Spec_AnomalyAlertingCfg_FieldMask{}
	if !proto.Equal(o.GetAnalysisWindow(), other.GetAnalysisWindow()) {
		res.Paths = append(res.Paths, &TsConditionSpecAnomalyAlertingCfg_FieldTerminalPath{selector: TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorAnalysisWindow})
	}
	if !proto.Equal(o.GetStepInterval(), other.GetStepInterval()) {
		res.Paths = append(res.Paths, &TsConditionSpecAnomalyAlertingCfg_FieldTerminalPath{selector: TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorStepInterval})
	}
	if !proto.Equal(o.GetTrainStepInterval(), other.GetTrainStepInterval()) {
		res.Paths = append(res.Paths, &TsConditionSpecAnomalyAlertingCfg_FieldTerminalPath{selector: TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorTrainStepInterval})
	}
	if !proto.Equal(o.GetAlignmentPeriod(), other.GetAlignmentPeriod()) {
		res.Paths = append(res.Paths, &TsConditionSpecAnomalyAlertingCfg_FieldTerminalPath{selector: TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorAlignmentPeriod})
	}
	{
		_, leftSelected := o.Model.(*TsCondition_Spec_AnomalyAlertingCfg_LstmAutoencoder)
		_, rightSelected := other.Model.(*TsCondition_Spec_AnomalyAlertingCfg_LstmAutoencoder)
		if leftSelected == rightSelected {
			subMask := o.GetLstmAutoencoder().MakeDiffFieldMask(other.GetLstmAutoencoder())
			if subMask.IsFull() {
				res.Paths = append(res.Paths, &TsConditionSpecAnomalyAlertingCfg_FieldTerminalPath{selector: TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorLstmAutoencoder})
			} else {
				for _, subpath := range subMask.Paths {
					res.Paths = append(res.Paths, &TsConditionSpecAnomalyAlertingCfg_FieldSubPath{selector: TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorLstmAutoencoder, subPath: subpath})
				}
			}
		} else {
			res.Paths = append(res.Paths, &TsConditionSpecAnomalyAlertingCfg_FieldTerminalPath{selector: TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorLstmAutoencoder})
		}
	}
	if !proto.Equal(o.GetRaiseAfter(), other.GetRaiseAfter()) {
		res.Paths = append(res.Paths, &TsConditionSpecAnomalyAlertingCfg_FieldTerminalPath{selector: TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorRaiseAfter})
	}
	if !proto.Equal(o.GetSilenceAfter(), other.GetSilenceAfter()) {
		res.Paths = append(res.Paths, &TsConditionSpecAnomalyAlertingCfg_FieldTerminalPath{selector: TsConditionSpecAnomalyAlertingCfg_FieldPathSelectorSilenceAfter})
	}
	return res
}

func (o *TsCondition_Spec_AnomalyAlertingCfg) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*TsCondition_Spec_AnomalyAlertingCfg))
}

func (o *TsCondition_Spec_AnomalyAlertingCfg) Clone() *TsCondition_Spec_AnomalyAlertingCfg {
	if o == nil {
		return nil
	}
	result := &TsCondition_Spec_AnomalyAlertingCfg{}
	result.AnalysisWindow = proto.Clone(o.AnalysisWindow).(*durationpb.Duration)
	result.StepInterval = proto.Clone(o.StepInterval).(*durationpb.Duration)
	result.TrainStepInterval = proto.Clone(o.TrainStepInterval).(*durationpb.Duration)
	result.AlignmentPeriod = proto.Clone(o.AlignmentPeriod).(*durationpb.Duration)
	if o, ok := o.Model.(*TsCondition_Spec_AnomalyAlertingCfg_LstmAutoencoder); ok {
		result.Model = (*TsCondition_Spec_AnomalyAlertingCfg_LstmAutoencoder)(nil)
		if o != nil {
			result.Model = &TsCondition_Spec_AnomalyAlertingCfg_LstmAutoencoder{}
			result := result.Model.(*TsCondition_Spec_AnomalyAlertingCfg_LstmAutoencoder)
			result.LstmAutoencoder = o.LstmAutoencoder.Clone()
		}
	}
	result.RaiseAfter = proto.Clone(o.RaiseAfter).(*durationpb.Duration)
	result.SilenceAfter = proto.Clone(o.SilenceAfter).(*durationpb.Duration)
	return result
}

func (o *TsCondition_Spec_AnomalyAlertingCfg) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *TsCondition_Spec_AnomalyAlertingCfg) Merge(source *TsCondition_Spec_AnomalyAlertingCfg) {
	if source.GetAnalysisWindow() != nil {
		if o.AnalysisWindow == nil {
			o.AnalysisWindow = new(durationpb.Duration)
		}
		proto.Merge(o.AnalysisWindow, source.GetAnalysisWindow())
	}
	if source.GetStepInterval() != nil {
		if o.StepInterval == nil {
			o.StepInterval = new(durationpb.Duration)
		}
		proto.Merge(o.StepInterval, source.GetStepInterval())
	}
	if source.GetTrainStepInterval() != nil {
		if o.TrainStepInterval == nil {
			o.TrainStepInterval = new(durationpb.Duration)
		}
		proto.Merge(o.TrainStepInterval, source.GetTrainStepInterval())
	}
	if source.GetAlignmentPeriod() != nil {
		if o.AlignmentPeriod == nil {
			o.AlignmentPeriod = new(durationpb.Duration)
		}
		proto.Merge(o.AlignmentPeriod, source.GetAlignmentPeriod())
	}
	if source, ok := source.GetModel().(*TsCondition_Spec_AnomalyAlertingCfg_LstmAutoencoder); ok {
		if dstOneOf, ok := o.Model.(*TsCondition_Spec_AnomalyAlertingCfg_LstmAutoencoder); !ok || dstOneOf == nil {
			o.Model = &TsCondition_Spec_AnomalyAlertingCfg_LstmAutoencoder{}
		}
		if source != nil {
			o := o.Model.(*TsCondition_Spec_AnomalyAlertingCfg_LstmAutoencoder)
			if source.LstmAutoencoder != nil {
				if o.LstmAutoencoder == nil {
					o.LstmAutoencoder = new(TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder)
				}
				o.LstmAutoencoder.Merge(source.LstmAutoencoder)
			}
		}
	}
	if source.GetRaiseAfter() != nil {
		if o.RaiseAfter == nil {
			o.RaiseAfter = new(durationpb.Duration)
		}
		proto.Merge(o.RaiseAfter, source.GetRaiseAfter())
	}
	if source.GetSilenceAfter() != nil {
		if o.SilenceAfter == nil {
			o.SilenceAfter = new(durationpb.Duration)
		}
		proto.Merge(o.SilenceAfter, source.GetSilenceAfter())
	}
}

func (o *TsCondition_Spec_AnomalyAlertingCfg) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*TsCondition_Spec_AnomalyAlertingCfg))
}

func (o *TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds) GotenObjectExt() {}

func (o *TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds) MakeFullFieldMask() *TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds_FieldMask {
	return FullTsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds_FieldMask()
}

func (o *TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullTsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds_FieldMask()
}

func (o *TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds) MakeDiffFieldMask(other *TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds) *TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds_FieldMask {
	if o == nil && other == nil {
		return &TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds_FieldMask{}
	}
	if o == nil || other == nil {
		return FullTsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds_FieldMask()
	}

	res := &TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds_FieldMask{}
	if o.GetAutoAdaptUpper() != other.GetAutoAdaptUpper() {
		res.Paths = append(res.Paths, &TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldTerminalPath{selector: TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorAutoAdaptUpper})
	}
	if o.GetAutoAdaptLower() != other.GetAutoAdaptLower() {
		res.Paths = append(res.Paths, &TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldTerminalPath{selector: TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorAutoAdaptLower})
	}
	{
		subMask := o.GetMaxUpper().MakeDiffFieldMask(other.GetMaxUpper())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldTerminalPath{selector: TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorMaxUpper})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldSubPath{selector: TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorMaxUpper, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetMaxLower().MakeDiffFieldMask(other.GetMaxLower())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldTerminalPath{selector: TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorMaxLower})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldSubPath{selector: TsConditionSpecThresholdAlertingCfgAlertingThresholds_FieldPathSelectorMaxLower, subPath: subpath})
			}
		}
	}
	return res
}

func (o *TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds))
}

func (o *TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds) Clone() *TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds {
	if o == nil {
		return nil
	}
	result := &TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds{}
	result.AutoAdaptUpper = o.AutoAdaptUpper
	result.AutoAdaptLower = o.AutoAdaptLower
	result.MaxUpper = o.MaxUpper.Clone()
	result.MaxLower = o.MaxLower.Clone()
	return result
}

func (o *TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds) Merge(source *TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds) {
	o.AutoAdaptUpper = source.GetAutoAdaptUpper()
	o.AutoAdaptLower = source.GetAutoAdaptLower()
	if source.GetMaxUpper() != nil {
		if o.MaxUpper == nil {
			o.MaxUpper = new(AlertingThreshold)
		}
		o.MaxUpper.Merge(source.GetMaxUpper())
	}
	if source.GetMaxLower() != nil {
		if o.MaxLower == nil {
			o.MaxLower = new(AlertingThreshold)
		}
		o.MaxLower.Merge(source.GetMaxLower())
	}
}

func (o *TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds))
}

func (o *TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder) GotenObjectExt() {}

func (o *TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder) MakeFullFieldMask() *TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder_FieldMask {
	return FullTsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder_FieldMask()
}

func (o *TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullTsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder_FieldMask()
}

func (o *TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder) MakeDiffFieldMask(other *TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder) *TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder_FieldMask {
	if o == nil && other == nil {
		return &TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder_FieldMask{}
	}
	if o == nil || other == nil {
		return FullTsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder_FieldMask()
	}

	res := &TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder_FieldMask{}
	if o.GetHiddenSize() != other.GetHiddenSize() {
		res.Paths = append(res.Paths, &TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPath{selector: TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorHiddenSize})
	}
	if o.GetLearnRate() != other.GetLearnRate() {
		res.Paths = append(res.Paths, &TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPath{selector: TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorLearnRate})
	}
	if o.GetMaxTrainingEpochs() != other.GetMaxTrainingEpochs() {
		res.Paths = append(res.Paths, &TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPath{selector: TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorMaxTrainingEpochs})
	}
	if o.GetMinTrainingEpochs() != other.GetMinTrainingEpochs() {
		res.Paths = append(res.Paths, &TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPath{selector: TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorMinTrainingEpochs})
	}
	if o.GetAcceptableTrainingError() != other.GetAcceptableTrainingError() {
		res.Paths = append(res.Paths, &TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPath{selector: TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorAcceptableTrainingError})
	}
	if !proto.Equal(o.GetTrainingPeriod(), other.GetTrainingPeriod()) {
		res.Paths = append(res.Paths, &TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPath{selector: TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorTrainingPeriod})
	}
	if o.GetCheckPeriodFraction() != other.GetCheckPeriodFraction() {
		res.Paths = append(res.Paths, &TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldTerminalPath{selector: TsConditionSpecAnomalyAlertingCfgLstmAutoEncoder_FieldPathSelectorCheckPeriodFraction})
	}
	return res
}

func (o *TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder))
}

func (o *TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder) Clone() *TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder {
	if o == nil {
		return nil
	}
	result := &TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder{}
	result.HiddenSize = o.HiddenSize
	result.LearnRate = o.LearnRate
	result.MaxTrainingEpochs = o.MaxTrainingEpochs
	result.MinTrainingEpochs = o.MinTrainingEpochs
	result.AcceptableTrainingError = o.AcceptableTrainingError
	result.TrainingPeriod = proto.Clone(o.TrainingPeriod).(*durationpb.Duration)
	result.CheckPeriodFraction = o.CheckPeriodFraction
	return result
}

func (o *TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder) Merge(source *TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder) {
	o.HiddenSize = source.GetHiddenSize()
	o.LearnRate = source.GetLearnRate()
	o.MaxTrainingEpochs = source.GetMaxTrainingEpochs()
	o.MinTrainingEpochs = source.GetMinTrainingEpochs()
	o.AcceptableTrainingError = source.GetAcceptableTrainingError()
	if source.GetTrainingPeriod() != nil {
		if o.TrainingPeriod == nil {
			o.TrainingPeriod = new(durationpb.Duration)
		}
		proto.Merge(o.TrainingPeriod, source.GetTrainingPeriod())
	}
	o.CheckPeriodFraction = source.GetCheckPeriodFraction()
}

func (o *TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder))
}

func (o *TsCondition_Selector_Strings) GotenObjectExt() {}

func (o *TsCondition_Selector_Strings) MakeFullFieldMask() *TsCondition_Selector_Strings_FieldMask {
	return FullTsCondition_Selector_Strings_FieldMask()
}

func (o *TsCondition_Selector_Strings) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullTsCondition_Selector_Strings_FieldMask()
}

func (o *TsCondition_Selector_Strings) MakeDiffFieldMask(other *TsCondition_Selector_Strings) *TsCondition_Selector_Strings_FieldMask {
	if o == nil && other == nil {
		return &TsCondition_Selector_Strings_FieldMask{}
	}
	if o == nil || other == nil {
		return FullTsCondition_Selector_Strings_FieldMask()
	}

	res := &TsCondition_Selector_Strings_FieldMask{}

	if len(o.GetValues()) == len(other.GetValues()) {
		for i, lValue := range o.GetValues() {
			rValue := other.GetValues()[i]
			if lValue != rValue {
				res.Paths = append(res.Paths, &TsConditionSelectorStrings_FieldTerminalPath{selector: TsConditionSelectorStrings_FieldPathSelectorValues})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &TsConditionSelectorStrings_FieldTerminalPath{selector: TsConditionSelectorStrings_FieldPathSelectorValues})
	}
	return res
}

func (o *TsCondition_Selector_Strings) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*TsCondition_Selector_Strings))
}

func (o *TsCondition_Selector_Strings) Clone() *TsCondition_Selector_Strings {
	if o == nil {
		return nil
	}
	result := &TsCondition_Selector_Strings{}
	result.Values = make([]string, len(o.Values))
	for i, sourceValue := range o.Values {
		result.Values[i] = sourceValue
	}
	return result
}

func (o *TsCondition_Selector_Strings) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *TsCondition_Selector_Strings) Merge(source *TsCondition_Selector_Strings) {
	for _, sourceValue := range source.GetValues() {
		exists := false
		for _, currentValue := range o.Values {
			if currentValue == sourceValue {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement string
			newDstElement = sourceValue
			o.Values = append(o.Values, newDstElement)
		}
	}

}

func (o *TsCondition_Selector_Strings) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*TsCondition_Selector_Strings))
}

func (o *AlertingThreshold) GotenObjectExt() {}

func (o *AlertingThreshold) MakeFullFieldMask() *AlertingThreshold_FieldMask {
	return FullAlertingThreshold_FieldMask()
}

func (o *AlertingThreshold) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullAlertingThreshold_FieldMask()
}

func (o *AlertingThreshold) MakeDiffFieldMask(other *AlertingThreshold) *AlertingThreshold_FieldMask {
	if o == nil && other == nil {
		return &AlertingThreshold_FieldMask{}
	}
	if o == nil || other == nil {
		return FullAlertingThreshold_FieldMask()
	}

	res := &AlertingThreshold_FieldMask{}
	if o.GetValue() != other.GetValue() {
		res.Paths = append(res.Paths, &AlertingThreshold_FieldTerminalPath{selector: AlertingThreshold_FieldPathSelectorValue})
	}
	if o.GetIsInclusive() != other.GetIsInclusive() {
		res.Paths = append(res.Paths, &AlertingThreshold_FieldTerminalPath{selector: AlertingThreshold_FieldPathSelectorIsInclusive})
	}
	return res
}

func (o *AlertingThreshold) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*AlertingThreshold))
}

func (o *AlertingThreshold) Clone() *AlertingThreshold {
	if o == nil {
		return nil
	}
	result := &AlertingThreshold{}
	result.Value = o.Value
	result.IsInclusive = o.IsInclusive
	return result
}

func (o *AlertingThreshold) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *AlertingThreshold) Merge(source *AlertingThreshold) {
	o.Value = source.GetValue()
	o.IsInclusive = source.GetIsInclusive()
}

func (o *AlertingThreshold) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*AlertingThreshold))
}
