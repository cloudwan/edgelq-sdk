// Code generated by protoc-gen-goten-go
// File: edgelq/alerting/proto/v1/ts_condition.proto
// DO NOT EDIT!!!

package ts_condition

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	document "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/document"
	policy "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/policy"
	monitoring_common "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/common"
	monitoring_time_serie "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/time_serie"
	meta "github.com/cloudwan/goten-sdk/types/meta"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &document.Document{}
	_ = &policy.Policy{}
	_ = &monitoring_common.LabelDescriptor{}
	_ = &monitoring_time_serie.Point{}
	_ = &durationpb.Duration{}
	_ = &meta.Meta{}
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Operator informs if whether all or one of queries must be crossed
// for alert to be generated.
type TsCondition_Spec_ThresholdAlertingCfg_Operator int32

const (
	// UNDEFINED is not allowed
	TsCondition_Spec_ThresholdAlertingCfg_UNDEFINED TsCondition_Spec_ThresholdAlertingCfg_Operator = 0
	// AND indicates that all thresholds must be crossed for
	// alert ti be triggered.
	TsCondition_Spec_ThresholdAlertingCfg_AND TsCondition_Spec_ThresholdAlertingCfg_Operator = 1
	// OR indicates that Alert should be raised if any of queries
	// violates threshold.
	TsCondition_Spec_ThresholdAlertingCfg_OR TsCondition_Spec_ThresholdAlertingCfg_Operator = 2
)

var (
	TsCondition_Spec_ThresholdAlertingCfg_Operator_name = map[int32]string{
		0: "UNDEFINED",
		1: "AND",
		2: "OR",
	}

	TsCondition_Spec_ThresholdAlertingCfg_Operator_value = map[string]int32{
		"UNDEFINED": 0,
		"AND":       1,
		"OR":        2,
	}
)

func (x TsCondition_Spec_ThresholdAlertingCfg_Operator) Enum() *TsCondition_Spec_ThresholdAlertingCfg_Operator {
	p := new(TsCondition_Spec_ThresholdAlertingCfg_Operator)
	*p = x
	return p
}

func (x TsCondition_Spec_ThresholdAlertingCfg_Operator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (TsCondition_Spec_ThresholdAlertingCfg_Operator) Descriptor() preflect.EnumDescriptor {
	return edgelq_alerting_proto_v1_ts_condition_proto_enumTypes[0].Descriptor()
}

func (TsCondition_Spec_ThresholdAlertingCfg_Operator) Type() preflect.EnumType {
	return &edgelq_alerting_proto_v1_ts_condition_proto_enumTypes[0]
}

func (x TsCondition_Spec_ThresholdAlertingCfg_Operator) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use TsCondition_Spec_ThresholdAlertingCfg_Operator.ProtoReflect.Descriptor instead.
func (TsCondition_Spec_ThresholdAlertingCfg_Operator) EnumDescriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_ts_condition_proto_rawDescGZIP(), []int{0, 0, 1, 0}
}

// TsCondition describes when Alert based on TimeSeries data should be raised.
type TsCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of TsCondition
	// When creating a new instance, this field is optional and if not provided,
	// it will be generated automatically. Last ID segment must conform to the
	// following regex: [a-z][a-z0-9\\-]{0,28}[a-z0-9]
	Name *Name `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty"`
	// Metadata is an object with information like create, update and delete time
	// (for async deleted resources), has user labels/annotations, sharding
	// information, multi-region syncing information and may have non-schema
	// owners (useful for taking ownership of resources belonging to lower level
	// services by higher ones).
	Metadata *meta.Meta `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Display Name
	DisplayName string `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Long description
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// List of documents useful for troubleshooting and fixing alerts triggered
	// by this condition.
	SupportingDocs []*document.Reference `protobuf:"bytes,5,rep,customtype=Reference,name=supporting_docs,json=supportingDocs,proto3" json:"supporting_docs,omitempty"`
	// Spec defines queries, thresholds and anomaly detector specs.
	Spec *TsCondition_Spec `protobuf:"bytes,6,opt,name=spec,proto3" json:"spec,omitempty"`
	// Internal field.
	Internal *TsCondition_Internal `protobuf:"bytes,7,opt,name=internal,proto3" json:"internal,omitempty"`
	// filter selector simplifies querying TsCondition resources.
	// For example, it allows to make query like:
	// * List TsConditions WHERE filter_selector.metric.types CONTAINS
	// "device/cpu"
	FilterSelector *TsCondition_Selector `protobuf:"bytes,8,opt,name=filter_selector,json=filterSelector,proto3" json:"filter_selector,omitempty"`
}

func (m *TsCondition) Reset() {
	*m = TsCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_ts_condition_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *TsCondition) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*TsCondition) ProtoMessage() {}

func (m *TsCondition) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_ts_condition_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*TsCondition) GotenMessage() {}

// Deprecated, Use TsCondition.ProtoReflect.Descriptor instead.
func (*TsCondition) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_ts_condition_proto_rawDescGZIP(), []int{0}
}

func (m *TsCondition) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *TsCondition) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *TsCondition) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *TsCondition) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *TsCondition) GetName() *Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *TsCondition) GetMetadata() *meta.Meta {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *TsCondition) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *TsCondition) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *TsCondition) GetSupportingDocs() []*document.Reference {
	if m != nil {
		return m.SupportingDocs
	}
	return nil
}

func (m *TsCondition) GetSpec() *TsCondition_Spec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *TsCondition) GetInternal() *TsCondition_Internal {
	if m != nil {
		return m.Internal
	}
	return nil
}

func (m *TsCondition) GetFilterSelector() *TsCondition_Selector {
	if m != nil {
		return m.FilterSelector
	}
	return nil
}

func (m *TsCondition) SetName(fv *Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "TsCondition"))
	}
	m.Name = fv
}

func (m *TsCondition) SetMetadata(fv *meta.Meta) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Metadata", "TsCondition"))
	}
	m.Metadata = fv
}

func (m *TsCondition) SetDisplayName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DisplayName", "TsCondition"))
	}
	m.DisplayName = fv
}

func (m *TsCondition) SetDescription(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Description", "TsCondition"))
	}
	m.Description = fv
}

func (m *TsCondition) SetSupportingDocs(fv []*document.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SupportingDocs", "TsCondition"))
	}
	m.SupportingDocs = fv
}

func (m *TsCondition) SetSpec(fv *TsCondition_Spec) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Spec", "TsCondition"))
	}
	m.Spec = fv
}

func (m *TsCondition) SetInternal(fv *TsCondition_Internal) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Internal", "TsCondition"))
	}
	m.Internal = fv
}

func (m *TsCondition) SetFilterSelector(fv *TsCondition_Selector) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FilterSelector", "TsCondition"))
	}
	m.FilterSelector = fv
}

// AlertingThreshold defines threshold value for alerting.
type AlertingThreshold struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Value that must not be crossed.
	Value float64 `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	// If true, then alert is raised when exact specified value is
	// reached. Otherwise, it has to be crossed.
	IsInclusive bool `protobuf:"varint,2,opt,name=is_inclusive,json=isInclusive,proto3" json:"is_inclusive,omitempty"`
}

func (m *AlertingThreshold) Reset() {
	*m = AlertingThreshold{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_ts_condition_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *AlertingThreshold) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*AlertingThreshold) ProtoMessage() {}

func (m *AlertingThreshold) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_ts_condition_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*AlertingThreshold) GotenMessage() {}

// Deprecated, Use AlertingThreshold.ProtoReflect.Descriptor instead.
func (*AlertingThreshold) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_ts_condition_proto_rawDescGZIP(), []int{1}
}

func (m *AlertingThreshold) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *AlertingThreshold) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *AlertingThreshold) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *AlertingThreshold) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *AlertingThreshold) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return float64(0)
}

func (m *AlertingThreshold) GetIsInclusive() bool {
	if m != nil {
		return m.IsInclusive
	}
	return false
}

func (m *AlertingThreshold) SetValue(fv float64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Value", "AlertingThreshold"))
	}
	m.Value = fv
}

func (m *AlertingThreshold) SetIsInclusive(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IsInclusive", "AlertingThreshold"))
	}
	m.IsInclusive = fv
}

// Spec defines time series queries and thresholds/anomaly detectors.
type TsCondition_Spec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// List of observed queries. Each by default can raise alert by
	// threshold. If anomaly detectors are specified, they try to learn
	// all time series together.
	Queries []*TsCondition_Spec_Query `protobuf:"bytes,1,rep,name=queries,proto3" json:"queries,omitempty"`
	// List of group by labels applied to all queries.
	// Each unique combination of group_by is tracked separately.
	// It has its own adaptive thresholds, its own anomaly detectors.
	// One such representation has a form of resource TsEntry.
	// Group by fields must define all labels defined in Policy.
	QueryGroupBy []string `protobuf:"bytes,2,rep,name=query_group_by,json=queryGroupBy,proto3" json:"query_group_by,omitempty"`
	// Threshold alerting configuration
	ThresholdAlerting *TsCondition_Spec_ThresholdAlertingCfg `protobuf:"bytes,3,opt,name=threshold_alerting,json=thresholdAlerting,proto3" json:"threshold_alerting,omitempty"`
	// All anomaly detectors. Its possible to define multiple
	// detectors with different analysis window. It is advisable
	// to create one detector catching long window (1 day, step
	// interval 15 minutes), followed by small window (15 minutes,
	// step interval 1 minute). This should catch sudden and small
	// anomalies, along with long term unexpected changes.
	// Maintaining long window (1 day) along with small interval
	// (1 minute) would be too costly.
	// Other option detectors may be:
	// 1 day / 30 minutes + 30 minutes / 1 minute.
	AnomalyAlerting []*TsCondition_Spec_AnomalyAlertingCfg `protobuf:"bytes,5,rep,name=anomaly_alerting,json=anomalyAlerting,proto3" json:"anomaly_alerting,omitempty"`
}

func (m *TsCondition_Spec) Reset() {
	*m = TsCondition_Spec{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_ts_condition_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *TsCondition_Spec) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*TsCondition_Spec) ProtoMessage() {}

func (m *TsCondition_Spec) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_ts_condition_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*TsCondition_Spec) GotenMessage() {}

// Deprecated, Use TsCondition_Spec.ProtoReflect.Descriptor instead.
func (*TsCondition_Spec) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_ts_condition_proto_rawDescGZIP(), []int{0, 0}
}

func (m *TsCondition_Spec) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *TsCondition_Spec) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *TsCondition_Spec) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *TsCondition_Spec) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *TsCondition_Spec) GetQueries() []*TsCondition_Spec_Query {
	if m != nil {
		return m.Queries
	}
	return nil
}

func (m *TsCondition_Spec) GetQueryGroupBy() []string {
	if m != nil {
		return m.QueryGroupBy
	}
	return nil
}

func (m *TsCondition_Spec) GetThresholdAlerting() *TsCondition_Spec_ThresholdAlertingCfg {
	if m != nil {
		return m.ThresholdAlerting
	}
	return nil
}

func (m *TsCondition_Spec) GetAnomalyAlerting() []*TsCondition_Spec_AnomalyAlertingCfg {
	if m != nil {
		return m.AnomalyAlerting
	}
	return nil
}

func (m *TsCondition_Spec) SetQueries(fv []*TsCondition_Spec_Query) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Queries", "TsCondition_Spec"))
	}
	m.Queries = fv
}

func (m *TsCondition_Spec) SetQueryGroupBy(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "QueryGroupBy", "TsCondition_Spec"))
	}
	m.QueryGroupBy = fv
}

func (m *TsCondition_Spec) SetThresholdAlerting(fv *TsCondition_Spec_ThresholdAlertingCfg) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ThresholdAlerting", "TsCondition_Spec"))
	}
	m.ThresholdAlerting = fv
}

func (m *TsCondition_Spec) SetAnomalyAlerting(fv []*TsCondition_Spec_AnomalyAlertingCfg) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AnomalyAlerting", "TsCondition_Spec"))
	}
	m.AnomalyAlerting = fv
}

// Internal data.
type TsCondition_Internal struct {
	state               protoimpl.MessageState
	sizeCache           protoimpl.SizeCache
	unknownFields       protoimpl.UnknownFields
	CommonKeyKset       []byte                                `protobuf:"bytes,1,opt,name=common_key_kset,json=commonKeyKset,proto3" json:"common_key_kset,omitempty"`
	EntrySpecGeneration int32                                 `protobuf:"varint,2,opt,name=entry_spec_generation,json=entrySpecGeneration,proto3" json:"entry_spec_generation,omitempty"`
	AlertingLocation    policy.Policy_Spec_ProcessingLocation `protobuf:"varint,3,opt,name=alerting_location,json=alertingLocation,proto3,enum=ntt.alerting.v1.Policy_Spec_ProcessingLocation" json:"alerting_location,omitempty"`
}

func (m *TsCondition_Internal) Reset() {
	*m = TsCondition_Internal{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_ts_condition_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *TsCondition_Internal) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*TsCondition_Internal) ProtoMessage() {}

func (m *TsCondition_Internal) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_ts_condition_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*TsCondition_Internal) GotenMessage() {}

// Deprecated, Use TsCondition_Internal.ProtoReflect.Descriptor instead.
func (*TsCondition_Internal) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_ts_condition_proto_rawDescGZIP(), []int{0, 1}
}

func (m *TsCondition_Internal) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *TsCondition_Internal) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *TsCondition_Internal) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *TsCondition_Internal) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *TsCondition_Internal) GetCommonKeyKset() []byte {
	if m != nil {
		return m.CommonKeyKset
	}
	return nil
}

func (m *TsCondition_Internal) GetEntrySpecGeneration() int32 {
	if m != nil {
		return m.EntrySpecGeneration
	}
	return int32(0)
}

func (m *TsCondition_Internal) GetAlertingLocation() policy.Policy_Spec_ProcessingLocation {
	if m != nil {
		return m.AlertingLocation
	}
	return policy.Policy_Spec_UNDEFINED
}

func (m *TsCondition_Internal) SetCommonKeyKset(fv []byte) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CommonKeyKset", "TsCondition_Internal"))
	}
	m.CommonKeyKset = fv
}

func (m *TsCondition_Internal) SetEntrySpecGeneration(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "EntrySpecGeneration", "TsCondition_Internal"))
	}
	m.EntrySpecGeneration = fv
}

func (m *TsCondition_Internal) SetAlertingLocation(fv policy.Policy_Spec_ProcessingLocation) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AlertingLocation", "TsCondition_Internal"))
	}
	m.AlertingLocation = fv
}

// Selector contains detected metric/resource types and common
// labels used in filters from all queries. Selector facilitates
// filtering TsCondition resources.
// It is generated when TsCondition is saved (on the fly).
type TsCondition_Selector struct {
	state                protoimpl.MessageState
	sizeCache            protoimpl.SizeCache
	unknownFields        protoimpl.UnknownFields
	MetricTypes          []string                                 `protobuf:"bytes,1,rep,name=metric_types,json=metricTypes,proto3" json:"metric_types,omitempty"`
	ResourceTypes        []string                                 `protobuf:"bytes,2,rep,name=resource_types,json=resourceTypes,proto3" json:"resource_types,omitempty"`
	CommonMetricLabels   map[string]*TsCondition_Selector_Strings `protobuf:"bytes,3,rep,name=common_metric_labels,json=commonMetricLabels,proto3" json:"common_metric_labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CommonResourceLabels map[string]*TsCondition_Selector_Strings `protobuf:"bytes,4,rep,name=common_resource_labels,json=commonResourceLabels,proto3" json:"common_resource_labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *TsCondition_Selector) Reset() {
	*m = TsCondition_Selector{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_ts_condition_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *TsCondition_Selector) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*TsCondition_Selector) ProtoMessage() {}

func (m *TsCondition_Selector) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_ts_condition_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*TsCondition_Selector) GotenMessage() {}

// Deprecated, Use TsCondition_Selector.ProtoReflect.Descriptor instead.
func (*TsCondition_Selector) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_ts_condition_proto_rawDescGZIP(), []int{0, 2}
}

func (m *TsCondition_Selector) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *TsCondition_Selector) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *TsCondition_Selector) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *TsCondition_Selector) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *TsCondition_Selector) GetMetricTypes() []string {
	if m != nil {
		return m.MetricTypes
	}
	return nil
}

func (m *TsCondition_Selector) GetResourceTypes() []string {
	if m != nil {
		return m.ResourceTypes
	}
	return nil
}

func (m *TsCondition_Selector) GetCommonMetricLabels() map[string]*TsCondition_Selector_Strings {
	if m != nil {
		return m.CommonMetricLabels
	}
	return nil
}

func (m *TsCondition_Selector) GetCommonResourceLabels() map[string]*TsCondition_Selector_Strings {
	if m != nil {
		return m.CommonResourceLabels
	}
	return nil
}

func (m *TsCondition_Selector) SetMetricTypes(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MetricTypes", "TsCondition_Selector"))
	}
	m.MetricTypes = fv
}

func (m *TsCondition_Selector) SetResourceTypes(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResourceTypes", "TsCondition_Selector"))
	}
	m.ResourceTypes = fv
}

func (m *TsCondition_Selector) SetCommonMetricLabels(fv map[string]*TsCondition_Selector_Strings) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CommonMetricLabels", "TsCondition_Selector"))
	}
	m.CommonMetricLabels = fv
}

func (m *TsCondition_Selector) SetCommonResourceLabels(fv map[string]*TsCondition_Selector_Strings) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CommonResourceLabels", "TsCondition_Selector"))
	}
	m.CommonResourceLabels = fv
}

// Query defines a single TimeSeries query and basic alerting thresholds.
type TsCondition_Spec_Query struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Query description.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Time series query filter
	Filter *monitoring_time_serie.Filter `protobuf:"bytes,2,opt,customtype=Filter,name=filter,proto3" json:"filter,omitempty"`
	// Aligner applied on individual TimeSeries.
	Aligner monitoring_common.Aggregation_Aligner `protobuf:"varint,3,opt,name=aligner,proto3,enum=ntt.monitoring.v4.Aggregation_Aligner" json:"aligner,omitempty"`
	// Reducer applied across TimeSeries according to Spec.query_group_by
	// field in the Spec.
	Reducer monitoring_common.Aggregation_Reducer `protobuf:"varint,4,opt,name=reducer,proto3,enum=ntt.monitoring.v4.Aggregation_Reducer" json:"reducer,omitempty"`
	// Maximum value (approximated) that time series values will have for this
	// query. It is a soft value: If higher values are detected,
	// thresholds/anomaly models will adjust to them. If set to 0, it will be
	// auto-detected (heuristic). If time series are negative, max_value
	// should indicate maximum value FROM zero: Therefore, it can be a
	// negative value.
	MaxValue float64 `protobuf:"fixed64,5,opt,name=max_value,json=maxValue,proto3" json:"max_value,omitempty"`
}

func (m *TsCondition_Spec_Query) Reset() {
	*m = TsCondition_Spec_Query{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_ts_condition_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *TsCondition_Spec_Query) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*TsCondition_Spec_Query) ProtoMessage() {}

func (m *TsCondition_Spec_Query) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_ts_condition_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*TsCondition_Spec_Query) GotenMessage() {}

// Deprecated, Use TsCondition_Spec_Query.ProtoReflect.Descriptor instead.
func (*TsCondition_Spec_Query) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_ts_condition_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (m *TsCondition_Spec_Query) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *TsCondition_Spec_Query) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *TsCondition_Spec_Query) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *TsCondition_Spec_Query) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *TsCondition_Spec_Query) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TsCondition_Spec_Query) GetFilter() *monitoring_time_serie.Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *TsCondition_Spec_Query) GetAligner() monitoring_common.Aggregation_Aligner {
	if m != nil {
		return m.Aligner
	}
	return monitoring_common.Aggregation_ALIGN_NONE
}

func (m *TsCondition_Spec_Query) GetReducer() monitoring_common.Aggregation_Reducer {
	if m != nil {
		return m.Reducer
	}
	return monitoring_common.Aggregation_REDUCE_NONE
}

func (m *TsCondition_Spec_Query) GetMaxValue() float64 {
	if m != nil {
		return m.MaxValue
	}
	return float64(0)
}

func (m *TsCondition_Spec_Query) SetName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "TsCondition_Spec_Query"))
	}
	m.Name = fv
}

func (m *TsCondition_Spec_Query) SetFilter(fv *monitoring_time_serie.Filter) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Filter", "TsCondition_Spec_Query"))
	}
	m.Filter = fv
}

func (m *TsCondition_Spec_Query) SetAligner(fv monitoring_common.Aggregation_Aligner) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Aligner", "TsCondition_Spec_Query"))
	}
	m.Aligner = fv
}

func (m *TsCondition_Spec_Query) SetReducer(fv monitoring_common.Aggregation_Reducer) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Reducer", "TsCondition_Spec_Query"))
	}
	m.Reducer = fv
}

func (m *TsCondition_Spec_Query) SetMaxValue(fv float64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MaxValue", "TsCondition_Spec_Query"))
	}
	m.MaxValue = fv
}

// ThresholdAlertingCfg describes when alerts of THRESHOLD type
// must be raised.
type TsCondition_Spec_ThresholdAlertingCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Operator for threshold-type alerts
	Operator TsCondition_Spec_ThresholdAlertingCfg_Operator `protobuf:"varint,1,opt,name=operator,proto3,enum=ntt.alerting.v1.TsCondition_Spec_ThresholdAlertingCfg_Operator" json:"operator,omitempty"`
	// Alignment period for data points used to monitor thresholds.
	AlignmentPeriod *durationpb.Duration `protobuf:"bytes,2,opt,name=alignment_period,json=alignmentPeriod,proto3" json:"alignment_period,omitempty"`
	// Violation duration after which alert must be raised.
	RaiseAfter *durationpb.Duration `protobuf:"bytes,3,opt,name=raise_after,json=raiseAfter,proto3" json:"raise_after,omitempty"`
	// Duration after which Alert stops firing when violations no longer
	// occur. By default, equals to raise_after.
	SilenceAfter *durationpb.Duration `protobuf:"bytes,4,opt,name=silence_after,json=silenceAfter,proto3" json:"silence_after,omitempty"`
	// Thresholds per each query (in same order).
	PerQueryThresholds []*TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds `protobuf:"bytes,5,rep,name=per_query_thresholds,json=perQueryThresholds,proto3" json:"per_query_thresholds,omitempty"`
	// This field is recommended to be set if adaptive thresholds are used.
	// For each unique group by fields combination, dynamic thresholds will
	// be detected based on historic data of specified length.
	// One week by default.
	AdaptiveThresholdsDetectionPeriod *durationpb.Duration `protobuf:"bytes,6,opt,name=adaptive_thresholds_detection_period,json=adaptiveThresholdsDetectionPeriod,proto3" json:"adaptive_thresholds_detection_period,omitempty"`
}

func (m *TsCondition_Spec_ThresholdAlertingCfg) Reset() {
	*m = TsCondition_Spec_ThresholdAlertingCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_ts_condition_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *TsCondition_Spec_ThresholdAlertingCfg) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*TsCondition_Spec_ThresholdAlertingCfg) ProtoMessage() {}

func (m *TsCondition_Spec_ThresholdAlertingCfg) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_ts_condition_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*TsCondition_Spec_ThresholdAlertingCfg) GotenMessage() {}

// Deprecated, Use TsCondition_Spec_ThresholdAlertingCfg.ProtoReflect.Descriptor instead.
func (*TsCondition_Spec_ThresholdAlertingCfg) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_ts_condition_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (m *TsCondition_Spec_ThresholdAlertingCfg) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *TsCondition_Spec_ThresholdAlertingCfg) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *TsCondition_Spec_ThresholdAlertingCfg) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *TsCondition_Spec_ThresholdAlertingCfg) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *TsCondition_Spec_ThresholdAlertingCfg) GetOperator() TsCondition_Spec_ThresholdAlertingCfg_Operator {
	if m != nil {
		return m.Operator
	}
	return TsCondition_Spec_ThresholdAlertingCfg_UNDEFINED
}

func (m *TsCondition_Spec_ThresholdAlertingCfg) GetAlignmentPeriod() *durationpb.Duration {
	if m != nil {
		return m.AlignmentPeriod
	}
	return nil
}

func (m *TsCondition_Spec_ThresholdAlertingCfg) GetRaiseAfter() *durationpb.Duration {
	if m != nil {
		return m.RaiseAfter
	}
	return nil
}

func (m *TsCondition_Spec_ThresholdAlertingCfg) GetSilenceAfter() *durationpb.Duration {
	if m != nil {
		return m.SilenceAfter
	}
	return nil
}

func (m *TsCondition_Spec_ThresholdAlertingCfg) GetPerQueryThresholds() []*TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds {
	if m != nil {
		return m.PerQueryThresholds
	}
	return nil
}

func (m *TsCondition_Spec_ThresholdAlertingCfg) GetAdaptiveThresholdsDetectionPeriod() *durationpb.Duration {
	if m != nil {
		return m.AdaptiveThresholdsDetectionPeriod
	}
	return nil
}

func (m *TsCondition_Spec_ThresholdAlertingCfg) SetOperator(fv TsCondition_Spec_ThresholdAlertingCfg_Operator) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Operator", "TsCondition_Spec_ThresholdAlertingCfg"))
	}
	m.Operator = fv
}

func (m *TsCondition_Spec_ThresholdAlertingCfg) SetAlignmentPeriod(fv *durationpb.Duration) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AlignmentPeriod", "TsCondition_Spec_ThresholdAlertingCfg"))
	}
	m.AlignmentPeriod = fv
}

func (m *TsCondition_Spec_ThresholdAlertingCfg) SetRaiseAfter(fv *durationpb.Duration) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "RaiseAfter", "TsCondition_Spec_ThresholdAlertingCfg"))
	}
	m.RaiseAfter = fv
}

func (m *TsCondition_Spec_ThresholdAlertingCfg) SetSilenceAfter(fv *durationpb.Duration) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SilenceAfter", "TsCondition_Spec_ThresholdAlertingCfg"))
	}
	m.SilenceAfter = fv
}

func (m *TsCondition_Spec_ThresholdAlertingCfg) SetPerQueryThresholds(fv []*TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PerQueryThresholds", "TsCondition_Spec_ThresholdAlertingCfg"))
	}
	m.PerQueryThresholds = fv
}

func (m *TsCondition_Spec_ThresholdAlertingCfg) SetAdaptiveThresholdsDetectionPeriod(fv *durationpb.Duration) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AdaptiveThresholdsDetectionPeriod", "TsCondition_Spec_ThresholdAlertingCfg"))
	}
	m.AdaptiveThresholdsDetectionPeriod = fv
}

// AnomalyDetector defines AI/ML based anomaly detector.
// It can catch anomalies that are more sophisticated
// than max/min thresholds.
type TsCondition_Spec_AnomalyAlertingCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Sliding analysis window observed at once by AI model.
	// For larger windows, it is highly advisable for query_ap
	// to be accordingly larger.
	AnalysisWindow *durationpb.Duration `protobuf:"bytes,1,opt,name=analysis_window,json=analysisWindow,proto3" json:"analysis_window,omitempty"`
	// Duration of each time step in sliding analysis window.
	// Anomaly detection is run after each step.
	StepInterval *durationpb.Duration `protobuf:"bytes,2,opt,name=step_interval,json=stepInterval,proto3" json:"step_interval,omitempty"`
	// It is like step interval, but special used for training only.
	// For example, we may want to run anomaly detection of size 30 minutes
	// each 5 minutes. But in training, to reduce number of batches, we may
	// prefer larger value, like 15 minutes or maybe even 30.
	TrainStepInterval *durationpb.Duration `protobuf:"bytes,7,opt,name=train_step_interval,json=trainStepInterval,proto3" json:"train_step_interval,omitempty"`
	// Granularity of data points within each step.
	AlignmentPeriod *durationpb.Duration `protobuf:"bytes,3,opt,name=alignment_period,json=alignmentPeriod,proto3" json:"alignment_period,omitempty"`
	RaiseAfter      *durationpb.Duration `protobuf:"bytes,5,opt,name=raise_after,json=raiseAfter,proto3" json:"raise_after,omitempty"`
	SilenceAfter    *durationpb.Duration `protobuf:"bytes,6,opt,name=silence_after,json=silenceAfter,proto3" json:"silence_after,omitempty"`
	// Types that are valid to be assigned to Model:
	//	*TsCondition_Spec_AnomalyAlertingCfg_LstmAutoencoder
	Model isTsCondition_Spec_AnomalyAlertingCfg_Model `protobuf_oneof:"model"`
}

func (m *TsCondition_Spec_AnomalyAlertingCfg) Reset() {
	*m = TsCondition_Spec_AnomalyAlertingCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_ts_condition_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *TsCondition_Spec_AnomalyAlertingCfg) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*TsCondition_Spec_AnomalyAlertingCfg) ProtoMessage() {}

func (m *TsCondition_Spec_AnomalyAlertingCfg) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_ts_condition_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*TsCondition_Spec_AnomalyAlertingCfg) GotenMessage() {}

// Deprecated, Use TsCondition_Spec_AnomalyAlertingCfg.ProtoReflect.Descriptor instead.
func (*TsCondition_Spec_AnomalyAlertingCfg) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_ts_condition_proto_rawDescGZIP(), []int{0, 0, 2}
}

func (m *TsCondition_Spec_AnomalyAlertingCfg) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *TsCondition_Spec_AnomalyAlertingCfg) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *TsCondition_Spec_AnomalyAlertingCfg) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *TsCondition_Spec_AnomalyAlertingCfg) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

type isTsCondition_Spec_AnomalyAlertingCfg_Model interface {
	isTsCondition_Spec_AnomalyAlertingCfg_Model()
}

type TsCondition_Spec_AnomalyAlertingCfg_LstmAutoencoder struct {
	LstmAutoencoder *TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder `protobuf:"bytes,4,opt,name=lstm_autoencoder,json=lstmAutoencoder,proto3,oneof"`
}

func (*TsCondition_Spec_AnomalyAlertingCfg_LstmAutoencoder) isTsCondition_Spec_AnomalyAlertingCfg_Model() {
}
func (m *TsCondition_Spec_AnomalyAlertingCfg) GetAnalysisWindow() *durationpb.Duration {
	if m != nil {
		return m.AnalysisWindow
	}
	return nil
}

func (m *TsCondition_Spec_AnomalyAlertingCfg) GetStepInterval() *durationpb.Duration {
	if m != nil {
		return m.StepInterval
	}
	return nil
}

func (m *TsCondition_Spec_AnomalyAlertingCfg) GetTrainStepInterval() *durationpb.Duration {
	if m != nil {
		return m.TrainStepInterval
	}
	return nil
}

func (m *TsCondition_Spec_AnomalyAlertingCfg) GetAlignmentPeriod() *durationpb.Duration {
	if m != nil {
		return m.AlignmentPeriod
	}
	return nil
}

func (m *TsCondition_Spec_AnomalyAlertingCfg) GetRaiseAfter() *durationpb.Duration {
	if m != nil {
		return m.RaiseAfter
	}
	return nil
}

func (m *TsCondition_Spec_AnomalyAlertingCfg) GetSilenceAfter() *durationpb.Duration {
	if m != nil {
		return m.SilenceAfter
	}
	return nil
}

func (m *TsCondition_Spec_AnomalyAlertingCfg) GetModel() isTsCondition_Spec_AnomalyAlertingCfg_Model {
	if m != nil {
		return m.Model
	}
	return nil
}
func (m *TsCondition_Spec_AnomalyAlertingCfg) GetLstmAutoencoder() *TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder {
	if x, ok := m.GetModel().(*TsCondition_Spec_AnomalyAlertingCfg_LstmAutoencoder); ok {
		return x.LstmAutoencoder
	}
	return nil
}
func (m *TsCondition_Spec_AnomalyAlertingCfg) SetAnalysisWindow(fv *durationpb.Duration) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AnalysisWindow", "TsCondition_Spec_AnomalyAlertingCfg"))
	}
	m.AnalysisWindow = fv
}

func (m *TsCondition_Spec_AnomalyAlertingCfg) SetStepInterval(fv *durationpb.Duration) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "StepInterval", "TsCondition_Spec_AnomalyAlertingCfg"))
	}
	m.StepInterval = fv
}

func (m *TsCondition_Spec_AnomalyAlertingCfg) SetTrainStepInterval(fv *durationpb.Duration) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TrainStepInterval", "TsCondition_Spec_AnomalyAlertingCfg"))
	}
	m.TrainStepInterval = fv
}

func (m *TsCondition_Spec_AnomalyAlertingCfg) SetAlignmentPeriod(fv *durationpb.Duration) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AlignmentPeriod", "TsCondition_Spec_AnomalyAlertingCfg"))
	}
	m.AlignmentPeriod = fv
}

func (m *TsCondition_Spec_AnomalyAlertingCfg) SetRaiseAfter(fv *durationpb.Duration) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "RaiseAfter", "TsCondition_Spec_AnomalyAlertingCfg"))
	}
	m.RaiseAfter = fv
}

func (m *TsCondition_Spec_AnomalyAlertingCfg) SetSilenceAfter(fv *durationpb.Duration) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SilenceAfter", "TsCondition_Spec_AnomalyAlertingCfg"))
	}
	m.SilenceAfter = fv
}

func (m *TsCondition_Spec_AnomalyAlertingCfg) SetModel(ofv isTsCondition_Spec_AnomalyAlertingCfg_Model) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "isTsCondition_Spec_AnomalyAlertingCfg_Model", "TsCondition_Spec_AnomalyAlertingCfg"))
	}
	m.Model = ofv
}
func (m *TsCondition_Spec_AnomalyAlertingCfg) SetLstmAutoencoder(fv *TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder) {
	m.SetModel(&TsCondition_Spec_AnomalyAlertingCfg_LstmAutoencoder{LstmAutoencoder: fv})
}

// AlertingThresholds represents all thresholds.
// When they are crossed by time series values, alert will be raised.
// Max thresholds are active all the time.
// Adaptive thresholds are active when anomaly detectors
// are not available (not defined or in training).
type TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Whether upper threshold should be set and adaptive.
	AutoAdaptUpper bool `protobuf:"varint,1,opt,name=auto_adapt_upper,json=autoAdaptUpper,proto3" json:"auto_adapt_upper,omitempty"`
	// Whether lower threshold should be set and adaptive.
	AutoAdaptLower bool `protobuf:"varint,2,opt,name=auto_adapt_lower,json=autoAdaptLower,proto3" json:"auto_adapt_lower,omitempty"`
	// Maximum allowed upper threshold. When crossed ABOVE,
	// alert is raised. Can be set to nil, but in that
	// case max_lower is mandatory.
	MaxUpper *AlertingThreshold `protobuf:"bytes,3,opt,name=max_upper,json=maxUpper,proto3" json:"max_upper,omitempty"`
	// Maximum allowed lower threshold. When crossed BELOW,
	// alert is raised. Can be set to nil, but in that
	// case max_upper is mandatory.
	MaxLower *AlertingThreshold `protobuf:"bytes,4,opt,name=max_lower,json=maxLower,proto3" json:"max_lower,omitempty"`
}

func (m *TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds) Reset() {
	*m = TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_ts_condition_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds) ProtoMessage() {}

func (m *TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_ts_condition_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds) GotenMessage() {}

// Deprecated, Use TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds.ProtoReflect.Descriptor instead.
func (*TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_ts_condition_proto_rawDescGZIP(), []int{0, 0, 1, 0}
}

func (m *TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds) GetAutoAdaptUpper() bool {
	if m != nil {
		return m.AutoAdaptUpper
	}
	return false
}

func (m *TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds) GetAutoAdaptLower() bool {
	if m != nil {
		return m.AutoAdaptLower
	}
	return false
}

func (m *TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds) GetMaxUpper() *AlertingThreshold {
	if m != nil {
		return m.MaxUpper
	}
	return nil
}

func (m *TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds) GetMaxLower() *AlertingThreshold {
	if m != nil {
		return m.MaxLower
	}
	return nil
}

func (m *TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds) SetAutoAdaptUpper(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AutoAdaptUpper", "TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds"))
	}
	m.AutoAdaptUpper = fv
}

func (m *TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds) SetAutoAdaptLower(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AutoAdaptLower", "TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds"))
	}
	m.AutoAdaptLower = fv
}

func (m *TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds) SetMaxUpper(fv *AlertingThreshold) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MaxUpper", "TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds"))
	}
	m.MaxUpper = fv
}

func (m *TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds) SetMaxLower(fv *AlertingThreshold) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MaxLower", "TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds"))
	}
	m.MaxLower = fv
}

// LstmAutoEncoder defines LSTM AutoEncoder model for anomaly detection.
type TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Hidden size. Larger increases model size.
	HiddenSize int32 `protobuf:"varint,1,opt,name=hidden_size,json=hiddenSize,proto3" json:"hidden_size,omitempty"`
	// Learn rate used in Adam optimizer.
	// This is suggested value. System may iterate other well known
	// working values for best detection.
	LearnRate float64 `protobuf:"fixed64,2,opt,name=learn_rate,json=learnRate,proto3" json:"learn_rate,omitempty"`
	// Maximum number of epochs after which training must stop.
	MaxTrainingEpochs int32 `protobuf:"varint,3,opt,name=max_training_epochs,json=maxTrainingEpochs,proto3" json:"max_training_epochs,omitempty"`
	// Minimum number of training epochs model must train.
	MinTrainingEpochs int32 `protobuf:"varint,4,opt,name=min_training_epochs,json=minTrainingEpochs,proto3" json:"min_training_epochs,omitempty"`
	// Minimum acceptable error after training stops.
	// When it is achieved, check samples are used to determine
	// actual error rates.
	// Too large value may cause overfit.
	// This is suggested value. System may find other values
	// giving better results.
	AcceptableTrainingError float64 `protobuf:"fixed64,5,opt,name=acceptable_training_error,json=acceptableTrainingError,proto3" json:"acceptable_training_error,omitempty"`
	// How much time must be obtained for training purposes.
	TrainingPeriod *durationpb.Duration `protobuf:"bytes,6,opt,name=training_period,json=trainingPeriod,proto3" json:"training_period,omitempty"`
	// Training period, analysis window and training step interval
	// directly influence how many training samples are created.
	// Fraction is then used for detecting practical anomalies
	// and initializing anomaly thresholds.
	CheckPeriodFraction float64 `protobuf:"fixed64,7,opt,name=check_period_fraction,json=checkPeriodFraction,proto3" json:"check_period_fraction,omitempty"`
}

func (m *TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder) Reset() {
	*m = TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_ts_condition_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder) ProtoMessage() {}

func (m *TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_ts_condition_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder) GotenMessage() {}

// Deprecated, Use TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder.ProtoReflect.Descriptor instead.
func (*TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_ts_condition_proto_rawDescGZIP(), []int{0, 0, 2, 0}
}

func (m *TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder) GetHiddenSize() int32 {
	if m != nil {
		return m.HiddenSize
	}
	return int32(0)
}

func (m *TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder) GetLearnRate() float64 {
	if m != nil {
		return m.LearnRate
	}
	return float64(0)
}

func (m *TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder) GetMaxTrainingEpochs() int32 {
	if m != nil {
		return m.MaxTrainingEpochs
	}
	return int32(0)
}

func (m *TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder) GetMinTrainingEpochs() int32 {
	if m != nil {
		return m.MinTrainingEpochs
	}
	return int32(0)
}

func (m *TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder) GetAcceptableTrainingError() float64 {
	if m != nil {
		return m.AcceptableTrainingError
	}
	return float64(0)
}

func (m *TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder) GetTrainingPeriod() *durationpb.Duration {
	if m != nil {
		return m.TrainingPeriod
	}
	return nil
}

func (m *TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder) GetCheckPeriodFraction() float64 {
	if m != nil {
		return m.CheckPeriodFraction
	}
	return float64(0)
}

func (m *TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder) SetHiddenSize(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "HiddenSize", "TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder"))
	}
	m.HiddenSize = fv
}

func (m *TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder) SetLearnRate(fv float64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "LearnRate", "TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder"))
	}
	m.LearnRate = fv
}

func (m *TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder) SetMaxTrainingEpochs(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MaxTrainingEpochs", "TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder"))
	}
	m.MaxTrainingEpochs = fv
}

func (m *TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder) SetMinTrainingEpochs(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MinTrainingEpochs", "TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder"))
	}
	m.MinTrainingEpochs = fv
}

func (m *TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder) SetAcceptableTrainingError(fv float64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AcceptableTrainingError", "TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder"))
	}
	m.AcceptableTrainingError = fv
}

func (m *TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder) SetTrainingPeriod(fv *durationpb.Duration) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TrainingPeriod", "TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder"))
	}
	m.TrainingPeriod = fv
}

func (m *TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder) SetCheckPeriodFraction(fv float64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CheckPeriodFraction", "TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder"))
	}
	m.CheckPeriodFraction = fv
}

type TsCondition_Selector_Strings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Values        []string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (m *TsCondition_Selector_Strings) Reset() {
	*m = TsCondition_Selector_Strings{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_ts_condition_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *TsCondition_Selector_Strings) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*TsCondition_Selector_Strings) ProtoMessage() {}

func (m *TsCondition_Selector_Strings) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_ts_condition_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*TsCondition_Selector_Strings) GotenMessage() {}

// Deprecated, Use TsCondition_Selector_Strings.ProtoReflect.Descriptor instead.
func (*TsCondition_Selector_Strings) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_ts_condition_proto_rawDescGZIP(), []int{0, 2, 0}
}

func (m *TsCondition_Selector_Strings) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *TsCondition_Selector_Strings) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *TsCondition_Selector_Strings) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *TsCondition_Selector_Strings) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *TsCondition_Selector_Strings) GetValues() []string {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *TsCondition_Selector_Strings) SetValues(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Values", "TsCondition_Selector_Strings"))
	}
	m.Values = fv
}

var edgelq_alerting_proto_v1_ts_condition_proto preflect.FileDescriptor

var edgelq_alerting_proto_v1_ts_condition_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x73, 0x5f, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x6e,
	0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x1a, 0x19,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74,
	0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67,
	0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65,
	0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f,
	0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x74,
	0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x67, 0x6f,
	0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x24, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x27, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x34, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x65, 0x64, 0x67, 0x65, 0x6c,
	0x71, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xf9, 0x23, 0x0a, 0x0b, 0x54, 0x73, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x27, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13,
	0xb2, 0xda, 0x21, 0x0f, 0x0a, 0x0d, 0x0a, 0x0b, 0x54, 0x73, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f,
	0x74, 0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b,
	0xca, 0xc6, 0x27, 0x07, 0x2a, 0x05, 0x22, 0x03, 0x08, 0x80, 0x02, 0x52, 0x0b, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xca,
	0xc6, 0x27, 0x07, 0x2a, 0x05, 0x22, 0x03, 0x08, 0x80, 0x04, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0f, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x6f, 0x63, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x12, 0xb2, 0xda, 0x21, 0x0e, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x10, 0x04, 0x52, 0x0e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x44, 0x6f, 0x63, 0x73, 0x12, 0x3f, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x73, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x53, 0x70, 0x65, 0x63, 0x42, 0x08, 0xca, 0xc6, 0x27, 0x04, 0x62, 0x02, 0x08, 0x01, 0x52,
	0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x47, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x73, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x42, 0x04,
	0xf0, 0xd9, 0x21, 0x01, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x54,
	0x0a, 0x0f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x73, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x04,
	0xf0, 0xd9, 0x21, 0x01, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x1a, 0xcf, 0x14, 0x0a, 0x04, 0x53, 0x70, 0x65, 0x63, 0x12, 0x51, 0x0a,
	0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x73, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x70, 0x65,
	0x63, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x0e, 0xca, 0xc6, 0x27, 0x0a, 0x42, 0x08, 0x0a,
	0x02, 0x08, 0x01, 0x12, 0x02, 0x08, 0x10, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x12, 0x34, 0x0a, 0x0e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x62, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0e, 0xca, 0xc6, 0x27, 0x0a, 0x42, 0x08,
	0x0a, 0x00, 0x12, 0x02, 0x08, 0x08, 0x18, 0x01, 0x52, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x12, 0x6f, 0x0a, 0x12, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x73, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x66, 0x67, 0x42, 0x08, 0xca, 0xc6, 0x27, 0x04,
	0x62, 0x02, 0x08, 0x01, 0x52, 0x11, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x6d, 0x0a, 0x10, 0x61, 0x6e, 0x6f, 0x6d, 0x61,
	0x6c, 0x79, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x73, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x53, 0x70, 0x65, 0x63, 0x2e, 0x41, 0x6e, 0x6f, 0x6d, 0x61, 0x6c, 0x79, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x43, 0x66, 0x67, 0x42, 0x0c, 0xca, 0xc6, 0x27, 0x08, 0x42, 0x06, 0x0a,
	0x00, 0x12, 0x02, 0x08, 0x04, 0x52, 0x0f, 0x61, 0x6e, 0x6f, 0x6d, 0x61, 0x6c, 0x79, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x1a, 0x8c, 0x02, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x21, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d,
	0xca, 0xc6, 0x27, 0x09, 0x2a, 0x07, 0x3a, 0x03, 0x08, 0x80, 0x02, 0x68, 0x01, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x27, 0xb2, 0xda, 0x21, 0x23, 0x1a, 0x21, 0x0a, 0x1f, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x52, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x07, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x52, 0x07, 0x61,
	0x6c, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x07, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x41, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x72, 0x52,
	0x07, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6d, 0x61, 0x78,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x92, 0x07, 0x0a, 0x14, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x66, 0x67, 0x12, 0x65,
	0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x3f, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x73, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53,
	0x70, 0x65, 0x63, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x66, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x42, 0x08, 0xca, 0xc6, 0x27, 0x04, 0x3a, 0x02, 0x10, 0x01, 0x52, 0x08, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x80, 0x01, 0x0a, 0x10, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x3a, 0xca, 0xc6, 0x27,
	0x36, 0x5a, 0x34, 0x3a, 0x02, 0x08, 0x3c, 0x3a, 0x03, 0x08, 0xb4, 0x01, 0x3a, 0x03, 0x08, 0xac,
	0x02, 0x3a, 0x03, 0x08, 0x84, 0x07, 0x3a, 0x03, 0x08, 0x88, 0x0e, 0x3a, 0x03, 0x08, 0x90, 0x1c,
	0x3a, 0x03, 0x08, 0xb0, 0x54, 0x3a, 0x04, 0x08, 0xe0, 0xa8, 0x01, 0x3a, 0x04, 0x08, 0xc0, 0xd1,
	0x02, 0x3a, 0x04, 0x08, 0x80, 0xa3, 0x05, 0x52, 0x0f, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x44, 0x0a, 0x0b, 0x72, 0x61, 0x69, 0x73,
	0x65, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0xca, 0xc6, 0x27, 0x04, 0x5a, 0x02,
	0x2a, 0x00, 0x52, 0x0a, 0x72, 0x61, 0x69, 0x73, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x3e,
	0x0a, 0x0d, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0c, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x7b,
	0x0a, 0x14, 0x70, 0x65, 0x72, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x73, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e,
	0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x43, 0x66, 0x67, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x52, 0x12, 0x70, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x12, 0x74, 0x0a, 0x24, 0x61,
	0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0xca, 0xc6, 0x27, 0x04, 0x5a, 0x02, 0x32, 0x00, 0x52, 0x21,
	0x61, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x73, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x1a, 0xea, 0x01, 0x0a, 0x12, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x75, 0x74, 0x6f,
	0x5f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x61, 0x75, 0x74, 0x6f, 0x41, 0x64, 0x61, 0x70, 0x74, 0x55, 0x70, 0x70,
	0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x61, 0x64, 0x61, 0x70, 0x74,
	0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x61, 0x75,
	0x74, 0x6f, 0x41, 0x64, 0x61, 0x70, 0x74, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x09,
	0x6d, 0x61, 0x78, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x55, 0x70, 0x70, 0x65, 0x72, 0x12, 0x3f, 0x0a,
	0x09, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x22, 0x2a,
	0x0a, 0x08, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e,
	0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4e, 0x44,
	0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x52, 0x10, 0x02, 0x1a, 0xb9, 0x08, 0x0a, 0x12, 0x41,
	0x6e, 0x6f, 0x6d, 0x61, 0x6c, 0x79, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x66,
	0x67, 0x12, 0x4f, 0x0a, 0x0f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x77, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0xca, 0xc6, 0x27, 0x07, 0x5a, 0x05, 0x32, 0x03, 0x08,
	0x88, 0x0e, 0x52, 0x0e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x57, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x12, 0x4b, 0x0a, 0x0d, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0xca, 0xc6, 0x27, 0x07, 0x5a, 0x05, 0x32, 0x03, 0x08, 0xac,
	0x02, 0x52, 0x0c, 0x73, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12,
	0x56, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0xca, 0xc6, 0x27, 0x07, 0x5a, 0x05, 0x32,
	0x03, 0x08, 0xac, 0x02, 0x52, 0x11, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x65, 0x70, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x80, 0x01, 0x0a, 0x10, 0x61, 0x6c, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x3a, 0xca,
	0xc6, 0x27, 0x36, 0x5a, 0x34, 0x3a, 0x02, 0x08, 0x3c, 0x3a, 0x03, 0x08, 0xb4, 0x01, 0x3a, 0x03,
	0x08, 0xac, 0x02, 0x3a, 0x03, 0x08, 0x84, 0x07, 0x3a, 0x03, 0x08, 0x88, 0x0e, 0x3a, 0x03, 0x08,
	0x90, 0x1c, 0x3a, 0x03, 0x08, 0xb0, 0x54, 0x3a, 0x04, 0x08, 0xe0, 0xa8, 0x01, 0x3a, 0x04, 0x08,
	0xc0, 0xd1, 0x02, 0x3a, 0x04, 0x08, 0x80, 0xa3, 0x05, 0x52, 0x0f, 0x61, 0x6c, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x71, 0x0a, 0x10, 0x6c, 0x73,
	0x74, 0x6d, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x73, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x41, 0x6e, 0x6f, 0x6d, 0x61, 0x6c, 0x79, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x66, 0x67, 0x2e, 0x4c, 0x73, 0x74, 0x6d, 0x41,
	0x75, 0x74, 0x6f, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0f, 0x6c, 0x73,
	0x74, 0x6d, 0x41, 0x75, 0x74, 0x6f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x12, 0x44, 0x0a,
	0x0b, 0x72, 0x61, 0x69, 0x73, 0x65, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0xca,
	0xc6, 0x27, 0x04, 0x5a, 0x02, 0x2a, 0x00, 0x52, 0x0a, 0x72, 0x61, 0x69, 0x73, 0x65, 0x41, 0x66,
	0x74, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x0d, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x61,
	0x66, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x66,
	0x74, 0x65, 0x72, 0x1a, 0xa7, 0x03, 0x0a, 0x0f, 0x4c, 0x73, 0x74, 0x6d, 0x41, 0x75, 0x74, 0x6f,
	0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x0b, 0x68, 0x69, 0x64, 0x64, 0x65,
	0x6e, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0e, 0xca, 0xc6,
	0x27, 0x0a, 0x12, 0x08, 0x1a, 0x02, 0x08, 0x40, 0x2a, 0x02, 0x08, 0x08, 0x52, 0x0a, 0x68, 0x69,
	0x64, 0x64, 0x65, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x65, 0x61, 0x72,
	0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x65,
	0x61, 0x72, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x5f, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x0f, 0xca, 0xc6, 0x27, 0x0b, 0x12, 0x09, 0x1a, 0x03, 0x08, 0x80,
	0x08, 0x2a, 0x02, 0x08, 0x20, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x73, 0x12, 0x3f, 0x0a, 0x13, 0x6d, 0x69, 0x6e, 0x5f,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0f, 0xca, 0xc6, 0x27, 0x0b, 0x12, 0x09, 0x1a, 0x03, 0x08,
	0x80, 0x08, 0x2a, 0x02, 0x08, 0x20, 0x52, 0x11, 0x6d, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x73, 0x12, 0x3a, 0x0a, 0x19, 0x61, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x17, 0x61, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x52, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0xca, 0xc6, 0x27, 0x0a, 0x5a,
	0x08, 0x08, 0x01, 0x32, 0x04, 0x08, 0x80, 0xa3, 0x05, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x07, 0x0a,
	0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x1a, 0xc4, 0x01, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6b, 0x65,
	0x79, 0x5f, 0x6b, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x4b, 0x73, 0x65, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x65, 0x6e, 0x74, 0x72,
	0x79, 0x53, 0x70, 0x65, 0x63, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x5c, 0x0a, 0x11, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xcd, 0x04,
	0x0a, 0x08, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x25, 0x0a,
	0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x12, 0x6f, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x73, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x12, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x75, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x73, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x21, 0x0a, 0x07,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a,
	0x74, 0x0a, 0x17, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x43, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x73,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x76, 0x0a, 0x19, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x43, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x73, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0xac, 0x05,
	0xea, 0x41, 0x63, 0x0a, 0x1f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x64,
	0x67, 0x65, 0x6c, 0x71, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x54, 0x73, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x2f, 0x7b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x7d, 0x2f, 0x74, 0x73, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x92, 0xd9, 0x21, 0x96, 0x02, 0x0a, 0x0c, 0x74, 0x73, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0c, 0x74, 0x73, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x06, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x38,
	0x05, 0x42, 0x70, 0x08, 0x02, 0x12, 0x0c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x20, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x17, 0x0a, 0x0c, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x12, 0x07, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x13, 0x73, 0x70,
	0x65, 0x63, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62,
	0x79, 0x12, 0x10, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x20, 0x62, 0x79, 0x42, 0x7c, 0x08, 0x03, 0x12, 0x0c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x20, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x22, 0x0a, 0x0f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x6f,
	0x63, 0x73, 0x12, 0x0f, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x64,
	0x6f, 0x63, 0x73, 0x12, 0x0c, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x04, 0x53, 0x70, 0x65,
	0x63, 0xaa, 0xd9, 0x21, 0x2f, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x0a, 0x0c, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0xb2, 0xdf, 0x21, 0x86, 0x01, 0x0a, 0x83, 0x01, 0x0a, 0x80, 0x01, 0x0a,
	0x0d, 0x62, 0x79, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0c,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x2c, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d,
	0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x2d, 0x2f, 0x74, 0x73, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2d, 0x1a, 0x33, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x7d,
	0x2f, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2d, 0xda,
	0x94, 0x23, 0x08, 0x12, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xc2, 0x85, 0x2c, 0x5d, 0x22,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x0f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x6f, 0x63,
	0x73, 0x22, 0x04, 0x73, 0x70, 0x65, 0x63, 0x42, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x42, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x42, 0x0f, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x4c, 0x0a, 0x11,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69,
	0x73, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x42, 0xa6, 0x02, 0xe8, 0xde, 0x21,
	0x01, 0xd2, 0xff, 0xd0, 0x02, 0x4f, 0x0a, 0x12, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x39, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f,
	0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2f,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0xa2, 0x80, 0xd1, 0x02, 0x51, 0x0a, 0x13, 0x74, 0x73, 0x5f, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x74,
	0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x0a, 0x16, 0x63, 0x6f, 0x6d,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x62,
	0x2e, 0x76, 0x31, 0x42, 0x10, 0x54, 0x73, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67,
	0x65, 0x6c, 0x71, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	edgelq_alerting_proto_v1_ts_condition_proto_rawDescOnce sync.Once
	edgelq_alerting_proto_v1_ts_condition_proto_rawDescData = edgelq_alerting_proto_v1_ts_condition_proto_rawDesc
)

func edgelq_alerting_proto_v1_ts_condition_proto_rawDescGZIP() []byte {
	edgelq_alerting_proto_v1_ts_condition_proto_rawDescOnce.Do(func() {
		edgelq_alerting_proto_v1_ts_condition_proto_rawDescData = protoimpl.X.CompressGZIP(edgelq_alerting_proto_v1_ts_condition_proto_rawDescData)
	})
	return edgelq_alerting_proto_v1_ts_condition_proto_rawDescData
}

var edgelq_alerting_proto_v1_ts_condition_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var edgelq_alerting_proto_v1_ts_condition_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var edgelq_alerting_proto_v1_ts_condition_proto_goTypes = []interface{}{
	(TsCondition_Spec_ThresholdAlertingCfg_Operator)(0), // 0: ntt.alerting.v1.TsCondition_Spec_ThresholdAlertingCfg_Operator
	(*TsCondition)(nil),                                              // 1: ntt.alerting.v1.TsCondition
	(*AlertingThreshold)(nil),                                        // 2: ntt.alerting.v1.AlertingThreshold
	(*TsCondition_Spec)(nil),                                         // 3: ntt.alerting.v1.TsCondition.Spec
	(*TsCondition_Internal)(nil),                                     // 4: ntt.alerting.v1.TsCondition.Internal
	(*TsCondition_Selector)(nil),                                     // 5: ntt.alerting.v1.TsCondition.Selector
	(*TsCondition_Spec_Query)(nil),                                   // 6: ntt.alerting.v1.TsCondition.Spec.Query
	(*TsCondition_Spec_ThresholdAlertingCfg)(nil),                    // 7: ntt.alerting.v1.TsCondition.Spec.ThresholdAlertingCfg
	(*TsCondition_Spec_AnomalyAlertingCfg)(nil),                      // 8: ntt.alerting.v1.TsCondition.Spec.AnomalyAlertingCfg
	(*TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds)(nil), // 9: ntt.alerting.v1.TsCondition.Spec.ThresholdAlertingCfg.AlertingThresholds
	(*TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder)(nil),      // 10: ntt.alerting.v1.TsCondition.Spec.AnomalyAlertingCfg.LstmAutoEncoder
	(*TsCondition_Selector_Strings)(nil),                             // 11: ntt.alerting.v1.TsCondition.Selector.Strings
	nil,                                                              // 12: ntt.alerting.v1.TsCondition.Selector.CommonMetricLabelsEntry
	nil,                                                              // 13: ntt.alerting.v1.TsCondition.Selector.CommonResourceLabelsEntry
	(*meta.Meta)(nil),                                                // 14: goten.types.Meta
	(monitoring_common.Aggregation_Aligner)(0),                       // 15: ntt.monitoring.v4.Aggregation_Aligner
	(monitoring_common.Aggregation_Reducer)(0),                       // 16: ntt.monitoring.v4.Aggregation_Reducer
	(*durationpb.Duration)(nil),                                      // 17: google.protobuf.Duration
	(policy.Policy_Spec_ProcessingLocation)(0),                       // 18: ntt.alerting.v1.Policy_Spec_ProcessingLocation
}
var edgelq_alerting_proto_v1_ts_condition_proto_depIdxs = []int32{
	14, // 0: ntt.alerting.v1.TsCondition.metadata:type_name -> goten.types.Meta
	3,  // 1: ntt.alerting.v1.TsCondition.spec:type_name -> ntt.alerting.v1.TsCondition.Spec
	4,  // 2: ntt.alerting.v1.TsCondition.internal:type_name -> ntt.alerting.v1.TsCondition.Internal
	5,  // 3: ntt.alerting.v1.TsCondition.filter_selector:type_name -> ntt.alerting.v1.TsCondition.Selector
	6,  // 4: ntt.alerting.v1.TsCondition.Spec.queries:type_name -> ntt.alerting.v1.TsCondition.Spec.Query
	7,  // 5: ntt.alerting.v1.TsCondition.Spec.threshold_alerting:type_name -> ntt.alerting.v1.TsCondition.Spec.ThresholdAlertingCfg
	8,  // 6: ntt.alerting.v1.TsCondition.Spec.anomaly_alerting:type_name -> ntt.alerting.v1.TsCondition.Spec.AnomalyAlertingCfg
	18, // 7: ntt.alerting.v1.TsCondition.Internal.alerting_location:type_name -> ntt.alerting.v1.Policy_Spec_ProcessingLocation
	12, // 8: ntt.alerting.v1.TsCondition.Selector.common_metric_labels:type_name -> ntt.alerting.v1.TsCondition.Selector.CommonMetricLabelsEntry
	13, // 9: ntt.alerting.v1.TsCondition.Selector.common_resource_labels:type_name -> ntt.alerting.v1.TsCondition.Selector.CommonResourceLabelsEntry
	15, // 10: ntt.alerting.v1.TsCondition.Spec.Query.aligner:type_name -> ntt.monitoring.v4.Aggregation_Aligner
	16, // 11: ntt.alerting.v1.TsCondition.Spec.Query.reducer:type_name -> ntt.monitoring.v4.Aggregation_Reducer
	0,  // 12: ntt.alerting.v1.TsCondition.Spec.ThresholdAlertingCfg.operator:type_name -> ntt.alerting.v1.TsCondition_Spec_ThresholdAlertingCfg_Operator
	17, // 13: ntt.alerting.v1.TsCondition.Spec.ThresholdAlertingCfg.alignment_period:type_name -> google.protobuf.Duration
	17, // 14: ntt.alerting.v1.TsCondition.Spec.ThresholdAlertingCfg.raise_after:type_name -> google.protobuf.Duration
	17, // 15: ntt.alerting.v1.TsCondition.Spec.ThresholdAlertingCfg.silence_after:type_name -> google.protobuf.Duration
	9,  // 16: ntt.alerting.v1.TsCondition.Spec.ThresholdAlertingCfg.per_query_thresholds:type_name -> ntt.alerting.v1.TsCondition.Spec.ThresholdAlertingCfg.AlertingThresholds
	17, // 17: ntt.alerting.v1.TsCondition.Spec.ThresholdAlertingCfg.adaptive_thresholds_detection_period:type_name -> google.protobuf.Duration
	17, // 18: ntt.alerting.v1.TsCondition.Spec.AnomalyAlertingCfg.analysis_window:type_name -> google.protobuf.Duration
	17, // 19: ntt.alerting.v1.TsCondition.Spec.AnomalyAlertingCfg.step_interval:type_name -> google.protobuf.Duration
	17, // 20: ntt.alerting.v1.TsCondition.Spec.AnomalyAlertingCfg.train_step_interval:type_name -> google.protobuf.Duration
	17, // 21: ntt.alerting.v1.TsCondition.Spec.AnomalyAlertingCfg.alignment_period:type_name -> google.protobuf.Duration
	10, // 22: ntt.alerting.v1.TsCondition.Spec.AnomalyAlertingCfg.lstm_autoencoder:type_name -> ntt.alerting.v1.TsCondition.Spec.AnomalyAlertingCfg.LstmAutoEncoder
	17, // 23: ntt.alerting.v1.TsCondition.Spec.AnomalyAlertingCfg.raise_after:type_name -> google.protobuf.Duration
	17, // 24: ntt.alerting.v1.TsCondition.Spec.AnomalyAlertingCfg.silence_after:type_name -> google.protobuf.Duration
	2,  // 25: ntt.alerting.v1.TsCondition.Spec.ThresholdAlertingCfg.AlertingThresholds.max_upper:type_name -> ntt.alerting.v1.AlertingThreshold
	2,  // 26: ntt.alerting.v1.TsCondition.Spec.ThresholdAlertingCfg.AlertingThresholds.max_lower:type_name -> ntt.alerting.v1.AlertingThreshold
	17, // 27: ntt.alerting.v1.TsCondition.Spec.AnomalyAlertingCfg.LstmAutoEncoder.training_period:type_name -> google.protobuf.Duration
	11, // 28: ntt.alerting.v1.TsCondition.Selector.CommonMetricLabelsEntry.value:type_name -> ntt.alerting.v1.TsCondition.Selector.Strings
	11, // 29: ntt.alerting.v1.TsCondition.Selector.CommonResourceLabelsEntry.value:type_name -> ntt.alerting.v1.TsCondition.Selector.Strings
	30, // [30:30] is the sub-list for method output_type
	30, // [30:30] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { edgelq_alerting_proto_v1_ts_condition_proto_init() }
func edgelq_alerting_proto_v1_ts_condition_proto_init() {
	if edgelq_alerting_proto_v1_ts_condition_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		edgelq_alerting_proto_v1_ts_condition_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TsCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_ts_condition_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlertingThreshold); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_ts_condition_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TsCondition_Spec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_ts_condition_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TsCondition_Internal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_ts_condition_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TsCondition_Selector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_ts_condition_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TsCondition_Spec_Query); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_ts_condition_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TsCondition_Spec_ThresholdAlertingCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_ts_condition_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TsCondition_Spec_AnomalyAlertingCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_ts_condition_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TsCondition_Spec_ThresholdAlertingCfg_AlertingThresholds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_ts_condition_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TsCondition_Spec_AnomalyAlertingCfg_LstmAutoEncoder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_ts_condition_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TsCondition_Selector_Strings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	edgelq_alerting_proto_v1_ts_condition_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*TsCondition_Spec_AnomalyAlertingCfg_LstmAutoencoder)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: edgelq_alerting_proto_v1_ts_condition_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           edgelq_alerting_proto_v1_ts_condition_proto_goTypes,
		DependencyIndexes: edgelq_alerting_proto_v1_ts_condition_proto_depIdxs,
		EnumInfos:         edgelq_alerting_proto_v1_ts_condition_proto_enumTypes,
		MessageInfos:      edgelq_alerting_proto_v1_ts_condition_proto_msgTypes,
	}.Build()
	edgelq_alerting_proto_v1_ts_condition_proto = out.File
	edgelq_alerting_proto_v1_ts_condition_proto_rawDesc = nil
	edgelq_alerting_proto_v1_ts_condition_proto_goTypes = nil
	edgelq_alerting_proto_v1_ts_condition_proto_depIdxs = nil
}
