// Code generated by protoc-gen-goten-go
// File: edgelq/alerting/proto/v1/ts_condition.proto
// DO NOT EDIT!!!

package ts_condition

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	rcommon "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/common"
	document "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/document"
	policy "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/policy"
	ts_condition_template "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/ts_condition_template"
	meta "github.com/cloudwan/goten-sdk/types/meta"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &document.Document{}
	_ = &policy.Policy{}
	_ = &rcommon.LogCndSpec{}
	_ = &ts_condition_template.TsConditionTemplate{}
	_ = &fieldmaskpb.FieldMask{}
	_ = &meta.Meta{}
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// TsCondition describes when Alert based on TimeSeries data should be raised.
type TsCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of TsCondition
	// When creating a new instance, this field is optional and if not provided,
	// it will be generated automatically. Last ID segment must conform to the
	// following regex: [a-z][a-z0-9\\-]{0,28}[a-z0-9]
	Name *Name `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty"`
	// Metadata is an object with information like create, update and delete time
	// (for async deleted resources), has user labels/annotations, sharding
	// information, multi-region syncing information and may have non-schema
	// owners (useful for taking ownership of resources belonging to lower level
	// services by higher ones).
	Metadata *meta.Meta `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Display Name
	DisplayName string `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Long description
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// List of documents useful for troubleshooting and fixing alerts triggered
	// by this condition.
	SupportingDocs []*document.Reference `protobuf:"bytes,5,rep,customtype=Reference,name=supporting_docs,json=supportingDocs,proto3" json:"supporting_docs,omitempty"`
	// Spec defines queries, thresholds and anomaly detector specs.
	Spec *rcommon.TsCndSpec `protobuf:"bytes,6,opt,name=spec,proto3" json:"spec,omitempty"`
	// Internal field.
	Internal *TsCondition_Internal `protobuf:"bytes,7,opt,name=internal,proto3" json:"internal,omitempty"`
	// filter selector simplifies querying TsCondition resources.
	// For example, it allows to make query like:
	// * List TsConditions WHERE filter_selector.metric.types CONTAINS
	// "device/cpu"
	FilterSelector *TsCondition_Selector `protobuf:"bytes,8,opt,name=filter_selector,json=filterSelector,proto3" json:"filter_selector,omitempty"`
	// template source for current TsCondition
	TemplateSource *TsCondition_TemplateSource `protobuf:"bytes,9,opt,name=template_source,json=templateSource,proto3" json:"template_source,omitempty"`
}

func (m *TsCondition) Reset() {
	*m = TsCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_ts_condition_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *TsCondition) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*TsCondition) ProtoMessage() {}

func (m *TsCondition) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_ts_condition_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*TsCondition) GotenMessage() {}

// Deprecated, Use TsCondition.ProtoReflect.Descriptor instead.
func (*TsCondition) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_ts_condition_proto_rawDescGZIP(), []int{0}
}

func (m *TsCondition) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *TsCondition) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *TsCondition) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *TsCondition) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *TsCondition) GetName() *Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *TsCondition) GetMetadata() *meta.Meta {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *TsCondition) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *TsCondition) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *TsCondition) GetSupportingDocs() []*document.Reference {
	if m != nil {
		return m.SupportingDocs
	}
	return nil
}

func (m *TsCondition) GetSpec() *rcommon.TsCndSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *TsCondition) GetInternal() *TsCondition_Internal {
	if m != nil {
		return m.Internal
	}
	return nil
}

func (m *TsCondition) GetFilterSelector() *TsCondition_Selector {
	if m != nil {
		return m.FilterSelector
	}
	return nil
}

func (m *TsCondition) GetTemplateSource() *TsCondition_TemplateSource {
	if m != nil {
		return m.TemplateSource
	}
	return nil
}

func (m *TsCondition) SetName(fv *Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "TsCondition"))
	}
	m.Name = fv
}

func (m *TsCondition) SetMetadata(fv *meta.Meta) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Metadata", "TsCondition"))
	}
	m.Metadata = fv
}

func (m *TsCondition) SetDisplayName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DisplayName", "TsCondition"))
	}
	m.DisplayName = fv
}

func (m *TsCondition) SetDescription(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Description", "TsCondition"))
	}
	m.Description = fv
}

func (m *TsCondition) SetSupportingDocs(fv []*document.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SupportingDocs", "TsCondition"))
	}
	m.SupportingDocs = fv
}

func (m *TsCondition) SetSpec(fv *rcommon.TsCndSpec) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Spec", "TsCondition"))
	}
	m.Spec = fv
}

func (m *TsCondition) SetInternal(fv *TsCondition_Internal) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Internal", "TsCondition"))
	}
	m.Internal = fv
}

func (m *TsCondition) SetFilterSelector(fv *TsCondition_Selector) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FilterSelector", "TsCondition"))
	}
	m.FilterSelector = fv
}

func (m *TsCondition) SetTemplateSource(fv *TsCondition_TemplateSource) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TemplateSource", "TsCondition"))
	}
	m.TemplateSource = fv
}

// Internal data.
type TsCondition_Internal struct {
	state               protoimpl.MessageState
	sizeCache           protoimpl.SizeCache
	unknownFields       protoimpl.UnknownFields
	CommonKeyKset       []byte                                `protobuf:"bytes,1,opt,name=common_key_kset,json=commonKeyKset,proto3" json:"common_key_kset,omitempty"`
	EntrySpecGeneration int32                                 `protobuf:"varint,2,opt,name=entry_spec_generation,json=entrySpecGeneration,proto3" json:"entry_spec_generation,omitempty"`
	AlertingLocation    rcommon.PolicySpec_ProcessingLocation `protobuf:"varint,3,opt,name=alerting_location,json=alertingLocation,proto3,enum=ntt.alerting.v1.PolicySpec_ProcessingLocation" json:"alerting_location,omitempty"`
}

func (m *TsCondition_Internal) Reset() {
	*m = TsCondition_Internal{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_ts_condition_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *TsCondition_Internal) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*TsCondition_Internal) ProtoMessage() {}

func (m *TsCondition_Internal) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_ts_condition_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*TsCondition_Internal) GotenMessage() {}

// Deprecated, Use TsCondition_Internal.ProtoReflect.Descriptor instead.
func (*TsCondition_Internal) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_ts_condition_proto_rawDescGZIP(), []int{0, 0}
}

func (m *TsCondition_Internal) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *TsCondition_Internal) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *TsCondition_Internal) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *TsCondition_Internal) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *TsCondition_Internal) GetCommonKeyKset() []byte {
	if m != nil {
		return m.CommonKeyKset
	}
	return nil
}

func (m *TsCondition_Internal) GetEntrySpecGeneration() int32 {
	if m != nil {
		return m.EntrySpecGeneration
	}
	return int32(0)
}

func (m *TsCondition_Internal) GetAlertingLocation() rcommon.PolicySpec_ProcessingLocation {
	if m != nil {
		return m.AlertingLocation
	}
	return rcommon.PolicySpec_UNDEFINED
}

func (m *TsCondition_Internal) SetCommonKeyKset(fv []byte) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CommonKeyKset", "TsCondition_Internal"))
	}
	m.CommonKeyKset = fv
}

func (m *TsCondition_Internal) SetEntrySpecGeneration(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "EntrySpecGeneration", "TsCondition_Internal"))
	}
	m.EntrySpecGeneration = fv
}

func (m *TsCondition_Internal) SetAlertingLocation(fv rcommon.PolicySpec_ProcessingLocation) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AlertingLocation", "TsCondition_Internal"))
	}
	m.AlertingLocation = fv
}

// Selector contains detected metric/resource types and common
// labels used in filters from all queries. Selector facilitates
// filtering TsCondition resources.
// It is generated when TsCondition is saved (on the fly).
type TsCondition_Selector struct {
	state                protoimpl.MessageState
	sizeCache            protoimpl.SizeCache
	unknownFields        protoimpl.UnknownFields
	MetricTypes          []string                                 `protobuf:"bytes,1,rep,name=metric_types,json=metricTypes,proto3" json:"metric_types,omitempty"`
	ResourceTypes        []string                                 `protobuf:"bytes,2,rep,name=resource_types,json=resourceTypes,proto3" json:"resource_types,omitempty"`
	CommonMetricLabels   map[string]*TsCondition_Selector_Strings `protobuf:"bytes,3,rep,name=common_metric_labels,json=commonMetricLabels,proto3" json:"common_metric_labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CommonResourceLabels map[string]*TsCondition_Selector_Strings `protobuf:"bytes,4,rep,name=common_resource_labels,json=commonResourceLabels,proto3" json:"common_resource_labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *TsCondition_Selector) Reset() {
	*m = TsCondition_Selector{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_ts_condition_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *TsCondition_Selector) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*TsCondition_Selector) ProtoMessage() {}

func (m *TsCondition_Selector) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_ts_condition_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*TsCondition_Selector) GotenMessage() {}

// Deprecated, Use TsCondition_Selector.ProtoReflect.Descriptor instead.
func (*TsCondition_Selector) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_ts_condition_proto_rawDescGZIP(), []int{0, 1}
}

func (m *TsCondition_Selector) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *TsCondition_Selector) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *TsCondition_Selector) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *TsCondition_Selector) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *TsCondition_Selector) GetMetricTypes() []string {
	if m != nil {
		return m.MetricTypes
	}
	return nil
}

func (m *TsCondition_Selector) GetResourceTypes() []string {
	if m != nil {
		return m.ResourceTypes
	}
	return nil
}

func (m *TsCondition_Selector) GetCommonMetricLabels() map[string]*TsCondition_Selector_Strings {
	if m != nil {
		return m.CommonMetricLabels
	}
	return nil
}

func (m *TsCondition_Selector) GetCommonResourceLabels() map[string]*TsCondition_Selector_Strings {
	if m != nil {
		return m.CommonResourceLabels
	}
	return nil
}

func (m *TsCondition_Selector) SetMetricTypes(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MetricTypes", "TsCondition_Selector"))
	}
	m.MetricTypes = fv
}

func (m *TsCondition_Selector) SetResourceTypes(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResourceTypes", "TsCondition_Selector"))
	}
	m.ResourceTypes = fv
}

func (m *TsCondition_Selector) SetCommonMetricLabels(fv map[string]*TsCondition_Selector_Strings) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CommonMetricLabels", "TsCondition_Selector"))
	}
	m.CommonMetricLabels = fv
}

func (m *TsCondition_Selector) SetCommonResourceLabels(fv map[string]*TsCondition_Selector_Strings) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CommonResourceLabels", "TsCondition_Selector"))
	}
	m.CommonResourceLabels = fv
}

// TemplateSource describes where condition is coming from originally.
type TsCondition_TemplateSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Reference to template
	Template *ts_condition_template.Reference `protobuf:"bytes,1,opt,customtype=Reference,name=template,proto3" json:"template,omitempty"`
	// List of modified fields compared to the template.
	// It is a mask of Spec object.
	UpdatedFields *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=updated_fields,json=updatedFields,proto3" json:"updated_fields,omitempty"`
}

func (m *TsCondition_TemplateSource) Reset() {
	*m = TsCondition_TemplateSource{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_ts_condition_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *TsCondition_TemplateSource) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*TsCondition_TemplateSource) ProtoMessage() {}

func (m *TsCondition_TemplateSource) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_ts_condition_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*TsCondition_TemplateSource) GotenMessage() {}

// Deprecated, Use TsCondition_TemplateSource.ProtoReflect.Descriptor instead.
func (*TsCondition_TemplateSource) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_ts_condition_proto_rawDescGZIP(), []int{0, 2}
}

func (m *TsCondition_TemplateSource) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *TsCondition_TemplateSource) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *TsCondition_TemplateSource) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *TsCondition_TemplateSource) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *TsCondition_TemplateSource) GetTemplate() *ts_condition_template.Reference {
	if m != nil {
		return m.Template
	}
	return nil
}

func (m *TsCondition_TemplateSource) GetUpdatedFields() *fieldmaskpb.FieldMask {
	if m != nil {
		return m.UpdatedFields
	}
	return nil
}

func (m *TsCondition_TemplateSource) SetTemplate(fv *ts_condition_template.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Template", "TsCondition_TemplateSource"))
	}
	m.Template = fv
}

func (m *TsCondition_TemplateSource) SetUpdatedFields(fv *fieldmaskpb.FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "UpdatedFields", "TsCondition_TemplateSource"))
	}
	m.UpdatedFields = fv
}

type TsCondition_Selector_Strings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Values        []string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (m *TsCondition_Selector_Strings) Reset() {
	*m = TsCondition_Selector_Strings{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_ts_condition_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *TsCondition_Selector_Strings) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*TsCondition_Selector_Strings) ProtoMessage() {}

func (m *TsCondition_Selector_Strings) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_ts_condition_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*TsCondition_Selector_Strings) GotenMessage() {}

// Deprecated, Use TsCondition_Selector_Strings.ProtoReflect.Descriptor instead.
func (*TsCondition_Selector_Strings) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_ts_condition_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (m *TsCondition_Selector_Strings) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *TsCondition_Selector_Strings) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *TsCondition_Selector_Strings) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *TsCondition_Selector_Strings) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *TsCondition_Selector_Strings) GetValues() []string {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *TsCondition_Selector_Strings) SetValues(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Values", "TsCondition_Selector_Strings"))
	}
	m.Values = fv
}

var edgelq_alerting_proto_v1_ts_condition_proto preflect.FileDescriptor

var edgelq_alerting_proto_v1_ts_condition_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x73, 0x5f, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x6e,
	0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x1a, 0x19,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74,
	0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67,
	0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65,
	0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f,
	0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x74,
	0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x67, 0x6f,
	0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x24, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x67, 0x6f, 0x74, 0x65,
	0x6e, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x25, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x65, 0x64, 0x67, 0x65, 0x6c,
	0x71, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x76, 0x31, 0x2f, 0x73, 0x70, 0x65, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x97, 0x11, 0x0a, 0x0b, 0x54, 0x73, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x27, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xb2,
	0xda, 0x21, 0x0f, 0x0a, 0x0d, 0x0a, 0x0b, 0x54, 0x73, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x74,
	0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xca,
	0xc6, 0x27, 0x07, 0x2a, 0x05, 0x22, 0x03, 0x08, 0x80, 0x02, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xca, 0xc6,
	0x27, 0x07, 0x2a, 0x05, 0x22, 0x03, 0x08, 0x80, 0x04, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x6f, 0x63, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x42,
	0x12, 0xb2, 0xda, 0x21, 0x0e, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x10, 0x04, 0x52, 0x0e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x44,
	0x6f, 0x63, 0x73, 0x12, 0x38, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x73, 0x43, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x63, 0x42, 0x08, 0xca,
	0xc6, 0x27, 0x04, 0x62, 0x02, 0x08, 0x01, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x47, 0x0a,
	0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x73, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x42, 0x04, 0xf0, 0xd9, 0x21, 0x01, 0x52, 0x08, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x54, 0x0a, 0x0f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x73, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x04, 0xf0, 0xd9, 0x21, 0x01, 0x52, 0x0e, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x54, 0x0a, 0x0f,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x73, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x0e, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x1a, 0xc3, 0x01, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12,
	0x26, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x6b, 0x73,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x4b, 0x65, 0x79, 0x4b, 0x73, 0x65, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x70, 0x65,
	0x63, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5b, 0x0a, 0x11, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53,
	0x70, 0x65, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xcd, 0x04, 0x0a, 0x08, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x6f, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x73, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x12, 0x75, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3f, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x73, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x14, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x21, 0x0a, 0x07, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x74, 0x0a, 0x17, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x43, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x73, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x76, 0x0a, 0x19, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x43, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x73, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x8e, 0x01, 0x0a, 0x0e, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0xb2,
	0xda, 0x21, 0x19, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x73, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x10, 0x04, 0x52, 0x08, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0d, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x3a, 0xbd, 0x05, 0xea, 0x41, 0x63, 0x0a,
	0x1f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x54, 0x73, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x40, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x7d, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x7d, 0x2f, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x7d, 0x92, 0xd9, 0x21, 0x96, 0x02, 0x0a, 0x0c, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0c, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x1a, 0x06, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x38, 0x05, 0x42, 0x70, 0x08,
	0x02, 0x12, 0x0c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a,
	0x0c, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x07, 0x51,
	0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x13, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x12, 0x10, 0x51,
	0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x20, 0x62, 0x79, 0x42,
	0x7c, 0x08, 0x03, 0x12, 0x0c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1c, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0b,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0f, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x6f, 0x63, 0x73, 0x12, 0x0f,
	0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x64, 0x6f, 0x63, 0x73, 0x12,
	0x0c, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x04, 0x53, 0x70, 0x65, 0x63, 0xaa, 0xd9, 0x21,
	0x2f, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0xb2, 0xdf, 0x21, 0x86, 0x01, 0x0a, 0x83, 0x01, 0x0a, 0x80, 0x01, 0x0a, 0x0d, 0x62, 0x79, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0c, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x2c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x2d, 0x2f, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2d, 0x1a, 0x33, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x2f, 0x7b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x7d, 0x2f, 0x74, 0x73, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2d, 0xda, 0x94, 0x23, 0x08, 0x12,
	0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xc2, 0x85, 0x2c, 0x6e, 0x22, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x0f, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x6f, 0x63, 0x73, 0x22, 0x04, 0x73,
	0x70, 0x65, 0x63, 0x22, 0x0f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x42, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x08,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x42, 0x0f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0xa6, 0x02, 0xe8, 0xde, 0x21, 0x01,
	0xd2, 0xff, 0xd0, 0x02, 0x4f, 0x0a, 0x12, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65,
	0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0xa2, 0x80, 0xd1, 0x02, 0x51, 0x0a, 0x13, 0x74, 0x73, 0x5f, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x3a,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x73,
	0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x62, 0x2e,
	0x76, 0x31, 0x42, 0x10, 0x54, 0x73, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65,
	0x6c, 0x71, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	edgelq_alerting_proto_v1_ts_condition_proto_rawDescOnce sync.Once
	edgelq_alerting_proto_v1_ts_condition_proto_rawDescData = edgelq_alerting_proto_v1_ts_condition_proto_rawDesc
)

func edgelq_alerting_proto_v1_ts_condition_proto_rawDescGZIP() []byte {
	edgelq_alerting_proto_v1_ts_condition_proto_rawDescOnce.Do(func() {
		edgelq_alerting_proto_v1_ts_condition_proto_rawDescData = protoimpl.X.CompressGZIP(edgelq_alerting_proto_v1_ts_condition_proto_rawDescData)
	})
	return edgelq_alerting_proto_v1_ts_condition_proto_rawDescData
}

var edgelq_alerting_proto_v1_ts_condition_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var edgelq_alerting_proto_v1_ts_condition_proto_goTypes = []interface{}{
	(*TsCondition)(nil),                  // 0: ntt.alerting.v1.TsCondition
	(*TsCondition_Internal)(nil),         // 1: ntt.alerting.v1.TsCondition.Internal
	(*TsCondition_Selector)(nil),         // 2: ntt.alerting.v1.TsCondition.Selector
	(*TsCondition_TemplateSource)(nil),   // 3: ntt.alerting.v1.TsCondition.TemplateSource
	(*TsCondition_Selector_Strings)(nil), // 4: ntt.alerting.v1.TsCondition.Selector.Strings
	nil,                                  // 5: ntt.alerting.v1.TsCondition.Selector.CommonMetricLabelsEntry
	nil,                                  // 6: ntt.alerting.v1.TsCondition.Selector.CommonResourceLabelsEntry
	(*meta.Meta)(nil),                    // 7: goten.types.Meta
	(*rcommon.TsCndSpec)(nil),            // 8: ntt.alerting.v1.TsCndSpec
	(rcommon.PolicySpec_ProcessingLocation)(0), // 9: ntt.alerting.v1.PolicySpec_ProcessingLocation
	(*fieldmaskpb.FieldMask)(nil),              // 10: google.protobuf.FieldMask
}
var edgelq_alerting_proto_v1_ts_condition_proto_depIdxs = []int32{
	7,  // 0: ntt.alerting.v1.TsCondition.metadata:type_name -> goten.types.Meta
	8,  // 1: ntt.alerting.v1.TsCondition.spec:type_name -> ntt.alerting.v1.TsCndSpec
	1,  // 2: ntt.alerting.v1.TsCondition.internal:type_name -> ntt.alerting.v1.TsCondition.Internal
	2,  // 3: ntt.alerting.v1.TsCondition.filter_selector:type_name -> ntt.alerting.v1.TsCondition.Selector
	3,  // 4: ntt.alerting.v1.TsCondition.template_source:type_name -> ntt.alerting.v1.TsCondition.TemplateSource
	9,  // 5: ntt.alerting.v1.TsCondition.Internal.alerting_location:type_name -> ntt.alerting.v1.PolicySpec_ProcessingLocation
	5,  // 6: ntt.alerting.v1.TsCondition.Selector.common_metric_labels:type_name -> ntt.alerting.v1.TsCondition.Selector.CommonMetricLabelsEntry
	6,  // 7: ntt.alerting.v1.TsCondition.Selector.common_resource_labels:type_name -> ntt.alerting.v1.TsCondition.Selector.CommonResourceLabelsEntry
	10, // 8: ntt.alerting.v1.TsCondition.TemplateSource.updated_fields:type_name -> google.protobuf.FieldMask
	4,  // 9: ntt.alerting.v1.TsCondition.Selector.CommonMetricLabelsEntry.value:type_name -> ntt.alerting.v1.TsCondition.Selector.Strings
	4,  // 10: ntt.alerting.v1.TsCondition.Selector.CommonResourceLabelsEntry.value:type_name -> ntt.alerting.v1.TsCondition.Selector.Strings
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { edgelq_alerting_proto_v1_ts_condition_proto_init() }
func edgelq_alerting_proto_v1_ts_condition_proto_init() {
	if edgelq_alerting_proto_v1_ts_condition_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		edgelq_alerting_proto_v1_ts_condition_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TsCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_ts_condition_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TsCondition_Internal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_ts_condition_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TsCondition_Selector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_ts_condition_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TsCondition_TemplateSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_ts_condition_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TsCondition_Selector_Strings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: edgelq_alerting_proto_v1_ts_condition_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           edgelq_alerting_proto_v1_ts_condition_proto_goTypes,
		DependencyIndexes: edgelq_alerting_proto_v1_ts_condition_proto_depIdxs,
		MessageInfos:      edgelq_alerting_proto_v1_ts_condition_proto_msgTypes,
	}.Build()
	edgelq_alerting_proto_v1_ts_condition_proto = out.File
	edgelq_alerting_proto_v1_ts_condition_proto_rawDesc = nil
	edgelq_alerting_proto_v1_ts_condition_proto_goTypes = nil
	edgelq_alerting_proto_v1_ts_condition_proto_depIdxs = nil
}
