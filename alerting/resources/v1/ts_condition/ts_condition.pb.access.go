// Code generated by protoc-gen-goten-resource
// Resource: TsCondition
// DO NOT EDIT!!!

package ts_condition

import (
	"context"

	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
	"github.com/cloudwan/goten-sdk/types/watch_type"
)

// proto imports
import (
	document "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/document"
	policy "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/policy"
	monitoring_common "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/common"
	monitoring_time_serie "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/time_serie"
	meta "github.com/cloudwan/goten-sdk/types/meta"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
)

// ensure the imports are used
var (
	_ = new(context.Context)

	_ = codes.Internal
	_ = status.Status{}

	_ = watch_type.WatchType_STATEFUL
	_ = new(gotenobject.FieldPath)
	_ = new(gotenresource.ListQuery)
)

// make sure we're using proto imports
var (
	_ = &document.Document{}
	_ = &policy.Policy{}
	_ = &monitoring_common.LabelDescriptor{}
	_ = &monitoring_time_serie.Point{}
	_ = &durationpb.Duration{}
	_ = &meta.Meta{}
)

type TsConditionAccess interface {
	GetTsCondition(context.Context, *GetQuery, ...gotenresource.GetOption) (*TsCondition, error)
	BatchGetTsConditions(context.Context, []*Reference, ...gotenresource.BatchGetOption) error
	QueryTsConditions(context.Context, *ListQuery, ...gotenresource.QueryOption) (*QueryResultSnapshot, error)
	SearchTsConditions(context.Context, *SearchQuery, ...gotenresource.QueryOption) (*QueryResultSnapshot, error)
	WatchTsCondition(context.Context, *GetQuery, func(*TsConditionChange) error) error
	WatchTsConditions(context.Context, *WatchQuery, func(*QueryResultChange) error) error
	SaveTsCondition(context.Context, *TsCondition, ...gotenresource.SaveOption) error
	DeleteTsCondition(context.Context, *Reference, ...gotenresource.DeleteOption) error
}

type anyCastAccess struct {
	TsConditionAccess
}

func AsAnyCastAccess(access TsConditionAccess) gotenresource.Access {
	return &anyCastAccess{TsConditionAccess: access}
}

func (a *anyCastAccess) Get(ctx context.Context, q gotenresource.GetQuery, opts ...gotenresource.GetOption) (gotenresource.Resource, error) {
	if asTsConditionQuery, ok := q.(*GetQuery); ok {
		return a.GetTsCondition(ctx, asTsConditionQuery, opts...)
	}
	return nil, status.Errorf(codes.Internal,
		"Unrecognized descriptor, expected TsCondition, got: %s",
		q.GetResourceDescriptor().GetResourceTypeName().FullyQualifiedTypeName())
}

func (a *anyCastAccess) Query(ctx context.Context, q gotenresource.ListQuery, opts ...gotenresource.QueryOption) (gotenresource.QueryResultSnapshot, error) {
	if asTsConditionQuery, ok := q.(*ListQuery); ok {
		return a.QueryTsConditions(ctx, asTsConditionQuery, opts...)
	}
	return nil, status.Errorf(codes.Internal,
		"Unrecognized descriptor, expected TsCondition, got: %s",
		q.GetResourceDescriptor().GetResourceTypeName().FullyQualifiedTypeName())
}

func (a *anyCastAccess) Search(ctx context.Context, q gotenresource.SearchQuery, opts ...gotenresource.QueryOption) (gotenresource.QueryResultSnapshot, error) {
	if asTsConditionQuery, ok := q.(*SearchQuery); ok {
		return a.SearchTsConditions(ctx, asTsConditionQuery, opts...)
	}
	return nil, status.Errorf(codes.Internal,
		"Unrecognized descriptor, expected TsCondition, got: %s",
		q.GetResourceDescriptor().GetResourceTypeName().FullyQualifiedTypeName())
}

func (a *anyCastAccess) Watch(ctx context.Context, q gotenresource.GetQuery, cb func(ch gotenresource.ResourceChange) error) error {
	if asTsConditionQuery, ok := q.(*GetQuery); ok {
		return a.WatchTsCondition(ctx, asTsConditionQuery, func(change *TsConditionChange) error {
			return cb(change)
		})
	}
	return status.Errorf(codes.Internal,
		"Unrecognized descriptor, expected TsCondition, got: %s",
		q.GetResourceDescriptor().GetResourceTypeName().FullyQualifiedTypeName())
}

func (a *anyCastAccess) WatchQuery(ctx context.Context, q gotenresource.WatchQuery, cb func(ch gotenresource.QueryResultChange) error) error {
	if asTsConditionQuery, ok := q.(*WatchQuery); ok {
		return a.WatchTsConditions(ctx, asTsConditionQuery, func(change *QueryResultChange) error {
			return cb(change)
		})
	}
	return status.Errorf(codes.Internal,
		"Unrecognized descriptor, expected TsCondition, got: %s",
		q.GetResourceDescriptor().GetResourceTypeName().FullyQualifiedTypeName())
}

func (a *anyCastAccess) Save(ctx context.Context, res gotenresource.Resource, opts ...gotenresource.SaveOption) error {
	if asTsConditionRes, ok := res.(*TsCondition); ok {
		return a.SaveTsCondition(ctx, asTsConditionRes, opts...)
	}
	return status.Errorf(codes.Internal,
		"Unrecognized descriptor, expected TsCondition, got: %s",
		res.GetResourceDescriptor().GetResourceTypeName().FullyQualifiedTypeName())
}

func (a *anyCastAccess) Delete(ctx context.Context, ref gotenresource.Reference, opts ...gotenresource.DeleteOption) error {
	if asTsConditionRef, ok := ref.(*Reference); ok {
		return a.DeleteTsCondition(ctx, asTsConditionRef, opts...)
	}
	return status.Errorf(codes.Internal,
		"Unrecognized descriptor, expected TsCondition, got: %s",
		ref.GetResourceDescriptor().GetResourceTypeName().FullyQualifiedTypeName())
}

func (a *anyCastAccess) BatchGet(ctx context.Context, toGet []gotenresource.Reference, opts ...gotenresource.BatchGetOption) error {
	tsConditionRefs := make([]*Reference, 0, len(toGet))
	for _, ref := range toGet {
		if asTsConditionRef, ok := ref.(*Reference); !ok {
			return status.Errorf(codes.Internal,
				"Unrecognized descriptor, expected TsCondition, got: %s",
				ref.GetResourceDescriptor().GetResourceTypeName().FullyQualifiedTypeName())
		} else {
			tsConditionRefs = append(tsConditionRefs, asTsConditionRef)
		}
	}
	return a.BatchGetTsConditions(ctx, tsConditionRefs, opts...)
}

func (a *anyCastAccess) GetResourceDescriptors() []gotenresource.Descriptor {
	return []gotenresource.Descriptor{
		GetDescriptor(),
	}
}
