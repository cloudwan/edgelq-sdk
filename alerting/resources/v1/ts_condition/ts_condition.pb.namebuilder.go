// Code generated by protoc-gen-goten-resource
// Resource: TsCondition
// DO NOT EDIT!!!

package ts_condition

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	document "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/document"
	policy "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/policy"
	monitoring_common "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/common"
	monitoring_time_serie "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/time_serie"
	meta "github.com/cloudwan/goten-sdk/types/meta"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
)

// make sure we're using proto imports
var (
	_ = &document.Document{}
	_ = &policy.Policy{}
	_ = &monitoring_common.LabelDescriptor{}
	_ = &monitoring_time_serie.Point{}
	_ = &durationpb.Duration{}
	_ = &meta.Meta{}
)

const (
	NamePattern_Project_Policy = "projects/{project}/policies/{policy}/tsConditions/{ts_condition}"
)

type NamePattern struct {
	Pattern gotenresource.NamePattern `firestore:"pattern"`
}

type NameBuilder struct {
	nameObj Name
}

func NewNameBuilder() *NameBuilder {
	return &NameBuilder{
		nameObj: Name{
			TsConditionId: gotenresource.WildcardId,
			ParentName: ParentName{
				NamePattern: NamePattern{
					// Set default pattern - just first.
					Pattern: NamePattern_Project_Policy,
				},
			},
		},
	}
}

func (b *NameBuilder) Name() *Name {
	copied := b.nameObj
	return &copied
}

func (b *NameBuilder) Reference() *Reference {
	return b.nameObj.AsReference()
}

func (b *NameBuilder) Parent() *ParentName {
	copied := b.nameObj.ParentName
	return &copied
}

func (b *NameBuilder) ParentReference() *ParentReference {
	return b.nameObj.ParentName.AsReference()
}

func (b *NameBuilder) SetId(id string) *NameBuilder {
	b.nameObj.TsConditionId = id
	return b
}

func (b *NameBuilder) SetPolicy(parent *policy.Name) *NameBuilder {
	parentName := &b.nameObj.ParentName

	switch parent.Pattern {
	case policy.NamePattern_Project:
		parentName.Pattern = NamePattern_Project_Policy
	}
	parentName.ProjectId = parent.ProjectId
	parentName.PolicyId = parent.PolicyId
	return b
}

func (b *NameBuilder) SetProjectId(id string) *NameBuilder {
	parentName := &b.nameObj.ParentName
	parentName.ProjectId = id

	// Set pattern if something matches for this set of IDs
	if parentName.ProjectId != "" && parentName.PolicyId != "" {
		parentName.Pattern = NamePattern_Project_Policy
	}
	return b
}

func (b *NameBuilder) SetPolicyId(id string) *NameBuilder {
	parentName := &b.nameObj.ParentName
	parentName.PolicyId = id

	// Set pattern if something matches for this set of IDs
	if parentName.ProjectId != "" && parentName.PolicyId != "" {
		parentName.Pattern = NamePattern_Project_Policy
	}
	return b
}
