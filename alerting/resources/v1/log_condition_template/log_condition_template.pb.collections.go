// Code generated by protoc-gen-goten-resource
// Resource: LogConditionTemplate
// DO NOT EDIT!!!

package log_condition_template

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	rcommon "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/common"
	document "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/document"
	policy_template "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/policy_template"
	meta "github.com/cloudwan/goten-sdk/types/meta"
)

// ensure the imports are used
var (
	_ = new(gotenresource.ListQuery)
)

// make sure we're using proto imports
var (
	_ = &document.Document{}
	_ = &policy_template.PolicyTemplate{}
	_ = &rcommon.LogCndSpec{}
	_ = &meta.Meta{}
)

type LogConditionTemplateList []*LogConditionTemplate

func (l LogConditionTemplateList) Append(item gotenresource.Resource) gotenresource.ResourceList {
	return append(l, item.(*LogConditionTemplate))
}

func (l LogConditionTemplateList) AppendList(list gotenresource.ResourceList) gotenresource.ResourceList {
	return append(l, list.(LogConditionTemplateList)...)
}

func (l LogConditionTemplateList) Slice(first, second int) gotenresource.ResourceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l LogConditionTemplateList) At(idx int) gotenresource.Resource {
	return l[idx]
}

func (l LogConditionTemplateList) Set(idx int, res gotenresource.Resource) {
	l[idx] = res.(*LogConditionTemplate)
}

func (l LogConditionTemplateList) Length() int {
	return len(l)
}

type LogConditionTemplateChangeList []*LogConditionTemplateChange

func (l LogConditionTemplateChangeList) Append(item gotenresource.ResourceChange) gotenresource.ResourceChangeList {
	return append(l, item.(*LogConditionTemplateChange))
}

func (l LogConditionTemplateChangeList) AppendList(list gotenresource.ResourceChangeList) gotenresource.ResourceChangeList {
	return append(l, list.(LogConditionTemplateChangeList)...)
}

func (l LogConditionTemplateChangeList) Slice(first, second int) gotenresource.ResourceChangeList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l LogConditionTemplateChangeList) At(idx int) gotenresource.ResourceChange {
	return l[idx]
}

func (l LogConditionTemplateChangeList) Set(idx int, change gotenresource.ResourceChange) {
	l[idx] = change.(*LogConditionTemplateChange)
}

func (l LogConditionTemplateChangeList) Length() int {
	return len(l)
}

type LogConditionTemplateNameList []*Name

func (l LogConditionTemplateNameList) Append(name gotenresource.Name) gotenresource.NameList {
	return append(l, name.(*Name))
}

func (l LogConditionTemplateNameList) AppendList(list gotenresource.NameList) gotenresource.NameList {
	return append(l, list.(LogConditionTemplateNameList)...)
}

func (l LogConditionTemplateNameList) Slice(first, second int) gotenresource.NameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l LogConditionTemplateNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l LogConditionTemplateNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*Name)
}

func (l LogConditionTemplateNameList) Length() int {
	return len(l)
}

type LogConditionTemplateReferenceList []*Reference

func (l LogConditionTemplateReferenceList) Append(ref gotenresource.Reference) gotenresource.ReferenceList {
	return append(l, ref.(*Reference))
}

func (l LogConditionTemplateReferenceList) AppendList(list gotenresource.ReferenceList) gotenresource.ReferenceList {
	return append(l, list.(LogConditionTemplateReferenceList)...)
}

func (l LogConditionTemplateReferenceList) Slice(first, second int) gotenresource.ReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l LogConditionTemplateReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l LogConditionTemplateReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*Reference)
}

func (l LogConditionTemplateReferenceList) Length() int {
	return len(l)
}

type LogConditionTemplateParentNameList []*ParentName

func (l LogConditionTemplateParentNameList) Append(name gotenresource.Name) gotenresource.ParentNameList {
	return append(l, name.(*ParentName))
}

func (l LogConditionTemplateParentNameList) AppendList(list gotenresource.ParentNameList) gotenresource.ParentNameList {
	return append(l, list.(LogConditionTemplateParentNameList)...)
}

func (l LogConditionTemplateParentNameList) Slice(first, second int) gotenresource.ParentNameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l LogConditionTemplateParentNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l LogConditionTemplateParentNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*ParentName)
}

func (l LogConditionTemplateParentNameList) Length() int {
	return len(l)
}

type LogConditionTemplateParentReferenceList []*ParentReference

func (l LogConditionTemplateParentReferenceList) Append(ref gotenresource.Reference) gotenresource.ParentReferenceList {
	return append(l, ref.(*ParentReference))
}

func (l LogConditionTemplateParentReferenceList) AppendList(list gotenresource.ParentReferenceList) gotenresource.ParentReferenceList {
	return append(l, list.(LogConditionTemplateParentReferenceList)...)
}

func (l LogConditionTemplateParentReferenceList) Slice(first, second int) gotenresource.ParentReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l LogConditionTemplateParentReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l LogConditionTemplateParentReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*ParentReference)
}

func (l LogConditionTemplateParentReferenceList) Length() int {
	return len(l)
}

type LogConditionTemplateMap map[Name]*LogConditionTemplate

func (m LogConditionTemplateMap) Get(name gotenresource.Name) gotenresource.Resource {
	return m[*name.(*Name)]
}

func (m LogConditionTemplateMap) Set(res gotenresource.Resource) {
	tRes := res.(*LogConditionTemplate)
	m[*tRes.Name] = tRes
}

func (m LogConditionTemplateMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m LogConditionTemplateMap) Length() int {
	return len(m)
}

func (m LogConditionTemplateMap) ForEach(cb func(gotenresource.Name, gotenresource.Resource) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}

type LogConditionTemplateChangeMap map[Name]*LogConditionTemplateChange

func (m LogConditionTemplateChangeMap) Get(name gotenresource.Name) gotenresource.ResourceChange {
	return m[*name.(*Name)]
}

func (m LogConditionTemplateChangeMap) Set(change gotenresource.ResourceChange) {
	tChange := change.(*LogConditionTemplateChange)
	m[*tChange.GetLogConditionTemplateName()] = tChange
}

func (m LogConditionTemplateChangeMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m LogConditionTemplateChangeMap) Length() int {
	return len(m)
}

func (m LogConditionTemplateChangeMap) ForEach(cb func(gotenresource.Name, gotenresource.ResourceChange) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}
