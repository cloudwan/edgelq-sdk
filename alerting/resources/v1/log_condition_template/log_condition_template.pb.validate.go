// Code generated by protoc-gen-goten-validate
// File: edgelq/alerting/proto/v1/log_condition_template.proto
// DO NOT EDIT!!!

package log_condition_template

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	gotenvalidate "github.com/cloudwan/goten-sdk/runtime/validate"
)

// proto imports
import (
	document "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/document"
	log_condition "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/log_condition"
	policy_template "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/policy_template"
	meta "github.com/cloudwan/goten-sdk/types/meta"
)

var (
	_ = bytes.Equal
	_ = errors.New
	_ = fmt.Errorf
	_ = net.ParseIP
	_ = regexp.Match
	_ = strings.Split
	_ = time.Now
	_ = utf8.RuneCountInString
	_ = url.Parse
	_ = gotenvalidate.NewValidationError
)

// make sure we're using proto imports
var (
	_ = &document.Document{}
	_ = &log_condition.LogCondition{}
	_ = &policy_template.PolicyTemplate{}
	_ = &meta.Meta{}
)

func (obj *LogConditionTemplate) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if subobj, ok := interface{}(obj.Metadata).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("LogConditionTemplate", "metadata", obj.Metadata, "nested object validation failed", err)
		}
	}
	{
		rlen := utf8.RuneCountInString(obj.DisplayName)
		if rlen > 256 {
			return gotenvalidate.NewValidationError("LogConditionTemplate", "displayName", obj.DisplayName, "field must contain at most 256 characters", nil)
		}
	}
	{
		rlen := utf8.RuneCountInString(obj.Description)
		if rlen > 512 {
			return gotenvalidate.NewValidationError("LogConditionTemplate", "description", obj.Description, "field must contain at most 512 characters", nil)
		}
	}
	if obj.SpecTemplate == nil {
		return gotenvalidate.NewValidationError("LogConditionTemplate", "specTemplate", obj.SpecTemplate, "field is required", nil)
	}
	if subobj, ok := interface{}(obj.SpecTemplate).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("LogConditionTemplate", "specTemplate", obj.SpecTemplate, "nested object validation failed", err)
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
