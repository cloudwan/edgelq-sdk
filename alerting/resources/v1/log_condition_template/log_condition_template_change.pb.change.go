// Code generated by protoc-gen-goten-resource
// Resource change: LogConditionTemplateChange
// DO NOT EDIT!!!

package log_condition_template

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	policy_template "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/policy_template"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
)

// ensure the imports are used
var (
	_ = new(gotenresource.ListQuery)
)

// make sure we're using proto imports
var (
	_ = &policy_template.PolicyTemplate{}
	_ = &fieldmaskpb.FieldMask{}
)

func (c *LogConditionTemplateChange) IsAdd() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*LogConditionTemplateChange_Added_)
	return ok
}

func (c *LogConditionTemplateChange) IsModify() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*LogConditionTemplateChange_Modified_)
	return ok
}

func (c *LogConditionTemplateChange) IsCurrent() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*LogConditionTemplateChange_Current_)
	return ok
}

func (c *LogConditionTemplateChange) IsDelete() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*LogConditionTemplateChange_Removed_)
	return ok
}

func (c *LogConditionTemplateChange) GetCurrentViewIndex() int32 {
	switch cType := c.ChangeType.(type) {
	case *LogConditionTemplateChange_Added_:
		return cType.Added.ViewIndex
	case *LogConditionTemplateChange_Modified_:
		return cType.Modified.ViewIndex
	}
	return 0
}

func (c *LogConditionTemplateChange) GetPreviousViewIndex() int32 {
	switch cType := c.ChangeType.(type) {
	case *LogConditionTemplateChange_Removed_:
		return cType.Removed.ViewIndex
	case *LogConditionTemplateChange_Modified_:
		return cType.Modified.PreviousViewIndex
	}
	return 0
}

func (c *LogConditionTemplateChange) GetLogConditionTemplate() *LogConditionTemplate {
	if c == nil {
		return nil
	}
	switch cType := c.ChangeType.(type) {
	case *LogConditionTemplateChange_Added_:
		return cType.Added.LogConditionTemplate
	case *LogConditionTemplateChange_Modified_:
		return cType.Modified.LogConditionTemplate
	case *LogConditionTemplateChange_Current_:
		return cType.Current.LogConditionTemplate
	case *LogConditionTemplateChange_Removed_:
		return nil
	}
	return nil
}

func (c *LogConditionTemplateChange) GetRawResource() gotenresource.Resource {
	return c.GetLogConditionTemplate()
}

func (c *LogConditionTemplateChange) GetLogConditionTemplateName() *Name {
	if c == nil {
		return nil
	}
	switch cType := c.ChangeType.(type) {
	case *LogConditionTemplateChange_Added_:
		return cType.Added.LogConditionTemplate.GetName()
	case *LogConditionTemplateChange_Modified_:
		return cType.Modified.Name
	case *LogConditionTemplateChange_Current_:
		return cType.Current.LogConditionTemplate.GetName()
	case *LogConditionTemplateChange_Removed_:
		return cType.Removed.Name
	}
	return nil
}

func (c *LogConditionTemplateChange) GetRawName() gotenresource.Name {
	return c.GetLogConditionTemplateName()
}

func (c *LogConditionTemplateChange) SetAddedRaw(snapshot gotenresource.Resource, idx int) {
	c.ChangeType = &LogConditionTemplateChange_Added_{
		Added: &LogConditionTemplateChange_Added{
			LogConditionTemplate: snapshot.(*LogConditionTemplate),
			ViewIndex:            int32(idx),
		},
	}
}

func (c *LogConditionTemplateChange) SetModifiedRaw(name gotenresource.Name, snapshot gotenresource.Resource, prevIdx int, newIdx int) {
	c.ChangeType = &LogConditionTemplateChange_Modified_{
		Modified: &LogConditionTemplateChange_Modified{
			Name:                 name.(*Name),
			LogConditionTemplate: snapshot.(*LogConditionTemplate),
			PreviousViewIndex:    int32(prevIdx),
			ViewIndex:            int32(newIdx),
		},
	}
}

func (c *LogConditionTemplateChange) SetCurrentRaw(snapshot gotenresource.Resource) {
	c.ChangeType = &LogConditionTemplateChange_Current_{
		Current: &LogConditionTemplateChange_Current{
			LogConditionTemplate: snapshot.(*LogConditionTemplate),
		},
	}
}

func (c *LogConditionTemplateChange) SetDeletedRaw(name gotenresource.Name, idx int) {
	c.ChangeType = &LogConditionTemplateChange_Removed_{
		Removed: &LogConditionTemplateChange_Removed{
			Name:      name.(*Name),
			ViewIndex: int32(idx),
		},
	}
}
