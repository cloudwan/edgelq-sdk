// Code generated by protoc-gen-goten-go
// File: edgelq/alerting/proto/v1/log_condition.proto
// DO NOT EDIT!!!

package log_condition

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	document "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/document"
	policy "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/policy"
	logging_log "github.com/cloudwan/edgelq-sdk/logging/resources/v1/log"
	meta "github.com/cloudwan/goten-sdk/types/meta"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &document.Document{}
	_ = &policy.Policy{}
	_ = &logging_log.Log{}
	_ = &durationpb.Duration{}
	_ = &meta.Meta{}
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Operator informs if only one trigger must be satisfied to
// trigger an Alert, or all.
type LogCondition_Spec_Query_CompositeTrigger_Operator int32

const (
	// UNDEFINED is not allowed
	LogCondition_Spec_Query_CompositeTrigger_UNDEFINED LogCondition_Spec_Query_CompositeTrigger_Operator = 0
	// AND tells that all triggers must be on for Alert to be created
	LogCondition_Spec_Query_CompositeTrigger_AND LogCondition_Spec_Query_CompositeTrigger_Operator = 1
	// OR tells that Alert should be raised based on any trigger
	// condition.
	LogCondition_Spec_Query_CompositeTrigger_OR LogCondition_Spec_Query_CompositeTrigger_Operator = 2
)

var (
	LogCondition_Spec_Query_CompositeTrigger_Operator_name = map[int32]string{
		0: "UNDEFINED",
		1: "AND",
		2: "OR",
	}

	LogCondition_Spec_Query_CompositeTrigger_Operator_value = map[string]int32{
		"UNDEFINED": 0,
		"AND":       1,
		"OR":        2,
	}
)

func (x LogCondition_Spec_Query_CompositeTrigger_Operator) Enum() *LogCondition_Spec_Query_CompositeTrigger_Operator {
	p := new(LogCondition_Spec_Query_CompositeTrigger_Operator)
	*p = x
	return p
}

func (x LogCondition_Spec_Query_CompositeTrigger_Operator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (LogCondition_Spec_Query_CompositeTrigger_Operator) Descriptor() preflect.EnumDescriptor {
	return edgelq_alerting_proto_v1_log_condition_proto_enumTypes[0].Descriptor()
}

func (LogCondition_Spec_Query_CompositeTrigger_Operator) Type() preflect.EnumType {
	return &edgelq_alerting_proto_v1_log_condition_proto_enumTypes[0]
}

func (x LogCondition_Spec_Query_CompositeTrigger_Operator) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use LogCondition_Spec_Query_CompositeTrigger_Operator.ProtoReflect.Descriptor instead.
func (LogCondition_Spec_Query_CompositeTrigger_Operator) EnumDescriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_log_condition_proto_rawDescGZIP(), []int{0, 0, 0, 2, 0}
}

// LogCondition describes when Alert based on Logs data should be raised.
type LogCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of LogCondition
	// When creating a new instance, this field is optional and if not provided,
	// it will be generated automatically. Last ID segment must conform to the
	// following regex: [a-z][a-z0-9\\-]{0,28}[a-z0-9]
	Name *Name `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty"`
	// Metadata is an object with information like create, update and delete time
	// (for async deleted resources), has user labels/annotations, sharding
	// information, multi-region syncing information and may have non-schema
	// owners (useful for taking ownership of resources belonging to lower level
	// services by higher ones).
	Metadata *meta.Meta `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Display Name
	DisplayName string `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Long description
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// List of documents useful for troubleshooting and fixing alerts triggered
	// by this condition.
	SupportingDocs []*document.Reference `protobuf:"bytes,5,rep,customtype=Reference,name=supporting_docs,json=supportingDocs,proto3" json:"supporting_docs,omitempty"`
	// Defines what query is being monitored, and what content must trigger an
	// Alert.
	Spec *LogCondition_Spec `protobuf:"bytes,6,opt,name=spec,proto3" json:"spec,omitempty"`
	// Internal field.
	Internal *LogCondition_Internal `protobuf:"bytes,7,opt,name=internal,proto3" json:"internal,omitempty"`
}

func (m *LogCondition) Reset() {
	*m = LogCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_log_condition_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *LogCondition) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*LogCondition) ProtoMessage() {}

func (m *LogCondition) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_log_condition_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*LogCondition) GotenMessage() {}

// Deprecated, Use LogCondition.ProtoReflect.Descriptor instead.
func (*LogCondition) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_log_condition_proto_rawDescGZIP(), []int{0}
}

func (m *LogCondition) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *LogCondition) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *LogCondition) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *LogCondition) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *LogCondition) GetName() *Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *LogCondition) GetMetadata() *meta.Meta {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *LogCondition) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *LogCondition) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *LogCondition) GetSupportingDocs() []*document.Reference {
	if m != nil {
		return m.SupportingDocs
	}
	return nil
}

func (m *LogCondition) GetSpec() *LogCondition_Spec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *LogCondition) GetInternal() *LogCondition_Internal {
	if m != nil {
		return m.Internal
	}
	return nil
}

func (m *LogCondition) SetName(fv *Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "LogCondition"))
	}
	m.Name = fv
}

func (m *LogCondition) SetMetadata(fv *meta.Meta) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Metadata", "LogCondition"))
	}
	m.Metadata = fv
}

func (m *LogCondition) SetDisplayName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DisplayName", "LogCondition"))
	}
	m.DisplayName = fv
}

func (m *LogCondition) SetDescription(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Description", "LogCondition"))
	}
	m.Description = fv
}

func (m *LogCondition) SetSupportingDocs(fv []*document.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SupportingDocs", "LogCondition"))
	}
	m.SupportingDocs = fv
}

func (m *LogCondition) SetSpec(fv *LogCondition_Spec) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Spec", "LogCondition"))
	}
	m.Spec = fv
}

func (m *LogCondition) SetInternal(fv *LogCondition_Internal) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Internal", "LogCondition"))
	}
	m.Internal = fv
}

// Spec informs what Logging queries should be monitored for alerting, and
// what content should be considered as violation.
type LogCondition_Spec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Specifies logging query
	Query *LogCondition_Spec_Query `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	// Group by labels inform how to split monitored Logs stream. Each
	// unique combination of label values is considered separately as own
	// alerting bucket.
	// All labels defined in Policy must be defined here.
	GroupByLabels []string `protobuf:"bytes,2,rep,name=group_by_labels,json=groupByLabels,proto3" json:"group_by_labels,omitempty"`
}

func (m *LogCondition_Spec) Reset() {
	*m = LogCondition_Spec{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_log_condition_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *LogCondition_Spec) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*LogCondition_Spec) ProtoMessage() {}

func (m *LogCondition_Spec) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_log_condition_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*LogCondition_Spec) GotenMessage() {}

// Deprecated, Use LogCondition_Spec.ProtoReflect.Descriptor instead.
func (*LogCondition_Spec) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_log_condition_proto_rawDescGZIP(), []int{0, 0}
}

func (m *LogCondition_Spec) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *LogCondition_Spec) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *LogCondition_Spec) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *LogCondition_Spec) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *LogCondition_Spec) GetQuery() *LogCondition_Spec_Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *LogCondition_Spec) GetGroupByLabels() []string {
	if m != nil {
		return m.GroupByLabels
	}
	return nil
}

func (m *LogCondition_Spec) SetQuery(fv *LogCondition_Spec_Query) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Query", "LogCondition_Spec"))
	}
	m.Query = fv
}

func (m *LogCondition_Spec) SetGroupByLabels(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "GroupByLabels", "LogCondition_Spec"))
	}
	m.GroupByLabels = fv
}

// Internal data.
type LogCondition_Internal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Informs if log condition is processed at the backend or on edge.
	AlertingLocation policy.Policy_Spec_ProcessingLocation `protobuf:"varint,1,opt,name=alerting_location,json=alertingLocation,proto3,enum=ntt.alerting.v1.Policy_Spec_ProcessingLocation" json:"alerting_location,omitempty"`
}

func (m *LogCondition_Internal) Reset() {
	*m = LogCondition_Internal{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_log_condition_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *LogCondition_Internal) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*LogCondition_Internal) ProtoMessage() {}

func (m *LogCondition_Internal) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_log_condition_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*LogCondition_Internal) GotenMessage() {}

// Deprecated, Use LogCondition_Internal.ProtoReflect.Descriptor instead.
func (*LogCondition_Internal) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_log_condition_proto_rawDescGZIP(), []int{0, 1}
}

func (m *LogCondition_Internal) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *LogCondition_Internal) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *LogCondition_Internal) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *LogCondition_Internal) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *LogCondition_Internal) GetAlertingLocation() policy.Policy_Spec_ProcessingLocation {
	if m != nil {
		return m.AlertingLocation
	}
	return policy.Policy_Spec_UNDEFINED
}

func (m *LogCondition_Internal) SetAlertingLocation(fv policy.Policy_Spec_ProcessingLocation) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AlertingLocation", "LogCondition_Internal"))
	}
	m.AlertingLocation = fv
}

// Query specifies what logging query should be monitored.
type LogCondition_Spec_Query struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Filter used to continuously observe log query output.
	Filter *logging_log.Filter `protobuf:"bytes,2,opt,customtype=Filter,name=filter,proto3" json:"filter,omitempty"`
	// Trigger under which Alert is raised
	Trigger *LogCondition_Spec_Query_TriggerCnd `protobuf:"bytes,3,opt,name=trigger,proto3" json:"trigger,omitempty"`
	// Informs how long alert should be maintained in firing state since last
	// occurrence.
	MinDuration *durationpb.Duration `protobuf:"bytes,4,opt,name=min_duration,json=minDuration,proto3" json:"min_duration,omitempty"`
}

func (m *LogCondition_Spec_Query) Reset() {
	*m = LogCondition_Spec_Query{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_log_condition_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *LogCondition_Spec_Query) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*LogCondition_Spec_Query) ProtoMessage() {}

func (m *LogCondition_Spec_Query) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_log_condition_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*LogCondition_Spec_Query) GotenMessage() {}

// Deprecated, Use LogCondition_Spec_Query.ProtoReflect.Descriptor instead.
func (*LogCondition_Spec_Query) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_log_condition_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (m *LogCondition_Spec_Query) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *LogCondition_Spec_Query) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *LogCondition_Spec_Query) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *LogCondition_Spec_Query) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *LogCondition_Spec_Query) GetFilter() *logging_log.Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *LogCondition_Spec_Query) GetTrigger() *LogCondition_Spec_Query_TriggerCnd {
	if m != nil {
		return m.Trigger
	}
	return nil
}

func (m *LogCondition_Spec_Query) GetMinDuration() *durationpb.Duration {
	if m != nil {
		return m.MinDuration
	}
	return nil
}

func (m *LogCondition_Spec_Query) SetFilter(fv *logging_log.Filter) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Filter", "LogCondition_Spec_Query"))
	}
	m.Filter = fv
}

func (m *LogCondition_Spec_Query) SetTrigger(fv *LogCondition_Spec_Query_TriggerCnd) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Trigger", "LogCondition_Spec_Query"))
	}
	m.Trigger = fv
}

func (m *LogCondition_Spec_Query) SetMinDuration(fv *durationpb.Duration) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MinDuration", "LogCondition_Spec_Query"))
	}
	m.MinDuration = fv
}

// LabelTrigger informs what label Log must have to be considered as a
// violation.
type LogCondition_Spec_Query_LabelTrigger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Label key
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Triggering label values.
	Values []string `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
}

func (m *LogCondition_Spec_Query_LabelTrigger) Reset() {
	*m = LogCondition_Spec_Query_LabelTrigger{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_log_condition_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *LogCondition_Spec_Query_LabelTrigger) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*LogCondition_Spec_Query_LabelTrigger) ProtoMessage() {}

func (m *LogCondition_Spec_Query_LabelTrigger) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_log_condition_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*LogCondition_Spec_Query_LabelTrigger) GotenMessage() {}

// Deprecated, Use LogCondition_Spec_Query_LabelTrigger.ProtoReflect.Descriptor instead.
func (*LogCondition_Spec_Query_LabelTrigger) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_log_condition_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

func (m *LogCondition_Spec_Query_LabelTrigger) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *LogCondition_Spec_Query_LabelTrigger) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *LogCondition_Spec_Query_LabelTrigger) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *LogCondition_Spec_Query_LabelTrigger) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *LogCondition_Spec_Query_LabelTrigger) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *LogCondition_Spec_Query_LabelTrigger) GetValues() []string {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *LogCondition_Spec_Query_LabelTrigger) SetKey(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Key", "LogCondition_Spec_Query_LabelTrigger"))
	}
	m.Key = fv
}

func (m *LogCondition_Spec_Query_LabelTrigger) SetValues(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Values", "LogCondition_Spec_Query_LabelTrigger"))
	}
	m.Values = fv
}

// StringPayloadTrigger informs what text content of log is
// triggering an alert.
type LogCondition_Spec_Query_StringPayloadTrigger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Optional selector inside log data field. It should be ignored
	// if log entry is just a string or byte array. It can be used if log
	// is some JSON object, and we search for specific fields.
	ObjectSelector string `protobuf:"bytes,1,opt,name=object_selector,json=objectSelector,proto3" json:"object_selector,omitempty"`
	// Regex that log content must satisfy to trigger an alert
	Regex string `protobuf:"bytes,2,opt,name=regex,proto3" json:"regex,omitempty"`
}

func (m *LogCondition_Spec_Query_StringPayloadTrigger) Reset() {
	*m = LogCondition_Spec_Query_StringPayloadTrigger{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_log_condition_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *LogCondition_Spec_Query_StringPayloadTrigger) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*LogCondition_Spec_Query_StringPayloadTrigger) ProtoMessage() {}

func (m *LogCondition_Spec_Query_StringPayloadTrigger) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_log_condition_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*LogCondition_Spec_Query_StringPayloadTrigger) GotenMessage() {}

// Deprecated, Use LogCondition_Spec_Query_StringPayloadTrigger.ProtoReflect.Descriptor instead.
func (*LogCondition_Spec_Query_StringPayloadTrigger) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_log_condition_proto_rawDescGZIP(), []int{0, 0, 0, 1}
}

func (m *LogCondition_Spec_Query_StringPayloadTrigger) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *LogCondition_Spec_Query_StringPayloadTrigger) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *LogCondition_Spec_Query_StringPayloadTrigger) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *LogCondition_Spec_Query_StringPayloadTrigger) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *LogCondition_Spec_Query_StringPayloadTrigger) GetObjectSelector() string {
	if m != nil {
		return m.ObjectSelector
	}
	return ""
}

func (m *LogCondition_Spec_Query_StringPayloadTrigger) GetRegex() string {
	if m != nil {
		return m.Regex
	}
	return ""
}

func (m *LogCondition_Spec_Query_StringPayloadTrigger) SetObjectSelector(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ObjectSelector", "LogCondition_Spec_Query_StringPayloadTrigger"))
	}
	m.ObjectSelector = fv
}

func (m *LogCondition_Spec_Query_StringPayloadTrigger) SetRegex(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Regex", "LogCondition_Spec_Query_StringPayloadTrigger"))
	}
	m.Regex = fv
}

// CompositeTrigger collects multiple triggers together.
type LogCondition_Spec_Query_CompositeTrigger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// List of triggers.
	Triggers []*LogCondition_Spec_Query_TriggerCnd `protobuf:"bytes,1,rep,name=triggers,proto3" json:"triggers,omitempty"`
	// Operator combining triggers
	Operator LogCondition_Spec_Query_CompositeTrigger_Operator `protobuf:"varint,2,opt,name=operator,proto3,enum=ntt.alerting.v1.LogCondition_Spec_Query_CompositeTrigger_Operator" json:"operator,omitempty"`
}

func (m *LogCondition_Spec_Query_CompositeTrigger) Reset() {
	*m = LogCondition_Spec_Query_CompositeTrigger{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_log_condition_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *LogCondition_Spec_Query_CompositeTrigger) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*LogCondition_Spec_Query_CompositeTrigger) ProtoMessage() {}

func (m *LogCondition_Spec_Query_CompositeTrigger) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_log_condition_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*LogCondition_Spec_Query_CompositeTrigger) GotenMessage() {}

// Deprecated, Use LogCondition_Spec_Query_CompositeTrigger.ProtoReflect.Descriptor instead.
func (*LogCondition_Spec_Query_CompositeTrigger) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_log_condition_proto_rawDescGZIP(), []int{0, 0, 0, 2}
}

func (m *LogCondition_Spec_Query_CompositeTrigger) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *LogCondition_Spec_Query_CompositeTrigger) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *LogCondition_Spec_Query_CompositeTrigger) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *LogCondition_Spec_Query_CompositeTrigger) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *LogCondition_Spec_Query_CompositeTrigger) GetTriggers() []*LogCondition_Spec_Query_TriggerCnd {
	if m != nil {
		return m.Triggers
	}
	return nil
}

func (m *LogCondition_Spec_Query_CompositeTrigger) GetOperator() LogCondition_Spec_Query_CompositeTrigger_Operator {
	if m != nil {
		return m.Operator
	}
	return LogCondition_Spec_Query_CompositeTrigger_UNDEFINED
}

func (m *LogCondition_Spec_Query_CompositeTrigger) SetTriggers(fv []*LogCondition_Spec_Query_TriggerCnd) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Triggers", "LogCondition_Spec_Query_CompositeTrigger"))
	}
	m.Triggers = fv
}

func (m *LogCondition_Spec_Query_CompositeTrigger) SetOperator(fv LogCondition_Spec_Query_CompositeTrigger_Operator) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Operator", "LogCondition_Spec_Query_CompositeTrigger"))
	}
	m.Operator = fv
}

// TriggerCnd wraps a trigger deciding when to trigger an alert.
// It inspects each Log individually.
type LogCondition_Spec_Query_TriggerCnd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Types that are valid to be assigned to Type:
	//	*LogCondition_Spec_Query_TriggerCnd_Label
	//	*LogCondition_Spec_Query_TriggerCnd_StringContent
	//	*LogCondition_Spec_Query_TriggerCnd_Composite
	Type isLogCondition_Spec_Query_TriggerCnd_Type `protobuf_oneof:"type"`
}

func (m *LogCondition_Spec_Query_TriggerCnd) Reset() {
	*m = LogCondition_Spec_Query_TriggerCnd{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_log_condition_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *LogCondition_Spec_Query_TriggerCnd) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*LogCondition_Spec_Query_TriggerCnd) ProtoMessage() {}

func (m *LogCondition_Spec_Query_TriggerCnd) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_log_condition_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*LogCondition_Spec_Query_TriggerCnd) GotenMessage() {}

// Deprecated, Use LogCondition_Spec_Query_TriggerCnd.ProtoReflect.Descriptor instead.
func (*LogCondition_Spec_Query_TriggerCnd) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_log_condition_proto_rawDescGZIP(), []int{0, 0, 0, 3}
}

func (m *LogCondition_Spec_Query_TriggerCnd) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *LogCondition_Spec_Query_TriggerCnd) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *LogCondition_Spec_Query_TriggerCnd) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *LogCondition_Spec_Query_TriggerCnd) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

type isLogCondition_Spec_Query_TriggerCnd_Type interface {
	isLogCondition_Spec_Query_TriggerCnd_Type()
}

type LogCondition_Spec_Query_TriggerCnd_Label struct {
	// Trigger based on label
	Label *LogCondition_Spec_Query_LabelTrigger `protobuf:"bytes,1,opt,name=label,proto3,oneof"`
}
type LogCondition_Spec_Query_TriggerCnd_StringContent struct {
	// Trigger based on log textual content
	StringContent *LogCondition_Spec_Query_StringPayloadTrigger `protobuf:"bytes,2,opt,name=string_content,json=stringContent,proto3,oneof"`
}
type LogCondition_Spec_Query_TriggerCnd_Composite struct {
	// Composite trigger combining multiple smaller ones
	Composite *LogCondition_Spec_Query_CompositeTrigger `protobuf:"bytes,3,opt,name=composite,proto3,oneof"`
}

func (*LogCondition_Spec_Query_TriggerCnd_Label) isLogCondition_Spec_Query_TriggerCnd_Type() {}
func (*LogCondition_Spec_Query_TriggerCnd_StringContent) isLogCondition_Spec_Query_TriggerCnd_Type() {
}
func (*LogCondition_Spec_Query_TriggerCnd_Composite) isLogCondition_Spec_Query_TriggerCnd_Type() {}
func (m *LogCondition_Spec_Query_TriggerCnd) GetType() isLogCondition_Spec_Query_TriggerCnd_Type {
	if m != nil {
		return m.Type
	}
	return nil
}
func (m *LogCondition_Spec_Query_TriggerCnd) GetLabel() *LogCondition_Spec_Query_LabelTrigger {
	if x, ok := m.GetType().(*LogCondition_Spec_Query_TriggerCnd_Label); ok {
		return x.Label
	}
	return nil
}
func (m *LogCondition_Spec_Query_TriggerCnd) GetStringContent() *LogCondition_Spec_Query_StringPayloadTrigger {
	if x, ok := m.GetType().(*LogCondition_Spec_Query_TriggerCnd_StringContent); ok {
		return x.StringContent
	}
	return nil
}
func (m *LogCondition_Spec_Query_TriggerCnd) GetComposite() *LogCondition_Spec_Query_CompositeTrigger {
	if x, ok := m.GetType().(*LogCondition_Spec_Query_TriggerCnd_Composite); ok {
		return x.Composite
	}
	return nil
}
func (m *LogCondition_Spec_Query_TriggerCnd) SetType(ofv isLogCondition_Spec_Query_TriggerCnd_Type) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "isLogCondition_Spec_Query_TriggerCnd_Type", "LogCondition_Spec_Query_TriggerCnd"))
	}
	m.Type = ofv
}
func (m *LogCondition_Spec_Query_TriggerCnd) SetLabel(fv *LogCondition_Spec_Query_LabelTrigger) {
	m.SetType(&LogCondition_Spec_Query_TriggerCnd_Label{Label: fv})
}
func (m *LogCondition_Spec_Query_TriggerCnd) SetStringContent(fv *LogCondition_Spec_Query_StringPayloadTrigger) {
	m.SetType(&LogCondition_Spec_Query_TriggerCnd_StringContent{StringContent: fv})
}
func (m *LogCondition_Spec_Query_TriggerCnd) SetComposite(fv *LogCondition_Spec_Query_CompositeTrigger) {
	m.SetType(&LogCondition_Spec_Query_TriggerCnd_Composite{Composite: fv})
}

var edgelq_alerting_proto_v1_log_condition_proto preflect.FileDescriptor

var edgelq_alerting_proto_v1_log_condition_proto_rawDesc = []byte{
	0x0a, 0x2c, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x67, 0x5f, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f,
	0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x1a,
	0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65,
	0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f,
	0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74,
	0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67,
	0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x67,
	0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x67, 0x6f, 0x74, 0x65, 0x6e,
	0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x25, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa3, 0x12, 0x0a, 0x0c, 0x4c, 0x6f, 0x67,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xb2, 0xda, 0x21, 0x10, 0x0a, 0x0e, 0x0a,
	0x0c, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x2e, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xca, 0xc6, 0x27, 0x07, 0x2a, 0x05,
	0x22, 0x03, 0x08, 0x80, 0x02, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xca, 0xc6, 0x27, 0x07, 0x2a, 0x05, 0x22,
	0x03, 0x08, 0x80, 0x04, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x3b, 0x0a, 0x0f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x64, 0x6f, 0x63, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x42, 0x12, 0xb2, 0xda, 0x21, 0x0e,
	0x12, 0x0c, 0x0a, 0x08, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x52, 0x0e,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x6f, 0x63, 0x73, 0x12, 0x40,
	0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x70, 0x65, 0x63,
	0x42, 0x08, 0xca, 0xc6, 0x27, 0x04, 0x62, 0x02, 0x08, 0x01, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63,
	0x12, 0x48, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x42, 0x04, 0xf0, 0xd9, 0x21, 0x01,
	0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x1a, 0xfe, 0x08, 0x0a, 0x04, 0x53,
	0x70, 0x65, 0x63, 0x12, 0x48, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x08, 0xca, 0xc6,
	0x27, 0x04, 0x62, 0x02, 0x08, 0x01, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x38, 0x0a,
	0x0f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x10, 0xca, 0xc6, 0x27, 0x0c, 0x42, 0x0a, 0x0a, 0x02,
	0x08, 0x01, 0x12, 0x02, 0x08, 0x08, 0x18, 0x01, 0x52, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42,
	0x79, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0xf1, 0x07, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x36, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1e, 0xb2, 0xda, 0x21, 0x1a, 0x1a, 0x18, 0x0a, 0x16, 0x6c, 0x6f, 0x67, 0x67, 0x69,
	0x6e, 0x67, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4c, 0x6f,
	0x67, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x57, 0x0a, 0x07, 0x74, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6e, 0x64, 0x42,
	0x08, 0xca, 0xc6, 0x27, 0x04, 0x62, 0x02, 0x08, 0x01, 0x52, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x12, 0x48, 0x0a, 0x0c, 0x6d, 0x69, 0x6e, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x0a, 0xca, 0xc6, 0x27, 0x06, 0x5a, 0x04, 0x32, 0x02, 0x08, 0x3c, 0x52,
	0x0b, 0x6d, 0x69, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x63, 0x0a, 0x0c,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xca, 0xc6, 0x27, 0x08, 0x2a,
	0x06, 0x3a, 0x02, 0x08, 0x40, 0x68, 0x01, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x1b, 0xca, 0xc6,
	0x27, 0x17, 0x42, 0x15, 0x0a, 0x02, 0x08, 0x01, 0x12, 0x02, 0x08, 0x19, 0x18, 0x01, 0x22, 0x09,
	0x2a, 0x07, 0x3a, 0x03, 0x08, 0x80, 0x01, 0x68, 0x01, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x1a, 0x71, 0x0a, 0x14, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x0f, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0c, 0xca, 0xc6, 0x27, 0x08, 0x2a, 0x06, 0x32, 0x00, 0x3a, 0x02, 0x08, 0x40,
	0x52, 0x0e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x22, 0x0a, 0x05, 0x72, 0x65, 0x67, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0c, 0xca, 0xc6, 0x27, 0x08, 0x2a, 0x06, 0x3a, 0x02, 0x08, 0x40, 0x68, 0x01, 0x52, 0x05, 0x72,
	0x65, 0x67, 0x65, 0x78, 0x1a, 0x85, 0x02, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x5b, 0x0a, 0x08, 0x74, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f,
	0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6e, 0x64,
	0x42, 0x0a, 0xca, 0xc6, 0x27, 0x06, 0x42, 0x04, 0x12, 0x02, 0x08, 0x08, 0x52, 0x08, 0x74, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x12, 0x68, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x08, 0xca, 0xc6,
	0x27, 0x04, 0x3a, 0x02, 0x10, 0x01, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x22, 0x2a, 0x0a, 0x08, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x0d, 0x0a, 0x09,
	0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x41,
	0x4e, 0x44, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x52, 0x10, 0x02, 0x1a, 0xac, 0x02, 0x0a,
	0x0a, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6e, 0x64, 0x12, 0x4d, 0x0a, 0x05, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x48, 0x00, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x66, 0x0a, 0x0e, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x59, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x48, 0x00, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x3a, 0x04, 0xe8,
	0xde, 0x21, 0x00, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0x68, 0x0a, 0x08, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x5c, 0x0a, 0x11, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53, 0x70, 0x65, 0x63,
	0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x10, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0xa6, 0x05, 0xea, 0x41, 0x66, 0x0a, 0x20, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x7d, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x7d, 0x2f, 0x6c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x7b, 0x6c, 0x6f, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x7d, 0x92, 0xd9, 0x21, 0x9c, 0x02, 0x0a, 0x0d, 0x6c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0d, 0x6c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x06, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x38, 0x05, 0x42, 0x74,
	0x08, 0x02, 0x12, 0x0c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x11, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x0a, 0x4c, 0x6f, 0x67, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x23, 0x0a, 0x12, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x74, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x0d, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x20, 0x74, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x42, 0x7c, 0x08, 0x03, 0x12, 0x0c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x20,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x22, 0x0a, 0x0f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x64,
	0x6f, 0x63, 0x73, 0x12, 0x0f, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x20,
	0x64, 0x6f, 0x63, 0x73, 0x12, 0x0c, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x04, 0x53, 0x70,
	0x65, 0x63, 0xaa, 0xd9, 0x21, 0x2f, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x0a, 0x0c, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0xb2, 0xdf, 0x21, 0x88, 0x01, 0x0a, 0x85, 0x01, 0x0a, 0x82, 0x01,
	0x0a, 0x0d, 0x62, 0x79, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x2d, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x7d, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x2d, 0x2f, 0x6c, 0x6f, 0x67,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2d, 0x1a, 0x34, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d,
	0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x7d, 0x2f, 0x6c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x2d, 0xda, 0x94, 0x23, 0x08, 0x12, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xc2, 0x85,
	0x2c, 0x4c, 0x22, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x0f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x64, 0x6f, 0x63, 0x73, 0x22, 0x04, 0x73, 0x70, 0x65, 0x63, 0x42, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x42, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x42, 0xad,
	0x02, 0xe8, 0xde, 0x21, 0x01, 0xd2, 0xff, 0xd0, 0x02, 0x51, 0x0a, 0x13, 0x6c, 0x6f, 0x67, 0x5f,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12,
	0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f,
	0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0xa2, 0x80, 0xd1, 0x02, 0x53,
	0x0a, 0x14, 0x6c, 0x6f, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65,
	0x6c, 0x71, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x62, 0x2e, 0x76, 0x31, 0x42, 0x11, 0x4c, 0x6f, 0x67,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x4c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f,
	0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x3b, 0x6c, 0x6f, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	edgelq_alerting_proto_v1_log_condition_proto_rawDescOnce sync.Once
	edgelq_alerting_proto_v1_log_condition_proto_rawDescData = edgelq_alerting_proto_v1_log_condition_proto_rawDesc
)

func edgelq_alerting_proto_v1_log_condition_proto_rawDescGZIP() []byte {
	edgelq_alerting_proto_v1_log_condition_proto_rawDescOnce.Do(func() {
		edgelq_alerting_proto_v1_log_condition_proto_rawDescData = protoimpl.X.CompressGZIP(edgelq_alerting_proto_v1_log_condition_proto_rawDescData)
	})
	return edgelq_alerting_proto_v1_log_condition_proto_rawDescData
}

var edgelq_alerting_proto_v1_log_condition_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var edgelq_alerting_proto_v1_log_condition_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var edgelq_alerting_proto_v1_log_condition_proto_goTypes = []interface{}{
	(LogCondition_Spec_Query_CompositeTrigger_Operator)(0), // 0: ntt.alerting.v1.LogCondition_Spec_Query_CompositeTrigger_Operator
	(*LogCondition)(nil),                                 // 1: ntt.alerting.v1.LogCondition
	(*LogCondition_Spec)(nil),                            // 2: ntt.alerting.v1.LogCondition.Spec
	(*LogCondition_Internal)(nil),                        // 3: ntt.alerting.v1.LogCondition.Internal
	(*LogCondition_Spec_Query)(nil),                      // 4: ntt.alerting.v1.LogCondition.Spec.Query
	(*LogCondition_Spec_Query_LabelTrigger)(nil),         // 5: ntt.alerting.v1.LogCondition.Spec.Query.LabelTrigger
	(*LogCondition_Spec_Query_StringPayloadTrigger)(nil), // 6: ntt.alerting.v1.LogCondition.Spec.Query.StringPayloadTrigger
	(*LogCondition_Spec_Query_CompositeTrigger)(nil),     // 7: ntt.alerting.v1.LogCondition.Spec.Query.CompositeTrigger
	(*LogCondition_Spec_Query_TriggerCnd)(nil),           // 8: ntt.alerting.v1.LogCondition.Spec.Query.TriggerCnd
	(*meta.Meta)(nil),                                    // 9: goten.types.Meta
	(*durationpb.Duration)(nil),                          // 10: google.protobuf.Duration
	(policy.Policy_Spec_ProcessingLocation)(0),           // 11: ntt.alerting.v1.Policy_Spec_ProcessingLocation
}
var edgelq_alerting_proto_v1_log_condition_proto_depIdxs = []int32{
	9,  // 0: ntt.alerting.v1.LogCondition.metadata:type_name -> goten.types.Meta
	2,  // 1: ntt.alerting.v1.LogCondition.spec:type_name -> ntt.alerting.v1.LogCondition.Spec
	3,  // 2: ntt.alerting.v1.LogCondition.internal:type_name -> ntt.alerting.v1.LogCondition.Internal
	4,  // 3: ntt.alerting.v1.LogCondition.Spec.query:type_name -> ntt.alerting.v1.LogCondition.Spec.Query
	11, // 4: ntt.alerting.v1.LogCondition.Internal.alerting_location:type_name -> ntt.alerting.v1.Policy_Spec_ProcessingLocation
	8,  // 5: ntt.alerting.v1.LogCondition.Spec.Query.trigger:type_name -> ntt.alerting.v1.LogCondition.Spec.Query.TriggerCnd
	10, // 6: ntt.alerting.v1.LogCondition.Spec.Query.min_duration:type_name -> google.protobuf.Duration
	8,  // 7: ntt.alerting.v1.LogCondition.Spec.Query.CompositeTrigger.triggers:type_name -> ntt.alerting.v1.LogCondition.Spec.Query.TriggerCnd
	0,  // 8: ntt.alerting.v1.LogCondition.Spec.Query.CompositeTrigger.operator:type_name -> ntt.alerting.v1.LogCondition_Spec_Query_CompositeTrigger_Operator
	5,  // 9: ntt.alerting.v1.LogCondition.Spec.Query.TriggerCnd.label:type_name -> ntt.alerting.v1.LogCondition.Spec.Query.LabelTrigger
	6,  // 10: ntt.alerting.v1.LogCondition.Spec.Query.TriggerCnd.string_content:type_name -> ntt.alerting.v1.LogCondition.Spec.Query.StringPayloadTrigger
	7,  // 11: ntt.alerting.v1.LogCondition.Spec.Query.TriggerCnd.composite:type_name -> ntt.alerting.v1.LogCondition.Spec.Query.CompositeTrigger
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { edgelq_alerting_proto_v1_log_condition_proto_init() }
func edgelq_alerting_proto_v1_log_condition_proto_init() {
	if edgelq_alerting_proto_v1_log_condition_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		edgelq_alerting_proto_v1_log_condition_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_log_condition_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogCondition_Spec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_log_condition_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogCondition_Internal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_log_condition_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogCondition_Spec_Query); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_log_condition_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogCondition_Spec_Query_LabelTrigger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_log_condition_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogCondition_Spec_Query_StringPayloadTrigger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_log_condition_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogCondition_Spec_Query_CompositeTrigger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_log_condition_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogCondition_Spec_Query_TriggerCnd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	edgelq_alerting_proto_v1_log_condition_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*LogCondition_Spec_Query_TriggerCnd_Label)(nil),
		(*LogCondition_Spec_Query_TriggerCnd_StringContent)(nil),
		(*LogCondition_Spec_Query_TriggerCnd_Composite)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: edgelq_alerting_proto_v1_log_condition_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           edgelq_alerting_proto_v1_log_condition_proto_goTypes,
		DependencyIndexes: edgelq_alerting_proto_v1_log_condition_proto_depIdxs,
		EnumInfos:         edgelq_alerting_proto_v1_log_condition_proto_enumTypes,
		MessageInfos:      edgelq_alerting_proto_v1_log_condition_proto_msgTypes,
	}.Build()
	edgelq_alerting_proto_v1_log_condition_proto = out.File
	edgelq_alerting_proto_v1_log_condition_proto_rawDesc = nil
	edgelq_alerting_proto_v1_log_condition_proto_goTypes = nil
	edgelq_alerting_proto_v1_log_condition_proto_depIdxs = nil
}
