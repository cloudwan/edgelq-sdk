// Code generated by protoc-gen-goten-object
// File: edgelq/alerting/proto/v1/log_condition.proto
// DO NOT EDIT!!!

package log_condition

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
	"github.com/cloudwan/goten-sdk/runtime/strcase"
)

// proto imports
import (
	rcommon "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/common"
	document "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/document"
	log_condition_template "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/log_condition_template"
	policy "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/policy"
	meta "github.com/cloudwan/goten-sdk/types/meta"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &document.Document{}
	_ = &log_condition_template.LogConditionTemplate{}
	_ = &policy.Policy{}
	_ = &rcommon.LogCndSpec{}
	_ = &fieldmaskpb.FieldMask{}
	_ = &meta.Meta{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type LogCondition_FieldPath interface {
	gotenobject.FieldPath
	Selector() LogCondition_FieldPathSelector
	Get(source *LogCondition) []interface{}
	GetSingle(source *LogCondition) (interface{}, bool)
	ClearValue(item *LogCondition)

	// Those methods build corresponding LogCondition_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) LogCondition_FieldPathValue
	WithIArrayOfValues(values interface{}) LogCondition_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) LogCondition_FieldPathArrayItemValue
}

type LogCondition_FieldPathSelector int32

const (
	LogCondition_FieldPathSelectorName           LogCondition_FieldPathSelector = 0
	LogCondition_FieldPathSelectorMetadata       LogCondition_FieldPathSelector = 1
	LogCondition_FieldPathSelectorDisplayName    LogCondition_FieldPathSelector = 2
	LogCondition_FieldPathSelectorDescription    LogCondition_FieldPathSelector = 3
	LogCondition_FieldPathSelectorSupportingDocs LogCondition_FieldPathSelector = 4
	LogCondition_FieldPathSelectorSpec           LogCondition_FieldPathSelector = 5
	LogCondition_FieldPathSelectorInternal       LogCondition_FieldPathSelector = 6
	LogCondition_FieldPathSelectorTemplateSource LogCondition_FieldPathSelector = 7
)

func (s LogCondition_FieldPathSelector) String() string {
	switch s {
	case LogCondition_FieldPathSelectorName:
		return "name"
	case LogCondition_FieldPathSelectorMetadata:
		return "metadata"
	case LogCondition_FieldPathSelectorDisplayName:
		return "display_name"
	case LogCondition_FieldPathSelectorDescription:
		return "description"
	case LogCondition_FieldPathSelectorSupportingDocs:
		return "supporting_docs"
	case LogCondition_FieldPathSelectorSpec:
		return "spec"
	case LogCondition_FieldPathSelectorInternal:
		return "internal"
	case LogCondition_FieldPathSelectorTemplateSource:
		return "template_source"
	default:
		panic(fmt.Sprintf("Invalid selector for LogCondition: %d", s))
	}
}

func BuildLogCondition_FieldPath(fp gotenobject.RawFieldPath) (LogCondition_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object LogCondition")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &LogCondition_FieldTerminalPath{selector: LogCondition_FieldPathSelectorName}, nil
		case "metadata":
			return &LogCondition_FieldTerminalPath{selector: LogCondition_FieldPathSelectorMetadata}, nil
		case "display_name", "displayName", "display-name":
			return &LogCondition_FieldTerminalPath{selector: LogCondition_FieldPathSelectorDisplayName}, nil
		case "description":
			return &LogCondition_FieldTerminalPath{selector: LogCondition_FieldPathSelectorDescription}, nil
		case "supporting_docs", "supportingDocs", "supporting-docs":
			return &LogCondition_FieldTerminalPath{selector: LogCondition_FieldPathSelectorSupportingDocs}, nil
		case "spec":
			return &LogCondition_FieldTerminalPath{selector: LogCondition_FieldPathSelectorSpec}, nil
		case "internal":
			return &LogCondition_FieldTerminalPath{selector: LogCondition_FieldPathSelectorInternal}, nil
		case "template_source", "templateSource", "template-source":
			return &LogCondition_FieldTerminalPath{selector: LogCondition_FieldPathSelectorTemplateSource}, nil
		}
	} else {
		switch fp[0] {
		case "metadata":
			if subpath, err := meta.BuildMeta_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &LogCondition_FieldSubPath{selector: LogCondition_FieldPathSelectorMetadata, subPath: subpath}, nil
			}
		case "spec":
			if subpath, err := rcommon.BuildLogCndSpec_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &LogCondition_FieldSubPath{selector: LogCondition_FieldPathSelectorSpec, subPath: subpath}, nil
			}
		case "internal":
			if subpath, err := BuildLogConditionInternal_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &LogCondition_FieldSubPath{selector: LogCondition_FieldPathSelectorInternal, subPath: subpath}, nil
			}
		case "template_source", "templateSource", "template-source":
			if subpath, err := BuildLogConditionTemplateSource_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &LogCondition_FieldSubPath{selector: LogCondition_FieldPathSelectorTemplateSource, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object LogCondition", fp)
}

func ParseLogCondition_FieldPath(rawField string) (LogCondition_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildLogCondition_FieldPath(fp)
}

func MustParseLogCondition_FieldPath(rawField string) LogCondition_FieldPath {
	fp, err := ParseLogCondition_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type LogCondition_FieldTerminalPath struct {
	selector LogCondition_FieldPathSelector
}

var _ LogCondition_FieldPath = (*LogCondition_FieldTerminalPath)(nil)

func (fp *LogCondition_FieldTerminalPath) Selector() LogCondition_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *LogCondition_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *LogCondition_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source LogCondition
func (fp *LogCondition_FieldTerminalPath) Get(source *LogCondition) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case LogCondition_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case LogCondition_FieldPathSelectorMetadata:
			if source.Metadata != nil {
				values = append(values, source.Metadata)
			}
		case LogCondition_FieldPathSelectorDisplayName:
			values = append(values, source.DisplayName)
		case LogCondition_FieldPathSelectorDescription:
			values = append(values, source.Description)
		case LogCondition_FieldPathSelectorSupportingDocs:
			for _, value := range source.GetSupportingDocs() {
				values = append(values, value)
			}
		case LogCondition_FieldPathSelectorSpec:
			if source.Spec != nil {
				values = append(values, source.Spec)
			}
		case LogCondition_FieldPathSelectorInternal:
			if source.Internal != nil {
				values = append(values, source.Internal)
			}
		case LogCondition_FieldPathSelectorTemplateSource:
			if source.TemplateSource != nil {
				values = append(values, source.TemplateSource)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for LogCondition: %d", fp.selector))
		}
	}
	return
}

func (fp *LogCondition_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*LogCondition))
}

// GetSingle returns value pointed by specific field of from source LogCondition
func (fp *LogCondition_FieldTerminalPath) GetSingle(source *LogCondition) (interface{}, bool) {
	switch fp.selector {
	case LogCondition_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case LogCondition_FieldPathSelectorMetadata:
		res := source.GetMetadata()
		return res, res != nil
	case LogCondition_FieldPathSelectorDisplayName:
		return source.GetDisplayName(), source != nil
	case LogCondition_FieldPathSelectorDescription:
		return source.GetDescription(), source != nil
	case LogCondition_FieldPathSelectorSupportingDocs:
		res := source.GetSupportingDocs()
		return res, res != nil
	case LogCondition_FieldPathSelectorSpec:
		res := source.GetSpec()
		return res, res != nil
	case LogCondition_FieldPathSelectorInternal:
		res := source.GetInternal()
		return res, res != nil
	case LogCondition_FieldPathSelectorTemplateSource:
		res := source.GetTemplateSource()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for LogCondition: %d", fp.selector))
	}
}

func (fp *LogCondition_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*LogCondition))
}

// GetDefault returns a default value of the field type
func (fp *LogCondition_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case LogCondition_FieldPathSelectorName:
		return (*Name)(nil)
	case LogCondition_FieldPathSelectorMetadata:
		return (*meta.Meta)(nil)
	case LogCondition_FieldPathSelectorDisplayName:
		return ""
	case LogCondition_FieldPathSelectorDescription:
		return ""
	case LogCondition_FieldPathSelectorSupportingDocs:
		return ([]*document.Reference)(nil)
	case LogCondition_FieldPathSelectorSpec:
		return (*rcommon.LogCndSpec)(nil)
	case LogCondition_FieldPathSelectorInternal:
		return (*LogCondition_Internal)(nil)
	case LogCondition_FieldPathSelectorTemplateSource:
		return (*LogCondition_TemplateSource)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for LogCondition: %d", fp.selector))
	}
}

func (fp *LogCondition_FieldTerminalPath) ClearValue(item *LogCondition) {
	if item != nil {
		switch fp.selector {
		case LogCondition_FieldPathSelectorName:
			item.Name = nil
		case LogCondition_FieldPathSelectorMetadata:
			item.Metadata = nil
		case LogCondition_FieldPathSelectorDisplayName:
			item.DisplayName = ""
		case LogCondition_FieldPathSelectorDescription:
			item.Description = ""
		case LogCondition_FieldPathSelectorSupportingDocs:
			item.SupportingDocs = nil
		case LogCondition_FieldPathSelectorSpec:
			item.Spec = nil
		case LogCondition_FieldPathSelectorInternal:
			item.Internal = nil
		case LogCondition_FieldPathSelectorTemplateSource:
			item.TemplateSource = nil
		default:
			panic(fmt.Sprintf("Invalid selector for LogCondition: %d", fp.selector))
		}
	}
}

func (fp *LogCondition_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*LogCondition))
}

// IsLeaf - whether field path is holds simple value
func (fp *LogCondition_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == LogCondition_FieldPathSelectorName ||
		fp.selector == LogCondition_FieldPathSelectorDisplayName ||
		fp.selector == LogCondition_FieldPathSelectorDescription ||
		fp.selector == LogCondition_FieldPathSelectorSupportingDocs
}

func (fp *LogCondition_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *LogCondition_FieldTerminalPath) WithIValue(value interface{}) LogCondition_FieldPathValue {
	switch fp.selector {
	case LogCondition_FieldPathSelectorName:
		return &LogCondition_FieldTerminalPathValue{LogCondition_FieldTerminalPath: *fp, value: value.(*Name)}
	case LogCondition_FieldPathSelectorMetadata:
		return &LogCondition_FieldTerminalPathValue{LogCondition_FieldTerminalPath: *fp, value: value.(*meta.Meta)}
	case LogCondition_FieldPathSelectorDisplayName:
		return &LogCondition_FieldTerminalPathValue{LogCondition_FieldTerminalPath: *fp, value: value.(string)}
	case LogCondition_FieldPathSelectorDescription:
		return &LogCondition_FieldTerminalPathValue{LogCondition_FieldTerminalPath: *fp, value: value.(string)}
	case LogCondition_FieldPathSelectorSupportingDocs:
		return &LogCondition_FieldTerminalPathValue{LogCondition_FieldTerminalPath: *fp, value: value.([]*document.Reference)}
	case LogCondition_FieldPathSelectorSpec:
		return &LogCondition_FieldTerminalPathValue{LogCondition_FieldTerminalPath: *fp, value: value.(*rcommon.LogCndSpec)}
	case LogCondition_FieldPathSelectorInternal:
		return &LogCondition_FieldTerminalPathValue{LogCondition_FieldTerminalPath: *fp, value: value.(*LogCondition_Internal)}
	case LogCondition_FieldPathSelectorTemplateSource:
		return &LogCondition_FieldTerminalPathValue{LogCondition_FieldTerminalPath: *fp, value: value.(*LogCondition_TemplateSource)}
	default:
		panic(fmt.Sprintf("Invalid selector for LogCondition: %d", fp.selector))
	}
}

func (fp *LogCondition_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *LogCondition_FieldTerminalPath) WithIArrayOfValues(values interface{}) LogCondition_FieldPathArrayOfValues {
	fpaov := &LogCondition_FieldTerminalPathArrayOfValues{LogCondition_FieldTerminalPath: *fp}
	switch fp.selector {
	case LogCondition_FieldPathSelectorName:
		return &LogCondition_FieldTerminalPathArrayOfValues{LogCondition_FieldTerminalPath: *fp, values: values.([]*Name)}
	case LogCondition_FieldPathSelectorMetadata:
		return &LogCondition_FieldTerminalPathArrayOfValues{LogCondition_FieldTerminalPath: *fp, values: values.([]*meta.Meta)}
	case LogCondition_FieldPathSelectorDisplayName:
		return &LogCondition_FieldTerminalPathArrayOfValues{LogCondition_FieldTerminalPath: *fp, values: values.([]string)}
	case LogCondition_FieldPathSelectorDescription:
		return &LogCondition_FieldTerminalPathArrayOfValues{LogCondition_FieldTerminalPath: *fp, values: values.([]string)}
	case LogCondition_FieldPathSelectorSupportingDocs:
		return &LogCondition_FieldTerminalPathArrayOfValues{LogCondition_FieldTerminalPath: *fp, values: values.([][]*document.Reference)}
	case LogCondition_FieldPathSelectorSpec:
		return &LogCondition_FieldTerminalPathArrayOfValues{LogCondition_FieldTerminalPath: *fp, values: values.([]*rcommon.LogCndSpec)}
	case LogCondition_FieldPathSelectorInternal:
		return &LogCondition_FieldTerminalPathArrayOfValues{LogCondition_FieldTerminalPath: *fp, values: values.([]*LogCondition_Internal)}
	case LogCondition_FieldPathSelectorTemplateSource:
		return &LogCondition_FieldTerminalPathArrayOfValues{LogCondition_FieldTerminalPath: *fp, values: values.([]*LogCondition_TemplateSource)}
	default:
		panic(fmt.Sprintf("Invalid selector for LogCondition: %d", fp.selector))
	}
	return fpaov
}

func (fp *LogCondition_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *LogCondition_FieldTerminalPath) WithIArrayItemValue(value interface{}) LogCondition_FieldPathArrayItemValue {
	switch fp.selector {
	case LogCondition_FieldPathSelectorSupportingDocs:
		return &LogCondition_FieldTerminalPathArrayItemValue{LogCondition_FieldTerminalPath: *fp, value: value.(*document.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for LogCondition: %d", fp.selector))
	}
}

func (fp *LogCondition_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type LogCondition_FieldSubPath struct {
	selector LogCondition_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ LogCondition_FieldPath = (*LogCondition_FieldSubPath)(nil)

func (fps *LogCondition_FieldSubPath) Selector() LogCondition_FieldPathSelector {
	return fps.selector
}
func (fps *LogCondition_FieldSubPath) AsMetadataSubPath() (meta.Meta_FieldPath, bool) {
	res, ok := fps.subPath.(meta.Meta_FieldPath)
	return res, ok
}
func (fps *LogCondition_FieldSubPath) AsSpecSubPath() (rcommon.LogCndSpec_FieldPath, bool) {
	res, ok := fps.subPath.(rcommon.LogCndSpec_FieldPath)
	return res, ok
}
func (fps *LogCondition_FieldSubPath) AsInternalSubPath() (LogConditionInternal_FieldPath, bool) {
	res, ok := fps.subPath.(LogConditionInternal_FieldPath)
	return res, ok
}
func (fps *LogCondition_FieldSubPath) AsTemplateSourceSubPath() (LogConditionTemplateSource_FieldPath, bool) {
	res, ok := fps.subPath.(LogConditionTemplateSource_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *LogCondition_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *LogCondition_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source LogCondition
func (fps *LogCondition_FieldSubPath) Get(source *LogCondition) (values []interface{}) {
	switch fps.selector {
	case LogCondition_FieldPathSelectorMetadata:
		values = append(values, fps.subPath.GetRaw(source.GetMetadata())...)
	case LogCondition_FieldPathSelectorSpec:
		values = append(values, fps.subPath.GetRaw(source.GetSpec())...)
	case LogCondition_FieldPathSelectorInternal:
		values = append(values, fps.subPath.GetRaw(source.GetInternal())...)
	case LogCondition_FieldPathSelectorTemplateSource:
		values = append(values, fps.subPath.GetRaw(source.GetTemplateSource())...)
	default:
		panic(fmt.Sprintf("Invalid selector for LogCondition: %d", fps.selector))
	}
	return
}

func (fps *LogCondition_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*LogCondition))
}

// GetSingle returns value of selected field from source LogCondition
func (fps *LogCondition_FieldSubPath) GetSingle(source *LogCondition) (interface{}, bool) {
	switch fps.selector {
	case LogCondition_FieldPathSelectorMetadata:
		if source.GetMetadata() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetMetadata())
	case LogCondition_FieldPathSelectorSpec:
		if source.GetSpec() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetSpec())
	case LogCondition_FieldPathSelectorInternal:
		if source.GetInternal() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetInternal())
	case LogCondition_FieldPathSelectorTemplateSource:
		if source.GetTemplateSource() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetTemplateSource())
	default:
		panic(fmt.Sprintf("Invalid selector for LogCondition: %d", fps.selector))
	}
}

func (fps *LogCondition_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*LogCondition))
}

// GetDefault returns a default value of the field type
func (fps *LogCondition_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *LogCondition_FieldSubPath) ClearValue(item *LogCondition) {
	if item != nil {
		switch fps.selector {
		case LogCondition_FieldPathSelectorMetadata:
			fps.subPath.ClearValueRaw(item.Metadata)
		case LogCondition_FieldPathSelectorSpec:
			fps.subPath.ClearValueRaw(item.Spec)
		case LogCondition_FieldPathSelectorInternal:
			fps.subPath.ClearValueRaw(item.Internal)
		case LogCondition_FieldPathSelectorTemplateSource:
			fps.subPath.ClearValueRaw(item.TemplateSource)
		default:
			panic(fmt.Sprintf("Invalid selector for LogCondition: %d", fps.selector))
		}
	}
}

func (fps *LogCondition_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*LogCondition))
}

// IsLeaf - whether field path is holds simple value
func (fps *LogCondition_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *LogCondition_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&LogCondition_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *LogCondition_FieldSubPath) WithIValue(value interface{}) LogCondition_FieldPathValue {
	return &LogCondition_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *LogCondition_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *LogCondition_FieldSubPath) WithIArrayOfValues(values interface{}) LogCondition_FieldPathArrayOfValues {
	return &LogCondition_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *LogCondition_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *LogCondition_FieldSubPath) WithIArrayItemValue(value interface{}) LogCondition_FieldPathArrayItemValue {
	return &LogCondition_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *LogCondition_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// LogCondition_FieldPathValue allows storing values for LogCondition fields according to their type
type LogCondition_FieldPathValue interface {
	LogCondition_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **LogCondition)
	CompareWith(*LogCondition) (cmp int, comparable bool)
}

func ParseLogCondition_FieldPathValue(pathStr, valueStr string) (LogCondition_FieldPathValue, error) {
	fp, err := ParseLogCondition_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing LogCondition field path value from %s: %v", valueStr, err)
	}
	return fpv.(LogCondition_FieldPathValue), nil
}

func MustParseLogCondition_FieldPathValue(pathStr, valueStr string) LogCondition_FieldPathValue {
	fpv, err := ParseLogCondition_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type LogCondition_FieldTerminalPathValue struct {
	LogCondition_FieldTerminalPath
	value interface{}
}

var _ LogCondition_FieldPathValue = (*LogCondition_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'LogCondition' as interface{}
func (fpv *LogCondition_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *LogCondition_FieldTerminalPathValue) AsNameValue() (*Name, bool) {
	res, ok := fpv.value.(*Name)
	return res, ok
}
func (fpv *LogCondition_FieldTerminalPathValue) AsMetadataValue() (*meta.Meta, bool) {
	res, ok := fpv.value.(*meta.Meta)
	return res, ok
}
func (fpv *LogCondition_FieldTerminalPathValue) AsDisplayNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *LogCondition_FieldTerminalPathValue) AsDescriptionValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *LogCondition_FieldTerminalPathValue) AsSupportingDocsValue() ([]*document.Reference, bool) {
	res, ok := fpv.value.([]*document.Reference)
	return res, ok
}
func (fpv *LogCondition_FieldTerminalPathValue) AsSpecValue() (*rcommon.LogCndSpec, bool) {
	res, ok := fpv.value.(*rcommon.LogCndSpec)
	return res, ok
}
func (fpv *LogCondition_FieldTerminalPathValue) AsInternalValue() (*LogCondition_Internal, bool) {
	res, ok := fpv.value.(*LogCondition_Internal)
	return res, ok
}
func (fpv *LogCondition_FieldTerminalPathValue) AsTemplateSourceValue() (*LogCondition_TemplateSource, bool) {
	res, ok := fpv.value.(*LogCondition_TemplateSource)
	return res, ok
}

// SetTo stores value for selected field for object LogCondition
func (fpv *LogCondition_FieldTerminalPathValue) SetTo(target **LogCondition) {
	if *target == nil {
		*target = new(LogCondition)
	}
	switch fpv.selector {
	case LogCondition_FieldPathSelectorName:
		(*target).Name = fpv.value.(*Name)
	case LogCondition_FieldPathSelectorMetadata:
		(*target).Metadata = fpv.value.(*meta.Meta)
	case LogCondition_FieldPathSelectorDisplayName:
		(*target).DisplayName = fpv.value.(string)
	case LogCondition_FieldPathSelectorDescription:
		(*target).Description = fpv.value.(string)
	case LogCondition_FieldPathSelectorSupportingDocs:
		(*target).SupportingDocs = fpv.value.([]*document.Reference)
	case LogCondition_FieldPathSelectorSpec:
		(*target).Spec = fpv.value.(*rcommon.LogCndSpec)
	case LogCondition_FieldPathSelectorInternal:
		(*target).Internal = fpv.value.(*LogCondition_Internal)
	case LogCondition_FieldPathSelectorTemplateSource:
		(*target).TemplateSource = fpv.value.(*LogCondition_TemplateSource)
	default:
		panic(fmt.Sprintf("Invalid selector for LogCondition: %d", fpv.selector))
	}
}

func (fpv *LogCondition_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*LogCondition)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'LogCondition_FieldTerminalPathValue' with the value under path in 'LogCondition'.
func (fpv *LogCondition_FieldTerminalPathValue) CompareWith(source *LogCondition) (int, bool) {
	switch fpv.selector {
	case LogCondition_FieldPathSelectorName:
		leftValue := fpv.value.(*Name)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case LogCondition_FieldPathSelectorMetadata:
		return 0, false
	case LogCondition_FieldPathSelectorDisplayName:
		leftValue := fpv.value.(string)
		rightValue := source.GetDisplayName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case LogCondition_FieldPathSelectorDescription:
		leftValue := fpv.value.(string)
		rightValue := source.GetDescription()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case LogCondition_FieldPathSelectorSupportingDocs:
		return 0, false
	case LogCondition_FieldPathSelectorSpec:
		return 0, false
	case LogCondition_FieldPathSelectorInternal:
		return 0, false
	case LogCondition_FieldPathSelectorTemplateSource:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for LogCondition: %d", fpv.selector))
	}
}

func (fpv *LogCondition_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*LogCondition))
}

type LogCondition_FieldSubPathValue struct {
	LogCondition_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ LogCondition_FieldPathValue = (*LogCondition_FieldSubPathValue)(nil)

func (fpvs *LogCondition_FieldSubPathValue) AsMetadataPathValue() (meta.Meta_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(meta.Meta_FieldPathValue)
	return res, ok
}
func (fpvs *LogCondition_FieldSubPathValue) AsSpecPathValue() (rcommon.LogCndSpec_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(rcommon.LogCndSpec_FieldPathValue)
	return res, ok
}
func (fpvs *LogCondition_FieldSubPathValue) AsInternalPathValue() (LogConditionInternal_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(LogConditionInternal_FieldPathValue)
	return res, ok
}
func (fpvs *LogCondition_FieldSubPathValue) AsTemplateSourcePathValue() (LogConditionTemplateSource_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(LogConditionTemplateSource_FieldPathValue)
	return res, ok
}

func (fpvs *LogCondition_FieldSubPathValue) SetTo(target **LogCondition) {
	if *target == nil {
		*target = new(LogCondition)
	}
	switch fpvs.Selector() {
	case LogCondition_FieldPathSelectorMetadata:
		fpvs.subPathValue.(meta.Meta_FieldPathValue).SetTo(&(*target).Metadata)
	case LogCondition_FieldPathSelectorSpec:
		fpvs.subPathValue.(rcommon.LogCndSpec_FieldPathValue).SetTo(&(*target).Spec)
	case LogCondition_FieldPathSelectorInternal:
		fpvs.subPathValue.(LogConditionInternal_FieldPathValue).SetTo(&(*target).Internal)
	case LogCondition_FieldPathSelectorTemplateSource:
		fpvs.subPathValue.(LogConditionTemplateSource_FieldPathValue).SetTo(&(*target).TemplateSource)
	default:
		panic(fmt.Sprintf("Invalid selector for LogCondition: %d", fpvs.Selector()))
	}
}

func (fpvs *LogCondition_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*LogCondition)
	fpvs.SetTo(&typedObject)
}

func (fpvs *LogCondition_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *LogCondition_FieldSubPathValue) CompareWith(source *LogCondition) (int, bool) {
	switch fpvs.Selector() {
	case LogCondition_FieldPathSelectorMetadata:
		return fpvs.subPathValue.(meta.Meta_FieldPathValue).CompareWith(source.GetMetadata())
	case LogCondition_FieldPathSelectorSpec:
		return fpvs.subPathValue.(rcommon.LogCndSpec_FieldPathValue).CompareWith(source.GetSpec())
	case LogCondition_FieldPathSelectorInternal:
		return fpvs.subPathValue.(LogConditionInternal_FieldPathValue).CompareWith(source.GetInternal())
	case LogCondition_FieldPathSelectorTemplateSource:
		return fpvs.subPathValue.(LogConditionTemplateSource_FieldPathValue).CompareWith(source.GetTemplateSource())
	default:
		panic(fmt.Sprintf("Invalid selector for LogCondition: %d", fpvs.Selector()))
	}
}

func (fpvs *LogCondition_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*LogCondition))
}

// LogCondition_FieldPathArrayItemValue allows storing single item in Path-specific values for LogCondition according to their type
// Present only for array (repeated) types.
type LogCondition_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	LogCondition_FieldPath
	ContainsValue(*LogCondition) bool
}

// ParseLogCondition_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseLogCondition_FieldPathArrayItemValue(pathStr, valueStr string) (LogCondition_FieldPathArrayItemValue, error) {
	fp, err := ParseLogCondition_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing LogCondition field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(LogCondition_FieldPathArrayItemValue), nil
}

func MustParseLogCondition_FieldPathArrayItemValue(pathStr, valueStr string) LogCondition_FieldPathArrayItemValue {
	fpaiv, err := ParseLogCondition_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type LogCondition_FieldTerminalPathArrayItemValue struct {
	LogCondition_FieldTerminalPath
	value interface{}
}

var _ LogCondition_FieldPathArrayItemValue = (*LogCondition_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object LogCondition as interface{}
func (fpaiv *LogCondition_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *LogCondition_FieldTerminalPathArrayItemValue) AsSupportingDocsItemValue() (*document.Reference, bool) {
	res, ok := fpaiv.value.(*document.Reference)
	return res, ok
}

func (fpaiv *LogCondition_FieldTerminalPathArrayItemValue) GetSingle(source *LogCondition) (interface{}, bool) {
	return nil, false
}

func (fpaiv *LogCondition_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*LogCondition))
}

// Contains returns a boolean indicating if value that is being held is present in given 'LogCondition'
func (fpaiv *LogCondition_FieldTerminalPathArrayItemValue) ContainsValue(source *LogCondition) bool {
	slice := fpaiv.LogCondition_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type LogCondition_FieldSubPathArrayItemValue struct {
	LogCondition_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *LogCondition_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *LogCondition_FieldSubPathArrayItemValue) AsMetadataPathItemValue() (meta.Meta_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(meta.Meta_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *LogCondition_FieldSubPathArrayItemValue) AsSpecPathItemValue() (rcommon.LogCndSpec_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(rcommon.LogCndSpec_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *LogCondition_FieldSubPathArrayItemValue) AsInternalPathItemValue() (LogConditionInternal_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(LogConditionInternal_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *LogCondition_FieldSubPathArrayItemValue) AsTemplateSourcePathItemValue() (LogConditionTemplateSource_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(LogConditionTemplateSource_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'LogCondition'
func (fpaivs *LogCondition_FieldSubPathArrayItemValue) ContainsValue(source *LogCondition) bool {
	switch fpaivs.Selector() {
	case LogCondition_FieldPathSelectorMetadata:
		return fpaivs.subPathItemValue.(meta.Meta_FieldPathArrayItemValue).ContainsValue(source.GetMetadata())
	case LogCondition_FieldPathSelectorSpec:
		return fpaivs.subPathItemValue.(rcommon.LogCndSpec_FieldPathArrayItemValue).ContainsValue(source.GetSpec())
	case LogCondition_FieldPathSelectorInternal:
		return fpaivs.subPathItemValue.(LogConditionInternal_FieldPathArrayItemValue).ContainsValue(source.GetInternal())
	case LogCondition_FieldPathSelectorTemplateSource:
		return fpaivs.subPathItemValue.(LogConditionTemplateSource_FieldPathArrayItemValue).ContainsValue(source.GetTemplateSource())
	default:
		panic(fmt.Sprintf("Invalid selector for LogCondition: %d", fpaivs.Selector()))
	}
}

// LogCondition_FieldPathArrayOfValues allows storing slice of values for LogCondition fields according to their type
type LogCondition_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	LogCondition_FieldPath
}

func ParseLogCondition_FieldPathArrayOfValues(pathStr, valuesStr string) (LogCondition_FieldPathArrayOfValues, error) {
	fp, err := ParseLogCondition_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing LogCondition field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(LogCondition_FieldPathArrayOfValues), nil
}

func MustParseLogCondition_FieldPathArrayOfValues(pathStr, valuesStr string) LogCondition_FieldPathArrayOfValues {
	fpaov, err := ParseLogCondition_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type LogCondition_FieldTerminalPathArrayOfValues struct {
	LogCondition_FieldTerminalPath
	values interface{}
}

var _ LogCondition_FieldPathArrayOfValues = (*LogCondition_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *LogCondition_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case LogCondition_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*Name) {
			values = append(values, v)
		}
	case LogCondition_FieldPathSelectorMetadata:
		for _, v := range fpaov.values.([]*meta.Meta) {
			values = append(values, v)
		}
	case LogCondition_FieldPathSelectorDisplayName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case LogCondition_FieldPathSelectorDescription:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case LogCondition_FieldPathSelectorSupportingDocs:
		for _, v := range fpaov.values.([][]*document.Reference) {
			values = append(values, v)
		}
	case LogCondition_FieldPathSelectorSpec:
		for _, v := range fpaov.values.([]*rcommon.LogCndSpec) {
			values = append(values, v)
		}
	case LogCondition_FieldPathSelectorInternal:
		for _, v := range fpaov.values.([]*LogCondition_Internal) {
			values = append(values, v)
		}
	case LogCondition_FieldPathSelectorTemplateSource:
		for _, v := range fpaov.values.([]*LogCondition_TemplateSource) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *LogCondition_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*Name, bool) {
	res, ok := fpaov.values.([]*Name)
	return res, ok
}
func (fpaov *LogCondition_FieldTerminalPathArrayOfValues) AsMetadataArrayOfValues() ([]*meta.Meta, bool) {
	res, ok := fpaov.values.([]*meta.Meta)
	return res, ok
}
func (fpaov *LogCondition_FieldTerminalPathArrayOfValues) AsDisplayNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *LogCondition_FieldTerminalPathArrayOfValues) AsDescriptionArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *LogCondition_FieldTerminalPathArrayOfValues) AsSupportingDocsArrayOfValues() ([][]*document.Reference, bool) {
	res, ok := fpaov.values.([][]*document.Reference)
	return res, ok
}
func (fpaov *LogCondition_FieldTerminalPathArrayOfValues) AsSpecArrayOfValues() ([]*rcommon.LogCndSpec, bool) {
	res, ok := fpaov.values.([]*rcommon.LogCndSpec)
	return res, ok
}
func (fpaov *LogCondition_FieldTerminalPathArrayOfValues) AsInternalArrayOfValues() ([]*LogCondition_Internal, bool) {
	res, ok := fpaov.values.([]*LogCondition_Internal)
	return res, ok
}
func (fpaov *LogCondition_FieldTerminalPathArrayOfValues) AsTemplateSourceArrayOfValues() ([]*LogCondition_TemplateSource, bool) {
	res, ok := fpaov.values.([]*LogCondition_TemplateSource)
	return res, ok
}

type LogCondition_FieldSubPathArrayOfValues struct {
	LogCondition_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ LogCondition_FieldPathArrayOfValues = (*LogCondition_FieldSubPathArrayOfValues)(nil)

func (fpsaov *LogCondition_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *LogCondition_FieldSubPathArrayOfValues) AsMetadataPathArrayOfValues() (meta.Meta_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(meta.Meta_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *LogCondition_FieldSubPathArrayOfValues) AsSpecPathArrayOfValues() (rcommon.LogCndSpec_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(rcommon.LogCndSpec_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *LogCondition_FieldSubPathArrayOfValues) AsInternalPathArrayOfValues() (LogConditionInternal_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(LogConditionInternal_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *LogCondition_FieldSubPathArrayOfValues) AsTemplateSourcePathArrayOfValues() (LogConditionTemplateSource_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(LogConditionTemplateSource_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type LogConditionInternal_FieldPath interface {
	gotenobject.FieldPath
	Selector() LogConditionInternal_FieldPathSelector
	Get(source *LogCondition_Internal) []interface{}
	GetSingle(source *LogCondition_Internal) (interface{}, bool)
	ClearValue(item *LogCondition_Internal)

	// Those methods build corresponding LogConditionInternal_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) LogConditionInternal_FieldPathValue
	WithIArrayOfValues(values interface{}) LogConditionInternal_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) LogConditionInternal_FieldPathArrayItemValue
}

type LogConditionInternal_FieldPathSelector int32

const (
	LogConditionInternal_FieldPathSelectorAlertingLocation LogConditionInternal_FieldPathSelector = 0
)

func (s LogConditionInternal_FieldPathSelector) String() string {
	switch s {
	case LogConditionInternal_FieldPathSelectorAlertingLocation:
		return "alerting_location"
	default:
		panic(fmt.Sprintf("Invalid selector for LogCondition_Internal: %d", s))
	}
}

func BuildLogConditionInternal_FieldPath(fp gotenobject.RawFieldPath) (LogConditionInternal_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object LogCondition_Internal")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "alerting_location", "alertingLocation", "alerting-location":
			return &LogConditionInternal_FieldTerminalPath{selector: LogConditionInternal_FieldPathSelectorAlertingLocation}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object LogCondition_Internal", fp)
}

func ParseLogConditionInternal_FieldPath(rawField string) (LogConditionInternal_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildLogConditionInternal_FieldPath(fp)
}

func MustParseLogConditionInternal_FieldPath(rawField string) LogConditionInternal_FieldPath {
	fp, err := ParseLogConditionInternal_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type LogConditionInternal_FieldTerminalPath struct {
	selector LogConditionInternal_FieldPathSelector
}

var _ LogConditionInternal_FieldPath = (*LogConditionInternal_FieldTerminalPath)(nil)

func (fp *LogConditionInternal_FieldTerminalPath) Selector() LogConditionInternal_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *LogConditionInternal_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *LogConditionInternal_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source LogCondition_Internal
func (fp *LogConditionInternal_FieldTerminalPath) Get(source *LogCondition_Internal) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case LogConditionInternal_FieldPathSelectorAlertingLocation:
			values = append(values, source.AlertingLocation)
		default:
			panic(fmt.Sprintf("Invalid selector for LogCondition_Internal: %d", fp.selector))
		}
	}
	return
}

func (fp *LogConditionInternal_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*LogCondition_Internal))
}

// GetSingle returns value pointed by specific field of from source LogCondition_Internal
func (fp *LogConditionInternal_FieldTerminalPath) GetSingle(source *LogCondition_Internal) (interface{}, bool) {
	switch fp.selector {
	case LogConditionInternal_FieldPathSelectorAlertingLocation:
		return source.GetAlertingLocation(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for LogCondition_Internal: %d", fp.selector))
	}
}

func (fp *LogConditionInternal_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*LogCondition_Internal))
}

// GetDefault returns a default value of the field type
func (fp *LogConditionInternal_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case LogConditionInternal_FieldPathSelectorAlertingLocation:
		return rcommon.PolicySpec_UNDEFINED
	default:
		panic(fmt.Sprintf("Invalid selector for LogCondition_Internal: %d", fp.selector))
	}
}

func (fp *LogConditionInternal_FieldTerminalPath) ClearValue(item *LogCondition_Internal) {
	if item != nil {
		switch fp.selector {
		case LogConditionInternal_FieldPathSelectorAlertingLocation:
			item.AlertingLocation = rcommon.PolicySpec_UNDEFINED
		default:
			panic(fmt.Sprintf("Invalid selector for LogCondition_Internal: %d", fp.selector))
		}
	}
}

func (fp *LogConditionInternal_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*LogCondition_Internal))
}

// IsLeaf - whether field path is holds simple value
func (fp *LogConditionInternal_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == LogConditionInternal_FieldPathSelectorAlertingLocation
}

func (fp *LogConditionInternal_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *LogConditionInternal_FieldTerminalPath) WithIValue(value interface{}) LogConditionInternal_FieldPathValue {
	switch fp.selector {
	case LogConditionInternal_FieldPathSelectorAlertingLocation:
		return &LogConditionInternal_FieldTerminalPathValue{LogConditionInternal_FieldTerminalPath: *fp, value: value.(rcommon.PolicySpec_ProcessingLocation)}
	default:
		panic(fmt.Sprintf("Invalid selector for LogCondition_Internal: %d", fp.selector))
	}
}

func (fp *LogConditionInternal_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *LogConditionInternal_FieldTerminalPath) WithIArrayOfValues(values interface{}) LogConditionInternal_FieldPathArrayOfValues {
	fpaov := &LogConditionInternal_FieldTerminalPathArrayOfValues{LogConditionInternal_FieldTerminalPath: *fp}
	switch fp.selector {
	case LogConditionInternal_FieldPathSelectorAlertingLocation:
		return &LogConditionInternal_FieldTerminalPathArrayOfValues{LogConditionInternal_FieldTerminalPath: *fp, values: values.([]rcommon.PolicySpec_ProcessingLocation)}
	default:
		panic(fmt.Sprintf("Invalid selector for LogCondition_Internal: %d", fp.selector))
	}
	return fpaov
}

func (fp *LogConditionInternal_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *LogConditionInternal_FieldTerminalPath) WithIArrayItemValue(value interface{}) LogConditionInternal_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for LogCondition_Internal: %d", fp.selector))
	}
}

func (fp *LogConditionInternal_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// LogConditionInternal_FieldPathValue allows storing values for Internal fields according to their type
type LogConditionInternal_FieldPathValue interface {
	LogConditionInternal_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **LogCondition_Internal)
	CompareWith(*LogCondition_Internal) (cmp int, comparable bool)
}

func ParseLogConditionInternal_FieldPathValue(pathStr, valueStr string) (LogConditionInternal_FieldPathValue, error) {
	fp, err := ParseLogConditionInternal_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Internal field path value from %s: %v", valueStr, err)
	}
	return fpv.(LogConditionInternal_FieldPathValue), nil
}

func MustParseLogConditionInternal_FieldPathValue(pathStr, valueStr string) LogConditionInternal_FieldPathValue {
	fpv, err := ParseLogConditionInternal_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type LogConditionInternal_FieldTerminalPathValue struct {
	LogConditionInternal_FieldTerminalPath
	value interface{}
}

var _ LogConditionInternal_FieldPathValue = (*LogConditionInternal_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Internal' as interface{}
func (fpv *LogConditionInternal_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *LogConditionInternal_FieldTerminalPathValue) AsAlertingLocationValue() (rcommon.PolicySpec_ProcessingLocation, bool) {
	res, ok := fpv.value.(rcommon.PolicySpec_ProcessingLocation)
	return res, ok
}

// SetTo stores value for selected field for object Internal
func (fpv *LogConditionInternal_FieldTerminalPathValue) SetTo(target **LogCondition_Internal) {
	if *target == nil {
		*target = new(LogCondition_Internal)
	}
	switch fpv.selector {
	case LogConditionInternal_FieldPathSelectorAlertingLocation:
		(*target).AlertingLocation = fpv.value.(rcommon.PolicySpec_ProcessingLocation)
	default:
		panic(fmt.Sprintf("Invalid selector for LogCondition_Internal: %d", fpv.selector))
	}
}

func (fpv *LogConditionInternal_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*LogCondition_Internal)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'LogConditionInternal_FieldTerminalPathValue' with the value under path in 'LogCondition_Internal'.
func (fpv *LogConditionInternal_FieldTerminalPathValue) CompareWith(source *LogCondition_Internal) (int, bool) {
	switch fpv.selector {
	case LogConditionInternal_FieldPathSelectorAlertingLocation:
		leftValue := fpv.value.(rcommon.PolicySpec_ProcessingLocation)
		rightValue := source.GetAlertingLocation()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for LogCondition_Internal: %d", fpv.selector))
	}
}

func (fpv *LogConditionInternal_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*LogCondition_Internal))
}

// LogConditionInternal_FieldPathArrayItemValue allows storing single item in Path-specific values for Internal according to their type
// Present only for array (repeated) types.
type LogConditionInternal_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	LogConditionInternal_FieldPath
	ContainsValue(*LogCondition_Internal) bool
}

// ParseLogConditionInternal_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseLogConditionInternal_FieldPathArrayItemValue(pathStr, valueStr string) (LogConditionInternal_FieldPathArrayItemValue, error) {
	fp, err := ParseLogConditionInternal_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Internal field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(LogConditionInternal_FieldPathArrayItemValue), nil
}

func MustParseLogConditionInternal_FieldPathArrayItemValue(pathStr, valueStr string) LogConditionInternal_FieldPathArrayItemValue {
	fpaiv, err := ParseLogConditionInternal_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type LogConditionInternal_FieldTerminalPathArrayItemValue struct {
	LogConditionInternal_FieldTerminalPath
	value interface{}
}

var _ LogConditionInternal_FieldPathArrayItemValue = (*LogConditionInternal_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object LogCondition_Internal as interface{}
func (fpaiv *LogConditionInternal_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *LogConditionInternal_FieldTerminalPathArrayItemValue) GetSingle(source *LogCondition_Internal) (interface{}, bool) {
	return nil, false
}

func (fpaiv *LogConditionInternal_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*LogCondition_Internal))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Internal'
func (fpaiv *LogConditionInternal_FieldTerminalPathArrayItemValue) ContainsValue(source *LogCondition_Internal) bool {
	slice := fpaiv.LogConditionInternal_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// LogConditionInternal_FieldPathArrayOfValues allows storing slice of values for Internal fields according to their type
type LogConditionInternal_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	LogConditionInternal_FieldPath
}

func ParseLogConditionInternal_FieldPathArrayOfValues(pathStr, valuesStr string) (LogConditionInternal_FieldPathArrayOfValues, error) {
	fp, err := ParseLogConditionInternal_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Internal field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(LogConditionInternal_FieldPathArrayOfValues), nil
}

func MustParseLogConditionInternal_FieldPathArrayOfValues(pathStr, valuesStr string) LogConditionInternal_FieldPathArrayOfValues {
	fpaov, err := ParseLogConditionInternal_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type LogConditionInternal_FieldTerminalPathArrayOfValues struct {
	LogConditionInternal_FieldTerminalPath
	values interface{}
}

var _ LogConditionInternal_FieldPathArrayOfValues = (*LogConditionInternal_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *LogConditionInternal_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case LogConditionInternal_FieldPathSelectorAlertingLocation:
		for _, v := range fpaov.values.([]rcommon.PolicySpec_ProcessingLocation) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *LogConditionInternal_FieldTerminalPathArrayOfValues) AsAlertingLocationArrayOfValues() ([]rcommon.PolicySpec_ProcessingLocation, bool) {
	res, ok := fpaov.values.([]rcommon.PolicySpec_ProcessingLocation)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type LogConditionTemplateSource_FieldPath interface {
	gotenobject.FieldPath
	Selector() LogConditionTemplateSource_FieldPathSelector
	Get(source *LogCondition_TemplateSource) []interface{}
	GetSingle(source *LogCondition_TemplateSource) (interface{}, bool)
	ClearValue(item *LogCondition_TemplateSource)

	// Those methods build corresponding LogConditionTemplateSource_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) LogConditionTemplateSource_FieldPathValue
	WithIArrayOfValues(values interface{}) LogConditionTemplateSource_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) LogConditionTemplateSource_FieldPathArrayItemValue
}

type LogConditionTemplateSource_FieldPathSelector int32

const (
	LogConditionTemplateSource_FieldPathSelectorTemplate      LogConditionTemplateSource_FieldPathSelector = 0
	LogConditionTemplateSource_FieldPathSelectorUpdatedFields LogConditionTemplateSource_FieldPathSelector = 1
)

func (s LogConditionTemplateSource_FieldPathSelector) String() string {
	switch s {
	case LogConditionTemplateSource_FieldPathSelectorTemplate:
		return "template"
	case LogConditionTemplateSource_FieldPathSelectorUpdatedFields:
		return "updated_fields"
	default:
		panic(fmt.Sprintf("Invalid selector for LogCondition_TemplateSource: %d", s))
	}
}

func BuildLogConditionTemplateSource_FieldPath(fp gotenobject.RawFieldPath) (LogConditionTemplateSource_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object LogCondition_TemplateSource")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "template":
			return &LogConditionTemplateSource_FieldTerminalPath{selector: LogConditionTemplateSource_FieldPathSelectorTemplate}, nil
		case "updated_fields", "updatedFields", "updated-fields":
			return &LogConditionTemplateSource_FieldTerminalPath{selector: LogConditionTemplateSource_FieldPathSelectorUpdatedFields}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object LogCondition_TemplateSource", fp)
}

func ParseLogConditionTemplateSource_FieldPath(rawField string) (LogConditionTemplateSource_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildLogConditionTemplateSource_FieldPath(fp)
}

func MustParseLogConditionTemplateSource_FieldPath(rawField string) LogConditionTemplateSource_FieldPath {
	fp, err := ParseLogConditionTemplateSource_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type LogConditionTemplateSource_FieldTerminalPath struct {
	selector LogConditionTemplateSource_FieldPathSelector
}

var _ LogConditionTemplateSource_FieldPath = (*LogConditionTemplateSource_FieldTerminalPath)(nil)

func (fp *LogConditionTemplateSource_FieldTerminalPath) Selector() LogConditionTemplateSource_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *LogConditionTemplateSource_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *LogConditionTemplateSource_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source LogCondition_TemplateSource
func (fp *LogConditionTemplateSource_FieldTerminalPath) Get(source *LogCondition_TemplateSource) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case LogConditionTemplateSource_FieldPathSelectorTemplate:
			if source.Template != nil {
				values = append(values, source.Template)
			}
		case LogConditionTemplateSource_FieldPathSelectorUpdatedFields:
			if source.UpdatedFields != nil {
				values = append(values, source.UpdatedFields)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for LogCondition_TemplateSource: %d", fp.selector))
		}
	}
	return
}

func (fp *LogConditionTemplateSource_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*LogCondition_TemplateSource))
}

// GetSingle returns value pointed by specific field of from source LogCondition_TemplateSource
func (fp *LogConditionTemplateSource_FieldTerminalPath) GetSingle(source *LogCondition_TemplateSource) (interface{}, bool) {
	switch fp.selector {
	case LogConditionTemplateSource_FieldPathSelectorTemplate:
		res := source.GetTemplate()
		return res, res != nil
	case LogConditionTemplateSource_FieldPathSelectorUpdatedFields:
		res := source.GetUpdatedFields()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for LogCondition_TemplateSource: %d", fp.selector))
	}
}

func (fp *LogConditionTemplateSource_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*LogCondition_TemplateSource))
}

// GetDefault returns a default value of the field type
func (fp *LogConditionTemplateSource_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case LogConditionTemplateSource_FieldPathSelectorTemplate:
		return (*log_condition_template.Reference)(nil)
	case LogConditionTemplateSource_FieldPathSelectorUpdatedFields:
		return (*fieldmaskpb.FieldMask)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for LogCondition_TemplateSource: %d", fp.selector))
	}
}

func (fp *LogConditionTemplateSource_FieldTerminalPath) ClearValue(item *LogCondition_TemplateSource) {
	if item != nil {
		switch fp.selector {
		case LogConditionTemplateSource_FieldPathSelectorTemplate:
			item.Template = nil
		case LogConditionTemplateSource_FieldPathSelectorUpdatedFields:
			item.UpdatedFields = nil
		default:
			panic(fmt.Sprintf("Invalid selector for LogCondition_TemplateSource: %d", fp.selector))
		}
	}
}

func (fp *LogConditionTemplateSource_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*LogCondition_TemplateSource))
}

// IsLeaf - whether field path is holds simple value
func (fp *LogConditionTemplateSource_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == LogConditionTemplateSource_FieldPathSelectorTemplate ||
		fp.selector == LogConditionTemplateSource_FieldPathSelectorUpdatedFields
}

func (fp *LogConditionTemplateSource_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *LogConditionTemplateSource_FieldTerminalPath) WithIValue(value interface{}) LogConditionTemplateSource_FieldPathValue {
	switch fp.selector {
	case LogConditionTemplateSource_FieldPathSelectorTemplate:
		return &LogConditionTemplateSource_FieldTerminalPathValue{LogConditionTemplateSource_FieldTerminalPath: *fp, value: value.(*log_condition_template.Reference)}
	case LogConditionTemplateSource_FieldPathSelectorUpdatedFields:
		return &LogConditionTemplateSource_FieldTerminalPathValue{LogConditionTemplateSource_FieldTerminalPath: *fp, value: value.(*fieldmaskpb.FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for LogCondition_TemplateSource: %d", fp.selector))
	}
}

func (fp *LogConditionTemplateSource_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *LogConditionTemplateSource_FieldTerminalPath) WithIArrayOfValues(values interface{}) LogConditionTemplateSource_FieldPathArrayOfValues {
	fpaov := &LogConditionTemplateSource_FieldTerminalPathArrayOfValues{LogConditionTemplateSource_FieldTerminalPath: *fp}
	switch fp.selector {
	case LogConditionTemplateSource_FieldPathSelectorTemplate:
		return &LogConditionTemplateSource_FieldTerminalPathArrayOfValues{LogConditionTemplateSource_FieldTerminalPath: *fp, values: values.([]*log_condition_template.Reference)}
	case LogConditionTemplateSource_FieldPathSelectorUpdatedFields:
		return &LogConditionTemplateSource_FieldTerminalPathArrayOfValues{LogConditionTemplateSource_FieldTerminalPath: *fp, values: values.([]*fieldmaskpb.FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for LogCondition_TemplateSource: %d", fp.selector))
	}
	return fpaov
}

func (fp *LogConditionTemplateSource_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *LogConditionTemplateSource_FieldTerminalPath) WithIArrayItemValue(value interface{}) LogConditionTemplateSource_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for LogCondition_TemplateSource: %d", fp.selector))
	}
}

func (fp *LogConditionTemplateSource_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// LogConditionTemplateSource_FieldPathValue allows storing values for TemplateSource fields according to their type
type LogConditionTemplateSource_FieldPathValue interface {
	LogConditionTemplateSource_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **LogCondition_TemplateSource)
	CompareWith(*LogCondition_TemplateSource) (cmp int, comparable bool)
}

func ParseLogConditionTemplateSource_FieldPathValue(pathStr, valueStr string) (LogConditionTemplateSource_FieldPathValue, error) {
	fp, err := ParseLogConditionTemplateSource_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing TemplateSource field path value from %s: %v", valueStr, err)
	}
	return fpv.(LogConditionTemplateSource_FieldPathValue), nil
}

func MustParseLogConditionTemplateSource_FieldPathValue(pathStr, valueStr string) LogConditionTemplateSource_FieldPathValue {
	fpv, err := ParseLogConditionTemplateSource_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type LogConditionTemplateSource_FieldTerminalPathValue struct {
	LogConditionTemplateSource_FieldTerminalPath
	value interface{}
}

var _ LogConditionTemplateSource_FieldPathValue = (*LogConditionTemplateSource_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'TemplateSource' as interface{}
func (fpv *LogConditionTemplateSource_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *LogConditionTemplateSource_FieldTerminalPathValue) AsTemplateValue() (*log_condition_template.Reference, bool) {
	res, ok := fpv.value.(*log_condition_template.Reference)
	return res, ok
}
func (fpv *LogConditionTemplateSource_FieldTerminalPathValue) AsUpdatedFieldsValue() (*fieldmaskpb.FieldMask, bool) {
	res, ok := fpv.value.(*fieldmaskpb.FieldMask)
	return res, ok
}

// SetTo stores value for selected field for object TemplateSource
func (fpv *LogConditionTemplateSource_FieldTerminalPathValue) SetTo(target **LogCondition_TemplateSource) {
	if *target == nil {
		*target = new(LogCondition_TemplateSource)
	}
	switch fpv.selector {
	case LogConditionTemplateSource_FieldPathSelectorTemplate:
		(*target).Template = fpv.value.(*log_condition_template.Reference)
	case LogConditionTemplateSource_FieldPathSelectorUpdatedFields:
		(*target).UpdatedFields = fpv.value.(*fieldmaskpb.FieldMask)
	default:
		panic(fmt.Sprintf("Invalid selector for LogCondition_TemplateSource: %d", fpv.selector))
	}
}

func (fpv *LogConditionTemplateSource_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*LogCondition_TemplateSource)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'LogConditionTemplateSource_FieldTerminalPathValue' with the value under path in 'LogCondition_TemplateSource'.
func (fpv *LogConditionTemplateSource_FieldTerminalPathValue) CompareWith(source *LogCondition_TemplateSource) (int, bool) {
	switch fpv.selector {
	case LogConditionTemplateSource_FieldPathSelectorTemplate:
		leftValue := fpv.value.(*log_condition_template.Reference)
		rightValue := source.GetTemplate()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case LogConditionTemplateSource_FieldPathSelectorUpdatedFields:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for LogCondition_TemplateSource: %d", fpv.selector))
	}
}

func (fpv *LogConditionTemplateSource_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*LogCondition_TemplateSource))
}

// LogConditionTemplateSource_FieldPathArrayItemValue allows storing single item in Path-specific values for TemplateSource according to their type
// Present only for array (repeated) types.
type LogConditionTemplateSource_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	LogConditionTemplateSource_FieldPath
	ContainsValue(*LogCondition_TemplateSource) bool
}

// ParseLogConditionTemplateSource_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseLogConditionTemplateSource_FieldPathArrayItemValue(pathStr, valueStr string) (LogConditionTemplateSource_FieldPathArrayItemValue, error) {
	fp, err := ParseLogConditionTemplateSource_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing TemplateSource field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(LogConditionTemplateSource_FieldPathArrayItemValue), nil
}

func MustParseLogConditionTemplateSource_FieldPathArrayItemValue(pathStr, valueStr string) LogConditionTemplateSource_FieldPathArrayItemValue {
	fpaiv, err := ParseLogConditionTemplateSource_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type LogConditionTemplateSource_FieldTerminalPathArrayItemValue struct {
	LogConditionTemplateSource_FieldTerminalPath
	value interface{}
}

var _ LogConditionTemplateSource_FieldPathArrayItemValue = (*LogConditionTemplateSource_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object LogCondition_TemplateSource as interface{}
func (fpaiv *LogConditionTemplateSource_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *LogConditionTemplateSource_FieldTerminalPathArrayItemValue) GetSingle(source *LogCondition_TemplateSource) (interface{}, bool) {
	return nil, false
}

func (fpaiv *LogConditionTemplateSource_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*LogCondition_TemplateSource))
}

// Contains returns a boolean indicating if value that is being held is present in given 'TemplateSource'
func (fpaiv *LogConditionTemplateSource_FieldTerminalPathArrayItemValue) ContainsValue(source *LogCondition_TemplateSource) bool {
	slice := fpaiv.LogConditionTemplateSource_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// LogConditionTemplateSource_FieldPathArrayOfValues allows storing slice of values for TemplateSource fields according to their type
type LogConditionTemplateSource_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	LogConditionTemplateSource_FieldPath
}

func ParseLogConditionTemplateSource_FieldPathArrayOfValues(pathStr, valuesStr string) (LogConditionTemplateSource_FieldPathArrayOfValues, error) {
	fp, err := ParseLogConditionTemplateSource_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing TemplateSource field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(LogConditionTemplateSource_FieldPathArrayOfValues), nil
}

func MustParseLogConditionTemplateSource_FieldPathArrayOfValues(pathStr, valuesStr string) LogConditionTemplateSource_FieldPathArrayOfValues {
	fpaov, err := ParseLogConditionTemplateSource_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type LogConditionTemplateSource_FieldTerminalPathArrayOfValues struct {
	LogConditionTemplateSource_FieldTerminalPath
	values interface{}
}

var _ LogConditionTemplateSource_FieldPathArrayOfValues = (*LogConditionTemplateSource_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *LogConditionTemplateSource_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case LogConditionTemplateSource_FieldPathSelectorTemplate:
		for _, v := range fpaov.values.([]*log_condition_template.Reference) {
			values = append(values, v)
		}
	case LogConditionTemplateSource_FieldPathSelectorUpdatedFields:
		for _, v := range fpaov.values.([]*fieldmaskpb.FieldMask) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *LogConditionTemplateSource_FieldTerminalPathArrayOfValues) AsTemplateArrayOfValues() ([]*log_condition_template.Reference, bool) {
	res, ok := fpaov.values.([]*log_condition_template.Reference)
	return res, ok
}
func (fpaov *LogConditionTemplateSource_FieldTerminalPathArrayOfValues) AsUpdatedFieldsArrayOfValues() ([]*fieldmaskpb.FieldMask, bool) {
	res, ok := fpaov.values.([]*fieldmaskpb.FieldMask)
	return res, ok
}
