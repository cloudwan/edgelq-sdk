// Code generated by protoc-gen-goten-resource
// Resource change: LogConditionChange
// DO NOT EDIT!!!

package log_condition

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	policy "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/policy"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
)

// ensure the imports are used
var (
	_ = new(gotenresource.ListQuery)
)

// make sure we're using proto imports
var (
	_ = &policy.Policy{}
	_ = &fieldmaskpb.FieldMask{}
)

func (c *LogConditionChange) IsAdd() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*LogConditionChange_Added_)
	return ok
}

func (c *LogConditionChange) IsModify() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*LogConditionChange_Modified_)
	return ok
}

func (c *LogConditionChange) IsCurrent() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*LogConditionChange_Current_)
	return ok
}

func (c *LogConditionChange) IsDelete() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*LogConditionChange_Removed_)
	return ok
}

func (c *LogConditionChange) GetCurrentViewIndex() int32 {
	switch cType := c.ChangeType.(type) {
	case *LogConditionChange_Added_:
		return cType.Added.ViewIndex
	case *LogConditionChange_Modified_:
		return cType.Modified.ViewIndex
	}
	return 0
}

func (c *LogConditionChange) GetPreviousViewIndex() int32 {
	switch cType := c.ChangeType.(type) {
	case *LogConditionChange_Removed_:
		return cType.Removed.ViewIndex
	case *LogConditionChange_Modified_:
		return cType.Modified.PreviousViewIndex
	}
	return 0
}

func (c *LogConditionChange) GetLogCondition() *LogCondition {
	if c == nil {
		return nil
	}
	switch cType := c.ChangeType.(type) {
	case *LogConditionChange_Added_:
		return cType.Added.LogCondition
	case *LogConditionChange_Modified_:
		return cType.Modified.LogCondition
	case *LogConditionChange_Current_:
		return cType.Current.LogCondition
	case *LogConditionChange_Removed_:
		return nil
	}
	return nil
}

func (c *LogConditionChange) GetRawResource() gotenresource.Resource {
	return c.GetLogCondition()
}

func (c *LogConditionChange) GetLogConditionName() *Name {
	if c == nil {
		return nil
	}
	switch cType := c.ChangeType.(type) {
	case *LogConditionChange_Added_:
		return cType.Added.LogCondition.GetName()
	case *LogConditionChange_Modified_:
		return cType.Modified.Name
	case *LogConditionChange_Current_:
		return cType.Current.LogCondition.GetName()
	case *LogConditionChange_Removed_:
		return cType.Removed.Name
	}
	return nil
}

func (c *LogConditionChange) GetRawName() gotenresource.Name {
	return c.GetLogConditionName()
}

func (c *LogConditionChange) SetAddedRaw(snapshot gotenresource.Resource, idx int) {
	c.ChangeType = &LogConditionChange_Added_{
		Added: &LogConditionChange_Added{
			LogCondition: snapshot.(*LogCondition),
			ViewIndex:    int32(idx),
		},
	}
}

func (c *LogConditionChange) SetModifiedRaw(name gotenresource.Name, snapshot gotenresource.Resource, prevIdx int, newIdx int) {
	c.ChangeType = &LogConditionChange_Modified_{
		Modified: &LogConditionChange_Modified{
			Name:              name.(*Name),
			LogCondition:      snapshot.(*LogCondition),
			PreviousViewIndex: int32(prevIdx),
			ViewIndex:         int32(newIdx),
		},
	}
}

func (c *LogConditionChange) SetCurrentRaw(snapshot gotenresource.Resource) {
	c.ChangeType = &LogConditionChange_Current_{
		Current: &LogConditionChange_Current{
			LogCondition: snapshot.(*LogCondition),
		},
	}
}

func (c *LogConditionChange) SetDeletedRaw(name gotenresource.Name, idx int) {
	c.ChangeType = &LogConditionChange_Removed_{
		Removed: &LogConditionChange_Removed{
			Name:      name.(*Name),
			ViewIndex: int32(idx),
		},
	}
}
