// Code generated by protoc-gen-goten-validate
// File: edgelq/alerting/proto/v1/log_condition.proto
// DO NOT EDIT!!!

package log_condition

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	gotenvalidate "github.com/cloudwan/goten-sdk/runtime/validate"
)

// proto imports
import (
	document "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/document"
	policy "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/policy"
	logging_log "github.com/cloudwan/edgelq-sdk/logging/resources/v1/log"
	meta "github.com/cloudwan/goten-sdk/types/meta"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
)

var (
	_ = bytes.Equal
	_ = errors.New
	_ = fmt.Errorf
	_ = net.ParseIP
	_ = regexp.Match
	_ = strings.Split
	_ = time.Now
	_ = utf8.RuneCountInString
	_ = url.Parse
	_ = gotenvalidate.NewValidationError
)

// make sure we're using proto imports
var (
	_ = &document.Document{}
	_ = &policy.Policy{}
	_ = &logging_log.Log{}
	_ = &durationpb.Duration{}
	_ = &meta.Meta{}
)

func (obj *LogCondition) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if subobj, ok := interface{}(obj.Metadata).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("LogCondition", "metadata", obj.Metadata, "nested object validation failed", err)
		}
	}
	{
		rlen := utf8.RuneCountInString(obj.DisplayName)
		if rlen > 256 {
			return gotenvalidate.NewValidationError("LogCondition", "displayName", obj.DisplayName, "field must contain at most 256 characters", nil)
		}
	}
	{
		rlen := utf8.RuneCountInString(obj.Description)
		if rlen > 512 {
			return gotenvalidate.NewValidationError("LogCondition", "description", obj.Description, "field must contain at most 512 characters", nil)
		}
	}
	if obj.Spec == nil {
		return gotenvalidate.NewValidationError("LogCondition", "spec", obj.Spec, "field is required", nil)
	}
	if subobj, ok := interface{}(obj.Spec).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("LogCondition", "spec", obj.Spec, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.Internal).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("LogCondition", "internal", obj.Internal, "nested object validation failed", err)
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *LogCondition_Spec) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if obj.Query == nil {
		return gotenvalidate.NewValidationError("Spec", "query", obj.Query, "field is required", nil)
	}
	if subobj, ok := interface{}(obj.Query).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("Spec", "query", obj.Query, "nested object validation failed", err)
		}
	}
	if len(obj.GroupByLabels) < 1 {
		return gotenvalidate.NewValidationError("Spec", "groupByLabels", obj.GroupByLabels, "field must have at least 1 items", nil)
	}
	if len(obj.GroupByLabels) > 8 {
		return gotenvalidate.NewValidationError("Spec", "groupByLabels", obj.GroupByLabels, "field must have at most 8 items", nil)
	}
	if len(obj.GroupByLabels) > 1 {
		values := make(map[string]struct{})
		for _, v := range obj.GroupByLabels {
			if _, ok := values[v]; ok {
				return gotenvalidate.NewValidationError("Spec", "groupByLabels", obj.GroupByLabels, "field must contain unique items", nil)
			}
			values[v] = struct{}{}
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *LogCondition_Internal) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *LogCondition_Spec_Query) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if obj.Trigger == nil {
		return gotenvalidate.NewValidationError("Query", "trigger", obj.Trigger, "field is required", nil)
	}
	if subobj, ok := interface{}(obj.Trigger).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("Query", "trigger", obj.Trigger, "nested object validation failed", err)
		}
	}
	if obj.MinDuration != nil && obj.MinDuration.CheckValid() != nil {
		err := obj.MinDuration.CheckValid()
		return gotenvalidate.NewValidationError("Query", "minDuration", obj.MinDuration, "could not validate duration", err)
	} else {
		d := obj.MinDuration.AsDuration()

		if obj.MinDuration != nil {
			if !(d >= time.Duration(60000000000)) {
				return gotenvalidate.NewValidationError("Query", "minDuration", d, "field must be greater or equal to 1m0s", nil)
			}
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *LogCondition_Spec_Query_LabelTrigger) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if len(obj.Key) > 64 {
		return gotenvalidate.NewValidationError("LabelTrigger", "key", obj.Key, "field must contain at most 64 characters", nil)
	}
	if obj.Key == "" {
		return gotenvalidate.NewValidationError("LabelTrigger", "key", obj.Key, "field is required", nil)
	}
	if len(obj.Values) < 1 {
		return gotenvalidate.NewValidationError("LabelTrigger", "values", obj.Values, "field must have at least 1 items", nil)
	}
	if len(obj.Values) > 25 {
		return gotenvalidate.NewValidationError("LabelTrigger", "values", obj.Values, "field must have at most 25 items", nil)
	}
	if len(obj.Values) > 1 {
		values := make(map[string]struct{})
		for _, v := range obj.Values {
			if _, ok := values[v]; ok {
				return gotenvalidate.NewValidationError("LabelTrigger", "values", obj.Values, "field must contain unique items", nil)
			}
			values[v] = struct{}{}
		}
	}
	for _, el := range obj.Values {

		if len(el) > 128 {
			return gotenvalidate.NewValidationError("LabelTrigger", "values", el, "field must contain at most 128 characters", nil)
		}
		if el == "" {
			return gotenvalidate.NewValidationError("LabelTrigger", "values", el, "field is required", nil)
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *LogCondition_Spec_Query_StringPayloadTrigger) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if len(obj.ObjectSelector) < 0 {
		return gotenvalidate.NewValidationError("StringPayloadTrigger", "objectSelector", obj.ObjectSelector, "field must contain at least 0 characters", nil)
	}
	if len(obj.ObjectSelector) > 64 {
		return gotenvalidate.NewValidationError("StringPayloadTrigger", "objectSelector", obj.ObjectSelector, "field must contain at most 64 characters", nil)
	}
	if len(obj.Regex) > 64 {
		return gotenvalidate.NewValidationError("StringPayloadTrigger", "regex", obj.Regex, "field must contain at most 64 characters", nil)
	}
	if obj.Regex == "" {
		return gotenvalidate.NewValidationError("StringPayloadTrigger", "regex", obj.Regex, "field is required", nil)
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *LogCondition_Spec_Query_CompositeTrigger) GotenValidate() error {
	if obj == nil {
		return nil
	}
	for idx, elem := range obj.Triggers {
		if subobj, ok := interface{}(elem).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("CompositeTrigger", "triggers", obj.Triggers[idx], "nested object validation failed", err)
			}
		}
	}
	if _, ok := LogCondition_Spec_Query_CompositeTrigger_Operator_name[int32(obj.Operator)]; !ok {
		return gotenvalidate.NewValidationError("CompositeTrigger", "operator", obj.Operator, "field must be a defined enum value", nil)
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *LogCondition_Spec_Query_TriggerCnd) GotenValidate() error {
	if obj == nil {
		return nil
	}
	switch opt := obj.Type.(type) {
	case *LogCondition_Spec_Query_TriggerCnd_Label:
		if subobj, ok := interface{}(opt.Label).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("TriggerCnd", "label", opt.Label, "nested object validation failed", err)
			}
		}
	case *LogCondition_Spec_Query_TriggerCnd_StringContent:
		if subobj, ok := interface{}(opt.StringContent).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("TriggerCnd", "stringContent", opt.StringContent, "nested object validation failed", err)
			}
		}
	case *LogCondition_Spec_Query_TriggerCnd_Composite:
		if subobj, ok := interface{}(opt.Composite).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("TriggerCnd", "composite", opt.Composite, "nested object validation failed", err)
			}
		}
	default:
		_ = opt
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
