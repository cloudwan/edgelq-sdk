// Code generated by protoc-gen-goten-object
// File: edgelq/alerting/proto/v1/policy.proto
// DO NOT EDIT!!!

package policy

import (
	"encoding/json"
	"strings"

	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	googlefieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	document "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/document"
	notification_channel "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/notification_channel"
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1/project"
	monitoring_common "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/common"
	meta_resource "github.com/cloudwan/goten-sdk/meta-service/resources/v1/resource"
	meta "github.com/cloudwan/goten-sdk/types/meta"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = strings.Builder{}

	_ = codes.NotFound
	_ = status.Status{}
	_ = new(proto.Message)
	_ = new(preflect.Message)
	_ = googlefieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldMask)
)

// make sure we're using proto imports
var (
	_ = &document.Document{}
	_ = &notification_channel.NotificationChannel{}
	_ = &iam_project.Project{}
	_ = &monitoring_common.LabelDescriptor{}
	_ = &meta_resource.Resource{}
	_ = &meta.Meta{}
)

type Policy_FieldMask struct {
	Paths []Policy_FieldPath
}

func FullPolicy_FieldMask() *Policy_FieldMask {
	res := &Policy_FieldMask{}
	res.Paths = append(res.Paths, &Policy_FieldTerminalPath{selector: Policy_FieldPathSelectorName})
	res.Paths = append(res.Paths, &Policy_FieldTerminalPath{selector: Policy_FieldPathSelectorMetadata})
	res.Paths = append(res.Paths, &Policy_FieldTerminalPath{selector: Policy_FieldPathSelectorDisplayName})
	res.Paths = append(res.Paths, &Policy_FieldTerminalPath{selector: Policy_FieldPathSelectorDescription})
	res.Paths = append(res.Paths, &Policy_FieldTerminalPath{selector: Policy_FieldPathSelectorSupportingDocs})
	res.Paths = append(res.Paths, &Policy_FieldTerminalPath{selector: Policy_FieldPathSelectorSpec})
	return res
}

func (fieldMask *Policy_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

func (fieldMask *Policy_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 6)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*Policy_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *Policy_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParsePolicy_FieldPath(raw)
	})
}

func (fieldMask *Policy_FieldMask) ProtoMessage() {}

func (fieldMask *Policy_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *Policy_FieldMask) Subtract(other *Policy_FieldMask) *Policy_FieldMask {
	result := &Policy_FieldMask{}
	removedSelectors := make([]bool, 6)
	otherSubMasks := map[Policy_FieldPathSelector]gotenobject.FieldMask{
		Policy_FieldPathSelectorMetadata: &meta.Meta_FieldMask{},
		Policy_FieldPathSelectorSpec:     &Policy_Spec_FieldMask{},
	}
	mySubMasks := map[Policy_FieldPathSelector]gotenobject.FieldMask{
		Policy_FieldPathSelectorMetadata: &meta.Meta_FieldMask{},
		Policy_FieldPathSelectorSpec:     &Policy_Spec_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *Policy_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *Policy_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*Policy_FieldTerminalPath); ok {
					switch tp.selector {
					case Policy_FieldPathSelectorMetadata:
						mySubMasks[Policy_FieldPathSelectorMetadata] = meta.FullMeta_FieldMask()
					case Policy_FieldPathSelectorSpec:
						mySubMasks[Policy_FieldPathSelectorSpec] = FullPolicy_Spec_FieldMask()
					}
				} else if tp, ok := path.(*Policy_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &Policy_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *Policy_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*Policy_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *Policy_FieldMask) FilterInputFields() *Policy_FieldMask {
	result := &Policy_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case Policy_FieldPathSelectorMetadata:
			if _, ok := path.(*Policy_FieldTerminalPath); ok {
				for _, subpath := range meta.FullMeta_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &Policy_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*Policy_FieldSubPath); ok {
				selectedMask := &meta.Meta_FieldMask{
					Paths: []meta.Meta_FieldPath{sub.subPath.(meta.Meta_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &Policy_FieldSubPath{selector: Policy_FieldPathSelectorMetadata, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *Policy_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *Policy_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]Policy_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParsePolicy_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask Policy_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *Policy_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Policy_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask Policy_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *Policy_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Policy_FieldMask) AppendPath(path Policy_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *Policy_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(Policy_FieldPath))
}

func (fieldMask *Policy_FieldMask) GetPaths() []Policy_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *Policy_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *Policy_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParsePolicy_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *Policy_FieldMask) Set(target, source *Policy) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *Policy_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*Policy), source.(*Policy))
}

func (fieldMask *Policy_FieldMask) Project(source *Policy) *Policy {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &Policy{}
	metadataMask := &meta.Meta_FieldMask{}
	wholeMetadataAccepted := false
	specMask := &Policy_Spec_FieldMask{}
	wholeSpecAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *Policy_FieldTerminalPath:
			switch tp.selector {
			case Policy_FieldPathSelectorName:
				result.Name = source.Name
			case Policy_FieldPathSelectorMetadata:
				result.Metadata = source.Metadata
				wholeMetadataAccepted = true
			case Policy_FieldPathSelectorDisplayName:
				result.DisplayName = source.DisplayName
			case Policy_FieldPathSelectorDescription:
				result.Description = source.Description
			case Policy_FieldPathSelectorSupportingDocs:
				result.SupportingDocs = source.SupportingDocs
			case Policy_FieldPathSelectorSpec:
				result.Spec = source.Spec
				wholeSpecAccepted = true
			}
		case *Policy_FieldSubPath:
			switch tp.selector {
			case Policy_FieldPathSelectorMetadata:
				metadataMask.AppendPath(tp.subPath.(meta.Meta_FieldPath))
			case Policy_FieldPathSelectorSpec:
				specMask.AppendPath(tp.subPath.(PolicySpec_FieldPath))
			}
		}
	}
	if wholeMetadataAccepted == false && len(metadataMask.Paths) > 0 {
		result.Metadata = metadataMask.Project(source.GetMetadata())
	}
	if wholeSpecAccepted == false && len(specMask.Paths) > 0 {
		result.Spec = specMask.Project(source.GetSpec())
	}
	return result
}

func (fieldMask *Policy_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*Policy))
}

func (fieldMask *Policy_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type Policy_Spec_FieldMask struct {
	Paths []PolicySpec_FieldPath
}

func FullPolicy_Spec_FieldMask() *Policy_Spec_FieldMask {
	res := &Policy_Spec_FieldMask{}
	res.Paths = append(res.Paths, &PolicySpec_FieldTerminalPath{selector: PolicySpec_FieldPathSelectorEnabled})
	res.Paths = append(res.Paths, &PolicySpec_FieldTerminalPath{selector: PolicySpec_FieldPathSelectorProcessingLocation})
	res.Paths = append(res.Paths, &PolicySpec_FieldTerminalPath{selector: PolicySpec_FieldPathSelectorNotifications})
	res.Paths = append(res.Paths, &PolicySpec_FieldTerminalPath{selector: PolicySpec_FieldPathSelectorResourceIdentity})
	res.Paths = append(res.Paths, &PolicySpec_FieldTerminalPath{selector: PolicySpec_FieldPathSelectorSupportingQueries})
	res.Paths = append(res.Paths, &PolicySpec_FieldTerminalPath{selector: PolicySpec_FieldPathSelectorAiAgent})
	return res
}

func (fieldMask *Policy_Spec_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

func (fieldMask *Policy_Spec_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 6)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*PolicySpec_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *Policy_Spec_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParsePolicySpec_FieldPath(raw)
	})
}

func (fieldMask *Policy_Spec_FieldMask) ProtoMessage() {}

func (fieldMask *Policy_Spec_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *Policy_Spec_FieldMask) Subtract(other *Policy_Spec_FieldMask) *Policy_Spec_FieldMask {
	result := &Policy_Spec_FieldMask{}
	removedSelectors := make([]bool, 6)
	otherSubMasks := map[PolicySpec_FieldPathSelector]gotenobject.FieldMask{
		PolicySpec_FieldPathSelectorNotifications:     &Policy_Spec_Notification_FieldMask{},
		PolicySpec_FieldPathSelectorResourceIdentity:  &Policy_Spec_ResourceIdentity_FieldMask{},
		PolicySpec_FieldPathSelectorSupportingQueries: &Policy_Spec_SupportingAlertQuery_FieldMask{},
		PolicySpec_FieldPathSelectorAiAgent:           &Policy_Spec_AIAgentHandling_FieldMask{},
	}
	mySubMasks := map[PolicySpec_FieldPathSelector]gotenobject.FieldMask{
		PolicySpec_FieldPathSelectorNotifications:     &Policy_Spec_Notification_FieldMask{},
		PolicySpec_FieldPathSelectorResourceIdentity:  &Policy_Spec_ResourceIdentity_FieldMask{},
		PolicySpec_FieldPathSelectorSupportingQueries: &Policy_Spec_SupportingAlertQuery_FieldMask{},
		PolicySpec_FieldPathSelectorAiAgent:           &Policy_Spec_AIAgentHandling_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *PolicySpec_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *PolicySpec_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*PolicySpec_FieldTerminalPath); ok {
					switch tp.selector {
					case PolicySpec_FieldPathSelectorNotifications:
						mySubMasks[PolicySpec_FieldPathSelectorNotifications] = FullPolicy_Spec_Notification_FieldMask()
					case PolicySpec_FieldPathSelectorResourceIdentity:
						mySubMasks[PolicySpec_FieldPathSelectorResourceIdentity] = FullPolicy_Spec_ResourceIdentity_FieldMask()
					case PolicySpec_FieldPathSelectorSupportingQueries:
						mySubMasks[PolicySpec_FieldPathSelectorSupportingQueries] = FullPolicy_Spec_SupportingAlertQuery_FieldMask()
					case PolicySpec_FieldPathSelectorAiAgent:
						mySubMasks[PolicySpec_FieldPathSelectorAiAgent] = FullPolicy_Spec_AIAgentHandling_FieldMask()
					}
				} else if tp, ok := path.(*PolicySpec_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &PolicySpec_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *Policy_Spec_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*Policy_Spec_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *Policy_Spec_FieldMask) FilterInputFields() *Policy_Spec_FieldMask {
	result := &Policy_Spec_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *Policy_Spec_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *Policy_Spec_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]PolicySpec_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParsePolicySpec_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask Policy_Spec_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *Policy_Spec_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Policy_Spec_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask Policy_Spec_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *Policy_Spec_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Policy_Spec_FieldMask) AppendPath(path PolicySpec_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *Policy_Spec_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(PolicySpec_FieldPath))
}

func (fieldMask *Policy_Spec_FieldMask) GetPaths() []PolicySpec_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *Policy_Spec_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *Policy_Spec_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParsePolicySpec_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *Policy_Spec_FieldMask) Set(target, source *Policy_Spec) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *Policy_Spec_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*Policy_Spec), source.(*Policy_Spec))
}

func (fieldMask *Policy_Spec_FieldMask) Project(source *Policy_Spec) *Policy_Spec {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &Policy_Spec{}
	notificationsMask := &Policy_Spec_Notification_FieldMask{}
	wholeNotificationsAccepted := false
	resourceIdentityMask := &Policy_Spec_ResourceIdentity_FieldMask{}
	wholeResourceIdentityAccepted := false
	supportingQueriesMask := &Policy_Spec_SupportingAlertQuery_FieldMask{}
	wholeSupportingQueriesAccepted := false
	aiAgentMask := &Policy_Spec_AIAgentHandling_FieldMask{}
	wholeAiAgentAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *PolicySpec_FieldTerminalPath:
			switch tp.selector {
			case PolicySpec_FieldPathSelectorEnabled:
				result.Enabled = source.Enabled
			case PolicySpec_FieldPathSelectorProcessingLocation:
				result.ProcessingLocation = source.ProcessingLocation
			case PolicySpec_FieldPathSelectorNotifications:
				result.Notifications = source.Notifications
				wholeNotificationsAccepted = true
			case PolicySpec_FieldPathSelectorResourceIdentity:
				result.ResourceIdentity = source.ResourceIdentity
				wholeResourceIdentityAccepted = true
			case PolicySpec_FieldPathSelectorSupportingQueries:
				result.SupportingQueries = source.SupportingQueries
				wholeSupportingQueriesAccepted = true
			case PolicySpec_FieldPathSelectorAiAgent:
				result.AiAgent = source.AiAgent
				wholeAiAgentAccepted = true
			}
		case *PolicySpec_FieldSubPath:
			switch tp.selector {
			case PolicySpec_FieldPathSelectorNotifications:
				notificationsMask.AppendPath(tp.subPath.(PolicySpecNotification_FieldPath))
			case PolicySpec_FieldPathSelectorResourceIdentity:
				resourceIdentityMask.AppendPath(tp.subPath.(PolicySpecResourceIdentity_FieldPath))
			case PolicySpec_FieldPathSelectorSupportingQueries:
				supportingQueriesMask.AppendPath(tp.subPath.(PolicySpecSupportingAlertQuery_FieldPath))
			case PolicySpec_FieldPathSelectorAiAgent:
				aiAgentMask.AppendPath(tp.subPath.(PolicySpecAIAgentHandling_FieldPath))
			}
		}
	}
	if wholeNotificationsAccepted == false && len(notificationsMask.Paths) > 0 {
		for _, sourceItem := range source.GetNotifications() {
			result.Notifications = append(result.Notifications, notificationsMask.Project(sourceItem))
		}
	}
	if wholeResourceIdentityAccepted == false && len(resourceIdentityMask.Paths) > 0 {
		result.ResourceIdentity = resourceIdentityMask.Project(source.GetResourceIdentity())
	}
	if wholeSupportingQueriesAccepted == false && len(supportingQueriesMask.Paths) > 0 {
		for _, sourceItem := range source.GetSupportingQueries() {
			result.SupportingQueries = append(result.SupportingQueries, supportingQueriesMask.Project(sourceItem))
		}
	}
	if wholeAiAgentAccepted == false && len(aiAgentMask.Paths) > 0 {
		result.AiAgent = aiAgentMask.Project(source.GetAiAgent())
	}
	return result
}

func (fieldMask *Policy_Spec_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*Policy_Spec))
}

func (fieldMask *Policy_Spec_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type Policy_Spec_Notification_FieldMask struct {
	Paths []PolicySpecNotification_FieldPath
}

func FullPolicy_Spec_Notification_FieldMask() *Policy_Spec_Notification_FieldMask {
	res := &Policy_Spec_Notification_FieldMask{}
	res.Paths = append(res.Paths, &PolicySpecNotification_FieldTerminalPath{selector: PolicySpecNotification_FieldPathSelectorEnabledKinds})
	res.Paths = append(res.Paths, &PolicySpecNotification_FieldTerminalPath{selector: PolicySpecNotification_FieldPathSelectorChannel})
	res.Paths = append(res.Paths, &PolicySpecNotification_FieldTerminalPath{selector: PolicySpecNotification_FieldPathSelectorMaxAlertBodiesInMsg})
	res.Paths = append(res.Paths, &PolicySpecNotification_FieldTerminalPath{selector: PolicySpecNotification_FieldPathSelectorPutOnlyAlertsCounterWhenOverflowing})
	return res
}

func (fieldMask *Policy_Spec_Notification_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

func (fieldMask *Policy_Spec_Notification_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 4)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*PolicySpecNotification_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *Policy_Spec_Notification_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParsePolicySpecNotification_FieldPath(raw)
	})
}

func (fieldMask *Policy_Spec_Notification_FieldMask) ProtoMessage() {}

func (fieldMask *Policy_Spec_Notification_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *Policy_Spec_Notification_FieldMask) Subtract(other *Policy_Spec_Notification_FieldMask) *Policy_Spec_Notification_FieldMask {
	result := &Policy_Spec_Notification_FieldMask{}
	removedSelectors := make([]bool, 4)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *PolicySpecNotification_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *Policy_Spec_Notification_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*Policy_Spec_Notification_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *Policy_Spec_Notification_FieldMask) FilterInputFields() *Policy_Spec_Notification_FieldMask {
	result := &Policy_Spec_Notification_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *Policy_Spec_Notification_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *Policy_Spec_Notification_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]PolicySpecNotification_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParsePolicySpecNotification_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask Policy_Spec_Notification_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *Policy_Spec_Notification_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Policy_Spec_Notification_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask Policy_Spec_Notification_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *Policy_Spec_Notification_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Policy_Spec_Notification_FieldMask) AppendPath(path PolicySpecNotification_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *Policy_Spec_Notification_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(PolicySpecNotification_FieldPath))
}

func (fieldMask *Policy_Spec_Notification_FieldMask) GetPaths() []PolicySpecNotification_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *Policy_Spec_Notification_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *Policy_Spec_Notification_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParsePolicySpecNotification_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *Policy_Spec_Notification_FieldMask) Set(target, source *Policy_Spec_Notification) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *Policy_Spec_Notification_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*Policy_Spec_Notification), source.(*Policy_Spec_Notification))
}

func (fieldMask *Policy_Spec_Notification_FieldMask) Project(source *Policy_Spec_Notification) *Policy_Spec_Notification {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &Policy_Spec_Notification{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *PolicySpecNotification_FieldTerminalPath:
			switch tp.selector {
			case PolicySpecNotification_FieldPathSelectorEnabledKinds:
				result.EnabledKinds = source.EnabledKinds
			case PolicySpecNotification_FieldPathSelectorChannel:
				result.Channel = source.Channel
			case PolicySpecNotification_FieldPathSelectorMaxAlertBodiesInMsg:
				result.MaxAlertBodiesInMsg = source.MaxAlertBodiesInMsg
			case PolicySpecNotification_FieldPathSelectorPutOnlyAlertsCounterWhenOverflowing:
				result.PutOnlyAlertsCounterWhenOverflowing = source.PutOnlyAlertsCounterWhenOverflowing
			}
		}
	}
	return result
}

func (fieldMask *Policy_Spec_Notification_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*Policy_Spec_Notification))
}

func (fieldMask *Policy_Spec_Notification_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type Policy_Spec_ResourceIdentity_FieldMask struct {
	Paths []PolicySpecResourceIdentity_FieldPath
}

func FullPolicy_Spec_ResourceIdentity_FieldMask() *Policy_Spec_ResourceIdentity_FieldMask {
	res := &Policy_Spec_ResourceIdentity_FieldMask{}
	res.Paths = append(res.Paths, &PolicySpecResourceIdentity_FieldTerminalPath{selector: PolicySpecResourceIdentity_FieldPathSelectorAlertingResource})
	res.Paths = append(res.Paths, &PolicySpecResourceIdentity_FieldTerminalPath{selector: PolicySpecResourceIdentity_FieldPathSelectorLabels})
	res.Paths = append(res.Paths, &PolicySpecResourceIdentity_FieldTerminalPath{selector: PolicySpecResourceIdentity_FieldPathSelectorNamePatterns})
	return res
}

func (fieldMask *Policy_Spec_ResourceIdentity_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

func (fieldMask *Policy_Spec_ResourceIdentity_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*PolicySpecResourceIdentity_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *Policy_Spec_ResourceIdentity_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParsePolicySpecResourceIdentity_FieldPath(raw)
	})
}

func (fieldMask *Policy_Spec_ResourceIdentity_FieldMask) ProtoMessage() {}

func (fieldMask *Policy_Spec_ResourceIdentity_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *Policy_Spec_ResourceIdentity_FieldMask) Subtract(other *Policy_Spec_ResourceIdentity_FieldMask) *Policy_Spec_ResourceIdentity_FieldMask {
	result := &Policy_Spec_ResourceIdentity_FieldMask{}
	removedSelectors := make([]bool, 3)
	otherSubMasks := map[PolicySpecResourceIdentity_FieldPathSelector]gotenobject.FieldMask{
		PolicySpecResourceIdentity_FieldPathSelectorLabels: &Policy_Spec_ResourceIdentity_LabelInfo_FieldMask{},
	}
	mySubMasks := map[PolicySpecResourceIdentity_FieldPathSelector]gotenobject.FieldMask{
		PolicySpecResourceIdentity_FieldPathSelectorLabels: &Policy_Spec_ResourceIdentity_LabelInfo_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *PolicySpecResourceIdentity_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *PolicySpecResourceIdentity_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*PolicySpecResourceIdentity_FieldTerminalPath); ok {
					switch tp.selector {
					case PolicySpecResourceIdentity_FieldPathSelectorLabels:
						mySubMasks[PolicySpecResourceIdentity_FieldPathSelectorLabels] = FullPolicy_Spec_ResourceIdentity_LabelInfo_FieldMask()
					}
				} else if tp, ok := path.(*PolicySpecResourceIdentity_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &PolicySpecResourceIdentity_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *Policy_Spec_ResourceIdentity_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*Policy_Spec_ResourceIdentity_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *Policy_Spec_ResourceIdentity_FieldMask) FilterInputFields() *Policy_Spec_ResourceIdentity_FieldMask {
	result := &Policy_Spec_ResourceIdentity_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *Policy_Spec_ResourceIdentity_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *Policy_Spec_ResourceIdentity_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]PolicySpecResourceIdentity_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParsePolicySpecResourceIdentity_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask Policy_Spec_ResourceIdentity_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *Policy_Spec_ResourceIdentity_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Policy_Spec_ResourceIdentity_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask Policy_Spec_ResourceIdentity_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *Policy_Spec_ResourceIdentity_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Policy_Spec_ResourceIdentity_FieldMask) AppendPath(path PolicySpecResourceIdentity_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *Policy_Spec_ResourceIdentity_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(PolicySpecResourceIdentity_FieldPath))
}

func (fieldMask *Policy_Spec_ResourceIdentity_FieldMask) GetPaths() []PolicySpecResourceIdentity_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *Policy_Spec_ResourceIdentity_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *Policy_Spec_ResourceIdentity_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParsePolicySpecResourceIdentity_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *Policy_Spec_ResourceIdentity_FieldMask) Set(target, source *Policy_Spec_ResourceIdentity) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *Policy_Spec_ResourceIdentity_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*Policy_Spec_ResourceIdentity), source.(*Policy_Spec_ResourceIdentity))
}

func (fieldMask *Policy_Spec_ResourceIdentity_FieldMask) Project(source *Policy_Spec_ResourceIdentity) *Policy_Spec_ResourceIdentity {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &Policy_Spec_ResourceIdentity{}
	labelsMask := &Policy_Spec_ResourceIdentity_LabelInfo_FieldMask{}
	wholeLabelsAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *PolicySpecResourceIdentity_FieldTerminalPath:
			switch tp.selector {
			case PolicySpecResourceIdentity_FieldPathSelectorAlertingResource:
				result.AlertingResource = source.AlertingResource
			case PolicySpecResourceIdentity_FieldPathSelectorLabels:
				result.Labels = source.Labels
				wholeLabelsAccepted = true
			case PolicySpecResourceIdentity_FieldPathSelectorNamePatterns:
				result.NamePatterns = source.NamePatterns
			}
		case *PolicySpecResourceIdentity_FieldSubPath:
			switch tp.selector {
			case PolicySpecResourceIdentity_FieldPathSelectorLabels:
				labelsMask.AppendPath(tp.subPath.(PolicySpecResourceIdentityLabelInfo_FieldPath))
			}
		}
	}
	if wholeLabelsAccepted == false && len(labelsMask.Paths) > 0 {
		for _, sourceItem := range source.GetLabels() {
			result.Labels = append(result.Labels, labelsMask.Project(sourceItem))
		}
	}
	return result
}

func (fieldMask *Policy_Spec_ResourceIdentity_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*Policy_Spec_ResourceIdentity))
}

func (fieldMask *Policy_Spec_ResourceIdentity_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type Policy_Spec_SupportingAlertQuery_FieldMask struct {
	Paths []PolicySpecSupportingAlertQuery_FieldPath
}

func FullPolicy_Spec_SupportingAlertQuery_FieldMask() *Policy_Spec_SupportingAlertQuery_FieldMask {
	res := &Policy_Spec_SupportingAlertQuery_FieldMask{}
	res.Paths = append(res.Paths, &PolicySpecSupportingAlertQuery_FieldTerminalPath{selector: PolicySpecSupportingAlertQuery_FieldPathSelectorTsQuery})
	res.Paths = append(res.Paths, &PolicySpecSupportingAlertQuery_FieldTerminalPath{selector: PolicySpecSupportingAlertQuery_FieldPathSelectorLogQuery})
	res.Paths = append(res.Paths, &PolicySpecSupportingAlertQuery_FieldTerminalPath{selector: PolicySpecSupportingAlertQuery_FieldPathSelectorRestGetQuery})
	res.Paths = append(res.Paths, &PolicySpecSupportingAlertQuery_FieldTerminalPath{selector: PolicySpecSupportingAlertQuery_FieldPathSelectorRestListQuery})
	return res
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 4)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*PolicySpecSupportingAlertQuery_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParsePolicySpecSupportingAlertQuery_FieldPath(raw)
	})
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_FieldMask) ProtoMessage() {}

func (fieldMask *Policy_Spec_SupportingAlertQuery_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_FieldMask) Subtract(other *Policy_Spec_SupportingAlertQuery_FieldMask) *Policy_Spec_SupportingAlertQuery_FieldMask {
	result := &Policy_Spec_SupportingAlertQuery_FieldMask{}
	removedSelectors := make([]bool, 4)
	otherSubMasks := map[PolicySpecSupportingAlertQuery_FieldPathSelector]gotenobject.FieldMask{
		PolicySpecSupportingAlertQuery_FieldPathSelectorTsQuery:       &Policy_Spec_SupportingAlertQuery_TsQuery_FieldMask{},
		PolicySpecSupportingAlertQuery_FieldPathSelectorLogQuery:      &Policy_Spec_SupportingAlertQuery_LogQuery_FieldMask{},
		PolicySpecSupportingAlertQuery_FieldPathSelectorRestGetQuery:  &Policy_Spec_SupportingAlertQuery_RestGetQuery_FieldMask{},
		PolicySpecSupportingAlertQuery_FieldPathSelectorRestListQuery: &Policy_Spec_SupportingAlertQuery_RestListQuery_FieldMask{},
	}
	mySubMasks := map[PolicySpecSupportingAlertQuery_FieldPathSelector]gotenobject.FieldMask{
		PolicySpecSupportingAlertQuery_FieldPathSelectorTsQuery:       &Policy_Spec_SupportingAlertQuery_TsQuery_FieldMask{},
		PolicySpecSupportingAlertQuery_FieldPathSelectorLogQuery:      &Policy_Spec_SupportingAlertQuery_LogQuery_FieldMask{},
		PolicySpecSupportingAlertQuery_FieldPathSelectorRestGetQuery:  &Policy_Spec_SupportingAlertQuery_RestGetQuery_FieldMask{},
		PolicySpecSupportingAlertQuery_FieldPathSelectorRestListQuery: &Policy_Spec_SupportingAlertQuery_RestListQuery_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *PolicySpecSupportingAlertQuery_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *PolicySpecSupportingAlertQuery_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*PolicySpecSupportingAlertQuery_FieldTerminalPath); ok {
					switch tp.selector {
					case PolicySpecSupportingAlertQuery_FieldPathSelectorTsQuery:
						mySubMasks[PolicySpecSupportingAlertQuery_FieldPathSelectorTsQuery] = FullPolicy_Spec_SupportingAlertQuery_TsQuery_FieldMask()
					case PolicySpecSupportingAlertQuery_FieldPathSelectorLogQuery:
						mySubMasks[PolicySpecSupportingAlertQuery_FieldPathSelectorLogQuery] = FullPolicy_Spec_SupportingAlertQuery_LogQuery_FieldMask()
					case PolicySpecSupportingAlertQuery_FieldPathSelectorRestGetQuery:
						mySubMasks[PolicySpecSupportingAlertQuery_FieldPathSelectorRestGetQuery] = FullPolicy_Spec_SupportingAlertQuery_RestGetQuery_FieldMask()
					case PolicySpecSupportingAlertQuery_FieldPathSelectorRestListQuery:
						mySubMasks[PolicySpecSupportingAlertQuery_FieldPathSelectorRestListQuery] = FullPolicy_Spec_SupportingAlertQuery_RestListQuery_FieldMask()
					}
				} else if tp, ok := path.(*PolicySpecSupportingAlertQuery_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &PolicySpecSupportingAlertQuery_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*Policy_Spec_SupportingAlertQuery_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *Policy_Spec_SupportingAlertQuery_FieldMask) FilterInputFields() *Policy_Spec_SupportingAlertQuery_FieldMask {
	result := &Policy_Spec_SupportingAlertQuery_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *Policy_Spec_SupportingAlertQuery_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]PolicySpecSupportingAlertQuery_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParsePolicySpecSupportingAlertQuery_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask Policy_Spec_SupportingAlertQuery_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask Policy_Spec_SupportingAlertQuery_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_FieldMask) AppendPath(path PolicySpecSupportingAlertQuery_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(PolicySpecSupportingAlertQuery_FieldPath))
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_FieldMask) GetPaths() []PolicySpecSupportingAlertQuery_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParsePolicySpecSupportingAlertQuery_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_FieldMask) Set(target, source *Policy_Spec_SupportingAlertQuery) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*Policy_Spec_SupportingAlertQuery), source.(*Policy_Spec_SupportingAlertQuery))
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_FieldMask) Project(source *Policy_Spec_SupportingAlertQuery) *Policy_Spec_SupportingAlertQuery {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &Policy_Spec_SupportingAlertQuery{}
	tsQueryMask := &Policy_Spec_SupportingAlertQuery_TsQuery_FieldMask{}
	wholeTsQueryAccepted := false
	logQueryMask := &Policy_Spec_SupportingAlertQuery_LogQuery_FieldMask{}
	wholeLogQueryAccepted := false
	restGetQueryMask := &Policy_Spec_SupportingAlertQuery_RestGetQuery_FieldMask{}
	wholeRestGetQueryAccepted := false
	restListQueryMask := &Policy_Spec_SupportingAlertQuery_RestListQuery_FieldMask{}
	wholeRestListQueryAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *PolicySpecSupportingAlertQuery_FieldTerminalPath:
			switch tp.selector {
			case PolicySpecSupportingAlertQuery_FieldPathSelectorTsQuery:
				if source, ok := source.Query.(*Policy_Spec_SupportingAlertQuery_TsQuery_); ok {
					result.Query = &Policy_Spec_SupportingAlertQuery_TsQuery_{
						TsQuery: source.TsQuery,
					}
				}
				wholeTsQueryAccepted = true
			case PolicySpecSupportingAlertQuery_FieldPathSelectorLogQuery:
				if source, ok := source.Query.(*Policy_Spec_SupportingAlertQuery_LogQuery_); ok {
					result.Query = &Policy_Spec_SupportingAlertQuery_LogQuery_{
						LogQuery: source.LogQuery,
					}
				}
				wholeLogQueryAccepted = true
			case PolicySpecSupportingAlertQuery_FieldPathSelectorRestGetQuery:
				if source, ok := source.Query.(*Policy_Spec_SupportingAlertQuery_RestGetQuery_); ok {
					result.Query = &Policy_Spec_SupportingAlertQuery_RestGetQuery_{
						RestGetQuery: source.RestGetQuery,
					}
				}
				wholeRestGetQueryAccepted = true
			case PolicySpecSupportingAlertQuery_FieldPathSelectorRestListQuery:
				if source, ok := source.Query.(*Policy_Spec_SupportingAlertQuery_RestListQuery_); ok {
					result.Query = &Policy_Spec_SupportingAlertQuery_RestListQuery_{
						RestListQuery: source.RestListQuery,
					}
				}
				wholeRestListQueryAccepted = true
			}
		case *PolicySpecSupportingAlertQuery_FieldSubPath:
			switch tp.selector {
			case PolicySpecSupportingAlertQuery_FieldPathSelectorTsQuery:
				tsQueryMask.AppendPath(tp.subPath.(PolicySpecSupportingAlertQueryTsQuery_FieldPath))
			case PolicySpecSupportingAlertQuery_FieldPathSelectorLogQuery:
				logQueryMask.AppendPath(tp.subPath.(PolicySpecSupportingAlertQueryLogQuery_FieldPath))
			case PolicySpecSupportingAlertQuery_FieldPathSelectorRestGetQuery:
				restGetQueryMask.AppendPath(tp.subPath.(PolicySpecSupportingAlertQueryRestGetQuery_FieldPath))
			case PolicySpecSupportingAlertQuery_FieldPathSelectorRestListQuery:
				restListQueryMask.AppendPath(tp.subPath.(PolicySpecSupportingAlertQueryRestListQuery_FieldPath))
			}
		}
	}
	if wholeTsQueryAccepted == false && len(tsQueryMask.Paths) > 0 {
		if asOneOf, ok := source.Query.(*Policy_Spec_SupportingAlertQuery_TsQuery_); ok {
			result.Query = (*Policy_Spec_SupportingAlertQuery_TsQuery_)(nil)
			if asOneOf != nil {
				oneOfRes := &Policy_Spec_SupportingAlertQuery_TsQuery_{}
				oneOfRes.TsQuery = tsQueryMask.Project(asOneOf.TsQuery)
				result.Query = oneOfRes
			}
		}
	}
	if wholeLogQueryAccepted == false && len(logQueryMask.Paths) > 0 {
		if asOneOf, ok := source.Query.(*Policy_Spec_SupportingAlertQuery_LogQuery_); ok {
			result.Query = (*Policy_Spec_SupportingAlertQuery_LogQuery_)(nil)
			if asOneOf != nil {
				oneOfRes := &Policy_Spec_SupportingAlertQuery_LogQuery_{}
				oneOfRes.LogQuery = logQueryMask.Project(asOneOf.LogQuery)
				result.Query = oneOfRes
			}
		}
	}
	if wholeRestGetQueryAccepted == false && len(restGetQueryMask.Paths) > 0 {
		if asOneOf, ok := source.Query.(*Policy_Spec_SupportingAlertQuery_RestGetQuery_); ok {
			result.Query = (*Policy_Spec_SupportingAlertQuery_RestGetQuery_)(nil)
			if asOneOf != nil {
				oneOfRes := &Policy_Spec_SupportingAlertQuery_RestGetQuery_{}
				oneOfRes.RestGetQuery = restGetQueryMask.Project(asOneOf.RestGetQuery)
				result.Query = oneOfRes
			}
		}
	}
	if wholeRestListQueryAccepted == false && len(restListQueryMask.Paths) > 0 {
		if asOneOf, ok := source.Query.(*Policy_Spec_SupportingAlertQuery_RestListQuery_); ok {
			result.Query = (*Policy_Spec_SupportingAlertQuery_RestListQuery_)(nil)
			if asOneOf != nil {
				oneOfRes := &Policy_Spec_SupportingAlertQuery_RestListQuery_{}
				oneOfRes.RestListQuery = restListQueryMask.Project(asOneOf.RestListQuery)
				result.Query = oneOfRes
			}
		}
	}
	return result
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*Policy_Spec_SupportingAlertQuery))
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type Policy_Spec_AIAgentHandling_FieldMask struct {
	Paths []PolicySpecAIAgentHandling_FieldPath
}

func FullPolicy_Spec_AIAgentHandling_FieldMask() *Policy_Spec_AIAgentHandling_FieldMask {
	res := &Policy_Spec_AIAgentHandling_FieldMask{}
	res.Paths = append(res.Paths, &PolicySpecAIAgentHandling_FieldTerminalPath{selector: PolicySpecAIAgentHandling_FieldPathSelectorEnabled})
	res.Paths = append(res.Paths, &PolicySpecAIAgentHandling_FieldTerminalPath{selector: PolicySpecAIAgentHandling_FieldPathSelectorEnabledConnectivity})
	res.Paths = append(res.Paths, &PolicySpecAIAgentHandling_FieldTerminalPath{selector: PolicySpecAIAgentHandling_FieldPathSelectorAutoAcceptRemediation})
	res.Paths = append(res.Paths, &PolicySpecAIAgentHandling_FieldTerminalPath{selector: PolicySpecAIAgentHandling_FieldPathSelectorEdgeConnectivity})
	res.Paths = append(res.Paths, &PolicySpecAIAgentHandling_FieldTerminalPath{selector: PolicySpecAIAgentHandling_FieldPathSelectorRemediationOptions})
	return res
}

func (fieldMask *Policy_Spec_AIAgentHandling_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

func (fieldMask *Policy_Spec_AIAgentHandling_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 5)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*PolicySpecAIAgentHandling_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *Policy_Spec_AIAgentHandling_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParsePolicySpecAIAgentHandling_FieldPath(raw)
	})
}

func (fieldMask *Policy_Spec_AIAgentHandling_FieldMask) ProtoMessage() {}

func (fieldMask *Policy_Spec_AIAgentHandling_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *Policy_Spec_AIAgentHandling_FieldMask) Subtract(other *Policy_Spec_AIAgentHandling_FieldMask) *Policy_Spec_AIAgentHandling_FieldMask {
	result := &Policy_Spec_AIAgentHandling_FieldMask{}
	removedSelectors := make([]bool, 5)
	otherSubMasks := map[PolicySpecAIAgentHandling_FieldPathSelector]gotenobject.FieldMask{
		PolicySpecAIAgentHandling_FieldPathSelectorEdgeConnectivity:   &Policy_Spec_AIAgentHandling_EdgeConnectivity_FieldMask{},
		PolicySpecAIAgentHandling_FieldPathSelectorRemediationOptions: &Policy_Spec_AIAgentHandling_Remediation_FieldMask{},
	}
	mySubMasks := map[PolicySpecAIAgentHandling_FieldPathSelector]gotenobject.FieldMask{
		PolicySpecAIAgentHandling_FieldPathSelectorEdgeConnectivity:   &Policy_Spec_AIAgentHandling_EdgeConnectivity_FieldMask{},
		PolicySpecAIAgentHandling_FieldPathSelectorRemediationOptions: &Policy_Spec_AIAgentHandling_Remediation_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *PolicySpecAIAgentHandling_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *PolicySpecAIAgentHandling_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*PolicySpecAIAgentHandling_FieldTerminalPath); ok {
					switch tp.selector {
					case PolicySpecAIAgentHandling_FieldPathSelectorEdgeConnectivity:
						mySubMasks[PolicySpecAIAgentHandling_FieldPathSelectorEdgeConnectivity] = FullPolicy_Spec_AIAgentHandling_EdgeConnectivity_FieldMask()
					case PolicySpecAIAgentHandling_FieldPathSelectorRemediationOptions:
						mySubMasks[PolicySpecAIAgentHandling_FieldPathSelectorRemediationOptions] = FullPolicy_Spec_AIAgentHandling_Remediation_FieldMask()
					}
				} else if tp, ok := path.(*PolicySpecAIAgentHandling_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &PolicySpecAIAgentHandling_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *Policy_Spec_AIAgentHandling_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*Policy_Spec_AIAgentHandling_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *Policy_Spec_AIAgentHandling_FieldMask) FilterInputFields() *Policy_Spec_AIAgentHandling_FieldMask {
	result := &Policy_Spec_AIAgentHandling_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *Policy_Spec_AIAgentHandling_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *Policy_Spec_AIAgentHandling_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]PolicySpecAIAgentHandling_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParsePolicySpecAIAgentHandling_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask Policy_Spec_AIAgentHandling_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *Policy_Spec_AIAgentHandling_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Policy_Spec_AIAgentHandling_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask Policy_Spec_AIAgentHandling_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *Policy_Spec_AIAgentHandling_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Policy_Spec_AIAgentHandling_FieldMask) AppendPath(path PolicySpecAIAgentHandling_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *Policy_Spec_AIAgentHandling_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(PolicySpecAIAgentHandling_FieldPath))
}

func (fieldMask *Policy_Spec_AIAgentHandling_FieldMask) GetPaths() []PolicySpecAIAgentHandling_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *Policy_Spec_AIAgentHandling_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *Policy_Spec_AIAgentHandling_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParsePolicySpecAIAgentHandling_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *Policy_Spec_AIAgentHandling_FieldMask) Set(target, source *Policy_Spec_AIAgentHandling) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *Policy_Spec_AIAgentHandling_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*Policy_Spec_AIAgentHandling), source.(*Policy_Spec_AIAgentHandling))
}

func (fieldMask *Policy_Spec_AIAgentHandling_FieldMask) Project(source *Policy_Spec_AIAgentHandling) *Policy_Spec_AIAgentHandling {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &Policy_Spec_AIAgentHandling{}
	edgeConnectivityMask := &Policy_Spec_AIAgentHandling_EdgeConnectivity_FieldMask{}
	wholeEdgeConnectivityAccepted := false
	remediationOptionsMask := &Policy_Spec_AIAgentHandling_Remediation_FieldMask{}
	wholeRemediationOptionsAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *PolicySpecAIAgentHandling_FieldTerminalPath:
			switch tp.selector {
			case PolicySpecAIAgentHandling_FieldPathSelectorEnabled:
				result.Enabled = source.Enabled
			case PolicySpecAIAgentHandling_FieldPathSelectorEnabledConnectivity:
				result.EnabledConnectivity = source.EnabledConnectivity
			case PolicySpecAIAgentHandling_FieldPathSelectorAutoAcceptRemediation:
				result.AutoAcceptRemediation = source.AutoAcceptRemediation
			case PolicySpecAIAgentHandling_FieldPathSelectorEdgeConnectivity:
				result.EdgeConnectivity = source.EdgeConnectivity
				wholeEdgeConnectivityAccepted = true
			case PolicySpecAIAgentHandling_FieldPathSelectorRemediationOptions:
				result.RemediationOptions = source.RemediationOptions
				wholeRemediationOptionsAccepted = true
			}
		case *PolicySpecAIAgentHandling_FieldSubPath:
			switch tp.selector {
			case PolicySpecAIAgentHandling_FieldPathSelectorEdgeConnectivity:
				edgeConnectivityMask.AppendPath(tp.subPath.(PolicySpecAIAgentHandlingEdgeConnectivity_FieldPath))
			case PolicySpecAIAgentHandling_FieldPathSelectorRemediationOptions:
				remediationOptionsMask.AppendPath(tp.subPath.(PolicySpecAIAgentHandlingRemediation_FieldPath))
			}
		}
	}
	if wholeEdgeConnectivityAccepted == false && len(edgeConnectivityMask.Paths) > 0 {
		result.EdgeConnectivity = edgeConnectivityMask.Project(source.GetEdgeConnectivity())
	}
	if wholeRemediationOptionsAccepted == false && len(remediationOptionsMask.Paths) > 0 {
		for _, sourceItem := range source.GetRemediationOptions() {
			result.RemediationOptions = append(result.RemediationOptions, remediationOptionsMask.Project(sourceItem))
		}
	}
	return result
}

func (fieldMask *Policy_Spec_AIAgentHandling_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*Policy_Spec_AIAgentHandling))
}

func (fieldMask *Policy_Spec_AIAgentHandling_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type Policy_Spec_ResourceIdentity_LabelInfo_FieldMask struct {
	Paths []PolicySpecResourceIdentityLabelInfo_FieldPath
}

func FullPolicy_Spec_ResourceIdentity_LabelInfo_FieldMask() *Policy_Spec_ResourceIdentity_LabelInfo_FieldMask {
	res := &Policy_Spec_ResourceIdentity_LabelInfo_FieldMask{}
	res.Paths = append(res.Paths, &PolicySpecResourceIdentityLabelInfo_FieldTerminalPath{selector: PolicySpecResourceIdentityLabelInfo_FieldPathSelectorKey})
	res.Paths = append(res.Paths, &PolicySpecResourceIdentityLabelInfo_FieldTerminalPath{selector: PolicySpecResourceIdentityLabelInfo_FieldPathSelectorContexts})
	res.Paths = append(res.Paths, &PolicySpecResourceIdentityLabelInfo_FieldTerminalPath{selector: PolicySpecResourceIdentityLabelInfo_FieldPathSelectorMappedNameSegment})
	return res
}

func (fieldMask *Policy_Spec_ResourceIdentity_LabelInfo_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

func (fieldMask *Policy_Spec_ResourceIdentity_LabelInfo_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*PolicySpecResourceIdentityLabelInfo_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *Policy_Spec_ResourceIdentity_LabelInfo_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParsePolicySpecResourceIdentityLabelInfo_FieldPath(raw)
	})
}

func (fieldMask *Policy_Spec_ResourceIdentity_LabelInfo_FieldMask) ProtoMessage() {}

func (fieldMask *Policy_Spec_ResourceIdentity_LabelInfo_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *Policy_Spec_ResourceIdentity_LabelInfo_FieldMask) Subtract(other *Policy_Spec_ResourceIdentity_LabelInfo_FieldMask) *Policy_Spec_ResourceIdentity_LabelInfo_FieldMask {
	result := &Policy_Spec_ResourceIdentity_LabelInfo_FieldMask{}
	removedSelectors := make([]bool, 3)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *PolicySpecResourceIdentityLabelInfo_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *Policy_Spec_ResourceIdentity_LabelInfo_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*Policy_Spec_ResourceIdentity_LabelInfo_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *Policy_Spec_ResourceIdentity_LabelInfo_FieldMask) FilterInputFields() *Policy_Spec_ResourceIdentity_LabelInfo_FieldMask {
	result := &Policy_Spec_ResourceIdentity_LabelInfo_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *Policy_Spec_ResourceIdentity_LabelInfo_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *Policy_Spec_ResourceIdentity_LabelInfo_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]PolicySpecResourceIdentityLabelInfo_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParsePolicySpecResourceIdentityLabelInfo_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask Policy_Spec_ResourceIdentity_LabelInfo_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *Policy_Spec_ResourceIdentity_LabelInfo_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Policy_Spec_ResourceIdentity_LabelInfo_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask Policy_Spec_ResourceIdentity_LabelInfo_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *Policy_Spec_ResourceIdentity_LabelInfo_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Policy_Spec_ResourceIdentity_LabelInfo_FieldMask) AppendPath(path PolicySpecResourceIdentityLabelInfo_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *Policy_Spec_ResourceIdentity_LabelInfo_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(PolicySpecResourceIdentityLabelInfo_FieldPath))
}

func (fieldMask *Policy_Spec_ResourceIdentity_LabelInfo_FieldMask) GetPaths() []PolicySpecResourceIdentityLabelInfo_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *Policy_Spec_ResourceIdentity_LabelInfo_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *Policy_Spec_ResourceIdentity_LabelInfo_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParsePolicySpecResourceIdentityLabelInfo_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *Policy_Spec_ResourceIdentity_LabelInfo_FieldMask) Set(target, source *Policy_Spec_ResourceIdentity_LabelInfo) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *Policy_Spec_ResourceIdentity_LabelInfo_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*Policy_Spec_ResourceIdentity_LabelInfo), source.(*Policy_Spec_ResourceIdentity_LabelInfo))
}

func (fieldMask *Policy_Spec_ResourceIdentity_LabelInfo_FieldMask) Project(source *Policy_Spec_ResourceIdentity_LabelInfo) *Policy_Spec_ResourceIdentity_LabelInfo {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &Policy_Spec_ResourceIdentity_LabelInfo{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *PolicySpecResourceIdentityLabelInfo_FieldTerminalPath:
			switch tp.selector {
			case PolicySpecResourceIdentityLabelInfo_FieldPathSelectorKey:
				result.Key = source.Key
			case PolicySpecResourceIdentityLabelInfo_FieldPathSelectorContexts:
				result.Contexts = source.Contexts
			case PolicySpecResourceIdentityLabelInfo_FieldPathSelectorMappedNameSegment:
				result.MappedNameSegment = source.MappedNameSegment
			}
		}
	}
	return result
}

func (fieldMask *Policy_Spec_ResourceIdentity_LabelInfo_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*Policy_Spec_ResourceIdentity_LabelInfo))
}

func (fieldMask *Policy_Spec_ResourceIdentity_LabelInfo_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type Policy_Spec_SupportingAlertQuery_TsQuery_FieldMask struct {
	Paths []PolicySpecSupportingAlertQueryTsQuery_FieldPath
}

func FullPolicy_Spec_SupportingAlertQuery_TsQuery_FieldMask() *Policy_Spec_SupportingAlertQuery_TsQuery_FieldMask {
	res := &Policy_Spec_SupportingAlertQuery_TsQuery_FieldMask{}
	res.Paths = append(res.Paths, &PolicySpecSupportingAlertQueryTsQuery_FieldTerminalPath{selector: PolicySpecSupportingAlertQueryTsQuery_FieldPathSelectorDescription})
	res.Paths = append(res.Paths, &PolicySpecSupportingAlertQueryTsQuery_FieldTerminalPath{selector: PolicySpecSupportingAlertQueryTsQuery_FieldPathSelectorFilterTemplate})
	res.Paths = append(res.Paths, &PolicySpecSupportingAlertQueryTsQuery_FieldTerminalPath{selector: PolicySpecSupportingAlertQueryTsQuery_FieldPathSelectorAggregation})
	return res
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_TsQuery_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_TsQuery_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*PolicySpecSupportingAlertQueryTsQuery_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_TsQuery_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParsePolicySpecSupportingAlertQueryTsQuery_FieldPath(raw)
	})
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_TsQuery_FieldMask) ProtoMessage() {}

func (fieldMask *Policy_Spec_SupportingAlertQuery_TsQuery_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_TsQuery_FieldMask) Subtract(other *Policy_Spec_SupportingAlertQuery_TsQuery_FieldMask) *Policy_Spec_SupportingAlertQuery_TsQuery_FieldMask {
	result := &Policy_Spec_SupportingAlertQuery_TsQuery_FieldMask{}
	removedSelectors := make([]bool, 3)
	otherSubMasks := map[PolicySpecSupportingAlertQueryTsQuery_FieldPathSelector]gotenobject.FieldMask{
		PolicySpecSupportingAlertQueryTsQuery_FieldPathSelectorAggregation: &monitoring_common.Aggregation_FieldMask{},
	}
	mySubMasks := map[PolicySpecSupportingAlertQueryTsQuery_FieldPathSelector]gotenobject.FieldMask{
		PolicySpecSupportingAlertQueryTsQuery_FieldPathSelectorAggregation: &monitoring_common.Aggregation_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *PolicySpecSupportingAlertQueryTsQuery_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *PolicySpecSupportingAlertQueryTsQuery_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*PolicySpecSupportingAlertQueryTsQuery_FieldTerminalPath); ok {
					switch tp.selector {
					case PolicySpecSupportingAlertQueryTsQuery_FieldPathSelectorAggregation:
						mySubMasks[PolicySpecSupportingAlertQueryTsQuery_FieldPathSelectorAggregation] = monitoring_common.FullAggregation_FieldMask()
					}
				} else if tp, ok := path.(*PolicySpecSupportingAlertQueryTsQuery_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &PolicySpecSupportingAlertQueryTsQuery_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_TsQuery_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*Policy_Spec_SupportingAlertQuery_TsQuery_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *Policy_Spec_SupportingAlertQuery_TsQuery_FieldMask) FilterInputFields() *Policy_Spec_SupportingAlertQuery_TsQuery_FieldMask {
	result := &Policy_Spec_SupportingAlertQuery_TsQuery_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *Policy_Spec_SupportingAlertQuery_TsQuery_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_TsQuery_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]PolicySpecSupportingAlertQueryTsQuery_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParsePolicySpecSupportingAlertQueryTsQuery_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask Policy_Spec_SupportingAlertQuery_TsQuery_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_TsQuery_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_TsQuery_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask Policy_Spec_SupportingAlertQuery_TsQuery_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_TsQuery_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_TsQuery_FieldMask) AppendPath(path PolicySpecSupportingAlertQueryTsQuery_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_TsQuery_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(PolicySpecSupportingAlertQueryTsQuery_FieldPath))
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_TsQuery_FieldMask) GetPaths() []PolicySpecSupportingAlertQueryTsQuery_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_TsQuery_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_TsQuery_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParsePolicySpecSupportingAlertQueryTsQuery_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_TsQuery_FieldMask) Set(target, source *Policy_Spec_SupportingAlertQuery_TsQuery) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_TsQuery_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*Policy_Spec_SupportingAlertQuery_TsQuery), source.(*Policy_Spec_SupportingAlertQuery_TsQuery))
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_TsQuery_FieldMask) Project(source *Policy_Spec_SupportingAlertQuery_TsQuery) *Policy_Spec_SupportingAlertQuery_TsQuery {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &Policy_Spec_SupportingAlertQuery_TsQuery{}
	aggregationMask := &monitoring_common.Aggregation_FieldMask{}
	wholeAggregationAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *PolicySpecSupportingAlertQueryTsQuery_FieldTerminalPath:
			switch tp.selector {
			case PolicySpecSupportingAlertQueryTsQuery_FieldPathSelectorDescription:
				result.Description = source.Description
			case PolicySpecSupportingAlertQueryTsQuery_FieldPathSelectorFilterTemplate:
				result.FilterTemplate = source.FilterTemplate
			case PolicySpecSupportingAlertQueryTsQuery_FieldPathSelectorAggregation:
				result.Aggregation = source.Aggregation
				wholeAggregationAccepted = true
			}
		case *PolicySpecSupportingAlertQueryTsQuery_FieldSubPath:
			switch tp.selector {
			case PolicySpecSupportingAlertQueryTsQuery_FieldPathSelectorAggregation:
				aggregationMask.AppendPath(tp.subPath.(monitoring_common.Aggregation_FieldPath))
			}
		}
	}
	if wholeAggregationAccepted == false && len(aggregationMask.Paths) > 0 {
		result.Aggregation = aggregationMask.Project(source.GetAggregation())
	}
	return result
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_TsQuery_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*Policy_Spec_SupportingAlertQuery_TsQuery))
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_TsQuery_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type Policy_Spec_SupportingAlertQuery_LogQuery_FieldMask struct {
	Paths []PolicySpecSupportingAlertQueryLogQuery_FieldPath
}

func FullPolicy_Spec_SupportingAlertQuery_LogQuery_FieldMask() *Policy_Spec_SupportingAlertQuery_LogQuery_FieldMask {
	res := &Policy_Spec_SupportingAlertQuery_LogQuery_FieldMask{}
	res.Paths = append(res.Paths, &PolicySpecSupportingAlertQueryLogQuery_FieldTerminalPath{selector: PolicySpecSupportingAlertQueryLogQuery_FieldPathSelectorDescription})
	res.Paths = append(res.Paths, &PolicySpecSupportingAlertQueryLogQuery_FieldTerminalPath{selector: PolicySpecSupportingAlertQueryLogQuery_FieldPathSelectorFilterTemplate})
	return res
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_LogQuery_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_LogQuery_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*PolicySpecSupportingAlertQueryLogQuery_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_LogQuery_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParsePolicySpecSupportingAlertQueryLogQuery_FieldPath(raw)
	})
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_LogQuery_FieldMask) ProtoMessage() {}

func (fieldMask *Policy_Spec_SupportingAlertQuery_LogQuery_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_LogQuery_FieldMask) Subtract(other *Policy_Spec_SupportingAlertQuery_LogQuery_FieldMask) *Policy_Spec_SupportingAlertQuery_LogQuery_FieldMask {
	result := &Policy_Spec_SupportingAlertQuery_LogQuery_FieldMask{}
	removedSelectors := make([]bool, 2)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *PolicySpecSupportingAlertQueryLogQuery_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_LogQuery_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*Policy_Spec_SupportingAlertQuery_LogQuery_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *Policy_Spec_SupportingAlertQuery_LogQuery_FieldMask) FilterInputFields() *Policy_Spec_SupportingAlertQuery_LogQuery_FieldMask {
	result := &Policy_Spec_SupportingAlertQuery_LogQuery_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *Policy_Spec_SupportingAlertQuery_LogQuery_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_LogQuery_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]PolicySpecSupportingAlertQueryLogQuery_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParsePolicySpecSupportingAlertQueryLogQuery_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask Policy_Spec_SupportingAlertQuery_LogQuery_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_LogQuery_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_LogQuery_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask Policy_Spec_SupportingAlertQuery_LogQuery_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_LogQuery_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_LogQuery_FieldMask) AppendPath(path PolicySpecSupportingAlertQueryLogQuery_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_LogQuery_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(PolicySpecSupportingAlertQueryLogQuery_FieldPath))
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_LogQuery_FieldMask) GetPaths() []PolicySpecSupportingAlertQueryLogQuery_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_LogQuery_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_LogQuery_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParsePolicySpecSupportingAlertQueryLogQuery_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_LogQuery_FieldMask) Set(target, source *Policy_Spec_SupportingAlertQuery_LogQuery) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_LogQuery_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*Policy_Spec_SupportingAlertQuery_LogQuery), source.(*Policy_Spec_SupportingAlertQuery_LogQuery))
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_LogQuery_FieldMask) Project(source *Policy_Spec_SupportingAlertQuery_LogQuery) *Policy_Spec_SupportingAlertQuery_LogQuery {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &Policy_Spec_SupportingAlertQuery_LogQuery{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *PolicySpecSupportingAlertQueryLogQuery_FieldTerminalPath:
			switch tp.selector {
			case PolicySpecSupportingAlertQueryLogQuery_FieldPathSelectorDescription:
				result.Description = source.Description
			case PolicySpecSupportingAlertQueryLogQuery_FieldPathSelectorFilterTemplate:
				result.FilterTemplate = source.FilterTemplate
			}
		}
	}
	return result
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_LogQuery_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*Policy_Spec_SupportingAlertQuery_LogQuery))
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_LogQuery_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type Policy_Spec_SupportingAlertQuery_RestGetQuery_FieldMask struct {
	Paths []PolicySpecSupportingAlertQueryRestGetQuery_FieldPath
}

func FullPolicy_Spec_SupportingAlertQuery_RestGetQuery_FieldMask() *Policy_Spec_SupportingAlertQuery_RestGetQuery_FieldMask {
	res := &Policy_Spec_SupportingAlertQuery_RestGetQuery_FieldMask{}
	res.Paths = append(res.Paths, &PolicySpecSupportingAlertQueryRestGetQuery_FieldTerminalPath{selector: PolicySpecSupportingAlertQueryRestGetQuery_FieldPathSelectorDescription})
	res.Paths = append(res.Paths, &PolicySpecSupportingAlertQueryRestGetQuery_FieldTerminalPath{selector: PolicySpecSupportingAlertQueryRestGetQuery_FieldPathSelectorEndpoint})
	res.Paths = append(res.Paths, &PolicySpecSupportingAlertQueryRestGetQuery_FieldTerminalPath{selector: PolicySpecSupportingAlertQueryRestGetQuery_FieldPathSelectorPathTemplate})
	res.Paths = append(res.Paths, &PolicySpecSupportingAlertQueryRestGetQuery_FieldTerminalPath{selector: PolicySpecSupportingAlertQueryRestGetQuery_FieldPathSelectorView})
	res.Paths = append(res.Paths, &PolicySpecSupportingAlertQueryRestGetQuery_FieldTerminalPath{selector: PolicySpecSupportingAlertQueryRestGetQuery_FieldPathSelectorFieldMask})
	return res
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_RestGetQuery_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_RestGetQuery_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 5)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*PolicySpecSupportingAlertQueryRestGetQuery_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_RestGetQuery_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParsePolicySpecSupportingAlertQueryRestGetQuery_FieldPath(raw)
	})
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_RestGetQuery_FieldMask) ProtoMessage() {}

func (fieldMask *Policy_Spec_SupportingAlertQuery_RestGetQuery_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_RestGetQuery_FieldMask) Subtract(other *Policy_Spec_SupportingAlertQuery_RestGetQuery_FieldMask) *Policy_Spec_SupportingAlertQuery_RestGetQuery_FieldMask {
	result := &Policy_Spec_SupportingAlertQuery_RestGetQuery_FieldMask{}
	removedSelectors := make([]bool, 5)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *PolicySpecSupportingAlertQueryRestGetQuery_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_RestGetQuery_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*Policy_Spec_SupportingAlertQuery_RestGetQuery_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *Policy_Spec_SupportingAlertQuery_RestGetQuery_FieldMask) FilterInputFields() *Policy_Spec_SupportingAlertQuery_RestGetQuery_FieldMask {
	result := &Policy_Spec_SupportingAlertQuery_RestGetQuery_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *Policy_Spec_SupportingAlertQuery_RestGetQuery_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_RestGetQuery_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]PolicySpecSupportingAlertQueryRestGetQuery_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParsePolicySpecSupportingAlertQueryRestGetQuery_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask Policy_Spec_SupportingAlertQuery_RestGetQuery_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_RestGetQuery_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_RestGetQuery_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask Policy_Spec_SupportingAlertQuery_RestGetQuery_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_RestGetQuery_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_RestGetQuery_FieldMask) AppendPath(path PolicySpecSupportingAlertQueryRestGetQuery_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_RestGetQuery_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(PolicySpecSupportingAlertQueryRestGetQuery_FieldPath))
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_RestGetQuery_FieldMask) GetPaths() []PolicySpecSupportingAlertQueryRestGetQuery_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_RestGetQuery_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_RestGetQuery_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParsePolicySpecSupportingAlertQueryRestGetQuery_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_RestGetQuery_FieldMask) Set(target, source *Policy_Spec_SupportingAlertQuery_RestGetQuery) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_RestGetQuery_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*Policy_Spec_SupportingAlertQuery_RestGetQuery), source.(*Policy_Spec_SupportingAlertQuery_RestGetQuery))
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_RestGetQuery_FieldMask) Project(source *Policy_Spec_SupportingAlertQuery_RestGetQuery) *Policy_Spec_SupportingAlertQuery_RestGetQuery {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &Policy_Spec_SupportingAlertQuery_RestGetQuery{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *PolicySpecSupportingAlertQueryRestGetQuery_FieldTerminalPath:
			switch tp.selector {
			case PolicySpecSupportingAlertQueryRestGetQuery_FieldPathSelectorDescription:
				result.Description = source.Description
			case PolicySpecSupportingAlertQueryRestGetQuery_FieldPathSelectorEndpoint:
				result.Endpoint = source.Endpoint
			case PolicySpecSupportingAlertQueryRestGetQuery_FieldPathSelectorPathTemplate:
				result.PathTemplate = source.PathTemplate
			case PolicySpecSupportingAlertQueryRestGetQuery_FieldPathSelectorView:
				result.View = source.View
			case PolicySpecSupportingAlertQueryRestGetQuery_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			}
		}
	}
	return result
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_RestGetQuery_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*Policy_Spec_SupportingAlertQuery_RestGetQuery))
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_RestGetQuery_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type Policy_Spec_SupportingAlertQuery_RestListQuery_FieldMask struct {
	Paths []PolicySpecSupportingAlertQueryRestListQuery_FieldPath
}

func FullPolicy_Spec_SupportingAlertQuery_RestListQuery_FieldMask() *Policy_Spec_SupportingAlertQuery_RestListQuery_FieldMask {
	res := &Policy_Spec_SupportingAlertQuery_RestListQuery_FieldMask{}
	res.Paths = append(res.Paths, &PolicySpecSupportingAlertQueryRestListQuery_FieldTerminalPath{selector: PolicySpecSupportingAlertQueryRestListQuery_FieldPathSelectorDescription})
	res.Paths = append(res.Paths, &PolicySpecSupportingAlertQueryRestListQuery_FieldTerminalPath{selector: PolicySpecSupportingAlertQueryRestListQuery_FieldPathSelectorEndpoint})
	res.Paths = append(res.Paths, &PolicySpecSupportingAlertQueryRestListQuery_FieldTerminalPath{selector: PolicySpecSupportingAlertQueryRestListQuery_FieldPathSelectorPathTemplate})
	res.Paths = append(res.Paths, &PolicySpecSupportingAlertQueryRestListQuery_FieldTerminalPath{selector: PolicySpecSupportingAlertQueryRestListQuery_FieldPathSelectorView})
	res.Paths = append(res.Paths, &PolicySpecSupportingAlertQueryRestListQuery_FieldTerminalPath{selector: PolicySpecSupportingAlertQueryRestListQuery_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &PolicySpecSupportingAlertQueryRestListQuery_FieldTerminalPath{selector: PolicySpecSupportingAlertQueryRestListQuery_FieldPathSelectorFilterTemplate})
	return res
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_RestListQuery_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_RestListQuery_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 6)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*PolicySpecSupportingAlertQueryRestListQuery_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_RestListQuery_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParsePolicySpecSupportingAlertQueryRestListQuery_FieldPath(raw)
	})
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_RestListQuery_FieldMask) ProtoMessage() {}

func (fieldMask *Policy_Spec_SupportingAlertQuery_RestListQuery_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_RestListQuery_FieldMask) Subtract(other *Policy_Spec_SupportingAlertQuery_RestListQuery_FieldMask) *Policy_Spec_SupportingAlertQuery_RestListQuery_FieldMask {
	result := &Policy_Spec_SupportingAlertQuery_RestListQuery_FieldMask{}
	removedSelectors := make([]bool, 6)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *PolicySpecSupportingAlertQueryRestListQuery_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_RestListQuery_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*Policy_Spec_SupportingAlertQuery_RestListQuery_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *Policy_Spec_SupportingAlertQuery_RestListQuery_FieldMask) FilterInputFields() *Policy_Spec_SupportingAlertQuery_RestListQuery_FieldMask {
	result := &Policy_Spec_SupportingAlertQuery_RestListQuery_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *Policy_Spec_SupportingAlertQuery_RestListQuery_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_RestListQuery_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]PolicySpecSupportingAlertQueryRestListQuery_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParsePolicySpecSupportingAlertQueryRestListQuery_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask Policy_Spec_SupportingAlertQuery_RestListQuery_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_RestListQuery_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_RestListQuery_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask Policy_Spec_SupportingAlertQuery_RestListQuery_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_RestListQuery_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_RestListQuery_FieldMask) AppendPath(path PolicySpecSupportingAlertQueryRestListQuery_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_RestListQuery_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(PolicySpecSupportingAlertQueryRestListQuery_FieldPath))
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_RestListQuery_FieldMask) GetPaths() []PolicySpecSupportingAlertQueryRestListQuery_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_RestListQuery_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_RestListQuery_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParsePolicySpecSupportingAlertQueryRestListQuery_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_RestListQuery_FieldMask) Set(target, source *Policy_Spec_SupportingAlertQuery_RestListQuery) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_RestListQuery_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*Policy_Spec_SupportingAlertQuery_RestListQuery), source.(*Policy_Spec_SupportingAlertQuery_RestListQuery))
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_RestListQuery_FieldMask) Project(source *Policy_Spec_SupportingAlertQuery_RestListQuery) *Policy_Spec_SupportingAlertQuery_RestListQuery {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &Policy_Spec_SupportingAlertQuery_RestListQuery{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *PolicySpecSupportingAlertQueryRestListQuery_FieldTerminalPath:
			switch tp.selector {
			case PolicySpecSupportingAlertQueryRestListQuery_FieldPathSelectorDescription:
				result.Description = source.Description
			case PolicySpecSupportingAlertQueryRestListQuery_FieldPathSelectorEndpoint:
				result.Endpoint = source.Endpoint
			case PolicySpecSupportingAlertQueryRestListQuery_FieldPathSelectorPathTemplate:
				result.PathTemplate = source.PathTemplate
			case PolicySpecSupportingAlertQueryRestListQuery_FieldPathSelectorView:
				result.View = source.View
			case PolicySpecSupportingAlertQueryRestListQuery_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case PolicySpecSupportingAlertQueryRestListQuery_FieldPathSelectorFilterTemplate:
				result.FilterTemplate = source.FilterTemplate
			}
		}
	}
	return result
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_RestListQuery_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*Policy_Spec_SupportingAlertQuery_RestListQuery))
}

func (fieldMask *Policy_Spec_SupportingAlertQuery_RestListQuery_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type Policy_Spec_AIAgentHandling_EdgeConnectivity_FieldMask struct {
	Paths []PolicySpecAIAgentHandlingEdgeConnectivity_FieldPath
}

func FullPolicy_Spec_AIAgentHandling_EdgeConnectivity_FieldMask() *Policy_Spec_AIAgentHandling_EdgeConnectivity_FieldMask {
	res := &Policy_Spec_AIAgentHandling_EdgeConnectivity_FieldMask{}
	res.Paths = append(res.Paths, &PolicySpecAIAgentHandlingEdgeConnectivity_FieldTerminalPath{selector: PolicySpecAIAgentHandlingEdgeConnectivity_FieldPathSelectorDeviceSsh})
	res.Paths = append(res.Paths, &PolicySpecAIAgentHandlingEdgeConnectivity_FieldTerminalPath{selector: PolicySpecAIAgentHandlingEdgeConnectivity_FieldPathSelectorProxiesSsh})
	res.Paths = append(res.Paths, &PolicySpecAIAgentHandlingEdgeConnectivity_FieldTerminalPath{selector: PolicySpecAIAgentHandlingEdgeConnectivity_FieldPathSelectorPodSsh})
	res.Paths = append(res.Paths, &PolicySpecAIAgentHandlingEdgeConnectivity_FieldTerminalPath{selector: PolicySpecAIAgentHandlingEdgeConnectivity_FieldPathSelectorAllowedBins})
	return res
}

func (fieldMask *Policy_Spec_AIAgentHandling_EdgeConnectivity_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

func (fieldMask *Policy_Spec_AIAgentHandling_EdgeConnectivity_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 4)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*PolicySpecAIAgentHandlingEdgeConnectivity_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *Policy_Spec_AIAgentHandling_EdgeConnectivity_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParsePolicySpecAIAgentHandlingEdgeConnectivity_FieldPath(raw)
	})
}

func (fieldMask *Policy_Spec_AIAgentHandling_EdgeConnectivity_FieldMask) ProtoMessage() {}

func (fieldMask *Policy_Spec_AIAgentHandling_EdgeConnectivity_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *Policy_Spec_AIAgentHandling_EdgeConnectivity_FieldMask) Subtract(other *Policy_Spec_AIAgentHandling_EdgeConnectivity_FieldMask) *Policy_Spec_AIAgentHandling_EdgeConnectivity_FieldMask {
	result := &Policy_Spec_AIAgentHandling_EdgeConnectivity_FieldMask{}
	removedSelectors := make([]bool, 4)
	otherSubMasks := map[PolicySpecAIAgentHandlingEdgeConnectivity_FieldPathSelector]gotenobject.FieldMask{
		PolicySpecAIAgentHandlingEdgeConnectivity_FieldPathSelectorDeviceSsh:  &Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSSH_FieldMask{},
		PolicySpecAIAgentHandlingEdgeConnectivity_FieldPathSelectorProxiesSsh: &Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH_FieldMask{},
		PolicySpecAIAgentHandlingEdgeConnectivity_FieldPathSelectorPodSsh:     &Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSSH_FieldMask{},
	}
	mySubMasks := map[PolicySpecAIAgentHandlingEdgeConnectivity_FieldPathSelector]gotenobject.FieldMask{
		PolicySpecAIAgentHandlingEdgeConnectivity_FieldPathSelectorDeviceSsh:  &Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSSH_FieldMask{},
		PolicySpecAIAgentHandlingEdgeConnectivity_FieldPathSelectorProxiesSsh: &Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH_FieldMask{},
		PolicySpecAIAgentHandlingEdgeConnectivity_FieldPathSelectorPodSsh:     &Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSSH_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *PolicySpecAIAgentHandlingEdgeConnectivity_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *PolicySpecAIAgentHandlingEdgeConnectivity_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*PolicySpecAIAgentHandlingEdgeConnectivity_FieldTerminalPath); ok {
					switch tp.selector {
					case PolicySpecAIAgentHandlingEdgeConnectivity_FieldPathSelectorDeviceSsh:
						mySubMasks[PolicySpecAIAgentHandlingEdgeConnectivity_FieldPathSelectorDeviceSsh] = FullPolicy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSSH_FieldMask()
					case PolicySpecAIAgentHandlingEdgeConnectivity_FieldPathSelectorProxiesSsh:
						mySubMasks[PolicySpecAIAgentHandlingEdgeConnectivity_FieldPathSelectorProxiesSsh] = FullPolicy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH_FieldMask()
					case PolicySpecAIAgentHandlingEdgeConnectivity_FieldPathSelectorPodSsh:
						mySubMasks[PolicySpecAIAgentHandlingEdgeConnectivity_FieldPathSelectorPodSsh] = FullPolicy_Spec_AIAgentHandling_EdgeConnectivity_PodSSH_FieldMask()
					}
				} else if tp, ok := path.(*PolicySpecAIAgentHandlingEdgeConnectivity_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &PolicySpecAIAgentHandlingEdgeConnectivity_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *Policy_Spec_AIAgentHandling_EdgeConnectivity_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*Policy_Spec_AIAgentHandling_EdgeConnectivity_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *Policy_Spec_AIAgentHandling_EdgeConnectivity_FieldMask) FilterInputFields() *Policy_Spec_AIAgentHandling_EdgeConnectivity_FieldMask {
	result := &Policy_Spec_AIAgentHandling_EdgeConnectivity_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *Policy_Spec_AIAgentHandling_EdgeConnectivity_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *Policy_Spec_AIAgentHandling_EdgeConnectivity_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]PolicySpecAIAgentHandlingEdgeConnectivity_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParsePolicySpecAIAgentHandlingEdgeConnectivity_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask Policy_Spec_AIAgentHandling_EdgeConnectivity_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *Policy_Spec_AIAgentHandling_EdgeConnectivity_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Policy_Spec_AIAgentHandling_EdgeConnectivity_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask Policy_Spec_AIAgentHandling_EdgeConnectivity_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *Policy_Spec_AIAgentHandling_EdgeConnectivity_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Policy_Spec_AIAgentHandling_EdgeConnectivity_FieldMask) AppendPath(path PolicySpecAIAgentHandlingEdgeConnectivity_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *Policy_Spec_AIAgentHandling_EdgeConnectivity_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(PolicySpecAIAgentHandlingEdgeConnectivity_FieldPath))
}

func (fieldMask *Policy_Spec_AIAgentHandling_EdgeConnectivity_FieldMask) GetPaths() []PolicySpecAIAgentHandlingEdgeConnectivity_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *Policy_Spec_AIAgentHandling_EdgeConnectivity_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *Policy_Spec_AIAgentHandling_EdgeConnectivity_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParsePolicySpecAIAgentHandlingEdgeConnectivity_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *Policy_Spec_AIAgentHandling_EdgeConnectivity_FieldMask) Set(target, source *Policy_Spec_AIAgentHandling_EdgeConnectivity) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *Policy_Spec_AIAgentHandling_EdgeConnectivity_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*Policy_Spec_AIAgentHandling_EdgeConnectivity), source.(*Policy_Spec_AIAgentHandling_EdgeConnectivity))
}

func (fieldMask *Policy_Spec_AIAgentHandling_EdgeConnectivity_FieldMask) Project(source *Policy_Spec_AIAgentHandling_EdgeConnectivity) *Policy_Spec_AIAgentHandling_EdgeConnectivity {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &Policy_Spec_AIAgentHandling_EdgeConnectivity{}
	deviceSshMask := &Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSSH_FieldMask{}
	wholeDeviceSshAccepted := false
	proxiesSshMask := &Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH_FieldMask{}
	wholeProxiesSshAccepted := false
	podSshMask := &Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSSH_FieldMask{}
	wholePodSshAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *PolicySpecAIAgentHandlingEdgeConnectivity_FieldTerminalPath:
			switch tp.selector {
			case PolicySpecAIAgentHandlingEdgeConnectivity_FieldPathSelectorDeviceSsh:
				if source, ok := source.Type.(*Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSsh); ok {
					result.Type = &Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSsh{
						DeviceSsh: source.DeviceSsh,
					}
				}
				wholeDeviceSshAccepted = true
			case PolicySpecAIAgentHandlingEdgeConnectivity_FieldPathSelectorProxiesSsh:
				if source, ok := source.Type.(*Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSsh); ok {
					result.Type = &Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSsh{
						ProxiesSsh: source.ProxiesSsh,
					}
				}
				wholeProxiesSshAccepted = true
			case PolicySpecAIAgentHandlingEdgeConnectivity_FieldPathSelectorPodSsh:
				if source, ok := source.Type.(*Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSsh); ok {
					result.Type = &Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSsh{
						PodSsh: source.PodSsh,
					}
				}
				wholePodSshAccepted = true
			case PolicySpecAIAgentHandlingEdgeConnectivity_FieldPathSelectorAllowedBins:
				result.AllowedBins = source.AllowedBins
			}
		case *PolicySpecAIAgentHandlingEdgeConnectivity_FieldSubPath:
			switch tp.selector {
			case PolicySpecAIAgentHandlingEdgeConnectivity_FieldPathSelectorDeviceSsh:
				deviceSshMask.AppendPath(tp.subPath.(PolicySpecAIAgentHandlingEdgeConnectivityDeviceSSH_FieldPath))
			case PolicySpecAIAgentHandlingEdgeConnectivity_FieldPathSelectorProxiesSsh:
				proxiesSshMask.AppendPath(tp.subPath.(PolicySpecAIAgentHandlingEdgeConnectivityProxiesSSH_FieldPath))
			case PolicySpecAIAgentHandlingEdgeConnectivity_FieldPathSelectorPodSsh:
				podSshMask.AppendPath(tp.subPath.(PolicySpecAIAgentHandlingEdgeConnectivityPodSSH_FieldPath))
			}
		}
	}
	if wholeDeviceSshAccepted == false && len(deviceSshMask.Paths) > 0 {
		if asOneOf, ok := source.Type.(*Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSsh); ok {
			result.Type = (*Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSsh)(nil)
			if asOneOf != nil {
				oneOfRes := &Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSsh{}
				oneOfRes.DeviceSsh = deviceSshMask.Project(asOneOf.DeviceSsh)
				result.Type = oneOfRes
			}
		}
	}
	if wholeProxiesSshAccepted == false && len(proxiesSshMask.Paths) > 0 {
		if asOneOf, ok := source.Type.(*Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSsh); ok {
			result.Type = (*Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSsh)(nil)
			if asOneOf != nil {
				oneOfRes := &Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSsh{}
				oneOfRes.ProxiesSsh = proxiesSshMask.Project(asOneOf.ProxiesSsh)
				result.Type = oneOfRes
			}
		}
	}
	if wholePodSshAccepted == false && len(podSshMask.Paths) > 0 {
		if asOneOf, ok := source.Type.(*Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSsh); ok {
			result.Type = (*Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSsh)(nil)
			if asOneOf != nil {
				oneOfRes := &Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSsh{}
				oneOfRes.PodSsh = podSshMask.Project(asOneOf.PodSsh)
				result.Type = oneOfRes
			}
		}
	}
	return result
}

func (fieldMask *Policy_Spec_AIAgentHandling_EdgeConnectivity_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*Policy_Spec_AIAgentHandling_EdgeConnectivity))
}

func (fieldMask *Policy_Spec_AIAgentHandling_EdgeConnectivity_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type Policy_Spec_AIAgentHandling_Remediation_FieldMask struct {
	Paths []PolicySpecAIAgentHandlingRemediation_FieldPath
}

func FullPolicy_Spec_AIAgentHandling_Remediation_FieldMask() *Policy_Spec_AIAgentHandling_Remediation_FieldMask {
	res := &Policy_Spec_AIAgentHandling_Remediation_FieldMask{}
	res.Paths = append(res.Paths, &PolicySpecAIAgentHandlingRemediation_FieldTerminalPath{selector: PolicySpecAIAgentHandlingRemediation_FieldPathSelectorFixInSsh})
	res.Paths = append(res.Paths, &PolicySpecAIAgentHandlingRemediation_FieldTerminalPath{selector: PolicySpecAIAgentHandlingRemediation_FieldPathSelectorReboot})
	return res
}

func (fieldMask *Policy_Spec_AIAgentHandling_Remediation_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

func (fieldMask *Policy_Spec_AIAgentHandling_Remediation_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*PolicySpecAIAgentHandlingRemediation_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *Policy_Spec_AIAgentHandling_Remediation_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParsePolicySpecAIAgentHandlingRemediation_FieldPath(raw)
	})
}

func (fieldMask *Policy_Spec_AIAgentHandling_Remediation_FieldMask) ProtoMessage() {}

func (fieldMask *Policy_Spec_AIAgentHandling_Remediation_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *Policy_Spec_AIAgentHandling_Remediation_FieldMask) Subtract(other *Policy_Spec_AIAgentHandling_Remediation_FieldMask) *Policy_Spec_AIAgentHandling_Remediation_FieldMask {
	result := &Policy_Spec_AIAgentHandling_Remediation_FieldMask{}
	removedSelectors := make([]bool, 2)
	otherSubMasks := map[PolicySpecAIAgentHandlingRemediation_FieldPathSelector]gotenobject.FieldMask{
		PolicySpecAIAgentHandlingRemediation_FieldPathSelectorFixInSsh: &Policy_Spec_AIAgentHandling_Remediation_FixInSSH_FieldMask{},
		PolicySpecAIAgentHandlingRemediation_FieldPathSelectorReboot:   &Policy_Spec_AIAgentHandling_Remediation_Reboot_FieldMask{},
	}
	mySubMasks := map[PolicySpecAIAgentHandlingRemediation_FieldPathSelector]gotenobject.FieldMask{
		PolicySpecAIAgentHandlingRemediation_FieldPathSelectorFixInSsh: &Policy_Spec_AIAgentHandling_Remediation_FixInSSH_FieldMask{},
		PolicySpecAIAgentHandlingRemediation_FieldPathSelectorReboot:   &Policy_Spec_AIAgentHandling_Remediation_Reboot_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *PolicySpecAIAgentHandlingRemediation_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *PolicySpecAIAgentHandlingRemediation_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*PolicySpecAIAgentHandlingRemediation_FieldTerminalPath); ok {
					switch tp.selector {
					case PolicySpecAIAgentHandlingRemediation_FieldPathSelectorFixInSsh:
						mySubMasks[PolicySpecAIAgentHandlingRemediation_FieldPathSelectorFixInSsh] = FullPolicy_Spec_AIAgentHandling_Remediation_FixInSSH_FieldMask()
					case PolicySpecAIAgentHandlingRemediation_FieldPathSelectorReboot:
						mySubMasks[PolicySpecAIAgentHandlingRemediation_FieldPathSelectorReboot] = FullPolicy_Spec_AIAgentHandling_Remediation_Reboot_FieldMask()
					}
				} else if tp, ok := path.(*PolicySpecAIAgentHandlingRemediation_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &PolicySpecAIAgentHandlingRemediation_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *Policy_Spec_AIAgentHandling_Remediation_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*Policy_Spec_AIAgentHandling_Remediation_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *Policy_Spec_AIAgentHandling_Remediation_FieldMask) FilterInputFields() *Policy_Spec_AIAgentHandling_Remediation_FieldMask {
	result := &Policy_Spec_AIAgentHandling_Remediation_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *Policy_Spec_AIAgentHandling_Remediation_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *Policy_Spec_AIAgentHandling_Remediation_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]PolicySpecAIAgentHandlingRemediation_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParsePolicySpecAIAgentHandlingRemediation_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask Policy_Spec_AIAgentHandling_Remediation_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *Policy_Spec_AIAgentHandling_Remediation_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Policy_Spec_AIAgentHandling_Remediation_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask Policy_Spec_AIAgentHandling_Remediation_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *Policy_Spec_AIAgentHandling_Remediation_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Policy_Spec_AIAgentHandling_Remediation_FieldMask) AppendPath(path PolicySpecAIAgentHandlingRemediation_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *Policy_Spec_AIAgentHandling_Remediation_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(PolicySpecAIAgentHandlingRemediation_FieldPath))
}

func (fieldMask *Policy_Spec_AIAgentHandling_Remediation_FieldMask) GetPaths() []PolicySpecAIAgentHandlingRemediation_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *Policy_Spec_AIAgentHandling_Remediation_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *Policy_Spec_AIAgentHandling_Remediation_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParsePolicySpecAIAgentHandlingRemediation_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *Policy_Spec_AIAgentHandling_Remediation_FieldMask) Set(target, source *Policy_Spec_AIAgentHandling_Remediation) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *Policy_Spec_AIAgentHandling_Remediation_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*Policy_Spec_AIAgentHandling_Remediation), source.(*Policy_Spec_AIAgentHandling_Remediation))
}

func (fieldMask *Policy_Spec_AIAgentHandling_Remediation_FieldMask) Project(source *Policy_Spec_AIAgentHandling_Remediation) *Policy_Spec_AIAgentHandling_Remediation {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &Policy_Spec_AIAgentHandling_Remediation{}
	fixInSshMask := &Policy_Spec_AIAgentHandling_Remediation_FixInSSH_FieldMask{}
	wholeFixInSshAccepted := false
	rebootMask := &Policy_Spec_AIAgentHandling_Remediation_Reboot_FieldMask{}
	wholeRebootAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *PolicySpecAIAgentHandlingRemediation_FieldTerminalPath:
			switch tp.selector {
			case PolicySpecAIAgentHandlingRemediation_FieldPathSelectorFixInSsh:
				if source, ok := source.Type.(*Policy_Spec_AIAgentHandling_Remediation_FixInSsh); ok {
					result.Type = &Policy_Spec_AIAgentHandling_Remediation_FixInSsh{
						FixInSsh: source.FixInSsh,
					}
				}
				wholeFixInSshAccepted = true
			case PolicySpecAIAgentHandlingRemediation_FieldPathSelectorReboot:
				if source, ok := source.Type.(*Policy_Spec_AIAgentHandling_Remediation_Reboot_); ok {
					result.Type = &Policy_Spec_AIAgentHandling_Remediation_Reboot_{
						Reboot: source.Reboot,
					}
				}
				wholeRebootAccepted = true
			}
		case *PolicySpecAIAgentHandlingRemediation_FieldSubPath:
			switch tp.selector {
			case PolicySpecAIAgentHandlingRemediation_FieldPathSelectorFixInSsh:
				fixInSshMask.AppendPath(tp.subPath.(PolicySpecAIAgentHandlingRemediationFixInSSH_FieldPath))
			case PolicySpecAIAgentHandlingRemediation_FieldPathSelectorReboot:
				rebootMask.AppendPath(tp.subPath.(PolicySpecAIAgentHandlingRemediationReboot_FieldPath))
			}
		}
	}
	if wholeFixInSshAccepted == false && len(fixInSshMask.Paths) > 0 {
		if asOneOf, ok := source.Type.(*Policy_Spec_AIAgentHandling_Remediation_FixInSsh); ok {
			result.Type = (*Policy_Spec_AIAgentHandling_Remediation_FixInSsh)(nil)
			if asOneOf != nil {
				oneOfRes := &Policy_Spec_AIAgentHandling_Remediation_FixInSsh{}
				oneOfRes.FixInSsh = fixInSshMask.Project(asOneOf.FixInSsh)
				result.Type = oneOfRes
			}
		}
	}
	if wholeRebootAccepted == false && len(rebootMask.Paths) > 0 {
		if asOneOf, ok := source.Type.(*Policy_Spec_AIAgentHandling_Remediation_Reboot_); ok {
			result.Type = (*Policy_Spec_AIAgentHandling_Remediation_Reboot_)(nil)
			if asOneOf != nil {
				oneOfRes := &Policy_Spec_AIAgentHandling_Remediation_Reboot_{}
				oneOfRes.Reboot = rebootMask.Project(asOneOf.Reboot)
				result.Type = oneOfRes
			}
		}
	}
	return result
}

func (fieldMask *Policy_Spec_AIAgentHandling_Remediation_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*Policy_Spec_AIAgentHandling_Remediation))
}

func (fieldMask *Policy_Spec_AIAgentHandling_Remediation_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSSH_FieldMask struct {
	Paths []PolicySpecAIAgentHandlingEdgeConnectivityDeviceSSH_FieldPath
}

func FullPolicy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSSH_FieldMask() *Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSSH_FieldMask {
	res := &Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSSH_FieldMask{}
	res.Paths = append(res.Paths, &PolicySpecAIAgentHandlingEdgeConnectivityDeviceSSH_FieldTerminalPath{selector: PolicySpecAIAgentHandlingEdgeConnectivityDeviceSSH_FieldPathSelectorClientName})
	return res
}

func (fieldMask *Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSSH_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

func (fieldMask *Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSSH_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 1)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*PolicySpecAIAgentHandlingEdgeConnectivityDeviceSSH_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSSH_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParsePolicySpecAIAgentHandlingEdgeConnectivityDeviceSSH_FieldPath(raw)
	})
}

func (fieldMask *Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSSH_FieldMask) ProtoMessage() {}

func (fieldMask *Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSSH_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSSH_FieldMask) Subtract(other *Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSSH_FieldMask) *Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSSH_FieldMask {
	result := &Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSSH_FieldMask{}
	removedSelectors := make([]bool, 1)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *PolicySpecAIAgentHandlingEdgeConnectivityDeviceSSH_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSSH_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSSH_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSSH_FieldMask) FilterInputFields() *Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSSH_FieldMask {
	result := &Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSSH_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSSH_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSSH_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]PolicySpecAIAgentHandlingEdgeConnectivityDeviceSSH_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParsePolicySpecAIAgentHandlingEdgeConnectivityDeviceSSH_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSSH_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSSH_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSSH_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSSH_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSSH_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSSH_FieldMask) AppendPath(path PolicySpecAIAgentHandlingEdgeConnectivityDeviceSSH_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSSH_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(PolicySpecAIAgentHandlingEdgeConnectivityDeviceSSH_FieldPath))
}

func (fieldMask *Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSSH_FieldMask) GetPaths() []PolicySpecAIAgentHandlingEdgeConnectivityDeviceSSH_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSSH_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSSH_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParsePolicySpecAIAgentHandlingEdgeConnectivityDeviceSSH_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSSH_FieldMask) Set(target, source *Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSSH) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSSH_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSSH), source.(*Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSSH))
}

func (fieldMask *Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSSH_FieldMask) Project(source *Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSSH) *Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSSH {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSSH{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *PolicySpecAIAgentHandlingEdgeConnectivityDeviceSSH_FieldTerminalPath:
			switch tp.selector {
			case PolicySpecAIAgentHandlingEdgeConnectivityDeviceSSH_FieldPathSelectorClientName:
				result.ClientName = source.ClientName
			}
		}
	}
	return result
}

func (fieldMask *Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSSH_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSSH))
}

func (fieldMask *Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSSH_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH_FieldMask struct {
	Paths []PolicySpecAIAgentHandlingEdgeConnectivityProxiesSSH_FieldPath
}

func FullPolicy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH_FieldMask() *Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH_FieldMask {
	res := &Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH_FieldMask{}
	res.Paths = append(res.Paths, &PolicySpecAIAgentHandlingEdgeConnectivityProxiesSSH_FieldTerminalPath{selector: PolicySpecAIAgentHandlingEdgeConnectivityProxiesSSH_FieldPathSelectorServiceDomain})
	res.Paths = append(res.Paths, &PolicySpecAIAgentHandlingEdgeConnectivityProxiesSSH_FieldTerminalPath{selector: PolicySpecAIAgentHandlingEdgeConnectivityProxiesSSH_FieldPathSelectorProviderNameTmpl})
	res.Paths = append(res.Paths, &PolicySpecAIAgentHandlingEdgeConnectivityProxiesSSH_FieldTerminalPath{selector: PolicySpecAIAgentHandlingEdgeConnectivityProxiesSSH_FieldPathSelectorClientName})
	res.Paths = append(res.Paths, &PolicySpecAIAgentHandlingEdgeConnectivityProxiesSSH_FieldTerminalPath{selector: PolicySpecAIAgentHandlingEdgeConnectivityProxiesSSH_FieldPathSelectorServiceName})
	return res
}

func (fieldMask *Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

func (fieldMask *Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 4)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*PolicySpecAIAgentHandlingEdgeConnectivityProxiesSSH_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParsePolicySpecAIAgentHandlingEdgeConnectivityProxiesSSH_FieldPath(raw)
	})
}

func (fieldMask *Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH_FieldMask) ProtoMessage() {}

func (fieldMask *Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH_FieldMask) Subtract(other *Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH_FieldMask) *Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH_FieldMask {
	result := &Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH_FieldMask{}
	removedSelectors := make([]bool, 4)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *PolicySpecAIAgentHandlingEdgeConnectivityProxiesSSH_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH_FieldMask) FilterInputFields() *Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH_FieldMask {
	result := &Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]PolicySpecAIAgentHandlingEdgeConnectivityProxiesSSH_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParsePolicySpecAIAgentHandlingEdgeConnectivityProxiesSSH_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH_FieldMask) AppendPath(path PolicySpecAIAgentHandlingEdgeConnectivityProxiesSSH_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(PolicySpecAIAgentHandlingEdgeConnectivityProxiesSSH_FieldPath))
}

func (fieldMask *Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH_FieldMask) GetPaths() []PolicySpecAIAgentHandlingEdgeConnectivityProxiesSSH_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParsePolicySpecAIAgentHandlingEdgeConnectivityProxiesSSH_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH_FieldMask) Set(target, source *Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH), source.(*Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH))
}

func (fieldMask *Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH_FieldMask) Project(source *Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH) *Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *PolicySpecAIAgentHandlingEdgeConnectivityProxiesSSH_FieldTerminalPath:
			switch tp.selector {
			case PolicySpecAIAgentHandlingEdgeConnectivityProxiesSSH_FieldPathSelectorServiceDomain:
				result.ServiceDomain = source.ServiceDomain
			case PolicySpecAIAgentHandlingEdgeConnectivityProxiesSSH_FieldPathSelectorProviderNameTmpl:
				result.ProviderNameTmpl = source.ProviderNameTmpl
			case PolicySpecAIAgentHandlingEdgeConnectivityProxiesSSH_FieldPathSelectorClientName:
				result.ClientName = source.ClientName
			case PolicySpecAIAgentHandlingEdgeConnectivityProxiesSSH_FieldPathSelectorServiceName:
				result.ServiceName = source.ServiceName
			}
		}
	}
	return result
}

func (fieldMask *Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH))
}

func (fieldMask *Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSSH_FieldMask struct {
	Paths []PolicySpecAIAgentHandlingEdgeConnectivityPodSSH_FieldPath
}

func FullPolicy_Spec_AIAgentHandling_EdgeConnectivity_PodSSH_FieldMask() *Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSSH_FieldMask {
	res := &Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSSH_FieldMask{}
	res.Paths = append(res.Paths, &PolicySpecAIAgentHandlingEdgeConnectivityPodSSH_FieldTerminalPath{selector: PolicySpecAIAgentHandlingEdgeConnectivityPodSSH_FieldPathSelectorClientName})
	res.Paths = append(res.Paths, &PolicySpecAIAgentHandlingEdgeConnectivityPodSSH_FieldTerminalPath{selector: PolicySpecAIAgentHandlingEdgeConnectivityPodSSH_FieldPathSelectorUsername})
	return res
}

func (fieldMask *Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSSH_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

func (fieldMask *Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSSH_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*PolicySpecAIAgentHandlingEdgeConnectivityPodSSH_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSSH_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParsePolicySpecAIAgentHandlingEdgeConnectivityPodSSH_FieldPath(raw)
	})
}

func (fieldMask *Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSSH_FieldMask) ProtoMessage() {}

func (fieldMask *Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSSH_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSSH_FieldMask) Subtract(other *Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSSH_FieldMask) *Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSSH_FieldMask {
	result := &Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSSH_FieldMask{}
	removedSelectors := make([]bool, 2)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *PolicySpecAIAgentHandlingEdgeConnectivityPodSSH_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSSH_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSSH_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSSH_FieldMask) FilterInputFields() *Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSSH_FieldMask {
	result := &Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSSH_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSSH_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSSH_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]PolicySpecAIAgentHandlingEdgeConnectivityPodSSH_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParsePolicySpecAIAgentHandlingEdgeConnectivityPodSSH_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSSH_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSSH_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSSH_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSSH_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSSH_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSSH_FieldMask) AppendPath(path PolicySpecAIAgentHandlingEdgeConnectivityPodSSH_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSSH_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(PolicySpecAIAgentHandlingEdgeConnectivityPodSSH_FieldPath))
}

func (fieldMask *Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSSH_FieldMask) GetPaths() []PolicySpecAIAgentHandlingEdgeConnectivityPodSSH_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSSH_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSSH_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParsePolicySpecAIAgentHandlingEdgeConnectivityPodSSH_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSSH_FieldMask) Set(target, source *Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSSH) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSSH_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSSH), source.(*Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSSH))
}

func (fieldMask *Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSSH_FieldMask) Project(source *Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSSH) *Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSSH {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSSH{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *PolicySpecAIAgentHandlingEdgeConnectivityPodSSH_FieldTerminalPath:
			switch tp.selector {
			case PolicySpecAIAgentHandlingEdgeConnectivityPodSSH_FieldPathSelectorClientName:
				result.ClientName = source.ClientName
			case PolicySpecAIAgentHandlingEdgeConnectivityPodSSH_FieldPathSelectorUsername:
				result.Username = source.Username
			}
		}
	}
	return result
}

func (fieldMask *Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSSH_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSSH))
}

func (fieldMask *Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSSH_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type Policy_Spec_AIAgentHandling_Remediation_FixInSSH_FieldMask struct {
	Paths []PolicySpecAIAgentHandlingRemediationFixInSSH_FieldPath
}

func FullPolicy_Spec_AIAgentHandling_Remediation_FixInSSH_FieldMask() *Policy_Spec_AIAgentHandling_Remediation_FixInSSH_FieldMask {
	res := &Policy_Spec_AIAgentHandling_Remediation_FixInSSH_FieldMask{}
	return res
}

func (fieldMask *Policy_Spec_AIAgentHandling_Remediation_FixInSSH_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

func (fieldMask *Policy_Spec_AIAgentHandling_Remediation_FixInSSH_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 0)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*PolicySpecAIAgentHandlingRemediationFixInSSH_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *Policy_Spec_AIAgentHandling_Remediation_FixInSSH_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParsePolicySpecAIAgentHandlingRemediationFixInSSH_FieldPath(raw)
	})
}

func (fieldMask *Policy_Spec_AIAgentHandling_Remediation_FixInSSH_FieldMask) ProtoMessage() {}

func (fieldMask *Policy_Spec_AIAgentHandling_Remediation_FixInSSH_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *Policy_Spec_AIAgentHandling_Remediation_FixInSSH_FieldMask) Subtract(other *Policy_Spec_AIAgentHandling_Remediation_FixInSSH_FieldMask) *Policy_Spec_AIAgentHandling_Remediation_FixInSSH_FieldMask {
	result := &Policy_Spec_AIAgentHandling_Remediation_FixInSSH_FieldMask{}
	removedSelectors := make([]bool, 0)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *PolicySpecAIAgentHandlingRemediationFixInSSH_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *Policy_Spec_AIAgentHandling_Remediation_FixInSSH_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*Policy_Spec_AIAgentHandling_Remediation_FixInSSH_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *Policy_Spec_AIAgentHandling_Remediation_FixInSSH_FieldMask) FilterInputFields() *Policy_Spec_AIAgentHandling_Remediation_FixInSSH_FieldMask {
	result := &Policy_Spec_AIAgentHandling_Remediation_FixInSSH_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *Policy_Spec_AIAgentHandling_Remediation_FixInSSH_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *Policy_Spec_AIAgentHandling_Remediation_FixInSSH_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]PolicySpecAIAgentHandlingRemediationFixInSSH_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParsePolicySpecAIAgentHandlingRemediationFixInSSH_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask Policy_Spec_AIAgentHandling_Remediation_FixInSSH_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *Policy_Spec_AIAgentHandling_Remediation_FixInSSH_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Policy_Spec_AIAgentHandling_Remediation_FixInSSH_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask Policy_Spec_AIAgentHandling_Remediation_FixInSSH_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *Policy_Spec_AIAgentHandling_Remediation_FixInSSH_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Policy_Spec_AIAgentHandling_Remediation_FixInSSH_FieldMask) AppendPath(path PolicySpecAIAgentHandlingRemediationFixInSSH_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *Policy_Spec_AIAgentHandling_Remediation_FixInSSH_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(PolicySpecAIAgentHandlingRemediationFixInSSH_FieldPath))
}

func (fieldMask *Policy_Spec_AIAgentHandling_Remediation_FixInSSH_FieldMask) GetPaths() []PolicySpecAIAgentHandlingRemediationFixInSSH_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *Policy_Spec_AIAgentHandling_Remediation_FixInSSH_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *Policy_Spec_AIAgentHandling_Remediation_FixInSSH_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParsePolicySpecAIAgentHandlingRemediationFixInSSH_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *Policy_Spec_AIAgentHandling_Remediation_FixInSSH_FieldMask) Set(target, source *Policy_Spec_AIAgentHandling_Remediation_FixInSSH) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *Policy_Spec_AIAgentHandling_Remediation_FixInSSH_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*Policy_Spec_AIAgentHandling_Remediation_FixInSSH), source.(*Policy_Spec_AIAgentHandling_Remediation_FixInSSH))
}

func (fieldMask *Policy_Spec_AIAgentHandling_Remediation_FixInSSH_FieldMask) Project(source *Policy_Spec_AIAgentHandling_Remediation_FixInSSH) *Policy_Spec_AIAgentHandling_Remediation_FixInSSH {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &Policy_Spec_AIAgentHandling_Remediation_FixInSSH{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *PolicySpecAIAgentHandlingRemediationFixInSSH_FieldTerminalPath:
			switch tp.selector {
			}
		}
	}
	return result
}

func (fieldMask *Policy_Spec_AIAgentHandling_Remediation_FixInSSH_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*Policy_Spec_AIAgentHandling_Remediation_FixInSSH))
}

func (fieldMask *Policy_Spec_AIAgentHandling_Remediation_FixInSSH_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type Policy_Spec_AIAgentHandling_Remediation_Reboot_FieldMask struct {
	Paths []PolicySpecAIAgentHandlingRemediationReboot_FieldPath
}

func FullPolicy_Spec_AIAgentHandling_Remediation_Reboot_FieldMask() *Policy_Spec_AIAgentHandling_Remediation_Reboot_FieldMask {
	res := &Policy_Spec_AIAgentHandling_Remediation_Reboot_FieldMask{}
	return res
}

func (fieldMask *Policy_Spec_AIAgentHandling_Remediation_Reboot_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

func (fieldMask *Policy_Spec_AIAgentHandling_Remediation_Reboot_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 0)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*PolicySpecAIAgentHandlingRemediationReboot_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *Policy_Spec_AIAgentHandling_Remediation_Reboot_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParsePolicySpecAIAgentHandlingRemediationReboot_FieldPath(raw)
	})
}

func (fieldMask *Policy_Spec_AIAgentHandling_Remediation_Reboot_FieldMask) ProtoMessage() {}

func (fieldMask *Policy_Spec_AIAgentHandling_Remediation_Reboot_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *Policy_Spec_AIAgentHandling_Remediation_Reboot_FieldMask) Subtract(other *Policy_Spec_AIAgentHandling_Remediation_Reboot_FieldMask) *Policy_Spec_AIAgentHandling_Remediation_Reboot_FieldMask {
	result := &Policy_Spec_AIAgentHandling_Remediation_Reboot_FieldMask{}
	removedSelectors := make([]bool, 0)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *PolicySpecAIAgentHandlingRemediationReboot_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *Policy_Spec_AIAgentHandling_Remediation_Reboot_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*Policy_Spec_AIAgentHandling_Remediation_Reboot_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *Policy_Spec_AIAgentHandling_Remediation_Reboot_FieldMask) FilterInputFields() *Policy_Spec_AIAgentHandling_Remediation_Reboot_FieldMask {
	result := &Policy_Spec_AIAgentHandling_Remediation_Reboot_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *Policy_Spec_AIAgentHandling_Remediation_Reboot_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *Policy_Spec_AIAgentHandling_Remediation_Reboot_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]PolicySpecAIAgentHandlingRemediationReboot_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParsePolicySpecAIAgentHandlingRemediationReboot_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask Policy_Spec_AIAgentHandling_Remediation_Reboot_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *Policy_Spec_AIAgentHandling_Remediation_Reboot_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Policy_Spec_AIAgentHandling_Remediation_Reboot_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask Policy_Spec_AIAgentHandling_Remediation_Reboot_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *Policy_Spec_AIAgentHandling_Remediation_Reboot_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Policy_Spec_AIAgentHandling_Remediation_Reboot_FieldMask) AppendPath(path PolicySpecAIAgentHandlingRemediationReboot_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *Policy_Spec_AIAgentHandling_Remediation_Reboot_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(PolicySpecAIAgentHandlingRemediationReboot_FieldPath))
}

func (fieldMask *Policy_Spec_AIAgentHandling_Remediation_Reboot_FieldMask) GetPaths() []PolicySpecAIAgentHandlingRemediationReboot_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *Policy_Spec_AIAgentHandling_Remediation_Reboot_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *Policy_Spec_AIAgentHandling_Remediation_Reboot_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParsePolicySpecAIAgentHandlingRemediationReboot_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *Policy_Spec_AIAgentHandling_Remediation_Reboot_FieldMask) Set(target, source *Policy_Spec_AIAgentHandling_Remediation_Reboot) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *Policy_Spec_AIAgentHandling_Remediation_Reboot_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*Policy_Spec_AIAgentHandling_Remediation_Reboot), source.(*Policy_Spec_AIAgentHandling_Remediation_Reboot))
}

func (fieldMask *Policy_Spec_AIAgentHandling_Remediation_Reboot_FieldMask) Project(source *Policy_Spec_AIAgentHandling_Remediation_Reboot) *Policy_Spec_AIAgentHandling_Remediation_Reboot {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &Policy_Spec_AIAgentHandling_Remediation_Reboot{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *PolicySpecAIAgentHandlingRemediationReboot_FieldTerminalPath:
			switch tp.selector {
			}
		}
	}
	return result
}

func (fieldMask *Policy_Spec_AIAgentHandling_Remediation_Reboot_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*Policy_Spec_AIAgentHandling_Remediation_Reboot))
}

func (fieldMask *Policy_Spec_AIAgentHandling_Remediation_Reboot_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}
