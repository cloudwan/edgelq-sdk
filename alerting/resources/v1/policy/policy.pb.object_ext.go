// Code generated by protoc-gen-goten-object
// File: edgelq/alerting/proto/v1/policy.proto
// DO NOT EDIT!!!

package policy

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	googlefieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	rcommon "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/common"
	document "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/document"
	policy_template "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/policy_template"
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1/project"
	meta "github.com/cloudwan/goten-sdk/types/meta"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = googlefieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &document.Document{}
	_ = &policy_template.PolicyTemplate{}
	_ = &rcommon.LogCndSpec{}
	_ = &iam_project.Project{}
	_ = &fieldmaskpb.FieldMask{}
	_ = &meta.Meta{}
)

func (o *Policy) GotenObjectExt() {}

func (o *Policy) MakeFullFieldMask() *Policy_FieldMask {
	return FullPolicy_FieldMask()
}

func (o *Policy) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullPolicy_FieldMask()
}

func (o *Policy) MakeDiffFieldMask(other *Policy) *Policy_FieldMask {
	if o == nil && other == nil {
		return &Policy_FieldMask{}
	}
	if o == nil || other == nil {
		return FullPolicy_FieldMask()
	}

	res := &Policy_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &Policy_FieldTerminalPath{selector: Policy_FieldPathSelectorName})
	}
	{
		subMask := o.GetMetadata().MakeDiffFieldMask(other.GetMetadata())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &Policy_FieldTerminalPath{selector: Policy_FieldPathSelectorMetadata})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &Policy_FieldSubPath{selector: Policy_FieldPathSelectorMetadata, subPath: subpath})
			}
		}
	}
	if o.GetDisplayName() != other.GetDisplayName() {
		res.Paths = append(res.Paths, &Policy_FieldTerminalPath{selector: Policy_FieldPathSelectorDisplayName})
	}
	if o.GetDescription() != other.GetDescription() {
		res.Paths = append(res.Paths, &Policy_FieldTerminalPath{selector: Policy_FieldPathSelectorDescription})
	}

	if len(o.GetSupportingDocs()) == len(other.GetSupportingDocs()) {
		for i, lValue := range o.GetSupportingDocs() {
			rValue := other.GetSupportingDocs()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &Policy_FieldTerminalPath{selector: Policy_FieldPathSelectorSupportingDocs})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &Policy_FieldTerminalPath{selector: Policy_FieldPathSelectorSupportingDocs})
	}
	{
		subMask := o.GetSpec().MakeDiffFieldMask(other.GetSpec())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &Policy_FieldTerminalPath{selector: Policy_FieldPathSelectorSpec})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &Policy_FieldSubPath{selector: Policy_FieldPathSelectorSpec, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetTemplateSource().MakeDiffFieldMask(other.GetTemplateSource())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &Policy_FieldTerminalPath{selector: Policy_FieldPathSelectorTemplateSource})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &Policy_FieldSubPath{selector: Policy_FieldPathSelectorTemplateSource, subPath: subpath})
			}
		}
	}
	return res
}

func (o *Policy) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Policy))
}

func (o *Policy) Clone() *Policy {
	if o == nil {
		return nil
	}
	result := &Policy{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &Name{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Metadata = o.Metadata.Clone()
	result.DisplayName = o.DisplayName
	result.Description = o.Description
	result.SupportingDocs = make([]*document.Reference, len(o.SupportingDocs))
	for i, sourceValue := range o.SupportingDocs {
		if sourceValue == nil {
			result.SupportingDocs[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.SupportingDocs[i] = &document.Reference{}
			if err := result.SupportingDocs[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	result.Spec = o.Spec.Clone()
	result.TemplateSource = o.TemplateSource.Clone()
	return result
}

func (o *Policy) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Policy) Merge(source *Policy) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &Name{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetMetadata() != nil {
		if o.Metadata == nil {
			o.Metadata = new(meta.Meta)
		}
		o.Metadata.Merge(source.GetMetadata())
	}
	o.DisplayName = source.GetDisplayName()
	o.Description = source.GetDescription()
	for _, sourceValue := range source.GetSupportingDocs() {
		exists := false
		for _, currentValue := range o.SupportingDocs {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *document.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &document.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.SupportingDocs = append(o.SupportingDocs, newDstElement)
		}
	}

	if source.GetSpec() != nil {
		if o.Spec == nil {
			o.Spec = new(rcommon.PolicySpec)
		}
		o.Spec.Merge(source.GetSpec())
	}
	if source.GetTemplateSource() != nil {
		if o.TemplateSource == nil {
			o.TemplateSource = new(Policy_TemplateSource)
		}
		o.TemplateSource.Merge(source.GetTemplateSource())
	}
}

func (o *Policy) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Policy))
}

func (o *Policy_TemplateSource) GotenObjectExt() {}

func (o *Policy_TemplateSource) MakeFullFieldMask() *Policy_TemplateSource_FieldMask {
	return FullPolicy_TemplateSource_FieldMask()
}

func (o *Policy_TemplateSource) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullPolicy_TemplateSource_FieldMask()
}

func (o *Policy_TemplateSource) MakeDiffFieldMask(other *Policy_TemplateSource) *Policy_TemplateSource_FieldMask {
	if o == nil && other == nil {
		return &Policy_TemplateSource_FieldMask{}
	}
	if o == nil || other == nil {
		return FullPolicy_TemplateSource_FieldMask()
	}

	res := &Policy_TemplateSource_FieldMask{}
	if o.GetTemplate().String() != other.GetTemplate().String() {
		res.Paths = append(res.Paths, &PolicyTemplateSource_FieldTerminalPath{selector: PolicyTemplateSource_FieldPathSelectorTemplate})
	}
	if !proto.Equal(o.GetUpdatedFields(), other.GetUpdatedFields()) {
		res.Paths = append(res.Paths, &PolicyTemplateSource_FieldTerminalPath{selector: PolicyTemplateSource_FieldPathSelectorUpdatedFields})
	}
	return res
}

func (o *Policy_TemplateSource) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Policy_TemplateSource))
}

func (o *Policy_TemplateSource) Clone() *Policy_TemplateSource {
	if o == nil {
		return nil
	}
	result := &Policy_TemplateSource{}
	if o.Template == nil {
		result.Template = nil
	} else if data, err := o.Template.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Template = &policy_template.Reference{}
		if err := result.Template.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.UpdatedFields = proto.Clone(o.UpdatedFields).(*fieldmaskpb.FieldMask)
	return result
}

func (o *Policy_TemplateSource) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Policy_TemplateSource) Merge(source *Policy_TemplateSource) {
	if source.GetTemplate() != nil {
		if data, err := source.GetTemplate().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Template = &policy_template.Reference{}
			if err := o.Template.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Template = nil
	}
	if source.GetUpdatedFields() != nil {
		if o.UpdatedFields == nil {
			o.UpdatedFields = new(fieldmaskpb.FieldMask)
		}
		proto.Merge(o.UpdatedFields, source.GetUpdatedFields())
	}
}

func (o *Policy_TemplateSource) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Policy_TemplateSource))
}
