// Code generated by protoc-gen-goten-object
// File: edgelq/alerting/proto/v1/policy.proto
// DO NOT EDIT!!!

package policy

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	googlefieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	document "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/document"
	notification_channel "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/notification_channel"
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1/project"
	monitoring_common "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/common"
	meta_resource "github.com/cloudwan/goten-sdk/meta-service/resources/v1/resource"
	meta "github.com/cloudwan/goten-sdk/types/meta"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = googlefieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &document.Document{}
	_ = &notification_channel.NotificationChannel{}
	_ = &iam_project.Project{}
	_ = &monitoring_common.LabelDescriptor{}
	_ = &meta_resource.Resource{}
	_ = &meta.Meta{}
)

func (o *Policy) GotenObjectExt() {}

func (o *Policy) MakeFullFieldMask() *Policy_FieldMask {
	return FullPolicy_FieldMask()
}

func (o *Policy) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullPolicy_FieldMask()
}

func (o *Policy) MakeDiffFieldMask(other *Policy) *Policy_FieldMask {
	if o == nil && other == nil {
		return &Policy_FieldMask{}
	}
	if o == nil || other == nil {
		return FullPolicy_FieldMask()
	}

	res := &Policy_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &Policy_FieldTerminalPath{selector: Policy_FieldPathSelectorName})
	}
	{
		subMask := o.GetMetadata().MakeDiffFieldMask(other.GetMetadata())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &Policy_FieldTerminalPath{selector: Policy_FieldPathSelectorMetadata})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &Policy_FieldSubPath{selector: Policy_FieldPathSelectorMetadata, subPath: subpath})
			}
		}
	}
	if o.GetDisplayName() != other.GetDisplayName() {
		res.Paths = append(res.Paths, &Policy_FieldTerminalPath{selector: Policy_FieldPathSelectorDisplayName})
	}
	if o.GetDescription() != other.GetDescription() {
		res.Paths = append(res.Paths, &Policy_FieldTerminalPath{selector: Policy_FieldPathSelectorDescription})
	}

	if len(o.GetSupportingDocs()) == len(other.GetSupportingDocs()) {
		for i, lValue := range o.GetSupportingDocs() {
			rValue := other.GetSupportingDocs()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &Policy_FieldTerminalPath{selector: Policy_FieldPathSelectorSupportingDocs})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &Policy_FieldTerminalPath{selector: Policy_FieldPathSelectorSupportingDocs})
	}
	{
		subMask := o.GetSpec().MakeDiffFieldMask(other.GetSpec())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &Policy_FieldTerminalPath{selector: Policy_FieldPathSelectorSpec})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &Policy_FieldSubPath{selector: Policy_FieldPathSelectorSpec, subPath: subpath})
			}
		}
	}
	return res
}

func (o *Policy) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Policy))
}

func (o *Policy) Clone() *Policy {
	if o == nil {
		return nil
	}
	result := &Policy{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &Name{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Metadata = o.Metadata.Clone()
	result.DisplayName = o.DisplayName
	result.Description = o.Description
	result.SupportingDocs = make([]*document.Reference, len(o.SupportingDocs))
	for i, sourceValue := range o.SupportingDocs {
		if sourceValue == nil {
			result.SupportingDocs[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.SupportingDocs[i] = &document.Reference{}
			if err := result.SupportingDocs[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	result.Spec = o.Spec.Clone()
	return result
}

func (o *Policy) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Policy) Merge(source *Policy) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &Name{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetMetadata() != nil {
		if o.Metadata == nil {
			o.Metadata = new(meta.Meta)
		}
		o.Metadata.Merge(source.GetMetadata())
	}
	o.DisplayName = source.GetDisplayName()
	o.Description = source.GetDescription()
	for _, sourceValue := range source.GetSupportingDocs() {
		exists := false
		for _, currentValue := range o.SupportingDocs {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *document.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &document.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.SupportingDocs = append(o.SupportingDocs, newDstElement)
		}
	}

	if source.GetSpec() != nil {
		if o.Spec == nil {
			o.Spec = new(Policy_Spec)
		}
		o.Spec.Merge(source.GetSpec())
	}
}

func (o *Policy) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Policy))
}

func (o *Policy_Spec) GotenObjectExt() {}

func (o *Policy_Spec) MakeFullFieldMask() *Policy_Spec_FieldMask {
	return FullPolicy_Spec_FieldMask()
}

func (o *Policy_Spec) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullPolicy_Spec_FieldMask()
}

func (o *Policy_Spec) MakeDiffFieldMask(other *Policy_Spec) *Policy_Spec_FieldMask {
	if o == nil && other == nil {
		return &Policy_Spec_FieldMask{}
	}
	if o == nil || other == nil {
		return FullPolicy_Spec_FieldMask()
	}

	res := &Policy_Spec_FieldMask{}
	if o.GetEnabled() != other.GetEnabled() {
		res.Paths = append(res.Paths, &PolicySpec_FieldTerminalPath{selector: PolicySpec_FieldPathSelectorEnabled})
	}
	if o.GetProcessingLocation() != other.GetProcessingLocation() {
		res.Paths = append(res.Paths, &PolicySpec_FieldTerminalPath{selector: PolicySpec_FieldPathSelectorProcessingLocation})
	}

	if len(o.GetNotifications()) == len(other.GetNotifications()) {
		for i, lValue := range o.GetNotifications() {
			rValue := other.GetNotifications()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &PolicySpec_FieldTerminalPath{selector: PolicySpec_FieldPathSelectorNotifications})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &PolicySpec_FieldTerminalPath{selector: PolicySpec_FieldPathSelectorNotifications})
	}
	{
		subMask := o.GetResourceIdentity().MakeDiffFieldMask(other.GetResourceIdentity())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &PolicySpec_FieldTerminalPath{selector: PolicySpec_FieldPathSelectorResourceIdentity})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &PolicySpec_FieldSubPath{selector: PolicySpec_FieldPathSelectorResourceIdentity, subPath: subpath})
			}
		}
	}

	if len(o.GetSupportingQueries()) == len(other.GetSupportingQueries()) {
		for i, lValue := range o.GetSupportingQueries() {
			rValue := other.GetSupportingQueries()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &PolicySpec_FieldTerminalPath{selector: PolicySpec_FieldPathSelectorSupportingQueries})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &PolicySpec_FieldTerminalPath{selector: PolicySpec_FieldPathSelectorSupportingQueries})
	}
	{
		subMask := o.GetAiAgent().MakeDiffFieldMask(other.GetAiAgent())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &PolicySpec_FieldTerminalPath{selector: PolicySpec_FieldPathSelectorAiAgent})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &PolicySpec_FieldSubPath{selector: PolicySpec_FieldPathSelectorAiAgent, subPath: subpath})
			}
		}
	}
	return res
}

func (o *Policy_Spec) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Policy_Spec))
}

func (o *Policy_Spec) Clone() *Policy_Spec {
	if o == nil {
		return nil
	}
	result := &Policy_Spec{}
	result.Enabled = o.Enabled
	result.ProcessingLocation = o.ProcessingLocation
	result.Notifications = make([]*Policy_Spec_Notification, len(o.Notifications))
	for i, sourceValue := range o.Notifications {
		result.Notifications[i] = sourceValue.Clone()
	}
	result.ResourceIdentity = o.ResourceIdentity.Clone()
	result.SupportingQueries = make([]*Policy_Spec_SupportingAlertQuery, len(o.SupportingQueries))
	for i, sourceValue := range o.SupportingQueries {
		result.SupportingQueries[i] = sourceValue.Clone()
	}
	result.AiAgent = o.AiAgent.Clone()
	return result
}

func (o *Policy_Spec) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Policy_Spec) Merge(source *Policy_Spec) {
	o.Enabled = source.GetEnabled()
	o.ProcessingLocation = source.GetProcessingLocation()
	for _, sourceValue := range source.GetNotifications() {
		exists := false
		for _, currentValue := range o.Notifications {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *Policy_Spec_Notification
			if sourceValue != nil {
				newDstElement = new(Policy_Spec_Notification)
				newDstElement.Merge(sourceValue)
			}
			o.Notifications = append(o.Notifications, newDstElement)
		}
	}

	if source.GetResourceIdentity() != nil {
		if o.ResourceIdentity == nil {
			o.ResourceIdentity = new(Policy_Spec_ResourceIdentity)
		}
		o.ResourceIdentity.Merge(source.GetResourceIdentity())
	}
	for _, sourceValue := range source.GetSupportingQueries() {
		exists := false
		for _, currentValue := range o.SupportingQueries {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *Policy_Spec_SupportingAlertQuery
			if sourceValue != nil {
				newDstElement = new(Policy_Spec_SupportingAlertQuery)
				newDstElement.Merge(sourceValue)
			}
			o.SupportingQueries = append(o.SupportingQueries, newDstElement)
		}
	}

	if source.GetAiAgent() != nil {
		if o.AiAgent == nil {
			o.AiAgent = new(Policy_Spec_AIAgentHandling)
		}
		o.AiAgent.Merge(source.GetAiAgent())
	}
}

func (o *Policy_Spec) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Policy_Spec))
}

func (o *Policy_Spec_Notification) GotenObjectExt() {}

func (o *Policy_Spec_Notification) MakeFullFieldMask() *Policy_Spec_Notification_FieldMask {
	return FullPolicy_Spec_Notification_FieldMask()
}

func (o *Policy_Spec_Notification) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullPolicy_Spec_Notification_FieldMask()
}

func (o *Policy_Spec_Notification) MakeDiffFieldMask(other *Policy_Spec_Notification) *Policy_Spec_Notification_FieldMask {
	if o == nil && other == nil {
		return &Policy_Spec_Notification_FieldMask{}
	}
	if o == nil || other == nil {
		return FullPolicy_Spec_Notification_FieldMask()
	}

	res := &Policy_Spec_Notification_FieldMask{}

	if len(o.GetEnabledKinds()) == len(other.GetEnabledKinds()) {
		for i, lValue := range o.GetEnabledKinds() {
			rValue := other.GetEnabledKinds()[i]
			if lValue != rValue {
				res.Paths = append(res.Paths, &PolicySpecNotification_FieldTerminalPath{selector: PolicySpecNotification_FieldPathSelectorEnabledKinds})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &PolicySpecNotification_FieldTerminalPath{selector: PolicySpecNotification_FieldPathSelectorEnabledKinds})
	}
	if o.GetChannel().String() != other.GetChannel().String() {
		res.Paths = append(res.Paths, &PolicySpecNotification_FieldTerminalPath{selector: PolicySpecNotification_FieldPathSelectorChannel})
	}
	if o.GetMaxAlertBodiesInMsg() != other.GetMaxAlertBodiesInMsg() {
		res.Paths = append(res.Paths, &PolicySpecNotification_FieldTerminalPath{selector: PolicySpecNotification_FieldPathSelectorMaxAlertBodiesInMsg})
	}
	if o.GetPutOnlyAlertsCounterWhenOverflowing() != other.GetPutOnlyAlertsCounterWhenOverflowing() {
		res.Paths = append(res.Paths, &PolicySpecNotification_FieldTerminalPath{selector: PolicySpecNotification_FieldPathSelectorPutOnlyAlertsCounterWhenOverflowing})
	}
	return res
}

func (o *Policy_Spec_Notification) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Policy_Spec_Notification))
}

func (o *Policy_Spec_Notification) Clone() *Policy_Spec_Notification {
	if o == nil {
		return nil
	}
	result := &Policy_Spec_Notification{}
	result.EnabledKinds = make([]Policy_Spec_Notification_Kind, len(o.EnabledKinds))
	for i, sourceValue := range o.EnabledKinds {
		result.EnabledKinds[i] = sourceValue
	}
	if o.Channel == nil {
		result.Channel = nil
	} else if data, err := o.Channel.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Channel = &notification_channel.Reference{}
		if err := result.Channel.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.MaxAlertBodiesInMsg = o.MaxAlertBodiesInMsg
	result.PutOnlyAlertsCounterWhenOverflowing = o.PutOnlyAlertsCounterWhenOverflowing
	return result
}

func (o *Policy_Spec_Notification) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Policy_Spec_Notification) Merge(source *Policy_Spec_Notification) {
	for _, sourceValue := range source.GetEnabledKinds() {
		exists := false
		for _, currentValue := range o.EnabledKinds {
			if currentValue == sourceValue {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement Policy_Spec_Notification_Kind
			newDstElement = sourceValue
			o.EnabledKinds = append(o.EnabledKinds, newDstElement)
		}
	}

	if source.GetChannel() != nil {
		if data, err := source.GetChannel().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Channel = &notification_channel.Reference{}
			if err := o.Channel.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Channel = nil
	}
	o.MaxAlertBodiesInMsg = source.GetMaxAlertBodiesInMsg()
	o.PutOnlyAlertsCounterWhenOverflowing = source.GetPutOnlyAlertsCounterWhenOverflowing()
}

func (o *Policy_Spec_Notification) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Policy_Spec_Notification))
}

func (o *Policy_Spec_ResourceIdentity) GotenObjectExt() {}

func (o *Policy_Spec_ResourceIdentity) MakeFullFieldMask() *Policy_Spec_ResourceIdentity_FieldMask {
	return FullPolicy_Spec_ResourceIdentity_FieldMask()
}

func (o *Policy_Spec_ResourceIdentity) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullPolicy_Spec_ResourceIdentity_FieldMask()
}

func (o *Policy_Spec_ResourceIdentity) MakeDiffFieldMask(other *Policy_Spec_ResourceIdentity) *Policy_Spec_ResourceIdentity_FieldMask {
	if o == nil && other == nil {
		return &Policy_Spec_ResourceIdentity_FieldMask{}
	}
	if o == nil || other == nil {
		return FullPolicy_Spec_ResourceIdentity_FieldMask()
	}

	res := &Policy_Spec_ResourceIdentity_FieldMask{}
	if o.GetAlertingResource().String() != other.GetAlertingResource().String() {
		res.Paths = append(res.Paths, &PolicySpecResourceIdentity_FieldTerminalPath{selector: PolicySpecResourceIdentity_FieldPathSelectorAlertingResource})
	}

	if len(o.GetLabels()) == len(other.GetLabels()) {
		for i, lValue := range o.GetLabels() {
			rValue := other.GetLabels()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &PolicySpecResourceIdentity_FieldTerminalPath{selector: PolicySpecResourceIdentity_FieldPathSelectorLabels})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &PolicySpecResourceIdentity_FieldTerminalPath{selector: PolicySpecResourceIdentity_FieldPathSelectorLabels})
	}

	if len(o.GetNamePatterns()) == len(other.GetNamePatterns()) {
		for i, lValue := range o.GetNamePatterns() {
			rValue := other.GetNamePatterns()[i]
			if lValue != rValue {
				res.Paths = append(res.Paths, &PolicySpecResourceIdentity_FieldTerminalPath{selector: PolicySpecResourceIdentity_FieldPathSelectorNamePatterns})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &PolicySpecResourceIdentity_FieldTerminalPath{selector: PolicySpecResourceIdentity_FieldPathSelectorNamePatterns})
	}
	return res
}

func (o *Policy_Spec_ResourceIdentity) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Policy_Spec_ResourceIdentity))
}

func (o *Policy_Spec_ResourceIdentity) Clone() *Policy_Spec_ResourceIdentity {
	if o == nil {
		return nil
	}
	result := &Policy_Spec_ResourceIdentity{}
	if o.AlertingResource == nil {
		result.AlertingResource = nil
	} else if data, err := o.AlertingResource.ProtoString(); err != nil {
		panic(err)
	} else {
		result.AlertingResource = &meta_resource.Reference{}
		if err := result.AlertingResource.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Labels = make([]*Policy_Spec_ResourceIdentity_LabelInfo, len(o.Labels))
	for i, sourceValue := range o.Labels {
		result.Labels[i] = sourceValue.Clone()
	}
	result.NamePatterns = make([]string, len(o.NamePatterns))
	for i, sourceValue := range o.NamePatterns {
		result.NamePatterns[i] = sourceValue
	}
	return result
}

func (o *Policy_Spec_ResourceIdentity) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Policy_Spec_ResourceIdentity) Merge(source *Policy_Spec_ResourceIdentity) {
	if source.GetAlertingResource() != nil {
		if data, err := source.GetAlertingResource().ProtoString(); err != nil {
			panic(err)
		} else {
			o.AlertingResource = &meta_resource.Reference{}
			if err := o.AlertingResource.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.AlertingResource = nil
	}
	for _, sourceValue := range source.GetLabels() {
		exists := false
		for _, currentValue := range o.Labels {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *Policy_Spec_ResourceIdentity_LabelInfo
			if sourceValue != nil {
				newDstElement = new(Policy_Spec_ResourceIdentity_LabelInfo)
				newDstElement.Merge(sourceValue)
			}
			o.Labels = append(o.Labels, newDstElement)
		}
	}

	for _, sourceValue := range source.GetNamePatterns() {
		exists := false
		for _, currentValue := range o.NamePatterns {
			if currentValue == sourceValue {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement string
			newDstElement = sourceValue
			o.NamePatterns = append(o.NamePatterns, newDstElement)
		}
	}

}

func (o *Policy_Spec_ResourceIdentity) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Policy_Spec_ResourceIdentity))
}

func (o *Policy_Spec_SupportingAlertQuery) GotenObjectExt() {}

func (o *Policy_Spec_SupportingAlertQuery) MakeFullFieldMask() *Policy_Spec_SupportingAlertQuery_FieldMask {
	return FullPolicy_Spec_SupportingAlertQuery_FieldMask()
}

func (o *Policy_Spec_SupportingAlertQuery) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullPolicy_Spec_SupportingAlertQuery_FieldMask()
}

func (o *Policy_Spec_SupportingAlertQuery) MakeDiffFieldMask(other *Policy_Spec_SupportingAlertQuery) *Policy_Spec_SupportingAlertQuery_FieldMask {
	if o == nil && other == nil {
		return &Policy_Spec_SupportingAlertQuery_FieldMask{}
	}
	if o == nil || other == nil {
		return FullPolicy_Spec_SupportingAlertQuery_FieldMask()
	}

	res := &Policy_Spec_SupportingAlertQuery_FieldMask{}
	{
		_, leftSelected := o.Query.(*Policy_Spec_SupportingAlertQuery_TsQuery_)
		_, rightSelected := other.Query.(*Policy_Spec_SupportingAlertQuery_TsQuery_)
		if leftSelected == rightSelected {
			subMask := o.GetTsQuery().MakeDiffFieldMask(other.GetTsQuery())
			if subMask.IsFull() {
				res.Paths = append(res.Paths, &PolicySpecSupportingAlertQuery_FieldTerminalPath{selector: PolicySpecSupportingAlertQuery_FieldPathSelectorTsQuery})
			} else {
				for _, subpath := range subMask.Paths {
					res.Paths = append(res.Paths, &PolicySpecSupportingAlertQuery_FieldSubPath{selector: PolicySpecSupportingAlertQuery_FieldPathSelectorTsQuery, subPath: subpath})
				}
			}
		} else {
			res.Paths = append(res.Paths, &PolicySpecSupportingAlertQuery_FieldTerminalPath{selector: PolicySpecSupportingAlertQuery_FieldPathSelectorTsQuery})
		}
	}
	{
		_, leftSelected := o.Query.(*Policy_Spec_SupportingAlertQuery_LogQuery_)
		_, rightSelected := other.Query.(*Policy_Spec_SupportingAlertQuery_LogQuery_)
		if leftSelected == rightSelected {
			subMask := o.GetLogQuery().MakeDiffFieldMask(other.GetLogQuery())
			if subMask.IsFull() {
				res.Paths = append(res.Paths, &PolicySpecSupportingAlertQuery_FieldTerminalPath{selector: PolicySpecSupportingAlertQuery_FieldPathSelectorLogQuery})
			} else {
				for _, subpath := range subMask.Paths {
					res.Paths = append(res.Paths, &PolicySpecSupportingAlertQuery_FieldSubPath{selector: PolicySpecSupportingAlertQuery_FieldPathSelectorLogQuery, subPath: subpath})
				}
			}
		} else {
			res.Paths = append(res.Paths, &PolicySpecSupportingAlertQuery_FieldTerminalPath{selector: PolicySpecSupportingAlertQuery_FieldPathSelectorLogQuery})
		}
	}
	{
		_, leftSelected := o.Query.(*Policy_Spec_SupportingAlertQuery_RestGetQuery_)
		_, rightSelected := other.Query.(*Policy_Spec_SupportingAlertQuery_RestGetQuery_)
		if leftSelected == rightSelected {
			subMask := o.GetRestGetQuery().MakeDiffFieldMask(other.GetRestGetQuery())
			if subMask.IsFull() {
				res.Paths = append(res.Paths, &PolicySpecSupportingAlertQuery_FieldTerminalPath{selector: PolicySpecSupportingAlertQuery_FieldPathSelectorRestGetQuery})
			} else {
				for _, subpath := range subMask.Paths {
					res.Paths = append(res.Paths, &PolicySpecSupportingAlertQuery_FieldSubPath{selector: PolicySpecSupportingAlertQuery_FieldPathSelectorRestGetQuery, subPath: subpath})
				}
			}
		} else {
			res.Paths = append(res.Paths, &PolicySpecSupportingAlertQuery_FieldTerminalPath{selector: PolicySpecSupportingAlertQuery_FieldPathSelectorRestGetQuery})
		}
	}
	{
		_, leftSelected := o.Query.(*Policy_Spec_SupportingAlertQuery_RestListQuery_)
		_, rightSelected := other.Query.(*Policy_Spec_SupportingAlertQuery_RestListQuery_)
		if leftSelected == rightSelected {
			subMask := o.GetRestListQuery().MakeDiffFieldMask(other.GetRestListQuery())
			if subMask.IsFull() {
				res.Paths = append(res.Paths, &PolicySpecSupportingAlertQuery_FieldTerminalPath{selector: PolicySpecSupportingAlertQuery_FieldPathSelectorRestListQuery})
			} else {
				for _, subpath := range subMask.Paths {
					res.Paths = append(res.Paths, &PolicySpecSupportingAlertQuery_FieldSubPath{selector: PolicySpecSupportingAlertQuery_FieldPathSelectorRestListQuery, subPath: subpath})
				}
			}
		} else {
			res.Paths = append(res.Paths, &PolicySpecSupportingAlertQuery_FieldTerminalPath{selector: PolicySpecSupportingAlertQuery_FieldPathSelectorRestListQuery})
		}
	}
	return res
}

func (o *Policy_Spec_SupportingAlertQuery) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Policy_Spec_SupportingAlertQuery))
}

func (o *Policy_Spec_SupportingAlertQuery) Clone() *Policy_Spec_SupportingAlertQuery {
	if o == nil {
		return nil
	}
	result := &Policy_Spec_SupportingAlertQuery{}
	if o, ok := o.Query.(*Policy_Spec_SupportingAlertQuery_TsQuery_); ok {
		result.Query = (*Policy_Spec_SupportingAlertQuery_TsQuery_)(nil)
		if o != nil {
			result.Query = &Policy_Spec_SupportingAlertQuery_TsQuery_{}
			result := result.Query.(*Policy_Spec_SupportingAlertQuery_TsQuery_)
			result.TsQuery = o.TsQuery.Clone()
		}
	}
	if o, ok := o.Query.(*Policy_Spec_SupportingAlertQuery_LogQuery_); ok {
		result.Query = (*Policy_Spec_SupportingAlertQuery_LogQuery_)(nil)
		if o != nil {
			result.Query = &Policy_Spec_SupportingAlertQuery_LogQuery_{}
			result := result.Query.(*Policy_Spec_SupportingAlertQuery_LogQuery_)
			result.LogQuery = o.LogQuery.Clone()
		}
	}
	if o, ok := o.Query.(*Policy_Spec_SupportingAlertQuery_RestGetQuery_); ok {
		result.Query = (*Policy_Spec_SupportingAlertQuery_RestGetQuery_)(nil)
		if o != nil {
			result.Query = &Policy_Spec_SupportingAlertQuery_RestGetQuery_{}
			result := result.Query.(*Policy_Spec_SupportingAlertQuery_RestGetQuery_)
			result.RestGetQuery = o.RestGetQuery.Clone()
		}
	}
	if o, ok := o.Query.(*Policy_Spec_SupportingAlertQuery_RestListQuery_); ok {
		result.Query = (*Policy_Spec_SupportingAlertQuery_RestListQuery_)(nil)
		if o != nil {
			result.Query = &Policy_Spec_SupportingAlertQuery_RestListQuery_{}
			result := result.Query.(*Policy_Spec_SupportingAlertQuery_RestListQuery_)
			result.RestListQuery = o.RestListQuery.Clone()
		}
	}
	return result
}

func (o *Policy_Spec_SupportingAlertQuery) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Policy_Spec_SupportingAlertQuery) Merge(source *Policy_Spec_SupportingAlertQuery) {
	if source, ok := source.GetQuery().(*Policy_Spec_SupportingAlertQuery_TsQuery_); ok {
		if dstOneOf, ok := o.Query.(*Policy_Spec_SupportingAlertQuery_TsQuery_); !ok || dstOneOf == nil {
			o.Query = &Policy_Spec_SupportingAlertQuery_TsQuery_{}
		}
		if source != nil {
			o := o.Query.(*Policy_Spec_SupportingAlertQuery_TsQuery_)
			if source.TsQuery != nil {
				if o.TsQuery == nil {
					o.TsQuery = new(Policy_Spec_SupportingAlertQuery_TsQuery)
				}
				o.TsQuery.Merge(source.TsQuery)
			}
		}
	}
	if source, ok := source.GetQuery().(*Policy_Spec_SupportingAlertQuery_LogQuery_); ok {
		if dstOneOf, ok := o.Query.(*Policy_Spec_SupportingAlertQuery_LogQuery_); !ok || dstOneOf == nil {
			o.Query = &Policy_Spec_SupportingAlertQuery_LogQuery_{}
		}
		if source != nil {
			o := o.Query.(*Policy_Spec_SupportingAlertQuery_LogQuery_)
			if source.LogQuery != nil {
				if o.LogQuery == nil {
					o.LogQuery = new(Policy_Spec_SupportingAlertQuery_LogQuery)
				}
				o.LogQuery.Merge(source.LogQuery)
			}
		}
	}
	if source, ok := source.GetQuery().(*Policy_Spec_SupportingAlertQuery_RestGetQuery_); ok {
		if dstOneOf, ok := o.Query.(*Policy_Spec_SupportingAlertQuery_RestGetQuery_); !ok || dstOneOf == nil {
			o.Query = &Policy_Spec_SupportingAlertQuery_RestGetQuery_{}
		}
		if source != nil {
			o := o.Query.(*Policy_Spec_SupportingAlertQuery_RestGetQuery_)
			if source.RestGetQuery != nil {
				if o.RestGetQuery == nil {
					o.RestGetQuery = new(Policy_Spec_SupportingAlertQuery_RestGetQuery)
				}
				o.RestGetQuery.Merge(source.RestGetQuery)
			}
		}
	}
	if source, ok := source.GetQuery().(*Policy_Spec_SupportingAlertQuery_RestListQuery_); ok {
		if dstOneOf, ok := o.Query.(*Policy_Spec_SupportingAlertQuery_RestListQuery_); !ok || dstOneOf == nil {
			o.Query = &Policy_Spec_SupportingAlertQuery_RestListQuery_{}
		}
		if source != nil {
			o := o.Query.(*Policy_Spec_SupportingAlertQuery_RestListQuery_)
			if source.RestListQuery != nil {
				if o.RestListQuery == nil {
					o.RestListQuery = new(Policy_Spec_SupportingAlertQuery_RestListQuery)
				}
				o.RestListQuery.Merge(source.RestListQuery)
			}
		}
	}
}

func (o *Policy_Spec_SupportingAlertQuery) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Policy_Spec_SupportingAlertQuery))
}

func (o *Policy_Spec_AIAgentHandling) GotenObjectExt() {}

func (o *Policy_Spec_AIAgentHandling) MakeFullFieldMask() *Policy_Spec_AIAgentHandling_FieldMask {
	return FullPolicy_Spec_AIAgentHandling_FieldMask()
}

func (o *Policy_Spec_AIAgentHandling) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullPolicy_Spec_AIAgentHandling_FieldMask()
}

func (o *Policy_Spec_AIAgentHandling) MakeDiffFieldMask(other *Policy_Spec_AIAgentHandling) *Policy_Spec_AIAgentHandling_FieldMask {
	if o == nil && other == nil {
		return &Policy_Spec_AIAgentHandling_FieldMask{}
	}
	if o == nil || other == nil {
		return FullPolicy_Spec_AIAgentHandling_FieldMask()
	}

	res := &Policy_Spec_AIAgentHandling_FieldMask{}
	if o.GetEnabled() != other.GetEnabled() {
		res.Paths = append(res.Paths, &PolicySpecAIAgentHandling_FieldTerminalPath{selector: PolicySpecAIAgentHandling_FieldPathSelectorEnabled})
	}
	if o.GetEnabledConnectivity() != other.GetEnabledConnectivity() {
		res.Paths = append(res.Paths, &PolicySpecAIAgentHandling_FieldTerminalPath{selector: PolicySpecAIAgentHandling_FieldPathSelectorEnabledConnectivity})
	}
	if o.GetAutoAcceptRemediation() != other.GetAutoAcceptRemediation() {
		res.Paths = append(res.Paths, &PolicySpecAIAgentHandling_FieldTerminalPath{selector: PolicySpecAIAgentHandling_FieldPathSelectorAutoAcceptRemediation})
	}
	{
		subMask := o.GetEdgeConnectivity().MakeDiffFieldMask(other.GetEdgeConnectivity())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &PolicySpecAIAgentHandling_FieldTerminalPath{selector: PolicySpecAIAgentHandling_FieldPathSelectorEdgeConnectivity})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &PolicySpecAIAgentHandling_FieldSubPath{selector: PolicySpecAIAgentHandling_FieldPathSelectorEdgeConnectivity, subPath: subpath})
			}
		}
	}

	if len(o.GetRemediationOptions()) == len(other.GetRemediationOptions()) {
		for i, lValue := range o.GetRemediationOptions() {
			rValue := other.GetRemediationOptions()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &PolicySpecAIAgentHandling_FieldTerminalPath{selector: PolicySpecAIAgentHandling_FieldPathSelectorRemediationOptions})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &PolicySpecAIAgentHandling_FieldTerminalPath{selector: PolicySpecAIAgentHandling_FieldPathSelectorRemediationOptions})
	}
	return res
}

func (o *Policy_Spec_AIAgentHandling) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Policy_Spec_AIAgentHandling))
}

func (o *Policy_Spec_AIAgentHandling) Clone() *Policy_Spec_AIAgentHandling {
	if o == nil {
		return nil
	}
	result := &Policy_Spec_AIAgentHandling{}
	result.Enabled = o.Enabled
	result.EnabledConnectivity = o.EnabledConnectivity
	result.AutoAcceptRemediation = o.AutoAcceptRemediation
	result.EdgeConnectivity = o.EdgeConnectivity.Clone()
	result.RemediationOptions = make([]*Policy_Spec_AIAgentHandling_Remediation, len(o.RemediationOptions))
	for i, sourceValue := range o.RemediationOptions {
		result.RemediationOptions[i] = sourceValue.Clone()
	}
	return result
}

func (o *Policy_Spec_AIAgentHandling) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Policy_Spec_AIAgentHandling) Merge(source *Policy_Spec_AIAgentHandling) {
	o.Enabled = source.GetEnabled()
	o.EnabledConnectivity = source.GetEnabledConnectivity()
	o.AutoAcceptRemediation = source.GetAutoAcceptRemediation()
	if source.GetEdgeConnectivity() != nil {
		if o.EdgeConnectivity == nil {
			o.EdgeConnectivity = new(Policy_Spec_AIAgentHandling_EdgeConnectivity)
		}
		o.EdgeConnectivity.Merge(source.GetEdgeConnectivity())
	}
	for _, sourceValue := range source.GetRemediationOptions() {
		exists := false
		for _, currentValue := range o.RemediationOptions {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *Policy_Spec_AIAgentHandling_Remediation
			if sourceValue != nil {
				newDstElement = new(Policy_Spec_AIAgentHandling_Remediation)
				newDstElement.Merge(sourceValue)
			}
			o.RemediationOptions = append(o.RemediationOptions, newDstElement)
		}
	}

}

func (o *Policy_Spec_AIAgentHandling) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Policy_Spec_AIAgentHandling))
}

func (o *Policy_Spec_ResourceIdentity_LabelInfo) GotenObjectExt() {}

func (o *Policy_Spec_ResourceIdentity_LabelInfo) MakeFullFieldMask() *Policy_Spec_ResourceIdentity_LabelInfo_FieldMask {
	return FullPolicy_Spec_ResourceIdentity_LabelInfo_FieldMask()
}

func (o *Policy_Spec_ResourceIdentity_LabelInfo) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullPolicy_Spec_ResourceIdentity_LabelInfo_FieldMask()
}

func (o *Policy_Spec_ResourceIdentity_LabelInfo) MakeDiffFieldMask(other *Policy_Spec_ResourceIdentity_LabelInfo) *Policy_Spec_ResourceIdentity_LabelInfo_FieldMask {
	if o == nil && other == nil {
		return &Policy_Spec_ResourceIdentity_LabelInfo_FieldMask{}
	}
	if o == nil || other == nil {
		return FullPolicy_Spec_ResourceIdentity_LabelInfo_FieldMask()
	}

	res := &Policy_Spec_ResourceIdentity_LabelInfo_FieldMask{}
	if o.GetKey() != other.GetKey() {
		res.Paths = append(res.Paths, &PolicySpecResourceIdentityLabelInfo_FieldTerminalPath{selector: PolicySpecResourceIdentityLabelInfo_FieldPathSelectorKey})
	}

	if len(o.GetContexts()) == len(other.GetContexts()) {
		for i, lValue := range o.GetContexts() {
			rValue := other.GetContexts()[i]
			if lValue != rValue {
				res.Paths = append(res.Paths, &PolicySpecResourceIdentityLabelInfo_FieldTerminalPath{selector: PolicySpecResourceIdentityLabelInfo_FieldPathSelectorContexts})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &PolicySpecResourceIdentityLabelInfo_FieldTerminalPath{selector: PolicySpecResourceIdentityLabelInfo_FieldPathSelectorContexts})
	}
	if o.GetMappedNameSegment() != other.GetMappedNameSegment() {
		res.Paths = append(res.Paths, &PolicySpecResourceIdentityLabelInfo_FieldTerminalPath{selector: PolicySpecResourceIdentityLabelInfo_FieldPathSelectorMappedNameSegment})
	}
	return res
}

func (o *Policy_Spec_ResourceIdentity_LabelInfo) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Policy_Spec_ResourceIdentity_LabelInfo))
}

func (o *Policy_Spec_ResourceIdentity_LabelInfo) Clone() *Policy_Spec_ResourceIdentity_LabelInfo {
	if o == nil {
		return nil
	}
	result := &Policy_Spec_ResourceIdentity_LabelInfo{}
	result.Key = o.Key
	result.Contexts = make([]Policy_Spec_ResourceIdentity_LabelInfo_UsageContext, len(o.Contexts))
	for i, sourceValue := range o.Contexts {
		result.Contexts[i] = sourceValue
	}
	result.MappedNameSegment = o.MappedNameSegment
	return result
}

func (o *Policy_Spec_ResourceIdentity_LabelInfo) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Policy_Spec_ResourceIdentity_LabelInfo) Merge(source *Policy_Spec_ResourceIdentity_LabelInfo) {
	o.Key = source.GetKey()
	for _, sourceValue := range source.GetContexts() {
		exists := false
		for _, currentValue := range o.Contexts {
			if currentValue == sourceValue {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement Policy_Spec_ResourceIdentity_LabelInfo_UsageContext
			newDstElement = sourceValue
			o.Contexts = append(o.Contexts, newDstElement)
		}
	}

	o.MappedNameSegment = source.GetMappedNameSegment()
}

func (o *Policy_Spec_ResourceIdentity_LabelInfo) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Policy_Spec_ResourceIdentity_LabelInfo))
}

func (o *Policy_Spec_SupportingAlertQuery_TsQuery) GotenObjectExt() {}

func (o *Policy_Spec_SupportingAlertQuery_TsQuery) MakeFullFieldMask() *Policy_Spec_SupportingAlertQuery_TsQuery_FieldMask {
	return FullPolicy_Spec_SupportingAlertQuery_TsQuery_FieldMask()
}

func (o *Policy_Spec_SupportingAlertQuery_TsQuery) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullPolicy_Spec_SupportingAlertQuery_TsQuery_FieldMask()
}

func (o *Policy_Spec_SupportingAlertQuery_TsQuery) MakeDiffFieldMask(other *Policy_Spec_SupportingAlertQuery_TsQuery) *Policy_Spec_SupportingAlertQuery_TsQuery_FieldMask {
	if o == nil && other == nil {
		return &Policy_Spec_SupportingAlertQuery_TsQuery_FieldMask{}
	}
	if o == nil || other == nil {
		return FullPolicy_Spec_SupportingAlertQuery_TsQuery_FieldMask()
	}

	res := &Policy_Spec_SupportingAlertQuery_TsQuery_FieldMask{}
	if o.GetDescription() != other.GetDescription() {
		res.Paths = append(res.Paths, &PolicySpecSupportingAlertQueryTsQuery_FieldTerminalPath{selector: PolicySpecSupportingAlertQueryTsQuery_FieldPathSelectorDescription})
	}
	if o.GetFilterTemplate() != other.GetFilterTemplate() {
		res.Paths = append(res.Paths, &PolicySpecSupportingAlertQueryTsQuery_FieldTerminalPath{selector: PolicySpecSupportingAlertQueryTsQuery_FieldPathSelectorFilterTemplate})
	}
	{
		subMask := o.GetAggregation().MakeDiffFieldMask(other.GetAggregation())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &PolicySpecSupportingAlertQueryTsQuery_FieldTerminalPath{selector: PolicySpecSupportingAlertQueryTsQuery_FieldPathSelectorAggregation})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &PolicySpecSupportingAlertQueryTsQuery_FieldSubPath{selector: PolicySpecSupportingAlertQueryTsQuery_FieldPathSelectorAggregation, subPath: subpath})
			}
		}
	}
	return res
}

func (o *Policy_Spec_SupportingAlertQuery_TsQuery) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Policy_Spec_SupportingAlertQuery_TsQuery))
}

func (o *Policy_Spec_SupportingAlertQuery_TsQuery) Clone() *Policy_Spec_SupportingAlertQuery_TsQuery {
	if o == nil {
		return nil
	}
	result := &Policy_Spec_SupportingAlertQuery_TsQuery{}
	result.Description = o.Description
	result.FilterTemplate = o.FilterTemplate
	result.Aggregation = o.Aggregation.Clone()
	return result
}

func (o *Policy_Spec_SupportingAlertQuery_TsQuery) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Policy_Spec_SupportingAlertQuery_TsQuery) Merge(source *Policy_Spec_SupportingAlertQuery_TsQuery) {
	o.Description = source.GetDescription()
	o.FilterTemplate = source.GetFilterTemplate()
	if source.GetAggregation() != nil {
		if o.Aggregation == nil {
			o.Aggregation = new(monitoring_common.Aggregation)
		}
		o.Aggregation.Merge(source.GetAggregation())
	}
}

func (o *Policy_Spec_SupportingAlertQuery_TsQuery) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Policy_Spec_SupportingAlertQuery_TsQuery))
}

func (o *Policy_Spec_SupportingAlertQuery_LogQuery) GotenObjectExt() {}

func (o *Policy_Spec_SupportingAlertQuery_LogQuery) MakeFullFieldMask() *Policy_Spec_SupportingAlertQuery_LogQuery_FieldMask {
	return FullPolicy_Spec_SupportingAlertQuery_LogQuery_FieldMask()
}

func (o *Policy_Spec_SupportingAlertQuery_LogQuery) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullPolicy_Spec_SupportingAlertQuery_LogQuery_FieldMask()
}

func (o *Policy_Spec_SupportingAlertQuery_LogQuery) MakeDiffFieldMask(other *Policy_Spec_SupportingAlertQuery_LogQuery) *Policy_Spec_SupportingAlertQuery_LogQuery_FieldMask {
	if o == nil && other == nil {
		return &Policy_Spec_SupportingAlertQuery_LogQuery_FieldMask{}
	}
	if o == nil || other == nil {
		return FullPolicy_Spec_SupportingAlertQuery_LogQuery_FieldMask()
	}

	res := &Policy_Spec_SupportingAlertQuery_LogQuery_FieldMask{}
	if o.GetDescription() != other.GetDescription() {
		res.Paths = append(res.Paths, &PolicySpecSupportingAlertQueryLogQuery_FieldTerminalPath{selector: PolicySpecSupportingAlertQueryLogQuery_FieldPathSelectorDescription})
	}
	if o.GetFilterTemplate() != other.GetFilterTemplate() {
		res.Paths = append(res.Paths, &PolicySpecSupportingAlertQueryLogQuery_FieldTerminalPath{selector: PolicySpecSupportingAlertQueryLogQuery_FieldPathSelectorFilterTemplate})
	}
	return res
}

func (o *Policy_Spec_SupportingAlertQuery_LogQuery) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Policy_Spec_SupportingAlertQuery_LogQuery))
}

func (o *Policy_Spec_SupportingAlertQuery_LogQuery) Clone() *Policy_Spec_SupportingAlertQuery_LogQuery {
	if o == nil {
		return nil
	}
	result := &Policy_Spec_SupportingAlertQuery_LogQuery{}
	result.Description = o.Description
	result.FilterTemplate = o.FilterTemplate
	return result
}

func (o *Policy_Spec_SupportingAlertQuery_LogQuery) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Policy_Spec_SupportingAlertQuery_LogQuery) Merge(source *Policy_Spec_SupportingAlertQuery_LogQuery) {
	o.Description = source.GetDescription()
	o.FilterTemplate = source.GetFilterTemplate()
}

func (o *Policy_Spec_SupportingAlertQuery_LogQuery) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Policy_Spec_SupportingAlertQuery_LogQuery))
}

func (o *Policy_Spec_SupportingAlertQuery_RestGetQuery) GotenObjectExt() {}

func (o *Policy_Spec_SupportingAlertQuery_RestGetQuery) MakeFullFieldMask() *Policy_Spec_SupportingAlertQuery_RestGetQuery_FieldMask {
	return FullPolicy_Spec_SupportingAlertQuery_RestGetQuery_FieldMask()
}

func (o *Policy_Spec_SupportingAlertQuery_RestGetQuery) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullPolicy_Spec_SupportingAlertQuery_RestGetQuery_FieldMask()
}

func (o *Policy_Spec_SupportingAlertQuery_RestGetQuery) MakeDiffFieldMask(other *Policy_Spec_SupportingAlertQuery_RestGetQuery) *Policy_Spec_SupportingAlertQuery_RestGetQuery_FieldMask {
	if o == nil && other == nil {
		return &Policy_Spec_SupportingAlertQuery_RestGetQuery_FieldMask{}
	}
	if o == nil || other == nil {
		return FullPolicy_Spec_SupportingAlertQuery_RestGetQuery_FieldMask()
	}

	res := &Policy_Spec_SupportingAlertQuery_RestGetQuery_FieldMask{}
	if o.GetDescription() != other.GetDescription() {
		res.Paths = append(res.Paths, &PolicySpecSupportingAlertQueryRestGetQuery_FieldTerminalPath{selector: PolicySpecSupportingAlertQueryRestGetQuery_FieldPathSelectorDescription})
	}
	if o.GetEndpoint() != other.GetEndpoint() {
		res.Paths = append(res.Paths, &PolicySpecSupportingAlertQueryRestGetQuery_FieldTerminalPath{selector: PolicySpecSupportingAlertQueryRestGetQuery_FieldPathSelectorEndpoint})
	}
	if o.GetPathTemplate() != other.GetPathTemplate() {
		res.Paths = append(res.Paths, &PolicySpecSupportingAlertQueryRestGetQuery_FieldTerminalPath{selector: PolicySpecSupportingAlertQueryRestGetQuery_FieldPathSelectorPathTemplate})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &PolicySpecSupportingAlertQueryRestGetQuery_FieldTerminalPath{selector: PolicySpecSupportingAlertQueryRestGetQuery_FieldPathSelectorView})
	}
	if o.GetFieldMask() != other.GetFieldMask() {
		res.Paths = append(res.Paths, &PolicySpecSupportingAlertQueryRestGetQuery_FieldTerminalPath{selector: PolicySpecSupportingAlertQueryRestGetQuery_FieldPathSelectorFieldMask})
	}
	return res
}

func (o *Policy_Spec_SupportingAlertQuery_RestGetQuery) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Policy_Spec_SupportingAlertQuery_RestGetQuery))
}

func (o *Policy_Spec_SupportingAlertQuery_RestGetQuery) Clone() *Policy_Spec_SupportingAlertQuery_RestGetQuery {
	if o == nil {
		return nil
	}
	result := &Policy_Spec_SupportingAlertQuery_RestGetQuery{}
	result.Description = o.Description
	result.Endpoint = o.Endpoint
	result.PathTemplate = o.PathTemplate
	result.View = o.View
	result.FieldMask = o.FieldMask
	return result
}

func (o *Policy_Spec_SupportingAlertQuery_RestGetQuery) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Policy_Spec_SupportingAlertQuery_RestGetQuery) Merge(source *Policy_Spec_SupportingAlertQuery_RestGetQuery) {
	o.Description = source.GetDescription()
	o.Endpoint = source.GetEndpoint()
	o.PathTemplate = source.GetPathTemplate()
	o.View = source.GetView()
	o.FieldMask = source.GetFieldMask()
}

func (o *Policy_Spec_SupportingAlertQuery_RestGetQuery) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Policy_Spec_SupportingAlertQuery_RestGetQuery))
}

func (o *Policy_Spec_SupportingAlertQuery_RestListQuery) GotenObjectExt() {}

func (o *Policy_Spec_SupportingAlertQuery_RestListQuery) MakeFullFieldMask() *Policy_Spec_SupportingAlertQuery_RestListQuery_FieldMask {
	return FullPolicy_Spec_SupportingAlertQuery_RestListQuery_FieldMask()
}

func (o *Policy_Spec_SupportingAlertQuery_RestListQuery) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullPolicy_Spec_SupportingAlertQuery_RestListQuery_FieldMask()
}

func (o *Policy_Spec_SupportingAlertQuery_RestListQuery) MakeDiffFieldMask(other *Policy_Spec_SupportingAlertQuery_RestListQuery) *Policy_Spec_SupportingAlertQuery_RestListQuery_FieldMask {
	if o == nil && other == nil {
		return &Policy_Spec_SupportingAlertQuery_RestListQuery_FieldMask{}
	}
	if o == nil || other == nil {
		return FullPolicy_Spec_SupportingAlertQuery_RestListQuery_FieldMask()
	}

	res := &Policy_Spec_SupportingAlertQuery_RestListQuery_FieldMask{}
	if o.GetDescription() != other.GetDescription() {
		res.Paths = append(res.Paths, &PolicySpecSupportingAlertQueryRestListQuery_FieldTerminalPath{selector: PolicySpecSupportingAlertQueryRestListQuery_FieldPathSelectorDescription})
	}
	if o.GetEndpoint() != other.GetEndpoint() {
		res.Paths = append(res.Paths, &PolicySpecSupportingAlertQueryRestListQuery_FieldTerminalPath{selector: PolicySpecSupportingAlertQueryRestListQuery_FieldPathSelectorEndpoint})
	}
	if o.GetPathTemplate() != other.GetPathTemplate() {
		res.Paths = append(res.Paths, &PolicySpecSupportingAlertQueryRestListQuery_FieldTerminalPath{selector: PolicySpecSupportingAlertQueryRestListQuery_FieldPathSelectorPathTemplate})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &PolicySpecSupportingAlertQueryRestListQuery_FieldTerminalPath{selector: PolicySpecSupportingAlertQueryRestListQuery_FieldPathSelectorView})
	}
	if o.GetFieldMask() != other.GetFieldMask() {
		res.Paths = append(res.Paths, &PolicySpecSupportingAlertQueryRestListQuery_FieldTerminalPath{selector: PolicySpecSupportingAlertQueryRestListQuery_FieldPathSelectorFieldMask})
	}
	if o.GetFilterTemplate() != other.GetFilterTemplate() {
		res.Paths = append(res.Paths, &PolicySpecSupportingAlertQueryRestListQuery_FieldTerminalPath{selector: PolicySpecSupportingAlertQueryRestListQuery_FieldPathSelectorFilterTemplate})
	}
	return res
}

func (o *Policy_Spec_SupportingAlertQuery_RestListQuery) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Policy_Spec_SupportingAlertQuery_RestListQuery))
}

func (o *Policy_Spec_SupportingAlertQuery_RestListQuery) Clone() *Policy_Spec_SupportingAlertQuery_RestListQuery {
	if o == nil {
		return nil
	}
	result := &Policy_Spec_SupportingAlertQuery_RestListQuery{}
	result.Description = o.Description
	result.Endpoint = o.Endpoint
	result.PathTemplate = o.PathTemplate
	result.View = o.View
	result.FieldMask = o.FieldMask
	result.FilterTemplate = o.FilterTemplate
	return result
}

func (o *Policy_Spec_SupportingAlertQuery_RestListQuery) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Policy_Spec_SupportingAlertQuery_RestListQuery) Merge(source *Policy_Spec_SupportingAlertQuery_RestListQuery) {
	o.Description = source.GetDescription()
	o.Endpoint = source.GetEndpoint()
	o.PathTemplate = source.GetPathTemplate()
	o.View = source.GetView()
	o.FieldMask = source.GetFieldMask()
	o.FilterTemplate = source.GetFilterTemplate()
}

func (o *Policy_Spec_SupportingAlertQuery_RestListQuery) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Policy_Spec_SupportingAlertQuery_RestListQuery))
}

func (o *Policy_Spec_AIAgentHandling_EdgeConnectivity) GotenObjectExt() {}

func (o *Policy_Spec_AIAgentHandling_EdgeConnectivity) MakeFullFieldMask() *Policy_Spec_AIAgentHandling_EdgeConnectivity_FieldMask {
	return FullPolicy_Spec_AIAgentHandling_EdgeConnectivity_FieldMask()
}

func (o *Policy_Spec_AIAgentHandling_EdgeConnectivity) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullPolicy_Spec_AIAgentHandling_EdgeConnectivity_FieldMask()
}

func (o *Policy_Spec_AIAgentHandling_EdgeConnectivity) MakeDiffFieldMask(other *Policy_Spec_AIAgentHandling_EdgeConnectivity) *Policy_Spec_AIAgentHandling_EdgeConnectivity_FieldMask {
	if o == nil && other == nil {
		return &Policy_Spec_AIAgentHandling_EdgeConnectivity_FieldMask{}
	}
	if o == nil || other == nil {
		return FullPolicy_Spec_AIAgentHandling_EdgeConnectivity_FieldMask()
	}

	res := &Policy_Spec_AIAgentHandling_EdgeConnectivity_FieldMask{}
	{
		_, leftSelected := o.Type.(*Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSsh)
		_, rightSelected := other.Type.(*Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSsh)
		if leftSelected == rightSelected {
			subMask := o.GetDeviceSsh().MakeDiffFieldMask(other.GetDeviceSsh())
			if subMask.IsFull() {
				res.Paths = append(res.Paths, &PolicySpecAIAgentHandlingEdgeConnectivity_FieldTerminalPath{selector: PolicySpecAIAgentHandlingEdgeConnectivity_FieldPathSelectorDeviceSsh})
			} else {
				for _, subpath := range subMask.Paths {
					res.Paths = append(res.Paths, &PolicySpecAIAgentHandlingEdgeConnectivity_FieldSubPath{selector: PolicySpecAIAgentHandlingEdgeConnectivity_FieldPathSelectorDeviceSsh, subPath: subpath})
				}
			}
		} else {
			res.Paths = append(res.Paths, &PolicySpecAIAgentHandlingEdgeConnectivity_FieldTerminalPath{selector: PolicySpecAIAgentHandlingEdgeConnectivity_FieldPathSelectorDeviceSsh})
		}
	}
	{
		_, leftSelected := o.Type.(*Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSsh)
		_, rightSelected := other.Type.(*Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSsh)
		if leftSelected == rightSelected {
			subMask := o.GetProxiesSsh().MakeDiffFieldMask(other.GetProxiesSsh())
			if subMask.IsFull() {
				res.Paths = append(res.Paths, &PolicySpecAIAgentHandlingEdgeConnectivity_FieldTerminalPath{selector: PolicySpecAIAgentHandlingEdgeConnectivity_FieldPathSelectorProxiesSsh})
			} else {
				for _, subpath := range subMask.Paths {
					res.Paths = append(res.Paths, &PolicySpecAIAgentHandlingEdgeConnectivity_FieldSubPath{selector: PolicySpecAIAgentHandlingEdgeConnectivity_FieldPathSelectorProxiesSsh, subPath: subpath})
				}
			}
		} else {
			res.Paths = append(res.Paths, &PolicySpecAIAgentHandlingEdgeConnectivity_FieldTerminalPath{selector: PolicySpecAIAgentHandlingEdgeConnectivity_FieldPathSelectorProxiesSsh})
		}
	}
	{
		_, leftSelected := o.Type.(*Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSsh)
		_, rightSelected := other.Type.(*Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSsh)
		if leftSelected == rightSelected {
			subMask := o.GetPodSsh().MakeDiffFieldMask(other.GetPodSsh())
			if subMask.IsFull() {
				res.Paths = append(res.Paths, &PolicySpecAIAgentHandlingEdgeConnectivity_FieldTerminalPath{selector: PolicySpecAIAgentHandlingEdgeConnectivity_FieldPathSelectorPodSsh})
			} else {
				for _, subpath := range subMask.Paths {
					res.Paths = append(res.Paths, &PolicySpecAIAgentHandlingEdgeConnectivity_FieldSubPath{selector: PolicySpecAIAgentHandlingEdgeConnectivity_FieldPathSelectorPodSsh, subPath: subpath})
				}
			}
		} else {
			res.Paths = append(res.Paths, &PolicySpecAIAgentHandlingEdgeConnectivity_FieldTerminalPath{selector: PolicySpecAIAgentHandlingEdgeConnectivity_FieldPathSelectorPodSsh})
		}
	}

	if len(o.GetAllowedBins()) == len(other.GetAllowedBins()) {
		for i, lValue := range o.GetAllowedBins() {
			rValue := other.GetAllowedBins()[i]
			if lValue != rValue {
				res.Paths = append(res.Paths, &PolicySpecAIAgentHandlingEdgeConnectivity_FieldTerminalPath{selector: PolicySpecAIAgentHandlingEdgeConnectivity_FieldPathSelectorAllowedBins})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &PolicySpecAIAgentHandlingEdgeConnectivity_FieldTerminalPath{selector: PolicySpecAIAgentHandlingEdgeConnectivity_FieldPathSelectorAllowedBins})
	}
	return res
}

func (o *Policy_Spec_AIAgentHandling_EdgeConnectivity) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Policy_Spec_AIAgentHandling_EdgeConnectivity))
}

func (o *Policy_Spec_AIAgentHandling_EdgeConnectivity) Clone() *Policy_Spec_AIAgentHandling_EdgeConnectivity {
	if o == nil {
		return nil
	}
	result := &Policy_Spec_AIAgentHandling_EdgeConnectivity{}
	if o, ok := o.Type.(*Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSsh); ok {
		result.Type = (*Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSsh)(nil)
		if o != nil {
			result.Type = &Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSsh{}
			result := result.Type.(*Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSsh)
			result.DeviceSsh = o.DeviceSsh.Clone()
		}
	}
	if o, ok := o.Type.(*Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSsh); ok {
		result.Type = (*Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSsh)(nil)
		if o != nil {
			result.Type = &Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSsh{}
			result := result.Type.(*Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSsh)
			result.ProxiesSsh = o.ProxiesSsh.Clone()
		}
	}
	if o, ok := o.Type.(*Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSsh); ok {
		result.Type = (*Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSsh)(nil)
		if o != nil {
			result.Type = &Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSsh{}
			result := result.Type.(*Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSsh)
			result.PodSsh = o.PodSsh.Clone()
		}
	}
	result.AllowedBins = make([]string, len(o.AllowedBins))
	for i, sourceValue := range o.AllowedBins {
		result.AllowedBins[i] = sourceValue
	}
	return result
}

func (o *Policy_Spec_AIAgentHandling_EdgeConnectivity) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Policy_Spec_AIAgentHandling_EdgeConnectivity) Merge(source *Policy_Spec_AIAgentHandling_EdgeConnectivity) {
	if source, ok := source.GetType().(*Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSsh); ok {
		if dstOneOf, ok := o.Type.(*Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSsh); !ok || dstOneOf == nil {
			o.Type = &Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSsh{}
		}
		if source != nil {
			o := o.Type.(*Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSsh)
			if source.DeviceSsh != nil {
				if o.DeviceSsh == nil {
					o.DeviceSsh = new(Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSSH)
				}
				o.DeviceSsh.Merge(source.DeviceSsh)
			}
		}
	}
	if source, ok := source.GetType().(*Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSsh); ok {
		if dstOneOf, ok := o.Type.(*Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSsh); !ok || dstOneOf == nil {
			o.Type = &Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSsh{}
		}
		if source != nil {
			o := o.Type.(*Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSsh)
			if source.ProxiesSsh != nil {
				if o.ProxiesSsh == nil {
					o.ProxiesSsh = new(Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH)
				}
				o.ProxiesSsh.Merge(source.ProxiesSsh)
			}
		}
	}
	if source, ok := source.GetType().(*Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSsh); ok {
		if dstOneOf, ok := o.Type.(*Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSsh); !ok || dstOneOf == nil {
			o.Type = &Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSsh{}
		}
		if source != nil {
			o := o.Type.(*Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSsh)
			if source.PodSsh != nil {
				if o.PodSsh == nil {
					o.PodSsh = new(Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSSH)
				}
				o.PodSsh.Merge(source.PodSsh)
			}
		}
	}
	for _, sourceValue := range source.GetAllowedBins() {
		exists := false
		for _, currentValue := range o.AllowedBins {
			if currentValue == sourceValue {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement string
			newDstElement = sourceValue
			o.AllowedBins = append(o.AllowedBins, newDstElement)
		}
	}

}

func (o *Policy_Spec_AIAgentHandling_EdgeConnectivity) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Policy_Spec_AIAgentHandling_EdgeConnectivity))
}

func (o *Policy_Spec_AIAgentHandling_Remediation) GotenObjectExt() {}

func (o *Policy_Spec_AIAgentHandling_Remediation) MakeFullFieldMask() *Policy_Spec_AIAgentHandling_Remediation_FieldMask {
	return FullPolicy_Spec_AIAgentHandling_Remediation_FieldMask()
}

func (o *Policy_Spec_AIAgentHandling_Remediation) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullPolicy_Spec_AIAgentHandling_Remediation_FieldMask()
}

func (o *Policy_Spec_AIAgentHandling_Remediation) MakeDiffFieldMask(other *Policy_Spec_AIAgentHandling_Remediation) *Policy_Spec_AIAgentHandling_Remediation_FieldMask {
	if o == nil && other == nil {
		return &Policy_Spec_AIAgentHandling_Remediation_FieldMask{}
	}
	if o == nil || other == nil {
		return FullPolicy_Spec_AIAgentHandling_Remediation_FieldMask()
	}

	res := &Policy_Spec_AIAgentHandling_Remediation_FieldMask{}
	{
		_, leftSelected := o.Type.(*Policy_Spec_AIAgentHandling_Remediation_FixInSsh)
		_, rightSelected := other.Type.(*Policy_Spec_AIAgentHandling_Remediation_FixInSsh)
		if leftSelected == rightSelected {
			subMask := o.GetFixInSsh().MakeDiffFieldMask(other.GetFixInSsh())
			if subMask.IsFull() {
				res.Paths = append(res.Paths, &PolicySpecAIAgentHandlingRemediation_FieldTerminalPath{selector: PolicySpecAIAgentHandlingRemediation_FieldPathSelectorFixInSsh})
			} else {
				for _, subpath := range subMask.Paths {
					res.Paths = append(res.Paths, &PolicySpecAIAgentHandlingRemediation_FieldSubPath{selector: PolicySpecAIAgentHandlingRemediation_FieldPathSelectorFixInSsh, subPath: subpath})
				}
			}
		} else {
			res.Paths = append(res.Paths, &PolicySpecAIAgentHandlingRemediation_FieldTerminalPath{selector: PolicySpecAIAgentHandlingRemediation_FieldPathSelectorFixInSsh})
		}
	}
	{
		_, leftSelected := o.Type.(*Policy_Spec_AIAgentHandling_Remediation_Reboot_)
		_, rightSelected := other.Type.(*Policy_Spec_AIAgentHandling_Remediation_Reboot_)
		if leftSelected == rightSelected {
			subMask := o.GetReboot().MakeDiffFieldMask(other.GetReboot())
			if subMask.IsFull() {
				res.Paths = append(res.Paths, &PolicySpecAIAgentHandlingRemediation_FieldTerminalPath{selector: PolicySpecAIAgentHandlingRemediation_FieldPathSelectorReboot})
			} else {
				for _, subpath := range subMask.Paths {
					res.Paths = append(res.Paths, &PolicySpecAIAgentHandlingRemediation_FieldSubPath{selector: PolicySpecAIAgentHandlingRemediation_FieldPathSelectorReboot, subPath: subpath})
				}
			}
		} else {
			res.Paths = append(res.Paths, &PolicySpecAIAgentHandlingRemediation_FieldTerminalPath{selector: PolicySpecAIAgentHandlingRemediation_FieldPathSelectorReboot})
		}
	}
	return res
}

func (o *Policy_Spec_AIAgentHandling_Remediation) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Policy_Spec_AIAgentHandling_Remediation))
}

func (o *Policy_Spec_AIAgentHandling_Remediation) Clone() *Policy_Spec_AIAgentHandling_Remediation {
	if o == nil {
		return nil
	}
	result := &Policy_Spec_AIAgentHandling_Remediation{}
	if o, ok := o.Type.(*Policy_Spec_AIAgentHandling_Remediation_FixInSsh); ok {
		result.Type = (*Policy_Spec_AIAgentHandling_Remediation_FixInSsh)(nil)
		if o != nil {
			result.Type = &Policy_Spec_AIAgentHandling_Remediation_FixInSsh{}
			result := result.Type.(*Policy_Spec_AIAgentHandling_Remediation_FixInSsh)
			result.FixInSsh = o.FixInSsh.Clone()
		}
	}
	if o, ok := o.Type.(*Policy_Spec_AIAgentHandling_Remediation_Reboot_); ok {
		result.Type = (*Policy_Spec_AIAgentHandling_Remediation_Reboot_)(nil)
		if o != nil {
			result.Type = &Policy_Spec_AIAgentHandling_Remediation_Reboot_{}
			result := result.Type.(*Policy_Spec_AIAgentHandling_Remediation_Reboot_)
			result.Reboot = o.Reboot.Clone()
		}
	}
	return result
}

func (o *Policy_Spec_AIAgentHandling_Remediation) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Policy_Spec_AIAgentHandling_Remediation) Merge(source *Policy_Spec_AIAgentHandling_Remediation) {
	if source, ok := source.GetType().(*Policy_Spec_AIAgentHandling_Remediation_FixInSsh); ok {
		if dstOneOf, ok := o.Type.(*Policy_Spec_AIAgentHandling_Remediation_FixInSsh); !ok || dstOneOf == nil {
			o.Type = &Policy_Spec_AIAgentHandling_Remediation_FixInSsh{}
		}
		if source != nil {
			o := o.Type.(*Policy_Spec_AIAgentHandling_Remediation_FixInSsh)
			if source.FixInSsh != nil {
				if o.FixInSsh == nil {
					o.FixInSsh = new(Policy_Spec_AIAgentHandling_Remediation_FixInSSH)
				}
				o.FixInSsh.Merge(source.FixInSsh)
			}
		}
	}
	if source, ok := source.GetType().(*Policy_Spec_AIAgentHandling_Remediation_Reboot_); ok {
		if dstOneOf, ok := o.Type.(*Policy_Spec_AIAgentHandling_Remediation_Reboot_); !ok || dstOneOf == nil {
			o.Type = &Policy_Spec_AIAgentHandling_Remediation_Reboot_{}
		}
		if source != nil {
			o := o.Type.(*Policy_Spec_AIAgentHandling_Remediation_Reboot_)
			if source.Reboot != nil {
				if o.Reboot == nil {
					o.Reboot = new(Policy_Spec_AIAgentHandling_Remediation_Reboot)
				}
				o.Reboot.Merge(source.Reboot)
			}
		}
	}
}

func (o *Policy_Spec_AIAgentHandling_Remediation) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Policy_Spec_AIAgentHandling_Remediation))
}

func (o *Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSSH) GotenObjectExt() {}

func (o *Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSSH) MakeFullFieldMask() *Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSSH_FieldMask {
	return FullPolicy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSSH_FieldMask()
}

func (o *Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSSH) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullPolicy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSSH_FieldMask()
}

func (o *Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSSH) MakeDiffFieldMask(other *Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSSH) *Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSSH_FieldMask {
	if o == nil && other == nil {
		return &Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSSH_FieldMask{}
	}
	if o == nil || other == nil {
		return FullPolicy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSSH_FieldMask()
	}

	res := &Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSSH_FieldMask{}
	if o.GetClientName() != other.GetClientName() {
		res.Paths = append(res.Paths, &PolicySpecAIAgentHandlingEdgeConnectivityDeviceSSH_FieldTerminalPath{selector: PolicySpecAIAgentHandlingEdgeConnectivityDeviceSSH_FieldPathSelectorClientName})
	}
	return res
}

func (o *Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSSH) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSSH))
}

func (o *Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSSH) Clone() *Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSSH {
	if o == nil {
		return nil
	}
	result := &Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSSH{}
	result.ClientName = o.ClientName
	return result
}

func (o *Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSSH) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSSH) Merge(source *Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSSH) {
	o.ClientName = source.GetClientName()
}

func (o *Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSSH) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSSH))
}

func (o *Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH) GotenObjectExt() {}

func (o *Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH) MakeFullFieldMask() *Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH_FieldMask {
	return FullPolicy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH_FieldMask()
}

func (o *Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullPolicy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH_FieldMask()
}

func (o *Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH) MakeDiffFieldMask(other *Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH) *Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH_FieldMask {
	if o == nil && other == nil {
		return &Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH_FieldMask{}
	}
	if o == nil || other == nil {
		return FullPolicy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH_FieldMask()
	}

	res := &Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH_FieldMask{}
	if o.GetServiceDomain() != other.GetServiceDomain() {
		res.Paths = append(res.Paths, &PolicySpecAIAgentHandlingEdgeConnectivityProxiesSSH_FieldTerminalPath{selector: PolicySpecAIAgentHandlingEdgeConnectivityProxiesSSH_FieldPathSelectorServiceDomain})
	}
	if o.GetProviderNameTmpl() != other.GetProviderNameTmpl() {
		res.Paths = append(res.Paths, &PolicySpecAIAgentHandlingEdgeConnectivityProxiesSSH_FieldTerminalPath{selector: PolicySpecAIAgentHandlingEdgeConnectivityProxiesSSH_FieldPathSelectorProviderNameTmpl})
	}
	if o.GetClientName() != other.GetClientName() {
		res.Paths = append(res.Paths, &PolicySpecAIAgentHandlingEdgeConnectivityProxiesSSH_FieldTerminalPath{selector: PolicySpecAIAgentHandlingEdgeConnectivityProxiesSSH_FieldPathSelectorClientName})
	}
	if o.GetServiceName() != other.GetServiceName() {
		res.Paths = append(res.Paths, &PolicySpecAIAgentHandlingEdgeConnectivityProxiesSSH_FieldTerminalPath{selector: PolicySpecAIAgentHandlingEdgeConnectivityProxiesSSH_FieldPathSelectorServiceName})
	}
	return res
}

func (o *Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH))
}

func (o *Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH) Clone() *Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH {
	if o == nil {
		return nil
	}
	result := &Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH{}
	result.ServiceDomain = o.ServiceDomain
	result.ProviderNameTmpl = o.ProviderNameTmpl
	result.ClientName = o.ClientName
	result.ServiceName = o.ServiceName
	return result
}

func (o *Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH) Merge(source *Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH) {
	o.ServiceDomain = source.GetServiceDomain()
	o.ProviderNameTmpl = source.GetProviderNameTmpl()
	o.ClientName = source.GetClientName()
	o.ServiceName = source.GetServiceName()
}

func (o *Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH))
}

func (o *Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSSH) GotenObjectExt() {}

func (o *Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSSH) MakeFullFieldMask() *Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSSH_FieldMask {
	return FullPolicy_Spec_AIAgentHandling_EdgeConnectivity_PodSSH_FieldMask()
}

func (o *Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSSH) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullPolicy_Spec_AIAgentHandling_EdgeConnectivity_PodSSH_FieldMask()
}

func (o *Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSSH) MakeDiffFieldMask(other *Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSSH) *Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSSH_FieldMask {
	if o == nil && other == nil {
		return &Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSSH_FieldMask{}
	}
	if o == nil || other == nil {
		return FullPolicy_Spec_AIAgentHandling_EdgeConnectivity_PodSSH_FieldMask()
	}

	res := &Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSSH_FieldMask{}
	if o.GetClientName() != other.GetClientName() {
		res.Paths = append(res.Paths, &PolicySpecAIAgentHandlingEdgeConnectivityPodSSH_FieldTerminalPath{selector: PolicySpecAIAgentHandlingEdgeConnectivityPodSSH_FieldPathSelectorClientName})
	}
	if o.GetUsername() != other.GetUsername() {
		res.Paths = append(res.Paths, &PolicySpecAIAgentHandlingEdgeConnectivityPodSSH_FieldTerminalPath{selector: PolicySpecAIAgentHandlingEdgeConnectivityPodSSH_FieldPathSelectorUsername})
	}
	return res
}

func (o *Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSSH) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSSH))
}

func (o *Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSSH) Clone() *Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSSH {
	if o == nil {
		return nil
	}
	result := &Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSSH{}
	result.ClientName = o.ClientName
	result.Username = o.Username
	return result
}

func (o *Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSSH) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSSH) Merge(source *Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSSH) {
	o.ClientName = source.GetClientName()
	o.Username = source.GetUsername()
}

func (o *Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSSH) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSSH))
}

func (o *Policy_Spec_AIAgentHandling_Remediation_FixInSSH) GotenObjectExt() {}

func (o *Policy_Spec_AIAgentHandling_Remediation_FixInSSH) MakeFullFieldMask() *Policy_Spec_AIAgentHandling_Remediation_FixInSSH_FieldMask {
	return FullPolicy_Spec_AIAgentHandling_Remediation_FixInSSH_FieldMask()
}

func (o *Policy_Spec_AIAgentHandling_Remediation_FixInSSH) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullPolicy_Spec_AIAgentHandling_Remediation_FixInSSH_FieldMask()
}

func (o *Policy_Spec_AIAgentHandling_Remediation_FixInSSH) MakeDiffFieldMask(other *Policy_Spec_AIAgentHandling_Remediation_FixInSSH) *Policy_Spec_AIAgentHandling_Remediation_FixInSSH_FieldMask {
	if o == nil && other == nil {
		return &Policy_Spec_AIAgentHandling_Remediation_FixInSSH_FieldMask{}
	}
	if o == nil || other == nil {
		return FullPolicy_Spec_AIAgentHandling_Remediation_FixInSSH_FieldMask()
	}

	res := &Policy_Spec_AIAgentHandling_Remediation_FixInSSH_FieldMask{}
	return res
}

func (o *Policy_Spec_AIAgentHandling_Remediation_FixInSSH) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Policy_Spec_AIAgentHandling_Remediation_FixInSSH))
}

func (o *Policy_Spec_AIAgentHandling_Remediation_FixInSSH) Clone() *Policy_Spec_AIAgentHandling_Remediation_FixInSSH {
	if o == nil {
		return nil
	}
	result := &Policy_Spec_AIAgentHandling_Remediation_FixInSSH{}
	return result
}

func (o *Policy_Spec_AIAgentHandling_Remediation_FixInSSH) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Policy_Spec_AIAgentHandling_Remediation_FixInSSH) Merge(source *Policy_Spec_AIAgentHandling_Remediation_FixInSSH) {
}

func (o *Policy_Spec_AIAgentHandling_Remediation_FixInSSH) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Policy_Spec_AIAgentHandling_Remediation_FixInSSH))
}

func (o *Policy_Spec_AIAgentHandling_Remediation_Reboot) GotenObjectExt() {}

func (o *Policy_Spec_AIAgentHandling_Remediation_Reboot) MakeFullFieldMask() *Policy_Spec_AIAgentHandling_Remediation_Reboot_FieldMask {
	return FullPolicy_Spec_AIAgentHandling_Remediation_Reboot_FieldMask()
}

func (o *Policy_Spec_AIAgentHandling_Remediation_Reboot) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullPolicy_Spec_AIAgentHandling_Remediation_Reboot_FieldMask()
}

func (o *Policy_Spec_AIAgentHandling_Remediation_Reboot) MakeDiffFieldMask(other *Policy_Spec_AIAgentHandling_Remediation_Reboot) *Policy_Spec_AIAgentHandling_Remediation_Reboot_FieldMask {
	if o == nil && other == nil {
		return &Policy_Spec_AIAgentHandling_Remediation_Reboot_FieldMask{}
	}
	if o == nil || other == nil {
		return FullPolicy_Spec_AIAgentHandling_Remediation_Reboot_FieldMask()
	}

	res := &Policy_Spec_AIAgentHandling_Remediation_Reboot_FieldMask{}
	return res
}

func (o *Policy_Spec_AIAgentHandling_Remediation_Reboot) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Policy_Spec_AIAgentHandling_Remediation_Reboot))
}

func (o *Policy_Spec_AIAgentHandling_Remediation_Reboot) Clone() *Policy_Spec_AIAgentHandling_Remediation_Reboot {
	if o == nil {
		return nil
	}
	result := &Policy_Spec_AIAgentHandling_Remediation_Reboot{}
	return result
}

func (o *Policy_Spec_AIAgentHandling_Remediation_Reboot) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Policy_Spec_AIAgentHandling_Remediation_Reboot) Merge(source *Policy_Spec_AIAgentHandling_Remediation_Reboot) {
}

func (o *Policy_Spec_AIAgentHandling_Remediation_Reboot) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Policy_Spec_AIAgentHandling_Remediation_Reboot))
}
