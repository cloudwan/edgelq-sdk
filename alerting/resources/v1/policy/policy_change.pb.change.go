// Code generated by protoc-gen-goten-resource
// Resource change: PolicyChange
// DO NOT EDIT!!!

package policy

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1/project"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
)

// ensure the imports are used
var (
	_ = new(gotenresource.ListQuery)
)

// make sure we're using proto imports
var (
	_ = &iam_project.Project{}
	_ = &fieldmaskpb.FieldMask{}
)

func (c *PolicyChange) IsAdd() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*PolicyChange_Added_)
	return ok
}

func (c *PolicyChange) IsModify() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*PolicyChange_Modified_)
	return ok
}

func (c *PolicyChange) IsCurrent() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*PolicyChange_Current_)
	return ok
}

func (c *PolicyChange) IsDelete() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*PolicyChange_Removed_)
	return ok
}

func (c *PolicyChange) GetCurrentViewIndex() int32 {
	switch cType := c.ChangeType.(type) {
	case *PolicyChange_Added_:
		return cType.Added.ViewIndex
	case *PolicyChange_Modified_:
		return cType.Modified.ViewIndex
	}
	return 0
}

func (c *PolicyChange) GetPreviousViewIndex() int32 {
	switch cType := c.ChangeType.(type) {
	case *PolicyChange_Removed_:
		return cType.Removed.ViewIndex
	case *PolicyChange_Modified_:
		return cType.Modified.PreviousViewIndex
	}
	return 0
}

func (c *PolicyChange) GetPolicy() *Policy {
	if c == nil {
		return nil
	}
	switch cType := c.ChangeType.(type) {
	case *PolicyChange_Added_:
		return cType.Added.Policy
	case *PolicyChange_Modified_:
		return cType.Modified.Policy
	case *PolicyChange_Current_:
		return cType.Current.Policy
	case *PolicyChange_Removed_:
		return nil
	}
	return nil
}

func (c *PolicyChange) GetRawResource() gotenresource.Resource {
	return c.GetPolicy()
}

func (c *PolicyChange) GetPolicyName() *Name {
	if c == nil {
		return nil
	}
	switch cType := c.ChangeType.(type) {
	case *PolicyChange_Added_:
		return cType.Added.Policy.GetName()
	case *PolicyChange_Modified_:
		return cType.Modified.Name
	case *PolicyChange_Current_:
		return cType.Current.Policy.GetName()
	case *PolicyChange_Removed_:
		return cType.Removed.Name
	}
	return nil
}

func (c *PolicyChange) GetRawName() gotenresource.Name {
	return c.GetPolicyName()
}

func (c *PolicyChange) SetAddedRaw(snapshot gotenresource.Resource, idx int) {
	c.ChangeType = &PolicyChange_Added_{
		Added: &PolicyChange_Added{
			Policy:    snapshot.(*Policy),
			ViewIndex: int32(idx),
		},
	}
}

func (c *PolicyChange) SetModifiedRaw(name gotenresource.Name, snapshot gotenresource.Resource, prevIdx int, newIdx int) {
	c.ChangeType = &PolicyChange_Modified_{
		Modified: &PolicyChange_Modified{
			Name:              name.(*Name),
			Policy:            snapshot.(*Policy),
			PreviousViewIndex: int32(prevIdx),
			ViewIndex:         int32(newIdx),
		},
	}
}

func (c *PolicyChange) SetCurrentRaw(snapshot gotenresource.Resource) {
	c.ChangeType = &PolicyChange_Current_{
		Current: &PolicyChange_Current{
			Policy: snapshot.(*Policy),
		},
	}
}

func (c *PolicyChange) SetDeletedRaw(name gotenresource.Name, idx int) {
	c.ChangeType = &PolicyChange_Removed_{
		Removed: &PolicyChange_Removed{
			Name:      name.(*Name),
			ViewIndex: int32(idx),
		},
	}
}
