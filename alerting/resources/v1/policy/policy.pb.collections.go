// Code generated by protoc-gen-goten-resource
// Resource: Policy
// DO NOT EDIT!!!

package policy

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	rcommon "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/common"
	document "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/document"
	policy_template "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/policy_template"
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1/project"
	meta "github.com/cloudwan/goten-sdk/types/meta"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
)

// ensure the imports are used
var (
	_ = new(gotenresource.ListQuery)
)

// make sure we're using proto imports
var (
	_ = &document.Document{}
	_ = &policy_template.PolicyTemplate{}
	_ = &rcommon.LogCndSpec{}
	_ = &iam_project.Project{}
	_ = &fieldmaskpb.FieldMask{}
	_ = &meta.Meta{}
)

type PolicyList []*Policy

func (l PolicyList) Append(item gotenresource.Resource) gotenresource.ResourceList {
	return append(l, item.(*Policy))
}

func (l PolicyList) AppendList(list gotenresource.ResourceList) gotenresource.ResourceList {
	return append(l, list.(PolicyList)...)
}

func (l PolicyList) Slice(first, second int) gotenresource.ResourceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l PolicyList) At(idx int) gotenresource.Resource {
	return l[idx]
}

func (l PolicyList) Set(idx int, res gotenresource.Resource) {
	l[idx] = res.(*Policy)
}

func (l PolicyList) Length() int {
	return len(l)
}

type PolicyChangeList []*PolicyChange

func (l PolicyChangeList) Append(item gotenresource.ResourceChange) gotenresource.ResourceChangeList {
	return append(l, item.(*PolicyChange))
}

func (l PolicyChangeList) AppendList(list gotenresource.ResourceChangeList) gotenresource.ResourceChangeList {
	return append(l, list.(PolicyChangeList)...)
}

func (l PolicyChangeList) Slice(first, second int) gotenresource.ResourceChangeList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l PolicyChangeList) At(idx int) gotenresource.ResourceChange {
	return l[idx]
}

func (l PolicyChangeList) Set(idx int, change gotenresource.ResourceChange) {
	l[idx] = change.(*PolicyChange)
}

func (l PolicyChangeList) Length() int {
	return len(l)
}

type PolicyNameList []*Name

func (l PolicyNameList) Append(name gotenresource.Name) gotenresource.NameList {
	return append(l, name.(*Name))
}

func (l PolicyNameList) AppendList(list gotenresource.NameList) gotenresource.NameList {
	return append(l, list.(PolicyNameList)...)
}

func (l PolicyNameList) Slice(first, second int) gotenresource.NameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l PolicyNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l PolicyNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*Name)
}

func (l PolicyNameList) Length() int {
	return len(l)
}

type PolicyReferenceList []*Reference

func (l PolicyReferenceList) Append(ref gotenresource.Reference) gotenresource.ReferenceList {
	return append(l, ref.(*Reference))
}

func (l PolicyReferenceList) AppendList(list gotenresource.ReferenceList) gotenresource.ReferenceList {
	return append(l, list.(PolicyReferenceList)...)
}

func (l PolicyReferenceList) Slice(first, second int) gotenresource.ReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l PolicyReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l PolicyReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*Reference)
}

func (l PolicyReferenceList) Length() int {
	return len(l)
}

type PolicyParentNameList []*ParentName

func (l PolicyParentNameList) Append(name gotenresource.Name) gotenresource.ParentNameList {
	return append(l, name.(*ParentName))
}

func (l PolicyParentNameList) AppendList(list gotenresource.ParentNameList) gotenresource.ParentNameList {
	return append(l, list.(PolicyParentNameList)...)
}

func (l PolicyParentNameList) Slice(first, second int) gotenresource.ParentNameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l PolicyParentNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l PolicyParentNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*ParentName)
}

func (l PolicyParentNameList) Length() int {
	return len(l)
}

type PolicyParentReferenceList []*ParentReference

func (l PolicyParentReferenceList) Append(ref gotenresource.Reference) gotenresource.ParentReferenceList {
	return append(l, ref.(*ParentReference))
}

func (l PolicyParentReferenceList) AppendList(list gotenresource.ParentReferenceList) gotenresource.ParentReferenceList {
	return append(l, list.(PolicyParentReferenceList)...)
}

func (l PolicyParentReferenceList) Slice(first, second int) gotenresource.ParentReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l PolicyParentReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l PolicyParentReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*ParentReference)
}

func (l PolicyParentReferenceList) Length() int {
	return len(l)
}

type PolicyMap map[Name]*Policy

func (m PolicyMap) Get(name gotenresource.Name) gotenresource.Resource {
	return m[*name.(*Name)]
}

func (m PolicyMap) Set(res gotenresource.Resource) {
	tRes := res.(*Policy)
	m[*tRes.Name] = tRes
}

func (m PolicyMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m PolicyMap) Length() int {
	return len(m)
}

func (m PolicyMap) ForEach(cb func(gotenresource.Name, gotenresource.Resource) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}

type PolicyChangeMap map[Name]*PolicyChange

func (m PolicyChangeMap) Get(name gotenresource.Name) gotenresource.ResourceChange {
	return m[*name.(*Name)]
}

func (m PolicyChangeMap) Set(change gotenresource.ResourceChange) {
	tChange := change.(*PolicyChange)
	m[*tChange.GetPolicyName()] = tChange
}

func (m PolicyChangeMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m PolicyChangeMap) Length() int {
	return len(m)
}

func (m PolicyChangeMap) ForEach(cb func(gotenresource.Name, gotenresource.ResourceChange) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}
