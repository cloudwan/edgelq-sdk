// Code generated by protoc-gen-goten-validate
// File: edgelq/alerting/proto/v1/policy.proto
// DO NOT EDIT!!!

package policy

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	gotenvalidate "github.com/cloudwan/goten-sdk/runtime/validate"
)

// proto imports
import (
	document "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/document"
	notification_channel "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/notification_channel"
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1/project"
	monitoring_common "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/common"
	meta_resource "github.com/cloudwan/goten-sdk/meta-service/resources/v1/resource"
	meta "github.com/cloudwan/goten-sdk/types/meta"
)

var (
	_ = bytes.Equal
	_ = errors.New
	_ = fmt.Errorf
	_ = net.ParseIP
	_ = regexp.Match
	_ = strings.Split
	_ = time.Now
	_ = utf8.RuneCountInString
	_ = url.Parse
	_ = gotenvalidate.NewValidationError
)

// make sure we're using proto imports
var (
	_ = &document.Document{}
	_ = &notification_channel.NotificationChannel{}
	_ = &iam_project.Project{}
	_ = &monitoring_common.LabelDescriptor{}
	_ = &meta_resource.Resource{}
	_ = &meta.Meta{}
)

func (obj *Policy) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if subobj, ok := interface{}(obj.Metadata).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("Policy", "metadata", obj.Metadata, "nested object validation failed", err)
		}
	}
	{
		rlen := utf8.RuneCountInString(obj.DisplayName)
		if rlen > 256 {
			return gotenvalidate.NewValidationError("Policy", "displayName", obj.DisplayName, "field must contain at most 256 characters", nil)
		}
	}
	{
		rlen := utf8.RuneCountInString(obj.Description)
		if rlen > 512 {
			return gotenvalidate.NewValidationError("Policy", "description", obj.Description, "field must contain at most 512 characters", nil)
		}
	}
	if obj.Spec == nil {
		return gotenvalidate.NewValidationError("Policy", "spec", obj.Spec, "field is required", nil)
	}
	if subobj, ok := interface{}(obj.Spec).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("Policy", "spec", obj.Spec, "nested object validation failed", err)
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Policy_Spec) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if _, ok := Policy_Spec_ProcessingLocation_name[int32(obj.ProcessingLocation)]; !ok {
		return gotenvalidate.NewValidationError("Spec", "processingLocation", obj.ProcessingLocation, "field must be a defined enum value", nil)
	}
	for idx, elem := range obj.Notifications {
		if subobj, ok := interface{}(elem).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("Spec", "notifications", obj.Notifications[idx], "nested object validation failed", err)
			}
		}
	}
	if obj.ResourceIdentity == nil {
		return gotenvalidate.NewValidationError("Spec", "resourceIdentity", obj.ResourceIdentity, "field is required", nil)
	}
	if subobj, ok := interface{}(obj.ResourceIdentity).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("Spec", "resourceIdentity", obj.ResourceIdentity, "nested object validation failed", err)
		}
	}
	for idx, elem := range obj.SupportingQueries {
		if subobj, ok := interface{}(elem).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("Spec", "supportingQueries", obj.SupportingQueries[idx], "nested object validation failed", err)
			}
		}
	}
	if subobj, ok := interface{}(obj.AiAgent).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("Spec", "aiAgent", obj.AiAgent, "nested object validation failed", err)
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Policy_Spec_Notification) GotenValidate() error {
	if obj == nil {
		return nil
	}
	for _, el := range obj.EnabledKinds {

		if _, ok := Policy_Spec_Notification_Kind_name[int32(el)]; !ok {
			return gotenvalidate.NewValidationError("Notification", "enabledKinds", el, "field must be a defined enum value", nil)
		}
	}
	if !(obj.MaxAlertBodiesInMsg >= 0) {
		return gotenvalidate.NewValidationError("Notification", "maxAlertBodiesInMsg", obj.MaxAlertBodiesInMsg, "field must be greater or equal to 0", nil)
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Policy_Spec_ResourceIdentity) GotenValidate() error {
	if obj == nil {
		return nil
	}
	for idx, elem := range obj.Labels {
		if subobj, ok := interface{}(elem).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("ResourceIdentity", "labels", obj.Labels[idx], "nested object validation failed", err)
			}
		}
	}
	if len(obj.NamePatterns) < 1 {
		return gotenvalidate.NewValidationError("ResourceIdentity", "namePatterns", obj.NamePatterns, "field must have at least 1 items", nil)
	}
	if len(obj.NamePatterns) > 1 {
		return gotenvalidate.NewValidationError("ResourceIdentity", "namePatterns", obj.NamePatterns, "field must have at most 1 items", nil)
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Policy_Spec_SupportingAlertQuery) GotenValidate() error {
	if obj == nil {
		return nil
	}
	switch opt := obj.Query.(type) {
	case *Policy_Spec_SupportingAlertQuery_TsQuery_:
		if subobj, ok := interface{}(opt.TsQuery).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("SupportingAlertQuery", "tsQuery", opt.TsQuery, "nested object validation failed", err)
			}
		}
	case *Policy_Spec_SupportingAlertQuery_LogQuery_:
		if subobj, ok := interface{}(opt.LogQuery).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("SupportingAlertQuery", "logQuery", opt.LogQuery, "nested object validation failed", err)
			}
		}
	case *Policy_Spec_SupportingAlertQuery_RestGetQuery_:
		if subobj, ok := interface{}(opt.RestGetQuery).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("SupportingAlertQuery", "restGetQuery", opt.RestGetQuery, "nested object validation failed", err)
			}
		}
	case *Policy_Spec_SupportingAlertQuery_RestListQuery_:
		if subobj, ok := interface{}(opt.RestListQuery).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("SupportingAlertQuery", "restListQuery", opt.RestListQuery, "nested object validation failed", err)
			}
		}
	default:
		_ = opt
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Policy_Spec_AIAgentHandling) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if subobj, ok := interface{}(obj.EdgeConnectivity).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("AIAgentHandling", "edgeConnectivity", obj.EdgeConnectivity, "nested object validation failed", err)
		}
	}
	for idx, elem := range obj.RemediationOptions {
		if subobj, ok := interface{}(elem).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("AIAgentHandling", "remediationOptions", obj.RemediationOptions[idx], "nested object validation failed", err)
			}
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Policy_Spec_ResourceIdentity_LabelInfo) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if len(obj.Key) > 64 {
		return gotenvalidate.NewValidationError("LabelInfo", "key", obj.Key, "field must contain at most 64 characters", nil)
	}
	if obj.Key == "" {
		return gotenvalidate.NewValidationError("LabelInfo", "key", obj.Key, "field is required", nil)
	}
	if len(obj.Contexts) < 1 {
		return gotenvalidate.NewValidationError("LabelInfo", "contexts", obj.Contexts, "field must have at least 1 items", nil)
	}
	if len(obj.Contexts) > 1 {
		values := make(map[Policy_Spec_ResourceIdentity_LabelInfo_UsageContext]struct{})
		for _, v := range obj.Contexts {
			if _, ok := values[v]; ok {
				return gotenvalidate.NewValidationError("LabelInfo", "contexts", obj.Contexts, "field must contain unique items", nil)
			}
			values[v] = struct{}{}
		}
	}
	for _, el := range obj.Contexts {

		if _, ok := Policy_Spec_ResourceIdentity_LabelInfo_UsageContext_name[int32(el)]; !ok {
			return gotenvalidate.NewValidationError("LabelInfo", "contexts", el, "field must be a defined enum value", nil)
		}
	}
	if len(obj.MappedNameSegment) > 128 {
		return gotenvalidate.NewValidationError("LabelInfo", "mappedNameSegment", obj.MappedNameSegment, "field must contain at most 128 characters", nil)
	}
	if obj.MappedNameSegment == "" {
		return gotenvalidate.NewValidationError("LabelInfo", "mappedNameSegment", obj.MappedNameSegment, "field is required", nil)
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Policy_Spec_SupportingAlertQuery_TsQuery) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if len(obj.Description) > 256 {
		return gotenvalidate.NewValidationError("TsQuery", "description", obj.Description, "field must contain at most 256 characters", nil)
	}
	if obj.Description == "" {
		return gotenvalidate.NewValidationError("TsQuery", "description", obj.Description, "field is required", nil)
	}
	if len(obj.FilterTemplate) > 256 {
		return gotenvalidate.NewValidationError("TsQuery", "filterTemplate", obj.FilterTemplate, "field must contain at most 256 characters", nil)
	}
	if obj.FilterTemplate == "" {
		return gotenvalidate.NewValidationError("TsQuery", "filterTemplate", obj.FilterTemplate, "field is required", nil)
	}
	if obj.Aggregation == nil {
		return gotenvalidate.NewValidationError("TsQuery", "aggregation", obj.Aggregation, "field is required", nil)
	}
	if subobj, ok := interface{}(obj.Aggregation).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("TsQuery", "aggregation", obj.Aggregation, "nested object validation failed", err)
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Policy_Spec_SupportingAlertQuery_LogQuery) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if len(obj.Description) > 256 {
		return gotenvalidate.NewValidationError("LogQuery", "description", obj.Description, "field must contain at most 256 characters", nil)
	}
	if obj.Description == "" {
		return gotenvalidate.NewValidationError("LogQuery", "description", obj.Description, "field is required", nil)
	}
	if len(obj.FilterTemplate) > 256 {
		return gotenvalidate.NewValidationError("LogQuery", "filterTemplate", obj.FilterTemplate, "field must contain at most 256 characters", nil)
	}
	if obj.FilterTemplate == "" {
		return gotenvalidate.NewValidationError("LogQuery", "filterTemplate", obj.FilterTemplate, "field is required", nil)
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Policy_Spec_SupportingAlertQuery_RestGetQuery) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if len(obj.Description) > 256 {
		return gotenvalidate.NewValidationError("RestGetQuery", "description", obj.Description, "field must contain at most 256 characters", nil)
	}
	if obj.Description == "" {
		return gotenvalidate.NewValidationError("RestGetQuery", "description", obj.Description, "field is required", nil)
	}
	if uri, err := url.Parse(string(obj.Endpoint)); err != nil {
		return gotenvalidate.NewValidationError("RestGetQuery", "endpoint", obj.Endpoint, "field must contain a valid URI", nil)
	} else if !uri.IsAbs() {
		return gotenvalidate.NewValidationError("RestGetQuery", "endpoint", obj.Endpoint, "field must contain an absolute URI", nil)
	}
	if obj.Endpoint == "" {
		return gotenvalidate.NewValidationError("RestGetQuery", "endpoint", obj.Endpoint, "field is required", nil)
	}
	if len(obj.PathTemplate) > 256 {
		return gotenvalidate.NewValidationError("RestGetQuery", "pathTemplate", obj.PathTemplate, "field must contain at most 256 characters", nil)
	}
	if obj.PathTemplate == "" {
		return gotenvalidate.NewValidationError("RestGetQuery", "pathTemplate", obj.PathTemplate, "field is required", nil)
	}
	if len(obj.View) > 32 {
		return gotenvalidate.NewValidationError("RestGetQuery", "view", obj.View, "field must contain at most 32 characters", nil)
	}
	if len(obj.FieldMask) > 512 {
		return gotenvalidate.NewValidationError("RestGetQuery", "fieldMask", obj.FieldMask, "field must contain at most 512 characters", nil)
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Policy_Spec_SupportingAlertQuery_RestListQuery) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if len(obj.Description) > 256 {
		return gotenvalidate.NewValidationError("RestListQuery", "description", obj.Description, "field must contain at most 256 characters", nil)
	}
	if obj.Description == "" {
		return gotenvalidate.NewValidationError("RestListQuery", "description", obj.Description, "field is required", nil)
	}
	if uri, err := url.Parse(string(obj.Endpoint)); err != nil {
		return gotenvalidate.NewValidationError("RestListQuery", "endpoint", obj.Endpoint, "field must contain a valid URI", nil)
	} else if !uri.IsAbs() {
		return gotenvalidate.NewValidationError("RestListQuery", "endpoint", obj.Endpoint, "field must contain an absolute URI", nil)
	}
	if obj.Endpoint == "" {
		return gotenvalidate.NewValidationError("RestListQuery", "endpoint", obj.Endpoint, "field is required", nil)
	}
	if len(obj.PathTemplate) > 256 {
		return gotenvalidate.NewValidationError("RestListQuery", "pathTemplate", obj.PathTemplate, "field must contain at most 256 characters", nil)
	}
	if obj.PathTemplate == "" {
		return gotenvalidate.NewValidationError("RestListQuery", "pathTemplate", obj.PathTemplate, "field is required", nil)
	}
	if len(obj.View) > 32 {
		return gotenvalidate.NewValidationError("RestListQuery", "view", obj.View, "field must contain at most 32 characters", nil)
	}
	if len(obj.FieldMask) > 512 {
		return gotenvalidate.NewValidationError("RestListQuery", "fieldMask", obj.FieldMask, "field must contain at most 512 characters", nil)
	}
	if len(obj.FilterTemplate) > 256 {
		return gotenvalidate.NewValidationError("RestListQuery", "filterTemplate", obj.FilterTemplate, "field must contain at most 256 characters", nil)
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Policy_Spec_AIAgentHandling_EdgeConnectivity) GotenValidate() error {
	if obj == nil {
		return nil
	}
	switch opt := obj.Type.(type) {
	case *Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSsh:
		if subobj, ok := interface{}(opt.DeviceSsh).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("EdgeConnectivity", "deviceSsh", opt.DeviceSsh, "nested object validation failed", err)
			}
		}
	case *Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSsh:
		if subobj, ok := interface{}(opt.ProxiesSsh).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("EdgeConnectivity", "proxiesSsh", opt.ProxiesSsh, "nested object validation failed", err)
			}
		}
	case *Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSsh:
		if subobj, ok := interface{}(opt.PodSsh).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("EdgeConnectivity", "podSsh", opt.PodSsh, "nested object validation failed", err)
			}
		}
	default:
		_ = opt
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Policy_Spec_AIAgentHandling_Remediation) GotenValidate() error {
	if obj == nil {
		return nil
	}
	switch opt := obj.Type.(type) {
	case *Policy_Spec_AIAgentHandling_Remediation_FixInSsh:
		if subobj, ok := interface{}(opt.FixInSsh).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("Remediation", "fixInSsh", opt.FixInSsh, "nested object validation failed", err)
			}
		}
	case *Policy_Spec_AIAgentHandling_Remediation_Reboot_:
		if subobj, ok := interface{}(opt.Reboot).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("Remediation", "reboot", opt.Reboot, "nested object validation failed", err)
			}
		}
	default:
		_ = opt
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSSH) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if len(obj.ClientName) > 64 {
		return gotenvalidate.NewValidationError("DeviceSSH", "clientName", obj.ClientName, "field must contain at most 64 characters", nil)
	}
	if obj.ClientName == "" {
		return gotenvalidate.NewValidationError("DeviceSSH", "clientName", obj.ClientName, "field is required", nil)
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if len(obj.ServiceDomain) > 64 {
		return gotenvalidate.NewValidationError("ProxiesSSH", "serviceDomain", obj.ServiceDomain, "field must contain at most 64 characters", nil)
	}
	if obj.ServiceDomain == "" {
		return gotenvalidate.NewValidationError("ProxiesSSH", "serviceDomain", obj.ServiceDomain, "field is required", nil)
	}
	if len(obj.ProviderNameTmpl) > 256 {
		return gotenvalidate.NewValidationError("ProxiesSSH", "providerNameTmpl", obj.ProviderNameTmpl, "field must contain at most 256 characters", nil)
	}
	if obj.ProviderNameTmpl == "" {
		return gotenvalidate.NewValidationError("ProxiesSSH", "providerNameTmpl", obj.ProviderNameTmpl, "field is required", nil)
	}
	if len(obj.ClientName) > 64 {
		return gotenvalidate.NewValidationError("ProxiesSSH", "clientName", obj.ClientName, "field must contain at most 64 characters", nil)
	}
	if obj.ClientName == "" {
		return gotenvalidate.NewValidationError("ProxiesSSH", "clientName", obj.ClientName, "field is required", nil)
	}
	if len(obj.ServiceName) > 128 {
		return gotenvalidate.NewValidationError("ProxiesSSH", "serviceName", obj.ServiceName, "field must contain at most 128 characters", nil)
	}
	if obj.ServiceName == "" {
		return gotenvalidate.NewValidationError("ProxiesSSH", "serviceName", obj.ServiceName, "field is required", nil)
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSSH) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if len(obj.ClientName) > 64 {
		return gotenvalidate.NewValidationError("PodSSH", "clientName", obj.ClientName, "field must contain at most 64 characters", nil)
	}
	if obj.ClientName == "" {
		return gotenvalidate.NewValidationError("PodSSH", "clientName", obj.ClientName, "field is required", nil)
	}
	if len(obj.Username) > 32 {
		return gotenvalidate.NewValidationError("PodSSH", "username", obj.Username, "field must contain at most 32 characters", nil)
	}
	if obj.Username == "" {
		return gotenvalidate.NewValidationError("PodSSH", "username", obj.Username, "field is required", nil)
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Policy_Spec_AIAgentHandling_Remediation_FixInSSH) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Policy_Spec_AIAgentHandling_Remediation_Reboot) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
