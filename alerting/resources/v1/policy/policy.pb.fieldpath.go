// Code generated by protoc-gen-goten-object
// File: edgelq/alerting/proto/v1/policy.proto
// DO NOT EDIT!!!

package policy

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
	"github.com/cloudwan/goten-sdk/runtime/strcase"
)

// proto imports
import (
	rcommon "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/common"
	document "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/document"
	notification_channel "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/notification_channel"
	policy_template "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/policy_template"
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1/project"
	meta "github.com/cloudwan/goten-sdk/types/meta"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &document.Document{}
	_ = &notification_channel.NotificationChannel{}
	_ = &policy_template.PolicyTemplate{}
	_ = &rcommon.LogCndSpec{}
	_ = &iam_project.Project{}
	_ = &fieldmaskpb.FieldMask{}
	_ = &meta.Meta{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type Policy_FieldPath interface {
	gotenobject.FieldPath
	Selector() Policy_FieldPathSelector
	Get(source *Policy) []interface{}
	GetSingle(source *Policy) (interface{}, bool)
	ClearValue(item *Policy)

	// Those methods build corresponding Policy_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) Policy_FieldPathValue
	WithIArrayOfValues(values interface{}) Policy_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) Policy_FieldPathArrayItemValue
}

type Policy_FieldPathSelector int32

const (
	Policy_FieldPathSelectorName                 Policy_FieldPathSelector = 0
	Policy_FieldPathSelectorMetadata             Policy_FieldPathSelector = 1
	Policy_FieldPathSelectorDisplayName          Policy_FieldPathSelector = 2
	Policy_FieldPathSelectorDescription          Policy_FieldPathSelector = 3
	Policy_FieldPathSelectorSupportingDocs       Policy_FieldPathSelector = 4
	Policy_FieldPathSelectorSpec                 Policy_FieldPathSelector = 5
	Policy_FieldPathSelectorTemplateSource       Policy_FieldPathSelector = 6
	Policy_FieldPathSelectorNotificationChannels Policy_FieldPathSelector = 7
)

func (s Policy_FieldPathSelector) String() string {
	switch s {
	case Policy_FieldPathSelectorName:
		return "name"
	case Policy_FieldPathSelectorMetadata:
		return "metadata"
	case Policy_FieldPathSelectorDisplayName:
		return "display_name"
	case Policy_FieldPathSelectorDescription:
		return "description"
	case Policy_FieldPathSelectorSupportingDocs:
		return "supporting_docs"
	case Policy_FieldPathSelectorSpec:
		return "spec"
	case Policy_FieldPathSelectorTemplateSource:
		return "template_source"
	case Policy_FieldPathSelectorNotificationChannels:
		return "notification_channels"
	default:
		panic(fmt.Sprintf("Invalid selector for Policy: %d", s))
	}
}

func BuildPolicy_FieldPath(fp gotenobject.RawFieldPath) (Policy_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Policy")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &Policy_FieldTerminalPath{selector: Policy_FieldPathSelectorName}, nil
		case "metadata":
			return &Policy_FieldTerminalPath{selector: Policy_FieldPathSelectorMetadata}, nil
		case "display_name", "displayName", "display-name":
			return &Policy_FieldTerminalPath{selector: Policy_FieldPathSelectorDisplayName}, nil
		case "description":
			return &Policy_FieldTerminalPath{selector: Policy_FieldPathSelectorDescription}, nil
		case "supporting_docs", "supportingDocs", "supporting-docs":
			return &Policy_FieldTerminalPath{selector: Policy_FieldPathSelectorSupportingDocs}, nil
		case "spec":
			return &Policy_FieldTerminalPath{selector: Policy_FieldPathSelectorSpec}, nil
		case "template_source", "templateSource", "template-source":
			return &Policy_FieldTerminalPath{selector: Policy_FieldPathSelectorTemplateSource}, nil
		case "notification_channels", "notificationChannels", "notification-channels":
			return &Policy_FieldTerminalPath{selector: Policy_FieldPathSelectorNotificationChannels}, nil
		}
	} else {
		switch fp[0] {
		case "metadata":
			if subpath, err := meta.BuildMeta_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &Policy_FieldSubPath{selector: Policy_FieldPathSelectorMetadata, subPath: subpath}, nil
			}
		case "spec":
			if subpath, err := rcommon.BuildPolicySpec_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &Policy_FieldSubPath{selector: Policy_FieldPathSelectorSpec, subPath: subpath}, nil
			}
		case "template_source", "templateSource", "template-source":
			if subpath, err := BuildPolicyTemplateSource_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &Policy_FieldSubPath{selector: Policy_FieldPathSelectorTemplateSource, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Policy", fp)
}

func ParsePolicy_FieldPath(rawField string) (Policy_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildPolicy_FieldPath(fp)
}

func MustParsePolicy_FieldPath(rawField string) Policy_FieldPath {
	fp, err := ParsePolicy_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type Policy_FieldTerminalPath struct {
	selector Policy_FieldPathSelector
}

var _ Policy_FieldPath = (*Policy_FieldTerminalPath)(nil)

func (fp *Policy_FieldTerminalPath) Selector() Policy_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *Policy_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *Policy_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Policy
func (fp *Policy_FieldTerminalPath) Get(source *Policy) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case Policy_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case Policy_FieldPathSelectorMetadata:
			if source.Metadata != nil {
				values = append(values, source.Metadata)
			}
		case Policy_FieldPathSelectorDisplayName:
			values = append(values, source.DisplayName)
		case Policy_FieldPathSelectorDescription:
			values = append(values, source.Description)
		case Policy_FieldPathSelectorSupportingDocs:
			for _, value := range source.GetSupportingDocs() {
				values = append(values, value)
			}
		case Policy_FieldPathSelectorSpec:
			if source.Spec != nil {
				values = append(values, source.Spec)
			}
		case Policy_FieldPathSelectorTemplateSource:
			if source.TemplateSource != nil {
				values = append(values, source.TemplateSource)
			}
		case Policy_FieldPathSelectorNotificationChannels:
			for _, value := range source.GetNotificationChannels() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Policy: %d", fp.selector))
		}
	}
	return
}

func (fp *Policy_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Policy))
}

// GetSingle returns value pointed by specific field of from source Policy
func (fp *Policy_FieldTerminalPath) GetSingle(source *Policy) (interface{}, bool) {
	switch fp.selector {
	case Policy_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case Policy_FieldPathSelectorMetadata:
		res := source.GetMetadata()
		return res, res != nil
	case Policy_FieldPathSelectorDisplayName:
		return source.GetDisplayName(), source != nil
	case Policy_FieldPathSelectorDescription:
		return source.GetDescription(), source != nil
	case Policy_FieldPathSelectorSupportingDocs:
		res := source.GetSupportingDocs()
		return res, res != nil
	case Policy_FieldPathSelectorSpec:
		res := source.GetSpec()
		return res, res != nil
	case Policy_FieldPathSelectorTemplateSource:
		res := source.GetTemplateSource()
		return res, res != nil
	case Policy_FieldPathSelectorNotificationChannels:
		res := source.GetNotificationChannels()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Policy: %d", fp.selector))
	}
}

func (fp *Policy_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Policy))
}

// GetDefault returns a default value of the field type
func (fp *Policy_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case Policy_FieldPathSelectorName:
		return (*Name)(nil)
	case Policy_FieldPathSelectorMetadata:
		return (*meta.Meta)(nil)
	case Policy_FieldPathSelectorDisplayName:
		return ""
	case Policy_FieldPathSelectorDescription:
		return ""
	case Policy_FieldPathSelectorSupportingDocs:
		return ([]*document.Reference)(nil)
	case Policy_FieldPathSelectorSpec:
		return (*rcommon.PolicySpec)(nil)
	case Policy_FieldPathSelectorTemplateSource:
		return (*Policy_TemplateSource)(nil)
	case Policy_FieldPathSelectorNotificationChannels:
		return ([]*notification_channel.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for Policy: %d", fp.selector))
	}
}

func (fp *Policy_FieldTerminalPath) ClearValue(item *Policy) {
	if item != nil {
		switch fp.selector {
		case Policy_FieldPathSelectorName:
			item.Name = nil
		case Policy_FieldPathSelectorMetadata:
			item.Metadata = nil
		case Policy_FieldPathSelectorDisplayName:
			item.DisplayName = ""
		case Policy_FieldPathSelectorDescription:
			item.Description = ""
		case Policy_FieldPathSelectorSupportingDocs:
			item.SupportingDocs = nil
		case Policy_FieldPathSelectorSpec:
			item.Spec = nil
		case Policy_FieldPathSelectorTemplateSource:
			item.TemplateSource = nil
		case Policy_FieldPathSelectorNotificationChannels:
			item.NotificationChannels = nil
		default:
			panic(fmt.Sprintf("Invalid selector for Policy: %d", fp.selector))
		}
	}
}

func (fp *Policy_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Policy))
}

// IsLeaf - whether field path is holds simple value
func (fp *Policy_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == Policy_FieldPathSelectorName ||
		fp.selector == Policy_FieldPathSelectorDisplayName ||
		fp.selector == Policy_FieldPathSelectorDescription ||
		fp.selector == Policy_FieldPathSelectorSupportingDocs ||
		fp.selector == Policy_FieldPathSelectorNotificationChannels
}

func (fp *Policy_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *Policy_FieldTerminalPath) WithIValue(value interface{}) Policy_FieldPathValue {
	switch fp.selector {
	case Policy_FieldPathSelectorName:
		return &Policy_FieldTerminalPathValue{Policy_FieldTerminalPath: *fp, value: value.(*Name)}
	case Policy_FieldPathSelectorMetadata:
		return &Policy_FieldTerminalPathValue{Policy_FieldTerminalPath: *fp, value: value.(*meta.Meta)}
	case Policy_FieldPathSelectorDisplayName:
		return &Policy_FieldTerminalPathValue{Policy_FieldTerminalPath: *fp, value: value.(string)}
	case Policy_FieldPathSelectorDescription:
		return &Policy_FieldTerminalPathValue{Policy_FieldTerminalPath: *fp, value: value.(string)}
	case Policy_FieldPathSelectorSupportingDocs:
		return &Policy_FieldTerminalPathValue{Policy_FieldTerminalPath: *fp, value: value.([]*document.Reference)}
	case Policy_FieldPathSelectorSpec:
		return &Policy_FieldTerminalPathValue{Policy_FieldTerminalPath: *fp, value: value.(*rcommon.PolicySpec)}
	case Policy_FieldPathSelectorTemplateSource:
		return &Policy_FieldTerminalPathValue{Policy_FieldTerminalPath: *fp, value: value.(*Policy_TemplateSource)}
	case Policy_FieldPathSelectorNotificationChannels:
		return &Policy_FieldTerminalPathValue{Policy_FieldTerminalPath: *fp, value: value.([]*notification_channel.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for Policy: %d", fp.selector))
	}
}

func (fp *Policy_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *Policy_FieldTerminalPath) WithIArrayOfValues(values interface{}) Policy_FieldPathArrayOfValues {
	fpaov := &Policy_FieldTerminalPathArrayOfValues{Policy_FieldTerminalPath: *fp}
	switch fp.selector {
	case Policy_FieldPathSelectorName:
		return &Policy_FieldTerminalPathArrayOfValues{Policy_FieldTerminalPath: *fp, values: values.([]*Name)}
	case Policy_FieldPathSelectorMetadata:
		return &Policy_FieldTerminalPathArrayOfValues{Policy_FieldTerminalPath: *fp, values: values.([]*meta.Meta)}
	case Policy_FieldPathSelectorDisplayName:
		return &Policy_FieldTerminalPathArrayOfValues{Policy_FieldTerminalPath: *fp, values: values.([]string)}
	case Policy_FieldPathSelectorDescription:
		return &Policy_FieldTerminalPathArrayOfValues{Policy_FieldTerminalPath: *fp, values: values.([]string)}
	case Policy_FieldPathSelectorSupportingDocs:
		return &Policy_FieldTerminalPathArrayOfValues{Policy_FieldTerminalPath: *fp, values: values.([][]*document.Reference)}
	case Policy_FieldPathSelectorSpec:
		return &Policy_FieldTerminalPathArrayOfValues{Policy_FieldTerminalPath: *fp, values: values.([]*rcommon.PolicySpec)}
	case Policy_FieldPathSelectorTemplateSource:
		return &Policy_FieldTerminalPathArrayOfValues{Policy_FieldTerminalPath: *fp, values: values.([]*Policy_TemplateSource)}
	case Policy_FieldPathSelectorNotificationChannels:
		return &Policy_FieldTerminalPathArrayOfValues{Policy_FieldTerminalPath: *fp, values: values.([][]*notification_channel.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for Policy: %d", fp.selector))
	}
	return fpaov
}

func (fp *Policy_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *Policy_FieldTerminalPath) WithIArrayItemValue(value interface{}) Policy_FieldPathArrayItemValue {
	switch fp.selector {
	case Policy_FieldPathSelectorSupportingDocs:
		return &Policy_FieldTerminalPathArrayItemValue{Policy_FieldTerminalPath: *fp, value: value.(*document.Reference)}
	case Policy_FieldPathSelectorNotificationChannels:
		return &Policy_FieldTerminalPathArrayItemValue{Policy_FieldTerminalPath: *fp, value: value.(*notification_channel.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for Policy: %d", fp.selector))
	}
}

func (fp *Policy_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type Policy_FieldSubPath struct {
	selector Policy_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ Policy_FieldPath = (*Policy_FieldSubPath)(nil)

func (fps *Policy_FieldSubPath) Selector() Policy_FieldPathSelector {
	return fps.selector
}
func (fps *Policy_FieldSubPath) AsMetadataSubPath() (meta.Meta_FieldPath, bool) {
	res, ok := fps.subPath.(meta.Meta_FieldPath)
	return res, ok
}
func (fps *Policy_FieldSubPath) AsSpecSubPath() (rcommon.PolicySpec_FieldPath, bool) {
	res, ok := fps.subPath.(rcommon.PolicySpec_FieldPath)
	return res, ok
}
func (fps *Policy_FieldSubPath) AsTemplateSourceSubPath() (PolicyTemplateSource_FieldPath, bool) {
	res, ok := fps.subPath.(PolicyTemplateSource_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *Policy_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *Policy_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source Policy
func (fps *Policy_FieldSubPath) Get(source *Policy) (values []interface{}) {
	switch fps.selector {
	case Policy_FieldPathSelectorMetadata:
		values = append(values, fps.subPath.GetRaw(source.GetMetadata())...)
	case Policy_FieldPathSelectorSpec:
		values = append(values, fps.subPath.GetRaw(source.GetSpec())...)
	case Policy_FieldPathSelectorTemplateSource:
		values = append(values, fps.subPath.GetRaw(source.GetTemplateSource())...)
	default:
		panic(fmt.Sprintf("Invalid selector for Policy: %d", fps.selector))
	}
	return
}

func (fps *Policy_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*Policy))
}

// GetSingle returns value of selected field from source Policy
func (fps *Policy_FieldSubPath) GetSingle(source *Policy) (interface{}, bool) {
	switch fps.selector {
	case Policy_FieldPathSelectorMetadata:
		if source.GetMetadata() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetMetadata())
	case Policy_FieldPathSelectorSpec:
		if source.GetSpec() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetSpec())
	case Policy_FieldPathSelectorTemplateSource:
		if source.GetTemplateSource() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetTemplateSource())
	default:
		panic(fmt.Sprintf("Invalid selector for Policy: %d", fps.selector))
	}
}

func (fps *Policy_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*Policy))
}

// GetDefault returns a default value of the field type
func (fps *Policy_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *Policy_FieldSubPath) ClearValue(item *Policy) {
	if item != nil {
		switch fps.selector {
		case Policy_FieldPathSelectorMetadata:
			fps.subPath.ClearValueRaw(item.Metadata)
		case Policy_FieldPathSelectorSpec:
			fps.subPath.ClearValueRaw(item.Spec)
		case Policy_FieldPathSelectorTemplateSource:
			fps.subPath.ClearValueRaw(item.TemplateSource)
		default:
			panic(fmt.Sprintf("Invalid selector for Policy: %d", fps.selector))
		}
	}
}

func (fps *Policy_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*Policy))
}

// IsLeaf - whether field path is holds simple value
func (fps *Policy_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *Policy_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&Policy_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *Policy_FieldSubPath) WithIValue(value interface{}) Policy_FieldPathValue {
	return &Policy_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *Policy_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *Policy_FieldSubPath) WithIArrayOfValues(values interface{}) Policy_FieldPathArrayOfValues {
	return &Policy_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *Policy_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *Policy_FieldSubPath) WithIArrayItemValue(value interface{}) Policy_FieldPathArrayItemValue {
	return &Policy_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *Policy_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// Policy_FieldPathValue allows storing values for Policy fields according to their type
type Policy_FieldPathValue interface {
	Policy_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Policy)
	CompareWith(*Policy) (cmp int, comparable bool)
}

func ParsePolicy_FieldPathValue(pathStr, valueStr string) (Policy_FieldPathValue, error) {
	fp, err := ParsePolicy_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Policy field path value from %s: %v", valueStr, err)
	}
	return fpv.(Policy_FieldPathValue), nil
}

func MustParsePolicy_FieldPathValue(pathStr, valueStr string) Policy_FieldPathValue {
	fpv, err := ParsePolicy_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type Policy_FieldTerminalPathValue struct {
	Policy_FieldTerminalPath
	value interface{}
}

var _ Policy_FieldPathValue = (*Policy_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Policy' as interface{}
func (fpv *Policy_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *Policy_FieldTerminalPathValue) AsNameValue() (*Name, bool) {
	res, ok := fpv.value.(*Name)
	return res, ok
}
func (fpv *Policy_FieldTerminalPathValue) AsMetadataValue() (*meta.Meta, bool) {
	res, ok := fpv.value.(*meta.Meta)
	return res, ok
}
func (fpv *Policy_FieldTerminalPathValue) AsDisplayNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *Policy_FieldTerminalPathValue) AsDescriptionValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *Policy_FieldTerminalPathValue) AsSupportingDocsValue() ([]*document.Reference, bool) {
	res, ok := fpv.value.([]*document.Reference)
	return res, ok
}
func (fpv *Policy_FieldTerminalPathValue) AsSpecValue() (*rcommon.PolicySpec, bool) {
	res, ok := fpv.value.(*rcommon.PolicySpec)
	return res, ok
}
func (fpv *Policy_FieldTerminalPathValue) AsTemplateSourceValue() (*Policy_TemplateSource, bool) {
	res, ok := fpv.value.(*Policy_TemplateSource)
	return res, ok
}
func (fpv *Policy_FieldTerminalPathValue) AsNotificationChannelsValue() ([]*notification_channel.Reference, bool) {
	res, ok := fpv.value.([]*notification_channel.Reference)
	return res, ok
}

// SetTo stores value for selected field for object Policy
func (fpv *Policy_FieldTerminalPathValue) SetTo(target **Policy) {
	if *target == nil {
		*target = new(Policy)
	}
	switch fpv.selector {
	case Policy_FieldPathSelectorName:
		(*target).Name = fpv.value.(*Name)
	case Policy_FieldPathSelectorMetadata:
		(*target).Metadata = fpv.value.(*meta.Meta)
	case Policy_FieldPathSelectorDisplayName:
		(*target).DisplayName = fpv.value.(string)
	case Policy_FieldPathSelectorDescription:
		(*target).Description = fpv.value.(string)
	case Policy_FieldPathSelectorSupportingDocs:
		(*target).SupportingDocs = fpv.value.([]*document.Reference)
	case Policy_FieldPathSelectorSpec:
		(*target).Spec = fpv.value.(*rcommon.PolicySpec)
	case Policy_FieldPathSelectorTemplateSource:
		(*target).TemplateSource = fpv.value.(*Policy_TemplateSource)
	case Policy_FieldPathSelectorNotificationChannels:
		(*target).NotificationChannels = fpv.value.([]*notification_channel.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for Policy: %d", fpv.selector))
	}
}

func (fpv *Policy_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Policy)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'Policy_FieldTerminalPathValue' with the value under path in 'Policy'.
func (fpv *Policy_FieldTerminalPathValue) CompareWith(source *Policy) (int, bool) {
	switch fpv.selector {
	case Policy_FieldPathSelectorName:
		leftValue := fpv.value.(*Name)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case Policy_FieldPathSelectorMetadata:
		return 0, false
	case Policy_FieldPathSelectorDisplayName:
		leftValue := fpv.value.(string)
		rightValue := source.GetDisplayName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case Policy_FieldPathSelectorDescription:
		leftValue := fpv.value.(string)
		rightValue := source.GetDescription()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case Policy_FieldPathSelectorSupportingDocs:
		return 0, false
	case Policy_FieldPathSelectorSpec:
		return 0, false
	case Policy_FieldPathSelectorTemplateSource:
		return 0, false
	case Policy_FieldPathSelectorNotificationChannels:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for Policy: %d", fpv.selector))
	}
}

func (fpv *Policy_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Policy))
}

type Policy_FieldSubPathValue struct {
	Policy_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ Policy_FieldPathValue = (*Policy_FieldSubPathValue)(nil)

func (fpvs *Policy_FieldSubPathValue) AsMetadataPathValue() (meta.Meta_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(meta.Meta_FieldPathValue)
	return res, ok
}
func (fpvs *Policy_FieldSubPathValue) AsSpecPathValue() (rcommon.PolicySpec_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(rcommon.PolicySpec_FieldPathValue)
	return res, ok
}
func (fpvs *Policy_FieldSubPathValue) AsTemplateSourcePathValue() (PolicyTemplateSource_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(PolicyTemplateSource_FieldPathValue)
	return res, ok
}

func (fpvs *Policy_FieldSubPathValue) SetTo(target **Policy) {
	if *target == nil {
		*target = new(Policy)
	}
	switch fpvs.Selector() {
	case Policy_FieldPathSelectorMetadata:
		fpvs.subPathValue.(meta.Meta_FieldPathValue).SetTo(&(*target).Metadata)
	case Policy_FieldPathSelectorSpec:
		fpvs.subPathValue.(rcommon.PolicySpec_FieldPathValue).SetTo(&(*target).Spec)
	case Policy_FieldPathSelectorTemplateSource:
		fpvs.subPathValue.(PolicyTemplateSource_FieldPathValue).SetTo(&(*target).TemplateSource)
	default:
		panic(fmt.Sprintf("Invalid selector for Policy: %d", fpvs.Selector()))
	}
}

func (fpvs *Policy_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Policy)
	fpvs.SetTo(&typedObject)
}

func (fpvs *Policy_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *Policy_FieldSubPathValue) CompareWith(source *Policy) (int, bool) {
	switch fpvs.Selector() {
	case Policy_FieldPathSelectorMetadata:
		return fpvs.subPathValue.(meta.Meta_FieldPathValue).CompareWith(source.GetMetadata())
	case Policy_FieldPathSelectorSpec:
		return fpvs.subPathValue.(rcommon.PolicySpec_FieldPathValue).CompareWith(source.GetSpec())
	case Policy_FieldPathSelectorTemplateSource:
		return fpvs.subPathValue.(PolicyTemplateSource_FieldPathValue).CompareWith(source.GetTemplateSource())
	default:
		panic(fmt.Sprintf("Invalid selector for Policy: %d", fpvs.Selector()))
	}
}

func (fpvs *Policy_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*Policy))
}

// Policy_FieldPathArrayItemValue allows storing single item in Path-specific values for Policy according to their type
// Present only for array (repeated) types.
type Policy_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	Policy_FieldPath
	ContainsValue(*Policy) bool
}

// ParsePolicy_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParsePolicy_FieldPathArrayItemValue(pathStr, valueStr string) (Policy_FieldPathArrayItemValue, error) {
	fp, err := ParsePolicy_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Policy field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(Policy_FieldPathArrayItemValue), nil
}

func MustParsePolicy_FieldPathArrayItemValue(pathStr, valueStr string) Policy_FieldPathArrayItemValue {
	fpaiv, err := ParsePolicy_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type Policy_FieldTerminalPathArrayItemValue struct {
	Policy_FieldTerminalPath
	value interface{}
}

var _ Policy_FieldPathArrayItemValue = (*Policy_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Policy as interface{}
func (fpaiv *Policy_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *Policy_FieldTerminalPathArrayItemValue) AsSupportingDocsItemValue() (*document.Reference, bool) {
	res, ok := fpaiv.value.(*document.Reference)
	return res, ok
}
func (fpaiv *Policy_FieldTerminalPathArrayItemValue) AsNotificationChannelsItemValue() (*notification_channel.Reference, bool) {
	res, ok := fpaiv.value.(*notification_channel.Reference)
	return res, ok
}

func (fpaiv *Policy_FieldTerminalPathArrayItemValue) GetSingle(source *Policy) (interface{}, bool) {
	return nil, false
}

func (fpaiv *Policy_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Policy))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Policy'
func (fpaiv *Policy_FieldTerminalPathArrayItemValue) ContainsValue(source *Policy) bool {
	slice := fpaiv.Policy_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type Policy_FieldSubPathArrayItemValue struct {
	Policy_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *Policy_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *Policy_FieldSubPathArrayItemValue) AsMetadataPathItemValue() (meta.Meta_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(meta.Meta_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *Policy_FieldSubPathArrayItemValue) AsSpecPathItemValue() (rcommon.PolicySpec_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(rcommon.PolicySpec_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *Policy_FieldSubPathArrayItemValue) AsTemplateSourcePathItemValue() (PolicyTemplateSource_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(PolicyTemplateSource_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'Policy'
func (fpaivs *Policy_FieldSubPathArrayItemValue) ContainsValue(source *Policy) bool {
	switch fpaivs.Selector() {
	case Policy_FieldPathSelectorMetadata:
		return fpaivs.subPathItemValue.(meta.Meta_FieldPathArrayItemValue).ContainsValue(source.GetMetadata())
	case Policy_FieldPathSelectorSpec:
		return fpaivs.subPathItemValue.(rcommon.PolicySpec_FieldPathArrayItemValue).ContainsValue(source.GetSpec())
	case Policy_FieldPathSelectorTemplateSource:
		return fpaivs.subPathItemValue.(PolicyTemplateSource_FieldPathArrayItemValue).ContainsValue(source.GetTemplateSource())
	default:
		panic(fmt.Sprintf("Invalid selector for Policy: %d", fpaivs.Selector()))
	}
}

// Policy_FieldPathArrayOfValues allows storing slice of values for Policy fields according to their type
type Policy_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	Policy_FieldPath
}

func ParsePolicy_FieldPathArrayOfValues(pathStr, valuesStr string) (Policy_FieldPathArrayOfValues, error) {
	fp, err := ParsePolicy_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Policy field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(Policy_FieldPathArrayOfValues), nil
}

func MustParsePolicy_FieldPathArrayOfValues(pathStr, valuesStr string) Policy_FieldPathArrayOfValues {
	fpaov, err := ParsePolicy_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type Policy_FieldTerminalPathArrayOfValues struct {
	Policy_FieldTerminalPath
	values interface{}
}

var _ Policy_FieldPathArrayOfValues = (*Policy_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *Policy_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case Policy_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*Name) {
			values = append(values, v)
		}
	case Policy_FieldPathSelectorMetadata:
		for _, v := range fpaov.values.([]*meta.Meta) {
			values = append(values, v)
		}
	case Policy_FieldPathSelectorDisplayName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case Policy_FieldPathSelectorDescription:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case Policy_FieldPathSelectorSupportingDocs:
		for _, v := range fpaov.values.([][]*document.Reference) {
			values = append(values, v)
		}
	case Policy_FieldPathSelectorSpec:
		for _, v := range fpaov.values.([]*rcommon.PolicySpec) {
			values = append(values, v)
		}
	case Policy_FieldPathSelectorTemplateSource:
		for _, v := range fpaov.values.([]*Policy_TemplateSource) {
			values = append(values, v)
		}
	case Policy_FieldPathSelectorNotificationChannels:
		for _, v := range fpaov.values.([][]*notification_channel.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *Policy_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*Name, bool) {
	res, ok := fpaov.values.([]*Name)
	return res, ok
}
func (fpaov *Policy_FieldTerminalPathArrayOfValues) AsMetadataArrayOfValues() ([]*meta.Meta, bool) {
	res, ok := fpaov.values.([]*meta.Meta)
	return res, ok
}
func (fpaov *Policy_FieldTerminalPathArrayOfValues) AsDisplayNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *Policy_FieldTerminalPathArrayOfValues) AsDescriptionArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *Policy_FieldTerminalPathArrayOfValues) AsSupportingDocsArrayOfValues() ([][]*document.Reference, bool) {
	res, ok := fpaov.values.([][]*document.Reference)
	return res, ok
}
func (fpaov *Policy_FieldTerminalPathArrayOfValues) AsSpecArrayOfValues() ([]*rcommon.PolicySpec, bool) {
	res, ok := fpaov.values.([]*rcommon.PolicySpec)
	return res, ok
}
func (fpaov *Policy_FieldTerminalPathArrayOfValues) AsTemplateSourceArrayOfValues() ([]*Policy_TemplateSource, bool) {
	res, ok := fpaov.values.([]*Policy_TemplateSource)
	return res, ok
}
func (fpaov *Policy_FieldTerminalPathArrayOfValues) AsNotificationChannelsArrayOfValues() ([][]*notification_channel.Reference, bool) {
	res, ok := fpaov.values.([][]*notification_channel.Reference)
	return res, ok
}

type Policy_FieldSubPathArrayOfValues struct {
	Policy_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ Policy_FieldPathArrayOfValues = (*Policy_FieldSubPathArrayOfValues)(nil)

func (fpsaov *Policy_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *Policy_FieldSubPathArrayOfValues) AsMetadataPathArrayOfValues() (meta.Meta_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(meta.Meta_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *Policy_FieldSubPathArrayOfValues) AsSpecPathArrayOfValues() (rcommon.PolicySpec_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(rcommon.PolicySpec_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *Policy_FieldSubPathArrayOfValues) AsTemplateSourcePathArrayOfValues() (PolicyTemplateSource_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(PolicyTemplateSource_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type PolicyTemplateSource_FieldPath interface {
	gotenobject.FieldPath
	Selector() PolicyTemplateSource_FieldPathSelector
	Get(source *Policy_TemplateSource) []interface{}
	GetSingle(source *Policy_TemplateSource) (interface{}, bool)
	ClearValue(item *Policy_TemplateSource)

	// Those methods build corresponding PolicyTemplateSource_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) PolicyTemplateSource_FieldPathValue
	WithIArrayOfValues(values interface{}) PolicyTemplateSource_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) PolicyTemplateSource_FieldPathArrayItemValue
}

type PolicyTemplateSource_FieldPathSelector int32

const (
	PolicyTemplateSource_FieldPathSelectorTemplate      PolicyTemplateSource_FieldPathSelector = 0
	PolicyTemplateSource_FieldPathSelectorUpdatedFields PolicyTemplateSource_FieldPathSelector = 1
)

func (s PolicyTemplateSource_FieldPathSelector) String() string {
	switch s {
	case PolicyTemplateSource_FieldPathSelectorTemplate:
		return "template"
	case PolicyTemplateSource_FieldPathSelectorUpdatedFields:
		return "updated_fields"
	default:
		panic(fmt.Sprintf("Invalid selector for Policy_TemplateSource: %d", s))
	}
}

func BuildPolicyTemplateSource_FieldPath(fp gotenobject.RawFieldPath) (PolicyTemplateSource_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Policy_TemplateSource")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "template":
			return &PolicyTemplateSource_FieldTerminalPath{selector: PolicyTemplateSource_FieldPathSelectorTemplate}, nil
		case "updated_fields", "updatedFields", "updated-fields":
			return &PolicyTemplateSource_FieldTerminalPath{selector: PolicyTemplateSource_FieldPathSelectorUpdatedFields}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Policy_TemplateSource", fp)
}

func ParsePolicyTemplateSource_FieldPath(rawField string) (PolicyTemplateSource_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildPolicyTemplateSource_FieldPath(fp)
}

func MustParsePolicyTemplateSource_FieldPath(rawField string) PolicyTemplateSource_FieldPath {
	fp, err := ParsePolicyTemplateSource_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type PolicyTemplateSource_FieldTerminalPath struct {
	selector PolicyTemplateSource_FieldPathSelector
}

var _ PolicyTemplateSource_FieldPath = (*PolicyTemplateSource_FieldTerminalPath)(nil)

func (fp *PolicyTemplateSource_FieldTerminalPath) Selector() PolicyTemplateSource_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *PolicyTemplateSource_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *PolicyTemplateSource_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Policy_TemplateSource
func (fp *PolicyTemplateSource_FieldTerminalPath) Get(source *Policy_TemplateSource) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case PolicyTemplateSource_FieldPathSelectorTemplate:
			if source.Template != nil {
				values = append(values, source.Template)
			}
		case PolicyTemplateSource_FieldPathSelectorUpdatedFields:
			if source.UpdatedFields != nil {
				values = append(values, source.UpdatedFields)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Policy_TemplateSource: %d", fp.selector))
		}
	}
	return
}

func (fp *PolicyTemplateSource_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Policy_TemplateSource))
}

// GetSingle returns value pointed by specific field of from source Policy_TemplateSource
func (fp *PolicyTemplateSource_FieldTerminalPath) GetSingle(source *Policy_TemplateSource) (interface{}, bool) {
	switch fp.selector {
	case PolicyTemplateSource_FieldPathSelectorTemplate:
		res := source.GetTemplate()
		return res, res != nil
	case PolicyTemplateSource_FieldPathSelectorUpdatedFields:
		res := source.GetUpdatedFields()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Policy_TemplateSource: %d", fp.selector))
	}
}

func (fp *PolicyTemplateSource_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Policy_TemplateSource))
}

// GetDefault returns a default value of the field type
func (fp *PolicyTemplateSource_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case PolicyTemplateSource_FieldPathSelectorTemplate:
		return (*policy_template.Reference)(nil)
	case PolicyTemplateSource_FieldPathSelectorUpdatedFields:
		return (*fieldmaskpb.FieldMask)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for Policy_TemplateSource: %d", fp.selector))
	}
}

func (fp *PolicyTemplateSource_FieldTerminalPath) ClearValue(item *Policy_TemplateSource) {
	if item != nil {
		switch fp.selector {
		case PolicyTemplateSource_FieldPathSelectorTemplate:
			item.Template = nil
		case PolicyTemplateSource_FieldPathSelectorUpdatedFields:
			item.UpdatedFields = nil
		default:
			panic(fmt.Sprintf("Invalid selector for Policy_TemplateSource: %d", fp.selector))
		}
	}
}

func (fp *PolicyTemplateSource_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Policy_TemplateSource))
}

// IsLeaf - whether field path is holds simple value
func (fp *PolicyTemplateSource_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == PolicyTemplateSource_FieldPathSelectorTemplate ||
		fp.selector == PolicyTemplateSource_FieldPathSelectorUpdatedFields
}

func (fp *PolicyTemplateSource_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *PolicyTemplateSource_FieldTerminalPath) WithIValue(value interface{}) PolicyTemplateSource_FieldPathValue {
	switch fp.selector {
	case PolicyTemplateSource_FieldPathSelectorTemplate:
		return &PolicyTemplateSource_FieldTerminalPathValue{PolicyTemplateSource_FieldTerminalPath: *fp, value: value.(*policy_template.Reference)}
	case PolicyTemplateSource_FieldPathSelectorUpdatedFields:
		return &PolicyTemplateSource_FieldTerminalPathValue{PolicyTemplateSource_FieldTerminalPath: *fp, value: value.(*fieldmaskpb.FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for Policy_TemplateSource: %d", fp.selector))
	}
}

func (fp *PolicyTemplateSource_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *PolicyTemplateSource_FieldTerminalPath) WithIArrayOfValues(values interface{}) PolicyTemplateSource_FieldPathArrayOfValues {
	fpaov := &PolicyTemplateSource_FieldTerminalPathArrayOfValues{PolicyTemplateSource_FieldTerminalPath: *fp}
	switch fp.selector {
	case PolicyTemplateSource_FieldPathSelectorTemplate:
		return &PolicyTemplateSource_FieldTerminalPathArrayOfValues{PolicyTemplateSource_FieldTerminalPath: *fp, values: values.([]*policy_template.Reference)}
	case PolicyTemplateSource_FieldPathSelectorUpdatedFields:
		return &PolicyTemplateSource_FieldTerminalPathArrayOfValues{PolicyTemplateSource_FieldTerminalPath: *fp, values: values.([]*fieldmaskpb.FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for Policy_TemplateSource: %d", fp.selector))
	}
	return fpaov
}

func (fp *PolicyTemplateSource_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *PolicyTemplateSource_FieldTerminalPath) WithIArrayItemValue(value interface{}) PolicyTemplateSource_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Policy_TemplateSource: %d", fp.selector))
	}
}

func (fp *PolicyTemplateSource_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// PolicyTemplateSource_FieldPathValue allows storing values for TemplateSource fields according to their type
type PolicyTemplateSource_FieldPathValue interface {
	PolicyTemplateSource_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Policy_TemplateSource)
	CompareWith(*Policy_TemplateSource) (cmp int, comparable bool)
}

func ParsePolicyTemplateSource_FieldPathValue(pathStr, valueStr string) (PolicyTemplateSource_FieldPathValue, error) {
	fp, err := ParsePolicyTemplateSource_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing TemplateSource field path value from %s: %v", valueStr, err)
	}
	return fpv.(PolicyTemplateSource_FieldPathValue), nil
}

func MustParsePolicyTemplateSource_FieldPathValue(pathStr, valueStr string) PolicyTemplateSource_FieldPathValue {
	fpv, err := ParsePolicyTemplateSource_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type PolicyTemplateSource_FieldTerminalPathValue struct {
	PolicyTemplateSource_FieldTerminalPath
	value interface{}
}

var _ PolicyTemplateSource_FieldPathValue = (*PolicyTemplateSource_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'TemplateSource' as interface{}
func (fpv *PolicyTemplateSource_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *PolicyTemplateSource_FieldTerminalPathValue) AsTemplateValue() (*policy_template.Reference, bool) {
	res, ok := fpv.value.(*policy_template.Reference)
	return res, ok
}
func (fpv *PolicyTemplateSource_FieldTerminalPathValue) AsUpdatedFieldsValue() (*fieldmaskpb.FieldMask, bool) {
	res, ok := fpv.value.(*fieldmaskpb.FieldMask)
	return res, ok
}

// SetTo stores value for selected field for object TemplateSource
func (fpv *PolicyTemplateSource_FieldTerminalPathValue) SetTo(target **Policy_TemplateSource) {
	if *target == nil {
		*target = new(Policy_TemplateSource)
	}
	switch fpv.selector {
	case PolicyTemplateSource_FieldPathSelectorTemplate:
		(*target).Template = fpv.value.(*policy_template.Reference)
	case PolicyTemplateSource_FieldPathSelectorUpdatedFields:
		(*target).UpdatedFields = fpv.value.(*fieldmaskpb.FieldMask)
	default:
		panic(fmt.Sprintf("Invalid selector for Policy_TemplateSource: %d", fpv.selector))
	}
}

func (fpv *PolicyTemplateSource_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Policy_TemplateSource)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'PolicyTemplateSource_FieldTerminalPathValue' with the value under path in 'Policy_TemplateSource'.
func (fpv *PolicyTemplateSource_FieldTerminalPathValue) CompareWith(source *Policy_TemplateSource) (int, bool) {
	switch fpv.selector {
	case PolicyTemplateSource_FieldPathSelectorTemplate:
		leftValue := fpv.value.(*policy_template.Reference)
		rightValue := source.GetTemplate()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case PolicyTemplateSource_FieldPathSelectorUpdatedFields:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for Policy_TemplateSource: %d", fpv.selector))
	}
}

func (fpv *PolicyTemplateSource_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Policy_TemplateSource))
}

// PolicyTemplateSource_FieldPathArrayItemValue allows storing single item in Path-specific values for TemplateSource according to their type
// Present only for array (repeated) types.
type PolicyTemplateSource_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	PolicyTemplateSource_FieldPath
	ContainsValue(*Policy_TemplateSource) bool
}

// ParsePolicyTemplateSource_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParsePolicyTemplateSource_FieldPathArrayItemValue(pathStr, valueStr string) (PolicyTemplateSource_FieldPathArrayItemValue, error) {
	fp, err := ParsePolicyTemplateSource_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing TemplateSource field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(PolicyTemplateSource_FieldPathArrayItemValue), nil
}

func MustParsePolicyTemplateSource_FieldPathArrayItemValue(pathStr, valueStr string) PolicyTemplateSource_FieldPathArrayItemValue {
	fpaiv, err := ParsePolicyTemplateSource_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type PolicyTemplateSource_FieldTerminalPathArrayItemValue struct {
	PolicyTemplateSource_FieldTerminalPath
	value interface{}
}

var _ PolicyTemplateSource_FieldPathArrayItemValue = (*PolicyTemplateSource_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Policy_TemplateSource as interface{}
func (fpaiv *PolicyTemplateSource_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *PolicyTemplateSource_FieldTerminalPathArrayItemValue) GetSingle(source *Policy_TemplateSource) (interface{}, bool) {
	return nil, false
}

func (fpaiv *PolicyTemplateSource_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Policy_TemplateSource))
}

// Contains returns a boolean indicating if value that is being held is present in given 'TemplateSource'
func (fpaiv *PolicyTemplateSource_FieldTerminalPathArrayItemValue) ContainsValue(source *Policy_TemplateSource) bool {
	slice := fpaiv.PolicyTemplateSource_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// PolicyTemplateSource_FieldPathArrayOfValues allows storing slice of values for TemplateSource fields according to their type
type PolicyTemplateSource_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	PolicyTemplateSource_FieldPath
}

func ParsePolicyTemplateSource_FieldPathArrayOfValues(pathStr, valuesStr string) (PolicyTemplateSource_FieldPathArrayOfValues, error) {
	fp, err := ParsePolicyTemplateSource_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing TemplateSource field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(PolicyTemplateSource_FieldPathArrayOfValues), nil
}

func MustParsePolicyTemplateSource_FieldPathArrayOfValues(pathStr, valuesStr string) PolicyTemplateSource_FieldPathArrayOfValues {
	fpaov, err := ParsePolicyTemplateSource_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type PolicyTemplateSource_FieldTerminalPathArrayOfValues struct {
	PolicyTemplateSource_FieldTerminalPath
	values interface{}
}

var _ PolicyTemplateSource_FieldPathArrayOfValues = (*PolicyTemplateSource_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *PolicyTemplateSource_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case PolicyTemplateSource_FieldPathSelectorTemplate:
		for _, v := range fpaov.values.([]*policy_template.Reference) {
			values = append(values, v)
		}
	case PolicyTemplateSource_FieldPathSelectorUpdatedFields:
		for _, v := range fpaov.values.([]*fieldmaskpb.FieldMask) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *PolicyTemplateSource_FieldTerminalPathArrayOfValues) AsTemplateArrayOfValues() ([]*policy_template.Reference, bool) {
	res, ok := fpaov.values.([]*policy_template.Reference)
	return res, ok
}
func (fpaov *PolicyTemplateSource_FieldTerminalPathArrayOfValues) AsUpdatedFieldsArrayOfValues() ([]*fieldmaskpb.FieldMask, bool) {
	res, ok := fpaov.values.([]*fieldmaskpb.FieldMask)
	return res, ok
}
