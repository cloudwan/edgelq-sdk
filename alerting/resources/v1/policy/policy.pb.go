// Code generated by protoc-gen-goten-go
// File: edgelq/alerting/proto/v1/policy.proto
// DO NOT EDIT!!!

package policy

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	document "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/document"
	notification_channel "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/notification_channel"
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1/project"
	monitoring_common "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/common"
	meta_resource "github.com/cloudwan/goten-sdk/meta-service/resources/v1/resource"
	meta "github.com/cloudwan/goten-sdk/types/meta"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &document.Document{}
	_ = &notification_channel.NotificationChannel{}
	_ = &iam_project.Project{}
	_ = &monitoring_common.LabelDescriptor{}
	_ = &meta_resource.Resource{}
	_ = &meta.Meta{}
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ProcessingLocation indicates if alerts should be detected on Edge
// or in backend. Edge may be preferred for various reasons:
// * Alerts can be raised closer to the source.
// * Conditions can use more sophisticated methods, like local small AI
// anomaly
//   detector models. In backend, performance may not be guaranteed, if
//   there are a lot of pending trainings.
// Backend is preferred when:
// * We want to alert based on metrics that dont make sense on edge (like
// connectivity).
// * Alerting resoucrce is not "edge" type. For example, we monitor some
// network targets
//   monitored by multiple distributed probes.
type Policy_Spec_ProcessingLocation int32

const (
	// UNDEFINED is invalid
	Policy_Spec_UNDEFINED Policy_Spec_ProcessingLocation = 0
	// Alerts will be detected and generated in the backend.
	Policy_Spec_BACKEND Policy_Spec_ProcessingLocation = 1
	// Alerts will be detected and generated on the edge.
	Policy_Spec_EDGE Policy_Spec_ProcessingLocation = 2
)

var (
	Policy_Spec_ProcessingLocation_name = map[int32]string{
		0: "UNDEFINED",
		1: "BACKEND",
		2: "EDGE",
	}

	Policy_Spec_ProcessingLocation_value = map[string]int32{
		"UNDEFINED": 0,
		"BACKEND":   1,
		"EDGE":      2,
	}
)

func (x Policy_Spec_ProcessingLocation) Enum() *Policy_Spec_ProcessingLocation {
	p := new(Policy_Spec_ProcessingLocation)
	*p = x
	return p
}

func (x Policy_Spec_ProcessingLocation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (Policy_Spec_ProcessingLocation) Descriptor() preflect.EnumDescriptor {
	return edgelq_alerting_proto_v1_policy_proto_enumTypes[0].Descriptor()
}

func (Policy_Spec_ProcessingLocation) Type() preflect.EnumType {
	return &edgelq_alerting_proto_v1_policy_proto_enumTypes[0]
}

func (x Policy_Spec_ProcessingLocation) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use Policy_Spec_ProcessingLocation.ProtoReflect.Descriptor instead.
func (Policy_Spec_ProcessingLocation) EnumDescriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_policy_proto_rawDescGZIP(), []int{0, 0, 0}
}

// Kind specifies interesting alert state change which may
// trigger a notification generation.
type Policy_Spec_Notification_Kind int32

const (
	// Undefined is not allowed
	Policy_Spec_Notification_UNDEFINED Policy_Spec_Notification_Kind = 0
	// This kind must be used if we want to generate a notification
	// for a new firing alert.
	Policy_Spec_Notification_NEW_FIRING Policy_Spec_Notification_Kind = 1
	// This kind must be used if we want to generate a notification
	// for an alert that has been pushed to Operator (escalated by
	// AI Agent).
	Policy_Spec_Notification_AI_ESCALATED_TO_OPERATOR Policy_Spec_Notification_Kind = 2
	// This kind must be used if we want to generate a notification
	// for an alert which received remediation recommendation by
	// AI Agent, and which requires operator approval.
	Policy_Spec_Notification_AI_REMEDIATION_AWAITING_APPROVAL Policy_Spec_Notification_Kind = 3
	// This kind must be used if we want to generate a notification
	// for an alert which has been considered as a temporary violation
	// by AI Agent.
	Policy_Spec_Notification_AI_IGNORED_AS_TMP Policy_Spec_Notification_Kind = 4
	// This kind must be used if we want to generate a notification
	// for an alert which has been considered as a false positive,
	// and for which alerting thresholds should be adjusted.
	Policy_Spec_Notification_AI_ADJUSTED_ENTRIES Policy_Spec_Notification_Kind = 5
	// This kind must be used if we want to generate a notification
	// for an alert for which AI agent applied recommendation.
	Policy_Spec_Notification_AI_REMEDIATION_APPLIED Policy_Spec_Notification_Kind = 6
	// This kind must be used if we want to generate a notification
	// for an alert for which operator applied recommendation.
	Policy_Spec_Notification_OP_REMEDIATION_APPLIED Policy_Spec_Notification_Kind = 7
	// This kind must be used if we want to generate a notification
	// for an alert that stopped firing.
	Policy_Spec_Notification_STOPPED_FIRING Policy_Spec_Notification_Kind = 8
)

var (
	Policy_Spec_Notification_Kind_name = map[int32]string{
		0: "UNDEFINED",
		1: "NEW_FIRING",
		2: "AI_ESCALATED_TO_OPERATOR",
		3: "AI_REMEDIATION_AWAITING_APPROVAL",
		4: "AI_IGNORED_AS_TMP",
		5: "AI_ADJUSTED_ENTRIES",
		6: "AI_REMEDIATION_APPLIED",
		7: "OP_REMEDIATION_APPLIED",
		8: "STOPPED_FIRING",
	}

	Policy_Spec_Notification_Kind_value = map[string]int32{
		"UNDEFINED":                        0,
		"NEW_FIRING":                       1,
		"AI_ESCALATED_TO_OPERATOR":         2,
		"AI_REMEDIATION_AWAITING_APPROVAL": 3,
		"AI_IGNORED_AS_TMP":                4,
		"AI_ADJUSTED_ENTRIES":              5,
		"AI_REMEDIATION_APPLIED":           6,
		"OP_REMEDIATION_APPLIED":           7,
		"STOPPED_FIRING":                   8,
	}
)

func (x Policy_Spec_Notification_Kind) Enum() *Policy_Spec_Notification_Kind {
	p := new(Policy_Spec_Notification_Kind)
	*p = x
	return p
}

func (x Policy_Spec_Notification_Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (Policy_Spec_Notification_Kind) Descriptor() preflect.EnumDescriptor {
	return edgelq_alerting_proto_v1_policy_proto_enumTypes[1].Descriptor()
}

func (Policy_Spec_Notification_Kind) Type() preflect.EnumType {
	return &edgelq_alerting_proto_v1_policy_proto_enumTypes[1]
}

func (x Policy_Spec_Notification_Kind) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use Policy_Spec_Notification_Kind.ProtoReflect.Descriptor instead.
func (Policy_Spec_Notification_Kind) EnumDescriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_policy_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

// UsageContext exact descriptor type where label key can be found.
type Policy_Spec_ResourceIdentity_LabelInfo_UsageContext int32

const (
	// UNDEFINED - not allowed
	Policy_Spec_ResourceIdentity_LabelInfo_UNDEFINED Policy_Spec_ResourceIdentity_LabelInfo_UsageContext = 0
	// Indicates that label of given key can be found in
	// monitoring.edgelq.com/MetricDescriptor resource.
	Policy_Spec_ResourceIdentity_LabelInfo_METRIC_LABEL Policy_Spec_ResourceIdentity_LabelInfo_UsageContext = 1
	// Indicates that label of given key can be found in
	// monitoring.edgelq.com/MonitoredResourceDescriptor resource.
	Policy_Spec_ResourceIdentity_LabelInfo_RESOURCE_LABEL Policy_Spec_ResourceIdentity_LabelInfo_UsageContext = 2
	// Indicates that label of given key can be found in
	// logging.edgelq.com/LogDescriptor resource.
	Policy_Spec_ResourceIdentity_LabelInfo_LOG_LABEL Policy_Spec_ResourceIdentity_LabelInfo_UsageContext = 3
)

var (
	Policy_Spec_ResourceIdentity_LabelInfo_UsageContext_name = map[int32]string{
		0: "UNDEFINED",
		1: "METRIC_LABEL",
		2: "RESOURCE_LABEL",
		3: "LOG_LABEL",
	}

	Policy_Spec_ResourceIdentity_LabelInfo_UsageContext_value = map[string]int32{
		"UNDEFINED":      0,
		"METRIC_LABEL":   1,
		"RESOURCE_LABEL": 2,
		"LOG_LABEL":      3,
	}
)

func (x Policy_Spec_ResourceIdentity_LabelInfo_UsageContext) Enum() *Policy_Spec_ResourceIdentity_LabelInfo_UsageContext {
	p := new(Policy_Spec_ResourceIdentity_LabelInfo_UsageContext)
	*p = x
	return p
}

func (x Policy_Spec_ResourceIdentity_LabelInfo_UsageContext) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (Policy_Spec_ResourceIdentity_LabelInfo_UsageContext) Descriptor() preflect.EnumDescriptor {
	return edgelq_alerting_proto_v1_policy_proto_enumTypes[2].Descriptor()
}

func (Policy_Spec_ResourceIdentity_LabelInfo_UsageContext) Type() preflect.EnumType {
	return &edgelq_alerting_proto_v1_policy_proto_enumTypes[2]
}

func (x Policy_Spec_ResourceIdentity_LabelInfo_UsageContext) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use Policy_Spec_ResourceIdentity_LabelInfo_UsageContext.ProtoReflect.Descriptor instead.
func (Policy_Spec_ResourceIdentity_LabelInfo_UsageContext) EnumDescriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_policy_proto_rawDescGZIP(), []int{0, 0, 1, 0, 0}
}

// Policy groups log or time series based conditions that focus on
// monitoring same alerting resources. For example, one Policy should
// be created for alerts triggered by devices, and another for alerts
// triggered by Pods.
// Policy also provides common specification parts for all conditions
// within: It binds them with notification channels, defines processing
// location (Backend or Edge), instructs if and how AI agent should
// be investigating issues.
type Policy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of Policy
	// When creating a new instance, this field is optional and if not provided,
	// it will be generated automatically. Last ID segment must conform to the
	// following regex: [a-z][a-z0-9\\-]{0,28}[a-z0-9]
	Name *Name `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty"`
	// Metadata is an object with information like create, update and delete time
	// (for async deleted resources), has user labels/annotations, sharding
	// information, multi-region syncing information and may have non-schema
	// owners (useful for taking ownership of resources belonging to lower level
	// services by higher ones).
	Metadata *meta.Meta `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// display name
	DisplayName string `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Long description
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// List of documents useful for troubleshooting and fixing alerts triggered
	// by conditions in this policy.
	SupportingDocs []*document.Reference `protobuf:"bytes,5,rep,customtype=Reference,name=supporting_docs,json=supportingDocs,proto3" json:"supporting_docs,omitempty"`
	// Policy specification
	Spec *Policy_Spec `protobuf:"bytes,6,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (m *Policy) Reset() {
	*m = Policy{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_policy_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Policy) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Policy) ProtoMessage() {}

func (m *Policy) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_policy_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Policy) GotenMessage() {}

// Deprecated, Use Policy.ProtoReflect.Descriptor instead.
func (*Policy) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_policy_proto_rawDescGZIP(), []int{0}
}

func (m *Policy) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Policy) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Policy) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Policy) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Policy) GetName() *Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *Policy) GetMetadata() *meta.Meta {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Policy) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *Policy) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Policy) GetSupportingDocs() []*document.Reference {
	if m != nil {
		return m.SupportingDocs
	}
	return nil
}

func (m *Policy) GetSpec() *Policy_Spec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *Policy) SetName(fv *Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "Policy"))
	}
	m.Name = fv
}

func (m *Policy) SetMetadata(fv *meta.Meta) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Metadata", "Policy"))
	}
	m.Metadata = fv
}

func (m *Policy) SetDisplayName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DisplayName", "Policy"))
	}
	m.DisplayName = fv
}

func (m *Policy) SetDescription(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Description", "Policy"))
	}
	m.Description = fv
}

func (m *Policy) SetSupportingDocs(fv []*document.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SupportingDocs", "Policy"))
	}
	m.SupportingDocs = fv
}

func (m *Policy) SetSpec(fv *Policy_Spec) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Spec", "Policy"))
	}
	m.Spec = fv
}

// Spec defines common specification parts shared by all conditions within:
// * Enabled flag
// * Processing location
// * Bindings with notification channels
// * Standard troubleshooting queries to be executed for triggered alerts.
// * Shared resource type identity
// * Whether and how AI agent should be handling alerts
type Policy_Spec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Enabled controls whether conditions within are active or not.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Decides whether alerting is executed in backend or at the edge.
	// This field cannot be modified.
	ProcessingLocation Policy_Spec_ProcessingLocation `protobuf:"varint,2,opt,name=processing_location,json=processingLocation,proto3,enum=ntt.alerting.v1.Policy_Spec_ProcessingLocation" json:"processing_location,omitempty"`
	// Notification specification. It is possible to attach
	// multiple channels, each with different notification kinds.
	Notifications []*Policy_Spec_Notification `protobuf:"bytes,3,rep,name=notifications,proto3" json:"notifications,omitempty"`
	// Resource identity shared by all conditions/alerts within policy.
	ResourceIdentity *Policy_Spec_ResourceIdentity `protobuf:"bytes,6,opt,name=resource_identity,json=resourceIdentity,proto3" json:"resource_identity,omitempty"`
	// List of all supporting queries to be executed for alerts within Policy.
	SupportingQueries []*Policy_Spec_SupportingAlertQuery `protobuf:"bytes,7,rep,name=supporting_queries,json=supportingQueries,proto3" json:"supporting_queries,omitempty"`
	// Defines AI agent handling for alerts within this policy
	AiAgent *Policy_Spec_AIAgentHandling `protobuf:"bytes,8,opt,name=ai_agent,json=aiAgent,proto3" json:"ai_agent,omitempty"`
}

func (m *Policy_Spec) Reset() {
	*m = Policy_Spec{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_policy_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Policy_Spec) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Policy_Spec) ProtoMessage() {}

func (m *Policy_Spec) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_policy_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Policy_Spec) GotenMessage() {}

// Deprecated, Use Policy_Spec.ProtoReflect.Descriptor instead.
func (*Policy_Spec) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_policy_proto_rawDescGZIP(), []int{0, 0}
}

func (m *Policy_Spec) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Policy_Spec) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Policy_Spec) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Policy_Spec) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Policy_Spec) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *Policy_Spec) GetProcessingLocation() Policy_Spec_ProcessingLocation {
	if m != nil {
		return m.ProcessingLocation
	}
	return Policy_Spec_UNDEFINED
}

func (m *Policy_Spec) GetNotifications() []*Policy_Spec_Notification {
	if m != nil {
		return m.Notifications
	}
	return nil
}

func (m *Policy_Spec) GetResourceIdentity() *Policy_Spec_ResourceIdentity {
	if m != nil {
		return m.ResourceIdentity
	}
	return nil
}

func (m *Policy_Spec) GetSupportingQueries() []*Policy_Spec_SupportingAlertQuery {
	if m != nil {
		return m.SupportingQueries
	}
	return nil
}

func (m *Policy_Spec) GetAiAgent() *Policy_Spec_AIAgentHandling {
	if m != nil {
		return m.AiAgent
	}
	return nil
}

func (m *Policy_Spec) SetEnabled(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Enabled", "Policy_Spec"))
	}
	m.Enabled = fv
}

func (m *Policy_Spec) SetProcessingLocation(fv Policy_Spec_ProcessingLocation) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ProcessingLocation", "Policy_Spec"))
	}
	m.ProcessingLocation = fv
}

func (m *Policy_Spec) SetNotifications(fv []*Policy_Spec_Notification) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Notifications", "Policy_Spec"))
	}
	m.Notifications = fv
}

func (m *Policy_Spec) SetResourceIdentity(fv *Policy_Spec_ResourceIdentity) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResourceIdentity", "Policy_Spec"))
	}
	m.ResourceIdentity = fv
}

func (m *Policy_Spec) SetSupportingQueries(fv []*Policy_Spec_SupportingAlertQuery) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SupportingQueries", "Policy_Spec"))
	}
	m.SupportingQueries = fv
}

func (m *Policy_Spec) SetAiAgent(fv *Policy_Spec_AIAgentHandling) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AiAgent", "Policy_Spec"))
	}
	m.AiAgent = fv
}

// Notification informs where and when to send notifications
// about alerts created within this Policy.
type Policy_Spec_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// List of alert state change kinds when we want to send a notification.
	EnabledKinds []Policy_Spec_Notification_Kind `protobuf:"varint,1,rep,packed,name=enabled_kinds,json=enabledKinds,proto3,enum=ntt.alerting.v1.Policy_Spec_Notification_Kind" json:"enabled_kinds,omitempty"`
	// Connected NotificationChannel resource. Must be specified.
	Channel *notification_channel.Reference `protobuf:"bytes,2,opt,customtype=Reference,name=channel,proto3" json:"channel,omitempty"`
	// If bigger than 0, then number of alert bodies in message
	// will be cut to this value.
	MaxAlertBodiesInMsg int32 `protobuf:"varint,3,opt,name=max_alert_bodies_in_msg,json=maxAlertBodiesInMsg,proto3" json:"max_alert_bodies_in_msg,omitempty"`
	// This field matters if max_alert_bodies_in_msg is bigger than 0.
	// If this field has value true, then notification message will only
	// inform how many alerts additionally were raised on top of provided
	// in the notification.
	// If false, multiple notifications will be generated.
	PutOnlyAlertsCounterWhenOverflowing bool `protobuf:"varint,4,opt,name=put_only_alerts_counter_when_overflowing,json=putOnlyAlertsCounterWhenOverflowing,proto3" json:"put_only_alerts_counter_when_overflowing,omitempty"`
}

func (m *Policy_Spec_Notification) Reset() {
	*m = Policy_Spec_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_policy_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Policy_Spec_Notification) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Policy_Spec_Notification) ProtoMessage() {}

func (m *Policy_Spec_Notification) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_policy_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Policy_Spec_Notification) GotenMessage() {}

// Deprecated, Use Policy_Spec_Notification.ProtoReflect.Descriptor instead.
func (*Policy_Spec_Notification) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_policy_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (m *Policy_Spec_Notification) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Policy_Spec_Notification) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Policy_Spec_Notification) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Policy_Spec_Notification) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Policy_Spec_Notification) GetEnabledKinds() []Policy_Spec_Notification_Kind {
	if m != nil {
		return m.EnabledKinds
	}
	return nil
}

func (m *Policy_Spec_Notification) GetChannel() *notification_channel.Reference {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *Policy_Spec_Notification) GetMaxAlertBodiesInMsg() int32 {
	if m != nil {
		return m.MaxAlertBodiesInMsg
	}
	return int32(0)
}

func (m *Policy_Spec_Notification) GetPutOnlyAlertsCounterWhenOverflowing() bool {
	if m != nil {
		return m.PutOnlyAlertsCounterWhenOverflowing
	}
	return false
}

func (m *Policy_Spec_Notification) SetEnabledKinds(fv []Policy_Spec_Notification_Kind) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "EnabledKinds", "Policy_Spec_Notification"))
	}
	m.EnabledKinds = fv
}

func (m *Policy_Spec_Notification) SetChannel(fv *notification_channel.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Channel", "Policy_Spec_Notification"))
	}
	m.Channel = fv
}

func (m *Policy_Spec_Notification) SetMaxAlertBodiesInMsg(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MaxAlertBodiesInMsg", "Policy_Spec_Notification"))
	}
	m.MaxAlertBodiesInMsg = fv
}

func (m *Policy_Spec_Notification) SetPutOnlyAlertsCounterWhenOverflowing(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PutOnlyAlertsCounterWhenOverflowing", "Policy_Spec_Notification"))
	}
	m.PutOnlyAlertsCounterWhenOverflowing = fv
}

// ResourceIdentity informs on which resource type all conditions within
// Policy focus on. They will have to, in their specifications, provide
// group by labels that must allow deduction of full resource name
// of given type.
// Each Policy must point to exactly one primary resource kind on which
// alerts focus. However, in ResourceIdentity it will be possible to
// provide labels for more than one resource when its useful. For example,
// Policy focusing on applications.edgelq.com/Pod resource type may also
// provide label pointing to devices.edgelq.com/Device kind, since
// each Pod runs on a specific Device.
type Policy_Spec_ResourceIdentity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Reference to primary alerting resource kind.
	// Typical EdgeLQ core resources would be devices.edgelq.com/Device
	// or applications.edgelq.com/Pod resource types, but this is not limited
	// to them.
	AlertingResource *meta_resource.Reference `protobuf:"bytes,1,opt,customtype=Reference,name=alerting_resource,json=alertingResource,proto3" json:"alerting_resource,omitempty"`
	// All interesting labels that can be found in ALL Log/Ts Conditions
	// group by fields within Policy.
	// It is necessary to provide labels to at least satisfy name pattern
	// of main alerting_resource. It is optional to provide more labels,
	// in order to identify auxiliary resources.
	// By default, there are 2 built-in LabelInfo objects:
	// * key: "project_id", points to project name segment. It is mapped
	//   to project of TimeSeries or Log object
	// * key: "region_id", points to region name segment. It is mapped
	//   to region of TimeSeries or Log object.
	Labels []*Policy_Spec_ResourceIdentity_LabelInfo `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty"`
	// List of name patterns of main alerting resource kind.
	// Note that all name segments (divided by each even "/" character)
	// must be satisfied within labels.mapped_name_segment fields,
	// with exception of "project" and "region", which are built-in.
	// TODO: As of now, only one pattern. However, it should be possible to
	// deduce name patterns from meta.goten.com service, so they are not
	// provided here at all.
	// Name pattern must conform to standard goten style name pattern. For
	// example, name pattern of devices.edgelq.com/Device is
	// "projects/{project}/regions/{region}/devices/{device}".
	NamePatterns []string `protobuf:"bytes,3,rep,name=name_patterns,json=namePatterns,proto3" json:"name_patterns,omitempty"`
}

func (m *Policy_Spec_ResourceIdentity) Reset() {
	*m = Policy_Spec_ResourceIdentity{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_policy_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Policy_Spec_ResourceIdentity) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Policy_Spec_ResourceIdentity) ProtoMessage() {}

func (m *Policy_Spec_ResourceIdentity) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_policy_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Policy_Spec_ResourceIdentity) GotenMessage() {}

// Deprecated, Use Policy_Spec_ResourceIdentity.ProtoReflect.Descriptor instead.
func (*Policy_Spec_ResourceIdentity) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_policy_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (m *Policy_Spec_ResourceIdentity) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Policy_Spec_ResourceIdentity) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Policy_Spec_ResourceIdentity) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Policy_Spec_ResourceIdentity) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Policy_Spec_ResourceIdentity) GetAlertingResource() *meta_resource.Reference {
	if m != nil {
		return m.AlertingResource
	}
	return nil
}

func (m *Policy_Spec_ResourceIdentity) GetLabels() []*Policy_Spec_ResourceIdentity_LabelInfo {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *Policy_Spec_ResourceIdentity) GetNamePatterns() []string {
	if m != nil {
		return m.NamePatterns
	}
	return nil
}

func (m *Policy_Spec_ResourceIdentity) SetAlertingResource(fv *meta_resource.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AlertingResource", "Policy_Spec_ResourceIdentity"))
	}
	m.AlertingResource = fv
}

func (m *Policy_Spec_ResourceIdentity) SetLabels(fv []*Policy_Spec_ResourceIdentity_LabelInfo) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Labels", "Policy_Spec_ResourceIdentity"))
	}
	m.Labels = fv
}

func (m *Policy_Spec_ResourceIdentity) SetNamePatterns(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NamePatterns", "Policy_Spec_ResourceIdentity"))
	}
	m.NamePatterns = fv
}

// SupportingAlertQuery specifies a common supporting troubleshooting query
// that can be used to investigate any Alert within current Policy.
// This is especially important for alerts handling by AI agent. Outputs
// from these queries can be used by AI agents.
//
// Important: Many query spec string fields have _template suffix. It means
// that their values may contain variable values that are replaced for each
// specific Alert instance. Those variables have a format: <$LABEL_KEY>,
// where $LABEL_KEY must be one of the label keys specified in
// resource_identity field. For example, if we can have a Policy like this:
// {
//   "resourceIdentity": {
//     "alertingResource": "services/devices.edgelq.com/resources/Device",
//     "labels": [
//       {
//         "key": "device_id",
//         "contexts": [RESOURCE_LABEL, LOG_LABEL],
//         "mappedNameSegment": "device"
//       }
//     ],
//     "namePatterns":
//     ["projects/{project}/regions/{region}/devices/{device}"]
//   },
//   "supportingQueries": [
//      {
//        "tsQuery": {
//          "description": "..."
//          "filterTemplate":
//          "metric.type=\"devices.edgelq.com/Device/connected\"
//            AND resource.labels.device_id=\"<device_id>\""
//          "aggregation": {...}
//        }
//      }
//   ]
// }
// In above example, we define one LabelInfo with device_id field.
// Therefore, alerting service will find and replace each substring
// <device_id> with specific value from Alert resource. If we have Alert
// with label device_id = "test-x", Alerting service will execute TimeSeries
// query with filter metric.type=\"devices.edgelq.com/Device/connected\" AND
//   resource.labels.device_id=\"test-x\""
// Note that values <project_id> and <region_id> are always built-in, and
// will expand to project/region indicated by Alert.
type Policy_Spec_SupportingAlertQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Types that are valid to be assigned to Query:
	//	*Policy_Spec_SupportingAlertQuery_TsQuery_
	//	*Policy_Spec_SupportingAlertQuery_LogQuery_
	//	*Policy_Spec_SupportingAlertQuery_RestGetQuery_
	//	*Policy_Spec_SupportingAlertQuery_RestListQuery_
	Query isPolicy_Spec_SupportingAlertQuery_Query `protobuf_oneof:"query"`
}

func (m *Policy_Spec_SupportingAlertQuery) Reset() {
	*m = Policy_Spec_SupportingAlertQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_policy_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Policy_Spec_SupportingAlertQuery) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Policy_Spec_SupportingAlertQuery) ProtoMessage() {}

func (m *Policy_Spec_SupportingAlertQuery) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_policy_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Policy_Spec_SupportingAlertQuery) GotenMessage() {}

// Deprecated, Use Policy_Spec_SupportingAlertQuery.ProtoReflect.Descriptor instead.
func (*Policy_Spec_SupportingAlertQuery) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_policy_proto_rawDescGZIP(), []int{0, 0, 2}
}

func (m *Policy_Spec_SupportingAlertQuery) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Policy_Spec_SupportingAlertQuery) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Policy_Spec_SupportingAlertQuery) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Policy_Spec_SupportingAlertQuery) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

type isPolicy_Spec_SupportingAlertQuery_Query interface {
	isPolicy_Spec_SupportingAlertQuery_Query()
}

type Policy_Spec_SupportingAlertQuery_TsQuery_ struct {
	// Time Series query
	TsQuery *Policy_Spec_SupportingAlertQuery_TsQuery `protobuf:"bytes,1,opt,name=ts_query,json=tsQuery,proto3,oneof"`
}
type Policy_Spec_SupportingAlertQuery_LogQuery_ struct {
	// Log query
	LogQuery *Policy_Spec_SupportingAlertQuery_LogQuery `protobuf:"bytes,2,opt,name=log_query,json=logQuery,proto3,oneof"`
}
type Policy_Spec_SupportingAlertQuery_RestGetQuery_ struct {
	// Rest Get query
	RestGetQuery *Policy_Spec_SupportingAlertQuery_RestGetQuery `protobuf:"bytes,5,opt,name=rest_get_query,json=restGetQuery,proto3,oneof"`
}
type Policy_Spec_SupportingAlertQuery_RestListQuery_ struct {
	// Rest List query
	RestListQuery *Policy_Spec_SupportingAlertQuery_RestListQuery `protobuf:"bytes,6,opt,name=rest_list_query,json=restListQuery,proto3,oneof"`
}

func (*Policy_Spec_SupportingAlertQuery_TsQuery_) isPolicy_Spec_SupportingAlertQuery_Query()       {}
func (*Policy_Spec_SupportingAlertQuery_LogQuery_) isPolicy_Spec_SupportingAlertQuery_Query()      {}
func (*Policy_Spec_SupportingAlertQuery_RestGetQuery_) isPolicy_Spec_SupportingAlertQuery_Query()  {}
func (*Policy_Spec_SupportingAlertQuery_RestListQuery_) isPolicy_Spec_SupportingAlertQuery_Query() {}
func (m *Policy_Spec_SupportingAlertQuery) GetQuery() isPolicy_Spec_SupportingAlertQuery_Query {
	if m != nil {
		return m.Query
	}
	return nil
}
func (m *Policy_Spec_SupportingAlertQuery) GetTsQuery() *Policy_Spec_SupportingAlertQuery_TsQuery {
	if x, ok := m.GetQuery().(*Policy_Spec_SupportingAlertQuery_TsQuery_); ok {
		return x.TsQuery
	}
	return nil
}
func (m *Policy_Spec_SupportingAlertQuery) GetLogQuery() *Policy_Spec_SupportingAlertQuery_LogQuery {
	if x, ok := m.GetQuery().(*Policy_Spec_SupportingAlertQuery_LogQuery_); ok {
		return x.LogQuery
	}
	return nil
}
func (m *Policy_Spec_SupportingAlertQuery) GetRestGetQuery() *Policy_Spec_SupportingAlertQuery_RestGetQuery {
	if x, ok := m.GetQuery().(*Policy_Spec_SupportingAlertQuery_RestGetQuery_); ok {
		return x.RestGetQuery
	}
	return nil
}
func (m *Policy_Spec_SupportingAlertQuery) GetRestListQuery() *Policy_Spec_SupportingAlertQuery_RestListQuery {
	if x, ok := m.GetQuery().(*Policy_Spec_SupportingAlertQuery_RestListQuery_); ok {
		return x.RestListQuery
	}
	return nil
}
func (m *Policy_Spec_SupportingAlertQuery) SetQuery(ofv isPolicy_Spec_SupportingAlertQuery_Query) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "isPolicy_Spec_SupportingAlertQuery_Query", "Policy_Spec_SupportingAlertQuery"))
	}
	m.Query = ofv
}
func (m *Policy_Spec_SupportingAlertQuery) SetTsQuery(fv *Policy_Spec_SupportingAlertQuery_TsQuery) {
	m.SetQuery(&Policy_Spec_SupportingAlertQuery_TsQuery_{TsQuery: fv})
}
func (m *Policy_Spec_SupportingAlertQuery) SetLogQuery(fv *Policy_Spec_SupportingAlertQuery_LogQuery) {
	m.SetQuery(&Policy_Spec_SupportingAlertQuery_LogQuery_{LogQuery: fv})
}
func (m *Policy_Spec_SupportingAlertQuery) SetRestGetQuery(fv *Policy_Spec_SupportingAlertQuery_RestGetQuery) {
	m.SetQuery(&Policy_Spec_SupportingAlertQuery_RestGetQuery_{RestGetQuery: fv})
}
func (m *Policy_Spec_SupportingAlertQuery) SetRestListQuery(fv *Policy_Spec_SupportingAlertQuery_RestListQuery) {
	m.SetQuery(&Policy_Spec_SupportingAlertQuery_RestListQuery_{RestListQuery: fv})
}

// AIAgentHandling defines instructions for AI agent how to handle alerts
// generated within current Policy.
type Policy_Spec_AIAgentHandling struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Whether AI agent handling is enabled.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Whether AI agent is allowed to SSH into alerting resource for further
	// investigation outside of defined queries. To have an effect, it is
	// necessary to specify edge_connectivity field.
	EnabledConnectivity bool `protobuf:"varint,2,opt,name=enabled_connectivity,json=enabledConnectivity,proto3" json:"enabled_connectivity,omitempty"`
	// Whether remediation's proposed by AI agent should be automatically
	// accepted without operator consent (full autonomous mode).
	AutoAcceptRemediation bool `protobuf:"varint,3,opt,name=auto_accept_remediation,json=autoAcceptRemediation,proto3" json:"auto_accept_remediation,omitempty"`
	// Describes how to connect to alerting resource in a context of Alert.
	EdgeConnectivity *Policy_Spec_AIAgentHandling_EdgeConnectivity `protobuf:"bytes,4,opt,name=edge_connectivity,json=edgeConnectivity,proto3" json:"edge_connectivity,omitempty"`
	// Specifies list of suggested remediations for AI agent to apply
	RemediationOptions []*Policy_Spec_AIAgentHandling_Remediation `protobuf:"bytes,6,rep,name=remediation_options,json=remediationOptions,proto3" json:"remediation_options,omitempty"`
}

func (m *Policy_Spec_AIAgentHandling) Reset() {
	*m = Policy_Spec_AIAgentHandling{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_policy_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Policy_Spec_AIAgentHandling) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Policy_Spec_AIAgentHandling) ProtoMessage() {}

func (m *Policy_Spec_AIAgentHandling) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_policy_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Policy_Spec_AIAgentHandling) GotenMessage() {}

// Deprecated, Use Policy_Spec_AIAgentHandling.ProtoReflect.Descriptor instead.
func (*Policy_Spec_AIAgentHandling) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_policy_proto_rawDescGZIP(), []int{0, 0, 3}
}

func (m *Policy_Spec_AIAgentHandling) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Policy_Spec_AIAgentHandling) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Policy_Spec_AIAgentHandling) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Policy_Spec_AIAgentHandling) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Policy_Spec_AIAgentHandling) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *Policy_Spec_AIAgentHandling) GetEnabledConnectivity() bool {
	if m != nil {
		return m.EnabledConnectivity
	}
	return false
}

func (m *Policy_Spec_AIAgentHandling) GetAutoAcceptRemediation() bool {
	if m != nil {
		return m.AutoAcceptRemediation
	}
	return false
}

func (m *Policy_Spec_AIAgentHandling) GetEdgeConnectivity() *Policy_Spec_AIAgentHandling_EdgeConnectivity {
	if m != nil {
		return m.EdgeConnectivity
	}
	return nil
}

func (m *Policy_Spec_AIAgentHandling) GetRemediationOptions() []*Policy_Spec_AIAgentHandling_Remediation {
	if m != nil {
		return m.RemediationOptions
	}
	return nil
}

func (m *Policy_Spec_AIAgentHandling) SetEnabled(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Enabled", "Policy_Spec_AIAgentHandling"))
	}
	m.Enabled = fv
}

func (m *Policy_Spec_AIAgentHandling) SetEnabledConnectivity(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "EnabledConnectivity", "Policy_Spec_AIAgentHandling"))
	}
	m.EnabledConnectivity = fv
}

func (m *Policy_Spec_AIAgentHandling) SetAutoAcceptRemediation(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AutoAcceptRemediation", "Policy_Spec_AIAgentHandling"))
	}
	m.AutoAcceptRemediation = fv
}

func (m *Policy_Spec_AIAgentHandling) SetEdgeConnectivity(fv *Policy_Spec_AIAgentHandling_EdgeConnectivity) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "EdgeConnectivity", "Policy_Spec_AIAgentHandling"))
	}
	m.EdgeConnectivity = fv
}

func (m *Policy_Spec_AIAgentHandling) SetRemediationOptions(fv []*Policy_Spec_AIAgentHandling_Remediation) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "RemediationOptions", "Policy_Spec_AIAgentHandling"))
	}
	m.RemediationOptions = fv
}

// LabelInfo binds a label from Log/TimeSeries object into
// specific name segment of a resource associated with an Alert
// raised within current Policy.
// Multiple LabelInfo instances within ResourceIdentity are used to
// reconstruct full resource names.
// For example, resource type devices.edgelq.com/Device has a single
// known name pattern
// projects/{project}/regions/{region}/devices/{device}. There are 3 name
// segments: project, region, and device. Segments "project" and "region"
// are built-in always and dont have to be defined. Policy owner will have
// to provide single LabelInfo in this case, for device segment only.
// LabelInfo may be used to point to other auxiliary resources. For
// example, if Policy focuses on applications.edgelq.com/Pod resource
// type, administrator can create Policy with 2 LabelInfo objects: One
// with pod_id as a key (it is a main resource), but other with device_id
// (because each Pod runs on a Device).
type Policy_Spec_ResourceIdentity_LabelInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Label key that must be present in TsCondition/LogCondition group by
	// fields list. Refer to labels defined in relevant
	// monitoring.edgelq.com/MonitoredResourceDescriptor,
	// monitoring.edgelq.com/MetricDescriptor, or
	// logging.edgelq.com/LogDescriptor resources for which you want to
	// create conditions. Note that "key" must match exactly one of a labels
	// (byte to byte) specified in interesting descriptors. For example, in
	// MonitoredResourceDescriptor of type devices.edgelq.com/Device you may
	// find label with key "device_id". This must be specified in
	// LabelInfo.key if you want to create Policy focusing on Device
	// resource.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// List of all contexts where label with specified key can be found.
	// It may be more than one position. For example device_id label can
	// be found in LogDescriptor or MonitoredResourceDescriptor. In this
	// case, we need to set 2 values in contexts field: RESOURCE_LABEL and
	// LOG_LABEL.
	Contexts []Policy_Spec_ResourceIdentity_LabelInfo_UsageContext `protobuf:"varint,2,rep,packed,name=contexts,proto3,enum=ntt.alerting.v1.Policy_Spec_ResourceIdentity_LabelInfo_UsageContext" json:"contexts,omitempty"`
	// Name segment value in name pattern. This is always
	// lowerSingularCamelCase resource type name. For example, for LabelInfo
	// with key device_id, if it points to devices.edgelq.com/Device
	// resource type, mapped_name_segment must be equal to "device" value
	// (which is lower camel case).
	MappedNameSegment string `protobuf:"bytes,3,opt,name=mapped_name_segment,json=mappedNameSegment,proto3" json:"mapped_name_segment,omitempty"`
}

func (m *Policy_Spec_ResourceIdentity_LabelInfo) Reset() {
	*m = Policy_Spec_ResourceIdentity_LabelInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_policy_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Policy_Spec_ResourceIdentity_LabelInfo) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Policy_Spec_ResourceIdentity_LabelInfo) ProtoMessage() {}

func (m *Policy_Spec_ResourceIdentity_LabelInfo) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_policy_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Policy_Spec_ResourceIdentity_LabelInfo) GotenMessage() {}

// Deprecated, Use Policy_Spec_ResourceIdentity_LabelInfo.ProtoReflect.Descriptor instead.
func (*Policy_Spec_ResourceIdentity_LabelInfo) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_policy_proto_rawDescGZIP(), []int{0, 0, 1, 0}
}

func (m *Policy_Spec_ResourceIdentity_LabelInfo) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Policy_Spec_ResourceIdentity_LabelInfo) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Policy_Spec_ResourceIdentity_LabelInfo) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Policy_Spec_ResourceIdentity_LabelInfo) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Policy_Spec_ResourceIdentity_LabelInfo) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Policy_Spec_ResourceIdentity_LabelInfo) GetContexts() []Policy_Spec_ResourceIdentity_LabelInfo_UsageContext {
	if m != nil {
		return m.Contexts
	}
	return nil
}

func (m *Policy_Spec_ResourceIdentity_LabelInfo) GetMappedNameSegment() string {
	if m != nil {
		return m.MappedNameSegment
	}
	return ""
}

func (m *Policy_Spec_ResourceIdentity_LabelInfo) SetKey(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Key", "Policy_Spec_ResourceIdentity_LabelInfo"))
	}
	m.Key = fv
}

func (m *Policy_Spec_ResourceIdentity_LabelInfo) SetContexts(fv []Policy_Spec_ResourceIdentity_LabelInfo_UsageContext) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Contexts", "Policy_Spec_ResourceIdentity_LabelInfo"))
	}
	m.Contexts = fv
}

func (m *Policy_Spec_ResourceIdentity_LabelInfo) SetMappedNameSegment(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MappedNameSegment", "Policy_Spec_ResourceIdentity_LabelInfo"))
	}
	m.MappedNameSegment = fv
}

// TsQuery describes TimeSeries query to execute for each specific alert.
// Time interval will be set around alert time.
type Policy_Spec_SupportingAlertQuery_TsQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Query description.
	Description string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	// TimeSeries filter template. All substrings <$LABEL_KEY> will be
	// replaced according to the resource_identity.labels field.
	FilterTemplate string `protobuf:"bytes,2,opt,name=filter_template,json=filterTemplate,proto3" json:"filter_template,omitempty"`
	// TimeSeries aggregation object.
	Aggregation *monitoring_common.Aggregation `protobuf:"bytes,3,opt,name=aggregation,proto3" json:"aggregation,omitempty"`
}

func (m *Policy_Spec_SupportingAlertQuery_TsQuery) Reset() {
	*m = Policy_Spec_SupportingAlertQuery_TsQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_policy_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Policy_Spec_SupportingAlertQuery_TsQuery) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Policy_Spec_SupportingAlertQuery_TsQuery) ProtoMessage() {}

func (m *Policy_Spec_SupportingAlertQuery_TsQuery) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_policy_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Policy_Spec_SupportingAlertQuery_TsQuery) GotenMessage() {}

// Deprecated, Use Policy_Spec_SupportingAlertQuery_TsQuery.ProtoReflect.Descriptor instead.
func (*Policy_Spec_SupportingAlertQuery_TsQuery) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_policy_proto_rawDescGZIP(), []int{0, 0, 2, 0}
}

func (m *Policy_Spec_SupportingAlertQuery_TsQuery) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Policy_Spec_SupportingAlertQuery_TsQuery) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Policy_Spec_SupportingAlertQuery_TsQuery) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Policy_Spec_SupportingAlertQuery_TsQuery) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Policy_Spec_SupportingAlertQuery_TsQuery) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Policy_Spec_SupportingAlertQuery_TsQuery) GetFilterTemplate() string {
	if m != nil {
		return m.FilterTemplate
	}
	return ""
}

func (m *Policy_Spec_SupportingAlertQuery_TsQuery) GetAggregation() *monitoring_common.Aggregation {
	if m != nil {
		return m.Aggregation
	}
	return nil
}

func (m *Policy_Spec_SupportingAlertQuery_TsQuery) SetDescription(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Description", "Policy_Spec_SupportingAlertQuery_TsQuery"))
	}
	m.Description = fv
}

func (m *Policy_Spec_SupportingAlertQuery_TsQuery) SetFilterTemplate(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FilterTemplate", "Policy_Spec_SupportingAlertQuery_TsQuery"))
	}
	m.FilterTemplate = fv
}

func (m *Policy_Spec_SupportingAlertQuery_TsQuery) SetAggregation(fv *monitoring_common.Aggregation) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Aggregation", "Policy_Spec_SupportingAlertQuery_TsQuery"))
	}
	m.Aggregation = fv
}

// LogQuery describes Log query to execute for each specific alert.
// Time interval will be set around alert time.
type Policy_Spec_SupportingAlertQuery_LogQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Query description.
	Description string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	// Log filter template. All substrings <$LABEL_KEY> will be
	// replaced according to the resource_identity.labels field.
	FilterTemplate string `protobuf:"bytes,2,opt,name=filter_template,json=filterTemplate,proto3" json:"filter_template,omitempty"`
}

func (m *Policy_Spec_SupportingAlertQuery_LogQuery) Reset() {
	*m = Policy_Spec_SupportingAlertQuery_LogQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_policy_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Policy_Spec_SupportingAlertQuery_LogQuery) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Policy_Spec_SupportingAlertQuery_LogQuery) ProtoMessage() {}

func (m *Policy_Spec_SupportingAlertQuery_LogQuery) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_policy_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Policy_Spec_SupportingAlertQuery_LogQuery) GotenMessage() {}

// Deprecated, Use Policy_Spec_SupportingAlertQuery_LogQuery.ProtoReflect.Descriptor instead.
func (*Policy_Spec_SupportingAlertQuery_LogQuery) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_policy_proto_rawDescGZIP(), []int{0, 0, 2, 1}
}

func (m *Policy_Spec_SupportingAlertQuery_LogQuery) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Policy_Spec_SupportingAlertQuery_LogQuery) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Policy_Spec_SupportingAlertQuery_LogQuery) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Policy_Spec_SupportingAlertQuery_LogQuery) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Policy_Spec_SupportingAlertQuery_LogQuery) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Policy_Spec_SupportingAlertQuery_LogQuery) GetFilterTemplate() string {
	if m != nil {
		return m.FilterTemplate
	}
	return ""
}

func (m *Policy_Spec_SupportingAlertQuery_LogQuery) SetDescription(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Description", "Policy_Spec_SupportingAlertQuery_LogQuery"))
	}
	m.Description = fv
}

func (m *Policy_Spec_SupportingAlertQuery_LogQuery) SetFilterTemplate(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FilterTemplate", "Policy_Spec_SupportingAlertQuery_LogQuery"))
	}
	m.FilterTemplate = fv
}

// RestGetQuery allows to fetch specific resource body to be included in
// investigation data.
// It is optimized for fetching resources from EdgeLQ style services.
// It is not possible as of now to use GRPC API, because alerting resource
// can be used by 3rd party service on top of EdgeLQ platform.
type Policy_Spec_SupportingAlertQuery_RestGetQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Description of resource we are fetching
	Description string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	// Endpoint (with scheme) from which we want to fetch resource. For
	// example, it can be https://devices.apis.edgelq.com value, if we want
	// to access a resource from devices.edgelq.com service. Endpoint may
	// differ depending on environment (production or staging).
	// TODO: Replace with reference to meta.goten.com/Service
	Endpoint string `protobuf:"bytes,2,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// Path template to be appended to access specific resource.
	// EdgeLQ based services use standard paths for Get requests.
	// It is: /$API_VERSION/$RESOURCE_NAME.
	// For example, path_template for devices.edgelq.com/Device
	// resource in version v1, path_template must have a format:
	// "/v1/projects/<project_id>/regions/<region_id>/devices/<device_id>".
	// All substrings <$LABEL_KEY> will be replaced according to the
	// resource_identity.labels field.
	PathTemplate string `protobuf:"bytes,3,opt,name=path_template,json=pathTemplate,proto3" json:"path_template,omitempty"`
	// It must be NAME, BASIC, DETAIL or FULL - like in each standard Get
	// request in EdgeLQ based platform.
	View string `protobuf:"bytes,4,opt,name=view,proto3" json:"view,omitempty"`
	// List of additional fields to obtain on top of those defined within
	// view. Fields must be comma separated, and use lower_snake_case
	// notion.
	FieldMask string `protobuf:"bytes,5,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
}

func (m *Policy_Spec_SupportingAlertQuery_RestGetQuery) Reset() {
	*m = Policy_Spec_SupportingAlertQuery_RestGetQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_policy_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Policy_Spec_SupportingAlertQuery_RestGetQuery) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Policy_Spec_SupportingAlertQuery_RestGetQuery) ProtoMessage() {}

func (m *Policy_Spec_SupportingAlertQuery_RestGetQuery) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_policy_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Policy_Spec_SupportingAlertQuery_RestGetQuery) GotenMessage() {}

// Deprecated, Use Policy_Spec_SupportingAlertQuery_RestGetQuery.ProtoReflect.Descriptor instead.
func (*Policy_Spec_SupportingAlertQuery_RestGetQuery) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_policy_proto_rawDescGZIP(), []int{0, 0, 2, 2}
}

func (m *Policy_Spec_SupportingAlertQuery_RestGetQuery) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Policy_Spec_SupportingAlertQuery_RestGetQuery) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Policy_Spec_SupportingAlertQuery_RestGetQuery) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Policy_Spec_SupportingAlertQuery_RestGetQuery) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Policy_Spec_SupportingAlertQuery_RestGetQuery) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Policy_Spec_SupportingAlertQuery_RestGetQuery) GetEndpoint() string {
	if m != nil {
		return m.Endpoint
	}
	return ""
}

func (m *Policy_Spec_SupportingAlertQuery_RestGetQuery) GetPathTemplate() string {
	if m != nil {
		return m.PathTemplate
	}
	return ""
}

func (m *Policy_Spec_SupportingAlertQuery_RestGetQuery) GetView() string {
	if m != nil {
		return m.View
	}
	return ""
}

func (m *Policy_Spec_SupportingAlertQuery_RestGetQuery) GetFieldMask() string {
	if m != nil {
		return m.FieldMask
	}
	return ""
}

func (m *Policy_Spec_SupportingAlertQuery_RestGetQuery) SetDescription(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Description", "Policy_Spec_SupportingAlertQuery_RestGetQuery"))
	}
	m.Description = fv
}

func (m *Policy_Spec_SupportingAlertQuery_RestGetQuery) SetEndpoint(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Endpoint", "Policy_Spec_SupportingAlertQuery_RestGetQuery"))
	}
	m.Endpoint = fv
}

func (m *Policy_Spec_SupportingAlertQuery_RestGetQuery) SetPathTemplate(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PathTemplate", "Policy_Spec_SupportingAlertQuery_RestGetQuery"))
	}
	m.PathTemplate = fv
}

func (m *Policy_Spec_SupportingAlertQuery_RestGetQuery) SetView(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "Policy_Spec_SupportingAlertQuery_RestGetQuery"))
	}
	m.View = fv
}

func (m *Policy_Spec_SupportingAlertQuery_RestGetQuery) SetFieldMask(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "Policy_Spec_SupportingAlertQuery_RestGetQuery"))
	}
	m.FieldMask = fv
}

// RestListQuery allows to fetch specific list of resource bodies to be
// included in investigation data.
// It is optimized for fetching resources from EdgeLQ style services.
// It is not possible as of now to use GRPC API, because alerting resource
// can be used by 3rd party service on top of EdgeLQ platform.
type Policy_Spec_SupportingAlertQuery_RestListQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Description of resources we are fetching
	Description string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	// Endpoint (with scheme) from which we want to fetch resource. For
	// example, it can be https://applications.apis.edgelq.com value, if we
	// want to access a resource from applications.edgelq.com service.
	// Endpoint may differ depending on environment (production or staging).
	// TODO: Replace with reference to meta.goten.com/Service
	Endpoint string `protobuf:"bytes,2,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// Path template to be appended to access specific resource.
	// EdgeLQ based services use standard paths for List requests.
	// It is:
	// /$API_VERSION/$RESOURCE_PARENT_NAME/$PLURAL_RESOURCE_TYPE_NAME. For
	// example, to fetch list of pods (applications.edgelq.com service), we
	// would use path_template like this:
	// "/v1/projects/<project_id>/regions/<region_id>/pods".
	// All substrings <$LABEL_KEY> will be replaced according to the
	// resource_identity.labels field.
	PathTemplate string `protobuf:"bytes,3,opt,name=path_template,json=pathTemplate,proto3" json:"path_template,omitempty"`
	// It must be NAME, BASIC, DETAIL or FULL - like in each standard List
	// request in EdgeLQ based platform.
	View string `protobuf:"bytes,4,opt,name=view,proto3" json:"view,omitempty"`
	// List of additional fields to obtain on top of those defined within
	// view. Fields must be comma separated, and use lower_snake_case
	// notion.
	FieldMask string `protobuf:"bytes,5,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	// Optional filter template to be used to filter collection. For
	// example, if we want to obtain list of pods running on a device, we
	// should populate it with value:
	// "spec.node=\"projects/<project_id>/regions/<region_id>/devices/<device_id>\"".
	FilterTemplate string `protobuf:"bytes,6,opt,name=filter_template,json=filterTemplate,proto3" json:"filter_template,omitempty"`
}

func (m *Policy_Spec_SupportingAlertQuery_RestListQuery) Reset() {
	*m = Policy_Spec_SupportingAlertQuery_RestListQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_policy_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Policy_Spec_SupportingAlertQuery_RestListQuery) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Policy_Spec_SupportingAlertQuery_RestListQuery) ProtoMessage() {}

func (m *Policy_Spec_SupportingAlertQuery_RestListQuery) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_policy_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Policy_Spec_SupportingAlertQuery_RestListQuery) GotenMessage() {}

// Deprecated, Use Policy_Spec_SupportingAlertQuery_RestListQuery.ProtoReflect.Descriptor instead.
func (*Policy_Spec_SupportingAlertQuery_RestListQuery) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_policy_proto_rawDescGZIP(), []int{0, 0, 2, 3}
}

func (m *Policy_Spec_SupportingAlertQuery_RestListQuery) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Policy_Spec_SupportingAlertQuery_RestListQuery) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Policy_Spec_SupportingAlertQuery_RestListQuery) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Policy_Spec_SupportingAlertQuery_RestListQuery) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Policy_Spec_SupportingAlertQuery_RestListQuery) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Policy_Spec_SupportingAlertQuery_RestListQuery) GetEndpoint() string {
	if m != nil {
		return m.Endpoint
	}
	return ""
}

func (m *Policy_Spec_SupportingAlertQuery_RestListQuery) GetPathTemplate() string {
	if m != nil {
		return m.PathTemplate
	}
	return ""
}

func (m *Policy_Spec_SupportingAlertQuery_RestListQuery) GetView() string {
	if m != nil {
		return m.View
	}
	return ""
}

func (m *Policy_Spec_SupportingAlertQuery_RestListQuery) GetFieldMask() string {
	if m != nil {
		return m.FieldMask
	}
	return ""
}

func (m *Policy_Spec_SupportingAlertQuery_RestListQuery) GetFilterTemplate() string {
	if m != nil {
		return m.FilterTemplate
	}
	return ""
}

func (m *Policy_Spec_SupportingAlertQuery_RestListQuery) SetDescription(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Description", "Policy_Spec_SupportingAlertQuery_RestListQuery"))
	}
	m.Description = fv
}

func (m *Policy_Spec_SupportingAlertQuery_RestListQuery) SetEndpoint(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Endpoint", "Policy_Spec_SupportingAlertQuery_RestListQuery"))
	}
	m.Endpoint = fv
}

func (m *Policy_Spec_SupportingAlertQuery_RestListQuery) SetPathTemplate(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PathTemplate", "Policy_Spec_SupportingAlertQuery_RestListQuery"))
	}
	m.PathTemplate = fv
}

func (m *Policy_Spec_SupportingAlertQuery_RestListQuery) SetView(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "Policy_Spec_SupportingAlertQuery_RestListQuery"))
	}
	m.View = fv
}

func (m *Policy_Spec_SupportingAlertQuery_RestListQuery) SetFieldMask(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "Policy_Spec_SupportingAlertQuery_RestListQuery"))
	}
	m.FieldMask = fv
}

func (m *Policy_Spec_SupportingAlertQuery_RestListQuery) SetFilterTemplate(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FilterTemplate", "Policy_Spec_SupportingAlertQuery_RestListQuery"))
	}
	m.FilterTemplate = fv
}

// EdgeConnectivity describes means of accessing alerting resource for
// troubleshooting purposes.
type Policy_Spec_AIAgentHandling_EdgeConnectivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Optional list of allowed binaries that AI agent can use. This can be
	// used to restrict potential errors, or indicate what utils are
	// available.
	AllowedBins []string `protobuf:"bytes,4,rep,name=allowed_bins,json=allowedBins,proto3" json:"allowed_bins,omitempty"`
	// Types that are valid to be assigned to Type:
	//	*Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSsh
	//	*Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSsh
	//	*Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSsh
	Type isPolicy_Spec_AIAgentHandling_EdgeConnectivity_Type `protobuf_oneof:"type"`
}

func (m *Policy_Spec_AIAgentHandling_EdgeConnectivity) Reset() {
	*m = Policy_Spec_AIAgentHandling_EdgeConnectivity{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_policy_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Policy_Spec_AIAgentHandling_EdgeConnectivity) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Policy_Spec_AIAgentHandling_EdgeConnectivity) ProtoMessage() {}

func (m *Policy_Spec_AIAgentHandling_EdgeConnectivity) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_policy_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Policy_Spec_AIAgentHandling_EdgeConnectivity) GotenMessage() {}

// Deprecated, Use Policy_Spec_AIAgentHandling_EdgeConnectivity.ProtoReflect.Descriptor instead.
func (*Policy_Spec_AIAgentHandling_EdgeConnectivity) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_policy_proto_rawDescGZIP(), []int{0, 0, 3, 0}
}

func (m *Policy_Spec_AIAgentHandling_EdgeConnectivity) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Policy_Spec_AIAgentHandling_EdgeConnectivity) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Policy_Spec_AIAgentHandling_EdgeConnectivity) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Policy_Spec_AIAgentHandling_EdgeConnectivity) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

type isPolicy_Spec_AIAgentHandling_EdgeConnectivity_Type interface {
	isPolicy_Spec_AIAgentHandling_EdgeConnectivity_Type()
}

type Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSsh struct {
	// Device SSH connectivity
	DeviceSsh *Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSSH `protobuf:"bytes,1,opt,name=device_ssh,json=deviceSsh,proto3,oneof"`
}
type Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSsh struct {
	// Proxies SSH connectivity
	ProxiesSsh *Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH `protobuf:"bytes,2,opt,name=proxies_ssh,json=proxiesSsh,proto3,oneof"`
}
type Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSsh struct {
	// Pod SSH connectivity
	PodSsh *Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSSH `protobuf:"bytes,3,opt,name=pod_ssh,json=podSsh,proto3,oneof"`
}

func (*Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSsh) isPolicy_Spec_AIAgentHandling_EdgeConnectivity_Type() {
}
func (*Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSsh) isPolicy_Spec_AIAgentHandling_EdgeConnectivity_Type() {
}
func (*Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSsh) isPolicy_Spec_AIAgentHandling_EdgeConnectivity_Type() {
}
func (m *Policy_Spec_AIAgentHandling_EdgeConnectivity) GetAllowedBins() []string {
	if m != nil {
		return m.AllowedBins
	}
	return nil
}

func (m *Policy_Spec_AIAgentHandling_EdgeConnectivity) GetType() isPolicy_Spec_AIAgentHandling_EdgeConnectivity_Type {
	if m != nil {
		return m.Type
	}
	return nil
}
func (m *Policy_Spec_AIAgentHandling_EdgeConnectivity) GetDeviceSsh() *Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSSH {
	if x, ok := m.GetType().(*Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSsh); ok {
		return x.DeviceSsh
	}
	return nil
}
func (m *Policy_Spec_AIAgentHandling_EdgeConnectivity) GetProxiesSsh() *Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH {
	if x, ok := m.GetType().(*Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSsh); ok {
		return x.ProxiesSsh
	}
	return nil
}
func (m *Policy_Spec_AIAgentHandling_EdgeConnectivity) GetPodSsh() *Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSSH {
	if x, ok := m.GetType().(*Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSsh); ok {
		return x.PodSsh
	}
	return nil
}
func (m *Policy_Spec_AIAgentHandling_EdgeConnectivity) SetAllowedBins(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AllowedBins", "Policy_Spec_AIAgentHandling_EdgeConnectivity"))
	}
	m.AllowedBins = fv
}

func (m *Policy_Spec_AIAgentHandling_EdgeConnectivity) SetType(ofv isPolicy_Spec_AIAgentHandling_EdgeConnectivity_Type) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "isPolicy_Spec_AIAgentHandling_EdgeConnectivity_Type", "Policy_Spec_AIAgentHandling_EdgeConnectivity"))
	}
	m.Type = ofv
}
func (m *Policy_Spec_AIAgentHandling_EdgeConnectivity) SetDeviceSsh(fv *Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSSH) {
	m.SetType(&Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSsh{DeviceSsh: fv})
}
func (m *Policy_Spec_AIAgentHandling_EdgeConnectivity) SetProxiesSsh(fv *Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH) {
	m.SetType(&Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSsh{ProxiesSsh: fv})
}
func (m *Policy_Spec_AIAgentHandling_EdgeConnectivity) SetPodSsh(fv *Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSSH) {
	m.SetType(&Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSsh{PodSsh: fv})
}

// Remediation indicates option available to AI agent.
type Policy_Spec_AIAgentHandling_Remediation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Types that are valid to be assigned to Type:
	//	*Policy_Spec_AIAgentHandling_Remediation_FixInSsh
	//	*Policy_Spec_AIAgentHandling_Remediation_Reboot_
	Type isPolicy_Spec_AIAgentHandling_Remediation_Type `protobuf_oneof:"type"`
}

func (m *Policy_Spec_AIAgentHandling_Remediation) Reset() {
	*m = Policy_Spec_AIAgentHandling_Remediation{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_policy_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Policy_Spec_AIAgentHandling_Remediation) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Policy_Spec_AIAgentHandling_Remediation) ProtoMessage() {}

func (m *Policy_Spec_AIAgentHandling_Remediation) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_policy_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Policy_Spec_AIAgentHandling_Remediation) GotenMessage() {}

// Deprecated, Use Policy_Spec_AIAgentHandling_Remediation.ProtoReflect.Descriptor instead.
func (*Policy_Spec_AIAgentHandling_Remediation) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_policy_proto_rawDescGZIP(), []int{0, 0, 3, 1}
}

func (m *Policy_Spec_AIAgentHandling_Remediation) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Policy_Spec_AIAgentHandling_Remediation) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Policy_Spec_AIAgentHandling_Remediation) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Policy_Spec_AIAgentHandling_Remediation) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

type isPolicy_Spec_AIAgentHandling_Remediation_Type interface {
	isPolicy_Spec_AIAgentHandling_Remediation_Type()
}

type Policy_Spec_AIAgentHandling_Remediation_FixInSsh struct {
	// FixInSSH remediation type.
	FixInSsh *Policy_Spec_AIAgentHandling_Remediation_FixInSSH `protobuf:"bytes,1,opt,name=fix_in_ssh,json=fixInSsh,proto3,oneof"`
}
type Policy_Spec_AIAgentHandling_Remediation_Reboot_ struct {
	// Reboot remediation type.
	Reboot *Policy_Spec_AIAgentHandling_Remediation_Reboot `protobuf:"bytes,2,opt,name=reboot,proto3,oneof"`
}

func (*Policy_Spec_AIAgentHandling_Remediation_FixInSsh) isPolicy_Spec_AIAgentHandling_Remediation_Type() {
}
func (*Policy_Spec_AIAgentHandling_Remediation_Reboot_) isPolicy_Spec_AIAgentHandling_Remediation_Type() {
}
func (m *Policy_Spec_AIAgentHandling_Remediation) GetType() isPolicy_Spec_AIAgentHandling_Remediation_Type {
	if m != nil {
		return m.Type
	}
	return nil
}
func (m *Policy_Spec_AIAgentHandling_Remediation) GetFixInSsh() *Policy_Spec_AIAgentHandling_Remediation_FixInSSH {
	if x, ok := m.GetType().(*Policy_Spec_AIAgentHandling_Remediation_FixInSsh); ok {
		return x.FixInSsh
	}
	return nil
}
func (m *Policy_Spec_AIAgentHandling_Remediation) GetReboot() *Policy_Spec_AIAgentHandling_Remediation_Reboot {
	if x, ok := m.GetType().(*Policy_Spec_AIAgentHandling_Remediation_Reboot_); ok {
		return x.Reboot
	}
	return nil
}
func (m *Policy_Spec_AIAgentHandling_Remediation) SetType(ofv isPolicy_Spec_AIAgentHandling_Remediation_Type) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "isPolicy_Spec_AIAgentHandling_Remediation_Type", "Policy_Spec_AIAgentHandling_Remediation"))
	}
	m.Type = ofv
}
func (m *Policy_Spec_AIAgentHandling_Remediation) SetFixInSsh(fv *Policy_Spec_AIAgentHandling_Remediation_FixInSSH) {
	m.SetType(&Policy_Spec_AIAgentHandling_Remediation_FixInSsh{FixInSsh: fv})
}
func (m *Policy_Spec_AIAgentHandling_Remediation) SetReboot(fv *Policy_Spec_AIAgentHandling_Remediation_Reboot) {
	m.SetType(&Policy_Spec_AIAgentHandling_Remediation_Reboot_{Reboot: fv})
}

// DeviceSSH informs that AI agent can SSH into alerting resource using
// standard droplet-exposed SSH tunnel.
// It is necessary to provide LabelInfo with device_id key in resource
// identity, but its possible to use DeviceSSH connectivity for
// non-Device alerts too. It is only necessary that alerting resource
// runs a droplet process.
type Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSSH struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Client name for self-identification. Can be any unique name like
	// "llm-alerting-agent".
	ClientName string `protobuf:"bytes,1,opt,name=client_name,json=clientName,proto3" json:"client_name,omitempty"`
}

func (m *Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSSH) Reset() {
	*m = Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSSH{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_policy_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSSH) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSSH) ProtoMessage() {}

func (m *Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSSH) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_policy_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSSH) GotenMessage() {}

// Deprecated, Use Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSSH.ProtoReflect.Descriptor instead.
func (*Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSSH) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_policy_proto_rawDescGZIP(), []int{0, 0, 3, 0, 0}
}

func (m *Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSSH) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSSH) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSSH) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSSH) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSSH) GetClientName() string {
	if m != nil {
		return m.ClientName
	}
	return ""
}

func (m *Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSSH) SetClientName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ClientName", "Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSSH"))
	}
	m.ClientName = fv
}

// ProxiesSSH informs that AI agent can SSH into alerting resource using
// proxies service, standard SSH connectivity messages. It is assumed
// that some process on alerting resource is connected to proxies
// exposing SSH tunnel. Refer to Connect method in Proxies.
type Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Service domain to use in Connect request.
	ServiceDomain string `protobuf:"bytes,1,opt,name=service_domain,json=serviceDomain,proto3" json:"service_domain,omitempty"`
	// Provider name template to use in Connect request.
	// All substrings <$LABEL_KEY> will be replaced according to the
	// resource_identity.labels field, plus special <project_id> and
	// <region_id>.
	ProviderNameTmpl string `protobuf:"bytes,2,opt,name=provider_name_tmpl,json=providerNameTmpl,proto3" json:"provider_name_tmpl,omitempty"`
	// Client name for self-identification. Can be any unique name like
	// "llm-alerting-agent".
	ClientName string `protobuf:"bytes,3,opt,name=client_name,json=clientName,proto3" json:"client_name,omitempty"`
	// Service name to use in Connect request.
	ServiceName string `protobuf:"bytes,4,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
}

func (m *Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH) Reset() {
	*m = Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_policy_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH) ProtoMessage() {}

func (m *Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_policy_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH) GotenMessage() {}

// Deprecated, Use Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH.ProtoReflect.Descriptor instead.
func (*Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_policy_proto_rawDescGZIP(), []int{0, 0, 3, 0, 1}
}

func (m *Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH) GetServiceDomain() string {
	if m != nil {
		return m.ServiceDomain
	}
	return ""
}

func (m *Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH) GetProviderNameTmpl() string {
	if m != nil {
		return m.ProviderNameTmpl
	}
	return ""
}

func (m *Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH) GetClientName() string {
	if m != nil {
		return m.ClientName
	}
	return ""
}

func (m *Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH) SetServiceDomain(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ServiceDomain", "Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH"))
	}
	m.ServiceDomain = fv
}

func (m *Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH) SetProviderNameTmpl(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ProviderNameTmpl", "Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH"))
	}
	m.ProviderNameTmpl = fv
}

func (m *Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH) SetClientName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ClientName", "Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH"))
	}
	m.ClientName = fv
}

func (m *Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH) SetServiceName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ServiceName", "Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH"))
	}
	m.ServiceName = fv
}

// PodSSH can be used if application is running as a Pod supported by
// droplet.
// TODO: Not implemented
type Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSSH struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Client name for self-identification. Can be any unique name like
	// "llm-alerting-agent".
	ClientName string `protobuf:"bytes,1,opt,name=client_name,json=clientName,proto3" json:"client_name,omitempty"`
	// Username to use.
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
}

func (m *Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSSH) Reset() {
	*m = Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSSH{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_policy_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSSH) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSSH) ProtoMessage() {}

func (m *Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSSH) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_policy_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSSH) GotenMessage() {}

// Deprecated, Use Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSSH.ProtoReflect.Descriptor instead.
func (*Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSSH) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_policy_proto_rawDescGZIP(), []int{0, 0, 3, 0, 2}
}

func (m *Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSSH) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSSH) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSSH) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSSH) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSSH) GetClientName() string {
	if m != nil {
		return m.ClientName
	}
	return ""
}

func (m *Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSSH) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSSH) SetClientName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ClientName", "Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSSH"))
	}
	m.ClientName = fv
}

func (m *Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSSH) SetUsername(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Username", "Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSSH"))
	}
	m.Username = fv
}

// FixInSSH declares that issue should be fixed using SSH shell.
// AI Agent should provide a command to execute in shell.
// This option can be used only if EdgeConnectivity is specified.
type Policy_Spec_AIAgentHandling_Remediation_FixInSSH struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (m *Policy_Spec_AIAgentHandling_Remediation_FixInSSH) Reset() {
	*m = Policy_Spec_AIAgentHandling_Remediation_FixInSSH{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_policy_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Policy_Spec_AIAgentHandling_Remediation_FixInSSH) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Policy_Spec_AIAgentHandling_Remediation_FixInSSH) ProtoMessage() {}

func (m *Policy_Spec_AIAgentHandling_Remediation_FixInSSH) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_policy_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Policy_Spec_AIAgentHandling_Remediation_FixInSSH) GotenMessage() {}

// Deprecated, Use Policy_Spec_AIAgentHandling_Remediation_FixInSSH.ProtoReflect.Descriptor instead.
func (*Policy_Spec_AIAgentHandling_Remediation_FixInSSH) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_policy_proto_rawDescGZIP(), []int{0, 0, 3, 1, 0}
}

func (m *Policy_Spec_AIAgentHandling_Remediation_FixInSSH) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Policy_Spec_AIAgentHandling_Remediation_FixInSSH) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Policy_Spec_AIAgentHandling_Remediation_FixInSSH) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Policy_Spec_AIAgentHandling_Remediation_FixInSSH) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

// Reboot is a special type of remediation applicable only and only
// for pods -> it is necessary to provide LabelInfo with pod_id key.
// Pod will be restarted to remediate an issue.
type Policy_Spec_AIAgentHandling_Remediation_Reboot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (m *Policy_Spec_AIAgentHandling_Remediation_Reboot) Reset() {
	*m = Policy_Spec_AIAgentHandling_Remediation_Reboot{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_policy_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Policy_Spec_AIAgentHandling_Remediation_Reboot) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Policy_Spec_AIAgentHandling_Remediation_Reboot) ProtoMessage() {}

func (m *Policy_Spec_AIAgentHandling_Remediation_Reboot) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_policy_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Policy_Spec_AIAgentHandling_Remediation_Reboot) GotenMessage() {}

// Deprecated, Use Policy_Spec_AIAgentHandling_Remediation_Reboot.ProtoReflect.Descriptor instead.
func (*Policy_Spec_AIAgentHandling_Remediation_Reboot) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_policy_proto_rawDescGZIP(), []int{0, 0, 3, 1, 1}
}

func (m *Policy_Spec_AIAgentHandling_Remediation_Reboot) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Policy_Spec_AIAgentHandling_Remediation_Reboot) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Policy_Spec_AIAgentHandling_Remediation_Reboot) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Policy_Spec_AIAgentHandling_Remediation_Reboot) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

var edgelq_alerting_proto_v1_policy_proto preflect.FileDescriptor

var edgelq_alerting_proto_v1_policy_proto_rawDesc = []byte{
	0x0a, 0x25, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x65, 0x64,
	0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x16, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f,
	0x6d, 0x65, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x65, 0x64, 0x67, 0x65,
	0x6c, 0x71, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x34, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xd2, 0x2b, 0x0a, 0x06, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x22,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xb2, 0xda,
	0x21, 0x0a, 0x0a, 0x08, 0x0a, 0x06, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x2e, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xca, 0xc6, 0x27, 0x07, 0x2a, 0x05, 0x22,
	0x03, 0x08, 0x80, 0x02, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2d, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xca, 0xc6, 0x27, 0x07, 0x2a, 0x05, 0x22, 0x03,
	0x08, 0x80, 0x04, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x3b, 0x0a, 0x0f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x64,
	0x6f, 0x63, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x42, 0x12, 0xb2, 0xda, 0x21, 0x0e, 0x12,
	0x0c, 0x0a, 0x08, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x01, 0x52, 0x0e, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x6f, 0x63, 0x73, 0x12, 0x3a, 0x0a,
	0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x42, 0x08, 0xca, 0xc6, 0x27, 0x04, 0x62,
	0x02, 0x08, 0x01, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x1a, 0xd8, 0x21, 0x0a, 0x04, 0x53, 0x70,
	0x65, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x6a, 0x0a, 0x13,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0xca, 0xc6, 0x27, 0x04,
	0x3a, 0x02, 0x10, 0x01, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5b, 0x0a, 0x0d, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0xca, 0xc6, 0x27, 0x06,
	0x42, 0x04, 0x12, 0x02, 0x08, 0x08, 0x52, 0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x64, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42,
	0x08, 0xca, 0xc6, 0x27, 0x04, 0x62, 0x02, 0x08, 0x01, 0x52, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x60, 0x0a, 0x12, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x11, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x47, 0x0a,
	0x08, 0x61, 0x69, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x41, 0x49,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x61,
	0x69, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x1a, 0xa9, 0x04, 0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x61, 0x0a, 0x0d, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2e,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x42, 0x0c,
	0xca, 0xc6, 0x27, 0x08, 0x42, 0x06, 0x22, 0x04, 0x3a, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x4b, 0x69, 0x6e, 0x64, 0x73, 0x12, 0x37, 0x0a, 0x07, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0xb2, 0xda, 0x21,
	0x19, 0x12, 0x17, 0x0a, 0x13, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x10, 0x02, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x12, 0x3e, 0x0a, 0x17, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x5f, 0x62, 0x6f, 0x64, 0x69, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0xca, 0xc6, 0x27, 0x04, 0x12, 0x02, 0x2a, 0x00, 0x52, 0x13,
	0x6d, 0x61, 0x78, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x42, 0x6f, 0x64, 0x69, 0x65, 0x73, 0x49, 0x6e,
	0x4d, 0x73, 0x67, 0x12, 0x55, 0x0a, 0x28, 0x70, 0x75, 0x74, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x77,
	0x68, 0x65, 0x6e, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x23, 0x70, 0x75, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x57, 0x68, 0x65, 0x6e, 0x4f,
	0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x22, 0xe5, 0x01, 0x0a, 0x04, 0x4b,
	0x69, 0x6e, 0x64, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x45, 0x57, 0x5f, 0x46, 0x49, 0x52, 0x49, 0x4e, 0x47,
	0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x49, 0x5f, 0x45, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x54,
	0x45, 0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x02,
	0x12, 0x24, 0x0a, 0x20, 0x41, 0x49, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x41, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x50, 0x50, 0x52,
	0x4f, 0x56, 0x41, 0x4c, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x49, 0x5f, 0x49, 0x47, 0x4e,
	0x4f, 0x52, 0x45, 0x44, 0x5f, 0x41, 0x53, 0x5f, 0x54, 0x4d, 0x50, 0x10, 0x04, 0x12, 0x17, 0x0a,
	0x13, 0x41, 0x49, 0x5f, 0x41, 0x44, 0x4a, 0x55, 0x53, 0x54, 0x45, 0x44, 0x5f, 0x45, 0x4e, 0x54,
	0x52, 0x49, 0x45, 0x53, 0x10, 0x05, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x49, 0x5f, 0x52, 0x45, 0x4d,
	0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x45, 0x44,
	0x10, 0x06, 0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x45, 0x44, 0x10, 0x07, 0x12, 0x12,
	0x0a, 0x0e, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x5f, 0x46, 0x49, 0x52, 0x49, 0x4e, 0x47,
	0x10, 0x08, 0x1a, 0xaf, 0x04, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x4e, 0x0a, 0x11, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x21, 0xb2, 0xda, 0x21, 0x1d, 0x12, 0x1b, 0x0a, 0x17, 0x6d, 0x65, 0x74, 0x61,
	0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x10, 0x05, 0x52, 0x10, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x5f, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x42, 0x0e, 0xca, 0xc6, 0x27, 0x0a, 0x42, 0x08, 0x0a, 0x02, 0x08, 0x01, 0x12, 0x02, 0x08, 0x08,
	0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x33, 0x0a, 0x0d, 0x6e, 0x61, 0x6d, 0x65,
	0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42,
	0x0e, 0xca, 0xc6, 0x27, 0x0a, 0x42, 0x08, 0x0a, 0x02, 0x08, 0x01, 0x12, 0x02, 0x08, 0x01, 0x52,
	0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x1a, 0xb4, 0x02,
	0x0a, 0x09, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xca, 0xc6, 0x27, 0x08, 0x2a, 0x06,
	0x3a, 0x02, 0x08, 0x40, 0x68, 0x01, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x74, 0x0a, 0x08, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x44, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x42, 0x12, 0xca, 0xc6, 0x27, 0x0e, 0x42, 0x0c, 0x0a, 0x02, 0x08, 0x01, 0x18,
	0x01, 0x22, 0x04, 0x3a, 0x02, 0x10, 0x01, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x73, 0x12, 0x3d, 0x0a, 0x13, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d,
	0xca, 0xc6, 0x27, 0x09, 0x2a, 0x07, 0x3a, 0x03, 0x08, 0x80, 0x01, 0x68, 0x01, 0x52, 0x11, 0x6d,
	0x61, 0x70, 0x70, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x22, 0x52, 0x0a, 0x0c, 0x55, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x10, 0x0a, 0x0c, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x10,
	0x01, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4c, 0x41,
	0x42, 0x45, 0x4c, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x4f, 0x47, 0x5f, 0x4c, 0x41, 0x42,
	0x45, 0x4c, 0x10, 0x03, 0x1a, 0xec, 0x09, 0x0a, 0x14, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x56, 0x0a,
	0x08, 0x74, 0x73, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x39, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x53, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x54, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x07, 0x74, 0x73,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x59, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4c, 0x6f, 0x67, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x66, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x52, 0x65, 0x73, 0x74,
	0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74,
	0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x69, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x74,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3f, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e,
	0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x48, 0x00, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x1a, 0xbe, 0x01, 0x0a, 0x07, 0x54, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x2f, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xca, 0xc6, 0x27, 0x09, 0x2a, 0x07, 0x3a, 0x03, 0x08, 0x80,
	0x02, 0x68, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x36, 0x0a, 0x0f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xca, 0xc6, 0x27, 0x09, 0x2a,
	0x07, 0x3a, 0x03, 0x08, 0x80, 0x02, 0x68, 0x01, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x34, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0xca,
	0xc6, 0x27, 0x04, 0x62, 0x02, 0x08, 0x01, 0x52, 0x0b, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x73, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x2f, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xca, 0xc6, 0x27, 0x09, 0x2a, 0x07, 0x3a, 0x03, 0x08,
	0x80, 0x02, 0x68, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x36, 0x0a, 0x0f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xca, 0xc6, 0x27, 0x09,
	0x2a, 0x07, 0x3a, 0x03, 0x08, 0x80, 0x02, 0x68, 0x01, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x1a, 0xea, 0x01, 0x0a, 0x0c, 0x52, 0x65,
	0x73, 0x74, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x2f, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0d, 0xca, 0xc6, 0x27, 0x09, 0x2a, 0x07, 0x3a, 0x03, 0x08, 0x80, 0x02, 0x68, 0x01, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x08, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xca,
	0xc6, 0x27, 0x09, 0x2a, 0x07, 0x52, 0x03, 0x88, 0x01, 0x01, 0x68, 0x01, 0x52, 0x08, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x0d, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xca,
	0xc6, 0x27, 0x09, 0x2a, 0x07, 0x3a, 0x03, 0x08, 0x80, 0x02, 0x68, 0x01, 0x52, 0x0c, 0x70, 0x61,
	0x74, 0x68, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x76, 0x69,
	0x65, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xca, 0xc6, 0x27, 0x06, 0x2a, 0x04,
	0x3a, 0x02, 0x08, 0x20, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x12, 0x2a, 0x0a, 0x0a, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b,
	0xca, 0xc6, 0x27, 0x07, 0x2a, 0x05, 0x3a, 0x03, 0x08, 0x80, 0x04, 0x52, 0x09, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x1a, 0xa1, 0x02, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x2f, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xca,
	0xc6, 0x27, 0x09, 0x2a, 0x07, 0x3a, 0x03, 0x08, 0x80, 0x02, 0x68, 0x01, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x08, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xca, 0xc6, 0x27,
	0x09, 0x2a, 0x07, 0x52, 0x03, 0x88, 0x01, 0x01, 0x68, 0x01, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x0d, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xca, 0xc6, 0x27,
	0x09, 0x2a, 0x07, 0x3a, 0x03, 0x08, 0x80, 0x02, 0x68, 0x01, 0x52, 0x0c, 0x70, 0x61, 0x74, 0x68,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xca, 0xc6, 0x27, 0x06, 0x2a, 0x04, 0x3a, 0x02,
	0x08, 0x20, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x12, 0x2a, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xca, 0xc6,
	0x27, 0x07, 0x2a, 0x05, 0x3a, 0x03, 0x08, 0x80, 0x04, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x4d, 0x61, 0x73, 0x6b, 0x12, 0x34, 0x0a, 0x0f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xca,
	0xc6, 0x27, 0x07, 0x2a, 0x05, 0x3a, 0x03, 0x08, 0x80, 0x02, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x1a, 0xd2, 0x0a, 0x0a, 0x0f, 0x41, 0x49, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x48,
	0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x31, 0x0a, 0x14, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x13, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x12, 0x36, 0x0a, 0x17, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x61, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x5f, 0x72, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x61, 0x75, 0x74, 0x6f, 0x41, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6a, 0x0a, 0x11,
	0x65, 0x64, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x41, 0x49, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x10, 0x65, 0x64, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x69, 0x0a, 0x13, 0x72, 0x65, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53,
	0x70, 0x65, 0x63, 0x2e, 0x41, 0x49, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x12, 0x72, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x1a, 0xf6, 0x05, 0x0a, 0x10, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x68, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x73, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x41, 0x49, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x53, 0x48, 0x48, 0x00, 0x52, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x73, 0x68, 0x12, 0x6b, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x73, 0x5f, 0x73, 0x73,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x41, 0x49, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x73, 0x53, 0x53,
	0x48, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x73, 0x53, 0x73, 0x68, 0x12,
	0x5f, 0x0a, 0x07, 0x70, 0x6f, 0x64, 0x5f, 0x73, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x44, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x41,
	0x49, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x45,
	0x64, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e,
	0x50, 0x6f, 0x64, 0x53, 0x53, 0x48, 0x48, 0x00, 0x52, 0x06, 0x70, 0x6f, 0x64, 0x53, 0x73, 0x68,
	0x12, 0x21, 0x0a, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x62, 0x69, 0x6e, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x42,
	0x69, 0x6e, 0x73, 0x1a, 0x3a, 0x0a, 0x09, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x53, 0x48,
	0x12, 0x2d, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xca, 0xc6, 0x27, 0x08, 0x2a, 0x06, 0x3a, 0x02, 0x08,
	0x40, 0x68, 0x01, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x1a,
	0xdf, 0x01, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x73, 0x53, 0x53, 0x48, 0x12, 0x33,
	0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xca, 0xc6, 0x27, 0x08, 0x2a, 0x06, 0x3a, 0x02,
	0x08, 0x40, 0x68, 0x01, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x12, 0x3b, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x6d, 0x70, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0d, 0xca, 0xc6, 0x27, 0x09, 0x2a, 0x07, 0x3a, 0x03, 0x08, 0x80, 0x02, 0x68, 0x01, 0x52, 0x10,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x6d, 0x70, 0x6c,
	0x12, 0x2d, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xca, 0xc6, 0x27, 0x08, 0x2a, 0x06, 0x3a, 0x02, 0x08,
	0x40, 0x68, 0x01, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x30, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xca, 0xc6, 0x27, 0x09, 0x2a, 0x07, 0x3a, 0x03, 0x08,
	0x80, 0x01, 0x68, 0x01, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x1a, 0x61, 0x0a, 0x06, 0x50, 0x6f, 0x64, 0x53, 0x53, 0x48, 0x12, 0x2d, 0x0a, 0x0b, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0c, 0xca, 0xc6, 0x27, 0x08, 0x2a, 0x06, 0x3a, 0x02, 0x08, 0x40, 0x68, 0x01, 0x52, 0x0a,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xca, 0xc6,
	0x27, 0x08, 0x2a, 0x06, 0x3a, 0x02, 0x08, 0x20, 0x68, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0xe9, 0x01, 0x0a,
	0x0b, 0x52, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x61, 0x0a, 0x0a,
	0x66, 0x69, 0x78, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x41, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x41,
	0x49, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x52,
	0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x78, 0x49, 0x6e,
	0x53, 0x53, 0x48, 0x48, 0x00, 0x52, 0x08, 0x66, 0x69, 0x78, 0x49, 0x6e, 0x53, 0x73, 0x68, 0x12,
	0x59, 0x0a, 0x06, 0x72, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3f, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x41, 0x49,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74,
	0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x1a, 0x0a, 0x0a, 0x08, 0x46, 0x69,
	0x78, 0x49, 0x6e, 0x53, 0x53, 0x48, 0x1a, 0x08, 0x0a, 0x06, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74,
	0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0d,
	0x0a, 0x09, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x07, 0x42, 0x41, 0x43, 0x4b, 0x45, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x45, 0x44,
	0x47, 0x45, 0x10, 0x02, 0x3a, 0xc1, 0x07, 0xea, 0x41, 0x42, 0x0a, 0x1a, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x24, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x2f, 0x7b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x7d, 0x92, 0xd9, 0x21, 0xdb,
	0x04, 0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x08, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x1a, 0x16, 0x69, 0x61, 0x6d, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x6c,
	0x71, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x38, 0x05, 0x42,
	0xbf, 0x01, 0x08, 0x02, 0x12, 0x0c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x20, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x0c, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x0a, 0x49, 0x73, 0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2f, 0x0a, 0x18,
	0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x13, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a,
	0x28, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x16, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x74, 0x79, 0x70,
	0x65, 0x42, 0xe8, 0x02, 0x08, 0x03, 0x12, 0x0c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x20, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22,
	0x0a, 0x0f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x6f, 0x63,
	0x73, 0x12, 0x0f, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x64, 0x6f,
	0x63, 0x73, 0x12, 0x1a, 0x0a, 0x0c, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x0a, 0x49, 0x73, 0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2f,
	0x0a, 0x18, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x13, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2b, 0x0a, 0x16, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x11, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2d, 0x0a, 0x17,
	0x73, 0x70, 0x65, 0x63, 0x2e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x12, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x20, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x12, 0x73,
	0x70, 0x65, 0x63, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x15, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x70, 0x65, 0x63,
	0x2e, 0x61, 0x69, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x11, 0x41, 0x49, 0x20, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x20, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0xaa, 0xd9, 0x21, 0x81,
	0x01, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x0c, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x18, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x73, 0x70, 0x65, 0x63,
	0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x1a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0xb2, 0xdf, 0x21, 0x40, 0x0a, 0x3e, 0x0a, 0x3c, 0x0a, 0x0d, 0x62, 0x79, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x1d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x2f, 0x2d, 0xda, 0x94, 0x23, 0x08, 0x12, 0x06, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0xc2, 0x85, 0x2c, 0x42, 0x22, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x0c, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x0f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x64, 0x6f, 0x63, 0x73, 0x22, 0x04, 0x73, 0x70, 0x65, 0x63, 0x42, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0xfd, 0x01, 0xe8, 0xde, 0x21, 0x01, 0xd2,
	0xff, 0xd0, 0x02, 0x43, 0x0a, 0x0c, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x12, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31,
	0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0xa2, 0x80, 0xd1, 0x02, 0x45, 0x0a, 0x0d, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x34, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e,
	0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x70, 0x62, 0x2e, 0x76, 0x31, 0x42, 0x0b, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64,
	0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x3b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	edgelq_alerting_proto_v1_policy_proto_rawDescOnce sync.Once
	edgelq_alerting_proto_v1_policy_proto_rawDescData = edgelq_alerting_proto_v1_policy_proto_rawDesc
)

func edgelq_alerting_proto_v1_policy_proto_rawDescGZIP() []byte {
	edgelq_alerting_proto_v1_policy_proto_rawDescOnce.Do(func() {
		edgelq_alerting_proto_v1_policy_proto_rawDescData = protoimpl.X.CompressGZIP(edgelq_alerting_proto_v1_policy_proto_rawDescData)
	})
	return edgelq_alerting_proto_v1_policy_proto_rawDescData
}

var edgelq_alerting_proto_v1_policy_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var edgelq_alerting_proto_v1_policy_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var edgelq_alerting_proto_v1_policy_proto_goTypes = []interface{}{
	(Policy_Spec_ProcessingLocation)(0),                      // 0: ntt.alerting.v1.Policy_Spec_ProcessingLocation
	(Policy_Spec_Notification_Kind)(0),                       // 1: ntt.alerting.v1.Policy_Spec_Notification_Kind
	(Policy_Spec_ResourceIdentity_LabelInfo_UsageContext)(0), // 2: ntt.alerting.v1.Policy_Spec_ResourceIdentity_LabelInfo_UsageContext
	(*Policy)(nil),                                                  // 3: ntt.alerting.v1.Policy
	(*Policy_Spec)(nil),                                             // 4: ntt.alerting.v1.Policy.Spec
	(*Policy_Spec_Notification)(nil),                                // 5: ntt.alerting.v1.Policy.Spec.Notification
	(*Policy_Spec_ResourceIdentity)(nil),                            // 6: ntt.alerting.v1.Policy.Spec.ResourceIdentity
	(*Policy_Spec_SupportingAlertQuery)(nil),                        // 7: ntt.alerting.v1.Policy.Spec.SupportingAlertQuery
	(*Policy_Spec_AIAgentHandling)(nil),                             // 8: ntt.alerting.v1.Policy.Spec.AIAgentHandling
	(*Policy_Spec_ResourceIdentity_LabelInfo)(nil),                  // 9: ntt.alerting.v1.Policy.Spec.ResourceIdentity.LabelInfo
	(*Policy_Spec_SupportingAlertQuery_TsQuery)(nil),                // 10: ntt.alerting.v1.Policy.Spec.SupportingAlertQuery.TsQuery
	(*Policy_Spec_SupportingAlertQuery_LogQuery)(nil),               // 11: ntt.alerting.v1.Policy.Spec.SupportingAlertQuery.LogQuery
	(*Policy_Spec_SupportingAlertQuery_RestGetQuery)(nil),           // 12: ntt.alerting.v1.Policy.Spec.SupportingAlertQuery.RestGetQuery
	(*Policy_Spec_SupportingAlertQuery_RestListQuery)(nil),          // 13: ntt.alerting.v1.Policy.Spec.SupportingAlertQuery.RestListQuery
	(*Policy_Spec_AIAgentHandling_EdgeConnectivity)(nil),            // 14: ntt.alerting.v1.Policy.Spec.AIAgentHandling.EdgeConnectivity
	(*Policy_Spec_AIAgentHandling_Remediation)(nil),                 // 15: ntt.alerting.v1.Policy.Spec.AIAgentHandling.Remediation
	(*Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSSH)(nil),  // 16: ntt.alerting.v1.Policy.Spec.AIAgentHandling.EdgeConnectivity.DeviceSSH
	(*Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH)(nil), // 17: ntt.alerting.v1.Policy.Spec.AIAgentHandling.EdgeConnectivity.ProxiesSSH
	(*Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSSH)(nil),     // 18: ntt.alerting.v1.Policy.Spec.AIAgentHandling.EdgeConnectivity.PodSSH
	(*Policy_Spec_AIAgentHandling_Remediation_FixInSSH)(nil),        // 19: ntt.alerting.v1.Policy.Spec.AIAgentHandling.Remediation.FixInSSH
	(*Policy_Spec_AIAgentHandling_Remediation_Reboot)(nil),          // 20: ntt.alerting.v1.Policy.Spec.AIAgentHandling.Remediation.Reboot
	(*meta.Meta)(nil),                     // 21: goten.types.Meta
	(*monitoring_common.Aggregation)(nil), // 22: ntt.monitoring.v4.Aggregation
}
var edgelq_alerting_proto_v1_policy_proto_depIdxs = []int32{
	21, // 0: ntt.alerting.v1.Policy.metadata:type_name -> goten.types.Meta
	4,  // 1: ntt.alerting.v1.Policy.spec:type_name -> ntt.alerting.v1.Policy.Spec
	0,  // 2: ntt.alerting.v1.Policy.Spec.processing_location:type_name -> ntt.alerting.v1.Policy_Spec_ProcessingLocation
	5,  // 3: ntt.alerting.v1.Policy.Spec.notifications:type_name -> ntt.alerting.v1.Policy.Spec.Notification
	6,  // 4: ntt.alerting.v1.Policy.Spec.resource_identity:type_name -> ntt.alerting.v1.Policy.Spec.ResourceIdentity
	7,  // 5: ntt.alerting.v1.Policy.Spec.supporting_queries:type_name -> ntt.alerting.v1.Policy.Spec.SupportingAlertQuery
	8,  // 6: ntt.alerting.v1.Policy.Spec.ai_agent:type_name -> ntt.alerting.v1.Policy.Spec.AIAgentHandling
	1,  // 7: ntt.alerting.v1.Policy.Spec.Notification.enabled_kinds:type_name -> ntt.alerting.v1.Policy_Spec_Notification_Kind
	9,  // 8: ntt.alerting.v1.Policy.Spec.ResourceIdentity.labels:type_name -> ntt.alerting.v1.Policy.Spec.ResourceIdentity.LabelInfo
	10, // 9: ntt.alerting.v1.Policy.Spec.SupportingAlertQuery.ts_query:type_name -> ntt.alerting.v1.Policy.Spec.SupportingAlertQuery.TsQuery
	11, // 10: ntt.alerting.v1.Policy.Spec.SupportingAlertQuery.log_query:type_name -> ntt.alerting.v1.Policy.Spec.SupportingAlertQuery.LogQuery
	12, // 11: ntt.alerting.v1.Policy.Spec.SupportingAlertQuery.rest_get_query:type_name -> ntt.alerting.v1.Policy.Spec.SupportingAlertQuery.RestGetQuery
	13, // 12: ntt.alerting.v1.Policy.Spec.SupportingAlertQuery.rest_list_query:type_name -> ntt.alerting.v1.Policy.Spec.SupportingAlertQuery.RestListQuery
	14, // 13: ntt.alerting.v1.Policy.Spec.AIAgentHandling.edge_connectivity:type_name -> ntt.alerting.v1.Policy.Spec.AIAgentHandling.EdgeConnectivity
	15, // 14: ntt.alerting.v1.Policy.Spec.AIAgentHandling.remediation_options:type_name -> ntt.alerting.v1.Policy.Spec.AIAgentHandling.Remediation
	2,  // 15: ntt.alerting.v1.Policy.Spec.ResourceIdentity.LabelInfo.contexts:type_name -> ntt.alerting.v1.Policy_Spec_ResourceIdentity_LabelInfo_UsageContext
	22, // 16: ntt.alerting.v1.Policy.Spec.SupportingAlertQuery.TsQuery.aggregation:type_name -> ntt.monitoring.v4.Aggregation
	16, // 17: ntt.alerting.v1.Policy.Spec.AIAgentHandling.EdgeConnectivity.device_ssh:type_name -> ntt.alerting.v1.Policy.Spec.AIAgentHandling.EdgeConnectivity.DeviceSSH
	17, // 18: ntt.alerting.v1.Policy.Spec.AIAgentHandling.EdgeConnectivity.proxies_ssh:type_name -> ntt.alerting.v1.Policy.Spec.AIAgentHandling.EdgeConnectivity.ProxiesSSH
	18, // 19: ntt.alerting.v1.Policy.Spec.AIAgentHandling.EdgeConnectivity.pod_ssh:type_name -> ntt.alerting.v1.Policy.Spec.AIAgentHandling.EdgeConnectivity.PodSSH
	19, // 20: ntt.alerting.v1.Policy.Spec.AIAgentHandling.Remediation.fix_in_ssh:type_name -> ntt.alerting.v1.Policy.Spec.AIAgentHandling.Remediation.FixInSSH
	20, // 21: ntt.alerting.v1.Policy.Spec.AIAgentHandling.Remediation.reboot:type_name -> ntt.alerting.v1.Policy.Spec.AIAgentHandling.Remediation.Reboot
	22, // [22:22] is the sub-list for method output_type
	22, // [22:22] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { edgelq_alerting_proto_v1_policy_proto_init() }
func edgelq_alerting_proto_v1_policy_proto_init() {
	if edgelq_alerting_proto_v1_policy_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		edgelq_alerting_proto_v1_policy_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Policy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_policy_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Policy_Spec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_policy_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Policy_Spec_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_policy_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Policy_Spec_ResourceIdentity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_policy_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Policy_Spec_SupportingAlertQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_policy_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Policy_Spec_AIAgentHandling); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_policy_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Policy_Spec_ResourceIdentity_LabelInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_policy_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Policy_Spec_SupportingAlertQuery_TsQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_policy_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Policy_Spec_SupportingAlertQuery_LogQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_policy_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Policy_Spec_SupportingAlertQuery_RestGetQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_policy_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Policy_Spec_SupportingAlertQuery_RestListQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_policy_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Policy_Spec_AIAgentHandling_EdgeConnectivity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_policy_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Policy_Spec_AIAgentHandling_Remediation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_policy_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSSH); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_policy_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSSH); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_policy_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSSH); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_policy_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Policy_Spec_AIAgentHandling_Remediation_FixInSSH); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_policy_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Policy_Spec_AIAgentHandling_Remediation_Reboot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	edgelq_alerting_proto_v1_policy_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*Policy_Spec_SupportingAlertQuery_TsQuery_)(nil),
		(*Policy_Spec_SupportingAlertQuery_LogQuery_)(nil),
		(*Policy_Spec_SupportingAlertQuery_RestGetQuery_)(nil),
		(*Policy_Spec_SupportingAlertQuery_RestListQuery_)(nil),
	}
	edgelq_alerting_proto_v1_policy_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*Policy_Spec_AIAgentHandling_EdgeConnectivity_DeviceSsh)(nil),
		(*Policy_Spec_AIAgentHandling_EdgeConnectivity_ProxiesSsh)(nil),
		(*Policy_Spec_AIAgentHandling_EdgeConnectivity_PodSsh)(nil),
	}
	edgelq_alerting_proto_v1_policy_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*Policy_Spec_AIAgentHandling_Remediation_FixInSsh)(nil),
		(*Policy_Spec_AIAgentHandling_Remediation_Reboot_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: edgelq_alerting_proto_v1_policy_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           edgelq_alerting_proto_v1_policy_proto_goTypes,
		DependencyIndexes: edgelq_alerting_proto_v1_policy_proto_depIdxs,
		EnumInfos:         edgelq_alerting_proto_v1_policy_proto_enumTypes,
		MessageInfos:      edgelq_alerting_proto_v1_policy_proto_msgTypes,
	}.Build()
	edgelq_alerting_proto_v1_policy_proto = out.File
	edgelq_alerting_proto_v1_policy_proto_rawDesc = nil
	edgelq_alerting_proto_v1_policy_proto_goTypes = nil
	edgelq_alerting_proto_v1_policy_proto_depIdxs = nil
}
