// Code generated by protoc-gen-goten-object
// File: edgelq/alerting/proto/v1/notification_channel.proto
// DO NOT EDIT!!!

package notification_channel

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	googlefieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	rcommon "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/common"
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1/project"
	meta "github.com/cloudwan/goten-sdk/types/meta"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = googlefieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &rcommon.LogCndSpec{}
	_ = &iam_project.Project{}
	_ = &timestamppb.Timestamp{}
	_ = &meta.Meta{}
)

func (o *NotificationChannel) GotenObjectExt() {}

func (o *NotificationChannel) MakeFullFieldMask() *NotificationChannel_FieldMask {
	return FullNotificationChannel_FieldMask()
}

func (o *NotificationChannel) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullNotificationChannel_FieldMask()
}

func (o *NotificationChannel) MakeDiffFieldMask(other *NotificationChannel) *NotificationChannel_FieldMask {
	if o == nil && other == nil {
		return &NotificationChannel_FieldMask{}
	}
	if o == nil || other == nil {
		return FullNotificationChannel_FieldMask()
	}

	res := &NotificationChannel_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &NotificationChannel_FieldTerminalPath{selector: NotificationChannel_FieldPathSelectorName})
	}
	{
		subMask := o.GetMetadata().MakeDiffFieldMask(other.GetMetadata())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &NotificationChannel_FieldTerminalPath{selector: NotificationChannel_FieldPathSelectorMetadata})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &NotificationChannel_FieldSubPath{selector: NotificationChannel_FieldPathSelectorMetadata, subPath: subpath})
			}
		}
	}
	if o.GetDisplayName() != other.GetDisplayName() {
		res.Paths = append(res.Paths, &NotificationChannel_FieldTerminalPath{selector: NotificationChannel_FieldPathSelectorDisplayName})
	}
	if o.GetDescription() != other.GetDescription() {
		res.Paths = append(res.Paths, &NotificationChannel_FieldTerminalPath{selector: NotificationChannel_FieldPathSelectorDescription})
	}
	{
		subMask := o.GetSpec().MakeDiffFieldMask(other.GetSpec())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &NotificationChannel_FieldTerminalPath{selector: NotificationChannel_FieldPathSelectorSpec})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &NotificationChannel_FieldSubPath{selector: NotificationChannel_FieldPathSelectorSpec, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetState().MakeDiffFieldMask(other.GetState())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &NotificationChannel_FieldTerminalPath{selector: NotificationChannel_FieldPathSelectorState})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &NotificationChannel_FieldSubPath{selector: NotificationChannel_FieldPathSelectorState, subPath: subpath})
			}
		}
	}
	return res
}

func (o *NotificationChannel) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*NotificationChannel))
}

func (o *NotificationChannel) Clone() *NotificationChannel {
	if o == nil {
		return nil
	}
	result := &NotificationChannel{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &Name{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Metadata = o.Metadata.Clone()
	result.DisplayName = o.DisplayName
	result.Description = o.Description
	result.Spec = o.Spec.Clone()
	result.State = o.State.Clone()
	return result
}

func (o *NotificationChannel) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *NotificationChannel) Merge(source *NotificationChannel) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &Name{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetMetadata() != nil {
		if o.Metadata == nil {
			o.Metadata = new(meta.Meta)
		}
		o.Metadata.Merge(source.GetMetadata())
	}
	o.DisplayName = source.GetDisplayName()
	o.Description = source.GetDescription()
	if source.GetSpec() != nil {
		if o.Spec == nil {
			o.Spec = new(rcommon.NotificationChannelSpec)
		}
		o.Spec.Merge(source.GetSpec())
	}
	if source.GetState() != nil {
		if o.State == nil {
			o.State = new(NotificationChannel_State)
		}
		o.State.Merge(source.GetState())
	}
}

func (o *NotificationChannel) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*NotificationChannel))
}

func (o *NotificationChannel_State) GotenObjectExt() {}

func (o *NotificationChannel_State) MakeFullFieldMask() *NotificationChannel_State_FieldMask {
	return FullNotificationChannel_State_FieldMask()
}

func (o *NotificationChannel_State) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullNotificationChannel_State_FieldMask()
}

func (o *NotificationChannel_State) MakeDiffFieldMask(other *NotificationChannel_State) *NotificationChannel_State_FieldMask {
	if o == nil && other == nil {
		return &NotificationChannel_State_FieldMask{}
	}
	if o == nil || other == nil {
		return FullNotificationChannel_State_FieldMask()
	}

	res := &NotificationChannel_State_FieldMask{}
	if o.GetStatus() != other.GetStatus() {
		res.Paths = append(res.Paths, &NotificationChannelState_FieldTerminalPath{selector: NotificationChannelState_FieldPathSelectorStatus})
	}
	{
		subMask := o.GetError().MakeDiffFieldMask(other.GetError())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &NotificationChannelState_FieldTerminalPath{selector: NotificationChannelState_FieldPathSelectorError})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &NotificationChannelState_FieldSubPath{selector: NotificationChannelState_FieldPathSelectorError, subPath: subpath})
			}
		}
	}
	return res
}

func (o *NotificationChannel_State) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*NotificationChannel_State))
}

func (o *NotificationChannel_State) Clone() *NotificationChannel_State {
	if o == nil {
		return nil
	}
	result := &NotificationChannel_State{}
	result.Status = o.Status
	result.Error = o.Error.Clone()
	return result
}

func (o *NotificationChannel_State) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *NotificationChannel_State) Merge(source *NotificationChannel_State) {
	o.Status = source.GetStatus()
	if source.GetError() != nil {
		if o.Error == nil {
			o.Error = new(NotificationChannel_State_Error)
		}
		o.Error.Merge(source.GetError())
	}
}

func (o *NotificationChannel_State) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*NotificationChannel_State))
}

func (o *NotificationChannel_State_Error) GotenObjectExt() {}

func (o *NotificationChannel_State_Error) MakeFullFieldMask() *NotificationChannel_State_Error_FieldMask {
	return FullNotificationChannel_State_Error_FieldMask()
}

func (o *NotificationChannel_State_Error) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullNotificationChannel_State_Error_FieldMask()
}

func (o *NotificationChannel_State_Error) MakeDiffFieldMask(other *NotificationChannel_State_Error) *NotificationChannel_State_Error_FieldMask {
	if o == nil && other == nil {
		return &NotificationChannel_State_Error_FieldMask{}
	}
	if o == nil || other == nil {
		return FullNotificationChannel_State_Error_FieldMask()
	}

	res := &NotificationChannel_State_Error_FieldMask{}
	if !proto.Equal(o.GetTime(), other.GetTime()) {
		res.Paths = append(res.Paths, &NotificationChannelStateError_FieldTerminalPath{selector: NotificationChannelStateError_FieldPathSelectorTime})
	}
	if o.GetMessage() != other.GetMessage() {
		res.Paths = append(res.Paths, &NotificationChannelStateError_FieldTerminalPath{selector: NotificationChannelStateError_FieldPathSelectorMessage})
	}
	return res
}

func (o *NotificationChannel_State_Error) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*NotificationChannel_State_Error))
}

func (o *NotificationChannel_State_Error) Clone() *NotificationChannel_State_Error {
	if o == nil {
		return nil
	}
	result := &NotificationChannel_State_Error{}
	result.Time = proto.Clone(o.Time).(*timestamppb.Timestamp)
	result.Message = o.Message
	return result
}

func (o *NotificationChannel_State_Error) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *NotificationChannel_State_Error) Merge(source *NotificationChannel_State_Error) {
	if source.GetTime() != nil {
		if o.Time == nil {
			o.Time = new(timestamppb.Timestamp)
		}
		proto.Merge(o.Time, source.GetTime())
	}
	o.Message = source.GetMessage()
}

func (o *NotificationChannel_State_Error) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*NotificationChannel_State_Error))
}
