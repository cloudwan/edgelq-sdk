// Code generated by protoc-gen-goten-object
// File: edgelq/alerting/proto/v1/notification_channel.proto
// DO NOT EDIT!!!

package notification_channel

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
	"github.com/cloudwan/goten-sdk/runtime/strcase"
)

// proto imports
import (
	rcommon "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/common"
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1/project"
	meta "github.com/cloudwan/goten-sdk/types/meta"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &rcommon.LogCndSpec{}
	_ = &iam_project.Project{}
	_ = &timestamppb.Timestamp{}
	_ = &meta.Meta{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type NotificationChannel_FieldPath interface {
	gotenobject.FieldPath
	Selector() NotificationChannel_FieldPathSelector
	Get(source *NotificationChannel) []interface{}
	GetSingle(source *NotificationChannel) (interface{}, bool)
	ClearValue(item *NotificationChannel)

	// Those methods build corresponding NotificationChannel_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) NotificationChannel_FieldPathValue
	WithIArrayOfValues(values interface{}) NotificationChannel_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) NotificationChannel_FieldPathArrayItemValue
}

type NotificationChannel_FieldPathSelector int32

const (
	NotificationChannel_FieldPathSelectorName        NotificationChannel_FieldPathSelector = 0
	NotificationChannel_FieldPathSelectorMetadata    NotificationChannel_FieldPathSelector = 1
	NotificationChannel_FieldPathSelectorDisplayName NotificationChannel_FieldPathSelector = 2
	NotificationChannel_FieldPathSelectorDescription NotificationChannel_FieldPathSelector = 3
	NotificationChannel_FieldPathSelectorSpec        NotificationChannel_FieldPathSelector = 4
	NotificationChannel_FieldPathSelectorState       NotificationChannel_FieldPathSelector = 5
)

func (s NotificationChannel_FieldPathSelector) String() string {
	switch s {
	case NotificationChannel_FieldPathSelectorName:
		return "name"
	case NotificationChannel_FieldPathSelectorMetadata:
		return "metadata"
	case NotificationChannel_FieldPathSelectorDisplayName:
		return "display_name"
	case NotificationChannel_FieldPathSelectorDescription:
		return "description"
	case NotificationChannel_FieldPathSelectorSpec:
		return "spec"
	case NotificationChannel_FieldPathSelectorState:
		return "state"
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel: %d", s))
	}
}

func BuildNotificationChannel_FieldPath(fp gotenobject.RawFieldPath) (NotificationChannel_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object NotificationChannel")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &NotificationChannel_FieldTerminalPath{selector: NotificationChannel_FieldPathSelectorName}, nil
		case "metadata":
			return &NotificationChannel_FieldTerminalPath{selector: NotificationChannel_FieldPathSelectorMetadata}, nil
		case "display_name", "displayName", "display-name":
			return &NotificationChannel_FieldTerminalPath{selector: NotificationChannel_FieldPathSelectorDisplayName}, nil
		case "description":
			return &NotificationChannel_FieldTerminalPath{selector: NotificationChannel_FieldPathSelectorDescription}, nil
		case "spec":
			return &NotificationChannel_FieldTerminalPath{selector: NotificationChannel_FieldPathSelectorSpec}, nil
		case "state":
			return &NotificationChannel_FieldTerminalPath{selector: NotificationChannel_FieldPathSelectorState}, nil
		}
	} else {
		switch fp[0] {
		case "metadata":
			if subpath, err := meta.BuildMeta_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &NotificationChannel_FieldSubPath{selector: NotificationChannel_FieldPathSelectorMetadata, subPath: subpath}, nil
			}
		case "spec":
			if subpath, err := rcommon.BuildNotificationChannelSpec_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &NotificationChannel_FieldSubPath{selector: NotificationChannel_FieldPathSelectorSpec, subPath: subpath}, nil
			}
		case "state":
			if subpath, err := BuildNotificationChannelState_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &NotificationChannel_FieldSubPath{selector: NotificationChannel_FieldPathSelectorState, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object NotificationChannel", fp)
}

func ParseNotificationChannel_FieldPath(rawField string) (NotificationChannel_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildNotificationChannel_FieldPath(fp)
}

func MustParseNotificationChannel_FieldPath(rawField string) NotificationChannel_FieldPath {
	fp, err := ParseNotificationChannel_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type NotificationChannel_FieldTerminalPath struct {
	selector NotificationChannel_FieldPathSelector
}

var _ NotificationChannel_FieldPath = (*NotificationChannel_FieldTerminalPath)(nil)

func (fp *NotificationChannel_FieldTerminalPath) Selector() NotificationChannel_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *NotificationChannel_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *NotificationChannel_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source NotificationChannel
func (fp *NotificationChannel_FieldTerminalPath) Get(source *NotificationChannel) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case NotificationChannel_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case NotificationChannel_FieldPathSelectorMetadata:
			if source.Metadata != nil {
				values = append(values, source.Metadata)
			}
		case NotificationChannel_FieldPathSelectorDisplayName:
			values = append(values, source.DisplayName)
		case NotificationChannel_FieldPathSelectorDescription:
			values = append(values, source.Description)
		case NotificationChannel_FieldPathSelectorSpec:
			if source.Spec != nil {
				values = append(values, source.Spec)
			}
		case NotificationChannel_FieldPathSelectorState:
			if source.State != nil {
				values = append(values, source.State)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for NotificationChannel: %d", fp.selector))
		}
	}
	return
}

func (fp *NotificationChannel_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*NotificationChannel))
}

// GetSingle returns value pointed by specific field of from source NotificationChannel
func (fp *NotificationChannel_FieldTerminalPath) GetSingle(source *NotificationChannel) (interface{}, bool) {
	switch fp.selector {
	case NotificationChannel_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case NotificationChannel_FieldPathSelectorMetadata:
		res := source.GetMetadata()
		return res, res != nil
	case NotificationChannel_FieldPathSelectorDisplayName:
		return source.GetDisplayName(), source != nil
	case NotificationChannel_FieldPathSelectorDescription:
		return source.GetDescription(), source != nil
	case NotificationChannel_FieldPathSelectorSpec:
		res := source.GetSpec()
		return res, res != nil
	case NotificationChannel_FieldPathSelectorState:
		res := source.GetState()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel: %d", fp.selector))
	}
}

func (fp *NotificationChannel_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*NotificationChannel))
}

// GetDefault returns a default value of the field type
func (fp *NotificationChannel_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case NotificationChannel_FieldPathSelectorName:
		return (*Name)(nil)
	case NotificationChannel_FieldPathSelectorMetadata:
		return (*meta.Meta)(nil)
	case NotificationChannel_FieldPathSelectorDisplayName:
		return ""
	case NotificationChannel_FieldPathSelectorDescription:
		return ""
	case NotificationChannel_FieldPathSelectorSpec:
		return (*rcommon.NotificationChannelSpec)(nil)
	case NotificationChannel_FieldPathSelectorState:
		return (*NotificationChannel_State)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel: %d", fp.selector))
	}
}

func (fp *NotificationChannel_FieldTerminalPath) ClearValue(item *NotificationChannel) {
	if item != nil {
		switch fp.selector {
		case NotificationChannel_FieldPathSelectorName:
			item.Name = nil
		case NotificationChannel_FieldPathSelectorMetadata:
			item.Metadata = nil
		case NotificationChannel_FieldPathSelectorDisplayName:
			item.DisplayName = ""
		case NotificationChannel_FieldPathSelectorDescription:
			item.Description = ""
		case NotificationChannel_FieldPathSelectorSpec:
			item.Spec = nil
		case NotificationChannel_FieldPathSelectorState:
			item.State = nil
		default:
			panic(fmt.Sprintf("Invalid selector for NotificationChannel: %d", fp.selector))
		}
	}
}

func (fp *NotificationChannel_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*NotificationChannel))
}

// IsLeaf - whether field path is holds simple value
func (fp *NotificationChannel_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == NotificationChannel_FieldPathSelectorName ||
		fp.selector == NotificationChannel_FieldPathSelectorDisplayName ||
		fp.selector == NotificationChannel_FieldPathSelectorDescription
}

func (fp *NotificationChannel_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *NotificationChannel_FieldTerminalPath) WithIValue(value interface{}) NotificationChannel_FieldPathValue {
	switch fp.selector {
	case NotificationChannel_FieldPathSelectorName:
		return &NotificationChannel_FieldTerminalPathValue{NotificationChannel_FieldTerminalPath: *fp, value: value.(*Name)}
	case NotificationChannel_FieldPathSelectorMetadata:
		return &NotificationChannel_FieldTerminalPathValue{NotificationChannel_FieldTerminalPath: *fp, value: value.(*meta.Meta)}
	case NotificationChannel_FieldPathSelectorDisplayName:
		return &NotificationChannel_FieldTerminalPathValue{NotificationChannel_FieldTerminalPath: *fp, value: value.(string)}
	case NotificationChannel_FieldPathSelectorDescription:
		return &NotificationChannel_FieldTerminalPathValue{NotificationChannel_FieldTerminalPath: *fp, value: value.(string)}
	case NotificationChannel_FieldPathSelectorSpec:
		return &NotificationChannel_FieldTerminalPathValue{NotificationChannel_FieldTerminalPath: *fp, value: value.(*rcommon.NotificationChannelSpec)}
	case NotificationChannel_FieldPathSelectorState:
		return &NotificationChannel_FieldTerminalPathValue{NotificationChannel_FieldTerminalPath: *fp, value: value.(*NotificationChannel_State)}
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel: %d", fp.selector))
	}
}

func (fp *NotificationChannel_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *NotificationChannel_FieldTerminalPath) WithIArrayOfValues(values interface{}) NotificationChannel_FieldPathArrayOfValues {
	fpaov := &NotificationChannel_FieldTerminalPathArrayOfValues{NotificationChannel_FieldTerminalPath: *fp}
	switch fp.selector {
	case NotificationChannel_FieldPathSelectorName:
		return &NotificationChannel_FieldTerminalPathArrayOfValues{NotificationChannel_FieldTerminalPath: *fp, values: values.([]*Name)}
	case NotificationChannel_FieldPathSelectorMetadata:
		return &NotificationChannel_FieldTerminalPathArrayOfValues{NotificationChannel_FieldTerminalPath: *fp, values: values.([]*meta.Meta)}
	case NotificationChannel_FieldPathSelectorDisplayName:
		return &NotificationChannel_FieldTerminalPathArrayOfValues{NotificationChannel_FieldTerminalPath: *fp, values: values.([]string)}
	case NotificationChannel_FieldPathSelectorDescription:
		return &NotificationChannel_FieldTerminalPathArrayOfValues{NotificationChannel_FieldTerminalPath: *fp, values: values.([]string)}
	case NotificationChannel_FieldPathSelectorSpec:
		return &NotificationChannel_FieldTerminalPathArrayOfValues{NotificationChannel_FieldTerminalPath: *fp, values: values.([]*rcommon.NotificationChannelSpec)}
	case NotificationChannel_FieldPathSelectorState:
		return &NotificationChannel_FieldTerminalPathArrayOfValues{NotificationChannel_FieldTerminalPath: *fp, values: values.([]*NotificationChannel_State)}
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel: %d", fp.selector))
	}
	return fpaov
}

func (fp *NotificationChannel_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *NotificationChannel_FieldTerminalPath) WithIArrayItemValue(value interface{}) NotificationChannel_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel: %d", fp.selector))
	}
}

func (fp *NotificationChannel_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type NotificationChannel_FieldSubPath struct {
	selector NotificationChannel_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ NotificationChannel_FieldPath = (*NotificationChannel_FieldSubPath)(nil)

func (fps *NotificationChannel_FieldSubPath) Selector() NotificationChannel_FieldPathSelector {
	return fps.selector
}
func (fps *NotificationChannel_FieldSubPath) AsMetadataSubPath() (meta.Meta_FieldPath, bool) {
	res, ok := fps.subPath.(meta.Meta_FieldPath)
	return res, ok
}
func (fps *NotificationChannel_FieldSubPath) AsSpecSubPath() (rcommon.NotificationChannelSpec_FieldPath, bool) {
	res, ok := fps.subPath.(rcommon.NotificationChannelSpec_FieldPath)
	return res, ok
}
func (fps *NotificationChannel_FieldSubPath) AsStateSubPath() (NotificationChannelState_FieldPath, bool) {
	res, ok := fps.subPath.(NotificationChannelState_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *NotificationChannel_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *NotificationChannel_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source NotificationChannel
func (fps *NotificationChannel_FieldSubPath) Get(source *NotificationChannel) (values []interface{}) {
	switch fps.selector {
	case NotificationChannel_FieldPathSelectorMetadata:
		values = append(values, fps.subPath.GetRaw(source.GetMetadata())...)
	case NotificationChannel_FieldPathSelectorSpec:
		values = append(values, fps.subPath.GetRaw(source.GetSpec())...)
	case NotificationChannel_FieldPathSelectorState:
		values = append(values, fps.subPath.GetRaw(source.GetState())...)
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel: %d", fps.selector))
	}
	return
}

func (fps *NotificationChannel_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*NotificationChannel))
}

// GetSingle returns value of selected field from source NotificationChannel
func (fps *NotificationChannel_FieldSubPath) GetSingle(source *NotificationChannel) (interface{}, bool) {
	switch fps.selector {
	case NotificationChannel_FieldPathSelectorMetadata:
		if source.GetMetadata() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetMetadata())
	case NotificationChannel_FieldPathSelectorSpec:
		if source.GetSpec() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetSpec())
	case NotificationChannel_FieldPathSelectorState:
		if source.GetState() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetState())
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel: %d", fps.selector))
	}
}

func (fps *NotificationChannel_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*NotificationChannel))
}

// GetDefault returns a default value of the field type
func (fps *NotificationChannel_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *NotificationChannel_FieldSubPath) ClearValue(item *NotificationChannel) {
	if item != nil {
		switch fps.selector {
		case NotificationChannel_FieldPathSelectorMetadata:
			fps.subPath.ClearValueRaw(item.Metadata)
		case NotificationChannel_FieldPathSelectorSpec:
			fps.subPath.ClearValueRaw(item.Spec)
		case NotificationChannel_FieldPathSelectorState:
			fps.subPath.ClearValueRaw(item.State)
		default:
			panic(fmt.Sprintf("Invalid selector for NotificationChannel: %d", fps.selector))
		}
	}
}

func (fps *NotificationChannel_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*NotificationChannel))
}

// IsLeaf - whether field path is holds simple value
func (fps *NotificationChannel_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *NotificationChannel_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&NotificationChannel_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *NotificationChannel_FieldSubPath) WithIValue(value interface{}) NotificationChannel_FieldPathValue {
	return &NotificationChannel_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *NotificationChannel_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *NotificationChannel_FieldSubPath) WithIArrayOfValues(values interface{}) NotificationChannel_FieldPathArrayOfValues {
	return &NotificationChannel_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *NotificationChannel_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *NotificationChannel_FieldSubPath) WithIArrayItemValue(value interface{}) NotificationChannel_FieldPathArrayItemValue {
	return &NotificationChannel_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *NotificationChannel_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// NotificationChannel_FieldPathValue allows storing values for NotificationChannel fields according to their type
type NotificationChannel_FieldPathValue interface {
	NotificationChannel_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **NotificationChannel)
	CompareWith(*NotificationChannel) (cmp int, comparable bool)
}

func ParseNotificationChannel_FieldPathValue(pathStr, valueStr string) (NotificationChannel_FieldPathValue, error) {
	fp, err := ParseNotificationChannel_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing NotificationChannel field path value from %s: %v", valueStr, err)
	}
	return fpv.(NotificationChannel_FieldPathValue), nil
}

func MustParseNotificationChannel_FieldPathValue(pathStr, valueStr string) NotificationChannel_FieldPathValue {
	fpv, err := ParseNotificationChannel_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type NotificationChannel_FieldTerminalPathValue struct {
	NotificationChannel_FieldTerminalPath
	value interface{}
}

var _ NotificationChannel_FieldPathValue = (*NotificationChannel_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'NotificationChannel' as interface{}
func (fpv *NotificationChannel_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *NotificationChannel_FieldTerminalPathValue) AsNameValue() (*Name, bool) {
	res, ok := fpv.value.(*Name)
	return res, ok
}
func (fpv *NotificationChannel_FieldTerminalPathValue) AsMetadataValue() (*meta.Meta, bool) {
	res, ok := fpv.value.(*meta.Meta)
	return res, ok
}
func (fpv *NotificationChannel_FieldTerminalPathValue) AsDisplayNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *NotificationChannel_FieldTerminalPathValue) AsDescriptionValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *NotificationChannel_FieldTerminalPathValue) AsSpecValue() (*rcommon.NotificationChannelSpec, bool) {
	res, ok := fpv.value.(*rcommon.NotificationChannelSpec)
	return res, ok
}
func (fpv *NotificationChannel_FieldTerminalPathValue) AsStateValue() (*NotificationChannel_State, bool) {
	res, ok := fpv.value.(*NotificationChannel_State)
	return res, ok
}

// SetTo stores value for selected field for object NotificationChannel
func (fpv *NotificationChannel_FieldTerminalPathValue) SetTo(target **NotificationChannel) {
	if *target == nil {
		*target = new(NotificationChannel)
	}
	switch fpv.selector {
	case NotificationChannel_FieldPathSelectorName:
		(*target).Name = fpv.value.(*Name)
	case NotificationChannel_FieldPathSelectorMetadata:
		(*target).Metadata = fpv.value.(*meta.Meta)
	case NotificationChannel_FieldPathSelectorDisplayName:
		(*target).DisplayName = fpv.value.(string)
	case NotificationChannel_FieldPathSelectorDescription:
		(*target).Description = fpv.value.(string)
	case NotificationChannel_FieldPathSelectorSpec:
		(*target).Spec = fpv.value.(*rcommon.NotificationChannelSpec)
	case NotificationChannel_FieldPathSelectorState:
		(*target).State = fpv.value.(*NotificationChannel_State)
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel: %d", fpv.selector))
	}
}

func (fpv *NotificationChannel_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*NotificationChannel)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'NotificationChannel_FieldTerminalPathValue' with the value under path in 'NotificationChannel'.
func (fpv *NotificationChannel_FieldTerminalPathValue) CompareWith(source *NotificationChannel) (int, bool) {
	switch fpv.selector {
	case NotificationChannel_FieldPathSelectorName:
		leftValue := fpv.value.(*Name)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case NotificationChannel_FieldPathSelectorMetadata:
		return 0, false
	case NotificationChannel_FieldPathSelectorDisplayName:
		leftValue := fpv.value.(string)
		rightValue := source.GetDisplayName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case NotificationChannel_FieldPathSelectorDescription:
		leftValue := fpv.value.(string)
		rightValue := source.GetDescription()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case NotificationChannel_FieldPathSelectorSpec:
		return 0, false
	case NotificationChannel_FieldPathSelectorState:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel: %d", fpv.selector))
	}
}

func (fpv *NotificationChannel_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*NotificationChannel))
}

type NotificationChannel_FieldSubPathValue struct {
	NotificationChannel_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ NotificationChannel_FieldPathValue = (*NotificationChannel_FieldSubPathValue)(nil)

func (fpvs *NotificationChannel_FieldSubPathValue) AsMetadataPathValue() (meta.Meta_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(meta.Meta_FieldPathValue)
	return res, ok
}
func (fpvs *NotificationChannel_FieldSubPathValue) AsSpecPathValue() (rcommon.NotificationChannelSpec_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(rcommon.NotificationChannelSpec_FieldPathValue)
	return res, ok
}
func (fpvs *NotificationChannel_FieldSubPathValue) AsStatePathValue() (NotificationChannelState_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(NotificationChannelState_FieldPathValue)
	return res, ok
}

func (fpvs *NotificationChannel_FieldSubPathValue) SetTo(target **NotificationChannel) {
	if *target == nil {
		*target = new(NotificationChannel)
	}
	switch fpvs.Selector() {
	case NotificationChannel_FieldPathSelectorMetadata:
		fpvs.subPathValue.(meta.Meta_FieldPathValue).SetTo(&(*target).Metadata)
	case NotificationChannel_FieldPathSelectorSpec:
		fpvs.subPathValue.(rcommon.NotificationChannelSpec_FieldPathValue).SetTo(&(*target).Spec)
	case NotificationChannel_FieldPathSelectorState:
		fpvs.subPathValue.(NotificationChannelState_FieldPathValue).SetTo(&(*target).State)
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel: %d", fpvs.Selector()))
	}
}

func (fpvs *NotificationChannel_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*NotificationChannel)
	fpvs.SetTo(&typedObject)
}

func (fpvs *NotificationChannel_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *NotificationChannel_FieldSubPathValue) CompareWith(source *NotificationChannel) (int, bool) {
	switch fpvs.Selector() {
	case NotificationChannel_FieldPathSelectorMetadata:
		return fpvs.subPathValue.(meta.Meta_FieldPathValue).CompareWith(source.GetMetadata())
	case NotificationChannel_FieldPathSelectorSpec:
		return fpvs.subPathValue.(rcommon.NotificationChannelSpec_FieldPathValue).CompareWith(source.GetSpec())
	case NotificationChannel_FieldPathSelectorState:
		return fpvs.subPathValue.(NotificationChannelState_FieldPathValue).CompareWith(source.GetState())
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel: %d", fpvs.Selector()))
	}
}

func (fpvs *NotificationChannel_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*NotificationChannel))
}

// NotificationChannel_FieldPathArrayItemValue allows storing single item in Path-specific values for NotificationChannel according to their type
// Present only for array (repeated) types.
type NotificationChannel_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	NotificationChannel_FieldPath
	ContainsValue(*NotificationChannel) bool
}

// ParseNotificationChannel_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseNotificationChannel_FieldPathArrayItemValue(pathStr, valueStr string) (NotificationChannel_FieldPathArrayItemValue, error) {
	fp, err := ParseNotificationChannel_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing NotificationChannel field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(NotificationChannel_FieldPathArrayItemValue), nil
}

func MustParseNotificationChannel_FieldPathArrayItemValue(pathStr, valueStr string) NotificationChannel_FieldPathArrayItemValue {
	fpaiv, err := ParseNotificationChannel_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type NotificationChannel_FieldTerminalPathArrayItemValue struct {
	NotificationChannel_FieldTerminalPath
	value interface{}
}

var _ NotificationChannel_FieldPathArrayItemValue = (*NotificationChannel_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object NotificationChannel as interface{}
func (fpaiv *NotificationChannel_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *NotificationChannel_FieldTerminalPathArrayItemValue) GetSingle(source *NotificationChannel) (interface{}, bool) {
	return nil, false
}

func (fpaiv *NotificationChannel_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*NotificationChannel))
}

// Contains returns a boolean indicating if value that is being held is present in given 'NotificationChannel'
func (fpaiv *NotificationChannel_FieldTerminalPathArrayItemValue) ContainsValue(source *NotificationChannel) bool {
	slice := fpaiv.NotificationChannel_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type NotificationChannel_FieldSubPathArrayItemValue struct {
	NotificationChannel_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *NotificationChannel_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *NotificationChannel_FieldSubPathArrayItemValue) AsMetadataPathItemValue() (meta.Meta_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(meta.Meta_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *NotificationChannel_FieldSubPathArrayItemValue) AsSpecPathItemValue() (rcommon.NotificationChannelSpec_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(rcommon.NotificationChannelSpec_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *NotificationChannel_FieldSubPathArrayItemValue) AsStatePathItemValue() (NotificationChannelState_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(NotificationChannelState_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'NotificationChannel'
func (fpaivs *NotificationChannel_FieldSubPathArrayItemValue) ContainsValue(source *NotificationChannel) bool {
	switch fpaivs.Selector() {
	case NotificationChannel_FieldPathSelectorMetadata:
		return fpaivs.subPathItemValue.(meta.Meta_FieldPathArrayItemValue).ContainsValue(source.GetMetadata())
	case NotificationChannel_FieldPathSelectorSpec:
		return fpaivs.subPathItemValue.(rcommon.NotificationChannelSpec_FieldPathArrayItemValue).ContainsValue(source.GetSpec())
	case NotificationChannel_FieldPathSelectorState:
		return fpaivs.subPathItemValue.(NotificationChannelState_FieldPathArrayItemValue).ContainsValue(source.GetState())
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel: %d", fpaivs.Selector()))
	}
}

// NotificationChannel_FieldPathArrayOfValues allows storing slice of values for NotificationChannel fields according to their type
type NotificationChannel_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	NotificationChannel_FieldPath
}

func ParseNotificationChannel_FieldPathArrayOfValues(pathStr, valuesStr string) (NotificationChannel_FieldPathArrayOfValues, error) {
	fp, err := ParseNotificationChannel_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing NotificationChannel field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(NotificationChannel_FieldPathArrayOfValues), nil
}

func MustParseNotificationChannel_FieldPathArrayOfValues(pathStr, valuesStr string) NotificationChannel_FieldPathArrayOfValues {
	fpaov, err := ParseNotificationChannel_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type NotificationChannel_FieldTerminalPathArrayOfValues struct {
	NotificationChannel_FieldTerminalPath
	values interface{}
}

var _ NotificationChannel_FieldPathArrayOfValues = (*NotificationChannel_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *NotificationChannel_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case NotificationChannel_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*Name) {
			values = append(values, v)
		}
	case NotificationChannel_FieldPathSelectorMetadata:
		for _, v := range fpaov.values.([]*meta.Meta) {
			values = append(values, v)
		}
	case NotificationChannel_FieldPathSelectorDisplayName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case NotificationChannel_FieldPathSelectorDescription:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case NotificationChannel_FieldPathSelectorSpec:
		for _, v := range fpaov.values.([]*rcommon.NotificationChannelSpec) {
			values = append(values, v)
		}
	case NotificationChannel_FieldPathSelectorState:
		for _, v := range fpaov.values.([]*NotificationChannel_State) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *NotificationChannel_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*Name, bool) {
	res, ok := fpaov.values.([]*Name)
	return res, ok
}
func (fpaov *NotificationChannel_FieldTerminalPathArrayOfValues) AsMetadataArrayOfValues() ([]*meta.Meta, bool) {
	res, ok := fpaov.values.([]*meta.Meta)
	return res, ok
}
func (fpaov *NotificationChannel_FieldTerminalPathArrayOfValues) AsDisplayNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *NotificationChannel_FieldTerminalPathArrayOfValues) AsDescriptionArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *NotificationChannel_FieldTerminalPathArrayOfValues) AsSpecArrayOfValues() ([]*rcommon.NotificationChannelSpec, bool) {
	res, ok := fpaov.values.([]*rcommon.NotificationChannelSpec)
	return res, ok
}
func (fpaov *NotificationChannel_FieldTerminalPathArrayOfValues) AsStateArrayOfValues() ([]*NotificationChannel_State, bool) {
	res, ok := fpaov.values.([]*NotificationChannel_State)
	return res, ok
}

type NotificationChannel_FieldSubPathArrayOfValues struct {
	NotificationChannel_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ NotificationChannel_FieldPathArrayOfValues = (*NotificationChannel_FieldSubPathArrayOfValues)(nil)

func (fpsaov *NotificationChannel_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *NotificationChannel_FieldSubPathArrayOfValues) AsMetadataPathArrayOfValues() (meta.Meta_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(meta.Meta_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *NotificationChannel_FieldSubPathArrayOfValues) AsSpecPathArrayOfValues() (rcommon.NotificationChannelSpec_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(rcommon.NotificationChannelSpec_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *NotificationChannel_FieldSubPathArrayOfValues) AsStatePathArrayOfValues() (NotificationChannelState_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(NotificationChannelState_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type NotificationChannelState_FieldPath interface {
	gotenobject.FieldPath
	Selector() NotificationChannelState_FieldPathSelector
	Get(source *NotificationChannel_State) []interface{}
	GetSingle(source *NotificationChannel_State) (interface{}, bool)
	ClearValue(item *NotificationChannel_State)

	// Those methods build corresponding NotificationChannelState_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) NotificationChannelState_FieldPathValue
	WithIArrayOfValues(values interface{}) NotificationChannelState_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) NotificationChannelState_FieldPathArrayItemValue
}

type NotificationChannelState_FieldPathSelector int32

const (
	NotificationChannelState_FieldPathSelectorStatus NotificationChannelState_FieldPathSelector = 0
	NotificationChannelState_FieldPathSelectorError  NotificationChannelState_FieldPathSelector = 1
)

func (s NotificationChannelState_FieldPathSelector) String() string {
	switch s {
	case NotificationChannelState_FieldPathSelectorStatus:
		return "status"
	case NotificationChannelState_FieldPathSelectorError:
		return "error"
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_State: %d", s))
	}
}

func BuildNotificationChannelState_FieldPath(fp gotenobject.RawFieldPath) (NotificationChannelState_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object NotificationChannel_State")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "status":
			return &NotificationChannelState_FieldTerminalPath{selector: NotificationChannelState_FieldPathSelectorStatus}, nil
		case "error":
			return &NotificationChannelState_FieldTerminalPath{selector: NotificationChannelState_FieldPathSelectorError}, nil
		}
	} else {
		switch fp[0] {
		case "error":
			if subpath, err := BuildNotificationChannelStateError_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &NotificationChannelState_FieldSubPath{selector: NotificationChannelState_FieldPathSelectorError, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object NotificationChannel_State", fp)
}

func ParseNotificationChannelState_FieldPath(rawField string) (NotificationChannelState_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildNotificationChannelState_FieldPath(fp)
}

func MustParseNotificationChannelState_FieldPath(rawField string) NotificationChannelState_FieldPath {
	fp, err := ParseNotificationChannelState_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type NotificationChannelState_FieldTerminalPath struct {
	selector NotificationChannelState_FieldPathSelector
}

var _ NotificationChannelState_FieldPath = (*NotificationChannelState_FieldTerminalPath)(nil)

func (fp *NotificationChannelState_FieldTerminalPath) Selector() NotificationChannelState_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *NotificationChannelState_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *NotificationChannelState_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source NotificationChannel_State
func (fp *NotificationChannelState_FieldTerminalPath) Get(source *NotificationChannel_State) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case NotificationChannelState_FieldPathSelectorStatus:
			values = append(values, source.Status)
		case NotificationChannelState_FieldPathSelectorError:
			if source.Error != nil {
				values = append(values, source.Error)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for NotificationChannel_State: %d", fp.selector))
		}
	}
	return
}

func (fp *NotificationChannelState_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*NotificationChannel_State))
}

// GetSingle returns value pointed by specific field of from source NotificationChannel_State
func (fp *NotificationChannelState_FieldTerminalPath) GetSingle(source *NotificationChannel_State) (interface{}, bool) {
	switch fp.selector {
	case NotificationChannelState_FieldPathSelectorStatus:
		return source.GetStatus(), source != nil
	case NotificationChannelState_FieldPathSelectorError:
		res := source.GetError()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_State: %d", fp.selector))
	}
}

func (fp *NotificationChannelState_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*NotificationChannel_State))
}

// GetDefault returns a default value of the field type
func (fp *NotificationChannelState_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case NotificationChannelState_FieldPathSelectorStatus:
		return NotificationChannel_State_STATE_UNSPECIFIED
	case NotificationChannelState_FieldPathSelectorError:
		return (*NotificationChannel_State_Error)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_State: %d", fp.selector))
	}
}

func (fp *NotificationChannelState_FieldTerminalPath) ClearValue(item *NotificationChannel_State) {
	if item != nil {
		switch fp.selector {
		case NotificationChannelState_FieldPathSelectorStatus:
			item.Status = NotificationChannel_State_STATE_UNSPECIFIED
		case NotificationChannelState_FieldPathSelectorError:
			item.Error = nil
		default:
			panic(fmt.Sprintf("Invalid selector for NotificationChannel_State: %d", fp.selector))
		}
	}
}

func (fp *NotificationChannelState_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*NotificationChannel_State))
}

// IsLeaf - whether field path is holds simple value
func (fp *NotificationChannelState_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == NotificationChannelState_FieldPathSelectorStatus
}

func (fp *NotificationChannelState_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *NotificationChannelState_FieldTerminalPath) WithIValue(value interface{}) NotificationChannelState_FieldPathValue {
	switch fp.selector {
	case NotificationChannelState_FieldPathSelectorStatus:
		return &NotificationChannelState_FieldTerminalPathValue{NotificationChannelState_FieldTerminalPath: *fp, value: value.(NotificationChannel_State_Status)}
	case NotificationChannelState_FieldPathSelectorError:
		return &NotificationChannelState_FieldTerminalPathValue{NotificationChannelState_FieldTerminalPath: *fp, value: value.(*NotificationChannel_State_Error)}
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_State: %d", fp.selector))
	}
}

func (fp *NotificationChannelState_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *NotificationChannelState_FieldTerminalPath) WithIArrayOfValues(values interface{}) NotificationChannelState_FieldPathArrayOfValues {
	fpaov := &NotificationChannelState_FieldTerminalPathArrayOfValues{NotificationChannelState_FieldTerminalPath: *fp}
	switch fp.selector {
	case NotificationChannelState_FieldPathSelectorStatus:
		return &NotificationChannelState_FieldTerminalPathArrayOfValues{NotificationChannelState_FieldTerminalPath: *fp, values: values.([]NotificationChannel_State_Status)}
	case NotificationChannelState_FieldPathSelectorError:
		return &NotificationChannelState_FieldTerminalPathArrayOfValues{NotificationChannelState_FieldTerminalPath: *fp, values: values.([]*NotificationChannel_State_Error)}
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_State: %d", fp.selector))
	}
	return fpaov
}

func (fp *NotificationChannelState_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *NotificationChannelState_FieldTerminalPath) WithIArrayItemValue(value interface{}) NotificationChannelState_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_State: %d", fp.selector))
	}
}

func (fp *NotificationChannelState_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type NotificationChannelState_FieldSubPath struct {
	selector NotificationChannelState_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ NotificationChannelState_FieldPath = (*NotificationChannelState_FieldSubPath)(nil)

func (fps *NotificationChannelState_FieldSubPath) Selector() NotificationChannelState_FieldPathSelector {
	return fps.selector
}
func (fps *NotificationChannelState_FieldSubPath) AsErrorSubPath() (NotificationChannelStateError_FieldPath, bool) {
	res, ok := fps.subPath.(NotificationChannelStateError_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *NotificationChannelState_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *NotificationChannelState_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source NotificationChannel_State
func (fps *NotificationChannelState_FieldSubPath) Get(source *NotificationChannel_State) (values []interface{}) {
	switch fps.selector {
	case NotificationChannelState_FieldPathSelectorError:
		values = append(values, fps.subPath.GetRaw(source.GetError())...)
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_State: %d", fps.selector))
	}
	return
}

func (fps *NotificationChannelState_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*NotificationChannel_State))
}

// GetSingle returns value of selected field from source NotificationChannel_State
func (fps *NotificationChannelState_FieldSubPath) GetSingle(source *NotificationChannel_State) (interface{}, bool) {
	switch fps.selector {
	case NotificationChannelState_FieldPathSelectorError:
		if source.GetError() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetError())
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_State: %d", fps.selector))
	}
}

func (fps *NotificationChannelState_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*NotificationChannel_State))
}

// GetDefault returns a default value of the field type
func (fps *NotificationChannelState_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *NotificationChannelState_FieldSubPath) ClearValue(item *NotificationChannel_State) {
	if item != nil {
		switch fps.selector {
		case NotificationChannelState_FieldPathSelectorError:
			fps.subPath.ClearValueRaw(item.Error)
		default:
			panic(fmt.Sprintf("Invalid selector for NotificationChannel_State: %d", fps.selector))
		}
	}
}

func (fps *NotificationChannelState_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*NotificationChannel_State))
}

// IsLeaf - whether field path is holds simple value
func (fps *NotificationChannelState_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *NotificationChannelState_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&NotificationChannelState_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *NotificationChannelState_FieldSubPath) WithIValue(value interface{}) NotificationChannelState_FieldPathValue {
	return &NotificationChannelState_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *NotificationChannelState_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *NotificationChannelState_FieldSubPath) WithIArrayOfValues(values interface{}) NotificationChannelState_FieldPathArrayOfValues {
	return &NotificationChannelState_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *NotificationChannelState_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *NotificationChannelState_FieldSubPath) WithIArrayItemValue(value interface{}) NotificationChannelState_FieldPathArrayItemValue {
	return &NotificationChannelState_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *NotificationChannelState_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// NotificationChannelState_FieldPathValue allows storing values for State fields according to their type
type NotificationChannelState_FieldPathValue interface {
	NotificationChannelState_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **NotificationChannel_State)
	CompareWith(*NotificationChannel_State) (cmp int, comparable bool)
}

func ParseNotificationChannelState_FieldPathValue(pathStr, valueStr string) (NotificationChannelState_FieldPathValue, error) {
	fp, err := ParseNotificationChannelState_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing State field path value from %s: %v", valueStr, err)
	}
	return fpv.(NotificationChannelState_FieldPathValue), nil
}

func MustParseNotificationChannelState_FieldPathValue(pathStr, valueStr string) NotificationChannelState_FieldPathValue {
	fpv, err := ParseNotificationChannelState_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type NotificationChannelState_FieldTerminalPathValue struct {
	NotificationChannelState_FieldTerminalPath
	value interface{}
}

var _ NotificationChannelState_FieldPathValue = (*NotificationChannelState_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'State' as interface{}
func (fpv *NotificationChannelState_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *NotificationChannelState_FieldTerminalPathValue) AsStatusValue() (NotificationChannel_State_Status, bool) {
	res, ok := fpv.value.(NotificationChannel_State_Status)
	return res, ok
}
func (fpv *NotificationChannelState_FieldTerminalPathValue) AsErrorValue() (*NotificationChannel_State_Error, bool) {
	res, ok := fpv.value.(*NotificationChannel_State_Error)
	return res, ok
}

// SetTo stores value for selected field for object State
func (fpv *NotificationChannelState_FieldTerminalPathValue) SetTo(target **NotificationChannel_State) {
	if *target == nil {
		*target = new(NotificationChannel_State)
	}
	switch fpv.selector {
	case NotificationChannelState_FieldPathSelectorStatus:
		(*target).Status = fpv.value.(NotificationChannel_State_Status)
	case NotificationChannelState_FieldPathSelectorError:
		(*target).Error = fpv.value.(*NotificationChannel_State_Error)
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_State: %d", fpv.selector))
	}
}

func (fpv *NotificationChannelState_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*NotificationChannel_State)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'NotificationChannelState_FieldTerminalPathValue' with the value under path in 'NotificationChannel_State'.
func (fpv *NotificationChannelState_FieldTerminalPathValue) CompareWith(source *NotificationChannel_State) (int, bool) {
	switch fpv.selector {
	case NotificationChannelState_FieldPathSelectorStatus:
		leftValue := fpv.value.(NotificationChannel_State_Status)
		rightValue := source.GetStatus()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case NotificationChannelState_FieldPathSelectorError:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_State: %d", fpv.selector))
	}
}

func (fpv *NotificationChannelState_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*NotificationChannel_State))
}

type NotificationChannelState_FieldSubPathValue struct {
	NotificationChannelState_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ NotificationChannelState_FieldPathValue = (*NotificationChannelState_FieldSubPathValue)(nil)

func (fpvs *NotificationChannelState_FieldSubPathValue) AsErrorPathValue() (NotificationChannelStateError_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(NotificationChannelStateError_FieldPathValue)
	return res, ok
}

func (fpvs *NotificationChannelState_FieldSubPathValue) SetTo(target **NotificationChannel_State) {
	if *target == nil {
		*target = new(NotificationChannel_State)
	}
	switch fpvs.Selector() {
	case NotificationChannelState_FieldPathSelectorError:
		fpvs.subPathValue.(NotificationChannelStateError_FieldPathValue).SetTo(&(*target).Error)
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_State: %d", fpvs.Selector()))
	}
}

func (fpvs *NotificationChannelState_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*NotificationChannel_State)
	fpvs.SetTo(&typedObject)
}

func (fpvs *NotificationChannelState_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *NotificationChannelState_FieldSubPathValue) CompareWith(source *NotificationChannel_State) (int, bool) {
	switch fpvs.Selector() {
	case NotificationChannelState_FieldPathSelectorError:
		return fpvs.subPathValue.(NotificationChannelStateError_FieldPathValue).CompareWith(source.GetError())
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_State: %d", fpvs.Selector()))
	}
}

func (fpvs *NotificationChannelState_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*NotificationChannel_State))
}

// NotificationChannelState_FieldPathArrayItemValue allows storing single item in Path-specific values for State according to their type
// Present only for array (repeated) types.
type NotificationChannelState_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	NotificationChannelState_FieldPath
	ContainsValue(*NotificationChannel_State) bool
}

// ParseNotificationChannelState_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseNotificationChannelState_FieldPathArrayItemValue(pathStr, valueStr string) (NotificationChannelState_FieldPathArrayItemValue, error) {
	fp, err := ParseNotificationChannelState_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing State field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(NotificationChannelState_FieldPathArrayItemValue), nil
}

func MustParseNotificationChannelState_FieldPathArrayItemValue(pathStr, valueStr string) NotificationChannelState_FieldPathArrayItemValue {
	fpaiv, err := ParseNotificationChannelState_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type NotificationChannelState_FieldTerminalPathArrayItemValue struct {
	NotificationChannelState_FieldTerminalPath
	value interface{}
}

var _ NotificationChannelState_FieldPathArrayItemValue = (*NotificationChannelState_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object NotificationChannel_State as interface{}
func (fpaiv *NotificationChannelState_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *NotificationChannelState_FieldTerminalPathArrayItemValue) GetSingle(source *NotificationChannel_State) (interface{}, bool) {
	return nil, false
}

func (fpaiv *NotificationChannelState_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*NotificationChannel_State))
}

// Contains returns a boolean indicating if value that is being held is present in given 'State'
func (fpaiv *NotificationChannelState_FieldTerminalPathArrayItemValue) ContainsValue(source *NotificationChannel_State) bool {
	slice := fpaiv.NotificationChannelState_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type NotificationChannelState_FieldSubPathArrayItemValue struct {
	NotificationChannelState_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *NotificationChannelState_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *NotificationChannelState_FieldSubPathArrayItemValue) AsErrorPathItemValue() (NotificationChannelStateError_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(NotificationChannelStateError_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'State'
func (fpaivs *NotificationChannelState_FieldSubPathArrayItemValue) ContainsValue(source *NotificationChannel_State) bool {
	switch fpaivs.Selector() {
	case NotificationChannelState_FieldPathSelectorError:
		return fpaivs.subPathItemValue.(NotificationChannelStateError_FieldPathArrayItemValue).ContainsValue(source.GetError())
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_State: %d", fpaivs.Selector()))
	}
}

// NotificationChannelState_FieldPathArrayOfValues allows storing slice of values for State fields according to their type
type NotificationChannelState_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	NotificationChannelState_FieldPath
}

func ParseNotificationChannelState_FieldPathArrayOfValues(pathStr, valuesStr string) (NotificationChannelState_FieldPathArrayOfValues, error) {
	fp, err := ParseNotificationChannelState_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing State field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(NotificationChannelState_FieldPathArrayOfValues), nil
}

func MustParseNotificationChannelState_FieldPathArrayOfValues(pathStr, valuesStr string) NotificationChannelState_FieldPathArrayOfValues {
	fpaov, err := ParseNotificationChannelState_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type NotificationChannelState_FieldTerminalPathArrayOfValues struct {
	NotificationChannelState_FieldTerminalPath
	values interface{}
}

var _ NotificationChannelState_FieldPathArrayOfValues = (*NotificationChannelState_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *NotificationChannelState_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case NotificationChannelState_FieldPathSelectorStatus:
		for _, v := range fpaov.values.([]NotificationChannel_State_Status) {
			values = append(values, v)
		}
	case NotificationChannelState_FieldPathSelectorError:
		for _, v := range fpaov.values.([]*NotificationChannel_State_Error) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *NotificationChannelState_FieldTerminalPathArrayOfValues) AsStatusArrayOfValues() ([]NotificationChannel_State_Status, bool) {
	res, ok := fpaov.values.([]NotificationChannel_State_Status)
	return res, ok
}
func (fpaov *NotificationChannelState_FieldTerminalPathArrayOfValues) AsErrorArrayOfValues() ([]*NotificationChannel_State_Error, bool) {
	res, ok := fpaov.values.([]*NotificationChannel_State_Error)
	return res, ok
}

type NotificationChannelState_FieldSubPathArrayOfValues struct {
	NotificationChannelState_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ NotificationChannelState_FieldPathArrayOfValues = (*NotificationChannelState_FieldSubPathArrayOfValues)(nil)

func (fpsaov *NotificationChannelState_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *NotificationChannelState_FieldSubPathArrayOfValues) AsErrorPathArrayOfValues() (NotificationChannelStateError_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(NotificationChannelStateError_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type NotificationChannelStateError_FieldPath interface {
	gotenobject.FieldPath
	Selector() NotificationChannelStateError_FieldPathSelector
	Get(source *NotificationChannel_State_Error) []interface{}
	GetSingle(source *NotificationChannel_State_Error) (interface{}, bool)
	ClearValue(item *NotificationChannel_State_Error)

	// Those methods build corresponding NotificationChannelStateError_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) NotificationChannelStateError_FieldPathValue
	WithIArrayOfValues(values interface{}) NotificationChannelStateError_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) NotificationChannelStateError_FieldPathArrayItemValue
}

type NotificationChannelStateError_FieldPathSelector int32

const (
	NotificationChannelStateError_FieldPathSelectorTime    NotificationChannelStateError_FieldPathSelector = 0
	NotificationChannelStateError_FieldPathSelectorMessage NotificationChannelStateError_FieldPathSelector = 1
)

func (s NotificationChannelStateError_FieldPathSelector) String() string {
	switch s {
	case NotificationChannelStateError_FieldPathSelectorTime:
		return "time"
	case NotificationChannelStateError_FieldPathSelectorMessage:
		return "message"
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_State_Error: %d", s))
	}
}

func BuildNotificationChannelStateError_FieldPath(fp gotenobject.RawFieldPath) (NotificationChannelStateError_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object NotificationChannel_State_Error")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "time":
			return &NotificationChannelStateError_FieldTerminalPath{selector: NotificationChannelStateError_FieldPathSelectorTime}, nil
		case "message":
			return &NotificationChannelStateError_FieldTerminalPath{selector: NotificationChannelStateError_FieldPathSelectorMessage}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object NotificationChannel_State_Error", fp)
}

func ParseNotificationChannelStateError_FieldPath(rawField string) (NotificationChannelStateError_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildNotificationChannelStateError_FieldPath(fp)
}

func MustParseNotificationChannelStateError_FieldPath(rawField string) NotificationChannelStateError_FieldPath {
	fp, err := ParseNotificationChannelStateError_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type NotificationChannelStateError_FieldTerminalPath struct {
	selector NotificationChannelStateError_FieldPathSelector
}

var _ NotificationChannelStateError_FieldPath = (*NotificationChannelStateError_FieldTerminalPath)(nil)

func (fp *NotificationChannelStateError_FieldTerminalPath) Selector() NotificationChannelStateError_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *NotificationChannelStateError_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *NotificationChannelStateError_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source NotificationChannel_State_Error
func (fp *NotificationChannelStateError_FieldTerminalPath) Get(source *NotificationChannel_State_Error) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case NotificationChannelStateError_FieldPathSelectorTime:
			if source.Time != nil {
				values = append(values, source.Time)
			}
		case NotificationChannelStateError_FieldPathSelectorMessage:
			values = append(values, source.Message)
		default:
			panic(fmt.Sprintf("Invalid selector for NotificationChannel_State_Error: %d", fp.selector))
		}
	}
	return
}

func (fp *NotificationChannelStateError_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*NotificationChannel_State_Error))
}

// GetSingle returns value pointed by specific field of from source NotificationChannel_State_Error
func (fp *NotificationChannelStateError_FieldTerminalPath) GetSingle(source *NotificationChannel_State_Error) (interface{}, bool) {
	switch fp.selector {
	case NotificationChannelStateError_FieldPathSelectorTime:
		res := source.GetTime()
		return res, res != nil
	case NotificationChannelStateError_FieldPathSelectorMessage:
		return source.GetMessage(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_State_Error: %d", fp.selector))
	}
}

func (fp *NotificationChannelStateError_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*NotificationChannel_State_Error))
}

// GetDefault returns a default value of the field type
func (fp *NotificationChannelStateError_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case NotificationChannelStateError_FieldPathSelectorTime:
		return (*timestamppb.Timestamp)(nil)
	case NotificationChannelStateError_FieldPathSelectorMessage:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_State_Error: %d", fp.selector))
	}
}

func (fp *NotificationChannelStateError_FieldTerminalPath) ClearValue(item *NotificationChannel_State_Error) {
	if item != nil {
		switch fp.selector {
		case NotificationChannelStateError_FieldPathSelectorTime:
			item.Time = nil
		case NotificationChannelStateError_FieldPathSelectorMessage:
			item.Message = ""
		default:
			panic(fmt.Sprintf("Invalid selector for NotificationChannel_State_Error: %d", fp.selector))
		}
	}
}

func (fp *NotificationChannelStateError_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*NotificationChannel_State_Error))
}

// IsLeaf - whether field path is holds simple value
func (fp *NotificationChannelStateError_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == NotificationChannelStateError_FieldPathSelectorTime ||
		fp.selector == NotificationChannelStateError_FieldPathSelectorMessage
}

func (fp *NotificationChannelStateError_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *NotificationChannelStateError_FieldTerminalPath) WithIValue(value interface{}) NotificationChannelStateError_FieldPathValue {
	switch fp.selector {
	case NotificationChannelStateError_FieldPathSelectorTime:
		return &NotificationChannelStateError_FieldTerminalPathValue{NotificationChannelStateError_FieldTerminalPath: *fp, value: value.(*timestamppb.Timestamp)}
	case NotificationChannelStateError_FieldPathSelectorMessage:
		return &NotificationChannelStateError_FieldTerminalPathValue{NotificationChannelStateError_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_State_Error: %d", fp.selector))
	}
}

func (fp *NotificationChannelStateError_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *NotificationChannelStateError_FieldTerminalPath) WithIArrayOfValues(values interface{}) NotificationChannelStateError_FieldPathArrayOfValues {
	fpaov := &NotificationChannelStateError_FieldTerminalPathArrayOfValues{NotificationChannelStateError_FieldTerminalPath: *fp}
	switch fp.selector {
	case NotificationChannelStateError_FieldPathSelectorTime:
		return &NotificationChannelStateError_FieldTerminalPathArrayOfValues{NotificationChannelStateError_FieldTerminalPath: *fp, values: values.([]*timestamppb.Timestamp)}
	case NotificationChannelStateError_FieldPathSelectorMessage:
		return &NotificationChannelStateError_FieldTerminalPathArrayOfValues{NotificationChannelStateError_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_State_Error: %d", fp.selector))
	}
	return fpaov
}

func (fp *NotificationChannelStateError_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *NotificationChannelStateError_FieldTerminalPath) WithIArrayItemValue(value interface{}) NotificationChannelStateError_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_State_Error: %d", fp.selector))
	}
}

func (fp *NotificationChannelStateError_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// NotificationChannelStateError_FieldPathValue allows storing values for Error fields according to their type
type NotificationChannelStateError_FieldPathValue interface {
	NotificationChannelStateError_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **NotificationChannel_State_Error)
	CompareWith(*NotificationChannel_State_Error) (cmp int, comparable bool)
}

func ParseNotificationChannelStateError_FieldPathValue(pathStr, valueStr string) (NotificationChannelStateError_FieldPathValue, error) {
	fp, err := ParseNotificationChannelStateError_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Error field path value from %s: %v", valueStr, err)
	}
	return fpv.(NotificationChannelStateError_FieldPathValue), nil
}

func MustParseNotificationChannelStateError_FieldPathValue(pathStr, valueStr string) NotificationChannelStateError_FieldPathValue {
	fpv, err := ParseNotificationChannelStateError_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type NotificationChannelStateError_FieldTerminalPathValue struct {
	NotificationChannelStateError_FieldTerminalPath
	value interface{}
}

var _ NotificationChannelStateError_FieldPathValue = (*NotificationChannelStateError_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Error' as interface{}
func (fpv *NotificationChannelStateError_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *NotificationChannelStateError_FieldTerminalPathValue) AsTimeValue() (*timestamppb.Timestamp, bool) {
	res, ok := fpv.value.(*timestamppb.Timestamp)
	return res, ok
}
func (fpv *NotificationChannelStateError_FieldTerminalPathValue) AsMessageValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object Error
func (fpv *NotificationChannelStateError_FieldTerminalPathValue) SetTo(target **NotificationChannel_State_Error) {
	if *target == nil {
		*target = new(NotificationChannel_State_Error)
	}
	switch fpv.selector {
	case NotificationChannelStateError_FieldPathSelectorTime:
		(*target).Time = fpv.value.(*timestamppb.Timestamp)
	case NotificationChannelStateError_FieldPathSelectorMessage:
		(*target).Message = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_State_Error: %d", fpv.selector))
	}
}

func (fpv *NotificationChannelStateError_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*NotificationChannel_State_Error)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'NotificationChannelStateError_FieldTerminalPathValue' with the value under path in 'NotificationChannel_State_Error'.
func (fpv *NotificationChannelStateError_FieldTerminalPathValue) CompareWith(source *NotificationChannel_State_Error) (int, bool) {
	switch fpv.selector {
	case NotificationChannelStateError_FieldPathSelectorTime:
		leftValue := fpv.value.(*timestamppb.Timestamp)
		rightValue := source.GetTime()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.AsTime().Equal(rightValue.AsTime()) {
			return 0, true
		} else if leftValue.AsTime().Before(rightValue.AsTime()) {
			return -1, true
		} else {
			return 1, true
		}
	case NotificationChannelStateError_FieldPathSelectorMessage:
		leftValue := fpv.value.(string)
		rightValue := source.GetMessage()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_State_Error: %d", fpv.selector))
	}
}

func (fpv *NotificationChannelStateError_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*NotificationChannel_State_Error))
}

// NotificationChannelStateError_FieldPathArrayItemValue allows storing single item in Path-specific values for Error according to their type
// Present only for array (repeated) types.
type NotificationChannelStateError_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	NotificationChannelStateError_FieldPath
	ContainsValue(*NotificationChannel_State_Error) bool
}

// ParseNotificationChannelStateError_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseNotificationChannelStateError_FieldPathArrayItemValue(pathStr, valueStr string) (NotificationChannelStateError_FieldPathArrayItemValue, error) {
	fp, err := ParseNotificationChannelStateError_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Error field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(NotificationChannelStateError_FieldPathArrayItemValue), nil
}

func MustParseNotificationChannelStateError_FieldPathArrayItemValue(pathStr, valueStr string) NotificationChannelStateError_FieldPathArrayItemValue {
	fpaiv, err := ParseNotificationChannelStateError_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type NotificationChannelStateError_FieldTerminalPathArrayItemValue struct {
	NotificationChannelStateError_FieldTerminalPath
	value interface{}
}

var _ NotificationChannelStateError_FieldPathArrayItemValue = (*NotificationChannelStateError_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object NotificationChannel_State_Error as interface{}
func (fpaiv *NotificationChannelStateError_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *NotificationChannelStateError_FieldTerminalPathArrayItemValue) GetSingle(source *NotificationChannel_State_Error) (interface{}, bool) {
	return nil, false
}

func (fpaiv *NotificationChannelStateError_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*NotificationChannel_State_Error))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Error'
func (fpaiv *NotificationChannelStateError_FieldTerminalPathArrayItemValue) ContainsValue(source *NotificationChannel_State_Error) bool {
	slice := fpaiv.NotificationChannelStateError_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// NotificationChannelStateError_FieldPathArrayOfValues allows storing slice of values for Error fields according to their type
type NotificationChannelStateError_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	NotificationChannelStateError_FieldPath
}

func ParseNotificationChannelStateError_FieldPathArrayOfValues(pathStr, valuesStr string) (NotificationChannelStateError_FieldPathArrayOfValues, error) {
	fp, err := ParseNotificationChannelStateError_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Error field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(NotificationChannelStateError_FieldPathArrayOfValues), nil
}

func MustParseNotificationChannelStateError_FieldPathArrayOfValues(pathStr, valuesStr string) NotificationChannelStateError_FieldPathArrayOfValues {
	fpaov, err := ParseNotificationChannelStateError_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type NotificationChannelStateError_FieldTerminalPathArrayOfValues struct {
	NotificationChannelStateError_FieldTerminalPath
	values interface{}
}

var _ NotificationChannelStateError_FieldPathArrayOfValues = (*NotificationChannelStateError_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *NotificationChannelStateError_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case NotificationChannelStateError_FieldPathSelectorTime:
		for _, v := range fpaov.values.([]*timestamppb.Timestamp) {
			values = append(values, v)
		}
	case NotificationChannelStateError_FieldPathSelectorMessage:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *NotificationChannelStateError_FieldTerminalPathArrayOfValues) AsTimeArrayOfValues() ([]*timestamppb.Timestamp, bool) {
	res, ok := fpaov.values.([]*timestamppb.Timestamp)
	return res, ok
}
func (fpaov *NotificationChannelStateError_FieldTerminalPathArrayOfValues) AsMessageArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
