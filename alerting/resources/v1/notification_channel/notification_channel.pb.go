// Code generated by protoc-gen-goten-go
// File: edgelq/alerting/proto/v1/notification_channel.proto
// DO NOT EDIT!!!

package notification_channel

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	rcommon "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/common"
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1/project"
	meta "github.com/cloudwan/goten-sdk/types/meta"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &rcommon.LogCndSpec{}
	_ = &iam_project.Project{}
	_ = &timestamppb.Timestamp{}
	_ = &meta.Meta{}
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// State of NotificationChannel
type NotificationChannel_State_Status int32

const (
	// State is unknown
	NotificationChannel_State_STATE_UNSPECIFIED NotificationChannel_State_Status = 0
	// NotificationChannel is active
	NotificationChannel_State_ACTIVE NotificationChannel_State_Status = 1
	// NotificationChannel is disabled
	NotificationChannel_State_DISABLED NotificationChannel_State_Status = 2
	// Error of NotificationChannel
	NotificationChannel_State_ERROR NotificationChannel_State_Status = 3
)

var (
	NotificationChannel_State_Status_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "ACTIVE",
		2: "DISABLED",
		3: "ERROR",
	}

	NotificationChannel_State_Status_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"ACTIVE":            1,
		"DISABLED":          2,
		"ERROR":             3,
	}
)

func (x NotificationChannel_State_Status) Enum() *NotificationChannel_State_Status {
	p := new(NotificationChannel_State_Status)
	*p = x
	return p
}

func (x NotificationChannel_State_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (NotificationChannel_State_Status) Descriptor() preflect.EnumDescriptor {
	return edgelq_alerting_proto_v1_notification_channel_proto_enumTypes[0].Descriptor()
}

func (NotificationChannel_State_Status) Type() preflect.EnumType {
	return &edgelq_alerting_proto_v1_notification_channel_proto_enumTypes[0]
}

func (x NotificationChannel_State_Status) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use NotificationChannel_State_Status.ProtoReflect.Descriptor instead.
func (NotificationChannel_State_Status) EnumDescriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_notification_channel_proto_rawDescGZIP(), []int{0, 0, 0}
}

// NotificationChannel specifies channel where notifications about
// alert updates can be sent.
type NotificationChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of NotificationChannel
	// When creating a new instance, this field is optional and if not provided,
	// it will be generated automatically. Last ID segment must conform to the
	// following regex: [a-z][a-z0-9\\-]{0,28}[a-z0-9]
	Name *Name `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty"`
	// Metadata is an object with information like create, update and delete time
	// (for async deleted resources), has user labels/annotations, sharding
	// information, multi-region syncing information and may have non-schema
	// owners (useful for taking ownership of resources belonging to lower level
	// services by higher ones).
	Metadata *meta.Meta `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Display Name
	DisplayName string `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// description
	Description string `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	// Specification
	Spec *rcommon.NotificationChannelSpec `protobuf:"bytes,4,opt,name=spec,proto3" json:"spec,omitempty"`
	// State
	State *NotificationChannel_State `protobuf:"bytes,5,opt,name=state,proto3" json:"state,omitempty"`
}

func (m *NotificationChannel) Reset() {
	*m = NotificationChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_notification_channel_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *NotificationChannel) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*NotificationChannel) ProtoMessage() {}

func (m *NotificationChannel) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_notification_channel_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*NotificationChannel) GotenMessage() {}

// Deprecated, Use NotificationChannel.ProtoReflect.Descriptor instead.
func (*NotificationChannel) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_notification_channel_proto_rawDescGZIP(), []int{0}
}

func (m *NotificationChannel) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *NotificationChannel) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *NotificationChannel) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *NotificationChannel) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *NotificationChannel) GetName() *Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *NotificationChannel) GetMetadata() *meta.Meta {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *NotificationChannel) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *NotificationChannel) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *NotificationChannel) GetSpec() *rcommon.NotificationChannelSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *NotificationChannel) GetState() *NotificationChannel_State {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *NotificationChannel) SetName(fv *Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "NotificationChannel"))
	}
	m.Name = fv
}

func (m *NotificationChannel) SetMetadata(fv *meta.Meta) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Metadata", "NotificationChannel"))
	}
	m.Metadata = fv
}

func (m *NotificationChannel) SetDisplayName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DisplayName", "NotificationChannel"))
	}
	m.DisplayName = fv
}

func (m *NotificationChannel) SetDescription(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Description", "NotificationChannel"))
	}
	m.Description = fv
}

func (m *NotificationChannel) SetSpec(fv *rcommon.NotificationChannelSpec) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Spec", "NotificationChannel"))
	}
	m.Spec = fv
}

func (m *NotificationChannel) SetState(fv *NotificationChannel_State) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "State", "NotificationChannel"))
	}
	m.State = fv
}

// State of NotificationChannel
type NotificationChannel_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Status
	Status NotificationChannel_State_Status `protobuf:"varint,1,opt,name=status,proto3,enum=ntt.alerting.v1.NotificationChannel_State_Status" json:"status,omitempty"`
	// Error
	Error *NotificationChannel_State_Error `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *NotificationChannel_State) Reset() {
	*m = NotificationChannel_State{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_notification_channel_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *NotificationChannel_State) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*NotificationChannel_State) ProtoMessage() {}

func (m *NotificationChannel_State) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_notification_channel_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*NotificationChannel_State) GotenMessage() {}

// Deprecated, Use NotificationChannel_State.ProtoReflect.Descriptor instead.
func (*NotificationChannel_State) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_notification_channel_proto_rawDescGZIP(), []int{0, 0}
}

func (m *NotificationChannel_State) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *NotificationChannel_State) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *NotificationChannel_State) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *NotificationChannel_State) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *NotificationChannel_State) GetStatus() NotificationChannel_State_Status {
	if m != nil {
		return m.Status
	}
	return NotificationChannel_State_STATE_UNSPECIFIED
}

func (m *NotificationChannel_State) GetError() *NotificationChannel_State_Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *NotificationChannel_State) SetStatus(fv NotificationChannel_State_Status) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Status", "NotificationChannel_State"))
	}
	m.Status = fv
}

func (m *NotificationChannel_State) SetError(fv *NotificationChannel_State_Error) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Error", "NotificationChannel_State"))
	}
	m.Error = fv
}

// Error of NotificationChannel
type NotificationChannel_State_Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Time          *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *NotificationChannel_State_Error) Reset() {
	*m = NotificationChannel_State_Error{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_notification_channel_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *NotificationChannel_State_Error) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*NotificationChannel_State_Error) ProtoMessage() {}

func (m *NotificationChannel_State_Error) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_notification_channel_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*NotificationChannel_State_Error) GotenMessage() {}

// Deprecated, Use NotificationChannel_State_Error.ProtoReflect.Descriptor instead.
func (*NotificationChannel_State_Error) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_notification_channel_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (m *NotificationChannel_State_Error) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *NotificationChannel_State_Error) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *NotificationChannel_State_Error) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *NotificationChannel_State_Error) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *NotificationChannel_State_Error) GetTime() *timestamppb.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *NotificationChannel_State_Error) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *NotificationChannel_State_Error) SetTime(fv *timestamppb.Timestamp) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Time", "NotificationChannel_State_Error"))
	}
	m.Time = fv
}

func (m *NotificationChannel_State_Error) SetMessage(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Message", "NotificationChannel_State_Error"))
	}
	m.Message = fv
}

var edgelq_alerting_proto_v1_notification_channel_proto preflect.FileDescriptor

var edgelq_alerting_proto_v1_notification_channel_proto_rawDesc = []byte{
	0x0a, 0x33, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x65, 0x64, 0x67, 0x65,
	0x6c, 0x71, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2f, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x65, 0x64, 0x67,
	0x65, 0x6c, 0x71, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x70, 0x65, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x9c, 0x0a, 0x0a, 0x13, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x2f, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0xb2, 0xda, 0x21, 0x17, 0x0a, 0x15, 0x0a,
	0x13, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67,
	0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x0c, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0b, 0xca, 0xc6, 0x27, 0x07, 0x2a, 0x05, 0x22, 0x03, 0x08, 0x80, 0x02, 0x52, 0x0b, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b,
	0xca, 0xc6, 0x27, 0x07, 0x2a, 0x05, 0x22, 0x03, 0x08, 0x80, 0x04, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x70, 0x65, 0x63,
	0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x40, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xb3, 0x02, 0x0a, 0x05, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x49, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x46, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x1a, 0x51, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2e,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x44, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45,
	0x44, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x3a, 0x8f,
	0x05, 0xea, 0x41, 0x69, 0x0a, 0x27, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x65,
	0x64, 0x67, 0x65, 0x6c, 0x71, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x3e, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x7d, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x7d, 0x92, 0xd9, 0x21,
	0x86, 0x03, 0x0a, 0x14, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x14, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x1a, 0x16,
	0x69, 0x61, 0x6d, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x38, 0x05, 0x42, 0x62, 0x08, 0x02, 0x12, 0x0c, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x0c, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0c, 0x44, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x0c, 0x73, 0x70, 0x65, 0x63,
	0x2e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x07, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x19, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0c,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x20, 0x74, 0x79, 0x70, 0x65, 0x42, 0xd9, 0x01, 0x08,
	0x03, 0x12, 0x0c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0b, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x0c, 0x73, 0x70, 0x65,
	0x63, 0x2e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x07, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x19, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x0c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x20, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a,
	0x0a, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x0d, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x0a, 0x73, 0x70,
	0x65, 0x63, 0x2e, 0x73, 0x6c, 0x61, 0x63, 0x6b, 0x12, 0x0d, 0x53, 0x6c, 0x61, 0x63, 0x6b, 0x20,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1f, 0x0a, 0x0c, 0x73, 0x70, 0x65, 0x63, 0x2e,
	0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x12, 0x0f, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b,
	0x20, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0xb2, 0xdf, 0x21, 0x4c, 0x0a, 0x4a, 0x0a, 0x48,
	0x0a, 0x0d, 0x62, 0x79, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x29, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x7d, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x2d, 0xda, 0x94, 0x23, 0x08, 0x12, 0x06, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0xc2, 0x85, 0x2c, 0x38, 0x22, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x0c,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x04, 0x73, 0x70, 0x65, 0x63, 0x2a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x42, 0xde, 0x02, 0xe8, 0xde, 0x21, 0x01, 0xd2, 0xff, 0xd0, 0x02, 0x5f, 0x0a, 0x1a, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x41, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64,
	0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0xa2, 0x80, 0xd1, 0x02, 0x61,
	0x0a, 0x1b, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x42, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77,
	0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x70, 0x62, 0x2e, 0x76, 0x31, 0x42, 0x18, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x5a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c,
	0x71, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x3b, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	edgelq_alerting_proto_v1_notification_channel_proto_rawDescOnce sync.Once
	edgelq_alerting_proto_v1_notification_channel_proto_rawDescData = edgelq_alerting_proto_v1_notification_channel_proto_rawDesc
)

func edgelq_alerting_proto_v1_notification_channel_proto_rawDescGZIP() []byte {
	edgelq_alerting_proto_v1_notification_channel_proto_rawDescOnce.Do(func() {
		edgelq_alerting_proto_v1_notification_channel_proto_rawDescData = protoimpl.X.CompressGZIP(edgelq_alerting_proto_v1_notification_channel_proto_rawDescData)
	})
	return edgelq_alerting_proto_v1_notification_channel_proto_rawDescData
}

var edgelq_alerting_proto_v1_notification_channel_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var edgelq_alerting_proto_v1_notification_channel_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var edgelq_alerting_proto_v1_notification_channel_proto_goTypes = []interface{}{
	(NotificationChannel_State_Status)(0),   // 0: ntt.alerting.v1.NotificationChannel_State_Status
	(*NotificationChannel)(nil),             // 1: ntt.alerting.v1.NotificationChannel
	(*NotificationChannel_State)(nil),       // 2: ntt.alerting.v1.NotificationChannel.State
	(*NotificationChannel_State_Error)(nil), // 3: ntt.alerting.v1.NotificationChannel.State.Error
	(*meta.Meta)(nil),                       // 4: goten.types.Meta
	(*rcommon.NotificationChannelSpec)(nil), // 5: ntt.alerting.v1.NotificationChannelSpec
	(*timestamppb.Timestamp)(nil),           // 6: google.protobuf.Timestamp
}
var edgelq_alerting_proto_v1_notification_channel_proto_depIdxs = []int32{
	4, // 0: ntt.alerting.v1.NotificationChannel.metadata:type_name -> goten.types.Meta
	5, // 1: ntt.alerting.v1.NotificationChannel.spec:type_name -> ntt.alerting.v1.NotificationChannelSpec
	2, // 2: ntt.alerting.v1.NotificationChannel.state:type_name -> ntt.alerting.v1.NotificationChannel.State
	0, // 3: ntt.alerting.v1.NotificationChannel.State.status:type_name -> ntt.alerting.v1.NotificationChannel_State_Status
	3, // 4: ntt.alerting.v1.NotificationChannel.State.error:type_name -> ntt.alerting.v1.NotificationChannel.State.Error
	6, // 5: ntt.alerting.v1.NotificationChannel.State.Error.time:type_name -> google.protobuf.Timestamp
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { edgelq_alerting_proto_v1_notification_channel_proto_init() }
func edgelq_alerting_proto_v1_notification_channel_proto_init() {
	if edgelq_alerting_proto_v1_notification_channel_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		edgelq_alerting_proto_v1_notification_channel_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_notification_channel_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationChannel_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_notification_channel_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationChannel_State_Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: edgelq_alerting_proto_v1_notification_channel_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           edgelq_alerting_proto_v1_notification_channel_proto_goTypes,
		DependencyIndexes: edgelq_alerting_proto_v1_notification_channel_proto_depIdxs,
		EnumInfos:         edgelq_alerting_proto_v1_notification_channel_proto_enumTypes,
		MessageInfos:      edgelq_alerting_proto_v1_notification_channel_proto_msgTypes,
	}.Build()
	edgelq_alerting_proto_v1_notification_channel_proto = out.File
	edgelq_alerting_proto_v1_notification_channel_proto_rawDesc = nil
	edgelq_alerting_proto_v1_notification_channel_proto_goTypes = nil
	edgelq_alerting_proto_v1_notification_channel_proto_depIdxs = nil
}
