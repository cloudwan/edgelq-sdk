// Code generated by protoc-gen-goten-resource
// Resource: PolicyTemplate
// DO NOT EDIT!!!

package policy_template

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
	gotenfilter "github.com/cloudwan/goten-sdk/runtime/resource/filter"
)

// proto imports
import (
	rcommon "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/common"
	document "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/document"
	notification_channel "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/notification_channel"
	api "github.com/cloudwan/edgelq-sdk/common/api"
	iam_iam_common "github.com/cloudwan/edgelq-sdk/iam/resources/v1/common"
	iam_organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1/organization"
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1/project"
	logging_bucket "github.com/cloudwan/edgelq-sdk/logging/resources/v1/bucket"
	logging_common "github.com/cloudwan/edgelq-sdk/logging/resources/v1/common"
	logging_log "github.com/cloudwan/edgelq-sdk/logging/resources/v1/log"
	logging_log_descriptor "github.com/cloudwan/edgelq-sdk/logging/resources/v1/log_descriptor"
	monitoring_common "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/common"
	monitoring_metric_descriptor "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/metric_descriptor"
	monitoring_monitored_resource_descriptor "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/monitored_resource_descriptor"
	monitoring_project "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/project"
	monitoring_time_serie "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/time_serie"
	meta_common "github.com/cloudwan/goten-sdk/meta-service/resources/v1/common"
	meta_resource "github.com/cloudwan/goten-sdk/meta-service/resources/v1/resource"
	meta_service "github.com/cloudwan/goten-sdk/meta-service/resources/v1/service"
	meta "github.com/cloudwan/goten-sdk/types/meta"
	multi_region_policy "github.com/cloudwan/goten-sdk/types/multi_region_policy"
	anypb "google.golang.org/protobuf/types/known/anypb"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// ensure the imports are used
var (
	_ = gotenresource.ConditionContainsTypeAll
	_ = gotenfilter.AND
)

// make sure we're using proto imports
var (
	_ = &document.Document{}
	_ = &notification_channel.NotificationChannel{}
	_ = &rcommon.LogCndSpec{}
	_ = api.LaunchStage(0)
	_ = &iam_iam_common.PCR{}
	_ = &iam_organization.Organization{}
	_ = &iam_project.Project{}
	_ = &logging_bucket.Bucket{}
	_ = &logging_common.LabelDescriptor{}
	_ = &logging_log.Log{}
	_ = &logging_log_descriptor.LogDescriptor{}
	_ = &monitoring_common.LabelDescriptor{}
	_ = &monitoring_metric_descriptor.MetricDescriptor{}
	_ = &monitoring_monitored_resource_descriptor.MonitoredResourceDescriptor{}
	_ = &monitoring_project.Project{}
	_ = &monitoring_time_serie.Point{}
	_ = &anypb.Any{}
	_ = &durationpb.Duration{}
	_ = &fieldmaskpb.FieldMask{}
	_ = &structpb.Struct{}
	_ = &timestamppb.Timestamp{}
	_ = &meta_common.LabelledDomain{}
	_ = &meta_resource.Resource{}
	_ = &meta_service.Service{}
	_ = &meta.Meta{}
	_ = &multi_region_policy.MultiRegionPolicy{}
)

type FilterBuilderOrCondition interface {
	_IsPolicyTemplateFilterBuilderOrCondition()
}

type FilterBuilder struct {
	conds  []FilterCondition
	useNot bool
	op     gotenfilter.CompositeOperator
}

func NewFilterBuilder() *FilterBuilder {
	return NewAndFilterBuilder()
}

func NewAndFilterBuilder() *FilterBuilder {
	return &FilterBuilder{
		op: gotenfilter.AND,
	}
}

func NewOrFilterBuilder() *FilterBuilder {
	return &FilterBuilder{
		op: gotenfilter.OR,
	}
}

func (b *FilterBuilder) _IsPolicyTemplateFilterBuilderOrCondition() {}

func (b *FilterBuilder) With(condOrBuilder FilterBuilderOrCondition, opts ...gotenfilter.FilterConditionOption) *FilterBuilder {
	var cond FilterCondition
	switch typedObj := condOrBuilder.(type) {
	case *Filter:
		cond = typedObj.GetCondition()
	case *FilterBuilder:
		cond = &FilterConditionComposite{Operator: typedObj.op, Conditions: typedObj.conds}
	case FilterCondition:
		cond = typedObj
	default:
		panic("Unknown condition or builder type")
	}
	cfg := gotenfilter.MakeFilterCondOptions(opts)
	if cfg.IsNot() {
		cond = &FilterConditionNot{cond}
	}
	b.conds = append(b.conds, cond)
	return b
}

func (b *FilterBuilder) Where(opts ...gotenfilter.FilterConditionOption) *filterCndBuilder {
	cfg := gotenfilter.MakeFilterCondOptions(opts)
	b.useNot = cfg.IsNot()
	return &filterCndBuilder{builder: b}
}

func (b *FilterBuilder) WherePath(fp PolicyTemplate_FieldPath, opts ...gotenfilter.FilterConditionOption) *filterCndBuilderAnyPath {
	cfg := gotenfilter.MakeFilterCondOptions(opts)
	b.useNot = cfg.IsNot()
	return &filterCndBuilderAnyPath{builder: b, fp: fp}
}

func (b *FilterBuilder) Filter() *Filter {
	return &Filter{
		FilterCondition: &FilterConditionComposite{Operator: b.op, Conditions: b.conds},
	}
}

func (b *FilterBuilder) addCond(cond FilterCondition) *FilterBuilder {
	if b.useNot {
		cond = &FilterConditionNot{cond}
		b.useNot = false
	}
	b.conds = append(b.conds, cond)
	return b
}

type filterCndBuilderAnyPath struct {
	builder *FilterBuilder
	fp      PolicyTemplate_FieldPath
}

func (b *filterCndBuilderAnyPath) Eq(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderAnyPath) Neq(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderAnyPath) Gt(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderAnyPath) Gte(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderAnyPath) Lt(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderAnyPath) Lte(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderAnyPath) In(values interface{}) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		PolicyTemplate_FieldPathArrayOfValues: b.fp.WithIArrayOfValues(values),
	})
}

func (b *filterCndBuilderAnyPath) NotIn(values interface{}) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		PolicyTemplate_FieldPathArrayOfValues: b.fp.WithIArrayOfValues(values),
	})
}

func (b *filterCndBuilderAnyPath) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: b.fp,
	})
}

func (b *filterCndBuilderAnyPath) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: b.fp,
	})
}

func (b *filterCndBuilderAnyPath) Contains(value interface{}) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: b.fp,
		Value:     b.fp.WithIArrayItemValue(value),
	})
}

func (b *filterCndBuilderAnyPath) ContainsAnyOf(values []interface{}) *FilterBuilder {
	itemValues := make([]PolicyTemplate_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, b.fp.WithIArrayItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: b.fp,
		Values:    itemValues,
	})
}

func (b *filterCndBuilderAnyPath) ContainsAll(values []interface{}) *FilterBuilder {
	itemValues := make([]PolicyTemplate_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, b.fp.WithIArrayItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: b.fp,
		Values:    itemValues,
	})
}

func (b *filterCndBuilderAnyPath) compare(op gotenfilter.CompareOperator, value interface{}) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		PolicyTemplate_FieldPathValue: b.fp.WithIValue(value),
	})
}

type filterCndBuilder struct {
	builder *FilterBuilder
}

func (b *filterCndBuilder) Name() *filterCndBuilderName {
	return &filterCndBuilderName{builder: b.builder}
}

func (b *filterCndBuilder) Metadata() *filterCndBuilderMetadata {
	return &filterCndBuilderMetadata{builder: b.builder}
}

func (b *filterCndBuilder) DisplayName() *filterCndBuilderDisplayName {
	return &filterCndBuilderDisplayName{builder: b.builder}
}

func (b *filterCndBuilder) Description() *filterCndBuilderDescription {
	return &filterCndBuilderDescription{builder: b.builder}
}

func (b *filterCndBuilder) SupportingDocs() *filterCndBuilderSupportingDocs {
	return &filterCndBuilderSupportingDocs{builder: b.builder}
}

func (b *filterCndBuilder) SpecTemplate() *filterCndBuilderSpecTemplate {
	return &filterCndBuilderSpecTemplate{builder: b.builder}
}

type filterCndBuilderName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderName) Eq(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderName) Neq(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderName) Gt(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderName) Gte(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderName) Lt(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderName) Lte(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderName) In(values []*Name) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderName) NotIn(values []*Name) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewPolicyTemplateFieldPathBuilder().Name().FieldPath(),
	})
}

func (b *filterCndBuilderName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewPolicyTemplateFieldPathBuilder().Name().FieldPath(),
	})
}

func (b *filterCndBuilderName) compare(op gotenfilter.CompareOperator, value *Name) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		PolicyTemplate_FieldPathValue: NewPolicyTemplateFieldPathBuilder().Name().WithValue(value),
	})
}

type filterCndBuilderMetadata struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadata) Eq(value *meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadata) Neq(value *meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadata) Gt(value *meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadata) Gte(value *meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadata) Lt(value *meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadata) Lte(value *meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadata) In(values []*meta.Meta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().Metadata().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadata) NotIn(values []*meta.Meta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().Metadata().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadata) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewPolicyTemplateFieldPathBuilder().Metadata().FieldPath(),
	})
}

func (b *filterCndBuilderMetadata) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewPolicyTemplateFieldPathBuilder().Metadata().FieldPath(),
	})
}

func (b *filterCndBuilderMetadata) compare(op gotenfilter.CompareOperator, value *meta.Meta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		PolicyTemplate_FieldPathValue: NewPolicyTemplateFieldPathBuilder().Metadata().WithValue(value),
	})
}

func (b *filterCndBuilderMetadata) CreateTime() *filterCndBuilderMetadataCreateTime {
	return &filterCndBuilderMetadataCreateTime{builder: b.builder}
}

func (b *filterCndBuilderMetadata) UpdateTime() *filterCndBuilderMetadataUpdateTime {
	return &filterCndBuilderMetadataUpdateTime{builder: b.builder}
}

func (b *filterCndBuilderMetadata) DeleteTime() *filterCndBuilderMetadataDeleteTime {
	return &filterCndBuilderMetadataDeleteTime{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Uuid() *filterCndBuilderMetadataUuid {
	return &filterCndBuilderMetadataUuid{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Tags() *filterCndBuilderMetadataTags {
	return &filterCndBuilderMetadataTags{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Labels() *filterCndBuilderMetadataLabels {
	return &filterCndBuilderMetadataLabels{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Annotations() *filterCndBuilderMetadataAnnotations {
	return &filterCndBuilderMetadataAnnotations{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Generation() *filterCndBuilderMetadataGeneration {
	return &filterCndBuilderMetadataGeneration{builder: b.builder}
}

func (b *filterCndBuilderMetadata) ResourceVersion() *filterCndBuilderMetadataResourceVersion {
	return &filterCndBuilderMetadataResourceVersion{builder: b.builder}
}

func (b *filterCndBuilderMetadata) OwnerReferences() *filterCndBuilderMetadataOwnerReferences {
	return &filterCndBuilderMetadataOwnerReferences{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Shards() *filterCndBuilderMetadataShards {
	return &filterCndBuilderMetadataShards{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Syncing() *filterCndBuilderMetadataSyncing {
	return &filterCndBuilderMetadataSyncing{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Lifecycle() *filterCndBuilderMetadataLifecycle {
	return &filterCndBuilderMetadataLifecycle{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Services() *filterCndBuilderMetadataServices {
	return &filterCndBuilderMetadataServices{builder: b.builder}
}

type filterCndBuilderMetadataCreateTime struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataCreateTime) Eq(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataCreateTime) Neq(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataCreateTime) Gt(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataCreateTime) Gte(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataCreateTime) Lt(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataCreateTime) Lte(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataCreateTime) In(values []*timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().Metadata().CreateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataCreateTime) NotIn(values []*timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().Metadata().CreateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataCreateTime) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewPolicyTemplateFieldPathBuilder().Metadata().CreateTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataCreateTime) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewPolicyTemplateFieldPathBuilder().Metadata().CreateTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataCreateTime) compare(op gotenfilter.CompareOperator, value *timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		PolicyTemplate_FieldPathValue: NewPolicyTemplateFieldPathBuilder().Metadata().CreateTime().WithValue(value),
	})
}

type filterCndBuilderMetadataUpdateTime struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataUpdateTime) Eq(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Neq(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Gt(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Gte(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Lt(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Lte(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataUpdateTime) In(values []*timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().Metadata().UpdateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataUpdateTime) NotIn(values []*timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().Metadata().UpdateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataUpdateTime) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewPolicyTemplateFieldPathBuilder().Metadata().UpdateTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataUpdateTime) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewPolicyTemplateFieldPathBuilder().Metadata().UpdateTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataUpdateTime) compare(op gotenfilter.CompareOperator, value *timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		PolicyTemplate_FieldPathValue: NewPolicyTemplateFieldPathBuilder().Metadata().UpdateTime().WithValue(value),
	})
}

type filterCndBuilderMetadataDeleteTime struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataDeleteTime) Eq(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataDeleteTime) Neq(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataDeleteTime) Gt(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataDeleteTime) Gte(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataDeleteTime) Lt(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataDeleteTime) Lte(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataDeleteTime) In(values []*timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().Metadata().DeleteTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataDeleteTime) NotIn(values []*timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().Metadata().DeleteTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataDeleteTime) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewPolicyTemplateFieldPathBuilder().Metadata().DeleteTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataDeleteTime) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewPolicyTemplateFieldPathBuilder().Metadata().DeleteTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataDeleteTime) compare(op gotenfilter.CompareOperator, value *timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		PolicyTemplate_FieldPathValue: NewPolicyTemplateFieldPathBuilder().Metadata().DeleteTime().WithValue(value),
	})
}

type filterCndBuilderMetadataUuid struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataUuid) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataUuid) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataUuid) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataUuid) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataUuid) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataUuid) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataUuid) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().Metadata().Uuid().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataUuid) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().Metadata().Uuid().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataUuid) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewPolicyTemplateFieldPathBuilder().Metadata().Uuid().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataUuid) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewPolicyTemplateFieldPathBuilder().Metadata().Uuid().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataUuid) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		PolicyTemplate_FieldPathValue: NewPolicyTemplateFieldPathBuilder().Metadata().Uuid().WithValue(value),
	})
}

type filterCndBuilderMetadataTags struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataTags) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataTags) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataTags) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataTags) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataTags) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataTags) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataTags) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().Metadata().Tags().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataTags) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().Metadata().Tags().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataTags) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewPolicyTemplateFieldPathBuilder().Metadata().Tags().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataTags) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewPolicyTemplateFieldPathBuilder().Metadata().Tags().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataTags) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewPolicyTemplateFieldPathBuilder().Metadata().Tags().FieldPath(),
		Value:     NewPolicyTemplateFieldPathBuilder().Metadata().Tags().WithItemValue(value),
	})
}

func (b *filterCndBuilderMetadataTags) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewPolicyTemplateFieldPathBuilder().Metadata().Tags()
	itemValues := make([]PolicyTemplate_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewPolicyTemplateFieldPathBuilder().Metadata().Tags().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataTags) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewPolicyTemplateFieldPathBuilder().Metadata().Tags()
	itemValues := make([]PolicyTemplate_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewPolicyTemplateFieldPathBuilder().Metadata().Tags().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataTags) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		PolicyTemplate_FieldPathValue: NewPolicyTemplateFieldPathBuilder().Metadata().Tags().WithValue(value),
	})
}

type filterCndBuilderMetadataLabels struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataLabels) Eq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataLabels) Neq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataLabels) Gt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataLabels) Gte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataLabels) Lt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataLabels) Lte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataLabels) In(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().Metadata().Labels().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLabels) NotIn(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().Metadata().Labels().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLabels) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewPolicyTemplateFieldPathBuilder().Metadata().Labels().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLabels) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewPolicyTemplateFieldPathBuilder().Metadata().Labels().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLabels) compare(op gotenfilter.CompareOperator, value map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		PolicyTemplate_FieldPathValue: NewPolicyTemplateFieldPathBuilder().Metadata().Labels().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataLabels) WithKey(key string) *mapFilterCndBuilderMetadataLabels {
	return &mapFilterCndBuilderMetadataLabels{builder: b.builder, key: key}
}

type mapFilterCndBuilderMetadataLabels struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderMetadataLabels) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderMetadataLabels) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().Metadata().Labels().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataLabels) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().Metadata().Labels().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataLabels) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewPolicyTemplateFieldPathBuilder().Metadata().Labels().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataLabels) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewPolicyTemplateFieldPathBuilder().Metadata().Labels().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataLabels) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		PolicyTemplate_FieldPathValue: NewPolicyTemplateFieldPathBuilder().Metadata().Labels().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderMetadataAnnotations struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataAnnotations) Eq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataAnnotations) Neq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataAnnotations) Gt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataAnnotations) Gte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataAnnotations) Lt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataAnnotations) Lte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataAnnotations) In(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().Metadata().Annotations().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataAnnotations) NotIn(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().Metadata().Annotations().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataAnnotations) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewPolicyTemplateFieldPathBuilder().Metadata().Annotations().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataAnnotations) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewPolicyTemplateFieldPathBuilder().Metadata().Annotations().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataAnnotations) compare(op gotenfilter.CompareOperator, value map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		PolicyTemplate_FieldPathValue: NewPolicyTemplateFieldPathBuilder().Metadata().Annotations().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataAnnotations) WithKey(key string) *mapFilterCndBuilderMetadataAnnotations {
	return &mapFilterCndBuilderMetadataAnnotations{builder: b.builder, key: key}
}

type mapFilterCndBuilderMetadataAnnotations struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderMetadataAnnotations) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().Metadata().Annotations().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataAnnotations) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().Metadata().Annotations().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataAnnotations) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewPolicyTemplateFieldPathBuilder().Metadata().Annotations().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataAnnotations) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewPolicyTemplateFieldPathBuilder().Metadata().Annotations().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataAnnotations) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		PolicyTemplate_FieldPathValue: NewPolicyTemplateFieldPathBuilder().Metadata().Annotations().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderMetadataGeneration struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataGeneration) Eq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataGeneration) Neq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataGeneration) Gt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataGeneration) Gte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataGeneration) Lt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataGeneration) Lte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataGeneration) In(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().Metadata().Generation().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataGeneration) NotIn(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().Metadata().Generation().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataGeneration) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewPolicyTemplateFieldPathBuilder().Metadata().Generation().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataGeneration) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewPolicyTemplateFieldPathBuilder().Metadata().Generation().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataGeneration) compare(op gotenfilter.CompareOperator, value int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		PolicyTemplate_FieldPathValue: NewPolicyTemplateFieldPathBuilder().Metadata().Generation().WithValue(value),
	})
}

type filterCndBuilderMetadataResourceVersion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataResourceVersion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataResourceVersion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().Metadata().ResourceVersion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataResourceVersion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().Metadata().ResourceVersion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataResourceVersion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewPolicyTemplateFieldPathBuilder().Metadata().ResourceVersion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataResourceVersion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewPolicyTemplateFieldPathBuilder().Metadata().ResourceVersion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataResourceVersion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		PolicyTemplate_FieldPathValue: NewPolicyTemplateFieldPathBuilder().Metadata().ResourceVersion().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferences struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferences) Eq(value []*meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Neq(value []*meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Gt(value []*meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Gte(value []*meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Lt(value []*meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Lte(value []*meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) In(values [][]*meta.OwnerReference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().Metadata().OwnerReferences().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) NotIn(values [][]*meta.OwnerReference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().Metadata().OwnerReferences().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewPolicyTemplateFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewPolicyTemplateFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) Contains(value *meta.OwnerReference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewPolicyTemplateFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
		Value:     NewPolicyTemplateFieldPathBuilder().Metadata().OwnerReferences().WithItemValue(value),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) ContainsAnyOf(values []*meta.OwnerReference) *FilterBuilder {
	pathSelector := NewPolicyTemplateFieldPathBuilder().Metadata().OwnerReferences()
	itemValues := make([]PolicyTemplate_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewPolicyTemplateFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) ContainsAll(values []*meta.OwnerReference) *FilterBuilder {
	pathSelector := NewPolicyTemplateFieldPathBuilder().Metadata().OwnerReferences()
	itemValues := make([]PolicyTemplate_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewPolicyTemplateFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) compare(op gotenfilter.CompareOperator, value []*meta.OwnerReference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		PolicyTemplate_FieldPathValue: NewPolicyTemplateFieldPathBuilder().Metadata().OwnerReferences().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) Kind() *filterCndBuilderMetadataOwnerReferencesKind {
	return &filterCndBuilderMetadataOwnerReferencesKind{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) Version() *filterCndBuilderMetadataOwnerReferencesVersion {
	return &filterCndBuilderMetadataOwnerReferencesVersion{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) Name() *filterCndBuilderMetadataOwnerReferencesName {
	return &filterCndBuilderMetadataOwnerReferencesName{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) Region() *filterCndBuilderMetadataOwnerReferencesRegion {
	return &filterCndBuilderMetadataOwnerReferencesRegion{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) Controller() *filterCndBuilderMetadataOwnerReferencesController {
	return &filterCndBuilderMetadataOwnerReferencesController{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) RequiresOwnerReference() *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference {
	return &filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) UnsetOnDelete() *filterCndBuilderMetadataOwnerReferencesUnsetOnDelete {
	return &filterCndBuilderMetadataOwnerReferencesUnsetOnDelete{builder: b.builder}
}

type filterCndBuilderMetadataOwnerReferencesKind struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().Metadata().OwnerReferences().Kind().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().Metadata().OwnerReferences().Kind().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewPolicyTemplateFieldPathBuilder().Metadata().OwnerReferences().Kind().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewPolicyTemplateFieldPathBuilder().Metadata().OwnerReferences().Kind().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		PolicyTemplate_FieldPathValue: NewPolicyTemplateFieldPathBuilder().Metadata().OwnerReferences().Kind().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesVersion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().Metadata().OwnerReferences().Version().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().Metadata().OwnerReferences().Version().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewPolicyTemplateFieldPathBuilder().Metadata().OwnerReferences().Version().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewPolicyTemplateFieldPathBuilder().Metadata().OwnerReferences().Version().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		PolicyTemplate_FieldPathValue: NewPolicyTemplateFieldPathBuilder().Metadata().OwnerReferences().Version().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().Metadata().OwnerReferences().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().Metadata().OwnerReferences().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewPolicyTemplateFieldPathBuilder().Metadata().OwnerReferences().Name().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewPolicyTemplateFieldPathBuilder().Metadata().OwnerReferences().Name().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		PolicyTemplate_FieldPathValue: NewPolicyTemplateFieldPathBuilder().Metadata().OwnerReferences().Name().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesRegion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().Metadata().OwnerReferences().Region().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().Metadata().OwnerReferences().Region().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewPolicyTemplateFieldPathBuilder().Metadata().OwnerReferences().Region().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewPolicyTemplateFieldPathBuilder().Metadata().OwnerReferences().Region().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		PolicyTemplate_FieldPathValue: NewPolicyTemplateFieldPathBuilder().Metadata().OwnerReferences().Region().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesController struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().Metadata().OwnerReferences().Controller().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesController) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().Metadata().OwnerReferences().Controller().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesController) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewPolicyTemplateFieldPathBuilder().Metadata().OwnerReferences().Controller().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesController) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewPolicyTemplateFieldPathBuilder().Metadata().OwnerReferences().Controller().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesController) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		PolicyTemplate_FieldPathValue: NewPolicyTemplateFieldPathBuilder().Metadata().OwnerReferences().Controller().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().Metadata().OwnerReferences().RequiresOwnerReference().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().Metadata().OwnerReferences().RequiresOwnerReference().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewPolicyTemplateFieldPathBuilder().Metadata().OwnerReferences().RequiresOwnerReference().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewPolicyTemplateFieldPathBuilder().Metadata().OwnerReferences().RequiresOwnerReference().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		PolicyTemplate_FieldPathValue: NewPolicyTemplateFieldPathBuilder().Metadata().OwnerReferences().RequiresOwnerReference().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesUnsetOnDelete struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesUnsetOnDelete) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesUnsetOnDelete) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesUnsetOnDelete) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesUnsetOnDelete) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesUnsetOnDelete) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesUnsetOnDelete) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesUnsetOnDelete) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().Metadata().OwnerReferences().UnsetOnDelete().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesUnsetOnDelete) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().Metadata().OwnerReferences().UnsetOnDelete().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesUnsetOnDelete) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewPolicyTemplateFieldPathBuilder().Metadata().OwnerReferences().UnsetOnDelete().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesUnsetOnDelete) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewPolicyTemplateFieldPathBuilder().Metadata().OwnerReferences().UnsetOnDelete().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesUnsetOnDelete) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		PolicyTemplate_FieldPathValue: NewPolicyTemplateFieldPathBuilder().Metadata().OwnerReferences().UnsetOnDelete().WithValue(value),
	})
}

type filterCndBuilderMetadataShards struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataShards) Eq(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataShards) Neq(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataShards) Gt(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataShards) Gte(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataShards) Lt(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataShards) Lte(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataShards) In(values []map[string]int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().Metadata().Shards().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataShards) NotIn(values []map[string]int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().Metadata().Shards().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataShards) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewPolicyTemplateFieldPathBuilder().Metadata().Shards().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataShards) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewPolicyTemplateFieldPathBuilder().Metadata().Shards().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataShards) compare(op gotenfilter.CompareOperator, value map[string]int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		PolicyTemplate_FieldPathValue: NewPolicyTemplateFieldPathBuilder().Metadata().Shards().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataShards) WithKey(key string) *mapFilterCndBuilderMetadataShards {
	return &mapFilterCndBuilderMetadataShards{builder: b.builder, key: key}
}

type mapFilterCndBuilderMetadataShards struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderMetadataShards) Eq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderMetadataShards) Neq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderMetadataShards) Gt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderMetadataShards) Gte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderMetadataShards) Lt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderMetadataShards) Lte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderMetadataShards) In(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().Metadata().Shards().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataShards) NotIn(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().Metadata().Shards().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataShards) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewPolicyTemplateFieldPathBuilder().Metadata().Shards().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataShards) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewPolicyTemplateFieldPathBuilder().Metadata().Shards().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataShards) compare(op gotenfilter.CompareOperator, value int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		PolicyTemplate_FieldPathValue: NewPolicyTemplateFieldPathBuilder().Metadata().Shards().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderMetadataSyncing struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataSyncing) Eq(value *meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataSyncing) Neq(value *meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataSyncing) Gt(value *meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataSyncing) Gte(value *meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataSyncing) Lt(value *meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataSyncing) Lte(value *meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataSyncing) In(values []*meta.SyncingMeta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().Metadata().Syncing().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncing) NotIn(values []*meta.SyncingMeta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().Metadata().Syncing().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncing) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewPolicyTemplateFieldPathBuilder().Metadata().Syncing().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncing) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewPolicyTemplateFieldPathBuilder().Metadata().Syncing().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncing) compare(op gotenfilter.CompareOperator, value *meta.SyncingMeta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		PolicyTemplate_FieldPathValue: NewPolicyTemplateFieldPathBuilder().Metadata().Syncing().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataSyncing) OwningRegion() *filterCndBuilderMetadataSyncingOwningRegion {
	return &filterCndBuilderMetadataSyncingOwningRegion{builder: b.builder}
}

func (b *filterCndBuilderMetadataSyncing) Regions() *filterCndBuilderMetadataSyncingRegions {
	return &filterCndBuilderMetadataSyncingRegions{builder: b.builder}
}

type filterCndBuilderMetadataSyncingOwningRegion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().Metadata().Syncing().OwningRegion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().Metadata().Syncing().OwningRegion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewPolicyTemplateFieldPathBuilder().Metadata().Syncing().OwningRegion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewPolicyTemplateFieldPathBuilder().Metadata().Syncing().OwningRegion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		PolicyTemplate_FieldPathValue: NewPolicyTemplateFieldPathBuilder().Metadata().Syncing().OwningRegion().WithValue(value),
	})
}

type filterCndBuilderMetadataSyncingRegions struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataSyncingRegions) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().Metadata().Syncing().Regions().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().Metadata().Syncing().Regions().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewPolicyTemplateFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewPolicyTemplateFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewPolicyTemplateFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
		Value:     NewPolicyTemplateFieldPathBuilder().Metadata().Syncing().Regions().WithItemValue(value),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewPolicyTemplateFieldPathBuilder().Metadata().Syncing().Regions()
	itemValues := make([]PolicyTemplate_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewPolicyTemplateFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewPolicyTemplateFieldPathBuilder().Metadata().Syncing().Regions()
	itemValues := make([]PolicyTemplate_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewPolicyTemplateFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		PolicyTemplate_FieldPathValue: NewPolicyTemplateFieldPathBuilder().Metadata().Syncing().Regions().WithValue(value),
	})
}

type filterCndBuilderMetadataLifecycle struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataLifecycle) Eq(value *meta.Lifecycle) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataLifecycle) Neq(value *meta.Lifecycle) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataLifecycle) Gt(value *meta.Lifecycle) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataLifecycle) Gte(value *meta.Lifecycle) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataLifecycle) Lt(value *meta.Lifecycle) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataLifecycle) Lte(value *meta.Lifecycle) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataLifecycle) In(values []*meta.Lifecycle) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().Metadata().Lifecycle().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLifecycle) NotIn(values []*meta.Lifecycle) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().Metadata().Lifecycle().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLifecycle) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewPolicyTemplateFieldPathBuilder().Metadata().Lifecycle().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLifecycle) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewPolicyTemplateFieldPathBuilder().Metadata().Lifecycle().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLifecycle) compare(op gotenfilter.CompareOperator, value *meta.Lifecycle) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		PolicyTemplate_FieldPathValue: NewPolicyTemplateFieldPathBuilder().Metadata().Lifecycle().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataLifecycle) State() *filterCndBuilderMetadataLifecycleState {
	return &filterCndBuilderMetadataLifecycleState{builder: b.builder}
}

func (b *filterCndBuilderMetadataLifecycle) BlockDeletion() *filterCndBuilderMetadataLifecycleBlockDeletion {
	return &filterCndBuilderMetadataLifecycleBlockDeletion{builder: b.builder}
}

type filterCndBuilderMetadataLifecycleState struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataLifecycleState) Eq(value meta.Lifecycle_State) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataLifecycleState) Neq(value meta.Lifecycle_State) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataLifecycleState) Gt(value meta.Lifecycle_State) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataLifecycleState) Gte(value meta.Lifecycle_State) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataLifecycleState) Lt(value meta.Lifecycle_State) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataLifecycleState) Lte(value meta.Lifecycle_State) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataLifecycleState) In(values []meta.Lifecycle_State) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().Metadata().Lifecycle().State().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLifecycleState) NotIn(values []meta.Lifecycle_State) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().Metadata().Lifecycle().State().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLifecycleState) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewPolicyTemplateFieldPathBuilder().Metadata().Lifecycle().State().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLifecycleState) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewPolicyTemplateFieldPathBuilder().Metadata().Lifecycle().State().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLifecycleState) compare(op gotenfilter.CompareOperator, value meta.Lifecycle_State) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		PolicyTemplate_FieldPathValue: NewPolicyTemplateFieldPathBuilder().Metadata().Lifecycle().State().WithValue(value),
	})
}

type filterCndBuilderMetadataLifecycleBlockDeletion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().Metadata().Lifecycle().BlockDeletion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().Metadata().Lifecycle().BlockDeletion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewPolicyTemplateFieldPathBuilder().Metadata().Lifecycle().BlockDeletion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewPolicyTemplateFieldPathBuilder().Metadata().Lifecycle().BlockDeletion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		PolicyTemplate_FieldPathValue: NewPolicyTemplateFieldPathBuilder().Metadata().Lifecycle().BlockDeletion().WithValue(value),
	})
}

type filterCndBuilderMetadataServices struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataServices) Eq(value *meta.ServicesInfo) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataServices) Neq(value *meta.ServicesInfo) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataServices) Gt(value *meta.ServicesInfo) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataServices) Gte(value *meta.ServicesInfo) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataServices) Lt(value *meta.ServicesInfo) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataServices) Lte(value *meta.ServicesInfo) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataServices) In(values []*meta.ServicesInfo) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().Metadata().Services().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataServices) NotIn(values []*meta.ServicesInfo) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().Metadata().Services().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataServices) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewPolicyTemplateFieldPathBuilder().Metadata().Services().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataServices) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewPolicyTemplateFieldPathBuilder().Metadata().Services().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataServices) compare(op gotenfilter.CompareOperator, value *meta.ServicesInfo) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		PolicyTemplate_FieldPathValue: NewPolicyTemplateFieldPathBuilder().Metadata().Services().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataServices) OwningService() *filterCndBuilderMetadataServicesOwningService {
	return &filterCndBuilderMetadataServicesOwningService{builder: b.builder}
}

func (b *filterCndBuilderMetadataServices) AllowedServices() *filterCndBuilderMetadataServicesAllowedServices {
	return &filterCndBuilderMetadataServicesAllowedServices{builder: b.builder}
}

type filterCndBuilderMetadataServicesOwningService struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataServicesOwningService) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataServicesOwningService) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataServicesOwningService) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataServicesOwningService) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataServicesOwningService) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataServicesOwningService) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataServicesOwningService) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().Metadata().Services().OwningService().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataServicesOwningService) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().Metadata().Services().OwningService().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataServicesOwningService) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewPolicyTemplateFieldPathBuilder().Metadata().Services().OwningService().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataServicesOwningService) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewPolicyTemplateFieldPathBuilder().Metadata().Services().OwningService().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataServicesOwningService) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		PolicyTemplate_FieldPathValue: NewPolicyTemplateFieldPathBuilder().Metadata().Services().OwningService().WithValue(value),
	})
}

type filterCndBuilderMetadataServicesAllowedServices struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataServicesAllowedServices) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataServicesAllowedServices) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataServicesAllowedServices) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataServicesAllowedServices) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataServicesAllowedServices) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataServicesAllowedServices) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataServicesAllowedServices) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().Metadata().Services().AllowedServices().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataServicesAllowedServices) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().Metadata().Services().AllowedServices().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataServicesAllowedServices) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewPolicyTemplateFieldPathBuilder().Metadata().Services().AllowedServices().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataServicesAllowedServices) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewPolicyTemplateFieldPathBuilder().Metadata().Services().AllowedServices().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataServicesAllowedServices) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewPolicyTemplateFieldPathBuilder().Metadata().Services().AllowedServices().FieldPath(),
		Value:     NewPolicyTemplateFieldPathBuilder().Metadata().Services().AllowedServices().WithItemValue(value),
	})
}

func (b *filterCndBuilderMetadataServicesAllowedServices) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewPolicyTemplateFieldPathBuilder().Metadata().Services().AllowedServices()
	itemValues := make([]PolicyTemplate_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewPolicyTemplateFieldPathBuilder().Metadata().Services().AllowedServices().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataServicesAllowedServices) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewPolicyTemplateFieldPathBuilder().Metadata().Services().AllowedServices()
	itemValues := make([]PolicyTemplate_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewPolicyTemplateFieldPathBuilder().Metadata().Services().AllowedServices().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataServicesAllowedServices) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		PolicyTemplate_FieldPathValue: NewPolicyTemplateFieldPathBuilder().Metadata().Services().AllowedServices().WithValue(value),
	})
}

type filterCndBuilderDisplayName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderDisplayName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderDisplayName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderDisplayName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderDisplayName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderDisplayName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderDisplayName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderDisplayName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().DisplayName().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderDisplayName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().DisplayName().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderDisplayName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewPolicyTemplateFieldPathBuilder().DisplayName().FieldPath(),
	})
}

func (b *filterCndBuilderDisplayName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewPolicyTemplateFieldPathBuilder().DisplayName().FieldPath(),
	})
}

func (b *filterCndBuilderDisplayName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		PolicyTemplate_FieldPathValue: NewPolicyTemplateFieldPathBuilder().DisplayName().WithValue(value),
	})
}

type filterCndBuilderDescription struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderDescription) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderDescription) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderDescription) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderDescription) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderDescription) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderDescription) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderDescription) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().Description().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderDescription) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().Description().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderDescription) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewPolicyTemplateFieldPathBuilder().Description().FieldPath(),
	})
}

func (b *filterCndBuilderDescription) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewPolicyTemplateFieldPathBuilder().Description().FieldPath(),
	})
}

func (b *filterCndBuilderDescription) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		PolicyTemplate_FieldPathValue: NewPolicyTemplateFieldPathBuilder().Description().WithValue(value),
	})
}

type filterCndBuilderSupportingDocs struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSupportingDocs) Eq(value []*document.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSupportingDocs) Neq(value []*document.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSupportingDocs) Gt(value []*document.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSupportingDocs) Gte(value []*document.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSupportingDocs) Lt(value []*document.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSupportingDocs) Lte(value []*document.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSupportingDocs) In(values [][]*document.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SupportingDocs().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSupportingDocs) NotIn(values [][]*document.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SupportingDocs().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSupportingDocs) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SupportingDocs().FieldPath(),
	})
}

func (b *filterCndBuilderSupportingDocs) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SupportingDocs().FieldPath(),
	})
}

func (b *filterCndBuilderSupportingDocs) Contains(value *document.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewPolicyTemplateFieldPathBuilder().SupportingDocs().FieldPath(),
		Value:     NewPolicyTemplateFieldPathBuilder().SupportingDocs().WithItemValue(value),
	})
}

func (b *filterCndBuilderSupportingDocs) ContainsAnyOf(values []*document.Reference) *FilterBuilder {
	pathSelector := NewPolicyTemplateFieldPathBuilder().SupportingDocs()
	itemValues := make([]PolicyTemplate_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewPolicyTemplateFieldPathBuilder().SupportingDocs().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSupportingDocs) ContainsAll(values []*document.Reference) *FilterBuilder {
	pathSelector := NewPolicyTemplateFieldPathBuilder().SupportingDocs()
	itemValues := make([]PolicyTemplate_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewPolicyTemplateFieldPathBuilder().SupportingDocs().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSupportingDocs) compare(op gotenfilter.CompareOperator, value []*document.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		PolicyTemplate_FieldPathValue: NewPolicyTemplateFieldPathBuilder().SupportingDocs().WithValue(value),
	})
}

type filterCndBuilderSpecTemplate struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplate) Eq(value *rcommon.PolicySpec) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplate) Neq(value *rcommon.PolicySpec) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplate) Gt(value *rcommon.PolicySpec) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplate) Gte(value *rcommon.PolicySpec) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplate) Lt(value *rcommon.PolicySpec) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplate) Lte(value *rcommon.PolicySpec) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplate) In(values []*rcommon.PolicySpec) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplate) NotIn(values []*rcommon.PolicySpec) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplate) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplate) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplate) compare(op gotenfilter.CompareOperator, value *rcommon.PolicySpec) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		PolicyTemplate_FieldPathValue: NewPolicyTemplateFieldPathBuilder().SpecTemplate().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplate) Enabled() *filterCndBuilderSpecTemplateEnabled {
	return &filterCndBuilderSpecTemplateEnabled{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplate) ProcessingLocation() *filterCndBuilderSpecTemplateProcessingLocation {
	return &filterCndBuilderSpecTemplateProcessingLocation{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplate) Notifications() *filterCndBuilderSpecTemplateNotifications {
	return &filterCndBuilderSpecTemplateNotifications{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplate) ResourceIdentity() *filterCndBuilderSpecTemplateResourceIdentity {
	return &filterCndBuilderSpecTemplateResourceIdentity{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplate) SupportingQueries() *filterCndBuilderSpecTemplateSupportingQueries {
	return &filterCndBuilderSpecTemplateSupportingQueries{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplate) AiAgent() *filterCndBuilderSpecTemplateAiAgent {
	return &filterCndBuilderSpecTemplateAiAgent{builder: b.builder}
}

type filterCndBuilderSpecTemplateEnabled struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateEnabled) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateEnabled) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateEnabled) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateEnabled) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateEnabled) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateEnabled) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateEnabled) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().Enabled().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateEnabled) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().Enabled().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateEnabled) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().Enabled().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateEnabled) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().Enabled().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateEnabled) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		PolicyTemplate_FieldPathValue: NewPolicyTemplateFieldPathBuilder().SpecTemplate().Enabled().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateProcessingLocation struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateProcessingLocation) Eq(value rcommon.PolicySpec_ProcessingLocation) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateProcessingLocation) Neq(value rcommon.PolicySpec_ProcessingLocation) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateProcessingLocation) Gt(value rcommon.PolicySpec_ProcessingLocation) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateProcessingLocation) Gte(value rcommon.PolicySpec_ProcessingLocation) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateProcessingLocation) Lt(value rcommon.PolicySpec_ProcessingLocation) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateProcessingLocation) Lte(value rcommon.PolicySpec_ProcessingLocation) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateProcessingLocation) In(values []rcommon.PolicySpec_ProcessingLocation) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().ProcessingLocation().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateProcessingLocation) NotIn(values []rcommon.PolicySpec_ProcessingLocation) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().ProcessingLocation().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateProcessingLocation) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().ProcessingLocation().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateProcessingLocation) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().ProcessingLocation().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateProcessingLocation) compare(op gotenfilter.CompareOperator, value rcommon.PolicySpec_ProcessingLocation) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		PolicyTemplate_FieldPathValue: NewPolicyTemplateFieldPathBuilder().SpecTemplate().ProcessingLocation().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateNotifications struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateNotifications) Eq(value []*rcommon.PolicySpec_Notification) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateNotifications) Neq(value []*rcommon.PolicySpec_Notification) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateNotifications) Gt(value []*rcommon.PolicySpec_Notification) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateNotifications) Gte(value []*rcommon.PolicySpec_Notification) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateNotifications) Lt(value []*rcommon.PolicySpec_Notification) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateNotifications) Lte(value []*rcommon.PolicySpec_Notification) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateNotifications) In(values [][]*rcommon.PolicySpec_Notification) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().Notifications().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateNotifications) NotIn(values [][]*rcommon.PolicySpec_Notification) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().Notifications().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateNotifications) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().Notifications().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateNotifications) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().Notifications().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateNotifications) Contains(value *rcommon.PolicySpec_Notification) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().Notifications().FieldPath(),
		Value:     NewPolicyTemplateFieldPathBuilder().SpecTemplate().Notifications().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateNotifications) ContainsAnyOf(values []*rcommon.PolicySpec_Notification) *FilterBuilder {
	pathSelector := NewPolicyTemplateFieldPathBuilder().SpecTemplate().Notifications()
	itemValues := make([]PolicyTemplate_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().Notifications().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateNotifications) ContainsAll(values []*rcommon.PolicySpec_Notification) *FilterBuilder {
	pathSelector := NewPolicyTemplateFieldPathBuilder().SpecTemplate().Notifications()
	itemValues := make([]PolicyTemplate_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().Notifications().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateNotifications) compare(op gotenfilter.CompareOperator, value []*rcommon.PolicySpec_Notification) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		PolicyTemplate_FieldPathValue: NewPolicyTemplateFieldPathBuilder().SpecTemplate().Notifications().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateNotifications) EnabledKinds() *filterCndBuilderSpecTemplateNotificationsEnabledKinds {
	return &filterCndBuilderSpecTemplateNotificationsEnabledKinds{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateNotifications) Channel() *filterCndBuilderSpecTemplateNotificationsChannel {
	return &filterCndBuilderSpecTemplateNotificationsChannel{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateNotifications) MaxAlertBodiesInMsg() *filterCndBuilderSpecTemplateNotificationsMaxAlertBodiesInMsg {
	return &filterCndBuilderSpecTemplateNotificationsMaxAlertBodiesInMsg{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateNotifications) PutOnlyAlertsCounterWhenOverflowing() *filterCndBuilderSpecTemplateNotificationsPutOnlyAlertsCounterWhenOverflowing {
	return &filterCndBuilderSpecTemplateNotificationsPutOnlyAlertsCounterWhenOverflowing{builder: b.builder}
}

type filterCndBuilderSpecTemplateNotificationsEnabledKinds struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateNotificationsEnabledKinds) Eq(value []rcommon.PolicySpec_Notification_Kind) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateNotificationsEnabledKinds) Neq(value []rcommon.PolicySpec_Notification_Kind) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateNotificationsEnabledKinds) Gt(value []rcommon.PolicySpec_Notification_Kind) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateNotificationsEnabledKinds) Gte(value []rcommon.PolicySpec_Notification_Kind) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateNotificationsEnabledKinds) Lt(value []rcommon.PolicySpec_Notification_Kind) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateNotificationsEnabledKinds) Lte(value []rcommon.PolicySpec_Notification_Kind) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateNotificationsEnabledKinds) In(values [][]rcommon.PolicySpec_Notification_Kind) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().Notifications().EnabledKinds().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateNotificationsEnabledKinds) NotIn(values [][]rcommon.PolicySpec_Notification_Kind) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().Notifications().EnabledKinds().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateNotificationsEnabledKinds) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().Notifications().EnabledKinds().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateNotificationsEnabledKinds) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().Notifications().EnabledKinds().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateNotificationsEnabledKinds) Contains(value rcommon.PolicySpec_Notification_Kind) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().Notifications().EnabledKinds().FieldPath(),
		Value:     NewPolicyTemplateFieldPathBuilder().SpecTemplate().Notifications().EnabledKinds().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateNotificationsEnabledKinds) ContainsAnyOf(values []rcommon.PolicySpec_Notification_Kind) *FilterBuilder {
	pathSelector := NewPolicyTemplateFieldPathBuilder().SpecTemplate().Notifications().EnabledKinds()
	itemValues := make([]PolicyTemplate_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().Notifications().EnabledKinds().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateNotificationsEnabledKinds) ContainsAll(values []rcommon.PolicySpec_Notification_Kind) *FilterBuilder {
	pathSelector := NewPolicyTemplateFieldPathBuilder().SpecTemplate().Notifications().EnabledKinds()
	itemValues := make([]PolicyTemplate_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().Notifications().EnabledKinds().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateNotificationsEnabledKinds) compare(op gotenfilter.CompareOperator, value []rcommon.PolicySpec_Notification_Kind) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		PolicyTemplate_FieldPathValue: NewPolicyTemplateFieldPathBuilder().SpecTemplate().Notifications().EnabledKinds().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateNotificationsChannel struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateNotificationsChannel) Eq(value *notification_channel.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateNotificationsChannel) Neq(value *notification_channel.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateNotificationsChannel) Gt(value *notification_channel.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateNotificationsChannel) Gte(value *notification_channel.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateNotificationsChannel) Lt(value *notification_channel.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateNotificationsChannel) Lte(value *notification_channel.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateNotificationsChannel) In(values []*notification_channel.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().Notifications().Channel().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateNotificationsChannel) NotIn(values []*notification_channel.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().Notifications().Channel().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateNotificationsChannel) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().Notifications().Channel().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateNotificationsChannel) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().Notifications().Channel().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateNotificationsChannel) compare(op gotenfilter.CompareOperator, value *notification_channel.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		PolicyTemplate_FieldPathValue: NewPolicyTemplateFieldPathBuilder().SpecTemplate().Notifications().Channel().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateNotificationsMaxAlertBodiesInMsg struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateNotificationsMaxAlertBodiesInMsg) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateNotificationsMaxAlertBodiesInMsg) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateNotificationsMaxAlertBodiesInMsg) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateNotificationsMaxAlertBodiesInMsg) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateNotificationsMaxAlertBodiesInMsg) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateNotificationsMaxAlertBodiesInMsg) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateNotificationsMaxAlertBodiesInMsg) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().Notifications().MaxAlertBodiesInMsg().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateNotificationsMaxAlertBodiesInMsg) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().Notifications().MaxAlertBodiesInMsg().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateNotificationsMaxAlertBodiesInMsg) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().Notifications().MaxAlertBodiesInMsg().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateNotificationsMaxAlertBodiesInMsg) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().Notifications().MaxAlertBodiesInMsg().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateNotificationsMaxAlertBodiesInMsg) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		PolicyTemplate_FieldPathValue: NewPolicyTemplateFieldPathBuilder().SpecTemplate().Notifications().MaxAlertBodiesInMsg().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateNotificationsPutOnlyAlertsCounterWhenOverflowing struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateNotificationsPutOnlyAlertsCounterWhenOverflowing) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateNotificationsPutOnlyAlertsCounterWhenOverflowing) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateNotificationsPutOnlyAlertsCounterWhenOverflowing) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateNotificationsPutOnlyAlertsCounterWhenOverflowing) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateNotificationsPutOnlyAlertsCounterWhenOverflowing) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateNotificationsPutOnlyAlertsCounterWhenOverflowing) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateNotificationsPutOnlyAlertsCounterWhenOverflowing) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().Notifications().PutOnlyAlertsCounterWhenOverflowing().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateNotificationsPutOnlyAlertsCounterWhenOverflowing) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().Notifications().PutOnlyAlertsCounterWhenOverflowing().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateNotificationsPutOnlyAlertsCounterWhenOverflowing) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().Notifications().PutOnlyAlertsCounterWhenOverflowing().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateNotificationsPutOnlyAlertsCounterWhenOverflowing) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().Notifications().PutOnlyAlertsCounterWhenOverflowing().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateNotificationsPutOnlyAlertsCounterWhenOverflowing) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		PolicyTemplate_FieldPathValue: NewPolicyTemplateFieldPathBuilder().SpecTemplate().Notifications().PutOnlyAlertsCounterWhenOverflowing().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateResourceIdentity struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateResourceIdentity) Eq(value *rcommon.PolicySpec_ResourceIdentity) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateResourceIdentity) Neq(value *rcommon.PolicySpec_ResourceIdentity) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateResourceIdentity) Gt(value *rcommon.PolicySpec_ResourceIdentity) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateResourceIdentity) Gte(value *rcommon.PolicySpec_ResourceIdentity) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateResourceIdentity) Lt(value *rcommon.PolicySpec_ResourceIdentity) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateResourceIdentity) Lte(value *rcommon.PolicySpec_ResourceIdentity) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateResourceIdentity) In(values []*rcommon.PolicySpec_ResourceIdentity) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().ResourceIdentity().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateResourceIdentity) NotIn(values []*rcommon.PolicySpec_ResourceIdentity) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().ResourceIdentity().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateResourceIdentity) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().ResourceIdentity().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateResourceIdentity) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().ResourceIdentity().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateResourceIdentity) compare(op gotenfilter.CompareOperator, value *rcommon.PolicySpec_ResourceIdentity) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		PolicyTemplate_FieldPathValue: NewPolicyTemplateFieldPathBuilder().SpecTemplate().ResourceIdentity().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateResourceIdentity) AlertingResource() *filterCndBuilderSpecTemplateResourceIdentityAlertingResource {
	return &filterCndBuilderSpecTemplateResourceIdentityAlertingResource{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateResourceIdentity) Labels() *filterCndBuilderSpecTemplateResourceIdentityLabels {
	return &filterCndBuilderSpecTemplateResourceIdentityLabels{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateResourceIdentity) NamePatterns() *filterCndBuilderSpecTemplateResourceIdentityNamePatterns {
	return &filterCndBuilderSpecTemplateResourceIdentityNamePatterns{builder: b.builder}
}

type filterCndBuilderSpecTemplateResourceIdentityAlertingResource struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateResourceIdentityAlertingResource) Eq(value *meta_resource.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateResourceIdentityAlertingResource) Neq(value *meta_resource.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateResourceIdentityAlertingResource) Gt(value *meta_resource.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateResourceIdentityAlertingResource) Gte(value *meta_resource.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateResourceIdentityAlertingResource) Lt(value *meta_resource.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateResourceIdentityAlertingResource) Lte(value *meta_resource.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateResourceIdentityAlertingResource) In(values []*meta_resource.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().ResourceIdentity().AlertingResource().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateResourceIdentityAlertingResource) NotIn(values []*meta_resource.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().ResourceIdentity().AlertingResource().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateResourceIdentityAlertingResource) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().ResourceIdentity().AlertingResource().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateResourceIdentityAlertingResource) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().ResourceIdentity().AlertingResource().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateResourceIdentityAlertingResource) compare(op gotenfilter.CompareOperator, value *meta_resource.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		PolicyTemplate_FieldPathValue: NewPolicyTemplateFieldPathBuilder().SpecTemplate().ResourceIdentity().AlertingResource().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateResourceIdentityLabels struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateResourceIdentityLabels) Eq(value []*rcommon.PolicySpec_ResourceIdentity_LabelInfo) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateResourceIdentityLabels) Neq(value []*rcommon.PolicySpec_ResourceIdentity_LabelInfo) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateResourceIdentityLabels) Gt(value []*rcommon.PolicySpec_ResourceIdentity_LabelInfo) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateResourceIdentityLabels) Gte(value []*rcommon.PolicySpec_ResourceIdentity_LabelInfo) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateResourceIdentityLabels) Lt(value []*rcommon.PolicySpec_ResourceIdentity_LabelInfo) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateResourceIdentityLabels) Lte(value []*rcommon.PolicySpec_ResourceIdentity_LabelInfo) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateResourceIdentityLabels) In(values [][]*rcommon.PolicySpec_ResourceIdentity_LabelInfo) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().ResourceIdentity().Labels().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateResourceIdentityLabels) NotIn(values [][]*rcommon.PolicySpec_ResourceIdentity_LabelInfo) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().ResourceIdentity().Labels().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateResourceIdentityLabels) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().ResourceIdentity().Labels().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateResourceIdentityLabels) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().ResourceIdentity().Labels().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateResourceIdentityLabels) Contains(value *rcommon.PolicySpec_ResourceIdentity_LabelInfo) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().ResourceIdentity().Labels().FieldPath(),
		Value:     NewPolicyTemplateFieldPathBuilder().SpecTemplate().ResourceIdentity().Labels().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateResourceIdentityLabels) ContainsAnyOf(values []*rcommon.PolicySpec_ResourceIdentity_LabelInfo) *FilterBuilder {
	pathSelector := NewPolicyTemplateFieldPathBuilder().SpecTemplate().ResourceIdentity().Labels()
	itemValues := make([]PolicyTemplate_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().ResourceIdentity().Labels().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateResourceIdentityLabels) ContainsAll(values []*rcommon.PolicySpec_ResourceIdentity_LabelInfo) *FilterBuilder {
	pathSelector := NewPolicyTemplateFieldPathBuilder().SpecTemplate().ResourceIdentity().Labels()
	itemValues := make([]PolicyTemplate_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().ResourceIdentity().Labels().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateResourceIdentityLabels) compare(op gotenfilter.CompareOperator, value []*rcommon.PolicySpec_ResourceIdentity_LabelInfo) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		PolicyTemplate_FieldPathValue: NewPolicyTemplateFieldPathBuilder().SpecTemplate().ResourceIdentity().Labels().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateResourceIdentityLabels) Key() *filterCndBuilderSpecTemplateResourceIdentityLabelsKey {
	return &filterCndBuilderSpecTemplateResourceIdentityLabelsKey{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateResourceIdentityLabels) Contexts() *filterCndBuilderSpecTemplateResourceIdentityLabelsContexts {
	return &filterCndBuilderSpecTemplateResourceIdentityLabelsContexts{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateResourceIdentityLabels) MappedNameSegment() *filterCndBuilderSpecTemplateResourceIdentityLabelsMappedNameSegment {
	return &filterCndBuilderSpecTemplateResourceIdentityLabelsMappedNameSegment{builder: b.builder}
}

type filterCndBuilderSpecTemplateResourceIdentityLabelsKey struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateResourceIdentityLabelsKey) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateResourceIdentityLabelsKey) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateResourceIdentityLabelsKey) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateResourceIdentityLabelsKey) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateResourceIdentityLabelsKey) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateResourceIdentityLabelsKey) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateResourceIdentityLabelsKey) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().ResourceIdentity().Labels().Key().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateResourceIdentityLabelsKey) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().ResourceIdentity().Labels().Key().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateResourceIdentityLabelsKey) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().ResourceIdentity().Labels().Key().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateResourceIdentityLabelsKey) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().ResourceIdentity().Labels().Key().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateResourceIdentityLabelsKey) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		PolicyTemplate_FieldPathValue: NewPolicyTemplateFieldPathBuilder().SpecTemplate().ResourceIdentity().Labels().Key().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateResourceIdentityLabelsContexts struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateResourceIdentityLabelsContexts) Eq(value []rcommon.PolicySpec_ResourceIdentity_LabelInfo_UsageContext) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateResourceIdentityLabelsContexts) Neq(value []rcommon.PolicySpec_ResourceIdentity_LabelInfo_UsageContext) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateResourceIdentityLabelsContexts) Gt(value []rcommon.PolicySpec_ResourceIdentity_LabelInfo_UsageContext) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateResourceIdentityLabelsContexts) Gte(value []rcommon.PolicySpec_ResourceIdentity_LabelInfo_UsageContext) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateResourceIdentityLabelsContexts) Lt(value []rcommon.PolicySpec_ResourceIdentity_LabelInfo_UsageContext) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateResourceIdentityLabelsContexts) Lte(value []rcommon.PolicySpec_ResourceIdentity_LabelInfo_UsageContext) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateResourceIdentityLabelsContexts) In(values [][]rcommon.PolicySpec_ResourceIdentity_LabelInfo_UsageContext) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().ResourceIdentity().Labels().Contexts().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateResourceIdentityLabelsContexts) NotIn(values [][]rcommon.PolicySpec_ResourceIdentity_LabelInfo_UsageContext) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().ResourceIdentity().Labels().Contexts().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateResourceIdentityLabelsContexts) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().ResourceIdentity().Labels().Contexts().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateResourceIdentityLabelsContexts) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().ResourceIdentity().Labels().Contexts().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateResourceIdentityLabelsContexts) Contains(value rcommon.PolicySpec_ResourceIdentity_LabelInfo_UsageContext) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().ResourceIdentity().Labels().Contexts().FieldPath(),
		Value:     NewPolicyTemplateFieldPathBuilder().SpecTemplate().ResourceIdentity().Labels().Contexts().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateResourceIdentityLabelsContexts) ContainsAnyOf(values []rcommon.PolicySpec_ResourceIdentity_LabelInfo_UsageContext) *FilterBuilder {
	pathSelector := NewPolicyTemplateFieldPathBuilder().SpecTemplate().ResourceIdentity().Labels().Contexts()
	itemValues := make([]PolicyTemplate_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().ResourceIdentity().Labels().Contexts().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateResourceIdentityLabelsContexts) ContainsAll(values []rcommon.PolicySpec_ResourceIdentity_LabelInfo_UsageContext) *FilterBuilder {
	pathSelector := NewPolicyTemplateFieldPathBuilder().SpecTemplate().ResourceIdentity().Labels().Contexts()
	itemValues := make([]PolicyTemplate_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().ResourceIdentity().Labels().Contexts().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateResourceIdentityLabelsContexts) compare(op gotenfilter.CompareOperator, value []rcommon.PolicySpec_ResourceIdentity_LabelInfo_UsageContext) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		PolicyTemplate_FieldPathValue: NewPolicyTemplateFieldPathBuilder().SpecTemplate().ResourceIdentity().Labels().Contexts().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateResourceIdentityLabelsMappedNameSegment struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateResourceIdentityLabelsMappedNameSegment) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateResourceIdentityLabelsMappedNameSegment) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateResourceIdentityLabelsMappedNameSegment) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateResourceIdentityLabelsMappedNameSegment) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateResourceIdentityLabelsMappedNameSegment) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateResourceIdentityLabelsMappedNameSegment) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateResourceIdentityLabelsMappedNameSegment) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().ResourceIdentity().Labels().MappedNameSegment().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateResourceIdentityLabelsMappedNameSegment) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().ResourceIdentity().Labels().MappedNameSegment().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateResourceIdentityLabelsMappedNameSegment) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().ResourceIdentity().Labels().MappedNameSegment().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateResourceIdentityLabelsMappedNameSegment) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().ResourceIdentity().Labels().MappedNameSegment().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateResourceIdentityLabelsMappedNameSegment) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		PolicyTemplate_FieldPathValue: NewPolicyTemplateFieldPathBuilder().SpecTemplate().ResourceIdentity().Labels().MappedNameSegment().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateResourceIdentityNamePatterns struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateResourceIdentityNamePatterns) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateResourceIdentityNamePatterns) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateResourceIdentityNamePatterns) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateResourceIdentityNamePatterns) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateResourceIdentityNamePatterns) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateResourceIdentityNamePatterns) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateResourceIdentityNamePatterns) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().ResourceIdentity().NamePatterns().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateResourceIdentityNamePatterns) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().ResourceIdentity().NamePatterns().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateResourceIdentityNamePatterns) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().ResourceIdentity().NamePatterns().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateResourceIdentityNamePatterns) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().ResourceIdentity().NamePatterns().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateResourceIdentityNamePatterns) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().ResourceIdentity().NamePatterns().FieldPath(),
		Value:     NewPolicyTemplateFieldPathBuilder().SpecTemplate().ResourceIdentity().NamePatterns().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateResourceIdentityNamePatterns) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewPolicyTemplateFieldPathBuilder().SpecTemplate().ResourceIdentity().NamePatterns()
	itemValues := make([]PolicyTemplate_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().ResourceIdentity().NamePatterns().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateResourceIdentityNamePatterns) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewPolicyTemplateFieldPathBuilder().SpecTemplate().ResourceIdentity().NamePatterns()
	itemValues := make([]PolicyTemplate_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().ResourceIdentity().NamePatterns().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateResourceIdentityNamePatterns) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		PolicyTemplate_FieldPathValue: NewPolicyTemplateFieldPathBuilder().SpecTemplate().ResourceIdentity().NamePatterns().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSupportingQueries struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSupportingQueries) Eq(value []*rcommon.PolicySpec_SupportingAlertQuery) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueries) Neq(value []*rcommon.PolicySpec_SupportingAlertQuery) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueries) Gt(value []*rcommon.PolicySpec_SupportingAlertQuery) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueries) Gte(value []*rcommon.PolicySpec_SupportingAlertQuery) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueries) Lt(value []*rcommon.PolicySpec_SupportingAlertQuery) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueries) Lte(value []*rcommon.PolicySpec_SupportingAlertQuery) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueries) In(values [][]*rcommon.PolicySpec_SupportingAlertQuery) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueries) NotIn(values [][]*rcommon.PolicySpec_SupportingAlertQuery) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueries) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueries) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueries) Contains(value *rcommon.PolicySpec_SupportingAlertQuery) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().FieldPath(),
		Value:     NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueries) ContainsAnyOf(values []*rcommon.PolicySpec_SupportingAlertQuery) *FilterBuilder {
	pathSelector := NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries()
	itemValues := make([]PolicyTemplate_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueries) ContainsAll(values []*rcommon.PolicySpec_SupportingAlertQuery) *FilterBuilder {
	pathSelector := NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries()
	itemValues := make([]PolicyTemplate_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueries) compare(op gotenfilter.CompareOperator, value []*rcommon.PolicySpec_SupportingAlertQuery) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		PolicyTemplate_FieldPathValue: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueries) TsQuery() *filterCndBuilderSpecTemplateSupportingQueriesTsQuery {
	return &filterCndBuilderSpecTemplateSupportingQueriesTsQuery{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSupportingQueries) LogQuery() *filterCndBuilderSpecTemplateSupportingQueriesLogQuery {
	return &filterCndBuilderSpecTemplateSupportingQueriesLogQuery{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSupportingQueries) RestGetQuery() *filterCndBuilderSpecTemplateSupportingQueriesRestGetQuery {
	return &filterCndBuilderSpecTemplateSupportingQueriesRestGetQuery{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSupportingQueries) RestListQuery() *filterCndBuilderSpecTemplateSupportingQueriesRestListQuery {
	return &filterCndBuilderSpecTemplateSupportingQueriesRestListQuery{builder: b.builder}
}

type filterCndBuilderSpecTemplateSupportingQueriesTsQuery struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQuery) Eq(value *rcommon.PolicySpec_SupportingAlertQuery_TsQuery) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQuery) Neq(value *rcommon.PolicySpec_SupportingAlertQuery_TsQuery) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQuery) Gt(value *rcommon.PolicySpec_SupportingAlertQuery_TsQuery) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQuery) Gte(value *rcommon.PolicySpec_SupportingAlertQuery_TsQuery) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQuery) Lt(value *rcommon.PolicySpec_SupportingAlertQuery_TsQuery) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQuery) Lte(value *rcommon.PolicySpec_SupportingAlertQuery_TsQuery) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQuery) In(values []*rcommon.PolicySpec_SupportingAlertQuery_TsQuery) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().TsQuery().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQuery) NotIn(values []*rcommon.PolicySpec_SupportingAlertQuery_TsQuery) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().TsQuery().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQuery) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().TsQuery().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQuery) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().TsQuery().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQuery) compare(op gotenfilter.CompareOperator, value *rcommon.PolicySpec_SupportingAlertQuery_TsQuery) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		PolicyTemplate_FieldPathValue: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().TsQuery().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQuery) Description() *filterCndBuilderSpecTemplateSupportingQueriesTsQueryDescription {
	return &filterCndBuilderSpecTemplateSupportingQueriesTsQueryDescription{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQuery) FilterTemplate() *filterCndBuilderSpecTemplateSupportingQueriesTsQueryFilterTemplate {
	return &filterCndBuilderSpecTemplateSupportingQueriesTsQueryFilterTemplate{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQuery) Aggregation() *filterCndBuilderSpecTemplateSupportingQueriesTsQueryAggregation {
	return &filterCndBuilderSpecTemplateSupportingQueriesTsQueryAggregation{builder: b.builder}
}

type filterCndBuilderSpecTemplateSupportingQueriesTsQueryDescription struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQueryDescription) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQueryDescription) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQueryDescription) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQueryDescription) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQueryDescription) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQueryDescription) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQueryDescription) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().TsQuery().Description().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQueryDescription) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().TsQuery().Description().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQueryDescription) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().TsQuery().Description().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQueryDescription) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().TsQuery().Description().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQueryDescription) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		PolicyTemplate_FieldPathValue: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().TsQuery().Description().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSupportingQueriesTsQueryFilterTemplate struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQueryFilterTemplate) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQueryFilterTemplate) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQueryFilterTemplate) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQueryFilterTemplate) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQueryFilterTemplate) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQueryFilterTemplate) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQueryFilterTemplate) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().TsQuery().FilterTemplate().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQueryFilterTemplate) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().TsQuery().FilterTemplate().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQueryFilterTemplate) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().TsQuery().FilterTemplate().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQueryFilterTemplate) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().TsQuery().FilterTemplate().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQueryFilterTemplate) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		PolicyTemplate_FieldPathValue: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().TsQuery().FilterTemplate().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSupportingQueriesTsQueryAggregation struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQueryAggregation) Eq(value *monitoring_common.Aggregation) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQueryAggregation) Neq(value *monitoring_common.Aggregation) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQueryAggregation) Gt(value *monitoring_common.Aggregation) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQueryAggregation) Gte(value *monitoring_common.Aggregation) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQueryAggregation) Lt(value *monitoring_common.Aggregation) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQueryAggregation) Lte(value *monitoring_common.Aggregation) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQueryAggregation) In(values []*monitoring_common.Aggregation) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().TsQuery().Aggregation().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQueryAggregation) NotIn(values []*monitoring_common.Aggregation) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().TsQuery().Aggregation().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQueryAggregation) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().TsQuery().Aggregation().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQueryAggregation) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().TsQuery().Aggregation().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQueryAggregation) compare(op gotenfilter.CompareOperator, value *monitoring_common.Aggregation) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		PolicyTemplate_FieldPathValue: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().TsQuery().Aggregation().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQueryAggregation) AlignmentPeriod() *filterCndBuilderSpecTemplateSupportingQueriesTsQueryAggregationAlignmentPeriod {
	return &filterCndBuilderSpecTemplateSupportingQueriesTsQueryAggregationAlignmentPeriod{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQueryAggregation) PerSeriesAligner() *filterCndBuilderSpecTemplateSupportingQueriesTsQueryAggregationPerSeriesAligner {
	return &filterCndBuilderSpecTemplateSupportingQueriesTsQueryAggregationPerSeriesAligner{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQueryAggregation) CrossSeriesReducer() *filterCndBuilderSpecTemplateSupportingQueriesTsQueryAggregationCrossSeriesReducer {
	return &filterCndBuilderSpecTemplateSupportingQueriesTsQueryAggregationCrossSeriesReducer{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQueryAggregation) GroupByFields() *filterCndBuilderSpecTemplateSupportingQueriesTsQueryAggregationGroupByFields {
	return &filterCndBuilderSpecTemplateSupportingQueriesTsQueryAggregationGroupByFields{builder: b.builder}
}

type filterCndBuilderSpecTemplateSupportingQueriesTsQueryAggregationAlignmentPeriod struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQueryAggregationAlignmentPeriod) Eq(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQueryAggregationAlignmentPeriod) Neq(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQueryAggregationAlignmentPeriod) Gt(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQueryAggregationAlignmentPeriod) Gte(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQueryAggregationAlignmentPeriod) Lt(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQueryAggregationAlignmentPeriod) Lte(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQueryAggregationAlignmentPeriod) In(values []*durationpb.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().TsQuery().Aggregation().AlignmentPeriod().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQueryAggregationAlignmentPeriod) NotIn(values []*durationpb.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().TsQuery().Aggregation().AlignmentPeriod().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQueryAggregationAlignmentPeriod) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().TsQuery().Aggregation().AlignmentPeriod().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQueryAggregationAlignmentPeriod) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().TsQuery().Aggregation().AlignmentPeriod().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQueryAggregationAlignmentPeriod) compare(op gotenfilter.CompareOperator, value *durationpb.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		PolicyTemplate_FieldPathValue: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().TsQuery().Aggregation().AlignmentPeriod().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSupportingQueriesTsQueryAggregationPerSeriesAligner struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQueryAggregationPerSeriesAligner) Eq(value monitoring_common.Aggregation_Aligner) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQueryAggregationPerSeriesAligner) Neq(value monitoring_common.Aggregation_Aligner) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQueryAggregationPerSeriesAligner) Gt(value monitoring_common.Aggregation_Aligner) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQueryAggregationPerSeriesAligner) Gte(value monitoring_common.Aggregation_Aligner) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQueryAggregationPerSeriesAligner) Lt(value monitoring_common.Aggregation_Aligner) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQueryAggregationPerSeriesAligner) Lte(value monitoring_common.Aggregation_Aligner) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQueryAggregationPerSeriesAligner) In(values []monitoring_common.Aggregation_Aligner) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().TsQuery().Aggregation().PerSeriesAligner().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQueryAggregationPerSeriesAligner) NotIn(values []monitoring_common.Aggregation_Aligner) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().TsQuery().Aggregation().PerSeriesAligner().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQueryAggregationPerSeriesAligner) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().TsQuery().Aggregation().PerSeriesAligner().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQueryAggregationPerSeriesAligner) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().TsQuery().Aggregation().PerSeriesAligner().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQueryAggregationPerSeriesAligner) compare(op gotenfilter.CompareOperator, value monitoring_common.Aggregation_Aligner) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		PolicyTemplate_FieldPathValue: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().TsQuery().Aggregation().PerSeriesAligner().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSupportingQueriesTsQueryAggregationCrossSeriesReducer struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQueryAggregationCrossSeriesReducer) Eq(value monitoring_common.Aggregation_Reducer) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQueryAggregationCrossSeriesReducer) Neq(value monitoring_common.Aggregation_Reducer) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQueryAggregationCrossSeriesReducer) Gt(value monitoring_common.Aggregation_Reducer) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQueryAggregationCrossSeriesReducer) Gte(value monitoring_common.Aggregation_Reducer) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQueryAggregationCrossSeriesReducer) Lt(value monitoring_common.Aggregation_Reducer) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQueryAggregationCrossSeriesReducer) Lte(value monitoring_common.Aggregation_Reducer) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQueryAggregationCrossSeriesReducer) In(values []monitoring_common.Aggregation_Reducer) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().TsQuery().Aggregation().CrossSeriesReducer().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQueryAggregationCrossSeriesReducer) NotIn(values []monitoring_common.Aggregation_Reducer) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().TsQuery().Aggregation().CrossSeriesReducer().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQueryAggregationCrossSeriesReducer) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().TsQuery().Aggregation().CrossSeriesReducer().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQueryAggregationCrossSeriesReducer) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().TsQuery().Aggregation().CrossSeriesReducer().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQueryAggregationCrossSeriesReducer) compare(op gotenfilter.CompareOperator, value monitoring_common.Aggregation_Reducer) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		PolicyTemplate_FieldPathValue: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().TsQuery().Aggregation().CrossSeriesReducer().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSupportingQueriesTsQueryAggregationGroupByFields struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQueryAggregationGroupByFields) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQueryAggregationGroupByFields) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQueryAggregationGroupByFields) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQueryAggregationGroupByFields) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQueryAggregationGroupByFields) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQueryAggregationGroupByFields) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQueryAggregationGroupByFields) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().TsQuery().Aggregation().GroupByFields().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQueryAggregationGroupByFields) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().TsQuery().Aggregation().GroupByFields().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQueryAggregationGroupByFields) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().TsQuery().Aggregation().GroupByFields().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQueryAggregationGroupByFields) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().TsQuery().Aggregation().GroupByFields().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQueryAggregationGroupByFields) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().TsQuery().Aggregation().GroupByFields().FieldPath(),
		Value:     NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().TsQuery().Aggregation().GroupByFields().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQueryAggregationGroupByFields) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().TsQuery().Aggregation().GroupByFields()
	itemValues := make([]PolicyTemplate_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().TsQuery().Aggregation().GroupByFields().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQueryAggregationGroupByFields) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().TsQuery().Aggregation().GroupByFields()
	itemValues := make([]PolicyTemplate_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().TsQuery().Aggregation().GroupByFields().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesTsQueryAggregationGroupByFields) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		PolicyTemplate_FieldPathValue: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().TsQuery().Aggregation().GroupByFields().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSupportingQueriesLogQuery struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesLogQuery) Eq(value *rcommon.PolicySpec_SupportingAlertQuery_LogQuery) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesLogQuery) Neq(value *rcommon.PolicySpec_SupportingAlertQuery_LogQuery) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesLogQuery) Gt(value *rcommon.PolicySpec_SupportingAlertQuery_LogQuery) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesLogQuery) Gte(value *rcommon.PolicySpec_SupportingAlertQuery_LogQuery) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesLogQuery) Lt(value *rcommon.PolicySpec_SupportingAlertQuery_LogQuery) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesLogQuery) Lte(value *rcommon.PolicySpec_SupportingAlertQuery_LogQuery) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesLogQuery) In(values []*rcommon.PolicySpec_SupportingAlertQuery_LogQuery) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().LogQuery().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesLogQuery) NotIn(values []*rcommon.PolicySpec_SupportingAlertQuery_LogQuery) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().LogQuery().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesLogQuery) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().LogQuery().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesLogQuery) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().LogQuery().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesLogQuery) compare(op gotenfilter.CompareOperator, value *rcommon.PolicySpec_SupportingAlertQuery_LogQuery) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		PolicyTemplate_FieldPathValue: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().LogQuery().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesLogQuery) Description() *filterCndBuilderSpecTemplateSupportingQueriesLogQueryDescription {
	return &filterCndBuilderSpecTemplateSupportingQueriesLogQueryDescription{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesLogQuery) FilterTemplate() *filterCndBuilderSpecTemplateSupportingQueriesLogQueryFilterTemplate {
	return &filterCndBuilderSpecTemplateSupportingQueriesLogQueryFilterTemplate{builder: b.builder}
}

type filterCndBuilderSpecTemplateSupportingQueriesLogQueryDescription struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesLogQueryDescription) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesLogQueryDescription) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesLogQueryDescription) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesLogQueryDescription) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesLogQueryDescription) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesLogQueryDescription) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesLogQueryDescription) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().LogQuery().Description().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesLogQueryDescription) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().LogQuery().Description().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesLogQueryDescription) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().LogQuery().Description().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesLogQueryDescription) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().LogQuery().Description().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesLogQueryDescription) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		PolicyTemplate_FieldPathValue: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().LogQuery().Description().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSupportingQueriesLogQueryFilterTemplate struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesLogQueryFilterTemplate) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesLogQueryFilterTemplate) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesLogQueryFilterTemplate) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesLogQueryFilterTemplate) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesLogQueryFilterTemplate) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesLogQueryFilterTemplate) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesLogQueryFilterTemplate) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().LogQuery().FilterTemplate().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesLogQueryFilterTemplate) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().LogQuery().FilterTemplate().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesLogQueryFilterTemplate) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().LogQuery().FilterTemplate().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesLogQueryFilterTemplate) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().LogQuery().FilterTemplate().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesLogQueryFilterTemplate) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		PolicyTemplate_FieldPathValue: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().LogQuery().FilterTemplate().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSupportingQueriesRestGetQuery struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestGetQuery) Eq(value *rcommon.PolicySpec_SupportingAlertQuery_RestGetQuery) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestGetQuery) Neq(value *rcommon.PolicySpec_SupportingAlertQuery_RestGetQuery) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestGetQuery) Gt(value *rcommon.PolicySpec_SupportingAlertQuery_RestGetQuery) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestGetQuery) Gte(value *rcommon.PolicySpec_SupportingAlertQuery_RestGetQuery) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestGetQuery) Lt(value *rcommon.PolicySpec_SupportingAlertQuery_RestGetQuery) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestGetQuery) Lte(value *rcommon.PolicySpec_SupportingAlertQuery_RestGetQuery) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestGetQuery) In(values []*rcommon.PolicySpec_SupportingAlertQuery_RestGetQuery) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().RestGetQuery().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestGetQuery) NotIn(values []*rcommon.PolicySpec_SupportingAlertQuery_RestGetQuery) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().RestGetQuery().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestGetQuery) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().RestGetQuery().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestGetQuery) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().RestGetQuery().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestGetQuery) compare(op gotenfilter.CompareOperator, value *rcommon.PolicySpec_SupportingAlertQuery_RestGetQuery) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		PolicyTemplate_FieldPathValue: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().RestGetQuery().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestGetQuery) Description() *filterCndBuilderSpecTemplateSupportingQueriesRestGetQueryDescription {
	return &filterCndBuilderSpecTemplateSupportingQueriesRestGetQueryDescription{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestGetQuery) Endpoint() *filterCndBuilderSpecTemplateSupportingQueriesRestGetQueryEndpoint {
	return &filterCndBuilderSpecTemplateSupportingQueriesRestGetQueryEndpoint{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestGetQuery) PathTemplate() *filterCndBuilderSpecTemplateSupportingQueriesRestGetQueryPathTemplate {
	return &filterCndBuilderSpecTemplateSupportingQueriesRestGetQueryPathTemplate{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestGetQuery) View() *filterCndBuilderSpecTemplateSupportingQueriesRestGetQueryView {
	return &filterCndBuilderSpecTemplateSupportingQueriesRestGetQueryView{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestGetQuery) FieldMask() *filterCndBuilderSpecTemplateSupportingQueriesRestGetQueryFieldMask {
	return &filterCndBuilderSpecTemplateSupportingQueriesRestGetQueryFieldMask{builder: b.builder}
}

type filterCndBuilderSpecTemplateSupportingQueriesRestGetQueryDescription struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestGetQueryDescription) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestGetQueryDescription) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestGetQueryDescription) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestGetQueryDescription) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestGetQueryDescription) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestGetQueryDescription) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestGetQueryDescription) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().RestGetQuery().Description().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestGetQueryDescription) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().RestGetQuery().Description().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestGetQueryDescription) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().RestGetQuery().Description().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestGetQueryDescription) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().RestGetQuery().Description().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestGetQueryDescription) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		PolicyTemplate_FieldPathValue: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().RestGetQuery().Description().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSupportingQueriesRestGetQueryEndpoint struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestGetQueryEndpoint) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestGetQueryEndpoint) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestGetQueryEndpoint) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestGetQueryEndpoint) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestGetQueryEndpoint) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestGetQueryEndpoint) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestGetQueryEndpoint) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().RestGetQuery().Endpoint().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestGetQueryEndpoint) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().RestGetQuery().Endpoint().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestGetQueryEndpoint) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().RestGetQuery().Endpoint().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestGetQueryEndpoint) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().RestGetQuery().Endpoint().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestGetQueryEndpoint) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		PolicyTemplate_FieldPathValue: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().RestGetQuery().Endpoint().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSupportingQueriesRestGetQueryPathTemplate struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestGetQueryPathTemplate) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestGetQueryPathTemplate) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestGetQueryPathTemplate) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestGetQueryPathTemplate) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestGetQueryPathTemplate) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestGetQueryPathTemplate) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestGetQueryPathTemplate) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().RestGetQuery().PathTemplate().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestGetQueryPathTemplate) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().RestGetQuery().PathTemplate().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestGetQueryPathTemplate) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().RestGetQuery().PathTemplate().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestGetQueryPathTemplate) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().RestGetQuery().PathTemplate().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestGetQueryPathTemplate) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		PolicyTemplate_FieldPathValue: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().RestGetQuery().PathTemplate().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSupportingQueriesRestGetQueryView struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestGetQueryView) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestGetQueryView) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestGetQueryView) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestGetQueryView) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestGetQueryView) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestGetQueryView) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestGetQueryView) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().RestGetQuery().View().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestGetQueryView) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().RestGetQuery().View().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestGetQueryView) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().RestGetQuery().View().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestGetQueryView) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().RestGetQuery().View().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestGetQueryView) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		PolicyTemplate_FieldPathValue: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().RestGetQuery().View().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSupportingQueriesRestGetQueryFieldMask struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestGetQueryFieldMask) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestGetQueryFieldMask) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestGetQueryFieldMask) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestGetQueryFieldMask) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestGetQueryFieldMask) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestGetQueryFieldMask) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestGetQueryFieldMask) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().RestGetQuery().FieldMask().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestGetQueryFieldMask) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().RestGetQuery().FieldMask().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestGetQueryFieldMask) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().RestGetQuery().FieldMask().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestGetQueryFieldMask) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().RestGetQuery().FieldMask().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestGetQueryFieldMask) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		PolicyTemplate_FieldPathValue: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().RestGetQuery().FieldMask().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSupportingQueriesRestListQuery struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestListQuery) Eq(value *rcommon.PolicySpec_SupportingAlertQuery_RestListQuery) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestListQuery) Neq(value *rcommon.PolicySpec_SupportingAlertQuery_RestListQuery) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestListQuery) Gt(value *rcommon.PolicySpec_SupportingAlertQuery_RestListQuery) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestListQuery) Gte(value *rcommon.PolicySpec_SupportingAlertQuery_RestListQuery) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestListQuery) Lt(value *rcommon.PolicySpec_SupportingAlertQuery_RestListQuery) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestListQuery) Lte(value *rcommon.PolicySpec_SupportingAlertQuery_RestListQuery) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestListQuery) In(values []*rcommon.PolicySpec_SupportingAlertQuery_RestListQuery) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().RestListQuery().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestListQuery) NotIn(values []*rcommon.PolicySpec_SupportingAlertQuery_RestListQuery) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().RestListQuery().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestListQuery) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().RestListQuery().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestListQuery) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().RestListQuery().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestListQuery) compare(op gotenfilter.CompareOperator, value *rcommon.PolicySpec_SupportingAlertQuery_RestListQuery) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		PolicyTemplate_FieldPathValue: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().RestListQuery().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestListQuery) Description() *filterCndBuilderSpecTemplateSupportingQueriesRestListQueryDescription {
	return &filterCndBuilderSpecTemplateSupportingQueriesRestListQueryDescription{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestListQuery) Endpoint() *filterCndBuilderSpecTemplateSupportingQueriesRestListQueryEndpoint {
	return &filterCndBuilderSpecTemplateSupportingQueriesRestListQueryEndpoint{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestListQuery) PathTemplate() *filterCndBuilderSpecTemplateSupportingQueriesRestListQueryPathTemplate {
	return &filterCndBuilderSpecTemplateSupportingQueriesRestListQueryPathTemplate{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestListQuery) View() *filterCndBuilderSpecTemplateSupportingQueriesRestListQueryView {
	return &filterCndBuilderSpecTemplateSupportingQueriesRestListQueryView{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestListQuery) FieldMask() *filterCndBuilderSpecTemplateSupportingQueriesRestListQueryFieldMask {
	return &filterCndBuilderSpecTemplateSupportingQueriesRestListQueryFieldMask{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestListQuery) FilterTemplate() *filterCndBuilderSpecTemplateSupportingQueriesRestListQueryFilterTemplate {
	return &filterCndBuilderSpecTemplateSupportingQueriesRestListQueryFilterTemplate{builder: b.builder}
}

type filterCndBuilderSpecTemplateSupportingQueriesRestListQueryDescription struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestListQueryDescription) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestListQueryDescription) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestListQueryDescription) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestListQueryDescription) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestListQueryDescription) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestListQueryDescription) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestListQueryDescription) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().RestListQuery().Description().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestListQueryDescription) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().RestListQuery().Description().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestListQueryDescription) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().RestListQuery().Description().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestListQueryDescription) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().RestListQuery().Description().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestListQueryDescription) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		PolicyTemplate_FieldPathValue: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().RestListQuery().Description().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSupportingQueriesRestListQueryEndpoint struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestListQueryEndpoint) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestListQueryEndpoint) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestListQueryEndpoint) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestListQueryEndpoint) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestListQueryEndpoint) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestListQueryEndpoint) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestListQueryEndpoint) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().RestListQuery().Endpoint().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestListQueryEndpoint) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().RestListQuery().Endpoint().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestListQueryEndpoint) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().RestListQuery().Endpoint().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestListQueryEndpoint) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().RestListQuery().Endpoint().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestListQueryEndpoint) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		PolicyTemplate_FieldPathValue: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().RestListQuery().Endpoint().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSupportingQueriesRestListQueryPathTemplate struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestListQueryPathTemplate) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestListQueryPathTemplate) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestListQueryPathTemplate) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestListQueryPathTemplate) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestListQueryPathTemplate) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestListQueryPathTemplate) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestListQueryPathTemplate) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().RestListQuery().PathTemplate().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestListQueryPathTemplate) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().RestListQuery().PathTemplate().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestListQueryPathTemplate) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().RestListQuery().PathTemplate().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestListQueryPathTemplate) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().RestListQuery().PathTemplate().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestListQueryPathTemplate) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		PolicyTemplate_FieldPathValue: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().RestListQuery().PathTemplate().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSupportingQueriesRestListQueryView struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestListQueryView) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestListQueryView) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestListQueryView) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestListQueryView) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestListQueryView) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestListQueryView) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestListQueryView) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().RestListQuery().View().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestListQueryView) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().RestListQuery().View().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestListQueryView) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().RestListQuery().View().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestListQueryView) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().RestListQuery().View().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestListQueryView) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		PolicyTemplate_FieldPathValue: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().RestListQuery().View().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSupportingQueriesRestListQueryFieldMask struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestListQueryFieldMask) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestListQueryFieldMask) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestListQueryFieldMask) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestListQueryFieldMask) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestListQueryFieldMask) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestListQueryFieldMask) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestListQueryFieldMask) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().RestListQuery().FieldMask().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestListQueryFieldMask) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().RestListQuery().FieldMask().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestListQueryFieldMask) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().RestListQuery().FieldMask().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestListQueryFieldMask) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().RestListQuery().FieldMask().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestListQueryFieldMask) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		PolicyTemplate_FieldPathValue: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().RestListQuery().FieldMask().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSupportingQueriesRestListQueryFilterTemplate struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestListQueryFilterTemplate) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestListQueryFilterTemplate) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestListQueryFilterTemplate) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestListQueryFilterTemplate) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestListQueryFilterTemplate) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestListQueryFilterTemplate) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestListQueryFilterTemplate) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().RestListQuery().FilterTemplate().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestListQueryFilterTemplate) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().RestListQuery().FilterTemplate().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestListQueryFilterTemplate) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().RestListQuery().FilterTemplate().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestListQueryFilterTemplate) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().RestListQuery().FilterTemplate().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSupportingQueriesRestListQueryFilterTemplate) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		PolicyTemplate_FieldPathValue: NewPolicyTemplateFieldPathBuilder().SpecTemplate().SupportingQueries().RestListQuery().FilterTemplate().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateAiAgent struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateAiAgent) Eq(value *rcommon.PolicySpec_AIAgentHandling) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateAiAgent) Neq(value *rcommon.PolicySpec_AIAgentHandling) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateAiAgent) Gt(value *rcommon.PolicySpec_AIAgentHandling) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateAiAgent) Gte(value *rcommon.PolicySpec_AIAgentHandling) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateAiAgent) Lt(value *rcommon.PolicySpec_AIAgentHandling) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateAiAgent) Lte(value *rcommon.PolicySpec_AIAgentHandling) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateAiAgent) In(values []*rcommon.PolicySpec_AIAgentHandling) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateAiAgent) NotIn(values []*rcommon.PolicySpec_AIAgentHandling) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateAiAgent) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateAiAgent) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateAiAgent) compare(op gotenfilter.CompareOperator, value *rcommon.PolicySpec_AIAgentHandling) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		PolicyTemplate_FieldPathValue: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateAiAgent) Enabled() *filterCndBuilderSpecTemplateAiAgentEnabled {
	return &filterCndBuilderSpecTemplateAiAgentEnabled{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateAiAgent) EnabledConnectivity() *filterCndBuilderSpecTemplateAiAgentEnabledConnectivity {
	return &filterCndBuilderSpecTemplateAiAgentEnabledConnectivity{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateAiAgent) AutoAcceptRemediation() *filterCndBuilderSpecTemplateAiAgentAutoAcceptRemediation {
	return &filterCndBuilderSpecTemplateAiAgentAutoAcceptRemediation{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateAiAgent) EdgeConnectivity() *filterCndBuilderSpecTemplateAiAgentEdgeConnectivity {
	return &filterCndBuilderSpecTemplateAiAgentEdgeConnectivity{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateAiAgent) RemediationOptions() *filterCndBuilderSpecTemplateAiAgentRemediationOptions {
	return &filterCndBuilderSpecTemplateAiAgentRemediationOptions{builder: b.builder}
}

type filterCndBuilderSpecTemplateAiAgentEnabled struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateAiAgentEnabled) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentEnabled) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentEnabled) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentEnabled) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentEnabled) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentEnabled) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentEnabled) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().Enabled().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateAiAgentEnabled) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().Enabled().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateAiAgentEnabled) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().Enabled().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateAiAgentEnabled) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().Enabled().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateAiAgentEnabled) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		PolicyTemplate_FieldPathValue: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().Enabled().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateAiAgentEnabledConnectivity struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateAiAgentEnabledConnectivity) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentEnabledConnectivity) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentEnabledConnectivity) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentEnabledConnectivity) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentEnabledConnectivity) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentEnabledConnectivity) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentEnabledConnectivity) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().EnabledConnectivity().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateAiAgentEnabledConnectivity) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().EnabledConnectivity().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateAiAgentEnabledConnectivity) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().EnabledConnectivity().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateAiAgentEnabledConnectivity) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().EnabledConnectivity().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateAiAgentEnabledConnectivity) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		PolicyTemplate_FieldPathValue: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().EnabledConnectivity().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateAiAgentAutoAcceptRemediation struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateAiAgentAutoAcceptRemediation) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentAutoAcceptRemediation) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentAutoAcceptRemediation) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentAutoAcceptRemediation) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentAutoAcceptRemediation) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentAutoAcceptRemediation) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentAutoAcceptRemediation) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().AutoAcceptRemediation().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateAiAgentAutoAcceptRemediation) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().AutoAcceptRemediation().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateAiAgentAutoAcceptRemediation) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().AutoAcceptRemediation().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateAiAgentAutoAcceptRemediation) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().AutoAcceptRemediation().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateAiAgentAutoAcceptRemediation) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		PolicyTemplate_FieldPathValue: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().AutoAcceptRemediation().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateAiAgentEdgeConnectivity struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivity) Eq(value *rcommon.PolicySpec_AIAgentHandling_EdgeConnectivity) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivity) Neq(value *rcommon.PolicySpec_AIAgentHandling_EdgeConnectivity) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivity) Gt(value *rcommon.PolicySpec_AIAgentHandling_EdgeConnectivity) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivity) Gte(value *rcommon.PolicySpec_AIAgentHandling_EdgeConnectivity) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivity) Lt(value *rcommon.PolicySpec_AIAgentHandling_EdgeConnectivity) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivity) Lte(value *rcommon.PolicySpec_AIAgentHandling_EdgeConnectivity) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivity) In(values []*rcommon.PolicySpec_AIAgentHandling_EdgeConnectivity) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().EdgeConnectivity().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivity) NotIn(values []*rcommon.PolicySpec_AIAgentHandling_EdgeConnectivity) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().EdgeConnectivity().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivity) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().EdgeConnectivity().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivity) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().EdgeConnectivity().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivity) compare(op gotenfilter.CompareOperator, value *rcommon.PolicySpec_AIAgentHandling_EdgeConnectivity) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		PolicyTemplate_FieldPathValue: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().EdgeConnectivity().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivity) DeviceSsh() *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityDeviceSsh {
	return &filterCndBuilderSpecTemplateAiAgentEdgeConnectivityDeviceSsh{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivity) ProxiesSsh() *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityProxiesSsh {
	return &filterCndBuilderSpecTemplateAiAgentEdgeConnectivityProxiesSsh{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivity) PodSsh() *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityPodSsh {
	return &filterCndBuilderSpecTemplateAiAgentEdgeConnectivityPodSsh{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivity) AllowedBins() *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityAllowedBins {
	return &filterCndBuilderSpecTemplateAiAgentEdgeConnectivityAllowedBins{builder: b.builder}
}

type filterCndBuilderSpecTemplateAiAgentEdgeConnectivityDeviceSsh struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityDeviceSsh) Eq(value *rcommon.PolicySpec_AIAgentHandling_EdgeConnectivity_DeviceSSH) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityDeviceSsh) Neq(value *rcommon.PolicySpec_AIAgentHandling_EdgeConnectivity_DeviceSSH) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityDeviceSsh) Gt(value *rcommon.PolicySpec_AIAgentHandling_EdgeConnectivity_DeviceSSH) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityDeviceSsh) Gte(value *rcommon.PolicySpec_AIAgentHandling_EdgeConnectivity_DeviceSSH) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityDeviceSsh) Lt(value *rcommon.PolicySpec_AIAgentHandling_EdgeConnectivity_DeviceSSH) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityDeviceSsh) Lte(value *rcommon.PolicySpec_AIAgentHandling_EdgeConnectivity_DeviceSSH) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityDeviceSsh) In(values []*rcommon.PolicySpec_AIAgentHandling_EdgeConnectivity_DeviceSSH) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().EdgeConnectivity().DeviceSsh().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityDeviceSsh) NotIn(values []*rcommon.PolicySpec_AIAgentHandling_EdgeConnectivity_DeviceSSH) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().EdgeConnectivity().DeviceSsh().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityDeviceSsh) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().EdgeConnectivity().DeviceSsh().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityDeviceSsh) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().EdgeConnectivity().DeviceSsh().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityDeviceSsh) compare(op gotenfilter.CompareOperator, value *rcommon.PolicySpec_AIAgentHandling_EdgeConnectivity_DeviceSSH) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		PolicyTemplate_FieldPathValue: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().EdgeConnectivity().DeviceSsh().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityDeviceSsh) ClientName() *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityDeviceSshClientName {
	return &filterCndBuilderSpecTemplateAiAgentEdgeConnectivityDeviceSshClientName{builder: b.builder}
}

type filterCndBuilderSpecTemplateAiAgentEdgeConnectivityDeviceSshClientName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityDeviceSshClientName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityDeviceSshClientName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityDeviceSshClientName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityDeviceSshClientName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityDeviceSshClientName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityDeviceSshClientName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityDeviceSshClientName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().EdgeConnectivity().DeviceSsh().ClientName().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityDeviceSshClientName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().EdgeConnectivity().DeviceSsh().ClientName().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityDeviceSshClientName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().EdgeConnectivity().DeviceSsh().ClientName().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityDeviceSshClientName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().EdgeConnectivity().DeviceSsh().ClientName().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityDeviceSshClientName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		PolicyTemplate_FieldPathValue: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().EdgeConnectivity().DeviceSsh().ClientName().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateAiAgentEdgeConnectivityProxiesSsh struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityProxiesSsh) Eq(value *rcommon.PolicySpec_AIAgentHandling_EdgeConnectivity_ProxiesSSH) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityProxiesSsh) Neq(value *rcommon.PolicySpec_AIAgentHandling_EdgeConnectivity_ProxiesSSH) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityProxiesSsh) Gt(value *rcommon.PolicySpec_AIAgentHandling_EdgeConnectivity_ProxiesSSH) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityProxiesSsh) Gte(value *rcommon.PolicySpec_AIAgentHandling_EdgeConnectivity_ProxiesSSH) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityProxiesSsh) Lt(value *rcommon.PolicySpec_AIAgentHandling_EdgeConnectivity_ProxiesSSH) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityProxiesSsh) Lte(value *rcommon.PolicySpec_AIAgentHandling_EdgeConnectivity_ProxiesSSH) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityProxiesSsh) In(values []*rcommon.PolicySpec_AIAgentHandling_EdgeConnectivity_ProxiesSSH) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().EdgeConnectivity().ProxiesSsh().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityProxiesSsh) NotIn(values []*rcommon.PolicySpec_AIAgentHandling_EdgeConnectivity_ProxiesSSH) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().EdgeConnectivity().ProxiesSsh().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityProxiesSsh) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().EdgeConnectivity().ProxiesSsh().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityProxiesSsh) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().EdgeConnectivity().ProxiesSsh().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityProxiesSsh) compare(op gotenfilter.CompareOperator, value *rcommon.PolicySpec_AIAgentHandling_EdgeConnectivity_ProxiesSSH) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		PolicyTemplate_FieldPathValue: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().EdgeConnectivity().ProxiesSsh().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityProxiesSsh) ServiceDomain() *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityProxiesSshServiceDomain {
	return &filterCndBuilderSpecTemplateAiAgentEdgeConnectivityProxiesSshServiceDomain{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityProxiesSsh) ProviderNameTmpl() *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityProxiesSshProviderNameTmpl {
	return &filterCndBuilderSpecTemplateAiAgentEdgeConnectivityProxiesSshProviderNameTmpl{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityProxiesSsh) ClientName() *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityProxiesSshClientName {
	return &filterCndBuilderSpecTemplateAiAgentEdgeConnectivityProxiesSshClientName{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityProxiesSsh) ServiceName() *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityProxiesSshServiceName {
	return &filterCndBuilderSpecTemplateAiAgentEdgeConnectivityProxiesSshServiceName{builder: b.builder}
}

type filterCndBuilderSpecTemplateAiAgentEdgeConnectivityProxiesSshServiceDomain struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityProxiesSshServiceDomain) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityProxiesSshServiceDomain) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityProxiesSshServiceDomain) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityProxiesSshServiceDomain) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityProxiesSshServiceDomain) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityProxiesSshServiceDomain) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityProxiesSshServiceDomain) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().EdgeConnectivity().ProxiesSsh().ServiceDomain().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityProxiesSshServiceDomain) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().EdgeConnectivity().ProxiesSsh().ServiceDomain().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityProxiesSshServiceDomain) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().EdgeConnectivity().ProxiesSsh().ServiceDomain().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityProxiesSshServiceDomain) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().EdgeConnectivity().ProxiesSsh().ServiceDomain().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityProxiesSshServiceDomain) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		PolicyTemplate_FieldPathValue: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().EdgeConnectivity().ProxiesSsh().ServiceDomain().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateAiAgentEdgeConnectivityProxiesSshProviderNameTmpl struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityProxiesSshProviderNameTmpl) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityProxiesSshProviderNameTmpl) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityProxiesSshProviderNameTmpl) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityProxiesSshProviderNameTmpl) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityProxiesSshProviderNameTmpl) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityProxiesSshProviderNameTmpl) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityProxiesSshProviderNameTmpl) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().EdgeConnectivity().ProxiesSsh().ProviderNameTmpl().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityProxiesSshProviderNameTmpl) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().EdgeConnectivity().ProxiesSsh().ProviderNameTmpl().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityProxiesSshProviderNameTmpl) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().EdgeConnectivity().ProxiesSsh().ProviderNameTmpl().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityProxiesSshProviderNameTmpl) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().EdgeConnectivity().ProxiesSsh().ProviderNameTmpl().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityProxiesSshProviderNameTmpl) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		PolicyTemplate_FieldPathValue: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().EdgeConnectivity().ProxiesSsh().ProviderNameTmpl().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateAiAgentEdgeConnectivityProxiesSshClientName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityProxiesSshClientName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityProxiesSshClientName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityProxiesSshClientName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityProxiesSshClientName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityProxiesSshClientName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityProxiesSshClientName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityProxiesSshClientName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().EdgeConnectivity().ProxiesSsh().ClientName().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityProxiesSshClientName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().EdgeConnectivity().ProxiesSsh().ClientName().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityProxiesSshClientName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().EdgeConnectivity().ProxiesSsh().ClientName().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityProxiesSshClientName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().EdgeConnectivity().ProxiesSsh().ClientName().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityProxiesSshClientName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		PolicyTemplate_FieldPathValue: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().EdgeConnectivity().ProxiesSsh().ClientName().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateAiAgentEdgeConnectivityProxiesSshServiceName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityProxiesSshServiceName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityProxiesSshServiceName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityProxiesSshServiceName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityProxiesSshServiceName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityProxiesSshServiceName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityProxiesSshServiceName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityProxiesSshServiceName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().EdgeConnectivity().ProxiesSsh().ServiceName().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityProxiesSshServiceName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().EdgeConnectivity().ProxiesSsh().ServiceName().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityProxiesSshServiceName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().EdgeConnectivity().ProxiesSsh().ServiceName().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityProxiesSshServiceName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().EdgeConnectivity().ProxiesSsh().ServiceName().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityProxiesSshServiceName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		PolicyTemplate_FieldPathValue: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().EdgeConnectivity().ProxiesSsh().ServiceName().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateAiAgentEdgeConnectivityPodSsh struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityPodSsh) Eq(value *rcommon.PolicySpec_AIAgentHandling_EdgeConnectivity_PodSSH) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityPodSsh) Neq(value *rcommon.PolicySpec_AIAgentHandling_EdgeConnectivity_PodSSH) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityPodSsh) Gt(value *rcommon.PolicySpec_AIAgentHandling_EdgeConnectivity_PodSSH) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityPodSsh) Gte(value *rcommon.PolicySpec_AIAgentHandling_EdgeConnectivity_PodSSH) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityPodSsh) Lt(value *rcommon.PolicySpec_AIAgentHandling_EdgeConnectivity_PodSSH) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityPodSsh) Lte(value *rcommon.PolicySpec_AIAgentHandling_EdgeConnectivity_PodSSH) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityPodSsh) In(values []*rcommon.PolicySpec_AIAgentHandling_EdgeConnectivity_PodSSH) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().EdgeConnectivity().PodSsh().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityPodSsh) NotIn(values []*rcommon.PolicySpec_AIAgentHandling_EdgeConnectivity_PodSSH) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().EdgeConnectivity().PodSsh().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityPodSsh) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().EdgeConnectivity().PodSsh().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityPodSsh) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().EdgeConnectivity().PodSsh().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityPodSsh) compare(op gotenfilter.CompareOperator, value *rcommon.PolicySpec_AIAgentHandling_EdgeConnectivity_PodSSH) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		PolicyTemplate_FieldPathValue: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().EdgeConnectivity().PodSsh().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityPodSsh) ClientName() *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityPodSshClientName {
	return &filterCndBuilderSpecTemplateAiAgentEdgeConnectivityPodSshClientName{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityPodSsh) Username() *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityPodSshUsername {
	return &filterCndBuilderSpecTemplateAiAgentEdgeConnectivityPodSshUsername{builder: b.builder}
}

type filterCndBuilderSpecTemplateAiAgentEdgeConnectivityPodSshClientName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityPodSshClientName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityPodSshClientName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityPodSshClientName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityPodSshClientName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityPodSshClientName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityPodSshClientName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityPodSshClientName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().EdgeConnectivity().PodSsh().ClientName().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityPodSshClientName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().EdgeConnectivity().PodSsh().ClientName().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityPodSshClientName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().EdgeConnectivity().PodSsh().ClientName().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityPodSshClientName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().EdgeConnectivity().PodSsh().ClientName().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityPodSshClientName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		PolicyTemplate_FieldPathValue: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().EdgeConnectivity().PodSsh().ClientName().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateAiAgentEdgeConnectivityPodSshUsername struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityPodSshUsername) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityPodSshUsername) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityPodSshUsername) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityPodSshUsername) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityPodSshUsername) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityPodSshUsername) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityPodSshUsername) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().EdgeConnectivity().PodSsh().Username().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityPodSshUsername) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().EdgeConnectivity().PodSsh().Username().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityPodSshUsername) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().EdgeConnectivity().PodSsh().Username().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityPodSshUsername) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().EdgeConnectivity().PodSsh().Username().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityPodSshUsername) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		PolicyTemplate_FieldPathValue: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().EdgeConnectivity().PodSsh().Username().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateAiAgentEdgeConnectivityAllowedBins struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityAllowedBins) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityAllowedBins) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityAllowedBins) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityAllowedBins) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityAllowedBins) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityAllowedBins) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityAllowedBins) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().EdgeConnectivity().AllowedBins().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityAllowedBins) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().EdgeConnectivity().AllowedBins().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityAllowedBins) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().EdgeConnectivity().AllowedBins().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityAllowedBins) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().EdgeConnectivity().AllowedBins().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityAllowedBins) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().EdgeConnectivity().AllowedBins().FieldPath(),
		Value:     NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().EdgeConnectivity().AllowedBins().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityAllowedBins) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().EdgeConnectivity().AllowedBins()
	itemValues := make([]PolicyTemplate_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().EdgeConnectivity().AllowedBins().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityAllowedBins) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().EdgeConnectivity().AllowedBins()
	itemValues := make([]PolicyTemplate_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().EdgeConnectivity().AllowedBins().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateAiAgentEdgeConnectivityAllowedBins) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		PolicyTemplate_FieldPathValue: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().EdgeConnectivity().AllowedBins().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateAiAgentRemediationOptions struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateAiAgentRemediationOptions) Eq(value []*rcommon.PolicySpec_AIAgentHandling_Remediation) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentRemediationOptions) Neq(value []*rcommon.PolicySpec_AIAgentHandling_Remediation) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentRemediationOptions) Gt(value []*rcommon.PolicySpec_AIAgentHandling_Remediation) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentRemediationOptions) Gte(value []*rcommon.PolicySpec_AIAgentHandling_Remediation) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentRemediationOptions) Lt(value []*rcommon.PolicySpec_AIAgentHandling_Remediation) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentRemediationOptions) Lte(value []*rcommon.PolicySpec_AIAgentHandling_Remediation) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentRemediationOptions) In(values [][]*rcommon.PolicySpec_AIAgentHandling_Remediation) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().RemediationOptions().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateAiAgentRemediationOptions) NotIn(values [][]*rcommon.PolicySpec_AIAgentHandling_Remediation) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().RemediationOptions().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateAiAgentRemediationOptions) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().RemediationOptions().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateAiAgentRemediationOptions) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().RemediationOptions().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateAiAgentRemediationOptions) Contains(value *rcommon.PolicySpec_AIAgentHandling_Remediation) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().RemediationOptions().FieldPath(),
		Value:     NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().RemediationOptions().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateAiAgentRemediationOptions) ContainsAnyOf(values []*rcommon.PolicySpec_AIAgentHandling_Remediation) *FilterBuilder {
	pathSelector := NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().RemediationOptions()
	itemValues := make([]PolicyTemplate_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().RemediationOptions().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateAiAgentRemediationOptions) ContainsAll(values []*rcommon.PolicySpec_AIAgentHandling_Remediation) *FilterBuilder {
	pathSelector := NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().RemediationOptions()
	itemValues := make([]PolicyTemplate_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().RemediationOptions().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateAiAgentRemediationOptions) compare(op gotenfilter.CompareOperator, value []*rcommon.PolicySpec_AIAgentHandling_Remediation) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		PolicyTemplate_FieldPathValue: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().RemediationOptions().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateAiAgentRemediationOptions) FixInSsh() *filterCndBuilderSpecTemplateAiAgentRemediationOptionsFixInSsh {
	return &filterCndBuilderSpecTemplateAiAgentRemediationOptionsFixInSsh{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateAiAgentRemediationOptions) Reboot() *filterCndBuilderSpecTemplateAiAgentRemediationOptionsReboot {
	return &filterCndBuilderSpecTemplateAiAgentRemediationOptionsReboot{builder: b.builder}
}

type filterCndBuilderSpecTemplateAiAgentRemediationOptionsFixInSsh struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateAiAgentRemediationOptionsFixInSsh) Eq(value *rcommon.PolicySpec_AIAgentHandling_Remediation_FixInSSH) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentRemediationOptionsFixInSsh) Neq(value *rcommon.PolicySpec_AIAgentHandling_Remediation_FixInSSH) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentRemediationOptionsFixInSsh) Gt(value *rcommon.PolicySpec_AIAgentHandling_Remediation_FixInSSH) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentRemediationOptionsFixInSsh) Gte(value *rcommon.PolicySpec_AIAgentHandling_Remediation_FixInSSH) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentRemediationOptionsFixInSsh) Lt(value *rcommon.PolicySpec_AIAgentHandling_Remediation_FixInSSH) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentRemediationOptionsFixInSsh) Lte(value *rcommon.PolicySpec_AIAgentHandling_Remediation_FixInSSH) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentRemediationOptionsFixInSsh) In(values []*rcommon.PolicySpec_AIAgentHandling_Remediation_FixInSSH) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().RemediationOptions().FixInSsh().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateAiAgentRemediationOptionsFixInSsh) NotIn(values []*rcommon.PolicySpec_AIAgentHandling_Remediation_FixInSSH) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().RemediationOptions().FixInSsh().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateAiAgentRemediationOptionsFixInSsh) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().RemediationOptions().FixInSsh().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateAiAgentRemediationOptionsFixInSsh) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().RemediationOptions().FixInSsh().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateAiAgentRemediationOptionsFixInSsh) compare(op gotenfilter.CompareOperator, value *rcommon.PolicySpec_AIAgentHandling_Remediation_FixInSSH) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		PolicyTemplate_FieldPathValue: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().RemediationOptions().FixInSsh().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateAiAgentRemediationOptionsReboot struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateAiAgentRemediationOptionsReboot) Eq(value *rcommon.PolicySpec_AIAgentHandling_Remediation_Reboot) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentRemediationOptionsReboot) Neq(value *rcommon.PolicySpec_AIAgentHandling_Remediation_Reboot) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentRemediationOptionsReboot) Gt(value *rcommon.PolicySpec_AIAgentHandling_Remediation_Reboot) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentRemediationOptionsReboot) Gte(value *rcommon.PolicySpec_AIAgentHandling_Remediation_Reboot) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentRemediationOptionsReboot) Lt(value *rcommon.PolicySpec_AIAgentHandling_Remediation_Reboot) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentRemediationOptionsReboot) Lte(value *rcommon.PolicySpec_AIAgentHandling_Remediation_Reboot) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateAiAgentRemediationOptionsReboot) In(values []*rcommon.PolicySpec_AIAgentHandling_Remediation_Reboot) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().RemediationOptions().Reboot().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateAiAgentRemediationOptionsReboot) NotIn(values []*rcommon.PolicySpec_AIAgentHandling_Remediation_Reboot) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		PolicyTemplate_FieldPathArrayOfValues: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().RemediationOptions().Reboot().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateAiAgentRemediationOptionsReboot) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().RemediationOptions().Reboot().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateAiAgentRemediationOptionsReboot) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().RemediationOptions().Reboot().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateAiAgentRemediationOptionsReboot) compare(op gotenfilter.CompareOperator, value *rcommon.PolicySpec_AIAgentHandling_Remediation_Reboot) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		PolicyTemplate_FieldPathValue: NewPolicyTemplateFieldPathBuilder().SpecTemplate().AiAgent().RemediationOptions().Reboot().WithValue(value),
	})
}
