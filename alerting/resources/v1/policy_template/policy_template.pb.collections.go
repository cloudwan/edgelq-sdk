// Code generated by protoc-gen-goten-resource
// Resource: PolicyTemplate
// DO NOT EDIT!!!

package policy_template

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	document "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/document"
	policy "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/policy"
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1/project"
	meta "github.com/cloudwan/goten-sdk/types/meta"
)

// ensure the imports are used
var (
	_ = new(gotenresource.ListQuery)
)

// make sure we're using proto imports
var (
	_ = &document.Document{}
	_ = &policy.Policy{}
	_ = &iam_project.Project{}
	_ = &meta.Meta{}
)

type PolicyTemplateList []*PolicyTemplate

func (l PolicyTemplateList) Append(item gotenresource.Resource) gotenresource.ResourceList {
	return append(l, item.(*PolicyTemplate))
}

func (l PolicyTemplateList) AppendList(list gotenresource.ResourceList) gotenresource.ResourceList {
	return append(l, list.(PolicyTemplateList)...)
}

func (l PolicyTemplateList) Slice(first, second int) gotenresource.ResourceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l PolicyTemplateList) At(idx int) gotenresource.Resource {
	return l[idx]
}

func (l PolicyTemplateList) Set(idx int, res gotenresource.Resource) {
	l[idx] = res.(*PolicyTemplate)
}

func (l PolicyTemplateList) Length() int {
	return len(l)
}

type PolicyTemplateChangeList []*PolicyTemplateChange

func (l PolicyTemplateChangeList) Append(item gotenresource.ResourceChange) gotenresource.ResourceChangeList {
	return append(l, item.(*PolicyTemplateChange))
}

func (l PolicyTemplateChangeList) AppendList(list gotenresource.ResourceChangeList) gotenresource.ResourceChangeList {
	return append(l, list.(PolicyTemplateChangeList)...)
}

func (l PolicyTemplateChangeList) Slice(first, second int) gotenresource.ResourceChangeList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l PolicyTemplateChangeList) At(idx int) gotenresource.ResourceChange {
	return l[idx]
}

func (l PolicyTemplateChangeList) Set(idx int, change gotenresource.ResourceChange) {
	l[idx] = change.(*PolicyTemplateChange)
}

func (l PolicyTemplateChangeList) Length() int {
	return len(l)
}

type PolicyTemplateNameList []*Name

func (l PolicyTemplateNameList) Append(name gotenresource.Name) gotenresource.NameList {
	return append(l, name.(*Name))
}

func (l PolicyTemplateNameList) AppendList(list gotenresource.NameList) gotenresource.NameList {
	return append(l, list.(PolicyTemplateNameList)...)
}

func (l PolicyTemplateNameList) Slice(first, second int) gotenresource.NameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l PolicyTemplateNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l PolicyTemplateNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*Name)
}

func (l PolicyTemplateNameList) Length() int {
	return len(l)
}

type PolicyTemplateReferenceList []*Reference

func (l PolicyTemplateReferenceList) Append(ref gotenresource.Reference) gotenresource.ReferenceList {
	return append(l, ref.(*Reference))
}

func (l PolicyTemplateReferenceList) AppendList(list gotenresource.ReferenceList) gotenresource.ReferenceList {
	return append(l, list.(PolicyTemplateReferenceList)...)
}

func (l PolicyTemplateReferenceList) Slice(first, second int) gotenresource.ReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l PolicyTemplateReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l PolicyTemplateReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*Reference)
}

func (l PolicyTemplateReferenceList) Length() int {
	return len(l)
}

type PolicyTemplateParentNameList []*ParentName

func (l PolicyTemplateParentNameList) Append(name gotenresource.Name) gotenresource.ParentNameList {
	return append(l, name.(*ParentName))
}

func (l PolicyTemplateParentNameList) AppendList(list gotenresource.ParentNameList) gotenresource.ParentNameList {
	return append(l, list.(PolicyTemplateParentNameList)...)
}

func (l PolicyTemplateParentNameList) Slice(first, second int) gotenresource.ParentNameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l PolicyTemplateParentNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l PolicyTemplateParentNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*ParentName)
}

func (l PolicyTemplateParentNameList) Length() int {
	return len(l)
}

type PolicyTemplateParentReferenceList []*ParentReference

func (l PolicyTemplateParentReferenceList) Append(ref gotenresource.Reference) gotenresource.ParentReferenceList {
	return append(l, ref.(*ParentReference))
}

func (l PolicyTemplateParentReferenceList) AppendList(list gotenresource.ParentReferenceList) gotenresource.ParentReferenceList {
	return append(l, list.(PolicyTemplateParentReferenceList)...)
}

func (l PolicyTemplateParentReferenceList) Slice(first, second int) gotenresource.ParentReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l PolicyTemplateParentReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l PolicyTemplateParentReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*ParentReference)
}

func (l PolicyTemplateParentReferenceList) Length() int {
	return len(l)
}

type PolicyTemplateMap map[Name]*PolicyTemplate

func (m PolicyTemplateMap) Get(name gotenresource.Name) gotenresource.Resource {
	return m[*name.(*Name)]
}

func (m PolicyTemplateMap) Set(res gotenresource.Resource) {
	tRes := res.(*PolicyTemplate)
	m[*tRes.Name] = tRes
}

func (m PolicyTemplateMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m PolicyTemplateMap) Length() int {
	return len(m)
}

func (m PolicyTemplateMap) ForEach(cb func(gotenresource.Name, gotenresource.Resource) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}

type PolicyTemplateChangeMap map[Name]*PolicyTemplateChange

func (m PolicyTemplateChangeMap) Get(name gotenresource.Name) gotenresource.ResourceChange {
	return m[*name.(*Name)]
}

func (m PolicyTemplateChangeMap) Set(change gotenresource.ResourceChange) {
	tChange := change.(*PolicyTemplateChange)
	m[*tChange.GetPolicyTemplateName()] = tChange
}

func (m PolicyTemplateChangeMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m PolicyTemplateChangeMap) Length() int {
	return len(m)
}

func (m PolicyTemplateChangeMap) ForEach(cb func(gotenresource.Name, gotenresource.ResourceChange) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}
