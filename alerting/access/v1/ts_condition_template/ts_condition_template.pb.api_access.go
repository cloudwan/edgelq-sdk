// Code generated by protoc-gen-goten-access
// Resource: TsConditionTemplate
// DO NOT EDIT!!!

package ts_condition_template_access

import (
	"context"

	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/metadata"
	"google.golang.org/grpc/status"

	gotenaccess "github.com/cloudwan/goten-sdk/runtime/access"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
	gotenfilter "github.com/cloudwan/goten-sdk/runtime/resource/filter"
	"github.com/cloudwan/goten-sdk/types/watch_type"

	ts_condition_template_client "github.com/cloudwan/edgelq-sdk/alerting/client/v1/ts_condition_template"
	ts_condition_template "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/ts_condition_template"
)

var (
	_ = new(context.Context)

	_ = metadata.MD{}
	_ = new(grpc.ClientConnInterface)
	_ = codes.NotFound
	_ = status.Status{}

	_ = new(gotenaccess.Watcher)
	_ = watch_type.WatchType_STATEFUL
	_ = new(gotenresource.ListQuery)
	_ = gotenfilter.Eq
)

type apiTsConditionTemplateAccess struct {
	client ts_condition_template_client.TsConditionTemplateServiceClient
}

func NewApiTsConditionTemplateAccess(client ts_condition_template_client.TsConditionTemplateServiceClient) ts_condition_template.TsConditionTemplateAccess {
	return &apiTsConditionTemplateAccess{client: client}
}

func (a *apiTsConditionTemplateAccess) GetTsConditionTemplate(ctx context.Context, query *ts_condition_template.GetQuery, opts ...gotenresource.GetOption) (*ts_condition_template.TsConditionTemplate, error) {
	getOpts := gotenresource.MakeGetOptions(opts)
	callHeaders := metadata.MD{}
	if getOpts.GetSkipCache() {
		callHeaders["cache-control"] = []string{"no-cache"}
	}
	callOpts := []grpc.CallOption{}
	if len(callHeaders) > 0 {
		callOpts = append(callOpts, grpc.Header(&callHeaders))
	}
	if !query.Reference.IsFullyQualified() {
		return nil, status.Errorf(codes.InvalidArgument, "Reference %s is not fully specified", query.Reference)
	}
	request := &ts_condition_template_client.GetTsConditionTemplateRequest{
		Name:      &query.Reference.Name,
		FieldMask: query.Mask,
	}
	res, err := a.client.GetTsConditionTemplate(ctx, request, callOpts...)
	if err != nil {
		return nil, err
	}
	query.Reference.Resolve(res)
	return res, nil
}

func (a *apiTsConditionTemplateAccess) BatchGetTsConditionTemplates(ctx context.Context, refs []*ts_condition_template.Reference, opts ...gotenresource.BatchGetOption) error {
	batchGetOpts := gotenresource.MakeBatchGetOptions(opts)
	callHeaders := metadata.MD{}
	if batchGetOpts.GetSkipCache() {
		callHeaders["cache-control"] = []string{"no-cache"}
	}
	callOpts := []grpc.CallOption{}
	if len(callHeaders) > 0 {
		callOpts = append(callOpts, grpc.Header(&callHeaders))
	}
	asNames := make([]*ts_condition_template.Name, 0, len(refs))
	for _, ref := range refs {
		if !ref.IsFullyQualified() {
			return status.Errorf(codes.InvalidArgument, "Reference %s is not fully specified", ref)
		}
		asNames = append(asNames, &ref.Name)
	}
	request := &ts_condition_template_client.BatchGetTsConditionTemplatesRequest{
		Names: asNames,
	}
	fieldMask := batchGetOpts.GetFieldMask(ts_condition_template.GetDescriptor())
	if fieldMask != nil {
		request.FieldMask = fieldMask.(*ts_condition_template.TsConditionTemplate_FieldMask)
	}
	resp, err := a.client.BatchGetTsConditionTemplates(ctx, request, callOpts...)
	if err != nil {
		return err
	}
	resultMap := make(map[ts_condition_template.Name]*ts_condition_template.TsConditionTemplate, len(refs))
	for _, resolvedRes := range resp.GetTsConditionTemplates() {
		resultMap[*resolvedRes.GetName()] = resolvedRes
	}
	for _, ref := range refs {
		resolvedRes := resultMap[ref.Name]
		if resolvedRes != nil {
			ref.Resolve(resolvedRes)
		}
	}
	if batchGetOpts.MustResolveAll() && len(resp.GetMissing()) > 0 {
		return status.Errorf(codes.NotFound, "Number of references not found: %d", len(resp.GetMissing()))
	}
	return nil
}

func (a *apiTsConditionTemplateAccess) QueryTsConditionTemplates(ctx context.Context, query *ts_condition_template.ListQuery, opts ...gotenresource.QueryOption) (*ts_condition_template.QueryResultSnapshot, error) {
	qOpts := gotenresource.MakeQueryOptions(opts)
	callHeaders := metadata.MD{}
	if qOpts.GetSkipCache() {
		callHeaders["cache-control"] = []string{"no-cache"}
	}
	callOpts := []grpc.CallOption{}
	if len(callHeaders) > 0 {
		callOpts = append(callOpts, grpc.Header(&callHeaders))
	}
	request := &ts_condition_template_client.ListTsConditionTemplatesRequest{
		Filter:            query.Filter,
		FieldMask:         query.Mask,
		IncludePagingInfo: query.WithPagingInfo,
	}
	if query.Pager != nil {
		request.PageSize = int32(query.Pager.Limit)
		request.OrderBy = query.Pager.OrderBy
		request.PageToken = query.Pager.Cursor
	}
	if query.Filter != nil && query.Filter.GetCondition() != nil {
		request.Filter, request.Parent = getParentAndFilter(query.Filter)
	}
	resp, err := a.client.ListTsConditionTemplates(ctx, request)
	if err != nil {
		return nil, err
	}
	return &ts_condition_template.QueryResultSnapshot{
		TsConditionTemplates: resp.TsConditionTemplates,
		NextPageCursor:       resp.NextPageToken,
		PrevPageCursor:       resp.PrevPageToken,
		TotalResultsCount:    resp.TotalResultsCount,
		CurrentOffset:        resp.CurrentOffset,
	}, nil
}

func (a *apiTsConditionTemplateAccess) SearchTsConditionTemplates(ctx context.Context, query *ts_condition_template.SearchQuery, opts ...gotenresource.QueryOption) (*ts_condition_template.QueryResultSnapshot, error) {
	qOpts := gotenresource.MakeQueryOptions(opts)
	callHeaders := metadata.MD{}
	if qOpts.GetSkipCache() {
		callHeaders["cache-control"] = []string{"no-cache"}
	}
	callOpts := []grpc.CallOption{}
	if len(callHeaders) > 0 {
		callOpts = append(callOpts, grpc.Header(&callHeaders))
	}
	request := &ts_condition_template_client.SearchTsConditionTemplatesRequest{
		Phrase:    query.Phrase,
		Filter:    query.Filter,
		FieldMask: query.Mask,
	}
	if query.Pager != nil {
		request.PageSize = int32(query.Pager.Limit)
		request.OrderBy = query.Pager.OrderBy
		request.PageToken = query.Pager.Cursor
	}
	if query.Filter != nil && query.Filter.GetCondition() != nil {
		request.Filter, request.Parent = getParentAndFilter(query.Filter)
	}
	resp, err := a.client.SearchTsConditionTemplates(ctx, request, callOpts...)
	if err != nil {
		return nil, err
	}
	return &ts_condition_template.QueryResultSnapshot{
		TsConditionTemplates: resp.TsConditionTemplates,
		NextPageCursor:       resp.NextPageToken,
		PrevPageCursor:       resp.PrevPageToken,
		CurrentOffset:        resp.CurrentOffset,
		TotalResultsCount:    resp.TotalResultsCount,
	}, nil
}

func (a *apiTsConditionTemplateAccess) WatchTsConditionTemplate(ctx context.Context, query *ts_condition_template.GetQuery, observerCb func(*ts_condition_template.TsConditionTemplateChange) error) error {
	if !query.Reference.IsFullyQualified() {
		return status.Errorf(codes.InvalidArgument, "Reference %s is not fully specified", query.Reference)
	}
	request := &ts_condition_template_client.WatchTsConditionTemplateRequest{
		Name:      &query.Reference.Name,
		FieldMask: query.Mask,
	}
	ctx, cancel := context.WithCancel(ctx)
	defer cancel()

	changesStream, initErr := a.client.WatchTsConditionTemplate(ctx, request)
	if initErr != nil {
		return initErr
	}
	for {
		resp, err := changesStream.Recv()
		if err != nil {
			return status.Errorf(status.Code(err), "watch recv error: %s", err)
		}
		change := resp.GetChange()
		if err := observerCb(change); err != nil {
			return err
		}
	}
}

func (a *apiTsConditionTemplateAccess) WatchTsConditionTemplates(ctx context.Context, query *ts_condition_template.WatchQuery, observerCb func(*ts_condition_template.QueryResultChange) error) error {
	request := &ts_condition_template_client.WatchTsConditionTemplatesRequest{
		Filter:       query.Filter,
		FieldMask:    query.Mask,
		MaxChunkSize: int32(query.ChunkSize),
		Type:         query.WatchType,
		ResumeToken:  query.ResumeToken,
		StartingTime: query.StartingTime,
	}
	if query.Pager != nil {
		request.OrderBy = query.Pager.OrderBy
		request.PageSize = int32(query.Pager.Limit)
		request.PageToken = query.Pager.Cursor
	}
	if query.Filter != nil && query.Filter.GetCondition() != nil {
		request.Filter, request.Parent = getParentAndFilter(query.Filter)
	}
	ctx, cancel := context.WithCancel(ctx)
	defer cancel()

	changesStream, initErr := a.client.WatchTsConditionTemplates(ctx, request)
	if initErr != nil {
		return initErr
	}
	for {
		respChange, err := changesStream.Recv()
		if err != nil {
			return status.Errorf(status.Code(err), "watch recv error: %s", err)
		}
		changesWithPaging := &ts_condition_template.QueryResultChange{
			Changes:      respChange.TsConditionTemplateChanges,
			IsCurrent:    respChange.IsCurrent,
			IsHardReset:  respChange.IsHardReset,
			IsSoftReset:  respChange.IsSoftReset,
			ResumeToken:  respChange.ResumeToken,
			SnapshotSize: respChange.SnapshotSize,
		}
		if respChange.PageTokenChange != nil {
			changesWithPaging.PrevPageCursor = respChange.PageTokenChange.PrevPageToken
			changesWithPaging.NextPageCursor = respChange.PageTokenChange.NextPageToken
		}
		if err := observerCb(changesWithPaging); err != nil {
			return err
		}
	}
}

func (a *apiTsConditionTemplateAccess) SaveTsConditionTemplate(ctx context.Context, res *ts_condition_template.TsConditionTemplate, opts ...gotenresource.SaveOption) error {
	saveOpts := gotenresource.MakeSaveOptions(opts)
	var resp *ts_condition_template.TsConditionTemplate
	var err error
	if !saveOpts.OnlyCreate() {
		updateRequest := &ts_condition_template_client.UpdateTsConditionTemplateRequest{
			TsConditionTemplate: res,
			AllowMissing:        !saveOpts.OnlyUpdate(),
		}
		if updateMask := saveOpts.GetUpdateMask(); updateMask != nil {
			updateRequest.UpdateMask = updateMask.(*ts_condition_template.TsConditionTemplate_FieldMask)
		}
		if mask, conditionalState := saveOpts.GetCAS(); mask != nil && conditionalState != nil {
			updateRequest.Cas = &ts_condition_template_client.UpdateTsConditionTemplateRequest_CAS{
				ConditionalState: conditionalState.(*ts_condition_template.TsConditionTemplate),
				FieldMask:        mask.(*ts_condition_template.TsConditionTemplate_FieldMask),
			}
		}
		resp, err = a.client.UpdateTsConditionTemplate(ctx, updateRequest)
		if err != nil {
			return err
		}
	} else {
		createRequest := &ts_condition_template_client.CreateTsConditionTemplateRequest{
			TsConditionTemplate: res,
		}
		resp, err = a.client.CreateTsConditionTemplate(ctx, createRequest)
		if err != nil {
			return err
		}
	}
	// Ensure object is updated - but in most shallow way possible
	res.MakeDiffFieldMask(resp).Set(res, resp)
	return nil
}

func (a *apiTsConditionTemplateAccess) DeleteTsConditionTemplate(ctx context.Context, ref *ts_condition_template.Reference, _ ...gotenresource.DeleteOption) error {
	if !ref.IsFullyQualified() {
		return status.Errorf(codes.InvalidArgument, "Reference %s is not fully specified", ref)
	}
	request := &ts_condition_template_client.DeleteTsConditionTemplateRequest{
		Name: &ref.Name,
	}
	_, err := a.client.DeleteTsConditionTemplate(ctx, request)
	return err
}
func getParentAndFilter(fullFilter *ts_condition_template.Filter) (*ts_condition_template.Filter, *ts_condition_template.ParentName) {
	var withParentExtraction func(cnd ts_condition_template.FilterCondition) ts_condition_template.FilterCondition
	var resultParent *ts_condition_template.ParentName
	var resultFilter *ts_condition_template.Filter
	withParentExtraction = func(cnd ts_condition_template.FilterCondition) ts_condition_template.FilterCondition {
		switch tCnd := cnd.(type) {
		case *ts_condition_template.FilterConditionComposite:
			if tCnd.GetOperator() == gotenfilter.AND {
				withoutParentCnds := make([]ts_condition_template.FilterCondition, 0)
				for _, subCnd := range tCnd.Conditions {
					if subCndNoParent := withParentExtraction(subCnd); subCndNoParent != nil {
						withoutParentCnds = append(withoutParentCnds, subCndNoParent)
					}
				}
				if len(withoutParentCnds) == 0 {
					return nil
				}
				if len(withoutParentCnds) == 1 {
					return withoutParentCnds[0]
				}
				return ts_condition_template.AndFilterConditions(withoutParentCnds...)
			} else {
				return tCnd
			}
		case *ts_condition_template.FilterConditionCompare:
			if tCnd.GetOperator() == gotenfilter.Eq && tCnd.GetRawFieldPath().String() == "name" {
				nameValue := tCnd.GetRawValue().(*ts_condition_template.Name)
				if nameValue != nil && nameValue.ParentName.IsSpecified() {
					resultParent = &nameValue.ParentName
					if nameValue.IsFullyQualified() {
						return tCnd
					}
					return nil
				}
			}
			return tCnd
		default:
			return tCnd
		}
	}
	cndWithoutParent := withParentExtraction(fullFilter.GetCondition())
	if cndWithoutParent != nil {
		resultFilter = &ts_condition_template.Filter{FilterCondition: cndWithoutParent}
	}
	return resultFilter, resultParent
}

func init() {
	gotenaccess.GetRegistry().RegisterApiAccessConstructor(ts_condition_template.GetDescriptor(), func(cc grpc.ClientConnInterface) gotenresource.Access {
		return ts_condition_template.AsAnyCastAccess(NewApiTsConditionTemplateAccess(ts_condition_template_client.NewTsConditionTemplateServiceClient(cc)))
	})
}
