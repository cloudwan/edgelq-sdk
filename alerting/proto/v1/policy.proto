syntax = "proto3";

package ntt.alerting.v1;

import "edgelq-sdk/monitoring/proto/v4/common.proto";
import "google/api/resource.proto";
import "goten-sdk/types/meta.proto";

option go_package = "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/policy;policy";
option java_multiple_files = true;
option java_outer_classname = "PolicyProto";
option java_package = "com.ntt.alerting.pb.v1";

// Policy groups log or time series based conditions that focus on
// monitoring same alerting resources. For example, one Policy should
// be created for alerts triggered by devices, and another for alerts
// triggered by Pods.
// Policy also provides common specification parts for all conditions
// within: It binds them with notification channels, defines processing
// location (Backend or Edge), instructs if and how AI agent should
// be investigating issues.
message Policy {
  option (google.api.resource) = {
    type : "alerting.edgelq.com/Policy"
    pattern : "projects/{project}/policies/{policy}"
  };

  // Name of Policy
  // When creating a new instance, this field is optional and if not provided,
  // it will be generated automatically. Last ID segment must conform to the
  // following regex: [a-z][a-z0-9\\-]{0,28}[a-z0-9]
  string name = 1;

  // Metadata is an object with information like create, update and delete time
  // (for async deleted resources), has user labels/annotations, sharding
  // information, multi-region syncing information and may have non-schema
  // owners (useful for taking ownership of resources belonging to lower level
  // services by higher ones).
  goten.types.Meta metadata = 2;

  // display name
  string display_name = 3;

  // Long description
  string description = 4;

  // List of documents useful for troubleshooting and fixing alerts triggered
  // by conditions in this policy.
  repeated string supporting_docs = 5;

  // Policy specification
  Spec spec = 6;

  // Spec defines common specification parts shared by all conditions within:
  // * Enabled flag
  // * Processing location
  // * Bindings with notification channels
  // * Standard troubleshooting queries to be executed for triggered alerts.
  // * Shared resource type identity
  // * Whether and how AI agent should be handling alerts
  message Spec {
    // Enabled controls whether conditions within are active or not.
    bool enabled = 1;

    // Decides whether alerting is executed in backend or at the edge.
    // This field cannot be modified.
    ProcessingLocation processing_location = 2;

    // Notification specification. It is possible to attach
    // multiple channels, each with different notification kinds.
    repeated Notification notifications = 3;

    // Resource identity shared by all conditions/alerts within policy.
    ResourceIdentity resource_identity = 6;

    // List of all supporting queries to be executed for alerts within Policy.
    repeated SupportingAlertQuery supporting_queries = 7;

    // Defines AI agent handling for alerts within this policy
    AIAgentHandling ai_agent = 8;

    // Notification informs where and when to send notifications
    // about alerts created within this Policy.
    message Notification {
      // List of alert state change kinds when we want to send a notification.
      repeated Kind enabled_kinds = 1;

      // Connected NotificationChannel resource. Must be specified.
      string channel = 2;

      // If bigger than 0, then number of alert bodies in message
      // will be cut to this value.
      int32 max_alert_bodies_in_msg = 3;

      // This field matters if max_alert_bodies_in_msg is bigger than 0.
      // If this field has value true, then notification message will only
      // inform how many alerts additionally were raised on top of provided
      // in the notification.
      // If false, multiple notifications will be generated.
      bool put_only_alerts_counter_when_overflowing = 4;

      // Kind specifies interesting alert state change which may
      // trigger a notification generation.
      enum Kind {
        // Undefined is not allowed
        UNDEFINED = 0;

        // This kind must be used if we want to generate a notification
        // for a new firing alert.
        NEW_FIRING = 1;

        // This kind must be used if we want to generate a notification
        // for an alert that has been pushed to Operator (escalated by
        // AI Agent).
        AI_ESCALATED_TO_OPERATOR = 2;

        // This kind must be used if we want to generate a notification
        // for an alert which received remediation recommendation by
        // AI Agent, and which requires operator approval.
        AI_REMEDIATION_AWAITING_APPROVAL = 3;

        // This kind must be used if we want to generate a notification
        // for an alert which has been considered as a temporary violation
        // by AI Agent.
        AI_IGNORED_AS_TMP = 4;

        // This kind must be used if we want to generate a notification
        // for an alert which has been considered as a false positive,
        // and for which alerting thresholds should be adjusted.
        AI_ADJUSTED_ENTRIES = 5;

        // This kind must be used if we want to generate a notification
        // for an alert for which AI agent applied recommendation.
        AI_REMEDIATION_APPLIED = 6;

        // This kind must be used if we want to generate a notification
        // for an alert for which operator applied recommendation.
        OP_REMEDIATION_APPLIED = 7;

        // This kind must be used if we want to generate a notification
        // for an alert that stopped firing.
        STOPPED_FIRING = 8;
      }
    }

    // ResourceIdentity informs on which resource type all conditions within
    // Policy focus on. They will have to, in their specifications, provide
    // group by labels that must allow deduction of full resource name
    // of given type.
    // Each Policy must point to exactly one primary resource kind on which
    // alerts focus. However, in ResourceIdentity it will be possible to
    // provide labels for more than one resource when its useful. For example,
    // Policy focusing on applications.edgelq.com/Pod resource type may also
    // provide label pointing to devices.edgelq.com/Device kind, since
    // each Pod runs on a specific Device.
    message ResourceIdentity {
      // Reference to primary alerting resource kind.
      // Typical EdgeLQ core resources would be devices.edgelq.com/Device
      // or applications.edgelq.com/Pod resource types, but this is not limited
      // to them.
      string alerting_resource = 1;

      // All interesting labels that can be found in ALL Log/Ts Conditions
      // group by fields within Policy.
      // It is necessary to provide labels to at least satisfy name pattern
      // of main alerting_resource. It is optional to provide more labels,
      // in order to identify auxiliary resources.
      // By default, there are 2 built-in LabelInfo objects:
      // * key: "project_id", points to project name segment. It is mapped
      //   to project of TimeSeries or Log object
      // * key: "region_id", points to region name segment. It is mapped
      //   to region of TimeSeries or Log object.
      repeated LabelInfo labels = 2;

      // List of name patterns of main alerting resource kind.
      // Note that all name segments (divided by each even "/" character)
      // must be satisfied within labels.mapped_name_segment fields,
      // with exception of "project" and "region", which are built-in.
      // TODO: As of now, only one pattern. However, it should be possible to
      // deduce name patterns from meta.goten.com service, so they are not
      // provided here at all.
      // Name pattern must conform to standard goten style name pattern. For
      // example, name pattern of devices.edgelq.com/Device is
      // "projects/{project}/regions/{region}/devices/{device}".
      repeated string name_patterns = 3;

      // LabelInfo binds a label from Log/TimeSeries object into
      // specific name segment of a resource associated with an Alert
      // raised within current Policy.
      // Multiple LabelInfo instances within ResourceIdentity are used to
      // reconstruct full resource names.
      // For example, resource type devices.edgelq.com/Device has a single
      // known name pattern
      // projects/{project}/regions/{region}/devices/{device}. There are 3 name
      // segments: project, region, and device. Segments "project" and "region"
      // are built-in always and dont have to be defined. Policy owner will have
      // to provide single LabelInfo in this case, for device segment only.
      // LabelInfo may be used to point to other auxiliary resources. For
      // example, if Policy focuses on applications.edgelq.com/Pod resource
      // type, administrator can create Policy with 2 LabelInfo objects: One
      // with pod_id as a key (it is a main resource), but other with device_id
      // (because each Pod runs on a Device).
      message LabelInfo {
        // Label key that must be present in TsCondition/LogCondition group by
        // fields list. Refer to labels defined in relevant
        // monitoring.edgelq.com/MonitoredResourceDescriptor,
        // monitoring.edgelq.com/MetricDescriptor, or
        // logging.edgelq.com/LogDescriptor resources for which you want to
        // create conditions. Note that "key" must match exactly one of a labels
        // (byte to byte) specified in interesting descriptors. For example, in
        // MonitoredResourceDescriptor of type devices.edgelq.com/Device you may
        // find label with key "device_id". This must be specified in
        // LabelInfo.key if you want to create Policy focusing on Device
        // resource.
        string key = 1;

        // List of all contexts where label with specified key can be found.
        // It may be more than one position. For example device_id label can
        // be found in LogDescriptor or MonitoredResourceDescriptor. In this
        // case, we need to set 2 values in contexts field: RESOURCE_LABEL and
        // LOG_LABEL.
        repeated UsageContext contexts = 2;

        // Name segment value in name pattern. This is always
        // lowerSingularCamelCase resource type name. For example, for LabelInfo
        // with key device_id, if it points to devices.edgelq.com/Device
        // resource type, mapped_name_segment must be equal to "device" value
        // (which is lower camel case).
        string mapped_name_segment = 3;

        // UsageContext exact descriptor type where label key can be found.
        enum UsageContext {
          // UNDEFINED - not allowed
          UNDEFINED = 0;

          // Indicates that label of given key can be found in
          // monitoring.edgelq.com/MetricDescriptor resource.
          METRIC_LABEL = 1;

          // Indicates that label of given key can be found in
          // monitoring.edgelq.com/MonitoredResourceDescriptor resource.
          RESOURCE_LABEL = 2;

          // Indicates that label of given key can be found in
          // logging.edgelq.com/LogDescriptor resource.
          LOG_LABEL = 3;
        }
      }
    }

    // SupportingAlertQuery specifies a common supporting troubleshooting query
    // that can be used to investigate any Alert within current Policy.
    // This is especially important for alerts handling by AI agent. Outputs
    // from these queries can be used by AI agents.
    //
    // Important: Many query spec string fields have _template suffix. It means
    // that their values may contain variable values that are replaced for each
    // specific Alert instance. Those variables have a format: <$LABEL_KEY>,
    // where $LABEL_KEY must be one of the label keys specified in
    // resource_identity field. For example, if we can have a Policy like this:
    // {
    //   "resourceIdentity": {
    //     "alertingResource": "services/devices.edgelq.com/resources/Device",
    //     "labels": [
    //       {
    //         "key": "device_id",
    //         "contexts": [RESOURCE_LABEL, LOG_LABEL],
    //         "mappedNameSegment": "device"
    //       }
    //     ],
    //     "namePatterns":
    //     ["projects/{project}/regions/{region}/devices/{device}"]
    //   },
    //   "supportingQueries": [
    //      {
    //        "tsQuery": {
    //          "description": "..."
    //          "filterTemplate":
    //          "metric.type=\"devices.edgelq.com/Device/connected\"
    //            AND resource.labels.device_id=\"<device_id>\""
    //          "aggregation": {...}
    //        }
    //      }
    //   ]
    // }
    // In above example, we define one LabelInfo with device_id field.
    // Therefore, alerting service will find and replace each substring
    // <device_id> with specific value from Alert resource. If we have Alert
    // with label device_id = "test-x", Alerting service will execute TimeSeries
    // query with filter metric.type=\"devices.edgelq.com/Device/connected\" AND
    //   resource.labels.device_id=\"test-x\""
    // Note that values <project_id> and <region_id> are always built-in, and
    // will expand to project/region indicated by Alert.
    message SupportingAlertQuery {
      oneof query {
        // Time Series query
        TsQuery ts_query = 1;

        // Log query
        LogQuery log_query = 2;

        // Rest Get query
        RestGetQuery rest_get_query = 5;

        // Rest List query
        RestListQuery rest_list_query = 6;
      }

      // TsQuery describes TimeSeries query to execute for each specific alert.
      // Time interval will be set around alert time.
      message TsQuery {
        // Query description.
        string description = 1;

        // TimeSeries filter template. All substrings <$LABEL_KEY> will be
        // replaced according to the resource_identity.labels field.
        string filter_template = 2;

        // TimeSeries aggregation object.
        ntt.monitoring.v4.Aggregation aggregation = 3;
      }

      // LogQuery describes Log query to execute for each specific alert.
      // Time interval will be set around alert time.
      message LogQuery {
        // Query description.
        string description = 1;

        // Log filter template. All substrings <$LABEL_KEY> will be
        // replaced according to the resource_identity.labels field.
        string filter_template = 2;
      }

      // RestGetQuery allows to fetch specific resource body to be included in
      // investigation data.
      // It is optimized for fetching resources from EdgeLQ style services.
      // It is not possible as of now to use GRPC API, because alerting resource
      // can be used by 3rd party service on top of EdgeLQ platform.
      message RestGetQuery {
        // Description of resource we are fetching
        string description = 1;

        // Endpoint (with scheme) from which we want to fetch resource. For
        // example, it can be https://devices.apis.edgelq.com value, if we want
        // to access a resource from devices.edgelq.com service. Endpoint may
        // differ depending on environment (production or staging).
        // TODO: Replace with reference to meta.goten.com/Service
        string endpoint = 2;

        // Path template to be appended to access specific resource.
        // EdgeLQ based services use standard paths for Get requests.
        // It is: /$API_VERSION/$RESOURCE_NAME.
        // For example, path_template for devices.edgelq.com/Device
        // resource in version v1, path_template must have a format:
        // "/v1/projects/<project_id>/regions/<region_id>/devices/<device_id>".
        // All substrings <$LABEL_KEY> will be replaced according to the
        // resource_identity.labels field.
        string path_template = 3;

        // It must be NAME, BASIC, DETAIL or FULL - like in each standard Get
        // request in EdgeLQ based platform.
        string view = 4;

        // List of additional fields to obtain on top of those defined within
        // view. Fields must be comma separated, and use lower_snake_case
        // notion.
        string field_mask = 5;
      }

      // RestListQuery allows to fetch specific list of resource bodies to be
      // included in investigation data.
      // It is optimized for fetching resources from EdgeLQ style services.
      // It is not possible as of now to use GRPC API, because alerting resource
      // can be used by 3rd party service on top of EdgeLQ platform.
      message RestListQuery {
        // Description of resources we are fetching
        string description = 1;

        // Endpoint (with scheme) from which we want to fetch resource. For
        // example, it can be https://applications.apis.edgelq.com value, if we
        // want to access a resource from applications.edgelq.com service.
        // Endpoint may differ depending on environment (production or staging).
        // TODO: Replace with reference to meta.goten.com/Service
        string endpoint = 2;

        // Path template to be appended to access specific resource.
        // EdgeLQ based services use standard paths for List requests.
        // It is:
        // /$API_VERSION/$RESOURCE_PARENT_NAME/$PLURAL_RESOURCE_TYPE_NAME. For
        // example, to fetch list of pods (applications.edgelq.com service), we
        // would use path_template like this:
        // "/v1/projects/<project_id>/regions/<region_id>/pods".
        // All substrings <$LABEL_KEY> will be replaced according to the
        // resource_identity.labels field.
        string path_template = 3;

        // It must be NAME, BASIC, DETAIL or FULL - like in each standard List
        // request in EdgeLQ based platform.
        string view = 4;

        // List of additional fields to obtain on top of those defined within
        // view. Fields must be comma separated, and use lower_snake_case
        // notion.
        string field_mask = 5;

        // Optional filter template to be used to filter collection. For
        // example, if we want to obtain list of pods running on a device, we
        // should populate it with value:
        // "spec.node=\"projects/<project_id>/regions/<region_id>/devices/<device_id>\"".
        string filter_template = 6;
      }
    }

    // AIAgentHandling defines instructions for AI agent how to handle alerts
    // generated within current Policy.
    message AIAgentHandling {
      // Whether AI agent handling is enabled.
      bool enabled = 1;

      // Whether AI agent is allowed to SSH into alerting resource for further
      // investigation outside of defined queries. To have an effect, it is
      // necessary to specify edge_connectivity field.
      bool enabled_connectivity = 2;

      // Whether remediation's proposed by AI agent should be automatically
      // accepted without operator consent (full autonomous mode).
      bool auto_accept_remediation = 3;

      // Describes how to connect to alerting resource in a context of Alert.
      EdgeConnectivity edge_connectivity = 4;

      // Specifies list of suggested remediations for AI agent to apply
      repeated Remediation remediation_options = 6;

      // EdgeConnectivity describes means of accessing alerting resource for
      // troubleshooting purposes.
      message EdgeConnectivity {
        oneof type {
          // Device SSH connectivity
          DeviceSSH device_ssh = 1;

          // Proxies SSH connectivity
          ProxiesSSH proxies_ssh = 2;

          // Pod SSH connectivity
          PodSSH pod_ssh = 3;
        }

        // Optional list of allowed binaries that AI agent can use. This can be
        // used to restrict potential errors, or indicate what utils are
        // available.
        repeated string allowed_bins = 4;

        // DeviceSSH informs that AI agent can SSH into alerting resource using
        // standard droplet-exposed SSH tunnel.
        // It is necessary to provide LabelInfo with device_id key in resource
        // identity, but its possible to use DeviceSSH connectivity for
        // non-Device alerts too. It is only necessary that alerting resource
        // runs a droplet process.
        message DeviceSSH {
          // Client name for self-identification. Can be any unique name like
          // "llm-alerting-agent".
          string client_name = 1;
        }

        // ProxiesSSH informs that AI agent can SSH into alerting resource using
        // proxies service, standard SSH connectivity messages. It is assumed
        // that some process on alerting resource is connected to proxies
        // exposing SSH tunnel. Refer to Connect method in Proxies.
        message ProxiesSSH {
          // Service domain to use in Connect request.
          string service_domain = 1;

          // Provider name template to use in Connect request.
          // All substrings <$LABEL_KEY> will be replaced according to the
          // resource_identity.labels field, plus special <project_id> and
          // <region_id>.
          string provider_name_tmpl = 2;

          // Client name for self-identification. Can be any unique name like
          // "llm-alerting-agent".
          string client_name = 3;

          // Service name to use in Connect request.
          string service_name = 4;
        }

        // PodSSH can be used if application is running as a Pod supported by
        // droplet.
        // TODO: Not implemented
        message PodSSH {
          // Client name for self-identification. Can be any unique name like
          // "llm-alerting-agent".
          string client_name = 1;

          // Username to use.
          string username = 2;
        }
      }

      // Remediation indicates option available to AI agent.
      message Remediation {
        oneof type {
          // FixInSSH remediation type.
          FixInSSH fix_in_ssh = 1;

          // Reboot remediation type.
          Reboot reboot = 2;
        }

        // FixInSSH declares that issue should be fixed using SSH shell.
        // AI Agent should provide a command to execute in shell.
        // This option can be used only if EdgeConnectivity is specified.
        message FixInSSH {}

        // Reboot is a special type of remediation applicable only and only
        // for pods -> it is necessary to provide LabelInfo with pod_id key.
        // Pod will be restarted to remediate an issue.
        message Reboot {}
      }
    }

    // ProcessingLocation indicates if alerts should be detected on Edge
    // or in backend. Edge may be preferred for various reasons:
    // * Alerts can be raised closer to the source.
    // * Conditions can use more sophisticated methods, like local small AI
    // anomaly
    //   detector models. In backend, performance may not be guaranteed, if
    //   there are a lot of pending trainings.
    // Backend is preferred when:
    // * We want to alert based on metrics that dont make sense on edge (like
    // connectivity).
    // * Alerting resoucrce is not "edge" type. For example, we monitor some
    // network targets
    //   monitored by multiple distributed probes.
    enum ProcessingLocation {
      // UNDEFINED is invalid
      UNDEFINED = 0;

      // Alerts will be detected and generated in the backend.
      BACKEND = 1;

      // Alerts will be detected and generated on the edge.
      EDGE = 2;
    }
  }
}
