// Code generated by protoc-gen-goten-client
// API: LogConditionTemplateService
// DO NOT EDIT!!!

package log_condition_template_client

import (
	"google.golang.org/protobuf/proto"

	gotenclient "github.com/cloudwan/goten-sdk/runtime/client"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	log_condition_template "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/log_condition_template"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = new(proto.Message)
	_ = new(gotenclient.MethodDescriptor)
	_ = gotenresource.WildcardId
)

// make sure we're using proto imports
var (
	_ = &log_condition_template.LogConditionTemplate{}
	_ = &emptypb.Empty{}
)

var (
	descriptorsInitialized                  bool
	logConditionTemplateServiceDescriptor   *LogConditionTemplateServiceDescriptor
	getLogConditionTemplateDescriptor       *GetLogConditionTemplateDescriptor
	batchGetLogConditionTemplatesDescriptor *BatchGetLogConditionTemplatesDescriptor
	listLogConditionTemplatesDescriptor     *ListLogConditionTemplatesDescriptor
	watchLogConditionTemplateDescriptor     *WatchLogConditionTemplateDescriptor
	watchLogConditionTemplatesDescriptor    *WatchLogConditionTemplatesDescriptor
	createLogConditionTemplateDescriptor    *CreateLogConditionTemplateDescriptor
	updateLogConditionTemplateDescriptor    *UpdateLogConditionTemplateDescriptor
	deleteLogConditionTemplateDescriptor    *DeleteLogConditionTemplateDescriptor
	searchLogConditionTemplatesDescriptor   *SearchLogConditionTemplatesDescriptor
)

type GetLogConditionTemplateDescriptor struct{}

type GetLogConditionTemplateDescriptorClientMsgHandle struct{}

type GetLogConditionTemplateDescriptorServerMsgHandle struct{}

func (d *GetLogConditionTemplateDescriptor) NewEmptyClientMsg() proto.Message {
	return &GetLogConditionTemplateRequest{}
}

func (d *GetLogConditionTemplateDescriptor) NewEmptyServerMsg() proto.Message {
	return &log_condition_template.LogConditionTemplate{}
}

func (d *GetLogConditionTemplateDescriptor) IsUnary() bool {
	return true
}

func (d *GetLogConditionTemplateDescriptor) IsClientStream() bool {
	return false
}

func (d *GetLogConditionTemplateDescriptor) IsServerStream() bool {
	return false
}

func (d *GetLogConditionTemplateDescriptor) IsCollection() bool {
	return false
}

func (d *GetLogConditionTemplateDescriptor) IsPlural() bool {
	return false
}

func (d *GetLogConditionTemplateDescriptor) HasResource() bool {
	return true
}

func (d *GetLogConditionTemplateDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *GetLogConditionTemplateDescriptor) GetVerb() string {
	return "get"
}

func (d *GetLogConditionTemplateDescriptor) GetMethodName() string {
	return "GetLogConditionTemplate"
}

func (d *GetLogConditionTemplateDescriptor) GetFullMethodName() string {
	return "/ntt.alerting.v1.LogConditionTemplateService/GetLogConditionTemplate"
}

func (d *GetLogConditionTemplateDescriptor) GetProtoPkgName() string {
	return "ntt.alerting.v1"
}

func (d *GetLogConditionTemplateDescriptor) GetApiName() string {
	return "LogConditionTemplateService"
}

func (d *GetLogConditionTemplateDescriptor) GetServiceDomain() string {
	return "alerting.edgelq.com"
}

func (d *GetLogConditionTemplateDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *GetLogConditionTemplateDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return logConditionTemplateServiceDescriptor
}

func (d *GetLogConditionTemplateDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return log_condition_template.GetDescriptor()
}

func (d *GetLogConditionTemplateDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetLogConditionTemplateDescriptorClientMsgHandle{}
}

func (d *GetLogConditionTemplateDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetLogConditionTemplateDescriptorServerMsgHandle{}
}

func (h *GetLogConditionTemplateDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetLogConditionTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*GetLogConditionTemplateRequest) *log_condition_template.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*log_condition_template.Name)(nil)
}

func (h *GetLogConditionTemplateDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*GetLogConditionTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*GetLogConditionTemplateRequest) []*log_condition_template.Name
	})
	if ok {
		return log_condition_template.LogConditionTemplateNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetLogConditionTemplateDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetLogConditionTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*GetLogConditionTemplateRequest) *log_condition_template.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *GetLogConditionTemplateDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*GetLogConditionTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*GetLogConditionTemplateRequest) *log_condition_template.LogConditionTemplate
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *GetLogConditionTemplateDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*GetLogConditionTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*GetLogConditionTemplateRequest) []*log_condition_template.LogConditionTemplate
	})
	if ok {
		return log_condition_template.LogConditionTemplateList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *GetLogConditionTemplateDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*log_condition_template.LogConditionTemplate)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*log_condition_template.LogConditionTemplate) *log_condition_template.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*log_condition_template.Name)(nil)
}

func (h *GetLogConditionTemplateDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*log_condition_template.LogConditionTemplate)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*log_condition_template.LogConditionTemplate) []*log_condition_template.Name
	})
	if ok {
		return log_condition_template.LogConditionTemplateNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetLogConditionTemplateDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*log_condition_template.LogConditionTemplate)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*log_condition_template.LogConditionTemplate) *log_condition_template.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *GetLogConditionTemplateDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	return msg.(*log_condition_template.LogConditionTemplate)
}

func (h *GetLogConditionTemplateDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*log_condition_template.LogConditionTemplate)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*log_condition_template.LogConditionTemplate) []*log_condition_template.LogConditionTemplate
	})
	if ok {
		return log_condition_template.LogConditionTemplateList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetGetLogConditionTemplateDescriptor() *GetLogConditionTemplateDescriptor {
	return getLogConditionTemplateDescriptor
}

type BatchGetLogConditionTemplatesDescriptor struct{}

type BatchGetLogConditionTemplatesDescriptorClientMsgHandle struct{}

type BatchGetLogConditionTemplatesDescriptorServerMsgHandle struct{}

func (d *BatchGetLogConditionTemplatesDescriptor) NewEmptyClientMsg() proto.Message {
	return &BatchGetLogConditionTemplatesRequest{}
}

func (d *BatchGetLogConditionTemplatesDescriptor) NewEmptyServerMsg() proto.Message {
	return &BatchGetLogConditionTemplatesResponse{}
}

func (d *BatchGetLogConditionTemplatesDescriptor) IsUnary() bool {
	return true
}

func (d *BatchGetLogConditionTemplatesDescriptor) IsClientStream() bool {
	return false
}

func (d *BatchGetLogConditionTemplatesDescriptor) IsServerStream() bool {
	return false
}

func (d *BatchGetLogConditionTemplatesDescriptor) IsCollection() bool {
	return false
}

func (d *BatchGetLogConditionTemplatesDescriptor) IsPlural() bool {
	return true
}

func (d *BatchGetLogConditionTemplatesDescriptor) HasResource() bool {
	return true
}

func (d *BatchGetLogConditionTemplatesDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *BatchGetLogConditionTemplatesDescriptor) GetVerb() string {
	return "batchGet"
}

func (d *BatchGetLogConditionTemplatesDescriptor) GetMethodName() string {
	return "BatchGetLogConditionTemplates"
}

func (d *BatchGetLogConditionTemplatesDescriptor) GetFullMethodName() string {
	return "/ntt.alerting.v1.LogConditionTemplateService/BatchGetLogConditionTemplates"
}

func (d *BatchGetLogConditionTemplatesDescriptor) GetProtoPkgName() string {
	return "ntt.alerting.v1"
}

func (d *BatchGetLogConditionTemplatesDescriptor) GetApiName() string {
	return "LogConditionTemplateService"
}

func (d *BatchGetLogConditionTemplatesDescriptor) GetServiceDomain() string {
	return "alerting.edgelq.com"
}

func (d *BatchGetLogConditionTemplatesDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *BatchGetLogConditionTemplatesDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return logConditionTemplateServiceDescriptor
}

func (d *BatchGetLogConditionTemplatesDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return log_condition_template.GetDescriptor()
}

func (d *BatchGetLogConditionTemplatesDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetLogConditionTemplatesDescriptorClientMsgHandle{}
}

func (d *BatchGetLogConditionTemplatesDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetLogConditionTemplatesDescriptorServerMsgHandle{}
}

func (h *BatchGetLogConditionTemplatesDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetLogConditionTemplatesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetLogConditionTemplatesRequest) *log_condition_template.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetLogConditionTemplatesDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetLogConditionTemplatesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetLogConditionTemplatesRequest) []*log_condition_template.Name
	})
	if ok {
		return log_condition_template.LogConditionTemplateNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if names := typedMsg.GetNames(); len(names) > 0 {
			return log_condition_template.LogConditionTemplateNameList(names)
		}
	}
	return (log_condition_template.LogConditionTemplateNameList)(nil)
}

func (h *BatchGetLogConditionTemplatesDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetLogConditionTemplatesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*BatchGetLogConditionTemplatesRequest) *log_condition_template.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *BatchGetLogConditionTemplatesDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*BatchGetLogConditionTemplatesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*BatchGetLogConditionTemplatesRequest) *log_condition_template.LogConditionTemplate
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *BatchGetLogConditionTemplatesDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*BatchGetLogConditionTemplatesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*BatchGetLogConditionTemplatesRequest) []*log_condition_template.LogConditionTemplate
	})
	if ok {
		return log_condition_template.LogConditionTemplateList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *BatchGetLogConditionTemplatesDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetLogConditionTemplatesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetLogConditionTemplatesResponse) *log_condition_template.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetLogConditionTemplatesDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetLogConditionTemplatesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetLogConditionTemplatesResponse) []*log_condition_template.Name
	})
	if ok {
		return log_condition_template.LogConditionTemplateNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetLogConditionTemplates(); len(resources) > 0 {
			list := make(log_condition_template.LogConditionTemplateNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (log_condition_template.LogConditionTemplateNameList)(nil)
}

func (h *BatchGetLogConditionTemplatesDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetLogConditionTemplatesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*BatchGetLogConditionTemplatesResponse) *log_condition_template.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *BatchGetLogConditionTemplatesDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*BatchGetLogConditionTemplatesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*BatchGetLogConditionTemplatesResponse) *log_condition_template.LogConditionTemplate
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *BatchGetLogConditionTemplatesDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*BatchGetLogConditionTemplatesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*BatchGetLogConditionTemplatesResponse) []*log_condition_template.LogConditionTemplate
	})
	if ok {
		return log_condition_template.LogConditionTemplateList(override.OverrideExtractResourceBodies(typedMsg))
	}
	{
		if resources := typedMsg.GetLogConditionTemplates(); len(resources) > 0 {
			return log_condition_template.LogConditionTemplateList(resources)
		}
	}
	return (log_condition_template.LogConditionTemplateList)(nil)
}

func GetBatchGetLogConditionTemplatesDescriptor() *BatchGetLogConditionTemplatesDescriptor {
	return batchGetLogConditionTemplatesDescriptor
}

type ListLogConditionTemplatesDescriptor struct{}

type ListLogConditionTemplatesDescriptorClientMsgHandle struct{}

type ListLogConditionTemplatesDescriptorServerMsgHandle struct{}

func (d *ListLogConditionTemplatesDescriptor) NewEmptyClientMsg() proto.Message {
	return &ListLogConditionTemplatesRequest{}
}

func (d *ListLogConditionTemplatesDescriptor) NewEmptyServerMsg() proto.Message {
	return &ListLogConditionTemplatesResponse{}
}

func (d *ListLogConditionTemplatesDescriptor) IsUnary() bool {
	return true
}

func (d *ListLogConditionTemplatesDescriptor) IsClientStream() bool {
	return false
}

func (d *ListLogConditionTemplatesDescriptor) IsServerStream() bool {
	return false
}

func (d *ListLogConditionTemplatesDescriptor) IsCollection() bool {
	return true
}

func (d *ListLogConditionTemplatesDescriptor) IsPlural() bool {
	return true
}

func (d *ListLogConditionTemplatesDescriptor) HasResource() bool {
	return true
}

func (d *ListLogConditionTemplatesDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ListLogConditionTemplatesDescriptor) GetVerb() string {
	return "list"
}

func (d *ListLogConditionTemplatesDescriptor) GetMethodName() string {
	return "ListLogConditionTemplates"
}

func (d *ListLogConditionTemplatesDescriptor) GetFullMethodName() string {
	return "/ntt.alerting.v1.LogConditionTemplateService/ListLogConditionTemplates"
}

func (d *ListLogConditionTemplatesDescriptor) GetProtoPkgName() string {
	return "ntt.alerting.v1"
}

func (d *ListLogConditionTemplatesDescriptor) GetApiName() string {
	return "LogConditionTemplateService"
}

func (d *ListLogConditionTemplatesDescriptor) GetServiceDomain() string {
	return "alerting.edgelq.com"
}

func (d *ListLogConditionTemplatesDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *ListLogConditionTemplatesDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return logConditionTemplateServiceDescriptor
}

func (d *ListLogConditionTemplatesDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return log_condition_template.GetDescriptor()
}

func (d *ListLogConditionTemplatesDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListLogConditionTemplatesDescriptorClientMsgHandle{}
}

func (d *ListLogConditionTemplatesDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListLogConditionTemplatesDescriptorServerMsgHandle{}
}

func (h *ListLogConditionTemplatesDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListLogConditionTemplatesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListLogConditionTemplatesRequest) *log_condition_template.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListLogConditionTemplatesDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListLogConditionTemplatesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListLogConditionTemplatesRequest) []*log_condition_template.Name
	})
	if ok {
		return log_condition_template.LogConditionTemplateNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *ListLogConditionTemplatesDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListLogConditionTemplatesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ListLogConditionTemplatesRequest) *log_condition_template.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*log_condition_template.ParentName)(nil)
}

func (h *ListLogConditionTemplatesDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*ListLogConditionTemplatesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*ListLogConditionTemplatesRequest) *log_condition_template.LogConditionTemplate
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *ListLogConditionTemplatesDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*ListLogConditionTemplatesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*ListLogConditionTemplatesRequest) []*log_condition_template.LogConditionTemplate
	})
	if ok {
		return log_condition_template.LogConditionTemplateList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *ListLogConditionTemplatesDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListLogConditionTemplatesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListLogConditionTemplatesResponse) *log_condition_template.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListLogConditionTemplatesDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListLogConditionTemplatesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListLogConditionTemplatesResponse) []*log_condition_template.Name
	})
	if ok {
		return log_condition_template.LogConditionTemplateNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetLogConditionTemplates(); len(resources) > 0 {
			list := make(log_condition_template.LogConditionTemplateNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (log_condition_template.LogConditionTemplateNameList)(nil)
}

func (h *ListLogConditionTemplatesDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListLogConditionTemplatesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ListLogConditionTemplatesResponse) *log_condition_template.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *ListLogConditionTemplatesDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*ListLogConditionTemplatesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*ListLogConditionTemplatesResponse) *log_condition_template.LogConditionTemplate
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *ListLogConditionTemplatesDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*ListLogConditionTemplatesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*ListLogConditionTemplatesResponse) []*log_condition_template.LogConditionTemplate
	})
	if ok {
		return log_condition_template.LogConditionTemplateList(override.OverrideExtractResourceBodies(typedMsg))
	}
	{
		if resources := typedMsg.GetLogConditionTemplates(); len(resources) > 0 {
			return log_condition_template.LogConditionTemplateList(resources)
		}
	}
	return (log_condition_template.LogConditionTemplateList)(nil)
}

func GetListLogConditionTemplatesDescriptor() *ListLogConditionTemplatesDescriptor {
	return listLogConditionTemplatesDescriptor
}

type WatchLogConditionTemplateDescriptor struct{}

type WatchLogConditionTemplateDescriptorClientMsgHandle struct{}

type WatchLogConditionTemplateDescriptorServerMsgHandle struct{}

func (d *WatchLogConditionTemplateDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchLogConditionTemplateRequest{}
}

func (d *WatchLogConditionTemplateDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchLogConditionTemplateResponse{}
}

func (d *WatchLogConditionTemplateDescriptor) IsUnary() bool {
	return false
}

func (d *WatchLogConditionTemplateDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchLogConditionTemplateDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchLogConditionTemplateDescriptor) IsCollection() bool {
	return false
}

func (d *WatchLogConditionTemplateDescriptor) IsPlural() bool {
	return false
}

func (d *WatchLogConditionTemplateDescriptor) HasResource() bool {
	return true
}

func (d *WatchLogConditionTemplateDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchLogConditionTemplateDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchLogConditionTemplateDescriptor) GetMethodName() string {
	return "WatchLogConditionTemplate"
}

func (d *WatchLogConditionTemplateDescriptor) GetFullMethodName() string {
	return "/ntt.alerting.v1.LogConditionTemplateService/WatchLogConditionTemplate"
}

func (d *WatchLogConditionTemplateDescriptor) GetProtoPkgName() string {
	return "ntt.alerting.v1"
}

func (d *WatchLogConditionTemplateDescriptor) GetApiName() string {
	return "LogConditionTemplateService"
}

func (d *WatchLogConditionTemplateDescriptor) GetServiceDomain() string {
	return "alerting.edgelq.com"
}

func (d *WatchLogConditionTemplateDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *WatchLogConditionTemplateDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return logConditionTemplateServiceDescriptor
}

func (d *WatchLogConditionTemplateDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return log_condition_template.GetDescriptor()
}

func (d *WatchLogConditionTemplateDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchLogConditionTemplateDescriptorClientMsgHandle{}
}

func (d *WatchLogConditionTemplateDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchLogConditionTemplateDescriptorServerMsgHandle{}
}

func (h *WatchLogConditionTemplateDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchLogConditionTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchLogConditionTemplateRequest) *log_condition_template.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*log_condition_template.Name)(nil)
}

func (h *WatchLogConditionTemplateDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchLogConditionTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchLogConditionTemplateRequest) []*log_condition_template.Name
	})
	if ok {
		return log_condition_template.LogConditionTemplateNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchLogConditionTemplateDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchLogConditionTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchLogConditionTemplateRequest) *log_condition_template.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchLogConditionTemplateDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchLogConditionTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchLogConditionTemplateRequest) *log_condition_template.LogConditionTemplate
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *WatchLogConditionTemplateDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchLogConditionTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchLogConditionTemplateRequest) []*log_condition_template.LogConditionTemplate
	})
	if ok {
		return log_condition_template.LogConditionTemplateList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *WatchLogConditionTemplateDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchLogConditionTemplateResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchLogConditionTemplateResponse) *log_condition_template.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if resChange := typedMsg.GetChange(); resChange != nil {
			switch tResChange := resChange.ChangeType.(type) {
			case *log_condition_template.LogConditionTemplateChange_Added_:
				return tResChange.Added.GetLogConditionTemplate().GetName()
			case *log_condition_template.LogConditionTemplateChange_Modified_:
				return tResChange.Modified.GetName()
			case *log_condition_template.LogConditionTemplateChange_Removed_:
				return tResChange.Removed.GetName()
			case *log_condition_template.LogConditionTemplateChange_Current_:
				return tResChange.Current.GetLogConditionTemplate().GetName()
			}
		}
	}
	return (*log_condition_template.Name)(nil)
}

func (h *WatchLogConditionTemplateDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchLogConditionTemplateResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchLogConditionTemplateResponse) []*log_condition_template.Name
	})
	if ok {
		return log_condition_template.LogConditionTemplateNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchLogConditionTemplateDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchLogConditionTemplateResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchLogConditionTemplateResponse) *log_condition_template.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchLogConditionTemplateDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchLogConditionTemplateResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchLogConditionTemplateResponse) *log_condition_template.LogConditionTemplate
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	{
		if resChange := typedMsg.GetChange(); resChange != nil {
			switch tResChange := resChange.ChangeType.(type) {
			case *log_condition_template.LogConditionTemplateChange_Added_:
				return tResChange.Added.GetLogConditionTemplate()
			case *log_condition_template.LogConditionTemplateChange_Modified_:
				return tResChange.Modified.GetLogConditionTemplate()
			case *log_condition_template.LogConditionTemplateChange_Current_:
				return tResChange.Current.GetLogConditionTemplate()
			}
		}
	}
	return (*log_condition_template.LogConditionTemplate)(nil)
}

func (h *WatchLogConditionTemplateDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchLogConditionTemplateResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchLogConditionTemplateResponse) []*log_condition_template.LogConditionTemplate
	})
	if ok {
		return log_condition_template.LogConditionTemplateList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetWatchLogConditionTemplateDescriptor() *WatchLogConditionTemplateDescriptor {
	return watchLogConditionTemplateDescriptor
}

type WatchLogConditionTemplatesDescriptor struct{}

type WatchLogConditionTemplatesDescriptorClientMsgHandle struct{}

type WatchLogConditionTemplatesDescriptorServerMsgHandle struct{}

func (d *WatchLogConditionTemplatesDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchLogConditionTemplatesRequest{}
}

func (d *WatchLogConditionTemplatesDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchLogConditionTemplatesResponse{}
}

func (d *WatchLogConditionTemplatesDescriptor) IsUnary() bool {
	return false
}

func (d *WatchLogConditionTemplatesDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchLogConditionTemplatesDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchLogConditionTemplatesDescriptor) IsCollection() bool {
	return true
}

func (d *WatchLogConditionTemplatesDescriptor) IsPlural() bool {
	return true
}

func (d *WatchLogConditionTemplatesDescriptor) HasResource() bool {
	return true
}

func (d *WatchLogConditionTemplatesDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchLogConditionTemplatesDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchLogConditionTemplatesDescriptor) GetMethodName() string {
	return "WatchLogConditionTemplates"
}

func (d *WatchLogConditionTemplatesDescriptor) GetFullMethodName() string {
	return "/ntt.alerting.v1.LogConditionTemplateService/WatchLogConditionTemplates"
}

func (d *WatchLogConditionTemplatesDescriptor) GetProtoPkgName() string {
	return "ntt.alerting.v1"
}

func (d *WatchLogConditionTemplatesDescriptor) GetApiName() string {
	return "LogConditionTemplateService"
}

func (d *WatchLogConditionTemplatesDescriptor) GetServiceDomain() string {
	return "alerting.edgelq.com"
}

func (d *WatchLogConditionTemplatesDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *WatchLogConditionTemplatesDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return logConditionTemplateServiceDescriptor
}

func (d *WatchLogConditionTemplatesDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return log_condition_template.GetDescriptor()
}

func (d *WatchLogConditionTemplatesDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchLogConditionTemplatesDescriptorClientMsgHandle{}
}

func (d *WatchLogConditionTemplatesDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchLogConditionTemplatesDescriptorServerMsgHandle{}
}

func (h *WatchLogConditionTemplatesDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchLogConditionTemplatesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchLogConditionTemplatesRequest) *log_condition_template.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchLogConditionTemplatesDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchLogConditionTemplatesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchLogConditionTemplatesRequest) []*log_condition_template.Name
	})
	if ok {
		return log_condition_template.LogConditionTemplateNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchLogConditionTemplatesDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchLogConditionTemplatesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchLogConditionTemplatesRequest) *log_condition_template.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*log_condition_template.ParentName)(nil)
}

func (h *WatchLogConditionTemplatesDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchLogConditionTemplatesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchLogConditionTemplatesRequest) *log_condition_template.LogConditionTemplate
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *WatchLogConditionTemplatesDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchLogConditionTemplatesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchLogConditionTemplatesRequest) []*log_condition_template.LogConditionTemplate
	})
	if ok {
		return log_condition_template.LogConditionTemplateList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *WatchLogConditionTemplatesDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchLogConditionTemplatesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchLogConditionTemplatesResponse) *log_condition_template.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchLogConditionTemplatesDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchLogConditionTemplatesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchLogConditionTemplatesResponse) []*log_condition_template.Name
	})
	if ok {
		return log_condition_template.LogConditionTemplateNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resChanges := typedMsg.GetLogConditionTemplateChanges(); len(resChanges) > 0 {
			list := make(log_condition_template.LogConditionTemplateNameList, 0, len(resChanges))
			for _, resChange := range resChanges {
				switch tResChange := resChange.ChangeType.(type) {
				case *log_condition_template.LogConditionTemplateChange_Added_:
					list = append(list, tResChange.Added.GetLogConditionTemplate().GetName())
				case *log_condition_template.LogConditionTemplateChange_Modified_:
					list = append(list, tResChange.Modified.GetName())
				case *log_condition_template.LogConditionTemplateChange_Removed_:
					list = append(list, tResChange.Removed.GetName())
				case *log_condition_template.LogConditionTemplateChange_Current_:
					list = append(list, tResChange.Current.GetLogConditionTemplate().GetName())
				}
			}
			return list
		}
	}
	return (log_condition_template.LogConditionTemplateNameList)(nil)
}

func (h *WatchLogConditionTemplatesDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchLogConditionTemplatesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchLogConditionTemplatesResponse) *log_condition_template.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchLogConditionTemplatesDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchLogConditionTemplatesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchLogConditionTemplatesResponse) *log_condition_template.LogConditionTemplate
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *WatchLogConditionTemplatesDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchLogConditionTemplatesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchLogConditionTemplatesResponse) []*log_condition_template.LogConditionTemplate
	})
	if ok {
		return log_condition_template.LogConditionTemplateList(override.OverrideExtractResourceBodies(typedMsg))
	}
	{
		if resChanges := typedMsg.GetLogConditionTemplateChanges(); len(resChanges) > 0 {
			list := make(log_condition_template.LogConditionTemplateList, 0, len(resChanges))
			for _, resChange := range resChanges {
				switch tResChange := resChange.ChangeType.(type) {
				case *log_condition_template.LogConditionTemplateChange_Added_:
					list = append(list, tResChange.Added.GetLogConditionTemplate())
				case *log_condition_template.LogConditionTemplateChange_Modified_:
					list = append(list, tResChange.Modified.GetLogConditionTemplate())
				case *log_condition_template.LogConditionTemplateChange_Current_:
					list = append(list, tResChange.Current.GetLogConditionTemplate())
				}
			}
			return list
		}
	}
	return (log_condition_template.LogConditionTemplateList)(nil)
}

func GetWatchLogConditionTemplatesDescriptor() *WatchLogConditionTemplatesDescriptor {
	return watchLogConditionTemplatesDescriptor
}

type CreateLogConditionTemplateDescriptor struct{}

type CreateLogConditionTemplateDescriptorClientMsgHandle struct{}

type CreateLogConditionTemplateDescriptorServerMsgHandle struct{}

func (d *CreateLogConditionTemplateDescriptor) NewEmptyClientMsg() proto.Message {
	return &CreateLogConditionTemplateRequest{}
}

func (d *CreateLogConditionTemplateDescriptor) NewEmptyServerMsg() proto.Message {
	return &log_condition_template.LogConditionTemplate{}
}

func (d *CreateLogConditionTemplateDescriptor) IsUnary() bool {
	return true
}

func (d *CreateLogConditionTemplateDescriptor) IsClientStream() bool {
	return false
}

func (d *CreateLogConditionTemplateDescriptor) IsServerStream() bool {
	return false
}

func (d *CreateLogConditionTemplateDescriptor) IsCollection() bool {
	return true
}

func (d *CreateLogConditionTemplateDescriptor) IsPlural() bool {
	return false
}

func (d *CreateLogConditionTemplateDescriptor) HasResource() bool {
	return true
}

func (d *CreateLogConditionTemplateDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *CreateLogConditionTemplateDescriptor) GetVerb() string {
	return "create"
}

func (d *CreateLogConditionTemplateDescriptor) GetMethodName() string {
	return "CreateLogConditionTemplate"
}

func (d *CreateLogConditionTemplateDescriptor) GetFullMethodName() string {
	return "/ntt.alerting.v1.LogConditionTemplateService/CreateLogConditionTemplate"
}

func (d *CreateLogConditionTemplateDescriptor) GetProtoPkgName() string {
	return "ntt.alerting.v1"
}

func (d *CreateLogConditionTemplateDescriptor) GetApiName() string {
	return "LogConditionTemplateService"
}

func (d *CreateLogConditionTemplateDescriptor) GetServiceDomain() string {
	return "alerting.edgelq.com"
}

func (d *CreateLogConditionTemplateDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *CreateLogConditionTemplateDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return logConditionTemplateServiceDescriptor
}

func (d *CreateLogConditionTemplateDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return log_condition_template.GetDescriptor()
}

func (d *CreateLogConditionTemplateDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateLogConditionTemplateDescriptorClientMsgHandle{}
}

func (d *CreateLogConditionTemplateDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateLogConditionTemplateDescriptorServerMsgHandle{}
}

func (h *CreateLogConditionTemplateDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateLogConditionTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*CreateLogConditionTemplateRequest) *log_condition_template.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetLogConditionTemplate()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*log_condition_template.Name)(nil)
}

func (h *CreateLogConditionTemplateDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*CreateLogConditionTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*CreateLogConditionTemplateRequest) []*log_condition_template.Name
	})
	if ok {
		return log_condition_template.LogConditionTemplateNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateLogConditionTemplateDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateLogConditionTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*CreateLogConditionTemplateRequest) *log_condition_template.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*log_condition_template.ParentName)(nil)
}

func (h *CreateLogConditionTemplateDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*CreateLogConditionTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*CreateLogConditionTemplateRequest) *log_condition_template.LogConditionTemplate
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	{
		return typedMsg.GetLogConditionTemplate()
	}
	return (*log_condition_template.LogConditionTemplate)(nil)
}

func (h *CreateLogConditionTemplateDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*CreateLogConditionTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*CreateLogConditionTemplateRequest) []*log_condition_template.LogConditionTemplate
	})
	if ok {
		return log_condition_template.LogConditionTemplateList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *CreateLogConditionTemplateDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*log_condition_template.LogConditionTemplate)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*log_condition_template.LogConditionTemplate) *log_condition_template.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*log_condition_template.Name)(nil)
}

func (h *CreateLogConditionTemplateDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*log_condition_template.LogConditionTemplate)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*log_condition_template.LogConditionTemplate) []*log_condition_template.Name
	})
	if ok {
		return log_condition_template.LogConditionTemplateNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateLogConditionTemplateDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*log_condition_template.LogConditionTemplate)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*log_condition_template.LogConditionTemplate) *log_condition_template.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *CreateLogConditionTemplateDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	return msg.(*log_condition_template.LogConditionTemplate)
}

func (h *CreateLogConditionTemplateDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*log_condition_template.LogConditionTemplate)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*log_condition_template.LogConditionTemplate) []*log_condition_template.LogConditionTemplate
	})
	if ok {
		return log_condition_template.LogConditionTemplateList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetCreateLogConditionTemplateDescriptor() *CreateLogConditionTemplateDescriptor {
	return createLogConditionTemplateDescriptor
}

type UpdateLogConditionTemplateDescriptor struct{}

type UpdateLogConditionTemplateDescriptorClientMsgHandle struct{}

type UpdateLogConditionTemplateDescriptorServerMsgHandle struct{}

func (d *UpdateLogConditionTemplateDescriptor) NewEmptyClientMsg() proto.Message {
	return &UpdateLogConditionTemplateRequest{}
}

func (d *UpdateLogConditionTemplateDescriptor) NewEmptyServerMsg() proto.Message {
	return &log_condition_template.LogConditionTemplate{}
}

func (d *UpdateLogConditionTemplateDescriptor) IsUnary() bool {
	return true
}

func (d *UpdateLogConditionTemplateDescriptor) IsClientStream() bool {
	return false
}

func (d *UpdateLogConditionTemplateDescriptor) IsServerStream() bool {
	return false
}

func (d *UpdateLogConditionTemplateDescriptor) IsCollection() bool {
	return false
}

func (d *UpdateLogConditionTemplateDescriptor) IsPlural() bool {
	return false
}

func (d *UpdateLogConditionTemplateDescriptor) HasResource() bool {
	return true
}

func (d *UpdateLogConditionTemplateDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *UpdateLogConditionTemplateDescriptor) GetVerb() string {
	return "update"
}

func (d *UpdateLogConditionTemplateDescriptor) GetMethodName() string {
	return "UpdateLogConditionTemplate"
}

func (d *UpdateLogConditionTemplateDescriptor) GetFullMethodName() string {
	return "/ntt.alerting.v1.LogConditionTemplateService/UpdateLogConditionTemplate"
}

func (d *UpdateLogConditionTemplateDescriptor) GetProtoPkgName() string {
	return "ntt.alerting.v1"
}

func (d *UpdateLogConditionTemplateDescriptor) GetApiName() string {
	return "LogConditionTemplateService"
}

func (d *UpdateLogConditionTemplateDescriptor) GetServiceDomain() string {
	return "alerting.edgelq.com"
}

func (d *UpdateLogConditionTemplateDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *UpdateLogConditionTemplateDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return logConditionTemplateServiceDescriptor
}

func (d *UpdateLogConditionTemplateDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return log_condition_template.GetDescriptor()
}

func (d *UpdateLogConditionTemplateDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateLogConditionTemplateDescriptorClientMsgHandle{}
}

func (d *UpdateLogConditionTemplateDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateLogConditionTemplateDescriptorServerMsgHandle{}
}

func (h *UpdateLogConditionTemplateDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateLogConditionTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*UpdateLogConditionTemplateRequest) *log_condition_template.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetLogConditionTemplate()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*log_condition_template.Name)(nil)
}

func (h *UpdateLogConditionTemplateDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*UpdateLogConditionTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*UpdateLogConditionTemplateRequest) []*log_condition_template.Name
	})
	if ok {
		return log_condition_template.LogConditionTemplateNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateLogConditionTemplateDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateLogConditionTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*UpdateLogConditionTemplateRequest) *log_condition_template.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *UpdateLogConditionTemplateDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*UpdateLogConditionTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*UpdateLogConditionTemplateRequest) *log_condition_template.LogConditionTemplate
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	{
		return typedMsg.GetLogConditionTemplate()
	}
	return (*log_condition_template.LogConditionTemplate)(nil)
}

func (h *UpdateLogConditionTemplateDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*UpdateLogConditionTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*UpdateLogConditionTemplateRequest) []*log_condition_template.LogConditionTemplate
	})
	if ok {
		return log_condition_template.LogConditionTemplateList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *UpdateLogConditionTemplateDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*log_condition_template.LogConditionTemplate)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*log_condition_template.LogConditionTemplate) *log_condition_template.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*log_condition_template.Name)(nil)
}

func (h *UpdateLogConditionTemplateDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*log_condition_template.LogConditionTemplate)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*log_condition_template.LogConditionTemplate) []*log_condition_template.Name
	})
	if ok {
		return log_condition_template.LogConditionTemplateNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateLogConditionTemplateDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*log_condition_template.LogConditionTemplate)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*log_condition_template.LogConditionTemplate) *log_condition_template.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *UpdateLogConditionTemplateDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	return msg.(*log_condition_template.LogConditionTemplate)
}

func (h *UpdateLogConditionTemplateDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*log_condition_template.LogConditionTemplate)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*log_condition_template.LogConditionTemplate) []*log_condition_template.LogConditionTemplate
	})
	if ok {
		return log_condition_template.LogConditionTemplateList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetUpdateLogConditionTemplateDescriptor() *UpdateLogConditionTemplateDescriptor {
	return updateLogConditionTemplateDescriptor
}

type DeleteLogConditionTemplateDescriptor struct{}

type DeleteLogConditionTemplateDescriptorClientMsgHandle struct{}

type DeleteLogConditionTemplateDescriptorServerMsgHandle struct{}

func (d *DeleteLogConditionTemplateDescriptor) NewEmptyClientMsg() proto.Message {
	return &DeleteLogConditionTemplateRequest{}
}

func (d *DeleteLogConditionTemplateDescriptor) NewEmptyServerMsg() proto.Message {
	return &emptypb.Empty{}
}

func (d *DeleteLogConditionTemplateDescriptor) IsUnary() bool {
	return true
}

func (d *DeleteLogConditionTemplateDescriptor) IsClientStream() bool {
	return false
}

func (d *DeleteLogConditionTemplateDescriptor) IsServerStream() bool {
	return false
}

func (d *DeleteLogConditionTemplateDescriptor) IsCollection() bool {
	return false
}

func (d *DeleteLogConditionTemplateDescriptor) IsPlural() bool {
	return false
}

func (d *DeleteLogConditionTemplateDescriptor) HasResource() bool {
	return true
}

func (d *DeleteLogConditionTemplateDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *DeleteLogConditionTemplateDescriptor) GetVerb() string {
	return "delete"
}

func (d *DeleteLogConditionTemplateDescriptor) GetMethodName() string {
	return "DeleteLogConditionTemplate"
}

func (d *DeleteLogConditionTemplateDescriptor) GetFullMethodName() string {
	return "/ntt.alerting.v1.LogConditionTemplateService/DeleteLogConditionTemplate"
}

func (d *DeleteLogConditionTemplateDescriptor) GetProtoPkgName() string {
	return "ntt.alerting.v1"
}

func (d *DeleteLogConditionTemplateDescriptor) GetApiName() string {
	return "LogConditionTemplateService"
}

func (d *DeleteLogConditionTemplateDescriptor) GetServiceDomain() string {
	return "alerting.edgelq.com"
}

func (d *DeleteLogConditionTemplateDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *DeleteLogConditionTemplateDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return logConditionTemplateServiceDescriptor
}

func (d *DeleteLogConditionTemplateDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return log_condition_template.GetDescriptor()
}

func (d *DeleteLogConditionTemplateDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteLogConditionTemplateDescriptorClientMsgHandle{}
}

func (d *DeleteLogConditionTemplateDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteLogConditionTemplateDescriptorServerMsgHandle{}
}

func (h *DeleteLogConditionTemplateDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteLogConditionTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*DeleteLogConditionTemplateRequest) *log_condition_template.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*log_condition_template.Name)(nil)
}

func (h *DeleteLogConditionTemplateDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*DeleteLogConditionTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*DeleteLogConditionTemplateRequest) []*log_condition_template.Name
	})
	if ok {
		return log_condition_template.LogConditionTemplateNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteLogConditionTemplateDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteLogConditionTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*DeleteLogConditionTemplateRequest) *log_condition_template.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *DeleteLogConditionTemplateDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*DeleteLogConditionTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*DeleteLogConditionTemplateRequest) *log_condition_template.LogConditionTemplate
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *DeleteLogConditionTemplateDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*DeleteLogConditionTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*DeleteLogConditionTemplateRequest) []*log_condition_template.LogConditionTemplate
	})
	if ok {
		return log_condition_template.LogConditionTemplateList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *DeleteLogConditionTemplateDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*emptypb.Empty) *log_condition_template.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *DeleteLogConditionTemplateDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*emptypb.Empty) []*log_condition_template.Name
	})
	if ok {
		return log_condition_template.LogConditionTemplateNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteLogConditionTemplateDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*emptypb.Empty) *log_condition_template.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *DeleteLogConditionTemplateDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*emptypb.Empty) *log_condition_template.LogConditionTemplate
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *DeleteLogConditionTemplateDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*emptypb.Empty) []*log_condition_template.LogConditionTemplate
	})
	if ok {
		return log_condition_template.LogConditionTemplateList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetDeleteLogConditionTemplateDescriptor() *DeleteLogConditionTemplateDescriptor {
	return deleteLogConditionTemplateDescriptor
}

type SearchLogConditionTemplatesDescriptor struct{}

type SearchLogConditionTemplatesDescriptorClientMsgHandle struct{}

type SearchLogConditionTemplatesDescriptorServerMsgHandle struct{}

func (d *SearchLogConditionTemplatesDescriptor) NewEmptyClientMsg() proto.Message {
	return &SearchLogConditionTemplatesRequest{}
}

func (d *SearchLogConditionTemplatesDescriptor) NewEmptyServerMsg() proto.Message {
	return &SearchLogConditionTemplatesResponse{}
}

func (d *SearchLogConditionTemplatesDescriptor) IsUnary() bool {
	return true
}

func (d *SearchLogConditionTemplatesDescriptor) IsClientStream() bool {
	return false
}

func (d *SearchLogConditionTemplatesDescriptor) IsServerStream() bool {
	return false
}

func (d *SearchLogConditionTemplatesDescriptor) IsCollection() bool {
	return true
}

func (d *SearchLogConditionTemplatesDescriptor) IsPlural() bool {
	return true
}

func (d *SearchLogConditionTemplatesDescriptor) HasResource() bool {
	return true
}

func (d *SearchLogConditionTemplatesDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *SearchLogConditionTemplatesDescriptor) GetVerb() string {
	return "search"
}

func (d *SearchLogConditionTemplatesDescriptor) GetMethodName() string {
	return "SearchLogConditionTemplates"
}

func (d *SearchLogConditionTemplatesDescriptor) GetFullMethodName() string {
	return "/ntt.alerting.v1.LogConditionTemplateService/SearchLogConditionTemplates"
}

func (d *SearchLogConditionTemplatesDescriptor) GetProtoPkgName() string {
	return "ntt.alerting.v1"
}

func (d *SearchLogConditionTemplatesDescriptor) GetApiName() string {
	return "LogConditionTemplateService"
}

func (d *SearchLogConditionTemplatesDescriptor) GetServiceDomain() string {
	return "alerting.edgelq.com"
}

func (d *SearchLogConditionTemplatesDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *SearchLogConditionTemplatesDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return logConditionTemplateServiceDescriptor
}

func (d *SearchLogConditionTemplatesDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return log_condition_template.GetDescriptor()
}

func (d *SearchLogConditionTemplatesDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &SearchLogConditionTemplatesDescriptorClientMsgHandle{}
}

func (d *SearchLogConditionTemplatesDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &SearchLogConditionTemplatesDescriptorServerMsgHandle{}
}

func (h *SearchLogConditionTemplatesDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*SearchLogConditionTemplatesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*SearchLogConditionTemplatesRequest) *log_condition_template.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *SearchLogConditionTemplatesDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*SearchLogConditionTemplatesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*SearchLogConditionTemplatesRequest) []*log_condition_template.Name
	})
	if ok {
		return log_condition_template.LogConditionTemplateNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *SearchLogConditionTemplatesDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*SearchLogConditionTemplatesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*SearchLogConditionTemplatesRequest) *log_condition_template.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*log_condition_template.ParentName)(nil)
}

func (h *SearchLogConditionTemplatesDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*SearchLogConditionTemplatesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*SearchLogConditionTemplatesRequest) *log_condition_template.LogConditionTemplate
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *SearchLogConditionTemplatesDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*SearchLogConditionTemplatesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*SearchLogConditionTemplatesRequest) []*log_condition_template.LogConditionTemplate
	})
	if ok {
		return log_condition_template.LogConditionTemplateList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *SearchLogConditionTemplatesDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*SearchLogConditionTemplatesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*SearchLogConditionTemplatesResponse) *log_condition_template.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *SearchLogConditionTemplatesDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*SearchLogConditionTemplatesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*SearchLogConditionTemplatesResponse) []*log_condition_template.Name
	})
	if ok {
		return log_condition_template.LogConditionTemplateNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetLogConditionTemplates(); len(resources) > 0 {
			list := make(log_condition_template.LogConditionTemplateNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (log_condition_template.LogConditionTemplateNameList)(nil)
}

func (h *SearchLogConditionTemplatesDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*SearchLogConditionTemplatesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*SearchLogConditionTemplatesResponse) *log_condition_template.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *SearchLogConditionTemplatesDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*SearchLogConditionTemplatesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*SearchLogConditionTemplatesResponse) *log_condition_template.LogConditionTemplate
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *SearchLogConditionTemplatesDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*SearchLogConditionTemplatesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*SearchLogConditionTemplatesResponse) []*log_condition_template.LogConditionTemplate
	})
	if ok {
		return log_condition_template.LogConditionTemplateList(override.OverrideExtractResourceBodies(typedMsg))
	}
	{
		if resources := typedMsg.GetLogConditionTemplates(); len(resources) > 0 {
			return log_condition_template.LogConditionTemplateList(resources)
		}
	}
	return (log_condition_template.LogConditionTemplateList)(nil)
}

func GetSearchLogConditionTemplatesDescriptor() *SearchLogConditionTemplatesDescriptor {
	return searchLogConditionTemplatesDescriptor
}

type LogConditionTemplateServiceDescriptor struct{}

func (d *LogConditionTemplateServiceDescriptor) AllMethodDescriptors() []gotenclient.MethodDescriptor {
	return []gotenclient.MethodDescriptor{
		getLogConditionTemplateDescriptor,
		batchGetLogConditionTemplatesDescriptor,
		listLogConditionTemplatesDescriptor,
		watchLogConditionTemplateDescriptor,
		watchLogConditionTemplatesDescriptor,
		createLogConditionTemplateDescriptor,
		updateLogConditionTemplateDescriptor,
		deleteLogConditionTemplateDescriptor,
		searchLogConditionTemplatesDescriptor,
	}
}

func (d *LogConditionTemplateServiceDescriptor) GetFullAPIName() string {
	return "/ntt.alerting.v1.LogConditionTemplateService"
}

func (d *LogConditionTemplateServiceDescriptor) GetProtoPkgName() string {
	return "ntt.alerting.v1"
}

func (d *LogConditionTemplateServiceDescriptor) GetApiName() string {
	return "LogConditionTemplateService"
}

func (d *LogConditionTemplateServiceDescriptor) GetServiceDomain() string {
	return "alerting.edgelq.com"
}

func (d *LogConditionTemplateServiceDescriptor) GetServiceVersion() string {
	return "v1"
}

func GetLogConditionTemplateServiceDescriptor() *LogConditionTemplateServiceDescriptor {
	return logConditionTemplateServiceDescriptor
}

func initDescriptors() {
	logConditionTemplateServiceDescriptor = &LogConditionTemplateServiceDescriptor{}
	getLogConditionTemplateDescriptor = &GetLogConditionTemplateDescriptor{}
	batchGetLogConditionTemplatesDescriptor = &BatchGetLogConditionTemplatesDescriptor{}
	listLogConditionTemplatesDescriptor = &ListLogConditionTemplatesDescriptor{}
	watchLogConditionTemplateDescriptor = &WatchLogConditionTemplateDescriptor{}
	watchLogConditionTemplatesDescriptor = &WatchLogConditionTemplatesDescriptor{}
	createLogConditionTemplateDescriptor = &CreateLogConditionTemplateDescriptor{}
	updateLogConditionTemplateDescriptor = &UpdateLogConditionTemplateDescriptor{}
	deleteLogConditionTemplateDescriptor = &DeleteLogConditionTemplateDescriptor{}
	searchLogConditionTemplatesDescriptor = &SearchLogConditionTemplatesDescriptor{}
	gotenclient.GetRegistry().RegisterApiDescriptor(logConditionTemplateServiceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(getLogConditionTemplateDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(batchGetLogConditionTemplatesDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(listLogConditionTemplatesDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchLogConditionTemplateDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchLogConditionTemplatesDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(createLogConditionTemplateDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(updateLogConditionTemplateDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(deleteLogConditionTemplateDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(searchLogConditionTemplatesDescriptor)
}

func init() {
	if !descriptorsInitialized {
		initDescriptors()
		descriptorsInitialized = true
	}
}
