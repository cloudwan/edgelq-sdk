// Code generated by protoc-gen-goten-client
// API: LogConditionTemplateService
// DO NOT EDIT!!!

package log_condition_template_client

import (
	"context"

	"google.golang.org/grpc"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	log_condition_template "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/log_condition_template"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = protoimpl.DescBuilder{}
	_ = new(context.Context)
	_ = grpc.ClientConn{}
)

// make sure we're using proto imports
var (
	_ = &log_condition_template.LogConditionTemplate{}
	_ = &emptypb.Empty{}
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// LogConditionTemplateServiceClient is the client API for LogConditionTemplateService.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LogConditionTemplateServiceClient interface {
	GetLogConditionTemplate(ctx context.Context, in *GetLogConditionTemplateRequest, opts ...grpc.CallOption) (*log_condition_template.LogConditionTemplate, error)
	BatchGetLogConditionTemplates(ctx context.Context, in *BatchGetLogConditionTemplatesRequest, opts ...grpc.CallOption) (*BatchGetLogConditionTemplatesResponse, error)
	ListLogConditionTemplates(ctx context.Context, in *ListLogConditionTemplatesRequest, opts ...grpc.CallOption) (*ListLogConditionTemplatesResponse, error)
	WatchLogConditionTemplate(ctx context.Context, in *WatchLogConditionTemplateRequest, opts ...grpc.CallOption) (WatchLogConditionTemplateClientStream, error)
	WatchLogConditionTemplates(ctx context.Context, in *WatchLogConditionTemplatesRequest, opts ...grpc.CallOption) (WatchLogConditionTemplatesClientStream, error)
	CreateLogConditionTemplate(ctx context.Context, in *CreateLogConditionTemplateRequest, opts ...grpc.CallOption) (*log_condition_template.LogConditionTemplate, error)
	UpdateLogConditionTemplate(ctx context.Context, in *UpdateLogConditionTemplateRequest, opts ...grpc.CallOption) (*log_condition_template.LogConditionTemplate, error)
	DeleteLogConditionTemplate(ctx context.Context, in *DeleteLogConditionTemplateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type client struct {
	cc grpc.ClientConnInterface
}

func NewLogConditionTemplateServiceClient(cc grpc.ClientConnInterface) LogConditionTemplateServiceClient {
	return &client{cc}
}

func (c *client) GetLogConditionTemplate(ctx context.Context, in *GetLogConditionTemplateRequest, opts ...grpc.CallOption) (*log_condition_template.LogConditionTemplate, error) {
	out := new(log_condition_template.LogConditionTemplate)
	err := c.cc.Invoke(ctx, "/ntt.alerting.v1.LogConditionTemplateService/GetLogConditionTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) BatchGetLogConditionTemplates(ctx context.Context, in *BatchGetLogConditionTemplatesRequest, opts ...grpc.CallOption) (*BatchGetLogConditionTemplatesResponse, error) {
	out := new(BatchGetLogConditionTemplatesResponse)
	err := c.cc.Invoke(ctx, "/ntt.alerting.v1.LogConditionTemplateService/BatchGetLogConditionTemplates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListLogConditionTemplates(ctx context.Context, in *ListLogConditionTemplatesRequest, opts ...grpc.CallOption) (*ListLogConditionTemplatesResponse, error) {
	out := new(ListLogConditionTemplatesResponse)
	err := c.cc.Invoke(ctx, "/ntt.alerting.v1.LogConditionTemplateService/ListLogConditionTemplates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) WatchLogConditionTemplate(ctx context.Context, in *WatchLogConditionTemplateRequest, opts ...grpc.CallOption) (WatchLogConditionTemplateClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchLogConditionTemplate",
			ServerStreams: true,
		},
		"/ntt.alerting.v1.LogConditionTemplateService/WatchLogConditionTemplate", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchLogConditionTemplateWatchLogConditionTemplateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchLogConditionTemplateClientStream interface {
	Recv() (*WatchLogConditionTemplateResponse, error)
	grpc.ClientStream
}

type watchLogConditionTemplateWatchLogConditionTemplateClient struct {
	grpc.ClientStream
}

func (x *watchLogConditionTemplateWatchLogConditionTemplateClient) Recv() (*WatchLogConditionTemplateResponse, error) {
	m := new(WatchLogConditionTemplateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) WatchLogConditionTemplates(ctx context.Context, in *WatchLogConditionTemplatesRequest, opts ...grpc.CallOption) (WatchLogConditionTemplatesClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchLogConditionTemplates",
			ServerStreams: true,
		},
		"/ntt.alerting.v1.LogConditionTemplateService/WatchLogConditionTemplates", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchLogConditionTemplatesWatchLogConditionTemplatesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchLogConditionTemplatesClientStream interface {
	Recv() (*WatchLogConditionTemplatesResponse, error)
	grpc.ClientStream
}

type watchLogConditionTemplatesWatchLogConditionTemplatesClient struct {
	grpc.ClientStream
}

func (x *watchLogConditionTemplatesWatchLogConditionTemplatesClient) Recv() (*WatchLogConditionTemplatesResponse, error) {
	m := new(WatchLogConditionTemplatesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) CreateLogConditionTemplate(ctx context.Context, in *CreateLogConditionTemplateRequest, opts ...grpc.CallOption) (*log_condition_template.LogConditionTemplate, error) {
	out := new(log_condition_template.LogConditionTemplate)
	err := c.cc.Invoke(ctx, "/ntt.alerting.v1.LogConditionTemplateService/CreateLogConditionTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateLogConditionTemplate(ctx context.Context, in *UpdateLogConditionTemplateRequest, opts ...grpc.CallOption) (*log_condition_template.LogConditionTemplate, error) {
	out := new(log_condition_template.LogConditionTemplate)
	err := c.cc.Invoke(ctx, "/ntt.alerting.v1.LogConditionTemplateService/UpdateLogConditionTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeleteLogConditionTemplate(ctx context.Context, in *DeleteLogConditionTemplateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ntt.alerting.v1.LogConditionTemplateService/DeleteLogConditionTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
