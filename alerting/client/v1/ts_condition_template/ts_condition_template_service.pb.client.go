// Code generated by protoc-gen-goten-client
// API: TsConditionTemplateService
// DO NOT EDIT!!!

package ts_condition_template_client

import (
	"context"

	"google.golang.org/grpc"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	ts_condition_template "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/ts_condition_template"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = protoimpl.DescBuilder{}
	_ = new(context.Context)
	_ = grpc.ClientConn{}
)

// make sure we're using proto imports
var (
	_ = &ts_condition_template.TsConditionTemplate{}
	_ = &emptypb.Empty{}
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TsConditionTemplateServiceClient is the client API for TsConditionTemplateService.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TsConditionTemplateServiceClient interface {
	GetTsConditionTemplate(ctx context.Context, in *GetTsConditionTemplateRequest, opts ...grpc.CallOption) (*ts_condition_template.TsConditionTemplate, error)
	BatchGetTsConditionTemplates(ctx context.Context, in *BatchGetTsConditionTemplatesRequest, opts ...grpc.CallOption) (*BatchGetTsConditionTemplatesResponse, error)
	ListTsConditionTemplates(ctx context.Context, in *ListTsConditionTemplatesRequest, opts ...grpc.CallOption) (*ListTsConditionTemplatesResponse, error)
	WatchTsConditionTemplate(ctx context.Context, in *WatchTsConditionTemplateRequest, opts ...grpc.CallOption) (WatchTsConditionTemplateClientStream, error)
	WatchTsConditionTemplates(ctx context.Context, in *WatchTsConditionTemplatesRequest, opts ...grpc.CallOption) (WatchTsConditionTemplatesClientStream, error)
	CreateTsConditionTemplate(ctx context.Context, in *CreateTsConditionTemplateRequest, opts ...grpc.CallOption) (*ts_condition_template.TsConditionTemplate, error)
	UpdateTsConditionTemplate(ctx context.Context, in *UpdateTsConditionTemplateRequest, opts ...grpc.CallOption) (*ts_condition_template.TsConditionTemplate, error)
	DeleteTsConditionTemplate(ctx context.Context, in *DeleteTsConditionTemplateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SearchTsConditionTemplates(ctx context.Context, in *SearchTsConditionTemplatesRequest, opts ...grpc.CallOption) (*SearchTsConditionTemplatesResponse, error)
}

type client struct {
	cc grpc.ClientConnInterface
}

func NewTsConditionTemplateServiceClient(cc grpc.ClientConnInterface) TsConditionTemplateServiceClient {
	return &client{cc}
}

func (c *client) GetTsConditionTemplate(ctx context.Context, in *GetTsConditionTemplateRequest, opts ...grpc.CallOption) (*ts_condition_template.TsConditionTemplate, error) {
	out := new(ts_condition_template.TsConditionTemplate)
	err := c.cc.Invoke(ctx, "/ntt.alerting.v1.TsConditionTemplateService/GetTsConditionTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) BatchGetTsConditionTemplates(ctx context.Context, in *BatchGetTsConditionTemplatesRequest, opts ...grpc.CallOption) (*BatchGetTsConditionTemplatesResponse, error) {
	out := new(BatchGetTsConditionTemplatesResponse)
	err := c.cc.Invoke(ctx, "/ntt.alerting.v1.TsConditionTemplateService/BatchGetTsConditionTemplates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListTsConditionTemplates(ctx context.Context, in *ListTsConditionTemplatesRequest, opts ...grpc.CallOption) (*ListTsConditionTemplatesResponse, error) {
	out := new(ListTsConditionTemplatesResponse)
	err := c.cc.Invoke(ctx, "/ntt.alerting.v1.TsConditionTemplateService/ListTsConditionTemplates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) WatchTsConditionTemplate(ctx context.Context, in *WatchTsConditionTemplateRequest, opts ...grpc.CallOption) (WatchTsConditionTemplateClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchTsConditionTemplate",
			ServerStreams: true,
		},
		"/ntt.alerting.v1.TsConditionTemplateService/WatchTsConditionTemplate", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchTsConditionTemplateWatchTsConditionTemplateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchTsConditionTemplateClientStream interface {
	Recv() (*WatchTsConditionTemplateResponse, error)
	grpc.ClientStream
}

type watchTsConditionTemplateWatchTsConditionTemplateClient struct {
	grpc.ClientStream
}

func (x *watchTsConditionTemplateWatchTsConditionTemplateClient) Recv() (*WatchTsConditionTemplateResponse, error) {
	m := new(WatchTsConditionTemplateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) WatchTsConditionTemplates(ctx context.Context, in *WatchTsConditionTemplatesRequest, opts ...grpc.CallOption) (WatchTsConditionTemplatesClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchTsConditionTemplates",
			ServerStreams: true,
		},
		"/ntt.alerting.v1.TsConditionTemplateService/WatchTsConditionTemplates", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchTsConditionTemplatesWatchTsConditionTemplatesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchTsConditionTemplatesClientStream interface {
	Recv() (*WatchTsConditionTemplatesResponse, error)
	grpc.ClientStream
}

type watchTsConditionTemplatesWatchTsConditionTemplatesClient struct {
	grpc.ClientStream
}

func (x *watchTsConditionTemplatesWatchTsConditionTemplatesClient) Recv() (*WatchTsConditionTemplatesResponse, error) {
	m := new(WatchTsConditionTemplatesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) CreateTsConditionTemplate(ctx context.Context, in *CreateTsConditionTemplateRequest, opts ...grpc.CallOption) (*ts_condition_template.TsConditionTemplate, error) {
	out := new(ts_condition_template.TsConditionTemplate)
	err := c.cc.Invoke(ctx, "/ntt.alerting.v1.TsConditionTemplateService/CreateTsConditionTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateTsConditionTemplate(ctx context.Context, in *UpdateTsConditionTemplateRequest, opts ...grpc.CallOption) (*ts_condition_template.TsConditionTemplate, error) {
	out := new(ts_condition_template.TsConditionTemplate)
	err := c.cc.Invoke(ctx, "/ntt.alerting.v1.TsConditionTemplateService/UpdateTsConditionTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeleteTsConditionTemplate(ctx context.Context, in *DeleteTsConditionTemplateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ntt.alerting.v1.TsConditionTemplateService/DeleteTsConditionTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) SearchTsConditionTemplates(ctx context.Context, in *SearchTsConditionTemplatesRequest, opts ...grpc.CallOption) (*SearchTsConditionTemplatesResponse, error) {
	out := new(SearchTsConditionTemplatesResponse)
	err := c.cc.Invoke(ctx, "/ntt.alerting.v1.TsConditionTemplateService/SearchTsConditionTemplates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
