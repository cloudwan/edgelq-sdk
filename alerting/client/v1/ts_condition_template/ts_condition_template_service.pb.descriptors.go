// Code generated by protoc-gen-goten-client
// API: TsConditionTemplateService
// DO NOT EDIT!!!

package ts_condition_template_client

import (
	"google.golang.org/protobuf/proto"

	gotenclient "github.com/cloudwan/goten-sdk/runtime/client"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	ts_condition_template "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/ts_condition_template"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = new(proto.Message)
	_ = new(gotenclient.MethodDescriptor)
	_ = gotenresource.WildcardId
)

// make sure we're using proto imports
var (
	_ = &ts_condition_template.TsConditionTemplate{}
	_ = &emptypb.Empty{}
)

var (
	descriptorsInitialized                 bool
	tsConditionTemplateServiceDescriptor   *TsConditionTemplateServiceDescriptor
	getTsConditionTemplateDescriptor       *GetTsConditionTemplateDescriptor
	batchGetTsConditionTemplatesDescriptor *BatchGetTsConditionTemplatesDescriptor
	listTsConditionTemplatesDescriptor     *ListTsConditionTemplatesDescriptor
	watchTsConditionTemplateDescriptor     *WatchTsConditionTemplateDescriptor
	watchTsConditionTemplatesDescriptor    *WatchTsConditionTemplatesDescriptor
	createTsConditionTemplateDescriptor    *CreateTsConditionTemplateDescriptor
	updateTsConditionTemplateDescriptor    *UpdateTsConditionTemplateDescriptor
	deleteTsConditionTemplateDescriptor    *DeleteTsConditionTemplateDescriptor
)

type GetTsConditionTemplateDescriptor struct{}

type GetTsConditionTemplateDescriptorClientMsgHandle struct{}

type GetTsConditionTemplateDescriptorServerMsgHandle struct{}

func (d *GetTsConditionTemplateDescriptor) NewEmptyClientMsg() proto.Message {
	return &GetTsConditionTemplateRequest{}
}

func (d *GetTsConditionTemplateDescriptor) NewEmptyServerMsg() proto.Message {
	return &ts_condition_template.TsConditionTemplate{}
}

func (d *GetTsConditionTemplateDescriptor) IsUnary() bool {
	return true
}

func (d *GetTsConditionTemplateDescriptor) IsClientStream() bool {
	return false
}

func (d *GetTsConditionTemplateDescriptor) IsServerStream() bool {
	return false
}

func (d *GetTsConditionTemplateDescriptor) IsCollection() bool {
	return false
}

func (d *GetTsConditionTemplateDescriptor) IsPlural() bool {
	return false
}

func (d *GetTsConditionTemplateDescriptor) HasResource() bool {
	return true
}

func (d *GetTsConditionTemplateDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *GetTsConditionTemplateDescriptor) GetVerb() string {
	return "get"
}

func (d *GetTsConditionTemplateDescriptor) GetMethodName() string {
	return "GetTsConditionTemplate"
}

func (d *GetTsConditionTemplateDescriptor) GetFullMethodName() string {
	return "/ntt.alerting.v1.TsConditionTemplateService/GetTsConditionTemplate"
}

func (d *GetTsConditionTemplateDescriptor) GetProtoPkgName() string {
	return "ntt.alerting.v1"
}

func (d *GetTsConditionTemplateDescriptor) GetApiName() string {
	return "TsConditionTemplateService"
}

func (d *GetTsConditionTemplateDescriptor) GetServiceDomain() string {
	return "alerting.edgelq.com"
}

func (d *GetTsConditionTemplateDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *GetTsConditionTemplateDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return tsConditionTemplateServiceDescriptor
}

func (d *GetTsConditionTemplateDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return ts_condition_template.GetDescriptor()
}

func (d *GetTsConditionTemplateDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetTsConditionTemplateDescriptorClientMsgHandle{}
}

func (d *GetTsConditionTemplateDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetTsConditionTemplateDescriptorServerMsgHandle{}
}

func (h *GetTsConditionTemplateDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetTsConditionTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*GetTsConditionTemplateRequest) *ts_condition_template.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*ts_condition_template.Name)(nil)
}

func (h *GetTsConditionTemplateDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*GetTsConditionTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*GetTsConditionTemplateRequest) []*ts_condition_template.Name
	})
	if ok {
		return ts_condition_template.TsConditionTemplateNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetTsConditionTemplateDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetTsConditionTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*GetTsConditionTemplateRequest) *ts_condition_template.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *GetTsConditionTemplateDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*GetTsConditionTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*GetTsConditionTemplateRequest) *ts_condition_template.TsConditionTemplate
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *GetTsConditionTemplateDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*GetTsConditionTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*GetTsConditionTemplateRequest) []*ts_condition_template.TsConditionTemplate
	})
	if ok {
		return ts_condition_template.TsConditionTemplateList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *GetTsConditionTemplateDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ts_condition_template.TsConditionTemplate)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ts_condition_template.TsConditionTemplate) *ts_condition_template.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*ts_condition_template.Name)(nil)
}

func (h *GetTsConditionTemplateDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ts_condition_template.TsConditionTemplate)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ts_condition_template.TsConditionTemplate) []*ts_condition_template.Name
	})
	if ok {
		return ts_condition_template.TsConditionTemplateNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetTsConditionTemplateDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ts_condition_template.TsConditionTemplate)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ts_condition_template.TsConditionTemplate) *ts_condition_template.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *GetTsConditionTemplateDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	return msg.(*ts_condition_template.TsConditionTemplate)
}

func (h *GetTsConditionTemplateDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*ts_condition_template.TsConditionTemplate)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*ts_condition_template.TsConditionTemplate) []*ts_condition_template.TsConditionTemplate
	})
	if ok {
		return ts_condition_template.TsConditionTemplateList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetGetTsConditionTemplateDescriptor() *GetTsConditionTemplateDescriptor {
	return getTsConditionTemplateDescriptor
}

type BatchGetTsConditionTemplatesDescriptor struct{}

type BatchGetTsConditionTemplatesDescriptorClientMsgHandle struct{}

type BatchGetTsConditionTemplatesDescriptorServerMsgHandle struct{}

func (d *BatchGetTsConditionTemplatesDescriptor) NewEmptyClientMsg() proto.Message {
	return &BatchGetTsConditionTemplatesRequest{}
}

func (d *BatchGetTsConditionTemplatesDescriptor) NewEmptyServerMsg() proto.Message {
	return &BatchGetTsConditionTemplatesResponse{}
}

func (d *BatchGetTsConditionTemplatesDescriptor) IsUnary() bool {
	return true
}

func (d *BatchGetTsConditionTemplatesDescriptor) IsClientStream() bool {
	return false
}

func (d *BatchGetTsConditionTemplatesDescriptor) IsServerStream() bool {
	return false
}

func (d *BatchGetTsConditionTemplatesDescriptor) IsCollection() bool {
	return false
}

func (d *BatchGetTsConditionTemplatesDescriptor) IsPlural() bool {
	return true
}

func (d *BatchGetTsConditionTemplatesDescriptor) HasResource() bool {
	return true
}

func (d *BatchGetTsConditionTemplatesDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *BatchGetTsConditionTemplatesDescriptor) GetVerb() string {
	return "batchGet"
}

func (d *BatchGetTsConditionTemplatesDescriptor) GetMethodName() string {
	return "BatchGetTsConditionTemplates"
}

func (d *BatchGetTsConditionTemplatesDescriptor) GetFullMethodName() string {
	return "/ntt.alerting.v1.TsConditionTemplateService/BatchGetTsConditionTemplates"
}

func (d *BatchGetTsConditionTemplatesDescriptor) GetProtoPkgName() string {
	return "ntt.alerting.v1"
}

func (d *BatchGetTsConditionTemplatesDescriptor) GetApiName() string {
	return "TsConditionTemplateService"
}

func (d *BatchGetTsConditionTemplatesDescriptor) GetServiceDomain() string {
	return "alerting.edgelq.com"
}

func (d *BatchGetTsConditionTemplatesDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *BatchGetTsConditionTemplatesDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return tsConditionTemplateServiceDescriptor
}

func (d *BatchGetTsConditionTemplatesDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return ts_condition_template.GetDescriptor()
}

func (d *BatchGetTsConditionTemplatesDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetTsConditionTemplatesDescriptorClientMsgHandle{}
}

func (d *BatchGetTsConditionTemplatesDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetTsConditionTemplatesDescriptorServerMsgHandle{}
}

func (h *BatchGetTsConditionTemplatesDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetTsConditionTemplatesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetTsConditionTemplatesRequest) *ts_condition_template.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetTsConditionTemplatesDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetTsConditionTemplatesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetTsConditionTemplatesRequest) []*ts_condition_template.Name
	})
	if ok {
		return ts_condition_template.TsConditionTemplateNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if names := typedMsg.GetNames(); len(names) > 0 {
			return ts_condition_template.TsConditionTemplateNameList(names)
		}
	}
	return (ts_condition_template.TsConditionTemplateNameList)(nil)
}

func (h *BatchGetTsConditionTemplatesDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetTsConditionTemplatesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*BatchGetTsConditionTemplatesRequest) *ts_condition_template.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *BatchGetTsConditionTemplatesDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*BatchGetTsConditionTemplatesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*BatchGetTsConditionTemplatesRequest) *ts_condition_template.TsConditionTemplate
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *BatchGetTsConditionTemplatesDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*BatchGetTsConditionTemplatesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*BatchGetTsConditionTemplatesRequest) []*ts_condition_template.TsConditionTemplate
	})
	if ok {
		return ts_condition_template.TsConditionTemplateList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *BatchGetTsConditionTemplatesDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetTsConditionTemplatesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetTsConditionTemplatesResponse) *ts_condition_template.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetTsConditionTemplatesDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetTsConditionTemplatesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetTsConditionTemplatesResponse) []*ts_condition_template.Name
	})
	if ok {
		return ts_condition_template.TsConditionTemplateNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetTsConditionTemplates(); len(resources) > 0 {
			list := make(ts_condition_template.TsConditionTemplateNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (ts_condition_template.TsConditionTemplateNameList)(nil)
}

func (h *BatchGetTsConditionTemplatesDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetTsConditionTemplatesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*BatchGetTsConditionTemplatesResponse) *ts_condition_template.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *BatchGetTsConditionTemplatesDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*BatchGetTsConditionTemplatesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*BatchGetTsConditionTemplatesResponse) *ts_condition_template.TsConditionTemplate
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *BatchGetTsConditionTemplatesDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*BatchGetTsConditionTemplatesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*BatchGetTsConditionTemplatesResponse) []*ts_condition_template.TsConditionTemplate
	})
	if ok {
		return ts_condition_template.TsConditionTemplateList(override.OverrideExtractResourceBodies(typedMsg))
	}
	{
		if resources := typedMsg.GetTsConditionTemplates(); len(resources) > 0 {
			return ts_condition_template.TsConditionTemplateList(resources)
		}
	}
	return (ts_condition_template.TsConditionTemplateList)(nil)
}

func GetBatchGetTsConditionTemplatesDescriptor() *BatchGetTsConditionTemplatesDescriptor {
	return batchGetTsConditionTemplatesDescriptor
}

type ListTsConditionTemplatesDescriptor struct{}

type ListTsConditionTemplatesDescriptorClientMsgHandle struct{}

type ListTsConditionTemplatesDescriptorServerMsgHandle struct{}

func (d *ListTsConditionTemplatesDescriptor) NewEmptyClientMsg() proto.Message {
	return &ListTsConditionTemplatesRequest{}
}

func (d *ListTsConditionTemplatesDescriptor) NewEmptyServerMsg() proto.Message {
	return &ListTsConditionTemplatesResponse{}
}

func (d *ListTsConditionTemplatesDescriptor) IsUnary() bool {
	return true
}

func (d *ListTsConditionTemplatesDescriptor) IsClientStream() bool {
	return false
}

func (d *ListTsConditionTemplatesDescriptor) IsServerStream() bool {
	return false
}

func (d *ListTsConditionTemplatesDescriptor) IsCollection() bool {
	return true
}

func (d *ListTsConditionTemplatesDescriptor) IsPlural() bool {
	return true
}

func (d *ListTsConditionTemplatesDescriptor) HasResource() bool {
	return true
}

func (d *ListTsConditionTemplatesDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ListTsConditionTemplatesDescriptor) GetVerb() string {
	return "list"
}

func (d *ListTsConditionTemplatesDescriptor) GetMethodName() string {
	return "ListTsConditionTemplates"
}

func (d *ListTsConditionTemplatesDescriptor) GetFullMethodName() string {
	return "/ntt.alerting.v1.TsConditionTemplateService/ListTsConditionTemplates"
}

func (d *ListTsConditionTemplatesDescriptor) GetProtoPkgName() string {
	return "ntt.alerting.v1"
}

func (d *ListTsConditionTemplatesDescriptor) GetApiName() string {
	return "TsConditionTemplateService"
}

func (d *ListTsConditionTemplatesDescriptor) GetServiceDomain() string {
	return "alerting.edgelq.com"
}

func (d *ListTsConditionTemplatesDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *ListTsConditionTemplatesDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return tsConditionTemplateServiceDescriptor
}

func (d *ListTsConditionTemplatesDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return ts_condition_template.GetDescriptor()
}

func (d *ListTsConditionTemplatesDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListTsConditionTemplatesDescriptorClientMsgHandle{}
}

func (d *ListTsConditionTemplatesDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListTsConditionTemplatesDescriptorServerMsgHandle{}
}

func (h *ListTsConditionTemplatesDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListTsConditionTemplatesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListTsConditionTemplatesRequest) *ts_condition_template.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListTsConditionTemplatesDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListTsConditionTemplatesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListTsConditionTemplatesRequest) []*ts_condition_template.Name
	})
	if ok {
		return ts_condition_template.TsConditionTemplateNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *ListTsConditionTemplatesDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListTsConditionTemplatesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ListTsConditionTemplatesRequest) *ts_condition_template.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*ts_condition_template.ParentName)(nil)
}

func (h *ListTsConditionTemplatesDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*ListTsConditionTemplatesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*ListTsConditionTemplatesRequest) *ts_condition_template.TsConditionTemplate
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *ListTsConditionTemplatesDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*ListTsConditionTemplatesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*ListTsConditionTemplatesRequest) []*ts_condition_template.TsConditionTemplate
	})
	if ok {
		return ts_condition_template.TsConditionTemplateList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *ListTsConditionTemplatesDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListTsConditionTemplatesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListTsConditionTemplatesResponse) *ts_condition_template.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListTsConditionTemplatesDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListTsConditionTemplatesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListTsConditionTemplatesResponse) []*ts_condition_template.Name
	})
	if ok {
		return ts_condition_template.TsConditionTemplateNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetTsConditionTemplates(); len(resources) > 0 {
			list := make(ts_condition_template.TsConditionTemplateNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (ts_condition_template.TsConditionTemplateNameList)(nil)
}

func (h *ListTsConditionTemplatesDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListTsConditionTemplatesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ListTsConditionTemplatesResponse) *ts_condition_template.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *ListTsConditionTemplatesDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*ListTsConditionTemplatesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*ListTsConditionTemplatesResponse) *ts_condition_template.TsConditionTemplate
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *ListTsConditionTemplatesDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*ListTsConditionTemplatesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*ListTsConditionTemplatesResponse) []*ts_condition_template.TsConditionTemplate
	})
	if ok {
		return ts_condition_template.TsConditionTemplateList(override.OverrideExtractResourceBodies(typedMsg))
	}
	{
		if resources := typedMsg.GetTsConditionTemplates(); len(resources) > 0 {
			return ts_condition_template.TsConditionTemplateList(resources)
		}
	}
	return (ts_condition_template.TsConditionTemplateList)(nil)
}

func GetListTsConditionTemplatesDescriptor() *ListTsConditionTemplatesDescriptor {
	return listTsConditionTemplatesDescriptor
}

type WatchTsConditionTemplateDescriptor struct{}

type WatchTsConditionTemplateDescriptorClientMsgHandle struct{}

type WatchTsConditionTemplateDescriptorServerMsgHandle struct{}

func (d *WatchTsConditionTemplateDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchTsConditionTemplateRequest{}
}

func (d *WatchTsConditionTemplateDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchTsConditionTemplateResponse{}
}

func (d *WatchTsConditionTemplateDescriptor) IsUnary() bool {
	return false
}

func (d *WatchTsConditionTemplateDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchTsConditionTemplateDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchTsConditionTemplateDescriptor) IsCollection() bool {
	return false
}

func (d *WatchTsConditionTemplateDescriptor) IsPlural() bool {
	return false
}

func (d *WatchTsConditionTemplateDescriptor) HasResource() bool {
	return true
}

func (d *WatchTsConditionTemplateDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchTsConditionTemplateDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchTsConditionTemplateDescriptor) GetMethodName() string {
	return "WatchTsConditionTemplate"
}

func (d *WatchTsConditionTemplateDescriptor) GetFullMethodName() string {
	return "/ntt.alerting.v1.TsConditionTemplateService/WatchTsConditionTemplate"
}

func (d *WatchTsConditionTemplateDescriptor) GetProtoPkgName() string {
	return "ntt.alerting.v1"
}

func (d *WatchTsConditionTemplateDescriptor) GetApiName() string {
	return "TsConditionTemplateService"
}

func (d *WatchTsConditionTemplateDescriptor) GetServiceDomain() string {
	return "alerting.edgelq.com"
}

func (d *WatchTsConditionTemplateDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *WatchTsConditionTemplateDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return tsConditionTemplateServiceDescriptor
}

func (d *WatchTsConditionTemplateDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return ts_condition_template.GetDescriptor()
}

func (d *WatchTsConditionTemplateDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchTsConditionTemplateDescriptorClientMsgHandle{}
}

func (d *WatchTsConditionTemplateDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchTsConditionTemplateDescriptorServerMsgHandle{}
}

func (h *WatchTsConditionTemplateDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchTsConditionTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchTsConditionTemplateRequest) *ts_condition_template.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*ts_condition_template.Name)(nil)
}

func (h *WatchTsConditionTemplateDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchTsConditionTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchTsConditionTemplateRequest) []*ts_condition_template.Name
	})
	if ok {
		return ts_condition_template.TsConditionTemplateNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchTsConditionTemplateDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchTsConditionTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchTsConditionTemplateRequest) *ts_condition_template.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchTsConditionTemplateDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchTsConditionTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchTsConditionTemplateRequest) *ts_condition_template.TsConditionTemplate
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *WatchTsConditionTemplateDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchTsConditionTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchTsConditionTemplateRequest) []*ts_condition_template.TsConditionTemplate
	})
	if ok {
		return ts_condition_template.TsConditionTemplateList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *WatchTsConditionTemplateDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchTsConditionTemplateResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchTsConditionTemplateResponse) *ts_condition_template.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if resChange := typedMsg.GetChange(); resChange != nil {
			switch tResChange := resChange.ChangeType.(type) {
			case *ts_condition_template.TsConditionTemplateChange_Added_:
				return tResChange.Added.GetTsConditionTemplate().GetName()
			case *ts_condition_template.TsConditionTemplateChange_Modified_:
				return tResChange.Modified.GetName()
			case *ts_condition_template.TsConditionTemplateChange_Removed_:
				return tResChange.Removed.GetName()
			case *ts_condition_template.TsConditionTemplateChange_Current_:
				return tResChange.Current.GetTsConditionTemplate().GetName()
			}
		}
	}
	return (*ts_condition_template.Name)(nil)
}

func (h *WatchTsConditionTemplateDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchTsConditionTemplateResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchTsConditionTemplateResponse) []*ts_condition_template.Name
	})
	if ok {
		return ts_condition_template.TsConditionTemplateNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchTsConditionTemplateDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchTsConditionTemplateResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchTsConditionTemplateResponse) *ts_condition_template.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchTsConditionTemplateDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchTsConditionTemplateResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchTsConditionTemplateResponse) *ts_condition_template.TsConditionTemplate
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	{
		if resChange := typedMsg.GetChange(); resChange != nil {
			switch tResChange := resChange.ChangeType.(type) {
			case *ts_condition_template.TsConditionTemplateChange_Added_:
				return tResChange.Added.GetTsConditionTemplate()
			case *ts_condition_template.TsConditionTemplateChange_Modified_:
				return tResChange.Modified.GetTsConditionTemplate()
			case *ts_condition_template.TsConditionTemplateChange_Current_:
				return tResChange.Current.GetTsConditionTemplate()
			}
		}
	}
	return (*ts_condition_template.TsConditionTemplate)(nil)
}

func (h *WatchTsConditionTemplateDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchTsConditionTemplateResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchTsConditionTemplateResponse) []*ts_condition_template.TsConditionTemplate
	})
	if ok {
		return ts_condition_template.TsConditionTemplateList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetWatchTsConditionTemplateDescriptor() *WatchTsConditionTemplateDescriptor {
	return watchTsConditionTemplateDescriptor
}

type WatchTsConditionTemplatesDescriptor struct{}

type WatchTsConditionTemplatesDescriptorClientMsgHandle struct{}

type WatchTsConditionTemplatesDescriptorServerMsgHandle struct{}

func (d *WatchTsConditionTemplatesDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchTsConditionTemplatesRequest{}
}

func (d *WatchTsConditionTemplatesDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchTsConditionTemplatesResponse{}
}

func (d *WatchTsConditionTemplatesDescriptor) IsUnary() bool {
	return false
}

func (d *WatchTsConditionTemplatesDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchTsConditionTemplatesDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchTsConditionTemplatesDescriptor) IsCollection() bool {
	return true
}

func (d *WatchTsConditionTemplatesDescriptor) IsPlural() bool {
	return true
}

func (d *WatchTsConditionTemplatesDescriptor) HasResource() bool {
	return true
}

func (d *WatchTsConditionTemplatesDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchTsConditionTemplatesDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchTsConditionTemplatesDescriptor) GetMethodName() string {
	return "WatchTsConditionTemplates"
}

func (d *WatchTsConditionTemplatesDescriptor) GetFullMethodName() string {
	return "/ntt.alerting.v1.TsConditionTemplateService/WatchTsConditionTemplates"
}

func (d *WatchTsConditionTemplatesDescriptor) GetProtoPkgName() string {
	return "ntt.alerting.v1"
}

func (d *WatchTsConditionTemplatesDescriptor) GetApiName() string {
	return "TsConditionTemplateService"
}

func (d *WatchTsConditionTemplatesDescriptor) GetServiceDomain() string {
	return "alerting.edgelq.com"
}

func (d *WatchTsConditionTemplatesDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *WatchTsConditionTemplatesDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return tsConditionTemplateServiceDescriptor
}

func (d *WatchTsConditionTemplatesDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return ts_condition_template.GetDescriptor()
}

func (d *WatchTsConditionTemplatesDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchTsConditionTemplatesDescriptorClientMsgHandle{}
}

func (d *WatchTsConditionTemplatesDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchTsConditionTemplatesDescriptorServerMsgHandle{}
}

func (h *WatchTsConditionTemplatesDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchTsConditionTemplatesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchTsConditionTemplatesRequest) *ts_condition_template.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchTsConditionTemplatesDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchTsConditionTemplatesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchTsConditionTemplatesRequest) []*ts_condition_template.Name
	})
	if ok {
		return ts_condition_template.TsConditionTemplateNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchTsConditionTemplatesDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchTsConditionTemplatesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchTsConditionTemplatesRequest) *ts_condition_template.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*ts_condition_template.ParentName)(nil)
}

func (h *WatchTsConditionTemplatesDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchTsConditionTemplatesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchTsConditionTemplatesRequest) *ts_condition_template.TsConditionTemplate
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *WatchTsConditionTemplatesDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchTsConditionTemplatesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchTsConditionTemplatesRequest) []*ts_condition_template.TsConditionTemplate
	})
	if ok {
		return ts_condition_template.TsConditionTemplateList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *WatchTsConditionTemplatesDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchTsConditionTemplatesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchTsConditionTemplatesResponse) *ts_condition_template.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchTsConditionTemplatesDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchTsConditionTemplatesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchTsConditionTemplatesResponse) []*ts_condition_template.Name
	})
	if ok {
		return ts_condition_template.TsConditionTemplateNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resChanges := typedMsg.GetTsConditionTemplateChanges(); len(resChanges) > 0 {
			list := make(ts_condition_template.TsConditionTemplateNameList, 0, len(resChanges))
			for _, resChange := range resChanges {
				switch tResChange := resChange.ChangeType.(type) {
				case *ts_condition_template.TsConditionTemplateChange_Added_:
					list = append(list, tResChange.Added.GetTsConditionTemplate().GetName())
				case *ts_condition_template.TsConditionTemplateChange_Modified_:
					list = append(list, tResChange.Modified.GetName())
				case *ts_condition_template.TsConditionTemplateChange_Removed_:
					list = append(list, tResChange.Removed.GetName())
				case *ts_condition_template.TsConditionTemplateChange_Current_:
					list = append(list, tResChange.Current.GetTsConditionTemplate().GetName())
				}
			}
			return list
		}
	}
	return (ts_condition_template.TsConditionTemplateNameList)(nil)
}

func (h *WatchTsConditionTemplatesDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchTsConditionTemplatesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchTsConditionTemplatesResponse) *ts_condition_template.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchTsConditionTemplatesDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchTsConditionTemplatesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchTsConditionTemplatesResponse) *ts_condition_template.TsConditionTemplate
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *WatchTsConditionTemplatesDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchTsConditionTemplatesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchTsConditionTemplatesResponse) []*ts_condition_template.TsConditionTemplate
	})
	if ok {
		return ts_condition_template.TsConditionTemplateList(override.OverrideExtractResourceBodies(typedMsg))
	}
	{
		if resChanges := typedMsg.GetTsConditionTemplateChanges(); len(resChanges) > 0 {
			list := make(ts_condition_template.TsConditionTemplateList, 0, len(resChanges))
			for _, resChange := range resChanges {
				switch tResChange := resChange.ChangeType.(type) {
				case *ts_condition_template.TsConditionTemplateChange_Added_:
					list = append(list, tResChange.Added.GetTsConditionTemplate())
				case *ts_condition_template.TsConditionTemplateChange_Modified_:
					list = append(list, tResChange.Modified.GetTsConditionTemplate())
				case *ts_condition_template.TsConditionTemplateChange_Current_:
					list = append(list, tResChange.Current.GetTsConditionTemplate())
				}
			}
			return list
		}
	}
	return (ts_condition_template.TsConditionTemplateList)(nil)
}

func GetWatchTsConditionTemplatesDescriptor() *WatchTsConditionTemplatesDescriptor {
	return watchTsConditionTemplatesDescriptor
}

type CreateTsConditionTemplateDescriptor struct{}

type CreateTsConditionTemplateDescriptorClientMsgHandle struct{}

type CreateTsConditionTemplateDescriptorServerMsgHandle struct{}

func (d *CreateTsConditionTemplateDescriptor) NewEmptyClientMsg() proto.Message {
	return &CreateTsConditionTemplateRequest{}
}

func (d *CreateTsConditionTemplateDescriptor) NewEmptyServerMsg() proto.Message {
	return &ts_condition_template.TsConditionTemplate{}
}

func (d *CreateTsConditionTemplateDescriptor) IsUnary() bool {
	return true
}

func (d *CreateTsConditionTemplateDescriptor) IsClientStream() bool {
	return false
}

func (d *CreateTsConditionTemplateDescriptor) IsServerStream() bool {
	return false
}

func (d *CreateTsConditionTemplateDescriptor) IsCollection() bool {
	return true
}

func (d *CreateTsConditionTemplateDescriptor) IsPlural() bool {
	return false
}

func (d *CreateTsConditionTemplateDescriptor) HasResource() bool {
	return true
}

func (d *CreateTsConditionTemplateDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *CreateTsConditionTemplateDescriptor) GetVerb() string {
	return "create"
}

func (d *CreateTsConditionTemplateDescriptor) GetMethodName() string {
	return "CreateTsConditionTemplate"
}

func (d *CreateTsConditionTemplateDescriptor) GetFullMethodName() string {
	return "/ntt.alerting.v1.TsConditionTemplateService/CreateTsConditionTemplate"
}

func (d *CreateTsConditionTemplateDescriptor) GetProtoPkgName() string {
	return "ntt.alerting.v1"
}

func (d *CreateTsConditionTemplateDescriptor) GetApiName() string {
	return "TsConditionTemplateService"
}

func (d *CreateTsConditionTemplateDescriptor) GetServiceDomain() string {
	return "alerting.edgelq.com"
}

func (d *CreateTsConditionTemplateDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *CreateTsConditionTemplateDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return tsConditionTemplateServiceDescriptor
}

func (d *CreateTsConditionTemplateDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return ts_condition_template.GetDescriptor()
}

func (d *CreateTsConditionTemplateDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateTsConditionTemplateDescriptorClientMsgHandle{}
}

func (d *CreateTsConditionTemplateDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateTsConditionTemplateDescriptorServerMsgHandle{}
}

func (h *CreateTsConditionTemplateDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateTsConditionTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*CreateTsConditionTemplateRequest) *ts_condition_template.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetTsConditionTemplate()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*ts_condition_template.Name)(nil)
}

func (h *CreateTsConditionTemplateDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*CreateTsConditionTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*CreateTsConditionTemplateRequest) []*ts_condition_template.Name
	})
	if ok {
		return ts_condition_template.TsConditionTemplateNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateTsConditionTemplateDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateTsConditionTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*CreateTsConditionTemplateRequest) *ts_condition_template.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*ts_condition_template.ParentName)(nil)
}

func (h *CreateTsConditionTemplateDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*CreateTsConditionTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*CreateTsConditionTemplateRequest) *ts_condition_template.TsConditionTemplate
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	{
		return typedMsg.GetTsConditionTemplate()
	}
	return (*ts_condition_template.TsConditionTemplate)(nil)
}

func (h *CreateTsConditionTemplateDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*CreateTsConditionTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*CreateTsConditionTemplateRequest) []*ts_condition_template.TsConditionTemplate
	})
	if ok {
		return ts_condition_template.TsConditionTemplateList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *CreateTsConditionTemplateDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ts_condition_template.TsConditionTemplate)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ts_condition_template.TsConditionTemplate) *ts_condition_template.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*ts_condition_template.Name)(nil)
}

func (h *CreateTsConditionTemplateDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ts_condition_template.TsConditionTemplate)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ts_condition_template.TsConditionTemplate) []*ts_condition_template.Name
	})
	if ok {
		return ts_condition_template.TsConditionTemplateNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateTsConditionTemplateDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ts_condition_template.TsConditionTemplate)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ts_condition_template.TsConditionTemplate) *ts_condition_template.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *CreateTsConditionTemplateDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	return msg.(*ts_condition_template.TsConditionTemplate)
}

func (h *CreateTsConditionTemplateDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*ts_condition_template.TsConditionTemplate)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*ts_condition_template.TsConditionTemplate) []*ts_condition_template.TsConditionTemplate
	})
	if ok {
		return ts_condition_template.TsConditionTemplateList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetCreateTsConditionTemplateDescriptor() *CreateTsConditionTemplateDescriptor {
	return createTsConditionTemplateDescriptor
}

type UpdateTsConditionTemplateDescriptor struct{}

type UpdateTsConditionTemplateDescriptorClientMsgHandle struct{}

type UpdateTsConditionTemplateDescriptorServerMsgHandle struct{}

func (d *UpdateTsConditionTemplateDescriptor) NewEmptyClientMsg() proto.Message {
	return &UpdateTsConditionTemplateRequest{}
}

func (d *UpdateTsConditionTemplateDescriptor) NewEmptyServerMsg() proto.Message {
	return &ts_condition_template.TsConditionTemplate{}
}

func (d *UpdateTsConditionTemplateDescriptor) IsUnary() bool {
	return true
}

func (d *UpdateTsConditionTemplateDescriptor) IsClientStream() bool {
	return false
}

func (d *UpdateTsConditionTemplateDescriptor) IsServerStream() bool {
	return false
}

func (d *UpdateTsConditionTemplateDescriptor) IsCollection() bool {
	return false
}

func (d *UpdateTsConditionTemplateDescriptor) IsPlural() bool {
	return false
}

func (d *UpdateTsConditionTemplateDescriptor) HasResource() bool {
	return true
}

func (d *UpdateTsConditionTemplateDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *UpdateTsConditionTemplateDescriptor) GetVerb() string {
	return "update"
}

func (d *UpdateTsConditionTemplateDescriptor) GetMethodName() string {
	return "UpdateTsConditionTemplate"
}

func (d *UpdateTsConditionTemplateDescriptor) GetFullMethodName() string {
	return "/ntt.alerting.v1.TsConditionTemplateService/UpdateTsConditionTemplate"
}

func (d *UpdateTsConditionTemplateDescriptor) GetProtoPkgName() string {
	return "ntt.alerting.v1"
}

func (d *UpdateTsConditionTemplateDescriptor) GetApiName() string {
	return "TsConditionTemplateService"
}

func (d *UpdateTsConditionTemplateDescriptor) GetServiceDomain() string {
	return "alerting.edgelq.com"
}

func (d *UpdateTsConditionTemplateDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *UpdateTsConditionTemplateDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return tsConditionTemplateServiceDescriptor
}

func (d *UpdateTsConditionTemplateDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return ts_condition_template.GetDescriptor()
}

func (d *UpdateTsConditionTemplateDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateTsConditionTemplateDescriptorClientMsgHandle{}
}

func (d *UpdateTsConditionTemplateDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateTsConditionTemplateDescriptorServerMsgHandle{}
}

func (h *UpdateTsConditionTemplateDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateTsConditionTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*UpdateTsConditionTemplateRequest) *ts_condition_template.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetTsConditionTemplate()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*ts_condition_template.Name)(nil)
}

func (h *UpdateTsConditionTemplateDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*UpdateTsConditionTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*UpdateTsConditionTemplateRequest) []*ts_condition_template.Name
	})
	if ok {
		return ts_condition_template.TsConditionTemplateNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateTsConditionTemplateDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateTsConditionTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*UpdateTsConditionTemplateRequest) *ts_condition_template.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *UpdateTsConditionTemplateDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*UpdateTsConditionTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*UpdateTsConditionTemplateRequest) *ts_condition_template.TsConditionTemplate
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	{
		return typedMsg.GetTsConditionTemplate()
	}
	return (*ts_condition_template.TsConditionTemplate)(nil)
}

func (h *UpdateTsConditionTemplateDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*UpdateTsConditionTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*UpdateTsConditionTemplateRequest) []*ts_condition_template.TsConditionTemplate
	})
	if ok {
		return ts_condition_template.TsConditionTemplateList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *UpdateTsConditionTemplateDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ts_condition_template.TsConditionTemplate)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ts_condition_template.TsConditionTemplate) *ts_condition_template.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*ts_condition_template.Name)(nil)
}

func (h *UpdateTsConditionTemplateDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ts_condition_template.TsConditionTemplate)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ts_condition_template.TsConditionTemplate) []*ts_condition_template.Name
	})
	if ok {
		return ts_condition_template.TsConditionTemplateNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateTsConditionTemplateDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ts_condition_template.TsConditionTemplate)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ts_condition_template.TsConditionTemplate) *ts_condition_template.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *UpdateTsConditionTemplateDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	return msg.(*ts_condition_template.TsConditionTemplate)
}

func (h *UpdateTsConditionTemplateDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*ts_condition_template.TsConditionTemplate)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*ts_condition_template.TsConditionTemplate) []*ts_condition_template.TsConditionTemplate
	})
	if ok {
		return ts_condition_template.TsConditionTemplateList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetUpdateTsConditionTemplateDescriptor() *UpdateTsConditionTemplateDescriptor {
	return updateTsConditionTemplateDescriptor
}

type DeleteTsConditionTemplateDescriptor struct{}

type DeleteTsConditionTemplateDescriptorClientMsgHandle struct{}

type DeleteTsConditionTemplateDescriptorServerMsgHandle struct{}

func (d *DeleteTsConditionTemplateDescriptor) NewEmptyClientMsg() proto.Message {
	return &DeleteTsConditionTemplateRequest{}
}

func (d *DeleteTsConditionTemplateDescriptor) NewEmptyServerMsg() proto.Message {
	return &emptypb.Empty{}
}

func (d *DeleteTsConditionTemplateDescriptor) IsUnary() bool {
	return true
}

func (d *DeleteTsConditionTemplateDescriptor) IsClientStream() bool {
	return false
}

func (d *DeleteTsConditionTemplateDescriptor) IsServerStream() bool {
	return false
}

func (d *DeleteTsConditionTemplateDescriptor) IsCollection() bool {
	return false
}

func (d *DeleteTsConditionTemplateDescriptor) IsPlural() bool {
	return false
}

func (d *DeleteTsConditionTemplateDescriptor) HasResource() bool {
	return true
}

func (d *DeleteTsConditionTemplateDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *DeleteTsConditionTemplateDescriptor) GetVerb() string {
	return "delete"
}

func (d *DeleteTsConditionTemplateDescriptor) GetMethodName() string {
	return "DeleteTsConditionTemplate"
}

func (d *DeleteTsConditionTemplateDescriptor) GetFullMethodName() string {
	return "/ntt.alerting.v1.TsConditionTemplateService/DeleteTsConditionTemplate"
}

func (d *DeleteTsConditionTemplateDescriptor) GetProtoPkgName() string {
	return "ntt.alerting.v1"
}

func (d *DeleteTsConditionTemplateDescriptor) GetApiName() string {
	return "TsConditionTemplateService"
}

func (d *DeleteTsConditionTemplateDescriptor) GetServiceDomain() string {
	return "alerting.edgelq.com"
}

func (d *DeleteTsConditionTemplateDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *DeleteTsConditionTemplateDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return tsConditionTemplateServiceDescriptor
}

func (d *DeleteTsConditionTemplateDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return ts_condition_template.GetDescriptor()
}

func (d *DeleteTsConditionTemplateDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteTsConditionTemplateDescriptorClientMsgHandle{}
}

func (d *DeleteTsConditionTemplateDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteTsConditionTemplateDescriptorServerMsgHandle{}
}

func (h *DeleteTsConditionTemplateDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteTsConditionTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*DeleteTsConditionTemplateRequest) *ts_condition_template.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*ts_condition_template.Name)(nil)
}

func (h *DeleteTsConditionTemplateDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*DeleteTsConditionTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*DeleteTsConditionTemplateRequest) []*ts_condition_template.Name
	})
	if ok {
		return ts_condition_template.TsConditionTemplateNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteTsConditionTemplateDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteTsConditionTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*DeleteTsConditionTemplateRequest) *ts_condition_template.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *DeleteTsConditionTemplateDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*DeleteTsConditionTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*DeleteTsConditionTemplateRequest) *ts_condition_template.TsConditionTemplate
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *DeleteTsConditionTemplateDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*DeleteTsConditionTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*DeleteTsConditionTemplateRequest) []*ts_condition_template.TsConditionTemplate
	})
	if ok {
		return ts_condition_template.TsConditionTemplateList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *DeleteTsConditionTemplateDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*emptypb.Empty) *ts_condition_template.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *DeleteTsConditionTemplateDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*emptypb.Empty) []*ts_condition_template.Name
	})
	if ok {
		return ts_condition_template.TsConditionTemplateNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteTsConditionTemplateDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*emptypb.Empty) *ts_condition_template.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *DeleteTsConditionTemplateDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*emptypb.Empty) *ts_condition_template.TsConditionTemplate
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *DeleteTsConditionTemplateDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*emptypb.Empty) []*ts_condition_template.TsConditionTemplate
	})
	if ok {
		return ts_condition_template.TsConditionTemplateList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetDeleteTsConditionTemplateDescriptor() *DeleteTsConditionTemplateDescriptor {
	return deleteTsConditionTemplateDescriptor
}

type TsConditionTemplateServiceDescriptor struct{}

func (d *TsConditionTemplateServiceDescriptor) AllMethodDescriptors() []gotenclient.MethodDescriptor {
	return []gotenclient.MethodDescriptor{
		getTsConditionTemplateDescriptor,
		batchGetTsConditionTemplatesDescriptor,
		listTsConditionTemplatesDescriptor,
		watchTsConditionTemplateDescriptor,
		watchTsConditionTemplatesDescriptor,
		createTsConditionTemplateDescriptor,
		updateTsConditionTemplateDescriptor,
		deleteTsConditionTemplateDescriptor,
	}
}

func (d *TsConditionTemplateServiceDescriptor) GetFullAPIName() string {
	return "/ntt.alerting.v1.TsConditionTemplateService"
}

func (d *TsConditionTemplateServiceDescriptor) GetProtoPkgName() string {
	return "ntt.alerting.v1"
}

func (d *TsConditionTemplateServiceDescriptor) GetApiName() string {
	return "TsConditionTemplateService"
}

func (d *TsConditionTemplateServiceDescriptor) GetServiceDomain() string {
	return "alerting.edgelq.com"
}

func (d *TsConditionTemplateServiceDescriptor) GetServiceVersion() string {
	return "v1"
}

func GetTsConditionTemplateServiceDescriptor() *TsConditionTemplateServiceDescriptor {
	return tsConditionTemplateServiceDescriptor
}

func initDescriptors() {
	tsConditionTemplateServiceDescriptor = &TsConditionTemplateServiceDescriptor{}
	getTsConditionTemplateDescriptor = &GetTsConditionTemplateDescriptor{}
	batchGetTsConditionTemplatesDescriptor = &BatchGetTsConditionTemplatesDescriptor{}
	listTsConditionTemplatesDescriptor = &ListTsConditionTemplatesDescriptor{}
	watchTsConditionTemplateDescriptor = &WatchTsConditionTemplateDescriptor{}
	watchTsConditionTemplatesDescriptor = &WatchTsConditionTemplatesDescriptor{}
	createTsConditionTemplateDescriptor = &CreateTsConditionTemplateDescriptor{}
	updateTsConditionTemplateDescriptor = &UpdateTsConditionTemplateDescriptor{}
	deleteTsConditionTemplateDescriptor = &DeleteTsConditionTemplateDescriptor{}
	gotenclient.GetRegistry().RegisterApiDescriptor(tsConditionTemplateServiceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(getTsConditionTemplateDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(batchGetTsConditionTemplatesDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(listTsConditionTemplatesDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchTsConditionTemplateDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchTsConditionTemplatesDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(createTsConditionTemplateDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(updateTsConditionTemplateDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(deleteTsConditionTemplateDescriptor)
}

func init() {
	if !descriptorsInitialized {
		initDescriptors()
		descriptorsInitialized = true
	}
}
