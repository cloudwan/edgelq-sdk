// Code generated by protoc-gen-goten-client
// API: TsConditionService
// DO NOT EDIT!!!

package ts_condition_client

import (
	"context"

	"google.golang.org/grpc"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	ts_condition "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/ts_condition"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = protoimpl.DescBuilder{}
	_ = new(context.Context)
	_ = grpc.ClientConn{}
)

// make sure we're using proto imports
var (
	_ = &ts_condition.TsCondition{}
	_ = &emptypb.Empty{}
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TsConditionServiceClient is the client API for TsConditionService.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TsConditionServiceClient interface {
	GetTsCondition(ctx context.Context, in *GetTsConditionRequest, opts ...grpc.CallOption) (*ts_condition.TsCondition, error)
	BatchGetTsConditions(ctx context.Context, in *BatchGetTsConditionsRequest, opts ...grpc.CallOption) (*BatchGetTsConditionsResponse, error)
	ListTsConditions(ctx context.Context, in *ListTsConditionsRequest, opts ...grpc.CallOption) (*ListTsConditionsResponse, error)
	WatchTsCondition(ctx context.Context, in *WatchTsConditionRequest, opts ...grpc.CallOption) (WatchTsConditionClientStream, error)
	WatchTsConditions(ctx context.Context, in *WatchTsConditionsRequest, opts ...grpc.CallOption) (WatchTsConditionsClientStream, error)
	CreateTsCondition(ctx context.Context, in *CreateTsConditionRequest, opts ...grpc.CallOption) (*ts_condition.TsCondition, error)
	UpdateTsCondition(ctx context.Context, in *UpdateTsConditionRequest, opts ...grpc.CallOption) (*ts_condition.TsCondition, error)
	DeleteTsCondition(ctx context.Context, in *DeleteTsConditionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SearchTsConditions(ctx context.Context, in *SearchTsConditionsRequest, opts ...grpc.CallOption) (*SearchTsConditionsResponse, error)
}

type client struct {
	cc grpc.ClientConnInterface
}

func NewTsConditionServiceClient(cc grpc.ClientConnInterface) TsConditionServiceClient {
	return &client{cc}
}

func (c *client) GetTsCondition(ctx context.Context, in *GetTsConditionRequest, opts ...grpc.CallOption) (*ts_condition.TsCondition, error) {
	out := new(ts_condition.TsCondition)
	err := c.cc.Invoke(ctx, "/ntt.alerting.v1.TsConditionService/GetTsCondition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) BatchGetTsConditions(ctx context.Context, in *BatchGetTsConditionsRequest, opts ...grpc.CallOption) (*BatchGetTsConditionsResponse, error) {
	out := new(BatchGetTsConditionsResponse)
	err := c.cc.Invoke(ctx, "/ntt.alerting.v1.TsConditionService/BatchGetTsConditions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListTsConditions(ctx context.Context, in *ListTsConditionsRequest, opts ...grpc.CallOption) (*ListTsConditionsResponse, error) {
	out := new(ListTsConditionsResponse)
	err := c.cc.Invoke(ctx, "/ntt.alerting.v1.TsConditionService/ListTsConditions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) WatchTsCondition(ctx context.Context, in *WatchTsConditionRequest, opts ...grpc.CallOption) (WatchTsConditionClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchTsCondition",
			ServerStreams: true,
		},
		"/ntt.alerting.v1.TsConditionService/WatchTsCondition", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchTsConditionWatchTsConditionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchTsConditionClientStream interface {
	Recv() (*WatchTsConditionResponse, error)
	grpc.ClientStream
}

type watchTsConditionWatchTsConditionClient struct {
	grpc.ClientStream
}

func (x *watchTsConditionWatchTsConditionClient) Recv() (*WatchTsConditionResponse, error) {
	m := new(WatchTsConditionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) WatchTsConditions(ctx context.Context, in *WatchTsConditionsRequest, opts ...grpc.CallOption) (WatchTsConditionsClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchTsConditions",
			ServerStreams: true,
		},
		"/ntt.alerting.v1.TsConditionService/WatchTsConditions", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchTsConditionsWatchTsConditionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchTsConditionsClientStream interface {
	Recv() (*WatchTsConditionsResponse, error)
	grpc.ClientStream
}

type watchTsConditionsWatchTsConditionsClient struct {
	grpc.ClientStream
}

func (x *watchTsConditionsWatchTsConditionsClient) Recv() (*WatchTsConditionsResponse, error) {
	m := new(WatchTsConditionsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) CreateTsCondition(ctx context.Context, in *CreateTsConditionRequest, opts ...grpc.CallOption) (*ts_condition.TsCondition, error) {
	out := new(ts_condition.TsCondition)
	err := c.cc.Invoke(ctx, "/ntt.alerting.v1.TsConditionService/CreateTsCondition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateTsCondition(ctx context.Context, in *UpdateTsConditionRequest, opts ...grpc.CallOption) (*ts_condition.TsCondition, error) {
	out := new(ts_condition.TsCondition)
	err := c.cc.Invoke(ctx, "/ntt.alerting.v1.TsConditionService/UpdateTsCondition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeleteTsCondition(ctx context.Context, in *DeleteTsConditionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ntt.alerting.v1.TsConditionService/DeleteTsCondition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) SearchTsConditions(ctx context.Context, in *SearchTsConditionsRequest, opts ...grpc.CallOption) (*SearchTsConditionsResponse, error) {
	out := new(SearchTsConditionsResponse)
	err := c.cc.Invoke(ctx, "/ntt.alerting.v1.TsConditionService/SearchTsConditions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
