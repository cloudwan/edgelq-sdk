// Code generated by protoc-gen-goten-client
// API: DocumentService
// DO NOT EDIT!!!

package document_client

import (
	"google.golang.org/protobuf/proto"

	gotenclient "github.com/cloudwan/goten-sdk/runtime/client"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	document "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/document"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = new(proto.Message)
	_ = new(gotenclient.MethodDescriptor)
	_ = gotenresource.WildcardId
)

// make sure we're using proto imports
var (
	_ = &document.Document{}
	_ = &emptypb.Empty{}
)

var (
	descriptorsInitialized      bool
	documentServiceDescriptor   *DocumentServiceDescriptor
	getDocumentDescriptor       *GetDocumentDescriptor
	batchGetDocumentsDescriptor *BatchGetDocumentsDescriptor
	listDocumentsDescriptor     *ListDocumentsDescriptor
	watchDocumentDescriptor     *WatchDocumentDescriptor
	watchDocumentsDescriptor    *WatchDocumentsDescriptor
	createDocumentDescriptor    *CreateDocumentDescriptor
	updateDocumentDescriptor    *UpdateDocumentDescriptor
	deleteDocumentDescriptor    *DeleteDocumentDescriptor
	searchDocumentsDescriptor   *SearchDocumentsDescriptor
)

type GetDocumentDescriptor struct{}

type GetDocumentDescriptorClientMsgHandle struct{}

type GetDocumentDescriptorServerMsgHandle struct{}

func (d *GetDocumentDescriptor) NewEmptyClientMsg() proto.Message {
	return &GetDocumentRequest{}
}

func (d *GetDocumentDescriptor) NewEmptyServerMsg() proto.Message {
	return &document.Document{}
}

func (d *GetDocumentDescriptor) IsUnary() bool {
	return true
}

func (d *GetDocumentDescriptor) IsClientStream() bool {
	return false
}

func (d *GetDocumentDescriptor) IsServerStream() bool {
	return false
}

func (d *GetDocumentDescriptor) IsCollection() bool {
	return false
}

func (d *GetDocumentDescriptor) IsPlural() bool {
	return false
}

func (d *GetDocumentDescriptor) HasResource() bool {
	return true
}

func (d *GetDocumentDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *GetDocumentDescriptor) GetVerb() string {
	return "get"
}

func (d *GetDocumentDescriptor) GetMethodName() string {
	return "GetDocument"
}

func (d *GetDocumentDescriptor) GetFullMethodName() string {
	return "/ntt.alerting.v1.DocumentService/GetDocument"
}

func (d *GetDocumentDescriptor) GetProtoPkgName() string {
	return "ntt.alerting.v1"
}

func (d *GetDocumentDescriptor) GetApiName() string {
	return "DocumentService"
}

func (d *GetDocumentDescriptor) GetServiceDomain() string {
	return "alerting.edgelq.com"
}

func (d *GetDocumentDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *GetDocumentDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return documentServiceDescriptor
}

func (d *GetDocumentDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return document.GetDescriptor()
}

func (d *GetDocumentDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetDocumentDescriptorClientMsgHandle{}
}

func (d *GetDocumentDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetDocumentDescriptorServerMsgHandle{}
}

func (h *GetDocumentDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetDocumentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*GetDocumentRequest) *document.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*document.Name)(nil)
}

func (h *GetDocumentDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*GetDocumentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*GetDocumentRequest) []*document.Name
	})
	if ok {
		return document.DocumentNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetDocumentDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetDocumentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*GetDocumentRequest) *document.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *GetDocumentDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*GetDocumentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*GetDocumentRequest) *document.Document
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *GetDocumentDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*GetDocumentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*GetDocumentRequest) []*document.Document
	})
	if ok {
		return document.DocumentList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *GetDocumentDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*document.Document)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*document.Document) *document.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*document.Name)(nil)
}

func (h *GetDocumentDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*document.Document)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*document.Document) []*document.Name
	})
	if ok {
		return document.DocumentNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetDocumentDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*document.Document)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*document.Document) *document.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *GetDocumentDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	return msg.(*document.Document)
}

func (h *GetDocumentDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*document.Document)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*document.Document) []*document.Document
	})
	if ok {
		return document.DocumentList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetGetDocumentDescriptor() *GetDocumentDescriptor {
	return getDocumentDescriptor
}

type BatchGetDocumentsDescriptor struct{}

type BatchGetDocumentsDescriptorClientMsgHandle struct{}

type BatchGetDocumentsDescriptorServerMsgHandle struct{}

func (d *BatchGetDocumentsDescriptor) NewEmptyClientMsg() proto.Message {
	return &BatchGetDocumentsRequest{}
}

func (d *BatchGetDocumentsDescriptor) NewEmptyServerMsg() proto.Message {
	return &BatchGetDocumentsResponse{}
}

func (d *BatchGetDocumentsDescriptor) IsUnary() bool {
	return true
}

func (d *BatchGetDocumentsDescriptor) IsClientStream() bool {
	return false
}

func (d *BatchGetDocumentsDescriptor) IsServerStream() bool {
	return false
}

func (d *BatchGetDocumentsDescriptor) IsCollection() bool {
	return false
}

func (d *BatchGetDocumentsDescriptor) IsPlural() bool {
	return true
}

func (d *BatchGetDocumentsDescriptor) HasResource() bool {
	return true
}

func (d *BatchGetDocumentsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *BatchGetDocumentsDescriptor) GetVerb() string {
	return "batchGet"
}

func (d *BatchGetDocumentsDescriptor) GetMethodName() string {
	return "BatchGetDocuments"
}

func (d *BatchGetDocumentsDescriptor) GetFullMethodName() string {
	return "/ntt.alerting.v1.DocumentService/BatchGetDocuments"
}

func (d *BatchGetDocumentsDescriptor) GetProtoPkgName() string {
	return "ntt.alerting.v1"
}

func (d *BatchGetDocumentsDescriptor) GetApiName() string {
	return "DocumentService"
}

func (d *BatchGetDocumentsDescriptor) GetServiceDomain() string {
	return "alerting.edgelq.com"
}

func (d *BatchGetDocumentsDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *BatchGetDocumentsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return documentServiceDescriptor
}

func (d *BatchGetDocumentsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return document.GetDescriptor()
}

func (d *BatchGetDocumentsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetDocumentsDescriptorClientMsgHandle{}
}

func (d *BatchGetDocumentsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetDocumentsDescriptorServerMsgHandle{}
}

func (h *BatchGetDocumentsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetDocumentsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetDocumentsRequest) *document.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetDocumentsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetDocumentsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetDocumentsRequest) []*document.Name
	})
	if ok {
		return document.DocumentNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if names := typedMsg.GetNames(); len(names) > 0 {
			return document.DocumentNameList(names)
		}
	}
	return (document.DocumentNameList)(nil)
}

func (h *BatchGetDocumentsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetDocumentsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*BatchGetDocumentsRequest) *document.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *BatchGetDocumentsDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*BatchGetDocumentsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*BatchGetDocumentsRequest) *document.Document
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *BatchGetDocumentsDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*BatchGetDocumentsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*BatchGetDocumentsRequest) []*document.Document
	})
	if ok {
		return document.DocumentList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *BatchGetDocumentsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetDocumentsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetDocumentsResponse) *document.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetDocumentsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetDocumentsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetDocumentsResponse) []*document.Name
	})
	if ok {
		return document.DocumentNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetDocuments(); len(resources) > 0 {
			list := make(document.DocumentNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (document.DocumentNameList)(nil)
}

func (h *BatchGetDocumentsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetDocumentsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*BatchGetDocumentsResponse) *document.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *BatchGetDocumentsDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*BatchGetDocumentsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*BatchGetDocumentsResponse) *document.Document
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *BatchGetDocumentsDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*BatchGetDocumentsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*BatchGetDocumentsResponse) []*document.Document
	})
	if ok {
		return document.DocumentList(override.OverrideExtractResourceBodies(typedMsg))
	}
	{
		if resources := typedMsg.GetDocuments(); len(resources) > 0 {
			return document.DocumentList(resources)
		}
	}
	return (document.DocumentList)(nil)
}

func GetBatchGetDocumentsDescriptor() *BatchGetDocumentsDescriptor {
	return batchGetDocumentsDescriptor
}

type ListDocumentsDescriptor struct{}

type ListDocumentsDescriptorClientMsgHandle struct{}

type ListDocumentsDescriptorServerMsgHandle struct{}

func (d *ListDocumentsDescriptor) NewEmptyClientMsg() proto.Message {
	return &ListDocumentsRequest{}
}

func (d *ListDocumentsDescriptor) NewEmptyServerMsg() proto.Message {
	return &ListDocumentsResponse{}
}

func (d *ListDocumentsDescriptor) IsUnary() bool {
	return true
}

func (d *ListDocumentsDescriptor) IsClientStream() bool {
	return false
}

func (d *ListDocumentsDescriptor) IsServerStream() bool {
	return false
}

func (d *ListDocumentsDescriptor) IsCollection() bool {
	return true
}

func (d *ListDocumentsDescriptor) IsPlural() bool {
	return true
}

func (d *ListDocumentsDescriptor) HasResource() bool {
	return true
}

func (d *ListDocumentsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ListDocumentsDescriptor) GetVerb() string {
	return "list"
}

func (d *ListDocumentsDescriptor) GetMethodName() string {
	return "ListDocuments"
}

func (d *ListDocumentsDescriptor) GetFullMethodName() string {
	return "/ntt.alerting.v1.DocumentService/ListDocuments"
}

func (d *ListDocumentsDescriptor) GetProtoPkgName() string {
	return "ntt.alerting.v1"
}

func (d *ListDocumentsDescriptor) GetApiName() string {
	return "DocumentService"
}

func (d *ListDocumentsDescriptor) GetServiceDomain() string {
	return "alerting.edgelq.com"
}

func (d *ListDocumentsDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *ListDocumentsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return documentServiceDescriptor
}

func (d *ListDocumentsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return document.GetDescriptor()
}

func (d *ListDocumentsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListDocumentsDescriptorClientMsgHandle{}
}

func (d *ListDocumentsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListDocumentsDescriptorServerMsgHandle{}
}

func (h *ListDocumentsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListDocumentsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListDocumentsRequest) *document.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListDocumentsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListDocumentsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListDocumentsRequest) []*document.Name
	})
	if ok {
		return document.DocumentNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *ListDocumentsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListDocumentsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ListDocumentsRequest) *document.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*document.ParentName)(nil)
}

func (h *ListDocumentsDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*ListDocumentsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*ListDocumentsRequest) *document.Document
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *ListDocumentsDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*ListDocumentsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*ListDocumentsRequest) []*document.Document
	})
	if ok {
		return document.DocumentList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *ListDocumentsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListDocumentsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListDocumentsResponse) *document.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListDocumentsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListDocumentsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListDocumentsResponse) []*document.Name
	})
	if ok {
		return document.DocumentNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetDocuments(); len(resources) > 0 {
			list := make(document.DocumentNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (document.DocumentNameList)(nil)
}

func (h *ListDocumentsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListDocumentsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ListDocumentsResponse) *document.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *ListDocumentsDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*ListDocumentsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*ListDocumentsResponse) *document.Document
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *ListDocumentsDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*ListDocumentsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*ListDocumentsResponse) []*document.Document
	})
	if ok {
		return document.DocumentList(override.OverrideExtractResourceBodies(typedMsg))
	}
	{
		if resources := typedMsg.GetDocuments(); len(resources) > 0 {
			return document.DocumentList(resources)
		}
	}
	return (document.DocumentList)(nil)
}

func GetListDocumentsDescriptor() *ListDocumentsDescriptor {
	return listDocumentsDescriptor
}

type WatchDocumentDescriptor struct{}

type WatchDocumentDescriptorClientMsgHandle struct{}

type WatchDocumentDescriptorServerMsgHandle struct{}

func (d *WatchDocumentDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchDocumentRequest{}
}

func (d *WatchDocumentDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchDocumentResponse{}
}

func (d *WatchDocumentDescriptor) IsUnary() bool {
	return false
}

func (d *WatchDocumentDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchDocumentDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchDocumentDescriptor) IsCollection() bool {
	return false
}

func (d *WatchDocumentDescriptor) IsPlural() bool {
	return false
}

func (d *WatchDocumentDescriptor) HasResource() bool {
	return true
}

func (d *WatchDocumentDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchDocumentDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchDocumentDescriptor) GetMethodName() string {
	return "WatchDocument"
}

func (d *WatchDocumentDescriptor) GetFullMethodName() string {
	return "/ntt.alerting.v1.DocumentService/WatchDocument"
}

func (d *WatchDocumentDescriptor) GetProtoPkgName() string {
	return "ntt.alerting.v1"
}

func (d *WatchDocumentDescriptor) GetApiName() string {
	return "DocumentService"
}

func (d *WatchDocumentDescriptor) GetServiceDomain() string {
	return "alerting.edgelq.com"
}

func (d *WatchDocumentDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *WatchDocumentDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return documentServiceDescriptor
}

func (d *WatchDocumentDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return document.GetDescriptor()
}

func (d *WatchDocumentDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchDocumentDescriptorClientMsgHandle{}
}

func (d *WatchDocumentDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchDocumentDescriptorServerMsgHandle{}
}

func (h *WatchDocumentDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchDocumentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchDocumentRequest) *document.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*document.Name)(nil)
}

func (h *WatchDocumentDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchDocumentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchDocumentRequest) []*document.Name
	})
	if ok {
		return document.DocumentNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchDocumentDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchDocumentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchDocumentRequest) *document.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchDocumentDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchDocumentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchDocumentRequest) *document.Document
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *WatchDocumentDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchDocumentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchDocumentRequest) []*document.Document
	})
	if ok {
		return document.DocumentList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *WatchDocumentDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchDocumentResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchDocumentResponse) *document.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if resChange := typedMsg.GetChange(); resChange != nil {
			switch tResChange := resChange.ChangeType.(type) {
			case *document.DocumentChange_Added_:
				return tResChange.Added.GetDocument().GetName()
			case *document.DocumentChange_Modified_:
				return tResChange.Modified.GetName()
			case *document.DocumentChange_Removed_:
				return tResChange.Removed.GetName()
			case *document.DocumentChange_Current_:
				return tResChange.Current.GetDocument().GetName()
			}
		}
	}
	return (*document.Name)(nil)
}

func (h *WatchDocumentDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchDocumentResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchDocumentResponse) []*document.Name
	})
	if ok {
		return document.DocumentNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchDocumentDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchDocumentResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchDocumentResponse) *document.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchDocumentDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchDocumentResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchDocumentResponse) *document.Document
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	{
		if resChange := typedMsg.GetChange(); resChange != nil {
			switch tResChange := resChange.ChangeType.(type) {
			case *document.DocumentChange_Added_:
				return tResChange.Added.GetDocument()
			case *document.DocumentChange_Modified_:
				return tResChange.Modified.GetDocument()
			case *document.DocumentChange_Current_:
				return tResChange.Current.GetDocument()
			}
		}
	}
	return (*document.Document)(nil)
}

func (h *WatchDocumentDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchDocumentResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchDocumentResponse) []*document.Document
	})
	if ok {
		return document.DocumentList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetWatchDocumentDescriptor() *WatchDocumentDescriptor {
	return watchDocumentDescriptor
}

type WatchDocumentsDescriptor struct{}

type WatchDocumentsDescriptorClientMsgHandle struct{}

type WatchDocumentsDescriptorServerMsgHandle struct{}

func (d *WatchDocumentsDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchDocumentsRequest{}
}

func (d *WatchDocumentsDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchDocumentsResponse{}
}

func (d *WatchDocumentsDescriptor) IsUnary() bool {
	return false
}

func (d *WatchDocumentsDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchDocumentsDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchDocumentsDescriptor) IsCollection() bool {
	return true
}

func (d *WatchDocumentsDescriptor) IsPlural() bool {
	return true
}

func (d *WatchDocumentsDescriptor) HasResource() bool {
	return true
}

func (d *WatchDocumentsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchDocumentsDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchDocumentsDescriptor) GetMethodName() string {
	return "WatchDocuments"
}

func (d *WatchDocumentsDescriptor) GetFullMethodName() string {
	return "/ntt.alerting.v1.DocumentService/WatchDocuments"
}

func (d *WatchDocumentsDescriptor) GetProtoPkgName() string {
	return "ntt.alerting.v1"
}

func (d *WatchDocumentsDescriptor) GetApiName() string {
	return "DocumentService"
}

func (d *WatchDocumentsDescriptor) GetServiceDomain() string {
	return "alerting.edgelq.com"
}

func (d *WatchDocumentsDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *WatchDocumentsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return documentServiceDescriptor
}

func (d *WatchDocumentsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return document.GetDescriptor()
}

func (d *WatchDocumentsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchDocumentsDescriptorClientMsgHandle{}
}

func (d *WatchDocumentsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchDocumentsDescriptorServerMsgHandle{}
}

func (h *WatchDocumentsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchDocumentsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchDocumentsRequest) *document.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchDocumentsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchDocumentsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchDocumentsRequest) []*document.Name
	})
	if ok {
		return document.DocumentNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchDocumentsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchDocumentsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchDocumentsRequest) *document.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*document.ParentName)(nil)
}

func (h *WatchDocumentsDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchDocumentsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchDocumentsRequest) *document.Document
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *WatchDocumentsDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchDocumentsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchDocumentsRequest) []*document.Document
	})
	if ok {
		return document.DocumentList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *WatchDocumentsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchDocumentsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchDocumentsResponse) *document.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchDocumentsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchDocumentsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchDocumentsResponse) []*document.Name
	})
	if ok {
		return document.DocumentNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resChanges := typedMsg.GetDocumentChanges(); len(resChanges) > 0 {
			list := make(document.DocumentNameList, 0, len(resChanges))
			for _, resChange := range resChanges {
				switch tResChange := resChange.ChangeType.(type) {
				case *document.DocumentChange_Added_:
					list = append(list, tResChange.Added.GetDocument().GetName())
				case *document.DocumentChange_Modified_:
					list = append(list, tResChange.Modified.GetName())
				case *document.DocumentChange_Removed_:
					list = append(list, tResChange.Removed.GetName())
				case *document.DocumentChange_Current_:
					list = append(list, tResChange.Current.GetDocument().GetName())
				}
			}
			return list
		}
	}
	return (document.DocumentNameList)(nil)
}

func (h *WatchDocumentsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchDocumentsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchDocumentsResponse) *document.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchDocumentsDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchDocumentsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchDocumentsResponse) *document.Document
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *WatchDocumentsDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchDocumentsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchDocumentsResponse) []*document.Document
	})
	if ok {
		return document.DocumentList(override.OverrideExtractResourceBodies(typedMsg))
	}
	{
		if resChanges := typedMsg.GetDocumentChanges(); len(resChanges) > 0 {
			list := make(document.DocumentList, 0, len(resChanges))
			for _, resChange := range resChanges {
				switch tResChange := resChange.ChangeType.(type) {
				case *document.DocumentChange_Added_:
					list = append(list, tResChange.Added.GetDocument())
				case *document.DocumentChange_Modified_:
					list = append(list, tResChange.Modified.GetDocument())
				case *document.DocumentChange_Current_:
					list = append(list, tResChange.Current.GetDocument())
				}
			}
			return list
		}
	}
	return (document.DocumentList)(nil)
}

func GetWatchDocumentsDescriptor() *WatchDocumentsDescriptor {
	return watchDocumentsDescriptor
}

type CreateDocumentDescriptor struct{}

type CreateDocumentDescriptorClientMsgHandle struct{}

type CreateDocumentDescriptorServerMsgHandle struct{}

func (d *CreateDocumentDescriptor) NewEmptyClientMsg() proto.Message {
	return &CreateDocumentRequest{}
}

func (d *CreateDocumentDescriptor) NewEmptyServerMsg() proto.Message {
	return &document.Document{}
}

func (d *CreateDocumentDescriptor) IsUnary() bool {
	return true
}

func (d *CreateDocumentDescriptor) IsClientStream() bool {
	return false
}

func (d *CreateDocumentDescriptor) IsServerStream() bool {
	return false
}

func (d *CreateDocumentDescriptor) IsCollection() bool {
	return true
}

func (d *CreateDocumentDescriptor) IsPlural() bool {
	return false
}

func (d *CreateDocumentDescriptor) HasResource() bool {
	return true
}

func (d *CreateDocumentDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *CreateDocumentDescriptor) GetVerb() string {
	return "create"
}

func (d *CreateDocumentDescriptor) GetMethodName() string {
	return "CreateDocument"
}

func (d *CreateDocumentDescriptor) GetFullMethodName() string {
	return "/ntt.alerting.v1.DocumentService/CreateDocument"
}

func (d *CreateDocumentDescriptor) GetProtoPkgName() string {
	return "ntt.alerting.v1"
}

func (d *CreateDocumentDescriptor) GetApiName() string {
	return "DocumentService"
}

func (d *CreateDocumentDescriptor) GetServiceDomain() string {
	return "alerting.edgelq.com"
}

func (d *CreateDocumentDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *CreateDocumentDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return documentServiceDescriptor
}

func (d *CreateDocumentDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return document.GetDescriptor()
}

func (d *CreateDocumentDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateDocumentDescriptorClientMsgHandle{}
}

func (d *CreateDocumentDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateDocumentDescriptorServerMsgHandle{}
}

func (h *CreateDocumentDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateDocumentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*CreateDocumentRequest) *document.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetDocument()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*document.Name)(nil)
}

func (h *CreateDocumentDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*CreateDocumentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*CreateDocumentRequest) []*document.Name
	})
	if ok {
		return document.DocumentNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateDocumentDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateDocumentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*CreateDocumentRequest) *document.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*document.ParentName)(nil)
}

func (h *CreateDocumentDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*CreateDocumentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*CreateDocumentRequest) *document.Document
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	{
		return typedMsg.GetDocument()
	}
	return (*document.Document)(nil)
}

func (h *CreateDocumentDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*CreateDocumentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*CreateDocumentRequest) []*document.Document
	})
	if ok {
		return document.DocumentList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *CreateDocumentDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*document.Document)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*document.Document) *document.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*document.Name)(nil)
}

func (h *CreateDocumentDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*document.Document)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*document.Document) []*document.Name
	})
	if ok {
		return document.DocumentNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateDocumentDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*document.Document)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*document.Document) *document.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *CreateDocumentDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	return msg.(*document.Document)
}

func (h *CreateDocumentDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*document.Document)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*document.Document) []*document.Document
	})
	if ok {
		return document.DocumentList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetCreateDocumentDescriptor() *CreateDocumentDescriptor {
	return createDocumentDescriptor
}

type UpdateDocumentDescriptor struct{}

type UpdateDocumentDescriptorClientMsgHandle struct{}

type UpdateDocumentDescriptorServerMsgHandle struct{}

func (d *UpdateDocumentDescriptor) NewEmptyClientMsg() proto.Message {
	return &UpdateDocumentRequest{}
}

func (d *UpdateDocumentDescriptor) NewEmptyServerMsg() proto.Message {
	return &document.Document{}
}

func (d *UpdateDocumentDescriptor) IsUnary() bool {
	return true
}

func (d *UpdateDocumentDescriptor) IsClientStream() bool {
	return false
}

func (d *UpdateDocumentDescriptor) IsServerStream() bool {
	return false
}

func (d *UpdateDocumentDescriptor) IsCollection() bool {
	return false
}

func (d *UpdateDocumentDescriptor) IsPlural() bool {
	return false
}

func (d *UpdateDocumentDescriptor) HasResource() bool {
	return true
}

func (d *UpdateDocumentDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *UpdateDocumentDescriptor) GetVerb() string {
	return "update"
}

func (d *UpdateDocumentDescriptor) GetMethodName() string {
	return "UpdateDocument"
}

func (d *UpdateDocumentDescriptor) GetFullMethodName() string {
	return "/ntt.alerting.v1.DocumentService/UpdateDocument"
}

func (d *UpdateDocumentDescriptor) GetProtoPkgName() string {
	return "ntt.alerting.v1"
}

func (d *UpdateDocumentDescriptor) GetApiName() string {
	return "DocumentService"
}

func (d *UpdateDocumentDescriptor) GetServiceDomain() string {
	return "alerting.edgelq.com"
}

func (d *UpdateDocumentDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *UpdateDocumentDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return documentServiceDescriptor
}

func (d *UpdateDocumentDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return document.GetDescriptor()
}

func (d *UpdateDocumentDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateDocumentDescriptorClientMsgHandle{}
}

func (d *UpdateDocumentDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateDocumentDescriptorServerMsgHandle{}
}

func (h *UpdateDocumentDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateDocumentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*UpdateDocumentRequest) *document.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetDocument()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*document.Name)(nil)
}

func (h *UpdateDocumentDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*UpdateDocumentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*UpdateDocumentRequest) []*document.Name
	})
	if ok {
		return document.DocumentNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateDocumentDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateDocumentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*UpdateDocumentRequest) *document.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *UpdateDocumentDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*UpdateDocumentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*UpdateDocumentRequest) *document.Document
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	{
		return typedMsg.GetDocument()
	}
	return (*document.Document)(nil)
}

func (h *UpdateDocumentDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*UpdateDocumentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*UpdateDocumentRequest) []*document.Document
	})
	if ok {
		return document.DocumentList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *UpdateDocumentDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*document.Document)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*document.Document) *document.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*document.Name)(nil)
}

func (h *UpdateDocumentDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*document.Document)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*document.Document) []*document.Name
	})
	if ok {
		return document.DocumentNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateDocumentDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*document.Document)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*document.Document) *document.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *UpdateDocumentDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	return msg.(*document.Document)
}

func (h *UpdateDocumentDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*document.Document)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*document.Document) []*document.Document
	})
	if ok {
		return document.DocumentList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetUpdateDocumentDescriptor() *UpdateDocumentDescriptor {
	return updateDocumentDescriptor
}

type DeleteDocumentDescriptor struct{}

type DeleteDocumentDescriptorClientMsgHandle struct{}

type DeleteDocumentDescriptorServerMsgHandle struct{}

func (d *DeleteDocumentDescriptor) NewEmptyClientMsg() proto.Message {
	return &DeleteDocumentRequest{}
}

func (d *DeleteDocumentDescriptor) NewEmptyServerMsg() proto.Message {
	return &emptypb.Empty{}
}

func (d *DeleteDocumentDescriptor) IsUnary() bool {
	return true
}

func (d *DeleteDocumentDescriptor) IsClientStream() bool {
	return false
}

func (d *DeleteDocumentDescriptor) IsServerStream() bool {
	return false
}

func (d *DeleteDocumentDescriptor) IsCollection() bool {
	return false
}

func (d *DeleteDocumentDescriptor) IsPlural() bool {
	return false
}

func (d *DeleteDocumentDescriptor) HasResource() bool {
	return true
}

func (d *DeleteDocumentDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *DeleteDocumentDescriptor) GetVerb() string {
	return "delete"
}

func (d *DeleteDocumentDescriptor) GetMethodName() string {
	return "DeleteDocument"
}

func (d *DeleteDocumentDescriptor) GetFullMethodName() string {
	return "/ntt.alerting.v1.DocumentService/DeleteDocument"
}

func (d *DeleteDocumentDescriptor) GetProtoPkgName() string {
	return "ntt.alerting.v1"
}

func (d *DeleteDocumentDescriptor) GetApiName() string {
	return "DocumentService"
}

func (d *DeleteDocumentDescriptor) GetServiceDomain() string {
	return "alerting.edgelq.com"
}

func (d *DeleteDocumentDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *DeleteDocumentDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return documentServiceDescriptor
}

func (d *DeleteDocumentDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return document.GetDescriptor()
}

func (d *DeleteDocumentDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteDocumentDescriptorClientMsgHandle{}
}

func (d *DeleteDocumentDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteDocumentDescriptorServerMsgHandle{}
}

func (h *DeleteDocumentDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteDocumentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*DeleteDocumentRequest) *document.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*document.Name)(nil)
}

func (h *DeleteDocumentDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*DeleteDocumentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*DeleteDocumentRequest) []*document.Name
	})
	if ok {
		return document.DocumentNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteDocumentDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteDocumentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*DeleteDocumentRequest) *document.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *DeleteDocumentDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*DeleteDocumentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*DeleteDocumentRequest) *document.Document
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *DeleteDocumentDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*DeleteDocumentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*DeleteDocumentRequest) []*document.Document
	})
	if ok {
		return document.DocumentList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *DeleteDocumentDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*emptypb.Empty) *document.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *DeleteDocumentDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*emptypb.Empty) []*document.Name
	})
	if ok {
		return document.DocumentNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteDocumentDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*emptypb.Empty) *document.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *DeleteDocumentDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*emptypb.Empty) *document.Document
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *DeleteDocumentDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*emptypb.Empty) []*document.Document
	})
	if ok {
		return document.DocumentList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetDeleteDocumentDescriptor() *DeleteDocumentDescriptor {
	return deleteDocumentDescriptor
}

type SearchDocumentsDescriptor struct{}

type SearchDocumentsDescriptorClientMsgHandle struct{}

type SearchDocumentsDescriptorServerMsgHandle struct{}

func (d *SearchDocumentsDescriptor) NewEmptyClientMsg() proto.Message {
	return &SearchDocumentsRequest{}
}

func (d *SearchDocumentsDescriptor) NewEmptyServerMsg() proto.Message {
	return &SearchDocumentsResponse{}
}

func (d *SearchDocumentsDescriptor) IsUnary() bool {
	return true
}

func (d *SearchDocumentsDescriptor) IsClientStream() bool {
	return false
}

func (d *SearchDocumentsDescriptor) IsServerStream() bool {
	return false
}

func (d *SearchDocumentsDescriptor) IsCollection() bool {
	return true
}

func (d *SearchDocumentsDescriptor) IsPlural() bool {
	return true
}

func (d *SearchDocumentsDescriptor) HasResource() bool {
	return true
}

func (d *SearchDocumentsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *SearchDocumentsDescriptor) GetVerb() string {
	return "search"
}

func (d *SearchDocumentsDescriptor) GetMethodName() string {
	return "SearchDocuments"
}

func (d *SearchDocumentsDescriptor) GetFullMethodName() string {
	return "/ntt.alerting.v1.DocumentService/SearchDocuments"
}

func (d *SearchDocumentsDescriptor) GetProtoPkgName() string {
	return "ntt.alerting.v1"
}

func (d *SearchDocumentsDescriptor) GetApiName() string {
	return "DocumentService"
}

func (d *SearchDocumentsDescriptor) GetServiceDomain() string {
	return "alerting.edgelq.com"
}

func (d *SearchDocumentsDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *SearchDocumentsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return documentServiceDescriptor
}

func (d *SearchDocumentsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return document.GetDescriptor()
}

func (d *SearchDocumentsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &SearchDocumentsDescriptorClientMsgHandle{}
}

func (d *SearchDocumentsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &SearchDocumentsDescriptorServerMsgHandle{}
}

func (h *SearchDocumentsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*SearchDocumentsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*SearchDocumentsRequest) *document.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *SearchDocumentsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*SearchDocumentsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*SearchDocumentsRequest) []*document.Name
	})
	if ok {
		return document.DocumentNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *SearchDocumentsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*SearchDocumentsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*SearchDocumentsRequest) *document.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*document.ParentName)(nil)
}

func (h *SearchDocumentsDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*SearchDocumentsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*SearchDocumentsRequest) *document.Document
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *SearchDocumentsDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*SearchDocumentsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*SearchDocumentsRequest) []*document.Document
	})
	if ok {
		return document.DocumentList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *SearchDocumentsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*SearchDocumentsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*SearchDocumentsResponse) *document.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *SearchDocumentsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*SearchDocumentsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*SearchDocumentsResponse) []*document.Name
	})
	if ok {
		return document.DocumentNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetDocuments(); len(resources) > 0 {
			list := make(document.DocumentNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (document.DocumentNameList)(nil)
}

func (h *SearchDocumentsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*SearchDocumentsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*SearchDocumentsResponse) *document.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *SearchDocumentsDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*SearchDocumentsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*SearchDocumentsResponse) *document.Document
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *SearchDocumentsDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*SearchDocumentsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*SearchDocumentsResponse) []*document.Document
	})
	if ok {
		return document.DocumentList(override.OverrideExtractResourceBodies(typedMsg))
	}
	{
		if resources := typedMsg.GetDocuments(); len(resources) > 0 {
			return document.DocumentList(resources)
		}
	}
	return (document.DocumentList)(nil)
}

func GetSearchDocumentsDescriptor() *SearchDocumentsDescriptor {
	return searchDocumentsDescriptor
}

type DocumentServiceDescriptor struct{}

func (d *DocumentServiceDescriptor) AllMethodDescriptors() []gotenclient.MethodDescriptor {
	return []gotenclient.MethodDescriptor{
		getDocumentDescriptor,
		batchGetDocumentsDescriptor,
		listDocumentsDescriptor,
		watchDocumentDescriptor,
		watchDocumentsDescriptor,
		createDocumentDescriptor,
		updateDocumentDescriptor,
		deleteDocumentDescriptor,
		searchDocumentsDescriptor,
	}
}

func (d *DocumentServiceDescriptor) GetFullAPIName() string {
	return "/ntt.alerting.v1.DocumentService"
}

func (d *DocumentServiceDescriptor) GetProtoPkgName() string {
	return "ntt.alerting.v1"
}

func (d *DocumentServiceDescriptor) GetApiName() string {
	return "DocumentService"
}

func (d *DocumentServiceDescriptor) GetServiceDomain() string {
	return "alerting.edgelq.com"
}

func (d *DocumentServiceDescriptor) GetServiceVersion() string {
	return "v1"
}

func GetDocumentServiceDescriptor() *DocumentServiceDescriptor {
	return documentServiceDescriptor
}

func initDescriptors() {
	documentServiceDescriptor = &DocumentServiceDescriptor{}
	getDocumentDescriptor = &GetDocumentDescriptor{}
	batchGetDocumentsDescriptor = &BatchGetDocumentsDescriptor{}
	listDocumentsDescriptor = &ListDocumentsDescriptor{}
	watchDocumentDescriptor = &WatchDocumentDescriptor{}
	watchDocumentsDescriptor = &WatchDocumentsDescriptor{}
	createDocumentDescriptor = &CreateDocumentDescriptor{}
	updateDocumentDescriptor = &UpdateDocumentDescriptor{}
	deleteDocumentDescriptor = &DeleteDocumentDescriptor{}
	searchDocumentsDescriptor = &SearchDocumentsDescriptor{}
	gotenclient.GetRegistry().RegisterApiDescriptor(documentServiceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(getDocumentDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(batchGetDocumentsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(listDocumentsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchDocumentDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchDocumentsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(createDocumentDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(updateDocumentDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(deleteDocumentDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(searchDocumentsDescriptor)
}

func init() {
	if !descriptorsInitialized {
		initDescriptors()
		descriptorsInitialized = true
	}
}
