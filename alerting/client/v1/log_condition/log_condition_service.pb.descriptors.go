// Code generated by protoc-gen-goten-client
// API: LogConditionService
// DO NOT EDIT!!!

package log_condition_client

import (
	"google.golang.org/protobuf/proto"

	gotenclient "github.com/cloudwan/goten-sdk/runtime/client"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	log_condition "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/log_condition"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = new(proto.Message)
	_ = new(gotenclient.MethodDescriptor)
	_ = gotenresource.WildcardId
)

// make sure we're using proto imports
var (
	_ = &log_condition.LogCondition{}
	_ = &emptypb.Empty{}
)

var (
	descriptorsInitialized          bool
	logConditionServiceDescriptor   *LogConditionServiceDescriptor
	getLogConditionDescriptor       *GetLogConditionDescriptor
	batchGetLogConditionsDescriptor *BatchGetLogConditionsDescriptor
	listLogConditionsDescriptor     *ListLogConditionsDescriptor
	watchLogConditionDescriptor     *WatchLogConditionDescriptor
	watchLogConditionsDescriptor    *WatchLogConditionsDescriptor
	createLogConditionDescriptor    *CreateLogConditionDescriptor
	updateLogConditionDescriptor    *UpdateLogConditionDescriptor
	deleteLogConditionDescriptor    *DeleteLogConditionDescriptor
	searchLogConditionsDescriptor   *SearchLogConditionsDescriptor
)

type GetLogConditionDescriptor struct{}

type GetLogConditionDescriptorClientMsgHandle struct{}

type GetLogConditionDescriptorServerMsgHandle struct{}

func (d *GetLogConditionDescriptor) NewEmptyClientMsg() proto.Message {
	return &GetLogConditionRequest{}
}

func (d *GetLogConditionDescriptor) NewEmptyServerMsg() proto.Message {
	return &log_condition.LogCondition{}
}

func (d *GetLogConditionDescriptor) IsUnary() bool {
	return true
}

func (d *GetLogConditionDescriptor) IsClientStream() bool {
	return false
}

func (d *GetLogConditionDescriptor) IsServerStream() bool {
	return false
}

func (d *GetLogConditionDescriptor) IsCollection() bool {
	return false
}

func (d *GetLogConditionDescriptor) IsPlural() bool {
	return false
}

func (d *GetLogConditionDescriptor) HasResource() bool {
	return true
}

func (d *GetLogConditionDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *GetLogConditionDescriptor) GetVerb() string {
	return "get"
}

func (d *GetLogConditionDescriptor) GetMethodName() string {
	return "GetLogCondition"
}

func (d *GetLogConditionDescriptor) GetFullMethodName() string {
	return "/ntt.alerting.v1.LogConditionService/GetLogCondition"
}

func (d *GetLogConditionDescriptor) GetProtoPkgName() string {
	return "ntt.alerting.v1"
}

func (d *GetLogConditionDescriptor) GetApiName() string {
	return "LogConditionService"
}

func (d *GetLogConditionDescriptor) GetServiceDomain() string {
	return "alerting.edgelq.com"
}

func (d *GetLogConditionDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *GetLogConditionDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return logConditionServiceDescriptor
}

func (d *GetLogConditionDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return log_condition.GetDescriptor()
}

func (d *GetLogConditionDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetLogConditionDescriptorClientMsgHandle{}
}

func (d *GetLogConditionDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetLogConditionDescriptorServerMsgHandle{}
}

func (h *GetLogConditionDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetLogConditionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*GetLogConditionRequest) *log_condition.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*log_condition.Name)(nil)
}

func (h *GetLogConditionDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*GetLogConditionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*GetLogConditionRequest) []*log_condition.Name
	})
	if ok {
		return log_condition.LogConditionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetLogConditionDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetLogConditionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*GetLogConditionRequest) *log_condition.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *GetLogConditionDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*GetLogConditionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*GetLogConditionRequest) *log_condition.LogCondition
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *GetLogConditionDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*GetLogConditionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*GetLogConditionRequest) []*log_condition.LogCondition
	})
	if ok {
		return log_condition.LogConditionList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *GetLogConditionDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*log_condition.LogCondition)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*log_condition.LogCondition) *log_condition.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*log_condition.Name)(nil)
}

func (h *GetLogConditionDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*log_condition.LogCondition)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*log_condition.LogCondition) []*log_condition.Name
	})
	if ok {
		return log_condition.LogConditionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetLogConditionDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*log_condition.LogCondition)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*log_condition.LogCondition) *log_condition.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *GetLogConditionDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	return msg.(*log_condition.LogCondition)
}

func (h *GetLogConditionDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*log_condition.LogCondition)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*log_condition.LogCondition) []*log_condition.LogCondition
	})
	if ok {
		return log_condition.LogConditionList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetGetLogConditionDescriptor() *GetLogConditionDescriptor {
	return getLogConditionDescriptor
}

type BatchGetLogConditionsDescriptor struct{}

type BatchGetLogConditionsDescriptorClientMsgHandle struct{}

type BatchGetLogConditionsDescriptorServerMsgHandle struct{}

func (d *BatchGetLogConditionsDescriptor) NewEmptyClientMsg() proto.Message {
	return &BatchGetLogConditionsRequest{}
}

func (d *BatchGetLogConditionsDescriptor) NewEmptyServerMsg() proto.Message {
	return &BatchGetLogConditionsResponse{}
}

func (d *BatchGetLogConditionsDescriptor) IsUnary() bool {
	return true
}

func (d *BatchGetLogConditionsDescriptor) IsClientStream() bool {
	return false
}

func (d *BatchGetLogConditionsDescriptor) IsServerStream() bool {
	return false
}

func (d *BatchGetLogConditionsDescriptor) IsCollection() bool {
	return false
}

func (d *BatchGetLogConditionsDescriptor) IsPlural() bool {
	return true
}

func (d *BatchGetLogConditionsDescriptor) HasResource() bool {
	return true
}

func (d *BatchGetLogConditionsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *BatchGetLogConditionsDescriptor) GetVerb() string {
	return "batchGet"
}

func (d *BatchGetLogConditionsDescriptor) GetMethodName() string {
	return "BatchGetLogConditions"
}

func (d *BatchGetLogConditionsDescriptor) GetFullMethodName() string {
	return "/ntt.alerting.v1.LogConditionService/BatchGetLogConditions"
}

func (d *BatchGetLogConditionsDescriptor) GetProtoPkgName() string {
	return "ntt.alerting.v1"
}

func (d *BatchGetLogConditionsDescriptor) GetApiName() string {
	return "LogConditionService"
}

func (d *BatchGetLogConditionsDescriptor) GetServiceDomain() string {
	return "alerting.edgelq.com"
}

func (d *BatchGetLogConditionsDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *BatchGetLogConditionsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return logConditionServiceDescriptor
}

func (d *BatchGetLogConditionsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return log_condition.GetDescriptor()
}

func (d *BatchGetLogConditionsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetLogConditionsDescriptorClientMsgHandle{}
}

func (d *BatchGetLogConditionsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetLogConditionsDescriptorServerMsgHandle{}
}

func (h *BatchGetLogConditionsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetLogConditionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetLogConditionsRequest) *log_condition.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetLogConditionsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetLogConditionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetLogConditionsRequest) []*log_condition.Name
	})
	if ok {
		return log_condition.LogConditionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if names := typedMsg.GetNames(); len(names) > 0 {
			return log_condition.LogConditionNameList(names)
		}
	}
	return (log_condition.LogConditionNameList)(nil)
}

func (h *BatchGetLogConditionsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetLogConditionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*BatchGetLogConditionsRequest) *log_condition.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *BatchGetLogConditionsDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*BatchGetLogConditionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*BatchGetLogConditionsRequest) *log_condition.LogCondition
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *BatchGetLogConditionsDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*BatchGetLogConditionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*BatchGetLogConditionsRequest) []*log_condition.LogCondition
	})
	if ok {
		return log_condition.LogConditionList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *BatchGetLogConditionsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetLogConditionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetLogConditionsResponse) *log_condition.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetLogConditionsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetLogConditionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetLogConditionsResponse) []*log_condition.Name
	})
	if ok {
		return log_condition.LogConditionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetLogConditions(); len(resources) > 0 {
			list := make(log_condition.LogConditionNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (log_condition.LogConditionNameList)(nil)
}

func (h *BatchGetLogConditionsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetLogConditionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*BatchGetLogConditionsResponse) *log_condition.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *BatchGetLogConditionsDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*BatchGetLogConditionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*BatchGetLogConditionsResponse) *log_condition.LogCondition
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *BatchGetLogConditionsDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*BatchGetLogConditionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*BatchGetLogConditionsResponse) []*log_condition.LogCondition
	})
	if ok {
		return log_condition.LogConditionList(override.OverrideExtractResourceBodies(typedMsg))
	}
	{
		if resources := typedMsg.GetLogConditions(); len(resources) > 0 {
			return log_condition.LogConditionList(resources)
		}
	}
	return (log_condition.LogConditionList)(nil)
}

func GetBatchGetLogConditionsDescriptor() *BatchGetLogConditionsDescriptor {
	return batchGetLogConditionsDescriptor
}

type ListLogConditionsDescriptor struct{}

type ListLogConditionsDescriptorClientMsgHandle struct{}

type ListLogConditionsDescriptorServerMsgHandle struct{}

func (d *ListLogConditionsDescriptor) NewEmptyClientMsg() proto.Message {
	return &ListLogConditionsRequest{}
}

func (d *ListLogConditionsDescriptor) NewEmptyServerMsg() proto.Message {
	return &ListLogConditionsResponse{}
}

func (d *ListLogConditionsDescriptor) IsUnary() bool {
	return true
}

func (d *ListLogConditionsDescriptor) IsClientStream() bool {
	return false
}

func (d *ListLogConditionsDescriptor) IsServerStream() bool {
	return false
}

func (d *ListLogConditionsDescriptor) IsCollection() bool {
	return true
}

func (d *ListLogConditionsDescriptor) IsPlural() bool {
	return true
}

func (d *ListLogConditionsDescriptor) HasResource() bool {
	return true
}

func (d *ListLogConditionsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ListLogConditionsDescriptor) GetVerb() string {
	return "list"
}

func (d *ListLogConditionsDescriptor) GetMethodName() string {
	return "ListLogConditions"
}

func (d *ListLogConditionsDescriptor) GetFullMethodName() string {
	return "/ntt.alerting.v1.LogConditionService/ListLogConditions"
}

func (d *ListLogConditionsDescriptor) GetProtoPkgName() string {
	return "ntt.alerting.v1"
}

func (d *ListLogConditionsDescriptor) GetApiName() string {
	return "LogConditionService"
}

func (d *ListLogConditionsDescriptor) GetServiceDomain() string {
	return "alerting.edgelq.com"
}

func (d *ListLogConditionsDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *ListLogConditionsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return logConditionServiceDescriptor
}

func (d *ListLogConditionsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return log_condition.GetDescriptor()
}

func (d *ListLogConditionsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListLogConditionsDescriptorClientMsgHandle{}
}

func (d *ListLogConditionsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListLogConditionsDescriptorServerMsgHandle{}
}

func (h *ListLogConditionsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListLogConditionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListLogConditionsRequest) *log_condition.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListLogConditionsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListLogConditionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListLogConditionsRequest) []*log_condition.Name
	})
	if ok {
		return log_condition.LogConditionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *ListLogConditionsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListLogConditionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ListLogConditionsRequest) *log_condition.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*log_condition.ParentName)(nil)
}

func (h *ListLogConditionsDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*ListLogConditionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*ListLogConditionsRequest) *log_condition.LogCondition
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *ListLogConditionsDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*ListLogConditionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*ListLogConditionsRequest) []*log_condition.LogCondition
	})
	if ok {
		return log_condition.LogConditionList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *ListLogConditionsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListLogConditionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListLogConditionsResponse) *log_condition.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListLogConditionsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListLogConditionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListLogConditionsResponse) []*log_condition.Name
	})
	if ok {
		return log_condition.LogConditionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetLogConditions(); len(resources) > 0 {
			list := make(log_condition.LogConditionNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (log_condition.LogConditionNameList)(nil)
}

func (h *ListLogConditionsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListLogConditionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ListLogConditionsResponse) *log_condition.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *ListLogConditionsDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*ListLogConditionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*ListLogConditionsResponse) *log_condition.LogCondition
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *ListLogConditionsDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*ListLogConditionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*ListLogConditionsResponse) []*log_condition.LogCondition
	})
	if ok {
		return log_condition.LogConditionList(override.OverrideExtractResourceBodies(typedMsg))
	}
	{
		if resources := typedMsg.GetLogConditions(); len(resources) > 0 {
			return log_condition.LogConditionList(resources)
		}
	}
	return (log_condition.LogConditionList)(nil)
}

func GetListLogConditionsDescriptor() *ListLogConditionsDescriptor {
	return listLogConditionsDescriptor
}

type WatchLogConditionDescriptor struct{}

type WatchLogConditionDescriptorClientMsgHandle struct{}

type WatchLogConditionDescriptorServerMsgHandle struct{}

func (d *WatchLogConditionDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchLogConditionRequest{}
}

func (d *WatchLogConditionDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchLogConditionResponse{}
}

func (d *WatchLogConditionDescriptor) IsUnary() bool {
	return false
}

func (d *WatchLogConditionDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchLogConditionDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchLogConditionDescriptor) IsCollection() bool {
	return false
}

func (d *WatchLogConditionDescriptor) IsPlural() bool {
	return false
}

func (d *WatchLogConditionDescriptor) HasResource() bool {
	return true
}

func (d *WatchLogConditionDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchLogConditionDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchLogConditionDescriptor) GetMethodName() string {
	return "WatchLogCondition"
}

func (d *WatchLogConditionDescriptor) GetFullMethodName() string {
	return "/ntt.alerting.v1.LogConditionService/WatchLogCondition"
}

func (d *WatchLogConditionDescriptor) GetProtoPkgName() string {
	return "ntt.alerting.v1"
}

func (d *WatchLogConditionDescriptor) GetApiName() string {
	return "LogConditionService"
}

func (d *WatchLogConditionDescriptor) GetServiceDomain() string {
	return "alerting.edgelq.com"
}

func (d *WatchLogConditionDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *WatchLogConditionDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return logConditionServiceDescriptor
}

func (d *WatchLogConditionDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return log_condition.GetDescriptor()
}

func (d *WatchLogConditionDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchLogConditionDescriptorClientMsgHandle{}
}

func (d *WatchLogConditionDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchLogConditionDescriptorServerMsgHandle{}
}

func (h *WatchLogConditionDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchLogConditionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchLogConditionRequest) *log_condition.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*log_condition.Name)(nil)
}

func (h *WatchLogConditionDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchLogConditionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchLogConditionRequest) []*log_condition.Name
	})
	if ok {
		return log_condition.LogConditionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchLogConditionDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchLogConditionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchLogConditionRequest) *log_condition.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchLogConditionDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchLogConditionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchLogConditionRequest) *log_condition.LogCondition
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *WatchLogConditionDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchLogConditionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchLogConditionRequest) []*log_condition.LogCondition
	})
	if ok {
		return log_condition.LogConditionList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *WatchLogConditionDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchLogConditionResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchLogConditionResponse) *log_condition.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if resChange := typedMsg.GetChange(); resChange != nil {
			switch tResChange := resChange.ChangeType.(type) {
			case *log_condition.LogConditionChange_Added_:
				return tResChange.Added.GetLogCondition().GetName()
			case *log_condition.LogConditionChange_Modified_:
				return tResChange.Modified.GetName()
			case *log_condition.LogConditionChange_Removed_:
				return tResChange.Removed.GetName()
			case *log_condition.LogConditionChange_Current_:
				return tResChange.Current.GetLogCondition().GetName()
			}
		}
	}
	return (*log_condition.Name)(nil)
}

func (h *WatchLogConditionDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchLogConditionResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchLogConditionResponse) []*log_condition.Name
	})
	if ok {
		return log_condition.LogConditionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchLogConditionDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchLogConditionResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchLogConditionResponse) *log_condition.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchLogConditionDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchLogConditionResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchLogConditionResponse) *log_condition.LogCondition
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	{
		if resChange := typedMsg.GetChange(); resChange != nil {
			switch tResChange := resChange.ChangeType.(type) {
			case *log_condition.LogConditionChange_Added_:
				return tResChange.Added.GetLogCondition()
			case *log_condition.LogConditionChange_Modified_:
				return tResChange.Modified.GetLogCondition()
			case *log_condition.LogConditionChange_Current_:
				return tResChange.Current.GetLogCondition()
			}
		}
	}
	return (*log_condition.LogCondition)(nil)
}

func (h *WatchLogConditionDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchLogConditionResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchLogConditionResponse) []*log_condition.LogCondition
	})
	if ok {
		return log_condition.LogConditionList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetWatchLogConditionDescriptor() *WatchLogConditionDescriptor {
	return watchLogConditionDescriptor
}

type WatchLogConditionsDescriptor struct{}

type WatchLogConditionsDescriptorClientMsgHandle struct{}

type WatchLogConditionsDescriptorServerMsgHandle struct{}

func (d *WatchLogConditionsDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchLogConditionsRequest{}
}

func (d *WatchLogConditionsDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchLogConditionsResponse{}
}

func (d *WatchLogConditionsDescriptor) IsUnary() bool {
	return false
}

func (d *WatchLogConditionsDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchLogConditionsDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchLogConditionsDescriptor) IsCollection() bool {
	return true
}

func (d *WatchLogConditionsDescriptor) IsPlural() bool {
	return true
}

func (d *WatchLogConditionsDescriptor) HasResource() bool {
	return true
}

func (d *WatchLogConditionsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchLogConditionsDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchLogConditionsDescriptor) GetMethodName() string {
	return "WatchLogConditions"
}

func (d *WatchLogConditionsDescriptor) GetFullMethodName() string {
	return "/ntt.alerting.v1.LogConditionService/WatchLogConditions"
}

func (d *WatchLogConditionsDescriptor) GetProtoPkgName() string {
	return "ntt.alerting.v1"
}

func (d *WatchLogConditionsDescriptor) GetApiName() string {
	return "LogConditionService"
}

func (d *WatchLogConditionsDescriptor) GetServiceDomain() string {
	return "alerting.edgelq.com"
}

func (d *WatchLogConditionsDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *WatchLogConditionsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return logConditionServiceDescriptor
}

func (d *WatchLogConditionsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return log_condition.GetDescriptor()
}

func (d *WatchLogConditionsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchLogConditionsDescriptorClientMsgHandle{}
}

func (d *WatchLogConditionsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchLogConditionsDescriptorServerMsgHandle{}
}

func (h *WatchLogConditionsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchLogConditionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchLogConditionsRequest) *log_condition.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchLogConditionsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchLogConditionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchLogConditionsRequest) []*log_condition.Name
	})
	if ok {
		return log_condition.LogConditionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchLogConditionsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchLogConditionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchLogConditionsRequest) *log_condition.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*log_condition.ParentName)(nil)
}

func (h *WatchLogConditionsDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchLogConditionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchLogConditionsRequest) *log_condition.LogCondition
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *WatchLogConditionsDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchLogConditionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchLogConditionsRequest) []*log_condition.LogCondition
	})
	if ok {
		return log_condition.LogConditionList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *WatchLogConditionsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchLogConditionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchLogConditionsResponse) *log_condition.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchLogConditionsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchLogConditionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchLogConditionsResponse) []*log_condition.Name
	})
	if ok {
		return log_condition.LogConditionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resChanges := typedMsg.GetLogConditionChanges(); len(resChanges) > 0 {
			list := make(log_condition.LogConditionNameList, 0, len(resChanges))
			for _, resChange := range resChanges {
				switch tResChange := resChange.ChangeType.(type) {
				case *log_condition.LogConditionChange_Added_:
					list = append(list, tResChange.Added.GetLogCondition().GetName())
				case *log_condition.LogConditionChange_Modified_:
					list = append(list, tResChange.Modified.GetName())
				case *log_condition.LogConditionChange_Removed_:
					list = append(list, tResChange.Removed.GetName())
				case *log_condition.LogConditionChange_Current_:
					list = append(list, tResChange.Current.GetLogCondition().GetName())
				}
			}
			return list
		}
	}
	return (log_condition.LogConditionNameList)(nil)
}

func (h *WatchLogConditionsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchLogConditionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchLogConditionsResponse) *log_condition.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchLogConditionsDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchLogConditionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchLogConditionsResponse) *log_condition.LogCondition
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *WatchLogConditionsDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchLogConditionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchLogConditionsResponse) []*log_condition.LogCondition
	})
	if ok {
		return log_condition.LogConditionList(override.OverrideExtractResourceBodies(typedMsg))
	}
	{
		if resChanges := typedMsg.GetLogConditionChanges(); len(resChanges) > 0 {
			list := make(log_condition.LogConditionList, 0, len(resChanges))
			for _, resChange := range resChanges {
				switch tResChange := resChange.ChangeType.(type) {
				case *log_condition.LogConditionChange_Added_:
					list = append(list, tResChange.Added.GetLogCondition())
				case *log_condition.LogConditionChange_Modified_:
					list = append(list, tResChange.Modified.GetLogCondition())
				case *log_condition.LogConditionChange_Current_:
					list = append(list, tResChange.Current.GetLogCondition())
				}
			}
			return list
		}
	}
	return (log_condition.LogConditionList)(nil)
}

func GetWatchLogConditionsDescriptor() *WatchLogConditionsDescriptor {
	return watchLogConditionsDescriptor
}

type CreateLogConditionDescriptor struct{}

type CreateLogConditionDescriptorClientMsgHandle struct{}

type CreateLogConditionDescriptorServerMsgHandle struct{}

func (d *CreateLogConditionDescriptor) NewEmptyClientMsg() proto.Message {
	return &CreateLogConditionRequest{}
}

func (d *CreateLogConditionDescriptor) NewEmptyServerMsg() proto.Message {
	return &log_condition.LogCondition{}
}

func (d *CreateLogConditionDescriptor) IsUnary() bool {
	return true
}

func (d *CreateLogConditionDescriptor) IsClientStream() bool {
	return false
}

func (d *CreateLogConditionDescriptor) IsServerStream() bool {
	return false
}

func (d *CreateLogConditionDescriptor) IsCollection() bool {
	return true
}

func (d *CreateLogConditionDescriptor) IsPlural() bool {
	return false
}

func (d *CreateLogConditionDescriptor) HasResource() bool {
	return true
}

func (d *CreateLogConditionDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *CreateLogConditionDescriptor) GetVerb() string {
	return "create"
}

func (d *CreateLogConditionDescriptor) GetMethodName() string {
	return "CreateLogCondition"
}

func (d *CreateLogConditionDescriptor) GetFullMethodName() string {
	return "/ntt.alerting.v1.LogConditionService/CreateLogCondition"
}

func (d *CreateLogConditionDescriptor) GetProtoPkgName() string {
	return "ntt.alerting.v1"
}

func (d *CreateLogConditionDescriptor) GetApiName() string {
	return "LogConditionService"
}

func (d *CreateLogConditionDescriptor) GetServiceDomain() string {
	return "alerting.edgelq.com"
}

func (d *CreateLogConditionDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *CreateLogConditionDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return logConditionServiceDescriptor
}

func (d *CreateLogConditionDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return log_condition.GetDescriptor()
}

func (d *CreateLogConditionDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateLogConditionDescriptorClientMsgHandle{}
}

func (d *CreateLogConditionDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateLogConditionDescriptorServerMsgHandle{}
}

func (h *CreateLogConditionDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateLogConditionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*CreateLogConditionRequest) *log_condition.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetLogCondition()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*log_condition.Name)(nil)
}

func (h *CreateLogConditionDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*CreateLogConditionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*CreateLogConditionRequest) []*log_condition.Name
	})
	if ok {
		return log_condition.LogConditionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateLogConditionDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateLogConditionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*CreateLogConditionRequest) *log_condition.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*log_condition.ParentName)(nil)
}

func (h *CreateLogConditionDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*CreateLogConditionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*CreateLogConditionRequest) *log_condition.LogCondition
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	{
		return typedMsg.GetLogCondition()
	}
	return (*log_condition.LogCondition)(nil)
}

func (h *CreateLogConditionDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*CreateLogConditionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*CreateLogConditionRequest) []*log_condition.LogCondition
	})
	if ok {
		return log_condition.LogConditionList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *CreateLogConditionDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*log_condition.LogCondition)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*log_condition.LogCondition) *log_condition.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*log_condition.Name)(nil)
}

func (h *CreateLogConditionDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*log_condition.LogCondition)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*log_condition.LogCondition) []*log_condition.Name
	})
	if ok {
		return log_condition.LogConditionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateLogConditionDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*log_condition.LogCondition)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*log_condition.LogCondition) *log_condition.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *CreateLogConditionDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	return msg.(*log_condition.LogCondition)
}

func (h *CreateLogConditionDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*log_condition.LogCondition)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*log_condition.LogCondition) []*log_condition.LogCondition
	})
	if ok {
		return log_condition.LogConditionList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetCreateLogConditionDescriptor() *CreateLogConditionDescriptor {
	return createLogConditionDescriptor
}

type UpdateLogConditionDescriptor struct{}

type UpdateLogConditionDescriptorClientMsgHandle struct{}

type UpdateLogConditionDescriptorServerMsgHandle struct{}

func (d *UpdateLogConditionDescriptor) NewEmptyClientMsg() proto.Message {
	return &UpdateLogConditionRequest{}
}

func (d *UpdateLogConditionDescriptor) NewEmptyServerMsg() proto.Message {
	return &log_condition.LogCondition{}
}

func (d *UpdateLogConditionDescriptor) IsUnary() bool {
	return true
}

func (d *UpdateLogConditionDescriptor) IsClientStream() bool {
	return false
}

func (d *UpdateLogConditionDescriptor) IsServerStream() bool {
	return false
}

func (d *UpdateLogConditionDescriptor) IsCollection() bool {
	return false
}

func (d *UpdateLogConditionDescriptor) IsPlural() bool {
	return false
}

func (d *UpdateLogConditionDescriptor) HasResource() bool {
	return true
}

func (d *UpdateLogConditionDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *UpdateLogConditionDescriptor) GetVerb() string {
	return "update"
}

func (d *UpdateLogConditionDescriptor) GetMethodName() string {
	return "UpdateLogCondition"
}

func (d *UpdateLogConditionDescriptor) GetFullMethodName() string {
	return "/ntt.alerting.v1.LogConditionService/UpdateLogCondition"
}

func (d *UpdateLogConditionDescriptor) GetProtoPkgName() string {
	return "ntt.alerting.v1"
}

func (d *UpdateLogConditionDescriptor) GetApiName() string {
	return "LogConditionService"
}

func (d *UpdateLogConditionDescriptor) GetServiceDomain() string {
	return "alerting.edgelq.com"
}

func (d *UpdateLogConditionDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *UpdateLogConditionDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return logConditionServiceDescriptor
}

func (d *UpdateLogConditionDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return log_condition.GetDescriptor()
}

func (d *UpdateLogConditionDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateLogConditionDescriptorClientMsgHandle{}
}

func (d *UpdateLogConditionDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateLogConditionDescriptorServerMsgHandle{}
}

func (h *UpdateLogConditionDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateLogConditionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*UpdateLogConditionRequest) *log_condition.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetLogCondition()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*log_condition.Name)(nil)
}

func (h *UpdateLogConditionDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*UpdateLogConditionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*UpdateLogConditionRequest) []*log_condition.Name
	})
	if ok {
		return log_condition.LogConditionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateLogConditionDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateLogConditionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*UpdateLogConditionRequest) *log_condition.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *UpdateLogConditionDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*UpdateLogConditionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*UpdateLogConditionRequest) *log_condition.LogCondition
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	{
		return typedMsg.GetLogCondition()
	}
	return (*log_condition.LogCondition)(nil)
}

func (h *UpdateLogConditionDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*UpdateLogConditionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*UpdateLogConditionRequest) []*log_condition.LogCondition
	})
	if ok {
		return log_condition.LogConditionList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *UpdateLogConditionDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*log_condition.LogCondition)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*log_condition.LogCondition) *log_condition.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*log_condition.Name)(nil)
}

func (h *UpdateLogConditionDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*log_condition.LogCondition)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*log_condition.LogCondition) []*log_condition.Name
	})
	if ok {
		return log_condition.LogConditionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateLogConditionDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*log_condition.LogCondition)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*log_condition.LogCondition) *log_condition.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *UpdateLogConditionDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	return msg.(*log_condition.LogCondition)
}

func (h *UpdateLogConditionDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*log_condition.LogCondition)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*log_condition.LogCondition) []*log_condition.LogCondition
	})
	if ok {
		return log_condition.LogConditionList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetUpdateLogConditionDescriptor() *UpdateLogConditionDescriptor {
	return updateLogConditionDescriptor
}

type DeleteLogConditionDescriptor struct{}

type DeleteLogConditionDescriptorClientMsgHandle struct{}

type DeleteLogConditionDescriptorServerMsgHandle struct{}

func (d *DeleteLogConditionDescriptor) NewEmptyClientMsg() proto.Message {
	return &DeleteLogConditionRequest{}
}

func (d *DeleteLogConditionDescriptor) NewEmptyServerMsg() proto.Message {
	return &emptypb.Empty{}
}

func (d *DeleteLogConditionDescriptor) IsUnary() bool {
	return true
}

func (d *DeleteLogConditionDescriptor) IsClientStream() bool {
	return false
}

func (d *DeleteLogConditionDescriptor) IsServerStream() bool {
	return false
}

func (d *DeleteLogConditionDescriptor) IsCollection() bool {
	return false
}

func (d *DeleteLogConditionDescriptor) IsPlural() bool {
	return false
}

func (d *DeleteLogConditionDescriptor) HasResource() bool {
	return true
}

func (d *DeleteLogConditionDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *DeleteLogConditionDescriptor) GetVerb() string {
	return "delete"
}

func (d *DeleteLogConditionDescriptor) GetMethodName() string {
	return "DeleteLogCondition"
}

func (d *DeleteLogConditionDescriptor) GetFullMethodName() string {
	return "/ntt.alerting.v1.LogConditionService/DeleteLogCondition"
}

func (d *DeleteLogConditionDescriptor) GetProtoPkgName() string {
	return "ntt.alerting.v1"
}

func (d *DeleteLogConditionDescriptor) GetApiName() string {
	return "LogConditionService"
}

func (d *DeleteLogConditionDescriptor) GetServiceDomain() string {
	return "alerting.edgelq.com"
}

func (d *DeleteLogConditionDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *DeleteLogConditionDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return logConditionServiceDescriptor
}

func (d *DeleteLogConditionDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return log_condition.GetDescriptor()
}

func (d *DeleteLogConditionDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteLogConditionDescriptorClientMsgHandle{}
}

func (d *DeleteLogConditionDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteLogConditionDescriptorServerMsgHandle{}
}

func (h *DeleteLogConditionDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteLogConditionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*DeleteLogConditionRequest) *log_condition.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*log_condition.Name)(nil)
}

func (h *DeleteLogConditionDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*DeleteLogConditionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*DeleteLogConditionRequest) []*log_condition.Name
	})
	if ok {
		return log_condition.LogConditionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteLogConditionDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteLogConditionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*DeleteLogConditionRequest) *log_condition.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *DeleteLogConditionDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*DeleteLogConditionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*DeleteLogConditionRequest) *log_condition.LogCondition
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *DeleteLogConditionDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*DeleteLogConditionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*DeleteLogConditionRequest) []*log_condition.LogCondition
	})
	if ok {
		return log_condition.LogConditionList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *DeleteLogConditionDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*emptypb.Empty) *log_condition.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *DeleteLogConditionDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*emptypb.Empty) []*log_condition.Name
	})
	if ok {
		return log_condition.LogConditionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteLogConditionDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*emptypb.Empty) *log_condition.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *DeleteLogConditionDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*emptypb.Empty) *log_condition.LogCondition
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *DeleteLogConditionDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*emptypb.Empty) []*log_condition.LogCondition
	})
	if ok {
		return log_condition.LogConditionList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetDeleteLogConditionDescriptor() *DeleteLogConditionDescriptor {
	return deleteLogConditionDescriptor
}

type SearchLogConditionsDescriptor struct{}

type SearchLogConditionsDescriptorClientMsgHandle struct{}

type SearchLogConditionsDescriptorServerMsgHandle struct{}

func (d *SearchLogConditionsDescriptor) NewEmptyClientMsg() proto.Message {
	return &SearchLogConditionsRequest{}
}

func (d *SearchLogConditionsDescriptor) NewEmptyServerMsg() proto.Message {
	return &SearchLogConditionsResponse{}
}

func (d *SearchLogConditionsDescriptor) IsUnary() bool {
	return true
}

func (d *SearchLogConditionsDescriptor) IsClientStream() bool {
	return false
}

func (d *SearchLogConditionsDescriptor) IsServerStream() bool {
	return false
}

func (d *SearchLogConditionsDescriptor) IsCollection() bool {
	return true
}

func (d *SearchLogConditionsDescriptor) IsPlural() bool {
	return true
}

func (d *SearchLogConditionsDescriptor) HasResource() bool {
	return true
}

func (d *SearchLogConditionsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *SearchLogConditionsDescriptor) GetVerb() string {
	return "search"
}

func (d *SearchLogConditionsDescriptor) GetMethodName() string {
	return "SearchLogConditions"
}

func (d *SearchLogConditionsDescriptor) GetFullMethodName() string {
	return "/ntt.alerting.v1.LogConditionService/SearchLogConditions"
}

func (d *SearchLogConditionsDescriptor) GetProtoPkgName() string {
	return "ntt.alerting.v1"
}

func (d *SearchLogConditionsDescriptor) GetApiName() string {
	return "LogConditionService"
}

func (d *SearchLogConditionsDescriptor) GetServiceDomain() string {
	return "alerting.edgelq.com"
}

func (d *SearchLogConditionsDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *SearchLogConditionsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return logConditionServiceDescriptor
}

func (d *SearchLogConditionsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return log_condition.GetDescriptor()
}

func (d *SearchLogConditionsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &SearchLogConditionsDescriptorClientMsgHandle{}
}

func (d *SearchLogConditionsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &SearchLogConditionsDescriptorServerMsgHandle{}
}

func (h *SearchLogConditionsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*SearchLogConditionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*SearchLogConditionsRequest) *log_condition.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *SearchLogConditionsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*SearchLogConditionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*SearchLogConditionsRequest) []*log_condition.Name
	})
	if ok {
		return log_condition.LogConditionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *SearchLogConditionsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*SearchLogConditionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*SearchLogConditionsRequest) *log_condition.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*log_condition.ParentName)(nil)
}

func (h *SearchLogConditionsDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*SearchLogConditionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*SearchLogConditionsRequest) *log_condition.LogCondition
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *SearchLogConditionsDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*SearchLogConditionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*SearchLogConditionsRequest) []*log_condition.LogCondition
	})
	if ok {
		return log_condition.LogConditionList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *SearchLogConditionsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*SearchLogConditionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*SearchLogConditionsResponse) *log_condition.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *SearchLogConditionsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*SearchLogConditionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*SearchLogConditionsResponse) []*log_condition.Name
	})
	if ok {
		return log_condition.LogConditionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetLogConditions(); len(resources) > 0 {
			list := make(log_condition.LogConditionNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (log_condition.LogConditionNameList)(nil)
}

func (h *SearchLogConditionsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*SearchLogConditionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*SearchLogConditionsResponse) *log_condition.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *SearchLogConditionsDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*SearchLogConditionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*SearchLogConditionsResponse) *log_condition.LogCondition
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *SearchLogConditionsDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*SearchLogConditionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*SearchLogConditionsResponse) []*log_condition.LogCondition
	})
	if ok {
		return log_condition.LogConditionList(override.OverrideExtractResourceBodies(typedMsg))
	}
	{
		if resources := typedMsg.GetLogConditions(); len(resources) > 0 {
			return log_condition.LogConditionList(resources)
		}
	}
	return (log_condition.LogConditionList)(nil)
}

func GetSearchLogConditionsDescriptor() *SearchLogConditionsDescriptor {
	return searchLogConditionsDescriptor
}

type LogConditionServiceDescriptor struct{}

func (d *LogConditionServiceDescriptor) AllMethodDescriptors() []gotenclient.MethodDescriptor {
	return []gotenclient.MethodDescriptor{
		getLogConditionDescriptor,
		batchGetLogConditionsDescriptor,
		listLogConditionsDescriptor,
		watchLogConditionDescriptor,
		watchLogConditionsDescriptor,
		createLogConditionDescriptor,
		updateLogConditionDescriptor,
		deleteLogConditionDescriptor,
		searchLogConditionsDescriptor,
	}
}

func (d *LogConditionServiceDescriptor) GetFullAPIName() string {
	return "/ntt.alerting.v1.LogConditionService"
}

func (d *LogConditionServiceDescriptor) GetProtoPkgName() string {
	return "ntt.alerting.v1"
}

func (d *LogConditionServiceDescriptor) GetApiName() string {
	return "LogConditionService"
}

func (d *LogConditionServiceDescriptor) GetServiceDomain() string {
	return "alerting.edgelq.com"
}

func (d *LogConditionServiceDescriptor) GetServiceVersion() string {
	return "v1"
}

func GetLogConditionServiceDescriptor() *LogConditionServiceDescriptor {
	return logConditionServiceDescriptor
}

func initDescriptors() {
	logConditionServiceDescriptor = &LogConditionServiceDescriptor{}
	getLogConditionDescriptor = &GetLogConditionDescriptor{}
	batchGetLogConditionsDescriptor = &BatchGetLogConditionsDescriptor{}
	listLogConditionsDescriptor = &ListLogConditionsDescriptor{}
	watchLogConditionDescriptor = &WatchLogConditionDescriptor{}
	watchLogConditionsDescriptor = &WatchLogConditionsDescriptor{}
	createLogConditionDescriptor = &CreateLogConditionDescriptor{}
	updateLogConditionDescriptor = &UpdateLogConditionDescriptor{}
	deleteLogConditionDescriptor = &DeleteLogConditionDescriptor{}
	searchLogConditionsDescriptor = &SearchLogConditionsDescriptor{}
	gotenclient.GetRegistry().RegisterApiDescriptor(logConditionServiceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(getLogConditionDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(batchGetLogConditionsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(listLogConditionsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchLogConditionDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchLogConditionsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(createLogConditionDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(updateLogConditionDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(deleteLogConditionDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(searchLogConditionsDescriptor)
}

func init() {
	if !descriptorsInitialized {
		initDescriptors()
		descriptorsInitialized = true
	}
}
