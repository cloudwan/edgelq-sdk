// Code generated by protoc-gen-goten-go
// File: edgelq/alerting/proto/v1/log_condition_service.proto
// DO NOT EDIT!!!

package log_condition_client

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	log_condition "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/log_condition"
	policy "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/policy"
	view "github.com/cloudwan/goten-sdk/types/view"
	watch_type "github.com/cloudwan/goten-sdk/types/watch_type"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &log_condition.LogCondition{}
	_ = &policy.Policy{}
	_ = &emptypb.Empty{}
	_ = &fieldmaskpb.FieldMask{}
	_ = &timestamppb.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A request message of the GetLogCondition method.
type GetLogConditionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of ntt.alerting.v1.LogCondition
	Name *log_condition.Name `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *log_condition.LogCondition_FieldMask `protobuf:"bytes,3,opt,customtype=LogCondition_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,4,opt,name=view,proto3,enum=goten.types.View" json:"view,omitempty"`
}

func (m *GetLogConditionRequest) Reset() {
	*m = GetLogConditionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_log_condition_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *GetLogConditionRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*GetLogConditionRequest) ProtoMessage() {}

func (m *GetLogConditionRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_log_condition_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*GetLogConditionRequest) GotenMessage() {}

// Deprecated, Use GetLogConditionRequest.ProtoReflect.Descriptor instead.
func (*GetLogConditionRequest) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_log_condition_service_proto_rawDescGZIP(), []int{0}
}

func (m *GetLogConditionRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *GetLogConditionRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *GetLogConditionRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *GetLogConditionRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *GetLogConditionRequest) GetName() *log_condition.Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *GetLogConditionRequest) GetFieldMask() *log_condition.LogCondition_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *GetLogConditionRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *GetLogConditionRequest) SetName(fv *log_condition.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "GetLogConditionRequest"))
	}
	m.Name = fv
}

func (m *GetLogConditionRequest) SetFieldMask(fv *log_condition.LogCondition_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "GetLogConditionRequest"))
	}
	m.FieldMask = fv
}

func (m *GetLogConditionRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "GetLogConditionRequest"))
	}
	m.View = fv
}

// A request message of the BatchGetLogConditions method.
type BatchGetLogConditionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Names of LogConditions
	Names []*log_condition.Name `protobuf:"bytes,2,rep,customtype=Name,name=names,proto3" json:"names,omitempty"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *log_condition.LogCondition_FieldMask `protobuf:"bytes,3,opt,customtype=LogCondition_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,4,opt,name=view,proto3,enum=goten.types.View" json:"view,omitempty"`
}

func (m *BatchGetLogConditionsRequest) Reset() {
	*m = BatchGetLogConditionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_log_condition_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *BatchGetLogConditionsRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*BatchGetLogConditionsRequest) ProtoMessage() {}

func (m *BatchGetLogConditionsRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_log_condition_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*BatchGetLogConditionsRequest) GotenMessage() {}

// Deprecated, Use BatchGetLogConditionsRequest.ProtoReflect.Descriptor instead.
func (*BatchGetLogConditionsRequest) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_log_condition_service_proto_rawDescGZIP(), []int{1}
}

func (m *BatchGetLogConditionsRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *BatchGetLogConditionsRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *BatchGetLogConditionsRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *BatchGetLogConditionsRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *BatchGetLogConditionsRequest) GetNames() []*log_condition.Name {
	if m != nil {
		return m.Names
	}
	return nil
}

func (m *BatchGetLogConditionsRequest) GetFieldMask() *log_condition.LogCondition_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *BatchGetLogConditionsRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *BatchGetLogConditionsRequest) SetNames(fv []*log_condition.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Names", "BatchGetLogConditionsRequest"))
	}
	m.Names = fv
}

func (m *BatchGetLogConditionsRequest) SetFieldMask(fv *log_condition.LogCondition_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "BatchGetLogConditionsRequest"))
	}
	m.FieldMask = fv
}

func (m *BatchGetLogConditionsRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "BatchGetLogConditionsRequest"))
	}
	m.View = fv
}

// A response message of the BatchGetLogConditions method.
type BatchGetLogConditionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// found LogConditions
	LogConditions []*log_condition.LogCondition `protobuf:"bytes,1,rep,name=log_conditions,json=logConditions,proto3" json:"log_conditions,omitempty"`
	// list of not found LogConditions
	Missing []*log_condition.Name `protobuf:"bytes,2,rep,customtype=Name,name=missing,proto3" json:"missing,omitempty"`
}

func (m *BatchGetLogConditionsResponse) Reset() {
	*m = BatchGetLogConditionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_log_condition_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *BatchGetLogConditionsResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*BatchGetLogConditionsResponse) ProtoMessage() {}

func (m *BatchGetLogConditionsResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_log_condition_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*BatchGetLogConditionsResponse) GotenMessage() {}

// Deprecated, Use BatchGetLogConditionsResponse.ProtoReflect.Descriptor instead.
func (*BatchGetLogConditionsResponse) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_log_condition_service_proto_rawDescGZIP(), []int{2}
}

func (m *BatchGetLogConditionsResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *BatchGetLogConditionsResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *BatchGetLogConditionsResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *BatchGetLogConditionsResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *BatchGetLogConditionsResponse) GetLogConditions() []*log_condition.LogCondition {
	if m != nil {
		return m.LogConditions
	}
	return nil
}

func (m *BatchGetLogConditionsResponse) GetMissing() []*log_condition.Name {
	if m != nil {
		return m.Missing
	}
	return nil
}

func (m *BatchGetLogConditionsResponse) SetLogConditions(fv []*log_condition.LogCondition) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "LogConditions", "BatchGetLogConditionsResponse"))
	}
	m.LogConditions = fv
}

func (m *BatchGetLogConditionsResponse) SetMissing(fv []*log_condition.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Missing", "BatchGetLogConditionsResponse"))
	}
	m.Missing = fv
}

// A request message of the ListLogConditions method.
type ListLogConditionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Parent name of ntt.alerting.v1.LogCondition
	Parent *log_condition.ParentName `protobuf:"bytes,1,opt,customtype=ParentName,name=parent,proto3" json:"parent,omitempty"`
	// Requested page size. Server may return fewer LogConditions than requested.
	// If unspecified, server will pick an appropriate default.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A token identifying a page of results the server should return.
	// Typically, this is the value of
	// ListLogConditionsResponse.next_page_token.
	PageToken *log_condition.PagerCursor `protobuf:"bytes,3,opt,customtype=PagerCursor,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Order By -
	// https://cloud.google.com/apis/design/design_patterns#list_pagination list
	// of field path with order directive, either 'asc' or 'desc'. If direction is
	// not provided, 'asc' is assumed. e.g. "state.nested_field asc,
	// state.something.else desc, theme"
	OrderBy *log_condition.OrderBy `protobuf:"bytes,4,opt,customtype=OrderBy,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	// Filter - filter results by field criteria. Simplified SQL-like syntax with
	// following operators:
	// <=, >=, =, !=, <, >, LIKE, CONTAINS (aliases CONTAIN, HAS, HAVE), IN, IS
	// [NOT] NULL | NaN . Combine conditions with OR | AND example: 'meta.labels
	// CONTAINS "severity:important" OR (state.last_error_time >
	// "2018-11-15T10:00:00Z" AND state.status = "ERROR")'
	Filter *log_condition.Filter `protobuf:"bytes,5,opt,customtype=Filter,name=filter,proto3" json:"filter,omitempty"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *log_condition.LogCondition_FieldMask `protobuf:"bytes,6,opt,customtype=LogCondition_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,7,opt,name=view,proto3,enum=goten.types.View" json:"view,omitempty"`
	// Indicates if list response should contain total count and offset (fields
	// current_offset and total_results_count).
	IncludePagingInfo bool `protobuf:"varint,8,opt,name=include_paging_info,json=includePagingInfo,proto3" json:"include_paging_info,omitempty"`
}

func (m *ListLogConditionsRequest) Reset() {
	*m = ListLogConditionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_log_condition_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ListLogConditionsRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ListLogConditionsRequest) ProtoMessage() {}

func (m *ListLogConditionsRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_log_condition_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ListLogConditionsRequest) GotenMessage() {}

// Deprecated, Use ListLogConditionsRequest.ProtoReflect.Descriptor instead.
func (*ListLogConditionsRequest) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_log_condition_service_proto_rawDescGZIP(), []int{3}
}

func (m *ListLogConditionsRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ListLogConditionsRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ListLogConditionsRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ListLogConditionsRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ListLogConditionsRequest) GetParent() *log_condition.ParentName {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *ListLogConditionsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return int32(0)
}

func (m *ListLogConditionsRequest) GetPageToken() *log_condition.PagerCursor {
	if m != nil {
		return m.PageToken
	}
	return nil
}

func (m *ListLogConditionsRequest) GetOrderBy() *log_condition.OrderBy {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

func (m *ListLogConditionsRequest) GetFilter() *log_condition.Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *ListLogConditionsRequest) GetFieldMask() *log_condition.LogCondition_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *ListLogConditionsRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *ListLogConditionsRequest) GetIncludePagingInfo() bool {
	if m != nil {
		return m.IncludePagingInfo
	}
	return false
}

func (m *ListLogConditionsRequest) SetParent(fv *log_condition.ParentName) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Parent", "ListLogConditionsRequest"))
	}
	m.Parent = fv
}

func (m *ListLogConditionsRequest) SetPageSize(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageSize", "ListLogConditionsRequest"))
	}
	m.PageSize = fv
}

func (m *ListLogConditionsRequest) SetPageToken(fv *log_condition.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageToken", "ListLogConditionsRequest"))
	}
	m.PageToken = fv
}

func (m *ListLogConditionsRequest) SetOrderBy(fv *log_condition.OrderBy) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OrderBy", "ListLogConditionsRequest"))
	}
	m.OrderBy = fv
}

func (m *ListLogConditionsRequest) SetFilter(fv *log_condition.Filter) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Filter", "ListLogConditionsRequest"))
	}
	m.Filter = fv
}

func (m *ListLogConditionsRequest) SetFieldMask(fv *log_condition.LogCondition_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "ListLogConditionsRequest"))
	}
	m.FieldMask = fv
}

func (m *ListLogConditionsRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "ListLogConditionsRequest"))
	}
	m.View = fv
}

func (m *ListLogConditionsRequest) SetIncludePagingInfo(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IncludePagingInfo", "ListLogConditionsRequest"))
	}
	m.IncludePagingInfo = fv
}

// A response message of the ListLogConditions method.
type ListLogConditionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// The list of LogConditions
	LogConditions []*log_condition.LogCondition `protobuf:"bytes,1,rep,name=log_conditions,json=logConditions,proto3" json:"log_conditions,omitempty"`
	// A token to retrieve previous page of results.
	//
	// Pass this value in the ListLogConditionsRequest.page_token.
	PrevPageToken *log_condition.PagerCursor `protobuf:"bytes,3,opt,customtype=PagerCursor,name=prev_page_token,json=prevPageToken,proto3" json:"prev_page_token,omitempty"`
	// A token to retrieve next page of results.
	//
	// Pass this value in the ListLogConditionsRequest.page_token.
	NextPageToken *log_condition.PagerCursor `protobuf:"bytes,4,opt,customtype=PagerCursor,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// Current offset from the first page or 0 if no page tokens were given,
	// paging info was not requested or there was an error while trying to get
	// it). Page index can be computed from offset and limit provided in a
	// request.
	CurrentOffset int32 `protobuf:"varint,5,opt,name=current_offset,json=currentOffset,proto3" json:"current_offset,omitempty"`
	// Number of total LogConditions across all pages or 0, if there are no items,
	// paging info was not requested or there was an error while trying to get it.
	TotalResultsCount int32 `protobuf:"varint,6,opt,name=total_results_count,json=totalResultsCount,proto3" json:"total_results_count,omitempty"`
}

func (m *ListLogConditionsResponse) Reset() {
	*m = ListLogConditionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_log_condition_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ListLogConditionsResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ListLogConditionsResponse) ProtoMessage() {}

func (m *ListLogConditionsResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_log_condition_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ListLogConditionsResponse) GotenMessage() {}

// Deprecated, Use ListLogConditionsResponse.ProtoReflect.Descriptor instead.
func (*ListLogConditionsResponse) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_log_condition_service_proto_rawDescGZIP(), []int{4}
}

func (m *ListLogConditionsResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ListLogConditionsResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ListLogConditionsResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ListLogConditionsResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ListLogConditionsResponse) GetLogConditions() []*log_condition.LogCondition {
	if m != nil {
		return m.LogConditions
	}
	return nil
}

func (m *ListLogConditionsResponse) GetPrevPageToken() *log_condition.PagerCursor {
	if m != nil {
		return m.PrevPageToken
	}
	return nil
}

func (m *ListLogConditionsResponse) GetNextPageToken() *log_condition.PagerCursor {
	if m != nil {
		return m.NextPageToken
	}
	return nil
}

func (m *ListLogConditionsResponse) GetCurrentOffset() int32 {
	if m != nil {
		return m.CurrentOffset
	}
	return int32(0)
}

func (m *ListLogConditionsResponse) GetTotalResultsCount() int32 {
	if m != nil {
		return m.TotalResultsCount
	}
	return int32(0)
}

func (m *ListLogConditionsResponse) SetLogConditions(fv []*log_condition.LogCondition) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "LogConditions", "ListLogConditionsResponse"))
	}
	m.LogConditions = fv
}

func (m *ListLogConditionsResponse) SetPrevPageToken(fv *log_condition.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PrevPageToken", "ListLogConditionsResponse"))
	}
	m.PrevPageToken = fv
}

func (m *ListLogConditionsResponse) SetNextPageToken(fv *log_condition.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NextPageToken", "ListLogConditionsResponse"))
	}
	m.NextPageToken = fv
}

func (m *ListLogConditionsResponse) SetCurrentOffset(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CurrentOffset", "ListLogConditionsResponse"))
	}
	m.CurrentOffset = fv
}

func (m *ListLogConditionsResponse) SetTotalResultsCount(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TotalResultsCount", "ListLogConditionsResponse"))
	}
	m.TotalResultsCount = fv
}

// A request message of the WatchLogCondition method.
type WatchLogConditionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of ntt.alerting.v1.LogCondition
	Name *log_condition.Name `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *log_condition.LogCondition_FieldMask `protobuf:"bytes,2,opt,customtype=LogCondition_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,4,opt,name=view,proto3,enum=goten.types.View" json:"view,omitempty"`
}

func (m *WatchLogConditionRequest) Reset() {
	*m = WatchLogConditionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_log_condition_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchLogConditionRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchLogConditionRequest) ProtoMessage() {}

func (m *WatchLogConditionRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_log_condition_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchLogConditionRequest) GotenMessage() {}

// Deprecated, Use WatchLogConditionRequest.ProtoReflect.Descriptor instead.
func (*WatchLogConditionRequest) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_log_condition_service_proto_rawDescGZIP(), []int{5}
}

func (m *WatchLogConditionRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchLogConditionRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchLogConditionRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchLogConditionRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchLogConditionRequest) GetName() *log_condition.Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *WatchLogConditionRequest) GetFieldMask() *log_condition.LogCondition_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *WatchLogConditionRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *WatchLogConditionRequest) SetName(fv *log_condition.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "WatchLogConditionRequest"))
	}
	m.Name = fv
}

func (m *WatchLogConditionRequest) SetFieldMask(fv *log_condition.LogCondition_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "WatchLogConditionRequest"))
	}
	m.FieldMask = fv
}

func (m *WatchLogConditionRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "WatchLogConditionRequest"))
	}
	m.View = fv
}

// A response message of the WatchLogCondition method.
type WatchLogConditionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Change        *log_condition.LogConditionChange `protobuf:"bytes,1,opt,name=change,proto3" json:"change,omitempty"`
}

func (m *WatchLogConditionResponse) Reset() {
	*m = WatchLogConditionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_log_condition_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchLogConditionResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchLogConditionResponse) ProtoMessage() {}

func (m *WatchLogConditionResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_log_condition_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchLogConditionResponse) GotenMessage() {}

// Deprecated, Use WatchLogConditionResponse.ProtoReflect.Descriptor instead.
func (*WatchLogConditionResponse) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_log_condition_service_proto_rawDescGZIP(), []int{6}
}

func (m *WatchLogConditionResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchLogConditionResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchLogConditionResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchLogConditionResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchLogConditionResponse) GetChange() *log_condition.LogConditionChange {
	if m != nil {
		return m.Change
	}
	return nil
}

func (m *WatchLogConditionResponse) SetChange(fv *log_condition.LogConditionChange) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Change", "WatchLogConditionResponse"))
	}
	m.Change = fv
}

// A request message of the WatchLogConditions method.
type WatchLogConditionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Type of a watch. Identifies how server stream data to a client, which
	// fields in a request are allowed and which fields in response are relevant.
	Type watch_type.WatchType `protobuf:"varint,9,opt,name=type,proto3,enum=goten.types.WatchType" json:"type,omitempty"`
	// Parent name of ntt.alerting.v1.LogCondition
	Parent *log_condition.ParentName `protobuf:"bytes,1,opt,customtype=ParentName,name=parent,proto3" json:"parent,omitempty"`
	// Requested page size. Server may return fewer LogConditions than requested.
	// If unspecified, server will pick an appropriate default.
	// Can be populated only for stateful watch type.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A token identifying a page of results the server should return.
	// Can be populated only for stateful watch type.
	PageToken *log_condition.PagerCursor `protobuf:"bytes,3,opt,customtype=PagerCursor,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Order By -
	// https://cloud.google.com/apis/design/design_patterns#list_pagination Can be
	// populated only for stateful watch type.
	OrderBy *log_condition.OrderBy `protobuf:"bytes,4,opt,customtype=OrderBy,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	// A token identifying watch resume point from previous session.
	// Can be populated only for stateless watch type.
	ResumeToken string `protobuf:"bytes,10,opt,name=resume_token,json=resumeToken,proto3" json:"resume_token,omitempty"`
	// Point in the time from which we want to start getting updates. This field
	// can be populated only for stateless watch type and if resume token is not
	// known yet. If specified, initial snapshot will NOT be provided. It is
	// assumed client can obtain it using separate means. Watch responses will
	// contain resume tokens which should be used to resume broken connection.
	StartingTime *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=starting_time,json=startingTime,proto3" json:"starting_time,omitempty"`
	// Filter - filter results by field criteria. Simplified SQL-like syntax with
	// following operators:
	// <=, >=, =, !=, <, >, LIKE, CONTAINS (aliases CONTAIN, HAS, HAVE), IN, IS
	// [NOT] NULL | NaN . Combine conditions with OR | AND example: 'meta.labels
	// CONTAINS "severity:important" OR (state.last_error_time >
	// "2018-11-15T10:00:00Z" AND state.status = "ERROR")'
	Filter *log_condition.Filter `protobuf:"bytes,5,opt,customtype=Filter,name=filter,proto3" json:"filter,omitempty"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view Changes to LogCondition that don't
	// affect any of masked fields won't be sent back.
	FieldMask *log_condition.LogCondition_FieldMask `protobuf:"bytes,6,opt,customtype=LogCondition_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask Changes to
	// LogCondition that don't affect any of masked fields won't be sent back.
	View view.View `protobuf:"varint,8,opt,name=view,proto3,enum=goten.types.View" json:"view,omitempty"`
	// Maximum amount of changes in each response message. Query result response
	// is divided on the server side into chunks with size of a specified amount
	// to limit memory footprint of each message. Responses will hold information
	// whether more elements will continue for the actual change. If unspecified,
	// server will pick an appropriate default.
	MaxChunkSize int32 `protobuf:"varint,11,opt,name=max_chunk_size,json=maxChunkSize,proto3" json:"max_chunk_size,omitempty"`
}

func (m *WatchLogConditionsRequest) Reset() {
	*m = WatchLogConditionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_log_condition_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchLogConditionsRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchLogConditionsRequest) ProtoMessage() {}

func (m *WatchLogConditionsRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_log_condition_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchLogConditionsRequest) GotenMessage() {}

// Deprecated, Use WatchLogConditionsRequest.ProtoReflect.Descriptor instead.
func (*WatchLogConditionsRequest) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_log_condition_service_proto_rawDescGZIP(), []int{7}
}

func (m *WatchLogConditionsRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchLogConditionsRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchLogConditionsRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchLogConditionsRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchLogConditionsRequest) GetType() watch_type.WatchType {
	if m != nil {
		return m.Type
	}
	return watch_type.WatchType_STATEFUL
}

func (m *WatchLogConditionsRequest) GetParent() *log_condition.ParentName {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *WatchLogConditionsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return int32(0)
}

func (m *WatchLogConditionsRequest) GetPageToken() *log_condition.PagerCursor {
	if m != nil {
		return m.PageToken
	}
	return nil
}

func (m *WatchLogConditionsRequest) GetOrderBy() *log_condition.OrderBy {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

func (m *WatchLogConditionsRequest) GetResumeToken() string {
	if m != nil {
		return m.ResumeToken
	}
	return ""
}

func (m *WatchLogConditionsRequest) GetStartingTime() *timestamppb.Timestamp {
	if m != nil {
		return m.StartingTime
	}
	return nil
}

func (m *WatchLogConditionsRequest) GetFilter() *log_condition.Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *WatchLogConditionsRequest) GetFieldMask() *log_condition.LogCondition_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *WatchLogConditionsRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *WatchLogConditionsRequest) GetMaxChunkSize() int32 {
	if m != nil {
		return m.MaxChunkSize
	}
	return int32(0)
}

func (m *WatchLogConditionsRequest) SetType(fv watch_type.WatchType) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Type", "WatchLogConditionsRequest"))
	}
	m.Type = fv
}

func (m *WatchLogConditionsRequest) SetParent(fv *log_condition.ParentName) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Parent", "WatchLogConditionsRequest"))
	}
	m.Parent = fv
}

func (m *WatchLogConditionsRequest) SetPageSize(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageSize", "WatchLogConditionsRequest"))
	}
	m.PageSize = fv
}

func (m *WatchLogConditionsRequest) SetPageToken(fv *log_condition.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageToken", "WatchLogConditionsRequest"))
	}
	m.PageToken = fv
}

func (m *WatchLogConditionsRequest) SetOrderBy(fv *log_condition.OrderBy) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OrderBy", "WatchLogConditionsRequest"))
	}
	m.OrderBy = fv
}

func (m *WatchLogConditionsRequest) SetResumeToken(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResumeToken", "WatchLogConditionsRequest"))
	}
	m.ResumeToken = fv
}

func (m *WatchLogConditionsRequest) SetStartingTime(fv *timestamppb.Timestamp) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "StartingTime", "WatchLogConditionsRequest"))
	}
	m.StartingTime = fv
}

func (m *WatchLogConditionsRequest) SetFilter(fv *log_condition.Filter) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Filter", "WatchLogConditionsRequest"))
	}
	m.Filter = fv
}

func (m *WatchLogConditionsRequest) SetFieldMask(fv *log_condition.LogCondition_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "WatchLogConditionsRequest"))
	}
	m.FieldMask = fv
}

func (m *WatchLogConditionsRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "WatchLogConditionsRequest"))
	}
	m.View = fv
}

func (m *WatchLogConditionsRequest) SetMaxChunkSize(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MaxChunkSize", "WatchLogConditionsRequest"))
	}
	m.MaxChunkSize = fv
}

// A response message of the WatchLogConditions method.
type WatchLogConditionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Changes of LogConditions
	LogConditionChanges []*log_condition.LogConditionChange `protobuf:"bytes,2,rep,name=log_condition_changes,json=logConditionChanges,proto3" json:"log_condition_changes,omitempty"`
	// If request specified max_chunk_size (or this limit was enforced if
	// stateless watch has been chosen), then responses with "full changeset" will
	// be divided into chunks. Client should keep receiving messages and, once
	// is_current has value true, combine this recent message with all previous
	// ones where is_current is false. If this is the first is_current in a whole
	// watch stream, then it means that client should have, at this moment,
	// contain snapshot of the current situation (or more accurately, snapshot of
	// situation at the moment of request). All LogConditions will be of type
	// Added/Current (depending on watch_type specified in the request). Further
	// responses will be incremental - however messages may still be chunked and
	// is_current logic still applies. is_current is always true for stateful
	// watch if max_chunk_size was left to 0.
	IsCurrent bool `protobuf:"varint,4,opt,name=is_current,json=isCurrent,proto3" json:"is_current,omitempty"`
	// When present, PageTokens used for page navigation should be updated.
	// Present only if is_current is true (last chunk).
	PageTokenChange *WatchLogConditionsResponse_PageTokenChange `protobuf:"bytes,3,opt,name=page_token_change,json=pageTokenChange,proto3" json:"page_token_change,omitempty"`
	// Token that can be used if current connection drops and client needs to
	// reconnect. Populated only for stateless watch type. Present only if
	// is_current is true (last chunk).
	ResumeToken string `protobuf:"bytes,5,opt,name=resume_token,json=resumeToken,proto3" json:"resume_token,omitempty"`
	// Server may occasionally send information how many resources should client
	// have in its state so far (response message without any changes, but with
	// snapshot_size field specified). If client has different value than the one
	// sent by the server, then it should be treated by a client as an error and
	// should reconnect. If value is smaller then 0, then client should ignore
	// this field as unpopulated. This field should be checked only for stateless
	// watch. In stateful those kind of errors are handled by the server side.
	// Will be never sent together with is_current, is_soft_reset and
	// is_hard_reset flags.
	SnapshotSize int64 `protobuf:"varint,6,opt,name=snapshot_size,json=snapshotSize,proto3" json:"snapshot_size,omitempty"`
	// In case of internal issue server may send response message with this flag.
	// It indicates that client should drop all changes from recent responses
	// where is_current is false only! If last message had is_current set to true,
	// client should do nothing and process normally. Resume token received before
	// is still valid. This field should be checked only for stateless watch. In
	// stateful those kind of errors are handled by the server side. Will never be
	// sent along with is_current, is_hard_reset or snapshot_size.
	IsSoftReset bool `protobuf:"varint,7,opt,name=is_soft_reset,json=isSoftReset,proto3" json:"is_soft_reset,omitempty"`
	// In case of internal issue server may send response message with this flag.
	// After receiving, client should clear whole state (drop all changes received
	// so far) as server will send new snapshot (LogConditions will contains
	// changes of type Current only). Any resume tokens should be discarded as
	// well. This field should be checked only for stateless watch. In stateful
	// those kind of errors are handled by the server side. Will never be sent
	// along with is_current, is_soft_reset or snapshot_size.
	IsHardReset bool `protobuf:"varint,8,opt,name=is_hard_reset,json=isHardReset,proto3" json:"is_hard_reset,omitempty"`
}

func (m *WatchLogConditionsResponse) Reset() {
	*m = WatchLogConditionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_log_condition_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchLogConditionsResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchLogConditionsResponse) ProtoMessage() {}

func (m *WatchLogConditionsResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_log_condition_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchLogConditionsResponse) GotenMessage() {}

// Deprecated, Use WatchLogConditionsResponse.ProtoReflect.Descriptor instead.
func (*WatchLogConditionsResponse) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_log_condition_service_proto_rawDescGZIP(), []int{8}
}

func (m *WatchLogConditionsResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchLogConditionsResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchLogConditionsResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchLogConditionsResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchLogConditionsResponse) GetLogConditionChanges() []*log_condition.LogConditionChange {
	if m != nil {
		return m.LogConditionChanges
	}
	return nil
}

func (m *WatchLogConditionsResponse) GetIsCurrent() bool {
	if m != nil {
		return m.IsCurrent
	}
	return false
}

func (m *WatchLogConditionsResponse) GetPageTokenChange() *WatchLogConditionsResponse_PageTokenChange {
	if m != nil {
		return m.PageTokenChange
	}
	return nil
}

func (m *WatchLogConditionsResponse) GetResumeToken() string {
	if m != nil {
		return m.ResumeToken
	}
	return ""
}

func (m *WatchLogConditionsResponse) GetSnapshotSize() int64 {
	if m != nil {
		return m.SnapshotSize
	}
	return int64(0)
}

func (m *WatchLogConditionsResponse) GetIsSoftReset() bool {
	if m != nil {
		return m.IsSoftReset
	}
	return false
}

func (m *WatchLogConditionsResponse) GetIsHardReset() bool {
	if m != nil {
		return m.IsHardReset
	}
	return false
}

func (m *WatchLogConditionsResponse) SetLogConditionChanges(fv []*log_condition.LogConditionChange) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "LogConditionChanges", "WatchLogConditionsResponse"))
	}
	m.LogConditionChanges = fv
}

func (m *WatchLogConditionsResponse) SetIsCurrent(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IsCurrent", "WatchLogConditionsResponse"))
	}
	m.IsCurrent = fv
}

func (m *WatchLogConditionsResponse) SetPageTokenChange(fv *WatchLogConditionsResponse_PageTokenChange) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageTokenChange", "WatchLogConditionsResponse"))
	}
	m.PageTokenChange = fv
}

func (m *WatchLogConditionsResponse) SetResumeToken(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResumeToken", "WatchLogConditionsResponse"))
	}
	m.ResumeToken = fv
}

func (m *WatchLogConditionsResponse) SetSnapshotSize(fv int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SnapshotSize", "WatchLogConditionsResponse"))
	}
	m.SnapshotSize = fv
}

func (m *WatchLogConditionsResponse) SetIsSoftReset(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IsSoftReset", "WatchLogConditionsResponse"))
	}
	m.IsSoftReset = fv
}

func (m *WatchLogConditionsResponse) SetIsHardReset(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IsHardReset", "WatchLogConditionsResponse"))
	}
	m.IsHardReset = fv
}

// A request message of the CreateLogCondition method.
type CreateLogConditionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Parent name of ntt.alerting.v1.LogCondition
	Parent *log_condition.ParentName `protobuf:"bytes,1,opt,customtype=ParentName,name=parent,proto3" json:"parent,omitempty"`
	// LogCondition resource body
	LogCondition *log_condition.LogCondition `protobuf:"bytes,2,opt,name=log_condition,json=logCondition,proto3" json:"log_condition,omitempty"`
	// Optional masking applied to response object to reduce message response
	// size.
	ResponseMask *CreateLogConditionRequest_ResponseMask `protobuf:"bytes,3,opt,name=response_mask,json=responseMask,proto3" json:"response_mask,omitempty"`
}

func (m *CreateLogConditionRequest) Reset() {
	*m = CreateLogConditionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_log_condition_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *CreateLogConditionRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*CreateLogConditionRequest) ProtoMessage() {}

func (m *CreateLogConditionRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_log_condition_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*CreateLogConditionRequest) GotenMessage() {}

// Deprecated, Use CreateLogConditionRequest.ProtoReflect.Descriptor instead.
func (*CreateLogConditionRequest) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_log_condition_service_proto_rawDescGZIP(), []int{9}
}

func (m *CreateLogConditionRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *CreateLogConditionRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *CreateLogConditionRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *CreateLogConditionRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *CreateLogConditionRequest) GetParent() *log_condition.ParentName {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *CreateLogConditionRequest) GetLogCondition() *log_condition.LogCondition {
	if m != nil {
		return m.LogCondition
	}
	return nil
}

func (m *CreateLogConditionRequest) GetResponseMask() *CreateLogConditionRequest_ResponseMask {
	if m != nil {
		return m.ResponseMask
	}
	return nil
}

func (m *CreateLogConditionRequest) SetParent(fv *log_condition.ParentName) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Parent", "CreateLogConditionRequest"))
	}
	m.Parent = fv
}

func (m *CreateLogConditionRequest) SetLogCondition(fv *log_condition.LogCondition) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "LogCondition", "CreateLogConditionRequest"))
	}
	m.LogCondition = fv
}

func (m *CreateLogConditionRequest) SetResponseMask(fv *CreateLogConditionRequest_ResponseMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResponseMask", "CreateLogConditionRequest"))
	}
	m.ResponseMask = fv
}

// A request message of the UpdateLogCondition method.
type UpdateLogConditionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// LogCondition resource body
	LogCondition *log_condition.LogCondition `protobuf:"bytes,2,opt,name=log_condition,json=logCondition,proto3" json:"log_condition,omitempty"`
	// FieldMask applied to request - change will be applied only for fields in
	// the mask
	UpdateMask *log_condition.LogCondition_FieldMask `protobuf:"bytes,3,opt,customtype=LogCondition_FieldMask,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// Conditional update applied to request if update should be executed only for
	// specific resource state. If this field is populated, then server will fetch
	// existing resource, compare with the one stored in the cas field (after
	// applying field mask) and proceed with update only and only if they match.
	// Otherwise RPC error Aborted will be returned.
	Cas *UpdateLogConditionRequest_CAS `protobuf:"bytes,4,opt,name=cas,proto3" json:"cas,omitempty"`
	// If set to true, and the resource is not found,
	// a new resource will be created.  In this situation,
	// 'field_mask' is ignored.
	//
	// https://google.aip.dev/134#create-or-update
	AllowMissing bool `protobuf:"varint,5,opt,name=allow_missing,json=allowMissing,proto3" json:"allow_missing,omitempty"`
	// reduce message response size.
	ResponseMask *UpdateLogConditionRequest_ResponseMask `protobuf:"bytes,6,opt,name=response_mask,json=responseMask,proto3" json:"response_mask,omitempty"`
}

func (m *UpdateLogConditionRequest) Reset() {
	*m = UpdateLogConditionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_log_condition_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *UpdateLogConditionRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*UpdateLogConditionRequest) ProtoMessage() {}

func (m *UpdateLogConditionRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_log_condition_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*UpdateLogConditionRequest) GotenMessage() {}

// Deprecated, Use UpdateLogConditionRequest.ProtoReflect.Descriptor instead.
func (*UpdateLogConditionRequest) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_log_condition_service_proto_rawDescGZIP(), []int{10}
}

func (m *UpdateLogConditionRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *UpdateLogConditionRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *UpdateLogConditionRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *UpdateLogConditionRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *UpdateLogConditionRequest) GetLogCondition() *log_condition.LogCondition {
	if m != nil {
		return m.LogCondition
	}
	return nil
}

func (m *UpdateLogConditionRequest) GetUpdateMask() *log_condition.LogCondition_FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

func (m *UpdateLogConditionRequest) GetCas() *UpdateLogConditionRequest_CAS {
	if m != nil {
		return m.Cas
	}
	return nil
}

func (m *UpdateLogConditionRequest) GetAllowMissing() bool {
	if m != nil {
		return m.AllowMissing
	}
	return false
}

func (m *UpdateLogConditionRequest) GetResponseMask() *UpdateLogConditionRequest_ResponseMask {
	if m != nil {
		return m.ResponseMask
	}
	return nil
}

func (m *UpdateLogConditionRequest) SetLogCondition(fv *log_condition.LogCondition) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "LogCondition", "UpdateLogConditionRequest"))
	}
	m.LogCondition = fv
}

func (m *UpdateLogConditionRequest) SetUpdateMask(fv *log_condition.LogCondition_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "UpdateMask", "UpdateLogConditionRequest"))
	}
	m.UpdateMask = fv
}

func (m *UpdateLogConditionRequest) SetCas(fv *UpdateLogConditionRequest_CAS) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Cas", "UpdateLogConditionRequest"))
	}
	m.Cas = fv
}

func (m *UpdateLogConditionRequest) SetAllowMissing(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AllowMissing", "UpdateLogConditionRequest"))
	}
	m.AllowMissing = fv
}

func (m *UpdateLogConditionRequest) SetResponseMask(fv *UpdateLogConditionRequest_ResponseMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResponseMask", "UpdateLogConditionRequest"))
	}
	m.ResponseMask = fv
}

// A request message of the DeleteLogCondition method.
type DeleteLogConditionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of ntt.alerting.v1.LogCondition
	Name *log_condition.Name `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty"`
}

func (m *DeleteLogConditionRequest) Reset() {
	*m = DeleteLogConditionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_log_condition_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *DeleteLogConditionRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*DeleteLogConditionRequest) ProtoMessage() {}

func (m *DeleteLogConditionRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_log_condition_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*DeleteLogConditionRequest) GotenMessage() {}

// Deprecated, Use DeleteLogConditionRequest.ProtoReflect.Descriptor instead.
func (*DeleteLogConditionRequest) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_log_condition_service_proto_rawDescGZIP(), []int{11}
}

func (m *DeleteLogConditionRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *DeleteLogConditionRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *DeleteLogConditionRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *DeleteLogConditionRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *DeleteLogConditionRequest) GetName() *log_condition.Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *DeleteLogConditionRequest) SetName(fv *log_condition.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "DeleteLogConditionRequest"))
	}
	m.Name = fv
}

// A request message of the SearchLogConditions method.
type SearchLogConditionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Parent name of ntt.alerting.v1.LogCondition
	Parent *log_condition.ParentName `protobuf:"bytes,1,opt,customtype=ParentName,name=parent,proto3" json:"parent,omitempty"`
	// Requested page size. Server may return fewer LogConditions than requested.
	// If unspecified, server will pick an appropriate default.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A token identifying a page of results the server should return.
	// Typically, this is the value of
	// SearchLogConditionsResponse.next_page_token.
	PageToken *log_condition.PagerCursor `protobuf:"bytes,3,opt,customtype=PagerCursor,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Order By -
	// https://cloud.google.com/apis/design/design_patterns#list_pagination list
	// of field path with order directive, either 'asc' or 'desc'. If direction is
	// not provided, 'asc' is assumed. e.g. "state.nested_field asc,
	// state.something.else desc, theme"
	OrderBy *log_condition.OrderBy `protobuf:"bytes,4,opt,customtype=OrderBy,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	// Filter - filter results by field criteria. Simplified SQL-like syntax with
	// following operators:
	// <=, >=, =, !=, <, >, LIKE, CONTAINS (aliases CONTAIN, HAS, HAVE), IN, IS
	// [NOT] NULL | NaN . Combine conditions with OR | AND example: 'meta.labels
	// CONTAINS "severity:important" OR (state.last_error_time >
	// "2018-11-15T10:00:00Z" AND state.status = "ERROR")'
	Filter *log_condition.Filter `protobuf:"bytes,5,opt,customtype=Filter,name=filter,proto3" json:"filter,omitempty"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *log_condition.LogCondition_FieldMask `protobuf:"bytes,6,opt,customtype=LogCondition_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,7,opt,name=view,proto3,enum=goten.types.View" json:"view,omitempty"`
	// Optional search phrase used to further filter results.
	Phrase string `protobuf:"bytes,8,opt,name=phrase,proto3" json:"phrase,omitempty"`
}

func (m *SearchLogConditionsRequest) Reset() {
	*m = SearchLogConditionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_log_condition_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *SearchLogConditionsRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*SearchLogConditionsRequest) ProtoMessage() {}

func (m *SearchLogConditionsRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_log_condition_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*SearchLogConditionsRequest) GotenMessage() {}

// Deprecated, Use SearchLogConditionsRequest.ProtoReflect.Descriptor instead.
func (*SearchLogConditionsRequest) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_log_condition_service_proto_rawDescGZIP(), []int{12}
}

func (m *SearchLogConditionsRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *SearchLogConditionsRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *SearchLogConditionsRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *SearchLogConditionsRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *SearchLogConditionsRequest) GetParent() *log_condition.ParentName {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *SearchLogConditionsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return int32(0)
}

func (m *SearchLogConditionsRequest) GetPageToken() *log_condition.PagerCursor {
	if m != nil {
		return m.PageToken
	}
	return nil
}

func (m *SearchLogConditionsRequest) GetOrderBy() *log_condition.OrderBy {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

func (m *SearchLogConditionsRequest) GetFilter() *log_condition.Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *SearchLogConditionsRequest) GetFieldMask() *log_condition.LogCondition_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *SearchLogConditionsRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *SearchLogConditionsRequest) GetPhrase() string {
	if m != nil {
		return m.Phrase
	}
	return ""
}

func (m *SearchLogConditionsRequest) SetParent(fv *log_condition.ParentName) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Parent", "SearchLogConditionsRequest"))
	}
	m.Parent = fv
}

func (m *SearchLogConditionsRequest) SetPageSize(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageSize", "SearchLogConditionsRequest"))
	}
	m.PageSize = fv
}

func (m *SearchLogConditionsRequest) SetPageToken(fv *log_condition.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageToken", "SearchLogConditionsRequest"))
	}
	m.PageToken = fv
}

func (m *SearchLogConditionsRequest) SetOrderBy(fv *log_condition.OrderBy) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OrderBy", "SearchLogConditionsRequest"))
	}
	m.OrderBy = fv
}

func (m *SearchLogConditionsRequest) SetFilter(fv *log_condition.Filter) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Filter", "SearchLogConditionsRequest"))
	}
	m.Filter = fv
}

func (m *SearchLogConditionsRequest) SetFieldMask(fv *log_condition.LogCondition_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "SearchLogConditionsRequest"))
	}
	m.FieldMask = fv
}

func (m *SearchLogConditionsRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "SearchLogConditionsRequest"))
	}
	m.View = fv
}

func (m *SearchLogConditionsRequest) SetPhrase(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Phrase", "SearchLogConditionsRequest"))
	}
	m.Phrase = fv
}

// A response message of the SearchLogConditions method.
type SearchLogConditionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// The list of LogConditions
	LogConditions []*log_condition.LogCondition `protobuf:"bytes,1,rep,name=log_conditions,json=logConditions,proto3" json:"log_conditions,omitempty"`
	// A token to retrieve previous page of results.
	//
	// Pass this value in the SearchLogConditionsRequest.page_token.
	PrevPageToken *log_condition.PagerCursor `protobuf:"bytes,3,opt,customtype=PagerCursor,name=prev_page_token,json=prevPageToken,proto3" json:"prev_page_token,omitempty"`
	// A token to retrieve next page of results.
	//
	// Pass this value in the SearchLogConditionsRequest.page_token.
	NextPageToken *log_condition.PagerCursor `protobuf:"bytes,4,opt,customtype=PagerCursor,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// Current offset from the first page (0 if no page tokens were given). Page
	// index can be computed from offset and limit provided in a request
	CurrentOffset int32 `protobuf:"varint,5,opt,name=current_offset,json=currentOffset,proto3" json:"current_offset,omitempty"`
	// Number of total LogConditions across all pages.
	TotalResultsCount int32 `protobuf:"varint,6,opt,name=total_results_count,json=totalResultsCount,proto3" json:"total_results_count,omitempty"`
}

func (m *SearchLogConditionsResponse) Reset() {
	*m = SearchLogConditionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_log_condition_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *SearchLogConditionsResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*SearchLogConditionsResponse) ProtoMessage() {}

func (m *SearchLogConditionsResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_log_condition_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*SearchLogConditionsResponse) GotenMessage() {}

// Deprecated, Use SearchLogConditionsResponse.ProtoReflect.Descriptor instead.
func (*SearchLogConditionsResponse) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_log_condition_service_proto_rawDescGZIP(), []int{13}
}

func (m *SearchLogConditionsResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *SearchLogConditionsResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *SearchLogConditionsResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *SearchLogConditionsResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *SearchLogConditionsResponse) GetLogConditions() []*log_condition.LogCondition {
	if m != nil {
		return m.LogConditions
	}
	return nil
}

func (m *SearchLogConditionsResponse) GetPrevPageToken() *log_condition.PagerCursor {
	if m != nil {
		return m.PrevPageToken
	}
	return nil
}

func (m *SearchLogConditionsResponse) GetNextPageToken() *log_condition.PagerCursor {
	if m != nil {
		return m.NextPageToken
	}
	return nil
}

func (m *SearchLogConditionsResponse) GetCurrentOffset() int32 {
	if m != nil {
		return m.CurrentOffset
	}
	return int32(0)
}

func (m *SearchLogConditionsResponse) GetTotalResultsCount() int32 {
	if m != nil {
		return m.TotalResultsCount
	}
	return int32(0)
}

func (m *SearchLogConditionsResponse) SetLogConditions(fv []*log_condition.LogCondition) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "LogConditions", "SearchLogConditionsResponse"))
	}
	m.LogConditions = fv
}

func (m *SearchLogConditionsResponse) SetPrevPageToken(fv *log_condition.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PrevPageToken", "SearchLogConditionsResponse"))
	}
	m.PrevPageToken = fv
}

func (m *SearchLogConditionsResponse) SetNextPageToken(fv *log_condition.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NextPageToken", "SearchLogConditionsResponse"))
	}
	m.NextPageToken = fv
}

func (m *SearchLogConditionsResponse) SetCurrentOffset(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CurrentOffset", "SearchLogConditionsResponse"))
	}
	m.CurrentOffset = fv
}

func (m *SearchLogConditionsResponse) SetTotalResultsCount(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TotalResultsCount", "SearchLogConditionsResponse"))
	}
	m.TotalResultsCount = fv
}

type WatchLogConditionsResponse_PageTokenChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// New token to retrieve previous page of results.
	PrevPageToken *log_condition.PagerCursor `protobuf:"bytes,1,opt,customtype=PagerCursor,name=prev_page_token,json=prevPageToken,proto3" json:"prev_page_token,omitempty"`
	// New token to retrieve next page of results.
	NextPageToken *log_condition.PagerCursor `protobuf:"bytes,2,opt,customtype=PagerCursor,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (m *WatchLogConditionsResponse_PageTokenChange) Reset() {
	*m = WatchLogConditionsResponse_PageTokenChange{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_log_condition_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchLogConditionsResponse_PageTokenChange) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchLogConditionsResponse_PageTokenChange) ProtoMessage() {}

func (m *WatchLogConditionsResponse_PageTokenChange) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_log_condition_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchLogConditionsResponse_PageTokenChange) GotenMessage() {}

// Deprecated, Use WatchLogConditionsResponse_PageTokenChange.ProtoReflect.Descriptor instead.
func (*WatchLogConditionsResponse_PageTokenChange) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_log_condition_service_proto_rawDescGZIP(), []int{8, 0}
}

func (m *WatchLogConditionsResponse_PageTokenChange) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchLogConditionsResponse_PageTokenChange) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchLogConditionsResponse_PageTokenChange) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchLogConditionsResponse_PageTokenChange) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchLogConditionsResponse_PageTokenChange) GetPrevPageToken() *log_condition.PagerCursor {
	if m != nil {
		return m.PrevPageToken
	}
	return nil
}

func (m *WatchLogConditionsResponse_PageTokenChange) GetNextPageToken() *log_condition.PagerCursor {
	if m != nil {
		return m.NextPageToken
	}
	return nil
}

func (m *WatchLogConditionsResponse_PageTokenChange) SetPrevPageToken(fv *log_condition.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PrevPageToken", "WatchLogConditionsResponse_PageTokenChange"))
	}
	m.PrevPageToken = fv
}

func (m *WatchLogConditionsResponse_PageTokenChange) SetNextPageToken(fv *log_condition.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NextPageToken", "WatchLogConditionsResponse_PageTokenChange"))
	}
	m.NextPageToken = fv
}

// ResponseMask allows client to reduce response message size.
type CreateLogConditionRequest_ResponseMask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Types that are valid to be assigned to Masking:
	//	*CreateLogConditionRequest_ResponseMask_SkipEntireResponseBody
	//	*CreateLogConditionRequest_ResponseMask_BodyMask
	Masking isCreateLogConditionRequest_ResponseMask_Masking `protobuf_oneof:"masking"`
}

func (m *CreateLogConditionRequest_ResponseMask) Reset() {
	*m = CreateLogConditionRequest_ResponseMask{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_log_condition_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *CreateLogConditionRequest_ResponseMask) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*CreateLogConditionRequest_ResponseMask) ProtoMessage() {}

func (m *CreateLogConditionRequest_ResponseMask) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_log_condition_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*CreateLogConditionRequest_ResponseMask) GotenMessage() {}

// Deprecated, Use CreateLogConditionRequest_ResponseMask.ProtoReflect.Descriptor instead.
func (*CreateLogConditionRequest_ResponseMask) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_log_condition_service_proto_rawDescGZIP(), []int{9, 0}
}

func (m *CreateLogConditionRequest_ResponseMask) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *CreateLogConditionRequest_ResponseMask) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *CreateLogConditionRequest_ResponseMask) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *CreateLogConditionRequest_ResponseMask) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

type isCreateLogConditionRequest_ResponseMask_Masking interface {
	isCreateLogConditionRequest_ResponseMask_Masking()
}

type CreateLogConditionRequest_ResponseMask_SkipEntireResponseBody struct {
	// If this flag has value true, then response will contain just empty
	// resource without any fields populated.
	SkipEntireResponseBody bool `protobuf:"varint,1,opt,name=skip_entire_response_body,json=skipEntireResponseBody,proto3,oneof"`
}
type CreateLogConditionRequest_ResponseMask_BodyMask struct {
	// If this field is populated, then resource in response will contain only
	// specific fields.
	BodyMask *log_condition.LogCondition_FieldMask `protobuf:"bytes,2,opt,customtype=LogCondition_FieldMask,name=body_mask,json=bodyMask,proto3,oneof"`
}

func (*CreateLogConditionRequest_ResponseMask_SkipEntireResponseBody) isCreateLogConditionRequest_ResponseMask_Masking() {
}
func (*CreateLogConditionRequest_ResponseMask_BodyMask) isCreateLogConditionRequest_ResponseMask_Masking() {
}
func (m *CreateLogConditionRequest_ResponseMask) GetMasking() isCreateLogConditionRequest_ResponseMask_Masking {
	if m != nil {
		return m.Masking
	}
	return nil
}
func (m *CreateLogConditionRequest_ResponseMask) GetSkipEntireResponseBody() bool {
	if x, ok := m.GetMasking().(*CreateLogConditionRequest_ResponseMask_SkipEntireResponseBody); ok {
		return x.SkipEntireResponseBody
	}
	return false
}
func (m *CreateLogConditionRequest_ResponseMask) GetBodyMask() *log_condition.LogCondition_FieldMask {
	if x, ok := m.GetMasking().(*CreateLogConditionRequest_ResponseMask_BodyMask); ok {
		return x.BodyMask
	}
	return nil
}
func (m *CreateLogConditionRequest_ResponseMask) SetMasking(ofv isCreateLogConditionRequest_ResponseMask_Masking) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "isCreateLogConditionRequest_ResponseMask_Masking", "CreateLogConditionRequest_ResponseMask"))
	}
	m.Masking = ofv
}
func (m *CreateLogConditionRequest_ResponseMask) SetSkipEntireResponseBody(fv bool) {
	m.SetMasking(&CreateLogConditionRequest_ResponseMask_SkipEntireResponseBody{SkipEntireResponseBody: fv})
}
func (m *CreateLogConditionRequest_ResponseMask) SetBodyMask(fv *log_condition.LogCondition_FieldMask) {
	m.SetMasking(&CreateLogConditionRequest_ResponseMask_BodyMask{BodyMask: fv})
}

// CAS - Compare and Swap. This object is used if user wants to make update
// conditional based upon previous resource version.
type UpdateLogConditionRequest_CAS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Conditional desired state of a resource before update.
	ConditionalState *log_condition.LogCondition `protobuf:"bytes,1,opt,name=conditional_state,json=conditionalState,proto3" json:"conditional_state,omitempty"`
	// Field paths from conditional state of resource server should check and
	// compare.
	FieldMask *log_condition.LogCondition_FieldMask `protobuf:"bytes,2,opt,customtype=LogCondition_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
}

func (m *UpdateLogConditionRequest_CAS) Reset() {
	*m = UpdateLogConditionRequest_CAS{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_log_condition_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *UpdateLogConditionRequest_CAS) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*UpdateLogConditionRequest_CAS) ProtoMessage() {}

func (m *UpdateLogConditionRequest_CAS) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_log_condition_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*UpdateLogConditionRequest_CAS) GotenMessage() {}

// Deprecated, Use UpdateLogConditionRequest_CAS.ProtoReflect.Descriptor instead.
func (*UpdateLogConditionRequest_CAS) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_log_condition_service_proto_rawDescGZIP(), []int{10, 0}
}

func (m *UpdateLogConditionRequest_CAS) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *UpdateLogConditionRequest_CAS) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *UpdateLogConditionRequest_CAS) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *UpdateLogConditionRequest_CAS) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *UpdateLogConditionRequest_CAS) GetConditionalState() *log_condition.LogCondition {
	if m != nil {
		return m.ConditionalState
	}
	return nil
}

func (m *UpdateLogConditionRequest_CAS) GetFieldMask() *log_condition.LogCondition_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *UpdateLogConditionRequest_CAS) SetConditionalState(fv *log_condition.LogCondition) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ConditionalState", "UpdateLogConditionRequest_CAS"))
	}
	m.ConditionalState = fv
}

func (m *UpdateLogConditionRequest_CAS) SetFieldMask(fv *log_condition.LogCondition_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "UpdateLogConditionRequest_CAS"))
	}
	m.FieldMask = fv
}

// ResponseMask allows client to reduce response message size.
type UpdateLogConditionRequest_ResponseMask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Types that are valid to be assigned to Masking:
	//	*UpdateLogConditionRequest_ResponseMask_SkipEntireResponseBody
	//	*UpdateLogConditionRequest_ResponseMask_UpdatedFieldsOnly
	//	*UpdateLogConditionRequest_ResponseMask_BodyMask
	Masking isUpdateLogConditionRequest_ResponseMask_Masking `protobuf_oneof:"masking"`
}

func (m *UpdateLogConditionRequest_ResponseMask) Reset() {
	*m = UpdateLogConditionRequest_ResponseMask{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_log_condition_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *UpdateLogConditionRequest_ResponseMask) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*UpdateLogConditionRequest_ResponseMask) ProtoMessage() {}

func (m *UpdateLogConditionRequest_ResponseMask) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_log_condition_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*UpdateLogConditionRequest_ResponseMask) GotenMessage() {}

// Deprecated, Use UpdateLogConditionRequest_ResponseMask.ProtoReflect.Descriptor instead.
func (*UpdateLogConditionRequest_ResponseMask) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_log_condition_service_proto_rawDescGZIP(), []int{10, 1}
}

func (m *UpdateLogConditionRequest_ResponseMask) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *UpdateLogConditionRequest_ResponseMask) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *UpdateLogConditionRequest_ResponseMask) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *UpdateLogConditionRequest_ResponseMask) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

type isUpdateLogConditionRequest_ResponseMask_Masking interface {
	isUpdateLogConditionRequest_ResponseMask_Masking()
}

type UpdateLogConditionRequest_ResponseMask_SkipEntireResponseBody struct {
	// If this flag has value true, then response will contain just empty
	// resource without any fields populated. Field body_mask is ignored if
	// set.
	SkipEntireResponseBody bool `protobuf:"varint,1,opt,name=skip_entire_response_body,json=skipEntireResponseBody,proto3,oneof"`
}
type UpdateLogConditionRequest_ResponseMask_UpdatedFieldsOnly struct {
	// Include all fields that were actually updated during processing. Note
	// this may be larger than update mask if some fields were computed
	// additionally. Name is added as well.
	UpdatedFieldsOnly bool `protobuf:"varint,2,opt,name=updated_fields_only,json=updatedFieldsOnly,proto3,oneof"`
}
type UpdateLogConditionRequest_ResponseMask_BodyMask struct {
	// If this field is populated, then resource in response will contain only
	// specific fields. If skip_entire_response_body is true, this field is
	// ignored.
	BodyMask *log_condition.LogCondition_FieldMask `protobuf:"bytes,3,opt,customtype=LogCondition_FieldMask,name=body_mask,json=bodyMask,proto3,oneof"`
}

func (*UpdateLogConditionRequest_ResponseMask_SkipEntireResponseBody) isUpdateLogConditionRequest_ResponseMask_Masking() {
}
func (*UpdateLogConditionRequest_ResponseMask_UpdatedFieldsOnly) isUpdateLogConditionRequest_ResponseMask_Masking() {
}
func (*UpdateLogConditionRequest_ResponseMask_BodyMask) isUpdateLogConditionRequest_ResponseMask_Masking() {
}
func (m *UpdateLogConditionRequest_ResponseMask) GetMasking() isUpdateLogConditionRequest_ResponseMask_Masking {
	if m != nil {
		return m.Masking
	}
	return nil
}
func (m *UpdateLogConditionRequest_ResponseMask) GetSkipEntireResponseBody() bool {
	if x, ok := m.GetMasking().(*UpdateLogConditionRequest_ResponseMask_SkipEntireResponseBody); ok {
		return x.SkipEntireResponseBody
	}
	return false
}
func (m *UpdateLogConditionRequest_ResponseMask) GetUpdatedFieldsOnly() bool {
	if x, ok := m.GetMasking().(*UpdateLogConditionRequest_ResponseMask_UpdatedFieldsOnly); ok {
		return x.UpdatedFieldsOnly
	}
	return false
}
func (m *UpdateLogConditionRequest_ResponseMask) GetBodyMask() *log_condition.LogCondition_FieldMask {
	if x, ok := m.GetMasking().(*UpdateLogConditionRequest_ResponseMask_BodyMask); ok {
		return x.BodyMask
	}
	return nil
}
func (m *UpdateLogConditionRequest_ResponseMask) SetMasking(ofv isUpdateLogConditionRequest_ResponseMask_Masking) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "isUpdateLogConditionRequest_ResponseMask_Masking", "UpdateLogConditionRequest_ResponseMask"))
	}
	m.Masking = ofv
}
func (m *UpdateLogConditionRequest_ResponseMask) SetSkipEntireResponseBody(fv bool) {
	m.SetMasking(&UpdateLogConditionRequest_ResponseMask_SkipEntireResponseBody{SkipEntireResponseBody: fv})
}
func (m *UpdateLogConditionRequest_ResponseMask) SetUpdatedFieldsOnly(fv bool) {
	m.SetMasking(&UpdateLogConditionRequest_ResponseMask_UpdatedFieldsOnly{UpdatedFieldsOnly: fv})
}
func (m *UpdateLogConditionRequest_ResponseMask) SetBodyMask(fv *log_condition.LogCondition_FieldMask) {
	m.SetMasking(&UpdateLogConditionRequest_ResponseMask_BodyMask{BodyMask: fv})
}

var edgelq_alerting_proto_v1_log_condition_service_proto preflect.FileDescriptor

var edgelq_alerting_proto_v1_log_condition_service_proto_rawDesc = []byte{
	0x0a, 0x34, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x67, 0x5f, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20,
	0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1b, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x63, 0x6c, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f,
	0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24,
	0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2f, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f,
	0x74, 0x65, 0x6e, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x65, 0x64, 0x67, 0x65,
	0x6c, 0x71, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x33, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71,
	0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xba, 0x01,
	0x0a, 0x16, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xb2, 0xda, 0x21, 0x10, 0x0a, 0x0e, 0x0a, 0x0c,
	0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x4f, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61,
	0x73, 0x6b, 0x42, 0x14, 0xb2, 0xda, 0x21, 0x10, 0x32, 0x0e, 0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d,
	0x61, 0x73, 0x6b, 0x12, 0x25, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x22, 0xc8, 0x01, 0x0a, 0x1c, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x14, 0xb2, 0xda, 0x21, 0x10,
	0x0a, 0x0e, 0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x14, 0xb2, 0xda, 0x21, 0x10, 0x32, 0x0e, 0x0a,
	0x0c, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x25, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x4a,
	0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0x95, 0x01, 0x0a, 0x1d, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47,
	0x65, 0x74, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x5f, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d,
	0x6c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2e, 0x0a,
	0x07, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x14,
	0xb2, 0xda, 0x21, 0x10, 0x0a, 0x0e, 0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x22, 0xab, 0x03,
	0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xb2, 0xda, 0x21, 0x10,
	0x3a, 0x0e, 0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0xca, 0xc6, 0x27,
	0x04, 0x12, 0x02, 0x2a, 0x00, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x33, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x14, 0xb2, 0xda, 0x21, 0x10, 0x22, 0x0e, 0x0a, 0x0c, 0x4c, 0x6f, 0x67,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2f, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xb2, 0xda, 0x21, 0x10, 0x2a, 0x0e, 0x0a, 0x0c,
	0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x2c, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xb2, 0xda, 0x21, 0x10, 0x1a, 0x0e, 0x0a, 0x0c, 0x4c,
	0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x4f, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73,
	0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d,
	0x61, 0x73, 0x6b, 0x42, 0x14, 0xb2, 0xda, 0x21, 0x10, 0x32, 0x0e, 0x0a, 0x0c, 0x4c, 0x6f, 0x67,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x4d, 0x61, 0x73, 0x6b, 0x12, 0x25, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x12, 0x2e, 0x0a, 0x13, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xb4, 0x02, 0x0a, 0x19,
	0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0e, 0x6c, 0x6f, 0x67,
	0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x3c, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xb2, 0xda, 0x21, 0x10, 0x22, 0x0e,
	0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d,
	0x70, 0x72, 0x65, 0x76, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x3c, 0x0a,
	0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xb2, 0xda, 0x21, 0x10, 0x22, 0x0e, 0x0a, 0x0c,
	0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x6e, 0x65,
	0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0xbc, 0x01, 0x0a, 0x18, 0x57, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x6f, 0x67, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x28, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xb2,
	0xda, 0x21, 0x10, 0x0a, 0x0e, 0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4f, 0x0a, 0x0a, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x14, 0xb2, 0xda, 0x21, 0x10, 0x32,
	0x0e, 0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x25, 0x0a, 0x04, 0x76, 0x69,
	0x65, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65,
	0x77, 0x22, 0x58, 0x0a, 0x19, 0x57, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b,
	0x0a, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0xc0, 0x04, 0x0a, 0x19,
	0x57, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xb2, 0xda, 0x21, 0x10, 0x3a, 0x0e, 0x0a, 0x0c, 0x4c,
	0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0xca, 0xc6, 0x27, 0x04, 0x12, 0x02, 0x2a, 0x00,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x33, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14,
	0xb2, 0xda, 0x21, 0x10, 0x22, 0x0e, 0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x2f, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x14, 0xb2, 0xda, 0x21, 0x10, 0x2a, 0x0e, 0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79,
	0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x3f, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xb2, 0xda, 0x21, 0x10, 0x1a, 0x0e, 0x0a, 0x0c, 0x4c, 0x6f,
	0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x4f, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61,
	0x73, 0x6b, 0x42, 0x14, 0xb2, 0xda, 0x21, 0x10, 0x32, 0x0e, 0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d,
	0x61, 0x73, 0x6b, 0x12, 0x25, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x12, 0x32, 0x0a, 0x0e, 0x6d, 0x61,
	0x78, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x0c, 0xca, 0xc6, 0x27, 0x08, 0x12, 0x06, 0x1a, 0x02, 0x08, 0x64, 0x2a, 0x00,
	0x52, 0x0c, 0x6d, 0x61, 0x78, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x9d,
	0x04, 0x0a, 0x1a, 0x57, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a,
	0x15, 0x6c, 0x6f, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x13, 0x6c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x67, 0x0a, 0x11, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3b, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0f, 0x70,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x73, 0x6f, 0x66,
	0x74, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69,
	0x73, 0x53, 0x6f, 0x66, 0x74, 0x52, 0x65, 0x73, 0x65, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73,
	0x5f, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x69, 0x73, 0x48, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x1a, 0x8d,
	0x01, 0x0a, 0x0f, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x3c, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xb2, 0xda, 0x21,
	0x10, 0x22, 0x0e, 0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x3c, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xb2, 0xda, 0x21, 0x10, 0x22,
	0x0e, 0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xa3,
	0x03, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xb2, 0xda,
	0x21, 0x10, 0x3a, 0x0e, 0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x50, 0x0a, 0x0d, 0x6c, 0x6f,
	0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x0c, 0xc8, 0xd5, 0x22, 0x01, 0xca, 0xc6, 0x27, 0x04, 0x62, 0x02, 0x08, 0x01, 0x52, 0x0c,
	0x6c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5c, 0x0a, 0x0d,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0c, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x1a, 0xa7, 0x01, 0x0a, 0x0c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x3b, 0x0a, 0x19, 0x73,
	0x6b, 0x69, 0x70, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00,
	0x52, 0x16, 0x73, 0x6b, 0x69, 0x70, 0x45, 0x6e, 0x74, 0x69, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x4f, 0x0a, 0x09, 0x62, 0x6f, 0x64, 0x79,
	0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x14, 0xb2, 0xda, 0x21, 0x10, 0x32, 0x0e, 0x0a,
	0x0c, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x08, 0x62, 0x6f, 0x64, 0x79, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x09, 0x0a, 0x07, 0x6d, 0x61, 0x73,
	0x6b, 0x69, 0x6e, 0x67, 0x22, 0x90, 0x06, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c,
	0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x50, 0x0a, 0x0d, 0x6c, 0x6f, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0c, 0xc8, 0xd5, 0x22, 0x01, 0xca, 0xc6,
	0x27, 0x04, 0x62, 0x02, 0x08, 0x01, 0x52, 0x0c, 0x6c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d,
	0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x14, 0xb2, 0xda, 0x21, 0x10, 0x32, 0x0e, 0x0a, 0x0c, 0x4c,
	0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x40, 0x0a, 0x03, 0x63, 0x61, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x43, 0x41, 0x53, 0x52, 0x03, 0x63, 0x61, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x5c,
	0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f,
	0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0c,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x1a, 0xac, 0x01, 0x0a,
	0x03, 0x43, 0x41, 0x53, 0x12, 0x54, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08,
	0xca, 0xc6, 0x27, 0x04, 0x62, 0x02, 0x10, 0x01, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4f, 0x0a, 0x0a, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x14, 0xb2, 0xda, 0x21, 0x10,
	0x32, 0x0e, 0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x1a, 0xd9, 0x01, 0x0a, 0x0c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x3b, 0x0a, 0x19,
	0x73, 0x6b, 0x69, 0x70, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x00, 0x52, 0x16, 0x73, 0x6b, 0x69, 0x70, 0x45, 0x6e, 0x74, 0x69, 0x72, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x30, 0x0a, 0x13, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x4f, 0x0a, 0x09, 0x62,
	0x6f, 0x64, 0x79, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x14, 0xb2, 0xda, 0x21, 0x10,
	0x32, 0x0e, 0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x08, 0x62, 0x6f, 0x64, 0x79, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x09, 0x0a, 0x07,
	0x6d, 0x61, 0x73, 0x6b, 0x69, 0x6e, 0x67, 0x22, 0x45, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x14, 0xb2, 0xda, 0x21, 0x10, 0x0a, 0x0e, 0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x95,
	0x03, 0x0a, 0x1a, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xb2,
	0xda, 0x21, 0x10, 0x3a, 0x0e, 0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08,
	0xca, 0xc6, 0x27, 0x04, 0x12, 0x02, 0x2a, 0x00, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x33, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xb2, 0xda, 0x21, 0x10, 0x22, 0x0e, 0x0a, 0x0c,
	0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2f, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xb2, 0xda, 0x21, 0x10, 0x2a,
	0x0e, 0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x2c, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xb2, 0xda, 0x21, 0x10, 0x1a, 0x0e,
	0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x4f, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x6d, 0x61, 0x73, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x14, 0xb2, 0xda, 0x21, 0x10, 0x32, 0x0e, 0x0a, 0x0c,
	0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x25, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x22, 0xb6, 0x02, 0x0a, 0x1b, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x5f, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x6c,
	0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3c, 0x0a, 0x0f,
	0x70, 0x72, 0x65, 0x76, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xb2, 0xda, 0x21, 0x10, 0x22, 0x0e, 0x0a, 0x0c, 0x4c,
	0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x70, 0x72, 0x65,
	0x76, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x3c, 0x0a, 0x0f, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x14, 0xb2, 0xda, 0x21, 0x10, 0x22, 0x0e, 0x0a, 0x0c, 0x4c, 0x6f, 0x67,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x2e, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x32,
	0xe2, 0x10, 0x0a, 0x13, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xc4, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4c,
	0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x69, 0x82, 0xdb, 0x21, 0x23, 0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x03, 0x67, 0x65, 0x74, 0x2a, 0x06, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x32, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xa2, 0xdc, 0x21, 0x02,
	0x08, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x12, 0x30, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e,
	0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x67, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x8a, 0xcc, 0x26, 0x00, 0x12, 0xdd,
	0x01, 0x0a, 0x15, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47,
	0x65, 0x74, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x65, 0x82, 0xdb, 0x21, 0x35, 0x0a, 0x0c, 0x4c,
	0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x08, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x47, 0x65, 0x74, 0x20, 0x01, 0x2a, 0x07, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x32, 0x10, 0x12, 0x0e, 0x6c, 0x6f, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0xa2, 0xdc, 0x21, 0x02, 0x08, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a,
	0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x3a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x8a, 0xcc, 0x26, 0x00, 0x12, 0xe6,
	0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x29, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2a, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7a, 0x82, 0xdb, 0x21,
	0x34, 0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x2a, 0x08, 0x1a, 0x06, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x32, 0x10, 0x12, 0x0e, 0x6c, 0x6f, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0xa2, 0xdc, 0x21, 0x02, 0x08, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x32, 0x12, 0x30, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x6c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x8a, 0xcc, 0x26, 0x00, 0x12, 0xe1, 0x01, 0x0a, 0x11, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x57, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x73, 0x82, 0xdb, 0x21, 0x27, 0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x05, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2a,
	0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x08, 0x12, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0xa2, 0xdc, 0x21, 0x02, 0x08, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x22, 0x36, 0x2f,
	0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2f, 0x2a, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x6c,
	0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x3a,
	0x77, 0x61, 0x74, 0x63, 0x68, 0x8a, 0xcc, 0x26, 0x00, 0x30, 0x01, 0x12, 0xfa, 0x01, 0x0a, 0x12,
	0x57, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x2a, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x88, 0x01, 0x82, 0xdb,
	0x21, 0x3c, 0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x05, 0x77, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x2a, 0x08, 0x1a, 0x06, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x32, 0x17, 0x12, 0x15, 0x6c, 0x6f, 0x67, 0x5f, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0xa2, 0xdc,
	0x21, 0x02, 0x08, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x22, 0x36, 0x2f, 0x76, 0x31, 0x2f,
	0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2f, 0x2a, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x6c,
	0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x77, 0x61, 0x74,
	0x63, 0x68, 0x8a, 0xcc, 0x26, 0x00, 0x30, 0x01, 0x12, 0xf2, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2a, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f,
	0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x90, 0x01, 0x82, 0xdb, 0x21,
	0x39, 0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x06, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x01, 0x2a, 0x17, 0x12, 0x0d, 0x6c, 0x6f, 0x67,
	0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x06, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x32, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xa2, 0xdc, 0x21, 0x02, 0x10, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x41, 0x3a, 0x0d, 0x6c, 0x6f, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x30, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x6c, 0x6f, 0x67, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x8a, 0xcc, 0x26, 0x02, 0x10, 0x01, 0x12, 0xf6, 0x01,
	0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x94, 0x01, 0x82, 0xdb, 0x21, 0x2f, 0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2a, 0x0f, 0x12, 0x0d,
	0x6c, 0x6f, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x06, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0xa2, 0xdc, 0x21, 0x02, 0x10, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x4f, 0x3a, 0x0d, 0x6c, 0x6f, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0x3e, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6c, 0x6f, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x2a, 0x2f,
	0x6c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d,
	0x8a, 0xcc, 0x26, 0x02, 0x10, 0x01, 0x12, 0xc0, 0x01, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x66, 0x82, 0xdb, 0x21, 0x1e, 0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2a, 0x06, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0xa2, 0xdc, 0x21, 0x02, 0x10, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x32, 0x2a, 0x30, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x2a, 0x7d, 0x8a, 0xcc, 0x26, 0x02, 0x10, 0x01, 0x12, 0xf6, 0x01, 0x0a, 0x13, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x2b, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x83, 0x01, 0x82,
	0xdb, 0x21, 0x36, 0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x2a, 0x08, 0x1a,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x32, 0x10, 0x12, 0x0e, 0x6c, 0x6f, 0x67, 0x5f, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0xa2, 0xdc, 0x21, 0x02, 0x08, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x39, 0x12, 0x37, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x6c, 0x6f, 0x67, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x8a, 0xcc,
	0x26, 0x00, 0x1a, 0x30, 0xca, 0x41, 0x13, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2e, 0x63, 0x6f, 0x6d, 0xd2, 0x41, 0x17, 0x68, 0x74, 0x74,
	0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71,
	0x2e, 0x63, 0x6f, 0x6d, 0x42, 0xba, 0x02, 0xe8, 0xde, 0x21, 0x00, 0x82, 0xff, 0xd0, 0x02, 0x53,
	0x0a, 0x14, 0x6c, 0x6f, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65,
	0x6c, 0x71, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x8a, 0xff, 0xd0, 0x02, 0x53, 0x0a, 0x14, 0x6c, 0x6f, 0x67, 0x5f, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x3b,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f,
	0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x0a, 0x16, 0x63, 0x6f, 0x6d,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x62,
	0x2e, 0x76, 0x31, 0x42, 0x18, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x00, 0x5a,
	0x50, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x6c,
	0x6f, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x6c, 0x6f, 0x67,
	0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	edgelq_alerting_proto_v1_log_condition_service_proto_rawDescOnce sync.Once
	edgelq_alerting_proto_v1_log_condition_service_proto_rawDescData = edgelq_alerting_proto_v1_log_condition_service_proto_rawDesc
)

func edgelq_alerting_proto_v1_log_condition_service_proto_rawDescGZIP() []byte {
	edgelq_alerting_proto_v1_log_condition_service_proto_rawDescOnce.Do(func() {
		edgelq_alerting_proto_v1_log_condition_service_proto_rawDescData = protoimpl.X.CompressGZIP(edgelq_alerting_proto_v1_log_condition_service_proto_rawDescData)
	})
	return edgelq_alerting_proto_v1_log_condition_service_proto_rawDescData
}

var edgelq_alerting_proto_v1_log_condition_service_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var edgelq_alerting_proto_v1_log_condition_service_proto_goTypes = []interface{}{
	(*GetLogConditionRequest)(nil),                     // 0: ntt.alerting.v1.GetLogConditionRequest
	(*BatchGetLogConditionsRequest)(nil),               // 1: ntt.alerting.v1.BatchGetLogConditionsRequest
	(*BatchGetLogConditionsResponse)(nil),              // 2: ntt.alerting.v1.BatchGetLogConditionsResponse
	(*ListLogConditionsRequest)(nil),                   // 3: ntt.alerting.v1.ListLogConditionsRequest
	(*ListLogConditionsResponse)(nil),                  // 4: ntt.alerting.v1.ListLogConditionsResponse
	(*WatchLogConditionRequest)(nil),                   // 5: ntt.alerting.v1.WatchLogConditionRequest
	(*WatchLogConditionResponse)(nil),                  // 6: ntt.alerting.v1.WatchLogConditionResponse
	(*WatchLogConditionsRequest)(nil),                  // 7: ntt.alerting.v1.WatchLogConditionsRequest
	(*WatchLogConditionsResponse)(nil),                 // 8: ntt.alerting.v1.WatchLogConditionsResponse
	(*CreateLogConditionRequest)(nil),                  // 9: ntt.alerting.v1.CreateLogConditionRequest
	(*UpdateLogConditionRequest)(nil),                  // 10: ntt.alerting.v1.UpdateLogConditionRequest
	(*DeleteLogConditionRequest)(nil),                  // 11: ntt.alerting.v1.DeleteLogConditionRequest
	(*SearchLogConditionsRequest)(nil),                 // 12: ntt.alerting.v1.SearchLogConditionsRequest
	(*SearchLogConditionsResponse)(nil),                // 13: ntt.alerting.v1.SearchLogConditionsResponse
	(*WatchLogConditionsResponse_PageTokenChange)(nil), // 14: ntt.alerting.v1.WatchLogConditionsResponse.PageTokenChange
	(*CreateLogConditionRequest_ResponseMask)(nil),     // 15: ntt.alerting.v1.CreateLogConditionRequest.ResponseMask
	(*UpdateLogConditionRequest_CAS)(nil),              // 16: ntt.alerting.v1.UpdateLogConditionRequest.CAS
	(*UpdateLogConditionRequest_ResponseMask)(nil),     // 17: ntt.alerting.v1.UpdateLogConditionRequest.ResponseMask
	(*log_condition.LogCondition_FieldMask)(nil),       // 18: ntt.alerting.v1.LogCondition_FieldMask
	(view.View)(0),                           // 19: goten.types.View
	(*log_condition.LogCondition)(nil),       // 20: ntt.alerting.v1.LogCondition
	(*log_condition.LogConditionChange)(nil), // 21: ntt.alerting.v1.LogConditionChange
	(watch_type.WatchType)(0),                // 22: goten.types.WatchType
	(*timestamppb.Timestamp)(nil),            // 23: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),                    // 24: google.protobuf.Empty
}
var edgelq_alerting_proto_v1_log_condition_service_proto_depIdxs = []int32{
	18, // 0: ntt.alerting.v1.GetLogConditionRequest.field_mask:type_name -> ntt.alerting.v1.LogCondition_FieldMask
	19, // 1: ntt.alerting.v1.GetLogConditionRequest.view:type_name -> goten.types.View
	18, // 2: ntt.alerting.v1.BatchGetLogConditionsRequest.field_mask:type_name -> ntt.alerting.v1.LogCondition_FieldMask
	19, // 3: ntt.alerting.v1.BatchGetLogConditionsRequest.view:type_name -> goten.types.View
	20, // 4: ntt.alerting.v1.BatchGetLogConditionsResponse.log_conditions:type_name -> ntt.alerting.v1.LogCondition
	18, // 5: ntt.alerting.v1.ListLogConditionsRequest.field_mask:type_name -> ntt.alerting.v1.LogCondition_FieldMask
	19, // 6: ntt.alerting.v1.ListLogConditionsRequest.view:type_name -> goten.types.View
	20, // 7: ntt.alerting.v1.ListLogConditionsResponse.log_conditions:type_name -> ntt.alerting.v1.LogCondition
	18, // 8: ntt.alerting.v1.WatchLogConditionRequest.field_mask:type_name -> ntt.alerting.v1.LogCondition_FieldMask
	19, // 9: ntt.alerting.v1.WatchLogConditionRequest.view:type_name -> goten.types.View
	21, // 10: ntt.alerting.v1.WatchLogConditionResponse.change:type_name -> ntt.alerting.v1.LogConditionChange
	22, // 11: ntt.alerting.v1.WatchLogConditionsRequest.type:type_name -> goten.types.WatchType
	23, // 12: ntt.alerting.v1.WatchLogConditionsRequest.starting_time:type_name -> google.protobuf.Timestamp
	18, // 13: ntt.alerting.v1.WatchLogConditionsRequest.field_mask:type_name -> ntt.alerting.v1.LogCondition_FieldMask
	19, // 14: ntt.alerting.v1.WatchLogConditionsRequest.view:type_name -> goten.types.View
	21, // 15: ntt.alerting.v1.WatchLogConditionsResponse.log_condition_changes:type_name -> ntt.alerting.v1.LogConditionChange
	14, // 16: ntt.alerting.v1.WatchLogConditionsResponse.page_token_change:type_name -> ntt.alerting.v1.WatchLogConditionsResponse.PageTokenChange
	20, // 17: ntt.alerting.v1.CreateLogConditionRequest.log_condition:type_name -> ntt.alerting.v1.LogCondition
	15, // 18: ntt.alerting.v1.CreateLogConditionRequest.response_mask:type_name -> ntt.alerting.v1.CreateLogConditionRequest.ResponseMask
	20, // 19: ntt.alerting.v1.UpdateLogConditionRequest.log_condition:type_name -> ntt.alerting.v1.LogCondition
	18, // 20: ntt.alerting.v1.UpdateLogConditionRequest.update_mask:type_name -> ntt.alerting.v1.LogCondition_FieldMask
	16, // 21: ntt.alerting.v1.UpdateLogConditionRequest.cas:type_name -> ntt.alerting.v1.UpdateLogConditionRequest.CAS
	17, // 22: ntt.alerting.v1.UpdateLogConditionRequest.response_mask:type_name -> ntt.alerting.v1.UpdateLogConditionRequest.ResponseMask
	18, // 23: ntt.alerting.v1.SearchLogConditionsRequest.field_mask:type_name -> ntt.alerting.v1.LogCondition_FieldMask
	19, // 24: ntt.alerting.v1.SearchLogConditionsRequest.view:type_name -> goten.types.View
	20, // 25: ntt.alerting.v1.SearchLogConditionsResponse.log_conditions:type_name -> ntt.alerting.v1.LogCondition
	18, // 26: ntt.alerting.v1.CreateLogConditionRequest.ResponseMask.body_mask:type_name -> ntt.alerting.v1.LogCondition_FieldMask
	20, // 27: ntt.alerting.v1.UpdateLogConditionRequest.CAS.conditional_state:type_name -> ntt.alerting.v1.LogCondition
	18, // 28: ntt.alerting.v1.UpdateLogConditionRequest.CAS.field_mask:type_name -> ntt.alerting.v1.LogCondition_FieldMask
	18, // 29: ntt.alerting.v1.UpdateLogConditionRequest.ResponseMask.body_mask:type_name -> ntt.alerting.v1.LogCondition_FieldMask
	0,  // 30: ntt.alerting.v1.LogConditionService.GetLogCondition:input_type -> ntt.alerting.v1.GetLogConditionRequest
	1,  // 31: ntt.alerting.v1.LogConditionService.BatchGetLogConditions:input_type -> ntt.alerting.v1.BatchGetLogConditionsRequest
	3,  // 32: ntt.alerting.v1.LogConditionService.ListLogConditions:input_type -> ntt.alerting.v1.ListLogConditionsRequest
	5,  // 33: ntt.alerting.v1.LogConditionService.WatchLogCondition:input_type -> ntt.alerting.v1.WatchLogConditionRequest
	7,  // 34: ntt.alerting.v1.LogConditionService.WatchLogConditions:input_type -> ntt.alerting.v1.WatchLogConditionsRequest
	9,  // 35: ntt.alerting.v1.LogConditionService.CreateLogCondition:input_type -> ntt.alerting.v1.CreateLogConditionRequest
	10, // 36: ntt.alerting.v1.LogConditionService.UpdateLogCondition:input_type -> ntt.alerting.v1.UpdateLogConditionRequest
	11, // 37: ntt.alerting.v1.LogConditionService.DeleteLogCondition:input_type -> ntt.alerting.v1.DeleteLogConditionRequest
	12, // 38: ntt.alerting.v1.LogConditionService.SearchLogConditions:input_type -> ntt.alerting.v1.SearchLogConditionsRequest
	20, // 39: ntt.alerting.v1.LogConditionService.GetLogCondition:output_type -> ntt.alerting.v1.LogCondition
	2,  // 40: ntt.alerting.v1.LogConditionService.BatchGetLogConditions:output_type -> ntt.alerting.v1.BatchGetLogConditionsResponse
	4,  // 41: ntt.alerting.v1.LogConditionService.ListLogConditions:output_type -> ntt.alerting.v1.ListLogConditionsResponse
	6,  // 42: ntt.alerting.v1.LogConditionService.WatchLogCondition:output_type -> ntt.alerting.v1.WatchLogConditionResponse
	8,  // 43: ntt.alerting.v1.LogConditionService.WatchLogConditions:output_type -> ntt.alerting.v1.WatchLogConditionsResponse
	20, // 44: ntt.alerting.v1.LogConditionService.CreateLogCondition:output_type -> ntt.alerting.v1.LogCondition
	20, // 45: ntt.alerting.v1.LogConditionService.UpdateLogCondition:output_type -> ntt.alerting.v1.LogCondition
	24, // 46: ntt.alerting.v1.LogConditionService.DeleteLogCondition:output_type -> google.protobuf.Empty
	13, // 47: ntt.alerting.v1.LogConditionService.SearchLogConditions:output_type -> ntt.alerting.v1.SearchLogConditionsResponse
	39, // [39:48] is the sub-list for method output_type
	30, // [30:39] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { edgelq_alerting_proto_v1_log_condition_service_proto_init() }
func edgelq_alerting_proto_v1_log_condition_service_proto_init() {
	if edgelq_alerting_proto_v1_log_condition_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		edgelq_alerting_proto_v1_log_condition_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLogConditionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_log_condition_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetLogConditionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_log_condition_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetLogConditionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_log_condition_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLogConditionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_log_condition_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLogConditionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_log_condition_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchLogConditionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_log_condition_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchLogConditionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_log_condition_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchLogConditionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_log_condition_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchLogConditionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_log_condition_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateLogConditionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_log_condition_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateLogConditionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_log_condition_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteLogConditionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_log_condition_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchLogConditionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_log_condition_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchLogConditionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_log_condition_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchLogConditionsResponse_PageTokenChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_log_condition_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateLogConditionRequest_ResponseMask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_log_condition_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateLogConditionRequest_CAS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_log_condition_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateLogConditionRequest_ResponseMask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	edgelq_alerting_proto_v1_log_condition_service_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*CreateLogConditionRequest_ResponseMask_SkipEntireResponseBody)(nil),
		(*CreateLogConditionRequest_ResponseMask_BodyMask)(nil),
	}
	edgelq_alerting_proto_v1_log_condition_service_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*UpdateLogConditionRequest_ResponseMask_SkipEntireResponseBody)(nil),
		(*UpdateLogConditionRequest_ResponseMask_UpdatedFieldsOnly)(nil),
		(*UpdateLogConditionRequest_ResponseMask_BodyMask)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: edgelq_alerting_proto_v1_log_condition_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           edgelq_alerting_proto_v1_log_condition_service_proto_goTypes,
		DependencyIndexes: edgelq_alerting_proto_v1_log_condition_service_proto_depIdxs,
		MessageInfos:      edgelq_alerting_proto_v1_log_condition_service_proto_msgTypes,
	}.Build()
	edgelq_alerting_proto_v1_log_condition_service_proto = out.File
	edgelq_alerting_proto_v1_log_condition_service_proto_rawDesc = nil
	edgelq_alerting_proto_v1_log_condition_service_proto_goTypes = nil
	edgelq_alerting_proto_v1_log_condition_service_proto_depIdxs = nil
}
