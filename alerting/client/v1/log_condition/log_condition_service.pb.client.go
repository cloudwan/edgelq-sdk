// Code generated by protoc-gen-goten-client
// API: LogConditionService
// DO NOT EDIT!!!

package log_condition_client

import (
	"context"

	"google.golang.org/grpc"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	log_condition "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/log_condition"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = protoimpl.DescBuilder{}
	_ = new(context.Context)
	_ = grpc.ClientConn{}
)

// make sure we're using proto imports
var (
	_ = &log_condition.LogCondition{}
	_ = &emptypb.Empty{}
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// LogConditionServiceClient is the client API for LogConditionService.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LogConditionServiceClient interface {
	GetLogCondition(ctx context.Context, in *GetLogConditionRequest, opts ...grpc.CallOption) (*log_condition.LogCondition, error)
	BatchGetLogConditions(ctx context.Context, in *BatchGetLogConditionsRequest, opts ...grpc.CallOption) (*BatchGetLogConditionsResponse, error)
	ListLogConditions(ctx context.Context, in *ListLogConditionsRequest, opts ...grpc.CallOption) (*ListLogConditionsResponse, error)
	WatchLogCondition(ctx context.Context, in *WatchLogConditionRequest, opts ...grpc.CallOption) (WatchLogConditionClientStream, error)
	WatchLogConditions(ctx context.Context, in *WatchLogConditionsRequest, opts ...grpc.CallOption) (WatchLogConditionsClientStream, error)
	CreateLogCondition(ctx context.Context, in *CreateLogConditionRequest, opts ...grpc.CallOption) (*log_condition.LogCondition, error)
	UpdateLogCondition(ctx context.Context, in *UpdateLogConditionRequest, opts ...grpc.CallOption) (*log_condition.LogCondition, error)
	DeleteLogCondition(ctx context.Context, in *DeleteLogConditionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SearchLogConditions(ctx context.Context, in *SearchLogConditionsRequest, opts ...grpc.CallOption) (*SearchLogConditionsResponse, error)
}

type client struct {
	cc grpc.ClientConnInterface
}

func NewLogConditionServiceClient(cc grpc.ClientConnInterface) LogConditionServiceClient {
	return &client{cc}
}

func (c *client) GetLogCondition(ctx context.Context, in *GetLogConditionRequest, opts ...grpc.CallOption) (*log_condition.LogCondition, error) {
	out := new(log_condition.LogCondition)
	err := c.cc.Invoke(ctx, "/ntt.alerting.v1.LogConditionService/GetLogCondition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) BatchGetLogConditions(ctx context.Context, in *BatchGetLogConditionsRequest, opts ...grpc.CallOption) (*BatchGetLogConditionsResponse, error) {
	out := new(BatchGetLogConditionsResponse)
	err := c.cc.Invoke(ctx, "/ntt.alerting.v1.LogConditionService/BatchGetLogConditions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListLogConditions(ctx context.Context, in *ListLogConditionsRequest, opts ...grpc.CallOption) (*ListLogConditionsResponse, error) {
	out := new(ListLogConditionsResponse)
	err := c.cc.Invoke(ctx, "/ntt.alerting.v1.LogConditionService/ListLogConditions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) WatchLogCondition(ctx context.Context, in *WatchLogConditionRequest, opts ...grpc.CallOption) (WatchLogConditionClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchLogCondition",
			ServerStreams: true,
		},
		"/ntt.alerting.v1.LogConditionService/WatchLogCondition", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchLogConditionWatchLogConditionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchLogConditionClientStream interface {
	Recv() (*WatchLogConditionResponse, error)
	grpc.ClientStream
}

type watchLogConditionWatchLogConditionClient struct {
	grpc.ClientStream
}

func (x *watchLogConditionWatchLogConditionClient) Recv() (*WatchLogConditionResponse, error) {
	m := new(WatchLogConditionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) WatchLogConditions(ctx context.Context, in *WatchLogConditionsRequest, opts ...grpc.CallOption) (WatchLogConditionsClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchLogConditions",
			ServerStreams: true,
		},
		"/ntt.alerting.v1.LogConditionService/WatchLogConditions", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchLogConditionsWatchLogConditionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchLogConditionsClientStream interface {
	Recv() (*WatchLogConditionsResponse, error)
	grpc.ClientStream
}

type watchLogConditionsWatchLogConditionsClient struct {
	grpc.ClientStream
}

func (x *watchLogConditionsWatchLogConditionsClient) Recv() (*WatchLogConditionsResponse, error) {
	m := new(WatchLogConditionsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) CreateLogCondition(ctx context.Context, in *CreateLogConditionRequest, opts ...grpc.CallOption) (*log_condition.LogCondition, error) {
	out := new(log_condition.LogCondition)
	err := c.cc.Invoke(ctx, "/ntt.alerting.v1.LogConditionService/CreateLogCondition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateLogCondition(ctx context.Context, in *UpdateLogConditionRequest, opts ...grpc.CallOption) (*log_condition.LogCondition, error) {
	out := new(log_condition.LogCondition)
	err := c.cc.Invoke(ctx, "/ntt.alerting.v1.LogConditionService/UpdateLogCondition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeleteLogCondition(ctx context.Context, in *DeleteLogConditionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ntt.alerting.v1.LogConditionService/DeleteLogCondition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) SearchLogConditions(ctx context.Context, in *SearchLogConditionsRequest, opts ...grpc.CallOption) (*SearchLogConditionsResponse, error) {
	out := new(SearchLogConditionsResponse)
	err := c.cc.Invoke(ctx, "/ntt.alerting.v1.LogConditionService/SearchLogConditions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
