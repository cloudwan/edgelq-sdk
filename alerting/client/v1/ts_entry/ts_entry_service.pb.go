// Code generated by protoc-gen-goten-go
// File: edgelq/alerting/proto/v1/ts_entry_service.proto
// DO NOT EDIT!!!

package ts_entry_client

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	ts_condition "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/ts_condition"
	ts_entry "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/ts_entry"
	view "github.com/cloudwan/goten-sdk/types/view"
	watch_type "github.com/cloudwan/goten-sdk/types/watch_type"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &ts_condition.TsCondition{}
	_ = &ts_entry.TsEntry{}
	_ = &emptypb.Empty{}
	_ = &fieldmaskpb.FieldMask{}
	_ = &timestamppb.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A request message of the GetTsEntry method.
type GetTsEntryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of ntt.alerting.v1.TsEntry
	Name *ts_entry.Name `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *ts_entry.TsEntry_FieldMask `protobuf:"bytes,3,opt,customtype=TsEntry_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,4,opt,name=view,proto3,enum=goten.types.View" json:"view,omitempty"`
}

func (m *GetTsEntryRequest) Reset() {
	*m = GetTsEntryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_ts_entry_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *GetTsEntryRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*GetTsEntryRequest) ProtoMessage() {}

func (m *GetTsEntryRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_ts_entry_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*GetTsEntryRequest) GotenMessage() {}

// Deprecated, Use GetTsEntryRequest.ProtoReflect.Descriptor instead.
func (*GetTsEntryRequest) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_ts_entry_service_proto_rawDescGZIP(), []int{0}
}

func (m *GetTsEntryRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *GetTsEntryRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *GetTsEntryRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *GetTsEntryRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *GetTsEntryRequest) GetName() *ts_entry.Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *GetTsEntryRequest) GetFieldMask() *ts_entry.TsEntry_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *GetTsEntryRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *GetTsEntryRequest) SetName(fv *ts_entry.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "GetTsEntryRequest"))
	}
	m.Name = fv
}

func (m *GetTsEntryRequest) SetFieldMask(fv *ts_entry.TsEntry_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "GetTsEntryRequest"))
	}
	m.FieldMask = fv
}

func (m *GetTsEntryRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "GetTsEntryRequest"))
	}
	m.View = fv
}

// A request message of the BatchGetTsEntries method.
type BatchGetTsEntriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Names of TsEntries
	Names []*ts_entry.Name `protobuf:"bytes,2,rep,customtype=Name,name=names,proto3" json:"names,omitempty"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *ts_entry.TsEntry_FieldMask `protobuf:"bytes,3,opt,customtype=TsEntry_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,4,opt,name=view,proto3,enum=goten.types.View" json:"view,omitempty"`
}

func (m *BatchGetTsEntriesRequest) Reset() {
	*m = BatchGetTsEntriesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_ts_entry_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *BatchGetTsEntriesRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*BatchGetTsEntriesRequest) ProtoMessage() {}

func (m *BatchGetTsEntriesRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_ts_entry_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*BatchGetTsEntriesRequest) GotenMessage() {}

// Deprecated, Use BatchGetTsEntriesRequest.ProtoReflect.Descriptor instead.
func (*BatchGetTsEntriesRequest) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_ts_entry_service_proto_rawDescGZIP(), []int{1}
}

func (m *BatchGetTsEntriesRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *BatchGetTsEntriesRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *BatchGetTsEntriesRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *BatchGetTsEntriesRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *BatchGetTsEntriesRequest) GetNames() []*ts_entry.Name {
	if m != nil {
		return m.Names
	}
	return nil
}

func (m *BatchGetTsEntriesRequest) GetFieldMask() *ts_entry.TsEntry_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *BatchGetTsEntriesRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *BatchGetTsEntriesRequest) SetNames(fv []*ts_entry.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Names", "BatchGetTsEntriesRequest"))
	}
	m.Names = fv
}

func (m *BatchGetTsEntriesRequest) SetFieldMask(fv *ts_entry.TsEntry_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "BatchGetTsEntriesRequest"))
	}
	m.FieldMask = fv
}

func (m *BatchGetTsEntriesRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "BatchGetTsEntriesRequest"))
	}
	m.View = fv
}

// A response message of the BatchGetTsEntries method.
type BatchGetTsEntriesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// found TsEntries
	TsEntries []*ts_entry.TsEntry `protobuf:"bytes,1,rep,name=ts_entries,json=tsEntries,proto3" json:"ts_entries,omitempty"`
	// list of not found TsEntries
	Missing []*ts_entry.Name `protobuf:"bytes,2,rep,customtype=Name,name=missing,proto3" json:"missing,omitempty"`
}

func (m *BatchGetTsEntriesResponse) Reset() {
	*m = BatchGetTsEntriesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_ts_entry_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *BatchGetTsEntriesResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*BatchGetTsEntriesResponse) ProtoMessage() {}

func (m *BatchGetTsEntriesResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_ts_entry_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*BatchGetTsEntriesResponse) GotenMessage() {}

// Deprecated, Use BatchGetTsEntriesResponse.ProtoReflect.Descriptor instead.
func (*BatchGetTsEntriesResponse) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_ts_entry_service_proto_rawDescGZIP(), []int{2}
}

func (m *BatchGetTsEntriesResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *BatchGetTsEntriesResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *BatchGetTsEntriesResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *BatchGetTsEntriesResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *BatchGetTsEntriesResponse) GetTsEntries() []*ts_entry.TsEntry {
	if m != nil {
		return m.TsEntries
	}
	return nil
}

func (m *BatchGetTsEntriesResponse) GetMissing() []*ts_entry.Name {
	if m != nil {
		return m.Missing
	}
	return nil
}

func (m *BatchGetTsEntriesResponse) SetTsEntries(fv []*ts_entry.TsEntry) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TsEntries", "BatchGetTsEntriesResponse"))
	}
	m.TsEntries = fv
}

func (m *BatchGetTsEntriesResponse) SetMissing(fv []*ts_entry.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Missing", "BatchGetTsEntriesResponse"))
	}
	m.Missing = fv
}

// A request message of the ListTsEntries method.
type ListTsEntriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Parent name of ntt.alerting.v1.TsEntry
	Parent *ts_entry.ParentName `protobuf:"bytes,1,opt,customtype=ParentName,name=parent,proto3" json:"parent,omitempty"`
	// Requested page size. Server may return fewer TsEntries than requested.
	// If unspecified, server will pick an appropriate default.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A token identifying a page of results the server should return.
	// Typically, this is the value of
	// ListTsEntriesResponse.next_page_token.
	PageToken *ts_entry.PagerCursor `protobuf:"bytes,3,opt,customtype=PagerCursor,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Order By -
	// https://cloud.google.com/apis/design/design_patterns#list_pagination list
	// of field path with order directive, either 'asc' or 'desc'. If direction is
	// not provided, 'asc' is assumed. e.g. "state.nested_field asc,
	// state.something.else desc, theme"
	OrderBy *ts_entry.OrderBy `protobuf:"bytes,4,opt,customtype=OrderBy,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	// Filter - filter results by field criteria. Simplified SQL-like syntax with
	// following operators:
	// <=, >=, =, !=, <, >, LIKE, CONTAINS (aliases CONTAIN, HAS, HAVE), IN, IS
	// [NOT] NULL | NaN . Combine conditions with OR | AND example: 'meta.labels
	// CONTAINS "severity:important" OR (state.last_error_time >
	// "2018-11-15T10:00:00Z" AND state.status = "ERROR")'
	Filter *ts_entry.Filter `protobuf:"bytes,5,opt,customtype=Filter,name=filter,proto3" json:"filter,omitempty"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *ts_entry.TsEntry_FieldMask `protobuf:"bytes,6,opt,customtype=TsEntry_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,7,opt,name=view,proto3,enum=goten.types.View" json:"view,omitempty"`
	// Indicates if list response should contain total count and offset (fields
	// current_offset and total_results_count).
	IncludePagingInfo bool `protobuf:"varint,8,opt,name=include_paging_info,json=includePagingInfo,proto3" json:"include_paging_info,omitempty"`
}

func (m *ListTsEntriesRequest) Reset() {
	*m = ListTsEntriesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_ts_entry_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ListTsEntriesRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ListTsEntriesRequest) ProtoMessage() {}

func (m *ListTsEntriesRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_ts_entry_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ListTsEntriesRequest) GotenMessage() {}

// Deprecated, Use ListTsEntriesRequest.ProtoReflect.Descriptor instead.
func (*ListTsEntriesRequest) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_ts_entry_service_proto_rawDescGZIP(), []int{3}
}

func (m *ListTsEntriesRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ListTsEntriesRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ListTsEntriesRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ListTsEntriesRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ListTsEntriesRequest) GetParent() *ts_entry.ParentName {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *ListTsEntriesRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return int32(0)
}

func (m *ListTsEntriesRequest) GetPageToken() *ts_entry.PagerCursor {
	if m != nil {
		return m.PageToken
	}
	return nil
}

func (m *ListTsEntriesRequest) GetOrderBy() *ts_entry.OrderBy {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

func (m *ListTsEntriesRequest) GetFilter() *ts_entry.Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *ListTsEntriesRequest) GetFieldMask() *ts_entry.TsEntry_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *ListTsEntriesRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *ListTsEntriesRequest) GetIncludePagingInfo() bool {
	if m != nil {
		return m.IncludePagingInfo
	}
	return false
}

func (m *ListTsEntriesRequest) SetParent(fv *ts_entry.ParentName) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Parent", "ListTsEntriesRequest"))
	}
	m.Parent = fv
}

func (m *ListTsEntriesRequest) SetPageSize(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageSize", "ListTsEntriesRequest"))
	}
	m.PageSize = fv
}

func (m *ListTsEntriesRequest) SetPageToken(fv *ts_entry.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageToken", "ListTsEntriesRequest"))
	}
	m.PageToken = fv
}

func (m *ListTsEntriesRequest) SetOrderBy(fv *ts_entry.OrderBy) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OrderBy", "ListTsEntriesRequest"))
	}
	m.OrderBy = fv
}

func (m *ListTsEntriesRequest) SetFilter(fv *ts_entry.Filter) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Filter", "ListTsEntriesRequest"))
	}
	m.Filter = fv
}

func (m *ListTsEntriesRequest) SetFieldMask(fv *ts_entry.TsEntry_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "ListTsEntriesRequest"))
	}
	m.FieldMask = fv
}

func (m *ListTsEntriesRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "ListTsEntriesRequest"))
	}
	m.View = fv
}

func (m *ListTsEntriesRequest) SetIncludePagingInfo(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IncludePagingInfo", "ListTsEntriesRequest"))
	}
	m.IncludePagingInfo = fv
}

// A response message of the ListTsEntries method.
type ListTsEntriesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// The list of TsEntries
	TsEntries []*ts_entry.TsEntry `protobuf:"bytes,1,rep,name=ts_entries,json=tsEntries,proto3" json:"ts_entries,omitempty"`
	// A token to retrieve previous page of results.
	//
	// Pass this value in the ListTsEntriesRequest.page_token.
	PrevPageToken *ts_entry.PagerCursor `protobuf:"bytes,3,opt,customtype=PagerCursor,name=prev_page_token,json=prevPageToken,proto3" json:"prev_page_token,omitempty"`
	// A token to retrieve next page of results.
	//
	// Pass this value in the ListTsEntriesRequest.page_token.
	NextPageToken *ts_entry.PagerCursor `protobuf:"bytes,4,opt,customtype=PagerCursor,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// Current offset from the first page or 0 if no page tokens were given,
	// paging info was not requested or there was an error while trying to get
	// it). Page index can be computed from offset and limit provided in a
	// request.
	CurrentOffset int32 `protobuf:"varint,5,opt,name=current_offset,json=currentOffset,proto3" json:"current_offset,omitempty"`
	// Number of total TsEntries across all pages or 0, if there are no items,
	// paging info was not requested or there was an error while trying to get it.
	TotalResultsCount int32 `protobuf:"varint,6,opt,name=total_results_count,json=totalResultsCount,proto3" json:"total_results_count,omitempty"`
}

func (m *ListTsEntriesResponse) Reset() {
	*m = ListTsEntriesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_ts_entry_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ListTsEntriesResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ListTsEntriesResponse) ProtoMessage() {}

func (m *ListTsEntriesResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_ts_entry_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ListTsEntriesResponse) GotenMessage() {}

// Deprecated, Use ListTsEntriesResponse.ProtoReflect.Descriptor instead.
func (*ListTsEntriesResponse) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_ts_entry_service_proto_rawDescGZIP(), []int{4}
}

func (m *ListTsEntriesResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ListTsEntriesResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ListTsEntriesResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ListTsEntriesResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ListTsEntriesResponse) GetTsEntries() []*ts_entry.TsEntry {
	if m != nil {
		return m.TsEntries
	}
	return nil
}

func (m *ListTsEntriesResponse) GetPrevPageToken() *ts_entry.PagerCursor {
	if m != nil {
		return m.PrevPageToken
	}
	return nil
}

func (m *ListTsEntriesResponse) GetNextPageToken() *ts_entry.PagerCursor {
	if m != nil {
		return m.NextPageToken
	}
	return nil
}

func (m *ListTsEntriesResponse) GetCurrentOffset() int32 {
	if m != nil {
		return m.CurrentOffset
	}
	return int32(0)
}

func (m *ListTsEntriesResponse) GetTotalResultsCount() int32 {
	if m != nil {
		return m.TotalResultsCount
	}
	return int32(0)
}

func (m *ListTsEntriesResponse) SetTsEntries(fv []*ts_entry.TsEntry) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TsEntries", "ListTsEntriesResponse"))
	}
	m.TsEntries = fv
}

func (m *ListTsEntriesResponse) SetPrevPageToken(fv *ts_entry.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PrevPageToken", "ListTsEntriesResponse"))
	}
	m.PrevPageToken = fv
}

func (m *ListTsEntriesResponse) SetNextPageToken(fv *ts_entry.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NextPageToken", "ListTsEntriesResponse"))
	}
	m.NextPageToken = fv
}

func (m *ListTsEntriesResponse) SetCurrentOffset(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CurrentOffset", "ListTsEntriesResponse"))
	}
	m.CurrentOffset = fv
}

func (m *ListTsEntriesResponse) SetTotalResultsCount(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TotalResultsCount", "ListTsEntriesResponse"))
	}
	m.TotalResultsCount = fv
}

// A request message of the WatchTsEntry method.
type WatchTsEntryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of ntt.alerting.v1.TsEntry
	Name *ts_entry.Name `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *ts_entry.TsEntry_FieldMask `protobuf:"bytes,2,opt,customtype=TsEntry_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,4,opt,name=view,proto3,enum=goten.types.View" json:"view,omitempty"`
}

func (m *WatchTsEntryRequest) Reset() {
	*m = WatchTsEntryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_ts_entry_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchTsEntryRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchTsEntryRequest) ProtoMessage() {}

func (m *WatchTsEntryRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_ts_entry_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchTsEntryRequest) GotenMessage() {}

// Deprecated, Use WatchTsEntryRequest.ProtoReflect.Descriptor instead.
func (*WatchTsEntryRequest) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_ts_entry_service_proto_rawDescGZIP(), []int{5}
}

func (m *WatchTsEntryRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchTsEntryRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchTsEntryRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchTsEntryRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchTsEntryRequest) GetName() *ts_entry.Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *WatchTsEntryRequest) GetFieldMask() *ts_entry.TsEntry_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *WatchTsEntryRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *WatchTsEntryRequest) SetName(fv *ts_entry.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "WatchTsEntryRequest"))
	}
	m.Name = fv
}

func (m *WatchTsEntryRequest) SetFieldMask(fv *ts_entry.TsEntry_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "WatchTsEntryRequest"))
	}
	m.FieldMask = fv
}

func (m *WatchTsEntryRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "WatchTsEntryRequest"))
	}
	m.View = fv
}

// A response message of the WatchTsEntry method.
type WatchTsEntryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Change        *ts_entry.TsEntryChange `protobuf:"bytes,1,opt,name=change,proto3" json:"change,omitempty"`
}

func (m *WatchTsEntryResponse) Reset() {
	*m = WatchTsEntryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_ts_entry_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchTsEntryResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchTsEntryResponse) ProtoMessage() {}

func (m *WatchTsEntryResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_ts_entry_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchTsEntryResponse) GotenMessage() {}

// Deprecated, Use WatchTsEntryResponse.ProtoReflect.Descriptor instead.
func (*WatchTsEntryResponse) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_ts_entry_service_proto_rawDescGZIP(), []int{6}
}

func (m *WatchTsEntryResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchTsEntryResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchTsEntryResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchTsEntryResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchTsEntryResponse) GetChange() *ts_entry.TsEntryChange {
	if m != nil {
		return m.Change
	}
	return nil
}

func (m *WatchTsEntryResponse) SetChange(fv *ts_entry.TsEntryChange) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Change", "WatchTsEntryResponse"))
	}
	m.Change = fv
}

// A request message of the WatchTsEntries method.
type WatchTsEntriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Type of a watch. Identifies how server stream data to a client, which
	// fields in a request are allowed and which fields in response are relevant.
	Type watch_type.WatchType `protobuf:"varint,9,opt,name=type,proto3,enum=goten.types.WatchType" json:"type,omitempty"`
	// Parent name of ntt.alerting.v1.TsEntry
	Parent *ts_entry.ParentName `protobuf:"bytes,1,opt,customtype=ParentName,name=parent,proto3" json:"parent,omitempty"`
	// Requested page size. Server may return fewer TsEntries than requested.
	// If unspecified, server will pick an appropriate default.
	// Can be populated only for stateful watch type.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A token identifying a page of results the server should return.
	// Can be populated only for stateful watch type.
	PageToken *ts_entry.PagerCursor `protobuf:"bytes,3,opt,customtype=PagerCursor,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Order By -
	// https://cloud.google.com/apis/design/design_patterns#list_pagination Can be
	// populated only for stateful watch type.
	OrderBy *ts_entry.OrderBy `protobuf:"bytes,4,opt,customtype=OrderBy,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	// A token identifying watch resume point from previous session.
	// Can be populated only for stateless watch type.
	ResumeToken string `protobuf:"bytes,10,opt,name=resume_token,json=resumeToken,proto3" json:"resume_token,omitempty"`
	// Point in the time from which we want to start getting updates. This field
	// can be populated only for stateless watch type and if resume token is not
	// known yet. If specified, initial snapshot will NOT be provided. It is
	// assumed client can obtain it using separate means. Watch responses will
	// contain resume tokens which should be used to resume broken connection.
	StartingTime *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=starting_time,json=startingTime,proto3" json:"starting_time,omitempty"`
	// Filter - filter results by field criteria. Simplified SQL-like syntax with
	// following operators:
	// <=, >=, =, !=, <, >, LIKE, CONTAINS (aliases CONTAIN, HAS, HAVE), IN, IS
	// [NOT] NULL | NaN . Combine conditions with OR | AND example: 'meta.labels
	// CONTAINS "severity:important" OR (state.last_error_time >
	// "2018-11-15T10:00:00Z" AND state.status = "ERROR")'
	Filter *ts_entry.Filter `protobuf:"bytes,5,opt,customtype=Filter,name=filter,proto3" json:"filter,omitempty"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view Changes to TsEntry that don't affect
	// any of masked fields won't be sent back.
	FieldMask *ts_entry.TsEntry_FieldMask `protobuf:"bytes,6,opt,customtype=TsEntry_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask Changes to
	// TsEntry that don't affect any of masked fields won't be sent back.
	View view.View `protobuf:"varint,8,opt,name=view,proto3,enum=goten.types.View" json:"view,omitempty"`
	// Maximum amount of changes in each response message. Query result response
	// is divided on the server side into chunks with size of a specified amount
	// to limit memory footprint of each message. Responses will hold information
	// whether more elements will continue for the actual change. If unspecified,
	// server will pick an appropriate default.
	MaxChunkSize int32 `protobuf:"varint,11,opt,name=max_chunk_size,json=maxChunkSize,proto3" json:"max_chunk_size,omitempty"`
}

func (m *WatchTsEntriesRequest) Reset() {
	*m = WatchTsEntriesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_ts_entry_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchTsEntriesRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchTsEntriesRequest) ProtoMessage() {}

func (m *WatchTsEntriesRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_ts_entry_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchTsEntriesRequest) GotenMessage() {}

// Deprecated, Use WatchTsEntriesRequest.ProtoReflect.Descriptor instead.
func (*WatchTsEntriesRequest) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_ts_entry_service_proto_rawDescGZIP(), []int{7}
}

func (m *WatchTsEntriesRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchTsEntriesRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchTsEntriesRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchTsEntriesRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchTsEntriesRequest) GetType() watch_type.WatchType {
	if m != nil {
		return m.Type
	}
	return watch_type.WatchType_STATEFUL
}

func (m *WatchTsEntriesRequest) GetParent() *ts_entry.ParentName {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *WatchTsEntriesRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return int32(0)
}

func (m *WatchTsEntriesRequest) GetPageToken() *ts_entry.PagerCursor {
	if m != nil {
		return m.PageToken
	}
	return nil
}

func (m *WatchTsEntriesRequest) GetOrderBy() *ts_entry.OrderBy {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

func (m *WatchTsEntriesRequest) GetResumeToken() string {
	if m != nil {
		return m.ResumeToken
	}
	return ""
}

func (m *WatchTsEntriesRequest) GetStartingTime() *timestamppb.Timestamp {
	if m != nil {
		return m.StartingTime
	}
	return nil
}

func (m *WatchTsEntriesRequest) GetFilter() *ts_entry.Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *WatchTsEntriesRequest) GetFieldMask() *ts_entry.TsEntry_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *WatchTsEntriesRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *WatchTsEntriesRequest) GetMaxChunkSize() int32 {
	if m != nil {
		return m.MaxChunkSize
	}
	return int32(0)
}

func (m *WatchTsEntriesRequest) SetType(fv watch_type.WatchType) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Type", "WatchTsEntriesRequest"))
	}
	m.Type = fv
}

func (m *WatchTsEntriesRequest) SetParent(fv *ts_entry.ParentName) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Parent", "WatchTsEntriesRequest"))
	}
	m.Parent = fv
}

func (m *WatchTsEntriesRequest) SetPageSize(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageSize", "WatchTsEntriesRequest"))
	}
	m.PageSize = fv
}

func (m *WatchTsEntriesRequest) SetPageToken(fv *ts_entry.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageToken", "WatchTsEntriesRequest"))
	}
	m.PageToken = fv
}

func (m *WatchTsEntriesRequest) SetOrderBy(fv *ts_entry.OrderBy) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OrderBy", "WatchTsEntriesRequest"))
	}
	m.OrderBy = fv
}

func (m *WatchTsEntriesRequest) SetResumeToken(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResumeToken", "WatchTsEntriesRequest"))
	}
	m.ResumeToken = fv
}

func (m *WatchTsEntriesRequest) SetStartingTime(fv *timestamppb.Timestamp) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "StartingTime", "WatchTsEntriesRequest"))
	}
	m.StartingTime = fv
}

func (m *WatchTsEntriesRequest) SetFilter(fv *ts_entry.Filter) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Filter", "WatchTsEntriesRequest"))
	}
	m.Filter = fv
}

func (m *WatchTsEntriesRequest) SetFieldMask(fv *ts_entry.TsEntry_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "WatchTsEntriesRequest"))
	}
	m.FieldMask = fv
}

func (m *WatchTsEntriesRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "WatchTsEntriesRequest"))
	}
	m.View = fv
}

func (m *WatchTsEntriesRequest) SetMaxChunkSize(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MaxChunkSize", "WatchTsEntriesRequest"))
	}
	m.MaxChunkSize = fv
}

// A response message of the WatchTsEntries method.
type WatchTsEntriesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Changes of TsEntries
	TsEntryChanges []*ts_entry.TsEntryChange `protobuf:"bytes,2,rep,name=ts_entry_changes,json=tsEntryChanges,proto3" json:"ts_entry_changes,omitempty"`
	// If request specified max_chunk_size (or this limit was enforced if
	// stateless watch has been chosen), then responses with "full changeset" will
	// be divided into chunks. Client should keep receiving messages and, once
	// is_current has value true, combine this recent message with all previous
	// ones where is_current is false. If this is the first is_current in a whole
	// watch stream, then it means that client should have, at this moment,
	// contain snapshot of the current situation (or more accurately, snapshot of
	// situation at the moment of request). All TsEntries will be of type
	// Added/Current (depending on watch_type specified in the request). Further
	// responses will be incremental - however messages may still be chunked and
	// is_current logic still applies. is_current is always true for stateful
	// watch if max_chunk_size was left to 0.
	IsCurrent bool `protobuf:"varint,4,opt,name=is_current,json=isCurrent,proto3" json:"is_current,omitempty"`
	// When present, PageTokens used for page navigation should be updated.
	// Present only if is_current is true (last chunk).
	PageTokenChange *WatchTsEntriesResponse_PageTokenChange `protobuf:"bytes,3,opt,name=page_token_change,json=pageTokenChange,proto3" json:"page_token_change,omitempty"`
	// Token that can be used if current connection drops and client needs to
	// reconnect. Populated only for stateless watch type. Present only if
	// is_current is true (last chunk).
	ResumeToken string `protobuf:"bytes,5,opt,name=resume_token,json=resumeToken,proto3" json:"resume_token,omitempty"`
	// Server may occasionally send information how many resources should client
	// have in its state so far (response message without any changes, but with
	// snapshot_size field specified). If client has different value than the one
	// sent by the server, then it should be treated by a client as an error and
	// should reconnect. If value is smaller then 0, then client should ignore
	// this field as unpopulated. This field should be checked only for stateless
	// watch. In stateful those kind of errors are handled by the server side.
	// Will be never sent together with is_current, is_soft_reset and
	// is_hard_reset flags.
	SnapshotSize int64 `protobuf:"varint,6,opt,name=snapshot_size,json=snapshotSize,proto3" json:"snapshot_size,omitempty"`
	// In case of internal issue server may send response message with this flag.
	// It indicates that client should drop all changes from recent responses
	// where is_current is false only! If last message had is_current set to true,
	// client should do nothing and process normally. Resume token received before
	// is still valid. This field should be checked only for stateless watch. In
	// stateful those kind of errors are handled by the server side. Will never be
	// sent along with is_current, is_hard_reset or snapshot_size.
	IsSoftReset bool `protobuf:"varint,7,opt,name=is_soft_reset,json=isSoftReset,proto3" json:"is_soft_reset,omitempty"`
	// In case of internal issue server may send response message with this flag.
	// After receiving, client should clear whole state (drop all changes received
	// so far) as server will send new snapshot (TsEntries will contains changes
	// of type Current only). Any resume tokens should be discarded as well. This
	// field should be checked only for stateless watch. In stateful those kind of
	// errors are handled by the server side. Will never be sent along with
	// is_current, is_soft_reset or snapshot_size.
	IsHardReset bool `protobuf:"varint,8,opt,name=is_hard_reset,json=isHardReset,proto3" json:"is_hard_reset,omitempty"`
}

func (m *WatchTsEntriesResponse) Reset() {
	*m = WatchTsEntriesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_ts_entry_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchTsEntriesResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchTsEntriesResponse) ProtoMessage() {}

func (m *WatchTsEntriesResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_ts_entry_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchTsEntriesResponse) GotenMessage() {}

// Deprecated, Use WatchTsEntriesResponse.ProtoReflect.Descriptor instead.
func (*WatchTsEntriesResponse) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_ts_entry_service_proto_rawDescGZIP(), []int{8}
}

func (m *WatchTsEntriesResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchTsEntriesResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchTsEntriesResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchTsEntriesResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchTsEntriesResponse) GetTsEntryChanges() []*ts_entry.TsEntryChange {
	if m != nil {
		return m.TsEntryChanges
	}
	return nil
}

func (m *WatchTsEntriesResponse) GetIsCurrent() bool {
	if m != nil {
		return m.IsCurrent
	}
	return false
}

func (m *WatchTsEntriesResponse) GetPageTokenChange() *WatchTsEntriesResponse_PageTokenChange {
	if m != nil {
		return m.PageTokenChange
	}
	return nil
}

func (m *WatchTsEntriesResponse) GetResumeToken() string {
	if m != nil {
		return m.ResumeToken
	}
	return ""
}

func (m *WatchTsEntriesResponse) GetSnapshotSize() int64 {
	if m != nil {
		return m.SnapshotSize
	}
	return int64(0)
}

func (m *WatchTsEntriesResponse) GetIsSoftReset() bool {
	if m != nil {
		return m.IsSoftReset
	}
	return false
}

func (m *WatchTsEntriesResponse) GetIsHardReset() bool {
	if m != nil {
		return m.IsHardReset
	}
	return false
}

func (m *WatchTsEntriesResponse) SetTsEntryChanges(fv []*ts_entry.TsEntryChange) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TsEntryChanges", "WatchTsEntriesResponse"))
	}
	m.TsEntryChanges = fv
}

func (m *WatchTsEntriesResponse) SetIsCurrent(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IsCurrent", "WatchTsEntriesResponse"))
	}
	m.IsCurrent = fv
}

func (m *WatchTsEntriesResponse) SetPageTokenChange(fv *WatchTsEntriesResponse_PageTokenChange) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageTokenChange", "WatchTsEntriesResponse"))
	}
	m.PageTokenChange = fv
}

func (m *WatchTsEntriesResponse) SetResumeToken(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResumeToken", "WatchTsEntriesResponse"))
	}
	m.ResumeToken = fv
}

func (m *WatchTsEntriesResponse) SetSnapshotSize(fv int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SnapshotSize", "WatchTsEntriesResponse"))
	}
	m.SnapshotSize = fv
}

func (m *WatchTsEntriesResponse) SetIsSoftReset(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IsSoftReset", "WatchTsEntriesResponse"))
	}
	m.IsSoftReset = fv
}

func (m *WatchTsEntriesResponse) SetIsHardReset(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IsHardReset", "WatchTsEntriesResponse"))
	}
	m.IsHardReset = fv
}

// A request message of the CreateTsEntry method.
type CreateTsEntryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Parent name of ntt.alerting.v1.TsEntry
	Parent *ts_entry.ParentName `protobuf:"bytes,1,opt,customtype=ParentName,name=parent,proto3" json:"parent,omitempty"`
	// TsEntry resource body
	TsEntry *ts_entry.TsEntry `protobuf:"bytes,2,opt,name=ts_entry,json=tsEntry,proto3" json:"ts_entry,omitempty"`
	// Optional masking applied to response object to reduce message response
	// size.
	ResponseMask *CreateTsEntryRequest_ResponseMask `protobuf:"bytes,3,opt,name=response_mask,json=responseMask,proto3" json:"response_mask,omitempty"`
}

func (m *CreateTsEntryRequest) Reset() {
	*m = CreateTsEntryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_ts_entry_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *CreateTsEntryRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*CreateTsEntryRequest) ProtoMessage() {}

func (m *CreateTsEntryRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_ts_entry_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*CreateTsEntryRequest) GotenMessage() {}

// Deprecated, Use CreateTsEntryRequest.ProtoReflect.Descriptor instead.
func (*CreateTsEntryRequest) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_ts_entry_service_proto_rawDescGZIP(), []int{9}
}

func (m *CreateTsEntryRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *CreateTsEntryRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *CreateTsEntryRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *CreateTsEntryRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *CreateTsEntryRequest) GetParent() *ts_entry.ParentName {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *CreateTsEntryRequest) GetTsEntry() *ts_entry.TsEntry {
	if m != nil {
		return m.TsEntry
	}
	return nil
}

func (m *CreateTsEntryRequest) GetResponseMask() *CreateTsEntryRequest_ResponseMask {
	if m != nil {
		return m.ResponseMask
	}
	return nil
}

func (m *CreateTsEntryRequest) SetParent(fv *ts_entry.ParentName) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Parent", "CreateTsEntryRequest"))
	}
	m.Parent = fv
}

func (m *CreateTsEntryRequest) SetTsEntry(fv *ts_entry.TsEntry) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TsEntry", "CreateTsEntryRequest"))
	}
	m.TsEntry = fv
}

func (m *CreateTsEntryRequest) SetResponseMask(fv *CreateTsEntryRequest_ResponseMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResponseMask", "CreateTsEntryRequest"))
	}
	m.ResponseMask = fv
}

// A request message of the UpdateTsEntry method.
type UpdateTsEntryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// TsEntry resource body
	TsEntry *ts_entry.TsEntry `protobuf:"bytes,2,opt,name=ts_entry,json=tsEntry,proto3" json:"ts_entry,omitempty"`
	// FieldMask applied to request - change will be applied only for fields in
	// the mask
	UpdateMask *ts_entry.TsEntry_FieldMask `protobuf:"bytes,3,opt,customtype=TsEntry_FieldMask,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// Conditional update applied to request if update should be executed only for
	// specific resource state. If this field is populated, then server will fetch
	// existing resource, compare with the one stored in the cas field (after
	// applying field mask) and proceed with update only and only if they match.
	// Otherwise RPC error Aborted will be returned.
	Cas *UpdateTsEntryRequest_CAS `protobuf:"bytes,4,opt,name=cas,proto3" json:"cas,omitempty"`
	// If set to true, and the resource is not found,
	// a new resource will be created.  In this situation,
	// 'field_mask' is ignored.
	//
	// https://google.aip.dev/134#create-or-update
	AllowMissing bool `protobuf:"varint,5,opt,name=allow_missing,json=allowMissing,proto3" json:"allow_missing,omitempty"`
	// reduce message response size.
	ResponseMask *UpdateTsEntryRequest_ResponseMask `protobuf:"bytes,6,opt,name=response_mask,json=responseMask,proto3" json:"response_mask,omitempty"`
}

func (m *UpdateTsEntryRequest) Reset() {
	*m = UpdateTsEntryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_ts_entry_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *UpdateTsEntryRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*UpdateTsEntryRequest) ProtoMessage() {}

func (m *UpdateTsEntryRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_ts_entry_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*UpdateTsEntryRequest) GotenMessage() {}

// Deprecated, Use UpdateTsEntryRequest.ProtoReflect.Descriptor instead.
func (*UpdateTsEntryRequest) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_ts_entry_service_proto_rawDescGZIP(), []int{10}
}

func (m *UpdateTsEntryRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *UpdateTsEntryRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *UpdateTsEntryRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *UpdateTsEntryRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *UpdateTsEntryRequest) GetTsEntry() *ts_entry.TsEntry {
	if m != nil {
		return m.TsEntry
	}
	return nil
}

func (m *UpdateTsEntryRequest) GetUpdateMask() *ts_entry.TsEntry_FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

func (m *UpdateTsEntryRequest) GetCas() *UpdateTsEntryRequest_CAS {
	if m != nil {
		return m.Cas
	}
	return nil
}

func (m *UpdateTsEntryRequest) GetAllowMissing() bool {
	if m != nil {
		return m.AllowMissing
	}
	return false
}

func (m *UpdateTsEntryRequest) GetResponseMask() *UpdateTsEntryRequest_ResponseMask {
	if m != nil {
		return m.ResponseMask
	}
	return nil
}

func (m *UpdateTsEntryRequest) SetTsEntry(fv *ts_entry.TsEntry) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TsEntry", "UpdateTsEntryRequest"))
	}
	m.TsEntry = fv
}

func (m *UpdateTsEntryRequest) SetUpdateMask(fv *ts_entry.TsEntry_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "UpdateMask", "UpdateTsEntryRequest"))
	}
	m.UpdateMask = fv
}

func (m *UpdateTsEntryRequest) SetCas(fv *UpdateTsEntryRequest_CAS) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Cas", "UpdateTsEntryRequest"))
	}
	m.Cas = fv
}

func (m *UpdateTsEntryRequest) SetAllowMissing(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AllowMissing", "UpdateTsEntryRequest"))
	}
	m.AllowMissing = fv
}

func (m *UpdateTsEntryRequest) SetResponseMask(fv *UpdateTsEntryRequest_ResponseMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResponseMask", "UpdateTsEntryRequest"))
	}
	m.ResponseMask = fv
}

// A request message of the DeleteTsEntry method.
type DeleteTsEntryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of ntt.alerting.v1.TsEntry
	Name *ts_entry.Name `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty"`
}

func (m *DeleteTsEntryRequest) Reset() {
	*m = DeleteTsEntryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_ts_entry_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *DeleteTsEntryRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*DeleteTsEntryRequest) ProtoMessage() {}

func (m *DeleteTsEntryRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_ts_entry_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*DeleteTsEntryRequest) GotenMessage() {}

// Deprecated, Use DeleteTsEntryRequest.ProtoReflect.Descriptor instead.
func (*DeleteTsEntryRequest) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_ts_entry_service_proto_rawDescGZIP(), []int{11}
}

func (m *DeleteTsEntryRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *DeleteTsEntryRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *DeleteTsEntryRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *DeleteTsEntryRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *DeleteTsEntryRequest) GetName() *ts_entry.Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *DeleteTsEntryRequest) SetName(fv *ts_entry.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "DeleteTsEntryRequest"))
	}
	m.Name = fv
}

type WatchTsEntriesResponse_PageTokenChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// New token to retrieve previous page of results.
	PrevPageToken *ts_entry.PagerCursor `protobuf:"bytes,1,opt,customtype=PagerCursor,name=prev_page_token,json=prevPageToken,proto3" json:"prev_page_token,omitempty"`
	// New token to retrieve next page of results.
	NextPageToken *ts_entry.PagerCursor `protobuf:"bytes,2,opt,customtype=PagerCursor,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (m *WatchTsEntriesResponse_PageTokenChange) Reset() {
	*m = WatchTsEntriesResponse_PageTokenChange{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_ts_entry_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchTsEntriesResponse_PageTokenChange) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchTsEntriesResponse_PageTokenChange) ProtoMessage() {}

func (m *WatchTsEntriesResponse_PageTokenChange) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_ts_entry_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchTsEntriesResponse_PageTokenChange) GotenMessage() {}

// Deprecated, Use WatchTsEntriesResponse_PageTokenChange.ProtoReflect.Descriptor instead.
func (*WatchTsEntriesResponse_PageTokenChange) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_ts_entry_service_proto_rawDescGZIP(), []int{8, 0}
}

func (m *WatchTsEntriesResponse_PageTokenChange) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchTsEntriesResponse_PageTokenChange) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchTsEntriesResponse_PageTokenChange) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchTsEntriesResponse_PageTokenChange) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchTsEntriesResponse_PageTokenChange) GetPrevPageToken() *ts_entry.PagerCursor {
	if m != nil {
		return m.PrevPageToken
	}
	return nil
}

func (m *WatchTsEntriesResponse_PageTokenChange) GetNextPageToken() *ts_entry.PagerCursor {
	if m != nil {
		return m.NextPageToken
	}
	return nil
}

func (m *WatchTsEntriesResponse_PageTokenChange) SetPrevPageToken(fv *ts_entry.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PrevPageToken", "WatchTsEntriesResponse_PageTokenChange"))
	}
	m.PrevPageToken = fv
}

func (m *WatchTsEntriesResponse_PageTokenChange) SetNextPageToken(fv *ts_entry.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NextPageToken", "WatchTsEntriesResponse_PageTokenChange"))
	}
	m.NextPageToken = fv
}

// ResponseMask allows client to reduce response message size.
type CreateTsEntryRequest_ResponseMask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Types that are valid to be assigned to Masking:
	//	*CreateTsEntryRequest_ResponseMask_SkipEntireResponseBody
	//	*CreateTsEntryRequest_ResponseMask_BodyMask
	Masking isCreateTsEntryRequest_ResponseMask_Masking `protobuf_oneof:"masking"`
}

func (m *CreateTsEntryRequest_ResponseMask) Reset() {
	*m = CreateTsEntryRequest_ResponseMask{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_ts_entry_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *CreateTsEntryRequest_ResponseMask) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*CreateTsEntryRequest_ResponseMask) ProtoMessage() {}

func (m *CreateTsEntryRequest_ResponseMask) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_ts_entry_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*CreateTsEntryRequest_ResponseMask) GotenMessage() {}

// Deprecated, Use CreateTsEntryRequest_ResponseMask.ProtoReflect.Descriptor instead.
func (*CreateTsEntryRequest_ResponseMask) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_ts_entry_service_proto_rawDescGZIP(), []int{9, 0}
}

func (m *CreateTsEntryRequest_ResponseMask) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *CreateTsEntryRequest_ResponseMask) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *CreateTsEntryRequest_ResponseMask) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *CreateTsEntryRequest_ResponseMask) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

type isCreateTsEntryRequest_ResponseMask_Masking interface {
	isCreateTsEntryRequest_ResponseMask_Masking()
}

type CreateTsEntryRequest_ResponseMask_SkipEntireResponseBody struct {
	// If this flag has value true, then response will contain just empty
	// resource without any fields populated.
	SkipEntireResponseBody bool `protobuf:"varint,1,opt,name=skip_entire_response_body,json=skipEntireResponseBody,proto3,oneof"`
}
type CreateTsEntryRequest_ResponseMask_BodyMask struct {
	// If this field is populated, then resource in response will contain only
	// specific fields.
	BodyMask *ts_entry.TsEntry_FieldMask `protobuf:"bytes,2,opt,customtype=TsEntry_FieldMask,name=body_mask,json=bodyMask,proto3,oneof"`
}

func (*CreateTsEntryRequest_ResponseMask_SkipEntireResponseBody) isCreateTsEntryRequest_ResponseMask_Masking() {
}
func (*CreateTsEntryRequest_ResponseMask_BodyMask) isCreateTsEntryRequest_ResponseMask_Masking() {}
func (m *CreateTsEntryRequest_ResponseMask) GetMasking() isCreateTsEntryRequest_ResponseMask_Masking {
	if m != nil {
		return m.Masking
	}
	return nil
}
func (m *CreateTsEntryRequest_ResponseMask) GetSkipEntireResponseBody() bool {
	if x, ok := m.GetMasking().(*CreateTsEntryRequest_ResponseMask_SkipEntireResponseBody); ok {
		return x.SkipEntireResponseBody
	}
	return false
}
func (m *CreateTsEntryRequest_ResponseMask) GetBodyMask() *ts_entry.TsEntry_FieldMask {
	if x, ok := m.GetMasking().(*CreateTsEntryRequest_ResponseMask_BodyMask); ok {
		return x.BodyMask
	}
	return nil
}
func (m *CreateTsEntryRequest_ResponseMask) SetMasking(ofv isCreateTsEntryRequest_ResponseMask_Masking) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "isCreateTsEntryRequest_ResponseMask_Masking", "CreateTsEntryRequest_ResponseMask"))
	}
	m.Masking = ofv
}
func (m *CreateTsEntryRequest_ResponseMask) SetSkipEntireResponseBody(fv bool) {
	m.SetMasking(&CreateTsEntryRequest_ResponseMask_SkipEntireResponseBody{SkipEntireResponseBody: fv})
}
func (m *CreateTsEntryRequest_ResponseMask) SetBodyMask(fv *ts_entry.TsEntry_FieldMask) {
	m.SetMasking(&CreateTsEntryRequest_ResponseMask_BodyMask{BodyMask: fv})
}

// CAS - Compare and Swap. This object is used if user wants to make update
// conditional based upon previous resource version.
type UpdateTsEntryRequest_CAS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Conditional desired state of a resource before update.
	ConditionalState *ts_entry.TsEntry `protobuf:"bytes,1,opt,name=conditional_state,json=conditionalState,proto3" json:"conditional_state,omitempty"`
	// Field paths from conditional state of resource server should check and
	// compare.
	FieldMask *ts_entry.TsEntry_FieldMask `protobuf:"bytes,2,opt,customtype=TsEntry_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
}

func (m *UpdateTsEntryRequest_CAS) Reset() {
	*m = UpdateTsEntryRequest_CAS{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_ts_entry_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *UpdateTsEntryRequest_CAS) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*UpdateTsEntryRequest_CAS) ProtoMessage() {}

func (m *UpdateTsEntryRequest_CAS) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_ts_entry_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*UpdateTsEntryRequest_CAS) GotenMessage() {}

// Deprecated, Use UpdateTsEntryRequest_CAS.ProtoReflect.Descriptor instead.
func (*UpdateTsEntryRequest_CAS) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_ts_entry_service_proto_rawDescGZIP(), []int{10, 0}
}

func (m *UpdateTsEntryRequest_CAS) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *UpdateTsEntryRequest_CAS) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *UpdateTsEntryRequest_CAS) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *UpdateTsEntryRequest_CAS) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *UpdateTsEntryRequest_CAS) GetConditionalState() *ts_entry.TsEntry {
	if m != nil {
		return m.ConditionalState
	}
	return nil
}

func (m *UpdateTsEntryRequest_CAS) GetFieldMask() *ts_entry.TsEntry_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *UpdateTsEntryRequest_CAS) SetConditionalState(fv *ts_entry.TsEntry) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ConditionalState", "UpdateTsEntryRequest_CAS"))
	}
	m.ConditionalState = fv
}

func (m *UpdateTsEntryRequest_CAS) SetFieldMask(fv *ts_entry.TsEntry_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "UpdateTsEntryRequest_CAS"))
	}
	m.FieldMask = fv
}

// ResponseMask allows client to reduce response message size.
type UpdateTsEntryRequest_ResponseMask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Types that are valid to be assigned to Masking:
	//	*UpdateTsEntryRequest_ResponseMask_SkipEntireResponseBody
	//	*UpdateTsEntryRequest_ResponseMask_UpdatedFieldsOnly
	//	*UpdateTsEntryRequest_ResponseMask_BodyMask
	Masking isUpdateTsEntryRequest_ResponseMask_Masking `protobuf_oneof:"masking"`
}

func (m *UpdateTsEntryRequest_ResponseMask) Reset() {
	*m = UpdateTsEntryRequest_ResponseMask{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_ts_entry_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *UpdateTsEntryRequest_ResponseMask) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*UpdateTsEntryRequest_ResponseMask) ProtoMessage() {}

func (m *UpdateTsEntryRequest_ResponseMask) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_ts_entry_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*UpdateTsEntryRequest_ResponseMask) GotenMessage() {}

// Deprecated, Use UpdateTsEntryRequest_ResponseMask.ProtoReflect.Descriptor instead.
func (*UpdateTsEntryRequest_ResponseMask) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_ts_entry_service_proto_rawDescGZIP(), []int{10, 1}
}

func (m *UpdateTsEntryRequest_ResponseMask) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *UpdateTsEntryRequest_ResponseMask) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *UpdateTsEntryRequest_ResponseMask) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *UpdateTsEntryRequest_ResponseMask) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

type isUpdateTsEntryRequest_ResponseMask_Masking interface {
	isUpdateTsEntryRequest_ResponseMask_Masking()
}

type UpdateTsEntryRequest_ResponseMask_SkipEntireResponseBody struct {
	// If this flag has value true, then response will contain just empty
	// resource without any fields populated. Field body_mask is ignored if
	// set.
	SkipEntireResponseBody bool `protobuf:"varint,1,opt,name=skip_entire_response_body,json=skipEntireResponseBody,proto3,oneof"`
}
type UpdateTsEntryRequest_ResponseMask_UpdatedFieldsOnly struct {
	// Include all fields that were actually updated during processing. Note
	// this may be larger than update mask if some fields were computed
	// additionally. Name is added as well.
	UpdatedFieldsOnly bool `protobuf:"varint,2,opt,name=updated_fields_only,json=updatedFieldsOnly,proto3,oneof"`
}
type UpdateTsEntryRequest_ResponseMask_BodyMask struct {
	// If this field is populated, then resource in response will contain only
	// specific fields. If skip_entire_response_body is true, this field is
	// ignored.
	BodyMask *ts_entry.TsEntry_FieldMask `protobuf:"bytes,3,opt,customtype=TsEntry_FieldMask,name=body_mask,json=bodyMask,proto3,oneof"`
}

func (*UpdateTsEntryRequest_ResponseMask_SkipEntireResponseBody) isUpdateTsEntryRequest_ResponseMask_Masking() {
}
func (*UpdateTsEntryRequest_ResponseMask_UpdatedFieldsOnly) isUpdateTsEntryRequest_ResponseMask_Masking() {
}
func (*UpdateTsEntryRequest_ResponseMask_BodyMask) isUpdateTsEntryRequest_ResponseMask_Masking() {}
func (m *UpdateTsEntryRequest_ResponseMask) GetMasking() isUpdateTsEntryRequest_ResponseMask_Masking {
	if m != nil {
		return m.Masking
	}
	return nil
}
func (m *UpdateTsEntryRequest_ResponseMask) GetSkipEntireResponseBody() bool {
	if x, ok := m.GetMasking().(*UpdateTsEntryRequest_ResponseMask_SkipEntireResponseBody); ok {
		return x.SkipEntireResponseBody
	}
	return false
}
func (m *UpdateTsEntryRequest_ResponseMask) GetUpdatedFieldsOnly() bool {
	if x, ok := m.GetMasking().(*UpdateTsEntryRequest_ResponseMask_UpdatedFieldsOnly); ok {
		return x.UpdatedFieldsOnly
	}
	return false
}
func (m *UpdateTsEntryRequest_ResponseMask) GetBodyMask() *ts_entry.TsEntry_FieldMask {
	if x, ok := m.GetMasking().(*UpdateTsEntryRequest_ResponseMask_BodyMask); ok {
		return x.BodyMask
	}
	return nil
}
func (m *UpdateTsEntryRequest_ResponseMask) SetMasking(ofv isUpdateTsEntryRequest_ResponseMask_Masking) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "isUpdateTsEntryRequest_ResponseMask_Masking", "UpdateTsEntryRequest_ResponseMask"))
	}
	m.Masking = ofv
}
func (m *UpdateTsEntryRequest_ResponseMask) SetSkipEntireResponseBody(fv bool) {
	m.SetMasking(&UpdateTsEntryRequest_ResponseMask_SkipEntireResponseBody{SkipEntireResponseBody: fv})
}
func (m *UpdateTsEntryRequest_ResponseMask) SetUpdatedFieldsOnly(fv bool) {
	m.SetMasking(&UpdateTsEntryRequest_ResponseMask_UpdatedFieldsOnly{UpdatedFieldsOnly: fv})
}
func (m *UpdateTsEntryRequest_ResponseMask) SetBodyMask(fv *ts_entry.TsEntry_FieldMask) {
	m.SetMasking(&UpdateTsEntryRequest_ResponseMask_BodyMask{BodyMask: fv})
}

var edgelq_alerting_proto_v1_ts_entry_service_proto preflect.FileDescriptor

var edgelq_alerting_proto_v1_ts_entry_service_proto_rawDesc = []byte{
	0x0a, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x73, 0x5f, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0f, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74,
	0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67,
	0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65,
	0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x74, 0x65, 0x6e,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x74, 0x65,
	0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6c,
	0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x67, 0x6f, 0x74, 0x65, 0x6e,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x16, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x69, 0x65,
	0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f,
	0x74, 0x73, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e,
	0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x73, 0x5f, 0x65, 0x6e, 0x74, 0x72,
	0x79, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xab,
	0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x54, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0f, 0xb2, 0xda, 0x21, 0x0b, 0x0a, 0x09, 0x0a, 0x07, 0x54, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x0a, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x0f, 0xb2, 0xda, 0x21, 0x0b, 0x32,
	0x09, 0x0a, 0x07, 0x54, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x25, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x22, 0xba, 0x01, 0x0a,
	0x18, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x54, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x05, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0f, 0xb2, 0xda, 0x21, 0x0b, 0x0a, 0x09,
	0x0a, 0x07, 0x54, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x12, 0x4a, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b,
	0x42, 0x0f, 0xb2, 0xda, 0x21, 0x0b, 0x32, 0x09, 0x0a, 0x07, 0x54, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x25, 0x0a, 0x04,
	0x76, 0x69, 0x65, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x74,
	0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76,
	0x69, 0x65, 0x77, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0x7f, 0x0a, 0x19, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x47, 0x65, 0x74, 0x54, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x74, 0x73, 0x5f, 0x65, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12,
	0x29, 0x0a, 0x07, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x0f, 0xb2, 0xda, 0x21, 0x0b, 0x0a, 0x09, 0x0a, 0x07, 0x54, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x07, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x22, 0x8e, 0x03, 0x0a, 0x14, 0x4c,
	0x69, 0x73, 0x74, 0x54, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0f, 0xb2, 0xda, 0x21, 0x0b, 0x3a, 0x09, 0x0a, 0x07, 0x54, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x08, 0xca, 0xc6, 0x27, 0x04, 0x12, 0x02, 0x2a, 0x00, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x2e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xb2, 0xda, 0x21, 0x0b, 0x22, 0x09, 0x0a,
	0x07, 0x54, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x2a, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xb2, 0xda, 0x21, 0x0b, 0x2a, 0x09, 0x0a, 0x07, 0x54,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12,
	0x27, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0f, 0xb2, 0xda, 0x21, 0x0b, 0x1a, 0x09, 0x0a, 0x07, 0x54, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x0f, 0xb2, 0xda, 0x21, 0x0b, 0x32, 0x09,
	0x0a, 0x07, 0x54, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x4d, 0x61, 0x73, 0x6b, 0x12, 0x25, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x12, 0x2e, 0x0a, 0x13, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x99, 0x02, 0x0a, 0x15,
	0x4c, 0x69, 0x73, 0x74, 0x54, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x74, 0x73, 0x5f, 0x65, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x09, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x37,
	0x0a, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xb2, 0xda, 0x21, 0x0b, 0x22, 0x09, 0x0a,
	0x07, 0x54, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x50, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x37, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0f, 0xb2, 0xda, 0x21, 0x0b, 0x22, 0x09, 0x0a, 0x07, 0x54, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x25, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xad, 0x01, 0x0a, 0x13, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x54, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x23, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xb2,
	0xda, 0x21, 0x0b, 0x0a, 0x09, 0x0a, 0x07, 0x54, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61,
	0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x4d, 0x61, 0x73, 0x6b, 0x42, 0x0f, 0xb2, 0xda, 0x21, 0x0b, 0x32, 0x09, 0x0a, 0x07, 0x54, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b,
	0x12, 0x25, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11,
	0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x56, 0x69, 0x65,
	0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x22, 0x4e, 0x0a, 0x14, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x54, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x36, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0xa3, 0x04, 0x0a, 0x15, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x54, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x57, 0x61,
	0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xb2,
	0xda, 0x21, 0x0b, 0x3a, 0x09, 0x0a, 0x07, 0x54, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0xca, 0xc6, 0x27, 0x04, 0x12,
	0x02, 0x2a, 0x00, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2e, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0f, 0xb2, 0xda, 0x21, 0x0b, 0x22, 0x09, 0x0a, 0x07, 0x54, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2a, 0x0a,
	0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0f, 0xb2, 0xda, 0x21, 0x0b, 0x2a, 0x09, 0x0a, 0x07, 0x54, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73,
	0x75, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x3f, 0x0a, 0x0d,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xb2,
	0xda, 0x21, 0x0b, 0x1a, 0x09, 0x0a, 0x07, 0x54, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x6d, 0x61, 0x73, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x0f, 0xb2, 0xda, 0x21, 0x0b, 0x32, 0x09, 0x0a, 0x07,
	0x54, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61,
	0x73, 0x6b, 0x12, 0x25, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x11, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x56,
	0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x12, 0x32, 0x0a, 0x0e, 0x6d, 0x61, 0x78,
	0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x0c, 0xca, 0xc6, 0x27, 0x08, 0x12, 0x06, 0x1a, 0x02, 0x08, 0x64, 0x2a, 0x00, 0x52,
	0x0c, 0x6d, 0x61, 0x78, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xfc, 0x03,
	0x0a, 0x16, 0x57, 0x61, 0x74, 0x63, 0x68, 0x54, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x10, 0x74, 0x73, 0x5f, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x0e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x12, 0x63, 0x0a, 0x11, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x57,
	0x61, 0x74, 0x63, 0x68, 0x54, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0f, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65,
	0x73, 0x75, 0x6d, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22,
	0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x73, 0x6f, 0x66, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x53, 0x6f, 0x66, 0x74, 0x52, 0x65, 0x73,
	0x65, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x48, 0x61, 0x72,
	0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x1a, 0x83, 0x01, 0x0a, 0x0f, 0x50, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x37, 0x0a, 0x0f, 0x70, 0x72,
	0x65, 0x76, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0f, 0xb2, 0xda, 0x21, 0x0b, 0x22, 0x09, 0x0a, 0x07, 0x54, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x37, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xb2, 0xda,
	0x21, 0x0b, 0x22, 0x09, 0x0a, 0x07, 0x54, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x6e,
	0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x80, 0x03, 0x0a,
	0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xb2, 0xda, 0x21, 0x0b, 0x3a, 0x09, 0x0a, 0x07, 0x54,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x41,
	0x0a, 0x08, 0x74, 0x73, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x0c, 0xc8, 0xd5, 0x22, 0x01,
	0xca, 0xc6, 0x27, 0x04, 0x62, 0x02, 0x08, 0x01, 0x52, 0x07, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x57, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x61,
	0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0c, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x1a, 0xa2, 0x01, 0x0a, 0x0c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x3b, 0x0a, 0x19, 0x73,
	0x6b, 0x69, 0x70, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00,
	0x52, 0x16, 0x73, 0x6b, 0x69, 0x70, 0x45, 0x6e, 0x74, 0x69, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x4a, 0x0a, 0x09, 0x62, 0x6f, 0x64, 0x79,
	0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x0f, 0xb2, 0xda, 0x21, 0x0b, 0x32, 0x09, 0x0a,
	0x07, 0x54, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x48, 0x00, 0x52, 0x08, 0x62, 0x6f, 0x64, 0x79,
	0x4d, 0x61, 0x73, 0x6b, 0x42, 0x09, 0x0a, 0x07, 0x6d, 0x61, 0x73, 0x6b, 0x69, 0x6e, 0x67, 0x22,
	0xde, 0x05, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x08, 0x74, 0x73, 0x5f, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x42, 0x0c, 0xc8, 0xd5, 0x22, 0x01, 0xca, 0xc6, 0x27, 0x04, 0x62, 0x02,
	0x08, 0x01, 0x52, 0x07, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x4c, 0x0a, 0x0b, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x0f, 0xb2, 0xda,
	0x21, 0x0b, 0x32, 0x09, 0x0a, 0x07, 0x54, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x3b, 0x0a, 0x03, 0x63, 0x61, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x41,
	0x53, 0x52, 0x03, 0x63, 0x61, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x57, 0x0a, 0x0d, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x4d, 0x61, 0x73, 0x6b, 0x1a, 0xa2, 0x01, 0x0a, 0x03, 0x43, 0x41, 0x53, 0x12, 0x4f, 0x0a, 0x11,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x42, 0x08, 0xca, 0xc6, 0x27, 0x04, 0x62, 0x02, 0x10, 0x01, 0x52, 0x10, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4a, 0x0a,
	0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x0f, 0xb2,
	0xda, 0x21, 0x0b, 0x32, 0x09, 0x0a, 0x07, 0x54, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x1a, 0xd4, 0x01, 0x0a, 0x0c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x3b, 0x0a, 0x19, 0x73, 0x6b,
	0x69, 0x70, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52,
	0x16, 0x73, 0x6b, 0x69, 0x70, 0x45, 0x6e, 0x74, 0x69, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x30, 0x0a, 0x13, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x4a, 0x0a, 0x09, 0x62, 0x6f, 0x64,
	0x79, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x0f, 0xb2, 0xda, 0x21, 0x0b, 0x32, 0x09,
	0x0a, 0x07, 0x54, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x48, 0x00, 0x52, 0x08, 0x62, 0x6f, 0x64,
	0x79, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x09, 0x0a, 0x07, 0x6d, 0x61, 0x73, 0x6b, 0x69, 0x6e, 0x67,
	0x22, 0x3b, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xb2, 0xda, 0x21, 0x0b, 0x0a, 0x09, 0x0a, 0x07,
	0x54, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0xbd, 0x0e,
	0x0a, 0x0e, 0x54, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0xc5, 0x01, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x54, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x22, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x79, 0x82,
	0xdb, 0x21, 0x1e, 0x0a, 0x07, 0x54, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x03, 0x67, 0x65,
	0x74, 0x2a, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0xa2, 0xdc, 0x21, 0x02, 0x08, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x47, 0x12, 0x45, 0x2f,
	0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2f, 0x2a, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x74,
	0x73, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x2f, 0x2a, 0x7d, 0x8a, 0xcc, 0x26, 0x00, 0x12, 0xc4, 0x01, 0x0a, 0x11, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x47, 0x65, 0x74, 0x54, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x29,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x54, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x47, 0x65, 0x74, 0x54, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x58, 0x82, 0xdb, 0x21, 0x2c, 0x0a, 0x07, 0x54, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x20, 0x01,
	0x2a, 0x07, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x32, 0x0c, 0x12, 0x0a, 0x74, 0x73, 0x5f,
	0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0xa2, 0xdc, 0x21, 0x02, 0x08, 0x01, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x3a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x8a, 0xcc, 0x26, 0x00, 0x12,
	0xe7, 0x01, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x12, 0x25, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x86, 0x01, 0x82, 0xdb, 0x21, 0x2b, 0x0a, 0x07, 0x54, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x2a, 0x08, 0x1a, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x32, 0x0c, 0x12, 0x0a, 0x74, 0x73, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0xa2, 0xdc, 0x21, 0x02, 0x08, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x47, 0x12, 0x45,
	0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f,
	0x2a, 0x2f, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a,
	0x2f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x74, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x8a, 0xcc, 0x26, 0x00, 0x12, 0xe3, 0x01, 0x0a, 0x0c, 0x57, 0x61,
	0x74, 0x63, 0x68, 0x54, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x24, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x74,
	0x63, 0x68, 0x54, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x25, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x54, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x83, 0x01, 0x82, 0xdb, 0x21, 0x22, 0x0a, 0x07,
	0x54, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x05, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2a, 0x06,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x08, 0x12, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0xa2, 0xdc, 0x21, 0x02, 0x08, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4d, 0x22, 0x4b, 0x2f, 0x76,
	0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2f, 0x2a, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x74, 0x73,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x2f, 0x2a, 0x7d, 0x3a, 0x77, 0x61, 0x74, 0x63, 0x68, 0x8a, 0xcc, 0x26, 0x00, 0x30, 0x01, 0x12,
	0xf9, 0x01, 0x0a, 0x0e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x54, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x12, 0x26, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x54, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x74,
	0x63, 0x68, 0x54, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x93, 0x01, 0x82, 0xdb, 0x21, 0x32, 0x0a, 0x07, 0x54, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x05, 0x77, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x2a, 0x08,
	0x1a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x32, 0x12, 0x12, 0x10, 0x74, 0x73, 0x5f, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0xa2, 0xdc, 0x21, 0x02,
	0x08, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4d, 0x22, 0x4b, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a,
	0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x74, 0x73, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x3a,
	0x77, 0x61, 0x74, 0x63, 0x68, 0x8a, 0xcc, 0x26, 0x00, 0x30, 0x01, 0x12, 0xe9, 0x01, 0x0a, 0x0d,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x25, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x96,
	0x01, 0x82, 0xdb, 0x21, 0x2f, 0x0a, 0x07, 0x54, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x06,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x01, 0x2a, 0x12, 0x12, 0x08, 0x74, 0x73, 0x5f, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x1a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x32, 0x06, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0xa2, 0xdc, 0x21, 0x02, 0x10, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x51,
	0x3a, 0x08, 0x74, 0x73, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x45, 0x2f, 0x76, 0x31, 0x2f,
	0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2f, 0x2a, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x74, 0x73,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x8a, 0xcc, 0x26, 0x02, 0x10, 0x01, 0x12, 0xe8, 0x01, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x25, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x18, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x95, 0x01, 0x82, 0xdb, 0x21,
	0x25, 0x0a, 0x07, 0x54, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x06, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x2a, 0x0a, 0x12, 0x08, 0x74, 0x73, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x32, 0x06,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xa2, 0xdc, 0x21, 0x02, 0x10, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x5a, 0x3a, 0x08, 0x74, 0x73, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x1a, 0x4e, 0x2f, 0x76,
	0x31, 0x2f, 0x7b, 0x74, 0x73, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x6e, 0x61, 0x6d, 0x65,
	0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f,
	0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x8a, 0xcc, 0x26, 0x02,
	0x10, 0x01, 0x12, 0xc6, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x25, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x76, 0x82, 0xdb, 0x21, 0x19, 0x0a, 0x07, 0x54, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2a, 0x06, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0xa2, 0xdc, 0x21, 0x02, 0x10, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x47, 0x2a, 0x45,
	0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x2a, 0x2f,
	0x74, 0x73, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x8a, 0xcc, 0x26, 0x02, 0x10, 0x01, 0x1a, 0x30, 0xca, 0x41, 0x13,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2e,
	0x63, 0x6f, 0x6d, 0xd2, 0x41, 0x17, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2e, 0x63, 0x6f, 0x6d, 0x42, 0x97, 0x02,
	0xe8, 0xde, 0x21, 0x00, 0x82, 0xff, 0xd0, 0x02, 0x49, 0x0a, 0x0f, 0x74, 0x73, 0x5f, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x36, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f,
	0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x73, 0x5f, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x8a, 0xff, 0xd0, 0x02, 0x49, 0x0a, 0x0f, 0x74, 0x73, 0x5f, 0x65, 0x6e, 0x74, 0x72,
	0x79, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64,
	0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x73, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x70, 0x62, 0x2e, 0x76, 0x31, 0x42, 0x13, 0x54, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x00, 0x5a,
	0x46, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x74,
	0x73, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x3b, 0x74, 0x73, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	edgelq_alerting_proto_v1_ts_entry_service_proto_rawDescOnce sync.Once
	edgelq_alerting_proto_v1_ts_entry_service_proto_rawDescData = edgelq_alerting_proto_v1_ts_entry_service_proto_rawDesc
)

func edgelq_alerting_proto_v1_ts_entry_service_proto_rawDescGZIP() []byte {
	edgelq_alerting_proto_v1_ts_entry_service_proto_rawDescOnce.Do(func() {
		edgelq_alerting_proto_v1_ts_entry_service_proto_rawDescData = protoimpl.X.CompressGZIP(edgelq_alerting_proto_v1_ts_entry_service_proto_rawDescData)
	})
	return edgelq_alerting_proto_v1_ts_entry_service_proto_rawDescData
}

var edgelq_alerting_proto_v1_ts_entry_service_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var edgelq_alerting_proto_v1_ts_entry_service_proto_goTypes = []interface{}{
	(*GetTsEntryRequest)(nil),                      // 0: ntt.alerting.v1.GetTsEntryRequest
	(*BatchGetTsEntriesRequest)(nil),               // 1: ntt.alerting.v1.BatchGetTsEntriesRequest
	(*BatchGetTsEntriesResponse)(nil),              // 2: ntt.alerting.v1.BatchGetTsEntriesResponse
	(*ListTsEntriesRequest)(nil),                   // 3: ntt.alerting.v1.ListTsEntriesRequest
	(*ListTsEntriesResponse)(nil),                  // 4: ntt.alerting.v1.ListTsEntriesResponse
	(*WatchTsEntryRequest)(nil),                    // 5: ntt.alerting.v1.WatchTsEntryRequest
	(*WatchTsEntryResponse)(nil),                   // 6: ntt.alerting.v1.WatchTsEntryResponse
	(*WatchTsEntriesRequest)(nil),                  // 7: ntt.alerting.v1.WatchTsEntriesRequest
	(*WatchTsEntriesResponse)(nil),                 // 8: ntt.alerting.v1.WatchTsEntriesResponse
	(*CreateTsEntryRequest)(nil),                   // 9: ntt.alerting.v1.CreateTsEntryRequest
	(*UpdateTsEntryRequest)(nil),                   // 10: ntt.alerting.v1.UpdateTsEntryRequest
	(*DeleteTsEntryRequest)(nil),                   // 11: ntt.alerting.v1.DeleteTsEntryRequest
	(*WatchTsEntriesResponse_PageTokenChange)(nil), // 12: ntt.alerting.v1.WatchTsEntriesResponse.PageTokenChange
	(*CreateTsEntryRequest_ResponseMask)(nil),      // 13: ntt.alerting.v1.CreateTsEntryRequest.ResponseMask
	(*UpdateTsEntryRequest_CAS)(nil),               // 14: ntt.alerting.v1.UpdateTsEntryRequest.CAS
	(*UpdateTsEntryRequest_ResponseMask)(nil),      // 15: ntt.alerting.v1.UpdateTsEntryRequest.ResponseMask
	(*ts_entry.TsEntry_FieldMask)(nil),             // 16: ntt.alerting.v1.TsEntry_FieldMask
	(view.View)(0),                                 // 17: goten.types.View
	(*ts_entry.TsEntry)(nil),                       // 18: ntt.alerting.v1.TsEntry
	(*ts_entry.TsEntryChange)(nil),                 // 19: ntt.alerting.v1.TsEntryChange
	(watch_type.WatchType)(0),                      // 20: goten.types.WatchType
	(*timestamppb.Timestamp)(nil),                  // 21: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),                          // 22: google.protobuf.Empty
}
var edgelq_alerting_proto_v1_ts_entry_service_proto_depIdxs = []int32{
	16, // 0: ntt.alerting.v1.GetTsEntryRequest.field_mask:type_name -> ntt.alerting.v1.TsEntry_FieldMask
	17, // 1: ntt.alerting.v1.GetTsEntryRequest.view:type_name -> goten.types.View
	16, // 2: ntt.alerting.v1.BatchGetTsEntriesRequest.field_mask:type_name -> ntt.alerting.v1.TsEntry_FieldMask
	17, // 3: ntt.alerting.v1.BatchGetTsEntriesRequest.view:type_name -> goten.types.View
	18, // 4: ntt.alerting.v1.BatchGetTsEntriesResponse.ts_entries:type_name -> ntt.alerting.v1.TsEntry
	16, // 5: ntt.alerting.v1.ListTsEntriesRequest.field_mask:type_name -> ntt.alerting.v1.TsEntry_FieldMask
	17, // 6: ntt.alerting.v1.ListTsEntriesRequest.view:type_name -> goten.types.View
	18, // 7: ntt.alerting.v1.ListTsEntriesResponse.ts_entries:type_name -> ntt.alerting.v1.TsEntry
	16, // 8: ntt.alerting.v1.WatchTsEntryRequest.field_mask:type_name -> ntt.alerting.v1.TsEntry_FieldMask
	17, // 9: ntt.alerting.v1.WatchTsEntryRequest.view:type_name -> goten.types.View
	19, // 10: ntt.alerting.v1.WatchTsEntryResponse.change:type_name -> ntt.alerting.v1.TsEntryChange
	20, // 11: ntt.alerting.v1.WatchTsEntriesRequest.type:type_name -> goten.types.WatchType
	21, // 12: ntt.alerting.v1.WatchTsEntriesRequest.starting_time:type_name -> google.protobuf.Timestamp
	16, // 13: ntt.alerting.v1.WatchTsEntriesRequest.field_mask:type_name -> ntt.alerting.v1.TsEntry_FieldMask
	17, // 14: ntt.alerting.v1.WatchTsEntriesRequest.view:type_name -> goten.types.View
	19, // 15: ntt.alerting.v1.WatchTsEntriesResponse.ts_entry_changes:type_name -> ntt.alerting.v1.TsEntryChange
	12, // 16: ntt.alerting.v1.WatchTsEntriesResponse.page_token_change:type_name -> ntt.alerting.v1.WatchTsEntriesResponse.PageTokenChange
	18, // 17: ntt.alerting.v1.CreateTsEntryRequest.ts_entry:type_name -> ntt.alerting.v1.TsEntry
	13, // 18: ntt.alerting.v1.CreateTsEntryRequest.response_mask:type_name -> ntt.alerting.v1.CreateTsEntryRequest.ResponseMask
	18, // 19: ntt.alerting.v1.UpdateTsEntryRequest.ts_entry:type_name -> ntt.alerting.v1.TsEntry
	16, // 20: ntt.alerting.v1.UpdateTsEntryRequest.update_mask:type_name -> ntt.alerting.v1.TsEntry_FieldMask
	14, // 21: ntt.alerting.v1.UpdateTsEntryRequest.cas:type_name -> ntt.alerting.v1.UpdateTsEntryRequest.CAS
	15, // 22: ntt.alerting.v1.UpdateTsEntryRequest.response_mask:type_name -> ntt.alerting.v1.UpdateTsEntryRequest.ResponseMask
	16, // 23: ntt.alerting.v1.CreateTsEntryRequest.ResponseMask.body_mask:type_name -> ntt.alerting.v1.TsEntry_FieldMask
	18, // 24: ntt.alerting.v1.UpdateTsEntryRequest.CAS.conditional_state:type_name -> ntt.alerting.v1.TsEntry
	16, // 25: ntt.alerting.v1.UpdateTsEntryRequest.CAS.field_mask:type_name -> ntt.alerting.v1.TsEntry_FieldMask
	16, // 26: ntt.alerting.v1.UpdateTsEntryRequest.ResponseMask.body_mask:type_name -> ntt.alerting.v1.TsEntry_FieldMask
	0,  // 27: ntt.alerting.v1.TsEntryService.GetTsEntry:input_type -> ntt.alerting.v1.GetTsEntryRequest
	1,  // 28: ntt.alerting.v1.TsEntryService.BatchGetTsEntries:input_type -> ntt.alerting.v1.BatchGetTsEntriesRequest
	3,  // 29: ntt.alerting.v1.TsEntryService.ListTsEntries:input_type -> ntt.alerting.v1.ListTsEntriesRequest
	5,  // 30: ntt.alerting.v1.TsEntryService.WatchTsEntry:input_type -> ntt.alerting.v1.WatchTsEntryRequest
	7,  // 31: ntt.alerting.v1.TsEntryService.WatchTsEntries:input_type -> ntt.alerting.v1.WatchTsEntriesRequest
	9,  // 32: ntt.alerting.v1.TsEntryService.CreateTsEntry:input_type -> ntt.alerting.v1.CreateTsEntryRequest
	10, // 33: ntt.alerting.v1.TsEntryService.UpdateTsEntry:input_type -> ntt.alerting.v1.UpdateTsEntryRequest
	11, // 34: ntt.alerting.v1.TsEntryService.DeleteTsEntry:input_type -> ntt.alerting.v1.DeleteTsEntryRequest
	18, // 35: ntt.alerting.v1.TsEntryService.GetTsEntry:output_type -> ntt.alerting.v1.TsEntry
	2,  // 36: ntt.alerting.v1.TsEntryService.BatchGetTsEntries:output_type -> ntt.alerting.v1.BatchGetTsEntriesResponse
	4,  // 37: ntt.alerting.v1.TsEntryService.ListTsEntries:output_type -> ntt.alerting.v1.ListTsEntriesResponse
	6,  // 38: ntt.alerting.v1.TsEntryService.WatchTsEntry:output_type -> ntt.alerting.v1.WatchTsEntryResponse
	8,  // 39: ntt.alerting.v1.TsEntryService.WatchTsEntries:output_type -> ntt.alerting.v1.WatchTsEntriesResponse
	18, // 40: ntt.alerting.v1.TsEntryService.CreateTsEntry:output_type -> ntt.alerting.v1.TsEntry
	18, // 41: ntt.alerting.v1.TsEntryService.UpdateTsEntry:output_type -> ntt.alerting.v1.TsEntry
	22, // 42: ntt.alerting.v1.TsEntryService.DeleteTsEntry:output_type -> google.protobuf.Empty
	35, // [35:43] is the sub-list for method output_type
	27, // [27:35] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { edgelq_alerting_proto_v1_ts_entry_service_proto_init() }
func edgelq_alerting_proto_v1_ts_entry_service_proto_init() {
	if edgelq_alerting_proto_v1_ts_entry_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		edgelq_alerting_proto_v1_ts_entry_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTsEntryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_ts_entry_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetTsEntriesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_ts_entry_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetTsEntriesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_ts_entry_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTsEntriesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_ts_entry_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTsEntriesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_ts_entry_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchTsEntryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_ts_entry_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchTsEntryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_ts_entry_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchTsEntriesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_ts_entry_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchTsEntriesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_ts_entry_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTsEntryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_ts_entry_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTsEntryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_ts_entry_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTsEntryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_ts_entry_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchTsEntriesResponse_PageTokenChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_ts_entry_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTsEntryRequest_ResponseMask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_ts_entry_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTsEntryRequest_CAS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_ts_entry_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTsEntryRequest_ResponseMask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	edgelq_alerting_proto_v1_ts_entry_service_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*CreateTsEntryRequest_ResponseMask_SkipEntireResponseBody)(nil),
		(*CreateTsEntryRequest_ResponseMask_BodyMask)(nil),
	}
	edgelq_alerting_proto_v1_ts_entry_service_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*UpdateTsEntryRequest_ResponseMask_SkipEntireResponseBody)(nil),
		(*UpdateTsEntryRequest_ResponseMask_UpdatedFieldsOnly)(nil),
		(*UpdateTsEntryRequest_ResponseMask_BodyMask)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: edgelq_alerting_proto_v1_ts_entry_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           edgelq_alerting_proto_v1_ts_entry_service_proto_goTypes,
		DependencyIndexes: edgelq_alerting_proto_v1_ts_entry_service_proto_depIdxs,
		MessageInfos:      edgelq_alerting_proto_v1_ts_entry_service_proto_msgTypes,
	}.Build()
	edgelq_alerting_proto_v1_ts_entry_service_proto = out.File
	edgelq_alerting_proto_v1_ts_entry_service_proto_rawDesc = nil
	edgelq_alerting_proto_v1_ts_entry_service_proto_goTypes = nil
	edgelq_alerting_proto_v1_ts_entry_service_proto_depIdxs = nil
}
