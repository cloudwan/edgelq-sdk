// Code generated by protoc-gen-goten-client
// API: TsEntryService
// DO NOT EDIT!!!

package ts_entry_client

import (
	"context"

	"google.golang.org/grpc"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	ts_entry "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/ts_entry"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = protoimpl.DescBuilder{}
	_ = new(context.Context)
	_ = grpc.ClientConn{}
)

// make sure we're using proto imports
var (
	_ = &ts_entry.TsEntry{}
	_ = &emptypb.Empty{}
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TsEntryServiceClient is the client API for TsEntryService.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TsEntryServiceClient interface {
	GetTsEntry(ctx context.Context, in *GetTsEntryRequest, opts ...grpc.CallOption) (*ts_entry.TsEntry, error)
	BatchGetTsEntries(ctx context.Context, in *BatchGetTsEntriesRequest, opts ...grpc.CallOption) (*BatchGetTsEntriesResponse, error)
	ListTsEntries(ctx context.Context, in *ListTsEntriesRequest, opts ...grpc.CallOption) (*ListTsEntriesResponse, error)
	WatchTsEntry(ctx context.Context, in *WatchTsEntryRequest, opts ...grpc.CallOption) (WatchTsEntryClientStream, error)
	WatchTsEntries(ctx context.Context, in *WatchTsEntriesRequest, opts ...grpc.CallOption) (WatchTsEntriesClientStream, error)
	CreateTsEntry(ctx context.Context, in *CreateTsEntryRequest, opts ...grpc.CallOption) (*ts_entry.TsEntry, error)
	UpdateTsEntry(ctx context.Context, in *UpdateTsEntryRequest, opts ...grpc.CallOption) (*ts_entry.TsEntry, error)
	DeleteTsEntry(ctx context.Context, in *DeleteTsEntryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type client struct {
	cc grpc.ClientConnInterface
}

func NewTsEntryServiceClient(cc grpc.ClientConnInterface) TsEntryServiceClient {
	return &client{cc}
}

func (c *client) GetTsEntry(ctx context.Context, in *GetTsEntryRequest, opts ...grpc.CallOption) (*ts_entry.TsEntry, error) {
	out := new(ts_entry.TsEntry)
	err := c.cc.Invoke(ctx, "/ntt.alerting.v1.TsEntryService/GetTsEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) BatchGetTsEntries(ctx context.Context, in *BatchGetTsEntriesRequest, opts ...grpc.CallOption) (*BatchGetTsEntriesResponse, error) {
	out := new(BatchGetTsEntriesResponse)
	err := c.cc.Invoke(ctx, "/ntt.alerting.v1.TsEntryService/BatchGetTsEntries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListTsEntries(ctx context.Context, in *ListTsEntriesRequest, opts ...grpc.CallOption) (*ListTsEntriesResponse, error) {
	out := new(ListTsEntriesResponse)
	err := c.cc.Invoke(ctx, "/ntt.alerting.v1.TsEntryService/ListTsEntries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) WatchTsEntry(ctx context.Context, in *WatchTsEntryRequest, opts ...grpc.CallOption) (WatchTsEntryClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchTsEntry",
			ServerStreams: true,
		},
		"/ntt.alerting.v1.TsEntryService/WatchTsEntry", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchTsEntryWatchTsEntryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchTsEntryClientStream interface {
	Recv() (*WatchTsEntryResponse, error)
	grpc.ClientStream
}

type watchTsEntryWatchTsEntryClient struct {
	grpc.ClientStream
}

func (x *watchTsEntryWatchTsEntryClient) Recv() (*WatchTsEntryResponse, error) {
	m := new(WatchTsEntryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) WatchTsEntries(ctx context.Context, in *WatchTsEntriesRequest, opts ...grpc.CallOption) (WatchTsEntriesClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchTsEntries",
			ServerStreams: true,
		},
		"/ntt.alerting.v1.TsEntryService/WatchTsEntries", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchTsEntriesWatchTsEntriesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchTsEntriesClientStream interface {
	Recv() (*WatchTsEntriesResponse, error)
	grpc.ClientStream
}

type watchTsEntriesWatchTsEntriesClient struct {
	grpc.ClientStream
}

func (x *watchTsEntriesWatchTsEntriesClient) Recv() (*WatchTsEntriesResponse, error) {
	m := new(WatchTsEntriesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) CreateTsEntry(ctx context.Context, in *CreateTsEntryRequest, opts ...grpc.CallOption) (*ts_entry.TsEntry, error) {
	out := new(ts_entry.TsEntry)
	err := c.cc.Invoke(ctx, "/ntt.alerting.v1.TsEntryService/CreateTsEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateTsEntry(ctx context.Context, in *UpdateTsEntryRequest, opts ...grpc.CallOption) (*ts_entry.TsEntry, error) {
	out := new(ts_entry.TsEntry)
	err := c.cc.Invoke(ctx, "/ntt.alerting.v1.TsEntryService/UpdateTsEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeleteTsEntry(ctx context.Context, in *DeleteTsEntryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ntt.alerting.v1.TsEntryService/DeleteTsEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
