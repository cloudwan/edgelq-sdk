// Code generated by protoc-gen-goten-client
// API: TsEntryService
// DO NOT EDIT!!!

package ts_entry_client

import (
	"google.golang.org/protobuf/proto"

	gotenclient "github.com/cloudwan/goten-sdk/runtime/client"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	ts_entry "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/ts_entry"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = new(proto.Message)
	_ = new(gotenclient.MethodDescriptor)
	_ = gotenresource.WildcardId
)

// make sure we're using proto imports
var (
	_ = &ts_entry.TsEntry{}
	_ = &emptypb.Empty{}
)

var (
	descriptorsInitialized      bool
	tsEntryServiceDescriptor    *TsEntryServiceDescriptor
	getTsEntryDescriptor        *GetTsEntryDescriptor
	batchGetTsEntriesDescriptor *BatchGetTsEntriesDescriptor
	listTsEntriesDescriptor     *ListTsEntriesDescriptor
	watchTsEntryDescriptor      *WatchTsEntryDescriptor
	watchTsEntriesDescriptor    *WatchTsEntriesDescriptor
	createTsEntryDescriptor     *CreateTsEntryDescriptor
	updateTsEntryDescriptor     *UpdateTsEntryDescriptor
	deleteTsEntryDescriptor     *DeleteTsEntryDescriptor
)

type GetTsEntryDescriptor struct{}

type GetTsEntryDescriptorClientMsgHandle struct{}

type GetTsEntryDescriptorServerMsgHandle struct{}

func (d *GetTsEntryDescriptor) NewEmptyClientMsg() proto.Message {
	return &GetTsEntryRequest{}
}

func (d *GetTsEntryDescriptor) NewEmptyServerMsg() proto.Message {
	return &ts_entry.TsEntry{}
}

func (d *GetTsEntryDescriptor) IsUnary() bool {
	return true
}

func (d *GetTsEntryDescriptor) IsClientStream() bool {
	return false
}

func (d *GetTsEntryDescriptor) IsServerStream() bool {
	return false
}

func (d *GetTsEntryDescriptor) IsCollection() bool {
	return false
}

func (d *GetTsEntryDescriptor) IsPlural() bool {
	return false
}

func (d *GetTsEntryDescriptor) HasResource() bool {
	return true
}

func (d *GetTsEntryDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *GetTsEntryDescriptor) GetVerb() string {
	return "get"
}

func (d *GetTsEntryDescriptor) GetMethodName() string {
	return "GetTsEntry"
}

func (d *GetTsEntryDescriptor) GetFullMethodName() string {
	return "/ntt.alerting.v1.TsEntryService/GetTsEntry"
}

func (d *GetTsEntryDescriptor) GetProtoPkgName() string {
	return "ntt.alerting.v1"
}

func (d *GetTsEntryDescriptor) GetApiName() string {
	return "TsEntryService"
}

func (d *GetTsEntryDescriptor) GetServiceDomain() string {
	return "alerting.edgelq.com"
}

func (d *GetTsEntryDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *GetTsEntryDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return tsEntryServiceDescriptor
}

func (d *GetTsEntryDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return ts_entry.GetDescriptor()
}

func (d *GetTsEntryDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetTsEntryDescriptorClientMsgHandle{}
}

func (d *GetTsEntryDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetTsEntryDescriptorServerMsgHandle{}
}

func (h *GetTsEntryDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetTsEntryRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*GetTsEntryRequest) *ts_entry.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*ts_entry.Name)(nil)
}

func (h *GetTsEntryDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*GetTsEntryRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*GetTsEntryRequest) []*ts_entry.Name
	})
	if ok {
		return ts_entry.TsEntryNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetTsEntryDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetTsEntryRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*GetTsEntryRequest) *ts_entry.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *GetTsEntryDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*GetTsEntryRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*GetTsEntryRequest) *ts_entry.TsEntry
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *GetTsEntryDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*GetTsEntryRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*GetTsEntryRequest) []*ts_entry.TsEntry
	})
	if ok {
		return ts_entry.TsEntryList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *GetTsEntryDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ts_entry.TsEntry)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ts_entry.TsEntry) *ts_entry.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*ts_entry.Name)(nil)
}

func (h *GetTsEntryDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ts_entry.TsEntry)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ts_entry.TsEntry) []*ts_entry.Name
	})
	if ok {
		return ts_entry.TsEntryNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetTsEntryDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ts_entry.TsEntry)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ts_entry.TsEntry) *ts_entry.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *GetTsEntryDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	return msg.(*ts_entry.TsEntry)
}

func (h *GetTsEntryDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*ts_entry.TsEntry)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*ts_entry.TsEntry) []*ts_entry.TsEntry
	})
	if ok {
		return ts_entry.TsEntryList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetGetTsEntryDescriptor() *GetTsEntryDescriptor {
	return getTsEntryDescriptor
}

type BatchGetTsEntriesDescriptor struct{}

type BatchGetTsEntriesDescriptorClientMsgHandle struct{}

type BatchGetTsEntriesDescriptorServerMsgHandle struct{}

func (d *BatchGetTsEntriesDescriptor) NewEmptyClientMsg() proto.Message {
	return &BatchGetTsEntriesRequest{}
}

func (d *BatchGetTsEntriesDescriptor) NewEmptyServerMsg() proto.Message {
	return &BatchGetTsEntriesResponse{}
}

func (d *BatchGetTsEntriesDescriptor) IsUnary() bool {
	return true
}

func (d *BatchGetTsEntriesDescriptor) IsClientStream() bool {
	return false
}

func (d *BatchGetTsEntriesDescriptor) IsServerStream() bool {
	return false
}

func (d *BatchGetTsEntriesDescriptor) IsCollection() bool {
	return false
}

func (d *BatchGetTsEntriesDescriptor) IsPlural() bool {
	return true
}

func (d *BatchGetTsEntriesDescriptor) HasResource() bool {
	return true
}

func (d *BatchGetTsEntriesDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *BatchGetTsEntriesDescriptor) GetVerb() string {
	return "batchGet"
}

func (d *BatchGetTsEntriesDescriptor) GetMethodName() string {
	return "BatchGetTsEntries"
}

func (d *BatchGetTsEntriesDescriptor) GetFullMethodName() string {
	return "/ntt.alerting.v1.TsEntryService/BatchGetTsEntries"
}

func (d *BatchGetTsEntriesDescriptor) GetProtoPkgName() string {
	return "ntt.alerting.v1"
}

func (d *BatchGetTsEntriesDescriptor) GetApiName() string {
	return "TsEntryService"
}

func (d *BatchGetTsEntriesDescriptor) GetServiceDomain() string {
	return "alerting.edgelq.com"
}

func (d *BatchGetTsEntriesDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *BatchGetTsEntriesDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return tsEntryServiceDescriptor
}

func (d *BatchGetTsEntriesDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return ts_entry.GetDescriptor()
}

func (d *BatchGetTsEntriesDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetTsEntriesDescriptorClientMsgHandle{}
}

func (d *BatchGetTsEntriesDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetTsEntriesDescriptorServerMsgHandle{}
}

func (h *BatchGetTsEntriesDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetTsEntriesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetTsEntriesRequest) *ts_entry.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetTsEntriesDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetTsEntriesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetTsEntriesRequest) []*ts_entry.Name
	})
	if ok {
		return ts_entry.TsEntryNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if names := typedMsg.GetNames(); len(names) > 0 {
			return ts_entry.TsEntryNameList(names)
		}
	}
	return (ts_entry.TsEntryNameList)(nil)
}

func (h *BatchGetTsEntriesDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetTsEntriesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*BatchGetTsEntriesRequest) *ts_entry.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *BatchGetTsEntriesDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*BatchGetTsEntriesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*BatchGetTsEntriesRequest) *ts_entry.TsEntry
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *BatchGetTsEntriesDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*BatchGetTsEntriesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*BatchGetTsEntriesRequest) []*ts_entry.TsEntry
	})
	if ok {
		return ts_entry.TsEntryList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *BatchGetTsEntriesDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetTsEntriesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetTsEntriesResponse) *ts_entry.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetTsEntriesDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetTsEntriesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetTsEntriesResponse) []*ts_entry.Name
	})
	if ok {
		return ts_entry.TsEntryNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetTsEntries(); len(resources) > 0 {
			list := make(ts_entry.TsEntryNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (ts_entry.TsEntryNameList)(nil)
}

func (h *BatchGetTsEntriesDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetTsEntriesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*BatchGetTsEntriesResponse) *ts_entry.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *BatchGetTsEntriesDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*BatchGetTsEntriesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*BatchGetTsEntriesResponse) *ts_entry.TsEntry
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *BatchGetTsEntriesDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*BatchGetTsEntriesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*BatchGetTsEntriesResponse) []*ts_entry.TsEntry
	})
	if ok {
		return ts_entry.TsEntryList(override.OverrideExtractResourceBodies(typedMsg))
	}
	{
		if resources := typedMsg.GetTsEntries(); len(resources) > 0 {
			return ts_entry.TsEntryList(resources)
		}
	}
	return (ts_entry.TsEntryList)(nil)
}

func GetBatchGetTsEntriesDescriptor() *BatchGetTsEntriesDescriptor {
	return batchGetTsEntriesDescriptor
}

type ListTsEntriesDescriptor struct{}

type ListTsEntriesDescriptorClientMsgHandle struct{}

type ListTsEntriesDescriptorServerMsgHandle struct{}

func (d *ListTsEntriesDescriptor) NewEmptyClientMsg() proto.Message {
	return &ListTsEntriesRequest{}
}

func (d *ListTsEntriesDescriptor) NewEmptyServerMsg() proto.Message {
	return &ListTsEntriesResponse{}
}

func (d *ListTsEntriesDescriptor) IsUnary() bool {
	return true
}

func (d *ListTsEntriesDescriptor) IsClientStream() bool {
	return false
}

func (d *ListTsEntriesDescriptor) IsServerStream() bool {
	return false
}

func (d *ListTsEntriesDescriptor) IsCollection() bool {
	return true
}

func (d *ListTsEntriesDescriptor) IsPlural() bool {
	return true
}

func (d *ListTsEntriesDescriptor) HasResource() bool {
	return true
}

func (d *ListTsEntriesDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ListTsEntriesDescriptor) GetVerb() string {
	return "list"
}

func (d *ListTsEntriesDescriptor) GetMethodName() string {
	return "ListTsEntries"
}

func (d *ListTsEntriesDescriptor) GetFullMethodName() string {
	return "/ntt.alerting.v1.TsEntryService/ListTsEntries"
}

func (d *ListTsEntriesDescriptor) GetProtoPkgName() string {
	return "ntt.alerting.v1"
}

func (d *ListTsEntriesDescriptor) GetApiName() string {
	return "TsEntryService"
}

func (d *ListTsEntriesDescriptor) GetServiceDomain() string {
	return "alerting.edgelq.com"
}

func (d *ListTsEntriesDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *ListTsEntriesDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return tsEntryServiceDescriptor
}

func (d *ListTsEntriesDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return ts_entry.GetDescriptor()
}

func (d *ListTsEntriesDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListTsEntriesDescriptorClientMsgHandle{}
}

func (d *ListTsEntriesDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListTsEntriesDescriptorServerMsgHandle{}
}

func (h *ListTsEntriesDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListTsEntriesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListTsEntriesRequest) *ts_entry.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListTsEntriesDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListTsEntriesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListTsEntriesRequest) []*ts_entry.Name
	})
	if ok {
		return ts_entry.TsEntryNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *ListTsEntriesDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListTsEntriesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ListTsEntriesRequest) *ts_entry.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*ts_entry.ParentName)(nil)
}

func (h *ListTsEntriesDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*ListTsEntriesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*ListTsEntriesRequest) *ts_entry.TsEntry
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *ListTsEntriesDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*ListTsEntriesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*ListTsEntriesRequest) []*ts_entry.TsEntry
	})
	if ok {
		return ts_entry.TsEntryList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *ListTsEntriesDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListTsEntriesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListTsEntriesResponse) *ts_entry.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListTsEntriesDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListTsEntriesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListTsEntriesResponse) []*ts_entry.Name
	})
	if ok {
		return ts_entry.TsEntryNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetTsEntries(); len(resources) > 0 {
			list := make(ts_entry.TsEntryNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (ts_entry.TsEntryNameList)(nil)
}

func (h *ListTsEntriesDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListTsEntriesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ListTsEntriesResponse) *ts_entry.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *ListTsEntriesDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*ListTsEntriesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*ListTsEntriesResponse) *ts_entry.TsEntry
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *ListTsEntriesDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*ListTsEntriesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*ListTsEntriesResponse) []*ts_entry.TsEntry
	})
	if ok {
		return ts_entry.TsEntryList(override.OverrideExtractResourceBodies(typedMsg))
	}
	{
		if resources := typedMsg.GetTsEntries(); len(resources) > 0 {
			return ts_entry.TsEntryList(resources)
		}
	}
	return (ts_entry.TsEntryList)(nil)
}

func GetListTsEntriesDescriptor() *ListTsEntriesDescriptor {
	return listTsEntriesDescriptor
}

type WatchTsEntryDescriptor struct{}

type WatchTsEntryDescriptorClientMsgHandle struct{}

type WatchTsEntryDescriptorServerMsgHandle struct{}

func (d *WatchTsEntryDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchTsEntryRequest{}
}

func (d *WatchTsEntryDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchTsEntryResponse{}
}

func (d *WatchTsEntryDescriptor) IsUnary() bool {
	return false
}

func (d *WatchTsEntryDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchTsEntryDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchTsEntryDescriptor) IsCollection() bool {
	return false
}

func (d *WatchTsEntryDescriptor) IsPlural() bool {
	return false
}

func (d *WatchTsEntryDescriptor) HasResource() bool {
	return true
}

func (d *WatchTsEntryDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchTsEntryDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchTsEntryDescriptor) GetMethodName() string {
	return "WatchTsEntry"
}

func (d *WatchTsEntryDescriptor) GetFullMethodName() string {
	return "/ntt.alerting.v1.TsEntryService/WatchTsEntry"
}

func (d *WatchTsEntryDescriptor) GetProtoPkgName() string {
	return "ntt.alerting.v1"
}

func (d *WatchTsEntryDescriptor) GetApiName() string {
	return "TsEntryService"
}

func (d *WatchTsEntryDescriptor) GetServiceDomain() string {
	return "alerting.edgelq.com"
}

func (d *WatchTsEntryDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *WatchTsEntryDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return tsEntryServiceDescriptor
}

func (d *WatchTsEntryDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return ts_entry.GetDescriptor()
}

func (d *WatchTsEntryDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchTsEntryDescriptorClientMsgHandle{}
}

func (d *WatchTsEntryDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchTsEntryDescriptorServerMsgHandle{}
}

func (h *WatchTsEntryDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchTsEntryRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchTsEntryRequest) *ts_entry.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*ts_entry.Name)(nil)
}

func (h *WatchTsEntryDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchTsEntryRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchTsEntryRequest) []*ts_entry.Name
	})
	if ok {
		return ts_entry.TsEntryNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchTsEntryDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchTsEntryRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchTsEntryRequest) *ts_entry.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchTsEntryDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchTsEntryRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchTsEntryRequest) *ts_entry.TsEntry
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *WatchTsEntryDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchTsEntryRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchTsEntryRequest) []*ts_entry.TsEntry
	})
	if ok {
		return ts_entry.TsEntryList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *WatchTsEntryDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchTsEntryResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchTsEntryResponse) *ts_entry.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if resChange := typedMsg.GetChange(); resChange != nil {
			switch tResChange := resChange.ChangeType.(type) {
			case *ts_entry.TsEntryChange_Added_:
				return tResChange.Added.GetTsEntry().GetName()
			case *ts_entry.TsEntryChange_Modified_:
				return tResChange.Modified.GetName()
			case *ts_entry.TsEntryChange_Removed_:
				return tResChange.Removed.GetName()
			case *ts_entry.TsEntryChange_Current_:
				return tResChange.Current.GetTsEntry().GetName()
			}
		}
	}
	return (*ts_entry.Name)(nil)
}

func (h *WatchTsEntryDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchTsEntryResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchTsEntryResponse) []*ts_entry.Name
	})
	if ok {
		return ts_entry.TsEntryNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchTsEntryDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchTsEntryResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchTsEntryResponse) *ts_entry.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchTsEntryDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchTsEntryResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchTsEntryResponse) *ts_entry.TsEntry
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	{
		if resChange := typedMsg.GetChange(); resChange != nil {
			switch tResChange := resChange.ChangeType.(type) {
			case *ts_entry.TsEntryChange_Added_:
				return tResChange.Added.GetTsEntry()
			case *ts_entry.TsEntryChange_Modified_:
				return tResChange.Modified.GetTsEntry()
			case *ts_entry.TsEntryChange_Current_:
				return tResChange.Current.GetTsEntry()
			}
		}
	}
	return (*ts_entry.TsEntry)(nil)
}

func (h *WatchTsEntryDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchTsEntryResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchTsEntryResponse) []*ts_entry.TsEntry
	})
	if ok {
		return ts_entry.TsEntryList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetWatchTsEntryDescriptor() *WatchTsEntryDescriptor {
	return watchTsEntryDescriptor
}

type WatchTsEntriesDescriptor struct{}

type WatchTsEntriesDescriptorClientMsgHandle struct{}

type WatchTsEntriesDescriptorServerMsgHandle struct{}

func (d *WatchTsEntriesDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchTsEntriesRequest{}
}

func (d *WatchTsEntriesDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchTsEntriesResponse{}
}

func (d *WatchTsEntriesDescriptor) IsUnary() bool {
	return false
}

func (d *WatchTsEntriesDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchTsEntriesDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchTsEntriesDescriptor) IsCollection() bool {
	return true
}

func (d *WatchTsEntriesDescriptor) IsPlural() bool {
	return true
}

func (d *WatchTsEntriesDescriptor) HasResource() bool {
	return true
}

func (d *WatchTsEntriesDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchTsEntriesDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchTsEntriesDescriptor) GetMethodName() string {
	return "WatchTsEntries"
}

func (d *WatchTsEntriesDescriptor) GetFullMethodName() string {
	return "/ntt.alerting.v1.TsEntryService/WatchTsEntries"
}

func (d *WatchTsEntriesDescriptor) GetProtoPkgName() string {
	return "ntt.alerting.v1"
}

func (d *WatchTsEntriesDescriptor) GetApiName() string {
	return "TsEntryService"
}

func (d *WatchTsEntriesDescriptor) GetServiceDomain() string {
	return "alerting.edgelq.com"
}

func (d *WatchTsEntriesDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *WatchTsEntriesDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return tsEntryServiceDescriptor
}

func (d *WatchTsEntriesDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return ts_entry.GetDescriptor()
}

func (d *WatchTsEntriesDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchTsEntriesDescriptorClientMsgHandle{}
}

func (d *WatchTsEntriesDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchTsEntriesDescriptorServerMsgHandle{}
}

func (h *WatchTsEntriesDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchTsEntriesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchTsEntriesRequest) *ts_entry.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchTsEntriesDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchTsEntriesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchTsEntriesRequest) []*ts_entry.Name
	})
	if ok {
		return ts_entry.TsEntryNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchTsEntriesDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchTsEntriesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchTsEntriesRequest) *ts_entry.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*ts_entry.ParentName)(nil)
}

func (h *WatchTsEntriesDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchTsEntriesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchTsEntriesRequest) *ts_entry.TsEntry
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *WatchTsEntriesDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchTsEntriesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchTsEntriesRequest) []*ts_entry.TsEntry
	})
	if ok {
		return ts_entry.TsEntryList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *WatchTsEntriesDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchTsEntriesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchTsEntriesResponse) *ts_entry.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchTsEntriesDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchTsEntriesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchTsEntriesResponse) []*ts_entry.Name
	})
	if ok {
		return ts_entry.TsEntryNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resChanges := typedMsg.GetTsEntryChanges(); len(resChanges) > 0 {
			list := make(ts_entry.TsEntryNameList, 0, len(resChanges))
			for _, resChange := range resChanges {
				switch tResChange := resChange.ChangeType.(type) {
				case *ts_entry.TsEntryChange_Added_:
					list = append(list, tResChange.Added.GetTsEntry().GetName())
				case *ts_entry.TsEntryChange_Modified_:
					list = append(list, tResChange.Modified.GetName())
				case *ts_entry.TsEntryChange_Removed_:
					list = append(list, tResChange.Removed.GetName())
				case *ts_entry.TsEntryChange_Current_:
					list = append(list, tResChange.Current.GetTsEntry().GetName())
				}
			}
			return list
		}
	}
	return (ts_entry.TsEntryNameList)(nil)
}

func (h *WatchTsEntriesDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchTsEntriesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchTsEntriesResponse) *ts_entry.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchTsEntriesDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchTsEntriesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchTsEntriesResponse) *ts_entry.TsEntry
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *WatchTsEntriesDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchTsEntriesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchTsEntriesResponse) []*ts_entry.TsEntry
	})
	if ok {
		return ts_entry.TsEntryList(override.OverrideExtractResourceBodies(typedMsg))
	}
	{
		if resChanges := typedMsg.GetTsEntryChanges(); len(resChanges) > 0 {
			list := make(ts_entry.TsEntryList, 0, len(resChanges))
			for _, resChange := range resChanges {
				switch tResChange := resChange.ChangeType.(type) {
				case *ts_entry.TsEntryChange_Added_:
					list = append(list, tResChange.Added.GetTsEntry())
				case *ts_entry.TsEntryChange_Modified_:
					list = append(list, tResChange.Modified.GetTsEntry())
				case *ts_entry.TsEntryChange_Current_:
					list = append(list, tResChange.Current.GetTsEntry())
				}
			}
			return list
		}
	}
	return (ts_entry.TsEntryList)(nil)
}

func GetWatchTsEntriesDescriptor() *WatchTsEntriesDescriptor {
	return watchTsEntriesDescriptor
}

type CreateTsEntryDescriptor struct{}

type CreateTsEntryDescriptorClientMsgHandle struct{}

type CreateTsEntryDescriptorServerMsgHandle struct{}

func (d *CreateTsEntryDescriptor) NewEmptyClientMsg() proto.Message {
	return &CreateTsEntryRequest{}
}

func (d *CreateTsEntryDescriptor) NewEmptyServerMsg() proto.Message {
	return &ts_entry.TsEntry{}
}

func (d *CreateTsEntryDescriptor) IsUnary() bool {
	return true
}

func (d *CreateTsEntryDescriptor) IsClientStream() bool {
	return false
}

func (d *CreateTsEntryDescriptor) IsServerStream() bool {
	return false
}

func (d *CreateTsEntryDescriptor) IsCollection() bool {
	return true
}

func (d *CreateTsEntryDescriptor) IsPlural() bool {
	return false
}

func (d *CreateTsEntryDescriptor) HasResource() bool {
	return true
}

func (d *CreateTsEntryDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *CreateTsEntryDescriptor) GetVerb() string {
	return "create"
}

func (d *CreateTsEntryDescriptor) GetMethodName() string {
	return "CreateTsEntry"
}

func (d *CreateTsEntryDescriptor) GetFullMethodName() string {
	return "/ntt.alerting.v1.TsEntryService/CreateTsEntry"
}

func (d *CreateTsEntryDescriptor) GetProtoPkgName() string {
	return "ntt.alerting.v1"
}

func (d *CreateTsEntryDescriptor) GetApiName() string {
	return "TsEntryService"
}

func (d *CreateTsEntryDescriptor) GetServiceDomain() string {
	return "alerting.edgelq.com"
}

func (d *CreateTsEntryDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *CreateTsEntryDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return tsEntryServiceDescriptor
}

func (d *CreateTsEntryDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return ts_entry.GetDescriptor()
}

func (d *CreateTsEntryDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateTsEntryDescriptorClientMsgHandle{}
}

func (d *CreateTsEntryDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateTsEntryDescriptorServerMsgHandle{}
}

func (h *CreateTsEntryDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateTsEntryRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*CreateTsEntryRequest) *ts_entry.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetTsEntry()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*ts_entry.Name)(nil)
}

func (h *CreateTsEntryDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*CreateTsEntryRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*CreateTsEntryRequest) []*ts_entry.Name
	})
	if ok {
		return ts_entry.TsEntryNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateTsEntryDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateTsEntryRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*CreateTsEntryRequest) *ts_entry.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*ts_entry.ParentName)(nil)
}

func (h *CreateTsEntryDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*CreateTsEntryRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*CreateTsEntryRequest) *ts_entry.TsEntry
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	{
		return typedMsg.GetTsEntry()
	}
	return (*ts_entry.TsEntry)(nil)
}

func (h *CreateTsEntryDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*CreateTsEntryRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*CreateTsEntryRequest) []*ts_entry.TsEntry
	})
	if ok {
		return ts_entry.TsEntryList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *CreateTsEntryDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ts_entry.TsEntry)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ts_entry.TsEntry) *ts_entry.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*ts_entry.Name)(nil)
}

func (h *CreateTsEntryDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ts_entry.TsEntry)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ts_entry.TsEntry) []*ts_entry.Name
	})
	if ok {
		return ts_entry.TsEntryNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateTsEntryDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ts_entry.TsEntry)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ts_entry.TsEntry) *ts_entry.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *CreateTsEntryDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	return msg.(*ts_entry.TsEntry)
}

func (h *CreateTsEntryDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*ts_entry.TsEntry)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*ts_entry.TsEntry) []*ts_entry.TsEntry
	})
	if ok {
		return ts_entry.TsEntryList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetCreateTsEntryDescriptor() *CreateTsEntryDescriptor {
	return createTsEntryDescriptor
}

type UpdateTsEntryDescriptor struct{}

type UpdateTsEntryDescriptorClientMsgHandle struct{}

type UpdateTsEntryDescriptorServerMsgHandle struct{}

func (d *UpdateTsEntryDescriptor) NewEmptyClientMsg() proto.Message {
	return &UpdateTsEntryRequest{}
}

func (d *UpdateTsEntryDescriptor) NewEmptyServerMsg() proto.Message {
	return &ts_entry.TsEntry{}
}

func (d *UpdateTsEntryDescriptor) IsUnary() bool {
	return true
}

func (d *UpdateTsEntryDescriptor) IsClientStream() bool {
	return false
}

func (d *UpdateTsEntryDescriptor) IsServerStream() bool {
	return false
}

func (d *UpdateTsEntryDescriptor) IsCollection() bool {
	return false
}

func (d *UpdateTsEntryDescriptor) IsPlural() bool {
	return false
}

func (d *UpdateTsEntryDescriptor) HasResource() bool {
	return true
}

func (d *UpdateTsEntryDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *UpdateTsEntryDescriptor) GetVerb() string {
	return "update"
}

func (d *UpdateTsEntryDescriptor) GetMethodName() string {
	return "UpdateTsEntry"
}

func (d *UpdateTsEntryDescriptor) GetFullMethodName() string {
	return "/ntt.alerting.v1.TsEntryService/UpdateTsEntry"
}

func (d *UpdateTsEntryDescriptor) GetProtoPkgName() string {
	return "ntt.alerting.v1"
}

func (d *UpdateTsEntryDescriptor) GetApiName() string {
	return "TsEntryService"
}

func (d *UpdateTsEntryDescriptor) GetServiceDomain() string {
	return "alerting.edgelq.com"
}

func (d *UpdateTsEntryDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *UpdateTsEntryDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return tsEntryServiceDescriptor
}

func (d *UpdateTsEntryDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return ts_entry.GetDescriptor()
}

func (d *UpdateTsEntryDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateTsEntryDescriptorClientMsgHandle{}
}

func (d *UpdateTsEntryDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateTsEntryDescriptorServerMsgHandle{}
}

func (h *UpdateTsEntryDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateTsEntryRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*UpdateTsEntryRequest) *ts_entry.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetTsEntry()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*ts_entry.Name)(nil)
}

func (h *UpdateTsEntryDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*UpdateTsEntryRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*UpdateTsEntryRequest) []*ts_entry.Name
	})
	if ok {
		return ts_entry.TsEntryNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateTsEntryDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateTsEntryRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*UpdateTsEntryRequest) *ts_entry.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *UpdateTsEntryDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*UpdateTsEntryRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*UpdateTsEntryRequest) *ts_entry.TsEntry
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	{
		return typedMsg.GetTsEntry()
	}
	return (*ts_entry.TsEntry)(nil)
}

func (h *UpdateTsEntryDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*UpdateTsEntryRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*UpdateTsEntryRequest) []*ts_entry.TsEntry
	})
	if ok {
		return ts_entry.TsEntryList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *UpdateTsEntryDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ts_entry.TsEntry)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ts_entry.TsEntry) *ts_entry.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*ts_entry.Name)(nil)
}

func (h *UpdateTsEntryDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ts_entry.TsEntry)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ts_entry.TsEntry) []*ts_entry.Name
	})
	if ok {
		return ts_entry.TsEntryNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateTsEntryDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ts_entry.TsEntry)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ts_entry.TsEntry) *ts_entry.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *UpdateTsEntryDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	return msg.(*ts_entry.TsEntry)
}

func (h *UpdateTsEntryDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*ts_entry.TsEntry)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*ts_entry.TsEntry) []*ts_entry.TsEntry
	})
	if ok {
		return ts_entry.TsEntryList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetUpdateTsEntryDescriptor() *UpdateTsEntryDescriptor {
	return updateTsEntryDescriptor
}

type DeleteTsEntryDescriptor struct{}

type DeleteTsEntryDescriptorClientMsgHandle struct{}

type DeleteTsEntryDescriptorServerMsgHandle struct{}

func (d *DeleteTsEntryDescriptor) NewEmptyClientMsg() proto.Message {
	return &DeleteTsEntryRequest{}
}

func (d *DeleteTsEntryDescriptor) NewEmptyServerMsg() proto.Message {
	return &emptypb.Empty{}
}

func (d *DeleteTsEntryDescriptor) IsUnary() bool {
	return true
}

func (d *DeleteTsEntryDescriptor) IsClientStream() bool {
	return false
}

func (d *DeleteTsEntryDescriptor) IsServerStream() bool {
	return false
}

func (d *DeleteTsEntryDescriptor) IsCollection() bool {
	return false
}

func (d *DeleteTsEntryDescriptor) IsPlural() bool {
	return false
}

func (d *DeleteTsEntryDescriptor) HasResource() bool {
	return true
}

func (d *DeleteTsEntryDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *DeleteTsEntryDescriptor) GetVerb() string {
	return "delete"
}

func (d *DeleteTsEntryDescriptor) GetMethodName() string {
	return "DeleteTsEntry"
}

func (d *DeleteTsEntryDescriptor) GetFullMethodName() string {
	return "/ntt.alerting.v1.TsEntryService/DeleteTsEntry"
}

func (d *DeleteTsEntryDescriptor) GetProtoPkgName() string {
	return "ntt.alerting.v1"
}

func (d *DeleteTsEntryDescriptor) GetApiName() string {
	return "TsEntryService"
}

func (d *DeleteTsEntryDescriptor) GetServiceDomain() string {
	return "alerting.edgelq.com"
}

func (d *DeleteTsEntryDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *DeleteTsEntryDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return tsEntryServiceDescriptor
}

func (d *DeleteTsEntryDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return ts_entry.GetDescriptor()
}

func (d *DeleteTsEntryDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteTsEntryDescriptorClientMsgHandle{}
}

func (d *DeleteTsEntryDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteTsEntryDescriptorServerMsgHandle{}
}

func (h *DeleteTsEntryDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteTsEntryRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*DeleteTsEntryRequest) *ts_entry.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*ts_entry.Name)(nil)
}

func (h *DeleteTsEntryDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*DeleteTsEntryRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*DeleteTsEntryRequest) []*ts_entry.Name
	})
	if ok {
		return ts_entry.TsEntryNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteTsEntryDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteTsEntryRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*DeleteTsEntryRequest) *ts_entry.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *DeleteTsEntryDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*DeleteTsEntryRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*DeleteTsEntryRequest) *ts_entry.TsEntry
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *DeleteTsEntryDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*DeleteTsEntryRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*DeleteTsEntryRequest) []*ts_entry.TsEntry
	})
	if ok {
		return ts_entry.TsEntryList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *DeleteTsEntryDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*emptypb.Empty) *ts_entry.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *DeleteTsEntryDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*emptypb.Empty) []*ts_entry.Name
	})
	if ok {
		return ts_entry.TsEntryNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteTsEntryDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*emptypb.Empty) *ts_entry.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *DeleteTsEntryDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*emptypb.Empty) *ts_entry.TsEntry
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *DeleteTsEntryDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*emptypb.Empty) []*ts_entry.TsEntry
	})
	if ok {
		return ts_entry.TsEntryList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetDeleteTsEntryDescriptor() *DeleteTsEntryDescriptor {
	return deleteTsEntryDescriptor
}

type TsEntryServiceDescriptor struct{}

func (d *TsEntryServiceDescriptor) AllMethodDescriptors() []gotenclient.MethodDescriptor {
	return []gotenclient.MethodDescriptor{
		getTsEntryDescriptor,
		batchGetTsEntriesDescriptor,
		listTsEntriesDescriptor,
		watchTsEntryDescriptor,
		watchTsEntriesDescriptor,
		createTsEntryDescriptor,
		updateTsEntryDescriptor,
		deleteTsEntryDescriptor,
	}
}

func (d *TsEntryServiceDescriptor) GetFullAPIName() string {
	return "/ntt.alerting.v1.TsEntryService"
}

func (d *TsEntryServiceDescriptor) GetProtoPkgName() string {
	return "ntt.alerting.v1"
}

func (d *TsEntryServiceDescriptor) GetApiName() string {
	return "TsEntryService"
}

func (d *TsEntryServiceDescriptor) GetServiceDomain() string {
	return "alerting.edgelq.com"
}

func (d *TsEntryServiceDescriptor) GetServiceVersion() string {
	return "v1"
}

func GetTsEntryServiceDescriptor() *TsEntryServiceDescriptor {
	return tsEntryServiceDescriptor
}

func initDescriptors() {
	tsEntryServiceDescriptor = &TsEntryServiceDescriptor{}
	getTsEntryDescriptor = &GetTsEntryDescriptor{}
	batchGetTsEntriesDescriptor = &BatchGetTsEntriesDescriptor{}
	listTsEntriesDescriptor = &ListTsEntriesDescriptor{}
	watchTsEntryDescriptor = &WatchTsEntryDescriptor{}
	watchTsEntriesDescriptor = &WatchTsEntriesDescriptor{}
	createTsEntryDescriptor = &CreateTsEntryDescriptor{}
	updateTsEntryDescriptor = &UpdateTsEntryDescriptor{}
	deleteTsEntryDescriptor = &DeleteTsEntryDescriptor{}
	gotenclient.GetRegistry().RegisterApiDescriptor(tsEntryServiceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(getTsEntryDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(batchGetTsEntriesDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(listTsEntriesDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchTsEntryDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchTsEntriesDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(createTsEntryDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(updateTsEntryDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(deleteTsEntryDescriptor)
}

func init() {
	if !descriptorsInitialized {
		initDescriptors()
		descriptorsInitialized = true
	}
}
