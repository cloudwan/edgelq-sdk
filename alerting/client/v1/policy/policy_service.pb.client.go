// Code generated by protoc-gen-goten-client
// API: PolicyService
// DO NOT EDIT!!!

package policy_client

import (
	"context"

	"google.golang.org/grpc"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	policy "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/policy"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = protoimpl.DescBuilder{}
	_ = new(context.Context)
	_ = grpc.ClientConn{}
)

// make sure we're using proto imports
var (
	_ = &policy.Policy{}
	_ = &emptypb.Empty{}
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PolicyServiceClient is the client API for PolicyService.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PolicyServiceClient interface {
	GetPolicy(ctx context.Context, in *GetPolicyRequest, opts ...grpc.CallOption) (*policy.Policy, error)
	BatchGetPolicies(ctx context.Context, in *BatchGetPoliciesRequest, opts ...grpc.CallOption) (*BatchGetPoliciesResponse, error)
	ListPolicies(ctx context.Context, in *ListPoliciesRequest, opts ...grpc.CallOption) (*ListPoliciesResponse, error)
	WatchPolicy(ctx context.Context, in *WatchPolicyRequest, opts ...grpc.CallOption) (WatchPolicyClientStream, error)
	WatchPolicies(ctx context.Context, in *WatchPoliciesRequest, opts ...grpc.CallOption) (WatchPoliciesClientStream, error)
	CreatePolicy(ctx context.Context, in *CreatePolicyRequest, opts ...grpc.CallOption) (*policy.Policy, error)
	UpdatePolicy(ctx context.Context, in *UpdatePolicyRequest, opts ...grpc.CallOption) (*policy.Policy, error)
	DeletePolicy(ctx context.Context, in *DeletePolicyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SearchPolicies(ctx context.Context, in *SearchPoliciesRequest, opts ...grpc.CallOption) (*SearchPoliciesResponse, error)
}

type client struct {
	cc grpc.ClientConnInterface
}

func NewPolicyServiceClient(cc grpc.ClientConnInterface) PolicyServiceClient {
	return &client{cc}
}

func (c *client) GetPolicy(ctx context.Context, in *GetPolicyRequest, opts ...grpc.CallOption) (*policy.Policy, error) {
	out := new(policy.Policy)
	err := c.cc.Invoke(ctx, "/ntt.alerting.v1.PolicyService/GetPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) BatchGetPolicies(ctx context.Context, in *BatchGetPoliciesRequest, opts ...grpc.CallOption) (*BatchGetPoliciesResponse, error) {
	out := new(BatchGetPoliciesResponse)
	err := c.cc.Invoke(ctx, "/ntt.alerting.v1.PolicyService/BatchGetPolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListPolicies(ctx context.Context, in *ListPoliciesRequest, opts ...grpc.CallOption) (*ListPoliciesResponse, error) {
	out := new(ListPoliciesResponse)
	err := c.cc.Invoke(ctx, "/ntt.alerting.v1.PolicyService/ListPolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) WatchPolicy(ctx context.Context, in *WatchPolicyRequest, opts ...grpc.CallOption) (WatchPolicyClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchPolicy",
			ServerStreams: true,
		},
		"/ntt.alerting.v1.PolicyService/WatchPolicy", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchPolicyWatchPolicyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchPolicyClientStream interface {
	Recv() (*WatchPolicyResponse, error)
	grpc.ClientStream
}

type watchPolicyWatchPolicyClient struct {
	grpc.ClientStream
}

func (x *watchPolicyWatchPolicyClient) Recv() (*WatchPolicyResponse, error) {
	m := new(WatchPolicyResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) WatchPolicies(ctx context.Context, in *WatchPoliciesRequest, opts ...grpc.CallOption) (WatchPoliciesClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchPolicies",
			ServerStreams: true,
		},
		"/ntt.alerting.v1.PolicyService/WatchPolicies", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchPoliciesWatchPoliciesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchPoliciesClientStream interface {
	Recv() (*WatchPoliciesResponse, error)
	grpc.ClientStream
}

type watchPoliciesWatchPoliciesClient struct {
	grpc.ClientStream
}

func (x *watchPoliciesWatchPoliciesClient) Recv() (*WatchPoliciesResponse, error) {
	m := new(WatchPoliciesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) CreatePolicy(ctx context.Context, in *CreatePolicyRequest, opts ...grpc.CallOption) (*policy.Policy, error) {
	out := new(policy.Policy)
	err := c.cc.Invoke(ctx, "/ntt.alerting.v1.PolicyService/CreatePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdatePolicy(ctx context.Context, in *UpdatePolicyRequest, opts ...grpc.CallOption) (*policy.Policy, error) {
	out := new(policy.Policy)
	err := c.cc.Invoke(ctx, "/ntt.alerting.v1.PolicyService/UpdatePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeletePolicy(ctx context.Context, in *DeletePolicyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ntt.alerting.v1.PolicyService/DeletePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) SearchPolicies(ctx context.Context, in *SearchPoliciesRequest, opts ...grpc.CallOption) (*SearchPoliciesResponse, error) {
	out := new(SearchPoliciesResponse)
	err := c.cc.Invoke(ctx, "/ntt.alerting.v1.PolicyService/SearchPolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
