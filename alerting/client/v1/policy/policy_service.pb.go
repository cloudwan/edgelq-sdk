// Code generated by protoc-gen-goten-go
// File: edgelq/alerting/proto/v1/policy_service.proto
// DO NOT EDIT!!!

package policy_client

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	policy "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/policy"
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1/project"
	view "github.com/cloudwan/goten-sdk/types/view"
	watch_type "github.com/cloudwan/goten-sdk/types/watch_type"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &policy.Policy{}
	_ = &iam_project.Project{}
	_ = &emptypb.Empty{}
	_ = &fieldmaskpb.FieldMask{}
	_ = &timestamppb.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A request message of the GetPolicy method.
type GetPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of ntt.alerting.v1.Policy
	Name *policy.Name `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *policy.Policy_FieldMask `protobuf:"bytes,3,opt,customtype=Policy_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,4,opt,name=view,proto3,enum=goten.types.View" json:"view,omitempty"`
}

func (m *GetPolicyRequest) Reset() {
	*m = GetPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_policy_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *GetPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*GetPolicyRequest) ProtoMessage() {}

func (m *GetPolicyRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_policy_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*GetPolicyRequest) GotenMessage() {}

// Deprecated, Use GetPolicyRequest.ProtoReflect.Descriptor instead.
func (*GetPolicyRequest) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_policy_service_proto_rawDescGZIP(), []int{0}
}

func (m *GetPolicyRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *GetPolicyRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *GetPolicyRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *GetPolicyRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *GetPolicyRequest) GetName() *policy.Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *GetPolicyRequest) GetFieldMask() *policy.Policy_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *GetPolicyRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *GetPolicyRequest) SetName(fv *policy.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "GetPolicyRequest"))
	}
	m.Name = fv
}

func (m *GetPolicyRequest) SetFieldMask(fv *policy.Policy_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "GetPolicyRequest"))
	}
	m.FieldMask = fv
}

func (m *GetPolicyRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "GetPolicyRequest"))
	}
	m.View = fv
}

// A request message of the BatchGetPolicies method.
type BatchGetPoliciesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Names of Policies
	Names []*policy.Name `protobuf:"bytes,2,rep,customtype=Name,name=names,proto3" json:"names,omitempty"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *policy.Policy_FieldMask `protobuf:"bytes,3,opt,customtype=Policy_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,4,opt,name=view,proto3,enum=goten.types.View" json:"view,omitempty"`
}

func (m *BatchGetPoliciesRequest) Reset() {
	*m = BatchGetPoliciesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_policy_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *BatchGetPoliciesRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*BatchGetPoliciesRequest) ProtoMessage() {}

func (m *BatchGetPoliciesRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_policy_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*BatchGetPoliciesRequest) GotenMessage() {}

// Deprecated, Use BatchGetPoliciesRequest.ProtoReflect.Descriptor instead.
func (*BatchGetPoliciesRequest) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_policy_service_proto_rawDescGZIP(), []int{1}
}

func (m *BatchGetPoliciesRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *BatchGetPoliciesRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *BatchGetPoliciesRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *BatchGetPoliciesRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *BatchGetPoliciesRequest) GetNames() []*policy.Name {
	if m != nil {
		return m.Names
	}
	return nil
}

func (m *BatchGetPoliciesRequest) GetFieldMask() *policy.Policy_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *BatchGetPoliciesRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *BatchGetPoliciesRequest) SetNames(fv []*policy.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Names", "BatchGetPoliciesRequest"))
	}
	m.Names = fv
}

func (m *BatchGetPoliciesRequest) SetFieldMask(fv *policy.Policy_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "BatchGetPoliciesRequest"))
	}
	m.FieldMask = fv
}

func (m *BatchGetPoliciesRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "BatchGetPoliciesRequest"))
	}
	m.View = fv
}

// A response message of the BatchGetPolicies method.
type BatchGetPoliciesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// found Policies
	Policies []*policy.Policy `protobuf:"bytes,1,rep,name=policies,proto3" json:"policies,omitempty"`
	// list of not found Policies
	Missing []*policy.Name `protobuf:"bytes,2,rep,customtype=Name,name=missing,proto3" json:"missing,omitempty"`
}

func (m *BatchGetPoliciesResponse) Reset() {
	*m = BatchGetPoliciesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_policy_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *BatchGetPoliciesResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*BatchGetPoliciesResponse) ProtoMessage() {}

func (m *BatchGetPoliciesResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_policy_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*BatchGetPoliciesResponse) GotenMessage() {}

// Deprecated, Use BatchGetPoliciesResponse.ProtoReflect.Descriptor instead.
func (*BatchGetPoliciesResponse) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_policy_service_proto_rawDescGZIP(), []int{2}
}

func (m *BatchGetPoliciesResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *BatchGetPoliciesResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *BatchGetPoliciesResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *BatchGetPoliciesResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *BatchGetPoliciesResponse) GetPolicies() []*policy.Policy {
	if m != nil {
		return m.Policies
	}
	return nil
}

func (m *BatchGetPoliciesResponse) GetMissing() []*policy.Name {
	if m != nil {
		return m.Missing
	}
	return nil
}

func (m *BatchGetPoliciesResponse) SetPolicies(fv []*policy.Policy) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Policies", "BatchGetPoliciesResponse"))
	}
	m.Policies = fv
}

func (m *BatchGetPoliciesResponse) SetMissing(fv []*policy.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Missing", "BatchGetPoliciesResponse"))
	}
	m.Missing = fv
}

// A request message of the ListPolicies method.
type ListPoliciesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Parent name of ntt.alerting.v1.Policy
	Parent *policy.ParentName `protobuf:"bytes,1,opt,customtype=ParentName,name=parent,proto3" json:"parent,omitempty"`
	// Requested page size. Server may return fewer Policies than requested.
	// If unspecified, server will pick an appropriate default.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A token identifying a page of results the server should return.
	// Typically, this is the value of
	// ListPoliciesResponse.next_page_token.
	PageToken *policy.PagerCursor `protobuf:"bytes,3,opt,customtype=PagerCursor,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Order By -
	// https://cloud.google.com/apis/design/design_patterns#list_pagination list
	// of field path with order directive, either 'asc' or 'desc'. If direction is
	// not provided, 'asc' is assumed. e.g. "state.nested_field asc,
	// state.something.else desc, theme"
	OrderBy *policy.OrderBy `protobuf:"bytes,4,opt,customtype=OrderBy,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	// Filter - filter results by field criteria. Simplified SQL-like syntax with
	// following operators:
	// <=, >=, =, !=, <, >, LIKE, CONTAINS (aliases CONTAIN, HAS, HAVE), IN, IS
	// [NOT] NULL | NaN . Combine conditions with OR | AND example: 'meta.labels
	// CONTAINS "severity:important" OR (state.last_error_time >
	// "2018-11-15T10:00:00Z" AND state.status = "ERROR")'
	Filter *policy.Filter `protobuf:"bytes,5,opt,customtype=Filter,name=filter,proto3" json:"filter,omitempty"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *policy.Policy_FieldMask `protobuf:"bytes,6,opt,customtype=Policy_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,7,opt,name=view,proto3,enum=goten.types.View" json:"view,omitempty"`
	// Indicates if list response should contain total count and offset (fields
	// current_offset and total_results_count).
	IncludePagingInfo bool `protobuf:"varint,8,opt,name=include_paging_info,json=includePagingInfo,proto3" json:"include_paging_info,omitempty"`
}

func (m *ListPoliciesRequest) Reset() {
	*m = ListPoliciesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_policy_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ListPoliciesRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ListPoliciesRequest) ProtoMessage() {}

func (m *ListPoliciesRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_policy_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ListPoliciesRequest) GotenMessage() {}

// Deprecated, Use ListPoliciesRequest.ProtoReflect.Descriptor instead.
func (*ListPoliciesRequest) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_policy_service_proto_rawDescGZIP(), []int{3}
}

func (m *ListPoliciesRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ListPoliciesRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ListPoliciesRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ListPoliciesRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ListPoliciesRequest) GetParent() *policy.ParentName {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *ListPoliciesRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return int32(0)
}

func (m *ListPoliciesRequest) GetPageToken() *policy.PagerCursor {
	if m != nil {
		return m.PageToken
	}
	return nil
}

func (m *ListPoliciesRequest) GetOrderBy() *policy.OrderBy {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

func (m *ListPoliciesRequest) GetFilter() *policy.Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *ListPoliciesRequest) GetFieldMask() *policy.Policy_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *ListPoliciesRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *ListPoliciesRequest) GetIncludePagingInfo() bool {
	if m != nil {
		return m.IncludePagingInfo
	}
	return false
}

func (m *ListPoliciesRequest) SetParent(fv *policy.ParentName) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Parent", "ListPoliciesRequest"))
	}
	m.Parent = fv
}

func (m *ListPoliciesRequest) SetPageSize(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageSize", "ListPoliciesRequest"))
	}
	m.PageSize = fv
}

func (m *ListPoliciesRequest) SetPageToken(fv *policy.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageToken", "ListPoliciesRequest"))
	}
	m.PageToken = fv
}

func (m *ListPoliciesRequest) SetOrderBy(fv *policy.OrderBy) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OrderBy", "ListPoliciesRequest"))
	}
	m.OrderBy = fv
}

func (m *ListPoliciesRequest) SetFilter(fv *policy.Filter) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Filter", "ListPoliciesRequest"))
	}
	m.Filter = fv
}

func (m *ListPoliciesRequest) SetFieldMask(fv *policy.Policy_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "ListPoliciesRequest"))
	}
	m.FieldMask = fv
}

func (m *ListPoliciesRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "ListPoliciesRequest"))
	}
	m.View = fv
}

func (m *ListPoliciesRequest) SetIncludePagingInfo(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IncludePagingInfo", "ListPoliciesRequest"))
	}
	m.IncludePagingInfo = fv
}

// A response message of the ListPolicies method.
type ListPoliciesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// The list of Policies
	Policies []*policy.Policy `protobuf:"bytes,1,rep,name=policies,proto3" json:"policies,omitempty"`
	// A token to retrieve previous page of results.
	//
	// Pass this value in the ListPoliciesRequest.page_token.
	PrevPageToken *policy.PagerCursor `protobuf:"bytes,3,opt,customtype=PagerCursor,name=prev_page_token,json=prevPageToken,proto3" json:"prev_page_token,omitempty"`
	// A token to retrieve next page of results.
	//
	// Pass this value in the ListPoliciesRequest.page_token.
	NextPageToken *policy.PagerCursor `protobuf:"bytes,4,opt,customtype=PagerCursor,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// Current offset from the first page or 0 if no page tokens were given,
	// paging info was not requested or there was an error while trying to get
	// it). Page index can be computed from offset and limit provided in a
	// request.
	CurrentOffset int32 `protobuf:"varint,5,opt,name=current_offset,json=currentOffset,proto3" json:"current_offset,omitempty"`
	// Number of total Policies across all pages or 0, if there are no items,
	// paging info was not requested or there was an error while trying to get it.
	TotalResultsCount int32 `protobuf:"varint,6,opt,name=total_results_count,json=totalResultsCount,proto3" json:"total_results_count,omitempty"`
}

func (m *ListPoliciesResponse) Reset() {
	*m = ListPoliciesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_policy_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ListPoliciesResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ListPoliciesResponse) ProtoMessage() {}

func (m *ListPoliciesResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_policy_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ListPoliciesResponse) GotenMessage() {}

// Deprecated, Use ListPoliciesResponse.ProtoReflect.Descriptor instead.
func (*ListPoliciesResponse) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_policy_service_proto_rawDescGZIP(), []int{4}
}

func (m *ListPoliciesResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ListPoliciesResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ListPoliciesResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ListPoliciesResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ListPoliciesResponse) GetPolicies() []*policy.Policy {
	if m != nil {
		return m.Policies
	}
	return nil
}

func (m *ListPoliciesResponse) GetPrevPageToken() *policy.PagerCursor {
	if m != nil {
		return m.PrevPageToken
	}
	return nil
}

func (m *ListPoliciesResponse) GetNextPageToken() *policy.PagerCursor {
	if m != nil {
		return m.NextPageToken
	}
	return nil
}

func (m *ListPoliciesResponse) GetCurrentOffset() int32 {
	if m != nil {
		return m.CurrentOffset
	}
	return int32(0)
}

func (m *ListPoliciesResponse) GetTotalResultsCount() int32 {
	if m != nil {
		return m.TotalResultsCount
	}
	return int32(0)
}

func (m *ListPoliciesResponse) SetPolicies(fv []*policy.Policy) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Policies", "ListPoliciesResponse"))
	}
	m.Policies = fv
}

func (m *ListPoliciesResponse) SetPrevPageToken(fv *policy.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PrevPageToken", "ListPoliciesResponse"))
	}
	m.PrevPageToken = fv
}

func (m *ListPoliciesResponse) SetNextPageToken(fv *policy.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NextPageToken", "ListPoliciesResponse"))
	}
	m.NextPageToken = fv
}

func (m *ListPoliciesResponse) SetCurrentOffset(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CurrentOffset", "ListPoliciesResponse"))
	}
	m.CurrentOffset = fv
}

func (m *ListPoliciesResponse) SetTotalResultsCount(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TotalResultsCount", "ListPoliciesResponse"))
	}
	m.TotalResultsCount = fv
}

// A request message of the WatchPolicy method.
type WatchPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of ntt.alerting.v1.Policy
	Name *policy.Name `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *policy.Policy_FieldMask `protobuf:"bytes,2,opt,customtype=Policy_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,4,opt,name=view,proto3,enum=goten.types.View" json:"view,omitempty"`
}

func (m *WatchPolicyRequest) Reset() {
	*m = WatchPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_policy_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchPolicyRequest) ProtoMessage() {}

func (m *WatchPolicyRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_policy_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchPolicyRequest) GotenMessage() {}

// Deprecated, Use WatchPolicyRequest.ProtoReflect.Descriptor instead.
func (*WatchPolicyRequest) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_policy_service_proto_rawDescGZIP(), []int{5}
}

func (m *WatchPolicyRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchPolicyRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchPolicyRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchPolicyRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchPolicyRequest) GetName() *policy.Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *WatchPolicyRequest) GetFieldMask() *policy.Policy_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *WatchPolicyRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *WatchPolicyRequest) SetName(fv *policy.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "WatchPolicyRequest"))
	}
	m.Name = fv
}

func (m *WatchPolicyRequest) SetFieldMask(fv *policy.Policy_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "WatchPolicyRequest"))
	}
	m.FieldMask = fv
}

func (m *WatchPolicyRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "WatchPolicyRequest"))
	}
	m.View = fv
}

// A response message of the WatchPolicy method.
type WatchPolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Change        *policy.PolicyChange `protobuf:"bytes,1,opt,name=change,proto3" json:"change,omitempty"`
}

func (m *WatchPolicyResponse) Reset() {
	*m = WatchPolicyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_policy_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchPolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchPolicyResponse) ProtoMessage() {}

func (m *WatchPolicyResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_policy_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchPolicyResponse) GotenMessage() {}

// Deprecated, Use WatchPolicyResponse.ProtoReflect.Descriptor instead.
func (*WatchPolicyResponse) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_policy_service_proto_rawDescGZIP(), []int{6}
}

func (m *WatchPolicyResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchPolicyResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchPolicyResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchPolicyResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchPolicyResponse) GetChange() *policy.PolicyChange {
	if m != nil {
		return m.Change
	}
	return nil
}

func (m *WatchPolicyResponse) SetChange(fv *policy.PolicyChange) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Change", "WatchPolicyResponse"))
	}
	m.Change = fv
}

// A request message of the WatchPolicies method.
type WatchPoliciesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Type of a watch. Identifies how server stream data to a client, which
	// fields in a request are allowed and which fields in response are relevant.
	Type watch_type.WatchType `protobuf:"varint,9,opt,name=type,proto3,enum=goten.types.WatchType" json:"type,omitempty"`
	// Parent name of ntt.alerting.v1.Policy
	Parent *policy.ParentName `protobuf:"bytes,1,opt,customtype=ParentName,name=parent,proto3" json:"parent,omitempty"`
	// Requested page size. Server may return fewer Policies than requested.
	// If unspecified, server will pick an appropriate default.
	// Can be populated only for stateful watch type.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A token identifying a page of results the server should return.
	// Can be populated only for stateful watch type.
	PageToken *policy.PagerCursor `protobuf:"bytes,3,opt,customtype=PagerCursor,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Order By -
	// https://cloud.google.com/apis/design/design_patterns#list_pagination Can be
	// populated only for stateful watch type.
	OrderBy *policy.OrderBy `protobuf:"bytes,4,opt,customtype=OrderBy,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	// A token identifying watch resume point from previous session.
	// Can be populated only for stateless watch type.
	ResumeToken string `protobuf:"bytes,10,opt,name=resume_token,json=resumeToken,proto3" json:"resume_token,omitempty"`
	// Point in the time from which we want to start getting updates. This field
	// can be populated only for stateless watch type and if resume token is not
	// known yet. If specified, initial snapshot will NOT be provided. It is
	// assumed client can obtain it using separate means. Watch responses will
	// contain resume tokens which should be used to resume broken connection.
	StartingTime *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=starting_time,json=startingTime,proto3" json:"starting_time,omitempty"`
	// Filter - filter results by field criteria. Simplified SQL-like syntax with
	// following operators:
	// <=, >=, =, !=, <, >, LIKE, CONTAINS (aliases CONTAIN, HAS, HAVE), IN, IS
	// [NOT] NULL | NaN . Combine conditions with OR | AND example: 'meta.labels
	// CONTAINS "severity:important" OR (state.last_error_time >
	// "2018-11-15T10:00:00Z" AND state.status = "ERROR")'
	Filter *policy.Filter `protobuf:"bytes,5,opt,customtype=Filter,name=filter,proto3" json:"filter,omitempty"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view Changes to Policy that don't affect
	// any of masked fields won't be sent back.
	FieldMask *policy.Policy_FieldMask `protobuf:"bytes,6,opt,customtype=Policy_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask Changes to
	// Policy that don't affect any of masked fields won't be sent back.
	View view.View `protobuf:"varint,8,opt,name=view,proto3,enum=goten.types.View" json:"view,omitempty"`
	// Maximum amount of changes in each response message. Query result response
	// is divided on the server side into chunks with size of a specified amount
	// to limit memory footprint of each message. Responses will hold information
	// whether more elements will continue for the actual change. If unspecified,
	// server will pick an appropriate default.
	MaxChunkSize int32 `protobuf:"varint,11,opt,name=max_chunk_size,json=maxChunkSize,proto3" json:"max_chunk_size,omitempty"`
}

func (m *WatchPoliciesRequest) Reset() {
	*m = WatchPoliciesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_policy_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchPoliciesRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchPoliciesRequest) ProtoMessage() {}

func (m *WatchPoliciesRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_policy_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchPoliciesRequest) GotenMessage() {}

// Deprecated, Use WatchPoliciesRequest.ProtoReflect.Descriptor instead.
func (*WatchPoliciesRequest) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_policy_service_proto_rawDescGZIP(), []int{7}
}

func (m *WatchPoliciesRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchPoliciesRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchPoliciesRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchPoliciesRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchPoliciesRequest) GetType() watch_type.WatchType {
	if m != nil {
		return m.Type
	}
	return watch_type.WatchType_STATEFUL
}

func (m *WatchPoliciesRequest) GetParent() *policy.ParentName {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *WatchPoliciesRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return int32(0)
}

func (m *WatchPoliciesRequest) GetPageToken() *policy.PagerCursor {
	if m != nil {
		return m.PageToken
	}
	return nil
}

func (m *WatchPoliciesRequest) GetOrderBy() *policy.OrderBy {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

func (m *WatchPoliciesRequest) GetResumeToken() string {
	if m != nil {
		return m.ResumeToken
	}
	return ""
}

func (m *WatchPoliciesRequest) GetStartingTime() *timestamppb.Timestamp {
	if m != nil {
		return m.StartingTime
	}
	return nil
}

func (m *WatchPoliciesRequest) GetFilter() *policy.Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *WatchPoliciesRequest) GetFieldMask() *policy.Policy_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *WatchPoliciesRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *WatchPoliciesRequest) GetMaxChunkSize() int32 {
	if m != nil {
		return m.MaxChunkSize
	}
	return int32(0)
}

func (m *WatchPoliciesRequest) SetType(fv watch_type.WatchType) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Type", "WatchPoliciesRequest"))
	}
	m.Type = fv
}

func (m *WatchPoliciesRequest) SetParent(fv *policy.ParentName) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Parent", "WatchPoliciesRequest"))
	}
	m.Parent = fv
}

func (m *WatchPoliciesRequest) SetPageSize(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageSize", "WatchPoliciesRequest"))
	}
	m.PageSize = fv
}

func (m *WatchPoliciesRequest) SetPageToken(fv *policy.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageToken", "WatchPoliciesRequest"))
	}
	m.PageToken = fv
}

func (m *WatchPoliciesRequest) SetOrderBy(fv *policy.OrderBy) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OrderBy", "WatchPoliciesRequest"))
	}
	m.OrderBy = fv
}

func (m *WatchPoliciesRequest) SetResumeToken(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResumeToken", "WatchPoliciesRequest"))
	}
	m.ResumeToken = fv
}

func (m *WatchPoliciesRequest) SetStartingTime(fv *timestamppb.Timestamp) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "StartingTime", "WatchPoliciesRequest"))
	}
	m.StartingTime = fv
}

func (m *WatchPoliciesRequest) SetFilter(fv *policy.Filter) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Filter", "WatchPoliciesRequest"))
	}
	m.Filter = fv
}

func (m *WatchPoliciesRequest) SetFieldMask(fv *policy.Policy_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "WatchPoliciesRequest"))
	}
	m.FieldMask = fv
}

func (m *WatchPoliciesRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "WatchPoliciesRequest"))
	}
	m.View = fv
}

func (m *WatchPoliciesRequest) SetMaxChunkSize(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MaxChunkSize", "WatchPoliciesRequest"))
	}
	m.MaxChunkSize = fv
}

// A response message of the WatchPolicies method.
type WatchPoliciesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Changes of Policies
	PolicyChanges []*policy.PolicyChange `protobuf:"bytes,2,rep,name=policy_changes,json=policyChanges,proto3" json:"policy_changes,omitempty"`
	// If request specified max_chunk_size (or this limit was enforced if
	// stateless watch has been chosen), then responses with "full changeset" will
	// be divided into chunks. Client should keep receiving messages and, once
	// is_current has value true, combine this recent message with all previous
	// ones where is_current is false. If this is the first is_current in a whole
	// watch stream, then it means that client should have, at this moment,
	// contain snapshot of the current situation (or more accurately, snapshot of
	// situation at the moment of request). All Policies will be of type
	// Added/Current (depending on watch_type specified in the request). Further
	// responses will be incremental - however messages may still be chunked and
	// is_current logic still applies. is_current is always true for stateful
	// watch if max_chunk_size was left to 0.
	IsCurrent bool `protobuf:"varint,4,opt,name=is_current,json=isCurrent,proto3" json:"is_current,omitempty"`
	// When present, PageTokens used for page navigation should be updated.
	// Present only if is_current is true (last chunk).
	PageTokenChange *WatchPoliciesResponse_PageTokenChange `protobuf:"bytes,3,opt,name=page_token_change,json=pageTokenChange,proto3" json:"page_token_change,omitempty"`
	// Token that can be used if current connection drops and client needs to
	// reconnect. Populated only for stateless watch type. Present only if
	// is_current is true (last chunk).
	ResumeToken string `protobuf:"bytes,5,opt,name=resume_token,json=resumeToken,proto3" json:"resume_token,omitempty"`
	// Server may occasionally send information how many resources should client
	// have in its state so far (response message without any changes, but with
	// snapshot_size field specified). If client has different value than the one
	// sent by the server, then it should be treated by a client as an error and
	// should reconnect. If value is smaller then 0, then client should ignore
	// this field as unpopulated. This field should be checked only for stateless
	// watch. In stateful those kind of errors are handled by the server side.
	// Will be never sent together with is_current, is_soft_reset and
	// is_hard_reset flags.
	SnapshotSize int64 `protobuf:"varint,6,opt,name=snapshot_size,json=snapshotSize,proto3" json:"snapshot_size,omitempty"`
	// In case of internal issue server may send response message with this flag.
	// It indicates that client should drop all changes from recent responses
	// where is_current is false only! If last message had is_current set to true,
	// client should do nothing and process normally. Resume token received before
	// is still valid. This field should be checked only for stateless watch. In
	// stateful those kind of errors are handled by the server side. Will never be
	// sent along with is_current, is_hard_reset or snapshot_size.
	IsSoftReset bool `protobuf:"varint,7,opt,name=is_soft_reset,json=isSoftReset,proto3" json:"is_soft_reset,omitempty"`
	// In case of internal issue server may send response message with this flag.
	// After receiving, client should clear whole state (drop all changes received
	// so far) as server will send new snapshot (Policies will contains changes of
	// type Current only). Any resume tokens should be discarded as well. This
	// field should be checked only for stateless watch. In stateful those kind of
	// errors are handled by the server side. Will never be sent along with
	// is_current, is_soft_reset or snapshot_size.
	IsHardReset bool `protobuf:"varint,8,opt,name=is_hard_reset,json=isHardReset,proto3" json:"is_hard_reset,omitempty"`
}

func (m *WatchPoliciesResponse) Reset() {
	*m = WatchPoliciesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_policy_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchPoliciesResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchPoliciesResponse) ProtoMessage() {}

func (m *WatchPoliciesResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_policy_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchPoliciesResponse) GotenMessage() {}

// Deprecated, Use WatchPoliciesResponse.ProtoReflect.Descriptor instead.
func (*WatchPoliciesResponse) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_policy_service_proto_rawDescGZIP(), []int{8}
}

func (m *WatchPoliciesResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchPoliciesResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchPoliciesResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchPoliciesResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchPoliciesResponse) GetPolicyChanges() []*policy.PolicyChange {
	if m != nil {
		return m.PolicyChanges
	}
	return nil
}

func (m *WatchPoliciesResponse) GetIsCurrent() bool {
	if m != nil {
		return m.IsCurrent
	}
	return false
}

func (m *WatchPoliciesResponse) GetPageTokenChange() *WatchPoliciesResponse_PageTokenChange {
	if m != nil {
		return m.PageTokenChange
	}
	return nil
}

func (m *WatchPoliciesResponse) GetResumeToken() string {
	if m != nil {
		return m.ResumeToken
	}
	return ""
}

func (m *WatchPoliciesResponse) GetSnapshotSize() int64 {
	if m != nil {
		return m.SnapshotSize
	}
	return int64(0)
}

func (m *WatchPoliciesResponse) GetIsSoftReset() bool {
	if m != nil {
		return m.IsSoftReset
	}
	return false
}

func (m *WatchPoliciesResponse) GetIsHardReset() bool {
	if m != nil {
		return m.IsHardReset
	}
	return false
}

func (m *WatchPoliciesResponse) SetPolicyChanges(fv []*policy.PolicyChange) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PolicyChanges", "WatchPoliciesResponse"))
	}
	m.PolicyChanges = fv
}

func (m *WatchPoliciesResponse) SetIsCurrent(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IsCurrent", "WatchPoliciesResponse"))
	}
	m.IsCurrent = fv
}

func (m *WatchPoliciesResponse) SetPageTokenChange(fv *WatchPoliciesResponse_PageTokenChange) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageTokenChange", "WatchPoliciesResponse"))
	}
	m.PageTokenChange = fv
}

func (m *WatchPoliciesResponse) SetResumeToken(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResumeToken", "WatchPoliciesResponse"))
	}
	m.ResumeToken = fv
}

func (m *WatchPoliciesResponse) SetSnapshotSize(fv int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SnapshotSize", "WatchPoliciesResponse"))
	}
	m.SnapshotSize = fv
}

func (m *WatchPoliciesResponse) SetIsSoftReset(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IsSoftReset", "WatchPoliciesResponse"))
	}
	m.IsSoftReset = fv
}

func (m *WatchPoliciesResponse) SetIsHardReset(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IsHardReset", "WatchPoliciesResponse"))
	}
	m.IsHardReset = fv
}

// A request message of the CreatePolicy method.
type CreatePolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Parent name of ntt.alerting.v1.Policy
	Parent *policy.ParentName `protobuf:"bytes,1,opt,customtype=ParentName,name=parent,proto3" json:"parent,omitempty"`
	// Policy resource body
	Policy *policy.Policy `protobuf:"bytes,2,opt,name=policy,proto3" json:"policy,omitempty"`
	// Optional masking applied to response object to reduce message response
	// size.
	ResponseMask *CreatePolicyRequest_ResponseMask `protobuf:"bytes,3,opt,name=response_mask,json=responseMask,proto3" json:"response_mask,omitempty"`
}

func (m *CreatePolicyRequest) Reset() {
	*m = CreatePolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_policy_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *CreatePolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*CreatePolicyRequest) ProtoMessage() {}

func (m *CreatePolicyRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_policy_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*CreatePolicyRequest) GotenMessage() {}

// Deprecated, Use CreatePolicyRequest.ProtoReflect.Descriptor instead.
func (*CreatePolicyRequest) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_policy_service_proto_rawDescGZIP(), []int{9}
}

func (m *CreatePolicyRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *CreatePolicyRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *CreatePolicyRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *CreatePolicyRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *CreatePolicyRequest) GetParent() *policy.ParentName {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *CreatePolicyRequest) GetPolicy() *policy.Policy {
	if m != nil {
		return m.Policy
	}
	return nil
}

func (m *CreatePolicyRequest) GetResponseMask() *CreatePolicyRequest_ResponseMask {
	if m != nil {
		return m.ResponseMask
	}
	return nil
}

func (m *CreatePolicyRequest) SetParent(fv *policy.ParentName) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Parent", "CreatePolicyRequest"))
	}
	m.Parent = fv
}

func (m *CreatePolicyRequest) SetPolicy(fv *policy.Policy) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Policy", "CreatePolicyRequest"))
	}
	m.Policy = fv
}

func (m *CreatePolicyRequest) SetResponseMask(fv *CreatePolicyRequest_ResponseMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResponseMask", "CreatePolicyRequest"))
	}
	m.ResponseMask = fv
}

// A request message of the UpdatePolicy method.
type UpdatePolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Policy resource body
	Policy *policy.Policy `protobuf:"bytes,2,opt,name=policy,proto3" json:"policy,omitempty"`
	// FieldMask applied to request - change will be applied only for fields in
	// the mask
	UpdateMask *policy.Policy_FieldMask `protobuf:"bytes,3,opt,customtype=Policy_FieldMask,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// Conditional update applied to request if update should be executed only for
	// specific resource state. If this field is populated, then server will fetch
	// existing resource, compare with the one stored in the cas field (after
	// applying field mask) and proceed with update only and only if they match.
	// Otherwise RPC error Aborted will be returned.
	Cas *UpdatePolicyRequest_CAS `protobuf:"bytes,4,opt,name=cas,proto3" json:"cas,omitempty"`
	// If set to true, and the resource is not found,
	// a new resource will be created.  In this situation,
	// 'field_mask' is ignored.
	//
	// https://google.aip.dev/134#create-or-update
	AllowMissing bool `protobuf:"varint,5,opt,name=allow_missing,json=allowMissing,proto3" json:"allow_missing,omitempty"`
	// reduce message response size.
	ResponseMask *UpdatePolicyRequest_ResponseMask `protobuf:"bytes,6,opt,name=response_mask,json=responseMask,proto3" json:"response_mask,omitempty"`
}

func (m *UpdatePolicyRequest) Reset() {
	*m = UpdatePolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_policy_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *UpdatePolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*UpdatePolicyRequest) ProtoMessage() {}

func (m *UpdatePolicyRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_policy_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*UpdatePolicyRequest) GotenMessage() {}

// Deprecated, Use UpdatePolicyRequest.ProtoReflect.Descriptor instead.
func (*UpdatePolicyRequest) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_policy_service_proto_rawDescGZIP(), []int{10}
}

func (m *UpdatePolicyRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *UpdatePolicyRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *UpdatePolicyRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *UpdatePolicyRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *UpdatePolicyRequest) GetPolicy() *policy.Policy {
	if m != nil {
		return m.Policy
	}
	return nil
}

func (m *UpdatePolicyRequest) GetUpdateMask() *policy.Policy_FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

func (m *UpdatePolicyRequest) GetCas() *UpdatePolicyRequest_CAS {
	if m != nil {
		return m.Cas
	}
	return nil
}

func (m *UpdatePolicyRequest) GetAllowMissing() bool {
	if m != nil {
		return m.AllowMissing
	}
	return false
}

func (m *UpdatePolicyRequest) GetResponseMask() *UpdatePolicyRequest_ResponseMask {
	if m != nil {
		return m.ResponseMask
	}
	return nil
}

func (m *UpdatePolicyRequest) SetPolicy(fv *policy.Policy) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Policy", "UpdatePolicyRequest"))
	}
	m.Policy = fv
}

func (m *UpdatePolicyRequest) SetUpdateMask(fv *policy.Policy_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "UpdateMask", "UpdatePolicyRequest"))
	}
	m.UpdateMask = fv
}

func (m *UpdatePolicyRequest) SetCas(fv *UpdatePolicyRequest_CAS) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Cas", "UpdatePolicyRequest"))
	}
	m.Cas = fv
}

func (m *UpdatePolicyRequest) SetAllowMissing(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AllowMissing", "UpdatePolicyRequest"))
	}
	m.AllowMissing = fv
}

func (m *UpdatePolicyRequest) SetResponseMask(fv *UpdatePolicyRequest_ResponseMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResponseMask", "UpdatePolicyRequest"))
	}
	m.ResponseMask = fv
}

// A request message of the DeletePolicy method.
type DeletePolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of ntt.alerting.v1.Policy
	Name *policy.Name `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty"`
	// If set to true, and the resource is not found, method will be successful
	// and will not return NotFound error.
	AllowMissing bool `protobuf:"varint,2,opt,name=allow_missing,json=allowMissing,proto3" json:"allow_missing,omitempty"`
}

func (m *DeletePolicyRequest) Reset() {
	*m = DeletePolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_policy_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *DeletePolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*DeletePolicyRequest) ProtoMessage() {}

func (m *DeletePolicyRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_policy_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*DeletePolicyRequest) GotenMessage() {}

// Deprecated, Use DeletePolicyRequest.ProtoReflect.Descriptor instead.
func (*DeletePolicyRequest) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_policy_service_proto_rawDescGZIP(), []int{11}
}

func (m *DeletePolicyRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *DeletePolicyRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *DeletePolicyRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *DeletePolicyRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *DeletePolicyRequest) GetName() *policy.Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *DeletePolicyRequest) GetAllowMissing() bool {
	if m != nil {
		return m.AllowMissing
	}
	return false
}

func (m *DeletePolicyRequest) SetName(fv *policy.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "DeletePolicyRequest"))
	}
	m.Name = fv
}

func (m *DeletePolicyRequest) SetAllowMissing(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AllowMissing", "DeletePolicyRequest"))
	}
	m.AllowMissing = fv
}

// A request message of the SearchPolicies method.
type SearchPoliciesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Parent name of ntt.alerting.v1.Policy
	Parent *policy.ParentName `protobuf:"bytes,1,opt,customtype=ParentName,name=parent,proto3" json:"parent,omitempty"`
	// Requested page size. Server may return fewer Policies than requested.
	// If unspecified, server will pick an appropriate default.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A token identifying a page of results the server should return.
	// Typically, this is the value of
	// SearchPoliciesResponse.next_page_token.
	PageToken *policy.PagerCursor `protobuf:"bytes,3,opt,customtype=PagerCursor,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Order By -
	// https://cloud.google.com/apis/design/design_patterns#list_pagination list
	// of field path with order directive, either 'asc' or 'desc'. If direction is
	// not provided, 'asc' is assumed. e.g. "state.nested_field asc,
	// state.something.else desc, theme"
	OrderBy *policy.OrderBy `protobuf:"bytes,4,opt,customtype=OrderBy,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	// Filter - filter results by field criteria. Simplified SQL-like syntax with
	// following operators:
	// <=, >=, =, !=, <, >, LIKE, CONTAINS (aliases CONTAIN, HAS, HAVE), IN, IS
	// [NOT] NULL | NaN . Combine conditions with OR | AND example: 'meta.labels
	// CONTAINS "severity:important" OR (state.last_error_time >
	// "2018-11-15T10:00:00Z" AND state.status = "ERROR")'
	Filter *policy.Filter `protobuf:"bytes,5,opt,customtype=Filter,name=filter,proto3" json:"filter,omitempty"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *policy.Policy_FieldMask `protobuf:"bytes,6,opt,customtype=Policy_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,7,opt,name=view,proto3,enum=goten.types.View" json:"view,omitempty"`
	// Optional search phrase used to further filter results.
	Phrase string `protobuf:"bytes,8,opt,name=phrase,proto3" json:"phrase,omitempty"`
}

func (m *SearchPoliciesRequest) Reset() {
	*m = SearchPoliciesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_policy_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *SearchPoliciesRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*SearchPoliciesRequest) ProtoMessage() {}

func (m *SearchPoliciesRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_policy_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*SearchPoliciesRequest) GotenMessage() {}

// Deprecated, Use SearchPoliciesRequest.ProtoReflect.Descriptor instead.
func (*SearchPoliciesRequest) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_policy_service_proto_rawDescGZIP(), []int{12}
}

func (m *SearchPoliciesRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *SearchPoliciesRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *SearchPoliciesRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *SearchPoliciesRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *SearchPoliciesRequest) GetParent() *policy.ParentName {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *SearchPoliciesRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return int32(0)
}

func (m *SearchPoliciesRequest) GetPageToken() *policy.PagerCursor {
	if m != nil {
		return m.PageToken
	}
	return nil
}

func (m *SearchPoliciesRequest) GetOrderBy() *policy.OrderBy {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

func (m *SearchPoliciesRequest) GetFilter() *policy.Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *SearchPoliciesRequest) GetFieldMask() *policy.Policy_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *SearchPoliciesRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *SearchPoliciesRequest) GetPhrase() string {
	if m != nil {
		return m.Phrase
	}
	return ""
}

func (m *SearchPoliciesRequest) SetParent(fv *policy.ParentName) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Parent", "SearchPoliciesRequest"))
	}
	m.Parent = fv
}

func (m *SearchPoliciesRequest) SetPageSize(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageSize", "SearchPoliciesRequest"))
	}
	m.PageSize = fv
}

func (m *SearchPoliciesRequest) SetPageToken(fv *policy.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageToken", "SearchPoliciesRequest"))
	}
	m.PageToken = fv
}

func (m *SearchPoliciesRequest) SetOrderBy(fv *policy.OrderBy) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OrderBy", "SearchPoliciesRequest"))
	}
	m.OrderBy = fv
}

func (m *SearchPoliciesRequest) SetFilter(fv *policy.Filter) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Filter", "SearchPoliciesRequest"))
	}
	m.Filter = fv
}

func (m *SearchPoliciesRequest) SetFieldMask(fv *policy.Policy_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "SearchPoliciesRequest"))
	}
	m.FieldMask = fv
}

func (m *SearchPoliciesRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "SearchPoliciesRequest"))
	}
	m.View = fv
}

func (m *SearchPoliciesRequest) SetPhrase(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Phrase", "SearchPoliciesRequest"))
	}
	m.Phrase = fv
}

// A response message of the SearchPolicies method.
type SearchPoliciesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// The list of Policies
	Policies []*policy.Policy `protobuf:"bytes,1,rep,name=policies,proto3" json:"policies,omitempty"`
	// A token to retrieve previous page of results.
	//
	// Pass this value in the SearchPoliciesRequest.page_token.
	PrevPageToken *policy.PagerCursor `protobuf:"bytes,3,opt,customtype=PagerCursor,name=prev_page_token,json=prevPageToken,proto3" json:"prev_page_token,omitempty"`
	// A token to retrieve next page of results.
	//
	// Pass this value in the SearchPoliciesRequest.page_token.
	NextPageToken *policy.PagerCursor `protobuf:"bytes,4,opt,customtype=PagerCursor,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// Current offset from the first page (0 if no page tokens were given). Page
	// index can be computed from offset and limit provided in a request
	CurrentOffset int32 `protobuf:"varint,5,opt,name=current_offset,json=currentOffset,proto3" json:"current_offset,omitempty"`
	// Number of total Policies across all pages.
	TotalResultsCount int32 `protobuf:"varint,6,opt,name=total_results_count,json=totalResultsCount,proto3" json:"total_results_count,omitempty"`
}

func (m *SearchPoliciesResponse) Reset() {
	*m = SearchPoliciesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_policy_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *SearchPoliciesResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*SearchPoliciesResponse) ProtoMessage() {}

func (m *SearchPoliciesResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_policy_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*SearchPoliciesResponse) GotenMessage() {}

// Deprecated, Use SearchPoliciesResponse.ProtoReflect.Descriptor instead.
func (*SearchPoliciesResponse) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_policy_service_proto_rawDescGZIP(), []int{13}
}

func (m *SearchPoliciesResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *SearchPoliciesResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *SearchPoliciesResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *SearchPoliciesResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *SearchPoliciesResponse) GetPolicies() []*policy.Policy {
	if m != nil {
		return m.Policies
	}
	return nil
}

func (m *SearchPoliciesResponse) GetPrevPageToken() *policy.PagerCursor {
	if m != nil {
		return m.PrevPageToken
	}
	return nil
}

func (m *SearchPoliciesResponse) GetNextPageToken() *policy.PagerCursor {
	if m != nil {
		return m.NextPageToken
	}
	return nil
}

func (m *SearchPoliciesResponse) GetCurrentOffset() int32 {
	if m != nil {
		return m.CurrentOffset
	}
	return int32(0)
}

func (m *SearchPoliciesResponse) GetTotalResultsCount() int32 {
	if m != nil {
		return m.TotalResultsCount
	}
	return int32(0)
}

func (m *SearchPoliciesResponse) SetPolicies(fv []*policy.Policy) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Policies", "SearchPoliciesResponse"))
	}
	m.Policies = fv
}

func (m *SearchPoliciesResponse) SetPrevPageToken(fv *policy.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PrevPageToken", "SearchPoliciesResponse"))
	}
	m.PrevPageToken = fv
}

func (m *SearchPoliciesResponse) SetNextPageToken(fv *policy.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NextPageToken", "SearchPoliciesResponse"))
	}
	m.NextPageToken = fv
}

func (m *SearchPoliciesResponse) SetCurrentOffset(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CurrentOffset", "SearchPoliciesResponse"))
	}
	m.CurrentOffset = fv
}

func (m *SearchPoliciesResponse) SetTotalResultsCount(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TotalResultsCount", "SearchPoliciesResponse"))
	}
	m.TotalResultsCount = fv
}

type WatchPoliciesResponse_PageTokenChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// New token to retrieve previous page of results.
	PrevPageToken *policy.PagerCursor `protobuf:"bytes,1,opt,customtype=PagerCursor,name=prev_page_token,json=prevPageToken,proto3" json:"prev_page_token,omitempty"`
	// New token to retrieve next page of results.
	NextPageToken *policy.PagerCursor `protobuf:"bytes,2,opt,customtype=PagerCursor,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (m *WatchPoliciesResponse_PageTokenChange) Reset() {
	*m = WatchPoliciesResponse_PageTokenChange{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_policy_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchPoliciesResponse_PageTokenChange) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchPoliciesResponse_PageTokenChange) ProtoMessage() {}

func (m *WatchPoliciesResponse_PageTokenChange) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_policy_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchPoliciesResponse_PageTokenChange) GotenMessage() {}

// Deprecated, Use WatchPoliciesResponse_PageTokenChange.ProtoReflect.Descriptor instead.
func (*WatchPoliciesResponse_PageTokenChange) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_policy_service_proto_rawDescGZIP(), []int{8, 0}
}

func (m *WatchPoliciesResponse_PageTokenChange) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchPoliciesResponse_PageTokenChange) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchPoliciesResponse_PageTokenChange) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchPoliciesResponse_PageTokenChange) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchPoliciesResponse_PageTokenChange) GetPrevPageToken() *policy.PagerCursor {
	if m != nil {
		return m.PrevPageToken
	}
	return nil
}

func (m *WatchPoliciesResponse_PageTokenChange) GetNextPageToken() *policy.PagerCursor {
	if m != nil {
		return m.NextPageToken
	}
	return nil
}

func (m *WatchPoliciesResponse_PageTokenChange) SetPrevPageToken(fv *policy.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PrevPageToken", "WatchPoliciesResponse_PageTokenChange"))
	}
	m.PrevPageToken = fv
}

func (m *WatchPoliciesResponse_PageTokenChange) SetNextPageToken(fv *policy.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NextPageToken", "WatchPoliciesResponse_PageTokenChange"))
	}
	m.NextPageToken = fv
}

// ResponseMask allows client to reduce response message size.
type CreatePolicyRequest_ResponseMask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Types that are valid to be assigned to Masking:
	//	*CreatePolicyRequest_ResponseMask_SkipEntireResponseBody
	//	*CreatePolicyRequest_ResponseMask_BodyMask
	Masking isCreatePolicyRequest_ResponseMask_Masking `protobuf_oneof:"masking"`
}

func (m *CreatePolicyRequest_ResponseMask) Reset() {
	*m = CreatePolicyRequest_ResponseMask{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_policy_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *CreatePolicyRequest_ResponseMask) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*CreatePolicyRequest_ResponseMask) ProtoMessage() {}

func (m *CreatePolicyRequest_ResponseMask) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_policy_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*CreatePolicyRequest_ResponseMask) GotenMessage() {}

// Deprecated, Use CreatePolicyRequest_ResponseMask.ProtoReflect.Descriptor instead.
func (*CreatePolicyRequest_ResponseMask) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_policy_service_proto_rawDescGZIP(), []int{9, 0}
}

func (m *CreatePolicyRequest_ResponseMask) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *CreatePolicyRequest_ResponseMask) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *CreatePolicyRequest_ResponseMask) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *CreatePolicyRequest_ResponseMask) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

type isCreatePolicyRequest_ResponseMask_Masking interface {
	isCreatePolicyRequest_ResponseMask_Masking()
}

type CreatePolicyRequest_ResponseMask_SkipEntireResponseBody struct {
	// If this flag has value true, then response will contain just empty
	// resource without any fields populated.
	SkipEntireResponseBody bool `protobuf:"varint,1,opt,name=skip_entire_response_body,json=skipEntireResponseBody,proto3,oneof"`
}
type CreatePolicyRequest_ResponseMask_BodyMask struct {
	// If this field is populated, then resource in response will contain only
	// specific fields.
	BodyMask *policy.Policy_FieldMask `protobuf:"bytes,2,opt,customtype=Policy_FieldMask,name=body_mask,json=bodyMask,proto3,oneof"`
}

func (*CreatePolicyRequest_ResponseMask_SkipEntireResponseBody) isCreatePolicyRequest_ResponseMask_Masking() {
}
func (*CreatePolicyRequest_ResponseMask_BodyMask) isCreatePolicyRequest_ResponseMask_Masking() {}
func (m *CreatePolicyRequest_ResponseMask) GetMasking() isCreatePolicyRequest_ResponseMask_Masking {
	if m != nil {
		return m.Masking
	}
	return nil
}
func (m *CreatePolicyRequest_ResponseMask) GetSkipEntireResponseBody() bool {
	if x, ok := m.GetMasking().(*CreatePolicyRequest_ResponseMask_SkipEntireResponseBody); ok {
		return x.SkipEntireResponseBody
	}
	return false
}
func (m *CreatePolicyRequest_ResponseMask) GetBodyMask() *policy.Policy_FieldMask {
	if x, ok := m.GetMasking().(*CreatePolicyRequest_ResponseMask_BodyMask); ok {
		return x.BodyMask
	}
	return nil
}
func (m *CreatePolicyRequest_ResponseMask) SetMasking(ofv isCreatePolicyRequest_ResponseMask_Masking) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "isCreatePolicyRequest_ResponseMask_Masking", "CreatePolicyRequest_ResponseMask"))
	}
	m.Masking = ofv
}
func (m *CreatePolicyRequest_ResponseMask) SetSkipEntireResponseBody(fv bool) {
	m.SetMasking(&CreatePolicyRequest_ResponseMask_SkipEntireResponseBody{SkipEntireResponseBody: fv})
}
func (m *CreatePolicyRequest_ResponseMask) SetBodyMask(fv *policy.Policy_FieldMask) {
	m.SetMasking(&CreatePolicyRequest_ResponseMask_BodyMask{BodyMask: fv})
}

// CAS - Compare and Swap. This object is used if user wants to make update
// conditional based upon previous resource version.
type UpdatePolicyRequest_CAS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Conditional desired state of a resource before update.
	ConditionalState *policy.Policy `protobuf:"bytes,1,opt,name=conditional_state,json=conditionalState,proto3" json:"conditional_state,omitempty"`
	// Field paths from conditional state of resource server should check and
	// compare.
	FieldMask *policy.Policy_FieldMask `protobuf:"bytes,2,opt,customtype=Policy_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
}

func (m *UpdatePolicyRequest_CAS) Reset() {
	*m = UpdatePolicyRequest_CAS{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_policy_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *UpdatePolicyRequest_CAS) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*UpdatePolicyRequest_CAS) ProtoMessage() {}

func (m *UpdatePolicyRequest_CAS) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_policy_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*UpdatePolicyRequest_CAS) GotenMessage() {}

// Deprecated, Use UpdatePolicyRequest_CAS.ProtoReflect.Descriptor instead.
func (*UpdatePolicyRequest_CAS) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_policy_service_proto_rawDescGZIP(), []int{10, 0}
}

func (m *UpdatePolicyRequest_CAS) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *UpdatePolicyRequest_CAS) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *UpdatePolicyRequest_CAS) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *UpdatePolicyRequest_CAS) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *UpdatePolicyRequest_CAS) GetConditionalState() *policy.Policy {
	if m != nil {
		return m.ConditionalState
	}
	return nil
}

func (m *UpdatePolicyRequest_CAS) GetFieldMask() *policy.Policy_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *UpdatePolicyRequest_CAS) SetConditionalState(fv *policy.Policy) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ConditionalState", "UpdatePolicyRequest_CAS"))
	}
	m.ConditionalState = fv
}

func (m *UpdatePolicyRequest_CAS) SetFieldMask(fv *policy.Policy_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "UpdatePolicyRequest_CAS"))
	}
	m.FieldMask = fv
}

// ResponseMask allows client to reduce response message size.
type UpdatePolicyRequest_ResponseMask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Types that are valid to be assigned to Masking:
	//	*UpdatePolicyRequest_ResponseMask_SkipEntireResponseBody
	//	*UpdatePolicyRequest_ResponseMask_UpdatedFieldsOnly
	//	*UpdatePolicyRequest_ResponseMask_BodyMask
	Masking isUpdatePolicyRequest_ResponseMask_Masking `protobuf_oneof:"masking"`
}

func (m *UpdatePolicyRequest_ResponseMask) Reset() {
	*m = UpdatePolicyRequest_ResponseMask{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_alerting_proto_v1_policy_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *UpdatePolicyRequest_ResponseMask) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*UpdatePolicyRequest_ResponseMask) ProtoMessage() {}

func (m *UpdatePolicyRequest_ResponseMask) ProtoReflect() preflect.Message {
	mi := &edgelq_alerting_proto_v1_policy_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*UpdatePolicyRequest_ResponseMask) GotenMessage() {}

// Deprecated, Use UpdatePolicyRequest_ResponseMask.ProtoReflect.Descriptor instead.
func (*UpdatePolicyRequest_ResponseMask) Descriptor() ([]byte, []int) {
	return edgelq_alerting_proto_v1_policy_service_proto_rawDescGZIP(), []int{10, 1}
}

func (m *UpdatePolicyRequest_ResponseMask) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *UpdatePolicyRequest_ResponseMask) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *UpdatePolicyRequest_ResponseMask) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *UpdatePolicyRequest_ResponseMask) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

type isUpdatePolicyRequest_ResponseMask_Masking interface {
	isUpdatePolicyRequest_ResponseMask_Masking()
}

type UpdatePolicyRequest_ResponseMask_SkipEntireResponseBody struct {
	// If this flag has value true, then response will contain just empty
	// resource without any fields populated. Field body_mask is ignored if
	// set.
	SkipEntireResponseBody bool `protobuf:"varint,1,opt,name=skip_entire_response_body,json=skipEntireResponseBody,proto3,oneof"`
}
type UpdatePolicyRequest_ResponseMask_UpdatedFieldsOnly struct {
	// Include all fields that were actually updated during processing. Note
	// this may be larger than update mask if some fields were computed
	// additionally. Name is added as well.
	UpdatedFieldsOnly bool `protobuf:"varint,2,opt,name=updated_fields_only,json=updatedFieldsOnly,proto3,oneof"`
}
type UpdatePolicyRequest_ResponseMask_BodyMask struct {
	// If this field is populated, then resource in response will contain only
	// specific fields. If skip_entire_response_body is true, this field is
	// ignored.
	BodyMask *policy.Policy_FieldMask `protobuf:"bytes,3,opt,customtype=Policy_FieldMask,name=body_mask,json=bodyMask,proto3,oneof"`
}

func (*UpdatePolicyRequest_ResponseMask_SkipEntireResponseBody) isUpdatePolicyRequest_ResponseMask_Masking() {
}
func (*UpdatePolicyRequest_ResponseMask_UpdatedFieldsOnly) isUpdatePolicyRequest_ResponseMask_Masking() {
}
func (*UpdatePolicyRequest_ResponseMask_BodyMask) isUpdatePolicyRequest_ResponseMask_Masking() {}
func (m *UpdatePolicyRequest_ResponseMask) GetMasking() isUpdatePolicyRequest_ResponseMask_Masking {
	if m != nil {
		return m.Masking
	}
	return nil
}
func (m *UpdatePolicyRequest_ResponseMask) GetSkipEntireResponseBody() bool {
	if x, ok := m.GetMasking().(*UpdatePolicyRequest_ResponseMask_SkipEntireResponseBody); ok {
		return x.SkipEntireResponseBody
	}
	return false
}
func (m *UpdatePolicyRequest_ResponseMask) GetUpdatedFieldsOnly() bool {
	if x, ok := m.GetMasking().(*UpdatePolicyRequest_ResponseMask_UpdatedFieldsOnly); ok {
		return x.UpdatedFieldsOnly
	}
	return false
}
func (m *UpdatePolicyRequest_ResponseMask) GetBodyMask() *policy.Policy_FieldMask {
	if x, ok := m.GetMasking().(*UpdatePolicyRequest_ResponseMask_BodyMask); ok {
		return x.BodyMask
	}
	return nil
}
func (m *UpdatePolicyRequest_ResponseMask) SetMasking(ofv isUpdatePolicyRequest_ResponseMask_Masking) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "isUpdatePolicyRequest_ResponseMask_Masking", "UpdatePolicyRequest_ResponseMask"))
	}
	m.Masking = ofv
}
func (m *UpdatePolicyRequest_ResponseMask) SetSkipEntireResponseBody(fv bool) {
	m.SetMasking(&UpdatePolicyRequest_ResponseMask_SkipEntireResponseBody{SkipEntireResponseBody: fv})
}
func (m *UpdatePolicyRequest_ResponseMask) SetUpdatedFieldsOnly(fv bool) {
	m.SetMasking(&UpdatePolicyRequest_ResponseMask_UpdatedFieldsOnly{UpdatedFieldsOnly: fv})
}
func (m *UpdatePolicyRequest_ResponseMask) SetBodyMask(fv *policy.Policy_FieldMask) {
	m.SetMasking(&UpdatePolicyRequest_ResponseMask_BodyMask{BodyMask: fv})
}

var edgelq_alerting_proto_v1_policy_service_proto preflect.FileDescriptor

var edgelq_alerting_proto_v1_policy_service_proto_rawDesc = []byte{
	0x0a, 0x2d, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0f, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x74,
	0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6c, 0x69, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x67,
	0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x69, 0x65, 0x77, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x65, 0x64, 0x67, 0x65,
	0x6c, 0x71, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa8, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xb2, 0xda, 0x21,
	0x0a, 0x0a, 0x08, 0x0a, 0x06, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x49, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73,
	0x6b, 0x42, 0x0e, 0xb2, 0xda, 0x21, 0x0a, 0x32, 0x08, 0x0a, 0x06, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x25, 0x0a, 0x04,
	0x76, 0x69, 0x65, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x74,
	0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76,
	0x69, 0x65, 0x77, 0x22, 0xb7, 0x01, 0x0a, 0x17, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x24, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0e,
	0xb2, 0xda, 0x21, 0x0a, 0x0a, 0x08, 0x0a, 0x06, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x05,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d,
	0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x0e, 0xb2, 0xda, 0x21, 0x0a, 0x32, 0x08, 0x0a, 0x06, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b,
	0x12, 0x25, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11,
	0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x56, 0x69, 0x65,
	0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0x79, 0x0a,
	0x18, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x28,
	0x0a, 0x07, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42,
	0x0e, 0xb2, 0xda, 0x21, 0x0a, 0x0a, 0x08, 0x0a, 0x06, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x07, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x22, 0x88, 0x03, 0x0a, 0x13, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x26, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0e, 0xb2, 0xda, 0x21, 0x0a, 0x3a, 0x08, 0x0a, 0x06, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0xca, 0xc6, 0x27,
	0x04, 0x12, 0x02, 0x2a, 0x00, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x2d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0e, 0xb2, 0xda, 0x21, 0x0a, 0x22, 0x08, 0x0a, 0x06, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x29,
	0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0e, 0xb2, 0xda, 0x21, 0x0a, 0x2a, 0x08, 0x0a, 0x06, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x26, 0x0a, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xb2, 0xda, 0x21, 0x0a, 0x1a,
	0x08, 0x0a, 0x06, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x49, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73,
	0x6b, 0x42, 0x0e, 0xb2, 0xda, 0x21, 0x0a, 0x32, 0x08, 0x0a, 0x06, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x25, 0x0a, 0x04,
	0x76, 0x69, 0x65, 0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x74,
	0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76,
	0x69, 0x65, 0x77, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x11, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x92, 0x02, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x08,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x12, 0x36, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xb2, 0xda, 0x21, 0x0a,
	0x22, 0x08, 0x0a, 0x06, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x76,
	0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x36, 0x0a, 0x0f, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0e, 0xb2, 0xda, 0x21, 0x0a, 0x22, 0x08, 0x0a, 0x06, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xaa, 0x01, 0x0a, 0x12, 0x57, 0x61, 0x74,
	0x63, 0x68, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x22, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xb2,
	0xda, 0x21, 0x0a, 0x0a, 0x08, 0x0a, 0x06, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73,
	0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d,
	0x61, 0x73, 0x6b, 0x42, 0x0e, 0xb2, 0xda, 0x21, 0x0a, 0x32, 0x08, 0x0a, 0x06, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x25,
	0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x67,
	0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x52,
	0x04, 0x76, 0x69, 0x65, 0x77, 0x22, 0x4c, 0x0a, 0x13, 0x57, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x06,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x06, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x22, 0x9d, 0x04, 0x0a, 0x14, 0x57, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x74,
	0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xb2, 0xda, 0x21, 0x0a, 0x3a, 0x08,
	0x0a, 0x06, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x12, 0x25, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x08, 0xca, 0xc6, 0x27, 0x04, 0x12, 0x02, 0x2a, 0x00, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xb2, 0xda, 0x21,
	0x0a, 0x22, 0x08, 0x0a, 0x06, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x29, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xb2, 0xda, 0x21, 0x0a, 0x2a, 0x08,
	0x0a, 0x06, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42,
	0x79, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x3f, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xb2, 0xda, 0x21, 0x0a, 0x1a, 0x08, 0x0a, 0x06, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x49, 0x0a,
	0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x0e, 0xb2,
	0xda, 0x21, 0x0a, 0x32, 0x08, 0x0a, 0x06, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x09, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x25, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x12,
	0x32, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0c, 0xca, 0xc6, 0x27, 0x08, 0x12, 0x06, 0x1a,
	0x02, 0x08, 0x64, 0x2a, 0x00, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x53,
	0x69, 0x7a, 0x65, 0x22, 0xf4, 0x03, 0x0a, 0x15, 0x57, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a,
	0x0e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x0d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x12, 0x62, 0x0a, 0x11, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x57, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0f, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65,
	0x73, 0x75, 0x6d, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22,
	0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x73, 0x6f, 0x66, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x53, 0x6f, 0x66, 0x74, 0x52, 0x65, 0x73,
	0x65, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x48, 0x61, 0x72,
	0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x1a, 0x81, 0x01, 0x0a, 0x0f, 0x50, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x0f, 0x70, 0x72,
	0x65, 0x76, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0e, 0xb2, 0xda, 0x21, 0x0a, 0x22, 0x08, 0x0a, 0x06, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x36, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xb2, 0xda, 0x21,
	0x0a, 0x22, 0x08, 0x0a, 0x06, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0d, 0x6e, 0x65, 0x78,
	0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xf8, 0x02, 0x0a, 0x13, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x26, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0e, 0xb2, 0xda, 0x21, 0x0a, 0x3a, 0x08, 0x0a, 0x06, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x06, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x42, 0x0c, 0xc8, 0xd5, 0x22, 0x01, 0xca, 0xc6, 0x27, 0x04, 0x62, 0x02, 0x08,
	0x01, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x56, 0x0a, 0x0d, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d,
	0x61, 0x73, 0x6b, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x61, 0x73,
	0x6b, 0x1a, 0xa1, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x61,
	0x73, 0x6b, 0x12, 0x3b, 0x0a, 0x19, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x72,
	0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x16, 0x73, 0x6b, 0x69, 0x70, 0x45, 0x6e, 0x74,
	0x69, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12,
	0x49, 0x0a, 0x09, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x0e,
	0xb2, 0xda, 0x21, 0x0a, 0x32, 0x08, 0x0a, 0x06, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x48, 0x00,
	0x52, 0x08, 0x62, 0x6f, 0x64, 0x79, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x09, 0x0a, 0x07, 0x6d, 0x61,
	0x73, 0x6b, 0x69, 0x6e, 0x67, 0x22, 0xd3, 0x05, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a,
	0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x0c, 0xc8, 0xd5, 0x22, 0x01, 0xca, 0xc6, 0x27, 0x04,
	0x62, 0x02, 0x08, 0x01, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x4b, 0x0a, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x0e, 0xb2,
	0xda, 0x21, 0x0a, 0x32, 0x08, 0x0a, 0x06, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x3a, 0x0a, 0x03, 0x63, 0x61, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x41, 0x53,
	0x52, 0x03, 0x63, 0x61, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x56, 0x0a, 0x0d, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x61,
	0x73, 0x6b, 0x1a, 0xa0, 0x01, 0x0a, 0x03, 0x43, 0x41, 0x53, 0x12, 0x4e, 0x0a, 0x11, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x08,
	0xca, 0xc6, 0x27, 0x04, 0x62, 0x02, 0x10, 0x01, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x49, 0x0a, 0x0a, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x0e, 0xb2, 0xda, 0x21, 0x0a,
	0x32, 0x08, 0x0a, 0x06, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x4d, 0x61, 0x73, 0x6b, 0x1a, 0xd3, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x3b, 0x0a, 0x19, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x65,
	0x6e, 0x74, 0x69, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x62,
	0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x16, 0x73, 0x6b, 0x69,
	0x70, 0x45, 0x6e, 0x74, 0x69, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0x6f, 0x64, 0x79, 0x12, 0x30, 0x0a, 0x13, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x00, 0x52, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x49, 0x0a, 0x09, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x6d, 0x61,
	0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x4d, 0x61, 0x73, 0x6b, 0x42, 0x0e, 0xb2, 0xda, 0x21, 0x0a, 0x32, 0x08, 0x0a, 0x06, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x48, 0x00, 0x52, 0x08, 0x62, 0x6f, 0x64, 0x79, 0x4d, 0x61, 0x73, 0x6b,
	0x42, 0x09, 0x0a, 0x07, 0x6d, 0x61, 0x73, 0x6b, 0x69, 0x6e, 0x67, 0x22, 0x5e, 0x0a, 0x13, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x22, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0e, 0xb2, 0xda, 0x21, 0x0a, 0x0a, 0x08, 0x0a, 0x06, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x22, 0xf2, 0x02, 0x0a, 0x15,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xb2, 0xda, 0x21, 0x0a, 0x3a, 0x08, 0x0a, 0x06, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x08, 0xca, 0xc6, 0x27, 0x04, 0x12, 0x02, 0x2a, 0x00, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x2d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xb2, 0xda, 0x21, 0x0a, 0x22, 0x08,
	0x0a, 0x06, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x29, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xb2, 0xda, 0x21, 0x0a, 0x2a, 0x08, 0x0a, 0x06, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x26,
	0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e,
	0xb2, 0xda, 0x21, 0x0a, 0x1a, 0x08, 0x0a, 0x06, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x6d, 0x61, 0x73, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x0e, 0xb2, 0xda, 0x21, 0x0a, 0x32, 0x08, 0x0a, 0x06,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73,
	0x6b, 0x12, 0x25, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x11, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x56, 0x69,
	0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x68, 0x72, 0x61,
	0x73, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65,
	0x22, 0x94, 0x02, 0x0a, 0x16, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x12, 0x36, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xb2, 0xda, 0x21, 0x0a, 0x22,
	0x08, 0x0a, 0x06, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x50,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x36, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0e, 0xb2, 0xda, 0x21, 0x0a, 0x22, 0x08, 0x0a, 0x06, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x25, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0xd1, 0x0d, 0x0a, 0x0d, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x9c, 0x01, 0x0a, 0x09, 0x47, 0x65,
	0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x21, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x22, 0x53, 0x82, 0xdb, 0x21, 0x1d, 0x0a, 0x06, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x03, 0x67, 0x65, 0x74, 0x2a, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x06,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xa2, 0xdc, 0x21, 0x02, 0x08, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x22, 0x12, 0x20, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x2f, 0x2a, 0x7d, 0x8a, 0xcc, 0x26, 0x00, 0x12, 0xbd, 0x01, 0x0a, 0x10, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x28, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47,
	0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x54, 0x82, 0xdb, 0x21, 0x29, 0x0a, 0x06, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x12, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x20, 0x01, 0x2a, 0x07, 0x0a, 0x05,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x32, 0x0a, 0x12, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0xa2, 0xdc, 0x21, 0x02, 0x08, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x12, 0x15, 0x2f,
	0x76, 0x31, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x3a, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x47, 0x65, 0x74, 0x8a, 0xcc, 0x26, 0x00, 0x12, 0xbb, 0x01, 0x0a, 0x0c, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x24, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x25, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5e, 0x82, 0xdb, 0x21, 0x28, 0x0a, 0x06, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x2a, 0x08,
	0x1a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x32, 0x0a, 0x12, 0x08, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0xa2, 0xdc, 0x21, 0x02, 0x08, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22,
	0x12, 0x20, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x8a, 0xcc, 0x26, 0x00, 0x12, 0xb9, 0x01, 0x0a, 0x0b, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x23, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61,
	0x74, 0x63, 0x68, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x5d, 0x82, 0xdb, 0x21, 0x21, 0x0a, 0x06, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x05, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2a, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x08,
	0x12, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0xa2, 0xdc, 0x21, 0x02, 0x08, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x28, 0x22, 0x26, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x77, 0x61, 0x74, 0x63, 0x68, 0x8a, 0xcc, 0x26, 0x00,
	0x30, 0x01, 0x12, 0xcd, 0x01, 0x0a, 0x0d, 0x57, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x12, 0x25, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61,
	0x74, 0x63, 0x68, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x6b, 0x82, 0xdb, 0x21, 0x2f, 0x0a, 0x06, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x05, 0x77, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x2a, 0x08, 0x1a, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x32, 0x10, 0x12, 0x0e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0xa2, 0xdc, 0x21, 0x02, 0x08, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x28, 0x22, 0x26, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x3a, 0x77, 0x61, 0x74, 0x63, 0x68, 0x8a, 0xcc, 0x26, 0x00,
	0x30, 0x01, 0x12, 0xbb, 0x01, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0x24, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x22, 0x6c, 0x82, 0xdb, 0x21, 0x2c, 0x0a, 0x06, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x12, 0x06, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x01, 0x2a, 0x10, 0x12, 0x06, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x1a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x32, 0x06, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0xa2, 0xdc, 0x21, 0x02, 0x10, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a,
	0x3a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x20, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a,
	0x7d, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x8a, 0xcc, 0x26, 0x02, 0x10, 0x01,
	0x12, 0xb8, 0x01, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x24, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x22, 0x69, 0x82, 0xdb, 0x21, 0x22, 0x0a, 0x06, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x06,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2a, 0x08, 0x12, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x32, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xa2, 0xdc, 0x21, 0x02, 0x10, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x31, 0x3a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x1a, 0x27, 0x2f, 0x76,
	0x31, 0x2f, 0x7b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x8a, 0xcc, 0x26, 0x02, 0x10, 0x01, 0x12, 0x9e, 0x01, 0x0a, 0x0c,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x24, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x50, 0x82, 0xdb, 0x21, 0x18,
	0x0a, 0x06, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x2a, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xa2, 0xdc, 0x21, 0x02, 0x10, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x22, 0x2a, 0x20, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x8a, 0xcc, 0x26, 0x02, 0x10, 0x01, 0x12, 0xca, 0x01, 0x0a,
	0x0e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12,
	0x26, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x67, 0x82, 0xdb, 0x21, 0x2a, 0x0a, 0x06, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x06,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x2a, 0x08, 0x1a, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x32, 0x0a, 0x12, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0xa2, 0xdc, 0x21, 0x02, 0x08, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x12, 0x27, 0x2f, 0x76,
	0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x3a, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x8a, 0xcc, 0x26, 0x00, 0x1a, 0x30, 0xca, 0x41, 0x13, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2e, 0x63, 0x6f,
	0x6d, 0xd2, 0x41, 0x17, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2e, 0x63, 0x6f, 0x6d, 0x42, 0x8a, 0x02, 0xe8, 0xde,
	0x21, 0x00, 0x82, 0xff, 0xd0, 0x02, 0x45, 0x0a, 0x0d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65,
	0x6c, 0x71, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x8a, 0xff, 0xd0, 0x02,
	0x45, 0x0a, 0x0d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x12, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x62, 0x2e, 0x76, 0x31, 0x42, 0x12,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x00, 0x5a, 0x42, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71,
	0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x3b, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	edgelq_alerting_proto_v1_policy_service_proto_rawDescOnce sync.Once
	edgelq_alerting_proto_v1_policy_service_proto_rawDescData = edgelq_alerting_proto_v1_policy_service_proto_rawDesc
)

func edgelq_alerting_proto_v1_policy_service_proto_rawDescGZIP() []byte {
	edgelq_alerting_proto_v1_policy_service_proto_rawDescOnce.Do(func() {
		edgelq_alerting_proto_v1_policy_service_proto_rawDescData = protoimpl.X.CompressGZIP(edgelq_alerting_proto_v1_policy_service_proto_rawDescData)
	})
	return edgelq_alerting_proto_v1_policy_service_proto_rawDescData
}

var edgelq_alerting_proto_v1_policy_service_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var edgelq_alerting_proto_v1_policy_service_proto_goTypes = []interface{}{
	(*GetPolicyRequest)(nil),                      // 0: ntt.alerting.v1.GetPolicyRequest
	(*BatchGetPoliciesRequest)(nil),               // 1: ntt.alerting.v1.BatchGetPoliciesRequest
	(*BatchGetPoliciesResponse)(nil),              // 2: ntt.alerting.v1.BatchGetPoliciesResponse
	(*ListPoliciesRequest)(nil),                   // 3: ntt.alerting.v1.ListPoliciesRequest
	(*ListPoliciesResponse)(nil),                  // 4: ntt.alerting.v1.ListPoliciesResponse
	(*WatchPolicyRequest)(nil),                    // 5: ntt.alerting.v1.WatchPolicyRequest
	(*WatchPolicyResponse)(nil),                   // 6: ntt.alerting.v1.WatchPolicyResponse
	(*WatchPoliciesRequest)(nil),                  // 7: ntt.alerting.v1.WatchPoliciesRequest
	(*WatchPoliciesResponse)(nil),                 // 8: ntt.alerting.v1.WatchPoliciesResponse
	(*CreatePolicyRequest)(nil),                   // 9: ntt.alerting.v1.CreatePolicyRequest
	(*UpdatePolicyRequest)(nil),                   // 10: ntt.alerting.v1.UpdatePolicyRequest
	(*DeletePolicyRequest)(nil),                   // 11: ntt.alerting.v1.DeletePolicyRequest
	(*SearchPoliciesRequest)(nil),                 // 12: ntt.alerting.v1.SearchPoliciesRequest
	(*SearchPoliciesResponse)(nil),                // 13: ntt.alerting.v1.SearchPoliciesResponse
	(*WatchPoliciesResponse_PageTokenChange)(nil), // 14: ntt.alerting.v1.WatchPoliciesResponse.PageTokenChange
	(*CreatePolicyRequest_ResponseMask)(nil),      // 15: ntt.alerting.v1.CreatePolicyRequest.ResponseMask
	(*UpdatePolicyRequest_CAS)(nil),               // 16: ntt.alerting.v1.UpdatePolicyRequest.CAS
	(*UpdatePolicyRequest_ResponseMask)(nil),      // 17: ntt.alerting.v1.UpdatePolicyRequest.ResponseMask
	(*policy.Policy_FieldMask)(nil),               // 18: ntt.alerting.v1.Policy_FieldMask
	(view.View)(0),                                // 19: goten.types.View
	(*policy.Policy)(nil),                         // 20: ntt.alerting.v1.Policy
	(*policy.PolicyChange)(nil),                   // 21: ntt.alerting.v1.PolicyChange
	(watch_type.WatchType)(0),                     // 22: goten.types.WatchType
	(*timestamppb.Timestamp)(nil),                 // 23: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),                         // 24: google.protobuf.Empty
}
var edgelq_alerting_proto_v1_policy_service_proto_depIdxs = []int32{
	18, // 0: ntt.alerting.v1.GetPolicyRequest.field_mask:type_name -> ntt.alerting.v1.Policy_FieldMask
	19, // 1: ntt.alerting.v1.GetPolicyRequest.view:type_name -> goten.types.View
	18, // 2: ntt.alerting.v1.BatchGetPoliciesRequest.field_mask:type_name -> ntt.alerting.v1.Policy_FieldMask
	19, // 3: ntt.alerting.v1.BatchGetPoliciesRequest.view:type_name -> goten.types.View
	20, // 4: ntt.alerting.v1.BatchGetPoliciesResponse.policies:type_name -> ntt.alerting.v1.Policy
	18, // 5: ntt.alerting.v1.ListPoliciesRequest.field_mask:type_name -> ntt.alerting.v1.Policy_FieldMask
	19, // 6: ntt.alerting.v1.ListPoliciesRequest.view:type_name -> goten.types.View
	20, // 7: ntt.alerting.v1.ListPoliciesResponse.policies:type_name -> ntt.alerting.v1.Policy
	18, // 8: ntt.alerting.v1.WatchPolicyRequest.field_mask:type_name -> ntt.alerting.v1.Policy_FieldMask
	19, // 9: ntt.alerting.v1.WatchPolicyRequest.view:type_name -> goten.types.View
	21, // 10: ntt.alerting.v1.WatchPolicyResponse.change:type_name -> ntt.alerting.v1.PolicyChange
	22, // 11: ntt.alerting.v1.WatchPoliciesRequest.type:type_name -> goten.types.WatchType
	23, // 12: ntt.alerting.v1.WatchPoliciesRequest.starting_time:type_name -> google.protobuf.Timestamp
	18, // 13: ntt.alerting.v1.WatchPoliciesRequest.field_mask:type_name -> ntt.alerting.v1.Policy_FieldMask
	19, // 14: ntt.alerting.v1.WatchPoliciesRequest.view:type_name -> goten.types.View
	21, // 15: ntt.alerting.v1.WatchPoliciesResponse.policy_changes:type_name -> ntt.alerting.v1.PolicyChange
	14, // 16: ntt.alerting.v1.WatchPoliciesResponse.page_token_change:type_name -> ntt.alerting.v1.WatchPoliciesResponse.PageTokenChange
	20, // 17: ntt.alerting.v1.CreatePolicyRequest.policy:type_name -> ntt.alerting.v1.Policy
	15, // 18: ntt.alerting.v1.CreatePolicyRequest.response_mask:type_name -> ntt.alerting.v1.CreatePolicyRequest.ResponseMask
	20, // 19: ntt.alerting.v1.UpdatePolicyRequest.policy:type_name -> ntt.alerting.v1.Policy
	18, // 20: ntt.alerting.v1.UpdatePolicyRequest.update_mask:type_name -> ntt.alerting.v1.Policy_FieldMask
	16, // 21: ntt.alerting.v1.UpdatePolicyRequest.cas:type_name -> ntt.alerting.v1.UpdatePolicyRequest.CAS
	17, // 22: ntt.alerting.v1.UpdatePolicyRequest.response_mask:type_name -> ntt.alerting.v1.UpdatePolicyRequest.ResponseMask
	18, // 23: ntt.alerting.v1.SearchPoliciesRequest.field_mask:type_name -> ntt.alerting.v1.Policy_FieldMask
	19, // 24: ntt.alerting.v1.SearchPoliciesRequest.view:type_name -> goten.types.View
	20, // 25: ntt.alerting.v1.SearchPoliciesResponse.policies:type_name -> ntt.alerting.v1.Policy
	18, // 26: ntt.alerting.v1.CreatePolicyRequest.ResponseMask.body_mask:type_name -> ntt.alerting.v1.Policy_FieldMask
	20, // 27: ntt.alerting.v1.UpdatePolicyRequest.CAS.conditional_state:type_name -> ntt.alerting.v1.Policy
	18, // 28: ntt.alerting.v1.UpdatePolicyRequest.CAS.field_mask:type_name -> ntt.alerting.v1.Policy_FieldMask
	18, // 29: ntt.alerting.v1.UpdatePolicyRequest.ResponseMask.body_mask:type_name -> ntt.alerting.v1.Policy_FieldMask
	0,  // 30: ntt.alerting.v1.PolicyService.GetPolicy:input_type -> ntt.alerting.v1.GetPolicyRequest
	1,  // 31: ntt.alerting.v1.PolicyService.BatchGetPolicies:input_type -> ntt.alerting.v1.BatchGetPoliciesRequest
	3,  // 32: ntt.alerting.v1.PolicyService.ListPolicies:input_type -> ntt.alerting.v1.ListPoliciesRequest
	5,  // 33: ntt.alerting.v1.PolicyService.WatchPolicy:input_type -> ntt.alerting.v1.WatchPolicyRequest
	7,  // 34: ntt.alerting.v1.PolicyService.WatchPolicies:input_type -> ntt.alerting.v1.WatchPoliciesRequest
	9,  // 35: ntt.alerting.v1.PolicyService.CreatePolicy:input_type -> ntt.alerting.v1.CreatePolicyRequest
	10, // 36: ntt.alerting.v1.PolicyService.UpdatePolicy:input_type -> ntt.alerting.v1.UpdatePolicyRequest
	11, // 37: ntt.alerting.v1.PolicyService.DeletePolicy:input_type -> ntt.alerting.v1.DeletePolicyRequest
	12, // 38: ntt.alerting.v1.PolicyService.SearchPolicies:input_type -> ntt.alerting.v1.SearchPoliciesRequest
	20, // 39: ntt.alerting.v1.PolicyService.GetPolicy:output_type -> ntt.alerting.v1.Policy
	2,  // 40: ntt.alerting.v1.PolicyService.BatchGetPolicies:output_type -> ntt.alerting.v1.BatchGetPoliciesResponse
	4,  // 41: ntt.alerting.v1.PolicyService.ListPolicies:output_type -> ntt.alerting.v1.ListPoliciesResponse
	6,  // 42: ntt.alerting.v1.PolicyService.WatchPolicy:output_type -> ntt.alerting.v1.WatchPolicyResponse
	8,  // 43: ntt.alerting.v1.PolicyService.WatchPolicies:output_type -> ntt.alerting.v1.WatchPoliciesResponse
	20, // 44: ntt.alerting.v1.PolicyService.CreatePolicy:output_type -> ntt.alerting.v1.Policy
	20, // 45: ntt.alerting.v1.PolicyService.UpdatePolicy:output_type -> ntt.alerting.v1.Policy
	24, // 46: ntt.alerting.v1.PolicyService.DeletePolicy:output_type -> google.protobuf.Empty
	13, // 47: ntt.alerting.v1.PolicyService.SearchPolicies:output_type -> ntt.alerting.v1.SearchPoliciesResponse
	39, // [39:48] is the sub-list for method output_type
	30, // [30:39] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { edgelq_alerting_proto_v1_policy_service_proto_init() }
func edgelq_alerting_proto_v1_policy_service_proto_init() {
	if edgelq_alerting_proto_v1_policy_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		edgelq_alerting_proto_v1_policy_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_policy_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetPoliciesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_policy_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetPoliciesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_policy_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPoliciesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_policy_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPoliciesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_policy_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_policy_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchPolicyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_policy_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchPoliciesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_policy_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchPoliciesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_policy_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_policy_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_policy_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_policy_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchPoliciesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_policy_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchPoliciesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_policy_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchPoliciesResponse_PageTokenChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_policy_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePolicyRequest_ResponseMask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_policy_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePolicyRequest_CAS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_alerting_proto_v1_policy_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePolicyRequest_ResponseMask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	edgelq_alerting_proto_v1_policy_service_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*CreatePolicyRequest_ResponseMask_SkipEntireResponseBody)(nil),
		(*CreatePolicyRequest_ResponseMask_BodyMask)(nil),
	}
	edgelq_alerting_proto_v1_policy_service_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*UpdatePolicyRequest_ResponseMask_SkipEntireResponseBody)(nil),
		(*UpdatePolicyRequest_ResponseMask_UpdatedFieldsOnly)(nil),
		(*UpdatePolicyRequest_ResponseMask_BodyMask)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: edgelq_alerting_proto_v1_policy_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           edgelq_alerting_proto_v1_policy_service_proto_goTypes,
		DependencyIndexes: edgelq_alerting_proto_v1_policy_service_proto_depIdxs,
		MessageInfos:      edgelq_alerting_proto_v1_policy_service_proto_msgTypes,
	}.Build()
	edgelq_alerting_proto_v1_policy_service_proto = out.File
	edgelq_alerting_proto_v1_policy_service_proto_rawDesc = nil
	edgelq_alerting_proto_v1_policy_service_proto_goTypes = nil
	edgelq_alerting_proto_v1_policy_service_proto_depIdxs = nil
}
