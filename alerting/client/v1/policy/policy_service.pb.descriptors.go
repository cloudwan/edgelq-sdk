// Code generated by protoc-gen-goten-client
// API: PolicyService
// DO NOT EDIT!!!

package policy_client

import (
	"google.golang.org/protobuf/proto"

	gotenclient "github.com/cloudwan/goten-sdk/runtime/client"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	policy "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/policy"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = new(proto.Message)
	_ = new(gotenclient.MethodDescriptor)
	_ = gotenresource.WildcardId
)

// make sure we're using proto imports
var (
	_ = &policy.Policy{}
	_ = &emptypb.Empty{}
)

var (
	descriptorsInitialized     bool
	policyServiceDescriptor    *PolicyServiceDescriptor
	getPolicyDescriptor        *GetPolicyDescriptor
	batchGetPoliciesDescriptor *BatchGetPoliciesDescriptor
	listPoliciesDescriptor     *ListPoliciesDescriptor
	watchPolicyDescriptor      *WatchPolicyDescriptor
	watchPoliciesDescriptor    *WatchPoliciesDescriptor
	createPolicyDescriptor     *CreatePolicyDescriptor
	updatePolicyDescriptor     *UpdatePolicyDescriptor
	deletePolicyDescriptor     *DeletePolicyDescriptor
	searchPoliciesDescriptor   *SearchPoliciesDescriptor
)

type GetPolicyDescriptor struct{}

type GetPolicyDescriptorClientMsgHandle struct{}

type GetPolicyDescriptorServerMsgHandle struct{}

func (d *GetPolicyDescriptor) NewEmptyClientMsg() proto.Message {
	return &GetPolicyRequest{}
}

func (d *GetPolicyDescriptor) NewEmptyServerMsg() proto.Message {
	return &policy.Policy{}
}

func (d *GetPolicyDescriptor) IsUnary() bool {
	return true
}

func (d *GetPolicyDescriptor) IsClientStream() bool {
	return false
}

func (d *GetPolicyDescriptor) IsServerStream() bool {
	return false
}

func (d *GetPolicyDescriptor) IsCollection() bool {
	return false
}

func (d *GetPolicyDescriptor) IsPlural() bool {
	return false
}

func (d *GetPolicyDescriptor) HasResource() bool {
	return true
}

func (d *GetPolicyDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *GetPolicyDescriptor) GetVerb() string {
	return "get"
}

func (d *GetPolicyDescriptor) GetMethodName() string {
	return "GetPolicy"
}

func (d *GetPolicyDescriptor) GetFullMethodName() string {
	return "/ntt.alerting.v1.PolicyService/GetPolicy"
}

func (d *GetPolicyDescriptor) GetProtoPkgName() string {
	return "ntt.alerting.v1"
}

func (d *GetPolicyDescriptor) GetApiName() string {
	return "PolicyService"
}

func (d *GetPolicyDescriptor) GetServiceDomain() string {
	return "alerting.edgelq.com"
}

func (d *GetPolicyDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *GetPolicyDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return policyServiceDescriptor
}

func (d *GetPolicyDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return policy.GetDescriptor()
}

func (d *GetPolicyDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetPolicyDescriptorClientMsgHandle{}
}

func (d *GetPolicyDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetPolicyDescriptorServerMsgHandle{}
}

func (h *GetPolicyDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetPolicyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*GetPolicyRequest) *policy.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*policy.Name)(nil)
}

func (h *GetPolicyDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*GetPolicyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*GetPolicyRequest) []*policy.Name
	})
	if ok {
		return policy.PolicyNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetPolicyDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetPolicyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*GetPolicyRequest) *policy.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *GetPolicyDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*GetPolicyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*GetPolicyRequest) *policy.Policy
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *GetPolicyDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*GetPolicyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*GetPolicyRequest) []*policy.Policy
	})
	if ok {
		return policy.PolicyList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *GetPolicyDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*policy.Policy)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*policy.Policy) *policy.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*policy.Name)(nil)
}

func (h *GetPolicyDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*policy.Policy)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*policy.Policy) []*policy.Name
	})
	if ok {
		return policy.PolicyNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetPolicyDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*policy.Policy)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*policy.Policy) *policy.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *GetPolicyDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	return msg.(*policy.Policy)
}

func (h *GetPolicyDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*policy.Policy)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*policy.Policy) []*policy.Policy
	})
	if ok {
		return policy.PolicyList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetGetPolicyDescriptor() *GetPolicyDescriptor {
	return getPolicyDescriptor
}

type BatchGetPoliciesDescriptor struct{}

type BatchGetPoliciesDescriptorClientMsgHandle struct{}

type BatchGetPoliciesDescriptorServerMsgHandle struct{}

func (d *BatchGetPoliciesDescriptor) NewEmptyClientMsg() proto.Message {
	return &BatchGetPoliciesRequest{}
}

func (d *BatchGetPoliciesDescriptor) NewEmptyServerMsg() proto.Message {
	return &BatchGetPoliciesResponse{}
}

func (d *BatchGetPoliciesDescriptor) IsUnary() bool {
	return true
}

func (d *BatchGetPoliciesDescriptor) IsClientStream() bool {
	return false
}

func (d *BatchGetPoliciesDescriptor) IsServerStream() bool {
	return false
}

func (d *BatchGetPoliciesDescriptor) IsCollection() bool {
	return false
}

func (d *BatchGetPoliciesDescriptor) IsPlural() bool {
	return true
}

func (d *BatchGetPoliciesDescriptor) HasResource() bool {
	return true
}

func (d *BatchGetPoliciesDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *BatchGetPoliciesDescriptor) GetVerb() string {
	return "batchGet"
}

func (d *BatchGetPoliciesDescriptor) GetMethodName() string {
	return "BatchGetPolicies"
}

func (d *BatchGetPoliciesDescriptor) GetFullMethodName() string {
	return "/ntt.alerting.v1.PolicyService/BatchGetPolicies"
}

func (d *BatchGetPoliciesDescriptor) GetProtoPkgName() string {
	return "ntt.alerting.v1"
}

func (d *BatchGetPoliciesDescriptor) GetApiName() string {
	return "PolicyService"
}

func (d *BatchGetPoliciesDescriptor) GetServiceDomain() string {
	return "alerting.edgelq.com"
}

func (d *BatchGetPoliciesDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *BatchGetPoliciesDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return policyServiceDescriptor
}

func (d *BatchGetPoliciesDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return policy.GetDescriptor()
}

func (d *BatchGetPoliciesDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetPoliciesDescriptorClientMsgHandle{}
}

func (d *BatchGetPoliciesDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetPoliciesDescriptorServerMsgHandle{}
}

func (h *BatchGetPoliciesDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetPoliciesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetPoliciesRequest) *policy.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetPoliciesDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetPoliciesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetPoliciesRequest) []*policy.Name
	})
	if ok {
		return policy.PolicyNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if names := typedMsg.GetNames(); len(names) > 0 {
			return policy.PolicyNameList(names)
		}
	}
	return (policy.PolicyNameList)(nil)
}

func (h *BatchGetPoliciesDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetPoliciesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*BatchGetPoliciesRequest) *policy.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *BatchGetPoliciesDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*BatchGetPoliciesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*BatchGetPoliciesRequest) *policy.Policy
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *BatchGetPoliciesDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*BatchGetPoliciesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*BatchGetPoliciesRequest) []*policy.Policy
	})
	if ok {
		return policy.PolicyList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *BatchGetPoliciesDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetPoliciesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetPoliciesResponse) *policy.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetPoliciesDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetPoliciesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetPoliciesResponse) []*policy.Name
	})
	if ok {
		return policy.PolicyNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetPolicies(); len(resources) > 0 {
			list := make(policy.PolicyNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (policy.PolicyNameList)(nil)
}

func (h *BatchGetPoliciesDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetPoliciesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*BatchGetPoliciesResponse) *policy.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *BatchGetPoliciesDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*BatchGetPoliciesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*BatchGetPoliciesResponse) *policy.Policy
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *BatchGetPoliciesDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*BatchGetPoliciesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*BatchGetPoliciesResponse) []*policy.Policy
	})
	if ok {
		return policy.PolicyList(override.OverrideExtractResourceBodies(typedMsg))
	}
	{
		if resources := typedMsg.GetPolicies(); len(resources) > 0 {
			return policy.PolicyList(resources)
		}
	}
	return (policy.PolicyList)(nil)
}

func GetBatchGetPoliciesDescriptor() *BatchGetPoliciesDescriptor {
	return batchGetPoliciesDescriptor
}

type ListPoliciesDescriptor struct{}

type ListPoliciesDescriptorClientMsgHandle struct{}

type ListPoliciesDescriptorServerMsgHandle struct{}

func (d *ListPoliciesDescriptor) NewEmptyClientMsg() proto.Message {
	return &ListPoliciesRequest{}
}

func (d *ListPoliciesDescriptor) NewEmptyServerMsg() proto.Message {
	return &ListPoliciesResponse{}
}

func (d *ListPoliciesDescriptor) IsUnary() bool {
	return true
}

func (d *ListPoliciesDescriptor) IsClientStream() bool {
	return false
}

func (d *ListPoliciesDescriptor) IsServerStream() bool {
	return false
}

func (d *ListPoliciesDescriptor) IsCollection() bool {
	return true
}

func (d *ListPoliciesDescriptor) IsPlural() bool {
	return true
}

func (d *ListPoliciesDescriptor) HasResource() bool {
	return true
}

func (d *ListPoliciesDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ListPoliciesDescriptor) GetVerb() string {
	return "list"
}

func (d *ListPoliciesDescriptor) GetMethodName() string {
	return "ListPolicies"
}

func (d *ListPoliciesDescriptor) GetFullMethodName() string {
	return "/ntt.alerting.v1.PolicyService/ListPolicies"
}

func (d *ListPoliciesDescriptor) GetProtoPkgName() string {
	return "ntt.alerting.v1"
}

func (d *ListPoliciesDescriptor) GetApiName() string {
	return "PolicyService"
}

func (d *ListPoliciesDescriptor) GetServiceDomain() string {
	return "alerting.edgelq.com"
}

func (d *ListPoliciesDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *ListPoliciesDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return policyServiceDescriptor
}

func (d *ListPoliciesDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return policy.GetDescriptor()
}

func (d *ListPoliciesDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListPoliciesDescriptorClientMsgHandle{}
}

func (d *ListPoliciesDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListPoliciesDescriptorServerMsgHandle{}
}

func (h *ListPoliciesDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListPoliciesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListPoliciesRequest) *policy.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListPoliciesDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListPoliciesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListPoliciesRequest) []*policy.Name
	})
	if ok {
		return policy.PolicyNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *ListPoliciesDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListPoliciesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ListPoliciesRequest) *policy.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*policy.ParentName)(nil)
}

func (h *ListPoliciesDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*ListPoliciesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*ListPoliciesRequest) *policy.Policy
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *ListPoliciesDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*ListPoliciesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*ListPoliciesRequest) []*policy.Policy
	})
	if ok {
		return policy.PolicyList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *ListPoliciesDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListPoliciesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListPoliciesResponse) *policy.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListPoliciesDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListPoliciesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListPoliciesResponse) []*policy.Name
	})
	if ok {
		return policy.PolicyNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetPolicies(); len(resources) > 0 {
			list := make(policy.PolicyNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (policy.PolicyNameList)(nil)
}

func (h *ListPoliciesDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListPoliciesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ListPoliciesResponse) *policy.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *ListPoliciesDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*ListPoliciesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*ListPoliciesResponse) *policy.Policy
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *ListPoliciesDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*ListPoliciesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*ListPoliciesResponse) []*policy.Policy
	})
	if ok {
		return policy.PolicyList(override.OverrideExtractResourceBodies(typedMsg))
	}
	{
		if resources := typedMsg.GetPolicies(); len(resources) > 0 {
			return policy.PolicyList(resources)
		}
	}
	return (policy.PolicyList)(nil)
}

func GetListPoliciesDescriptor() *ListPoliciesDescriptor {
	return listPoliciesDescriptor
}

type WatchPolicyDescriptor struct{}

type WatchPolicyDescriptorClientMsgHandle struct{}

type WatchPolicyDescriptorServerMsgHandle struct{}

func (d *WatchPolicyDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchPolicyRequest{}
}

func (d *WatchPolicyDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchPolicyResponse{}
}

func (d *WatchPolicyDescriptor) IsUnary() bool {
	return false
}

func (d *WatchPolicyDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchPolicyDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchPolicyDescriptor) IsCollection() bool {
	return false
}

func (d *WatchPolicyDescriptor) IsPlural() bool {
	return false
}

func (d *WatchPolicyDescriptor) HasResource() bool {
	return true
}

func (d *WatchPolicyDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchPolicyDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchPolicyDescriptor) GetMethodName() string {
	return "WatchPolicy"
}

func (d *WatchPolicyDescriptor) GetFullMethodName() string {
	return "/ntt.alerting.v1.PolicyService/WatchPolicy"
}

func (d *WatchPolicyDescriptor) GetProtoPkgName() string {
	return "ntt.alerting.v1"
}

func (d *WatchPolicyDescriptor) GetApiName() string {
	return "PolicyService"
}

func (d *WatchPolicyDescriptor) GetServiceDomain() string {
	return "alerting.edgelq.com"
}

func (d *WatchPolicyDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *WatchPolicyDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return policyServiceDescriptor
}

func (d *WatchPolicyDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return policy.GetDescriptor()
}

func (d *WatchPolicyDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchPolicyDescriptorClientMsgHandle{}
}

func (d *WatchPolicyDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchPolicyDescriptorServerMsgHandle{}
}

func (h *WatchPolicyDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchPolicyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchPolicyRequest) *policy.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*policy.Name)(nil)
}

func (h *WatchPolicyDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchPolicyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchPolicyRequest) []*policy.Name
	})
	if ok {
		return policy.PolicyNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchPolicyDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchPolicyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchPolicyRequest) *policy.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchPolicyDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchPolicyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchPolicyRequest) *policy.Policy
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *WatchPolicyDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchPolicyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchPolicyRequest) []*policy.Policy
	})
	if ok {
		return policy.PolicyList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *WatchPolicyDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchPolicyResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchPolicyResponse) *policy.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if resChange := typedMsg.GetChange(); resChange != nil {
			switch tResChange := resChange.ChangeType.(type) {
			case *policy.PolicyChange_Added_:
				return tResChange.Added.GetPolicy().GetName()
			case *policy.PolicyChange_Modified_:
				return tResChange.Modified.GetName()
			case *policy.PolicyChange_Removed_:
				return tResChange.Removed.GetName()
			case *policy.PolicyChange_Current_:
				return tResChange.Current.GetPolicy().GetName()
			}
		}
	}
	return (*policy.Name)(nil)
}

func (h *WatchPolicyDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchPolicyResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchPolicyResponse) []*policy.Name
	})
	if ok {
		return policy.PolicyNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchPolicyDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchPolicyResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchPolicyResponse) *policy.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchPolicyDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchPolicyResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchPolicyResponse) *policy.Policy
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	{
		if resChange := typedMsg.GetChange(); resChange != nil {
			switch tResChange := resChange.ChangeType.(type) {
			case *policy.PolicyChange_Added_:
				return tResChange.Added.GetPolicy()
			case *policy.PolicyChange_Modified_:
				return tResChange.Modified.GetPolicy()
			case *policy.PolicyChange_Current_:
				return tResChange.Current.GetPolicy()
			}
		}
	}
	return (*policy.Policy)(nil)
}

func (h *WatchPolicyDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchPolicyResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchPolicyResponse) []*policy.Policy
	})
	if ok {
		return policy.PolicyList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetWatchPolicyDescriptor() *WatchPolicyDescriptor {
	return watchPolicyDescriptor
}

type WatchPoliciesDescriptor struct{}

type WatchPoliciesDescriptorClientMsgHandle struct{}

type WatchPoliciesDescriptorServerMsgHandle struct{}

func (d *WatchPoliciesDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchPoliciesRequest{}
}

func (d *WatchPoliciesDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchPoliciesResponse{}
}

func (d *WatchPoliciesDescriptor) IsUnary() bool {
	return false
}

func (d *WatchPoliciesDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchPoliciesDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchPoliciesDescriptor) IsCollection() bool {
	return true
}

func (d *WatchPoliciesDescriptor) IsPlural() bool {
	return true
}

func (d *WatchPoliciesDescriptor) HasResource() bool {
	return true
}

func (d *WatchPoliciesDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchPoliciesDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchPoliciesDescriptor) GetMethodName() string {
	return "WatchPolicies"
}

func (d *WatchPoliciesDescriptor) GetFullMethodName() string {
	return "/ntt.alerting.v1.PolicyService/WatchPolicies"
}

func (d *WatchPoliciesDescriptor) GetProtoPkgName() string {
	return "ntt.alerting.v1"
}

func (d *WatchPoliciesDescriptor) GetApiName() string {
	return "PolicyService"
}

func (d *WatchPoliciesDescriptor) GetServiceDomain() string {
	return "alerting.edgelq.com"
}

func (d *WatchPoliciesDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *WatchPoliciesDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return policyServiceDescriptor
}

func (d *WatchPoliciesDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return policy.GetDescriptor()
}

func (d *WatchPoliciesDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchPoliciesDescriptorClientMsgHandle{}
}

func (d *WatchPoliciesDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchPoliciesDescriptorServerMsgHandle{}
}

func (h *WatchPoliciesDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchPoliciesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchPoliciesRequest) *policy.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchPoliciesDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchPoliciesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchPoliciesRequest) []*policy.Name
	})
	if ok {
		return policy.PolicyNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchPoliciesDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchPoliciesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchPoliciesRequest) *policy.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*policy.ParentName)(nil)
}

func (h *WatchPoliciesDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchPoliciesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchPoliciesRequest) *policy.Policy
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *WatchPoliciesDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchPoliciesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchPoliciesRequest) []*policy.Policy
	})
	if ok {
		return policy.PolicyList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *WatchPoliciesDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchPoliciesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchPoliciesResponse) *policy.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchPoliciesDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchPoliciesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchPoliciesResponse) []*policy.Name
	})
	if ok {
		return policy.PolicyNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resChanges := typedMsg.GetPolicyChanges(); len(resChanges) > 0 {
			list := make(policy.PolicyNameList, 0, len(resChanges))
			for _, resChange := range resChanges {
				switch tResChange := resChange.ChangeType.(type) {
				case *policy.PolicyChange_Added_:
					list = append(list, tResChange.Added.GetPolicy().GetName())
				case *policy.PolicyChange_Modified_:
					list = append(list, tResChange.Modified.GetName())
				case *policy.PolicyChange_Removed_:
					list = append(list, tResChange.Removed.GetName())
				case *policy.PolicyChange_Current_:
					list = append(list, tResChange.Current.GetPolicy().GetName())
				}
			}
			return list
		}
	}
	return (policy.PolicyNameList)(nil)
}

func (h *WatchPoliciesDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchPoliciesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchPoliciesResponse) *policy.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchPoliciesDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchPoliciesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchPoliciesResponse) *policy.Policy
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *WatchPoliciesDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchPoliciesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchPoliciesResponse) []*policy.Policy
	})
	if ok {
		return policy.PolicyList(override.OverrideExtractResourceBodies(typedMsg))
	}
	{
		if resChanges := typedMsg.GetPolicyChanges(); len(resChanges) > 0 {
			list := make(policy.PolicyList, 0, len(resChanges))
			for _, resChange := range resChanges {
				switch tResChange := resChange.ChangeType.(type) {
				case *policy.PolicyChange_Added_:
					list = append(list, tResChange.Added.GetPolicy())
				case *policy.PolicyChange_Modified_:
					list = append(list, tResChange.Modified.GetPolicy())
				case *policy.PolicyChange_Current_:
					list = append(list, tResChange.Current.GetPolicy())
				}
			}
			return list
		}
	}
	return (policy.PolicyList)(nil)
}

func GetWatchPoliciesDescriptor() *WatchPoliciesDescriptor {
	return watchPoliciesDescriptor
}

type CreatePolicyDescriptor struct{}

type CreatePolicyDescriptorClientMsgHandle struct{}

type CreatePolicyDescriptorServerMsgHandle struct{}

func (d *CreatePolicyDescriptor) NewEmptyClientMsg() proto.Message {
	return &CreatePolicyRequest{}
}

func (d *CreatePolicyDescriptor) NewEmptyServerMsg() proto.Message {
	return &policy.Policy{}
}

func (d *CreatePolicyDescriptor) IsUnary() bool {
	return true
}

func (d *CreatePolicyDescriptor) IsClientStream() bool {
	return false
}

func (d *CreatePolicyDescriptor) IsServerStream() bool {
	return false
}

func (d *CreatePolicyDescriptor) IsCollection() bool {
	return true
}

func (d *CreatePolicyDescriptor) IsPlural() bool {
	return false
}

func (d *CreatePolicyDescriptor) HasResource() bool {
	return true
}

func (d *CreatePolicyDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *CreatePolicyDescriptor) GetVerb() string {
	return "create"
}

func (d *CreatePolicyDescriptor) GetMethodName() string {
	return "CreatePolicy"
}

func (d *CreatePolicyDescriptor) GetFullMethodName() string {
	return "/ntt.alerting.v1.PolicyService/CreatePolicy"
}

func (d *CreatePolicyDescriptor) GetProtoPkgName() string {
	return "ntt.alerting.v1"
}

func (d *CreatePolicyDescriptor) GetApiName() string {
	return "PolicyService"
}

func (d *CreatePolicyDescriptor) GetServiceDomain() string {
	return "alerting.edgelq.com"
}

func (d *CreatePolicyDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *CreatePolicyDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return policyServiceDescriptor
}

func (d *CreatePolicyDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return policy.GetDescriptor()
}

func (d *CreatePolicyDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreatePolicyDescriptorClientMsgHandle{}
}

func (d *CreatePolicyDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreatePolicyDescriptorServerMsgHandle{}
}

func (h *CreatePolicyDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreatePolicyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*CreatePolicyRequest) *policy.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetPolicy()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*policy.Name)(nil)
}

func (h *CreatePolicyDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*CreatePolicyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*CreatePolicyRequest) []*policy.Name
	})
	if ok {
		return policy.PolicyNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreatePolicyDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreatePolicyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*CreatePolicyRequest) *policy.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*policy.ParentName)(nil)
}

func (h *CreatePolicyDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*CreatePolicyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*CreatePolicyRequest) *policy.Policy
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	{
		return typedMsg.GetPolicy()
	}
	return (*policy.Policy)(nil)
}

func (h *CreatePolicyDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*CreatePolicyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*CreatePolicyRequest) []*policy.Policy
	})
	if ok {
		return policy.PolicyList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *CreatePolicyDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*policy.Policy)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*policy.Policy) *policy.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*policy.Name)(nil)
}

func (h *CreatePolicyDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*policy.Policy)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*policy.Policy) []*policy.Name
	})
	if ok {
		return policy.PolicyNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreatePolicyDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*policy.Policy)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*policy.Policy) *policy.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *CreatePolicyDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	return msg.(*policy.Policy)
}

func (h *CreatePolicyDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*policy.Policy)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*policy.Policy) []*policy.Policy
	})
	if ok {
		return policy.PolicyList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetCreatePolicyDescriptor() *CreatePolicyDescriptor {
	return createPolicyDescriptor
}

type UpdatePolicyDescriptor struct{}

type UpdatePolicyDescriptorClientMsgHandle struct{}

type UpdatePolicyDescriptorServerMsgHandle struct{}

func (d *UpdatePolicyDescriptor) NewEmptyClientMsg() proto.Message {
	return &UpdatePolicyRequest{}
}

func (d *UpdatePolicyDescriptor) NewEmptyServerMsg() proto.Message {
	return &policy.Policy{}
}

func (d *UpdatePolicyDescriptor) IsUnary() bool {
	return true
}

func (d *UpdatePolicyDescriptor) IsClientStream() bool {
	return false
}

func (d *UpdatePolicyDescriptor) IsServerStream() bool {
	return false
}

func (d *UpdatePolicyDescriptor) IsCollection() bool {
	return false
}

func (d *UpdatePolicyDescriptor) IsPlural() bool {
	return false
}

func (d *UpdatePolicyDescriptor) HasResource() bool {
	return true
}

func (d *UpdatePolicyDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *UpdatePolicyDescriptor) GetVerb() string {
	return "update"
}

func (d *UpdatePolicyDescriptor) GetMethodName() string {
	return "UpdatePolicy"
}

func (d *UpdatePolicyDescriptor) GetFullMethodName() string {
	return "/ntt.alerting.v1.PolicyService/UpdatePolicy"
}

func (d *UpdatePolicyDescriptor) GetProtoPkgName() string {
	return "ntt.alerting.v1"
}

func (d *UpdatePolicyDescriptor) GetApiName() string {
	return "PolicyService"
}

func (d *UpdatePolicyDescriptor) GetServiceDomain() string {
	return "alerting.edgelq.com"
}

func (d *UpdatePolicyDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *UpdatePolicyDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return policyServiceDescriptor
}

func (d *UpdatePolicyDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return policy.GetDescriptor()
}

func (d *UpdatePolicyDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdatePolicyDescriptorClientMsgHandle{}
}

func (d *UpdatePolicyDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdatePolicyDescriptorServerMsgHandle{}
}

func (h *UpdatePolicyDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdatePolicyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*UpdatePolicyRequest) *policy.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetPolicy()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*policy.Name)(nil)
}

func (h *UpdatePolicyDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*UpdatePolicyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*UpdatePolicyRequest) []*policy.Name
	})
	if ok {
		return policy.PolicyNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdatePolicyDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdatePolicyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*UpdatePolicyRequest) *policy.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *UpdatePolicyDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*UpdatePolicyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*UpdatePolicyRequest) *policy.Policy
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	{
		return typedMsg.GetPolicy()
	}
	return (*policy.Policy)(nil)
}

func (h *UpdatePolicyDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*UpdatePolicyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*UpdatePolicyRequest) []*policy.Policy
	})
	if ok {
		return policy.PolicyList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *UpdatePolicyDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*policy.Policy)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*policy.Policy) *policy.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*policy.Name)(nil)
}

func (h *UpdatePolicyDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*policy.Policy)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*policy.Policy) []*policy.Name
	})
	if ok {
		return policy.PolicyNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdatePolicyDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*policy.Policy)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*policy.Policy) *policy.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *UpdatePolicyDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	return msg.(*policy.Policy)
}

func (h *UpdatePolicyDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*policy.Policy)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*policy.Policy) []*policy.Policy
	})
	if ok {
		return policy.PolicyList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetUpdatePolicyDescriptor() *UpdatePolicyDescriptor {
	return updatePolicyDescriptor
}

type DeletePolicyDescriptor struct{}

type DeletePolicyDescriptorClientMsgHandle struct{}

type DeletePolicyDescriptorServerMsgHandle struct{}

func (d *DeletePolicyDescriptor) NewEmptyClientMsg() proto.Message {
	return &DeletePolicyRequest{}
}

func (d *DeletePolicyDescriptor) NewEmptyServerMsg() proto.Message {
	return &emptypb.Empty{}
}

func (d *DeletePolicyDescriptor) IsUnary() bool {
	return true
}

func (d *DeletePolicyDescriptor) IsClientStream() bool {
	return false
}

func (d *DeletePolicyDescriptor) IsServerStream() bool {
	return false
}

func (d *DeletePolicyDescriptor) IsCollection() bool {
	return false
}

func (d *DeletePolicyDescriptor) IsPlural() bool {
	return false
}

func (d *DeletePolicyDescriptor) HasResource() bool {
	return true
}

func (d *DeletePolicyDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *DeletePolicyDescriptor) GetVerb() string {
	return "delete"
}

func (d *DeletePolicyDescriptor) GetMethodName() string {
	return "DeletePolicy"
}

func (d *DeletePolicyDescriptor) GetFullMethodName() string {
	return "/ntt.alerting.v1.PolicyService/DeletePolicy"
}

func (d *DeletePolicyDescriptor) GetProtoPkgName() string {
	return "ntt.alerting.v1"
}

func (d *DeletePolicyDescriptor) GetApiName() string {
	return "PolicyService"
}

func (d *DeletePolicyDescriptor) GetServiceDomain() string {
	return "alerting.edgelq.com"
}

func (d *DeletePolicyDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *DeletePolicyDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return policyServiceDescriptor
}

func (d *DeletePolicyDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return policy.GetDescriptor()
}

func (d *DeletePolicyDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeletePolicyDescriptorClientMsgHandle{}
}

func (d *DeletePolicyDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeletePolicyDescriptorServerMsgHandle{}
}

func (h *DeletePolicyDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeletePolicyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*DeletePolicyRequest) *policy.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*policy.Name)(nil)
}

func (h *DeletePolicyDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*DeletePolicyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*DeletePolicyRequest) []*policy.Name
	})
	if ok {
		return policy.PolicyNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeletePolicyDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeletePolicyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*DeletePolicyRequest) *policy.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *DeletePolicyDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*DeletePolicyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*DeletePolicyRequest) *policy.Policy
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *DeletePolicyDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*DeletePolicyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*DeletePolicyRequest) []*policy.Policy
	})
	if ok {
		return policy.PolicyList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *DeletePolicyDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*emptypb.Empty) *policy.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *DeletePolicyDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*emptypb.Empty) []*policy.Name
	})
	if ok {
		return policy.PolicyNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeletePolicyDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*emptypb.Empty) *policy.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *DeletePolicyDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*emptypb.Empty) *policy.Policy
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *DeletePolicyDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*emptypb.Empty) []*policy.Policy
	})
	if ok {
		return policy.PolicyList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetDeletePolicyDescriptor() *DeletePolicyDescriptor {
	return deletePolicyDescriptor
}

type SearchPoliciesDescriptor struct{}

type SearchPoliciesDescriptorClientMsgHandle struct{}

type SearchPoliciesDescriptorServerMsgHandle struct{}

func (d *SearchPoliciesDescriptor) NewEmptyClientMsg() proto.Message {
	return &SearchPoliciesRequest{}
}

func (d *SearchPoliciesDescriptor) NewEmptyServerMsg() proto.Message {
	return &SearchPoliciesResponse{}
}

func (d *SearchPoliciesDescriptor) IsUnary() bool {
	return true
}

func (d *SearchPoliciesDescriptor) IsClientStream() bool {
	return false
}

func (d *SearchPoliciesDescriptor) IsServerStream() bool {
	return false
}

func (d *SearchPoliciesDescriptor) IsCollection() bool {
	return true
}

func (d *SearchPoliciesDescriptor) IsPlural() bool {
	return true
}

func (d *SearchPoliciesDescriptor) HasResource() bool {
	return true
}

func (d *SearchPoliciesDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *SearchPoliciesDescriptor) GetVerb() string {
	return "search"
}

func (d *SearchPoliciesDescriptor) GetMethodName() string {
	return "SearchPolicies"
}

func (d *SearchPoliciesDescriptor) GetFullMethodName() string {
	return "/ntt.alerting.v1.PolicyService/SearchPolicies"
}

func (d *SearchPoliciesDescriptor) GetProtoPkgName() string {
	return "ntt.alerting.v1"
}

func (d *SearchPoliciesDescriptor) GetApiName() string {
	return "PolicyService"
}

func (d *SearchPoliciesDescriptor) GetServiceDomain() string {
	return "alerting.edgelq.com"
}

func (d *SearchPoliciesDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *SearchPoliciesDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return policyServiceDescriptor
}

func (d *SearchPoliciesDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return policy.GetDescriptor()
}

func (d *SearchPoliciesDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &SearchPoliciesDescriptorClientMsgHandle{}
}

func (d *SearchPoliciesDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &SearchPoliciesDescriptorServerMsgHandle{}
}

func (h *SearchPoliciesDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*SearchPoliciesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*SearchPoliciesRequest) *policy.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *SearchPoliciesDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*SearchPoliciesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*SearchPoliciesRequest) []*policy.Name
	})
	if ok {
		return policy.PolicyNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *SearchPoliciesDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*SearchPoliciesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*SearchPoliciesRequest) *policy.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*policy.ParentName)(nil)
}

func (h *SearchPoliciesDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*SearchPoliciesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*SearchPoliciesRequest) *policy.Policy
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *SearchPoliciesDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*SearchPoliciesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*SearchPoliciesRequest) []*policy.Policy
	})
	if ok {
		return policy.PolicyList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *SearchPoliciesDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*SearchPoliciesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*SearchPoliciesResponse) *policy.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *SearchPoliciesDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*SearchPoliciesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*SearchPoliciesResponse) []*policy.Name
	})
	if ok {
		return policy.PolicyNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetPolicies(); len(resources) > 0 {
			list := make(policy.PolicyNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (policy.PolicyNameList)(nil)
}

func (h *SearchPoliciesDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*SearchPoliciesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*SearchPoliciesResponse) *policy.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *SearchPoliciesDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*SearchPoliciesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*SearchPoliciesResponse) *policy.Policy
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *SearchPoliciesDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*SearchPoliciesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*SearchPoliciesResponse) []*policy.Policy
	})
	if ok {
		return policy.PolicyList(override.OverrideExtractResourceBodies(typedMsg))
	}
	{
		if resources := typedMsg.GetPolicies(); len(resources) > 0 {
			return policy.PolicyList(resources)
		}
	}
	return (policy.PolicyList)(nil)
}

func GetSearchPoliciesDescriptor() *SearchPoliciesDescriptor {
	return searchPoliciesDescriptor
}

type PolicyServiceDescriptor struct{}

func (d *PolicyServiceDescriptor) AllMethodDescriptors() []gotenclient.MethodDescriptor {
	return []gotenclient.MethodDescriptor{
		getPolicyDescriptor,
		batchGetPoliciesDescriptor,
		listPoliciesDescriptor,
		watchPolicyDescriptor,
		watchPoliciesDescriptor,
		createPolicyDescriptor,
		updatePolicyDescriptor,
		deletePolicyDescriptor,
		searchPoliciesDescriptor,
	}
}

func (d *PolicyServiceDescriptor) GetFullAPIName() string {
	return "/ntt.alerting.v1.PolicyService"
}

func (d *PolicyServiceDescriptor) GetProtoPkgName() string {
	return "ntt.alerting.v1"
}

func (d *PolicyServiceDescriptor) GetApiName() string {
	return "PolicyService"
}

func (d *PolicyServiceDescriptor) GetServiceDomain() string {
	return "alerting.edgelq.com"
}

func (d *PolicyServiceDescriptor) GetServiceVersion() string {
	return "v1"
}

func GetPolicyServiceDescriptor() *PolicyServiceDescriptor {
	return policyServiceDescriptor
}

func initDescriptors() {
	policyServiceDescriptor = &PolicyServiceDescriptor{}
	getPolicyDescriptor = &GetPolicyDescriptor{}
	batchGetPoliciesDescriptor = &BatchGetPoliciesDescriptor{}
	listPoliciesDescriptor = &ListPoliciesDescriptor{}
	watchPolicyDescriptor = &WatchPolicyDescriptor{}
	watchPoliciesDescriptor = &WatchPoliciesDescriptor{}
	createPolicyDescriptor = &CreatePolicyDescriptor{}
	updatePolicyDescriptor = &UpdatePolicyDescriptor{}
	deletePolicyDescriptor = &DeletePolicyDescriptor{}
	searchPoliciesDescriptor = &SearchPoliciesDescriptor{}
	gotenclient.GetRegistry().RegisterApiDescriptor(policyServiceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(getPolicyDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(batchGetPoliciesDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(listPoliciesDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchPolicyDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchPoliciesDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(createPolicyDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(updatePolicyDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(deletePolicyDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(searchPoliciesDescriptor)
}

func init() {
	if !descriptorsInitialized {
		initDescriptors()
		descriptorsInitialized = true
	}
}
