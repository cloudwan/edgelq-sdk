// Code generated by protoc-gen-goten-client
// API: PolicyTemplateService
// DO NOT EDIT!!!

package policy_template_client

import (
	"context"

	"google.golang.org/grpc"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	policy_template "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/policy_template"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = protoimpl.DescBuilder{}
	_ = new(context.Context)
	_ = grpc.ClientConn{}
)

// make sure we're using proto imports
var (
	_ = &policy_template.PolicyTemplate{}
	_ = &emptypb.Empty{}
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PolicyTemplateServiceClient is the client API for PolicyTemplateService.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PolicyTemplateServiceClient interface {
	GetPolicyTemplate(ctx context.Context, in *GetPolicyTemplateRequest, opts ...grpc.CallOption) (*policy_template.PolicyTemplate, error)
	BatchGetPolicyTemplates(ctx context.Context, in *BatchGetPolicyTemplatesRequest, opts ...grpc.CallOption) (*BatchGetPolicyTemplatesResponse, error)
	ListPolicyTemplates(ctx context.Context, in *ListPolicyTemplatesRequest, opts ...grpc.CallOption) (*ListPolicyTemplatesResponse, error)
	WatchPolicyTemplate(ctx context.Context, in *WatchPolicyTemplateRequest, opts ...grpc.CallOption) (WatchPolicyTemplateClientStream, error)
	WatchPolicyTemplates(ctx context.Context, in *WatchPolicyTemplatesRequest, opts ...grpc.CallOption) (WatchPolicyTemplatesClientStream, error)
	CreatePolicyTemplate(ctx context.Context, in *CreatePolicyTemplateRequest, opts ...grpc.CallOption) (*policy_template.PolicyTemplate, error)
	UpdatePolicyTemplate(ctx context.Context, in *UpdatePolicyTemplateRequest, opts ...grpc.CallOption) (*policy_template.PolicyTemplate, error)
	DeletePolicyTemplate(ctx context.Context, in *DeletePolicyTemplateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type client struct {
	cc grpc.ClientConnInterface
}

func NewPolicyTemplateServiceClient(cc grpc.ClientConnInterface) PolicyTemplateServiceClient {
	return &client{cc}
}

func (c *client) GetPolicyTemplate(ctx context.Context, in *GetPolicyTemplateRequest, opts ...grpc.CallOption) (*policy_template.PolicyTemplate, error) {
	out := new(policy_template.PolicyTemplate)
	err := c.cc.Invoke(ctx, "/ntt.alerting.v1.PolicyTemplateService/GetPolicyTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) BatchGetPolicyTemplates(ctx context.Context, in *BatchGetPolicyTemplatesRequest, opts ...grpc.CallOption) (*BatchGetPolicyTemplatesResponse, error) {
	out := new(BatchGetPolicyTemplatesResponse)
	err := c.cc.Invoke(ctx, "/ntt.alerting.v1.PolicyTemplateService/BatchGetPolicyTemplates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListPolicyTemplates(ctx context.Context, in *ListPolicyTemplatesRequest, opts ...grpc.CallOption) (*ListPolicyTemplatesResponse, error) {
	out := new(ListPolicyTemplatesResponse)
	err := c.cc.Invoke(ctx, "/ntt.alerting.v1.PolicyTemplateService/ListPolicyTemplates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) WatchPolicyTemplate(ctx context.Context, in *WatchPolicyTemplateRequest, opts ...grpc.CallOption) (WatchPolicyTemplateClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchPolicyTemplate",
			ServerStreams: true,
		},
		"/ntt.alerting.v1.PolicyTemplateService/WatchPolicyTemplate", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchPolicyTemplateWatchPolicyTemplateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchPolicyTemplateClientStream interface {
	Recv() (*WatchPolicyTemplateResponse, error)
	grpc.ClientStream
}

type watchPolicyTemplateWatchPolicyTemplateClient struct {
	grpc.ClientStream
}

func (x *watchPolicyTemplateWatchPolicyTemplateClient) Recv() (*WatchPolicyTemplateResponse, error) {
	m := new(WatchPolicyTemplateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) WatchPolicyTemplates(ctx context.Context, in *WatchPolicyTemplatesRequest, opts ...grpc.CallOption) (WatchPolicyTemplatesClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchPolicyTemplates",
			ServerStreams: true,
		},
		"/ntt.alerting.v1.PolicyTemplateService/WatchPolicyTemplates", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchPolicyTemplatesWatchPolicyTemplatesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchPolicyTemplatesClientStream interface {
	Recv() (*WatchPolicyTemplatesResponse, error)
	grpc.ClientStream
}

type watchPolicyTemplatesWatchPolicyTemplatesClient struct {
	grpc.ClientStream
}

func (x *watchPolicyTemplatesWatchPolicyTemplatesClient) Recv() (*WatchPolicyTemplatesResponse, error) {
	m := new(WatchPolicyTemplatesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) CreatePolicyTemplate(ctx context.Context, in *CreatePolicyTemplateRequest, opts ...grpc.CallOption) (*policy_template.PolicyTemplate, error) {
	out := new(policy_template.PolicyTemplate)
	err := c.cc.Invoke(ctx, "/ntt.alerting.v1.PolicyTemplateService/CreatePolicyTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdatePolicyTemplate(ctx context.Context, in *UpdatePolicyTemplateRequest, opts ...grpc.CallOption) (*policy_template.PolicyTemplate, error) {
	out := new(policy_template.PolicyTemplate)
	err := c.cc.Invoke(ctx, "/ntt.alerting.v1.PolicyTemplateService/UpdatePolicyTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeletePolicyTemplate(ctx context.Context, in *DeletePolicyTemplateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ntt.alerting.v1.PolicyTemplateService/DeletePolicyTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
