// Code generated by protoc-gen-goten-client
// API: PolicyTemplateService
// DO NOT EDIT!!!

package policy_template_client

import (
	"google.golang.org/protobuf/proto"

	gotenclient "github.com/cloudwan/goten-sdk/runtime/client"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	policy_template "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/policy_template"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = new(proto.Message)
	_ = new(gotenclient.MethodDescriptor)
	_ = gotenresource.WildcardId
)

// make sure we're using proto imports
var (
	_ = &policy_template.PolicyTemplate{}
	_ = &emptypb.Empty{}
)

var (
	descriptorsInitialized            bool
	policyTemplateServiceDescriptor   *PolicyTemplateServiceDescriptor
	getPolicyTemplateDescriptor       *GetPolicyTemplateDescriptor
	batchGetPolicyTemplatesDescriptor *BatchGetPolicyTemplatesDescriptor
	listPolicyTemplatesDescriptor     *ListPolicyTemplatesDescriptor
	watchPolicyTemplateDescriptor     *WatchPolicyTemplateDescriptor
	watchPolicyTemplatesDescriptor    *WatchPolicyTemplatesDescriptor
	createPolicyTemplateDescriptor    *CreatePolicyTemplateDescriptor
	updatePolicyTemplateDescriptor    *UpdatePolicyTemplateDescriptor
	deletePolicyTemplateDescriptor    *DeletePolicyTemplateDescriptor
)

type GetPolicyTemplateDescriptor struct{}

type GetPolicyTemplateDescriptorClientMsgHandle struct{}

type GetPolicyTemplateDescriptorServerMsgHandle struct{}

func (d *GetPolicyTemplateDescriptor) NewEmptyClientMsg() proto.Message {
	return &GetPolicyTemplateRequest{}
}

func (d *GetPolicyTemplateDescriptor) NewEmptyServerMsg() proto.Message {
	return &policy_template.PolicyTemplate{}
}

func (d *GetPolicyTemplateDescriptor) IsUnary() bool {
	return true
}

func (d *GetPolicyTemplateDescriptor) IsClientStream() bool {
	return false
}

func (d *GetPolicyTemplateDescriptor) IsServerStream() bool {
	return false
}

func (d *GetPolicyTemplateDescriptor) IsCollection() bool {
	return false
}

func (d *GetPolicyTemplateDescriptor) IsPlural() bool {
	return false
}

func (d *GetPolicyTemplateDescriptor) HasResource() bool {
	return true
}

func (d *GetPolicyTemplateDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *GetPolicyTemplateDescriptor) GetVerb() string {
	return "get"
}

func (d *GetPolicyTemplateDescriptor) GetMethodName() string {
	return "GetPolicyTemplate"
}

func (d *GetPolicyTemplateDescriptor) GetFullMethodName() string {
	return "/ntt.alerting.v1.PolicyTemplateService/GetPolicyTemplate"
}

func (d *GetPolicyTemplateDescriptor) GetProtoPkgName() string {
	return "ntt.alerting.v1"
}

func (d *GetPolicyTemplateDescriptor) GetApiName() string {
	return "PolicyTemplateService"
}

func (d *GetPolicyTemplateDescriptor) GetServiceDomain() string {
	return "alerting.edgelq.com"
}

func (d *GetPolicyTemplateDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *GetPolicyTemplateDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return policyTemplateServiceDescriptor
}

func (d *GetPolicyTemplateDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return policy_template.GetDescriptor()
}

func (d *GetPolicyTemplateDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetPolicyTemplateDescriptorClientMsgHandle{}
}

func (d *GetPolicyTemplateDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetPolicyTemplateDescriptorServerMsgHandle{}
}

func (h *GetPolicyTemplateDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetPolicyTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*GetPolicyTemplateRequest) *policy_template.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*policy_template.Name)(nil)
}

func (h *GetPolicyTemplateDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*GetPolicyTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*GetPolicyTemplateRequest) []*policy_template.Name
	})
	if ok {
		return policy_template.PolicyTemplateNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetPolicyTemplateDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetPolicyTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*GetPolicyTemplateRequest) *policy_template.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *GetPolicyTemplateDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*GetPolicyTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*GetPolicyTemplateRequest) *policy_template.PolicyTemplate
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *GetPolicyTemplateDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*GetPolicyTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*GetPolicyTemplateRequest) []*policy_template.PolicyTemplate
	})
	if ok {
		return policy_template.PolicyTemplateList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *GetPolicyTemplateDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*policy_template.PolicyTemplate)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*policy_template.PolicyTemplate) *policy_template.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*policy_template.Name)(nil)
}

func (h *GetPolicyTemplateDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*policy_template.PolicyTemplate)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*policy_template.PolicyTemplate) []*policy_template.Name
	})
	if ok {
		return policy_template.PolicyTemplateNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetPolicyTemplateDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*policy_template.PolicyTemplate)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*policy_template.PolicyTemplate) *policy_template.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *GetPolicyTemplateDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	return msg.(*policy_template.PolicyTemplate)
}

func (h *GetPolicyTemplateDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*policy_template.PolicyTemplate)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*policy_template.PolicyTemplate) []*policy_template.PolicyTemplate
	})
	if ok {
		return policy_template.PolicyTemplateList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetGetPolicyTemplateDescriptor() *GetPolicyTemplateDescriptor {
	return getPolicyTemplateDescriptor
}

type BatchGetPolicyTemplatesDescriptor struct{}

type BatchGetPolicyTemplatesDescriptorClientMsgHandle struct{}

type BatchGetPolicyTemplatesDescriptorServerMsgHandle struct{}

func (d *BatchGetPolicyTemplatesDescriptor) NewEmptyClientMsg() proto.Message {
	return &BatchGetPolicyTemplatesRequest{}
}

func (d *BatchGetPolicyTemplatesDescriptor) NewEmptyServerMsg() proto.Message {
	return &BatchGetPolicyTemplatesResponse{}
}

func (d *BatchGetPolicyTemplatesDescriptor) IsUnary() bool {
	return true
}

func (d *BatchGetPolicyTemplatesDescriptor) IsClientStream() bool {
	return false
}

func (d *BatchGetPolicyTemplatesDescriptor) IsServerStream() bool {
	return false
}

func (d *BatchGetPolicyTemplatesDescriptor) IsCollection() bool {
	return false
}

func (d *BatchGetPolicyTemplatesDescriptor) IsPlural() bool {
	return true
}

func (d *BatchGetPolicyTemplatesDescriptor) HasResource() bool {
	return true
}

func (d *BatchGetPolicyTemplatesDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *BatchGetPolicyTemplatesDescriptor) GetVerb() string {
	return "batchGet"
}

func (d *BatchGetPolicyTemplatesDescriptor) GetMethodName() string {
	return "BatchGetPolicyTemplates"
}

func (d *BatchGetPolicyTemplatesDescriptor) GetFullMethodName() string {
	return "/ntt.alerting.v1.PolicyTemplateService/BatchGetPolicyTemplates"
}

func (d *BatchGetPolicyTemplatesDescriptor) GetProtoPkgName() string {
	return "ntt.alerting.v1"
}

func (d *BatchGetPolicyTemplatesDescriptor) GetApiName() string {
	return "PolicyTemplateService"
}

func (d *BatchGetPolicyTemplatesDescriptor) GetServiceDomain() string {
	return "alerting.edgelq.com"
}

func (d *BatchGetPolicyTemplatesDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *BatchGetPolicyTemplatesDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return policyTemplateServiceDescriptor
}

func (d *BatchGetPolicyTemplatesDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return policy_template.GetDescriptor()
}

func (d *BatchGetPolicyTemplatesDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetPolicyTemplatesDescriptorClientMsgHandle{}
}

func (d *BatchGetPolicyTemplatesDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetPolicyTemplatesDescriptorServerMsgHandle{}
}

func (h *BatchGetPolicyTemplatesDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetPolicyTemplatesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetPolicyTemplatesRequest) *policy_template.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetPolicyTemplatesDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetPolicyTemplatesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetPolicyTemplatesRequest) []*policy_template.Name
	})
	if ok {
		return policy_template.PolicyTemplateNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if names := typedMsg.GetNames(); len(names) > 0 {
			return policy_template.PolicyTemplateNameList(names)
		}
	}
	return (policy_template.PolicyTemplateNameList)(nil)
}

func (h *BatchGetPolicyTemplatesDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetPolicyTemplatesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*BatchGetPolicyTemplatesRequest) *policy_template.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *BatchGetPolicyTemplatesDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*BatchGetPolicyTemplatesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*BatchGetPolicyTemplatesRequest) *policy_template.PolicyTemplate
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *BatchGetPolicyTemplatesDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*BatchGetPolicyTemplatesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*BatchGetPolicyTemplatesRequest) []*policy_template.PolicyTemplate
	})
	if ok {
		return policy_template.PolicyTemplateList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *BatchGetPolicyTemplatesDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetPolicyTemplatesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetPolicyTemplatesResponse) *policy_template.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetPolicyTemplatesDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetPolicyTemplatesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetPolicyTemplatesResponse) []*policy_template.Name
	})
	if ok {
		return policy_template.PolicyTemplateNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetPolicyTemplates(); len(resources) > 0 {
			list := make(policy_template.PolicyTemplateNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (policy_template.PolicyTemplateNameList)(nil)
}

func (h *BatchGetPolicyTemplatesDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetPolicyTemplatesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*BatchGetPolicyTemplatesResponse) *policy_template.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *BatchGetPolicyTemplatesDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*BatchGetPolicyTemplatesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*BatchGetPolicyTemplatesResponse) *policy_template.PolicyTemplate
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *BatchGetPolicyTemplatesDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*BatchGetPolicyTemplatesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*BatchGetPolicyTemplatesResponse) []*policy_template.PolicyTemplate
	})
	if ok {
		return policy_template.PolicyTemplateList(override.OverrideExtractResourceBodies(typedMsg))
	}
	{
		if resources := typedMsg.GetPolicyTemplates(); len(resources) > 0 {
			return policy_template.PolicyTemplateList(resources)
		}
	}
	return (policy_template.PolicyTemplateList)(nil)
}

func GetBatchGetPolicyTemplatesDescriptor() *BatchGetPolicyTemplatesDescriptor {
	return batchGetPolicyTemplatesDescriptor
}

type ListPolicyTemplatesDescriptor struct{}

type ListPolicyTemplatesDescriptorClientMsgHandle struct{}

type ListPolicyTemplatesDescriptorServerMsgHandle struct{}

func (d *ListPolicyTemplatesDescriptor) NewEmptyClientMsg() proto.Message {
	return &ListPolicyTemplatesRequest{}
}

func (d *ListPolicyTemplatesDescriptor) NewEmptyServerMsg() proto.Message {
	return &ListPolicyTemplatesResponse{}
}

func (d *ListPolicyTemplatesDescriptor) IsUnary() bool {
	return true
}

func (d *ListPolicyTemplatesDescriptor) IsClientStream() bool {
	return false
}

func (d *ListPolicyTemplatesDescriptor) IsServerStream() bool {
	return false
}

func (d *ListPolicyTemplatesDescriptor) IsCollection() bool {
	return true
}

func (d *ListPolicyTemplatesDescriptor) IsPlural() bool {
	return true
}

func (d *ListPolicyTemplatesDescriptor) HasResource() bool {
	return true
}

func (d *ListPolicyTemplatesDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ListPolicyTemplatesDescriptor) GetVerb() string {
	return "list"
}

func (d *ListPolicyTemplatesDescriptor) GetMethodName() string {
	return "ListPolicyTemplates"
}

func (d *ListPolicyTemplatesDescriptor) GetFullMethodName() string {
	return "/ntt.alerting.v1.PolicyTemplateService/ListPolicyTemplates"
}

func (d *ListPolicyTemplatesDescriptor) GetProtoPkgName() string {
	return "ntt.alerting.v1"
}

func (d *ListPolicyTemplatesDescriptor) GetApiName() string {
	return "PolicyTemplateService"
}

func (d *ListPolicyTemplatesDescriptor) GetServiceDomain() string {
	return "alerting.edgelq.com"
}

func (d *ListPolicyTemplatesDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *ListPolicyTemplatesDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return policyTemplateServiceDescriptor
}

func (d *ListPolicyTemplatesDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return policy_template.GetDescriptor()
}

func (d *ListPolicyTemplatesDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListPolicyTemplatesDescriptorClientMsgHandle{}
}

func (d *ListPolicyTemplatesDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListPolicyTemplatesDescriptorServerMsgHandle{}
}

func (h *ListPolicyTemplatesDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListPolicyTemplatesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListPolicyTemplatesRequest) *policy_template.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListPolicyTemplatesDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListPolicyTemplatesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListPolicyTemplatesRequest) []*policy_template.Name
	})
	if ok {
		return policy_template.PolicyTemplateNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *ListPolicyTemplatesDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListPolicyTemplatesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ListPolicyTemplatesRequest) *policy_template.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*policy_template.ParentName)(nil)
}

func (h *ListPolicyTemplatesDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*ListPolicyTemplatesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*ListPolicyTemplatesRequest) *policy_template.PolicyTemplate
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *ListPolicyTemplatesDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*ListPolicyTemplatesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*ListPolicyTemplatesRequest) []*policy_template.PolicyTemplate
	})
	if ok {
		return policy_template.PolicyTemplateList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *ListPolicyTemplatesDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListPolicyTemplatesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListPolicyTemplatesResponse) *policy_template.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListPolicyTemplatesDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListPolicyTemplatesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListPolicyTemplatesResponse) []*policy_template.Name
	})
	if ok {
		return policy_template.PolicyTemplateNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetPolicyTemplates(); len(resources) > 0 {
			list := make(policy_template.PolicyTemplateNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (policy_template.PolicyTemplateNameList)(nil)
}

func (h *ListPolicyTemplatesDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListPolicyTemplatesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ListPolicyTemplatesResponse) *policy_template.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *ListPolicyTemplatesDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*ListPolicyTemplatesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*ListPolicyTemplatesResponse) *policy_template.PolicyTemplate
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *ListPolicyTemplatesDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*ListPolicyTemplatesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*ListPolicyTemplatesResponse) []*policy_template.PolicyTemplate
	})
	if ok {
		return policy_template.PolicyTemplateList(override.OverrideExtractResourceBodies(typedMsg))
	}
	{
		if resources := typedMsg.GetPolicyTemplates(); len(resources) > 0 {
			return policy_template.PolicyTemplateList(resources)
		}
	}
	return (policy_template.PolicyTemplateList)(nil)
}

func GetListPolicyTemplatesDescriptor() *ListPolicyTemplatesDescriptor {
	return listPolicyTemplatesDescriptor
}

type WatchPolicyTemplateDescriptor struct{}

type WatchPolicyTemplateDescriptorClientMsgHandle struct{}

type WatchPolicyTemplateDescriptorServerMsgHandle struct{}

func (d *WatchPolicyTemplateDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchPolicyTemplateRequest{}
}

func (d *WatchPolicyTemplateDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchPolicyTemplateResponse{}
}

func (d *WatchPolicyTemplateDescriptor) IsUnary() bool {
	return false
}

func (d *WatchPolicyTemplateDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchPolicyTemplateDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchPolicyTemplateDescriptor) IsCollection() bool {
	return false
}

func (d *WatchPolicyTemplateDescriptor) IsPlural() bool {
	return false
}

func (d *WatchPolicyTemplateDescriptor) HasResource() bool {
	return true
}

func (d *WatchPolicyTemplateDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchPolicyTemplateDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchPolicyTemplateDescriptor) GetMethodName() string {
	return "WatchPolicyTemplate"
}

func (d *WatchPolicyTemplateDescriptor) GetFullMethodName() string {
	return "/ntt.alerting.v1.PolicyTemplateService/WatchPolicyTemplate"
}

func (d *WatchPolicyTemplateDescriptor) GetProtoPkgName() string {
	return "ntt.alerting.v1"
}

func (d *WatchPolicyTemplateDescriptor) GetApiName() string {
	return "PolicyTemplateService"
}

func (d *WatchPolicyTemplateDescriptor) GetServiceDomain() string {
	return "alerting.edgelq.com"
}

func (d *WatchPolicyTemplateDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *WatchPolicyTemplateDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return policyTemplateServiceDescriptor
}

func (d *WatchPolicyTemplateDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return policy_template.GetDescriptor()
}

func (d *WatchPolicyTemplateDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchPolicyTemplateDescriptorClientMsgHandle{}
}

func (d *WatchPolicyTemplateDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchPolicyTemplateDescriptorServerMsgHandle{}
}

func (h *WatchPolicyTemplateDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchPolicyTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchPolicyTemplateRequest) *policy_template.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*policy_template.Name)(nil)
}

func (h *WatchPolicyTemplateDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchPolicyTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchPolicyTemplateRequest) []*policy_template.Name
	})
	if ok {
		return policy_template.PolicyTemplateNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchPolicyTemplateDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchPolicyTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchPolicyTemplateRequest) *policy_template.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchPolicyTemplateDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchPolicyTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchPolicyTemplateRequest) *policy_template.PolicyTemplate
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *WatchPolicyTemplateDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchPolicyTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchPolicyTemplateRequest) []*policy_template.PolicyTemplate
	})
	if ok {
		return policy_template.PolicyTemplateList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *WatchPolicyTemplateDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchPolicyTemplateResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchPolicyTemplateResponse) *policy_template.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if resChange := typedMsg.GetChange(); resChange != nil {
			switch tResChange := resChange.ChangeType.(type) {
			case *policy_template.PolicyTemplateChange_Added_:
				return tResChange.Added.GetPolicyTemplate().GetName()
			case *policy_template.PolicyTemplateChange_Modified_:
				return tResChange.Modified.GetName()
			case *policy_template.PolicyTemplateChange_Removed_:
				return tResChange.Removed.GetName()
			case *policy_template.PolicyTemplateChange_Current_:
				return tResChange.Current.GetPolicyTemplate().GetName()
			}
		}
	}
	return (*policy_template.Name)(nil)
}

func (h *WatchPolicyTemplateDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchPolicyTemplateResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchPolicyTemplateResponse) []*policy_template.Name
	})
	if ok {
		return policy_template.PolicyTemplateNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchPolicyTemplateDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchPolicyTemplateResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchPolicyTemplateResponse) *policy_template.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchPolicyTemplateDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchPolicyTemplateResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchPolicyTemplateResponse) *policy_template.PolicyTemplate
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	{
		if resChange := typedMsg.GetChange(); resChange != nil {
			switch tResChange := resChange.ChangeType.(type) {
			case *policy_template.PolicyTemplateChange_Added_:
				return tResChange.Added.GetPolicyTemplate()
			case *policy_template.PolicyTemplateChange_Modified_:
				return tResChange.Modified.GetPolicyTemplate()
			case *policy_template.PolicyTemplateChange_Current_:
				return tResChange.Current.GetPolicyTemplate()
			}
		}
	}
	return (*policy_template.PolicyTemplate)(nil)
}

func (h *WatchPolicyTemplateDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchPolicyTemplateResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchPolicyTemplateResponse) []*policy_template.PolicyTemplate
	})
	if ok {
		return policy_template.PolicyTemplateList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetWatchPolicyTemplateDescriptor() *WatchPolicyTemplateDescriptor {
	return watchPolicyTemplateDescriptor
}

type WatchPolicyTemplatesDescriptor struct{}

type WatchPolicyTemplatesDescriptorClientMsgHandle struct{}

type WatchPolicyTemplatesDescriptorServerMsgHandle struct{}

func (d *WatchPolicyTemplatesDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchPolicyTemplatesRequest{}
}

func (d *WatchPolicyTemplatesDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchPolicyTemplatesResponse{}
}

func (d *WatchPolicyTemplatesDescriptor) IsUnary() bool {
	return false
}

func (d *WatchPolicyTemplatesDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchPolicyTemplatesDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchPolicyTemplatesDescriptor) IsCollection() bool {
	return true
}

func (d *WatchPolicyTemplatesDescriptor) IsPlural() bool {
	return true
}

func (d *WatchPolicyTemplatesDescriptor) HasResource() bool {
	return true
}

func (d *WatchPolicyTemplatesDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchPolicyTemplatesDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchPolicyTemplatesDescriptor) GetMethodName() string {
	return "WatchPolicyTemplates"
}

func (d *WatchPolicyTemplatesDescriptor) GetFullMethodName() string {
	return "/ntt.alerting.v1.PolicyTemplateService/WatchPolicyTemplates"
}

func (d *WatchPolicyTemplatesDescriptor) GetProtoPkgName() string {
	return "ntt.alerting.v1"
}

func (d *WatchPolicyTemplatesDescriptor) GetApiName() string {
	return "PolicyTemplateService"
}

func (d *WatchPolicyTemplatesDescriptor) GetServiceDomain() string {
	return "alerting.edgelq.com"
}

func (d *WatchPolicyTemplatesDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *WatchPolicyTemplatesDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return policyTemplateServiceDescriptor
}

func (d *WatchPolicyTemplatesDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return policy_template.GetDescriptor()
}

func (d *WatchPolicyTemplatesDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchPolicyTemplatesDescriptorClientMsgHandle{}
}

func (d *WatchPolicyTemplatesDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchPolicyTemplatesDescriptorServerMsgHandle{}
}

func (h *WatchPolicyTemplatesDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchPolicyTemplatesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchPolicyTemplatesRequest) *policy_template.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchPolicyTemplatesDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchPolicyTemplatesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchPolicyTemplatesRequest) []*policy_template.Name
	})
	if ok {
		return policy_template.PolicyTemplateNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchPolicyTemplatesDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchPolicyTemplatesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchPolicyTemplatesRequest) *policy_template.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*policy_template.ParentName)(nil)
}

func (h *WatchPolicyTemplatesDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchPolicyTemplatesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchPolicyTemplatesRequest) *policy_template.PolicyTemplate
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *WatchPolicyTemplatesDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchPolicyTemplatesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchPolicyTemplatesRequest) []*policy_template.PolicyTemplate
	})
	if ok {
		return policy_template.PolicyTemplateList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *WatchPolicyTemplatesDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchPolicyTemplatesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchPolicyTemplatesResponse) *policy_template.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchPolicyTemplatesDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchPolicyTemplatesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchPolicyTemplatesResponse) []*policy_template.Name
	})
	if ok {
		return policy_template.PolicyTemplateNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resChanges := typedMsg.GetPolicyTemplateChanges(); len(resChanges) > 0 {
			list := make(policy_template.PolicyTemplateNameList, 0, len(resChanges))
			for _, resChange := range resChanges {
				switch tResChange := resChange.ChangeType.(type) {
				case *policy_template.PolicyTemplateChange_Added_:
					list = append(list, tResChange.Added.GetPolicyTemplate().GetName())
				case *policy_template.PolicyTemplateChange_Modified_:
					list = append(list, tResChange.Modified.GetName())
				case *policy_template.PolicyTemplateChange_Removed_:
					list = append(list, tResChange.Removed.GetName())
				case *policy_template.PolicyTemplateChange_Current_:
					list = append(list, tResChange.Current.GetPolicyTemplate().GetName())
				}
			}
			return list
		}
	}
	return (policy_template.PolicyTemplateNameList)(nil)
}

func (h *WatchPolicyTemplatesDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchPolicyTemplatesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchPolicyTemplatesResponse) *policy_template.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchPolicyTemplatesDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchPolicyTemplatesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchPolicyTemplatesResponse) *policy_template.PolicyTemplate
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *WatchPolicyTemplatesDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchPolicyTemplatesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchPolicyTemplatesResponse) []*policy_template.PolicyTemplate
	})
	if ok {
		return policy_template.PolicyTemplateList(override.OverrideExtractResourceBodies(typedMsg))
	}
	{
		if resChanges := typedMsg.GetPolicyTemplateChanges(); len(resChanges) > 0 {
			list := make(policy_template.PolicyTemplateList, 0, len(resChanges))
			for _, resChange := range resChanges {
				switch tResChange := resChange.ChangeType.(type) {
				case *policy_template.PolicyTemplateChange_Added_:
					list = append(list, tResChange.Added.GetPolicyTemplate())
				case *policy_template.PolicyTemplateChange_Modified_:
					list = append(list, tResChange.Modified.GetPolicyTemplate())
				case *policy_template.PolicyTemplateChange_Current_:
					list = append(list, tResChange.Current.GetPolicyTemplate())
				}
			}
			return list
		}
	}
	return (policy_template.PolicyTemplateList)(nil)
}

func GetWatchPolicyTemplatesDescriptor() *WatchPolicyTemplatesDescriptor {
	return watchPolicyTemplatesDescriptor
}

type CreatePolicyTemplateDescriptor struct{}

type CreatePolicyTemplateDescriptorClientMsgHandle struct{}

type CreatePolicyTemplateDescriptorServerMsgHandle struct{}

func (d *CreatePolicyTemplateDescriptor) NewEmptyClientMsg() proto.Message {
	return &CreatePolicyTemplateRequest{}
}

func (d *CreatePolicyTemplateDescriptor) NewEmptyServerMsg() proto.Message {
	return &policy_template.PolicyTemplate{}
}

func (d *CreatePolicyTemplateDescriptor) IsUnary() bool {
	return true
}

func (d *CreatePolicyTemplateDescriptor) IsClientStream() bool {
	return false
}

func (d *CreatePolicyTemplateDescriptor) IsServerStream() bool {
	return false
}

func (d *CreatePolicyTemplateDescriptor) IsCollection() bool {
	return true
}

func (d *CreatePolicyTemplateDescriptor) IsPlural() bool {
	return false
}

func (d *CreatePolicyTemplateDescriptor) HasResource() bool {
	return true
}

func (d *CreatePolicyTemplateDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *CreatePolicyTemplateDescriptor) GetVerb() string {
	return "create"
}

func (d *CreatePolicyTemplateDescriptor) GetMethodName() string {
	return "CreatePolicyTemplate"
}

func (d *CreatePolicyTemplateDescriptor) GetFullMethodName() string {
	return "/ntt.alerting.v1.PolicyTemplateService/CreatePolicyTemplate"
}

func (d *CreatePolicyTemplateDescriptor) GetProtoPkgName() string {
	return "ntt.alerting.v1"
}

func (d *CreatePolicyTemplateDescriptor) GetApiName() string {
	return "PolicyTemplateService"
}

func (d *CreatePolicyTemplateDescriptor) GetServiceDomain() string {
	return "alerting.edgelq.com"
}

func (d *CreatePolicyTemplateDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *CreatePolicyTemplateDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return policyTemplateServiceDescriptor
}

func (d *CreatePolicyTemplateDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return policy_template.GetDescriptor()
}

func (d *CreatePolicyTemplateDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreatePolicyTemplateDescriptorClientMsgHandle{}
}

func (d *CreatePolicyTemplateDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreatePolicyTemplateDescriptorServerMsgHandle{}
}

func (h *CreatePolicyTemplateDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreatePolicyTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*CreatePolicyTemplateRequest) *policy_template.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetPolicyTemplate()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*policy_template.Name)(nil)
}

func (h *CreatePolicyTemplateDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*CreatePolicyTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*CreatePolicyTemplateRequest) []*policy_template.Name
	})
	if ok {
		return policy_template.PolicyTemplateNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreatePolicyTemplateDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreatePolicyTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*CreatePolicyTemplateRequest) *policy_template.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*policy_template.ParentName)(nil)
}

func (h *CreatePolicyTemplateDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*CreatePolicyTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*CreatePolicyTemplateRequest) *policy_template.PolicyTemplate
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	{
		return typedMsg.GetPolicyTemplate()
	}
	return (*policy_template.PolicyTemplate)(nil)
}

func (h *CreatePolicyTemplateDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*CreatePolicyTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*CreatePolicyTemplateRequest) []*policy_template.PolicyTemplate
	})
	if ok {
		return policy_template.PolicyTemplateList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *CreatePolicyTemplateDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*policy_template.PolicyTemplate)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*policy_template.PolicyTemplate) *policy_template.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*policy_template.Name)(nil)
}

func (h *CreatePolicyTemplateDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*policy_template.PolicyTemplate)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*policy_template.PolicyTemplate) []*policy_template.Name
	})
	if ok {
		return policy_template.PolicyTemplateNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreatePolicyTemplateDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*policy_template.PolicyTemplate)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*policy_template.PolicyTemplate) *policy_template.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *CreatePolicyTemplateDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	return msg.(*policy_template.PolicyTemplate)
}

func (h *CreatePolicyTemplateDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*policy_template.PolicyTemplate)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*policy_template.PolicyTemplate) []*policy_template.PolicyTemplate
	})
	if ok {
		return policy_template.PolicyTemplateList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetCreatePolicyTemplateDescriptor() *CreatePolicyTemplateDescriptor {
	return createPolicyTemplateDescriptor
}

type UpdatePolicyTemplateDescriptor struct{}

type UpdatePolicyTemplateDescriptorClientMsgHandle struct{}

type UpdatePolicyTemplateDescriptorServerMsgHandle struct{}

func (d *UpdatePolicyTemplateDescriptor) NewEmptyClientMsg() proto.Message {
	return &UpdatePolicyTemplateRequest{}
}

func (d *UpdatePolicyTemplateDescriptor) NewEmptyServerMsg() proto.Message {
	return &policy_template.PolicyTemplate{}
}

func (d *UpdatePolicyTemplateDescriptor) IsUnary() bool {
	return true
}

func (d *UpdatePolicyTemplateDescriptor) IsClientStream() bool {
	return false
}

func (d *UpdatePolicyTemplateDescriptor) IsServerStream() bool {
	return false
}

func (d *UpdatePolicyTemplateDescriptor) IsCollection() bool {
	return false
}

func (d *UpdatePolicyTemplateDescriptor) IsPlural() bool {
	return false
}

func (d *UpdatePolicyTemplateDescriptor) HasResource() bool {
	return true
}

func (d *UpdatePolicyTemplateDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *UpdatePolicyTemplateDescriptor) GetVerb() string {
	return "update"
}

func (d *UpdatePolicyTemplateDescriptor) GetMethodName() string {
	return "UpdatePolicyTemplate"
}

func (d *UpdatePolicyTemplateDescriptor) GetFullMethodName() string {
	return "/ntt.alerting.v1.PolicyTemplateService/UpdatePolicyTemplate"
}

func (d *UpdatePolicyTemplateDescriptor) GetProtoPkgName() string {
	return "ntt.alerting.v1"
}

func (d *UpdatePolicyTemplateDescriptor) GetApiName() string {
	return "PolicyTemplateService"
}

func (d *UpdatePolicyTemplateDescriptor) GetServiceDomain() string {
	return "alerting.edgelq.com"
}

func (d *UpdatePolicyTemplateDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *UpdatePolicyTemplateDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return policyTemplateServiceDescriptor
}

func (d *UpdatePolicyTemplateDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return policy_template.GetDescriptor()
}

func (d *UpdatePolicyTemplateDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdatePolicyTemplateDescriptorClientMsgHandle{}
}

func (d *UpdatePolicyTemplateDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdatePolicyTemplateDescriptorServerMsgHandle{}
}

func (h *UpdatePolicyTemplateDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdatePolicyTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*UpdatePolicyTemplateRequest) *policy_template.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetPolicyTemplate()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*policy_template.Name)(nil)
}

func (h *UpdatePolicyTemplateDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*UpdatePolicyTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*UpdatePolicyTemplateRequest) []*policy_template.Name
	})
	if ok {
		return policy_template.PolicyTemplateNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdatePolicyTemplateDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdatePolicyTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*UpdatePolicyTemplateRequest) *policy_template.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *UpdatePolicyTemplateDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*UpdatePolicyTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*UpdatePolicyTemplateRequest) *policy_template.PolicyTemplate
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	{
		return typedMsg.GetPolicyTemplate()
	}
	return (*policy_template.PolicyTemplate)(nil)
}

func (h *UpdatePolicyTemplateDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*UpdatePolicyTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*UpdatePolicyTemplateRequest) []*policy_template.PolicyTemplate
	})
	if ok {
		return policy_template.PolicyTemplateList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *UpdatePolicyTemplateDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*policy_template.PolicyTemplate)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*policy_template.PolicyTemplate) *policy_template.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*policy_template.Name)(nil)
}

func (h *UpdatePolicyTemplateDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*policy_template.PolicyTemplate)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*policy_template.PolicyTemplate) []*policy_template.Name
	})
	if ok {
		return policy_template.PolicyTemplateNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdatePolicyTemplateDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*policy_template.PolicyTemplate)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*policy_template.PolicyTemplate) *policy_template.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *UpdatePolicyTemplateDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	return msg.(*policy_template.PolicyTemplate)
}

func (h *UpdatePolicyTemplateDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*policy_template.PolicyTemplate)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*policy_template.PolicyTemplate) []*policy_template.PolicyTemplate
	})
	if ok {
		return policy_template.PolicyTemplateList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetUpdatePolicyTemplateDescriptor() *UpdatePolicyTemplateDescriptor {
	return updatePolicyTemplateDescriptor
}

type DeletePolicyTemplateDescriptor struct{}

type DeletePolicyTemplateDescriptorClientMsgHandle struct{}

type DeletePolicyTemplateDescriptorServerMsgHandle struct{}

func (d *DeletePolicyTemplateDescriptor) NewEmptyClientMsg() proto.Message {
	return &DeletePolicyTemplateRequest{}
}

func (d *DeletePolicyTemplateDescriptor) NewEmptyServerMsg() proto.Message {
	return &emptypb.Empty{}
}

func (d *DeletePolicyTemplateDescriptor) IsUnary() bool {
	return true
}

func (d *DeletePolicyTemplateDescriptor) IsClientStream() bool {
	return false
}

func (d *DeletePolicyTemplateDescriptor) IsServerStream() bool {
	return false
}

func (d *DeletePolicyTemplateDescriptor) IsCollection() bool {
	return false
}

func (d *DeletePolicyTemplateDescriptor) IsPlural() bool {
	return false
}

func (d *DeletePolicyTemplateDescriptor) HasResource() bool {
	return true
}

func (d *DeletePolicyTemplateDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *DeletePolicyTemplateDescriptor) GetVerb() string {
	return "delete"
}

func (d *DeletePolicyTemplateDescriptor) GetMethodName() string {
	return "DeletePolicyTemplate"
}

func (d *DeletePolicyTemplateDescriptor) GetFullMethodName() string {
	return "/ntt.alerting.v1.PolicyTemplateService/DeletePolicyTemplate"
}

func (d *DeletePolicyTemplateDescriptor) GetProtoPkgName() string {
	return "ntt.alerting.v1"
}

func (d *DeletePolicyTemplateDescriptor) GetApiName() string {
	return "PolicyTemplateService"
}

func (d *DeletePolicyTemplateDescriptor) GetServiceDomain() string {
	return "alerting.edgelq.com"
}

func (d *DeletePolicyTemplateDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *DeletePolicyTemplateDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return policyTemplateServiceDescriptor
}

func (d *DeletePolicyTemplateDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return policy_template.GetDescriptor()
}

func (d *DeletePolicyTemplateDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeletePolicyTemplateDescriptorClientMsgHandle{}
}

func (d *DeletePolicyTemplateDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeletePolicyTemplateDescriptorServerMsgHandle{}
}

func (h *DeletePolicyTemplateDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeletePolicyTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*DeletePolicyTemplateRequest) *policy_template.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*policy_template.Name)(nil)
}

func (h *DeletePolicyTemplateDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*DeletePolicyTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*DeletePolicyTemplateRequest) []*policy_template.Name
	})
	if ok {
		return policy_template.PolicyTemplateNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeletePolicyTemplateDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeletePolicyTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*DeletePolicyTemplateRequest) *policy_template.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *DeletePolicyTemplateDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*DeletePolicyTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*DeletePolicyTemplateRequest) *policy_template.PolicyTemplate
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *DeletePolicyTemplateDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*DeletePolicyTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*DeletePolicyTemplateRequest) []*policy_template.PolicyTemplate
	})
	if ok {
		return policy_template.PolicyTemplateList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *DeletePolicyTemplateDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*emptypb.Empty) *policy_template.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *DeletePolicyTemplateDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*emptypb.Empty) []*policy_template.Name
	})
	if ok {
		return policy_template.PolicyTemplateNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeletePolicyTemplateDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*emptypb.Empty) *policy_template.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *DeletePolicyTemplateDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*emptypb.Empty) *policy_template.PolicyTemplate
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *DeletePolicyTemplateDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*emptypb.Empty) []*policy_template.PolicyTemplate
	})
	if ok {
		return policy_template.PolicyTemplateList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetDeletePolicyTemplateDescriptor() *DeletePolicyTemplateDescriptor {
	return deletePolicyTemplateDescriptor
}

type PolicyTemplateServiceDescriptor struct{}

func (d *PolicyTemplateServiceDescriptor) AllMethodDescriptors() []gotenclient.MethodDescriptor {
	return []gotenclient.MethodDescriptor{
		getPolicyTemplateDescriptor,
		batchGetPolicyTemplatesDescriptor,
		listPolicyTemplatesDescriptor,
		watchPolicyTemplateDescriptor,
		watchPolicyTemplatesDescriptor,
		createPolicyTemplateDescriptor,
		updatePolicyTemplateDescriptor,
		deletePolicyTemplateDescriptor,
	}
}

func (d *PolicyTemplateServiceDescriptor) GetFullAPIName() string {
	return "/ntt.alerting.v1.PolicyTemplateService"
}

func (d *PolicyTemplateServiceDescriptor) GetProtoPkgName() string {
	return "ntt.alerting.v1"
}

func (d *PolicyTemplateServiceDescriptor) GetApiName() string {
	return "PolicyTemplateService"
}

func (d *PolicyTemplateServiceDescriptor) GetServiceDomain() string {
	return "alerting.edgelq.com"
}

func (d *PolicyTemplateServiceDescriptor) GetServiceVersion() string {
	return "v1"
}

func GetPolicyTemplateServiceDescriptor() *PolicyTemplateServiceDescriptor {
	return policyTemplateServiceDescriptor
}

func initDescriptors() {
	policyTemplateServiceDescriptor = &PolicyTemplateServiceDescriptor{}
	getPolicyTemplateDescriptor = &GetPolicyTemplateDescriptor{}
	batchGetPolicyTemplatesDescriptor = &BatchGetPolicyTemplatesDescriptor{}
	listPolicyTemplatesDescriptor = &ListPolicyTemplatesDescriptor{}
	watchPolicyTemplateDescriptor = &WatchPolicyTemplateDescriptor{}
	watchPolicyTemplatesDescriptor = &WatchPolicyTemplatesDescriptor{}
	createPolicyTemplateDescriptor = &CreatePolicyTemplateDescriptor{}
	updatePolicyTemplateDescriptor = &UpdatePolicyTemplateDescriptor{}
	deletePolicyTemplateDescriptor = &DeletePolicyTemplateDescriptor{}
	gotenclient.GetRegistry().RegisterApiDescriptor(policyTemplateServiceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(getPolicyTemplateDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(batchGetPolicyTemplatesDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(listPolicyTemplatesDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchPolicyTemplateDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchPolicyTemplatesDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(createPolicyTemplateDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(updatePolicyTemplateDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(deletePolicyTemplateDescriptor)
}

func init() {
	if !descriptorsInitialized {
		initDescriptors()
		descriptorsInitialized = true
	}
}
