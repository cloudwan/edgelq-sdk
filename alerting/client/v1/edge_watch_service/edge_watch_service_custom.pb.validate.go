// Code generated by protoc-gen-goten-validate
// File: edgelq/alerting/proto/v1/edge_watch_service_custom.proto
// DO NOT EDIT!!!

package edge_watch_service_client

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	gotenvalidate "github.com/cloudwan/goten-sdk/runtime/validate"
)

// proto imports
import (
	alert "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/alert"
	log_condition "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/log_condition"
	policy "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/policy"
	ts_condition "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/ts_condition"
	ts_entry "github.com/cloudwan/edgelq-sdk/alerting/resources/v1/ts_entry"
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1/project"
)

var (
	_ = bytes.Equal
	_ = errors.New
	_ = fmt.Errorf
	_ = net.ParseIP
	_ = regexp.Match
	_ = strings.Split
	_ = time.Now
	_ = utf8.RuneCountInString
	_ = url.Parse
	_ = gotenvalidate.NewValidationError
)

// make sure we're using proto imports
var (
	_ = &alert.Alert{}
	_ = &log_condition.LogCondition{}
	_ = &policy.Policy{}
	_ = &ts_condition.TsCondition{}
	_ = &ts_entry.TsEntry{}
	_ = &iam_project.Project{}
)

func (obj *WatchAlertDataRequest) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *WatchAlertDataResponse) GotenValidate() error {
	if obj == nil {
		return nil
	}
	for idx, elem := range obj.AlertsToAdd {
		if subobj, ok := interface{}(elem).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("WatchAlertDataResponse", "alertsToAdd", obj.AlertsToAdd[idx], "nested object validation failed", err)
			}
		}
	}
	for idx, elem := range obj.TsEntriesToAdd {
		if subobj, ok := interface{}(elem).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("WatchAlertDataResponse", "tsEntriesToAdd", obj.TsEntriesToAdd[idx], "nested object validation failed", err)
			}
		}
	}
	for idx, elem := range obj.PoliciesToAdd {
		if subobj, ok := interface{}(elem).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("WatchAlertDataResponse", "policiesToAdd", obj.PoliciesToAdd[idx], "nested object validation failed", err)
			}
		}
	}
	for idx, elem := range obj.TsCndsToAdd {
		if subobj, ok := interface{}(elem).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("WatchAlertDataResponse", "tsCndsToAdd", obj.TsCndsToAdd[idx], "nested object validation failed", err)
			}
		}
	}
	for idx, elem := range obj.LogCndsToAdd {
		if subobj, ok := interface{}(elem).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("WatchAlertDataResponse", "logCndsToAdd", obj.LogCndsToAdd[idx], "nested object validation failed", err)
			}
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
