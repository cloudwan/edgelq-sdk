// Code generated by protoc-gen-goten-access
// Resource: Role
// DO NOT EDIT!!!

package role_access

import (
	"context"
	"fmt"

	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"

	gotenaccess "github.com/cloudwan/goten-sdk/runtime/access"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
	gotenfilter "github.com/cloudwan/goten-sdk/runtime/resource/filter"
	"github.com/cloudwan/goten-sdk/types/watch_type"

	role_client "github.com/cloudwan/edgelq-sdk/iam/client/v1/role"
	role "github.com/cloudwan/edgelq-sdk/iam/resources/v1/role"
)

var (
	_ = new(context.Context)
	_ = new(fmt.GoStringer)

	_ = new(grpc.ClientConnInterface)
	_ = codes.NotFound
	_ = status.Status{}

	_ = new(gotenaccess.Watcher)
	_ = watch_type.WatchType_STATEFUL
	_ = new(gotenresource.ListQuery)
	_ = gotenfilter.Eq
)

type apiRoleAccess struct {
	client role_client.RoleServiceClient
}

func NewApiRoleAccess(client role_client.RoleServiceClient) role.RoleAccess {
	return &apiRoleAccess{client: client}
}

func (a *apiRoleAccess) GetRole(ctx context.Context, query *role.GetQuery) (*role.Role, error) {
	if !query.Reference.IsFullyQualified() {
		return nil, status.Errorf(codes.InvalidArgument, "Reference %s is not fully specified", query.Reference)
	}
	request := &role_client.GetRoleRequest{
		Name:      &query.Reference.Name,
		FieldMask: query.Mask,
	}
	res, err := a.client.GetRole(ctx, request)
	if err != nil {
		return nil, err
	}
	query.Reference.Resolve(res)
	return res, nil
}

func (a *apiRoleAccess) BatchGetRoles(ctx context.Context, refs []*role.Reference, opts ...gotenresource.BatchGetOption) error {
	batchGetOpts := gotenresource.MakeBatchGetOptions(opts)
	asNames := make([]*role.Name, 0, len(refs))
	for _, ref := range refs {
		if !ref.IsFullyQualified() {
			return status.Errorf(codes.InvalidArgument, "Reference %s is not fully specified", ref)
		}
		asNames = append(asNames, &ref.Name)
	}
	request := &role_client.BatchGetRolesRequest{
		Names: asNames,
	}
	fieldMask := batchGetOpts.GetFieldMask(role.GetDescriptor())
	if fieldMask != nil {
		request.FieldMask = fieldMask.(*role.Role_FieldMask)
	}
	resp, err := a.client.BatchGetRoles(ctx, request)
	if err != nil {
		return err
	}
	resultMap := make(map[role.Name]*role.Role, len(refs))
	for _, resolvedRes := range resp.GetRoles() {
		resultMap[*resolvedRes.GetName()] = resolvedRes
	}
	for _, ref := range refs {
		resolvedRes := resultMap[ref.Name]
		if resolvedRes != nil {
			ref.Resolve(resolvedRes)
		}
	}
	if batchGetOpts.MustResolveAll() && len(resp.GetMissing()) > 0 {
		return status.Errorf(codes.NotFound, "Number of references not found: %d", len(resp.GetMissing()))
	}
	return nil
}

func (a *apiRoleAccess) QueryRoles(ctx context.Context, query *role.ListQuery) (*role.QueryResultSnapshot, error) {
	request := &role_client.ListRolesRequest{
		Filter:            query.Filter,
		FieldMask:         query.Mask,
		IncludePagingInfo: query.WithPagingInfo,
	}
	if query.Pager != nil {
		request.PageSize = int32(query.Pager.Limit)
		request.OrderBy = query.Pager.OrderBy
		request.PageToken = query.Pager.Cursor
	}
	if query.Filter != nil && query.Filter.GetCondition() != nil {
		request.Filter, request.Parent = getParentAndFilter(query.Filter)
	}
	resp, err := a.client.ListRoles(ctx, request)
	if err != nil {
		return nil, err
	}
	return &role.QueryResultSnapshot{
		Roles:             resp.Roles,
		NextPageCursor:    resp.NextPageToken,
		PrevPageCursor:    resp.PrevPageToken,
		TotalResultsCount: resp.TotalResultsCount,
		CurrentOffset:     resp.CurrentOffset,
	}, nil
}

func (a *apiRoleAccess) WatchRole(ctx context.Context, query *role.GetQuery, observerCb func(*role.RoleChange) error) error {
	if !query.Reference.IsFullyQualified() {
		return status.Errorf(codes.InvalidArgument, "Reference %s is not fully specified", query.Reference)
	}
	request := &role_client.WatchRoleRequest{
		Name:      &query.Reference.Name,
		FieldMask: query.Mask,
	}
	changesStream, initErr := a.client.WatchRole(ctx, request)
	if initErr != nil {
		return initErr
	}
	for {
		resp, err := changesStream.Recv()
		if err != nil {
			return fmt.Errorf("watch recv error: %w", err)
		}
		change := resp.GetChange()
		if err := observerCb(change); err != nil {
			return err
		}
	}
}

func (a *apiRoleAccess) WatchRoles(ctx context.Context, query *role.WatchQuery, observerCb func(*role.QueryResultChange) error) error {
	request := &role_client.WatchRolesRequest{
		Filter:       query.Filter,
		FieldMask:    query.Mask,
		MaxChunkSize: int32(query.ChunkSize),
		Type:         query.WatchType,
		ResumeToken:  query.ResumeToken,
	}
	if query.Pager != nil {
		request.OrderBy = query.Pager.OrderBy
		request.PageSize = int32(query.Pager.Limit)
		request.PageToken = query.Pager.Cursor
	}
	if query.Filter != nil && query.Filter.GetCondition() != nil {
		request.Filter, request.Parent = getParentAndFilter(query.Filter)
	}
	changesStream, initErr := a.client.WatchRoles(ctx, request)
	if initErr != nil {
		return initErr
	}
	for {
		respChange, err := changesStream.Recv()
		if err != nil {
			return fmt.Errorf("watch recv error: %w", err)
		}
		changesWithPaging := &role.QueryResultChange{
			Changes:      respChange.RoleChanges,
			IsCurrent:    respChange.IsCurrent,
			IsHardReset:  respChange.IsHardReset,
			IsSoftReset:  respChange.IsSoftReset,
			ResumeToken:  respChange.ResumeToken,
			SnapshotSize: respChange.SnapshotSize,
		}
		if respChange.PageTokenChange != nil {
			changesWithPaging.PrevPageCursor = respChange.PageTokenChange.PrevPageToken
			changesWithPaging.NextPageCursor = respChange.PageTokenChange.NextPageToken
		}
		if err := observerCb(changesWithPaging); err != nil {
			return err
		}
	}
}

func (a *apiRoleAccess) SaveRole(ctx context.Context, res *role.Role, opts ...gotenresource.SaveOption) error {
	saveOpts := gotenresource.MakeSaveOptions(opts)
	previousRes := saveOpts.GetPreviousResource()

	if previousRes == nil && !saveOpts.OnlyUpdate() && !saveOpts.OnlyCreate() {
		var err error
		previousRes, err = a.GetRole(ctx, &role.GetQuery{Reference: res.Name.AsReference()})
		if err != nil {
			if statusErr, ok := status.FromError(err); !ok || statusErr.Code() != codes.NotFound {
				return err
			}
		}
	}
	var resp *role.Role
	var err error
	if saveOpts.OnlyUpdate() || previousRes != nil {
		updateRequest := &role_client.UpdateRoleRequest{
			Role: res,
		}
		if updateMask := saveOpts.GetUpdateMask(); updateMask != nil {
			updateRequest.UpdateMask = updateMask.(*role.Role_FieldMask)
		}
		if mask, conditionalState := saveOpts.GetCAS(); mask != nil && conditionalState != nil {
			updateRequest.Cas = &role_client.UpdateRoleRequest_CAS{
				ConditionalState: conditionalState.(*role.Role),
				FieldMask:        mask.(*role.Role_FieldMask),
			}
		}
		resp, err = a.client.UpdateRole(ctx, updateRequest)
		if err != nil {
			return err
		}
	} else {
		createRequest := &role_client.CreateRoleRequest{
			Role: res,
		}
		resp, err = a.client.CreateRole(ctx, createRequest)
		if err != nil {
			return err
		}
	}
	// Ensure object is updated - but in most shallow way possible
	res.MakeDiffFieldMask(resp).Set(res, resp)
	return nil
}

func (a *apiRoleAccess) DeleteRole(ctx context.Context, ref *role.Reference, opts ...gotenresource.DeleteOption) error {
	if !ref.IsFullyQualified() {
		return status.Errorf(codes.InvalidArgument, "Reference %s is not fully specified", ref)
	}
	request := &role_client.DeleteRoleRequest{
		Name: &ref.Name,
	}
	_, err := a.client.DeleteRole(ctx, request)
	return err
}
func getParentAndFilter(fullFilter *role.Filter) (*role.Filter, *role.ParentName) {
	var withParentExtraction func(cnd role.FilterCondition) role.FilterCondition
	var resultParent *role.ParentName
	var resultFilter *role.Filter
	withParentExtraction = func(cnd role.FilterCondition) role.FilterCondition {
		switch tCnd := cnd.(type) {
		case *role.FilterConditionComposite:
			if tCnd.GetOperator() == gotenfilter.AND {
				withoutParentCnds := make([]role.FilterCondition, 0)
				for _, subCnd := range tCnd.Conditions {
					if subCndNoParent := withParentExtraction(subCnd); subCndNoParent != nil {
						withoutParentCnds = append(withoutParentCnds, subCndNoParent)
					}
				}
				if len(withoutParentCnds) == 0 {
					return nil
				}
				return role.AndFilterConditions(withoutParentCnds...)
			} else {
				return tCnd
			}
		case *role.FilterConditionCompare:
			if tCnd.GetOperator() == gotenfilter.Eq && tCnd.GetRawFieldPath().String() == "name" {
				nameValue := tCnd.GetRawValue().(*role.Name)
				if nameValue != nil && nameValue.ParentName.IsSpecified() {
					resultParent = &nameValue.ParentName
					if nameValue.IsFullyQualified() {
						return tCnd
					}
					return nil
				}
			}
			return tCnd
		default:
			return tCnd
		}
	}
	cndWithoutParent := withParentExtraction(fullFilter.GetCondition())
	if cndWithoutParent != nil {
		resultFilter = &role.Filter{FilterCondition: cndWithoutParent}
	}
	return resultFilter, resultParent
}

func init() {
	gotenaccess.GetRegistry().RegisterApiAccessConstructor(role.GetDescriptor(), func(cc grpc.ClientConnInterface) gotenresource.Access {
		return role.AsAnyCastAccess(NewApiRoleAccess(role_client.NewRoleServiceClient(cc)))
	})
}
