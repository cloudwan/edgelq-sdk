// Code generated by protoc-gen-goten-validate
// File: edgelq/iam/proto/v1/service_projects_management_custom.proto
// DO NOT EDIT!!!

package service_projects_management_client

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	gotenvalidate "github.com/cloudwan/goten-sdk/runtime/validate"
)

// proto imports
import (
	api "github.com/cloudwan/edgelq-sdk/common/api"
	iam_common "github.com/cloudwan/edgelq-sdk/iam/resources/v1/common"
	organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1/organization"
	project "github.com/cloudwan/edgelq-sdk/iam/resources/v1/project"
	role "github.com/cloudwan/edgelq-sdk/iam/resources/v1/role"
	service_account "github.com/cloudwan/edgelq-sdk/iam/resources/v1/service_account"
	service_account_key "github.com/cloudwan/edgelq-sdk/iam/resources/v1/service_account_key"
	meta_service "github.com/cloudwan/goten-sdk/meta-service/resources/v1/service"
	multi_region_policy "github.com/cloudwan/goten-sdk/types/multi_region_policy"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
)

var (
	_ = bytes.Equal
	_ = errors.New
	_ = fmt.Errorf
	_ = net.ParseIP
	_ = regexp.Match
	_ = strings.Split
	_ = time.Now
	_ = utf8.RuneCountInString
	_ = url.Parse
	_ = gotenvalidate.NewValidationError
)

// make sure we're using proto imports
var (
	_ = &api.Account{}
	_ = &iam_common.PCR{}
	_ = &organization.Organization{}
	_ = &project.Project{}
	_ = &role.Role{}
	_ = &service_account.ServiceAccount{}
	_ = &service_account_key.ServiceAccountKey{}
	_ = &fieldmaskpb.FieldMask{}
	_ = &meta_service.Service{}
	_ = &multi_region_policy.MultiRegionPolicy{}
)

func (obj *ListMyServiceProjectsRequest) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if !(obj.PageSize >= 0) {
		return gotenvalidate.NewValidationError("ListMyServiceProjectsRequest", "pageSize", obj.PageSize, "field must be greater or equal to 0", nil)
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *ListMyServiceProjectsResponse) GotenValidate() error {
	if obj == nil {
		return nil
	}
	for idx, elem := range obj.Projects {
		if subobj, ok := interface{}(elem).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("ListMyServiceProjectsResponse", "projects", obj.Projects[idx], "nested object validation failed", err)
			}
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *SetupServiceProjectRequest) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if obj.Title == "" {
		return gotenvalidate.NewValidationError("SetupServiceProjectRequest", "title", obj.Title, "field is required", nil)
	}
	if obj.MultiRegionPolicy == nil {
		return gotenvalidate.NewValidationError("SetupServiceProjectRequest", "multiRegionPolicy", obj.MultiRegionPolicy, "field is required", nil)
	}
	if subobj, ok := interface{}(obj.MultiRegionPolicy).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("SetupServiceProjectRequest", "multiRegionPolicy", obj.MultiRegionPolicy, "nested object validation failed", err)
		}
	}
	{
		rlen := utf8.RuneCountInString(obj.Description)
		if rlen > 256 {
			return gotenvalidate.NewValidationError("SetupServiceProjectRequest", "description", obj.Description, "field must contain at most 256 characters", nil)
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *ReserveServiceNameRequest) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if subobj, ok := interface{}(obj.AdminKey).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("ReserveServiceNameRequest", "adminKey", obj.AdminKey, "nested object validation failed", err)
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *ReserveServiceNameResponse) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if subobj, ok := interface{}(obj.NttAdminCredentials).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("ReserveServiceNameResponse", "nttAdminCredentials", obj.NttAdminCredentials, "nested object validation failed", err)
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *DeleteServiceReservationRequest) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *ListServiceReservationsRequest) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *ListServiceReservationsResponse) GotenValidate() error {
	if obj == nil {
		return nil
	}
	for idx, elem := range obj.Reservations {
		if subobj, ok := interface{}(elem).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("ListServiceReservationsResponse", "reservations", obj.Reservations[idx], "nested object validation failed", err)
			}
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *ListServiceReservationsResponse_Reservation) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *ListProjectServicesRequest) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *ListProjectServicesResponse) GotenValidate() error {
	if obj == nil {
		return nil
	}
	for idx, elem := range obj.Services {
		if subobj, ok := interface{}(elem).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("ListProjectServicesResponse", "services", obj.Services[idx], "nested object validation failed", err)
			}
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *AddRegionalAdminAccountForServicesRequest) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if subobj, ok := interface{}(obj.AdminKey).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("AddRegionalAdminAccountForServicesRequest", "adminKey", obj.AdminKey, "nested object validation failed", err)
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *AddRegionalAdminAccountForServicesResponse) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if subobj, ok := interface{}(obj.NttAdminCredentials).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("AddRegionalAdminAccountForServicesResponse", "nttAdminCredentials", obj.NttAdminCredentials, "nested object validation failed", err)
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
