// Code generated by protoc-gen-goten-go
// File: edgelq/iam/proto/v1/service_projects_management_custom.proto
// DO NOT EDIT!!!

package service_projects_management_client

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	api "github.com/cloudwan/edgelq-sdk/common/api"
	organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1/organization"
	project "github.com/cloudwan/edgelq-sdk/iam/resources/v1/project"
	role "github.com/cloudwan/edgelq-sdk/iam/resources/v1/role"
	service_account "github.com/cloudwan/edgelq-sdk/iam/resources/v1/service_account"
	service_account_key "github.com/cloudwan/edgelq-sdk/iam/resources/v1/service_account_key"
	meta_service "github.com/cloudwan/goten-sdk/meta-service/resources/v1/service"
	multi_region_policy "github.com/cloudwan/goten-sdk/types/multi_region_policy"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &api.Account{}
	_ = &organization.Organization{}
	_ = &project.Project{}
	_ = &role.Role{}
	_ = &service_account.ServiceAccount{}
	_ = &service_account_key.ServiceAccountKey{}
	_ = &fieldmaskpb.FieldMask{}
	_ = &meta_service.Service{}
	_ = &multi_region_policy.MultiRegionPolicy{}
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request message for method
// [ListMyServiceProjects][ntt.iam.v1.ListMyServiceProjects]
type ListMyServiceProjectsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Requested page size. Server may return fewer Projects than requested.
	// If unspecified, server will pick an appropriate default.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty" firestore:"pageSize"`
	// A token identifying a page of results the server should return.
	// Typically, this is the value of
	// [ListProjectsResponse.next_page_token][ntt.iam.v1.ListMyServiceProjectsResponse.next_page_token]
	PageToken *project.PagerCursor `protobuf:"bytes,3,opt,customtype=PagerCursor,name=page_token,json=pageToken,proto3" json:"page_token,omitempty" firestore:"pageToken"`
	// Order By -
	// https://cloud.google.com/apis/design/design_patterns#list_pagination list
	// of field path with order directive, either 'asc' or 'desc'. If direction is
	// not provided, 'asc' is assumed. e.g. "state.nested_field asc,
	// state.something.else desc, theme"
	OrderBy *project.OrderBy `protobuf:"bytes,4,opt,customtype=OrderBy,name=order_by,json=orderBy,proto3" json:"order_by,omitempty" firestore:"orderBy"`
	// Filter - filter results by field criteria. Simplified SQL-like syntax with
	// following operators:
	// <=, >=, =, !=, <, >, LIKE, CONTAINS (aliases CONTAIN, HAS, HAVE), IN, IS
	// [NOT] NULL | NaN . Combine conditions with OR | AND example: 'meta.labels
	// CONTAINS "severity:important" OR (state.last_error_time >
	// "2018-11-15T10:00:00Z" AND state.status = "ERROR")'
	Filter *project.Filter `protobuf:"bytes,5,opt,customtype=Filter,name=filter,proto3" json:"filter,omitempty" firestore:"filter"`
	// A FieldMask used to filter response fields. When present, only requested
	// fields will be present in each response item. Omitting field_mask results
	// will cause response items to contain all present fields.
	FieldMask *project.Project_FieldMask `protobuf:"bytes,6,opt,customtype=Project_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
}

func (m *ListMyServiceProjectsRequest) Reset() {
	*m = ListMyServiceProjectsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_iam_proto_v1_service_projects_management_custom_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ListMyServiceProjectsRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ListMyServiceProjectsRequest) ProtoMessage() {}

func (m *ListMyServiceProjectsRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_iam_proto_v1_service_projects_management_custom_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ListMyServiceProjectsRequest) GotenMessage() {}

// Deprecated, Use ListMyServiceProjectsRequest.ProtoReflect.Descriptor instead.
func (*ListMyServiceProjectsRequest) Descriptor() ([]byte, []int) {
	return edgelq_iam_proto_v1_service_projects_management_custom_proto_rawDescGZIP(), []int{0}
}

func (m *ListMyServiceProjectsRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ListMyServiceProjectsRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ListMyServiceProjectsRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ListMyServiceProjectsRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ListMyServiceProjectsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return int32(0)
}

func (m *ListMyServiceProjectsRequest) GetPageToken() *project.PagerCursor {
	if m != nil {
		return m.PageToken
	}
	return nil
}

func (m *ListMyServiceProjectsRequest) GetOrderBy() *project.OrderBy {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

func (m *ListMyServiceProjectsRequest) GetFilter() *project.Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *ListMyServiceProjectsRequest) GetFieldMask() *project.Project_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *ListMyServiceProjectsRequest) SetPageSize(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageSize", "ListMyServiceProjectsRequest"))
	}
	m.PageSize = fv
}

func (m *ListMyServiceProjectsRequest) SetPageToken(fv *project.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageToken", "ListMyServiceProjectsRequest"))
	}
	m.PageToken = fv
}

func (m *ListMyServiceProjectsRequest) SetOrderBy(fv *project.OrderBy) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OrderBy", "ListMyServiceProjectsRequest"))
	}
	m.OrderBy = fv
}

func (m *ListMyServiceProjectsRequest) SetFilter(fv *project.Filter) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Filter", "ListMyServiceProjectsRequest"))
	}
	m.Filter = fv
}

func (m *ListMyServiceProjectsRequest) SetFieldMask(fv *project.Project_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "ListMyServiceProjectsRequest"))
	}
	m.FieldMask = fv
}

// Response message for method
// [ListMyServiceProjects][ntt.iam.v1.ListMyServiceProjects]
type ListMyServiceProjectsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// The list of Projects
	Projects []*project.Project `protobuf:"bytes,1,rep,name=projects,proto3" json:"projects,omitempty" firestore:"projects"`
	// A token to retrieve previous page of results. Pass this value in the
	// [ListMyServiceProjectsRequest.page_token][ntt.iam.v1.ListMyServiceProjectsRequest.page_token]
	PrevPageToken *project.PagerCursor `protobuf:"bytes,3,opt,customtype=PagerCursor,name=prev_page_token,json=prevPageToken,proto3" json:"prev_page_token,omitempty" firestore:"prevPageToken"`
	// A token to retrieve next page of results. Pass this value in the
	// [ListMyServiceProjectsRequest.page_token][ntt.iam.v1.ListMyServiceProjectsRequest.page_token]
	NextPageToken *project.PagerCursor `protobuf:"bytes,4,opt,customtype=PagerCursor,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty" firestore:"nextPageToken"`
}

func (m *ListMyServiceProjectsResponse) Reset() {
	*m = ListMyServiceProjectsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_iam_proto_v1_service_projects_management_custom_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ListMyServiceProjectsResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ListMyServiceProjectsResponse) ProtoMessage() {}

func (m *ListMyServiceProjectsResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_iam_proto_v1_service_projects_management_custom_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ListMyServiceProjectsResponse) GotenMessage() {}

// Deprecated, Use ListMyServiceProjectsResponse.ProtoReflect.Descriptor instead.
func (*ListMyServiceProjectsResponse) Descriptor() ([]byte, []int) {
	return edgelq_iam_proto_v1_service_projects_management_custom_proto_rawDescGZIP(), []int{1}
}

func (m *ListMyServiceProjectsResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ListMyServiceProjectsResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ListMyServiceProjectsResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ListMyServiceProjectsResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ListMyServiceProjectsResponse) GetProjects() []*project.Project {
	if m != nil {
		return m.Projects
	}
	return nil
}

func (m *ListMyServiceProjectsResponse) GetPrevPageToken() *project.PagerCursor {
	if m != nil {
		return m.PrevPageToken
	}
	return nil
}

func (m *ListMyServiceProjectsResponse) GetNextPageToken() *project.PagerCursor {
	if m != nil {
		return m.NextPageToken
	}
	return nil
}

func (m *ListMyServiceProjectsResponse) SetProjects(fv []*project.Project) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Projects", "ListMyServiceProjectsResponse"))
	}
	m.Projects = fv
}

func (m *ListMyServiceProjectsResponse) SetPrevPageToken(fv *project.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PrevPageToken", "ListMyServiceProjectsResponse"))
	}
	m.PrevPageToken = fv
}

func (m *ListMyServiceProjectsResponse) SetNextPageToken(fv *project.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NextPageToken", "ListMyServiceProjectsResponse"))
	}
	m.NextPageToken = fv
}

// Request message for method
// [SetupServiceProject][ntt.iam.v1.SetupServiceProject]
type SetupServiceProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Project name - unlike in CreateProject, it is mandatory
	Name *project.Name `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty" firestore:"name"`
	// Project title
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty" firestore:"title"`
	// Optional parent organization
	ParentOrganization *organization.Reference `protobuf:"bytes,3,opt,customtype=Reference,name=parent_organization,json=parentOrganization,proto3" json:"parent_organization,omitempty" firestore:"parentOrganization"`
	// Multi region policy - it will have to match with Service regions later on.
	MultiRegionPolicy *multi_region_policy.MultiRegionPolicy `protobuf:"bytes,4,opt,name=multi_region_policy,json=multiRegionPolicy,proto3" json:"multi_region_policy,omitempty" firestore:"multiRegionPolicy"`
}

func (m *SetupServiceProjectRequest) Reset() {
	*m = SetupServiceProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_iam_proto_v1_service_projects_management_custom_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *SetupServiceProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*SetupServiceProjectRequest) ProtoMessage() {}

func (m *SetupServiceProjectRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_iam_proto_v1_service_projects_management_custom_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*SetupServiceProjectRequest) GotenMessage() {}

// Deprecated, Use SetupServiceProjectRequest.ProtoReflect.Descriptor instead.
func (*SetupServiceProjectRequest) Descriptor() ([]byte, []int) {
	return edgelq_iam_proto_v1_service_projects_management_custom_proto_rawDescGZIP(), []int{2}
}

func (m *SetupServiceProjectRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *SetupServiceProjectRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *SetupServiceProjectRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *SetupServiceProjectRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *SetupServiceProjectRequest) GetName() *project.Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *SetupServiceProjectRequest) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *SetupServiceProjectRequest) GetParentOrganization() *organization.Reference {
	if m != nil {
		return m.ParentOrganization
	}
	return nil
}

func (m *SetupServiceProjectRequest) GetMultiRegionPolicy() *multi_region_policy.MultiRegionPolicy {
	if m != nil {
		return m.MultiRegionPolicy
	}
	return nil
}

func (m *SetupServiceProjectRequest) SetName(fv *project.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "SetupServiceProjectRequest"))
	}
	m.Name = fv
}

func (m *SetupServiceProjectRequest) SetTitle(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Title", "SetupServiceProjectRequest"))
	}
	m.Title = fv
}

func (m *SetupServiceProjectRequest) SetParentOrganization(fv *organization.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ParentOrganization", "SetupServiceProjectRequest"))
	}
	m.ParentOrganization = fv
}

func (m *SetupServiceProjectRequest) SetMultiRegionPolicy(fv *multi_region_policy.MultiRegionPolicy) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MultiRegionPolicy", "SetupServiceProjectRequest"))
	}
	m.MultiRegionPolicy = fv
}

// Request message for method
// [ReserveServiceName][ntt.iam.v1.ReserveServiceName]
type ReserveServiceNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of the service project where reservation should be made.
	Name *project.Name `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty" firestore:"name"`
	// Service name to reserve
	Service *meta_service.Name `protobuf:"bytes,2,opt,customtype=Name,name=service,proto3" json:"service,omitempty" firestore:"service"`
	// Service account name that will be an admin for this Service. If it does not
	// exist, it will be created.
	AdminAccount *service_account.Name `protobuf:"bytes,3,opt,customtype=Name,name=admin_account,json=adminAccount,proto3" json:"admin_account,omitempty" firestore:"adminAccount"`
	// Optional admin account key - can be skipped if admin_account already exists
	// and has key already known by user. If provided, then new ServiceAccountKey
	// will be created. If public key was provided in request, then server will
	// use it. Otherwise it will generate private/public pair and provide both in
	// response.
	AdminKey *service_account_key.ServiceAccountKey `protobuf:"bytes,4,opt,name=admin_key,json=adminKey,proto3" json:"admin_key,omitempty" firestore:"adminKey"`
	// Optional Role admin_account will have in the service project.
	// When service is eventually created, admin_account will have full ownership
	// of the Service. However, it wont be able to access Service Project freely -
	// by default minimal role is assigned, that allows to send usage metrics (for
	// example). In some cases it may be necessary for admin_account to have
	// larger access to the service project, for example for devices management.
	AdminAccountProjectRole *role.Name `protobuf:"bytes,5,opt,customtype=Name,name=admin_account_project_role,json=adminAccountProjectRole,proto3" json:"admin_account_project_role,omitempty" firestore:"adminAccountProjectRole"`
}

func (m *ReserveServiceNameRequest) Reset() {
	*m = ReserveServiceNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_iam_proto_v1_service_projects_management_custom_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ReserveServiceNameRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ReserveServiceNameRequest) ProtoMessage() {}

func (m *ReserveServiceNameRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_iam_proto_v1_service_projects_management_custom_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ReserveServiceNameRequest) GotenMessage() {}

// Deprecated, Use ReserveServiceNameRequest.ProtoReflect.Descriptor instead.
func (*ReserveServiceNameRequest) Descriptor() ([]byte, []int) {
	return edgelq_iam_proto_v1_service_projects_management_custom_proto_rawDescGZIP(), []int{3}
}

func (m *ReserveServiceNameRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ReserveServiceNameRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ReserveServiceNameRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ReserveServiceNameRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ReserveServiceNameRequest) GetName() *project.Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *ReserveServiceNameRequest) GetService() *meta_service.Name {
	if m != nil {
		return m.Service
	}
	return nil
}

func (m *ReserveServiceNameRequest) GetAdminAccount() *service_account.Name {
	if m != nil {
		return m.AdminAccount
	}
	return nil
}

func (m *ReserveServiceNameRequest) GetAdminKey() *service_account_key.ServiceAccountKey {
	if m != nil {
		return m.AdminKey
	}
	return nil
}

func (m *ReserveServiceNameRequest) GetAdminAccountProjectRole() *role.Name {
	if m != nil {
		return m.AdminAccountProjectRole
	}
	return nil
}

func (m *ReserveServiceNameRequest) SetName(fv *project.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "ReserveServiceNameRequest"))
	}
	m.Name = fv
}

func (m *ReserveServiceNameRequest) SetService(fv *meta_service.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Service", "ReserveServiceNameRequest"))
	}
	m.Service = fv
}

func (m *ReserveServiceNameRequest) SetAdminAccount(fv *service_account.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AdminAccount", "ReserveServiceNameRequest"))
	}
	m.AdminAccount = fv
}

func (m *ReserveServiceNameRequest) SetAdminKey(fv *service_account_key.ServiceAccountKey) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AdminKey", "ReserveServiceNameRequest"))
	}
	m.AdminKey = fv
}

func (m *ReserveServiceNameRequest) SetAdminAccountProjectRole(fv *role.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AdminAccountProjectRole", "ReserveServiceNameRequest"))
	}
	m.AdminAccountProjectRole = fv
}

// Response message for method
// [ReserveServiceName][ntt.iam.v1.ReserveServiceName]
type ReserveServiceNameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Service account admin credentials are provided if admin_key was populated
	// in the request object. It will have private key data if public key was not
	// provided in the request admin_key. JSON representation of this object must
	// be saved by the caller as ntt-credentials.json file - it will be required
	// during actual application deployment. If user generated private/public pair
	// themselves (and proved public in request object), before saving JSON user
	// will need to populate private key string themselves in the final file. In
	// case of lost credentials, user will need to send DeleteServiceAccountKey
	// and CreateServiceAccountKey requests for admin ServiceAccount - and craft
	// another credentials.
	NttAdminCredentials *api.ServiceAccount `protobuf:"bytes,1,opt,name=ntt_admin_credentials,json=nttAdminCredentials,proto3" json:"ntt_admin_credentials,omitempty" firestore:"nttAdminCredentials"`
}

func (m *ReserveServiceNameResponse) Reset() {
	*m = ReserveServiceNameResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_iam_proto_v1_service_projects_management_custom_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ReserveServiceNameResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ReserveServiceNameResponse) ProtoMessage() {}

func (m *ReserveServiceNameResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_iam_proto_v1_service_projects_management_custom_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ReserveServiceNameResponse) GotenMessage() {}

// Deprecated, Use ReserveServiceNameResponse.ProtoReflect.Descriptor instead.
func (*ReserveServiceNameResponse) Descriptor() ([]byte, []int) {
	return edgelq_iam_proto_v1_service_projects_management_custom_proto_rawDescGZIP(), []int{4}
}

func (m *ReserveServiceNameResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ReserveServiceNameResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ReserveServiceNameResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ReserveServiceNameResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ReserveServiceNameResponse) GetNttAdminCredentials() *api.ServiceAccount {
	if m != nil {
		return m.NttAdminCredentials
	}
	return nil
}

func (m *ReserveServiceNameResponse) SetNttAdminCredentials(fv *api.ServiceAccount) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NttAdminCredentials", "ReserveServiceNameResponse"))
	}
	m.NttAdminCredentials = fv
}

// Response message for method
// [DeleteServiceReservation][ntt.iam.v1.DeleteServiceReservation]
type DeleteServiceReservationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of the service project where reservation exists
	Name *project.Name `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty" firestore:"name"`
	// Service name to remove from reserved
	Service *meta_service.Name `protobuf:"bytes,2,opt,customtype=Name,name=service,proto3" json:"service,omitempty" firestore:"service"`
}

func (m *DeleteServiceReservationRequest) Reset() {
	*m = DeleteServiceReservationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_iam_proto_v1_service_projects_management_custom_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *DeleteServiceReservationRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*DeleteServiceReservationRequest) ProtoMessage() {}

func (m *DeleteServiceReservationRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_iam_proto_v1_service_projects_management_custom_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*DeleteServiceReservationRequest) GotenMessage() {}

// Deprecated, Use DeleteServiceReservationRequest.ProtoReflect.Descriptor instead.
func (*DeleteServiceReservationRequest) Descriptor() ([]byte, []int) {
	return edgelq_iam_proto_v1_service_projects_management_custom_proto_rawDescGZIP(), []int{5}
}

func (m *DeleteServiceReservationRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *DeleteServiceReservationRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *DeleteServiceReservationRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *DeleteServiceReservationRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *DeleteServiceReservationRequest) GetName() *project.Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *DeleteServiceReservationRequest) GetService() *meta_service.Name {
	if m != nil {
		return m.Service
	}
	return nil
}

func (m *DeleteServiceReservationRequest) SetName(fv *project.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "DeleteServiceReservationRequest"))
	}
	m.Name = fv
}

func (m *DeleteServiceReservationRequest) SetService(fv *meta_service.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Service", "DeleteServiceReservationRequest"))
	}
	m.Service = fv
}

// Request message for method
// [ListServiceReservations][ntt.iam.v1.ListServiceReservations]
type ListServiceReservationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of the Service Project for which we want to see reservations.
	Name *project.Name `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty" firestore:"name"`
}

func (m *ListServiceReservationsRequest) Reset() {
	*m = ListServiceReservationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_iam_proto_v1_service_projects_management_custom_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ListServiceReservationsRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ListServiceReservationsRequest) ProtoMessage() {}

func (m *ListServiceReservationsRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_iam_proto_v1_service_projects_management_custom_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ListServiceReservationsRequest) GotenMessage() {}

// Deprecated, Use ListServiceReservationsRequest.ProtoReflect.Descriptor instead.
func (*ListServiceReservationsRequest) Descriptor() ([]byte, []int) {
	return edgelq_iam_proto_v1_service_projects_management_custom_proto_rawDescGZIP(), []int{6}
}

func (m *ListServiceReservationsRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ListServiceReservationsRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ListServiceReservationsRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ListServiceReservationsRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ListServiceReservationsRequest) GetName() *project.Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *ListServiceReservationsRequest) SetName(fv *project.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "ListServiceReservationsRequest"))
	}
	m.Name = fv
}

// Response message for method
// [ListServiceReservations][ntt.iam.v1.ListServiceReservations]
type ListServiceReservationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// List of reserved services with corresponding admin accounts
	Reservations []*ListServiceReservationsResponse_Reservation `protobuf:"bytes,1,rep,name=reservations,proto3" json:"reservations,omitempty" firestore:"reservations"`
}

func (m *ListServiceReservationsResponse) Reset() {
	*m = ListServiceReservationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_iam_proto_v1_service_projects_management_custom_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ListServiceReservationsResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ListServiceReservationsResponse) ProtoMessage() {}

func (m *ListServiceReservationsResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_iam_proto_v1_service_projects_management_custom_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ListServiceReservationsResponse) GotenMessage() {}

// Deprecated, Use ListServiceReservationsResponse.ProtoReflect.Descriptor instead.
func (*ListServiceReservationsResponse) Descriptor() ([]byte, []int) {
	return edgelq_iam_proto_v1_service_projects_management_custom_proto_rawDescGZIP(), []int{7}
}

func (m *ListServiceReservationsResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ListServiceReservationsResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ListServiceReservationsResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ListServiceReservationsResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ListServiceReservationsResponse) GetReservations() []*ListServiceReservationsResponse_Reservation {
	if m != nil {
		return m.Reservations
	}
	return nil
}

func (m *ListServiceReservationsResponse) SetReservations(fv []*ListServiceReservationsResponse_Reservation) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Reservations", "ListServiceReservationsResponse"))
	}
	m.Reservations = fv
}

// Request message for method
// [ListProjectServices][ntt.iam.v1.ListProjectServices]
type ListProjectServicesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of the Service Project for which we want to see services.
	Name *project.Name `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty" firestore:"name"`
}

func (m *ListProjectServicesRequest) Reset() {
	*m = ListProjectServicesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_iam_proto_v1_service_projects_management_custom_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ListProjectServicesRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ListProjectServicesRequest) ProtoMessage() {}

func (m *ListProjectServicesRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_iam_proto_v1_service_projects_management_custom_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ListProjectServicesRequest) GotenMessage() {}

// Deprecated, Use ListProjectServicesRequest.ProtoReflect.Descriptor instead.
func (*ListProjectServicesRequest) Descriptor() ([]byte, []int) {
	return edgelq_iam_proto_v1_service_projects_management_custom_proto_rawDescGZIP(), []int{8}
}

func (m *ListProjectServicesRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ListProjectServicesRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ListProjectServicesRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ListProjectServicesRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ListProjectServicesRequest) GetName() *project.Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *ListProjectServicesRequest) SetName(fv *project.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "ListProjectServicesRequest"))
	}
	m.Name = fv
}

// Response message for method
// [ListProjectServices][ntt.iam.v1.ListProjectServices]
type ListProjectServicesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// List of services
	Services []*meta_service.Service `protobuf:"bytes,1,rep,name=services,proto3" json:"services,omitempty" firestore:"services"`
}

func (m *ListProjectServicesResponse) Reset() {
	*m = ListProjectServicesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_iam_proto_v1_service_projects_management_custom_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ListProjectServicesResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ListProjectServicesResponse) ProtoMessage() {}

func (m *ListProjectServicesResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_iam_proto_v1_service_projects_management_custom_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ListProjectServicesResponse) GotenMessage() {}

// Deprecated, Use ListProjectServicesResponse.ProtoReflect.Descriptor instead.
func (*ListProjectServicesResponse) Descriptor() ([]byte, []int) {
	return edgelq_iam_proto_v1_service_projects_management_custom_proto_rawDescGZIP(), []int{9}
}

func (m *ListProjectServicesResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ListProjectServicesResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ListProjectServicesResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ListProjectServicesResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ListProjectServicesResponse) GetServices() []*meta_service.Service {
	if m != nil {
		return m.Services
	}
	return nil
}

func (m *ListProjectServicesResponse) SetServices(fv []*meta_service.Service) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Services", "ListProjectServicesResponse"))
	}
	m.Services = fv
}

// Request message for method
// [AddRegionalAdminAccountForServices][ntt.iam.v1.AddRegionalAdminAccountForServices]
type AddRegionalAdminAccountForServicesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Parent of ServiceAccount containing Service project and Region.
	// If region is not enabled in project, it will be for this request.
	Parent *service_account.ParentName `protobuf:"bytes,1,opt,customtype=ParentName,name=parent,proto3" json:"parent,omitempty" firestore:"parent"`
	// List of services in which admin account must participate. They must all
	// belong to the project indicated in the parent.
	Services []*meta_service.Name `protobuf:"bytes,2,rep,customtype=Name,name=services,proto3" json:"services,omitempty" firestore:"services"`
	// Regional service account name that will be an admin for this Service. If it
	// does not exist, it will be created.
	AdminAccount *service_account.Name `protobuf:"bytes,3,opt,customtype=Name,name=admin_account,json=adminAccount,proto3" json:"admin_account,omitempty" firestore:"adminAccount"`
	// Optional admin account key - can be skipped if admin_account already exists
	// and has key already known by user. If provided, then new ServiceAccountKey
	// will be created. If public key was provided in request, then server will
	// use it. Otherwise it will generate private/public pair and provide both in
	// response.
	AdminKey *service_account_key.ServiceAccountKey `protobuf:"bytes,4,opt,name=admin_key,json=adminKey,proto3" json:"admin_key,omitempty" firestore:"adminKey"`
	// Optional Role admin_account will have in the service project.
	// When service is eventually created, admin_account will have full ownership
	// of the Service. However, it wont be able to access Service Project freely -
	// by default minimal role is assigned, that allows to send usage metrics (for
	// example). In some cases it may be necessary for admin_account to have
	// larger access to the service project, for example for devices management.
	AdminAccountProjectRole *role.Name `protobuf:"bytes,5,opt,customtype=Name,name=admin_account_project_role,json=adminAccountProjectRole,proto3" json:"admin_account_project_role,omitempty" firestore:"adminAccountProjectRole"`
}

func (m *AddRegionalAdminAccountForServicesRequest) Reset() {
	*m = AddRegionalAdminAccountForServicesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_iam_proto_v1_service_projects_management_custom_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *AddRegionalAdminAccountForServicesRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*AddRegionalAdminAccountForServicesRequest) ProtoMessage() {}

func (m *AddRegionalAdminAccountForServicesRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_iam_proto_v1_service_projects_management_custom_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*AddRegionalAdminAccountForServicesRequest) GotenMessage() {}

// Deprecated, Use AddRegionalAdminAccountForServicesRequest.ProtoReflect.Descriptor instead.
func (*AddRegionalAdminAccountForServicesRequest) Descriptor() ([]byte, []int) {
	return edgelq_iam_proto_v1_service_projects_management_custom_proto_rawDescGZIP(), []int{10}
}

func (m *AddRegionalAdminAccountForServicesRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *AddRegionalAdminAccountForServicesRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *AddRegionalAdminAccountForServicesRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *AddRegionalAdminAccountForServicesRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *AddRegionalAdminAccountForServicesRequest) GetParent() *service_account.ParentName {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *AddRegionalAdminAccountForServicesRequest) GetServices() []*meta_service.Name {
	if m != nil {
		return m.Services
	}
	return nil
}

func (m *AddRegionalAdminAccountForServicesRequest) GetAdminAccount() *service_account.Name {
	if m != nil {
		return m.AdminAccount
	}
	return nil
}

func (m *AddRegionalAdminAccountForServicesRequest) GetAdminKey() *service_account_key.ServiceAccountKey {
	if m != nil {
		return m.AdminKey
	}
	return nil
}

func (m *AddRegionalAdminAccountForServicesRequest) GetAdminAccountProjectRole() *role.Name {
	if m != nil {
		return m.AdminAccountProjectRole
	}
	return nil
}

func (m *AddRegionalAdminAccountForServicesRequest) SetParent(fv *service_account.ParentName) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Parent", "AddRegionalAdminAccountForServicesRequest"))
	}
	m.Parent = fv
}

func (m *AddRegionalAdminAccountForServicesRequest) SetServices(fv []*meta_service.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Services", "AddRegionalAdminAccountForServicesRequest"))
	}
	m.Services = fv
}

func (m *AddRegionalAdminAccountForServicesRequest) SetAdminAccount(fv *service_account.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AdminAccount", "AddRegionalAdminAccountForServicesRequest"))
	}
	m.AdminAccount = fv
}

func (m *AddRegionalAdminAccountForServicesRequest) SetAdminKey(fv *service_account_key.ServiceAccountKey) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AdminKey", "AddRegionalAdminAccountForServicesRequest"))
	}
	m.AdminKey = fv
}

func (m *AddRegionalAdminAccountForServicesRequest) SetAdminAccountProjectRole(fv *role.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AdminAccountProjectRole", "AddRegionalAdminAccountForServicesRequest"))
	}
	m.AdminAccountProjectRole = fv
}

// Response message for method
// [AddRegionalAdminAccountForServices][ntt.iam.v1.AddRegionalAdminAccountForServices]
type AddRegionalAdminAccountForServicesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Service account admin credentials are provided if admin_key was populated
	// in the request object. It will have private key data if public key was not
	// provided in the request admin_key. JSON representation of this object must
	// be saved by the caller as ntt-credentials.json file - it will be required
	// during actual regional application deployment. If user generated
	// private/public pair themselves (and proved public in request object),
	// before saving JSON user will need to populate private key string themselves
	// in the final file. In case of lost credentials, user will need to send
	// DeleteServiceAccountKey and CreateServiceAccountKey requests for admin
	// ServiceAccount - and craft another credentials.
	NttAdminCredentials *api.ServiceAccount `protobuf:"bytes,1,opt,name=ntt_admin_credentials,json=nttAdminCredentials,proto3" json:"ntt_admin_credentials,omitempty" firestore:"nttAdminCredentials"`
}

func (m *AddRegionalAdminAccountForServicesResponse) Reset() {
	*m = AddRegionalAdminAccountForServicesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_iam_proto_v1_service_projects_management_custom_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *AddRegionalAdminAccountForServicesResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*AddRegionalAdminAccountForServicesResponse) ProtoMessage() {}

func (m *AddRegionalAdminAccountForServicesResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_iam_proto_v1_service_projects_management_custom_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*AddRegionalAdminAccountForServicesResponse) GotenMessage() {}

// Deprecated, Use AddRegionalAdminAccountForServicesResponse.ProtoReflect.Descriptor instead.
func (*AddRegionalAdminAccountForServicesResponse) Descriptor() ([]byte, []int) {
	return edgelq_iam_proto_v1_service_projects_management_custom_proto_rawDescGZIP(), []int{11}
}

func (m *AddRegionalAdminAccountForServicesResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *AddRegionalAdminAccountForServicesResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *AddRegionalAdminAccountForServicesResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *AddRegionalAdminAccountForServicesResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *AddRegionalAdminAccountForServicesResponse) GetNttAdminCredentials() *api.ServiceAccount {
	if m != nil {
		return m.NttAdminCredentials
	}
	return nil
}

func (m *AddRegionalAdminAccountForServicesResponse) SetNttAdminCredentials(fv *api.ServiceAccount) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NttAdminCredentials", "AddRegionalAdminAccountForServicesResponse"))
	}
	m.NttAdminCredentials = fv
}

type ListServiceReservationsResponse_Reservation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Reserved service name allowed to be created by admin account
	Service *meta_service.Name `protobuf:"bytes,1,opt,customtype=Name,name=service,proto3" json:"service,omitempty" firestore:"service"`
	// Service account name that will be an admin for this Service.
	AdminAccount *service_account.Name `protobuf:"bytes,2,opt,customtype=Name,name=admin_account,json=adminAccount,proto3" json:"admin_account,omitempty" firestore:"adminAccount"`
}

func (m *ListServiceReservationsResponse_Reservation) Reset() {
	*m = ListServiceReservationsResponse_Reservation{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_iam_proto_v1_service_projects_management_custom_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ListServiceReservationsResponse_Reservation) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ListServiceReservationsResponse_Reservation) ProtoMessage() {}

func (m *ListServiceReservationsResponse_Reservation) ProtoReflect() preflect.Message {
	mi := &edgelq_iam_proto_v1_service_projects_management_custom_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ListServiceReservationsResponse_Reservation) GotenMessage() {}

// Deprecated, Use ListServiceReservationsResponse_Reservation.ProtoReflect.Descriptor instead.
func (*ListServiceReservationsResponse_Reservation) Descriptor() ([]byte, []int) {
	return edgelq_iam_proto_v1_service_projects_management_custom_proto_rawDescGZIP(), []int{7, 0}
}

func (m *ListServiceReservationsResponse_Reservation) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ListServiceReservationsResponse_Reservation) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ListServiceReservationsResponse_Reservation) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ListServiceReservationsResponse_Reservation) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ListServiceReservationsResponse_Reservation) GetService() *meta_service.Name {
	if m != nil {
		return m.Service
	}
	return nil
}

func (m *ListServiceReservationsResponse_Reservation) GetAdminAccount() *service_account.Name {
	if m != nil {
		return m.AdminAccount
	}
	return nil
}

func (m *ListServiceReservationsResponse_Reservation) SetService(fv *meta_service.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Service", "ListServiceReservationsResponse_Reservation"))
	}
	m.Service = fv
}

func (m *ListServiceReservationsResponse_Reservation) SetAdminAccount(fv *service_account.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AdminAccount", "ListServiceReservationsResponse_Reservation"))
	}
	m.AdminAccount = fv
}

var edgelq_iam_proto_v1_service_projects_management_custom_proto preflect.FileDescriptor

var edgelq_iam_proto_v1_service_projects_management_custom_proto_rawDesc = []byte{
	0x0a, 0x3c, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a,
	0x6e, 0x74, 0x74, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65,
	0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f,
	0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x74,
	0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x67, 0x6f,
	0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x6d, 0x65, 0x74, 0x61,
	0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76,
	0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x25, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x65, 0x64, 0x67,
	0x65, 0x6c, 0x71, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31,
	0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28,
	0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71,
	0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6b, 0x65,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x96, 0x02, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74,
	0x4d, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0xca, 0xc6, 0x27,
	0x04, 0x12, 0x02, 0x2a, 0x00, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x2e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0f, 0xb2, 0xda, 0x21, 0x0b, 0x22, 0x09, 0x0a, 0x07, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x2a, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0f, 0xb2, 0xda, 0x21, 0x0b, 0x2a, 0x09, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x27, 0x0a, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xb2, 0xda, 0x21,
	0x0b, 0x1a, 0x09, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61,
	0x73, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x4d, 0x61, 0x73, 0x6b, 0x42, 0x0f, 0xb2, 0xda, 0x21, 0x0b, 0x32, 0x09, 0x0a, 0x07, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b,
	0x22, 0xc2, 0x01, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x12, 0x37, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xb2, 0xda,
	0x21, 0x0b, 0x22, 0x09, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x0d, 0x70,
	0x72, 0x65, 0x76, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x37, 0x0a, 0x0f,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xb2, 0xda, 0x21, 0x0b, 0x22, 0x09, 0x0a, 0x07, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x84, 0x02, 0x0a, 0x1a, 0x53, 0x65, 0x74, 0x75, 0x70, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0f, 0xb2, 0xda, 0x21, 0x0b, 0x0a, 0x09, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xca, 0xc6, 0x27, 0x04, 0x2a, 0x02,
	0x68, 0x01, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x47, 0x0a, 0x13, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xb2, 0xda, 0x21, 0x12, 0x12, 0x10, 0x0a, 0x0c,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x01, 0x52, 0x12,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x13, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42,
	0x08, 0xca, 0xc6, 0x27, 0x04, 0x62, 0x02, 0x08, 0x01, 0x52, 0x11, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0xbe, 0x02, 0x0a,
	0x19, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xb2, 0xda, 0x21, 0x0b, 0x0a, 0x09,
	0x0a, 0x07, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x38, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1e, 0xb2, 0xda, 0x21, 0x1a, 0x0a, 0x18, 0x0a, 0x16, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x67,
	0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x0d, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x16, 0xb2, 0xda, 0x21, 0x12, 0x0a, 0x10, 0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0c, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x09, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x08, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x4b,
	0x65, 0x79, 0x12, 0x49, 0x0a, 0x1a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x6f, 0x6c, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xb2, 0xda, 0x21, 0x08, 0x0a, 0x06, 0x0a, 0x04,
	0x52, 0x6f, 0x6c, 0x65, 0x52, 0x17, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x22, 0x69, 0x0a,
	0x1a, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x15, 0x6e,
	0x74, 0x74, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x13, 0x6e, 0x74, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x22, 0x80, 0x01, 0x0a, 0x1f, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xb2, 0xda, 0x21, 0x0b,
	0x0a, 0x09, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x38, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1e, 0xb2, 0xda, 0x21, 0x1a, 0x0a, 0x18, 0x0a, 0x16, 0x6d, 0x65, 0x74, 0x61,
	0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x45, 0x0a, 0x1e, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xb2, 0xda, 0x21,
	0x0b, 0x0a, 0x09, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x85, 0x02, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x1a, 0x84, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xb2, 0xda, 0x21, 0x1a, 0x0a, 0x18, 0x0a, 0x16, 0x6d, 0x65,
	0x74, 0x61, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3b, 0x0a,
	0x0d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xb2, 0xda, 0x21, 0x12, 0x0a, 0x10, 0x0a, 0x0e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0c, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x41, 0x0a, 0x1a, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xb2, 0xda, 0x21, 0x0b, 0x0a, 0x09, 0x0a, 0x07,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x51, 0x0a,
	0x1b, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x08,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x22, 0xdb, 0x02, 0x0a, 0x29, 0x41, 0x64, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e,
	0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16,
	0xb2, 0xda, 0x21, 0x12, 0x3a, 0x10, 0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x3a,
	0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x1e, 0xb2, 0xda, 0x21, 0x1a, 0x0a, 0x18, 0x0a, 0x16, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x67,
	0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x0d, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x16, 0xb2, 0xda, 0x21, 0x12, 0x0a, 0x10, 0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0c, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x09, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x08, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x4b, 0x65, 0x79, 0x12, 0x49, 0x0a, 0x1a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x6f, 0x6c,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xb2, 0xda, 0x21, 0x08, 0x0a, 0x06, 0x0a,
	0x04, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x17, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x22, 0x79,
	0x0a, 0x2a, 0x41, 0x64, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x15,
	0x6e, 0x74, 0x74, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x13, 0x6e, 0x74, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x42, 0xa8, 0x01, 0xe8, 0xde, 0x21, 0x00,
	0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x62,
	0x2e, 0x76, 0x31, 0x42, 0x24, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x00, 0x5a, 0x67, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e,
	0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x3b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	edgelq_iam_proto_v1_service_projects_management_custom_proto_rawDescOnce sync.Once
	edgelq_iam_proto_v1_service_projects_management_custom_proto_rawDescData = edgelq_iam_proto_v1_service_projects_management_custom_proto_rawDesc
)

func edgelq_iam_proto_v1_service_projects_management_custom_proto_rawDescGZIP() []byte {
	edgelq_iam_proto_v1_service_projects_management_custom_proto_rawDescOnce.Do(func() {
		edgelq_iam_proto_v1_service_projects_management_custom_proto_rawDescData = protoimpl.X.CompressGZIP(edgelq_iam_proto_v1_service_projects_management_custom_proto_rawDescData)
	})
	return edgelq_iam_proto_v1_service_projects_management_custom_proto_rawDescData
}

var edgelq_iam_proto_v1_service_projects_management_custom_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var edgelq_iam_proto_v1_service_projects_management_custom_proto_goTypes = []interface{}{
	(*ListMyServiceProjectsRequest)(nil),                // 0: ntt.iam.v1.ListMyServiceProjectsRequest
	(*ListMyServiceProjectsResponse)(nil),               // 1: ntt.iam.v1.ListMyServiceProjectsResponse
	(*SetupServiceProjectRequest)(nil),                  // 2: ntt.iam.v1.SetupServiceProjectRequest
	(*ReserveServiceNameRequest)(nil),                   // 3: ntt.iam.v1.ReserveServiceNameRequest
	(*ReserveServiceNameResponse)(nil),                  // 4: ntt.iam.v1.ReserveServiceNameResponse
	(*DeleteServiceReservationRequest)(nil),             // 5: ntt.iam.v1.DeleteServiceReservationRequest
	(*ListServiceReservationsRequest)(nil),              // 6: ntt.iam.v1.ListServiceReservationsRequest
	(*ListServiceReservationsResponse)(nil),             // 7: ntt.iam.v1.ListServiceReservationsResponse
	(*ListProjectServicesRequest)(nil),                  // 8: ntt.iam.v1.ListProjectServicesRequest
	(*ListProjectServicesResponse)(nil),                 // 9: ntt.iam.v1.ListProjectServicesResponse
	(*AddRegionalAdminAccountForServicesRequest)(nil),   // 10: ntt.iam.v1.AddRegionalAdminAccountForServicesRequest
	(*AddRegionalAdminAccountForServicesResponse)(nil),  // 11: ntt.iam.v1.AddRegionalAdminAccountForServicesResponse
	(*ListServiceReservationsResponse_Reservation)(nil), // 12: ntt.iam.v1.ListServiceReservationsResponse.Reservation
	(*project.Project_FieldMask)(nil),                   // 13: ntt.iam.v1.Project_FieldMask
	(*project.Project)(nil),                             // 14: ntt.iam.v1.Project
	(*multi_region_policy.MultiRegionPolicy)(nil),       // 15: goten.types.MultiRegionPolicy
	(*service_account_key.ServiceAccountKey)(nil),       // 16: ntt.iam.v1.ServiceAccountKey
	(*api.ServiceAccount)(nil),                          // 17: ntt.api.ServiceAccount
	(*meta_service.Service)(nil),                        // 18: goten.meta.v1.Service
}
var edgelq_iam_proto_v1_service_projects_management_custom_proto_depIdxs = []int32{
	13, // 0: ntt.iam.v1.ListMyServiceProjectsRequest.field_mask:type_name -> ntt.iam.v1.Project_FieldMask
	14, // 1: ntt.iam.v1.ListMyServiceProjectsResponse.projects:type_name -> ntt.iam.v1.Project
	15, // 2: ntt.iam.v1.SetupServiceProjectRequest.multi_region_policy:type_name -> goten.types.MultiRegionPolicy
	16, // 3: ntt.iam.v1.ReserveServiceNameRequest.admin_key:type_name -> ntt.iam.v1.ServiceAccountKey
	17, // 4: ntt.iam.v1.ReserveServiceNameResponse.ntt_admin_credentials:type_name -> ntt.api.ServiceAccount
	12, // 5: ntt.iam.v1.ListServiceReservationsResponse.reservations:type_name -> ntt.iam.v1.ListServiceReservationsResponse.Reservation
	18, // 6: ntt.iam.v1.ListProjectServicesResponse.services:type_name -> goten.meta.v1.Service
	16, // 7: ntt.iam.v1.AddRegionalAdminAccountForServicesRequest.admin_key:type_name -> ntt.iam.v1.ServiceAccountKey
	17, // 8: ntt.iam.v1.AddRegionalAdminAccountForServicesResponse.ntt_admin_credentials:type_name -> ntt.api.ServiceAccount
	9,  // [9:9] is the sub-list for method output_type
	9,  // [9:9] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { edgelq_iam_proto_v1_service_projects_management_custom_proto_init() }
func edgelq_iam_proto_v1_service_projects_management_custom_proto_init() {
	if edgelq_iam_proto_v1_service_projects_management_custom_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		edgelq_iam_proto_v1_service_projects_management_custom_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMyServiceProjectsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_iam_proto_v1_service_projects_management_custom_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMyServiceProjectsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_iam_proto_v1_service_projects_management_custom_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetupServiceProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_iam_proto_v1_service_projects_management_custom_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReserveServiceNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_iam_proto_v1_service_projects_management_custom_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReserveServiceNameResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_iam_proto_v1_service_projects_management_custom_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteServiceReservationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_iam_proto_v1_service_projects_management_custom_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListServiceReservationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_iam_proto_v1_service_projects_management_custom_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListServiceReservationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_iam_proto_v1_service_projects_management_custom_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProjectServicesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_iam_proto_v1_service_projects_management_custom_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProjectServicesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_iam_proto_v1_service_projects_management_custom_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddRegionalAdminAccountForServicesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_iam_proto_v1_service_projects_management_custom_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddRegionalAdminAccountForServicesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_iam_proto_v1_service_projects_management_custom_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListServiceReservationsResponse_Reservation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: edgelq_iam_proto_v1_service_projects_management_custom_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           edgelq_iam_proto_v1_service_projects_management_custom_proto_goTypes,
		DependencyIndexes: edgelq_iam_proto_v1_service_projects_management_custom_proto_depIdxs,
		MessageInfos:      edgelq_iam_proto_v1_service_projects_management_custom_proto_msgTypes,
	}.Build()
	edgelq_iam_proto_v1_service_projects_management_custom_proto = out.File
	edgelq_iam_proto_v1_service_projects_management_custom_proto_rawDesc = nil
	edgelq_iam_proto_v1_service_projects_management_custom_proto_goTypes = nil
	edgelq_iam_proto_v1_service_projects_management_custom_proto_depIdxs = nil
}
