// Code generated by protoc-gen-goten-client
// API: ServiceProjectsManagementService
// DO NOT EDIT!!!

package service_projects_management_client

import (
	"context"

	"google.golang.org/grpc"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	project "github.com/cloudwan/edgelq-sdk/iam/resources/v1/project"
	service_account "github.com/cloudwan/edgelq-sdk/iam/resources/v1/service_account"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = protoimpl.DescBuilder{}
	_ = new(context.Context)
	_ = grpc.ClientConn{}
)

// make sure we're using proto imports
var (
	_ = &project.Project{}
	_ = &service_account.ServiceAccount{}
	_ = &emptypb.Empty{}
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ServiceProjectsManagementServiceClient is the client API for ServiceProjectsManagementService.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ServiceProjectsManagementServiceClient interface {
	ListMyServiceProjects(ctx context.Context, in *ListMyServiceProjectsRequest, opts ...grpc.CallOption) (*ListMyServiceProjectsResponse, error)
	SetupServiceProject(ctx context.Context, in *SetupServiceProjectRequest, opts ...grpc.CallOption) (*project.Project, error)
	ReserveServiceName(ctx context.Context, in *ReserveServiceNameRequest, opts ...grpc.CallOption) (*ReserveServiceNameResponse, error)
	DeleteServiceReservation(ctx context.Context, in *DeleteServiceReservationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListServiceReservations(ctx context.Context, in *ListServiceReservationsRequest, opts ...grpc.CallOption) (*ListServiceReservationsResponse, error)
	ListProjectServices(ctx context.Context, in *ListProjectServicesRequest, opts ...grpc.CallOption) (*ListProjectServicesResponse, error)
	AddRegionalAdminAccountForServices(ctx context.Context, in *AddRegionalAdminAccountForServicesRequest, opts ...grpc.CallOption) (*AddRegionalAdminAccountForServicesResponse, error)
}

type client struct {
	cc grpc.ClientConnInterface
}

func NewServiceProjectsManagementServiceClient(cc grpc.ClientConnInterface) ServiceProjectsManagementServiceClient {
	return &client{cc}
}

func (c *client) ListMyServiceProjects(ctx context.Context, in *ListMyServiceProjectsRequest, opts ...grpc.CallOption) (*ListMyServiceProjectsResponse, error) {
	out := new(ListMyServiceProjectsResponse)
	err := c.cc.Invoke(ctx, "/ntt.iam.v1.ServiceProjectsManagementService/ListMyServiceProjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) SetupServiceProject(ctx context.Context, in *SetupServiceProjectRequest, opts ...grpc.CallOption) (*project.Project, error) {
	out := new(project.Project)
	err := c.cc.Invoke(ctx, "/ntt.iam.v1.ServiceProjectsManagementService/SetupServiceProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ReserveServiceName(ctx context.Context, in *ReserveServiceNameRequest, opts ...grpc.CallOption) (*ReserveServiceNameResponse, error) {
	out := new(ReserveServiceNameResponse)
	err := c.cc.Invoke(ctx, "/ntt.iam.v1.ServiceProjectsManagementService/ReserveServiceName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeleteServiceReservation(ctx context.Context, in *DeleteServiceReservationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ntt.iam.v1.ServiceProjectsManagementService/DeleteServiceReservation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListServiceReservations(ctx context.Context, in *ListServiceReservationsRequest, opts ...grpc.CallOption) (*ListServiceReservationsResponse, error) {
	out := new(ListServiceReservationsResponse)
	err := c.cc.Invoke(ctx, "/ntt.iam.v1.ServiceProjectsManagementService/ListServiceReservations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListProjectServices(ctx context.Context, in *ListProjectServicesRequest, opts ...grpc.CallOption) (*ListProjectServicesResponse, error) {
	out := new(ListProjectServicesResponse)
	err := c.cc.Invoke(ctx, "/ntt.iam.v1.ServiceProjectsManagementService/ListProjectServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) AddRegionalAdminAccountForServices(ctx context.Context, in *AddRegionalAdminAccountForServicesRequest, opts ...grpc.CallOption) (*AddRegionalAdminAccountForServicesResponse, error) {
	out := new(AddRegionalAdminAccountForServicesResponse)
	err := c.cc.Invoke(ctx, "/ntt.iam.v1.ServiceProjectsManagementService/AddRegionalAdminAccountForServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
