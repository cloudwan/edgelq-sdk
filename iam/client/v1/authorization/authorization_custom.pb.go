// Code generated by protoc-gen-goten-go
// File: edgelq/iam/proto/v1/authorization_custom.proto
// DO NOT EDIT!!!

package authorization_client

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	role "github.com/cloudwan/edgelq-sdk/iam/resources/v1/role"
	role_binding "github.com/cloudwan/edgelq-sdk/iam/resources/v1/role_binding"
	service_account "github.com/cloudwan/edgelq-sdk/iam/resources/v1/service_account"
	user "github.com/cloudwan/edgelq-sdk/iam/resources/v1/user"
	meta_service "github.com/cloudwan/goten-sdk/meta-service/resources/v1/service"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &role.Role{}
	_ = &role_binding.RoleBinding{}
	_ = &service_account.ServiceAccount{}
	_ = &user.User{}
	_ = &fieldmaskpb.FieldMask{}
	_ = &meta_service.Service{}
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request message for method [GetPrincipal][ntt.iam.v1.GetPrincipal]
type GetPrincipalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Service asking for given principal - IAM verifies if given principal has
	// any role bindings in requesting service.
	RequestingService *meta_service.Name `protobuf:"bytes,1,opt,customtype=Name,name=requesting_service,json=requestingService,proto3" json:"requesting_service,omitempty" firestore:"requestingService"`
	// Principal ID, different for users or service accounts
	PrincipalKeyId string `protobuf:"bytes,2,opt,name=principal_key_id,json=principalKeyId,proto3" json:"principal_key_id,omitempty" firestore:"principalKeyId"`
	// User authorization token
	AuthToken string `protobuf:"bytes,4,opt,name=auth_token,json=authToken,proto3" json:"auth_token,omitempty" firestore:"authToken"`
}

func (m *GetPrincipalRequest) Reset() {
	*m = GetPrincipalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_iam_proto_v1_authorization_custom_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *GetPrincipalRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*GetPrincipalRequest) ProtoMessage() {}

func (m *GetPrincipalRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_iam_proto_v1_authorization_custom_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*GetPrincipalRequest) GotenMessage() {}

// Deprecated, Use GetPrincipalRequest.ProtoReflect.Descriptor instead.
func (*GetPrincipalRequest) Descriptor() ([]byte, []int) {
	return edgelq_iam_proto_v1_authorization_custom_proto_rawDescGZIP(), []int{0}
}

func (m *GetPrincipalRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *GetPrincipalRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *GetPrincipalRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *GetPrincipalRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *GetPrincipalRequest) GetRequestingService() *meta_service.Name {
	if m != nil {
		return m.RequestingService
	}
	return nil
}

func (m *GetPrincipalRequest) GetPrincipalKeyId() string {
	if m != nil {
		return m.PrincipalKeyId
	}
	return ""
}

func (m *GetPrincipalRequest) GetAuthToken() string {
	if m != nil {
		return m.AuthToken
	}
	return ""
}

func (m *GetPrincipalRequest) SetRequestingService(fv *meta_service.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "RequestingService", "GetPrincipalRequest"))
	}
	m.RequestingService = fv
}

func (m *GetPrincipalRequest) SetPrincipalKeyId(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PrincipalKeyId", "GetPrincipalRequest"))
	}
	m.PrincipalKeyId = fv
}

func (m *GetPrincipalRequest) SetAuthToken(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AuthToken", "GetPrincipalRequest"))
	}
	m.AuthToken = fv
}

// Response message for method [GetPrincipal][ntt.iam.v1.GetPrincipal]
type GetPrincipalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Public json key
	JsonKey string `protobuf:"bytes,1,opt,name=json_key,json=jsonKey,proto3" json:"json_key,omitempty" firestore:"jsonKey"`
	// Key type
	PrincipalKeyType string `protobuf:"bytes,2,opt,name=principal_key_type,json=principalKeyType,proto3" json:"principal_key_type,omitempty" firestore:"principalKeyType"`
	// Types that are valid to be assigned to Principal:
	//	*GetPrincipalResponse_User
	//	*GetPrincipalResponse_ServiceAccount
	//	*GetPrincipalResponse_Anonymous
	Principal isGetPrincipalResponse_Principal `protobuf_oneof:"principal"`
}

func (m *GetPrincipalResponse) Reset() {
	*m = GetPrincipalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_iam_proto_v1_authorization_custom_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *GetPrincipalResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*GetPrincipalResponse) ProtoMessage() {}

func (m *GetPrincipalResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_iam_proto_v1_authorization_custom_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*GetPrincipalResponse) GotenMessage() {}

// Deprecated, Use GetPrincipalResponse.ProtoReflect.Descriptor instead.
func (*GetPrincipalResponse) Descriptor() ([]byte, []int) {
	return edgelq_iam_proto_v1_authorization_custom_proto_rawDescGZIP(), []int{1}
}

func (m *GetPrincipalResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *GetPrincipalResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *GetPrincipalResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *GetPrincipalResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

type isGetPrincipalResponse_Principal interface {
	isGetPrincipalResponse_Principal()
}

type GetPrincipalResponse_User struct {
	// User data mapping principal
	User *user.User `protobuf:"bytes,3,opt,name=user,proto3,oneof" firestore:"user"`
}
type GetPrincipalResponse_ServiceAccount struct {
	// Service account mapping principal
	ServiceAccount *service_account.ServiceAccount `protobuf:"bytes,4,opt,name=service_account,json=serviceAccount,proto3,oneof" firestore:"serviceAccount"`
}
type GetPrincipalResponse_Anonymous struct {
	// Anonymous principal
	Anonymous bool `protobuf:"varint,5,opt,name=anonymous,proto3,oneof" firestore:"anonymous"`
}

func (*GetPrincipalResponse_User) isGetPrincipalResponse_Principal()           {}
func (*GetPrincipalResponse_ServiceAccount) isGetPrincipalResponse_Principal() {}
func (*GetPrincipalResponse_Anonymous) isGetPrincipalResponse_Principal()      {}
func (m *GetPrincipalResponse) GetJsonKey() string {
	if m != nil {
		return m.JsonKey
	}
	return ""
}

func (m *GetPrincipalResponse) GetPrincipalKeyType() string {
	if m != nil {
		return m.PrincipalKeyType
	}
	return ""
}

func (m *GetPrincipalResponse) GetPrincipal() isGetPrincipalResponse_Principal {
	if m != nil {
		return m.Principal
	}
	return nil
}
func (m *GetPrincipalResponse) GetUser() *user.User {
	if x, ok := m.GetPrincipal().(*GetPrincipalResponse_User); ok {
		return x.User
	}
	return nil
}
func (m *GetPrincipalResponse) GetServiceAccount() *service_account.ServiceAccount {
	if x, ok := m.GetPrincipal().(*GetPrincipalResponse_ServiceAccount); ok {
		return x.ServiceAccount
	}
	return nil
}
func (m *GetPrincipalResponse) GetAnonymous() bool {
	if x, ok := m.GetPrincipal().(*GetPrincipalResponse_Anonymous); ok {
		return x.Anonymous
	}
	return false
}
func (m *GetPrincipalResponse) SetJsonKey(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "JsonKey", "GetPrincipalResponse"))
	}
	m.JsonKey = fv
}

func (m *GetPrincipalResponse) SetPrincipalKeyType(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PrincipalKeyType", "GetPrincipalResponse"))
	}
	m.PrincipalKeyType = fv
}

func (m *GetPrincipalResponse) SetPrincipal(ofv isGetPrincipalResponse_Principal) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "isGetPrincipalResponse_Principal", "GetPrincipalResponse"))
	}
	m.Principal = ofv
}
func (m *GetPrincipalResponse) SetUser(fv *user.User) {
	m.SetPrincipal(&GetPrincipalResponse_User{User: fv})
}
func (m *GetPrincipalResponse) SetServiceAccount(fv *service_account.ServiceAccount) {
	m.SetPrincipal(&GetPrincipalResponse_ServiceAccount{ServiceAccount: fv})
}
func (m *GetPrincipalResponse) SetAnonymous(fv bool) {
	m.SetPrincipal(&GetPrincipalResponse_Anonymous{Anonymous: fv})
}

// Request message for method
// [WatchPrincipalUpdates][ntt.iam.v1.WatchPrincipalUpdates]
type WatchPrincipalUpdatesRequest struct {
	state             protoimpl.MessageState
	sizeCache         protoimpl.SizeCache
	unknownFields     protoimpl.UnknownFields
	RequestingService *meta_service.Name `protobuf:"bytes,1,opt,customtype=Name,name=requesting_service,json=requestingService,proto3" json:"requesting_service,omitempty" firestore:"requestingService"`
	// Resume token in case of disconnection
	ResumeToken string `protobuf:"bytes,3,opt,name=resume_token,json=resumeToken,proto3" json:"resume_token,omitempty" firestore:"resumeToken"`
}

func (m *WatchPrincipalUpdatesRequest) Reset() {
	*m = WatchPrincipalUpdatesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_iam_proto_v1_authorization_custom_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchPrincipalUpdatesRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchPrincipalUpdatesRequest) ProtoMessage() {}

func (m *WatchPrincipalUpdatesRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_iam_proto_v1_authorization_custom_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchPrincipalUpdatesRequest) GotenMessage() {}

// Deprecated, Use WatchPrincipalUpdatesRequest.ProtoReflect.Descriptor instead.
func (*WatchPrincipalUpdatesRequest) Descriptor() ([]byte, []int) {
	return edgelq_iam_proto_v1_authorization_custom_proto_rawDescGZIP(), []int{2}
}

func (m *WatchPrincipalUpdatesRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchPrincipalUpdatesRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchPrincipalUpdatesRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchPrincipalUpdatesRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchPrincipalUpdatesRequest) GetRequestingService() *meta_service.Name {
	if m != nil {
		return m.RequestingService
	}
	return nil
}

func (m *WatchPrincipalUpdatesRequest) GetResumeToken() string {
	if m != nil {
		return m.ResumeToken
	}
	return ""
}

func (m *WatchPrincipalUpdatesRequest) SetRequestingService(fv *meta_service.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "RequestingService", "WatchPrincipalUpdatesRequest"))
	}
	m.RequestingService = fv
}

func (m *WatchPrincipalUpdatesRequest) SetResumeToken(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResumeToken", "WatchPrincipalUpdatesRequest"))
	}
	m.ResumeToken = fv
}

// Response message for method
// [WatchPrincipalUpdates][ntt.iam.v1.WatchPrincipalUpdates]
type WatchPrincipalUpdatesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// All added or removed principals
	CurrentPrincipals []*WatchPrincipalUpdatesResponse_CurrentPrincipal `protobuf:"bytes,1,rep,name=current_principals,json=currentPrincipals,proto3" json:"current_principals,omitempty" firestore:"currentPrincipals"`
	// All removed principals
	RemovedPrincipals []*WatchPrincipalUpdatesResponse_RemovedPrincipal `protobuf:"bytes,2,rep,name=removed_principals,json=removedPrincipals,proto3" json:"removed_principals,omitempty" firestore:"removedPrincipals"`
	// Whether list of shadows received by client is in sync
	IsCurrent bool `protobuf:"varint,3,opt,name=is_current,json=isCurrent,proto3" json:"is_current,omitempty" firestore:"isCurrent"`
	// Whether current, pending changes should be reset.
	IsReset bool `protobuf:"varint,4,opt,name=is_reset,json=isReset,proto3" json:"is_reset,omitempty" firestore:"isReset"`
	// Token to resume from.
	ResumeToken string `protobuf:"bytes,5,opt,name=resume_token,json=resumeToken,proto3" json:"resume_token,omitempty" firestore:"resumeToken"`
}

func (m *WatchPrincipalUpdatesResponse) Reset() {
	*m = WatchPrincipalUpdatesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_iam_proto_v1_authorization_custom_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchPrincipalUpdatesResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchPrincipalUpdatesResponse) ProtoMessage() {}

func (m *WatchPrincipalUpdatesResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_iam_proto_v1_authorization_custom_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchPrincipalUpdatesResponse) GotenMessage() {}

// Deprecated, Use WatchPrincipalUpdatesResponse.ProtoReflect.Descriptor instead.
func (*WatchPrincipalUpdatesResponse) Descriptor() ([]byte, []int) {
	return edgelq_iam_proto_v1_authorization_custom_proto_rawDescGZIP(), []int{3}
}

func (m *WatchPrincipalUpdatesResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchPrincipalUpdatesResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchPrincipalUpdatesResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchPrincipalUpdatesResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchPrincipalUpdatesResponse) GetCurrentPrincipals() []*WatchPrincipalUpdatesResponse_CurrentPrincipal {
	if m != nil {
		return m.CurrentPrincipals
	}
	return nil
}

func (m *WatchPrincipalUpdatesResponse) GetRemovedPrincipals() []*WatchPrincipalUpdatesResponse_RemovedPrincipal {
	if m != nil {
		return m.RemovedPrincipals
	}
	return nil
}

func (m *WatchPrincipalUpdatesResponse) GetIsCurrent() bool {
	if m != nil {
		return m.IsCurrent
	}
	return false
}

func (m *WatchPrincipalUpdatesResponse) GetIsReset() bool {
	if m != nil {
		return m.IsReset
	}
	return false
}

func (m *WatchPrincipalUpdatesResponse) GetResumeToken() string {
	if m != nil {
		return m.ResumeToken
	}
	return ""
}

func (m *WatchPrincipalUpdatesResponse) SetCurrentPrincipals(fv []*WatchPrincipalUpdatesResponse_CurrentPrincipal) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CurrentPrincipals", "WatchPrincipalUpdatesResponse"))
	}
	m.CurrentPrincipals = fv
}

func (m *WatchPrincipalUpdatesResponse) SetRemovedPrincipals(fv []*WatchPrincipalUpdatesResponse_RemovedPrincipal) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "RemovedPrincipals", "WatchPrincipalUpdatesResponse"))
	}
	m.RemovedPrincipals = fv
}

func (m *WatchPrincipalUpdatesResponse) SetIsCurrent(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IsCurrent", "WatchPrincipalUpdatesResponse"))
	}
	m.IsCurrent = fv
}

func (m *WatchPrincipalUpdatesResponse) SetIsReset(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IsReset", "WatchPrincipalUpdatesResponse"))
	}
	m.IsReset = fv
}

func (m *WatchPrincipalUpdatesResponse) SetResumeToken(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResumeToken", "WatchPrincipalUpdatesResponse"))
	}
	m.ResumeToken = fv
}

// Request message for method
// [CheckMyRoleBindings][ntt.iam.v1.CheckMyRoleBindings]
type CheckMyRoleBindingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Scope determines where roles should be looked from - its either system,
	// service, project or organization scope. However, if it contains an
	// organization or project, CheckMyRoles will perform check on all ancestry
	// path (parent organizations).
	Parent *role_binding.ParentName `protobuf:"bytes,1,opt,customtype=ParentName,name=parent,proto3" json:"parent,omitempty" firestore:"parent"`
	// Optional additional filter to apply on role bindings returned
	// Simplified SQL-like syntax with following operators:
	// <=, >=, =, !=, <, >, LIKE, CONTAINS (aliases CONTAIN, HAS, HAVE), IN, IS
	// [NOT] NULL | NaN . Combine conditions with OR | AND example: 'meta.labels
	// CONTAINS "severity:important" OR (state.last_error_time >
	// "2018-11-15T10:00:00Z" AND state.status = "ERROR")'
	Filter *role_binding.Filter `protobuf:"bytes,5,opt,customtype=Filter,name=filter,proto3" json:"filter,omitempty" firestore:"filter"`
	// Custom field mask to apply on role bindings. By default, is none is
	// specified, following is used: [ "name", "role", "scope_params",
	// "executable_conditions", "owned_objects" ].
	CustomFieldMask *role_binding.RoleBinding_FieldMask `protobuf:"bytes,6,opt,customtype=RoleBinding_FieldMask,name=custom_field_mask,json=customFieldMask,proto3" json:"custom_field_mask,omitempty" firestore:"customFieldMask"`
}

func (m *CheckMyRoleBindingsRequest) Reset() {
	*m = CheckMyRoleBindingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_iam_proto_v1_authorization_custom_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *CheckMyRoleBindingsRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*CheckMyRoleBindingsRequest) ProtoMessage() {}

func (m *CheckMyRoleBindingsRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_iam_proto_v1_authorization_custom_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*CheckMyRoleBindingsRequest) GotenMessage() {}

// Deprecated, Use CheckMyRoleBindingsRequest.ProtoReflect.Descriptor instead.
func (*CheckMyRoleBindingsRequest) Descriptor() ([]byte, []int) {
	return edgelq_iam_proto_v1_authorization_custom_proto_rawDescGZIP(), []int{4}
}

func (m *CheckMyRoleBindingsRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *CheckMyRoleBindingsRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *CheckMyRoleBindingsRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *CheckMyRoleBindingsRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *CheckMyRoleBindingsRequest) GetParent() *role_binding.ParentName {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *CheckMyRoleBindingsRequest) GetFilter() *role_binding.Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *CheckMyRoleBindingsRequest) GetCustomFieldMask() *role_binding.RoleBinding_FieldMask {
	if m != nil {
		return m.CustomFieldMask
	}
	return nil
}

func (m *CheckMyRoleBindingsRequest) SetParent(fv *role_binding.ParentName) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Parent", "CheckMyRoleBindingsRequest"))
	}
	m.Parent = fv
}

func (m *CheckMyRoleBindingsRequest) SetFilter(fv *role_binding.Filter) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Filter", "CheckMyRoleBindingsRequest"))
	}
	m.Filter = fv
}

func (m *CheckMyRoleBindingsRequest) SetCustomFieldMask(fv *role_binding.RoleBinding_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CustomFieldMask", "CheckMyRoleBindingsRequest"))
	}
	m.CustomFieldMask = fv
}

// Response message for method [CheckMyRoles][ntt.iam.v1.CheckMyRoles]
type CheckMyRoleBindingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// List of returned role bindings with corresponding grants.
	ResolvableGrants []*CheckMyRoleBindingsResponse_ResolvableGrant `protobuf:"bytes,1,rep,name=resolvable_grants,json=resolvableGrants,proto3" json:"resolvable_grants,omitempty" firestore:"resolvableGrants"`
}

func (m *CheckMyRoleBindingsResponse) Reset() {
	*m = CheckMyRoleBindingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_iam_proto_v1_authorization_custom_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *CheckMyRoleBindingsResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*CheckMyRoleBindingsResponse) ProtoMessage() {}

func (m *CheckMyRoleBindingsResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_iam_proto_v1_authorization_custom_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*CheckMyRoleBindingsResponse) GotenMessage() {}

// Deprecated, Use CheckMyRoleBindingsResponse.ProtoReflect.Descriptor instead.
func (*CheckMyRoleBindingsResponse) Descriptor() ([]byte, []int) {
	return edgelq_iam_proto_v1_authorization_custom_proto_rawDescGZIP(), []int{5}
}

func (m *CheckMyRoleBindingsResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *CheckMyRoleBindingsResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *CheckMyRoleBindingsResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *CheckMyRoleBindingsResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *CheckMyRoleBindingsResponse) GetResolvableGrants() []*CheckMyRoleBindingsResponse_ResolvableGrant {
	if m != nil {
		return m.ResolvableGrants
	}
	return nil
}

func (m *CheckMyRoleBindingsResponse) SetResolvableGrants(fv []*CheckMyRoleBindingsResponse_ResolvableGrant) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResolvableGrants", "CheckMyRoleBindingsResponse"))
	}
	m.ResolvableGrants = fv
}

type WatchPrincipalUpdatesResponse_CurrentPrincipal struct {
	state            protoimpl.MessageState
	sizeCache        protoimpl.SizeCache
	unknownFields    protoimpl.UnknownFields
	PrincipalKeyId   string `protobuf:"bytes,1,opt,name=principal_key_id,json=principalKeyId,proto3" json:"principal_key_id,omitempty" firestore:"principalKeyId"`
	JsonKey          string `protobuf:"bytes,2,opt,name=json_key,json=jsonKey,proto3" json:"json_key,omitempty" firestore:"jsonKey"`
	PrincipalKeyType string `protobuf:"bytes,3,opt,name=principal_key_type,json=principalKeyType,proto3" json:"principal_key_type,omitempty" firestore:"principalKeyType"`
	// Types that are valid to be assigned to Update:
	//	*WatchPrincipalUpdatesResponse_CurrentPrincipal_User
	//	*WatchPrincipalUpdatesResponse_CurrentPrincipal_ServiceAccount
	Update isWatchPrincipalUpdatesResponse_CurrentPrincipal_Update `protobuf_oneof:"update"`
}

func (m *WatchPrincipalUpdatesResponse_CurrentPrincipal) Reset() {
	*m = WatchPrincipalUpdatesResponse_CurrentPrincipal{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_iam_proto_v1_authorization_custom_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchPrincipalUpdatesResponse_CurrentPrincipal) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchPrincipalUpdatesResponse_CurrentPrincipal) ProtoMessage() {}

func (m *WatchPrincipalUpdatesResponse_CurrentPrincipal) ProtoReflect() preflect.Message {
	mi := &edgelq_iam_proto_v1_authorization_custom_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchPrincipalUpdatesResponse_CurrentPrincipal) GotenMessage() {}

// Deprecated, Use WatchPrincipalUpdatesResponse_CurrentPrincipal.ProtoReflect.Descriptor instead.
func (*WatchPrincipalUpdatesResponse_CurrentPrincipal) Descriptor() ([]byte, []int) {
	return edgelq_iam_proto_v1_authorization_custom_proto_rawDescGZIP(), []int{3, 0}
}

func (m *WatchPrincipalUpdatesResponse_CurrentPrincipal) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchPrincipalUpdatesResponse_CurrentPrincipal) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchPrincipalUpdatesResponse_CurrentPrincipal) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchPrincipalUpdatesResponse_CurrentPrincipal) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

type isWatchPrincipalUpdatesResponse_CurrentPrincipal_Update interface {
	isWatchPrincipalUpdatesResponse_CurrentPrincipal_Update()
}

type WatchPrincipalUpdatesResponse_CurrentPrincipal_User struct {
	User *user.User `protobuf:"bytes,4,opt,name=user,proto3,oneof" firestore:"user"`
}
type WatchPrincipalUpdatesResponse_CurrentPrincipal_ServiceAccount struct {
	ServiceAccount *service_account.ServiceAccount `protobuf:"bytes,5,opt,name=service_account,json=serviceAccount,proto3,oneof" firestore:"serviceAccount"`
}

func (*WatchPrincipalUpdatesResponse_CurrentPrincipal_User) isWatchPrincipalUpdatesResponse_CurrentPrincipal_Update() {
}
func (*WatchPrincipalUpdatesResponse_CurrentPrincipal_ServiceAccount) isWatchPrincipalUpdatesResponse_CurrentPrincipal_Update() {
}
func (m *WatchPrincipalUpdatesResponse_CurrentPrincipal) GetPrincipalKeyId() string {
	if m != nil {
		return m.PrincipalKeyId
	}
	return ""
}

func (m *WatchPrincipalUpdatesResponse_CurrentPrincipal) GetJsonKey() string {
	if m != nil {
		return m.JsonKey
	}
	return ""
}

func (m *WatchPrincipalUpdatesResponse_CurrentPrincipal) GetPrincipalKeyType() string {
	if m != nil {
		return m.PrincipalKeyType
	}
	return ""
}

func (m *WatchPrincipalUpdatesResponse_CurrentPrincipal) GetUpdate() isWatchPrincipalUpdatesResponse_CurrentPrincipal_Update {
	if m != nil {
		return m.Update
	}
	return nil
}
func (m *WatchPrincipalUpdatesResponse_CurrentPrincipal) GetUser() *user.User {
	if x, ok := m.GetUpdate().(*WatchPrincipalUpdatesResponse_CurrentPrincipal_User); ok {
		return x.User
	}
	return nil
}
func (m *WatchPrincipalUpdatesResponse_CurrentPrincipal) GetServiceAccount() *service_account.ServiceAccount {
	if x, ok := m.GetUpdate().(*WatchPrincipalUpdatesResponse_CurrentPrincipal_ServiceAccount); ok {
		return x.ServiceAccount
	}
	return nil
}
func (m *WatchPrincipalUpdatesResponse_CurrentPrincipal) SetPrincipalKeyId(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PrincipalKeyId", "WatchPrincipalUpdatesResponse_CurrentPrincipal"))
	}
	m.PrincipalKeyId = fv
}

func (m *WatchPrincipalUpdatesResponse_CurrentPrincipal) SetJsonKey(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "JsonKey", "WatchPrincipalUpdatesResponse_CurrentPrincipal"))
	}
	m.JsonKey = fv
}

func (m *WatchPrincipalUpdatesResponse_CurrentPrincipal) SetPrincipalKeyType(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PrincipalKeyType", "WatchPrincipalUpdatesResponse_CurrentPrincipal"))
	}
	m.PrincipalKeyType = fv
}

func (m *WatchPrincipalUpdatesResponse_CurrentPrincipal) SetUpdate(ofv isWatchPrincipalUpdatesResponse_CurrentPrincipal_Update) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "isWatchPrincipalUpdatesResponse_CurrentPrincipal_Update", "WatchPrincipalUpdatesResponse_CurrentPrincipal"))
	}
	m.Update = ofv
}
func (m *WatchPrincipalUpdatesResponse_CurrentPrincipal) SetUser(fv *user.User) {
	m.SetUpdate(&WatchPrincipalUpdatesResponse_CurrentPrincipal_User{User: fv})
}
func (m *WatchPrincipalUpdatesResponse_CurrentPrincipal) SetServiceAccount(fv *service_account.ServiceAccount) {
	m.SetUpdate(&WatchPrincipalUpdatesResponse_CurrentPrincipal_ServiceAccount{ServiceAccount: fv})
}

type WatchPrincipalUpdatesResponse_RemovedPrincipal struct {
	state          protoimpl.MessageState
	sizeCache      protoimpl.SizeCache
	unknownFields  protoimpl.UnknownFields
	PrincipalKeyId string `protobuf:"bytes,1,opt,name=principal_key_id,json=principalKeyId,proto3" json:"principal_key_id,omitempty" firestore:"principalKeyId"`
}

func (m *WatchPrincipalUpdatesResponse_RemovedPrincipal) Reset() {
	*m = WatchPrincipalUpdatesResponse_RemovedPrincipal{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_iam_proto_v1_authorization_custom_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchPrincipalUpdatesResponse_RemovedPrincipal) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchPrincipalUpdatesResponse_RemovedPrincipal) ProtoMessage() {}

func (m *WatchPrincipalUpdatesResponse_RemovedPrincipal) ProtoReflect() preflect.Message {
	mi := &edgelq_iam_proto_v1_authorization_custom_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchPrincipalUpdatesResponse_RemovedPrincipal) GotenMessage() {}

// Deprecated, Use WatchPrincipalUpdatesResponse_RemovedPrincipal.ProtoReflect.Descriptor instead.
func (*WatchPrincipalUpdatesResponse_RemovedPrincipal) Descriptor() ([]byte, []int) {
	return edgelq_iam_proto_v1_authorization_custom_proto_rawDescGZIP(), []int{3, 1}
}

func (m *WatchPrincipalUpdatesResponse_RemovedPrincipal) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchPrincipalUpdatesResponse_RemovedPrincipal) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchPrincipalUpdatesResponse_RemovedPrincipal) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchPrincipalUpdatesResponse_RemovedPrincipal) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchPrincipalUpdatesResponse_RemovedPrincipal) GetPrincipalKeyId() string {
	if m != nil {
		return m.PrincipalKeyId
	}
	return ""
}

func (m *WatchPrincipalUpdatesResponse_RemovedPrincipal) SetPrincipalKeyId(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PrincipalKeyId", "WatchPrincipalUpdatesResponse_RemovedPrincipal"))
	}
	m.PrincipalKeyId = fv
}

type CheckMyRoleBindingsResponse_ResolvableGrant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Granted RoleBinding for the scope
	RoleBinding *role_binding.RoleBinding `protobuf:"bytes,1,opt,name=role_binding,json=roleBinding,proto3" json:"role_binding,omitempty" firestore:"roleBinding"`
	// All grants extracted from the Role
	Grants []*role.Role_Grant `protobuf:"bytes,2,rep,name=grants,proto3" json:"grants,omitempty" firestore:"grants"`
}

func (m *CheckMyRoleBindingsResponse_ResolvableGrant) Reset() {
	*m = CheckMyRoleBindingsResponse_ResolvableGrant{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_iam_proto_v1_authorization_custom_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *CheckMyRoleBindingsResponse_ResolvableGrant) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*CheckMyRoleBindingsResponse_ResolvableGrant) ProtoMessage() {}

func (m *CheckMyRoleBindingsResponse_ResolvableGrant) ProtoReflect() preflect.Message {
	mi := &edgelq_iam_proto_v1_authorization_custom_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*CheckMyRoleBindingsResponse_ResolvableGrant) GotenMessage() {}

// Deprecated, Use CheckMyRoleBindingsResponse_ResolvableGrant.ProtoReflect.Descriptor instead.
func (*CheckMyRoleBindingsResponse_ResolvableGrant) Descriptor() ([]byte, []int) {
	return edgelq_iam_proto_v1_authorization_custom_proto_rawDescGZIP(), []int{5, 0}
}

func (m *CheckMyRoleBindingsResponse_ResolvableGrant) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *CheckMyRoleBindingsResponse_ResolvableGrant) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *CheckMyRoleBindingsResponse_ResolvableGrant) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *CheckMyRoleBindingsResponse_ResolvableGrant) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *CheckMyRoleBindingsResponse_ResolvableGrant) GetRoleBinding() *role_binding.RoleBinding {
	if m != nil {
		return m.RoleBinding
	}
	return nil
}

func (m *CheckMyRoleBindingsResponse_ResolvableGrant) GetGrants() []*role.Role_Grant {
	if m != nil {
		return m.Grants
	}
	return nil
}

func (m *CheckMyRoleBindingsResponse_ResolvableGrant) SetRoleBinding(fv *role_binding.RoleBinding) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "RoleBinding", "CheckMyRoleBindingsResponse_ResolvableGrant"))
	}
	m.RoleBinding = fv
}

func (m *CheckMyRoleBindingsResponse_ResolvableGrant) SetGrants(fv []*role.Role_Grant) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Grants", "CheckMyRoleBindingsResponse_ResolvableGrant"))
	}
	m.Grants = fv
}

var edgelq_iam_proto_v1_authorization_custom_proto preflect.FileDescriptor

var edgelq_iam_proto_v1_authorization_custom_proto_rawDesc = []byte{
	0x0a, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0a, 0x6e, 0x74, 0x74, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x1a, 0x20, 0x67, 0x6f,
	0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d,
	0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24,
	0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2f, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23,
	0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x69, 0x61, 0x6d, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x65, 0x64, 0x67, 0x65, 0x6c,
	0x71, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x69,
	0x61, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x6f, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x69,
	0x61, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x6f, 0x6c, 0x65,
	0x5f, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d,
	0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x76, 0x31, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x65,
	0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71,
	0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6b, 0x65,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f,
	0x69, 0x61, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb3, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x4d, 0x0a, 0x12, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xb2, 0xda, 0x21,
	0x1a, 0x0a, 0x18, 0x0a, 0x16, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x11, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x28,
	0x0a, 0x10, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x5f, 0x6b, 0x65, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69,
	0x70, 0x61, 0x6c, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x68,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x75,
	0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x22, 0xfb, 0x01,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x73, 0x6f, 0x6e, 0x4b, 0x65,
	0x79, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x5f, 0x6b,
	0x65, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70,
	0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x26, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x48,
	0x00, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e,
	0x0a, 0x09, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x00, 0x52, 0x09, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x42, 0x0b,
	0x0a, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x22, 0x96, 0x01, 0x0a, 0x1c,
	0x57, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x12,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xb2, 0xda, 0x21, 0x1a, 0x0a, 0x18,
	0x0a, 0x16, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x11, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72,
	0x65, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4a, 0x04,
	0x08, 0x02, 0x10, 0x03, 0x22, 0x91, 0x05, 0x0a, 0x1d, 0x57, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72,
	0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e,
	0x57, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x52, 0x11,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c,
	0x73, 0x12, 0x69, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x69,
	0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64,
	0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x52, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x64, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x69, 0x73, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x69, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x69,
	0x73, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69,
	0x73, 0x52, 0x65, 0x73, 0x65, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65,
	0x73, 0x75, 0x6d, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0xfe, 0x01, 0x0a, 0x10, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x12, 0x28,
	0x0a, 0x10, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x5f, 0x6b, 0x65, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69,
	0x70, 0x61, 0x6c, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6a, 0x73, 0x6f, 0x6e,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x73, 0x6f, 0x6e,
	0x4b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c,
	0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x26, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x48, 0x00, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x0f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x08, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x1a, 0x3c, 0x0a, 0x10, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x64, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x12, 0x28,
	0x0a, 0x10, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x5f, 0x6b, 0x65, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69,
	0x70, 0x61, 0x6c, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x22, 0xd3, 0x01, 0x0a, 0x1a, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x4d, 0x79, 0x52, 0x6f, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xb2, 0xda, 0x21, 0x0f, 0x3a, 0x0d, 0x0a,
	0x0b, 0x52, 0x6f, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xb2, 0xda, 0x21, 0x0f, 0x1a, 0x0d, 0x0a, 0x0b, 0x52, 0x6f,
	0x6c, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x5b, 0x0a, 0x11, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x13, 0xb2, 0xda, 0x21, 0x0f, 0x32, 0x0d,
	0x0a, 0x0b, 0x52, 0x6f, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x82,
	0x02, 0x0a, 0x1b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4d, 0x79, 0x52, 0x6f, 0x6c, 0x65, 0x42, 0x69,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64,
	0x0a, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x67, 0x72, 0x61,
	0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4d, 0x79, 0x52, 0x6f,
	0x6c, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x72, 0x61,
	0x6e, 0x74, 0x52, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x72,
	0x61, 0x6e, 0x74, 0x73, 0x1a, 0x7d, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x61, 0x62,
	0x6c, 0x65, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x0c, 0x72, 0x6f, 0x6c, 0x65, 0x5f,
	0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x42,
	0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x72, 0x6f, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x12, 0x2e, 0x0a, 0x06, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x06, 0x67, 0x72, 0x61,
	0x6e, 0x74, 0x73, 0x42, 0x80, 0x01, 0xe8, 0xde, 0x21, 0x00, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x76, 0x31, 0x42, 0x18, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x00, 0x5a, 0x4b, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65,
	0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x3b, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	edgelq_iam_proto_v1_authorization_custom_proto_rawDescOnce sync.Once
	edgelq_iam_proto_v1_authorization_custom_proto_rawDescData = edgelq_iam_proto_v1_authorization_custom_proto_rawDesc
)

func edgelq_iam_proto_v1_authorization_custom_proto_rawDescGZIP() []byte {
	edgelq_iam_proto_v1_authorization_custom_proto_rawDescOnce.Do(func() {
		edgelq_iam_proto_v1_authorization_custom_proto_rawDescData = protoimpl.X.CompressGZIP(edgelq_iam_proto_v1_authorization_custom_proto_rawDescData)
	})
	return edgelq_iam_proto_v1_authorization_custom_proto_rawDescData
}

var edgelq_iam_proto_v1_authorization_custom_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var edgelq_iam_proto_v1_authorization_custom_proto_goTypes = []interface{}{
	(*GetPrincipalRequest)(nil),                            // 0: ntt.iam.v1.GetPrincipalRequest
	(*GetPrincipalResponse)(nil),                           // 1: ntt.iam.v1.GetPrincipalResponse
	(*WatchPrincipalUpdatesRequest)(nil),                   // 2: ntt.iam.v1.WatchPrincipalUpdatesRequest
	(*WatchPrincipalUpdatesResponse)(nil),                  // 3: ntt.iam.v1.WatchPrincipalUpdatesResponse
	(*CheckMyRoleBindingsRequest)(nil),                     // 4: ntt.iam.v1.CheckMyRoleBindingsRequest
	(*CheckMyRoleBindingsResponse)(nil),                    // 5: ntt.iam.v1.CheckMyRoleBindingsResponse
	(*WatchPrincipalUpdatesResponse_CurrentPrincipal)(nil), // 6: ntt.iam.v1.WatchPrincipalUpdatesResponse.CurrentPrincipal
	(*WatchPrincipalUpdatesResponse_RemovedPrincipal)(nil), // 7: ntt.iam.v1.WatchPrincipalUpdatesResponse.RemovedPrincipal
	(*CheckMyRoleBindingsResponse_ResolvableGrant)(nil),    // 8: ntt.iam.v1.CheckMyRoleBindingsResponse.ResolvableGrant
	(*user.User)(nil),                                      // 9: ntt.iam.v1.User
	(*service_account.ServiceAccount)(nil),                 // 10: ntt.iam.v1.ServiceAccount
	(*role_binding.RoleBinding_FieldMask)(nil),             // 11: ntt.iam.v1.RoleBinding_FieldMask
	(*role_binding.RoleBinding)(nil),                       // 12: ntt.iam.v1.RoleBinding
	(*role.Role_Grant)(nil),                                // 13: ntt.iam.v1.Role.Grant
}
var edgelq_iam_proto_v1_authorization_custom_proto_depIdxs = []int32{
	9,  // 0: ntt.iam.v1.GetPrincipalResponse.user:type_name -> ntt.iam.v1.User
	10, // 1: ntt.iam.v1.GetPrincipalResponse.service_account:type_name -> ntt.iam.v1.ServiceAccount
	6,  // 2: ntt.iam.v1.WatchPrincipalUpdatesResponse.current_principals:type_name -> ntt.iam.v1.WatchPrincipalUpdatesResponse.CurrentPrincipal
	7,  // 3: ntt.iam.v1.WatchPrincipalUpdatesResponse.removed_principals:type_name -> ntt.iam.v1.WatchPrincipalUpdatesResponse.RemovedPrincipal
	11, // 4: ntt.iam.v1.CheckMyRoleBindingsRequest.custom_field_mask:type_name -> ntt.iam.v1.RoleBinding_FieldMask
	8,  // 5: ntt.iam.v1.CheckMyRoleBindingsResponse.resolvable_grants:type_name -> ntt.iam.v1.CheckMyRoleBindingsResponse.ResolvableGrant
	9,  // 6: ntt.iam.v1.WatchPrincipalUpdatesResponse.CurrentPrincipal.user:type_name -> ntt.iam.v1.User
	10, // 7: ntt.iam.v1.WatchPrincipalUpdatesResponse.CurrentPrincipal.service_account:type_name -> ntt.iam.v1.ServiceAccount
	12, // 8: ntt.iam.v1.CheckMyRoleBindingsResponse.ResolvableGrant.role_binding:type_name -> ntt.iam.v1.RoleBinding
	13, // 9: ntt.iam.v1.CheckMyRoleBindingsResponse.ResolvableGrant.grants:type_name -> ntt.iam.v1.Role.Grant
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { edgelq_iam_proto_v1_authorization_custom_proto_init() }
func edgelq_iam_proto_v1_authorization_custom_proto_init() {
	if edgelq_iam_proto_v1_authorization_custom_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		edgelq_iam_proto_v1_authorization_custom_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPrincipalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_iam_proto_v1_authorization_custom_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPrincipalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_iam_proto_v1_authorization_custom_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchPrincipalUpdatesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_iam_proto_v1_authorization_custom_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchPrincipalUpdatesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_iam_proto_v1_authorization_custom_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckMyRoleBindingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_iam_proto_v1_authorization_custom_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckMyRoleBindingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_iam_proto_v1_authorization_custom_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchPrincipalUpdatesResponse_CurrentPrincipal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_iam_proto_v1_authorization_custom_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchPrincipalUpdatesResponse_RemovedPrincipal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_iam_proto_v1_authorization_custom_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckMyRoleBindingsResponse_ResolvableGrant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	edgelq_iam_proto_v1_authorization_custom_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*GetPrincipalResponse_User)(nil),
		(*GetPrincipalResponse_ServiceAccount)(nil),
		(*GetPrincipalResponse_Anonymous)(nil),
	}
	edgelq_iam_proto_v1_authorization_custom_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*WatchPrincipalUpdatesResponse_CurrentPrincipal_User)(nil),
		(*WatchPrincipalUpdatesResponse_CurrentPrincipal_ServiceAccount)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: edgelq_iam_proto_v1_authorization_custom_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           edgelq_iam_proto_v1_authorization_custom_proto_goTypes,
		DependencyIndexes: edgelq_iam_proto_v1_authorization_custom_proto_depIdxs,
		MessageInfos:      edgelq_iam_proto_v1_authorization_custom_proto_msgTypes,
	}.Build()
	edgelq_iam_proto_v1_authorization_custom_proto = out.File
	edgelq_iam_proto_v1_authorization_custom_proto_rawDesc = nil
	edgelq_iam_proto_v1_authorization_custom_proto_goTypes = nil
	edgelq_iam_proto_v1_authorization_custom_proto_depIdxs = nil
}
