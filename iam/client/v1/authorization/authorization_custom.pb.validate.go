// Code generated by protoc-gen-goten-validate
// File: edgelq/iam/proto/v1/authorization_custom.proto
// DO NOT EDIT!!!

package authorization_client

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	gotenvalidate "github.com/cloudwan/goten-sdk/runtime/validate"
)

// proto imports
import (
	role "github.com/cloudwan/edgelq-sdk/iam/resources/v1/role"
	role_binding "github.com/cloudwan/edgelq-sdk/iam/resources/v1/role_binding"
	service_account "github.com/cloudwan/edgelq-sdk/iam/resources/v1/service_account"
	user "github.com/cloudwan/edgelq-sdk/iam/resources/v1/user"
	meta_service "github.com/cloudwan/goten-sdk/meta-service/resources/v1/service"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
)

var (
	_ = bytes.Equal
	_ = errors.New
	_ = fmt.Errorf
	_ = net.ParseIP
	_ = regexp.Match
	_ = strings.Split
	_ = time.Now
	_ = utf8.RuneCountInString
	_ = url.Parse
	_ = gotenvalidate.NewValidationError
)

// make sure we're using proto imports
var (
	_ = &role.Role{}
	_ = &role_binding.RoleBinding{}
	_ = &service_account.ServiceAccount{}
	_ = &user.User{}
	_ = &fieldmaskpb.FieldMask{}
	_ = &meta_service.Service{}
)

func (obj *GetPrincipalRequest) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *GetPrincipalResponse) GotenValidate() error {
	if obj == nil {
		return nil
	}
	switch opt := obj.Principal.(type) {
	case *GetPrincipalResponse_User:
		if subobj, ok := interface{}(opt.User).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("GetPrincipalResponse", "user", opt.User, "nested object validation failed", err)
			}
		}
	case *GetPrincipalResponse_ServiceAccount:
		if subobj, ok := interface{}(opt.ServiceAccount).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("GetPrincipalResponse", "serviceAccount", opt.ServiceAccount, "nested object validation failed", err)
			}
		}
	case *GetPrincipalResponse_Anonymous:
	default:
		_ = opt
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *WatchPrincipalUpdatesRequest) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *WatchPrincipalUpdatesResponse) GotenValidate() error {
	if obj == nil {
		return nil
	}
	for idx, elem := range obj.CurrentPrincipals {
		if subobj, ok := interface{}(elem).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("WatchPrincipalUpdatesResponse", "currentPrincipals", obj.CurrentPrincipals[idx], "nested object validation failed", err)
			}
		}
	}
	for idx, elem := range obj.RemovedPrincipals {
		if subobj, ok := interface{}(elem).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("WatchPrincipalUpdatesResponse", "removedPrincipals", obj.RemovedPrincipals[idx], "nested object validation failed", err)
			}
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *WatchPrincipalUpdatesResponse_CurrentPrincipal) GotenValidate() error {
	if obj == nil {
		return nil
	}
	switch opt := obj.Update.(type) {
	case *WatchPrincipalUpdatesResponse_CurrentPrincipal_User:
		if subobj, ok := interface{}(opt.User).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("CurrentPrincipal", "user", opt.User, "nested object validation failed", err)
			}
		}
	case *WatchPrincipalUpdatesResponse_CurrentPrincipal_ServiceAccount:
		if subobj, ok := interface{}(opt.ServiceAccount).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("CurrentPrincipal", "serviceAccount", opt.ServiceAccount, "nested object validation failed", err)
			}
		}
	default:
		_ = opt
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *WatchPrincipalUpdatesResponse_RemovedPrincipal) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *CheckMyRoleBindingsRequest) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *CheckMyRoleBindingsResponse) GotenValidate() error {
	if obj == nil {
		return nil
	}
	for idx, elem := range obj.ResolvableGrants {
		if subobj, ok := interface{}(elem).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("CheckMyRoleBindingsResponse", "resolvableGrants", obj.ResolvableGrants[idx], "nested object validation failed", err)
			}
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *CheckMyRoleBindingsResponse_ResolvableGrant) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if subobj, ok := interface{}(obj.RoleBinding).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("ResolvableGrant", "roleBinding", obj.RoleBinding, "nested object validation failed", err)
		}
	}
	for idx, elem := range obj.Grants {
		if subobj, ok := interface{}(elem).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("ResolvableGrant", "grants", obj.Grants[idx], "nested object validation failed", err)
			}
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
