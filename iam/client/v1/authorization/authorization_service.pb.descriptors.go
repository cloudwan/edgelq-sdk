// Code generated by protoc-gen-goten-client
// API: AuthorizationService
// DO NOT EDIT!!!

package authorization_client

import (
	"google.golang.org/protobuf/proto"

	gotenclient "github.com/cloudwan/goten-sdk/runtime/client"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	role_binding "github.com/cloudwan/edgelq-sdk/iam/resources/v1/role_binding"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = new(proto.Message)
	_ = new(gotenclient.MethodDescriptor)
	_ = gotenresource.WildcardId
)

// make sure we're using proto imports
var (
	_ = &role_binding.RoleBinding{}
)

var (
	descriptorsInitialized          bool
	authorizationServiceDescriptor  *AuthorizationServiceDescriptor
	getPrincipalDescriptor          *GetPrincipalDescriptor
	watchPrincipalUpdatesDescriptor *WatchPrincipalUpdatesDescriptor
	checkMyRoleBindingsDescriptor   *CheckMyRoleBindingsDescriptor
)

type GetPrincipalDescriptor struct{}

type GetPrincipalDescriptorClientMsgHandle struct{}

type GetPrincipalDescriptorServerMsgHandle struct{}

func (d *GetPrincipalDescriptor) NewEmptyClientMsg() proto.Message {
	return &GetPrincipalRequest{}
}

func (d *GetPrincipalDescriptor) NewEmptyServerMsg() proto.Message {
	return &GetPrincipalResponse{}
}

func (d *GetPrincipalDescriptor) IsUnary() bool {
	return true
}

func (d *GetPrincipalDescriptor) IsClientStream() bool {
	return false
}

func (d *GetPrincipalDescriptor) IsServerStream() bool {
	return false
}

func (d *GetPrincipalDescriptor) IsCollection() bool {
	return false
}

func (d *GetPrincipalDescriptor) IsPlural() bool {
	return false
}

func (d *GetPrincipalDescriptor) HasResource() bool {
	return false
}

func (d *GetPrincipalDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *GetPrincipalDescriptor) GetVerb() string {
	return "getPrincipal"
}

func (d *GetPrincipalDescriptor) GetMethodName() string {
	return "GetPrincipal"
}

func (d *GetPrincipalDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1.AuthorizationService/GetPrincipal"
}

func (d *GetPrincipalDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1"
}

func (d *GetPrincipalDescriptor) GetApiName() string {
	return "AuthorizationService"
}

func (d *GetPrincipalDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *GetPrincipalDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *GetPrincipalDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return authorizationServiceDescriptor
}

func (d *GetPrincipalDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return nil
}

func (d *GetPrincipalDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetPrincipalDescriptorClientMsgHandle{}
}

func (d *GetPrincipalDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetPrincipalDescriptorServerMsgHandle{}
}

func (h *GetPrincipalDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *GetPrincipalDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	return nil
}

func (h *GetPrincipalDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *GetPrincipalDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	return nil
}

func (h *GetPrincipalDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	return nil
}

func (h *GetPrincipalDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *GetPrincipalDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	return nil
}

func (h *GetPrincipalDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *GetPrincipalDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	return nil
}

func (h *GetPrincipalDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	return nil
}

func GetGetPrincipalDescriptor() *GetPrincipalDescriptor {
	return getPrincipalDescriptor
}

type WatchPrincipalUpdatesDescriptor struct{}

type WatchPrincipalUpdatesDescriptorClientMsgHandle struct{}

type WatchPrincipalUpdatesDescriptorServerMsgHandle struct{}

func (d *WatchPrincipalUpdatesDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchPrincipalUpdatesRequest{}
}

func (d *WatchPrincipalUpdatesDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchPrincipalUpdatesResponse{}
}

func (d *WatchPrincipalUpdatesDescriptor) IsUnary() bool {
	return false
}

func (d *WatchPrincipalUpdatesDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchPrincipalUpdatesDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchPrincipalUpdatesDescriptor) IsCollection() bool {
	return false
}

func (d *WatchPrincipalUpdatesDescriptor) IsPlural() bool {
	return false
}

func (d *WatchPrincipalUpdatesDescriptor) HasResource() bool {
	return false
}

func (d *WatchPrincipalUpdatesDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchPrincipalUpdatesDescriptor) GetVerb() string {
	return "watchPrincipalUpdates"
}

func (d *WatchPrincipalUpdatesDescriptor) GetMethodName() string {
	return "WatchPrincipalUpdates"
}

func (d *WatchPrincipalUpdatesDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1.AuthorizationService/WatchPrincipalUpdates"
}

func (d *WatchPrincipalUpdatesDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1"
}

func (d *WatchPrincipalUpdatesDescriptor) GetApiName() string {
	return "AuthorizationService"
}

func (d *WatchPrincipalUpdatesDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *WatchPrincipalUpdatesDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *WatchPrincipalUpdatesDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return authorizationServiceDescriptor
}

func (d *WatchPrincipalUpdatesDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return nil
}

func (d *WatchPrincipalUpdatesDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchPrincipalUpdatesDescriptorClientMsgHandle{}
}

func (d *WatchPrincipalUpdatesDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchPrincipalUpdatesDescriptorServerMsgHandle{}
}

func (h *WatchPrincipalUpdatesDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *WatchPrincipalUpdatesDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	return nil
}

func (h *WatchPrincipalUpdatesDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *WatchPrincipalUpdatesDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	return nil
}

func (h *WatchPrincipalUpdatesDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	return nil
}

func (h *WatchPrincipalUpdatesDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *WatchPrincipalUpdatesDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	return nil
}

func (h *WatchPrincipalUpdatesDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *WatchPrincipalUpdatesDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	return nil
}

func (h *WatchPrincipalUpdatesDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	return nil
}

func GetWatchPrincipalUpdatesDescriptor() *WatchPrincipalUpdatesDescriptor {
	return watchPrincipalUpdatesDescriptor
}

type CheckMyRoleBindingsDescriptor struct{}

type CheckMyRoleBindingsDescriptorClientMsgHandle struct{}

type CheckMyRoleBindingsDescriptorServerMsgHandle struct{}

func (d *CheckMyRoleBindingsDescriptor) NewEmptyClientMsg() proto.Message {
	return &CheckMyRoleBindingsRequest{}
}

func (d *CheckMyRoleBindingsDescriptor) NewEmptyServerMsg() proto.Message {
	return &CheckMyRoleBindingsResponse{}
}

func (d *CheckMyRoleBindingsDescriptor) IsUnary() bool {
	return true
}

func (d *CheckMyRoleBindingsDescriptor) IsClientStream() bool {
	return false
}

func (d *CheckMyRoleBindingsDescriptor) IsServerStream() bool {
	return false
}

func (d *CheckMyRoleBindingsDescriptor) IsCollection() bool {
	return true
}

func (d *CheckMyRoleBindingsDescriptor) IsPlural() bool {
	return true
}

func (d *CheckMyRoleBindingsDescriptor) HasResource() bool {
	return true
}

func (d *CheckMyRoleBindingsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *CheckMyRoleBindingsDescriptor) GetVerb() string {
	return "checkMy"
}

func (d *CheckMyRoleBindingsDescriptor) GetMethodName() string {
	return "CheckMyRoleBindings"
}

func (d *CheckMyRoleBindingsDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1.AuthorizationService/CheckMyRoleBindings"
}

func (d *CheckMyRoleBindingsDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1"
}

func (d *CheckMyRoleBindingsDescriptor) GetApiName() string {
	return "AuthorizationService"
}

func (d *CheckMyRoleBindingsDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *CheckMyRoleBindingsDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *CheckMyRoleBindingsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return authorizationServiceDescriptor
}

func (d *CheckMyRoleBindingsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return role_binding.GetDescriptor()
}

func (d *CheckMyRoleBindingsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CheckMyRoleBindingsDescriptorClientMsgHandle{}
}

func (d *CheckMyRoleBindingsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CheckMyRoleBindingsDescriptorServerMsgHandle{}
}

func (h *CheckMyRoleBindingsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CheckMyRoleBindingsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*CheckMyRoleBindingsRequest) *role_binding.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *CheckMyRoleBindingsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*CheckMyRoleBindingsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*CheckMyRoleBindingsRequest) []*role_binding.Name
	})
	if ok {
		return role_binding.RoleBindingNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CheckMyRoleBindingsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CheckMyRoleBindingsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*CheckMyRoleBindingsRequest) *role_binding.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*role_binding.ParentName)(nil)
}

func (h *CheckMyRoleBindingsDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*CheckMyRoleBindingsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*CheckMyRoleBindingsRequest) *role_binding.RoleBinding
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *CheckMyRoleBindingsDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*CheckMyRoleBindingsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*CheckMyRoleBindingsRequest) []*role_binding.RoleBinding
	})
	if ok {
		return role_binding.RoleBindingList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *CheckMyRoleBindingsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CheckMyRoleBindingsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*CheckMyRoleBindingsResponse) *role_binding.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *CheckMyRoleBindingsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*CheckMyRoleBindingsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*CheckMyRoleBindingsResponse) []*role_binding.Name
	})
	if ok {
		return role_binding.RoleBindingNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CheckMyRoleBindingsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CheckMyRoleBindingsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*CheckMyRoleBindingsResponse) *role_binding.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *CheckMyRoleBindingsDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*CheckMyRoleBindingsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*CheckMyRoleBindingsResponse) *role_binding.RoleBinding
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *CheckMyRoleBindingsDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*CheckMyRoleBindingsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*CheckMyRoleBindingsResponse) []*role_binding.RoleBinding
	})
	if ok {
		return role_binding.RoleBindingList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetCheckMyRoleBindingsDescriptor() *CheckMyRoleBindingsDescriptor {
	return checkMyRoleBindingsDescriptor
}

type AuthorizationServiceDescriptor struct{}

func (d *AuthorizationServiceDescriptor) AllMethodDescriptors() []gotenclient.MethodDescriptor {
	return []gotenclient.MethodDescriptor{
		getPrincipalDescriptor,
		watchPrincipalUpdatesDescriptor,
		checkMyRoleBindingsDescriptor,
	}
}

func (d *AuthorizationServiceDescriptor) GetFullAPIName() string {
	return "/ntt.iam.v1.AuthorizationService"
}

func (d *AuthorizationServiceDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1"
}

func (d *AuthorizationServiceDescriptor) GetApiName() string {
	return "AuthorizationService"
}

func (d *AuthorizationServiceDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *AuthorizationServiceDescriptor) GetServiceVersion() string {
	return "v1"
}

func GetAuthorizationServiceDescriptor() *AuthorizationServiceDescriptor {
	return authorizationServiceDescriptor
}

func initDescriptors() {
	authorizationServiceDescriptor = &AuthorizationServiceDescriptor{}
	getPrincipalDescriptor = &GetPrincipalDescriptor{}
	watchPrincipalUpdatesDescriptor = &WatchPrincipalUpdatesDescriptor{}
	checkMyRoleBindingsDescriptor = &CheckMyRoleBindingsDescriptor{}
	gotenclient.GetRegistry().RegisterApiDescriptor(authorizationServiceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(getPrincipalDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchPrincipalUpdatesDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(checkMyRoleBindingsDescriptor)
}

func init() {
	if !descriptorsInitialized {
		initDescriptors()
		descriptorsInitialized = true
	}
}
