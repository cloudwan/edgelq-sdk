// Code generated by protoc-gen-goten-client
// API: RoleBindingService
// DO NOT EDIT!!!

package role_binding_client

import (
	"google.golang.org/protobuf/proto"

	gotenclient "github.com/cloudwan/goten-sdk/runtime/client"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	role_binding "github.com/cloudwan/edgelq-sdk/iam/resources/v1/role_binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = new(proto.Message)
	_ = new(gotenclient.MethodDescriptor)
	_ = gotenresource.WildcardId
)

// make sure we're using proto imports
var (
	_ = &role_binding.RoleBinding{}
	_ = &emptypb.Empty{}
)

var (
	descriptorsInitialized                bool
	roleBindingServiceDescriptor          *RoleBindingServiceDescriptor
	getRoleBindingDescriptor              *GetRoleBindingDescriptor
	batchGetRoleBindingsDescriptor        *BatchGetRoleBindingsDescriptor
	listRoleBindingsDescriptor            *ListRoleBindingsDescriptor
	watchRoleBindingDescriptor            *WatchRoleBindingDescriptor
	watchRoleBindingsDescriptor           *WatchRoleBindingsDescriptor
	createRoleBindingDescriptor           *CreateRoleBindingDescriptor
	updateRoleBindingDescriptor           *UpdateRoleBindingDescriptor
	deleteRoleBindingDescriptor           *DeleteRoleBindingDescriptor
	listRoleBindingsWithMembersDescriptor *ListRoleBindingsWithMembersDescriptor
	listMyRoleBindingsDescriptor          *ListMyRoleBindingsDescriptor
)

type GetRoleBindingDescriptor struct{}

type GetRoleBindingDescriptorClientMsgHandle struct{}

type GetRoleBindingDescriptorServerMsgHandle struct{}

func (d *GetRoleBindingDescriptor) NewEmptyClientMsg() proto.Message {
	return &GetRoleBindingRequest{}
}

func (d *GetRoleBindingDescriptor) NewEmptyServerMsg() proto.Message {
	return &role_binding.RoleBinding{}
}

func (d *GetRoleBindingDescriptor) IsUnary() bool {
	return true
}

func (d *GetRoleBindingDescriptor) IsClientStream() bool {
	return false
}

func (d *GetRoleBindingDescriptor) IsServerStream() bool {
	return false
}

func (d *GetRoleBindingDescriptor) IsCollection() bool {
	return false
}

func (d *GetRoleBindingDescriptor) IsPlural() bool {
	return false
}

func (d *GetRoleBindingDescriptor) HasResource() bool {
	return true
}

func (d *GetRoleBindingDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *GetRoleBindingDescriptor) GetVerb() string {
	return "get"
}

func (d *GetRoleBindingDescriptor) GetMethodName() string {
	return "GetRoleBinding"
}

func (d *GetRoleBindingDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1.RoleBindingService/GetRoleBinding"
}

func (d *GetRoleBindingDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1"
}

func (d *GetRoleBindingDescriptor) GetApiName() string {
	return "RoleBindingService"
}

func (d *GetRoleBindingDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *GetRoleBindingDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *GetRoleBindingDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return roleBindingServiceDescriptor
}

func (d *GetRoleBindingDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return role_binding.GetDescriptor()
}

func (d *GetRoleBindingDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetRoleBindingDescriptorClientMsgHandle{}
}

func (d *GetRoleBindingDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetRoleBindingDescriptorServerMsgHandle{}
}

func (h *GetRoleBindingDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetRoleBindingRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*GetRoleBindingRequest) *role_binding.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*role_binding.Name)(nil)
}

func (h *GetRoleBindingDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*GetRoleBindingRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*GetRoleBindingRequest) []*role_binding.Name
	})
	if ok {
		return role_binding.RoleBindingNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetRoleBindingDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetRoleBindingRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*GetRoleBindingRequest) *role_binding.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *GetRoleBindingDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*GetRoleBindingRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*GetRoleBindingRequest) *role_binding.RoleBinding
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *GetRoleBindingDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*GetRoleBindingRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*GetRoleBindingRequest) []*role_binding.RoleBinding
	})
	if ok {
		return role_binding.RoleBindingList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *GetRoleBindingDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*role_binding.RoleBinding)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*role_binding.RoleBinding) *role_binding.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*role_binding.Name)(nil)
}

func (h *GetRoleBindingDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*role_binding.RoleBinding)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*role_binding.RoleBinding) []*role_binding.Name
	})
	if ok {
		return role_binding.RoleBindingNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetRoleBindingDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*role_binding.RoleBinding)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*role_binding.RoleBinding) *role_binding.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *GetRoleBindingDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	return msg.(*role_binding.RoleBinding)
}

func (h *GetRoleBindingDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*role_binding.RoleBinding)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*role_binding.RoleBinding) []*role_binding.RoleBinding
	})
	if ok {
		return role_binding.RoleBindingList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetGetRoleBindingDescriptor() *GetRoleBindingDescriptor {
	return getRoleBindingDescriptor
}

type BatchGetRoleBindingsDescriptor struct{}

type BatchGetRoleBindingsDescriptorClientMsgHandle struct{}

type BatchGetRoleBindingsDescriptorServerMsgHandle struct{}

func (d *BatchGetRoleBindingsDescriptor) NewEmptyClientMsg() proto.Message {
	return &BatchGetRoleBindingsRequest{}
}

func (d *BatchGetRoleBindingsDescriptor) NewEmptyServerMsg() proto.Message {
	return &BatchGetRoleBindingsResponse{}
}

func (d *BatchGetRoleBindingsDescriptor) IsUnary() bool {
	return true
}

func (d *BatchGetRoleBindingsDescriptor) IsClientStream() bool {
	return false
}

func (d *BatchGetRoleBindingsDescriptor) IsServerStream() bool {
	return false
}

func (d *BatchGetRoleBindingsDescriptor) IsCollection() bool {
	return false
}

func (d *BatchGetRoleBindingsDescriptor) IsPlural() bool {
	return true
}

func (d *BatchGetRoleBindingsDescriptor) HasResource() bool {
	return true
}

func (d *BatchGetRoleBindingsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *BatchGetRoleBindingsDescriptor) GetVerb() string {
	return "batchGet"
}

func (d *BatchGetRoleBindingsDescriptor) GetMethodName() string {
	return "BatchGetRoleBindings"
}

func (d *BatchGetRoleBindingsDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1.RoleBindingService/BatchGetRoleBindings"
}

func (d *BatchGetRoleBindingsDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1"
}

func (d *BatchGetRoleBindingsDescriptor) GetApiName() string {
	return "RoleBindingService"
}

func (d *BatchGetRoleBindingsDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *BatchGetRoleBindingsDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *BatchGetRoleBindingsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return roleBindingServiceDescriptor
}

func (d *BatchGetRoleBindingsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return role_binding.GetDescriptor()
}

func (d *BatchGetRoleBindingsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetRoleBindingsDescriptorClientMsgHandle{}
}

func (d *BatchGetRoleBindingsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetRoleBindingsDescriptorServerMsgHandle{}
}

func (h *BatchGetRoleBindingsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetRoleBindingsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetRoleBindingsRequest) *role_binding.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetRoleBindingsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetRoleBindingsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetRoleBindingsRequest) []*role_binding.Name
	})
	if ok {
		return role_binding.RoleBindingNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if names := typedMsg.GetNames(); len(names) > 0 {
			return role_binding.RoleBindingNameList(names)
		}
	}
	return (role_binding.RoleBindingNameList)(nil)
}

func (h *BatchGetRoleBindingsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetRoleBindingsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*BatchGetRoleBindingsRequest) *role_binding.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *BatchGetRoleBindingsDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*BatchGetRoleBindingsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*BatchGetRoleBindingsRequest) *role_binding.RoleBinding
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *BatchGetRoleBindingsDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*BatchGetRoleBindingsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*BatchGetRoleBindingsRequest) []*role_binding.RoleBinding
	})
	if ok {
		return role_binding.RoleBindingList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *BatchGetRoleBindingsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetRoleBindingsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetRoleBindingsResponse) *role_binding.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetRoleBindingsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetRoleBindingsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetRoleBindingsResponse) []*role_binding.Name
	})
	if ok {
		return role_binding.RoleBindingNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetRoleBindings(); len(resources) > 0 {
			list := make(role_binding.RoleBindingNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (role_binding.RoleBindingNameList)(nil)
}

func (h *BatchGetRoleBindingsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetRoleBindingsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*BatchGetRoleBindingsResponse) *role_binding.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *BatchGetRoleBindingsDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*BatchGetRoleBindingsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*BatchGetRoleBindingsResponse) *role_binding.RoleBinding
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *BatchGetRoleBindingsDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*BatchGetRoleBindingsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*BatchGetRoleBindingsResponse) []*role_binding.RoleBinding
	})
	if ok {
		return role_binding.RoleBindingList(override.OverrideExtractResourceBodies(typedMsg))
	}
	{
		if resources := typedMsg.GetRoleBindings(); len(resources) > 0 {
			return role_binding.RoleBindingList(resources)
		}
	}
	return (role_binding.RoleBindingList)(nil)
}

func GetBatchGetRoleBindingsDescriptor() *BatchGetRoleBindingsDescriptor {
	return batchGetRoleBindingsDescriptor
}

type ListRoleBindingsDescriptor struct{}

type ListRoleBindingsDescriptorClientMsgHandle struct{}

type ListRoleBindingsDescriptorServerMsgHandle struct{}

func (d *ListRoleBindingsDescriptor) NewEmptyClientMsg() proto.Message {
	return &ListRoleBindingsRequest{}
}

func (d *ListRoleBindingsDescriptor) NewEmptyServerMsg() proto.Message {
	return &ListRoleBindingsResponse{}
}

func (d *ListRoleBindingsDescriptor) IsUnary() bool {
	return true
}

func (d *ListRoleBindingsDescriptor) IsClientStream() bool {
	return false
}

func (d *ListRoleBindingsDescriptor) IsServerStream() bool {
	return false
}

func (d *ListRoleBindingsDescriptor) IsCollection() bool {
	return true
}

func (d *ListRoleBindingsDescriptor) IsPlural() bool {
	return true
}

func (d *ListRoleBindingsDescriptor) HasResource() bool {
	return true
}

func (d *ListRoleBindingsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ListRoleBindingsDescriptor) GetVerb() string {
	return "list"
}

func (d *ListRoleBindingsDescriptor) GetMethodName() string {
	return "ListRoleBindings"
}

func (d *ListRoleBindingsDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1.RoleBindingService/ListRoleBindings"
}

func (d *ListRoleBindingsDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1"
}

func (d *ListRoleBindingsDescriptor) GetApiName() string {
	return "RoleBindingService"
}

func (d *ListRoleBindingsDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *ListRoleBindingsDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *ListRoleBindingsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return roleBindingServiceDescriptor
}

func (d *ListRoleBindingsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return role_binding.GetDescriptor()
}

func (d *ListRoleBindingsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListRoleBindingsDescriptorClientMsgHandle{}
}

func (d *ListRoleBindingsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListRoleBindingsDescriptorServerMsgHandle{}
}

func (h *ListRoleBindingsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListRoleBindingsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListRoleBindingsRequest) *role_binding.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListRoleBindingsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListRoleBindingsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListRoleBindingsRequest) []*role_binding.Name
	})
	if ok {
		return role_binding.RoleBindingNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *ListRoleBindingsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListRoleBindingsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ListRoleBindingsRequest) *role_binding.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*role_binding.ParentName)(nil)
}

func (h *ListRoleBindingsDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*ListRoleBindingsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*ListRoleBindingsRequest) *role_binding.RoleBinding
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *ListRoleBindingsDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*ListRoleBindingsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*ListRoleBindingsRequest) []*role_binding.RoleBinding
	})
	if ok {
		return role_binding.RoleBindingList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *ListRoleBindingsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListRoleBindingsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListRoleBindingsResponse) *role_binding.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListRoleBindingsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListRoleBindingsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListRoleBindingsResponse) []*role_binding.Name
	})
	if ok {
		return role_binding.RoleBindingNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetRoleBindings(); len(resources) > 0 {
			list := make(role_binding.RoleBindingNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (role_binding.RoleBindingNameList)(nil)
}

func (h *ListRoleBindingsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListRoleBindingsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ListRoleBindingsResponse) *role_binding.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *ListRoleBindingsDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*ListRoleBindingsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*ListRoleBindingsResponse) *role_binding.RoleBinding
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *ListRoleBindingsDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*ListRoleBindingsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*ListRoleBindingsResponse) []*role_binding.RoleBinding
	})
	if ok {
		return role_binding.RoleBindingList(override.OverrideExtractResourceBodies(typedMsg))
	}
	{
		if resources := typedMsg.GetRoleBindings(); len(resources) > 0 {
			return role_binding.RoleBindingList(resources)
		}
	}
	return (role_binding.RoleBindingList)(nil)
}

func GetListRoleBindingsDescriptor() *ListRoleBindingsDescriptor {
	return listRoleBindingsDescriptor
}

type WatchRoleBindingDescriptor struct{}

type WatchRoleBindingDescriptorClientMsgHandle struct{}

type WatchRoleBindingDescriptorServerMsgHandle struct{}

func (d *WatchRoleBindingDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchRoleBindingRequest{}
}

func (d *WatchRoleBindingDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchRoleBindingResponse{}
}

func (d *WatchRoleBindingDescriptor) IsUnary() bool {
	return false
}

func (d *WatchRoleBindingDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchRoleBindingDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchRoleBindingDescriptor) IsCollection() bool {
	return false
}

func (d *WatchRoleBindingDescriptor) IsPlural() bool {
	return false
}

func (d *WatchRoleBindingDescriptor) HasResource() bool {
	return true
}

func (d *WatchRoleBindingDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchRoleBindingDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchRoleBindingDescriptor) GetMethodName() string {
	return "WatchRoleBinding"
}

func (d *WatchRoleBindingDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1.RoleBindingService/WatchRoleBinding"
}

func (d *WatchRoleBindingDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1"
}

func (d *WatchRoleBindingDescriptor) GetApiName() string {
	return "RoleBindingService"
}

func (d *WatchRoleBindingDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *WatchRoleBindingDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *WatchRoleBindingDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return roleBindingServiceDescriptor
}

func (d *WatchRoleBindingDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return role_binding.GetDescriptor()
}

func (d *WatchRoleBindingDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchRoleBindingDescriptorClientMsgHandle{}
}

func (d *WatchRoleBindingDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchRoleBindingDescriptorServerMsgHandle{}
}

func (h *WatchRoleBindingDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchRoleBindingRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchRoleBindingRequest) *role_binding.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*role_binding.Name)(nil)
}

func (h *WatchRoleBindingDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchRoleBindingRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchRoleBindingRequest) []*role_binding.Name
	})
	if ok {
		return role_binding.RoleBindingNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchRoleBindingDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchRoleBindingRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchRoleBindingRequest) *role_binding.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchRoleBindingDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchRoleBindingRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchRoleBindingRequest) *role_binding.RoleBinding
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *WatchRoleBindingDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchRoleBindingRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchRoleBindingRequest) []*role_binding.RoleBinding
	})
	if ok {
		return role_binding.RoleBindingList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *WatchRoleBindingDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchRoleBindingResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchRoleBindingResponse) *role_binding.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if resChange := typedMsg.GetChange(); resChange != nil {
			switch tResChange := resChange.ChangeType.(type) {
			case *role_binding.RoleBindingChange_Added_:
				return tResChange.Added.GetRoleBinding().GetName()
			case *role_binding.RoleBindingChange_Modified_:
				return tResChange.Modified.GetName()
			case *role_binding.RoleBindingChange_Removed_:
				return tResChange.Removed.GetName()
			case *role_binding.RoleBindingChange_Current_:
				return tResChange.Current.GetRoleBinding().GetName()
			}
		}
	}
	return (*role_binding.Name)(nil)
}

func (h *WatchRoleBindingDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchRoleBindingResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchRoleBindingResponse) []*role_binding.Name
	})
	if ok {
		return role_binding.RoleBindingNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchRoleBindingDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchRoleBindingResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchRoleBindingResponse) *role_binding.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchRoleBindingDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchRoleBindingResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchRoleBindingResponse) *role_binding.RoleBinding
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	{
		if resChange := typedMsg.GetChange(); resChange != nil {
			switch tResChange := resChange.ChangeType.(type) {
			case *role_binding.RoleBindingChange_Added_:
				return tResChange.Added.GetRoleBinding()
			case *role_binding.RoleBindingChange_Modified_:
				return tResChange.Modified.GetRoleBinding()
			case *role_binding.RoleBindingChange_Current_:
				return tResChange.Current.GetRoleBinding()
			}
		}
	}
	return (*role_binding.RoleBinding)(nil)
}

func (h *WatchRoleBindingDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchRoleBindingResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchRoleBindingResponse) []*role_binding.RoleBinding
	})
	if ok {
		return role_binding.RoleBindingList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetWatchRoleBindingDescriptor() *WatchRoleBindingDescriptor {
	return watchRoleBindingDescriptor
}

type WatchRoleBindingsDescriptor struct{}

type WatchRoleBindingsDescriptorClientMsgHandle struct{}

type WatchRoleBindingsDescriptorServerMsgHandle struct{}

func (d *WatchRoleBindingsDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchRoleBindingsRequest{}
}

func (d *WatchRoleBindingsDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchRoleBindingsResponse{}
}

func (d *WatchRoleBindingsDescriptor) IsUnary() bool {
	return false
}

func (d *WatchRoleBindingsDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchRoleBindingsDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchRoleBindingsDescriptor) IsCollection() bool {
	return true
}

func (d *WatchRoleBindingsDescriptor) IsPlural() bool {
	return true
}

func (d *WatchRoleBindingsDescriptor) HasResource() bool {
	return true
}

func (d *WatchRoleBindingsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchRoleBindingsDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchRoleBindingsDescriptor) GetMethodName() string {
	return "WatchRoleBindings"
}

func (d *WatchRoleBindingsDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1.RoleBindingService/WatchRoleBindings"
}

func (d *WatchRoleBindingsDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1"
}

func (d *WatchRoleBindingsDescriptor) GetApiName() string {
	return "RoleBindingService"
}

func (d *WatchRoleBindingsDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *WatchRoleBindingsDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *WatchRoleBindingsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return roleBindingServiceDescriptor
}

func (d *WatchRoleBindingsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return role_binding.GetDescriptor()
}

func (d *WatchRoleBindingsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchRoleBindingsDescriptorClientMsgHandle{}
}

func (d *WatchRoleBindingsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchRoleBindingsDescriptorServerMsgHandle{}
}

func (h *WatchRoleBindingsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchRoleBindingsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchRoleBindingsRequest) *role_binding.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchRoleBindingsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchRoleBindingsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchRoleBindingsRequest) []*role_binding.Name
	})
	if ok {
		return role_binding.RoleBindingNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchRoleBindingsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchRoleBindingsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchRoleBindingsRequest) *role_binding.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*role_binding.ParentName)(nil)
}

func (h *WatchRoleBindingsDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchRoleBindingsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchRoleBindingsRequest) *role_binding.RoleBinding
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *WatchRoleBindingsDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchRoleBindingsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchRoleBindingsRequest) []*role_binding.RoleBinding
	})
	if ok {
		return role_binding.RoleBindingList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *WatchRoleBindingsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchRoleBindingsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchRoleBindingsResponse) *role_binding.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchRoleBindingsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchRoleBindingsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchRoleBindingsResponse) []*role_binding.Name
	})
	if ok {
		return role_binding.RoleBindingNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resChanges := typedMsg.GetRoleBindingChanges(); len(resChanges) > 0 {
			list := make(role_binding.RoleBindingNameList, 0, len(resChanges))
			for _, resChange := range resChanges {
				switch tResChange := resChange.ChangeType.(type) {
				case *role_binding.RoleBindingChange_Added_:
					list = append(list, tResChange.Added.GetRoleBinding().GetName())
				case *role_binding.RoleBindingChange_Modified_:
					list = append(list, tResChange.Modified.GetName())
				case *role_binding.RoleBindingChange_Removed_:
					list = append(list, tResChange.Removed.GetName())
				case *role_binding.RoleBindingChange_Current_:
					list = append(list, tResChange.Current.GetRoleBinding().GetName())
				}
			}
			return list
		}
	}
	return (role_binding.RoleBindingNameList)(nil)
}

func (h *WatchRoleBindingsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchRoleBindingsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchRoleBindingsResponse) *role_binding.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchRoleBindingsDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchRoleBindingsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchRoleBindingsResponse) *role_binding.RoleBinding
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *WatchRoleBindingsDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchRoleBindingsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchRoleBindingsResponse) []*role_binding.RoleBinding
	})
	if ok {
		return role_binding.RoleBindingList(override.OverrideExtractResourceBodies(typedMsg))
	}
	{
		if resChanges := typedMsg.GetRoleBindingChanges(); len(resChanges) > 0 {
			list := make(role_binding.RoleBindingList, 0, len(resChanges))
			for _, resChange := range resChanges {
				switch tResChange := resChange.ChangeType.(type) {
				case *role_binding.RoleBindingChange_Added_:
					list = append(list, tResChange.Added.GetRoleBinding())
				case *role_binding.RoleBindingChange_Modified_:
					list = append(list, tResChange.Modified.GetRoleBinding())
				case *role_binding.RoleBindingChange_Current_:
					list = append(list, tResChange.Current.GetRoleBinding())
				}
			}
			return list
		}
	}
	return (role_binding.RoleBindingList)(nil)
}

func GetWatchRoleBindingsDescriptor() *WatchRoleBindingsDescriptor {
	return watchRoleBindingsDescriptor
}

type CreateRoleBindingDescriptor struct{}

type CreateRoleBindingDescriptorClientMsgHandle struct{}

type CreateRoleBindingDescriptorServerMsgHandle struct{}

func (d *CreateRoleBindingDescriptor) NewEmptyClientMsg() proto.Message {
	return &CreateRoleBindingRequest{}
}

func (d *CreateRoleBindingDescriptor) NewEmptyServerMsg() proto.Message {
	return &role_binding.RoleBinding{}
}

func (d *CreateRoleBindingDescriptor) IsUnary() bool {
	return true
}

func (d *CreateRoleBindingDescriptor) IsClientStream() bool {
	return false
}

func (d *CreateRoleBindingDescriptor) IsServerStream() bool {
	return false
}

func (d *CreateRoleBindingDescriptor) IsCollection() bool {
	return true
}

func (d *CreateRoleBindingDescriptor) IsPlural() bool {
	return false
}

func (d *CreateRoleBindingDescriptor) HasResource() bool {
	return true
}

func (d *CreateRoleBindingDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *CreateRoleBindingDescriptor) GetVerb() string {
	return "create"
}

func (d *CreateRoleBindingDescriptor) GetMethodName() string {
	return "CreateRoleBinding"
}

func (d *CreateRoleBindingDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1.RoleBindingService/CreateRoleBinding"
}

func (d *CreateRoleBindingDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1"
}

func (d *CreateRoleBindingDescriptor) GetApiName() string {
	return "RoleBindingService"
}

func (d *CreateRoleBindingDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *CreateRoleBindingDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *CreateRoleBindingDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return roleBindingServiceDescriptor
}

func (d *CreateRoleBindingDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return role_binding.GetDescriptor()
}

func (d *CreateRoleBindingDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateRoleBindingDescriptorClientMsgHandle{}
}

func (d *CreateRoleBindingDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateRoleBindingDescriptorServerMsgHandle{}
}

func (h *CreateRoleBindingDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateRoleBindingRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*CreateRoleBindingRequest) *role_binding.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetRoleBinding()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*role_binding.Name)(nil)
}

func (h *CreateRoleBindingDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*CreateRoleBindingRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*CreateRoleBindingRequest) []*role_binding.Name
	})
	if ok {
		return role_binding.RoleBindingNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateRoleBindingDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateRoleBindingRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*CreateRoleBindingRequest) *role_binding.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*role_binding.ParentName)(nil)
}

func (h *CreateRoleBindingDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*CreateRoleBindingRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*CreateRoleBindingRequest) *role_binding.RoleBinding
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	{
		return typedMsg.GetRoleBinding()
	}
	return (*role_binding.RoleBinding)(nil)
}

func (h *CreateRoleBindingDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*CreateRoleBindingRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*CreateRoleBindingRequest) []*role_binding.RoleBinding
	})
	if ok {
		return role_binding.RoleBindingList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *CreateRoleBindingDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*role_binding.RoleBinding)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*role_binding.RoleBinding) *role_binding.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*role_binding.Name)(nil)
}

func (h *CreateRoleBindingDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*role_binding.RoleBinding)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*role_binding.RoleBinding) []*role_binding.Name
	})
	if ok {
		return role_binding.RoleBindingNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateRoleBindingDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*role_binding.RoleBinding)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*role_binding.RoleBinding) *role_binding.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *CreateRoleBindingDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	return msg.(*role_binding.RoleBinding)
}

func (h *CreateRoleBindingDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*role_binding.RoleBinding)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*role_binding.RoleBinding) []*role_binding.RoleBinding
	})
	if ok {
		return role_binding.RoleBindingList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetCreateRoleBindingDescriptor() *CreateRoleBindingDescriptor {
	return createRoleBindingDescriptor
}

type UpdateRoleBindingDescriptor struct{}

type UpdateRoleBindingDescriptorClientMsgHandle struct{}

type UpdateRoleBindingDescriptorServerMsgHandle struct{}

func (d *UpdateRoleBindingDescriptor) NewEmptyClientMsg() proto.Message {
	return &UpdateRoleBindingRequest{}
}

func (d *UpdateRoleBindingDescriptor) NewEmptyServerMsg() proto.Message {
	return &role_binding.RoleBinding{}
}

func (d *UpdateRoleBindingDescriptor) IsUnary() bool {
	return true
}

func (d *UpdateRoleBindingDescriptor) IsClientStream() bool {
	return false
}

func (d *UpdateRoleBindingDescriptor) IsServerStream() bool {
	return false
}

func (d *UpdateRoleBindingDescriptor) IsCollection() bool {
	return false
}

func (d *UpdateRoleBindingDescriptor) IsPlural() bool {
	return false
}

func (d *UpdateRoleBindingDescriptor) HasResource() bool {
	return true
}

func (d *UpdateRoleBindingDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *UpdateRoleBindingDescriptor) GetVerb() string {
	return "update"
}

func (d *UpdateRoleBindingDescriptor) GetMethodName() string {
	return "UpdateRoleBinding"
}

func (d *UpdateRoleBindingDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1.RoleBindingService/UpdateRoleBinding"
}

func (d *UpdateRoleBindingDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1"
}

func (d *UpdateRoleBindingDescriptor) GetApiName() string {
	return "RoleBindingService"
}

func (d *UpdateRoleBindingDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *UpdateRoleBindingDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *UpdateRoleBindingDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return roleBindingServiceDescriptor
}

func (d *UpdateRoleBindingDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return role_binding.GetDescriptor()
}

func (d *UpdateRoleBindingDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateRoleBindingDescriptorClientMsgHandle{}
}

func (d *UpdateRoleBindingDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateRoleBindingDescriptorServerMsgHandle{}
}

func (h *UpdateRoleBindingDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateRoleBindingRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*UpdateRoleBindingRequest) *role_binding.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetRoleBinding()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*role_binding.Name)(nil)
}

func (h *UpdateRoleBindingDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*UpdateRoleBindingRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*UpdateRoleBindingRequest) []*role_binding.Name
	})
	if ok {
		return role_binding.RoleBindingNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateRoleBindingDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateRoleBindingRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*UpdateRoleBindingRequest) *role_binding.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *UpdateRoleBindingDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*UpdateRoleBindingRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*UpdateRoleBindingRequest) *role_binding.RoleBinding
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	{
		return typedMsg.GetRoleBinding()
	}
	return (*role_binding.RoleBinding)(nil)
}

func (h *UpdateRoleBindingDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*UpdateRoleBindingRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*UpdateRoleBindingRequest) []*role_binding.RoleBinding
	})
	if ok {
		return role_binding.RoleBindingList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *UpdateRoleBindingDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*role_binding.RoleBinding)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*role_binding.RoleBinding) *role_binding.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*role_binding.Name)(nil)
}

func (h *UpdateRoleBindingDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*role_binding.RoleBinding)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*role_binding.RoleBinding) []*role_binding.Name
	})
	if ok {
		return role_binding.RoleBindingNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateRoleBindingDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*role_binding.RoleBinding)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*role_binding.RoleBinding) *role_binding.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *UpdateRoleBindingDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	return msg.(*role_binding.RoleBinding)
}

func (h *UpdateRoleBindingDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*role_binding.RoleBinding)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*role_binding.RoleBinding) []*role_binding.RoleBinding
	})
	if ok {
		return role_binding.RoleBindingList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetUpdateRoleBindingDescriptor() *UpdateRoleBindingDescriptor {
	return updateRoleBindingDescriptor
}

type DeleteRoleBindingDescriptor struct{}

type DeleteRoleBindingDescriptorClientMsgHandle struct{}

type DeleteRoleBindingDescriptorServerMsgHandle struct{}

func (d *DeleteRoleBindingDescriptor) NewEmptyClientMsg() proto.Message {
	return &DeleteRoleBindingRequest{}
}

func (d *DeleteRoleBindingDescriptor) NewEmptyServerMsg() proto.Message {
	return &emptypb.Empty{}
}

func (d *DeleteRoleBindingDescriptor) IsUnary() bool {
	return true
}

func (d *DeleteRoleBindingDescriptor) IsClientStream() bool {
	return false
}

func (d *DeleteRoleBindingDescriptor) IsServerStream() bool {
	return false
}

func (d *DeleteRoleBindingDescriptor) IsCollection() bool {
	return false
}

func (d *DeleteRoleBindingDescriptor) IsPlural() bool {
	return false
}

func (d *DeleteRoleBindingDescriptor) HasResource() bool {
	return true
}

func (d *DeleteRoleBindingDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *DeleteRoleBindingDescriptor) GetVerb() string {
	return "delete"
}

func (d *DeleteRoleBindingDescriptor) GetMethodName() string {
	return "DeleteRoleBinding"
}

func (d *DeleteRoleBindingDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1.RoleBindingService/DeleteRoleBinding"
}

func (d *DeleteRoleBindingDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1"
}

func (d *DeleteRoleBindingDescriptor) GetApiName() string {
	return "RoleBindingService"
}

func (d *DeleteRoleBindingDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *DeleteRoleBindingDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *DeleteRoleBindingDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return roleBindingServiceDescriptor
}

func (d *DeleteRoleBindingDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return role_binding.GetDescriptor()
}

func (d *DeleteRoleBindingDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteRoleBindingDescriptorClientMsgHandle{}
}

func (d *DeleteRoleBindingDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteRoleBindingDescriptorServerMsgHandle{}
}

func (h *DeleteRoleBindingDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteRoleBindingRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*DeleteRoleBindingRequest) *role_binding.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*role_binding.Name)(nil)
}

func (h *DeleteRoleBindingDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*DeleteRoleBindingRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*DeleteRoleBindingRequest) []*role_binding.Name
	})
	if ok {
		return role_binding.RoleBindingNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteRoleBindingDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteRoleBindingRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*DeleteRoleBindingRequest) *role_binding.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *DeleteRoleBindingDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*DeleteRoleBindingRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*DeleteRoleBindingRequest) *role_binding.RoleBinding
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *DeleteRoleBindingDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*DeleteRoleBindingRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*DeleteRoleBindingRequest) []*role_binding.RoleBinding
	})
	if ok {
		return role_binding.RoleBindingList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *DeleteRoleBindingDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*emptypb.Empty) *role_binding.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *DeleteRoleBindingDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*emptypb.Empty) []*role_binding.Name
	})
	if ok {
		return role_binding.RoleBindingNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteRoleBindingDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*emptypb.Empty) *role_binding.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *DeleteRoleBindingDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*emptypb.Empty) *role_binding.RoleBinding
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *DeleteRoleBindingDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*emptypb.Empty) []*role_binding.RoleBinding
	})
	if ok {
		return role_binding.RoleBindingList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetDeleteRoleBindingDescriptor() *DeleteRoleBindingDescriptor {
	return deleteRoleBindingDescriptor
}

type ListRoleBindingsWithMembersDescriptor struct{}

type ListRoleBindingsWithMembersDescriptorClientMsgHandle struct{}

type ListRoleBindingsWithMembersDescriptorServerMsgHandle struct{}

func (d *ListRoleBindingsWithMembersDescriptor) NewEmptyClientMsg() proto.Message {
	return &ListRoleBindingsWithMembersRequest{}
}

func (d *ListRoleBindingsWithMembersDescriptor) NewEmptyServerMsg() proto.Message {
	return &ListRoleBindingsWithMembersResponse{}
}

func (d *ListRoleBindingsWithMembersDescriptor) IsUnary() bool {
	return true
}

func (d *ListRoleBindingsWithMembersDescriptor) IsClientStream() bool {
	return false
}

func (d *ListRoleBindingsWithMembersDescriptor) IsServerStream() bool {
	return false
}

func (d *ListRoleBindingsWithMembersDescriptor) IsCollection() bool {
	return true
}

func (d *ListRoleBindingsWithMembersDescriptor) IsPlural() bool {
	return true
}

func (d *ListRoleBindingsWithMembersDescriptor) HasResource() bool {
	return true
}

func (d *ListRoleBindingsWithMembersDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ListRoleBindingsWithMembersDescriptor) GetVerb() string {
	return "listRoleBindingsWithMembers"
}

func (d *ListRoleBindingsWithMembersDescriptor) GetMethodName() string {
	return "ListRoleBindingsWithMembers"
}

func (d *ListRoleBindingsWithMembersDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1.RoleBindingService/ListRoleBindingsWithMembers"
}

func (d *ListRoleBindingsWithMembersDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1"
}

func (d *ListRoleBindingsWithMembersDescriptor) GetApiName() string {
	return "RoleBindingService"
}

func (d *ListRoleBindingsWithMembersDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *ListRoleBindingsWithMembersDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *ListRoleBindingsWithMembersDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return roleBindingServiceDescriptor
}

func (d *ListRoleBindingsWithMembersDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return role_binding.GetDescriptor()
}

func (d *ListRoleBindingsWithMembersDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListRoleBindingsWithMembersDescriptorClientMsgHandle{}
}

func (d *ListRoleBindingsWithMembersDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListRoleBindingsWithMembersDescriptorServerMsgHandle{}
}

func (h *ListRoleBindingsWithMembersDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListRoleBindingsWithMembersRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListRoleBindingsWithMembersRequest) *role_binding.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListRoleBindingsWithMembersDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListRoleBindingsWithMembersRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListRoleBindingsWithMembersRequest) []*role_binding.Name
	})
	if ok {
		return role_binding.RoleBindingNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *ListRoleBindingsWithMembersDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListRoleBindingsWithMembersRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ListRoleBindingsWithMembersRequest) *role_binding.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*role_binding.ParentName)(nil)
}

func (h *ListRoleBindingsWithMembersDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*ListRoleBindingsWithMembersRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*ListRoleBindingsWithMembersRequest) *role_binding.RoleBinding
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *ListRoleBindingsWithMembersDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*ListRoleBindingsWithMembersRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*ListRoleBindingsWithMembersRequest) []*role_binding.RoleBinding
	})
	if ok {
		return role_binding.RoleBindingList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *ListRoleBindingsWithMembersDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListRoleBindingsWithMembersResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListRoleBindingsWithMembersResponse) *role_binding.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListRoleBindingsWithMembersDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListRoleBindingsWithMembersResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListRoleBindingsWithMembersResponse) []*role_binding.Name
	})
	if ok {
		return role_binding.RoleBindingNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *ListRoleBindingsWithMembersDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListRoleBindingsWithMembersResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ListRoleBindingsWithMembersResponse) *role_binding.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *ListRoleBindingsWithMembersDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*ListRoleBindingsWithMembersResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*ListRoleBindingsWithMembersResponse) *role_binding.RoleBinding
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *ListRoleBindingsWithMembersDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*ListRoleBindingsWithMembersResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*ListRoleBindingsWithMembersResponse) []*role_binding.RoleBinding
	})
	if ok {
		return role_binding.RoleBindingList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetListRoleBindingsWithMembersDescriptor() *ListRoleBindingsWithMembersDescriptor {
	return listRoleBindingsWithMembersDescriptor
}

type ListMyRoleBindingsDescriptor struct{}

type ListMyRoleBindingsDescriptorClientMsgHandle struct{}

type ListMyRoleBindingsDescriptorServerMsgHandle struct{}

func (d *ListMyRoleBindingsDescriptor) NewEmptyClientMsg() proto.Message {
	return &ListMyRoleBindingsRequest{}
}

func (d *ListMyRoleBindingsDescriptor) NewEmptyServerMsg() proto.Message {
	return &ListMyRoleBindingsResponse{}
}

func (d *ListMyRoleBindingsDescriptor) IsUnary() bool {
	return true
}

func (d *ListMyRoleBindingsDescriptor) IsClientStream() bool {
	return false
}

func (d *ListMyRoleBindingsDescriptor) IsServerStream() bool {
	return false
}

func (d *ListMyRoleBindingsDescriptor) IsCollection() bool {
	return true
}

func (d *ListMyRoleBindingsDescriptor) IsPlural() bool {
	return true
}

func (d *ListMyRoleBindingsDescriptor) HasResource() bool {
	return true
}

func (d *ListMyRoleBindingsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ListMyRoleBindingsDescriptor) GetVerb() string {
	return "listMy"
}

func (d *ListMyRoleBindingsDescriptor) GetMethodName() string {
	return "ListMyRoleBindings"
}

func (d *ListMyRoleBindingsDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1.RoleBindingService/ListMyRoleBindings"
}

func (d *ListMyRoleBindingsDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1"
}

func (d *ListMyRoleBindingsDescriptor) GetApiName() string {
	return "RoleBindingService"
}

func (d *ListMyRoleBindingsDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *ListMyRoleBindingsDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *ListMyRoleBindingsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return roleBindingServiceDescriptor
}

func (d *ListMyRoleBindingsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return role_binding.GetDescriptor()
}

func (d *ListMyRoleBindingsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListMyRoleBindingsDescriptorClientMsgHandle{}
}

func (d *ListMyRoleBindingsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListMyRoleBindingsDescriptorServerMsgHandle{}
}

func (h *ListMyRoleBindingsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListMyRoleBindingsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListMyRoleBindingsRequest) *role_binding.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListMyRoleBindingsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListMyRoleBindingsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListMyRoleBindingsRequest) []*role_binding.Name
	})
	if ok {
		return role_binding.RoleBindingNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *ListMyRoleBindingsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListMyRoleBindingsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ListMyRoleBindingsRequest) *role_binding.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *ListMyRoleBindingsDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*ListMyRoleBindingsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*ListMyRoleBindingsRequest) *role_binding.RoleBinding
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *ListMyRoleBindingsDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*ListMyRoleBindingsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*ListMyRoleBindingsRequest) []*role_binding.RoleBinding
	})
	if ok {
		return role_binding.RoleBindingList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *ListMyRoleBindingsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListMyRoleBindingsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListMyRoleBindingsResponse) *role_binding.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListMyRoleBindingsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListMyRoleBindingsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListMyRoleBindingsResponse) []*role_binding.Name
	})
	if ok {
		return role_binding.RoleBindingNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetRoleBindings(); len(resources) > 0 {
			list := make(role_binding.RoleBindingNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (role_binding.RoleBindingNameList)(nil)
}

func (h *ListMyRoleBindingsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListMyRoleBindingsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ListMyRoleBindingsResponse) *role_binding.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *ListMyRoleBindingsDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*ListMyRoleBindingsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*ListMyRoleBindingsResponse) *role_binding.RoleBinding
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *ListMyRoleBindingsDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*ListMyRoleBindingsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*ListMyRoleBindingsResponse) []*role_binding.RoleBinding
	})
	if ok {
		return role_binding.RoleBindingList(override.OverrideExtractResourceBodies(typedMsg))
	}
	{
		if resources := typedMsg.GetRoleBindings(); len(resources) > 0 {
			return role_binding.RoleBindingList(resources)
		}
	}
	return (role_binding.RoleBindingList)(nil)
}

func GetListMyRoleBindingsDescriptor() *ListMyRoleBindingsDescriptor {
	return listMyRoleBindingsDescriptor
}

type RoleBindingServiceDescriptor struct{}

func (d *RoleBindingServiceDescriptor) AllMethodDescriptors() []gotenclient.MethodDescriptor {
	return []gotenclient.MethodDescriptor{
		getRoleBindingDescriptor,
		batchGetRoleBindingsDescriptor,
		listRoleBindingsDescriptor,
		watchRoleBindingDescriptor,
		watchRoleBindingsDescriptor,
		createRoleBindingDescriptor,
		updateRoleBindingDescriptor,
		deleteRoleBindingDescriptor,
		listRoleBindingsWithMembersDescriptor,
		listMyRoleBindingsDescriptor,
	}
}

func (d *RoleBindingServiceDescriptor) GetFullAPIName() string {
	return "/ntt.iam.v1.RoleBindingService"
}

func (d *RoleBindingServiceDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1"
}

func (d *RoleBindingServiceDescriptor) GetApiName() string {
	return "RoleBindingService"
}

func (d *RoleBindingServiceDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *RoleBindingServiceDescriptor) GetServiceVersion() string {
	return "v1"
}

func GetRoleBindingServiceDescriptor() *RoleBindingServiceDescriptor {
	return roleBindingServiceDescriptor
}

func initDescriptors() {
	roleBindingServiceDescriptor = &RoleBindingServiceDescriptor{}
	getRoleBindingDescriptor = &GetRoleBindingDescriptor{}
	batchGetRoleBindingsDescriptor = &BatchGetRoleBindingsDescriptor{}
	listRoleBindingsDescriptor = &ListRoleBindingsDescriptor{}
	watchRoleBindingDescriptor = &WatchRoleBindingDescriptor{}
	watchRoleBindingsDescriptor = &WatchRoleBindingsDescriptor{}
	createRoleBindingDescriptor = &CreateRoleBindingDescriptor{}
	updateRoleBindingDescriptor = &UpdateRoleBindingDescriptor{}
	deleteRoleBindingDescriptor = &DeleteRoleBindingDescriptor{}
	listRoleBindingsWithMembersDescriptor = &ListRoleBindingsWithMembersDescriptor{}
	listMyRoleBindingsDescriptor = &ListMyRoleBindingsDescriptor{}
	gotenclient.GetRegistry().RegisterApiDescriptor(roleBindingServiceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(getRoleBindingDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(batchGetRoleBindingsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(listRoleBindingsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchRoleBindingDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchRoleBindingsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(createRoleBindingDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(updateRoleBindingDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(deleteRoleBindingDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(listRoleBindingsWithMembersDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(listMyRoleBindingsDescriptor)
}

func init() {
	if !descriptorsInitialized {
		initDescriptors()
		descriptorsInitialized = true
	}
}
