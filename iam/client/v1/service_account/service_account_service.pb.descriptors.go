// Code generated by protoc-gen-goten-client
// API: ServiceAccountService
// DO NOT EDIT!!!

package service_account_client

import (
	"google.golang.org/protobuf/proto"

	gotenclient "github.com/cloudwan/goten-sdk/runtime/client"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	service_account "github.com/cloudwan/edgelq-sdk/iam/resources/v1/service_account"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = new(proto.Message)
	_ = new(gotenclient.MethodDescriptor)
	_ = gotenresource.WildcardId
)

// make sure we're using proto imports
var (
	_ = &service_account.ServiceAccount{}
	_ = &emptypb.Empty{}
)

var (
	descriptorsInitialized            bool
	serviceAccountServiceDescriptor   *ServiceAccountServiceDescriptor
	getServiceAccountDescriptor       *GetServiceAccountDescriptor
	batchGetServiceAccountsDescriptor *BatchGetServiceAccountsDescriptor
	listServiceAccountsDescriptor     *ListServiceAccountsDescriptor
	watchServiceAccountDescriptor     *WatchServiceAccountDescriptor
	watchServiceAccountsDescriptor    *WatchServiceAccountsDescriptor
	createServiceAccountDescriptor    *CreateServiceAccountDescriptor
	updateServiceAccountDescriptor    *UpdateServiceAccountDescriptor
	deleteServiceAccountDescriptor    *DeleteServiceAccountDescriptor
	getMyAgentShardDescriptor         *GetMyAgentShardDescriptor
	getShardEndpointsDescriptor       *GetShardEndpointsDescriptor
)

type GetServiceAccountDescriptor struct{}

type GetServiceAccountDescriptorClientMsgHandle struct{}

type GetServiceAccountDescriptorServerMsgHandle struct{}

func (d *GetServiceAccountDescriptor) NewEmptyClientMsg() proto.Message {
	return &GetServiceAccountRequest{}
}

func (d *GetServiceAccountDescriptor) NewEmptyServerMsg() proto.Message {
	return &service_account.ServiceAccount{}
}

func (d *GetServiceAccountDescriptor) IsUnary() bool {
	return true
}

func (d *GetServiceAccountDescriptor) IsClientStream() bool {
	return false
}

func (d *GetServiceAccountDescriptor) IsServerStream() bool {
	return false
}

func (d *GetServiceAccountDescriptor) IsCollection() bool {
	return false
}

func (d *GetServiceAccountDescriptor) IsPlural() bool {
	return false
}

func (d *GetServiceAccountDescriptor) HasResource() bool {
	return true
}

func (d *GetServiceAccountDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *GetServiceAccountDescriptor) GetVerb() string {
	return "get"
}

func (d *GetServiceAccountDescriptor) GetMethodName() string {
	return "GetServiceAccount"
}

func (d *GetServiceAccountDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1.ServiceAccountService/GetServiceAccount"
}

func (d *GetServiceAccountDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1"
}

func (d *GetServiceAccountDescriptor) GetApiName() string {
	return "ServiceAccountService"
}

func (d *GetServiceAccountDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *GetServiceAccountDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *GetServiceAccountDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return serviceAccountServiceDescriptor
}

func (d *GetServiceAccountDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return service_account.GetDescriptor()
}

func (d *GetServiceAccountDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetServiceAccountDescriptorClientMsgHandle{}
}

func (d *GetServiceAccountDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetServiceAccountDescriptorServerMsgHandle{}
}

func (h *GetServiceAccountDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetServiceAccountRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*GetServiceAccountRequest) *service_account.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*service_account.Name)(nil)
}

func (h *GetServiceAccountDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*GetServiceAccountRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*GetServiceAccountRequest) []*service_account.Name
	})
	if ok {
		return service_account.ServiceAccountNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetServiceAccountDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetServiceAccountRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*GetServiceAccountRequest) *service_account.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *GetServiceAccountDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*GetServiceAccountRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*GetServiceAccountRequest) *service_account.ServiceAccount
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *GetServiceAccountDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*GetServiceAccountRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*GetServiceAccountRequest) []*service_account.ServiceAccount
	})
	if ok {
		return service_account.ServiceAccountList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *GetServiceAccountDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*service_account.ServiceAccount)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*service_account.ServiceAccount) *service_account.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*service_account.Name)(nil)
}

func (h *GetServiceAccountDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*service_account.ServiceAccount)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*service_account.ServiceAccount) []*service_account.Name
	})
	if ok {
		return service_account.ServiceAccountNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetServiceAccountDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*service_account.ServiceAccount)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*service_account.ServiceAccount) *service_account.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *GetServiceAccountDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	return msg.(*service_account.ServiceAccount)
}

func (h *GetServiceAccountDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*service_account.ServiceAccount)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*service_account.ServiceAccount) []*service_account.ServiceAccount
	})
	if ok {
		return service_account.ServiceAccountList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetGetServiceAccountDescriptor() *GetServiceAccountDescriptor {
	return getServiceAccountDescriptor
}

type BatchGetServiceAccountsDescriptor struct{}

type BatchGetServiceAccountsDescriptorClientMsgHandle struct{}

type BatchGetServiceAccountsDescriptorServerMsgHandle struct{}

func (d *BatchGetServiceAccountsDescriptor) NewEmptyClientMsg() proto.Message {
	return &BatchGetServiceAccountsRequest{}
}

func (d *BatchGetServiceAccountsDescriptor) NewEmptyServerMsg() proto.Message {
	return &BatchGetServiceAccountsResponse{}
}

func (d *BatchGetServiceAccountsDescriptor) IsUnary() bool {
	return true
}

func (d *BatchGetServiceAccountsDescriptor) IsClientStream() bool {
	return false
}

func (d *BatchGetServiceAccountsDescriptor) IsServerStream() bool {
	return false
}

func (d *BatchGetServiceAccountsDescriptor) IsCollection() bool {
	return false
}

func (d *BatchGetServiceAccountsDescriptor) IsPlural() bool {
	return true
}

func (d *BatchGetServiceAccountsDescriptor) HasResource() bool {
	return true
}

func (d *BatchGetServiceAccountsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *BatchGetServiceAccountsDescriptor) GetVerb() string {
	return "batchGet"
}

func (d *BatchGetServiceAccountsDescriptor) GetMethodName() string {
	return "BatchGetServiceAccounts"
}

func (d *BatchGetServiceAccountsDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1.ServiceAccountService/BatchGetServiceAccounts"
}

func (d *BatchGetServiceAccountsDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1"
}

func (d *BatchGetServiceAccountsDescriptor) GetApiName() string {
	return "ServiceAccountService"
}

func (d *BatchGetServiceAccountsDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *BatchGetServiceAccountsDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *BatchGetServiceAccountsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return serviceAccountServiceDescriptor
}

func (d *BatchGetServiceAccountsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return service_account.GetDescriptor()
}

func (d *BatchGetServiceAccountsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetServiceAccountsDescriptorClientMsgHandle{}
}

func (d *BatchGetServiceAccountsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetServiceAccountsDescriptorServerMsgHandle{}
}

func (h *BatchGetServiceAccountsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetServiceAccountsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetServiceAccountsRequest) *service_account.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetServiceAccountsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetServiceAccountsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetServiceAccountsRequest) []*service_account.Name
	})
	if ok {
		return service_account.ServiceAccountNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if names := typedMsg.GetNames(); len(names) > 0 {
			return service_account.ServiceAccountNameList(names)
		}
	}
	return (service_account.ServiceAccountNameList)(nil)
}

func (h *BatchGetServiceAccountsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetServiceAccountsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*BatchGetServiceAccountsRequest) *service_account.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *BatchGetServiceAccountsDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*BatchGetServiceAccountsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*BatchGetServiceAccountsRequest) *service_account.ServiceAccount
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *BatchGetServiceAccountsDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*BatchGetServiceAccountsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*BatchGetServiceAccountsRequest) []*service_account.ServiceAccount
	})
	if ok {
		return service_account.ServiceAccountList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *BatchGetServiceAccountsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetServiceAccountsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetServiceAccountsResponse) *service_account.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetServiceAccountsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetServiceAccountsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetServiceAccountsResponse) []*service_account.Name
	})
	if ok {
		return service_account.ServiceAccountNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetServiceAccounts(); len(resources) > 0 {
			list := make(service_account.ServiceAccountNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (service_account.ServiceAccountNameList)(nil)
}

func (h *BatchGetServiceAccountsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetServiceAccountsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*BatchGetServiceAccountsResponse) *service_account.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *BatchGetServiceAccountsDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*BatchGetServiceAccountsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*BatchGetServiceAccountsResponse) *service_account.ServiceAccount
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *BatchGetServiceAccountsDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*BatchGetServiceAccountsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*BatchGetServiceAccountsResponse) []*service_account.ServiceAccount
	})
	if ok {
		return service_account.ServiceAccountList(override.OverrideExtractResourceBodies(typedMsg))
	}
	{
		if resources := typedMsg.GetServiceAccounts(); len(resources) > 0 {
			return service_account.ServiceAccountList(resources)
		}
	}
	return (service_account.ServiceAccountList)(nil)
}

func GetBatchGetServiceAccountsDescriptor() *BatchGetServiceAccountsDescriptor {
	return batchGetServiceAccountsDescriptor
}

type ListServiceAccountsDescriptor struct{}

type ListServiceAccountsDescriptorClientMsgHandle struct{}

type ListServiceAccountsDescriptorServerMsgHandle struct{}

func (d *ListServiceAccountsDescriptor) NewEmptyClientMsg() proto.Message {
	return &ListServiceAccountsRequest{}
}

func (d *ListServiceAccountsDescriptor) NewEmptyServerMsg() proto.Message {
	return &ListServiceAccountsResponse{}
}

func (d *ListServiceAccountsDescriptor) IsUnary() bool {
	return true
}

func (d *ListServiceAccountsDescriptor) IsClientStream() bool {
	return false
}

func (d *ListServiceAccountsDescriptor) IsServerStream() bool {
	return false
}

func (d *ListServiceAccountsDescriptor) IsCollection() bool {
	return true
}

func (d *ListServiceAccountsDescriptor) IsPlural() bool {
	return true
}

func (d *ListServiceAccountsDescriptor) HasResource() bool {
	return true
}

func (d *ListServiceAccountsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ListServiceAccountsDescriptor) GetVerb() string {
	return "list"
}

func (d *ListServiceAccountsDescriptor) GetMethodName() string {
	return "ListServiceAccounts"
}

func (d *ListServiceAccountsDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1.ServiceAccountService/ListServiceAccounts"
}

func (d *ListServiceAccountsDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1"
}

func (d *ListServiceAccountsDescriptor) GetApiName() string {
	return "ServiceAccountService"
}

func (d *ListServiceAccountsDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *ListServiceAccountsDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *ListServiceAccountsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return serviceAccountServiceDescriptor
}

func (d *ListServiceAccountsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return service_account.GetDescriptor()
}

func (d *ListServiceAccountsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListServiceAccountsDescriptorClientMsgHandle{}
}

func (d *ListServiceAccountsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListServiceAccountsDescriptorServerMsgHandle{}
}

func (h *ListServiceAccountsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListServiceAccountsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListServiceAccountsRequest) *service_account.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListServiceAccountsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListServiceAccountsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListServiceAccountsRequest) []*service_account.Name
	})
	if ok {
		return service_account.ServiceAccountNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *ListServiceAccountsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListServiceAccountsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ListServiceAccountsRequest) *service_account.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*service_account.ParentName)(nil)
}

func (h *ListServiceAccountsDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*ListServiceAccountsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*ListServiceAccountsRequest) *service_account.ServiceAccount
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *ListServiceAccountsDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*ListServiceAccountsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*ListServiceAccountsRequest) []*service_account.ServiceAccount
	})
	if ok {
		return service_account.ServiceAccountList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *ListServiceAccountsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListServiceAccountsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListServiceAccountsResponse) *service_account.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListServiceAccountsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListServiceAccountsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListServiceAccountsResponse) []*service_account.Name
	})
	if ok {
		return service_account.ServiceAccountNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetServiceAccounts(); len(resources) > 0 {
			list := make(service_account.ServiceAccountNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (service_account.ServiceAccountNameList)(nil)
}

func (h *ListServiceAccountsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListServiceAccountsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ListServiceAccountsResponse) *service_account.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *ListServiceAccountsDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*ListServiceAccountsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*ListServiceAccountsResponse) *service_account.ServiceAccount
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *ListServiceAccountsDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*ListServiceAccountsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*ListServiceAccountsResponse) []*service_account.ServiceAccount
	})
	if ok {
		return service_account.ServiceAccountList(override.OverrideExtractResourceBodies(typedMsg))
	}
	{
		if resources := typedMsg.GetServiceAccounts(); len(resources) > 0 {
			return service_account.ServiceAccountList(resources)
		}
	}
	return (service_account.ServiceAccountList)(nil)
}

func GetListServiceAccountsDescriptor() *ListServiceAccountsDescriptor {
	return listServiceAccountsDescriptor
}

type WatchServiceAccountDescriptor struct{}

type WatchServiceAccountDescriptorClientMsgHandle struct{}

type WatchServiceAccountDescriptorServerMsgHandle struct{}

func (d *WatchServiceAccountDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchServiceAccountRequest{}
}

func (d *WatchServiceAccountDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchServiceAccountResponse{}
}

func (d *WatchServiceAccountDescriptor) IsUnary() bool {
	return false
}

func (d *WatchServiceAccountDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchServiceAccountDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchServiceAccountDescriptor) IsCollection() bool {
	return false
}

func (d *WatchServiceAccountDescriptor) IsPlural() bool {
	return false
}

func (d *WatchServiceAccountDescriptor) HasResource() bool {
	return true
}

func (d *WatchServiceAccountDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchServiceAccountDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchServiceAccountDescriptor) GetMethodName() string {
	return "WatchServiceAccount"
}

func (d *WatchServiceAccountDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1.ServiceAccountService/WatchServiceAccount"
}

func (d *WatchServiceAccountDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1"
}

func (d *WatchServiceAccountDescriptor) GetApiName() string {
	return "ServiceAccountService"
}

func (d *WatchServiceAccountDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *WatchServiceAccountDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *WatchServiceAccountDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return serviceAccountServiceDescriptor
}

func (d *WatchServiceAccountDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return service_account.GetDescriptor()
}

func (d *WatchServiceAccountDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchServiceAccountDescriptorClientMsgHandle{}
}

func (d *WatchServiceAccountDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchServiceAccountDescriptorServerMsgHandle{}
}

func (h *WatchServiceAccountDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchServiceAccountRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchServiceAccountRequest) *service_account.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*service_account.Name)(nil)
}

func (h *WatchServiceAccountDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchServiceAccountRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchServiceAccountRequest) []*service_account.Name
	})
	if ok {
		return service_account.ServiceAccountNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchServiceAccountDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchServiceAccountRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchServiceAccountRequest) *service_account.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchServiceAccountDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchServiceAccountRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchServiceAccountRequest) *service_account.ServiceAccount
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *WatchServiceAccountDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchServiceAccountRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchServiceAccountRequest) []*service_account.ServiceAccount
	})
	if ok {
		return service_account.ServiceAccountList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *WatchServiceAccountDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchServiceAccountResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchServiceAccountResponse) *service_account.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if resChange := typedMsg.GetChange(); resChange != nil {
			switch tResChange := resChange.ChangeType.(type) {
			case *service_account.ServiceAccountChange_Added_:
				return tResChange.Added.GetServiceAccount().GetName()
			case *service_account.ServiceAccountChange_Modified_:
				return tResChange.Modified.GetName()
			case *service_account.ServiceAccountChange_Removed_:
				return tResChange.Removed.GetName()
			case *service_account.ServiceAccountChange_Current_:
				return tResChange.Current.GetServiceAccount().GetName()
			}
		}
	}
	return (*service_account.Name)(nil)
}

func (h *WatchServiceAccountDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchServiceAccountResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchServiceAccountResponse) []*service_account.Name
	})
	if ok {
		return service_account.ServiceAccountNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchServiceAccountDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchServiceAccountResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchServiceAccountResponse) *service_account.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchServiceAccountDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchServiceAccountResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchServiceAccountResponse) *service_account.ServiceAccount
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	{
		if resChange := typedMsg.GetChange(); resChange != nil {
			switch tResChange := resChange.ChangeType.(type) {
			case *service_account.ServiceAccountChange_Added_:
				return tResChange.Added.GetServiceAccount()
			case *service_account.ServiceAccountChange_Modified_:
				return tResChange.Modified.GetServiceAccount()
			case *service_account.ServiceAccountChange_Current_:
				return tResChange.Current.GetServiceAccount()
			}
		}
	}
	return (*service_account.ServiceAccount)(nil)
}

func (h *WatchServiceAccountDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchServiceAccountResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchServiceAccountResponse) []*service_account.ServiceAccount
	})
	if ok {
		return service_account.ServiceAccountList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetWatchServiceAccountDescriptor() *WatchServiceAccountDescriptor {
	return watchServiceAccountDescriptor
}

type WatchServiceAccountsDescriptor struct{}

type WatchServiceAccountsDescriptorClientMsgHandle struct{}

type WatchServiceAccountsDescriptorServerMsgHandle struct{}

func (d *WatchServiceAccountsDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchServiceAccountsRequest{}
}

func (d *WatchServiceAccountsDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchServiceAccountsResponse{}
}

func (d *WatchServiceAccountsDescriptor) IsUnary() bool {
	return false
}

func (d *WatchServiceAccountsDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchServiceAccountsDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchServiceAccountsDescriptor) IsCollection() bool {
	return true
}

func (d *WatchServiceAccountsDescriptor) IsPlural() bool {
	return true
}

func (d *WatchServiceAccountsDescriptor) HasResource() bool {
	return true
}

func (d *WatchServiceAccountsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchServiceAccountsDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchServiceAccountsDescriptor) GetMethodName() string {
	return "WatchServiceAccounts"
}

func (d *WatchServiceAccountsDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1.ServiceAccountService/WatchServiceAccounts"
}

func (d *WatchServiceAccountsDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1"
}

func (d *WatchServiceAccountsDescriptor) GetApiName() string {
	return "ServiceAccountService"
}

func (d *WatchServiceAccountsDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *WatchServiceAccountsDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *WatchServiceAccountsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return serviceAccountServiceDescriptor
}

func (d *WatchServiceAccountsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return service_account.GetDescriptor()
}

func (d *WatchServiceAccountsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchServiceAccountsDescriptorClientMsgHandle{}
}

func (d *WatchServiceAccountsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchServiceAccountsDescriptorServerMsgHandle{}
}

func (h *WatchServiceAccountsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchServiceAccountsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchServiceAccountsRequest) *service_account.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchServiceAccountsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchServiceAccountsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchServiceAccountsRequest) []*service_account.Name
	})
	if ok {
		return service_account.ServiceAccountNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchServiceAccountsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchServiceAccountsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchServiceAccountsRequest) *service_account.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*service_account.ParentName)(nil)
}

func (h *WatchServiceAccountsDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchServiceAccountsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchServiceAccountsRequest) *service_account.ServiceAccount
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *WatchServiceAccountsDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchServiceAccountsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchServiceAccountsRequest) []*service_account.ServiceAccount
	})
	if ok {
		return service_account.ServiceAccountList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *WatchServiceAccountsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchServiceAccountsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchServiceAccountsResponse) *service_account.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchServiceAccountsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchServiceAccountsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchServiceAccountsResponse) []*service_account.Name
	})
	if ok {
		return service_account.ServiceAccountNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resChanges := typedMsg.GetServiceAccountChanges(); len(resChanges) > 0 {
			list := make(service_account.ServiceAccountNameList, 0, len(resChanges))
			for _, resChange := range resChanges {
				switch tResChange := resChange.ChangeType.(type) {
				case *service_account.ServiceAccountChange_Added_:
					list = append(list, tResChange.Added.GetServiceAccount().GetName())
				case *service_account.ServiceAccountChange_Modified_:
					list = append(list, tResChange.Modified.GetName())
				case *service_account.ServiceAccountChange_Removed_:
					list = append(list, tResChange.Removed.GetName())
				case *service_account.ServiceAccountChange_Current_:
					list = append(list, tResChange.Current.GetServiceAccount().GetName())
				}
			}
			return list
		}
	}
	return (service_account.ServiceAccountNameList)(nil)
}

func (h *WatchServiceAccountsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchServiceAccountsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchServiceAccountsResponse) *service_account.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchServiceAccountsDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchServiceAccountsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchServiceAccountsResponse) *service_account.ServiceAccount
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *WatchServiceAccountsDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchServiceAccountsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchServiceAccountsResponse) []*service_account.ServiceAccount
	})
	if ok {
		return service_account.ServiceAccountList(override.OverrideExtractResourceBodies(typedMsg))
	}
	{
		if resChanges := typedMsg.GetServiceAccountChanges(); len(resChanges) > 0 {
			list := make(service_account.ServiceAccountList, 0, len(resChanges))
			for _, resChange := range resChanges {
				switch tResChange := resChange.ChangeType.(type) {
				case *service_account.ServiceAccountChange_Added_:
					list = append(list, tResChange.Added.GetServiceAccount())
				case *service_account.ServiceAccountChange_Modified_:
					list = append(list, tResChange.Modified.GetServiceAccount())
				case *service_account.ServiceAccountChange_Current_:
					list = append(list, tResChange.Current.GetServiceAccount())
				}
			}
			return list
		}
	}
	return (service_account.ServiceAccountList)(nil)
}

func GetWatchServiceAccountsDescriptor() *WatchServiceAccountsDescriptor {
	return watchServiceAccountsDescriptor
}

type CreateServiceAccountDescriptor struct{}

type CreateServiceAccountDescriptorClientMsgHandle struct{}

type CreateServiceAccountDescriptorServerMsgHandle struct{}

func (d *CreateServiceAccountDescriptor) NewEmptyClientMsg() proto.Message {
	return &CreateServiceAccountRequest{}
}

func (d *CreateServiceAccountDescriptor) NewEmptyServerMsg() proto.Message {
	return &service_account.ServiceAccount{}
}

func (d *CreateServiceAccountDescriptor) IsUnary() bool {
	return true
}

func (d *CreateServiceAccountDescriptor) IsClientStream() bool {
	return false
}

func (d *CreateServiceAccountDescriptor) IsServerStream() bool {
	return false
}

func (d *CreateServiceAccountDescriptor) IsCollection() bool {
	return true
}

func (d *CreateServiceAccountDescriptor) IsPlural() bool {
	return false
}

func (d *CreateServiceAccountDescriptor) HasResource() bool {
	return true
}

func (d *CreateServiceAccountDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *CreateServiceAccountDescriptor) GetVerb() string {
	return "create"
}

func (d *CreateServiceAccountDescriptor) GetMethodName() string {
	return "CreateServiceAccount"
}

func (d *CreateServiceAccountDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1.ServiceAccountService/CreateServiceAccount"
}

func (d *CreateServiceAccountDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1"
}

func (d *CreateServiceAccountDescriptor) GetApiName() string {
	return "ServiceAccountService"
}

func (d *CreateServiceAccountDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *CreateServiceAccountDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *CreateServiceAccountDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return serviceAccountServiceDescriptor
}

func (d *CreateServiceAccountDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return service_account.GetDescriptor()
}

func (d *CreateServiceAccountDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateServiceAccountDescriptorClientMsgHandle{}
}

func (d *CreateServiceAccountDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateServiceAccountDescriptorServerMsgHandle{}
}

func (h *CreateServiceAccountDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateServiceAccountRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*CreateServiceAccountRequest) *service_account.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetServiceAccount()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*service_account.Name)(nil)
}

func (h *CreateServiceAccountDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*CreateServiceAccountRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*CreateServiceAccountRequest) []*service_account.Name
	})
	if ok {
		return service_account.ServiceAccountNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateServiceAccountDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateServiceAccountRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*CreateServiceAccountRequest) *service_account.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*service_account.ParentName)(nil)
}

func (h *CreateServiceAccountDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*CreateServiceAccountRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*CreateServiceAccountRequest) *service_account.ServiceAccount
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	{
		return typedMsg.GetServiceAccount()
	}
	return (*service_account.ServiceAccount)(nil)
}

func (h *CreateServiceAccountDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*CreateServiceAccountRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*CreateServiceAccountRequest) []*service_account.ServiceAccount
	})
	if ok {
		return service_account.ServiceAccountList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *CreateServiceAccountDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*service_account.ServiceAccount)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*service_account.ServiceAccount) *service_account.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*service_account.Name)(nil)
}

func (h *CreateServiceAccountDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*service_account.ServiceAccount)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*service_account.ServiceAccount) []*service_account.Name
	})
	if ok {
		return service_account.ServiceAccountNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateServiceAccountDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*service_account.ServiceAccount)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*service_account.ServiceAccount) *service_account.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *CreateServiceAccountDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	return msg.(*service_account.ServiceAccount)
}

func (h *CreateServiceAccountDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*service_account.ServiceAccount)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*service_account.ServiceAccount) []*service_account.ServiceAccount
	})
	if ok {
		return service_account.ServiceAccountList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetCreateServiceAccountDescriptor() *CreateServiceAccountDescriptor {
	return createServiceAccountDescriptor
}

type UpdateServiceAccountDescriptor struct{}

type UpdateServiceAccountDescriptorClientMsgHandle struct{}

type UpdateServiceAccountDescriptorServerMsgHandle struct{}

func (d *UpdateServiceAccountDescriptor) NewEmptyClientMsg() proto.Message {
	return &UpdateServiceAccountRequest{}
}

func (d *UpdateServiceAccountDescriptor) NewEmptyServerMsg() proto.Message {
	return &service_account.ServiceAccount{}
}

func (d *UpdateServiceAccountDescriptor) IsUnary() bool {
	return true
}

func (d *UpdateServiceAccountDescriptor) IsClientStream() bool {
	return false
}

func (d *UpdateServiceAccountDescriptor) IsServerStream() bool {
	return false
}

func (d *UpdateServiceAccountDescriptor) IsCollection() bool {
	return false
}

func (d *UpdateServiceAccountDescriptor) IsPlural() bool {
	return false
}

func (d *UpdateServiceAccountDescriptor) HasResource() bool {
	return true
}

func (d *UpdateServiceAccountDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *UpdateServiceAccountDescriptor) GetVerb() string {
	return "update"
}

func (d *UpdateServiceAccountDescriptor) GetMethodName() string {
	return "UpdateServiceAccount"
}

func (d *UpdateServiceAccountDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1.ServiceAccountService/UpdateServiceAccount"
}

func (d *UpdateServiceAccountDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1"
}

func (d *UpdateServiceAccountDescriptor) GetApiName() string {
	return "ServiceAccountService"
}

func (d *UpdateServiceAccountDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *UpdateServiceAccountDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *UpdateServiceAccountDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return serviceAccountServiceDescriptor
}

func (d *UpdateServiceAccountDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return service_account.GetDescriptor()
}

func (d *UpdateServiceAccountDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateServiceAccountDescriptorClientMsgHandle{}
}

func (d *UpdateServiceAccountDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateServiceAccountDescriptorServerMsgHandle{}
}

func (h *UpdateServiceAccountDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateServiceAccountRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*UpdateServiceAccountRequest) *service_account.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetServiceAccount()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*service_account.Name)(nil)
}

func (h *UpdateServiceAccountDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*UpdateServiceAccountRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*UpdateServiceAccountRequest) []*service_account.Name
	})
	if ok {
		return service_account.ServiceAccountNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateServiceAccountDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateServiceAccountRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*UpdateServiceAccountRequest) *service_account.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *UpdateServiceAccountDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*UpdateServiceAccountRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*UpdateServiceAccountRequest) *service_account.ServiceAccount
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	{
		return typedMsg.GetServiceAccount()
	}
	return (*service_account.ServiceAccount)(nil)
}

func (h *UpdateServiceAccountDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*UpdateServiceAccountRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*UpdateServiceAccountRequest) []*service_account.ServiceAccount
	})
	if ok {
		return service_account.ServiceAccountList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *UpdateServiceAccountDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*service_account.ServiceAccount)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*service_account.ServiceAccount) *service_account.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*service_account.Name)(nil)
}

func (h *UpdateServiceAccountDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*service_account.ServiceAccount)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*service_account.ServiceAccount) []*service_account.Name
	})
	if ok {
		return service_account.ServiceAccountNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateServiceAccountDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*service_account.ServiceAccount)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*service_account.ServiceAccount) *service_account.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *UpdateServiceAccountDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	return msg.(*service_account.ServiceAccount)
}

func (h *UpdateServiceAccountDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*service_account.ServiceAccount)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*service_account.ServiceAccount) []*service_account.ServiceAccount
	})
	if ok {
		return service_account.ServiceAccountList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetUpdateServiceAccountDescriptor() *UpdateServiceAccountDescriptor {
	return updateServiceAccountDescriptor
}

type DeleteServiceAccountDescriptor struct{}

type DeleteServiceAccountDescriptorClientMsgHandle struct{}

type DeleteServiceAccountDescriptorServerMsgHandle struct{}

func (d *DeleteServiceAccountDescriptor) NewEmptyClientMsg() proto.Message {
	return &DeleteServiceAccountRequest{}
}

func (d *DeleteServiceAccountDescriptor) NewEmptyServerMsg() proto.Message {
	return &emptypb.Empty{}
}

func (d *DeleteServiceAccountDescriptor) IsUnary() bool {
	return true
}

func (d *DeleteServiceAccountDescriptor) IsClientStream() bool {
	return false
}

func (d *DeleteServiceAccountDescriptor) IsServerStream() bool {
	return false
}

func (d *DeleteServiceAccountDescriptor) IsCollection() bool {
	return false
}

func (d *DeleteServiceAccountDescriptor) IsPlural() bool {
	return false
}

func (d *DeleteServiceAccountDescriptor) HasResource() bool {
	return true
}

func (d *DeleteServiceAccountDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *DeleteServiceAccountDescriptor) GetVerb() string {
	return "delete"
}

func (d *DeleteServiceAccountDescriptor) GetMethodName() string {
	return "DeleteServiceAccount"
}

func (d *DeleteServiceAccountDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1.ServiceAccountService/DeleteServiceAccount"
}

func (d *DeleteServiceAccountDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1"
}

func (d *DeleteServiceAccountDescriptor) GetApiName() string {
	return "ServiceAccountService"
}

func (d *DeleteServiceAccountDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *DeleteServiceAccountDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *DeleteServiceAccountDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return serviceAccountServiceDescriptor
}

func (d *DeleteServiceAccountDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return service_account.GetDescriptor()
}

func (d *DeleteServiceAccountDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteServiceAccountDescriptorClientMsgHandle{}
}

func (d *DeleteServiceAccountDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteServiceAccountDescriptorServerMsgHandle{}
}

func (h *DeleteServiceAccountDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteServiceAccountRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*DeleteServiceAccountRequest) *service_account.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*service_account.Name)(nil)
}

func (h *DeleteServiceAccountDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*DeleteServiceAccountRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*DeleteServiceAccountRequest) []*service_account.Name
	})
	if ok {
		return service_account.ServiceAccountNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteServiceAccountDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteServiceAccountRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*DeleteServiceAccountRequest) *service_account.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *DeleteServiceAccountDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*DeleteServiceAccountRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*DeleteServiceAccountRequest) *service_account.ServiceAccount
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *DeleteServiceAccountDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*DeleteServiceAccountRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*DeleteServiceAccountRequest) []*service_account.ServiceAccount
	})
	if ok {
		return service_account.ServiceAccountList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *DeleteServiceAccountDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*emptypb.Empty) *service_account.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *DeleteServiceAccountDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*emptypb.Empty) []*service_account.Name
	})
	if ok {
		return service_account.ServiceAccountNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteServiceAccountDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*emptypb.Empty) *service_account.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *DeleteServiceAccountDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*emptypb.Empty) *service_account.ServiceAccount
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *DeleteServiceAccountDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*emptypb.Empty) []*service_account.ServiceAccount
	})
	if ok {
		return service_account.ServiceAccountList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetDeleteServiceAccountDescriptor() *DeleteServiceAccountDescriptor {
	return deleteServiceAccountDescriptor
}

type GetMyAgentShardDescriptor struct{}

type GetMyAgentShardDescriptorClientMsgHandle struct{}

type GetMyAgentShardDescriptorServerMsgHandle struct{}

func (d *GetMyAgentShardDescriptor) NewEmptyClientMsg() proto.Message {
	return &GetMyAgentShardRequest{}
}

func (d *GetMyAgentShardDescriptor) NewEmptyServerMsg() proto.Message {
	return &GetMyAgentShardResponse{}
}

func (d *GetMyAgentShardDescriptor) IsUnary() bool {
	return true
}

func (d *GetMyAgentShardDescriptor) IsClientStream() bool {
	return false
}

func (d *GetMyAgentShardDescriptor) IsServerStream() bool {
	return false
}

func (d *GetMyAgentShardDescriptor) IsCollection() bool {
	return false
}

func (d *GetMyAgentShardDescriptor) IsPlural() bool {
	return false
}

func (d *GetMyAgentShardDescriptor) HasResource() bool {
	return true
}

func (d *GetMyAgentShardDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *GetMyAgentShardDescriptor) GetVerb() string {
	return "getMyAgentShard"
}

func (d *GetMyAgentShardDescriptor) GetMethodName() string {
	return "GetMyAgentShard"
}

func (d *GetMyAgentShardDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1.ServiceAccountService/GetMyAgentShard"
}

func (d *GetMyAgentShardDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1"
}

func (d *GetMyAgentShardDescriptor) GetApiName() string {
	return "ServiceAccountService"
}

func (d *GetMyAgentShardDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *GetMyAgentShardDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *GetMyAgentShardDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return serviceAccountServiceDescriptor
}

func (d *GetMyAgentShardDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return service_account.GetDescriptor()
}

func (d *GetMyAgentShardDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetMyAgentShardDescriptorClientMsgHandle{}
}

func (d *GetMyAgentShardDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetMyAgentShardDescriptorServerMsgHandle{}
}

func (h *GetMyAgentShardDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetMyAgentShardRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*GetMyAgentShardRequest) *service_account.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*service_account.Name)(nil)
}

func (h *GetMyAgentShardDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*GetMyAgentShardRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*GetMyAgentShardRequest) []*service_account.Name
	})
	if ok {
		return service_account.ServiceAccountNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetMyAgentShardDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetMyAgentShardRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*GetMyAgentShardRequest) *service_account.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *GetMyAgentShardDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*GetMyAgentShardRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*GetMyAgentShardRequest) *service_account.ServiceAccount
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *GetMyAgentShardDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*GetMyAgentShardRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*GetMyAgentShardRequest) []*service_account.ServiceAccount
	})
	if ok {
		return service_account.ServiceAccountList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *GetMyAgentShardDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetMyAgentShardResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*GetMyAgentShardResponse) *service_account.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *GetMyAgentShardDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*GetMyAgentShardResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*GetMyAgentShardResponse) []*service_account.Name
	})
	if ok {
		return service_account.ServiceAccountNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetMyAgentShardDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetMyAgentShardResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*GetMyAgentShardResponse) *service_account.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *GetMyAgentShardDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*GetMyAgentShardResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*GetMyAgentShardResponse) *service_account.ServiceAccount
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *GetMyAgentShardDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*GetMyAgentShardResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*GetMyAgentShardResponse) []*service_account.ServiceAccount
	})
	if ok {
		return service_account.ServiceAccountList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetGetMyAgentShardDescriptor() *GetMyAgentShardDescriptor {
	return getMyAgentShardDescriptor
}

type GetShardEndpointsDescriptor struct{}

type GetShardEndpointsDescriptorClientMsgHandle struct{}

type GetShardEndpointsDescriptorServerMsgHandle struct{}

func (d *GetShardEndpointsDescriptor) NewEmptyClientMsg() proto.Message {
	return &GetShardEndpointsRequest{}
}

func (d *GetShardEndpointsDescriptor) NewEmptyServerMsg() proto.Message {
	return &GetShardEndpointsResponse{}
}

func (d *GetShardEndpointsDescriptor) IsUnary() bool {
	return true
}

func (d *GetShardEndpointsDescriptor) IsClientStream() bool {
	return false
}

func (d *GetShardEndpointsDescriptor) IsServerStream() bool {
	return false
}

func (d *GetShardEndpointsDescriptor) IsCollection() bool {
	return false
}

func (d *GetShardEndpointsDescriptor) IsPlural() bool {
	return false
}

func (d *GetShardEndpointsDescriptor) HasResource() bool {
	return true
}

func (d *GetShardEndpointsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *GetShardEndpointsDescriptor) GetVerb() string {
	return "getShardEndpoints"
}

func (d *GetShardEndpointsDescriptor) GetMethodName() string {
	return "GetShardEndpoints"
}

func (d *GetShardEndpointsDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1.ServiceAccountService/GetShardEndpoints"
}

func (d *GetShardEndpointsDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1"
}

func (d *GetShardEndpointsDescriptor) GetApiName() string {
	return "ServiceAccountService"
}

func (d *GetShardEndpointsDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *GetShardEndpointsDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *GetShardEndpointsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return serviceAccountServiceDescriptor
}

func (d *GetShardEndpointsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return service_account.GetDescriptor()
}

func (d *GetShardEndpointsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetShardEndpointsDescriptorClientMsgHandle{}
}

func (d *GetShardEndpointsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetShardEndpointsDescriptorServerMsgHandle{}
}

func (h *GetShardEndpointsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetShardEndpointsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*GetShardEndpointsRequest) *service_account.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *GetShardEndpointsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*GetShardEndpointsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*GetShardEndpointsRequest) []*service_account.Name
	})
	if ok {
		return service_account.ServiceAccountNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetShardEndpointsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetShardEndpointsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*GetShardEndpointsRequest) *service_account.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *GetShardEndpointsDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*GetShardEndpointsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*GetShardEndpointsRequest) *service_account.ServiceAccount
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *GetShardEndpointsDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*GetShardEndpointsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*GetShardEndpointsRequest) []*service_account.ServiceAccount
	})
	if ok {
		return service_account.ServiceAccountList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *GetShardEndpointsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetShardEndpointsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*GetShardEndpointsResponse) *service_account.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *GetShardEndpointsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*GetShardEndpointsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*GetShardEndpointsResponse) []*service_account.Name
	})
	if ok {
		return service_account.ServiceAccountNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetShardEndpointsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetShardEndpointsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*GetShardEndpointsResponse) *service_account.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *GetShardEndpointsDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*GetShardEndpointsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*GetShardEndpointsResponse) *service_account.ServiceAccount
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *GetShardEndpointsDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*GetShardEndpointsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*GetShardEndpointsResponse) []*service_account.ServiceAccount
	})
	if ok {
		return service_account.ServiceAccountList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetGetShardEndpointsDescriptor() *GetShardEndpointsDescriptor {
	return getShardEndpointsDescriptor
}

type ServiceAccountServiceDescriptor struct{}

func (d *ServiceAccountServiceDescriptor) AllMethodDescriptors() []gotenclient.MethodDescriptor {
	return []gotenclient.MethodDescriptor{
		getServiceAccountDescriptor,
		batchGetServiceAccountsDescriptor,
		listServiceAccountsDescriptor,
		watchServiceAccountDescriptor,
		watchServiceAccountsDescriptor,
		createServiceAccountDescriptor,
		updateServiceAccountDescriptor,
		deleteServiceAccountDescriptor,
		getMyAgentShardDescriptor,
		getShardEndpointsDescriptor,
	}
}

func (d *ServiceAccountServiceDescriptor) GetFullAPIName() string {
	return "/ntt.iam.v1.ServiceAccountService"
}

func (d *ServiceAccountServiceDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1"
}

func (d *ServiceAccountServiceDescriptor) GetApiName() string {
	return "ServiceAccountService"
}

func (d *ServiceAccountServiceDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *ServiceAccountServiceDescriptor) GetServiceVersion() string {
	return "v1"
}

func GetServiceAccountServiceDescriptor() *ServiceAccountServiceDescriptor {
	return serviceAccountServiceDescriptor
}

func initDescriptors() {
	serviceAccountServiceDescriptor = &ServiceAccountServiceDescriptor{}
	getServiceAccountDescriptor = &GetServiceAccountDescriptor{}
	batchGetServiceAccountsDescriptor = &BatchGetServiceAccountsDescriptor{}
	listServiceAccountsDescriptor = &ListServiceAccountsDescriptor{}
	watchServiceAccountDescriptor = &WatchServiceAccountDescriptor{}
	watchServiceAccountsDescriptor = &WatchServiceAccountsDescriptor{}
	createServiceAccountDescriptor = &CreateServiceAccountDescriptor{}
	updateServiceAccountDescriptor = &UpdateServiceAccountDescriptor{}
	deleteServiceAccountDescriptor = &DeleteServiceAccountDescriptor{}
	getMyAgentShardDescriptor = &GetMyAgentShardDescriptor{}
	getShardEndpointsDescriptor = &GetShardEndpointsDescriptor{}
	gotenclient.GetRegistry().RegisterApiDescriptor(serviceAccountServiceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(getServiceAccountDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(batchGetServiceAccountsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(listServiceAccountsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchServiceAccountDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchServiceAccountsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(createServiceAccountDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(updateServiceAccountDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(deleteServiceAccountDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(getMyAgentShardDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(getShardEndpointsDescriptor)
}

func init() {
	if !descriptorsInitialized {
		initDescriptors()
		descriptorsInitialized = true
	}
}
