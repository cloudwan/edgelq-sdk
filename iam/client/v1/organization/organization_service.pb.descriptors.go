// Code generated by protoc-gen-goten-client
// API: OrganizationService
// DO NOT EDIT!!!

package organization_client

import (
	"google.golang.org/protobuf/proto"

	gotenclient "github.com/cloudwan/goten-sdk/runtime/client"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1/organization"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = new(proto.Message)
	_ = new(gotenclient.MethodDescriptor)
	_ = gotenresource.WildcardId
)

// make sure we're using proto imports
var (
	_ = &organization.Organization{}
	_ = &emptypb.Empty{}
)

var (
	descriptorsInitialized          bool
	organizationServiceDescriptor   *OrganizationServiceDescriptor
	getOrganizationDescriptor       *GetOrganizationDescriptor
	batchGetOrganizationsDescriptor *BatchGetOrganizationsDescriptor
	listOrganizationsDescriptor     *ListOrganizationsDescriptor
	watchOrganizationDescriptor     *WatchOrganizationDescriptor
	watchOrganizationsDescriptor    *WatchOrganizationsDescriptor
	createOrganizationDescriptor    *CreateOrganizationDescriptor
	updateOrganizationDescriptor    *UpdateOrganizationDescriptor
	deleteOrganizationDescriptor    *DeleteOrganizationDescriptor
	searchOrganizationsDescriptor   *SearchOrganizationsDescriptor
	listMyOrganizationsDescriptor   *ListMyOrganizationsDescriptor
	searchMyOrganizationsDescriptor *SearchMyOrganizationsDescriptor
)

type GetOrganizationDescriptor struct{}

type GetOrganizationDescriptorClientMsgHandle struct{}

type GetOrganizationDescriptorServerMsgHandle struct{}

func (d *GetOrganizationDescriptor) NewEmptyClientMsg() proto.Message {
	return &GetOrganizationRequest{}
}

func (d *GetOrganizationDescriptor) NewEmptyServerMsg() proto.Message {
	return &organization.Organization{}
}

func (d *GetOrganizationDescriptor) IsUnary() bool {
	return true
}

func (d *GetOrganizationDescriptor) IsClientStream() bool {
	return false
}

func (d *GetOrganizationDescriptor) IsServerStream() bool {
	return false
}

func (d *GetOrganizationDescriptor) IsCollection() bool {
	return false
}

func (d *GetOrganizationDescriptor) IsPlural() bool {
	return false
}

func (d *GetOrganizationDescriptor) HasResource() bool {
	return true
}

func (d *GetOrganizationDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *GetOrganizationDescriptor) GetVerb() string {
	return "get"
}

func (d *GetOrganizationDescriptor) GetMethodName() string {
	return "GetOrganization"
}

func (d *GetOrganizationDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1.OrganizationService/GetOrganization"
}

func (d *GetOrganizationDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1"
}

func (d *GetOrganizationDescriptor) GetApiName() string {
	return "OrganizationService"
}

func (d *GetOrganizationDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *GetOrganizationDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *GetOrganizationDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return organizationServiceDescriptor
}

func (d *GetOrganizationDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return organization.GetDescriptor()
}

func (d *GetOrganizationDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetOrganizationDescriptorClientMsgHandle{}
}

func (d *GetOrganizationDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetOrganizationDescriptorServerMsgHandle{}
}

func (h *GetOrganizationDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetOrganizationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*GetOrganizationRequest) *organization.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*organization.Name)(nil)
}

func (h *GetOrganizationDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*GetOrganizationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*GetOrganizationRequest) []*organization.Name
	})
	if ok {
		return organization.OrganizationNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetOrganizationDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *GetOrganizationDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*GetOrganizationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*GetOrganizationRequest) *organization.Organization
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *GetOrganizationDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*GetOrganizationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*GetOrganizationRequest) []*organization.Organization
	})
	if ok {
		return organization.OrganizationList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *GetOrganizationDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*organization.Organization)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*organization.Organization) *organization.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*organization.Name)(nil)
}

func (h *GetOrganizationDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*organization.Organization)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*organization.Organization) []*organization.Name
	})
	if ok {
		return organization.OrganizationNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetOrganizationDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *GetOrganizationDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	return msg.(*organization.Organization)
}

func (h *GetOrganizationDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*organization.Organization)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*organization.Organization) []*organization.Organization
	})
	if ok {
		return organization.OrganizationList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetGetOrganizationDescriptor() *GetOrganizationDescriptor {
	return getOrganizationDescriptor
}

type BatchGetOrganizationsDescriptor struct{}

type BatchGetOrganizationsDescriptorClientMsgHandle struct{}

type BatchGetOrganizationsDescriptorServerMsgHandle struct{}

func (d *BatchGetOrganizationsDescriptor) NewEmptyClientMsg() proto.Message {
	return &BatchGetOrganizationsRequest{}
}

func (d *BatchGetOrganizationsDescriptor) NewEmptyServerMsg() proto.Message {
	return &BatchGetOrganizationsResponse{}
}

func (d *BatchGetOrganizationsDescriptor) IsUnary() bool {
	return true
}

func (d *BatchGetOrganizationsDescriptor) IsClientStream() bool {
	return false
}

func (d *BatchGetOrganizationsDescriptor) IsServerStream() bool {
	return false
}

func (d *BatchGetOrganizationsDescriptor) IsCollection() bool {
	return false
}

func (d *BatchGetOrganizationsDescriptor) IsPlural() bool {
	return true
}

func (d *BatchGetOrganizationsDescriptor) HasResource() bool {
	return true
}

func (d *BatchGetOrganizationsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *BatchGetOrganizationsDescriptor) GetVerb() string {
	return "batchGet"
}

func (d *BatchGetOrganizationsDescriptor) GetMethodName() string {
	return "BatchGetOrganizations"
}

func (d *BatchGetOrganizationsDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1.OrganizationService/BatchGetOrganizations"
}

func (d *BatchGetOrganizationsDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1"
}

func (d *BatchGetOrganizationsDescriptor) GetApiName() string {
	return "OrganizationService"
}

func (d *BatchGetOrganizationsDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *BatchGetOrganizationsDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *BatchGetOrganizationsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return organizationServiceDescriptor
}

func (d *BatchGetOrganizationsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return organization.GetDescriptor()
}

func (d *BatchGetOrganizationsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetOrganizationsDescriptorClientMsgHandle{}
}

func (d *BatchGetOrganizationsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetOrganizationsDescriptorServerMsgHandle{}
}

func (h *BatchGetOrganizationsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetOrganizationsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetOrganizationsRequest) *organization.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetOrganizationsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetOrganizationsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetOrganizationsRequest) []*organization.Name
	})
	if ok {
		return organization.OrganizationNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if names := typedMsg.GetNames(); len(names) > 0 {
			return organization.OrganizationNameList(names)
		}
	}
	return (organization.OrganizationNameList)(nil)
}

func (h *BatchGetOrganizationsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *BatchGetOrganizationsDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*BatchGetOrganizationsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*BatchGetOrganizationsRequest) *organization.Organization
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *BatchGetOrganizationsDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*BatchGetOrganizationsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*BatchGetOrganizationsRequest) []*organization.Organization
	})
	if ok {
		return organization.OrganizationList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *BatchGetOrganizationsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetOrganizationsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetOrganizationsResponse) *organization.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetOrganizationsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetOrganizationsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetOrganizationsResponse) []*organization.Name
	})
	if ok {
		return organization.OrganizationNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetOrganizations(); len(resources) > 0 {
			list := make(organization.OrganizationNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (organization.OrganizationNameList)(nil)
}

func (h *BatchGetOrganizationsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *BatchGetOrganizationsDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*BatchGetOrganizationsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*BatchGetOrganizationsResponse) *organization.Organization
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *BatchGetOrganizationsDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*BatchGetOrganizationsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*BatchGetOrganizationsResponse) []*organization.Organization
	})
	if ok {
		return organization.OrganizationList(override.OverrideExtractResourceBodies(typedMsg))
	}
	{
		if resources := typedMsg.GetOrganizations(); len(resources) > 0 {
			return organization.OrganizationList(resources)
		}
	}
	return (organization.OrganizationList)(nil)
}

func GetBatchGetOrganizationsDescriptor() *BatchGetOrganizationsDescriptor {
	return batchGetOrganizationsDescriptor
}

type ListOrganizationsDescriptor struct{}

type ListOrganizationsDescriptorClientMsgHandle struct{}

type ListOrganizationsDescriptorServerMsgHandle struct{}

func (d *ListOrganizationsDescriptor) NewEmptyClientMsg() proto.Message {
	return &ListOrganizationsRequest{}
}

func (d *ListOrganizationsDescriptor) NewEmptyServerMsg() proto.Message {
	return &ListOrganizationsResponse{}
}

func (d *ListOrganizationsDescriptor) IsUnary() bool {
	return true
}

func (d *ListOrganizationsDescriptor) IsClientStream() bool {
	return false
}

func (d *ListOrganizationsDescriptor) IsServerStream() bool {
	return false
}

func (d *ListOrganizationsDescriptor) IsCollection() bool {
	return true
}

func (d *ListOrganizationsDescriptor) IsPlural() bool {
	return true
}

func (d *ListOrganizationsDescriptor) HasResource() bool {
	return true
}

func (d *ListOrganizationsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ListOrganizationsDescriptor) GetVerb() string {
	return "list"
}

func (d *ListOrganizationsDescriptor) GetMethodName() string {
	return "ListOrganizations"
}

func (d *ListOrganizationsDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1.OrganizationService/ListOrganizations"
}

func (d *ListOrganizationsDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1"
}

func (d *ListOrganizationsDescriptor) GetApiName() string {
	return "OrganizationService"
}

func (d *ListOrganizationsDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *ListOrganizationsDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *ListOrganizationsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return organizationServiceDescriptor
}

func (d *ListOrganizationsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return organization.GetDescriptor()
}

func (d *ListOrganizationsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListOrganizationsDescriptorClientMsgHandle{}
}

func (d *ListOrganizationsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListOrganizationsDescriptorServerMsgHandle{}
}

func (h *ListOrganizationsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListOrganizationsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListOrganizationsRequest) *organization.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListOrganizationsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListOrganizationsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListOrganizationsRequest) []*organization.Name
	})
	if ok {
		return organization.OrganizationNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *ListOrganizationsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *ListOrganizationsDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*ListOrganizationsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*ListOrganizationsRequest) *organization.Organization
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *ListOrganizationsDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*ListOrganizationsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*ListOrganizationsRequest) []*organization.Organization
	})
	if ok {
		return organization.OrganizationList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *ListOrganizationsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListOrganizationsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListOrganizationsResponse) *organization.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListOrganizationsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListOrganizationsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListOrganizationsResponse) []*organization.Name
	})
	if ok {
		return organization.OrganizationNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetOrganizations(); len(resources) > 0 {
			list := make(organization.OrganizationNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (organization.OrganizationNameList)(nil)
}

func (h *ListOrganizationsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *ListOrganizationsDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*ListOrganizationsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*ListOrganizationsResponse) *organization.Organization
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *ListOrganizationsDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*ListOrganizationsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*ListOrganizationsResponse) []*organization.Organization
	})
	if ok {
		return organization.OrganizationList(override.OverrideExtractResourceBodies(typedMsg))
	}
	{
		if resources := typedMsg.GetOrganizations(); len(resources) > 0 {
			return organization.OrganizationList(resources)
		}
	}
	return (organization.OrganizationList)(nil)
}

func GetListOrganizationsDescriptor() *ListOrganizationsDescriptor {
	return listOrganizationsDescriptor
}

type WatchOrganizationDescriptor struct{}

type WatchOrganizationDescriptorClientMsgHandle struct{}

type WatchOrganizationDescriptorServerMsgHandle struct{}

func (d *WatchOrganizationDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchOrganizationRequest{}
}

func (d *WatchOrganizationDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchOrganizationResponse{}
}

func (d *WatchOrganizationDescriptor) IsUnary() bool {
	return false
}

func (d *WatchOrganizationDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchOrganizationDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchOrganizationDescriptor) IsCollection() bool {
	return false
}

func (d *WatchOrganizationDescriptor) IsPlural() bool {
	return false
}

func (d *WatchOrganizationDescriptor) HasResource() bool {
	return true
}

func (d *WatchOrganizationDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchOrganizationDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchOrganizationDescriptor) GetMethodName() string {
	return "WatchOrganization"
}

func (d *WatchOrganizationDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1.OrganizationService/WatchOrganization"
}

func (d *WatchOrganizationDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1"
}

func (d *WatchOrganizationDescriptor) GetApiName() string {
	return "OrganizationService"
}

func (d *WatchOrganizationDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *WatchOrganizationDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *WatchOrganizationDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return organizationServiceDescriptor
}

func (d *WatchOrganizationDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return organization.GetDescriptor()
}

func (d *WatchOrganizationDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchOrganizationDescriptorClientMsgHandle{}
}

func (d *WatchOrganizationDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchOrganizationDescriptorServerMsgHandle{}
}

func (h *WatchOrganizationDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchOrganizationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchOrganizationRequest) *organization.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*organization.Name)(nil)
}

func (h *WatchOrganizationDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchOrganizationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchOrganizationRequest) []*organization.Name
	})
	if ok {
		return organization.OrganizationNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchOrganizationDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *WatchOrganizationDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchOrganizationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchOrganizationRequest) *organization.Organization
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *WatchOrganizationDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchOrganizationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchOrganizationRequest) []*organization.Organization
	})
	if ok {
		return organization.OrganizationList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *WatchOrganizationDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchOrganizationResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchOrganizationResponse) *organization.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if resChange := typedMsg.GetChange(); resChange != nil {
			switch tResChange := resChange.ChangeType.(type) {
			case *organization.OrganizationChange_Added_:
				return tResChange.Added.GetOrganization().GetName()
			case *organization.OrganizationChange_Modified_:
				return tResChange.Modified.GetName()
			case *organization.OrganizationChange_Removed_:
				return tResChange.Removed.GetName()
			case *organization.OrganizationChange_Current_:
				return tResChange.Current.GetOrganization().GetName()
			}
		}
	}
	return (*organization.Name)(nil)
}

func (h *WatchOrganizationDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchOrganizationResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchOrganizationResponse) []*organization.Name
	})
	if ok {
		return organization.OrganizationNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchOrganizationDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *WatchOrganizationDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchOrganizationResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchOrganizationResponse) *organization.Organization
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	{
		if resChange := typedMsg.GetChange(); resChange != nil {
			switch tResChange := resChange.ChangeType.(type) {
			case *organization.OrganizationChange_Added_:
				return tResChange.Added.GetOrganization()
			case *organization.OrganizationChange_Modified_:
				return tResChange.Modified.GetOrganization()
			case *organization.OrganizationChange_Current_:
				return tResChange.Current.GetOrganization()
			}
		}
	}
	return (*organization.Organization)(nil)
}

func (h *WatchOrganizationDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchOrganizationResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchOrganizationResponse) []*organization.Organization
	})
	if ok {
		return organization.OrganizationList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetWatchOrganizationDescriptor() *WatchOrganizationDescriptor {
	return watchOrganizationDescriptor
}

type WatchOrganizationsDescriptor struct{}

type WatchOrganizationsDescriptorClientMsgHandle struct{}

type WatchOrganizationsDescriptorServerMsgHandle struct{}

func (d *WatchOrganizationsDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchOrganizationsRequest{}
}

func (d *WatchOrganizationsDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchOrganizationsResponse{}
}

func (d *WatchOrganizationsDescriptor) IsUnary() bool {
	return false
}

func (d *WatchOrganizationsDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchOrganizationsDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchOrganizationsDescriptor) IsCollection() bool {
	return true
}

func (d *WatchOrganizationsDescriptor) IsPlural() bool {
	return true
}

func (d *WatchOrganizationsDescriptor) HasResource() bool {
	return true
}

func (d *WatchOrganizationsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchOrganizationsDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchOrganizationsDescriptor) GetMethodName() string {
	return "WatchOrganizations"
}

func (d *WatchOrganizationsDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1.OrganizationService/WatchOrganizations"
}

func (d *WatchOrganizationsDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1"
}

func (d *WatchOrganizationsDescriptor) GetApiName() string {
	return "OrganizationService"
}

func (d *WatchOrganizationsDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *WatchOrganizationsDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *WatchOrganizationsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return organizationServiceDescriptor
}

func (d *WatchOrganizationsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return organization.GetDescriptor()
}

func (d *WatchOrganizationsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchOrganizationsDescriptorClientMsgHandle{}
}

func (d *WatchOrganizationsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchOrganizationsDescriptorServerMsgHandle{}
}

func (h *WatchOrganizationsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchOrganizationsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchOrganizationsRequest) *organization.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchOrganizationsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchOrganizationsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchOrganizationsRequest) []*organization.Name
	})
	if ok {
		return organization.OrganizationNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchOrganizationsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *WatchOrganizationsDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchOrganizationsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchOrganizationsRequest) *organization.Organization
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *WatchOrganizationsDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchOrganizationsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchOrganizationsRequest) []*organization.Organization
	})
	if ok {
		return organization.OrganizationList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *WatchOrganizationsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchOrganizationsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchOrganizationsResponse) *organization.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchOrganizationsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchOrganizationsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchOrganizationsResponse) []*organization.Name
	})
	if ok {
		return organization.OrganizationNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resChanges := typedMsg.GetOrganizationChanges(); len(resChanges) > 0 {
			list := make(organization.OrganizationNameList, 0, len(resChanges))
			for _, resChange := range resChanges {
				switch tResChange := resChange.ChangeType.(type) {
				case *organization.OrganizationChange_Added_:
					list = append(list, tResChange.Added.GetOrganization().GetName())
				case *organization.OrganizationChange_Modified_:
					list = append(list, tResChange.Modified.GetName())
				case *organization.OrganizationChange_Removed_:
					list = append(list, tResChange.Removed.GetName())
				case *organization.OrganizationChange_Current_:
					list = append(list, tResChange.Current.GetOrganization().GetName())
				}
			}
			return list
		}
	}
	return (organization.OrganizationNameList)(nil)
}

func (h *WatchOrganizationsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *WatchOrganizationsDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchOrganizationsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchOrganizationsResponse) *organization.Organization
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *WatchOrganizationsDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchOrganizationsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchOrganizationsResponse) []*organization.Organization
	})
	if ok {
		return organization.OrganizationList(override.OverrideExtractResourceBodies(typedMsg))
	}
	{
		if resChanges := typedMsg.GetOrganizationChanges(); len(resChanges) > 0 {
			list := make(organization.OrganizationList, 0, len(resChanges))
			for _, resChange := range resChanges {
				switch tResChange := resChange.ChangeType.(type) {
				case *organization.OrganizationChange_Added_:
					list = append(list, tResChange.Added.GetOrganization())
				case *organization.OrganizationChange_Modified_:
					list = append(list, tResChange.Modified.GetOrganization())
				case *organization.OrganizationChange_Current_:
					list = append(list, tResChange.Current.GetOrganization())
				}
			}
			return list
		}
	}
	return (organization.OrganizationList)(nil)
}

func GetWatchOrganizationsDescriptor() *WatchOrganizationsDescriptor {
	return watchOrganizationsDescriptor
}

type CreateOrganizationDescriptor struct{}

type CreateOrganizationDescriptorClientMsgHandle struct{}

type CreateOrganizationDescriptorServerMsgHandle struct{}

func (d *CreateOrganizationDescriptor) NewEmptyClientMsg() proto.Message {
	return &CreateOrganizationRequest{}
}

func (d *CreateOrganizationDescriptor) NewEmptyServerMsg() proto.Message {
	return &organization.Organization{}
}

func (d *CreateOrganizationDescriptor) IsUnary() bool {
	return true
}

func (d *CreateOrganizationDescriptor) IsClientStream() bool {
	return false
}

func (d *CreateOrganizationDescriptor) IsServerStream() bool {
	return false
}

func (d *CreateOrganizationDescriptor) IsCollection() bool {
	return true
}

func (d *CreateOrganizationDescriptor) IsPlural() bool {
	return false
}

func (d *CreateOrganizationDescriptor) HasResource() bool {
	return true
}

func (d *CreateOrganizationDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *CreateOrganizationDescriptor) GetVerb() string {
	return "create"
}

func (d *CreateOrganizationDescriptor) GetMethodName() string {
	return "CreateOrganization"
}

func (d *CreateOrganizationDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1.OrganizationService/CreateOrganization"
}

func (d *CreateOrganizationDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1"
}

func (d *CreateOrganizationDescriptor) GetApiName() string {
	return "OrganizationService"
}

func (d *CreateOrganizationDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *CreateOrganizationDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *CreateOrganizationDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return organizationServiceDescriptor
}

func (d *CreateOrganizationDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return organization.GetDescriptor()
}

func (d *CreateOrganizationDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateOrganizationDescriptorClientMsgHandle{}
}

func (d *CreateOrganizationDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateOrganizationDescriptorServerMsgHandle{}
}

func (h *CreateOrganizationDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateOrganizationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*CreateOrganizationRequest) *organization.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetOrganization()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*organization.Name)(nil)
}

func (h *CreateOrganizationDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*CreateOrganizationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*CreateOrganizationRequest) []*organization.Name
	})
	if ok {
		return organization.OrganizationNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateOrganizationDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *CreateOrganizationDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*CreateOrganizationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*CreateOrganizationRequest) *organization.Organization
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	{
		return typedMsg.GetOrganization()
	}
	return (*organization.Organization)(nil)
}

func (h *CreateOrganizationDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*CreateOrganizationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*CreateOrganizationRequest) []*organization.Organization
	})
	if ok {
		return organization.OrganizationList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *CreateOrganizationDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*organization.Organization)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*organization.Organization) *organization.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*organization.Name)(nil)
}

func (h *CreateOrganizationDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*organization.Organization)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*organization.Organization) []*organization.Name
	})
	if ok {
		return organization.OrganizationNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateOrganizationDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *CreateOrganizationDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	return msg.(*organization.Organization)
}

func (h *CreateOrganizationDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*organization.Organization)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*organization.Organization) []*organization.Organization
	})
	if ok {
		return organization.OrganizationList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetCreateOrganizationDescriptor() *CreateOrganizationDescriptor {
	return createOrganizationDescriptor
}

type UpdateOrganizationDescriptor struct{}

type UpdateOrganizationDescriptorClientMsgHandle struct{}

type UpdateOrganizationDescriptorServerMsgHandle struct{}

func (d *UpdateOrganizationDescriptor) NewEmptyClientMsg() proto.Message {
	return &UpdateOrganizationRequest{}
}

func (d *UpdateOrganizationDescriptor) NewEmptyServerMsg() proto.Message {
	return &organization.Organization{}
}

func (d *UpdateOrganizationDescriptor) IsUnary() bool {
	return true
}

func (d *UpdateOrganizationDescriptor) IsClientStream() bool {
	return false
}

func (d *UpdateOrganizationDescriptor) IsServerStream() bool {
	return false
}

func (d *UpdateOrganizationDescriptor) IsCollection() bool {
	return false
}

func (d *UpdateOrganizationDescriptor) IsPlural() bool {
	return false
}

func (d *UpdateOrganizationDescriptor) HasResource() bool {
	return true
}

func (d *UpdateOrganizationDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *UpdateOrganizationDescriptor) GetVerb() string {
	return "update"
}

func (d *UpdateOrganizationDescriptor) GetMethodName() string {
	return "UpdateOrganization"
}

func (d *UpdateOrganizationDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1.OrganizationService/UpdateOrganization"
}

func (d *UpdateOrganizationDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1"
}

func (d *UpdateOrganizationDescriptor) GetApiName() string {
	return "OrganizationService"
}

func (d *UpdateOrganizationDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *UpdateOrganizationDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *UpdateOrganizationDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return organizationServiceDescriptor
}

func (d *UpdateOrganizationDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return organization.GetDescriptor()
}

func (d *UpdateOrganizationDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateOrganizationDescriptorClientMsgHandle{}
}

func (d *UpdateOrganizationDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateOrganizationDescriptorServerMsgHandle{}
}

func (h *UpdateOrganizationDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateOrganizationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*UpdateOrganizationRequest) *organization.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetOrganization()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*organization.Name)(nil)
}

func (h *UpdateOrganizationDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*UpdateOrganizationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*UpdateOrganizationRequest) []*organization.Name
	})
	if ok {
		return organization.OrganizationNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateOrganizationDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *UpdateOrganizationDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*UpdateOrganizationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*UpdateOrganizationRequest) *organization.Organization
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	{
		return typedMsg.GetOrganization()
	}
	return (*organization.Organization)(nil)
}

func (h *UpdateOrganizationDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*UpdateOrganizationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*UpdateOrganizationRequest) []*organization.Organization
	})
	if ok {
		return organization.OrganizationList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *UpdateOrganizationDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*organization.Organization)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*organization.Organization) *organization.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*organization.Name)(nil)
}

func (h *UpdateOrganizationDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*organization.Organization)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*organization.Organization) []*organization.Name
	})
	if ok {
		return organization.OrganizationNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateOrganizationDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *UpdateOrganizationDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	return msg.(*organization.Organization)
}

func (h *UpdateOrganizationDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*organization.Organization)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*organization.Organization) []*organization.Organization
	})
	if ok {
		return organization.OrganizationList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetUpdateOrganizationDescriptor() *UpdateOrganizationDescriptor {
	return updateOrganizationDescriptor
}

type DeleteOrganizationDescriptor struct{}

type DeleteOrganizationDescriptorClientMsgHandle struct{}

type DeleteOrganizationDescriptorServerMsgHandle struct{}

func (d *DeleteOrganizationDescriptor) NewEmptyClientMsg() proto.Message {
	return &DeleteOrganizationRequest{}
}

func (d *DeleteOrganizationDescriptor) NewEmptyServerMsg() proto.Message {
	return &emptypb.Empty{}
}

func (d *DeleteOrganizationDescriptor) IsUnary() bool {
	return true
}

func (d *DeleteOrganizationDescriptor) IsClientStream() bool {
	return false
}

func (d *DeleteOrganizationDescriptor) IsServerStream() bool {
	return false
}

func (d *DeleteOrganizationDescriptor) IsCollection() bool {
	return false
}

func (d *DeleteOrganizationDescriptor) IsPlural() bool {
	return false
}

func (d *DeleteOrganizationDescriptor) HasResource() bool {
	return true
}

func (d *DeleteOrganizationDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *DeleteOrganizationDescriptor) GetVerb() string {
	return "delete"
}

func (d *DeleteOrganizationDescriptor) GetMethodName() string {
	return "DeleteOrganization"
}

func (d *DeleteOrganizationDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1.OrganizationService/DeleteOrganization"
}

func (d *DeleteOrganizationDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1"
}

func (d *DeleteOrganizationDescriptor) GetApiName() string {
	return "OrganizationService"
}

func (d *DeleteOrganizationDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *DeleteOrganizationDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *DeleteOrganizationDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return organizationServiceDescriptor
}

func (d *DeleteOrganizationDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return organization.GetDescriptor()
}

func (d *DeleteOrganizationDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteOrganizationDescriptorClientMsgHandle{}
}

func (d *DeleteOrganizationDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteOrganizationDescriptorServerMsgHandle{}
}

func (h *DeleteOrganizationDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteOrganizationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*DeleteOrganizationRequest) *organization.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*organization.Name)(nil)
}

func (h *DeleteOrganizationDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*DeleteOrganizationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*DeleteOrganizationRequest) []*organization.Name
	})
	if ok {
		return organization.OrganizationNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteOrganizationDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *DeleteOrganizationDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*DeleteOrganizationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*DeleteOrganizationRequest) *organization.Organization
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *DeleteOrganizationDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*DeleteOrganizationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*DeleteOrganizationRequest) []*organization.Organization
	})
	if ok {
		return organization.OrganizationList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *DeleteOrganizationDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*emptypb.Empty) *organization.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *DeleteOrganizationDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*emptypb.Empty) []*organization.Name
	})
	if ok {
		return organization.OrganizationNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteOrganizationDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *DeleteOrganizationDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*emptypb.Empty) *organization.Organization
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *DeleteOrganizationDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*emptypb.Empty) []*organization.Organization
	})
	if ok {
		return organization.OrganizationList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetDeleteOrganizationDescriptor() *DeleteOrganizationDescriptor {
	return deleteOrganizationDescriptor
}

type SearchOrganizationsDescriptor struct{}

type SearchOrganizationsDescriptorClientMsgHandle struct{}

type SearchOrganizationsDescriptorServerMsgHandle struct{}

func (d *SearchOrganizationsDescriptor) NewEmptyClientMsg() proto.Message {
	return &SearchOrganizationsRequest{}
}

func (d *SearchOrganizationsDescriptor) NewEmptyServerMsg() proto.Message {
	return &SearchOrganizationsResponse{}
}

func (d *SearchOrganizationsDescriptor) IsUnary() bool {
	return true
}

func (d *SearchOrganizationsDescriptor) IsClientStream() bool {
	return false
}

func (d *SearchOrganizationsDescriptor) IsServerStream() bool {
	return false
}

func (d *SearchOrganizationsDescriptor) IsCollection() bool {
	return true
}

func (d *SearchOrganizationsDescriptor) IsPlural() bool {
	return true
}

func (d *SearchOrganizationsDescriptor) HasResource() bool {
	return true
}

func (d *SearchOrganizationsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *SearchOrganizationsDescriptor) GetVerb() string {
	return "search"
}

func (d *SearchOrganizationsDescriptor) GetMethodName() string {
	return "SearchOrganizations"
}

func (d *SearchOrganizationsDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1.OrganizationService/SearchOrganizations"
}

func (d *SearchOrganizationsDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1"
}

func (d *SearchOrganizationsDescriptor) GetApiName() string {
	return "OrganizationService"
}

func (d *SearchOrganizationsDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *SearchOrganizationsDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *SearchOrganizationsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return organizationServiceDescriptor
}

func (d *SearchOrganizationsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return organization.GetDescriptor()
}

func (d *SearchOrganizationsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &SearchOrganizationsDescriptorClientMsgHandle{}
}

func (d *SearchOrganizationsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &SearchOrganizationsDescriptorServerMsgHandle{}
}

func (h *SearchOrganizationsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*SearchOrganizationsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*SearchOrganizationsRequest) *organization.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *SearchOrganizationsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*SearchOrganizationsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*SearchOrganizationsRequest) []*organization.Name
	})
	if ok {
		return organization.OrganizationNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *SearchOrganizationsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *SearchOrganizationsDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*SearchOrganizationsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*SearchOrganizationsRequest) *organization.Organization
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *SearchOrganizationsDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*SearchOrganizationsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*SearchOrganizationsRequest) []*organization.Organization
	})
	if ok {
		return organization.OrganizationList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *SearchOrganizationsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*SearchOrganizationsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*SearchOrganizationsResponse) *organization.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *SearchOrganizationsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*SearchOrganizationsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*SearchOrganizationsResponse) []*organization.Name
	})
	if ok {
		return organization.OrganizationNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetOrganizations(); len(resources) > 0 {
			list := make(organization.OrganizationNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (organization.OrganizationNameList)(nil)
}

func (h *SearchOrganizationsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *SearchOrganizationsDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*SearchOrganizationsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*SearchOrganizationsResponse) *organization.Organization
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *SearchOrganizationsDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*SearchOrganizationsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*SearchOrganizationsResponse) []*organization.Organization
	})
	if ok {
		return organization.OrganizationList(override.OverrideExtractResourceBodies(typedMsg))
	}
	{
		if resources := typedMsg.GetOrganizations(); len(resources) > 0 {
			return organization.OrganizationList(resources)
		}
	}
	return (organization.OrganizationList)(nil)
}

func GetSearchOrganizationsDescriptor() *SearchOrganizationsDescriptor {
	return searchOrganizationsDescriptor
}

type ListMyOrganizationsDescriptor struct{}

type ListMyOrganizationsDescriptorClientMsgHandle struct{}

type ListMyOrganizationsDescriptorServerMsgHandle struct{}

func (d *ListMyOrganizationsDescriptor) NewEmptyClientMsg() proto.Message {
	return &ListMyOrganizationsRequest{}
}

func (d *ListMyOrganizationsDescriptor) NewEmptyServerMsg() proto.Message {
	return &ListMyOrganizationsResponse{}
}

func (d *ListMyOrganizationsDescriptor) IsUnary() bool {
	return true
}

func (d *ListMyOrganizationsDescriptor) IsClientStream() bool {
	return false
}

func (d *ListMyOrganizationsDescriptor) IsServerStream() bool {
	return false
}

func (d *ListMyOrganizationsDescriptor) IsCollection() bool {
	return true
}

func (d *ListMyOrganizationsDescriptor) IsPlural() bool {
	return true
}

func (d *ListMyOrganizationsDescriptor) HasResource() bool {
	return true
}

func (d *ListMyOrganizationsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ListMyOrganizationsDescriptor) GetVerb() string {
	return "listMy"
}

func (d *ListMyOrganizationsDescriptor) GetMethodName() string {
	return "ListMyOrganizations"
}

func (d *ListMyOrganizationsDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1.OrganizationService/ListMyOrganizations"
}

func (d *ListMyOrganizationsDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1"
}

func (d *ListMyOrganizationsDescriptor) GetApiName() string {
	return "OrganizationService"
}

func (d *ListMyOrganizationsDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *ListMyOrganizationsDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *ListMyOrganizationsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return organizationServiceDescriptor
}

func (d *ListMyOrganizationsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return organization.GetDescriptor()
}

func (d *ListMyOrganizationsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListMyOrganizationsDescriptorClientMsgHandle{}
}

func (d *ListMyOrganizationsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListMyOrganizationsDescriptorServerMsgHandle{}
}

func (h *ListMyOrganizationsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListMyOrganizationsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListMyOrganizationsRequest) *organization.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListMyOrganizationsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListMyOrganizationsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListMyOrganizationsRequest) []*organization.Name
	})
	if ok {
		return organization.OrganizationNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *ListMyOrganizationsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *ListMyOrganizationsDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*ListMyOrganizationsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*ListMyOrganizationsRequest) *organization.Organization
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *ListMyOrganizationsDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*ListMyOrganizationsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*ListMyOrganizationsRequest) []*organization.Organization
	})
	if ok {
		return organization.OrganizationList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *ListMyOrganizationsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListMyOrganizationsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListMyOrganizationsResponse) *organization.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListMyOrganizationsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListMyOrganizationsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListMyOrganizationsResponse) []*organization.Name
	})
	if ok {
		return organization.OrganizationNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetOrganizations(); len(resources) > 0 {
			list := make(organization.OrganizationNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (organization.OrganizationNameList)(nil)
}

func (h *ListMyOrganizationsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *ListMyOrganizationsDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*ListMyOrganizationsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*ListMyOrganizationsResponse) *organization.Organization
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *ListMyOrganizationsDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*ListMyOrganizationsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*ListMyOrganizationsResponse) []*organization.Organization
	})
	if ok {
		return organization.OrganizationList(override.OverrideExtractResourceBodies(typedMsg))
	}
	{
		if resources := typedMsg.GetOrganizations(); len(resources) > 0 {
			return organization.OrganizationList(resources)
		}
	}
	return (organization.OrganizationList)(nil)
}

func GetListMyOrganizationsDescriptor() *ListMyOrganizationsDescriptor {
	return listMyOrganizationsDescriptor
}

type SearchMyOrganizationsDescriptor struct{}

type SearchMyOrganizationsDescriptorClientMsgHandle struct{}

type SearchMyOrganizationsDescriptorServerMsgHandle struct{}

func (d *SearchMyOrganizationsDescriptor) NewEmptyClientMsg() proto.Message {
	return &SearchMyOrganizationsRequest{}
}

func (d *SearchMyOrganizationsDescriptor) NewEmptyServerMsg() proto.Message {
	return &SearchMyOrganizationsResponse{}
}

func (d *SearchMyOrganizationsDescriptor) IsUnary() bool {
	return true
}

func (d *SearchMyOrganizationsDescriptor) IsClientStream() bool {
	return false
}

func (d *SearchMyOrganizationsDescriptor) IsServerStream() bool {
	return false
}

func (d *SearchMyOrganizationsDescriptor) IsCollection() bool {
	return true
}

func (d *SearchMyOrganizationsDescriptor) IsPlural() bool {
	return true
}

func (d *SearchMyOrganizationsDescriptor) HasResource() bool {
	return true
}

func (d *SearchMyOrganizationsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *SearchMyOrganizationsDescriptor) GetVerb() string {
	return "searchMy"
}

func (d *SearchMyOrganizationsDescriptor) GetMethodName() string {
	return "SearchMyOrganizations"
}

func (d *SearchMyOrganizationsDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1.OrganizationService/SearchMyOrganizations"
}

func (d *SearchMyOrganizationsDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1"
}

func (d *SearchMyOrganizationsDescriptor) GetApiName() string {
	return "OrganizationService"
}

func (d *SearchMyOrganizationsDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *SearchMyOrganizationsDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *SearchMyOrganizationsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return organizationServiceDescriptor
}

func (d *SearchMyOrganizationsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return organization.GetDescriptor()
}

func (d *SearchMyOrganizationsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &SearchMyOrganizationsDescriptorClientMsgHandle{}
}

func (d *SearchMyOrganizationsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &SearchMyOrganizationsDescriptorServerMsgHandle{}
}

func (h *SearchMyOrganizationsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*SearchMyOrganizationsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*SearchMyOrganizationsRequest) *organization.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *SearchMyOrganizationsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*SearchMyOrganizationsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*SearchMyOrganizationsRequest) []*organization.Name
	})
	if ok {
		return organization.OrganizationNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *SearchMyOrganizationsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *SearchMyOrganizationsDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*SearchMyOrganizationsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*SearchMyOrganizationsRequest) *organization.Organization
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *SearchMyOrganizationsDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*SearchMyOrganizationsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*SearchMyOrganizationsRequest) []*organization.Organization
	})
	if ok {
		return organization.OrganizationList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *SearchMyOrganizationsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*SearchMyOrganizationsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*SearchMyOrganizationsResponse) *organization.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *SearchMyOrganizationsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*SearchMyOrganizationsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*SearchMyOrganizationsResponse) []*organization.Name
	})
	if ok {
		return organization.OrganizationNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetOrganizations(); len(resources) > 0 {
			list := make(organization.OrganizationNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (organization.OrganizationNameList)(nil)
}

func (h *SearchMyOrganizationsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *SearchMyOrganizationsDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*SearchMyOrganizationsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*SearchMyOrganizationsResponse) *organization.Organization
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *SearchMyOrganizationsDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*SearchMyOrganizationsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*SearchMyOrganizationsResponse) []*organization.Organization
	})
	if ok {
		return organization.OrganizationList(override.OverrideExtractResourceBodies(typedMsg))
	}
	{
		if resources := typedMsg.GetOrganizations(); len(resources) > 0 {
			return organization.OrganizationList(resources)
		}
	}
	return (organization.OrganizationList)(nil)
}

func GetSearchMyOrganizationsDescriptor() *SearchMyOrganizationsDescriptor {
	return searchMyOrganizationsDescriptor
}

type OrganizationServiceDescriptor struct{}

func (d *OrganizationServiceDescriptor) AllMethodDescriptors() []gotenclient.MethodDescriptor {
	return []gotenclient.MethodDescriptor{
		getOrganizationDescriptor,
		batchGetOrganizationsDescriptor,
		listOrganizationsDescriptor,
		watchOrganizationDescriptor,
		watchOrganizationsDescriptor,
		createOrganizationDescriptor,
		updateOrganizationDescriptor,
		deleteOrganizationDescriptor,
		searchOrganizationsDescriptor,
		listMyOrganizationsDescriptor,
		searchMyOrganizationsDescriptor,
	}
}

func (d *OrganizationServiceDescriptor) GetFullAPIName() string {
	return "/ntt.iam.v1.OrganizationService"
}

func (d *OrganizationServiceDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1"
}

func (d *OrganizationServiceDescriptor) GetApiName() string {
	return "OrganizationService"
}

func (d *OrganizationServiceDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *OrganizationServiceDescriptor) GetServiceVersion() string {
	return "v1"
}

func GetOrganizationServiceDescriptor() *OrganizationServiceDescriptor {
	return organizationServiceDescriptor
}

func initDescriptors() {
	organizationServiceDescriptor = &OrganizationServiceDescriptor{}
	getOrganizationDescriptor = &GetOrganizationDescriptor{}
	batchGetOrganizationsDescriptor = &BatchGetOrganizationsDescriptor{}
	listOrganizationsDescriptor = &ListOrganizationsDescriptor{}
	watchOrganizationDescriptor = &WatchOrganizationDescriptor{}
	watchOrganizationsDescriptor = &WatchOrganizationsDescriptor{}
	createOrganizationDescriptor = &CreateOrganizationDescriptor{}
	updateOrganizationDescriptor = &UpdateOrganizationDescriptor{}
	deleteOrganizationDescriptor = &DeleteOrganizationDescriptor{}
	searchOrganizationsDescriptor = &SearchOrganizationsDescriptor{}
	listMyOrganizationsDescriptor = &ListMyOrganizationsDescriptor{}
	searchMyOrganizationsDescriptor = &SearchMyOrganizationsDescriptor{}
	gotenclient.GetRegistry().RegisterApiDescriptor(organizationServiceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(getOrganizationDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(batchGetOrganizationsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(listOrganizationsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchOrganizationDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchOrganizationsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(createOrganizationDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(updateOrganizationDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(deleteOrganizationDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(searchOrganizationsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(listMyOrganizationsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(searchMyOrganizationsDescriptor)
}

func init() {
	if !descriptorsInitialized {
		initDescriptors()
		descriptorsInitialized = true
	}
}
