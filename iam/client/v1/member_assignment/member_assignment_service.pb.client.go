// Code generated by protoc-gen-goten-client
// API: MemberAssignmentService
// DO NOT EDIT!!!

package member_assignment_client

import (
	"context"

	"google.golang.org/grpc"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	member_assignment "github.com/cloudwan/edgelq-sdk/iam/resources/v1/member_assignment"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = protoimpl.DescBuilder{}
	_ = new(context.Context)
	_ = grpc.ClientConn{}
)

// make sure we're using proto imports
var (
	_ = &member_assignment.MemberAssignment{}
	_ = &emptypb.Empty{}
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MemberAssignmentServiceClient is the client API for MemberAssignmentService.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MemberAssignmentServiceClient interface {
	GetMemberAssignment(ctx context.Context, in *GetMemberAssignmentRequest, opts ...grpc.CallOption) (*member_assignment.MemberAssignment, error)
	BatchGetMemberAssignments(ctx context.Context, in *BatchGetMemberAssignmentsRequest, opts ...grpc.CallOption) (*BatchGetMemberAssignmentsResponse, error)
	ListMemberAssignments(ctx context.Context, in *ListMemberAssignmentsRequest, opts ...grpc.CallOption) (*ListMemberAssignmentsResponse, error)
	WatchMemberAssignment(ctx context.Context, in *WatchMemberAssignmentRequest, opts ...grpc.CallOption) (WatchMemberAssignmentClientStream, error)
	WatchMemberAssignments(ctx context.Context, in *WatchMemberAssignmentsRequest, opts ...grpc.CallOption) (WatchMemberAssignmentsClientStream, error)
	UpdateMemberAssignment(ctx context.Context, in *UpdateMemberAssignmentRequest, opts ...grpc.CallOption) (*member_assignment.MemberAssignment, error)
	DeleteMemberAssignment(ctx context.Context, in *DeleteMemberAssignmentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type client struct {
	cc grpc.ClientConnInterface
}

func NewMemberAssignmentServiceClient(cc grpc.ClientConnInterface) MemberAssignmentServiceClient {
	return &client{cc}
}

func (c *client) GetMemberAssignment(ctx context.Context, in *GetMemberAssignmentRequest, opts ...grpc.CallOption) (*member_assignment.MemberAssignment, error) {
	out := new(member_assignment.MemberAssignment)
	err := c.cc.Invoke(ctx, "/ntt.iam.v1.MemberAssignmentService/GetMemberAssignment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) BatchGetMemberAssignments(ctx context.Context, in *BatchGetMemberAssignmentsRequest, opts ...grpc.CallOption) (*BatchGetMemberAssignmentsResponse, error) {
	out := new(BatchGetMemberAssignmentsResponse)
	err := c.cc.Invoke(ctx, "/ntt.iam.v1.MemberAssignmentService/BatchGetMemberAssignments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListMemberAssignments(ctx context.Context, in *ListMemberAssignmentsRequest, opts ...grpc.CallOption) (*ListMemberAssignmentsResponse, error) {
	out := new(ListMemberAssignmentsResponse)
	err := c.cc.Invoke(ctx, "/ntt.iam.v1.MemberAssignmentService/ListMemberAssignments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) WatchMemberAssignment(ctx context.Context, in *WatchMemberAssignmentRequest, opts ...grpc.CallOption) (WatchMemberAssignmentClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchMemberAssignment",
			ServerStreams: true,
		},
		"/ntt.iam.v1.MemberAssignmentService/WatchMemberAssignment", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchMemberAssignmentWatchMemberAssignmentClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchMemberAssignmentClientStream interface {
	Recv() (*WatchMemberAssignmentResponse, error)
	grpc.ClientStream
}

type watchMemberAssignmentWatchMemberAssignmentClient struct {
	grpc.ClientStream
}

func (x *watchMemberAssignmentWatchMemberAssignmentClient) Recv() (*WatchMemberAssignmentResponse, error) {
	m := new(WatchMemberAssignmentResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) WatchMemberAssignments(ctx context.Context, in *WatchMemberAssignmentsRequest, opts ...grpc.CallOption) (WatchMemberAssignmentsClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchMemberAssignments",
			ServerStreams: true,
		},
		"/ntt.iam.v1.MemberAssignmentService/WatchMemberAssignments", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchMemberAssignmentsWatchMemberAssignmentsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchMemberAssignmentsClientStream interface {
	Recv() (*WatchMemberAssignmentsResponse, error)
	grpc.ClientStream
}

type watchMemberAssignmentsWatchMemberAssignmentsClient struct {
	grpc.ClientStream
}

func (x *watchMemberAssignmentsWatchMemberAssignmentsClient) Recv() (*WatchMemberAssignmentsResponse, error) {
	m := new(WatchMemberAssignmentsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) UpdateMemberAssignment(ctx context.Context, in *UpdateMemberAssignmentRequest, opts ...grpc.CallOption) (*member_assignment.MemberAssignment, error) {
	out := new(member_assignment.MemberAssignment)
	err := c.cc.Invoke(ctx, "/ntt.iam.v1.MemberAssignmentService/UpdateMemberAssignment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeleteMemberAssignment(ctx context.Context, in *DeleteMemberAssignmentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ntt.iam.v1.MemberAssignmentService/DeleteMemberAssignment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
