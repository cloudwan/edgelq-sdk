// Code generated by protoc-gen-goten-go
// File: edgelq/iam/proto/v1/member_assignment_service.proto
// DO NOT EDIT!!!

package member_assignment_client

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	member_assignment "github.com/cloudwan/edgelq-sdk/iam/resources/v1/member_assignment"
	view "github.com/cloudwan/goten-sdk/types/view"
	watch_type "github.com/cloudwan/goten-sdk/types/watch_type"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &member_assignment.MemberAssignment{}
	_ = &emptypb.Empty{}
	_ = &fieldmaskpb.FieldMask{}
	_ = &timestamppb.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request message for method
// [GetMemberAssignment][ntt.iam.v1.GetMemberAssignment]
type GetMemberAssignmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of ntt.iam.v1.MemberAssignment
	Name *member_assignment.Name `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty" firestore:"name"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *member_assignment.MemberAssignment_FieldMask `protobuf:"bytes,3,opt,customtype=MemberAssignment_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,4,opt,name=view,proto3,enum=goten.types.View" json:"view,omitempty" firestore:"view"`
}

func (m *GetMemberAssignmentRequest) Reset() {
	*m = GetMemberAssignmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_iam_proto_v1_member_assignment_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *GetMemberAssignmentRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*GetMemberAssignmentRequest) ProtoMessage() {}

func (m *GetMemberAssignmentRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_iam_proto_v1_member_assignment_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*GetMemberAssignmentRequest) GotenMessage() {}

// Deprecated, Use GetMemberAssignmentRequest.ProtoReflect.Descriptor instead.
func (*GetMemberAssignmentRequest) Descriptor() ([]byte, []int) {
	return edgelq_iam_proto_v1_member_assignment_service_proto_rawDescGZIP(), []int{0}
}

func (m *GetMemberAssignmentRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *GetMemberAssignmentRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *GetMemberAssignmentRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *GetMemberAssignmentRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *GetMemberAssignmentRequest) GetName() *member_assignment.Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *GetMemberAssignmentRequest) GetFieldMask() *member_assignment.MemberAssignment_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *GetMemberAssignmentRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *GetMemberAssignmentRequest) SetName(fv *member_assignment.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "GetMemberAssignmentRequest"))
	}
	m.Name = fv
}

func (m *GetMemberAssignmentRequest) SetFieldMask(fv *member_assignment.MemberAssignment_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "GetMemberAssignmentRequest"))
	}
	m.FieldMask = fv
}

func (m *GetMemberAssignmentRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "GetMemberAssignmentRequest"))
	}
	m.View = fv
}

// Request message for method
// [BatchGetMemberAssignments][ntt.iam.v1.BatchGetMemberAssignments]
type BatchGetMemberAssignmentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Names of MemberAssignments
	Names []*member_assignment.Name `protobuf:"bytes,2,rep,customtype=Name,name=names,proto3" json:"names,omitempty" firestore:"names"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *member_assignment.MemberAssignment_FieldMask `protobuf:"bytes,3,opt,customtype=MemberAssignment_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,4,opt,name=view,proto3,enum=goten.types.View" json:"view,omitempty" firestore:"view"`
}

func (m *BatchGetMemberAssignmentsRequest) Reset() {
	*m = BatchGetMemberAssignmentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_iam_proto_v1_member_assignment_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *BatchGetMemberAssignmentsRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*BatchGetMemberAssignmentsRequest) ProtoMessage() {}

func (m *BatchGetMemberAssignmentsRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_iam_proto_v1_member_assignment_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*BatchGetMemberAssignmentsRequest) GotenMessage() {}

// Deprecated, Use BatchGetMemberAssignmentsRequest.ProtoReflect.Descriptor instead.
func (*BatchGetMemberAssignmentsRequest) Descriptor() ([]byte, []int) {
	return edgelq_iam_proto_v1_member_assignment_service_proto_rawDescGZIP(), []int{1}
}

func (m *BatchGetMemberAssignmentsRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *BatchGetMemberAssignmentsRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *BatchGetMemberAssignmentsRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *BatchGetMemberAssignmentsRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *BatchGetMemberAssignmentsRequest) GetNames() []*member_assignment.Name {
	if m != nil {
		return m.Names
	}
	return nil
}

func (m *BatchGetMemberAssignmentsRequest) GetFieldMask() *member_assignment.MemberAssignment_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *BatchGetMemberAssignmentsRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *BatchGetMemberAssignmentsRequest) SetNames(fv []*member_assignment.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Names", "BatchGetMemberAssignmentsRequest"))
	}
	m.Names = fv
}

func (m *BatchGetMemberAssignmentsRequest) SetFieldMask(fv *member_assignment.MemberAssignment_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "BatchGetMemberAssignmentsRequest"))
	}
	m.FieldMask = fv
}

func (m *BatchGetMemberAssignmentsRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "BatchGetMemberAssignmentsRequest"))
	}
	m.View = fv
}

// BatchGetMemberAssignmentsResponse
type BatchGetMemberAssignmentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// found MemberAssignments
	MemberAssignments []*member_assignment.MemberAssignment `protobuf:"bytes,1,rep,name=member_assignments,json=memberAssignments,proto3" json:"member_assignments,omitempty" firestore:"memberAssignments"`
	// list of not found MemberAssignments
	Missing []*member_assignment.Name `protobuf:"bytes,2,rep,customtype=Name,name=missing,proto3" json:"missing,omitempty" firestore:"missing"`
}

func (m *BatchGetMemberAssignmentsResponse) Reset() {
	*m = BatchGetMemberAssignmentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_iam_proto_v1_member_assignment_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *BatchGetMemberAssignmentsResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*BatchGetMemberAssignmentsResponse) ProtoMessage() {}

func (m *BatchGetMemberAssignmentsResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_iam_proto_v1_member_assignment_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*BatchGetMemberAssignmentsResponse) GotenMessage() {}

// Deprecated, Use BatchGetMemberAssignmentsResponse.ProtoReflect.Descriptor instead.
func (*BatchGetMemberAssignmentsResponse) Descriptor() ([]byte, []int) {
	return edgelq_iam_proto_v1_member_assignment_service_proto_rawDescGZIP(), []int{2}
}

func (m *BatchGetMemberAssignmentsResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *BatchGetMemberAssignmentsResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *BatchGetMemberAssignmentsResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *BatchGetMemberAssignmentsResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *BatchGetMemberAssignmentsResponse) GetMemberAssignments() []*member_assignment.MemberAssignment {
	if m != nil {
		return m.MemberAssignments
	}
	return nil
}

func (m *BatchGetMemberAssignmentsResponse) GetMissing() []*member_assignment.Name {
	if m != nil {
		return m.Missing
	}
	return nil
}

func (m *BatchGetMemberAssignmentsResponse) SetMemberAssignments(fv []*member_assignment.MemberAssignment) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MemberAssignments", "BatchGetMemberAssignmentsResponse"))
	}
	m.MemberAssignments = fv
}

func (m *BatchGetMemberAssignmentsResponse) SetMissing(fv []*member_assignment.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Missing", "BatchGetMemberAssignmentsResponse"))
	}
	m.Missing = fv
}

// Request message for method
// [ListMemberAssignments][ntt.iam.v1.ListMemberAssignments]
type ListMemberAssignmentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Parent name of ntt.iam.v1.MemberAssignment
	Parent *member_assignment.ParentName `protobuf:"bytes,1,opt,customtype=ParentName,name=parent,proto3" json:"parent,omitempty" firestore:"parent"`
	// Requested page size. Server may return fewer MemberAssignments than
	// requested. If unspecified, server will pick an appropriate default.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty" firestore:"pageSize"`
	// A token identifying a page of results the server should return.
	// Typically, this is the value of
	// [ListMemberAssignmentsResponse.next_page_token][ntt.iam.v1.ListMemberAssignmentsResponse.next_page_token]
	PageToken *member_assignment.PagerCursor `protobuf:"bytes,3,opt,customtype=PagerCursor,name=page_token,json=pageToken,proto3" json:"page_token,omitempty" firestore:"pageToken"`
	// Order By -
	// https://cloud.google.com/apis/design/design_patterns#list_pagination list
	// of field path with order directive, either 'asc' or 'desc'. If direction is
	// not provided, 'asc' is assumed. e.g. "state.nested_field asc,
	// state.something.else desc, theme"
	OrderBy *member_assignment.OrderBy `protobuf:"bytes,4,opt,customtype=OrderBy,name=order_by,json=orderBy,proto3" json:"order_by,omitempty" firestore:"orderBy"`
	// Filter - filter results by field criteria. Simplified SQL-like syntax with
	// following operators:
	// <=, >=, =, !=, <, >, LIKE, CONTAINS (aliases CONTAIN, HAS, HAVE), IN, IS
	// [NOT] NULL | NaN . Combine conditions with OR | AND example: 'meta.labels
	// CONTAINS "severity:important" OR (state.last_error_time >
	// "2018-11-15T10:00:00Z" AND state.status = "ERROR")'
	Filter *member_assignment.Filter `protobuf:"bytes,5,opt,customtype=Filter,name=filter,proto3" json:"filter,omitempty" firestore:"filter"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *member_assignment.MemberAssignment_FieldMask `protobuf:"bytes,6,opt,customtype=MemberAssignment_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,7,opt,name=view,proto3,enum=goten.types.View" json:"view,omitempty" firestore:"view"`
	// Indicates if list response should contain total count and offset (fields
	// current_offset and total_results_count).
	IncludePagingInfo bool `protobuf:"varint,8,opt,name=include_paging_info,json=includePagingInfo,proto3" json:"include_paging_info,omitempty" firestore:"includePagingInfo"`
}

func (m *ListMemberAssignmentsRequest) Reset() {
	*m = ListMemberAssignmentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_iam_proto_v1_member_assignment_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ListMemberAssignmentsRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ListMemberAssignmentsRequest) ProtoMessage() {}

func (m *ListMemberAssignmentsRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_iam_proto_v1_member_assignment_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ListMemberAssignmentsRequest) GotenMessage() {}

// Deprecated, Use ListMemberAssignmentsRequest.ProtoReflect.Descriptor instead.
func (*ListMemberAssignmentsRequest) Descriptor() ([]byte, []int) {
	return edgelq_iam_proto_v1_member_assignment_service_proto_rawDescGZIP(), []int{3}
}

func (m *ListMemberAssignmentsRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ListMemberAssignmentsRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ListMemberAssignmentsRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ListMemberAssignmentsRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ListMemberAssignmentsRequest) GetParent() *member_assignment.ParentName {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *ListMemberAssignmentsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return int32(0)
}

func (m *ListMemberAssignmentsRequest) GetPageToken() *member_assignment.PagerCursor {
	if m != nil {
		return m.PageToken
	}
	return nil
}

func (m *ListMemberAssignmentsRequest) GetOrderBy() *member_assignment.OrderBy {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

func (m *ListMemberAssignmentsRequest) GetFilter() *member_assignment.Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *ListMemberAssignmentsRequest) GetFieldMask() *member_assignment.MemberAssignment_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *ListMemberAssignmentsRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *ListMemberAssignmentsRequest) GetIncludePagingInfo() bool {
	if m != nil {
		return m.IncludePagingInfo
	}
	return false
}

func (m *ListMemberAssignmentsRequest) SetParent(fv *member_assignment.ParentName) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Parent", "ListMemberAssignmentsRequest"))
	}
	m.Parent = fv
}

func (m *ListMemberAssignmentsRequest) SetPageSize(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageSize", "ListMemberAssignmentsRequest"))
	}
	m.PageSize = fv
}

func (m *ListMemberAssignmentsRequest) SetPageToken(fv *member_assignment.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageToken", "ListMemberAssignmentsRequest"))
	}
	m.PageToken = fv
}

func (m *ListMemberAssignmentsRequest) SetOrderBy(fv *member_assignment.OrderBy) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OrderBy", "ListMemberAssignmentsRequest"))
	}
	m.OrderBy = fv
}

func (m *ListMemberAssignmentsRequest) SetFilter(fv *member_assignment.Filter) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Filter", "ListMemberAssignmentsRequest"))
	}
	m.Filter = fv
}

func (m *ListMemberAssignmentsRequest) SetFieldMask(fv *member_assignment.MemberAssignment_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "ListMemberAssignmentsRequest"))
	}
	m.FieldMask = fv
}

func (m *ListMemberAssignmentsRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "ListMemberAssignmentsRequest"))
	}
	m.View = fv
}

func (m *ListMemberAssignmentsRequest) SetIncludePagingInfo(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IncludePagingInfo", "ListMemberAssignmentsRequest"))
	}
	m.IncludePagingInfo = fv
}

// Request message for method
// [ListMemberAssignments][ntt.iam.v1.ListMemberAssignments]
type ListMemberAssignmentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// The list of MemberAssignments
	MemberAssignments []*member_assignment.MemberAssignment `protobuf:"bytes,1,rep,name=member_assignments,json=memberAssignments,proto3" json:"member_assignments,omitempty" firestore:"memberAssignments"`
	// A token to retrieve previous page of results. Pass this value in the
	// [ListMemberAssignmentsRequest.page_token][ntt.iam.v1.ListMemberAssignmentsRequest.page_token]
	PrevPageToken *member_assignment.PagerCursor `protobuf:"bytes,3,opt,customtype=PagerCursor,name=prev_page_token,json=prevPageToken,proto3" json:"prev_page_token,omitempty" firestore:"prevPageToken"`
	// A token to retrieve next page of results. Pass this value in the
	// [ListMemberAssignmentsRequest.page_token][ntt.iam.v1.ListMemberAssignmentsRequest.page_token]
	NextPageToken *member_assignment.PagerCursor `protobuf:"bytes,4,opt,customtype=PagerCursor,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty" firestore:"nextPageToken"`
	// Current offset from the first page or 0 if no page tokens were given,
	// paging info was not requested or there was an error while trying to get
	// it). Page index can be computed from offset and limit provided in a
	// request.
	CurrentOffset int32 `protobuf:"varint,5,opt,name=current_offset,json=currentOffset,proto3" json:"current_offset,omitempty" firestore:"currentOffset"`
	// Number of total MemberAssignments across all pages or 0, if there are no
	// items, paging info was not requested or there was an error while trying to
	// get it.
	TotalResultsCount int32 `protobuf:"varint,6,opt,name=total_results_count,json=totalResultsCount,proto3" json:"total_results_count,omitempty" firestore:"totalResultsCount"`
}

func (m *ListMemberAssignmentsResponse) Reset() {
	*m = ListMemberAssignmentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_iam_proto_v1_member_assignment_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ListMemberAssignmentsResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ListMemberAssignmentsResponse) ProtoMessage() {}

func (m *ListMemberAssignmentsResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_iam_proto_v1_member_assignment_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ListMemberAssignmentsResponse) GotenMessage() {}

// Deprecated, Use ListMemberAssignmentsResponse.ProtoReflect.Descriptor instead.
func (*ListMemberAssignmentsResponse) Descriptor() ([]byte, []int) {
	return edgelq_iam_proto_v1_member_assignment_service_proto_rawDescGZIP(), []int{4}
}

func (m *ListMemberAssignmentsResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ListMemberAssignmentsResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ListMemberAssignmentsResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ListMemberAssignmentsResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ListMemberAssignmentsResponse) GetMemberAssignments() []*member_assignment.MemberAssignment {
	if m != nil {
		return m.MemberAssignments
	}
	return nil
}

func (m *ListMemberAssignmentsResponse) GetPrevPageToken() *member_assignment.PagerCursor {
	if m != nil {
		return m.PrevPageToken
	}
	return nil
}

func (m *ListMemberAssignmentsResponse) GetNextPageToken() *member_assignment.PagerCursor {
	if m != nil {
		return m.NextPageToken
	}
	return nil
}

func (m *ListMemberAssignmentsResponse) GetCurrentOffset() int32 {
	if m != nil {
		return m.CurrentOffset
	}
	return int32(0)
}

func (m *ListMemberAssignmentsResponse) GetTotalResultsCount() int32 {
	if m != nil {
		return m.TotalResultsCount
	}
	return int32(0)
}

func (m *ListMemberAssignmentsResponse) SetMemberAssignments(fv []*member_assignment.MemberAssignment) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MemberAssignments", "ListMemberAssignmentsResponse"))
	}
	m.MemberAssignments = fv
}

func (m *ListMemberAssignmentsResponse) SetPrevPageToken(fv *member_assignment.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PrevPageToken", "ListMemberAssignmentsResponse"))
	}
	m.PrevPageToken = fv
}

func (m *ListMemberAssignmentsResponse) SetNextPageToken(fv *member_assignment.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NextPageToken", "ListMemberAssignmentsResponse"))
	}
	m.NextPageToken = fv
}

func (m *ListMemberAssignmentsResponse) SetCurrentOffset(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CurrentOffset", "ListMemberAssignmentsResponse"))
	}
	m.CurrentOffset = fv
}

func (m *ListMemberAssignmentsResponse) SetTotalResultsCount(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TotalResultsCount", "ListMemberAssignmentsResponse"))
	}
	m.TotalResultsCount = fv
}

// Request message for method
// [WatchMemberAssignment][ntt.iam.v1.WatchMemberAssignment]
type WatchMemberAssignmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of ntt.iam.v1.MemberAssignment
	Name *member_assignment.Name `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty" firestore:"name"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *member_assignment.MemberAssignment_FieldMask `protobuf:"bytes,2,opt,customtype=MemberAssignment_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,4,opt,name=view,proto3,enum=goten.types.View" json:"view,omitempty" firestore:"view"`
}

func (m *WatchMemberAssignmentRequest) Reset() {
	*m = WatchMemberAssignmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_iam_proto_v1_member_assignment_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchMemberAssignmentRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchMemberAssignmentRequest) ProtoMessage() {}

func (m *WatchMemberAssignmentRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_iam_proto_v1_member_assignment_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchMemberAssignmentRequest) GotenMessage() {}

// Deprecated, Use WatchMemberAssignmentRequest.ProtoReflect.Descriptor instead.
func (*WatchMemberAssignmentRequest) Descriptor() ([]byte, []int) {
	return edgelq_iam_proto_v1_member_assignment_service_proto_rawDescGZIP(), []int{5}
}

func (m *WatchMemberAssignmentRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchMemberAssignmentRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchMemberAssignmentRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchMemberAssignmentRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchMemberAssignmentRequest) GetName() *member_assignment.Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *WatchMemberAssignmentRequest) GetFieldMask() *member_assignment.MemberAssignment_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *WatchMemberAssignmentRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *WatchMemberAssignmentRequest) SetName(fv *member_assignment.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "WatchMemberAssignmentRequest"))
	}
	m.Name = fv
}

func (m *WatchMemberAssignmentRequest) SetFieldMask(fv *member_assignment.MemberAssignment_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "WatchMemberAssignmentRequest"))
	}
	m.FieldMask = fv
}

func (m *WatchMemberAssignmentRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "WatchMemberAssignmentRequest"))
	}
	m.View = fv
}

// WatchMemberAssignmentResponse
type WatchMemberAssignmentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Change        *member_assignment.MemberAssignmentChange `protobuf:"bytes,1,opt,name=change,proto3" json:"change,omitempty" firestore:"change"`
}

func (m *WatchMemberAssignmentResponse) Reset() {
	*m = WatchMemberAssignmentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_iam_proto_v1_member_assignment_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchMemberAssignmentResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchMemberAssignmentResponse) ProtoMessage() {}

func (m *WatchMemberAssignmentResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_iam_proto_v1_member_assignment_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchMemberAssignmentResponse) GotenMessage() {}

// Deprecated, Use WatchMemberAssignmentResponse.ProtoReflect.Descriptor instead.
func (*WatchMemberAssignmentResponse) Descriptor() ([]byte, []int) {
	return edgelq_iam_proto_v1_member_assignment_service_proto_rawDescGZIP(), []int{6}
}

func (m *WatchMemberAssignmentResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchMemberAssignmentResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchMemberAssignmentResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchMemberAssignmentResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchMemberAssignmentResponse) GetChange() *member_assignment.MemberAssignmentChange {
	if m != nil {
		return m.Change
	}
	return nil
}

func (m *WatchMemberAssignmentResponse) SetChange(fv *member_assignment.MemberAssignmentChange) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Change", "WatchMemberAssignmentResponse"))
	}
	m.Change = fv
}

// Request message for method
// [WatchMemberAssignments][ntt.iam.v1.WatchMemberAssignments]
type WatchMemberAssignmentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Type of a watch. Identifies how server stream data to a client, which
	// fields in a request are allowed and which fields in response are relevant.
	Type watch_type.WatchType `protobuf:"varint,9,opt,name=type,proto3,enum=goten.types.WatchType" json:"type,omitempty" firestore:"type"`
	// Parent name of ntt.iam.v1.MemberAssignment
	Parent *member_assignment.ParentName `protobuf:"bytes,1,opt,customtype=ParentName,name=parent,proto3" json:"parent,omitempty" firestore:"parent"`
	// Requested page size. Server may return fewer MemberAssignments than
	// requested. If unspecified, server will pick an appropriate default. Can be
	// populated only for stateful watch type.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty" firestore:"pageSize"`
	// A token identifying a page of results the server should return.
	// Can be populated only for stateful watch type.
	PageToken *member_assignment.PagerCursor `protobuf:"bytes,3,opt,customtype=PagerCursor,name=page_token,json=pageToken,proto3" json:"page_token,omitempty" firestore:"pageToken"`
	// Order By -
	// https://cloud.google.com/apis/design/design_patterns#list_pagination Can be
	// populated only for stateful watch type.
	OrderBy *member_assignment.OrderBy `protobuf:"bytes,4,opt,customtype=OrderBy,name=order_by,json=orderBy,proto3" json:"order_by,omitempty" firestore:"orderBy"`
	// A token identifying watch resume point from previous session.
	// Can be populated only for stateless watch type.
	ResumeToken string `protobuf:"bytes,10,opt,name=resume_token,json=resumeToken,proto3" json:"resume_token,omitempty" firestore:"resumeToken"`
	// Point in the time from which we want to start getting updates. This field
	// can be populated only for stateless watch type and if resume token is not
	// known yet. If specified, initial snapshot will NOT be provided. It is
	// assumed client can obtain it using separate means. Watch responses will
	// contain resume tokens which should be used to resume broken connection.
	StartingTime *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=starting_time,json=startingTime,proto3" json:"starting_time,omitempty" firestore:"startingTime"`
	// Filter - filter results by field criteria. Simplified SQL-like syntax with
	// following operators:
	// <=, >=, =, !=, <, >, LIKE, CONTAINS (aliases CONTAIN, HAS, HAVE), IN, IS
	// [NOT] NULL | NaN . Combine conditions with OR | AND example: 'meta.labels
	// CONTAINS "severity:important" OR (state.last_error_time >
	// "2018-11-15T10:00:00Z" AND state.status = "ERROR")'
	Filter *member_assignment.Filter `protobuf:"bytes,5,opt,customtype=Filter,name=filter,proto3" json:"filter,omitempty" firestore:"filter"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view Changes to MemberAssignment that don't
	// affect any of masked fields won't be sent back.
	FieldMask *member_assignment.MemberAssignment_FieldMask `protobuf:"bytes,6,opt,customtype=MemberAssignment_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask Changes to
	// MemberAssignment that don't affect any of masked fields won't be sent back.
	View view.View `protobuf:"varint,8,opt,name=view,proto3,enum=goten.types.View" json:"view,omitempty" firestore:"view"`
	// Maximum amount of changes in each response message. Query result response
	// is divided on the server side into chunks with size of a specified amount
	// to limit memory footprint of each message. Responses will hold information
	// whether more elements will continue for the actual change. If unspecified,
	// server will pick an appropriate default.
	MaxChunkSize int32 `protobuf:"varint,11,opt,name=max_chunk_size,json=maxChunkSize,proto3" json:"max_chunk_size,omitempty" firestore:"maxChunkSize"`
}

func (m *WatchMemberAssignmentsRequest) Reset() {
	*m = WatchMemberAssignmentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_iam_proto_v1_member_assignment_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchMemberAssignmentsRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchMemberAssignmentsRequest) ProtoMessage() {}

func (m *WatchMemberAssignmentsRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_iam_proto_v1_member_assignment_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchMemberAssignmentsRequest) GotenMessage() {}

// Deprecated, Use WatchMemberAssignmentsRequest.ProtoReflect.Descriptor instead.
func (*WatchMemberAssignmentsRequest) Descriptor() ([]byte, []int) {
	return edgelq_iam_proto_v1_member_assignment_service_proto_rawDescGZIP(), []int{7}
}

func (m *WatchMemberAssignmentsRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchMemberAssignmentsRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchMemberAssignmentsRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchMemberAssignmentsRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchMemberAssignmentsRequest) GetType() watch_type.WatchType {
	if m != nil {
		return m.Type
	}
	return watch_type.WatchType_STATEFUL
}

func (m *WatchMemberAssignmentsRequest) GetParent() *member_assignment.ParentName {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *WatchMemberAssignmentsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return int32(0)
}

func (m *WatchMemberAssignmentsRequest) GetPageToken() *member_assignment.PagerCursor {
	if m != nil {
		return m.PageToken
	}
	return nil
}

func (m *WatchMemberAssignmentsRequest) GetOrderBy() *member_assignment.OrderBy {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

func (m *WatchMemberAssignmentsRequest) GetResumeToken() string {
	if m != nil {
		return m.ResumeToken
	}
	return ""
}

func (m *WatchMemberAssignmentsRequest) GetStartingTime() *timestamppb.Timestamp {
	if m != nil {
		return m.StartingTime
	}
	return nil
}

func (m *WatchMemberAssignmentsRequest) GetFilter() *member_assignment.Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *WatchMemberAssignmentsRequest) GetFieldMask() *member_assignment.MemberAssignment_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *WatchMemberAssignmentsRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *WatchMemberAssignmentsRequest) GetMaxChunkSize() int32 {
	if m != nil {
		return m.MaxChunkSize
	}
	return int32(0)
}

func (m *WatchMemberAssignmentsRequest) SetType(fv watch_type.WatchType) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Type", "WatchMemberAssignmentsRequest"))
	}
	m.Type = fv
}

func (m *WatchMemberAssignmentsRequest) SetParent(fv *member_assignment.ParentName) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Parent", "WatchMemberAssignmentsRequest"))
	}
	m.Parent = fv
}

func (m *WatchMemberAssignmentsRequest) SetPageSize(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageSize", "WatchMemberAssignmentsRequest"))
	}
	m.PageSize = fv
}

func (m *WatchMemberAssignmentsRequest) SetPageToken(fv *member_assignment.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageToken", "WatchMemberAssignmentsRequest"))
	}
	m.PageToken = fv
}

func (m *WatchMemberAssignmentsRequest) SetOrderBy(fv *member_assignment.OrderBy) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OrderBy", "WatchMemberAssignmentsRequest"))
	}
	m.OrderBy = fv
}

func (m *WatchMemberAssignmentsRequest) SetResumeToken(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResumeToken", "WatchMemberAssignmentsRequest"))
	}
	m.ResumeToken = fv
}

func (m *WatchMemberAssignmentsRequest) SetStartingTime(fv *timestamppb.Timestamp) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "StartingTime", "WatchMemberAssignmentsRequest"))
	}
	m.StartingTime = fv
}

func (m *WatchMemberAssignmentsRequest) SetFilter(fv *member_assignment.Filter) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Filter", "WatchMemberAssignmentsRequest"))
	}
	m.Filter = fv
}

func (m *WatchMemberAssignmentsRequest) SetFieldMask(fv *member_assignment.MemberAssignment_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "WatchMemberAssignmentsRequest"))
	}
	m.FieldMask = fv
}

func (m *WatchMemberAssignmentsRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "WatchMemberAssignmentsRequest"))
	}
	m.View = fv
}

func (m *WatchMemberAssignmentsRequest) SetMaxChunkSize(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MaxChunkSize", "WatchMemberAssignmentsRequest"))
	}
	m.MaxChunkSize = fv
}

// WatchMemberAssignmentsResponse
type WatchMemberAssignmentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Changes of MemberAssignments
	MemberAssignmentChanges []*member_assignment.MemberAssignmentChange `protobuf:"bytes,2,rep,name=member_assignment_changes,json=memberAssignmentChanges,proto3" json:"member_assignment_changes,omitempty" firestore:"memberAssignmentChanges"`
	// If request specified max_chunk_size (or this limit was enforced if
	// stateless watch has been chosen), then responses with "full changeset" will
	// be divided into chunks. Client should keep receiving messages and, once
	// is_current has value true, combine this recent message with all previous
	// ones where is_current is false. If this is the first is_current in a whole
	// watch stream, then it means that client should have, at this moment,
	// contain snapshot of the current situation (or more accurately, snapshot of
	// situation at the moment of request). All MemberAssignments will be of type
	// Added/Current (depending on watch_type specified in the request). Further
	// responses will be incremental - however messages may still be chunked and
	// is_current logic still applies. is_current is always true for stateful
	// watch if max_chunk_size was left to 0.
	IsCurrent bool `protobuf:"varint,4,opt,name=is_current,json=isCurrent,proto3" json:"is_current,omitempty" firestore:"isCurrent"`
	// When present, PageTokens used for page navigation should be updated.
	// Present only if is_current is true (last chunk).
	PageTokenChange *WatchMemberAssignmentsResponse_PageTokenChange `protobuf:"bytes,3,opt,name=page_token_change,json=pageTokenChange,proto3" json:"page_token_change,omitempty" firestore:"pageTokenChange"`
	// Token that can be used if current connection drops and client needs to
	// reconnect. Populated only for stateless watch type. Present only if
	// is_current is true (last chunk).
	ResumeToken string `protobuf:"bytes,5,opt,name=resume_token,json=resumeToken,proto3" json:"resume_token,omitempty" firestore:"resumeToken"`
	// Server may occasionally send information how many resources should client
	// have in its state so far (response message without any changes, but with
	// snapshot_size field specified). If client has different value than the one
	// sent by the server, then it should be treated by a client as an error and
	// should reconnect. If value is smaller then 0, then client should ignore
	// this field as unpopulated. This field should be checked only for stateless
	// watch. In stateful those kind of errors are handled by the server side.
	// Will be never sent together with is_current, is_soft_reset and
	// is_hard_reset flags.
	SnapshotSize int64 `protobuf:"varint,6,opt,name=snapshot_size,json=snapshotSize,proto3" json:"snapshot_size,omitempty" firestore:"snapshotSize"`
	// In case of internal issue server may send response message with this flag.
	// It indicates that client should drop all changes from recent responses
	// where is_current is false only! If last message had is_current set to true,
	// client should do nothing and process normally. Resume token received before
	// is still valid. This field should be checked only for stateless watch. In
	// stateful those kind of errors are handled by the server side. Will never be
	// sent along with is_current, is_hard_reset or snapshot_size.
	IsSoftReset bool `protobuf:"varint,7,opt,name=is_soft_reset,json=isSoftReset,proto3" json:"is_soft_reset,omitempty" firestore:"isSoftReset"`
	// In case of internal issue server may send response message with this flag.
	// After receiving, client should clear whole state (drop all changes received
	// so far) as server will send new snapshot (MemberAssignments will contains
	// changes of type Current only). Any resume tokens should be discarded as
	// well. This field should be checked only for stateless watch. In stateful
	// those kind of errors are handled by the server side. Will never be sent
	// along with is_current, is_soft_reset or snapshot_size.
	IsHardReset bool `protobuf:"varint,8,opt,name=is_hard_reset,json=isHardReset,proto3" json:"is_hard_reset,omitempty" firestore:"isHardReset"`
}

func (m *WatchMemberAssignmentsResponse) Reset() {
	*m = WatchMemberAssignmentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_iam_proto_v1_member_assignment_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchMemberAssignmentsResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchMemberAssignmentsResponse) ProtoMessage() {}

func (m *WatchMemberAssignmentsResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_iam_proto_v1_member_assignment_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchMemberAssignmentsResponse) GotenMessage() {}

// Deprecated, Use WatchMemberAssignmentsResponse.ProtoReflect.Descriptor instead.
func (*WatchMemberAssignmentsResponse) Descriptor() ([]byte, []int) {
	return edgelq_iam_proto_v1_member_assignment_service_proto_rawDescGZIP(), []int{8}
}

func (m *WatchMemberAssignmentsResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchMemberAssignmentsResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchMemberAssignmentsResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchMemberAssignmentsResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchMemberAssignmentsResponse) GetMemberAssignmentChanges() []*member_assignment.MemberAssignmentChange {
	if m != nil {
		return m.MemberAssignmentChanges
	}
	return nil
}

func (m *WatchMemberAssignmentsResponse) GetIsCurrent() bool {
	if m != nil {
		return m.IsCurrent
	}
	return false
}

func (m *WatchMemberAssignmentsResponse) GetPageTokenChange() *WatchMemberAssignmentsResponse_PageTokenChange {
	if m != nil {
		return m.PageTokenChange
	}
	return nil
}

func (m *WatchMemberAssignmentsResponse) GetResumeToken() string {
	if m != nil {
		return m.ResumeToken
	}
	return ""
}

func (m *WatchMemberAssignmentsResponse) GetSnapshotSize() int64 {
	if m != nil {
		return m.SnapshotSize
	}
	return int64(0)
}

func (m *WatchMemberAssignmentsResponse) GetIsSoftReset() bool {
	if m != nil {
		return m.IsSoftReset
	}
	return false
}

func (m *WatchMemberAssignmentsResponse) GetIsHardReset() bool {
	if m != nil {
		return m.IsHardReset
	}
	return false
}

func (m *WatchMemberAssignmentsResponse) SetMemberAssignmentChanges(fv []*member_assignment.MemberAssignmentChange) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MemberAssignmentChanges", "WatchMemberAssignmentsResponse"))
	}
	m.MemberAssignmentChanges = fv
}

func (m *WatchMemberAssignmentsResponse) SetIsCurrent(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IsCurrent", "WatchMemberAssignmentsResponse"))
	}
	m.IsCurrent = fv
}

func (m *WatchMemberAssignmentsResponse) SetPageTokenChange(fv *WatchMemberAssignmentsResponse_PageTokenChange) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageTokenChange", "WatchMemberAssignmentsResponse"))
	}
	m.PageTokenChange = fv
}

func (m *WatchMemberAssignmentsResponse) SetResumeToken(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResumeToken", "WatchMemberAssignmentsResponse"))
	}
	m.ResumeToken = fv
}

func (m *WatchMemberAssignmentsResponse) SetSnapshotSize(fv int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SnapshotSize", "WatchMemberAssignmentsResponse"))
	}
	m.SnapshotSize = fv
}

func (m *WatchMemberAssignmentsResponse) SetIsSoftReset(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IsSoftReset", "WatchMemberAssignmentsResponse"))
	}
	m.IsSoftReset = fv
}

func (m *WatchMemberAssignmentsResponse) SetIsHardReset(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IsHardReset", "WatchMemberAssignmentsResponse"))
	}
	m.IsHardReset = fv
}

// Request message for method
// [UpdateMemberAssignment][ntt.iam.v1.UpdateMemberAssignment]
type UpdateMemberAssignmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// MemberAssignment resource body
	MemberAssignment *member_assignment.MemberAssignment `protobuf:"bytes,2,opt,name=member_assignment,json=memberAssignment,proto3" json:"member_assignment,omitempty" firestore:"memberAssignment"`
	// FieldMask applied to request - change will be applied only for fields in
	// the mask
	UpdateMask *member_assignment.MemberAssignment_FieldMask `protobuf:"bytes,3,opt,customtype=MemberAssignment_FieldMask,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty" firestore:"updateMask"`
	// Conditional update applied to request if update should be executed only for
	// specific resource state. If this field is populated, then server will fetch
	// existing resource, compare with the one stored in the cas field (after
	// applying field mask) and proceed with update only and only if they match.
	// Otherwise RPC error Aborted will be returned.
	Cas *UpdateMemberAssignmentRequest_CAS `protobuf:"bytes,4,opt,name=cas,proto3" json:"cas,omitempty" firestore:"cas"`
}

func (m *UpdateMemberAssignmentRequest) Reset() {
	*m = UpdateMemberAssignmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_iam_proto_v1_member_assignment_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *UpdateMemberAssignmentRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*UpdateMemberAssignmentRequest) ProtoMessage() {}

func (m *UpdateMemberAssignmentRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_iam_proto_v1_member_assignment_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*UpdateMemberAssignmentRequest) GotenMessage() {}

// Deprecated, Use UpdateMemberAssignmentRequest.ProtoReflect.Descriptor instead.
func (*UpdateMemberAssignmentRequest) Descriptor() ([]byte, []int) {
	return edgelq_iam_proto_v1_member_assignment_service_proto_rawDescGZIP(), []int{9}
}

func (m *UpdateMemberAssignmentRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *UpdateMemberAssignmentRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *UpdateMemberAssignmentRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *UpdateMemberAssignmentRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *UpdateMemberAssignmentRequest) GetMemberAssignment() *member_assignment.MemberAssignment {
	if m != nil {
		return m.MemberAssignment
	}
	return nil
}

func (m *UpdateMemberAssignmentRequest) GetUpdateMask() *member_assignment.MemberAssignment_FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

func (m *UpdateMemberAssignmentRequest) GetCas() *UpdateMemberAssignmentRequest_CAS {
	if m != nil {
		return m.Cas
	}
	return nil
}

func (m *UpdateMemberAssignmentRequest) SetMemberAssignment(fv *member_assignment.MemberAssignment) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MemberAssignment", "UpdateMemberAssignmentRequest"))
	}
	m.MemberAssignment = fv
}

func (m *UpdateMemberAssignmentRequest) SetUpdateMask(fv *member_assignment.MemberAssignment_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "UpdateMask", "UpdateMemberAssignmentRequest"))
	}
	m.UpdateMask = fv
}

func (m *UpdateMemberAssignmentRequest) SetCas(fv *UpdateMemberAssignmentRequest_CAS) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Cas", "UpdateMemberAssignmentRequest"))
	}
	m.Cas = fv
}

// Request message for method
// [DeleteMemberAssignment][ntt.iam.v1.DeleteMemberAssignment]
type DeleteMemberAssignmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of ntt.iam.v1.MemberAssignment
	Name *member_assignment.Name `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty" firestore:"name"`
}

func (m *DeleteMemberAssignmentRequest) Reset() {
	*m = DeleteMemberAssignmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_iam_proto_v1_member_assignment_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *DeleteMemberAssignmentRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*DeleteMemberAssignmentRequest) ProtoMessage() {}

func (m *DeleteMemberAssignmentRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_iam_proto_v1_member_assignment_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*DeleteMemberAssignmentRequest) GotenMessage() {}

// Deprecated, Use DeleteMemberAssignmentRequest.ProtoReflect.Descriptor instead.
func (*DeleteMemberAssignmentRequest) Descriptor() ([]byte, []int) {
	return edgelq_iam_proto_v1_member_assignment_service_proto_rawDescGZIP(), []int{10}
}

func (m *DeleteMemberAssignmentRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *DeleteMemberAssignmentRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *DeleteMemberAssignmentRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *DeleteMemberAssignmentRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *DeleteMemberAssignmentRequest) GetName() *member_assignment.Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *DeleteMemberAssignmentRequest) SetName(fv *member_assignment.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "DeleteMemberAssignmentRequest"))
	}
	m.Name = fv
}

type WatchMemberAssignmentsResponse_PageTokenChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// New token to retrieve previous page of results.
	PrevPageToken *member_assignment.PagerCursor `protobuf:"bytes,1,opt,customtype=PagerCursor,name=prev_page_token,json=prevPageToken,proto3" json:"prev_page_token,omitempty" firestore:"prevPageToken"`
	// New token to retrieve next page of results.
	NextPageToken *member_assignment.PagerCursor `protobuf:"bytes,2,opt,customtype=PagerCursor,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty" firestore:"nextPageToken"`
}

func (m *WatchMemberAssignmentsResponse_PageTokenChange) Reset() {
	*m = WatchMemberAssignmentsResponse_PageTokenChange{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_iam_proto_v1_member_assignment_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchMemberAssignmentsResponse_PageTokenChange) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchMemberAssignmentsResponse_PageTokenChange) ProtoMessage() {}

func (m *WatchMemberAssignmentsResponse_PageTokenChange) ProtoReflect() preflect.Message {
	mi := &edgelq_iam_proto_v1_member_assignment_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchMemberAssignmentsResponse_PageTokenChange) GotenMessage() {}

// Deprecated, Use WatchMemberAssignmentsResponse_PageTokenChange.ProtoReflect.Descriptor instead.
func (*WatchMemberAssignmentsResponse_PageTokenChange) Descriptor() ([]byte, []int) {
	return edgelq_iam_proto_v1_member_assignment_service_proto_rawDescGZIP(), []int{8, 0}
}

func (m *WatchMemberAssignmentsResponse_PageTokenChange) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchMemberAssignmentsResponse_PageTokenChange) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchMemberAssignmentsResponse_PageTokenChange) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchMemberAssignmentsResponse_PageTokenChange) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchMemberAssignmentsResponse_PageTokenChange) GetPrevPageToken() *member_assignment.PagerCursor {
	if m != nil {
		return m.PrevPageToken
	}
	return nil
}

func (m *WatchMemberAssignmentsResponse_PageTokenChange) GetNextPageToken() *member_assignment.PagerCursor {
	if m != nil {
		return m.NextPageToken
	}
	return nil
}

func (m *WatchMemberAssignmentsResponse_PageTokenChange) SetPrevPageToken(fv *member_assignment.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PrevPageToken", "WatchMemberAssignmentsResponse_PageTokenChange"))
	}
	m.PrevPageToken = fv
}

func (m *WatchMemberAssignmentsResponse_PageTokenChange) SetNextPageToken(fv *member_assignment.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NextPageToken", "WatchMemberAssignmentsResponse_PageTokenChange"))
	}
	m.NextPageToken = fv
}

// CAS - Compare and Swap. This object is used if user wants to make update
// conditional based upon previous resource version.
type UpdateMemberAssignmentRequest_CAS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Conditional desired state of a resource before update.
	ConditionalState *member_assignment.MemberAssignment `protobuf:"bytes,1,opt,name=conditional_state,json=conditionalState,proto3" json:"conditional_state,omitempty" firestore:"conditionalState"`
	// Field paths from conditional state of resource server should check and
	// compare.
	FieldMask *member_assignment.MemberAssignment_FieldMask `protobuf:"bytes,2,opt,customtype=MemberAssignment_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
}

func (m *UpdateMemberAssignmentRequest_CAS) Reset() {
	*m = UpdateMemberAssignmentRequest_CAS{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_iam_proto_v1_member_assignment_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *UpdateMemberAssignmentRequest_CAS) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*UpdateMemberAssignmentRequest_CAS) ProtoMessage() {}

func (m *UpdateMemberAssignmentRequest_CAS) ProtoReflect() preflect.Message {
	mi := &edgelq_iam_proto_v1_member_assignment_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*UpdateMemberAssignmentRequest_CAS) GotenMessage() {}

// Deprecated, Use UpdateMemberAssignmentRequest_CAS.ProtoReflect.Descriptor instead.
func (*UpdateMemberAssignmentRequest_CAS) Descriptor() ([]byte, []int) {
	return edgelq_iam_proto_v1_member_assignment_service_proto_rawDescGZIP(), []int{9, 0}
}

func (m *UpdateMemberAssignmentRequest_CAS) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *UpdateMemberAssignmentRequest_CAS) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *UpdateMemberAssignmentRequest_CAS) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *UpdateMemberAssignmentRequest_CAS) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *UpdateMemberAssignmentRequest_CAS) GetConditionalState() *member_assignment.MemberAssignment {
	if m != nil {
		return m.ConditionalState
	}
	return nil
}

func (m *UpdateMemberAssignmentRequest_CAS) GetFieldMask() *member_assignment.MemberAssignment_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *UpdateMemberAssignmentRequest_CAS) SetConditionalState(fv *member_assignment.MemberAssignment) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ConditionalState", "UpdateMemberAssignmentRequest_CAS"))
	}
	m.ConditionalState = fv
}

func (m *UpdateMemberAssignmentRequest_CAS) SetFieldMask(fv *member_assignment.MemberAssignment_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "UpdateMemberAssignmentRequest_CAS"))
	}
	m.FieldMask = fv
}

var edgelq_iam_proto_v1_member_assignment_service_proto preflect.FileDescriptor

var edgelq_iam_proto_v1_member_assignment_service_proto_rawDesc = []byte{
	0x0a, 0x33, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x61, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x6e, 0x74, 0x74, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76,
	0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65,
	0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f,
	0x74, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x74, 0x65, 0x6e,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6c, 0x69,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16,
	0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x69, 0x65, 0x77,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x69, 0x61, 0x6d,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x32, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x61, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc6, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x18, 0xb2, 0xda, 0x21, 0x14, 0x0a, 0x12, 0x0a, 0x10, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x53, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61,
	0x73, 0x6b, 0x42, 0x18, 0xb2, 0xda, 0x21, 0x14, 0x32, 0x12, 0x0a, 0x10, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x25, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x22, 0xd4,
	0x01, 0x0a, 0x20, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x18, 0xb2, 0xda, 0x21, 0x14, 0x0a, 0x12, 0x0a, 0x10, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x12, 0x53, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73,
	0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d,
	0x61, 0x73, 0x6b, 0x42, 0x18, 0xb2, 0xda, 0x21, 0x14, 0x32, 0x12, 0x0a, 0x10, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x25, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x4a,
	0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0xa4, 0x01, 0x0a, 0x21, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47,
	0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x12, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x69, 0x61,
	0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x11, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x07, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x18, 0xb2, 0xda, 0x21, 0x14, 0x0a,
	0x12, 0x0a, 0x10, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x07, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x22, 0xc3, 0x03, 0x0a,
	0x1c, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xb2,
	0xda, 0x21, 0x14, 0x3a, 0x12, 0x0a, 0x10, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12,
	0x25, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x08, 0xca, 0xc6, 0x27, 0x04, 0x12, 0x02, 0x2a, 0x00, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xb2, 0xda, 0x21, 0x14,
	0x22, 0x12, 0x0a, 0x10, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x33, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x18, 0xb2, 0xda, 0x21, 0x14, 0x2a, 0x12, 0x0a, 0x10, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x42, 0x79, 0x12, 0x30, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xb2, 0xda, 0x21, 0x14, 0x1a, 0x12, 0x0a, 0x10, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x53, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x6d, 0x61, 0x73, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x18, 0xb2, 0xda, 0x21, 0x14, 0x32, 0x12, 0x0a, 0x10,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x25, 0x0a, 0x04, 0x76,
	0x69, 0x65, 0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x74, 0x65,
	0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69,
	0x65, 0x77, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x11, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0xc7, 0x02, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x12, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x61,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x11,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x40, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xb2, 0xda, 0x21, 0x14,
	0x22, 0x12, 0x0a, 0x10, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x40, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xb2, 0xda,
	0x21, 0x14, 0x22, 0x12, 0x0a, 0x10, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x2e, 0x0a, 0x13,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xc8, 0x01, 0x0a,
	0x1c, 0x57, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xb2, 0xda, 0x21,
	0x14, 0x0a, 0x12, 0x0a, 0x10, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x53, 0x0a, 0x0a, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x18, 0xb2, 0xda, 0x21,
	0x14, 0x32, 0x12, 0x0a, 0x10, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b,
	0x12, 0x25, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11,
	0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x56, 0x69, 0x65,
	0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x22, 0x5b, 0x0a, 0x1d, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x69,
	0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x06, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x22, 0xd8, 0x04, 0x0a, 0x1d, 0x57, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x18, 0xb2, 0xda, 0x21, 0x14, 0x3a, 0x12, 0x0a, 0x10, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0xca, 0xc6, 0x27, 0x04, 0x12, 0x02, 0x2a,
	0x00, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x18, 0xb2, 0xda, 0x21, 0x14, 0x22, 0x12, 0x0a, 0x10, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x33, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xb2, 0xda, 0x21, 0x14, 0x2a, 0x12, 0x0a, 0x10,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73,
	0x75, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x3f, 0x0a, 0x0d,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xb2,
	0xda, 0x21, 0x14, 0x1a, 0x12, 0x0a, 0x10, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x53, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42,
	0x18, 0xb2, 0xda, 0x21, 0x14, 0x32, 0x12, 0x0a, 0x10, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x4d, 0x61, 0x73, 0x6b, 0x12, 0x25, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x12, 0x32, 0x0a, 0x0e, 0x6d,
	0x61, 0x78, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x0c, 0xca, 0xc6, 0x27, 0x08, 0x12, 0x06, 0x1a, 0x02, 0x08, 0x64, 0x2a,
	0x00, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x22,
	0xaf, 0x04, 0x0a, 0x1e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x5e, 0x0a, 0x19, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x61, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x69, 0x61, 0x6d, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x17, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x12, 0x66, 0x0a, 0x11, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0f, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73,
	0x75, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x73, 0x6f, 0x66, 0x74, 0x5f, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x53, 0x6f, 0x66, 0x74,
	0x52, 0x65, 0x73, 0x65, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x68, 0x61, 0x72, 0x64,
	0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73,
	0x48, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x1a, 0x95, 0x01, 0x0a, 0x0f, 0x50, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x40, 0x0a,
	0x0f, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xb2, 0xda, 0x21, 0x14, 0x22, 0x12, 0x0a, 0x10,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x40, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xb2, 0xda, 0x21, 0x14, 0x22, 0x12,
	0x0a, 0x10, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0xb8, 0x03, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x57, 0x0a, 0x11, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x61, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0c, 0xc8, 0xd5,
	0x22, 0x01, 0xca, 0xc6, 0x27, 0x04, 0x62, 0x02, 0x08, 0x01, 0x52, 0x10, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x55, 0x0a, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x18, 0xb2,
	0xda, 0x21, 0x14, 0x32, 0x12, 0x0a, 0x10, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d,
	0x61, 0x73, 0x6b, 0x12, 0x3f, 0x0a, 0x03, 0x63, 0x61, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x41, 0x53, 0x52,
	0x03, 0x63, 0x61, 0x73, 0x1a, 0xa5, 0x01, 0x0a, 0x03, 0x43, 0x41, 0x53, 0x12, 0x49, 0x0a, 0x11,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x69, 0x61,
	0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x53, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x18, 0xb2, 0xda, 0x21, 0x14, 0x32, 0x12, 0x0a,
	0x10, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x4d, 0x0a, 0x1d,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xb2, 0xda, 0x21,
	0x14, 0x0a, 0x12, 0x0a, 0x10, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x8a, 0x0d, 0x0a, 0x17,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xc2, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x26, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x69, 0x61,
	0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x65, 0x82, 0xdb, 0x21, 0x27, 0x0a, 0x10, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x03, 0x67,
	0x65, 0x74, 0x2a, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x06, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0xa2, 0xdc, 0x21, 0x02, 0x08, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x12, 0x28,
	0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x2a, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x8a, 0xcc, 0x26, 0x00, 0x12, 0xeb, 0x01, 0x0a,
	0x19, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2c, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x69,
	0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x71, 0x82, 0xdb, 0x21, 0x3d, 0x0a, 0x10, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x20, 0x01, 0x2a, 0x07, 0x0a, 0x05, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x32, 0x14, 0x12, 0x12, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x61,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0xa2, 0xdc, 0x21, 0x02, 0x08, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x12, 0x1e, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x8a, 0xcc, 0x26, 0x00, 0x12, 0xe8, 0x01, 0x0a, 0x15, 0x4c,
	0x69, 0x73, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x28, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7a, 0x82, 0xdb, 0x21, 0x3c, 0x0a,
	0x10, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x2a, 0x08, 0x1a, 0x06, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x32, 0x14, 0x12, 0x12, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0xa2, 0xdc, 0x21, 0x02, 0x08,
	0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x12, 0x28, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x3d, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x2f,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x8a, 0xcc, 0x26, 0x00, 0x12, 0xdf, 0x01, 0x0a, 0x15, 0x57, 0x61, 0x74, 0x63, 0x68, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x28, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x74,
	0x63, 0x68, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6f, 0x82, 0xdb, 0x21, 0x2b, 0x0a, 0x10, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x05, 0x77, 0x61,
	0x74, 0x63, 0x68, 0x2a, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x08, 0x12, 0x06, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0xa2, 0xdc, 0x21, 0x02, 0x08, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x30, 0x22, 0x2e, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x77, 0x61, 0x74, 0x63,
	0x68, 0x8a, 0xcc, 0x26, 0x00, 0x30, 0x01, 0x12, 0xfc, 0x01, 0x0a, 0x16, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x29, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e,
	0x57, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x88, 0x01, 0x82, 0xdb, 0x21, 0x44,
	0x0a, 0x10, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x05, 0x77, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x2a, 0x08, 0x1a,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x32, 0x1b, 0x12, 0x19, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0xa2, 0xdc, 0x21, 0x02, 0x08, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30,
	0x22, 0x2e, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x8a, 0xcc, 0x26, 0x00, 0x30, 0x01, 0x12, 0x80, 0x02, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x29, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x9c, 0x01, 0x82, 0xdb, 0x21,
	0x37, 0x0a, 0x10, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2a, 0x13, 0x12, 0x11, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x32, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xa2, 0xdc, 0x21, 0x02, 0x10, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x4f, 0x3a, 0x11, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x61, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x3a, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x2f, 0x2a, 0x7d, 0x8a, 0xcc, 0x26, 0x02, 0x10, 0x01, 0x12, 0xbf, 0x01, 0x0a, 0x16, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x62, 0x82, 0xdb, 0x21, 0x22, 0x0a, 0x10, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2a, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xa2,
	0xdc, 0x21, 0x02, 0x10, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x2a, 0x28, 0x2f, 0x76, 0x31,
	0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a,
	0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x8a, 0xcc, 0x26, 0x02, 0x10, 0x01, 0x1a, 0x2b, 0xca, 0x41, 0x0e,
	0x69, 0x61, 0x6d, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2e, 0x63, 0x6f, 0x6d, 0xd2, 0x41,
	0x17, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x65, 0x64,
	0x67, 0x65, 0x6c, 0x71, 0x2e, 0x63, 0x6f, 0x6d, 0x42, 0xc2, 0x02, 0xe8, 0xde, 0x21, 0x00, 0x82,
	0xff, 0xd0, 0x02, 0x56, 0x0a, 0x18, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x61, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x3a,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x8a, 0xff, 0xd0, 0x02, 0x56, 0x0a,
	0x18, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65,
	0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x69,
	0x61, 0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x76, 0x31, 0x42, 0x1c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x00, 0x5a, 0x53, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64,
	0x67, 0x65, 0x6c, 0x71, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f,
	0x76, 0x31, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x3b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x61, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	edgelq_iam_proto_v1_member_assignment_service_proto_rawDescOnce sync.Once
	edgelq_iam_proto_v1_member_assignment_service_proto_rawDescData = edgelq_iam_proto_v1_member_assignment_service_proto_rawDesc
)

func edgelq_iam_proto_v1_member_assignment_service_proto_rawDescGZIP() []byte {
	edgelq_iam_proto_v1_member_assignment_service_proto_rawDescOnce.Do(func() {
		edgelq_iam_proto_v1_member_assignment_service_proto_rawDescData = protoimpl.X.CompressGZIP(edgelq_iam_proto_v1_member_assignment_service_proto_rawDescData)
	})
	return edgelq_iam_proto_v1_member_assignment_service_proto_rawDescData
}

var edgelq_iam_proto_v1_member_assignment_service_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var edgelq_iam_proto_v1_member_assignment_service_proto_goTypes = []interface{}{
	(*GetMemberAssignmentRequest)(nil),                     // 0: ntt.iam.v1.GetMemberAssignmentRequest
	(*BatchGetMemberAssignmentsRequest)(nil),               // 1: ntt.iam.v1.BatchGetMemberAssignmentsRequest
	(*BatchGetMemberAssignmentsResponse)(nil),              // 2: ntt.iam.v1.BatchGetMemberAssignmentsResponse
	(*ListMemberAssignmentsRequest)(nil),                   // 3: ntt.iam.v1.ListMemberAssignmentsRequest
	(*ListMemberAssignmentsResponse)(nil),                  // 4: ntt.iam.v1.ListMemberAssignmentsResponse
	(*WatchMemberAssignmentRequest)(nil),                   // 5: ntt.iam.v1.WatchMemberAssignmentRequest
	(*WatchMemberAssignmentResponse)(nil),                  // 6: ntt.iam.v1.WatchMemberAssignmentResponse
	(*WatchMemberAssignmentsRequest)(nil),                  // 7: ntt.iam.v1.WatchMemberAssignmentsRequest
	(*WatchMemberAssignmentsResponse)(nil),                 // 8: ntt.iam.v1.WatchMemberAssignmentsResponse
	(*UpdateMemberAssignmentRequest)(nil),                  // 9: ntt.iam.v1.UpdateMemberAssignmentRequest
	(*DeleteMemberAssignmentRequest)(nil),                  // 10: ntt.iam.v1.DeleteMemberAssignmentRequest
	(*WatchMemberAssignmentsResponse_PageTokenChange)(nil), // 11: ntt.iam.v1.WatchMemberAssignmentsResponse.PageTokenChange
	(*UpdateMemberAssignmentRequest_CAS)(nil),              // 12: ntt.iam.v1.UpdateMemberAssignmentRequest.CAS
	(*member_assignment.MemberAssignment_FieldMask)(nil),   // 13: ntt.iam.v1.MemberAssignment_FieldMask
	(view.View)(0), // 14: goten.types.View
	(*member_assignment.MemberAssignment)(nil),       // 15: ntt.iam.v1.MemberAssignment
	(*member_assignment.MemberAssignmentChange)(nil), // 16: ntt.iam.v1.MemberAssignmentChange
	(watch_type.WatchType)(0),                        // 17: goten.types.WatchType
	(*timestamppb.Timestamp)(nil),                    // 18: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),                            // 19: google.protobuf.Empty
}
var edgelq_iam_proto_v1_member_assignment_service_proto_depIdxs = []int32{
	13, // 0: ntt.iam.v1.GetMemberAssignmentRequest.field_mask:type_name -> ntt.iam.v1.MemberAssignment_FieldMask
	14, // 1: ntt.iam.v1.GetMemberAssignmentRequest.view:type_name -> goten.types.View
	13, // 2: ntt.iam.v1.BatchGetMemberAssignmentsRequest.field_mask:type_name -> ntt.iam.v1.MemberAssignment_FieldMask
	14, // 3: ntt.iam.v1.BatchGetMemberAssignmentsRequest.view:type_name -> goten.types.View
	15, // 4: ntt.iam.v1.BatchGetMemberAssignmentsResponse.member_assignments:type_name -> ntt.iam.v1.MemberAssignment
	13, // 5: ntt.iam.v1.ListMemberAssignmentsRequest.field_mask:type_name -> ntt.iam.v1.MemberAssignment_FieldMask
	14, // 6: ntt.iam.v1.ListMemberAssignmentsRequest.view:type_name -> goten.types.View
	15, // 7: ntt.iam.v1.ListMemberAssignmentsResponse.member_assignments:type_name -> ntt.iam.v1.MemberAssignment
	13, // 8: ntt.iam.v1.WatchMemberAssignmentRequest.field_mask:type_name -> ntt.iam.v1.MemberAssignment_FieldMask
	14, // 9: ntt.iam.v1.WatchMemberAssignmentRequest.view:type_name -> goten.types.View
	16, // 10: ntt.iam.v1.WatchMemberAssignmentResponse.change:type_name -> ntt.iam.v1.MemberAssignmentChange
	17, // 11: ntt.iam.v1.WatchMemberAssignmentsRequest.type:type_name -> goten.types.WatchType
	18, // 12: ntt.iam.v1.WatchMemberAssignmentsRequest.starting_time:type_name -> google.protobuf.Timestamp
	13, // 13: ntt.iam.v1.WatchMemberAssignmentsRequest.field_mask:type_name -> ntt.iam.v1.MemberAssignment_FieldMask
	14, // 14: ntt.iam.v1.WatchMemberAssignmentsRequest.view:type_name -> goten.types.View
	16, // 15: ntt.iam.v1.WatchMemberAssignmentsResponse.member_assignment_changes:type_name -> ntt.iam.v1.MemberAssignmentChange
	11, // 16: ntt.iam.v1.WatchMemberAssignmentsResponse.page_token_change:type_name -> ntt.iam.v1.WatchMemberAssignmentsResponse.PageTokenChange
	15, // 17: ntt.iam.v1.UpdateMemberAssignmentRequest.member_assignment:type_name -> ntt.iam.v1.MemberAssignment
	13, // 18: ntt.iam.v1.UpdateMemberAssignmentRequest.update_mask:type_name -> ntt.iam.v1.MemberAssignment_FieldMask
	12, // 19: ntt.iam.v1.UpdateMemberAssignmentRequest.cas:type_name -> ntt.iam.v1.UpdateMemberAssignmentRequest.CAS
	15, // 20: ntt.iam.v1.UpdateMemberAssignmentRequest.CAS.conditional_state:type_name -> ntt.iam.v1.MemberAssignment
	13, // 21: ntt.iam.v1.UpdateMemberAssignmentRequest.CAS.field_mask:type_name -> ntt.iam.v1.MemberAssignment_FieldMask
	0,  // 22: ntt.iam.v1.MemberAssignmentService.GetMemberAssignment:input_type -> ntt.iam.v1.GetMemberAssignmentRequest
	1,  // 23: ntt.iam.v1.MemberAssignmentService.BatchGetMemberAssignments:input_type -> ntt.iam.v1.BatchGetMemberAssignmentsRequest
	3,  // 24: ntt.iam.v1.MemberAssignmentService.ListMemberAssignments:input_type -> ntt.iam.v1.ListMemberAssignmentsRequest
	5,  // 25: ntt.iam.v1.MemberAssignmentService.WatchMemberAssignment:input_type -> ntt.iam.v1.WatchMemberAssignmentRequest
	7,  // 26: ntt.iam.v1.MemberAssignmentService.WatchMemberAssignments:input_type -> ntt.iam.v1.WatchMemberAssignmentsRequest
	9,  // 27: ntt.iam.v1.MemberAssignmentService.UpdateMemberAssignment:input_type -> ntt.iam.v1.UpdateMemberAssignmentRequest
	10, // 28: ntt.iam.v1.MemberAssignmentService.DeleteMemberAssignment:input_type -> ntt.iam.v1.DeleteMemberAssignmentRequest
	15, // 29: ntt.iam.v1.MemberAssignmentService.GetMemberAssignment:output_type -> ntt.iam.v1.MemberAssignment
	2,  // 30: ntt.iam.v1.MemberAssignmentService.BatchGetMemberAssignments:output_type -> ntt.iam.v1.BatchGetMemberAssignmentsResponse
	4,  // 31: ntt.iam.v1.MemberAssignmentService.ListMemberAssignments:output_type -> ntt.iam.v1.ListMemberAssignmentsResponse
	6,  // 32: ntt.iam.v1.MemberAssignmentService.WatchMemberAssignment:output_type -> ntt.iam.v1.WatchMemberAssignmentResponse
	8,  // 33: ntt.iam.v1.MemberAssignmentService.WatchMemberAssignments:output_type -> ntt.iam.v1.WatchMemberAssignmentsResponse
	15, // 34: ntt.iam.v1.MemberAssignmentService.UpdateMemberAssignment:output_type -> ntt.iam.v1.MemberAssignment
	19, // 35: ntt.iam.v1.MemberAssignmentService.DeleteMemberAssignment:output_type -> google.protobuf.Empty
	29, // [29:36] is the sub-list for method output_type
	22, // [22:29] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { edgelq_iam_proto_v1_member_assignment_service_proto_init() }
func edgelq_iam_proto_v1_member_assignment_service_proto_init() {
	if edgelq_iam_proto_v1_member_assignment_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		edgelq_iam_proto_v1_member_assignment_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMemberAssignmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_iam_proto_v1_member_assignment_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetMemberAssignmentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_iam_proto_v1_member_assignment_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetMemberAssignmentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_iam_proto_v1_member_assignment_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMemberAssignmentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_iam_proto_v1_member_assignment_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMemberAssignmentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_iam_proto_v1_member_assignment_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchMemberAssignmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_iam_proto_v1_member_assignment_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchMemberAssignmentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_iam_proto_v1_member_assignment_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchMemberAssignmentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_iam_proto_v1_member_assignment_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchMemberAssignmentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_iam_proto_v1_member_assignment_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMemberAssignmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_iam_proto_v1_member_assignment_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteMemberAssignmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_iam_proto_v1_member_assignment_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchMemberAssignmentsResponse_PageTokenChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_iam_proto_v1_member_assignment_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMemberAssignmentRequest_CAS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: edgelq_iam_proto_v1_member_assignment_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           edgelq_iam_proto_v1_member_assignment_service_proto_goTypes,
		DependencyIndexes: edgelq_iam_proto_v1_member_assignment_service_proto_depIdxs,
		MessageInfos:      edgelq_iam_proto_v1_member_assignment_service_proto_msgTypes,
	}.Build()
	edgelq_iam_proto_v1_member_assignment_service_proto = out.File
	edgelq_iam_proto_v1_member_assignment_service_proto_rawDesc = nil
	edgelq_iam_proto_v1_member_assignment_service_proto_goTypes = nil
	edgelq_iam_proto_v1_member_assignment_service_proto_depIdxs = nil
}
