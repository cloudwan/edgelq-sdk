// Code generated by protoc-gen-goten-client
// API: PermissionService
// DO NOT EDIT!!!

package permission_client

import (
	"context"

	"google.golang.org/grpc"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	permission "github.com/cloudwan/edgelq-sdk/iam/resources/v1/permission"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = protoimpl.DescBuilder{}
	_ = new(context.Context)
	_ = grpc.ClientConn{}
)

// make sure we're using proto imports
var (
	_ = &permission.Permission{}
	_ = &emptypb.Empty{}
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PermissionServiceClient is the client API for PermissionService.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PermissionServiceClient interface {
	GetPermission(ctx context.Context, in *GetPermissionRequest, opts ...grpc.CallOption) (*permission.Permission, error)
	BatchGetPermissions(ctx context.Context, in *BatchGetPermissionsRequest, opts ...grpc.CallOption) (*BatchGetPermissionsResponse, error)
	ListPermissions(ctx context.Context, in *ListPermissionsRequest, opts ...grpc.CallOption) (*ListPermissionsResponse, error)
	WatchPermission(ctx context.Context, in *WatchPermissionRequest, opts ...grpc.CallOption) (WatchPermissionClientStream, error)
	WatchPermissions(ctx context.Context, in *WatchPermissionsRequest, opts ...grpc.CallOption) (WatchPermissionsClientStream, error)
	CreatePermission(ctx context.Context, in *CreatePermissionRequest, opts ...grpc.CallOption) (*permission.Permission, error)
	UpdatePermission(ctx context.Context, in *UpdatePermissionRequest, opts ...grpc.CallOption) (*permission.Permission, error)
	DeletePermission(ctx context.Context, in *DeletePermissionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type client struct {
	cc grpc.ClientConnInterface
}

func NewPermissionServiceClient(cc grpc.ClientConnInterface) PermissionServiceClient {
	return &client{cc}
}

func (c *client) GetPermission(ctx context.Context, in *GetPermissionRequest, opts ...grpc.CallOption) (*permission.Permission, error) {
	out := new(permission.Permission)
	err := c.cc.Invoke(ctx, "/ntt.iam.v1.PermissionService/GetPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) BatchGetPermissions(ctx context.Context, in *BatchGetPermissionsRequest, opts ...grpc.CallOption) (*BatchGetPermissionsResponse, error) {
	out := new(BatchGetPermissionsResponse)
	err := c.cc.Invoke(ctx, "/ntt.iam.v1.PermissionService/BatchGetPermissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListPermissions(ctx context.Context, in *ListPermissionsRequest, opts ...grpc.CallOption) (*ListPermissionsResponse, error) {
	out := new(ListPermissionsResponse)
	err := c.cc.Invoke(ctx, "/ntt.iam.v1.PermissionService/ListPermissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) WatchPermission(ctx context.Context, in *WatchPermissionRequest, opts ...grpc.CallOption) (WatchPermissionClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchPermission",
			ServerStreams: true,
		},
		"/ntt.iam.v1.PermissionService/WatchPermission", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchPermissionWatchPermissionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchPermissionClientStream interface {
	Recv() (*WatchPermissionResponse, error)
	grpc.ClientStream
}

type watchPermissionWatchPermissionClient struct {
	grpc.ClientStream
}

func (x *watchPermissionWatchPermissionClient) Recv() (*WatchPermissionResponse, error) {
	m := new(WatchPermissionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) WatchPermissions(ctx context.Context, in *WatchPermissionsRequest, opts ...grpc.CallOption) (WatchPermissionsClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchPermissions",
			ServerStreams: true,
		},
		"/ntt.iam.v1.PermissionService/WatchPermissions", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchPermissionsWatchPermissionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchPermissionsClientStream interface {
	Recv() (*WatchPermissionsResponse, error)
	grpc.ClientStream
}

type watchPermissionsWatchPermissionsClient struct {
	grpc.ClientStream
}

func (x *watchPermissionsWatchPermissionsClient) Recv() (*WatchPermissionsResponse, error) {
	m := new(WatchPermissionsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) CreatePermission(ctx context.Context, in *CreatePermissionRequest, opts ...grpc.CallOption) (*permission.Permission, error) {
	out := new(permission.Permission)
	err := c.cc.Invoke(ctx, "/ntt.iam.v1.PermissionService/CreatePermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdatePermission(ctx context.Context, in *UpdatePermissionRequest, opts ...grpc.CallOption) (*permission.Permission, error) {
	out := new(permission.Permission)
	err := c.cc.Invoke(ctx, "/ntt.iam.v1.PermissionService/UpdatePermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeletePermission(ctx context.Context, in *DeletePermissionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ntt.iam.v1.PermissionService/DeletePermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
