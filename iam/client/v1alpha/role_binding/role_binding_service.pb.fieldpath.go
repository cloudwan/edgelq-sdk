// Code generated by protoc-gen-goten-object
// File: edgelq/iam/proto/v1alpha/role_binding_service.proto
// DO NOT EDIT!!!

package role_binding_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha/organization"
	project "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha/project"
	role_binding "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha/role_binding"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &organization.Organization{}
	_ = &project.Project{}
	_ = &role_binding.RoleBinding{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type GetRoleBindingRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() GetRoleBindingRequest_FieldPathSelector
	Get(source *GetRoleBindingRequest) []interface{}
	GetSingle(source *GetRoleBindingRequest) (interface{}, bool)
	ClearValue(item *GetRoleBindingRequest)

	// Those methods build corresponding GetRoleBindingRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) GetRoleBindingRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) GetRoleBindingRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) GetRoleBindingRequest_FieldPathArrayItemValue
}

type GetRoleBindingRequest_FieldPathSelector int32

const (
	GetRoleBindingRequest_FieldPathSelectorName      GetRoleBindingRequest_FieldPathSelector = 0
	GetRoleBindingRequest_FieldPathSelectorFieldMask GetRoleBindingRequest_FieldPathSelector = 1
	GetRoleBindingRequest_FieldPathSelectorView      GetRoleBindingRequest_FieldPathSelector = 2
)

func (s GetRoleBindingRequest_FieldPathSelector) String() string {
	switch s {
	case GetRoleBindingRequest_FieldPathSelectorName:
		return "name"
	case GetRoleBindingRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case GetRoleBindingRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for GetRoleBindingRequest: %d", s))
	}
}

func BuildGetRoleBindingRequest_FieldPath(fp gotenobject.RawFieldPath) (GetRoleBindingRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object GetRoleBindingRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &GetRoleBindingRequest_FieldTerminalPath{selector: GetRoleBindingRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &GetRoleBindingRequest_FieldTerminalPath{selector: GetRoleBindingRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &GetRoleBindingRequest_FieldTerminalPath{selector: GetRoleBindingRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object GetRoleBindingRequest", fp)
}

func ParseGetRoleBindingRequest_FieldPath(rawField string) (GetRoleBindingRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildGetRoleBindingRequest_FieldPath(fp)
}

func MustParseGetRoleBindingRequest_FieldPath(rawField string) GetRoleBindingRequest_FieldPath {
	fp, err := ParseGetRoleBindingRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type GetRoleBindingRequest_FieldTerminalPath struct {
	selector GetRoleBindingRequest_FieldPathSelector
}

var _ GetRoleBindingRequest_FieldPath = (*GetRoleBindingRequest_FieldTerminalPath)(nil)

func (fp *GetRoleBindingRequest_FieldTerminalPath) Selector() GetRoleBindingRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *GetRoleBindingRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *GetRoleBindingRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source GetRoleBindingRequest
func (fp *GetRoleBindingRequest_FieldTerminalPath) Get(source *GetRoleBindingRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case GetRoleBindingRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case GetRoleBindingRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case GetRoleBindingRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for GetRoleBindingRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *GetRoleBindingRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*GetRoleBindingRequest))
}

// GetSingle returns value pointed by specific field of from source GetRoleBindingRequest
func (fp *GetRoleBindingRequest_FieldTerminalPath) GetSingle(source *GetRoleBindingRequest) (interface{}, bool) {
	switch fp.selector {
	case GetRoleBindingRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case GetRoleBindingRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case GetRoleBindingRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for GetRoleBindingRequest: %d", fp.selector))
	}
}

func (fp *GetRoleBindingRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*GetRoleBindingRequest))
}

// GetDefault returns a default value of the field type
func (fp *GetRoleBindingRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case GetRoleBindingRequest_FieldPathSelectorName:
		return (*role_binding.Reference)(nil)
	case GetRoleBindingRequest_FieldPathSelectorFieldMask:
		return (*role_binding.RoleBinding_FieldMask)(nil)
	case GetRoleBindingRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for GetRoleBindingRequest: %d", fp.selector))
	}
}

func (fp *GetRoleBindingRequest_FieldTerminalPath) ClearValue(item *GetRoleBindingRequest) {
	if item != nil {
		switch fp.selector {
		case GetRoleBindingRequest_FieldPathSelectorName:
			item.Name = nil
		case GetRoleBindingRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case GetRoleBindingRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for GetRoleBindingRequest: %d", fp.selector))
		}
	}
}

func (fp *GetRoleBindingRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*GetRoleBindingRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *GetRoleBindingRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == GetRoleBindingRequest_FieldPathSelectorName ||
		fp.selector == GetRoleBindingRequest_FieldPathSelectorFieldMask ||
		fp.selector == GetRoleBindingRequest_FieldPathSelectorView
}

func (fp *GetRoleBindingRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *GetRoleBindingRequest_FieldTerminalPath) WithIValue(value interface{}) GetRoleBindingRequest_FieldPathValue {
	switch fp.selector {
	case GetRoleBindingRequest_FieldPathSelectorName:
		return &GetRoleBindingRequest_FieldTerminalPathValue{GetRoleBindingRequest_FieldTerminalPath: *fp, value: value.(*role_binding.Reference)}
	case GetRoleBindingRequest_FieldPathSelectorFieldMask:
		return &GetRoleBindingRequest_FieldTerminalPathValue{GetRoleBindingRequest_FieldTerminalPath: *fp, value: value.(*role_binding.RoleBinding_FieldMask)}
	case GetRoleBindingRequest_FieldPathSelectorView:
		return &GetRoleBindingRequest_FieldTerminalPathValue{GetRoleBindingRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetRoleBindingRequest: %d", fp.selector))
	}
}

func (fp *GetRoleBindingRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *GetRoleBindingRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) GetRoleBindingRequest_FieldPathArrayOfValues {
	fpaov := &GetRoleBindingRequest_FieldTerminalPathArrayOfValues{GetRoleBindingRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case GetRoleBindingRequest_FieldPathSelectorName:
		return &GetRoleBindingRequest_FieldTerminalPathArrayOfValues{GetRoleBindingRequest_FieldTerminalPath: *fp, values: values.([]*role_binding.Reference)}
	case GetRoleBindingRequest_FieldPathSelectorFieldMask:
		return &GetRoleBindingRequest_FieldTerminalPathArrayOfValues{GetRoleBindingRequest_FieldTerminalPath: *fp, values: values.([]*role_binding.RoleBinding_FieldMask)}
	case GetRoleBindingRequest_FieldPathSelectorView:
		return &GetRoleBindingRequest_FieldTerminalPathArrayOfValues{GetRoleBindingRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetRoleBindingRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *GetRoleBindingRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *GetRoleBindingRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) GetRoleBindingRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for GetRoleBindingRequest: %d", fp.selector))
	}
}

func (fp *GetRoleBindingRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// GetRoleBindingRequest_FieldPathValue allows storing values for GetRoleBindingRequest fields according to their type
type GetRoleBindingRequest_FieldPathValue interface {
	GetRoleBindingRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **GetRoleBindingRequest)
	CompareWith(*GetRoleBindingRequest) (cmp int, comparable bool)
}

func ParseGetRoleBindingRequest_FieldPathValue(pathStr, valueStr string) (GetRoleBindingRequest_FieldPathValue, error) {
	fp, err := ParseGetRoleBindingRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetRoleBindingRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(GetRoleBindingRequest_FieldPathValue), nil
}

func MustParseGetRoleBindingRequest_FieldPathValue(pathStr, valueStr string) GetRoleBindingRequest_FieldPathValue {
	fpv, err := ParseGetRoleBindingRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type GetRoleBindingRequest_FieldTerminalPathValue struct {
	GetRoleBindingRequest_FieldTerminalPath
	value interface{}
}

var _ GetRoleBindingRequest_FieldPathValue = (*GetRoleBindingRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'GetRoleBindingRequest' as interface{}
func (fpv *GetRoleBindingRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *GetRoleBindingRequest_FieldTerminalPathValue) AsNameValue() (*role_binding.Reference, bool) {
	res, ok := fpv.value.(*role_binding.Reference)
	return res, ok
}
func (fpv *GetRoleBindingRequest_FieldTerminalPathValue) AsFieldMaskValue() (*role_binding.RoleBinding_FieldMask, bool) {
	res, ok := fpv.value.(*role_binding.RoleBinding_FieldMask)
	return res, ok
}
func (fpv *GetRoleBindingRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object GetRoleBindingRequest
func (fpv *GetRoleBindingRequest_FieldTerminalPathValue) SetTo(target **GetRoleBindingRequest) {
	if *target == nil {
		*target = new(GetRoleBindingRequest)
	}
	switch fpv.selector {
	case GetRoleBindingRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*role_binding.Reference)
	case GetRoleBindingRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*role_binding.RoleBinding_FieldMask)
	case GetRoleBindingRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for GetRoleBindingRequest: %d", fpv.selector))
	}
}

func (fpv *GetRoleBindingRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*GetRoleBindingRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'GetRoleBindingRequest_FieldTerminalPathValue' with the value under path in 'GetRoleBindingRequest'.
func (fpv *GetRoleBindingRequest_FieldTerminalPathValue) CompareWith(source *GetRoleBindingRequest) (int, bool) {
	switch fpv.selector {
	case GetRoleBindingRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*role_binding.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case GetRoleBindingRequest_FieldPathSelectorFieldMask:
		return 0, false
	case GetRoleBindingRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for GetRoleBindingRequest: %d", fpv.selector))
	}
}

func (fpv *GetRoleBindingRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*GetRoleBindingRequest))
}

// GetRoleBindingRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for GetRoleBindingRequest according to their type
// Present only for array (repeated) types.
type GetRoleBindingRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	GetRoleBindingRequest_FieldPath
	ContainsValue(*GetRoleBindingRequest) bool
}

// ParseGetRoleBindingRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseGetRoleBindingRequest_FieldPathArrayItemValue(pathStr, valueStr string) (GetRoleBindingRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseGetRoleBindingRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetRoleBindingRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(GetRoleBindingRequest_FieldPathArrayItemValue), nil
}

func MustParseGetRoleBindingRequest_FieldPathArrayItemValue(pathStr, valueStr string) GetRoleBindingRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseGetRoleBindingRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type GetRoleBindingRequest_FieldTerminalPathArrayItemValue struct {
	GetRoleBindingRequest_FieldTerminalPath
	value interface{}
}

var _ GetRoleBindingRequest_FieldPathArrayItemValue = (*GetRoleBindingRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object GetRoleBindingRequest as interface{}
func (fpaiv *GetRoleBindingRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *GetRoleBindingRequest_FieldTerminalPathArrayItemValue) GetSingle(source *GetRoleBindingRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *GetRoleBindingRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*GetRoleBindingRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'GetRoleBindingRequest'
func (fpaiv *GetRoleBindingRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *GetRoleBindingRequest) bool {
	slice := fpaiv.GetRoleBindingRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// GetRoleBindingRequest_FieldPathArrayOfValues allows storing slice of values for GetRoleBindingRequest fields according to their type
type GetRoleBindingRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	GetRoleBindingRequest_FieldPath
}

func ParseGetRoleBindingRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (GetRoleBindingRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseGetRoleBindingRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetRoleBindingRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(GetRoleBindingRequest_FieldPathArrayOfValues), nil
}

func MustParseGetRoleBindingRequest_FieldPathArrayOfValues(pathStr, valuesStr string) GetRoleBindingRequest_FieldPathArrayOfValues {
	fpaov, err := ParseGetRoleBindingRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type GetRoleBindingRequest_FieldTerminalPathArrayOfValues struct {
	GetRoleBindingRequest_FieldTerminalPath
	values interface{}
}

var _ GetRoleBindingRequest_FieldPathArrayOfValues = (*GetRoleBindingRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *GetRoleBindingRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case GetRoleBindingRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*role_binding.Reference) {
			values = append(values, v)
		}
	case GetRoleBindingRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*role_binding.RoleBinding_FieldMask) {
			values = append(values, v)
		}
	case GetRoleBindingRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *GetRoleBindingRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*role_binding.Reference, bool) {
	res, ok := fpaov.values.([]*role_binding.Reference)
	return res, ok
}
func (fpaov *GetRoleBindingRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*role_binding.RoleBinding_FieldMask, bool) {
	res, ok := fpaov.values.([]*role_binding.RoleBinding_FieldMask)
	return res, ok
}
func (fpaov *GetRoleBindingRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetRoleBindingsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetRoleBindingsRequest_FieldPathSelector
	Get(source *BatchGetRoleBindingsRequest) []interface{}
	GetSingle(source *BatchGetRoleBindingsRequest) (interface{}, bool)
	ClearValue(item *BatchGetRoleBindingsRequest)

	// Those methods build corresponding BatchGetRoleBindingsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetRoleBindingsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetRoleBindingsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetRoleBindingsRequest_FieldPathArrayItemValue
}

type BatchGetRoleBindingsRequest_FieldPathSelector int32

const (
	BatchGetRoleBindingsRequest_FieldPathSelectorNames     BatchGetRoleBindingsRequest_FieldPathSelector = 0
	BatchGetRoleBindingsRequest_FieldPathSelectorFieldMask BatchGetRoleBindingsRequest_FieldPathSelector = 1
	BatchGetRoleBindingsRequest_FieldPathSelectorView      BatchGetRoleBindingsRequest_FieldPathSelector = 2
)

func (s BatchGetRoleBindingsRequest_FieldPathSelector) String() string {
	switch s {
	case BatchGetRoleBindingsRequest_FieldPathSelectorNames:
		return "names"
	case BatchGetRoleBindingsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case BatchGetRoleBindingsRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetRoleBindingsRequest: %d", s))
	}
}

func BuildBatchGetRoleBindingsRequest_FieldPath(fp gotenobject.RawFieldPath) (BatchGetRoleBindingsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetRoleBindingsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "names":
			return &BatchGetRoleBindingsRequest_FieldTerminalPath{selector: BatchGetRoleBindingsRequest_FieldPathSelectorNames}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &BatchGetRoleBindingsRequest_FieldTerminalPath{selector: BatchGetRoleBindingsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &BatchGetRoleBindingsRequest_FieldTerminalPath{selector: BatchGetRoleBindingsRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetRoleBindingsRequest", fp)
}

func ParseBatchGetRoleBindingsRequest_FieldPath(rawField string) (BatchGetRoleBindingsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetRoleBindingsRequest_FieldPath(fp)
}

func MustParseBatchGetRoleBindingsRequest_FieldPath(rawField string) BatchGetRoleBindingsRequest_FieldPath {
	fp, err := ParseBatchGetRoleBindingsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetRoleBindingsRequest_FieldTerminalPath struct {
	selector BatchGetRoleBindingsRequest_FieldPathSelector
}

var _ BatchGetRoleBindingsRequest_FieldPath = (*BatchGetRoleBindingsRequest_FieldTerminalPath)(nil)

func (fp *BatchGetRoleBindingsRequest_FieldTerminalPath) Selector() BatchGetRoleBindingsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetRoleBindingsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetRoleBindingsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetRoleBindingsRequest
func (fp *BatchGetRoleBindingsRequest_FieldTerminalPath) Get(source *BatchGetRoleBindingsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetRoleBindingsRequest_FieldPathSelectorNames:
			for _, value := range source.GetNames() {
				values = append(values, value)
			}
		case BatchGetRoleBindingsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case BatchGetRoleBindingsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetRoleBindingsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetRoleBindingsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetRoleBindingsRequest))
}

// GetSingle returns value pointed by specific field of from source BatchGetRoleBindingsRequest
func (fp *BatchGetRoleBindingsRequest_FieldTerminalPath) GetSingle(source *BatchGetRoleBindingsRequest) (interface{}, bool) {
	switch fp.selector {
	case BatchGetRoleBindingsRequest_FieldPathSelectorNames:
		res := source.GetNames()
		return res, res != nil
	case BatchGetRoleBindingsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case BatchGetRoleBindingsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetRoleBindingsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetRoleBindingsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetRoleBindingsRequest))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetRoleBindingsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetRoleBindingsRequest_FieldPathSelectorNames:
		return ([]*role_binding.Reference)(nil)
	case BatchGetRoleBindingsRequest_FieldPathSelectorFieldMask:
		return (*role_binding.RoleBinding_FieldMask)(nil)
	case BatchGetRoleBindingsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetRoleBindingsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetRoleBindingsRequest_FieldTerminalPath) ClearValue(item *BatchGetRoleBindingsRequest) {
	if item != nil {
		switch fp.selector {
		case BatchGetRoleBindingsRequest_FieldPathSelectorNames:
			item.Names = nil
		case BatchGetRoleBindingsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case BatchGetRoleBindingsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetRoleBindingsRequest: %d", fp.selector))
		}
	}
}

func (fp *BatchGetRoleBindingsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetRoleBindingsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetRoleBindingsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetRoleBindingsRequest_FieldPathSelectorNames ||
		fp.selector == BatchGetRoleBindingsRequest_FieldPathSelectorFieldMask ||
		fp.selector == BatchGetRoleBindingsRequest_FieldPathSelectorView
}

func (fp *BatchGetRoleBindingsRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *BatchGetRoleBindingsRequest_FieldTerminalPath) WithIValue(value interface{}) BatchGetRoleBindingsRequest_FieldPathValue {
	switch fp.selector {
	case BatchGetRoleBindingsRequest_FieldPathSelectorNames:
		return &BatchGetRoleBindingsRequest_FieldTerminalPathValue{BatchGetRoleBindingsRequest_FieldTerminalPath: *fp, value: value.([]*role_binding.Reference)}
	case BatchGetRoleBindingsRequest_FieldPathSelectorFieldMask:
		return &BatchGetRoleBindingsRequest_FieldTerminalPathValue{BatchGetRoleBindingsRequest_FieldTerminalPath: *fp, value: value.(*role_binding.RoleBinding_FieldMask)}
	case BatchGetRoleBindingsRequest_FieldPathSelectorView:
		return &BatchGetRoleBindingsRequest_FieldTerminalPathValue{BatchGetRoleBindingsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetRoleBindingsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetRoleBindingsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetRoleBindingsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetRoleBindingsRequest_FieldPathArrayOfValues {
	fpaov := &BatchGetRoleBindingsRequest_FieldTerminalPathArrayOfValues{BatchGetRoleBindingsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetRoleBindingsRequest_FieldPathSelectorNames:
		return &BatchGetRoleBindingsRequest_FieldTerminalPathArrayOfValues{BatchGetRoleBindingsRequest_FieldTerminalPath: *fp, values: values.([][]*role_binding.Reference)}
	case BatchGetRoleBindingsRequest_FieldPathSelectorFieldMask:
		return &BatchGetRoleBindingsRequest_FieldTerminalPathArrayOfValues{BatchGetRoleBindingsRequest_FieldTerminalPath: *fp, values: values.([]*role_binding.RoleBinding_FieldMask)}
	case BatchGetRoleBindingsRequest_FieldPathSelectorView:
		return &BatchGetRoleBindingsRequest_FieldTerminalPathArrayOfValues{BatchGetRoleBindingsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetRoleBindingsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetRoleBindingsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetRoleBindingsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetRoleBindingsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetRoleBindingsRequest_FieldPathSelectorNames:
		return &BatchGetRoleBindingsRequest_FieldTerminalPathArrayItemValue{BatchGetRoleBindingsRequest_FieldTerminalPath: *fp, value: value.(*role_binding.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetRoleBindingsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetRoleBindingsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// BatchGetRoleBindingsRequest_FieldPathValue allows storing values for BatchGetRoleBindingsRequest fields according to their type
type BatchGetRoleBindingsRequest_FieldPathValue interface {
	BatchGetRoleBindingsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetRoleBindingsRequest)
	CompareWith(*BatchGetRoleBindingsRequest) (cmp int, comparable bool)
}

func ParseBatchGetRoleBindingsRequest_FieldPathValue(pathStr, valueStr string) (BatchGetRoleBindingsRequest_FieldPathValue, error) {
	fp, err := ParseBatchGetRoleBindingsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetRoleBindingsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetRoleBindingsRequest_FieldPathValue), nil
}

func MustParseBatchGetRoleBindingsRequest_FieldPathValue(pathStr, valueStr string) BatchGetRoleBindingsRequest_FieldPathValue {
	fpv, err := ParseBatchGetRoleBindingsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetRoleBindingsRequest_FieldTerminalPathValue struct {
	BatchGetRoleBindingsRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetRoleBindingsRequest_FieldPathValue = (*BatchGetRoleBindingsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetRoleBindingsRequest' as interface{}
func (fpv *BatchGetRoleBindingsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetRoleBindingsRequest_FieldTerminalPathValue) AsNamesValue() ([]*role_binding.Reference, bool) {
	res, ok := fpv.value.([]*role_binding.Reference)
	return res, ok
}
func (fpv *BatchGetRoleBindingsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*role_binding.RoleBinding_FieldMask, bool) {
	res, ok := fpv.value.(*role_binding.RoleBinding_FieldMask)
	return res, ok
}
func (fpv *BatchGetRoleBindingsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetRoleBindingsRequest
func (fpv *BatchGetRoleBindingsRequest_FieldTerminalPathValue) SetTo(target **BatchGetRoleBindingsRequest) {
	if *target == nil {
		*target = new(BatchGetRoleBindingsRequest)
	}
	switch fpv.selector {
	case BatchGetRoleBindingsRequest_FieldPathSelectorNames:
		(*target).Names = fpv.value.([]*role_binding.Reference)
	case BatchGetRoleBindingsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*role_binding.RoleBinding_FieldMask)
	case BatchGetRoleBindingsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetRoleBindingsRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetRoleBindingsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetRoleBindingsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetRoleBindingsRequest_FieldTerminalPathValue' with the value under path in 'BatchGetRoleBindingsRequest'.
func (fpv *BatchGetRoleBindingsRequest_FieldTerminalPathValue) CompareWith(source *BatchGetRoleBindingsRequest) (int, bool) {
	switch fpv.selector {
	case BatchGetRoleBindingsRequest_FieldPathSelectorNames:
		return 0, false
	case BatchGetRoleBindingsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case BatchGetRoleBindingsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetRoleBindingsRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetRoleBindingsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetRoleBindingsRequest))
}

// BatchGetRoleBindingsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetRoleBindingsRequest according to their type
// Present only for array (repeated) types.
type BatchGetRoleBindingsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetRoleBindingsRequest_FieldPath
	ContainsValue(*BatchGetRoleBindingsRequest) bool
}

// ParseBatchGetRoleBindingsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetRoleBindingsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetRoleBindingsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetRoleBindingsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetRoleBindingsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetRoleBindingsRequest_FieldPathArrayItemValue), nil
}

func MustParseBatchGetRoleBindingsRequest_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetRoleBindingsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetRoleBindingsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetRoleBindingsRequest_FieldTerminalPathArrayItemValue struct {
	BatchGetRoleBindingsRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetRoleBindingsRequest_FieldPathArrayItemValue = (*BatchGetRoleBindingsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetRoleBindingsRequest as interface{}
func (fpaiv *BatchGetRoleBindingsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetRoleBindingsRequest_FieldTerminalPathArrayItemValue) AsNamesItemValue() (*role_binding.Reference, bool) {
	res, ok := fpaiv.value.(*role_binding.Reference)
	return res, ok
}

func (fpaiv *BatchGetRoleBindingsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetRoleBindingsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetRoleBindingsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetRoleBindingsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetRoleBindingsRequest'
func (fpaiv *BatchGetRoleBindingsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetRoleBindingsRequest) bool {
	slice := fpaiv.BatchGetRoleBindingsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// BatchGetRoleBindingsRequest_FieldPathArrayOfValues allows storing slice of values for BatchGetRoleBindingsRequest fields according to their type
type BatchGetRoleBindingsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetRoleBindingsRequest_FieldPath
}

func ParseBatchGetRoleBindingsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetRoleBindingsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetRoleBindingsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetRoleBindingsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetRoleBindingsRequest_FieldPathArrayOfValues), nil
}

func MustParseBatchGetRoleBindingsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetRoleBindingsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetRoleBindingsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetRoleBindingsRequest_FieldTerminalPathArrayOfValues struct {
	BatchGetRoleBindingsRequest_FieldTerminalPath
	values interface{}
}

var _ BatchGetRoleBindingsRequest_FieldPathArrayOfValues = (*BatchGetRoleBindingsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetRoleBindingsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetRoleBindingsRequest_FieldPathSelectorNames:
		for _, v := range fpaov.values.([][]*role_binding.Reference) {
			values = append(values, v)
		}
	case BatchGetRoleBindingsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*role_binding.RoleBinding_FieldMask) {
			values = append(values, v)
		}
	case BatchGetRoleBindingsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetRoleBindingsRequest_FieldTerminalPathArrayOfValues) AsNamesArrayOfValues() ([][]*role_binding.Reference, bool) {
	res, ok := fpaov.values.([][]*role_binding.Reference)
	return res, ok
}
func (fpaov *BatchGetRoleBindingsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*role_binding.RoleBinding_FieldMask, bool) {
	res, ok := fpaov.values.([]*role_binding.RoleBinding_FieldMask)
	return res, ok
}
func (fpaov *BatchGetRoleBindingsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetRoleBindingsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetRoleBindingsResponse_FieldPathSelector
	Get(source *BatchGetRoleBindingsResponse) []interface{}
	GetSingle(source *BatchGetRoleBindingsResponse) (interface{}, bool)
	ClearValue(item *BatchGetRoleBindingsResponse)

	// Those methods build corresponding BatchGetRoleBindingsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetRoleBindingsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetRoleBindingsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetRoleBindingsResponse_FieldPathArrayItemValue
}

type BatchGetRoleBindingsResponse_FieldPathSelector int32

const (
	BatchGetRoleBindingsResponse_FieldPathSelectorRoleBindings BatchGetRoleBindingsResponse_FieldPathSelector = 0
	BatchGetRoleBindingsResponse_FieldPathSelectorMissing      BatchGetRoleBindingsResponse_FieldPathSelector = 1
)

func (s BatchGetRoleBindingsResponse_FieldPathSelector) String() string {
	switch s {
	case BatchGetRoleBindingsResponse_FieldPathSelectorRoleBindings:
		return "role_bindings"
	case BatchGetRoleBindingsResponse_FieldPathSelectorMissing:
		return "missing"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetRoleBindingsResponse: %d", s))
	}
}

func BuildBatchGetRoleBindingsResponse_FieldPath(fp gotenobject.RawFieldPath) (BatchGetRoleBindingsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetRoleBindingsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "role_bindings", "roleBindings", "role-bindings":
			return &BatchGetRoleBindingsResponse_FieldTerminalPath{selector: BatchGetRoleBindingsResponse_FieldPathSelectorRoleBindings}, nil
		case "missing":
			return &BatchGetRoleBindingsResponse_FieldTerminalPath{selector: BatchGetRoleBindingsResponse_FieldPathSelectorMissing}, nil
		}
	} else {
		switch fp[0] {
		case "role_bindings", "roleBindings", "role-bindings":
			if subpath, err := role_binding.BuildRoleBinding_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &BatchGetRoleBindingsResponse_FieldSubPath{selector: BatchGetRoleBindingsResponse_FieldPathSelectorRoleBindings, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetRoleBindingsResponse", fp)
}

func ParseBatchGetRoleBindingsResponse_FieldPath(rawField string) (BatchGetRoleBindingsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetRoleBindingsResponse_FieldPath(fp)
}

func MustParseBatchGetRoleBindingsResponse_FieldPath(rawField string) BatchGetRoleBindingsResponse_FieldPath {
	fp, err := ParseBatchGetRoleBindingsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetRoleBindingsResponse_FieldTerminalPath struct {
	selector BatchGetRoleBindingsResponse_FieldPathSelector
}

var _ BatchGetRoleBindingsResponse_FieldPath = (*BatchGetRoleBindingsResponse_FieldTerminalPath)(nil)

func (fp *BatchGetRoleBindingsResponse_FieldTerminalPath) Selector() BatchGetRoleBindingsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetRoleBindingsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetRoleBindingsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetRoleBindingsResponse
func (fp *BatchGetRoleBindingsResponse_FieldTerminalPath) Get(source *BatchGetRoleBindingsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetRoleBindingsResponse_FieldPathSelectorRoleBindings:
			for _, value := range source.GetRoleBindings() {
				values = append(values, value)
			}
		case BatchGetRoleBindingsResponse_FieldPathSelectorMissing:
			for _, value := range source.GetMissing() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetRoleBindingsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetRoleBindingsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetRoleBindingsResponse))
}

// GetSingle returns value pointed by specific field of from source BatchGetRoleBindingsResponse
func (fp *BatchGetRoleBindingsResponse_FieldTerminalPath) GetSingle(source *BatchGetRoleBindingsResponse) (interface{}, bool) {
	switch fp.selector {
	case BatchGetRoleBindingsResponse_FieldPathSelectorRoleBindings:
		res := source.GetRoleBindings()
		return res, res != nil
	case BatchGetRoleBindingsResponse_FieldPathSelectorMissing:
		res := source.GetMissing()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetRoleBindingsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetRoleBindingsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetRoleBindingsResponse))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetRoleBindingsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetRoleBindingsResponse_FieldPathSelectorRoleBindings:
		return ([]*role_binding.RoleBinding)(nil)
	case BatchGetRoleBindingsResponse_FieldPathSelectorMissing:
		return ([]*role_binding.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetRoleBindingsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetRoleBindingsResponse_FieldTerminalPath) ClearValue(item *BatchGetRoleBindingsResponse) {
	if item != nil {
		switch fp.selector {
		case BatchGetRoleBindingsResponse_FieldPathSelectorRoleBindings:
			item.RoleBindings = nil
		case BatchGetRoleBindingsResponse_FieldPathSelectorMissing:
			item.Missing = nil
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetRoleBindingsResponse: %d", fp.selector))
		}
	}
}

func (fp *BatchGetRoleBindingsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetRoleBindingsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetRoleBindingsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetRoleBindingsResponse_FieldPathSelectorMissing
}

func (fp *BatchGetRoleBindingsResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *BatchGetRoleBindingsResponse_FieldTerminalPath) WithIValue(value interface{}) BatchGetRoleBindingsResponse_FieldPathValue {
	switch fp.selector {
	case BatchGetRoleBindingsResponse_FieldPathSelectorRoleBindings:
		return &BatchGetRoleBindingsResponse_FieldTerminalPathValue{BatchGetRoleBindingsResponse_FieldTerminalPath: *fp, value: value.([]*role_binding.RoleBinding)}
	case BatchGetRoleBindingsResponse_FieldPathSelectorMissing:
		return &BatchGetRoleBindingsResponse_FieldTerminalPathValue{BatchGetRoleBindingsResponse_FieldTerminalPath: *fp, value: value.([]*role_binding.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetRoleBindingsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetRoleBindingsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetRoleBindingsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetRoleBindingsResponse_FieldPathArrayOfValues {
	fpaov := &BatchGetRoleBindingsResponse_FieldTerminalPathArrayOfValues{BatchGetRoleBindingsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetRoleBindingsResponse_FieldPathSelectorRoleBindings:
		return &BatchGetRoleBindingsResponse_FieldTerminalPathArrayOfValues{BatchGetRoleBindingsResponse_FieldTerminalPath: *fp, values: values.([][]*role_binding.RoleBinding)}
	case BatchGetRoleBindingsResponse_FieldPathSelectorMissing:
		return &BatchGetRoleBindingsResponse_FieldTerminalPathArrayOfValues{BatchGetRoleBindingsResponse_FieldTerminalPath: *fp, values: values.([][]*role_binding.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetRoleBindingsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetRoleBindingsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetRoleBindingsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetRoleBindingsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetRoleBindingsResponse_FieldPathSelectorRoleBindings:
		return &BatchGetRoleBindingsResponse_FieldTerminalPathArrayItemValue{BatchGetRoleBindingsResponse_FieldTerminalPath: *fp, value: value.(*role_binding.RoleBinding)}
	case BatchGetRoleBindingsResponse_FieldPathSelectorMissing:
		return &BatchGetRoleBindingsResponse_FieldTerminalPathArrayItemValue{BatchGetRoleBindingsResponse_FieldTerminalPath: *fp, value: value.(*role_binding.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetRoleBindingsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetRoleBindingsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type BatchGetRoleBindingsResponse_FieldSubPath struct {
	selector BatchGetRoleBindingsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ BatchGetRoleBindingsResponse_FieldPath = (*BatchGetRoleBindingsResponse_FieldSubPath)(nil)

func (fps *BatchGetRoleBindingsResponse_FieldSubPath) Selector() BatchGetRoleBindingsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *BatchGetRoleBindingsResponse_FieldSubPath) AsRoleBindingsSubPath() (role_binding.RoleBinding_FieldPath, bool) {
	res, ok := fps.subPath.(role_binding.RoleBinding_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *BatchGetRoleBindingsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *BatchGetRoleBindingsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source BatchGetRoleBindingsResponse
func (fps *BatchGetRoleBindingsResponse_FieldSubPath) Get(source *BatchGetRoleBindingsResponse) (values []interface{}) {
	switch fps.selector {
	case BatchGetRoleBindingsResponse_FieldPathSelectorRoleBindings:
		for _, item := range source.GetRoleBindings() {
			values = append(values, fps.subPath.GetRaw(item)...)
		}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetRoleBindingsResponse: %d", fps.selector))
	}
	return
}

func (fps *BatchGetRoleBindingsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*BatchGetRoleBindingsResponse))
}

// GetSingle returns value of selected field from source BatchGetRoleBindingsResponse
func (fps *BatchGetRoleBindingsResponse_FieldSubPath) GetSingle(source *BatchGetRoleBindingsResponse) (interface{}, bool) {
	switch fps.selector {
	case BatchGetRoleBindingsResponse_FieldPathSelectorRoleBindings:
		if len(source.GetRoleBindings()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetRoleBindings()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetRoleBindingsResponse: %d", fps.selector))
	}
}

func (fps *BatchGetRoleBindingsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*BatchGetRoleBindingsResponse))
}

// GetDefault returns a default value of the field type
func (fps *BatchGetRoleBindingsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *BatchGetRoleBindingsResponse_FieldSubPath) ClearValue(item *BatchGetRoleBindingsResponse) {
	if item != nil {
		switch fps.selector {
		case BatchGetRoleBindingsResponse_FieldPathSelectorRoleBindings:
			for _, subItem := range item.RoleBindings {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetRoleBindingsResponse: %d", fps.selector))
		}
	}
}

func (fps *BatchGetRoleBindingsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*BatchGetRoleBindingsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *BatchGetRoleBindingsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *BatchGetRoleBindingsResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&BatchGetRoleBindingsResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *BatchGetRoleBindingsResponse_FieldSubPath) WithIValue(value interface{}) BatchGetRoleBindingsResponse_FieldPathValue {
	return &BatchGetRoleBindingsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *BatchGetRoleBindingsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *BatchGetRoleBindingsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) BatchGetRoleBindingsResponse_FieldPathArrayOfValues {
	return &BatchGetRoleBindingsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *BatchGetRoleBindingsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *BatchGetRoleBindingsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) BatchGetRoleBindingsResponse_FieldPathArrayItemValue {
	return &BatchGetRoleBindingsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *BatchGetRoleBindingsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// BatchGetRoleBindingsResponse_FieldPathValue allows storing values for BatchGetRoleBindingsResponse fields according to their type
type BatchGetRoleBindingsResponse_FieldPathValue interface {
	BatchGetRoleBindingsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetRoleBindingsResponse)
	CompareWith(*BatchGetRoleBindingsResponse) (cmp int, comparable bool)
}

func ParseBatchGetRoleBindingsResponse_FieldPathValue(pathStr, valueStr string) (BatchGetRoleBindingsResponse_FieldPathValue, error) {
	fp, err := ParseBatchGetRoleBindingsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetRoleBindingsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetRoleBindingsResponse_FieldPathValue), nil
}

func MustParseBatchGetRoleBindingsResponse_FieldPathValue(pathStr, valueStr string) BatchGetRoleBindingsResponse_FieldPathValue {
	fpv, err := ParseBatchGetRoleBindingsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetRoleBindingsResponse_FieldTerminalPathValue struct {
	BatchGetRoleBindingsResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetRoleBindingsResponse_FieldPathValue = (*BatchGetRoleBindingsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetRoleBindingsResponse' as interface{}
func (fpv *BatchGetRoleBindingsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetRoleBindingsResponse_FieldTerminalPathValue) AsRoleBindingsValue() ([]*role_binding.RoleBinding, bool) {
	res, ok := fpv.value.([]*role_binding.RoleBinding)
	return res, ok
}
func (fpv *BatchGetRoleBindingsResponse_FieldTerminalPathValue) AsMissingValue() ([]*role_binding.Reference, bool) {
	res, ok := fpv.value.([]*role_binding.Reference)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetRoleBindingsResponse
func (fpv *BatchGetRoleBindingsResponse_FieldTerminalPathValue) SetTo(target **BatchGetRoleBindingsResponse) {
	if *target == nil {
		*target = new(BatchGetRoleBindingsResponse)
	}
	switch fpv.selector {
	case BatchGetRoleBindingsResponse_FieldPathSelectorRoleBindings:
		(*target).RoleBindings = fpv.value.([]*role_binding.RoleBinding)
	case BatchGetRoleBindingsResponse_FieldPathSelectorMissing:
		(*target).Missing = fpv.value.([]*role_binding.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetRoleBindingsResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetRoleBindingsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetRoleBindingsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetRoleBindingsResponse_FieldTerminalPathValue' with the value under path in 'BatchGetRoleBindingsResponse'.
func (fpv *BatchGetRoleBindingsResponse_FieldTerminalPathValue) CompareWith(source *BatchGetRoleBindingsResponse) (int, bool) {
	switch fpv.selector {
	case BatchGetRoleBindingsResponse_FieldPathSelectorRoleBindings:
		return 0, false
	case BatchGetRoleBindingsResponse_FieldPathSelectorMissing:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetRoleBindingsResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetRoleBindingsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetRoleBindingsResponse))
}

type BatchGetRoleBindingsResponse_FieldSubPathValue struct {
	BatchGetRoleBindingsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ BatchGetRoleBindingsResponse_FieldPathValue = (*BatchGetRoleBindingsResponse_FieldSubPathValue)(nil)

func (fpvs *BatchGetRoleBindingsResponse_FieldSubPathValue) AsRoleBindingsPathValue() (role_binding.RoleBinding_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(role_binding.RoleBinding_FieldPathValue)
	return res, ok
}

func (fpvs *BatchGetRoleBindingsResponse_FieldSubPathValue) SetTo(target **BatchGetRoleBindingsResponse) {
	if *target == nil {
		*target = new(BatchGetRoleBindingsResponse)
	}
	switch fpvs.Selector() {
	case BatchGetRoleBindingsResponse_FieldPathSelectorRoleBindings:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetRoleBindingsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetRoleBindingsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetRoleBindingsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *BatchGetRoleBindingsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *BatchGetRoleBindingsResponse_FieldSubPathValue) CompareWith(source *BatchGetRoleBindingsResponse) (int, bool) {
	switch fpvs.Selector() {
	case BatchGetRoleBindingsResponse_FieldPathSelectorRoleBindings:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetRoleBindingsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetRoleBindingsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*BatchGetRoleBindingsResponse))
}

// BatchGetRoleBindingsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetRoleBindingsResponse according to their type
// Present only for array (repeated) types.
type BatchGetRoleBindingsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetRoleBindingsResponse_FieldPath
	ContainsValue(*BatchGetRoleBindingsResponse) bool
}

// ParseBatchGetRoleBindingsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetRoleBindingsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetRoleBindingsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetRoleBindingsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetRoleBindingsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetRoleBindingsResponse_FieldPathArrayItemValue), nil
}

func MustParseBatchGetRoleBindingsResponse_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetRoleBindingsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetRoleBindingsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetRoleBindingsResponse_FieldTerminalPathArrayItemValue struct {
	BatchGetRoleBindingsResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetRoleBindingsResponse_FieldPathArrayItemValue = (*BatchGetRoleBindingsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetRoleBindingsResponse as interface{}
func (fpaiv *BatchGetRoleBindingsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetRoleBindingsResponse_FieldTerminalPathArrayItemValue) AsRoleBindingsItemValue() (*role_binding.RoleBinding, bool) {
	res, ok := fpaiv.value.(*role_binding.RoleBinding)
	return res, ok
}
func (fpaiv *BatchGetRoleBindingsResponse_FieldTerminalPathArrayItemValue) AsMissingItemValue() (*role_binding.Reference, bool) {
	res, ok := fpaiv.value.(*role_binding.Reference)
	return res, ok
}

func (fpaiv *BatchGetRoleBindingsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetRoleBindingsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetRoleBindingsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetRoleBindingsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetRoleBindingsResponse'
func (fpaiv *BatchGetRoleBindingsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetRoleBindingsResponse) bool {
	slice := fpaiv.BatchGetRoleBindingsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type BatchGetRoleBindingsResponse_FieldSubPathArrayItemValue struct {
	BatchGetRoleBindingsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *BatchGetRoleBindingsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *BatchGetRoleBindingsResponse_FieldSubPathArrayItemValue) AsRoleBindingsPathItemValue() (role_binding.RoleBinding_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(role_binding.RoleBinding_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetRoleBindingsResponse'
func (fpaivs *BatchGetRoleBindingsResponse_FieldSubPathArrayItemValue) ContainsValue(source *BatchGetRoleBindingsResponse) bool {
	switch fpaivs.Selector() {
	case BatchGetRoleBindingsResponse_FieldPathSelectorRoleBindings:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetRoleBindingsResponse: %d", fpaivs.Selector()))
	}
}

// BatchGetRoleBindingsResponse_FieldPathArrayOfValues allows storing slice of values for BatchGetRoleBindingsResponse fields according to their type
type BatchGetRoleBindingsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetRoleBindingsResponse_FieldPath
}

func ParseBatchGetRoleBindingsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetRoleBindingsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetRoleBindingsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetRoleBindingsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetRoleBindingsResponse_FieldPathArrayOfValues), nil
}

func MustParseBatchGetRoleBindingsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetRoleBindingsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetRoleBindingsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetRoleBindingsResponse_FieldTerminalPathArrayOfValues struct {
	BatchGetRoleBindingsResponse_FieldTerminalPath
	values interface{}
}

var _ BatchGetRoleBindingsResponse_FieldPathArrayOfValues = (*BatchGetRoleBindingsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetRoleBindingsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetRoleBindingsResponse_FieldPathSelectorRoleBindings:
		for _, v := range fpaov.values.([][]*role_binding.RoleBinding) {
			values = append(values, v)
		}
	case BatchGetRoleBindingsResponse_FieldPathSelectorMissing:
		for _, v := range fpaov.values.([][]*role_binding.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetRoleBindingsResponse_FieldTerminalPathArrayOfValues) AsRoleBindingsArrayOfValues() ([][]*role_binding.RoleBinding, bool) {
	res, ok := fpaov.values.([][]*role_binding.RoleBinding)
	return res, ok
}
func (fpaov *BatchGetRoleBindingsResponse_FieldTerminalPathArrayOfValues) AsMissingArrayOfValues() ([][]*role_binding.Reference, bool) {
	res, ok := fpaov.values.([][]*role_binding.Reference)
	return res, ok
}

type BatchGetRoleBindingsResponse_FieldSubPathArrayOfValues struct {
	BatchGetRoleBindingsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ BatchGetRoleBindingsResponse_FieldPathArrayOfValues = (*BatchGetRoleBindingsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *BatchGetRoleBindingsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *BatchGetRoleBindingsResponse_FieldSubPathArrayOfValues) AsRoleBindingsPathArrayOfValues() (role_binding.RoleBinding_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(role_binding.RoleBinding_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListRoleBindingsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListRoleBindingsRequest_FieldPathSelector
	Get(source *ListRoleBindingsRequest) []interface{}
	GetSingle(source *ListRoleBindingsRequest) (interface{}, bool)
	ClearValue(item *ListRoleBindingsRequest)

	// Those methods build corresponding ListRoleBindingsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListRoleBindingsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ListRoleBindingsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListRoleBindingsRequest_FieldPathArrayItemValue
}

type ListRoleBindingsRequest_FieldPathSelector int32

const (
	ListRoleBindingsRequest_FieldPathSelectorParent            ListRoleBindingsRequest_FieldPathSelector = 0
	ListRoleBindingsRequest_FieldPathSelectorPageSize          ListRoleBindingsRequest_FieldPathSelector = 1
	ListRoleBindingsRequest_FieldPathSelectorPageToken         ListRoleBindingsRequest_FieldPathSelector = 2
	ListRoleBindingsRequest_FieldPathSelectorOrderBy           ListRoleBindingsRequest_FieldPathSelector = 3
	ListRoleBindingsRequest_FieldPathSelectorFilter            ListRoleBindingsRequest_FieldPathSelector = 4
	ListRoleBindingsRequest_FieldPathSelectorFieldMask         ListRoleBindingsRequest_FieldPathSelector = 5
	ListRoleBindingsRequest_FieldPathSelectorView              ListRoleBindingsRequest_FieldPathSelector = 6
	ListRoleBindingsRequest_FieldPathSelectorIncludePagingInfo ListRoleBindingsRequest_FieldPathSelector = 7
)

func (s ListRoleBindingsRequest_FieldPathSelector) String() string {
	switch s {
	case ListRoleBindingsRequest_FieldPathSelectorParent:
		return "parent"
	case ListRoleBindingsRequest_FieldPathSelectorPageSize:
		return "page_size"
	case ListRoleBindingsRequest_FieldPathSelectorPageToken:
		return "page_token"
	case ListRoleBindingsRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case ListRoleBindingsRequest_FieldPathSelectorFilter:
		return "filter"
	case ListRoleBindingsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case ListRoleBindingsRequest_FieldPathSelectorView:
		return "view"
	case ListRoleBindingsRequest_FieldPathSelectorIncludePagingInfo:
		return "include_paging_info"
	default:
		panic(fmt.Sprintf("Invalid selector for ListRoleBindingsRequest: %d", s))
	}
}

func BuildListRoleBindingsRequest_FieldPath(fp gotenobject.RawFieldPath) (ListRoleBindingsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListRoleBindingsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &ListRoleBindingsRequest_FieldTerminalPath{selector: ListRoleBindingsRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &ListRoleBindingsRequest_FieldTerminalPath{selector: ListRoleBindingsRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &ListRoleBindingsRequest_FieldTerminalPath{selector: ListRoleBindingsRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &ListRoleBindingsRequest_FieldTerminalPath{selector: ListRoleBindingsRequest_FieldPathSelectorOrderBy}, nil
		case "filter":
			return &ListRoleBindingsRequest_FieldTerminalPath{selector: ListRoleBindingsRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &ListRoleBindingsRequest_FieldTerminalPath{selector: ListRoleBindingsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &ListRoleBindingsRequest_FieldTerminalPath{selector: ListRoleBindingsRequest_FieldPathSelectorView}, nil
		case "include_paging_info", "includePagingInfo", "include-paging-info":
			return &ListRoleBindingsRequest_FieldTerminalPath{selector: ListRoleBindingsRequest_FieldPathSelectorIncludePagingInfo}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListRoleBindingsRequest", fp)
}

func ParseListRoleBindingsRequest_FieldPath(rawField string) (ListRoleBindingsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListRoleBindingsRequest_FieldPath(fp)
}

func MustParseListRoleBindingsRequest_FieldPath(rawField string) ListRoleBindingsRequest_FieldPath {
	fp, err := ParseListRoleBindingsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListRoleBindingsRequest_FieldTerminalPath struct {
	selector ListRoleBindingsRequest_FieldPathSelector
}

var _ ListRoleBindingsRequest_FieldPath = (*ListRoleBindingsRequest_FieldTerminalPath)(nil)

func (fp *ListRoleBindingsRequest_FieldTerminalPath) Selector() ListRoleBindingsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListRoleBindingsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListRoleBindingsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListRoleBindingsRequest
func (fp *ListRoleBindingsRequest_FieldTerminalPath) Get(source *ListRoleBindingsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListRoleBindingsRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case ListRoleBindingsRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case ListRoleBindingsRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case ListRoleBindingsRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case ListRoleBindingsRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case ListRoleBindingsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case ListRoleBindingsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		case ListRoleBindingsRequest_FieldPathSelectorIncludePagingInfo:
			values = append(values, source.IncludePagingInfo)
		default:
			panic(fmt.Sprintf("Invalid selector for ListRoleBindingsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ListRoleBindingsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListRoleBindingsRequest))
}

// GetSingle returns value pointed by specific field of from source ListRoleBindingsRequest
func (fp *ListRoleBindingsRequest_FieldTerminalPath) GetSingle(source *ListRoleBindingsRequest) (interface{}, bool) {
	switch fp.selector {
	case ListRoleBindingsRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case ListRoleBindingsRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case ListRoleBindingsRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case ListRoleBindingsRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case ListRoleBindingsRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case ListRoleBindingsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case ListRoleBindingsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	case ListRoleBindingsRequest_FieldPathSelectorIncludePagingInfo:
		return source.GetIncludePagingInfo(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListRoleBindingsRequest: %d", fp.selector))
	}
}

func (fp *ListRoleBindingsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListRoleBindingsRequest))
}

// GetDefault returns a default value of the field type
func (fp *ListRoleBindingsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListRoleBindingsRequest_FieldPathSelectorParent:
		return (*role_binding.ParentName)(nil)
	case ListRoleBindingsRequest_FieldPathSelectorPageSize:
		return int32(0)
	case ListRoleBindingsRequest_FieldPathSelectorPageToken:
		return (*role_binding.PagerCursor)(nil)
	case ListRoleBindingsRequest_FieldPathSelectorOrderBy:
		return (*role_binding.OrderBy)(nil)
	case ListRoleBindingsRequest_FieldPathSelectorFilter:
		return (*role_binding.Filter)(nil)
	case ListRoleBindingsRequest_FieldPathSelectorFieldMask:
		return (*role_binding.RoleBinding_FieldMask)(nil)
	case ListRoleBindingsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	case ListRoleBindingsRequest_FieldPathSelectorIncludePagingInfo:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for ListRoleBindingsRequest: %d", fp.selector))
	}
}

func (fp *ListRoleBindingsRequest_FieldTerminalPath) ClearValue(item *ListRoleBindingsRequest) {
	if item != nil {
		switch fp.selector {
		case ListRoleBindingsRequest_FieldPathSelectorParent:
			item.Parent = nil
		case ListRoleBindingsRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case ListRoleBindingsRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case ListRoleBindingsRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case ListRoleBindingsRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case ListRoleBindingsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case ListRoleBindingsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		case ListRoleBindingsRequest_FieldPathSelectorIncludePagingInfo:
			item.IncludePagingInfo = false
		default:
			panic(fmt.Sprintf("Invalid selector for ListRoleBindingsRequest: %d", fp.selector))
		}
	}
}

func (fp *ListRoleBindingsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListRoleBindingsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListRoleBindingsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListRoleBindingsRequest_FieldPathSelectorParent ||
		fp.selector == ListRoleBindingsRequest_FieldPathSelectorPageSize ||
		fp.selector == ListRoleBindingsRequest_FieldPathSelectorPageToken ||
		fp.selector == ListRoleBindingsRequest_FieldPathSelectorOrderBy ||
		fp.selector == ListRoleBindingsRequest_FieldPathSelectorFilter ||
		fp.selector == ListRoleBindingsRequest_FieldPathSelectorFieldMask ||
		fp.selector == ListRoleBindingsRequest_FieldPathSelectorView ||
		fp.selector == ListRoleBindingsRequest_FieldPathSelectorIncludePagingInfo
}

func (fp *ListRoleBindingsRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ListRoleBindingsRequest_FieldTerminalPath) WithIValue(value interface{}) ListRoleBindingsRequest_FieldPathValue {
	switch fp.selector {
	case ListRoleBindingsRequest_FieldPathSelectorParent:
		return &ListRoleBindingsRequest_FieldTerminalPathValue{ListRoleBindingsRequest_FieldTerminalPath: *fp, value: value.(*role_binding.ParentName)}
	case ListRoleBindingsRequest_FieldPathSelectorPageSize:
		return &ListRoleBindingsRequest_FieldTerminalPathValue{ListRoleBindingsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case ListRoleBindingsRequest_FieldPathSelectorPageToken:
		return &ListRoleBindingsRequest_FieldTerminalPathValue{ListRoleBindingsRequest_FieldTerminalPath: *fp, value: value.(*role_binding.PagerCursor)}
	case ListRoleBindingsRequest_FieldPathSelectorOrderBy:
		return &ListRoleBindingsRequest_FieldTerminalPathValue{ListRoleBindingsRequest_FieldTerminalPath: *fp, value: value.(*role_binding.OrderBy)}
	case ListRoleBindingsRequest_FieldPathSelectorFilter:
		return &ListRoleBindingsRequest_FieldTerminalPathValue{ListRoleBindingsRequest_FieldTerminalPath: *fp, value: value.(*role_binding.Filter)}
	case ListRoleBindingsRequest_FieldPathSelectorFieldMask:
		return &ListRoleBindingsRequest_FieldTerminalPathValue{ListRoleBindingsRequest_FieldTerminalPath: *fp, value: value.(*role_binding.RoleBinding_FieldMask)}
	case ListRoleBindingsRequest_FieldPathSelectorView:
		return &ListRoleBindingsRequest_FieldTerminalPathValue{ListRoleBindingsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	case ListRoleBindingsRequest_FieldPathSelectorIncludePagingInfo:
		return &ListRoleBindingsRequest_FieldTerminalPathValue{ListRoleBindingsRequest_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListRoleBindingsRequest: %d", fp.selector))
	}
}

func (fp *ListRoleBindingsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListRoleBindingsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListRoleBindingsRequest_FieldPathArrayOfValues {
	fpaov := &ListRoleBindingsRequest_FieldTerminalPathArrayOfValues{ListRoleBindingsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListRoleBindingsRequest_FieldPathSelectorParent:
		return &ListRoleBindingsRequest_FieldTerminalPathArrayOfValues{ListRoleBindingsRequest_FieldTerminalPath: *fp, values: values.([]*role_binding.ParentName)}
	case ListRoleBindingsRequest_FieldPathSelectorPageSize:
		return &ListRoleBindingsRequest_FieldTerminalPathArrayOfValues{ListRoleBindingsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case ListRoleBindingsRequest_FieldPathSelectorPageToken:
		return &ListRoleBindingsRequest_FieldTerminalPathArrayOfValues{ListRoleBindingsRequest_FieldTerminalPath: *fp, values: values.([]*role_binding.PagerCursor)}
	case ListRoleBindingsRequest_FieldPathSelectorOrderBy:
		return &ListRoleBindingsRequest_FieldTerminalPathArrayOfValues{ListRoleBindingsRequest_FieldTerminalPath: *fp, values: values.([]*role_binding.OrderBy)}
	case ListRoleBindingsRequest_FieldPathSelectorFilter:
		return &ListRoleBindingsRequest_FieldTerminalPathArrayOfValues{ListRoleBindingsRequest_FieldTerminalPath: *fp, values: values.([]*role_binding.Filter)}
	case ListRoleBindingsRequest_FieldPathSelectorFieldMask:
		return &ListRoleBindingsRequest_FieldTerminalPathArrayOfValues{ListRoleBindingsRequest_FieldTerminalPath: *fp, values: values.([]*role_binding.RoleBinding_FieldMask)}
	case ListRoleBindingsRequest_FieldPathSelectorView:
		return &ListRoleBindingsRequest_FieldTerminalPathArrayOfValues{ListRoleBindingsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	case ListRoleBindingsRequest_FieldPathSelectorIncludePagingInfo:
		return &ListRoleBindingsRequest_FieldTerminalPathArrayOfValues{ListRoleBindingsRequest_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListRoleBindingsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListRoleBindingsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListRoleBindingsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListRoleBindingsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ListRoleBindingsRequest: %d", fp.selector))
	}
}

func (fp *ListRoleBindingsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ListRoleBindingsRequest_FieldPathValue allows storing values for ListRoleBindingsRequest fields according to their type
type ListRoleBindingsRequest_FieldPathValue interface {
	ListRoleBindingsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListRoleBindingsRequest)
	CompareWith(*ListRoleBindingsRequest) (cmp int, comparable bool)
}

func ParseListRoleBindingsRequest_FieldPathValue(pathStr, valueStr string) (ListRoleBindingsRequest_FieldPathValue, error) {
	fp, err := ParseListRoleBindingsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListRoleBindingsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListRoleBindingsRequest_FieldPathValue), nil
}

func MustParseListRoleBindingsRequest_FieldPathValue(pathStr, valueStr string) ListRoleBindingsRequest_FieldPathValue {
	fpv, err := ParseListRoleBindingsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListRoleBindingsRequest_FieldTerminalPathValue struct {
	ListRoleBindingsRequest_FieldTerminalPath
	value interface{}
}

var _ ListRoleBindingsRequest_FieldPathValue = (*ListRoleBindingsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListRoleBindingsRequest' as interface{}
func (fpv *ListRoleBindingsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListRoleBindingsRequest_FieldTerminalPathValue) AsParentValue() (*role_binding.ParentName, bool) {
	res, ok := fpv.value.(*role_binding.ParentName)
	return res, ok
}
func (fpv *ListRoleBindingsRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *ListRoleBindingsRequest_FieldTerminalPathValue) AsPageTokenValue() (*role_binding.PagerCursor, bool) {
	res, ok := fpv.value.(*role_binding.PagerCursor)
	return res, ok
}
func (fpv *ListRoleBindingsRequest_FieldTerminalPathValue) AsOrderByValue() (*role_binding.OrderBy, bool) {
	res, ok := fpv.value.(*role_binding.OrderBy)
	return res, ok
}
func (fpv *ListRoleBindingsRequest_FieldTerminalPathValue) AsFilterValue() (*role_binding.Filter, bool) {
	res, ok := fpv.value.(*role_binding.Filter)
	return res, ok
}
func (fpv *ListRoleBindingsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*role_binding.RoleBinding_FieldMask, bool) {
	res, ok := fpv.value.(*role_binding.RoleBinding_FieldMask)
	return res, ok
}
func (fpv *ListRoleBindingsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}
func (fpv *ListRoleBindingsRequest_FieldTerminalPathValue) AsIncludePagingInfoValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object ListRoleBindingsRequest
func (fpv *ListRoleBindingsRequest_FieldTerminalPathValue) SetTo(target **ListRoleBindingsRequest) {
	if *target == nil {
		*target = new(ListRoleBindingsRequest)
	}
	switch fpv.selector {
	case ListRoleBindingsRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*role_binding.ParentName)
	case ListRoleBindingsRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case ListRoleBindingsRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*role_binding.PagerCursor)
	case ListRoleBindingsRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*role_binding.OrderBy)
	case ListRoleBindingsRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*role_binding.Filter)
	case ListRoleBindingsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*role_binding.RoleBinding_FieldMask)
	case ListRoleBindingsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	case ListRoleBindingsRequest_FieldPathSelectorIncludePagingInfo:
		(*target).IncludePagingInfo = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for ListRoleBindingsRequest: %d", fpv.selector))
	}
}

func (fpv *ListRoleBindingsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListRoleBindingsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListRoleBindingsRequest_FieldTerminalPathValue' with the value under path in 'ListRoleBindingsRequest'.
func (fpv *ListRoleBindingsRequest_FieldTerminalPathValue) CompareWith(source *ListRoleBindingsRequest) (int, bool) {
	switch fpv.selector {
	case ListRoleBindingsRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*role_binding.ParentName)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ListRoleBindingsRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListRoleBindingsRequest_FieldPathSelectorPageToken:
		return 0, false
	case ListRoleBindingsRequest_FieldPathSelectorOrderBy:
		return 0, false
	case ListRoleBindingsRequest_FieldPathSelectorFilter:
		return 0, false
	case ListRoleBindingsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case ListRoleBindingsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListRoleBindingsRequest_FieldPathSelectorIncludePagingInfo:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIncludePagingInfo()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListRoleBindingsRequest: %d", fpv.selector))
	}
}

func (fpv *ListRoleBindingsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListRoleBindingsRequest))
}

// ListRoleBindingsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for ListRoleBindingsRequest according to their type
// Present only for array (repeated) types.
type ListRoleBindingsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListRoleBindingsRequest_FieldPath
	ContainsValue(*ListRoleBindingsRequest) bool
}

// ParseListRoleBindingsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListRoleBindingsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ListRoleBindingsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseListRoleBindingsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListRoleBindingsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListRoleBindingsRequest_FieldPathArrayItemValue), nil
}

func MustParseListRoleBindingsRequest_FieldPathArrayItemValue(pathStr, valueStr string) ListRoleBindingsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseListRoleBindingsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListRoleBindingsRequest_FieldTerminalPathArrayItemValue struct {
	ListRoleBindingsRequest_FieldTerminalPath
	value interface{}
}

var _ ListRoleBindingsRequest_FieldPathArrayItemValue = (*ListRoleBindingsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListRoleBindingsRequest as interface{}
func (fpaiv *ListRoleBindingsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ListRoleBindingsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ListRoleBindingsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListRoleBindingsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListRoleBindingsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListRoleBindingsRequest'
func (fpaiv *ListRoleBindingsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ListRoleBindingsRequest) bool {
	slice := fpaiv.ListRoleBindingsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ListRoleBindingsRequest_FieldPathArrayOfValues allows storing slice of values for ListRoleBindingsRequest fields according to their type
type ListRoleBindingsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListRoleBindingsRequest_FieldPath
}

func ParseListRoleBindingsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ListRoleBindingsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseListRoleBindingsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListRoleBindingsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListRoleBindingsRequest_FieldPathArrayOfValues), nil
}

func MustParseListRoleBindingsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ListRoleBindingsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseListRoleBindingsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListRoleBindingsRequest_FieldTerminalPathArrayOfValues struct {
	ListRoleBindingsRequest_FieldTerminalPath
	values interface{}
}

var _ ListRoleBindingsRequest_FieldPathArrayOfValues = (*ListRoleBindingsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListRoleBindingsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListRoleBindingsRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*role_binding.ParentName) {
			values = append(values, v)
		}
	case ListRoleBindingsRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case ListRoleBindingsRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*role_binding.PagerCursor) {
			values = append(values, v)
		}
	case ListRoleBindingsRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*role_binding.OrderBy) {
			values = append(values, v)
		}
	case ListRoleBindingsRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*role_binding.Filter) {
			values = append(values, v)
		}
	case ListRoleBindingsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*role_binding.RoleBinding_FieldMask) {
			values = append(values, v)
		}
	case ListRoleBindingsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	case ListRoleBindingsRequest_FieldPathSelectorIncludePagingInfo:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListRoleBindingsRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*role_binding.ParentName, bool) {
	res, ok := fpaov.values.([]*role_binding.ParentName)
	return res, ok
}
func (fpaov *ListRoleBindingsRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *ListRoleBindingsRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*role_binding.PagerCursor, bool) {
	res, ok := fpaov.values.([]*role_binding.PagerCursor)
	return res, ok
}
func (fpaov *ListRoleBindingsRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*role_binding.OrderBy, bool) {
	res, ok := fpaov.values.([]*role_binding.OrderBy)
	return res, ok
}
func (fpaov *ListRoleBindingsRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*role_binding.Filter, bool) {
	res, ok := fpaov.values.([]*role_binding.Filter)
	return res, ok
}
func (fpaov *ListRoleBindingsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*role_binding.RoleBinding_FieldMask, bool) {
	res, ok := fpaov.values.([]*role_binding.RoleBinding_FieldMask)
	return res, ok
}
func (fpaov *ListRoleBindingsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}
func (fpaov *ListRoleBindingsRequest_FieldTerminalPathArrayOfValues) AsIncludePagingInfoArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListRoleBindingsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListRoleBindingsResponse_FieldPathSelector
	Get(source *ListRoleBindingsResponse) []interface{}
	GetSingle(source *ListRoleBindingsResponse) (interface{}, bool)
	ClearValue(item *ListRoleBindingsResponse)

	// Those methods build corresponding ListRoleBindingsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListRoleBindingsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) ListRoleBindingsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListRoleBindingsResponse_FieldPathArrayItemValue
}

type ListRoleBindingsResponse_FieldPathSelector int32

const (
	ListRoleBindingsResponse_FieldPathSelectorRoleBindings      ListRoleBindingsResponse_FieldPathSelector = 0
	ListRoleBindingsResponse_FieldPathSelectorPrevPageToken     ListRoleBindingsResponse_FieldPathSelector = 1
	ListRoleBindingsResponse_FieldPathSelectorNextPageToken     ListRoleBindingsResponse_FieldPathSelector = 2
	ListRoleBindingsResponse_FieldPathSelectorCurrentOffset     ListRoleBindingsResponse_FieldPathSelector = 3
	ListRoleBindingsResponse_FieldPathSelectorTotalResultsCount ListRoleBindingsResponse_FieldPathSelector = 4
)

func (s ListRoleBindingsResponse_FieldPathSelector) String() string {
	switch s {
	case ListRoleBindingsResponse_FieldPathSelectorRoleBindings:
		return "role_bindings"
	case ListRoleBindingsResponse_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case ListRoleBindingsResponse_FieldPathSelectorNextPageToken:
		return "next_page_token"
	case ListRoleBindingsResponse_FieldPathSelectorCurrentOffset:
		return "current_offset"
	case ListRoleBindingsResponse_FieldPathSelectorTotalResultsCount:
		return "total_results_count"
	default:
		panic(fmt.Sprintf("Invalid selector for ListRoleBindingsResponse: %d", s))
	}
}

func BuildListRoleBindingsResponse_FieldPath(fp gotenobject.RawFieldPath) (ListRoleBindingsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListRoleBindingsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "role_bindings", "roleBindings", "role-bindings":
			return &ListRoleBindingsResponse_FieldTerminalPath{selector: ListRoleBindingsResponse_FieldPathSelectorRoleBindings}, nil
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &ListRoleBindingsResponse_FieldTerminalPath{selector: ListRoleBindingsResponse_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &ListRoleBindingsResponse_FieldTerminalPath{selector: ListRoleBindingsResponse_FieldPathSelectorNextPageToken}, nil
		case "current_offset", "currentOffset", "current-offset":
			return &ListRoleBindingsResponse_FieldTerminalPath{selector: ListRoleBindingsResponse_FieldPathSelectorCurrentOffset}, nil
		case "total_results_count", "totalResultsCount", "total-results-count":
			return &ListRoleBindingsResponse_FieldTerminalPath{selector: ListRoleBindingsResponse_FieldPathSelectorTotalResultsCount}, nil
		}
	} else {
		switch fp[0] {
		case "role_bindings", "roleBindings", "role-bindings":
			if subpath, err := role_binding.BuildRoleBinding_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ListRoleBindingsResponse_FieldSubPath{selector: ListRoleBindingsResponse_FieldPathSelectorRoleBindings, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListRoleBindingsResponse", fp)
}

func ParseListRoleBindingsResponse_FieldPath(rawField string) (ListRoleBindingsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListRoleBindingsResponse_FieldPath(fp)
}

func MustParseListRoleBindingsResponse_FieldPath(rawField string) ListRoleBindingsResponse_FieldPath {
	fp, err := ParseListRoleBindingsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListRoleBindingsResponse_FieldTerminalPath struct {
	selector ListRoleBindingsResponse_FieldPathSelector
}

var _ ListRoleBindingsResponse_FieldPath = (*ListRoleBindingsResponse_FieldTerminalPath)(nil)

func (fp *ListRoleBindingsResponse_FieldTerminalPath) Selector() ListRoleBindingsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListRoleBindingsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListRoleBindingsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListRoleBindingsResponse
func (fp *ListRoleBindingsResponse_FieldTerminalPath) Get(source *ListRoleBindingsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListRoleBindingsResponse_FieldPathSelectorRoleBindings:
			for _, value := range source.GetRoleBindings() {
				values = append(values, value)
			}
		case ListRoleBindingsResponse_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case ListRoleBindingsResponse_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		case ListRoleBindingsResponse_FieldPathSelectorCurrentOffset:
			values = append(values, source.CurrentOffset)
		case ListRoleBindingsResponse_FieldPathSelectorTotalResultsCount:
			values = append(values, source.TotalResultsCount)
		default:
			panic(fmt.Sprintf("Invalid selector for ListRoleBindingsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *ListRoleBindingsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListRoleBindingsResponse))
}

// GetSingle returns value pointed by specific field of from source ListRoleBindingsResponse
func (fp *ListRoleBindingsResponse_FieldTerminalPath) GetSingle(source *ListRoleBindingsResponse) (interface{}, bool) {
	switch fp.selector {
	case ListRoleBindingsResponse_FieldPathSelectorRoleBindings:
		res := source.GetRoleBindings()
		return res, res != nil
	case ListRoleBindingsResponse_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case ListRoleBindingsResponse_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	case ListRoleBindingsResponse_FieldPathSelectorCurrentOffset:
		return source.GetCurrentOffset(), source != nil
	case ListRoleBindingsResponse_FieldPathSelectorTotalResultsCount:
		return source.GetTotalResultsCount(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListRoleBindingsResponse: %d", fp.selector))
	}
}

func (fp *ListRoleBindingsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListRoleBindingsResponse))
}

// GetDefault returns a default value of the field type
func (fp *ListRoleBindingsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListRoleBindingsResponse_FieldPathSelectorRoleBindings:
		return ([]*role_binding.RoleBinding)(nil)
	case ListRoleBindingsResponse_FieldPathSelectorPrevPageToken:
		return (*role_binding.PagerCursor)(nil)
	case ListRoleBindingsResponse_FieldPathSelectorNextPageToken:
		return (*role_binding.PagerCursor)(nil)
	case ListRoleBindingsResponse_FieldPathSelectorCurrentOffset:
		return int32(0)
	case ListRoleBindingsResponse_FieldPathSelectorTotalResultsCount:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for ListRoleBindingsResponse: %d", fp.selector))
	}
}

func (fp *ListRoleBindingsResponse_FieldTerminalPath) ClearValue(item *ListRoleBindingsResponse) {
	if item != nil {
		switch fp.selector {
		case ListRoleBindingsResponse_FieldPathSelectorRoleBindings:
			item.RoleBindings = nil
		case ListRoleBindingsResponse_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case ListRoleBindingsResponse_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		case ListRoleBindingsResponse_FieldPathSelectorCurrentOffset:
			item.CurrentOffset = int32(0)
		case ListRoleBindingsResponse_FieldPathSelectorTotalResultsCount:
			item.TotalResultsCount = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for ListRoleBindingsResponse: %d", fp.selector))
		}
	}
}

func (fp *ListRoleBindingsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListRoleBindingsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListRoleBindingsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListRoleBindingsResponse_FieldPathSelectorPrevPageToken ||
		fp.selector == ListRoleBindingsResponse_FieldPathSelectorNextPageToken ||
		fp.selector == ListRoleBindingsResponse_FieldPathSelectorCurrentOffset ||
		fp.selector == ListRoleBindingsResponse_FieldPathSelectorTotalResultsCount
}

func (fp *ListRoleBindingsResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ListRoleBindingsResponse_FieldTerminalPath) WithIValue(value interface{}) ListRoleBindingsResponse_FieldPathValue {
	switch fp.selector {
	case ListRoleBindingsResponse_FieldPathSelectorRoleBindings:
		return &ListRoleBindingsResponse_FieldTerminalPathValue{ListRoleBindingsResponse_FieldTerminalPath: *fp, value: value.([]*role_binding.RoleBinding)}
	case ListRoleBindingsResponse_FieldPathSelectorPrevPageToken:
		return &ListRoleBindingsResponse_FieldTerminalPathValue{ListRoleBindingsResponse_FieldTerminalPath: *fp, value: value.(*role_binding.PagerCursor)}
	case ListRoleBindingsResponse_FieldPathSelectorNextPageToken:
		return &ListRoleBindingsResponse_FieldTerminalPathValue{ListRoleBindingsResponse_FieldTerminalPath: *fp, value: value.(*role_binding.PagerCursor)}
	case ListRoleBindingsResponse_FieldPathSelectorCurrentOffset:
		return &ListRoleBindingsResponse_FieldTerminalPathValue{ListRoleBindingsResponse_FieldTerminalPath: *fp, value: value.(int32)}
	case ListRoleBindingsResponse_FieldPathSelectorTotalResultsCount:
		return &ListRoleBindingsResponse_FieldTerminalPathValue{ListRoleBindingsResponse_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListRoleBindingsResponse: %d", fp.selector))
	}
}

func (fp *ListRoleBindingsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListRoleBindingsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListRoleBindingsResponse_FieldPathArrayOfValues {
	fpaov := &ListRoleBindingsResponse_FieldTerminalPathArrayOfValues{ListRoleBindingsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListRoleBindingsResponse_FieldPathSelectorRoleBindings:
		return &ListRoleBindingsResponse_FieldTerminalPathArrayOfValues{ListRoleBindingsResponse_FieldTerminalPath: *fp, values: values.([][]*role_binding.RoleBinding)}
	case ListRoleBindingsResponse_FieldPathSelectorPrevPageToken:
		return &ListRoleBindingsResponse_FieldTerminalPathArrayOfValues{ListRoleBindingsResponse_FieldTerminalPath: *fp, values: values.([]*role_binding.PagerCursor)}
	case ListRoleBindingsResponse_FieldPathSelectorNextPageToken:
		return &ListRoleBindingsResponse_FieldTerminalPathArrayOfValues{ListRoleBindingsResponse_FieldTerminalPath: *fp, values: values.([]*role_binding.PagerCursor)}
	case ListRoleBindingsResponse_FieldPathSelectorCurrentOffset:
		return &ListRoleBindingsResponse_FieldTerminalPathArrayOfValues{ListRoleBindingsResponse_FieldTerminalPath: *fp, values: values.([]int32)}
	case ListRoleBindingsResponse_FieldPathSelectorTotalResultsCount:
		return &ListRoleBindingsResponse_FieldTerminalPathArrayOfValues{ListRoleBindingsResponse_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListRoleBindingsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListRoleBindingsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListRoleBindingsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListRoleBindingsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case ListRoleBindingsResponse_FieldPathSelectorRoleBindings:
		return &ListRoleBindingsResponse_FieldTerminalPathArrayItemValue{ListRoleBindingsResponse_FieldTerminalPath: *fp, value: value.(*role_binding.RoleBinding)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListRoleBindingsResponse: %d", fp.selector))
	}
}

func (fp *ListRoleBindingsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ListRoleBindingsResponse_FieldSubPath struct {
	selector ListRoleBindingsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ListRoleBindingsResponse_FieldPath = (*ListRoleBindingsResponse_FieldSubPath)(nil)

func (fps *ListRoleBindingsResponse_FieldSubPath) Selector() ListRoleBindingsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *ListRoleBindingsResponse_FieldSubPath) AsRoleBindingsSubPath() (role_binding.RoleBinding_FieldPath, bool) {
	res, ok := fps.subPath.(role_binding.RoleBinding_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ListRoleBindingsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ListRoleBindingsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ListRoleBindingsResponse
func (fps *ListRoleBindingsResponse_FieldSubPath) Get(source *ListRoleBindingsResponse) (values []interface{}) {
	switch fps.selector {
	case ListRoleBindingsResponse_FieldPathSelectorRoleBindings:
		for _, item := range source.GetRoleBindings() {
			values = append(values, fps.subPath.GetRaw(item)...)
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListRoleBindingsResponse: %d", fps.selector))
	}
	return
}

func (fps *ListRoleBindingsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ListRoleBindingsResponse))
}

// GetSingle returns value of selected field from source ListRoleBindingsResponse
func (fps *ListRoleBindingsResponse_FieldSubPath) GetSingle(source *ListRoleBindingsResponse) (interface{}, bool) {
	switch fps.selector {
	case ListRoleBindingsResponse_FieldPathSelectorRoleBindings:
		if len(source.GetRoleBindings()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetRoleBindings()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for ListRoleBindingsResponse: %d", fps.selector))
	}
}

func (fps *ListRoleBindingsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ListRoleBindingsResponse))
}

// GetDefault returns a default value of the field type
func (fps *ListRoleBindingsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ListRoleBindingsResponse_FieldSubPath) ClearValue(item *ListRoleBindingsResponse) {
	if item != nil {
		switch fps.selector {
		case ListRoleBindingsResponse_FieldPathSelectorRoleBindings:
			for _, subItem := range item.RoleBindings {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListRoleBindingsResponse: %d", fps.selector))
		}
	}
}

func (fps *ListRoleBindingsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ListRoleBindingsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *ListRoleBindingsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ListRoleBindingsResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&ListRoleBindingsResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *ListRoleBindingsResponse_FieldSubPath) WithIValue(value interface{}) ListRoleBindingsResponse_FieldPathValue {
	return &ListRoleBindingsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ListRoleBindingsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ListRoleBindingsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) ListRoleBindingsResponse_FieldPathArrayOfValues {
	return &ListRoleBindingsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ListRoleBindingsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ListRoleBindingsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) ListRoleBindingsResponse_FieldPathArrayItemValue {
	return &ListRoleBindingsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ListRoleBindingsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ListRoleBindingsResponse_FieldPathValue allows storing values for ListRoleBindingsResponse fields according to their type
type ListRoleBindingsResponse_FieldPathValue interface {
	ListRoleBindingsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListRoleBindingsResponse)
	CompareWith(*ListRoleBindingsResponse) (cmp int, comparable bool)
}

func ParseListRoleBindingsResponse_FieldPathValue(pathStr, valueStr string) (ListRoleBindingsResponse_FieldPathValue, error) {
	fp, err := ParseListRoleBindingsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListRoleBindingsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListRoleBindingsResponse_FieldPathValue), nil
}

func MustParseListRoleBindingsResponse_FieldPathValue(pathStr, valueStr string) ListRoleBindingsResponse_FieldPathValue {
	fpv, err := ParseListRoleBindingsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListRoleBindingsResponse_FieldTerminalPathValue struct {
	ListRoleBindingsResponse_FieldTerminalPath
	value interface{}
}

var _ ListRoleBindingsResponse_FieldPathValue = (*ListRoleBindingsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListRoleBindingsResponse' as interface{}
func (fpv *ListRoleBindingsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListRoleBindingsResponse_FieldTerminalPathValue) AsRoleBindingsValue() ([]*role_binding.RoleBinding, bool) {
	res, ok := fpv.value.([]*role_binding.RoleBinding)
	return res, ok
}
func (fpv *ListRoleBindingsResponse_FieldTerminalPathValue) AsPrevPageTokenValue() (*role_binding.PagerCursor, bool) {
	res, ok := fpv.value.(*role_binding.PagerCursor)
	return res, ok
}
func (fpv *ListRoleBindingsResponse_FieldTerminalPathValue) AsNextPageTokenValue() (*role_binding.PagerCursor, bool) {
	res, ok := fpv.value.(*role_binding.PagerCursor)
	return res, ok
}
func (fpv *ListRoleBindingsResponse_FieldTerminalPathValue) AsCurrentOffsetValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *ListRoleBindingsResponse_FieldTerminalPathValue) AsTotalResultsCountValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object ListRoleBindingsResponse
func (fpv *ListRoleBindingsResponse_FieldTerminalPathValue) SetTo(target **ListRoleBindingsResponse) {
	if *target == nil {
		*target = new(ListRoleBindingsResponse)
	}
	switch fpv.selector {
	case ListRoleBindingsResponse_FieldPathSelectorRoleBindings:
		(*target).RoleBindings = fpv.value.([]*role_binding.RoleBinding)
	case ListRoleBindingsResponse_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*role_binding.PagerCursor)
	case ListRoleBindingsResponse_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*role_binding.PagerCursor)
	case ListRoleBindingsResponse_FieldPathSelectorCurrentOffset:
		(*target).CurrentOffset = fpv.value.(int32)
	case ListRoleBindingsResponse_FieldPathSelectorTotalResultsCount:
		(*target).TotalResultsCount = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for ListRoleBindingsResponse: %d", fpv.selector))
	}
}

func (fpv *ListRoleBindingsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListRoleBindingsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListRoleBindingsResponse_FieldTerminalPathValue' with the value under path in 'ListRoleBindingsResponse'.
func (fpv *ListRoleBindingsResponse_FieldTerminalPathValue) CompareWith(source *ListRoleBindingsResponse) (int, bool) {
	switch fpv.selector {
	case ListRoleBindingsResponse_FieldPathSelectorRoleBindings:
		return 0, false
	case ListRoleBindingsResponse_FieldPathSelectorPrevPageToken:
		return 0, false
	case ListRoleBindingsResponse_FieldPathSelectorNextPageToken:
		return 0, false
	case ListRoleBindingsResponse_FieldPathSelectorCurrentOffset:
		leftValue := fpv.value.(int32)
		rightValue := source.GetCurrentOffset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListRoleBindingsResponse_FieldPathSelectorTotalResultsCount:
		leftValue := fpv.value.(int32)
		rightValue := source.GetTotalResultsCount()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListRoleBindingsResponse: %d", fpv.selector))
	}
}

func (fpv *ListRoleBindingsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListRoleBindingsResponse))
}

type ListRoleBindingsResponse_FieldSubPathValue struct {
	ListRoleBindingsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ListRoleBindingsResponse_FieldPathValue = (*ListRoleBindingsResponse_FieldSubPathValue)(nil)

func (fpvs *ListRoleBindingsResponse_FieldSubPathValue) AsRoleBindingsPathValue() (role_binding.RoleBinding_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(role_binding.RoleBinding_FieldPathValue)
	return res, ok
}

func (fpvs *ListRoleBindingsResponse_FieldSubPathValue) SetTo(target **ListRoleBindingsResponse) {
	if *target == nil {
		*target = new(ListRoleBindingsResponse)
	}
	switch fpvs.Selector() {
	case ListRoleBindingsResponse_FieldPathSelectorRoleBindings:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for ListRoleBindingsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListRoleBindingsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListRoleBindingsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ListRoleBindingsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ListRoleBindingsResponse_FieldSubPathValue) CompareWith(source *ListRoleBindingsResponse) (int, bool) {
	switch fpvs.Selector() {
	case ListRoleBindingsResponse_FieldPathSelectorRoleBindings:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for ListRoleBindingsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListRoleBindingsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ListRoleBindingsResponse))
}

// ListRoleBindingsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for ListRoleBindingsResponse according to their type
// Present only for array (repeated) types.
type ListRoleBindingsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListRoleBindingsResponse_FieldPath
	ContainsValue(*ListRoleBindingsResponse) bool
}

// ParseListRoleBindingsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListRoleBindingsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (ListRoleBindingsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseListRoleBindingsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListRoleBindingsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListRoleBindingsResponse_FieldPathArrayItemValue), nil
}

func MustParseListRoleBindingsResponse_FieldPathArrayItemValue(pathStr, valueStr string) ListRoleBindingsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseListRoleBindingsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListRoleBindingsResponse_FieldTerminalPathArrayItemValue struct {
	ListRoleBindingsResponse_FieldTerminalPath
	value interface{}
}

var _ ListRoleBindingsResponse_FieldPathArrayItemValue = (*ListRoleBindingsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListRoleBindingsResponse as interface{}
func (fpaiv *ListRoleBindingsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *ListRoleBindingsResponse_FieldTerminalPathArrayItemValue) AsRoleBindingsItemValue() (*role_binding.RoleBinding, bool) {
	res, ok := fpaiv.value.(*role_binding.RoleBinding)
	return res, ok
}

func (fpaiv *ListRoleBindingsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *ListRoleBindingsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListRoleBindingsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListRoleBindingsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListRoleBindingsResponse'
func (fpaiv *ListRoleBindingsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *ListRoleBindingsResponse) bool {
	slice := fpaiv.ListRoleBindingsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ListRoleBindingsResponse_FieldSubPathArrayItemValue struct {
	ListRoleBindingsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ListRoleBindingsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ListRoleBindingsResponse_FieldSubPathArrayItemValue) AsRoleBindingsPathItemValue() (role_binding.RoleBinding_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(role_binding.RoleBinding_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListRoleBindingsResponse'
func (fpaivs *ListRoleBindingsResponse_FieldSubPathArrayItemValue) ContainsValue(source *ListRoleBindingsResponse) bool {
	switch fpaivs.Selector() {
	case ListRoleBindingsResponse_FieldPathSelectorRoleBindings:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for ListRoleBindingsResponse: %d", fpaivs.Selector()))
	}
}

// ListRoleBindingsResponse_FieldPathArrayOfValues allows storing slice of values for ListRoleBindingsResponse fields according to their type
type ListRoleBindingsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListRoleBindingsResponse_FieldPath
}

func ParseListRoleBindingsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (ListRoleBindingsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseListRoleBindingsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListRoleBindingsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListRoleBindingsResponse_FieldPathArrayOfValues), nil
}

func MustParseListRoleBindingsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) ListRoleBindingsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseListRoleBindingsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListRoleBindingsResponse_FieldTerminalPathArrayOfValues struct {
	ListRoleBindingsResponse_FieldTerminalPath
	values interface{}
}

var _ ListRoleBindingsResponse_FieldPathArrayOfValues = (*ListRoleBindingsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListRoleBindingsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListRoleBindingsResponse_FieldPathSelectorRoleBindings:
		for _, v := range fpaov.values.([][]*role_binding.RoleBinding) {
			values = append(values, v)
		}
	case ListRoleBindingsResponse_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*role_binding.PagerCursor) {
			values = append(values, v)
		}
	case ListRoleBindingsResponse_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*role_binding.PagerCursor) {
			values = append(values, v)
		}
	case ListRoleBindingsResponse_FieldPathSelectorCurrentOffset:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case ListRoleBindingsResponse_FieldPathSelectorTotalResultsCount:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListRoleBindingsResponse_FieldTerminalPathArrayOfValues) AsRoleBindingsArrayOfValues() ([][]*role_binding.RoleBinding, bool) {
	res, ok := fpaov.values.([][]*role_binding.RoleBinding)
	return res, ok
}
func (fpaov *ListRoleBindingsResponse_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*role_binding.PagerCursor, bool) {
	res, ok := fpaov.values.([]*role_binding.PagerCursor)
	return res, ok
}
func (fpaov *ListRoleBindingsResponse_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*role_binding.PagerCursor, bool) {
	res, ok := fpaov.values.([]*role_binding.PagerCursor)
	return res, ok
}
func (fpaov *ListRoleBindingsResponse_FieldTerminalPathArrayOfValues) AsCurrentOffsetArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *ListRoleBindingsResponse_FieldTerminalPathArrayOfValues) AsTotalResultsCountArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

type ListRoleBindingsResponse_FieldSubPathArrayOfValues struct {
	ListRoleBindingsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ListRoleBindingsResponse_FieldPathArrayOfValues = (*ListRoleBindingsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ListRoleBindingsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ListRoleBindingsResponse_FieldSubPathArrayOfValues) AsRoleBindingsPathArrayOfValues() (role_binding.RoleBinding_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(role_binding.RoleBinding_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchRoleBindingRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchRoleBindingRequest_FieldPathSelector
	Get(source *WatchRoleBindingRequest) []interface{}
	GetSingle(source *WatchRoleBindingRequest) (interface{}, bool)
	ClearValue(item *WatchRoleBindingRequest)

	// Those methods build corresponding WatchRoleBindingRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchRoleBindingRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchRoleBindingRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchRoleBindingRequest_FieldPathArrayItemValue
}

type WatchRoleBindingRequest_FieldPathSelector int32

const (
	WatchRoleBindingRequest_FieldPathSelectorName      WatchRoleBindingRequest_FieldPathSelector = 0
	WatchRoleBindingRequest_FieldPathSelectorFieldMask WatchRoleBindingRequest_FieldPathSelector = 1
	WatchRoleBindingRequest_FieldPathSelectorView      WatchRoleBindingRequest_FieldPathSelector = 2
)

func (s WatchRoleBindingRequest_FieldPathSelector) String() string {
	switch s {
	case WatchRoleBindingRequest_FieldPathSelectorName:
		return "name"
	case WatchRoleBindingRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchRoleBindingRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRoleBindingRequest: %d", s))
	}
}

func BuildWatchRoleBindingRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchRoleBindingRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchRoleBindingRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &WatchRoleBindingRequest_FieldTerminalPath{selector: WatchRoleBindingRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchRoleBindingRequest_FieldTerminalPath{selector: WatchRoleBindingRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchRoleBindingRequest_FieldTerminalPath{selector: WatchRoleBindingRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchRoleBindingRequest", fp)
}

func ParseWatchRoleBindingRequest_FieldPath(rawField string) (WatchRoleBindingRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchRoleBindingRequest_FieldPath(fp)
}

func MustParseWatchRoleBindingRequest_FieldPath(rawField string) WatchRoleBindingRequest_FieldPath {
	fp, err := ParseWatchRoleBindingRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchRoleBindingRequest_FieldTerminalPath struct {
	selector WatchRoleBindingRequest_FieldPathSelector
}

var _ WatchRoleBindingRequest_FieldPath = (*WatchRoleBindingRequest_FieldTerminalPath)(nil)

func (fp *WatchRoleBindingRequest_FieldTerminalPath) Selector() WatchRoleBindingRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchRoleBindingRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchRoleBindingRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchRoleBindingRequest
func (fp *WatchRoleBindingRequest_FieldTerminalPath) Get(source *WatchRoleBindingRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchRoleBindingRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case WatchRoleBindingRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchRoleBindingRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchRoleBindingRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchRoleBindingRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchRoleBindingRequest))
}

// GetSingle returns value pointed by specific field of from source WatchRoleBindingRequest
func (fp *WatchRoleBindingRequest_FieldTerminalPath) GetSingle(source *WatchRoleBindingRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchRoleBindingRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case WatchRoleBindingRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchRoleBindingRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRoleBindingRequest: %d", fp.selector))
	}
}

func (fp *WatchRoleBindingRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchRoleBindingRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchRoleBindingRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchRoleBindingRequest_FieldPathSelectorName:
		return (*role_binding.Reference)(nil)
	case WatchRoleBindingRequest_FieldPathSelectorFieldMask:
		return (*role_binding.RoleBinding_FieldMask)(nil)
	case WatchRoleBindingRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRoleBindingRequest: %d", fp.selector))
	}
}

func (fp *WatchRoleBindingRequest_FieldTerminalPath) ClearValue(item *WatchRoleBindingRequest) {
	if item != nil {
		switch fp.selector {
		case WatchRoleBindingRequest_FieldPathSelectorName:
			item.Name = nil
		case WatchRoleBindingRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchRoleBindingRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for WatchRoleBindingRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchRoleBindingRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchRoleBindingRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchRoleBindingRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchRoleBindingRequest_FieldPathSelectorName ||
		fp.selector == WatchRoleBindingRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchRoleBindingRequest_FieldPathSelectorView
}

func (fp *WatchRoleBindingRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchRoleBindingRequest_FieldTerminalPath) WithIValue(value interface{}) WatchRoleBindingRequest_FieldPathValue {
	switch fp.selector {
	case WatchRoleBindingRequest_FieldPathSelectorName:
		return &WatchRoleBindingRequest_FieldTerminalPathValue{WatchRoleBindingRequest_FieldTerminalPath: *fp, value: value.(*role_binding.Reference)}
	case WatchRoleBindingRequest_FieldPathSelectorFieldMask:
		return &WatchRoleBindingRequest_FieldTerminalPathValue{WatchRoleBindingRequest_FieldTerminalPath: *fp, value: value.(*role_binding.RoleBinding_FieldMask)}
	case WatchRoleBindingRequest_FieldPathSelectorView:
		return &WatchRoleBindingRequest_FieldTerminalPathValue{WatchRoleBindingRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRoleBindingRequest: %d", fp.selector))
	}
}

func (fp *WatchRoleBindingRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchRoleBindingRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchRoleBindingRequest_FieldPathArrayOfValues {
	fpaov := &WatchRoleBindingRequest_FieldTerminalPathArrayOfValues{WatchRoleBindingRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchRoleBindingRequest_FieldPathSelectorName:
		return &WatchRoleBindingRequest_FieldTerminalPathArrayOfValues{WatchRoleBindingRequest_FieldTerminalPath: *fp, values: values.([]*role_binding.Reference)}
	case WatchRoleBindingRequest_FieldPathSelectorFieldMask:
		return &WatchRoleBindingRequest_FieldTerminalPathArrayOfValues{WatchRoleBindingRequest_FieldTerminalPath: *fp, values: values.([]*role_binding.RoleBinding_FieldMask)}
	case WatchRoleBindingRequest_FieldPathSelectorView:
		return &WatchRoleBindingRequest_FieldTerminalPathArrayOfValues{WatchRoleBindingRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRoleBindingRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchRoleBindingRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchRoleBindingRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchRoleBindingRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRoleBindingRequest: %d", fp.selector))
	}
}

func (fp *WatchRoleBindingRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchRoleBindingRequest_FieldPathValue allows storing values for WatchRoleBindingRequest fields according to their type
type WatchRoleBindingRequest_FieldPathValue interface {
	WatchRoleBindingRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchRoleBindingRequest)
	CompareWith(*WatchRoleBindingRequest) (cmp int, comparable bool)
}

func ParseWatchRoleBindingRequest_FieldPathValue(pathStr, valueStr string) (WatchRoleBindingRequest_FieldPathValue, error) {
	fp, err := ParseWatchRoleBindingRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchRoleBindingRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchRoleBindingRequest_FieldPathValue), nil
}

func MustParseWatchRoleBindingRequest_FieldPathValue(pathStr, valueStr string) WatchRoleBindingRequest_FieldPathValue {
	fpv, err := ParseWatchRoleBindingRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchRoleBindingRequest_FieldTerminalPathValue struct {
	WatchRoleBindingRequest_FieldTerminalPath
	value interface{}
}

var _ WatchRoleBindingRequest_FieldPathValue = (*WatchRoleBindingRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchRoleBindingRequest' as interface{}
func (fpv *WatchRoleBindingRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchRoleBindingRequest_FieldTerminalPathValue) AsNameValue() (*role_binding.Reference, bool) {
	res, ok := fpv.value.(*role_binding.Reference)
	return res, ok
}
func (fpv *WatchRoleBindingRequest_FieldTerminalPathValue) AsFieldMaskValue() (*role_binding.RoleBinding_FieldMask, bool) {
	res, ok := fpv.value.(*role_binding.RoleBinding_FieldMask)
	return res, ok
}
func (fpv *WatchRoleBindingRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object WatchRoleBindingRequest
func (fpv *WatchRoleBindingRequest_FieldTerminalPathValue) SetTo(target **WatchRoleBindingRequest) {
	if *target == nil {
		*target = new(WatchRoleBindingRequest)
	}
	switch fpv.selector {
	case WatchRoleBindingRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*role_binding.Reference)
	case WatchRoleBindingRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*role_binding.RoleBinding_FieldMask)
	case WatchRoleBindingRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRoleBindingRequest: %d", fpv.selector))
	}
}

func (fpv *WatchRoleBindingRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchRoleBindingRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchRoleBindingRequest_FieldTerminalPathValue' with the value under path in 'WatchRoleBindingRequest'.
func (fpv *WatchRoleBindingRequest_FieldTerminalPathValue) CompareWith(source *WatchRoleBindingRequest) (int, bool) {
	switch fpv.selector {
	case WatchRoleBindingRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*role_binding.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchRoleBindingRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchRoleBindingRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRoleBindingRequest: %d", fpv.selector))
	}
}

func (fpv *WatchRoleBindingRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchRoleBindingRequest))
}

// WatchRoleBindingRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchRoleBindingRequest according to their type
// Present only for array (repeated) types.
type WatchRoleBindingRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchRoleBindingRequest_FieldPath
	ContainsValue(*WatchRoleBindingRequest) bool
}

// ParseWatchRoleBindingRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchRoleBindingRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchRoleBindingRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchRoleBindingRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchRoleBindingRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchRoleBindingRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchRoleBindingRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchRoleBindingRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchRoleBindingRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchRoleBindingRequest_FieldTerminalPathArrayItemValue struct {
	WatchRoleBindingRequest_FieldTerminalPath
	value interface{}
}

var _ WatchRoleBindingRequest_FieldPathArrayItemValue = (*WatchRoleBindingRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchRoleBindingRequest as interface{}
func (fpaiv *WatchRoleBindingRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchRoleBindingRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchRoleBindingRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchRoleBindingRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchRoleBindingRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchRoleBindingRequest'
func (fpaiv *WatchRoleBindingRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchRoleBindingRequest) bool {
	slice := fpaiv.WatchRoleBindingRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchRoleBindingRequest_FieldPathArrayOfValues allows storing slice of values for WatchRoleBindingRequest fields according to their type
type WatchRoleBindingRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchRoleBindingRequest_FieldPath
}

func ParseWatchRoleBindingRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchRoleBindingRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchRoleBindingRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchRoleBindingRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchRoleBindingRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchRoleBindingRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchRoleBindingRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchRoleBindingRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchRoleBindingRequest_FieldTerminalPathArrayOfValues struct {
	WatchRoleBindingRequest_FieldTerminalPath
	values interface{}
}

var _ WatchRoleBindingRequest_FieldPathArrayOfValues = (*WatchRoleBindingRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchRoleBindingRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchRoleBindingRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*role_binding.Reference) {
			values = append(values, v)
		}
	case WatchRoleBindingRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*role_binding.RoleBinding_FieldMask) {
			values = append(values, v)
		}
	case WatchRoleBindingRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchRoleBindingRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*role_binding.Reference, bool) {
	res, ok := fpaov.values.([]*role_binding.Reference)
	return res, ok
}
func (fpaov *WatchRoleBindingRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*role_binding.RoleBinding_FieldMask, bool) {
	res, ok := fpaov.values.([]*role_binding.RoleBinding_FieldMask)
	return res, ok
}
func (fpaov *WatchRoleBindingRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchRoleBindingResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchRoleBindingResponse_FieldPathSelector
	Get(source *WatchRoleBindingResponse) []interface{}
	GetSingle(source *WatchRoleBindingResponse) (interface{}, bool)
	ClearValue(item *WatchRoleBindingResponse)

	// Those methods build corresponding WatchRoleBindingResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchRoleBindingResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchRoleBindingResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchRoleBindingResponse_FieldPathArrayItemValue
}

type WatchRoleBindingResponse_FieldPathSelector int32

const (
	WatchRoleBindingResponse_FieldPathSelectorChange WatchRoleBindingResponse_FieldPathSelector = 0
)

func (s WatchRoleBindingResponse_FieldPathSelector) String() string {
	switch s {
	case WatchRoleBindingResponse_FieldPathSelectorChange:
		return "change"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRoleBindingResponse: %d", s))
	}
}

func BuildWatchRoleBindingResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchRoleBindingResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchRoleBindingResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "change":
			return &WatchRoleBindingResponse_FieldTerminalPath{selector: WatchRoleBindingResponse_FieldPathSelectorChange}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchRoleBindingResponse", fp)
}

func ParseWatchRoleBindingResponse_FieldPath(rawField string) (WatchRoleBindingResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchRoleBindingResponse_FieldPath(fp)
}

func MustParseWatchRoleBindingResponse_FieldPath(rawField string) WatchRoleBindingResponse_FieldPath {
	fp, err := ParseWatchRoleBindingResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchRoleBindingResponse_FieldTerminalPath struct {
	selector WatchRoleBindingResponse_FieldPathSelector
}

var _ WatchRoleBindingResponse_FieldPath = (*WatchRoleBindingResponse_FieldTerminalPath)(nil)

func (fp *WatchRoleBindingResponse_FieldTerminalPath) Selector() WatchRoleBindingResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchRoleBindingResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchRoleBindingResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchRoleBindingResponse
func (fp *WatchRoleBindingResponse_FieldTerminalPath) Get(source *WatchRoleBindingResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchRoleBindingResponse_FieldPathSelectorChange:
			if source.Change != nil {
				values = append(values, source.Change)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchRoleBindingResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchRoleBindingResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchRoleBindingResponse))
}

// GetSingle returns value pointed by specific field of from source WatchRoleBindingResponse
func (fp *WatchRoleBindingResponse_FieldTerminalPath) GetSingle(source *WatchRoleBindingResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchRoleBindingResponse_FieldPathSelectorChange:
		res := source.GetChange()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRoleBindingResponse: %d", fp.selector))
	}
}

func (fp *WatchRoleBindingResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchRoleBindingResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchRoleBindingResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchRoleBindingResponse_FieldPathSelectorChange:
		return (*role_binding.RoleBindingChange)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRoleBindingResponse: %d", fp.selector))
	}
}

func (fp *WatchRoleBindingResponse_FieldTerminalPath) ClearValue(item *WatchRoleBindingResponse) {
	if item != nil {
		switch fp.selector {
		case WatchRoleBindingResponse_FieldPathSelectorChange:
			item.Change = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchRoleBindingResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchRoleBindingResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchRoleBindingResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchRoleBindingResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchRoleBindingResponse_FieldPathSelectorChange
}

func (fp *WatchRoleBindingResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchRoleBindingResponse_FieldTerminalPath) WithIValue(value interface{}) WatchRoleBindingResponse_FieldPathValue {
	switch fp.selector {
	case WatchRoleBindingResponse_FieldPathSelectorChange:
		return &WatchRoleBindingResponse_FieldTerminalPathValue{WatchRoleBindingResponse_FieldTerminalPath: *fp, value: value.(*role_binding.RoleBindingChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRoleBindingResponse: %d", fp.selector))
	}
}

func (fp *WatchRoleBindingResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchRoleBindingResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchRoleBindingResponse_FieldPathArrayOfValues {
	fpaov := &WatchRoleBindingResponse_FieldTerminalPathArrayOfValues{WatchRoleBindingResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchRoleBindingResponse_FieldPathSelectorChange:
		return &WatchRoleBindingResponse_FieldTerminalPathArrayOfValues{WatchRoleBindingResponse_FieldTerminalPath: *fp, values: values.([]*role_binding.RoleBindingChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRoleBindingResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchRoleBindingResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchRoleBindingResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchRoleBindingResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRoleBindingResponse: %d", fp.selector))
	}
}

func (fp *WatchRoleBindingResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchRoleBindingResponse_FieldPathValue allows storing values for WatchRoleBindingResponse fields according to their type
type WatchRoleBindingResponse_FieldPathValue interface {
	WatchRoleBindingResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchRoleBindingResponse)
	CompareWith(*WatchRoleBindingResponse) (cmp int, comparable bool)
}

func ParseWatchRoleBindingResponse_FieldPathValue(pathStr, valueStr string) (WatchRoleBindingResponse_FieldPathValue, error) {
	fp, err := ParseWatchRoleBindingResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchRoleBindingResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchRoleBindingResponse_FieldPathValue), nil
}

func MustParseWatchRoleBindingResponse_FieldPathValue(pathStr, valueStr string) WatchRoleBindingResponse_FieldPathValue {
	fpv, err := ParseWatchRoleBindingResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchRoleBindingResponse_FieldTerminalPathValue struct {
	WatchRoleBindingResponse_FieldTerminalPath
	value interface{}
}

var _ WatchRoleBindingResponse_FieldPathValue = (*WatchRoleBindingResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchRoleBindingResponse' as interface{}
func (fpv *WatchRoleBindingResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchRoleBindingResponse_FieldTerminalPathValue) AsChangeValue() (*role_binding.RoleBindingChange, bool) {
	res, ok := fpv.value.(*role_binding.RoleBindingChange)
	return res, ok
}

// SetTo stores value for selected field for object WatchRoleBindingResponse
func (fpv *WatchRoleBindingResponse_FieldTerminalPathValue) SetTo(target **WatchRoleBindingResponse) {
	if *target == nil {
		*target = new(WatchRoleBindingResponse)
	}
	switch fpv.selector {
	case WatchRoleBindingResponse_FieldPathSelectorChange:
		(*target).Change = fpv.value.(*role_binding.RoleBindingChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRoleBindingResponse: %d", fpv.selector))
	}
}

func (fpv *WatchRoleBindingResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchRoleBindingResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchRoleBindingResponse_FieldTerminalPathValue' with the value under path in 'WatchRoleBindingResponse'.
func (fpv *WatchRoleBindingResponse_FieldTerminalPathValue) CompareWith(source *WatchRoleBindingResponse) (int, bool) {
	switch fpv.selector {
	case WatchRoleBindingResponse_FieldPathSelectorChange:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRoleBindingResponse: %d", fpv.selector))
	}
}

func (fpv *WatchRoleBindingResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchRoleBindingResponse))
}

// WatchRoleBindingResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchRoleBindingResponse according to their type
// Present only for array (repeated) types.
type WatchRoleBindingResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchRoleBindingResponse_FieldPath
	ContainsValue(*WatchRoleBindingResponse) bool
}

// ParseWatchRoleBindingResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchRoleBindingResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchRoleBindingResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchRoleBindingResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchRoleBindingResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchRoleBindingResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchRoleBindingResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchRoleBindingResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchRoleBindingResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchRoleBindingResponse_FieldTerminalPathArrayItemValue struct {
	WatchRoleBindingResponse_FieldTerminalPath
	value interface{}
}

var _ WatchRoleBindingResponse_FieldPathArrayItemValue = (*WatchRoleBindingResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchRoleBindingResponse as interface{}
func (fpaiv *WatchRoleBindingResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchRoleBindingResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchRoleBindingResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchRoleBindingResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchRoleBindingResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchRoleBindingResponse'
func (fpaiv *WatchRoleBindingResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchRoleBindingResponse) bool {
	slice := fpaiv.WatchRoleBindingResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchRoleBindingResponse_FieldPathArrayOfValues allows storing slice of values for WatchRoleBindingResponse fields according to their type
type WatchRoleBindingResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchRoleBindingResponse_FieldPath
}

func ParseWatchRoleBindingResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchRoleBindingResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchRoleBindingResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchRoleBindingResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchRoleBindingResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchRoleBindingResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchRoleBindingResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchRoleBindingResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchRoleBindingResponse_FieldTerminalPathArrayOfValues struct {
	WatchRoleBindingResponse_FieldTerminalPath
	values interface{}
}

var _ WatchRoleBindingResponse_FieldPathArrayOfValues = (*WatchRoleBindingResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchRoleBindingResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchRoleBindingResponse_FieldPathSelectorChange:
		for _, v := range fpaov.values.([]*role_binding.RoleBindingChange) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchRoleBindingResponse_FieldTerminalPathArrayOfValues) AsChangeArrayOfValues() ([]*role_binding.RoleBindingChange, bool) {
	res, ok := fpaov.values.([]*role_binding.RoleBindingChange)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchRoleBindingsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchRoleBindingsRequest_FieldPathSelector
	Get(source *WatchRoleBindingsRequest) []interface{}
	GetSingle(source *WatchRoleBindingsRequest) (interface{}, bool)
	ClearValue(item *WatchRoleBindingsRequest)

	// Those methods build corresponding WatchRoleBindingsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchRoleBindingsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchRoleBindingsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchRoleBindingsRequest_FieldPathArrayItemValue
}

type WatchRoleBindingsRequest_FieldPathSelector int32

const (
	WatchRoleBindingsRequest_FieldPathSelectorType         WatchRoleBindingsRequest_FieldPathSelector = 0
	WatchRoleBindingsRequest_FieldPathSelectorParent       WatchRoleBindingsRequest_FieldPathSelector = 1
	WatchRoleBindingsRequest_FieldPathSelectorPageSize     WatchRoleBindingsRequest_FieldPathSelector = 2
	WatchRoleBindingsRequest_FieldPathSelectorPageToken    WatchRoleBindingsRequest_FieldPathSelector = 3
	WatchRoleBindingsRequest_FieldPathSelectorOrderBy      WatchRoleBindingsRequest_FieldPathSelector = 4
	WatchRoleBindingsRequest_FieldPathSelectorResumeToken  WatchRoleBindingsRequest_FieldPathSelector = 5
	WatchRoleBindingsRequest_FieldPathSelectorStartingTime WatchRoleBindingsRequest_FieldPathSelector = 6
	WatchRoleBindingsRequest_FieldPathSelectorFilter       WatchRoleBindingsRequest_FieldPathSelector = 7
	WatchRoleBindingsRequest_FieldPathSelectorFieldMask    WatchRoleBindingsRequest_FieldPathSelector = 8
	WatchRoleBindingsRequest_FieldPathSelectorView         WatchRoleBindingsRequest_FieldPathSelector = 9
	WatchRoleBindingsRequest_FieldPathSelectorMaxChunkSize WatchRoleBindingsRequest_FieldPathSelector = 10
)

func (s WatchRoleBindingsRequest_FieldPathSelector) String() string {
	switch s {
	case WatchRoleBindingsRequest_FieldPathSelectorType:
		return "type"
	case WatchRoleBindingsRequest_FieldPathSelectorParent:
		return "parent"
	case WatchRoleBindingsRequest_FieldPathSelectorPageSize:
		return "page_size"
	case WatchRoleBindingsRequest_FieldPathSelectorPageToken:
		return "page_token"
	case WatchRoleBindingsRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case WatchRoleBindingsRequest_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchRoleBindingsRequest_FieldPathSelectorStartingTime:
		return "starting_time"
	case WatchRoleBindingsRequest_FieldPathSelectorFilter:
		return "filter"
	case WatchRoleBindingsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchRoleBindingsRequest_FieldPathSelectorView:
		return "view"
	case WatchRoleBindingsRequest_FieldPathSelectorMaxChunkSize:
		return "max_chunk_size"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRoleBindingsRequest: %d", s))
	}
}

func BuildWatchRoleBindingsRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchRoleBindingsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchRoleBindingsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "type":
			return &WatchRoleBindingsRequest_FieldTerminalPath{selector: WatchRoleBindingsRequest_FieldPathSelectorType}, nil
		case "parent":
			return &WatchRoleBindingsRequest_FieldTerminalPath{selector: WatchRoleBindingsRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &WatchRoleBindingsRequest_FieldTerminalPath{selector: WatchRoleBindingsRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &WatchRoleBindingsRequest_FieldTerminalPath{selector: WatchRoleBindingsRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &WatchRoleBindingsRequest_FieldTerminalPath{selector: WatchRoleBindingsRequest_FieldPathSelectorOrderBy}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchRoleBindingsRequest_FieldTerminalPath{selector: WatchRoleBindingsRequest_FieldPathSelectorResumeToken}, nil
		case "starting_time", "startingTime", "starting-time":
			return &WatchRoleBindingsRequest_FieldTerminalPath{selector: WatchRoleBindingsRequest_FieldPathSelectorStartingTime}, nil
		case "filter":
			return &WatchRoleBindingsRequest_FieldTerminalPath{selector: WatchRoleBindingsRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchRoleBindingsRequest_FieldTerminalPath{selector: WatchRoleBindingsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchRoleBindingsRequest_FieldTerminalPath{selector: WatchRoleBindingsRequest_FieldPathSelectorView}, nil
		case "max_chunk_size", "maxChunkSize", "max-chunk-size":
			return &WatchRoleBindingsRequest_FieldTerminalPath{selector: WatchRoleBindingsRequest_FieldPathSelectorMaxChunkSize}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchRoleBindingsRequest", fp)
}

func ParseWatchRoleBindingsRequest_FieldPath(rawField string) (WatchRoleBindingsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchRoleBindingsRequest_FieldPath(fp)
}

func MustParseWatchRoleBindingsRequest_FieldPath(rawField string) WatchRoleBindingsRequest_FieldPath {
	fp, err := ParseWatchRoleBindingsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchRoleBindingsRequest_FieldTerminalPath struct {
	selector WatchRoleBindingsRequest_FieldPathSelector
}

var _ WatchRoleBindingsRequest_FieldPath = (*WatchRoleBindingsRequest_FieldTerminalPath)(nil)

func (fp *WatchRoleBindingsRequest_FieldTerminalPath) Selector() WatchRoleBindingsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchRoleBindingsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchRoleBindingsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchRoleBindingsRequest
func (fp *WatchRoleBindingsRequest_FieldTerminalPath) Get(source *WatchRoleBindingsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchRoleBindingsRequest_FieldPathSelectorType:
			values = append(values, source.Type)
		case WatchRoleBindingsRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case WatchRoleBindingsRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case WatchRoleBindingsRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case WatchRoleBindingsRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case WatchRoleBindingsRequest_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchRoleBindingsRequest_FieldPathSelectorStartingTime:
			if source.StartingTime != nil {
				values = append(values, source.StartingTime)
			}
		case WatchRoleBindingsRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case WatchRoleBindingsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchRoleBindingsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		case WatchRoleBindingsRequest_FieldPathSelectorMaxChunkSize:
			values = append(values, source.MaxChunkSize)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchRoleBindingsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchRoleBindingsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchRoleBindingsRequest))
}

// GetSingle returns value pointed by specific field of from source WatchRoleBindingsRequest
func (fp *WatchRoleBindingsRequest_FieldTerminalPath) GetSingle(source *WatchRoleBindingsRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchRoleBindingsRequest_FieldPathSelectorType:
		return source.GetType(), source != nil
	case WatchRoleBindingsRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case WatchRoleBindingsRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case WatchRoleBindingsRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case WatchRoleBindingsRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case WatchRoleBindingsRequest_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchRoleBindingsRequest_FieldPathSelectorStartingTime:
		res := source.GetStartingTime()
		return res, res != nil
	case WatchRoleBindingsRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case WatchRoleBindingsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchRoleBindingsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	case WatchRoleBindingsRequest_FieldPathSelectorMaxChunkSize:
		return source.GetMaxChunkSize(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRoleBindingsRequest: %d", fp.selector))
	}
}

func (fp *WatchRoleBindingsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchRoleBindingsRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchRoleBindingsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchRoleBindingsRequest_FieldPathSelectorType:
		return watch_type.WatchType_STATEFUL
	case WatchRoleBindingsRequest_FieldPathSelectorParent:
		return (*role_binding.ParentReference)(nil)
	case WatchRoleBindingsRequest_FieldPathSelectorPageSize:
		return int32(0)
	case WatchRoleBindingsRequest_FieldPathSelectorPageToken:
		return (*role_binding.PagerCursor)(nil)
	case WatchRoleBindingsRequest_FieldPathSelectorOrderBy:
		return (*role_binding.OrderBy)(nil)
	case WatchRoleBindingsRequest_FieldPathSelectorResumeToken:
		return ""
	case WatchRoleBindingsRequest_FieldPathSelectorStartingTime:
		return (*timestamp.Timestamp)(nil)
	case WatchRoleBindingsRequest_FieldPathSelectorFilter:
		return (*role_binding.Filter)(nil)
	case WatchRoleBindingsRequest_FieldPathSelectorFieldMask:
		return (*role_binding.RoleBinding_FieldMask)(nil)
	case WatchRoleBindingsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	case WatchRoleBindingsRequest_FieldPathSelectorMaxChunkSize:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRoleBindingsRequest: %d", fp.selector))
	}
}

func (fp *WatchRoleBindingsRequest_FieldTerminalPath) ClearValue(item *WatchRoleBindingsRequest) {
	if item != nil {
		switch fp.selector {
		case WatchRoleBindingsRequest_FieldPathSelectorType:
			item.Type = watch_type.WatchType_STATEFUL
		case WatchRoleBindingsRequest_FieldPathSelectorParent:
			item.Parent = nil
		case WatchRoleBindingsRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case WatchRoleBindingsRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case WatchRoleBindingsRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case WatchRoleBindingsRequest_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchRoleBindingsRequest_FieldPathSelectorStartingTime:
			item.StartingTime = nil
		case WatchRoleBindingsRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case WatchRoleBindingsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchRoleBindingsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		case WatchRoleBindingsRequest_FieldPathSelectorMaxChunkSize:
			item.MaxChunkSize = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchRoleBindingsRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchRoleBindingsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchRoleBindingsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchRoleBindingsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchRoleBindingsRequest_FieldPathSelectorType ||
		fp.selector == WatchRoleBindingsRequest_FieldPathSelectorParent ||
		fp.selector == WatchRoleBindingsRequest_FieldPathSelectorPageSize ||
		fp.selector == WatchRoleBindingsRequest_FieldPathSelectorPageToken ||
		fp.selector == WatchRoleBindingsRequest_FieldPathSelectorOrderBy ||
		fp.selector == WatchRoleBindingsRequest_FieldPathSelectorResumeToken ||
		fp.selector == WatchRoleBindingsRequest_FieldPathSelectorStartingTime ||
		fp.selector == WatchRoleBindingsRequest_FieldPathSelectorFilter ||
		fp.selector == WatchRoleBindingsRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchRoleBindingsRequest_FieldPathSelectorView ||
		fp.selector == WatchRoleBindingsRequest_FieldPathSelectorMaxChunkSize
}

func (fp *WatchRoleBindingsRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchRoleBindingsRequest_FieldTerminalPath) WithIValue(value interface{}) WatchRoleBindingsRequest_FieldPathValue {
	switch fp.selector {
	case WatchRoleBindingsRequest_FieldPathSelectorType:
		return &WatchRoleBindingsRequest_FieldTerminalPathValue{WatchRoleBindingsRequest_FieldTerminalPath: *fp, value: value.(watch_type.WatchType)}
	case WatchRoleBindingsRequest_FieldPathSelectorParent:
		return &WatchRoleBindingsRequest_FieldTerminalPathValue{WatchRoleBindingsRequest_FieldTerminalPath: *fp, value: value.(*role_binding.ParentReference)}
	case WatchRoleBindingsRequest_FieldPathSelectorPageSize:
		return &WatchRoleBindingsRequest_FieldTerminalPathValue{WatchRoleBindingsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case WatchRoleBindingsRequest_FieldPathSelectorPageToken:
		return &WatchRoleBindingsRequest_FieldTerminalPathValue{WatchRoleBindingsRequest_FieldTerminalPath: *fp, value: value.(*role_binding.PagerCursor)}
	case WatchRoleBindingsRequest_FieldPathSelectorOrderBy:
		return &WatchRoleBindingsRequest_FieldTerminalPathValue{WatchRoleBindingsRequest_FieldTerminalPath: *fp, value: value.(*role_binding.OrderBy)}
	case WatchRoleBindingsRequest_FieldPathSelectorResumeToken:
		return &WatchRoleBindingsRequest_FieldTerminalPathValue{WatchRoleBindingsRequest_FieldTerminalPath: *fp, value: value.(string)}
	case WatchRoleBindingsRequest_FieldPathSelectorStartingTime:
		return &WatchRoleBindingsRequest_FieldTerminalPathValue{WatchRoleBindingsRequest_FieldTerminalPath: *fp, value: value.(*timestamp.Timestamp)}
	case WatchRoleBindingsRequest_FieldPathSelectorFilter:
		return &WatchRoleBindingsRequest_FieldTerminalPathValue{WatchRoleBindingsRequest_FieldTerminalPath: *fp, value: value.(*role_binding.Filter)}
	case WatchRoleBindingsRequest_FieldPathSelectorFieldMask:
		return &WatchRoleBindingsRequest_FieldTerminalPathValue{WatchRoleBindingsRequest_FieldTerminalPath: *fp, value: value.(*role_binding.RoleBinding_FieldMask)}
	case WatchRoleBindingsRequest_FieldPathSelectorView:
		return &WatchRoleBindingsRequest_FieldTerminalPathValue{WatchRoleBindingsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	case WatchRoleBindingsRequest_FieldPathSelectorMaxChunkSize:
		return &WatchRoleBindingsRequest_FieldTerminalPathValue{WatchRoleBindingsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRoleBindingsRequest: %d", fp.selector))
	}
}

func (fp *WatchRoleBindingsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchRoleBindingsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchRoleBindingsRequest_FieldPathArrayOfValues {
	fpaov := &WatchRoleBindingsRequest_FieldTerminalPathArrayOfValues{WatchRoleBindingsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchRoleBindingsRequest_FieldPathSelectorType:
		return &WatchRoleBindingsRequest_FieldTerminalPathArrayOfValues{WatchRoleBindingsRequest_FieldTerminalPath: *fp, values: values.([]watch_type.WatchType)}
	case WatchRoleBindingsRequest_FieldPathSelectorParent:
		return &WatchRoleBindingsRequest_FieldTerminalPathArrayOfValues{WatchRoleBindingsRequest_FieldTerminalPath: *fp, values: values.([]*role_binding.ParentReference)}
	case WatchRoleBindingsRequest_FieldPathSelectorPageSize:
		return &WatchRoleBindingsRequest_FieldTerminalPathArrayOfValues{WatchRoleBindingsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case WatchRoleBindingsRequest_FieldPathSelectorPageToken:
		return &WatchRoleBindingsRequest_FieldTerminalPathArrayOfValues{WatchRoleBindingsRequest_FieldTerminalPath: *fp, values: values.([]*role_binding.PagerCursor)}
	case WatchRoleBindingsRequest_FieldPathSelectorOrderBy:
		return &WatchRoleBindingsRequest_FieldTerminalPathArrayOfValues{WatchRoleBindingsRequest_FieldTerminalPath: *fp, values: values.([]*role_binding.OrderBy)}
	case WatchRoleBindingsRequest_FieldPathSelectorResumeToken:
		return &WatchRoleBindingsRequest_FieldTerminalPathArrayOfValues{WatchRoleBindingsRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchRoleBindingsRequest_FieldPathSelectorStartingTime:
		return &WatchRoleBindingsRequest_FieldTerminalPathArrayOfValues{WatchRoleBindingsRequest_FieldTerminalPath: *fp, values: values.([]*timestamp.Timestamp)}
	case WatchRoleBindingsRequest_FieldPathSelectorFilter:
		return &WatchRoleBindingsRequest_FieldTerminalPathArrayOfValues{WatchRoleBindingsRequest_FieldTerminalPath: *fp, values: values.([]*role_binding.Filter)}
	case WatchRoleBindingsRequest_FieldPathSelectorFieldMask:
		return &WatchRoleBindingsRequest_FieldTerminalPathArrayOfValues{WatchRoleBindingsRequest_FieldTerminalPath: *fp, values: values.([]*role_binding.RoleBinding_FieldMask)}
	case WatchRoleBindingsRequest_FieldPathSelectorView:
		return &WatchRoleBindingsRequest_FieldTerminalPathArrayOfValues{WatchRoleBindingsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	case WatchRoleBindingsRequest_FieldPathSelectorMaxChunkSize:
		return &WatchRoleBindingsRequest_FieldTerminalPathArrayOfValues{WatchRoleBindingsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRoleBindingsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchRoleBindingsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchRoleBindingsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchRoleBindingsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRoleBindingsRequest: %d", fp.selector))
	}
}

func (fp *WatchRoleBindingsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchRoleBindingsRequest_FieldPathValue allows storing values for WatchRoleBindingsRequest fields according to their type
type WatchRoleBindingsRequest_FieldPathValue interface {
	WatchRoleBindingsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchRoleBindingsRequest)
	CompareWith(*WatchRoleBindingsRequest) (cmp int, comparable bool)
}

func ParseWatchRoleBindingsRequest_FieldPathValue(pathStr, valueStr string) (WatchRoleBindingsRequest_FieldPathValue, error) {
	fp, err := ParseWatchRoleBindingsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchRoleBindingsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchRoleBindingsRequest_FieldPathValue), nil
}

func MustParseWatchRoleBindingsRequest_FieldPathValue(pathStr, valueStr string) WatchRoleBindingsRequest_FieldPathValue {
	fpv, err := ParseWatchRoleBindingsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchRoleBindingsRequest_FieldTerminalPathValue struct {
	WatchRoleBindingsRequest_FieldTerminalPath
	value interface{}
}

var _ WatchRoleBindingsRequest_FieldPathValue = (*WatchRoleBindingsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchRoleBindingsRequest' as interface{}
func (fpv *WatchRoleBindingsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchRoleBindingsRequest_FieldTerminalPathValue) AsTypeValue() (watch_type.WatchType, bool) {
	res, ok := fpv.value.(watch_type.WatchType)
	return res, ok
}
func (fpv *WatchRoleBindingsRequest_FieldTerminalPathValue) AsParentValue() (*role_binding.ParentReference, bool) {
	res, ok := fpv.value.(*role_binding.ParentReference)
	return res, ok
}
func (fpv *WatchRoleBindingsRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *WatchRoleBindingsRequest_FieldTerminalPathValue) AsPageTokenValue() (*role_binding.PagerCursor, bool) {
	res, ok := fpv.value.(*role_binding.PagerCursor)
	return res, ok
}
func (fpv *WatchRoleBindingsRequest_FieldTerminalPathValue) AsOrderByValue() (*role_binding.OrderBy, bool) {
	res, ok := fpv.value.(*role_binding.OrderBy)
	return res, ok
}
func (fpv *WatchRoleBindingsRequest_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchRoleBindingsRequest_FieldTerminalPathValue) AsStartingTimeValue() (*timestamp.Timestamp, bool) {
	res, ok := fpv.value.(*timestamp.Timestamp)
	return res, ok
}
func (fpv *WatchRoleBindingsRequest_FieldTerminalPathValue) AsFilterValue() (*role_binding.Filter, bool) {
	res, ok := fpv.value.(*role_binding.Filter)
	return res, ok
}
func (fpv *WatchRoleBindingsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*role_binding.RoleBinding_FieldMask, bool) {
	res, ok := fpv.value.(*role_binding.RoleBinding_FieldMask)
	return res, ok
}
func (fpv *WatchRoleBindingsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}
func (fpv *WatchRoleBindingsRequest_FieldTerminalPathValue) AsMaxChunkSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object WatchRoleBindingsRequest
func (fpv *WatchRoleBindingsRequest_FieldTerminalPathValue) SetTo(target **WatchRoleBindingsRequest) {
	if *target == nil {
		*target = new(WatchRoleBindingsRequest)
	}
	switch fpv.selector {
	case WatchRoleBindingsRequest_FieldPathSelectorType:
		(*target).Type = fpv.value.(watch_type.WatchType)
	case WatchRoleBindingsRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*role_binding.ParentReference)
	case WatchRoleBindingsRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case WatchRoleBindingsRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*role_binding.PagerCursor)
	case WatchRoleBindingsRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*role_binding.OrderBy)
	case WatchRoleBindingsRequest_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchRoleBindingsRequest_FieldPathSelectorStartingTime:
		(*target).StartingTime = fpv.value.(*timestamp.Timestamp)
	case WatchRoleBindingsRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*role_binding.Filter)
	case WatchRoleBindingsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*role_binding.RoleBinding_FieldMask)
	case WatchRoleBindingsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	case WatchRoleBindingsRequest_FieldPathSelectorMaxChunkSize:
		(*target).MaxChunkSize = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRoleBindingsRequest: %d", fpv.selector))
	}
}

func (fpv *WatchRoleBindingsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchRoleBindingsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchRoleBindingsRequest_FieldTerminalPathValue' with the value under path in 'WatchRoleBindingsRequest'.
func (fpv *WatchRoleBindingsRequest_FieldTerminalPathValue) CompareWith(source *WatchRoleBindingsRequest) (int, bool) {
	switch fpv.selector {
	case WatchRoleBindingsRequest_FieldPathSelectorType:
		leftValue := fpv.value.(watch_type.WatchType)
		rightValue := source.GetType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchRoleBindingsRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*role_binding.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchRoleBindingsRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchRoleBindingsRequest_FieldPathSelectorPageToken:
		return 0, false
	case WatchRoleBindingsRequest_FieldPathSelectorOrderBy:
		return 0, false
	case WatchRoleBindingsRequest_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchRoleBindingsRequest_FieldPathSelectorStartingTime:
		leftValue := fpv.value.(*timestamp.Timestamp)
		rightValue := source.GetStartingTime()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.AsTime().Equal(rightValue.AsTime()) {
			return 0, true
		} else if leftValue.AsTime().Before(rightValue.AsTime()) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchRoleBindingsRequest_FieldPathSelectorFilter:
		return 0, false
	case WatchRoleBindingsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchRoleBindingsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchRoleBindingsRequest_FieldPathSelectorMaxChunkSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetMaxChunkSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRoleBindingsRequest: %d", fpv.selector))
	}
}

func (fpv *WatchRoleBindingsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchRoleBindingsRequest))
}

// WatchRoleBindingsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchRoleBindingsRequest according to their type
// Present only for array (repeated) types.
type WatchRoleBindingsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchRoleBindingsRequest_FieldPath
	ContainsValue(*WatchRoleBindingsRequest) bool
}

// ParseWatchRoleBindingsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchRoleBindingsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchRoleBindingsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchRoleBindingsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchRoleBindingsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchRoleBindingsRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchRoleBindingsRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchRoleBindingsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchRoleBindingsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchRoleBindingsRequest_FieldTerminalPathArrayItemValue struct {
	WatchRoleBindingsRequest_FieldTerminalPath
	value interface{}
}

var _ WatchRoleBindingsRequest_FieldPathArrayItemValue = (*WatchRoleBindingsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchRoleBindingsRequest as interface{}
func (fpaiv *WatchRoleBindingsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchRoleBindingsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchRoleBindingsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchRoleBindingsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchRoleBindingsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchRoleBindingsRequest'
func (fpaiv *WatchRoleBindingsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchRoleBindingsRequest) bool {
	slice := fpaiv.WatchRoleBindingsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchRoleBindingsRequest_FieldPathArrayOfValues allows storing slice of values for WatchRoleBindingsRequest fields according to their type
type WatchRoleBindingsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchRoleBindingsRequest_FieldPath
}

func ParseWatchRoleBindingsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchRoleBindingsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchRoleBindingsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchRoleBindingsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchRoleBindingsRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchRoleBindingsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchRoleBindingsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchRoleBindingsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchRoleBindingsRequest_FieldTerminalPathArrayOfValues struct {
	WatchRoleBindingsRequest_FieldTerminalPath
	values interface{}
}

var _ WatchRoleBindingsRequest_FieldPathArrayOfValues = (*WatchRoleBindingsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchRoleBindingsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchRoleBindingsRequest_FieldPathSelectorType:
		for _, v := range fpaov.values.([]watch_type.WatchType) {
			values = append(values, v)
		}
	case WatchRoleBindingsRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*role_binding.ParentReference) {
			values = append(values, v)
		}
	case WatchRoleBindingsRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case WatchRoleBindingsRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*role_binding.PagerCursor) {
			values = append(values, v)
		}
	case WatchRoleBindingsRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*role_binding.OrderBy) {
			values = append(values, v)
		}
	case WatchRoleBindingsRequest_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchRoleBindingsRequest_FieldPathSelectorStartingTime:
		for _, v := range fpaov.values.([]*timestamp.Timestamp) {
			values = append(values, v)
		}
	case WatchRoleBindingsRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*role_binding.Filter) {
			values = append(values, v)
		}
	case WatchRoleBindingsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*role_binding.RoleBinding_FieldMask) {
			values = append(values, v)
		}
	case WatchRoleBindingsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	case WatchRoleBindingsRequest_FieldPathSelectorMaxChunkSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchRoleBindingsRequest_FieldTerminalPathArrayOfValues) AsTypeArrayOfValues() ([]watch_type.WatchType, bool) {
	res, ok := fpaov.values.([]watch_type.WatchType)
	return res, ok
}
func (fpaov *WatchRoleBindingsRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*role_binding.ParentReference, bool) {
	res, ok := fpaov.values.([]*role_binding.ParentReference)
	return res, ok
}
func (fpaov *WatchRoleBindingsRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *WatchRoleBindingsRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*role_binding.PagerCursor, bool) {
	res, ok := fpaov.values.([]*role_binding.PagerCursor)
	return res, ok
}
func (fpaov *WatchRoleBindingsRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*role_binding.OrderBy, bool) {
	res, ok := fpaov.values.([]*role_binding.OrderBy)
	return res, ok
}
func (fpaov *WatchRoleBindingsRequest_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchRoleBindingsRequest_FieldTerminalPathArrayOfValues) AsStartingTimeArrayOfValues() ([]*timestamp.Timestamp, bool) {
	res, ok := fpaov.values.([]*timestamp.Timestamp)
	return res, ok
}
func (fpaov *WatchRoleBindingsRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*role_binding.Filter, bool) {
	res, ok := fpaov.values.([]*role_binding.Filter)
	return res, ok
}
func (fpaov *WatchRoleBindingsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*role_binding.RoleBinding_FieldMask, bool) {
	res, ok := fpaov.values.([]*role_binding.RoleBinding_FieldMask)
	return res, ok
}
func (fpaov *WatchRoleBindingsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}
func (fpaov *WatchRoleBindingsRequest_FieldTerminalPathArrayOfValues) AsMaxChunkSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchRoleBindingsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchRoleBindingsResponse_FieldPathSelector
	Get(source *WatchRoleBindingsResponse) []interface{}
	GetSingle(source *WatchRoleBindingsResponse) (interface{}, bool)
	ClearValue(item *WatchRoleBindingsResponse)

	// Those methods build corresponding WatchRoleBindingsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchRoleBindingsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchRoleBindingsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchRoleBindingsResponse_FieldPathArrayItemValue
}

type WatchRoleBindingsResponse_FieldPathSelector int32

const (
	WatchRoleBindingsResponse_FieldPathSelectorRoleBindingChanges WatchRoleBindingsResponse_FieldPathSelector = 0
	WatchRoleBindingsResponse_FieldPathSelectorIsCurrent          WatchRoleBindingsResponse_FieldPathSelector = 1
	WatchRoleBindingsResponse_FieldPathSelectorPageTokenChange    WatchRoleBindingsResponse_FieldPathSelector = 2
	WatchRoleBindingsResponse_FieldPathSelectorResumeToken        WatchRoleBindingsResponse_FieldPathSelector = 3
	WatchRoleBindingsResponse_FieldPathSelectorSnapshotSize       WatchRoleBindingsResponse_FieldPathSelector = 4
	WatchRoleBindingsResponse_FieldPathSelectorIsSoftReset        WatchRoleBindingsResponse_FieldPathSelector = 5
	WatchRoleBindingsResponse_FieldPathSelectorIsHardReset        WatchRoleBindingsResponse_FieldPathSelector = 6
)

func (s WatchRoleBindingsResponse_FieldPathSelector) String() string {
	switch s {
	case WatchRoleBindingsResponse_FieldPathSelectorRoleBindingChanges:
		return "role_binding_changes"
	case WatchRoleBindingsResponse_FieldPathSelectorIsCurrent:
		return "is_current"
	case WatchRoleBindingsResponse_FieldPathSelectorPageTokenChange:
		return "page_token_change"
	case WatchRoleBindingsResponse_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchRoleBindingsResponse_FieldPathSelectorSnapshotSize:
		return "snapshot_size"
	case WatchRoleBindingsResponse_FieldPathSelectorIsSoftReset:
		return "is_soft_reset"
	case WatchRoleBindingsResponse_FieldPathSelectorIsHardReset:
		return "is_hard_reset"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRoleBindingsResponse: %d", s))
	}
}

func BuildWatchRoleBindingsResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchRoleBindingsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchRoleBindingsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "role_binding_changes", "roleBindingChanges", "role-binding-changes":
			return &WatchRoleBindingsResponse_FieldTerminalPath{selector: WatchRoleBindingsResponse_FieldPathSelectorRoleBindingChanges}, nil
		case "is_current", "isCurrent", "is-current":
			return &WatchRoleBindingsResponse_FieldTerminalPath{selector: WatchRoleBindingsResponse_FieldPathSelectorIsCurrent}, nil
		case "page_token_change", "pageTokenChange", "page-token-change":
			return &WatchRoleBindingsResponse_FieldTerminalPath{selector: WatchRoleBindingsResponse_FieldPathSelectorPageTokenChange}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchRoleBindingsResponse_FieldTerminalPath{selector: WatchRoleBindingsResponse_FieldPathSelectorResumeToken}, nil
		case "snapshot_size", "snapshotSize", "snapshot-size":
			return &WatchRoleBindingsResponse_FieldTerminalPath{selector: WatchRoleBindingsResponse_FieldPathSelectorSnapshotSize}, nil
		case "is_soft_reset", "isSoftReset", "is-soft-reset":
			return &WatchRoleBindingsResponse_FieldTerminalPath{selector: WatchRoleBindingsResponse_FieldPathSelectorIsSoftReset}, nil
		case "is_hard_reset", "isHardReset", "is-hard-reset":
			return &WatchRoleBindingsResponse_FieldTerminalPath{selector: WatchRoleBindingsResponse_FieldPathSelectorIsHardReset}, nil
		}
	} else {
		switch fp[0] {
		case "page_token_change", "pageTokenChange", "page-token-change":
			if subpath, err := BuildWatchRoleBindingsResponsePageTokenChange_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &WatchRoleBindingsResponse_FieldSubPath{selector: WatchRoleBindingsResponse_FieldPathSelectorPageTokenChange, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchRoleBindingsResponse", fp)
}

func ParseWatchRoleBindingsResponse_FieldPath(rawField string) (WatchRoleBindingsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchRoleBindingsResponse_FieldPath(fp)
}

func MustParseWatchRoleBindingsResponse_FieldPath(rawField string) WatchRoleBindingsResponse_FieldPath {
	fp, err := ParseWatchRoleBindingsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchRoleBindingsResponse_FieldTerminalPath struct {
	selector WatchRoleBindingsResponse_FieldPathSelector
}

var _ WatchRoleBindingsResponse_FieldPath = (*WatchRoleBindingsResponse_FieldTerminalPath)(nil)

func (fp *WatchRoleBindingsResponse_FieldTerminalPath) Selector() WatchRoleBindingsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchRoleBindingsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchRoleBindingsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchRoleBindingsResponse
func (fp *WatchRoleBindingsResponse_FieldTerminalPath) Get(source *WatchRoleBindingsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchRoleBindingsResponse_FieldPathSelectorRoleBindingChanges:
			for _, value := range source.GetRoleBindingChanges() {
				values = append(values, value)
			}
		case WatchRoleBindingsResponse_FieldPathSelectorIsCurrent:
			values = append(values, source.IsCurrent)
		case WatchRoleBindingsResponse_FieldPathSelectorPageTokenChange:
			if source.PageTokenChange != nil {
				values = append(values, source.PageTokenChange)
			}
		case WatchRoleBindingsResponse_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchRoleBindingsResponse_FieldPathSelectorSnapshotSize:
			values = append(values, source.SnapshotSize)
		case WatchRoleBindingsResponse_FieldPathSelectorIsSoftReset:
			values = append(values, source.IsSoftReset)
		case WatchRoleBindingsResponse_FieldPathSelectorIsHardReset:
			values = append(values, source.IsHardReset)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchRoleBindingsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchRoleBindingsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchRoleBindingsResponse))
}

// GetSingle returns value pointed by specific field of from source WatchRoleBindingsResponse
func (fp *WatchRoleBindingsResponse_FieldTerminalPath) GetSingle(source *WatchRoleBindingsResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchRoleBindingsResponse_FieldPathSelectorRoleBindingChanges:
		res := source.GetRoleBindingChanges()
		return res, res != nil
	case WatchRoleBindingsResponse_FieldPathSelectorIsCurrent:
		return source.GetIsCurrent(), source != nil
	case WatchRoleBindingsResponse_FieldPathSelectorPageTokenChange:
		res := source.GetPageTokenChange()
		return res, res != nil
	case WatchRoleBindingsResponse_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchRoleBindingsResponse_FieldPathSelectorSnapshotSize:
		return source.GetSnapshotSize(), source != nil
	case WatchRoleBindingsResponse_FieldPathSelectorIsSoftReset:
		return source.GetIsSoftReset(), source != nil
	case WatchRoleBindingsResponse_FieldPathSelectorIsHardReset:
		return source.GetIsHardReset(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRoleBindingsResponse: %d", fp.selector))
	}
}

func (fp *WatchRoleBindingsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchRoleBindingsResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchRoleBindingsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchRoleBindingsResponse_FieldPathSelectorRoleBindingChanges:
		return ([]*role_binding.RoleBindingChange)(nil)
	case WatchRoleBindingsResponse_FieldPathSelectorIsCurrent:
		return false
	case WatchRoleBindingsResponse_FieldPathSelectorPageTokenChange:
		return (*WatchRoleBindingsResponse_PageTokenChange)(nil)
	case WatchRoleBindingsResponse_FieldPathSelectorResumeToken:
		return ""
	case WatchRoleBindingsResponse_FieldPathSelectorSnapshotSize:
		return int64(0)
	case WatchRoleBindingsResponse_FieldPathSelectorIsSoftReset:
		return false
	case WatchRoleBindingsResponse_FieldPathSelectorIsHardReset:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRoleBindingsResponse: %d", fp.selector))
	}
}

func (fp *WatchRoleBindingsResponse_FieldTerminalPath) ClearValue(item *WatchRoleBindingsResponse) {
	if item != nil {
		switch fp.selector {
		case WatchRoleBindingsResponse_FieldPathSelectorRoleBindingChanges:
			item.RoleBindingChanges = nil
		case WatchRoleBindingsResponse_FieldPathSelectorIsCurrent:
			item.IsCurrent = false
		case WatchRoleBindingsResponse_FieldPathSelectorPageTokenChange:
			item.PageTokenChange = nil
		case WatchRoleBindingsResponse_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchRoleBindingsResponse_FieldPathSelectorSnapshotSize:
			item.SnapshotSize = int64(0)
		case WatchRoleBindingsResponse_FieldPathSelectorIsSoftReset:
			item.IsSoftReset = false
		case WatchRoleBindingsResponse_FieldPathSelectorIsHardReset:
			item.IsHardReset = false
		default:
			panic(fmt.Sprintf("Invalid selector for WatchRoleBindingsResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchRoleBindingsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchRoleBindingsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchRoleBindingsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchRoleBindingsResponse_FieldPathSelectorRoleBindingChanges ||
		fp.selector == WatchRoleBindingsResponse_FieldPathSelectorIsCurrent ||
		fp.selector == WatchRoleBindingsResponse_FieldPathSelectorResumeToken ||
		fp.selector == WatchRoleBindingsResponse_FieldPathSelectorSnapshotSize ||
		fp.selector == WatchRoleBindingsResponse_FieldPathSelectorIsSoftReset ||
		fp.selector == WatchRoleBindingsResponse_FieldPathSelectorIsHardReset
}

func (fp *WatchRoleBindingsResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchRoleBindingsResponse_FieldTerminalPath) WithIValue(value interface{}) WatchRoleBindingsResponse_FieldPathValue {
	switch fp.selector {
	case WatchRoleBindingsResponse_FieldPathSelectorRoleBindingChanges:
		return &WatchRoleBindingsResponse_FieldTerminalPathValue{WatchRoleBindingsResponse_FieldTerminalPath: *fp, value: value.([]*role_binding.RoleBindingChange)}
	case WatchRoleBindingsResponse_FieldPathSelectorIsCurrent:
		return &WatchRoleBindingsResponse_FieldTerminalPathValue{WatchRoleBindingsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchRoleBindingsResponse_FieldPathSelectorPageTokenChange:
		return &WatchRoleBindingsResponse_FieldTerminalPathValue{WatchRoleBindingsResponse_FieldTerminalPath: *fp, value: value.(*WatchRoleBindingsResponse_PageTokenChange)}
	case WatchRoleBindingsResponse_FieldPathSelectorResumeToken:
		return &WatchRoleBindingsResponse_FieldTerminalPathValue{WatchRoleBindingsResponse_FieldTerminalPath: *fp, value: value.(string)}
	case WatchRoleBindingsResponse_FieldPathSelectorSnapshotSize:
		return &WatchRoleBindingsResponse_FieldTerminalPathValue{WatchRoleBindingsResponse_FieldTerminalPath: *fp, value: value.(int64)}
	case WatchRoleBindingsResponse_FieldPathSelectorIsSoftReset:
		return &WatchRoleBindingsResponse_FieldTerminalPathValue{WatchRoleBindingsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchRoleBindingsResponse_FieldPathSelectorIsHardReset:
		return &WatchRoleBindingsResponse_FieldTerminalPathValue{WatchRoleBindingsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRoleBindingsResponse: %d", fp.selector))
	}
}

func (fp *WatchRoleBindingsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchRoleBindingsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchRoleBindingsResponse_FieldPathArrayOfValues {
	fpaov := &WatchRoleBindingsResponse_FieldTerminalPathArrayOfValues{WatchRoleBindingsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchRoleBindingsResponse_FieldPathSelectorRoleBindingChanges:
		return &WatchRoleBindingsResponse_FieldTerminalPathArrayOfValues{WatchRoleBindingsResponse_FieldTerminalPath: *fp, values: values.([][]*role_binding.RoleBindingChange)}
	case WatchRoleBindingsResponse_FieldPathSelectorIsCurrent:
		return &WatchRoleBindingsResponse_FieldTerminalPathArrayOfValues{WatchRoleBindingsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchRoleBindingsResponse_FieldPathSelectorPageTokenChange:
		return &WatchRoleBindingsResponse_FieldTerminalPathArrayOfValues{WatchRoleBindingsResponse_FieldTerminalPath: *fp, values: values.([]*WatchRoleBindingsResponse_PageTokenChange)}
	case WatchRoleBindingsResponse_FieldPathSelectorResumeToken:
		return &WatchRoleBindingsResponse_FieldTerminalPathArrayOfValues{WatchRoleBindingsResponse_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchRoleBindingsResponse_FieldPathSelectorSnapshotSize:
		return &WatchRoleBindingsResponse_FieldTerminalPathArrayOfValues{WatchRoleBindingsResponse_FieldTerminalPath: *fp, values: values.([]int64)}
	case WatchRoleBindingsResponse_FieldPathSelectorIsSoftReset:
		return &WatchRoleBindingsResponse_FieldTerminalPathArrayOfValues{WatchRoleBindingsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchRoleBindingsResponse_FieldPathSelectorIsHardReset:
		return &WatchRoleBindingsResponse_FieldTerminalPathArrayOfValues{WatchRoleBindingsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRoleBindingsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchRoleBindingsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchRoleBindingsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchRoleBindingsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case WatchRoleBindingsResponse_FieldPathSelectorRoleBindingChanges:
		return &WatchRoleBindingsResponse_FieldTerminalPathArrayItemValue{WatchRoleBindingsResponse_FieldTerminalPath: *fp, value: value.(*role_binding.RoleBindingChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRoleBindingsResponse: %d", fp.selector))
	}
}

func (fp *WatchRoleBindingsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type WatchRoleBindingsResponse_FieldSubPath struct {
	selector WatchRoleBindingsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ WatchRoleBindingsResponse_FieldPath = (*WatchRoleBindingsResponse_FieldSubPath)(nil)

func (fps *WatchRoleBindingsResponse_FieldSubPath) Selector() WatchRoleBindingsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *WatchRoleBindingsResponse_FieldSubPath) AsPageTokenChangeSubPath() (WatchRoleBindingsResponsePageTokenChange_FieldPath, bool) {
	res, ok := fps.subPath.(WatchRoleBindingsResponsePageTokenChange_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *WatchRoleBindingsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *WatchRoleBindingsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source WatchRoleBindingsResponse
func (fps *WatchRoleBindingsResponse_FieldSubPath) Get(source *WatchRoleBindingsResponse) (values []interface{}) {
	switch fps.selector {
	case WatchRoleBindingsResponse_FieldPathSelectorPageTokenChange:
		values = append(values, fps.subPath.GetRaw(source.GetPageTokenChange())...)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRoleBindingsResponse: %d", fps.selector))
	}
	return
}

func (fps *WatchRoleBindingsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*WatchRoleBindingsResponse))
}

// GetSingle returns value of selected field from source WatchRoleBindingsResponse
func (fps *WatchRoleBindingsResponse_FieldSubPath) GetSingle(source *WatchRoleBindingsResponse) (interface{}, bool) {
	switch fps.selector {
	case WatchRoleBindingsResponse_FieldPathSelectorPageTokenChange:
		if source.GetPageTokenChange() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRoleBindingsResponse: %d", fps.selector))
	}
}

func (fps *WatchRoleBindingsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*WatchRoleBindingsResponse))
}

// GetDefault returns a default value of the field type
func (fps *WatchRoleBindingsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *WatchRoleBindingsResponse_FieldSubPath) ClearValue(item *WatchRoleBindingsResponse) {
	if item != nil {
		switch fps.selector {
		case WatchRoleBindingsResponse_FieldPathSelectorPageTokenChange:
			fps.subPath.ClearValueRaw(item.PageTokenChange)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchRoleBindingsResponse: %d", fps.selector))
		}
	}
}

func (fps *WatchRoleBindingsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*WatchRoleBindingsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *WatchRoleBindingsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *WatchRoleBindingsResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&WatchRoleBindingsResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *WatchRoleBindingsResponse_FieldSubPath) WithIValue(value interface{}) WatchRoleBindingsResponse_FieldPathValue {
	return &WatchRoleBindingsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *WatchRoleBindingsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *WatchRoleBindingsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) WatchRoleBindingsResponse_FieldPathArrayOfValues {
	return &WatchRoleBindingsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *WatchRoleBindingsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *WatchRoleBindingsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) WatchRoleBindingsResponse_FieldPathArrayItemValue {
	return &WatchRoleBindingsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *WatchRoleBindingsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// WatchRoleBindingsResponse_FieldPathValue allows storing values for WatchRoleBindingsResponse fields according to their type
type WatchRoleBindingsResponse_FieldPathValue interface {
	WatchRoleBindingsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchRoleBindingsResponse)
	CompareWith(*WatchRoleBindingsResponse) (cmp int, comparable bool)
}

func ParseWatchRoleBindingsResponse_FieldPathValue(pathStr, valueStr string) (WatchRoleBindingsResponse_FieldPathValue, error) {
	fp, err := ParseWatchRoleBindingsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchRoleBindingsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchRoleBindingsResponse_FieldPathValue), nil
}

func MustParseWatchRoleBindingsResponse_FieldPathValue(pathStr, valueStr string) WatchRoleBindingsResponse_FieldPathValue {
	fpv, err := ParseWatchRoleBindingsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchRoleBindingsResponse_FieldTerminalPathValue struct {
	WatchRoleBindingsResponse_FieldTerminalPath
	value interface{}
}

var _ WatchRoleBindingsResponse_FieldPathValue = (*WatchRoleBindingsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchRoleBindingsResponse' as interface{}
func (fpv *WatchRoleBindingsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchRoleBindingsResponse_FieldTerminalPathValue) AsRoleBindingChangesValue() ([]*role_binding.RoleBindingChange, bool) {
	res, ok := fpv.value.([]*role_binding.RoleBindingChange)
	return res, ok
}
func (fpv *WatchRoleBindingsResponse_FieldTerminalPathValue) AsIsCurrentValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchRoleBindingsResponse_FieldTerminalPathValue) AsPageTokenChangeValue() (*WatchRoleBindingsResponse_PageTokenChange, bool) {
	res, ok := fpv.value.(*WatchRoleBindingsResponse_PageTokenChange)
	return res, ok
}
func (fpv *WatchRoleBindingsResponse_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchRoleBindingsResponse_FieldTerminalPathValue) AsSnapshotSizeValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}
func (fpv *WatchRoleBindingsResponse_FieldTerminalPathValue) AsIsSoftResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchRoleBindingsResponse_FieldTerminalPathValue) AsIsHardResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object WatchRoleBindingsResponse
func (fpv *WatchRoleBindingsResponse_FieldTerminalPathValue) SetTo(target **WatchRoleBindingsResponse) {
	if *target == nil {
		*target = new(WatchRoleBindingsResponse)
	}
	switch fpv.selector {
	case WatchRoleBindingsResponse_FieldPathSelectorRoleBindingChanges:
		(*target).RoleBindingChanges = fpv.value.([]*role_binding.RoleBindingChange)
	case WatchRoleBindingsResponse_FieldPathSelectorIsCurrent:
		(*target).IsCurrent = fpv.value.(bool)
	case WatchRoleBindingsResponse_FieldPathSelectorPageTokenChange:
		(*target).PageTokenChange = fpv.value.(*WatchRoleBindingsResponse_PageTokenChange)
	case WatchRoleBindingsResponse_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchRoleBindingsResponse_FieldPathSelectorSnapshotSize:
		(*target).SnapshotSize = fpv.value.(int64)
	case WatchRoleBindingsResponse_FieldPathSelectorIsSoftReset:
		(*target).IsSoftReset = fpv.value.(bool)
	case WatchRoleBindingsResponse_FieldPathSelectorIsHardReset:
		(*target).IsHardReset = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRoleBindingsResponse: %d", fpv.selector))
	}
}

func (fpv *WatchRoleBindingsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchRoleBindingsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchRoleBindingsResponse_FieldTerminalPathValue' with the value under path in 'WatchRoleBindingsResponse'.
func (fpv *WatchRoleBindingsResponse_FieldTerminalPathValue) CompareWith(source *WatchRoleBindingsResponse) (int, bool) {
	switch fpv.selector {
	case WatchRoleBindingsResponse_FieldPathSelectorRoleBindingChanges:
		return 0, false
	case WatchRoleBindingsResponse_FieldPathSelectorIsCurrent:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsCurrent()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchRoleBindingsResponse_FieldPathSelectorPageTokenChange:
		return 0, false
	case WatchRoleBindingsResponse_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchRoleBindingsResponse_FieldPathSelectorSnapshotSize:
		leftValue := fpv.value.(int64)
		rightValue := source.GetSnapshotSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchRoleBindingsResponse_FieldPathSelectorIsSoftReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsSoftReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchRoleBindingsResponse_FieldPathSelectorIsHardReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsHardReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRoleBindingsResponse: %d", fpv.selector))
	}
}

func (fpv *WatchRoleBindingsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchRoleBindingsResponse))
}

type WatchRoleBindingsResponse_FieldSubPathValue struct {
	WatchRoleBindingsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ WatchRoleBindingsResponse_FieldPathValue = (*WatchRoleBindingsResponse_FieldSubPathValue)(nil)

func (fpvs *WatchRoleBindingsResponse_FieldSubPathValue) AsPageTokenChangePathValue() (WatchRoleBindingsResponsePageTokenChange_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(WatchRoleBindingsResponsePageTokenChange_FieldPathValue)
	return res, ok
}

func (fpvs *WatchRoleBindingsResponse_FieldSubPathValue) SetTo(target **WatchRoleBindingsResponse) {
	if *target == nil {
		*target = new(WatchRoleBindingsResponse)
	}
	switch fpvs.Selector() {
	case WatchRoleBindingsResponse_FieldPathSelectorPageTokenChange:
		fpvs.subPathValue.(WatchRoleBindingsResponsePageTokenChange_FieldPathValue).SetTo(&(*target).PageTokenChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRoleBindingsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchRoleBindingsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchRoleBindingsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *WatchRoleBindingsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *WatchRoleBindingsResponse_FieldSubPathValue) CompareWith(source *WatchRoleBindingsResponse) (int, bool) {
	switch fpvs.Selector() {
	case WatchRoleBindingsResponse_FieldPathSelectorPageTokenChange:
		return fpvs.subPathValue.(WatchRoleBindingsResponsePageTokenChange_FieldPathValue).CompareWith(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRoleBindingsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchRoleBindingsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*WatchRoleBindingsResponse))
}

// WatchRoleBindingsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchRoleBindingsResponse according to their type
// Present only for array (repeated) types.
type WatchRoleBindingsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchRoleBindingsResponse_FieldPath
	ContainsValue(*WatchRoleBindingsResponse) bool
}

// ParseWatchRoleBindingsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchRoleBindingsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchRoleBindingsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchRoleBindingsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchRoleBindingsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchRoleBindingsResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchRoleBindingsResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchRoleBindingsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchRoleBindingsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchRoleBindingsResponse_FieldTerminalPathArrayItemValue struct {
	WatchRoleBindingsResponse_FieldTerminalPath
	value interface{}
}

var _ WatchRoleBindingsResponse_FieldPathArrayItemValue = (*WatchRoleBindingsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchRoleBindingsResponse as interface{}
func (fpaiv *WatchRoleBindingsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *WatchRoleBindingsResponse_FieldTerminalPathArrayItemValue) AsRoleBindingChangesItemValue() (*role_binding.RoleBindingChange, bool) {
	res, ok := fpaiv.value.(*role_binding.RoleBindingChange)
	return res, ok
}

func (fpaiv *WatchRoleBindingsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchRoleBindingsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchRoleBindingsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchRoleBindingsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchRoleBindingsResponse'
func (fpaiv *WatchRoleBindingsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchRoleBindingsResponse) bool {
	slice := fpaiv.WatchRoleBindingsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type WatchRoleBindingsResponse_FieldSubPathArrayItemValue struct {
	WatchRoleBindingsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *WatchRoleBindingsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *WatchRoleBindingsResponse_FieldSubPathArrayItemValue) AsPageTokenChangePathItemValue() (WatchRoleBindingsResponsePageTokenChange_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(WatchRoleBindingsResponsePageTokenChange_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchRoleBindingsResponse'
func (fpaivs *WatchRoleBindingsResponse_FieldSubPathArrayItemValue) ContainsValue(source *WatchRoleBindingsResponse) bool {
	switch fpaivs.Selector() {
	case WatchRoleBindingsResponse_FieldPathSelectorPageTokenChange:
		return fpaivs.subPathItemValue.(WatchRoleBindingsResponsePageTokenChange_FieldPathArrayItemValue).ContainsValue(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRoleBindingsResponse: %d", fpaivs.Selector()))
	}
}

// WatchRoleBindingsResponse_FieldPathArrayOfValues allows storing slice of values for WatchRoleBindingsResponse fields according to their type
type WatchRoleBindingsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchRoleBindingsResponse_FieldPath
}

func ParseWatchRoleBindingsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchRoleBindingsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchRoleBindingsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchRoleBindingsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchRoleBindingsResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchRoleBindingsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchRoleBindingsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchRoleBindingsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchRoleBindingsResponse_FieldTerminalPathArrayOfValues struct {
	WatchRoleBindingsResponse_FieldTerminalPath
	values interface{}
}

var _ WatchRoleBindingsResponse_FieldPathArrayOfValues = (*WatchRoleBindingsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchRoleBindingsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchRoleBindingsResponse_FieldPathSelectorRoleBindingChanges:
		for _, v := range fpaov.values.([][]*role_binding.RoleBindingChange) {
			values = append(values, v)
		}
	case WatchRoleBindingsResponse_FieldPathSelectorIsCurrent:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchRoleBindingsResponse_FieldPathSelectorPageTokenChange:
		for _, v := range fpaov.values.([]*WatchRoleBindingsResponse_PageTokenChange) {
			values = append(values, v)
		}
	case WatchRoleBindingsResponse_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchRoleBindingsResponse_FieldPathSelectorSnapshotSize:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	case WatchRoleBindingsResponse_FieldPathSelectorIsSoftReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchRoleBindingsResponse_FieldPathSelectorIsHardReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchRoleBindingsResponse_FieldTerminalPathArrayOfValues) AsRoleBindingChangesArrayOfValues() ([][]*role_binding.RoleBindingChange, bool) {
	res, ok := fpaov.values.([][]*role_binding.RoleBindingChange)
	return res, ok
}
func (fpaov *WatchRoleBindingsResponse_FieldTerminalPathArrayOfValues) AsIsCurrentArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchRoleBindingsResponse_FieldTerminalPathArrayOfValues) AsPageTokenChangeArrayOfValues() ([]*WatchRoleBindingsResponse_PageTokenChange, bool) {
	res, ok := fpaov.values.([]*WatchRoleBindingsResponse_PageTokenChange)
	return res, ok
}
func (fpaov *WatchRoleBindingsResponse_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchRoleBindingsResponse_FieldTerminalPathArrayOfValues) AsSnapshotSizeArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}
func (fpaov *WatchRoleBindingsResponse_FieldTerminalPathArrayOfValues) AsIsSoftResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchRoleBindingsResponse_FieldTerminalPathArrayOfValues) AsIsHardResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

type WatchRoleBindingsResponse_FieldSubPathArrayOfValues struct {
	WatchRoleBindingsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ WatchRoleBindingsResponse_FieldPathArrayOfValues = (*WatchRoleBindingsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *WatchRoleBindingsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *WatchRoleBindingsResponse_FieldSubPathArrayOfValues) AsPageTokenChangePathArrayOfValues() (WatchRoleBindingsResponsePageTokenChange_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(WatchRoleBindingsResponsePageTokenChange_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchRoleBindingsResponsePageTokenChange_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchRoleBindingsResponsePageTokenChange_FieldPathSelector
	Get(source *WatchRoleBindingsResponse_PageTokenChange) []interface{}
	GetSingle(source *WatchRoleBindingsResponse_PageTokenChange) (interface{}, bool)
	ClearValue(item *WatchRoleBindingsResponse_PageTokenChange)

	// Those methods build corresponding WatchRoleBindingsResponsePageTokenChange_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchRoleBindingsResponsePageTokenChange_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchRoleBindingsResponsePageTokenChange_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchRoleBindingsResponsePageTokenChange_FieldPathArrayItemValue
}

type WatchRoleBindingsResponsePageTokenChange_FieldPathSelector int32

const (
	WatchRoleBindingsResponsePageTokenChange_FieldPathSelectorPrevPageToken WatchRoleBindingsResponsePageTokenChange_FieldPathSelector = 0
	WatchRoleBindingsResponsePageTokenChange_FieldPathSelectorNextPageToken WatchRoleBindingsResponsePageTokenChange_FieldPathSelector = 1
)

func (s WatchRoleBindingsResponsePageTokenChange_FieldPathSelector) String() string {
	switch s {
	case WatchRoleBindingsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case WatchRoleBindingsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRoleBindingsResponse_PageTokenChange: %d", s))
	}
}

func BuildWatchRoleBindingsResponsePageTokenChange_FieldPath(fp gotenobject.RawFieldPath) (WatchRoleBindingsResponsePageTokenChange_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchRoleBindingsResponse_PageTokenChange")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &WatchRoleBindingsResponsePageTokenChange_FieldTerminalPath{selector: WatchRoleBindingsResponsePageTokenChange_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &WatchRoleBindingsResponsePageTokenChange_FieldTerminalPath{selector: WatchRoleBindingsResponsePageTokenChange_FieldPathSelectorNextPageToken}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchRoleBindingsResponse_PageTokenChange", fp)
}

func ParseWatchRoleBindingsResponsePageTokenChange_FieldPath(rawField string) (WatchRoleBindingsResponsePageTokenChange_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchRoleBindingsResponsePageTokenChange_FieldPath(fp)
}

func MustParseWatchRoleBindingsResponsePageTokenChange_FieldPath(rawField string) WatchRoleBindingsResponsePageTokenChange_FieldPath {
	fp, err := ParseWatchRoleBindingsResponsePageTokenChange_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchRoleBindingsResponsePageTokenChange_FieldTerminalPath struct {
	selector WatchRoleBindingsResponsePageTokenChange_FieldPathSelector
}

var _ WatchRoleBindingsResponsePageTokenChange_FieldPath = (*WatchRoleBindingsResponsePageTokenChange_FieldTerminalPath)(nil)

func (fp *WatchRoleBindingsResponsePageTokenChange_FieldTerminalPath) Selector() WatchRoleBindingsResponsePageTokenChange_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchRoleBindingsResponsePageTokenChange_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchRoleBindingsResponsePageTokenChange_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchRoleBindingsResponse_PageTokenChange
func (fp *WatchRoleBindingsResponsePageTokenChange_FieldTerminalPath) Get(source *WatchRoleBindingsResponse_PageTokenChange) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchRoleBindingsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case WatchRoleBindingsResponsePageTokenChange_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchRoleBindingsResponse_PageTokenChange: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchRoleBindingsResponsePageTokenChange_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchRoleBindingsResponse_PageTokenChange))
}

// GetSingle returns value pointed by specific field of from source WatchRoleBindingsResponse_PageTokenChange
func (fp *WatchRoleBindingsResponsePageTokenChange_FieldTerminalPath) GetSingle(source *WatchRoleBindingsResponse_PageTokenChange) (interface{}, bool) {
	switch fp.selector {
	case WatchRoleBindingsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case WatchRoleBindingsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRoleBindingsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchRoleBindingsResponsePageTokenChange_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchRoleBindingsResponse_PageTokenChange))
}

// GetDefault returns a default value of the field type
func (fp *WatchRoleBindingsResponsePageTokenChange_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchRoleBindingsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return (*role_binding.PagerCursor)(nil)
	case WatchRoleBindingsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return (*role_binding.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRoleBindingsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchRoleBindingsResponsePageTokenChange_FieldTerminalPath) ClearValue(item *WatchRoleBindingsResponse_PageTokenChange) {
	if item != nil {
		switch fp.selector {
		case WatchRoleBindingsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case WatchRoleBindingsResponsePageTokenChange_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchRoleBindingsResponse_PageTokenChange: %d", fp.selector))
		}
	}
}

func (fp *WatchRoleBindingsResponsePageTokenChange_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchRoleBindingsResponse_PageTokenChange))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchRoleBindingsResponsePageTokenChange_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchRoleBindingsResponsePageTokenChange_FieldPathSelectorPrevPageToken ||
		fp.selector == WatchRoleBindingsResponsePageTokenChange_FieldPathSelectorNextPageToken
}

func (fp *WatchRoleBindingsResponsePageTokenChange_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchRoleBindingsResponsePageTokenChange_FieldTerminalPath) WithIValue(value interface{}) WatchRoleBindingsResponsePageTokenChange_FieldPathValue {
	switch fp.selector {
	case WatchRoleBindingsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchRoleBindingsResponsePageTokenChange_FieldTerminalPathValue{WatchRoleBindingsResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*role_binding.PagerCursor)}
	case WatchRoleBindingsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchRoleBindingsResponsePageTokenChange_FieldTerminalPathValue{WatchRoleBindingsResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*role_binding.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRoleBindingsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchRoleBindingsResponsePageTokenChange_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchRoleBindingsResponsePageTokenChange_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchRoleBindingsResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov := &WatchRoleBindingsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchRoleBindingsResponsePageTokenChange_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchRoleBindingsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchRoleBindingsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchRoleBindingsResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*role_binding.PagerCursor)}
	case WatchRoleBindingsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchRoleBindingsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchRoleBindingsResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*role_binding.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRoleBindingsResponse_PageTokenChange: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchRoleBindingsResponsePageTokenChange_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchRoleBindingsResponsePageTokenChange_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchRoleBindingsResponsePageTokenChange_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRoleBindingsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchRoleBindingsResponsePageTokenChange_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchRoleBindingsResponsePageTokenChange_FieldPathValue allows storing values for PageTokenChange fields according to their type
type WatchRoleBindingsResponsePageTokenChange_FieldPathValue interface {
	WatchRoleBindingsResponsePageTokenChange_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchRoleBindingsResponse_PageTokenChange)
	CompareWith(*WatchRoleBindingsResponse_PageTokenChange) (cmp int, comparable bool)
}

func ParseWatchRoleBindingsResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) (WatchRoleBindingsResponsePageTokenChange_FieldPathValue, error) {
	fp, err := ParseWatchRoleBindingsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchRoleBindingsResponsePageTokenChange_FieldPathValue), nil
}

func MustParseWatchRoleBindingsResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) WatchRoleBindingsResponsePageTokenChange_FieldPathValue {
	fpv, err := ParseWatchRoleBindingsResponsePageTokenChange_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchRoleBindingsResponsePageTokenChange_FieldTerminalPathValue struct {
	WatchRoleBindingsResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchRoleBindingsResponsePageTokenChange_FieldPathValue = (*WatchRoleBindingsResponsePageTokenChange_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'PageTokenChange' as interface{}
func (fpv *WatchRoleBindingsResponsePageTokenChange_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchRoleBindingsResponsePageTokenChange_FieldTerminalPathValue) AsPrevPageTokenValue() (*role_binding.PagerCursor, bool) {
	res, ok := fpv.value.(*role_binding.PagerCursor)
	return res, ok
}
func (fpv *WatchRoleBindingsResponsePageTokenChange_FieldTerminalPathValue) AsNextPageTokenValue() (*role_binding.PagerCursor, bool) {
	res, ok := fpv.value.(*role_binding.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object PageTokenChange
func (fpv *WatchRoleBindingsResponsePageTokenChange_FieldTerminalPathValue) SetTo(target **WatchRoleBindingsResponse_PageTokenChange) {
	if *target == nil {
		*target = new(WatchRoleBindingsResponse_PageTokenChange)
	}
	switch fpv.selector {
	case WatchRoleBindingsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*role_binding.PagerCursor)
	case WatchRoleBindingsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*role_binding.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRoleBindingsResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchRoleBindingsResponsePageTokenChange_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchRoleBindingsResponse_PageTokenChange)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchRoleBindingsResponsePageTokenChange_FieldTerminalPathValue' with the value under path in 'WatchRoleBindingsResponse_PageTokenChange'.
func (fpv *WatchRoleBindingsResponsePageTokenChange_FieldTerminalPathValue) CompareWith(source *WatchRoleBindingsResponse_PageTokenChange) (int, bool) {
	switch fpv.selector {
	case WatchRoleBindingsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return 0, false
	case WatchRoleBindingsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRoleBindingsResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchRoleBindingsResponsePageTokenChange_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchRoleBindingsResponse_PageTokenChange))
}

// WatchRoleBindingsResponsePageTokenChange_FieldPathArrayItemValue allows storing single item in Path-specific values for PageTokenChange according to their type
// Present only for array (repeated) types.
type WatchRoleBindingsResponsePageTokenChange_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchRoleBindingsResponsePageTokenChange_FieldPath
	ContainsValue(*WatchRoleBindingsResponse_PageTokenChange) bool
}

// ParseWatchRoleBindingsResponsePageTokenChange_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchRoleBindingsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) (WatchRoleBindingsResponsePageTokenChange_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchRoleBindingsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchRoleBindingsResponsePageTokenChange_FieldPathArrayItemValue), nil
}

func MustParseWatchRoleBindingsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) WatchRoleBindingsResponsePageTokenChange_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchRoleBindingsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchRoleBindingsResponsePageTokenChange_FieldTerminalPathArrayItemValue struct {
	WatchRoleBindingsResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchRoleBindingsResponsePageTokenChange_FieldPathArrayItemValue = (*WatchRoleBindingsResponsePageTokenChange_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchRoleBindingsResponse_PageTokenChange as interface{}
func (fpaiv *WatchRoleBindingsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchRoleBindingsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingle(source *WatchRoleBindingsResponse_PageTokenChange) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchRoleBindingsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchRoleBindingsResponse_PageTokenChange))
}

// Contains returns a boolean indicating if value that is being held is present in given 'PageTokenChange'
func (fpaiv *WatchRoleBindingsResponsePageTokenChange_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchRoleBindingsResponse_PageTokenChange) bool {
	slice := fpaiv.WatchRoleBindingsResponsePageTokenChange_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchRoleBindingsResponsePageTokenChange_FieldPathArrayOfValues allows storing slice of values for PageTokenChange fields according to their type
type WatchRoleBindingsResponsePageTokenChange_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchRoleBindingsResponsePageTokenChange_FieldPath
}

func ParseWatchRoleBindingsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchRoleBindingsResponsePageTokenChange_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchRoleBindingsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchRoleBindingsResponsePageTokenChange_FieldPathArrayOfValues), nil
}

func MustParseWatchRoleBindingsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) WatchRoleBindingsResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov, err := ParseWatchRoleBindingsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchRoleBindingsResponsePageTokenChange_FieldTerminalPathArrayOfValues struct {
	WatchRoleBindingsResponsePageTokenChange_FieldTerminalPath
	values interface{}
}

var _ WatchRoleBindingsResponsePageTokenChange_FieldPathArrayOfValues = (*WatchRoleBindingsResponsePageTokenChange_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchRoleBindingsResponsePageTokenChange_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchRoleBindingsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*role_binding.PagerCursor) {
			values = append(values, v)
		}
	case WatchRoleBindingsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*role_binding.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchRoleBindingsResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*role_binding.PagerCursor, bool) {
	res, ok := fpaov.values.([]*role_binding.PagerCursor)
	return res, ok
}
func (fpaov *WatchRoleBindingsResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*role_binding.PagerCursor, bool) {
	res, ok := fpaov.values.([]*role_binding.PagerCursor)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type CreateRoleBindingRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() CreateRoleBindingRequest_FieldPathSelector
	Get(source *CreateRoleBindingRequest) []interface{}
	GetSingle(source *CreateRoleBindingRequest) (interface{}, bool)
	ClearValue(item *CreateRoleBindingRequest)

	// Those methods build corresponding CreateRoleBindingRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) CreateRoleBindingRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) CreateRoleBindingRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) CreateRoleBindingRequest_FieldPathArrayItemValue
}

type CreateRoleBindingRequest_FieldPathSelector int32

const (
	CreateRoleBindingRequest_FieldPathSelectorParent      CreateRoleBindingRequest_FieldPathSelector = 0
	CreateRoleBindingRequest_FieldPathSelectorRoleBinding CreateRoleBindingRequest_FieldPathSelector = 1
)

func (s CreateRoleBindingRequest_FieldPathSelector) String() string {
	switch s {
	case CreateRoleBindingRequest_FieldPathSelectorParent:
		return "parent"
	case CreateRoleBindingRequest_FieldPathSelectorRoleBinding:
		return "role_binding"
	default:
		panic(fmt.Sprintf("Invalid selector for CreateRoleBindingRequest: %d", s))
	}
}

func BuildCreateRoleBindingRequest_FieldPath(fp gotenobject.RawFieldPath) (CreateRoleBindingRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object CreateRoleBindingRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &CreateRoleBindingRequest_FieldTerminalPath{selector: CreateRoleBindingRequest_FieldPathSelectorParent}, nil
		case "role_binding", "roleBinding", "role-binding":
			return &CreateRoleBindingRequest_FieldTerminalPath{selector: CreateRoleBindingRequest_FieldPathSelectorRoleBinding}, nil
		}
	} else {
		switch fp[0] {
		case "role_binding", "roleBinding", "role-binding":
			if subpath, err := role_binding.BuildRoleBinding_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &CreateRoleBindingRequest_FieldSubPath{selector: CreateRoleBindingRequest_FieldPathSelectorRoleBinding, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object CreateRoleBindingRequest", fp)
}

func ParseCreateRoleBindingRequest_FieldPath(rawField string) (CreateRoleBindingRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildCreateRoleBindingRequest_FieldPath(fp)
}

func MustParseCreateRoleBindingRequest_FieldPath(rawField string) CreateRoleBindingRequest_FieldPath {
	fp, err := ParseCreateRoleBindingRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type CreateRoleBindingRequest_FieldTerminalPath struct {
	selector CreateRoleBindingRequest_FieldPathSelector
}

var _ CreateRoleBindingRequest_FieldPath = (*CreateRoleBindingRequest_FieldTerminalPath)(nil)

func (fp *CreateRoleBindingRequest_FieldTerminalPath) Selector() CreateRoleBindingRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *CreateRoleBindingRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *CreateRoleBindingRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source CreateRoleBindingRequest
func (fp *CreateRoleBindingRequest_FieldTerminalPath) Get(source *CreateRoleBindingRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case CreateRoleBindingRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case CreateRoleBindingRequest_FieldPathSelectorRoleBinding:
			if source.RoleBinding != nil {
				values = append(values, source.RoleBinding)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for CreateRoleBindingRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *CreateRoleBindingRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*CreateRoleBindingRequest))
}

// GetSingle returns value pointed by specific field of from source CreateRoleBindingRequest
func (fp *CreateRoleBindingRequest_FieldTerminalPath) GetSingle(source *CreateRoleBindingRequest) (interface{}, bool) {
	switch fp.selector {
	case CreateRoleBindingRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case CreateRoleBindingRequest_FieldPathSelectorRoleBinding:
		res := source.GetRoleBinding()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for CreateRoleBindingRequest: %d", fp.selector))
	}
}

func (fp *CreateRoleBindingRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*CreateRoleBindingRequest))
}

// GetDefault returns a default value of the field type
func (fp *CreateRoleBindingRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case CreateRoleBindingRequest_FieldPathSelectorParent:
		return (*role_binding.ParentReference)(nil)
	case CreateRoleBindingRequest_FieldPathSelectorRoleBinding:
		return (*role_binding.RoleBinding)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateRoleBindingRequest: %d", fp.selector))
	}
}

func (fp *CreateRoleBindingRequest_FieldTerminalPath) ClearValue(item *CreateRoleBindingRequest) {
	if item != nil {
		switch fp.selector {
		case CreateRoleBindingRequest_FieldPathSelectorParent:
			item.Parent = nil
		case CreateRoleBindingRequest_FieldPathSelectorRoleBinding:
			item.RoleBinding = nil
		default:
			panic(fmt.Sprintf("Invalid selector for CreateRoleBindingRequest: %d", fp.selector))
		}
	}
}

func (fp *CreateRoleBindingRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*CreateRoleBindingRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *CreateRoleBindingRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == CreateRoleBindingRequest_FieldPathSelectorParent
}

func (fp *CreateRoleBindingRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *CreateRoleBindingRequest_FieldTerminalPath) WithIValue(value interface{}) CreateRoleBindingRequest_FieldPathValue {
	switch fp.selector {
	case CreateRoleBindingRequest_FieldPathSelectorParent:
		return &CreateRoleBindingRequest_FieldTerminalPathValue{CreateRoleBindingRequest_FieldTerminalPath: *fp, value: value.(*role_binding.ParentReference)}
	case CreateRoleBindingRequest_FieldPathSelectorRoleBinding:
		return &CreateRoleBindingRequest_FieldTerminalPathValue{CreateRoleBindingRequest_FieldTerminalPath: *fp, value: value.(*role_binding.RoleBinding)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateRoleBindingRequest: %d", fp.selector))
	}
}

func (fp *CreateRoleBindingRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *CreateRoleBindingRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) CreateRoleBindingRequest_FieldPathArrayOfValues {
	fpaov := &CreateRoleBindingRequest_FieldTerminalPathArrayOfValues{CreateRoleBindingRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case CreateRoleBindingRequest_FieldPathSelectorParent:
		return &CreateRoleBindingRequest_FieldTerminalPathArrayOfValues{CreateRoleBindingRequest_FieldTerminalPath: *fp, values: values.([]*role_binding.ParentReference)}
	case CreateRoleBindingRequest_FieldPathSelectorRoleBinding:
		return &CreateRoleBindingRequest_FieldTerminalPathArrayOfValues{CreateRoleBindingRequest_FieldTerminalPath: *fp, values: values.([]*role_binding.RoleBinding)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateRoleBindingRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *CreateRoleBindingRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *CreateRoleBindingRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) CreateRoleBindingRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for CreateRoleBindingRequest: %d", fp.selector))
	}
}

func (fp *CreateRoleBindingRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type CreateRoleBindingRequest_FieldSubPath struct {
	selector CreateRoleBindingRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ CreateRoleBindingRequest_FieldPath = (*CreateRoleBindingRequest_FieldSubPath)(nil)

func (fps *CreateRoleBindingRequest_FieldSubPath) Selector() CreateRoleBindingRequest_FieldPathSelector {
	return fps.selector
}
func (fps *CreateRoleBindingRequest_FieldSubPath) AsRoleBindingSubPath() (role_binding.RoleBinding_FieldPath, bool) {
	res, ok := fps.subPath.(role_binding.RoleBinding_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *CreateRoleBindingRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *CreateRoleBindingRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source CreateRoleBindingRequest
func (fps *CreateRoleBindingRequest_FieldSubPath) Get(source *CreateRoleBindingRequest) (values []interface{}) {
	switch fps.selector {
	case CreateRoleBindingRequest_FieldPathSelectorRoleBinding:
		values = append(values, fps.subPath.GetRaw(source.GetRoleBinding())...)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateRoleBindingRequest: %d", fps.selector))
	}
	return
}

func (fps *CreateRoleBindingRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*CreateRoleBindingRequest))
}

// GetSingle returns value of selected field from source CreateRoleBindingRequest
func (fps *CreateRoleBindingRequest_FieldSubPath) GetSingle(source *CreateRoleBindingRequest) (interface{}, bool) {
	switch fps.selector {
	case CreateRoleBindingRequest_FieldPathSelectorRoleBinding:
		if source.GetRoleBinding() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetRoleBinding())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateRoleBindingRequest: %d", fps.selector))
	}
}

func (fps *CreateRoleBindingRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*CreateRoleBindingRequest))
}

// GetDefault returns a default value of the field type
func (fps *CreateRoleBindingRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *CreateRoleBindingRequest_FieldSubPath) ClearValue(item *CreateRoleBindingRequest) {
	if item != nil {
		switch fps.selector {
		case CreateRoleBindingRequest_FieldPathSelectorRoleBinding:
			fps.subPath.ClearValueRaw(item.RoleBinding)
		default:
			panic(fmt.Sprintf("Invalid selector for CreateRoleBindingRequest: %d", fps.selector))
		}
	}
}

func (fps *CreateRoleBindingRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*CreateRoleBindingRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *CreateRoleBindingRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *CreateRoleBindingRequest_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&CreateRoleBindingRequest_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *CreateRoleBindingRequest_FieldSubPath) WithIValue(value interface{}) CreateRoleBindingRequest_FieldPathValue {
	return &CreateRoleBindingRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *CreateRoleBindingRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *CreateRoleBindingRequest_FieldSubPath) WithIArrayOfValues(values interface{}) CreateRoleBindingRequest_FieldPathArrayOfValues {
	return &CreateRoleBindingRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *CreateRoleBindingRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *CreateRoleBindingRequest_FieldSubPath) WithIArrayItemValue(value interface{}) CreateRoleBindingRequest_FieldPathArrayItemValue {
	return &CreateRoleBindingRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *CreateRoleBindingRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// CreateRoleBindingRequest_FieldPathValue allows storing values for CreateRoleBindingRequest fields according to their type
type CreateRoleBindingRequest_FieldPathValue interface {
	CreateRoleBindingRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **CreateRoleBindingRequest)
	CompareWith(*CreateRoleBindingRequest) (cmp int, comparable bool)
}

func ParseCreateRoleBindingRequest_FieldPathValue(pathStr, valueStr string) (CreateRoleBindingRequest_FieldPathValue, error) {
	fp, err := ParseCreateRoleBindingRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateRoleBindingRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(CreateRoleBindingRequest_FieldPathValue), nil
}

func MustParseCreateRoleBindingRequest_FieldPathValue(pathStr, valueStr string) CreateRoleBindingRequest_FieldPathValue {
	fpv, err := ParseCreateRoleBindingRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type CreateRoleBindingRequest_FieldTerminalPathValue struct {
	CreateRoleBindingRequest_FieldTerminalPath
	value interface{}
}

var _ CreateRoleBindingRequest_FieldPathValue = (*CreateRoleBindingRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CreateRoleBindingRequest' as interface{}
func (fpv *CreateRoleBindingRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *CreateRoleBindingRequest_FieldTerminalPathValue) AsParentValue() (*role_binding.ParentReference, bool) {
	res, ok := fpv.value.(*role_binding.ParentReference)
	return res, ok
}
func (fpv *CreateRoleBindingRequest_FieldTerminalPathValue) AsRoleBindingValue() (*role_binding.RoleBinding, bool) {
	res, ok := fpv.value.(*role_binding.RoleBinding)
	return res, ok
}

// SetTo stores value for selected field for object CreateRoleBindingRequest
func (fpv *CreateRoleBindingRequest_FieldTerminalPathValue) SetTo(target **CreateRoleBindingRequest) {
	if *target == nil {
		*target = new(CreateRoleBindingRequest)
	}
	switch fpv.selector {
	case CreateRoleBindingRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*role_binding.ParentReference)
	case CreateRoleBindingRequest_FieldPathSelectorRoleBinding:
		(*target).RoleBinding = fpv.value.(*role_binding.RoleBinding)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateRoleBindingRequest: %d", fpv.selector))
	}
}

func (fpv *CreateRoleBindingRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateRoleBindingRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'CreateRoleBindingRequest_FieldTerminalPathValue' with the value under path in 'CreateRoleBindingRequest'.
func (fpv *CreateRoleBindingRequest_FieldTerminalPathValue) CompareWith(source *CreateRoleBindingRequest) (int, bool) {
	switch fpv.selector {
	case CreateRoleBindingRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*role_binding.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case CreateRoleBindingRequest_FieldPathSelectorRoleBinding:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for CreateRoleBindingRequest: %d", fpv.selector))
	}
}

func (fpv *CreateRoleBindingRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*CreateRoleBindingRequest))
}

type CreateRoleBindingRequest_FieldSubPathValue struct {
	CreateRoleBindingRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ CreateRoleBindingRequest_FieldPathValue = (*CreateRoleBindingRequest_FieldSubPathValue)(nil)

func (fpvs *CreateRoleBindingRequest_FieldSubPathValue) AsRoleBindingPathValue() (role_binding.RoleBinding_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(role_binding.RoleBinding_FieldPathValue)
	return res, ok
}

func (fpvs *CreateRoleBindingRequest_FieldSubPathValue) SetTo(target **CreateRoleBindingRequest) {
	if *target == nil {
		*target = new(CreateRoleBindingRequest)
	}
	switch fpvs.Selector() {
	case CreateRoleBindingRequest_FieldPathSelectorRoleBinding:
		fpvs.subPathValue.(role_binding.RoleBinding_FieldPathValue).SetTo(&(*target).RoleBinding)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateRoleBindingRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateRoleBindingRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateRoleBindingRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *CreateRoleBindingRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *CreateRoleBindingRequest_FieldSubPathValue) CompareWith(source *CreateRoleBindingRequest) (int, bool) {
	switch fpvs.Selector() {
	case CreateRoleBindingRequest_FieldPathSelectorRoleBinding:
		return fpvs.subPathValue.(role_binding.RoleBinding_FieldPathValue).CompareWith(source.GetRoleBinding())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateRoleBindingRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateRoleBindingRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*CreateRoleBindingRequest))
}

// CreateRoleBindingRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for CreateRoleBindingRequest according to their type
// Present only for array (repeated) types.
type CreateRoleBindingRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	CreateRoleBindingRequest_FieldPath
	ContainsValue(*CreateRoleBindingRequest) bool
}

// ParseCreateRoleBindingRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseCreateRoleBindingRequest_FieldPathArrayItemValue(pathStr, valueStr string) (CreateRoleBindingRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseCreateRoleBindingRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateRoleBindingRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(CreateRoleBindingRequest_FieldPathArrayItemValue), nil
}

func MustParseCreateRoleBindingRequest_FieldPathArrayItemValue(pathStr, valueStr string) CreateRoleBindingRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseCreateRoleBindingRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type CreateRoleBindingRequest_FieldTerminalPathArrayItemValue struct {
	CreateRoleBindingRequest_FieldTerminalPath
	value interface{}
}

var _ CreateRoleBindingRequest_FieldPathArrayItemValue = (*CreateRoleBindingRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object CreateRoleBindingRequest as interface{}
func (fpaiv *CreateRoleBindingRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *CreateRoleBindingRequest_FieldTerminalPathArrayItemValue) GetSingle(source *CreateRoleBindingRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *CreateRoleBindingRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*CreateRoleBindingRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateRoleBindingRequest'
func (fpaiv *CreateRoleBindingRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *CreateRoleBindingRequest) bool {
	slice := fpaiv.CreateRoleBindingRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type CreateRoleBindingRequest_FieldSubPathArrayItemValue struct {
	CreateRoleBindingRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *CreateRoleBindingRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *CreateRoleBindingRequest_FieldSubPathArrayItemValue) AsRoleBindingPathItemValue() (role_binding.RoleBinding_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(role_binding.RoleBinding_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateRoleBindingRequest'
func (fpaivs *CreateRoleBindingRequest_FieldSubPathArrayItemValue) ContainsValue(source *CreateRoleBindingRequest) bool {
	switch fpaivs.Selector() {
	case CreateRoleBindingRequest_FieldPathSelectorRoleBinding:
		return fpaivs.subPathItemValue.(role_binding.RoleBinding_FieldPathArrayItemValue).ContainsValue(source.GetRoleBinding())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateRoleBindingRequest: %d", fpaivs.Selector()))
	}
}

// CreateRoleBindingRequest_FieldPathArrayOfValues allows storing slice of values for CreateRoleBindingRequest fields according to their type
type CreateRoleBindingRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	CreateRoleBindingRequest_FieldPath
}

func ParseCreateRoleBindingRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (CreateRoleBindingRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseCreateRoleBindingRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateRoleBindingRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(CreateRoleBindingRequest_FieldPathArrayOfValues), nil
}

func MustParseCreateRoleBindingRequest_FieldPathArrayOfValues(pathStr, valuesStr string) CreateRoleBindingRequest_FieldPathArrayOfValues {
	fpaov, err := ParseCreateRoleBindingRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type CreateRoleBindingRequest_FieldTerminalPathArrayOfValues struct {
	CreateRoleBindingRequest_FieldTerminalPath
	values interface{}
}

var _ CreateRoleBindingRequest_FieldPathArrayOfValues = (*CreateRoleBindingRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *CreateRoleBindingRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case CreateRoleBindingRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*role_binding.ParentReference) {
			values = append(values, v)
		}
	case CreateRoleBindingRequest_FieldPathSelectorRoleBinding:
		for _, v := range fpaov.values.([]*role_binding.RoleBinding) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *CreateRoleBindingRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*role_binding.ParentReference, bool) {
	res, ok := fpaov.values.([]*role_binding.ParentReference)
	return res, ok
}
func (fpaov *CreateRoleBindingRequest_FieldTerminalPathArrayOfValues) AsRoleBindingArrayOfValues() ([]*role_binding.RoleBinding, bool) {
	res, ok := fpaov.values.([]*role_binding.RoleBinding)
	return res, ok
}

type CreateRoleBindingRequest_FieldSubPathArrayOfValues struct {
	CreateRoleBindingRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ CreateRoleBindingRequest_FieldPathArrayOfValues = (*CreateRoleBindingRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *CreateRoleBindingRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *CreateRoleBindingRequest_FieldSubPathArrayOfValues) AsRoleBindingPathArrayOfValues() (role_binding.RoleBinding_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(role_binding.RoleBinding_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateRoleBindingRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateRoleBindingRequest_FieldPathSelector
	Get(source *UpdateRoleBindingRequest) []interface{}
	GetSingle(source *UpdateRoleBindingRequest) (interface{}, bool)
	ClearValue(item *UpdateRoleBindingRequest)

	// Those methods build corresponding UpdateRoleBindingRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateRoleBindingRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateRoleBindingRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateRoleBindingRequest_FieldPathArrayItemValue
}

type UpdateRoleBindingRequest_FieldPathSelector int32

const (
	UpdateRoleBindingRequest_FieldPathSelectorRoleBinding  UpdateRoleBindingRequest_FieldPathSelector = 0
	UpdateRoleBindingRequest_FieldPathSelectorUpdateMask   UpdateRoleBindingRequest_FieldPathSelector = 1
	UpdateRoleBindingRequest_FieldPathSelectorCas          UpdateRoleBindingRequest_FieldPathSelector = 2
	UpdateRoleBindingRequest_FieldPathSelectorAllowMissing UpdateRoleBindingRequest_FieldPathSelector = 3
)

func (s UpdateRoleBindingRequest_FieldPathSelector) String() string {
	switch s {
	case UpdateRoleBindingRequest_FieldPathSelectorRoleBinding:
		return "role_binding"
	case UpdateRoleBindingRequest_FieldPathSelectorUpdateMask:
		return "update_mask"
	case UpdateRoleBindingRequest_FieldPathSelectorCas:
		return "cas"
	case UpdateRoleBindingRequest_FieldPathSelectorAllowMissing:
		return "allow_missing"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRoleBindingRequest: %d", s))
	}
}

func BuildUpdateRoleBindingRequest_FieldPath(fp gotenobject.RawFieldPath) (UpdateRoleBindingRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateRoleBindingRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "role_binding", "roleBinding", "role-binding":
			return &UpdateRoleBindingRequest_FieldTerminalPath{selector: UpdateRoleBindingRequest_FieldPathSelectorRoleBinding}, nil
		case "update_mask", "updateMask", "update-mask":
			return &UpdateRoleBindingRequest_FieldTerminalPath{selector: UpdateRoleBindingRequest_FieldPathSelectorUpdateMask}, nil
		case "cas":
			return &UpdateRoleBindingRequest_FieldTerminalPath{selector: UpdateRoleBindingRequest_FieldPathSelectorCas}, nil
		case "allow_missing", "allowMissing", "allow-missing":
			return &UpdateRoleBindingRequest_FieldTerminalPath{selector: UpdateRoleBindingRequest_FieldPathSelectorAllowMissing}, nil
		}
	} else {
		switch fp[0] {
		case "role_binding", "roleBinding", "role-binding":
			if subpath, err := role_binding.BuildRoleBinding_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateRoleBindingRequest_FieldSubPath{selector: UpdateRoleBindingRequest_FieldPathSelectorRoleBinding, subPath: subpath}, nil
			}
		case "cas":
			if subpath, err := BuildUpdateRoleBindingRequestCAS_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateRoleBindingRequest_FieldSubPath{selector: UpdateRoleBindingRequest_FieldPathSelectorCas, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateRoleBindingRequest", fp)
}

func ParseUpdateRoleBindingRequest_FieldPath(rawField string) (UpdateRoleBindingRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateRoleBindingRequest_FieldPath(fp)
}

func MustParseUpdateRoleBindingRequest_FieldPath(rawField string) UpdateRoleBindingRequest_FieldPath {
	fp, err := ParseUpdateRoleBindingRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateRoleBindingRequest_FieldTerminalPath struct {
	selector UpdateRoleBindingRequest_FieldPathSelector
}

var _ UpdateRoleBindingRequest_FieldPath = (*UpdateRoleBindingRequest_FieldTerminalPath)(nil)

func (fp *UpdateRoleBindingRequest_FieldTerminalPath) Selector() UpdateRoleBindingRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateRoleBindingRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateRoleBindingRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateRoleBindingRequest
func (fp *UpdateRoleBindingRequest_FieldTerminalPath) Get(source *UpdateRoleBindingRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateRoleBindingRequest_FieldPathSelectorRoleBinding:
			if source.RoleBinding != nil {
				values = append(values, source.RoleBinding)
			}
		case UpdateRoleBindingRequest_FieldPathSelectorUpdateMask:
			if source.UpdateMask != nil {
				values = append(values, source.UpdateMask)
			}
		case UpdateRoleBindingRequest_FieldPathSelectorCas:
			if source.Cas != nil {
				values = append(values, source.Cas)
			}
		case UpdateRoleBindingRequest_FieldPathSelectorAllowMissing:
			values = append(values, source.AllowMissing)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateRoleBindingRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateRoleBindingRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateRoleBindingRequest))
}

// GetSingle returns value pointed by specific field of from source UpdateRoleBindingRequest
func (fp *UpdateRoleBindingRequest_FieldTerminalPath) GetSingle(source *UpdateRoleBindingRequest) (interface{}, bool) {
	switch fp.selector {
	case UpdateRoleBindingRequest_FieldPathSelectorRoleBinding:
		res := source.GetRoleBinding()
		return res, res != nil
	case UpdateRoleBindingRequest_FieldPathSelectorUpdateMask:
		res := source.GetUpdateMask()
		return res, res != nil
	case UpdateRoleBindingRequest_FieldPathSelectorCas:
		res := source.GetCas()
		return res, res != nil
	case UpdateRoleBindingRequest_FieldPathSelectorAllowMissing:
		return source.GetAllowMissing(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRoleBindingRequest: %d", fp.selector))
	}
}

func (fp *UpdateRoleBindingRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateRoleBindingRequest))
}

// GetDefault returns a default value of the field type
func (fp *UpdateRoleBindingRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateRoleBindingRequest_FieldPathSelectorRoleBinding:
		return (*role_binding.RoleBinding)(nil)
	case UpdateRoleBindingRequest_FieldPathSelectorUpdateMask:
		return (*role_binding.RoleBinding_FieldMask)(nil)
	case UpdateRoleBindingRequest_FieldPathSelectorCas:
		return (*UpdateRoleBindingRequest_CAS)(nil)
	case UpdateRoleBindingRequest_FieldPathSelectorAllowMissing:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRoleBindingRequest: %d", fp.selector))
	}
}

func (fp *UpdateRoleBindingRequest_FieldTerminalPath) ClearValue(item *UpdateRoleBindingRequest) {
	if item != nil {
		switch fp.selector {
		case UpdateRoleBindingRequest_FieldPathSelectorRoleBinding:
			item.RoleBinding = nil
		case UpdateRoleBindingRequest_FieldPathSelectorUpdateMask:
			item.UpdateMask = nil
		case UpdateRoleBindingRequest_FieldPathSelectorCas:
			item.Cas = nil
		case UpdateRoleBindingRequest_FieldPathSelectorAllowMissing:
			item.AllowMissing = false
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateRoleBindingRequest: %d", fp.selector))
		}
	}
}

func (fp *UpdateRoleBindingRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateRoleBindingRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateRoleBindingRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateRoleBindingRequest_FieldPathSelectorUpdateMask ||
		fp.selector == UpdateRoleBindingRequest_FieldPathSelectorAllowMissing
}

func (fp *UpdateRoleBindingRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *UpdateRoleBindingRequest_FieldTerminalPath) WithIValue(value interface{}) UpdateRoleBindingRequest_FieldPathValue {
	switch fp.selector {
	case UpdateRoleBindingRequest_FieldPathSelectorRoleBinding:
		return &UpdateRoleBindingRequest_FieldTerminalPathValue{UpdateRoleBindingRequest_FieldTerminalPath: *fp, value: value.(*role_binding.RoleBinding)}
	case UpdateRoleBindingRequest_FieldPathSelectorUpdateMask:
		return &UpdateRoleBindingRequest_FieldTerminalPathValue{UpdateRoleBindingRequest_FieldTerminalPath: *fp, value: value.(*role_binding.RoleBinding_FieldMask)}
	case UpdateRoleBindingRequest_FieldPathSelectorCas:
		return &UpdateRoleBindingRequest_FieldTerminalPathValue{UpdateRoleBindingRequest_FieldTerminalPath: *fp, value: value.(*UpdateRoleBindingRequest_CAS)}
	case UpdateRoleBindingRequest_FieldPathSelectorAllowMissing:
		return &UpdateRoleBindingRequest_FieldTerminalPathValue{UpdateRoleBindingRequest_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRoleBindingRequest: %d", fp.selector))
	}
}

func (fp *UpdateRoleBindingRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateRoleBindingRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateRoleBindingRequest_FieldPathArrayOfValues {
	fpaov := &UpdateRoleBindingRequest_FieldTerminalPathArrayOfValues{UpdateRoleBindingRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateRoleBindingRequest_FieldPathSelectorRoleBinding:
		return &UpdateRoleBindingRequest_FieldTerminalPathArrayOfValues{UpdateRoleBindingRequest_FieldTerminalPath: *fp, values: values.([]*role_binding.RoleBinding)}
	case UpdateRoleBindingRequest_FieldPathSelectorUpdateMask:
		return &UpdateRoleBindingRequest_FieldTerminalPathArrayOfValues{UpdateRoleBindingRequest_FieldTerminalPath: *fp, values: values.([]*role_binding.RoleBinding_FieldMask)}
	case UpdateRoleBindingRequest_FieldPathSelectorCas:
		return &UpdateRoleBindingRequest_FieldTerminalPathArrayOfValues{UpdateRoleBindingRequest_FieldTerminalPath: *fp, values: values.([]*UpdateRoleBindingRequest_CAS)}
	case UpdateRoleBindingRequest_FieldPathSelectorAllowMissing:
		return &UpdateRoleBindingRequest_FieldTerminalPathArrayOfValues{UpdateRoleBindingRequest_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRoleBindingRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateRoleBindingRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateRoleBindingRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateRoleBindingRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRoleBindingRequest: %d", fp.selector))
	}
}

func (fp *UpdateRoleBindingRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateRoleBindingRequest_FieldSubPath struct {
	selector UpdateRoleBindingRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateRoleBindingRequest_FieldPath = (*UpdateRoleBindingRequest_FieldSubPath)(nil)

func (fps *UpdateRoleBindingRequest_FieldSubPath) Selector() UpdateRoleBindingRequest_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateRoleBindingRequest_FieldSubPath) AsRoleBindingSubPath() (role_binding.RoleBinding_FieldPath, bool) {
	res, ok := fps.subPath.(role_binding.RoleBinding_FieldPath)
	return res, ok
}
func (fps *UpdateRoleBindingRequest_FieldSubPath) AsCasSubPath() (UpdateRoleBindingRequestCAS_FieldPath, bool) {
	res, ok := fps.subPath.(UpdateRoleBindingRequestCAS_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateRoleBindingRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateRoleBindingRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateRoleBindingRequest
func (fps *UpdateRoleBindingRequest_FieldSubPath) Get(source *UpdateRoleBindingRequest) (values []interface{}) {
	switch fps.selector {
	case UpdateRoleBindingRequest_FieldPathSelectorRoleBinding:
		values = append(values, fps.subPath.GetRaw(source.GetRoleBinding())...)
	case UpdateRoleBindingRequest_FieldPathSelectorCas:
		values = append(values, fps.subPath.GetRaw(source.GetCas())...)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRoleBindingRequest: %d", fps.selector))
	}
	return
}

func (fps *UpdateRoleBindingRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateRoleBindingRequest))
}

// GetSingle returns value of selected field from source UpdateRoleBindingRequest
func (fps *UpdateRoleBindingRequest_FieldSubPath) GetSingle(source *UpdateRoleBindingRequest) (interface{}, bool) {
	switch fps.selector {
	case UpdateRoleBindingRequest_FieldPathSelectorRoleBinding:
		if source.GetRoleBinding() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetRoleBinding())
	case UpdateRoleBindingRequest_FieldPathSelectorCas:
		if source.GetCas() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRoleBindingRequest: %d", fps.selector))
	}
}

func (fps *UpdateRoleBindingRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateRoleBindingRequest))
}

// GetDefault returns a default value of the field type
func (fps *UpdateRoleBindingRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateRoleBindingRequest_FieldSubPath) ClearValue(item *UpdateRoleBindingRequest) {
	if item != nil {
		switch fps.selector {
		case UpdateRoleBindingRequest_FieldPathSelectorRoleBinding:
			fps.subPath.ClearValueRaw(item.RoleBinding)
		case UpdateRoleBindingRequest_FieldPathSelectorCas:
			fps.subPath.ClearValueRaw(item.Cas)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateRoleBindingRequest: %d", fps.selector))
		}
	}
}

func (fps *UpdateRoleBindingRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateRoleBindingRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateRoleBindingRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateRoleBindingRequest_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&UpdateRoleBindingRequest_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *UpdateRoleBindingRequest_FieldSubPath) WithIValue(value interface{}) UpdateRoleBindingRequest_FieldPathValue {
	return &UpdateRoleBindingRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateRoleBindingRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateRoleBindingRequest_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateRoleBindingRequest_FieldPathArrayOfValues {
	return &UpdateRoleBindingRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateRoleBindingRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateRoleBindingRequest_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateRoleBindingRequest_FieldPathArrayItemValue {
	return &UpdateRoleBindingRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateRoleBindingRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateRoleBindingRequest_FieldPathValue allows storing values for UpdateRoleBindingRequest fields according to their type
type UpdateRoleBindingRequest_FieldPathValue interface {
	UpdateRoleBindingRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateRoleBindingRequest)
	CompareWith(*UpdateRoleBindingRequest) (cmp int, comparable bool)
}

func ParseUpdateRoleBindingRequest_FieldPathValue(pathStr, valueStr string) (UpdateRoleBindingRequest_FieldPathValue, error) {
	fp, err := ParseUpdateRoleBindingRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateRoleBindingRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateRoleBindingRequest_FieldPathValue), nil
}

func MustParseUpdateRoleBindingRequest_FieldPathValue(pathStr, valueStr string) UpdateRoleBindingRequest_FieldPathValue {
	fpv, err := ParseUpdateRoleBindingRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateRoleBindingRequest_FieldTerminalPathValue struct {
	UpdateRoleBindingRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateRoleBindingRequest_FieldPathValue = (*UpdateRoleBindingRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'UpdateRoleBindingRequest' as interface{}
func (fpv *UpdateRoleBindingRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateRoleBindingRequest_FieldTerminalPathValue) AsRoleBindingValue() (*role_binding.RoleBinding, bool) {
	res, ok := fpv.value.(*role_binding.RoleBinding)
	return res, ok
}
func (fpv *UpdateRoleBindingRequest_FieldTerminalPathValue) AsUpdateMaskValue() (*role_binding.RoleBinding_FieldMask, bool) {
	res, ok := fpv.value.(*role_binding.RoleBinding_FieldMask)
	return res, ok
}
func (fpv *UpdateRoleBindingRequest_FieldTerminalPathValue) AsCasValue() (*UpdateRoleBindingRequest_CAS, bool) {
	res, ok := fpv.value.(*UpdateRoleBindingRequest_CAS)
	return res, ok
}
func (fpv *UpdateRoleBindingRequest_FieldTerminalPathValue) AsAllowMissingValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object UpdateRoleBindingRequest
func (fpv *UpdateRoleBindingRequest_FieldTerminalPathValue) SetTo(target **UpdateRoleBindingRequest) {
	if *target == nil {
		*target = new(UpdateRoleBindingRequest)
	}
	switch fpv.selector {
	case UpdateRoleBindingRequest_FieldPathSelectorRoleBinding:
		(*target).RoleBinding = fpv.value.(*role_binding.RoleBinding)
	case UpdateRoleBindingRequest_FieldPathSelectorUpdateMask:
		(*target).UpdateMask = fpv.value.(*role_binding.RoleBinding_FieldMask)
	case UpdateRoleBindingRequest_FieldPathSelectorCas:
		(*target).Cas = fpv.value.(*UpdateRoleBindingRequest_CAS)
	case UpdateRoleBindingRequest_FieldPathSelectorAllowMissing:
		(*target).AllowMissing = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRoleBindingRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateRoleBindingRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateRoleBindingRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateRoleBindingRequest_FieldTerminalPathValue' with the value under path in 'UpdateRoleBindingRequest'.
func (fpv *UpdateRoleBindingRequest_FieldTerminalPathValue) CompareWith(source *UpdateRoleBindingRequest) (int, bool) {
	switch fpv.selector {
	case UpdateRoleBindingRequest_FieldPathSelectorRoleBinding:
		return 0, false
	case UpdateRoleBindingRequest_FieldPathSelectorUpdateMask:
		return 0, false
	case UpdateRoleBindingRequest_FieldPathSelectorCas:
		return 0, false
	case UpdateRoleBindingRequest_FieldPathSelectorAllowMissing:
		leftValue := fpv.value.(bool)
		rightValue := source.GetAllowMissing()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRoleBindingRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateRoleBindingRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateRoleBindingRequest))
}

type UpdateRoleBindingRequest_FieldSubPathValue struct {
	UpdateRoleBindingRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateRoleBindingRequest_FieldPathValue = (*UpdateRoleBindingRequest_FieldSubPathValue)(nil)

func (fpvs *UpdateRoleBindingRequest_FieldSubPathValue) AsRoleBindingPathValue() (role_binding.RoleBinding_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(role_binding.RoleBinding_FieldPathValue)
	return res, ok
}
func (fpvs *UpdateRoleBindingRequest_FieldSubPathValue) AsCasPathValue() (UpdateRoleBindingRequestCAS_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(UpdateRoleBindingRequestCAS_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateRoleBindingRequest_FieldSubPathValue) SetTo(target **UpdateRoleBindingRequest) {
	if *target == nil {
		*target = new(UpdateRoleBindingRequest)
	}
	switch fpvs.Selector() {
	case UpdateRoleBindingRequest_FieldPathSelectorRoleBinding:
		fpvs.subPathValue.(role_binding.RoleBinding_FieldPathValue).SetTo(&(*target).RoleBinding)
	case UpdateRoleBindingRequest_FieldPathSelectorCas:
		fpvs.subPathValue.(UpdateRoleBindingRequestCAS_FieldPathValue).SetTo(&(*target).Cas)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRoleBindingRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateRoleBindingRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateRoleBindingRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateRoleBindingRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateRoleBindingRequest_FieldSubPathValue) CompareWith(source *UpdateRoleBindingRequest) (int, bool) {
	switch fpvs.Selector() {
	case UpdateRoleBindingRequest_FieldPathSelectorRoleBinding:
		return fpvs.subPathValue.(role_binding.RoleBinding_FieldPathValue).CompareWith(source.GetRoleBinding())
	case UpdateRoleBindingRequest_FieldPathSelectorCas:
		return fpvs.subPathValue.(UpdateRoleBindingRequestCAS_FieldPathValue).CompareWith(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRoleBindingRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateRoleBindingRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateRoleBindingRequest))
}

// UpdateRoleBindingRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for UpdateRoleBindingRequest according to their type
// Present only for array (repeated) types.
type UpdateRoleBindingRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateRoleBindingRequest_FieldPath
	ContainsValue(*UpdateRoleBindingRequest) bool
}

// ParseUpdateRoleBindingRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateRoleBindingRequest_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateRoleBindingRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateRoleBindingRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateRoleBindingRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateRoleBindingRequest_FieldPathArrayItemValue), nil
}

func MustParseUpdateRoleBindingRequest_FieldPathArrayItemValue(pathStr, valueStr string) UpdateRoleBindingRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateRoleBindingRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateRoleBindingRequest_FieldTerminalPathArrayItemValue struct {
	UpdateRoleBindingRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateRoleBindingRequest_FieldPathArrayItemValue = (*UpdateRoleBindingRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateRoleBindingRequest as interface{}
func (fpaiv *UpdateRoleBindingRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateRoleBindingRequest_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateRoleBindingRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateRoleBindingRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateRoleBindingRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateRoleBindingRequest'
func (fpaiv *UpdateRoleBindingRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateRoleBindingRequest) bool {
	slice := fpaiv.UpdateRoleBindingRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateRoleBindingRequest_FieldSubPathArrayItemValue struct {
	UpdateRoleBindingRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateRoleBindingRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateRoleBindingRequest_FieldSubPathArrayItemValue) AsRoleBindingPathItemValue() (role_binding.RoleBinding_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(role_binding.RoleBinding_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *UpdateRoleBindingRequest_FieldSubPathArrayItemValue) AsCasPathItemValue() (UpdateRoleBindingRequestCAS_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(UpdateRoleBindingRequestCAS_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateRoleBindingRequest'
func (fpaivs *UpdateRoleBindingRequest_FieldSubPathArrayItemValue) ContainsValue(source *UpdateRoleBindingRequest) bool {
	switch fpaivs.Selector() {
	case UpdateRoleBindingRequest_FieldPathSelectorRoleBinding:
		return fpaivs.subPathItemValue.(role_binding.RoleBinding_FieldPathArrayItemValue).ContainsValue(source.GetRoleBinding())
	case UpdateRoleBindingRequest_FieldPathSelectorCas:
		return fpaivs.subPathItemValue.(UpdateRoleBindingRequestCAS_FieldPathArrayItemValue).ContainsValue(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRoleBindingRequest: %d", fpaivs.Selector()))
	}
}

// UpdateRoleBindingRequest_FieldPathArrayOfValues allows storing slice of values for UpdateRoleBindingRequest fields according to their type
type UpdateRoleBindingRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateRoleBindingRequest_FieldPath
}

func ParseUpdateRoleBindingRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateRoleBindingRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateRoleBindingRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateRoleBindingRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateRoleBindingRequest_FieldPathArrayOfValues), nil
}

func MustParseUpdateRoleBindingRequest_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateRoleBindingRequest_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateRoleBindingRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateRoleBindingRequest_FieldTerminalPathArrayOfValues struct {
	UpdateRoleBindingRequest_FieldTerminalPath
	values interface{}
}

var _ UpdateRoleBindingRequest_FieldPathArrayOfValues = (*UpdateRoleBindingRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateRoleBindingRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateRoleBindingRequest_FieldPathSelectorRoleBinding:
		for _, v := range fpaov.values.([]*role_binding.RoleBinding) {
			values = append(values, v)
		}
	case UpdateRoleBindingRequest_FieldPathSelectorUpdateMask:
		for _, v := range fpaov.values.([]*role_binding.RoleBinding_FieldMask) {
			values = append(values, v)
		}
	case UpdateRoleBindingRequest_FieldPathSelectorCas:
		for _, v := range fpaov.values.([]*UpdateRoleBindingRequest_CAS) {
			values = append(values, v)
		}
	case UpdateRoleBindingRequest_FieldPathSelectorAllowMissing:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateRoleBindingRequest_FieldTerminalPathArrayOfValues) AsRoleBindingArrayOfValues() ([]*role_binding.RoleBinding, bool) {
	res, ok := fpaov.values.([]*role_binding.RoleBinding)
	return res, ok
}
func (fpaov *UpdateRoleBindingRequest_FieldTerminalPathArrayOfValues) AsUpdateMaskArrayOfValues() ([]*role_binding.RoleBinding_FieldMask, bool) {
	res, ok := fpaov.values.([]*role_binding.RoleBinding_FieldMask)
	return res, ok
}
func (fpaov *UpdateRoleBindingRequest_FieldTerminalPathArrayOfValues) AsCasArrayOfValues() ([]*UpdateRoleBindingRequest_CAS, bool) {
	res, ok := fpaov.values.([]*UpdateRoleBindingRequest_CAS)
	return res, ok
}
func (fpaov *UpdateRoleBindingRequest_FieldTerminalPathArrayOfValues) AsAllowMissingArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

type UpdateRoleBindingRequest_FieldSubPathArrayOfValues struct {
	UpdateRoleBindingRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateRoleBindingRequest_FieldPathArrayOfValues = (*UpdateRoleBindingRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateRoleBindingRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateRoleBindingRequest_FieldSubPathArrayOfValues) AsRoleBindingPathArrayOfValues() (role_binding.RoleBinding_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(role_binding.RoleBinding_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *UpdateRoleBindingRequest_FieldSubPathArrayOfValues) AsCasPathArrayOfValues() (UpdateRoleBindingRequestCAS_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(UpdateRoleBindingRequestCAS_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateRoleBindingRequestCAS_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateRoleBindingRequestCAS_FieldPathSelector
	Get(source *UpdateRoleBindingRequest_CAS) []interface{}
	GetSingle(source *UpdateRoleBindingRequest_CAS) (interface{}, bool)
	ClearValue(item *UpdateRoleBindingRequest_CAS)

	// Those methods build corresponding UpdateRoleBindingRequestCAS_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateRoleBindingRequestCAS_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateRoleBindingRequestCAS_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateRoleBindingRequestCAS_FieldPathArrayItemValue
}

type UpdateRoleBindingRequestCAS_FieldPathSelector int32

const (
	UpdateRoleBindingRequestCAS_FieldPathSelectorConditionalState UpdateRoleBindingRequestCAS_FieldPathSelector = 0
	UpdateRoleBindingRequestCAS_FieldPathSelectorFieldMask        UpdateRoleBindingRequestCAS_FieldPathSelector = 1
)

func (s UpdateRoleBindingRequestCAS_FieldPathSelector) String() string {
	switch s {
	case UpdateRoleBindingRequestCAS_FieldPathSelectorConditionalState:
		return "conditional_state"
	case UpdateRoleBindingRequestCAS_FieldPathSelectorFieldMask:
		return "field_mask"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRoleBindingRequest_CAS: %d", s))
	}
}

func BuildUpdateRoleBindingRequestCAS_FieldPath(fp gotenobject.RawFieldPath) (UpdateRoleBindingRequestCAS_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateRoleBindingRequest_CAS")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			return &UpdateRoleBindingRequestCAS_FieldTerminalPath{selector: UpdateRoleBindingRequestCAS_FieldPathSelectorConditionalState}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &UpdateRoleBindingRequestCAS_FieldTerminalPath{selector: UpdateRoleBindingRequestCAS_FieldPathSelectorFieldMask}, nil
		}
	} else {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			if subpath, err := role_binding.BuildRoleBinding_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateRoleBindingRequestCAS_FieldSubPath{selector: UpdateRoleBindingRequestCAS_FieldPathSelectorConditionalState, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateRoleBindingRequest_CAS", fp)
}

func ParseUpdateRoleBindingRequestCAS_FieldPath(rawField string) (UpdateRoleBindingRequestCAS_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateRoleBindingRequestCAS_FieldPath(fp)
}

func MustParseUpdateRoleBindingRequestCAS_FieldPath(rawField string) UpdateRoleBindingRequestCAS_FieldPath {
	fp, err := ParseUpdateRoleBindingRequestCAS_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateRoleBindingRequestCAS_FieldTerminalPath struct {
	selector UpdateRoleBindingRequestCAS_FieldPathSelector
}

var _ UpdateRoleBindingRequestCAS_FieldPath = (*UpdateRoleBindingRequestCAS_FieldTerminalPath)(nil)

func (fp *UpdateRoleBindingRequestCAS_FieldTerminalPath) Selector() UpdateRoleBindingRequestCAS_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateRoleBindingRequestCAS_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateRoleBindingRequestCAS_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateRoleBindingRequest_CAS
func (fp *UpdateRoleBindingRequestCAS_FieldTerminalPath) Get(source *UpdateRoleBindingRequest_CAS) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateRoleBindingRequestCAS_FieldPathSelectorConditionalState:
			if source.ConditionalState != nil {
				values = append(values, source.ConditionalState)
			}
		case UpdateRoleBindingRequestCAS_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateRoleBindingRequest_CAS: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateRoleBindingRequestCAS_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateRoleBindingRequest_CAS))
}

// GetSingle returns value pointed by specific field of from source UpdateRoleBindingRequest_CAS
func (fp *UpdateRoleBindingRequestCAS_FieldTerminalPath) GetSingle(source *UpdateRoleBindingRequest_CAS) (interface{}, bool) {
	switch fp.selector {
	case UpdateRoleBindingRequestCAS_FieldPathSelectorConditionalState:
		res := source.GetConditionalState()
		return res, res != nil
	case UpdateRoleBindingRequestCAS_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRoleBindingRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateRoleBindingRequestCAS_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateRoleBindingRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fp *UpdateRoleBindingRequestCAS_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateRoleBindingRequestCAS_FieldPathSelectorConditionalState:
		return (*role_binding.RoleBinding)(nil)
	case UpdateRoleBindingRequestCAS_FieldPathSelectorFieldMask:
		return (*role_binding.RoleBinding_FieldMask)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRoleBindingRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateRoleBindingRequestCAS_FieldTerminalPath) ClearValue(item *UpdateRoleBindingRequest_CAS) {
	if item != nil {
		switch fp.selector {
		case UpdateRoleBindingRequestCAS_FieldPathSelectorConditionalState:
			item.ConditionalState = nil
		case UpdateRoleBindingRequestCAS_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateRoleBindingRequest_CAS: %d", fp.selector))
		}
	}
}

func (fp *UpdateRoleBindingRequestCAS_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateRoleBindingRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateRoleBindingRequestCAS_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateRoleBindingRequestCAS_FieldPathSelectorFieldMask
}

func (fp *UpdateRoleBindingRequestCAS_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *UpdateRoleBindingRequestCAS_FieldTerminalPath) WithIValue(value interface{}) UpdateRoleBindingRequestCAS_FieldPathValue {
	switch fp.selector {
	case UpdateRoleBindingRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateRoleBindingRequestCAS_FieldTerminalPathValue{UpdateRoleBindingRequestCAS_FieldTerminalPath: *fp, value: value.(*role_binding.RoleBinding)}
	case UpdateRoleBindingRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateRoleBindingRequestCAS_FieldTerminalPathValue{UpdateRoleBindingRequestCAS_FieldTerminalPath: *fp, value: value.(*role_binding.RoleBinding_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRoleBindingRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateRoleBindingRequestCAS_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateRoleBindingRequestCAS_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateRoleBindingRequestCAS_FieldPathArrayOfValues {
	fpaov := &UpdateRoleBindingRequestCAS_FieldTerminalPathArrayOfValues{UpdateRoleBindingRequestCAS_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateRoleBindingRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateRoleBindingRequestCAS_FieldTerminalPathArrayOfValues{UpdateRoleBindingRequestCAS_FieldTerminalPath: *fp, values: values.([]*role_binding.RoleBinding)}
	case UpdateRoleBindingRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateRoleBindingRequestCAS_FieldTerminalPathArrayOfValues{UpdateRoleBindingRequestCAS_FieldTerminalPath: *fp, values: values.([]*role_binding.RoleBinding_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRoleBindingRequest_CAS: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateRoleBindingRequestCAS_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateRoleBindingRequestCAS_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateRoleBindingRequestCAS_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRoleBindingRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateRoleBindingRequestCAS_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateRoleBindingRequestCAS_FieldSubPath struct {
	selector UpdateRoleBindingRequestCAS_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateRoleBindingRequestCAS_FieldPath = (*UpdateRoleBindingRequestCAS_FieldSubPath)(nil)

func (fps *UpdateRoleBindingRequestCAS_FieldSubPath) Selector() UpdateRoleBindingRequestCAS_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateRoleBindingRequestCAS_FieldSubPath) AsConditionalStateSubPath() (role_binding.RoleBinding_FieldPath, bool) {
	res, ok := fps.subPath.(role_binding.RoleBinding_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateRoleBindingRequestCAS_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateRoleBindingRequestCAS_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateRoleBindingRequest_CAS
func (fps *UpdateRoleBindingRequestCAS_FieldSubPath) Get(source *UpdateRoleBindingRequest_CAS) (values []interface{}) {
	switch fps.selector {
	case UpdateRoleBindingRequestCAS_FieldPathSelectorConditionalState:
		values = append(values, fps.subPath.GetRaw(source.GetConditionalState())...)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRoleBindingRequest_CAS: %d", fps.selector))
	}
	return
}

func (fps *UpdateRoleBindingRequestCAS_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateRoleBindingRequest_CAS))
}

// GetSingle returns value of selected field from source UpdateRoleBindingRequest_CAS
func (fps *UpdateRoleBindingRequestCAS_FieldSubPath) GetSingle(source *UpdateRoleBindingRequest_CAS) (interface{}, bool) {
	switch fps.selector {
	case UpdateRoleBindingRequestCAS_FieldPathSelectorConditionalState:
		if source.GetConditionalState() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRoleBindingRequest_CAS: %d", fps.selector))
	}
}

func (fps *UpdateRoleBindingRequestCAS_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateRoleBindingRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fps *UpdateRoleBindingRequestCAS_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateRoleBindingRequestCAS_FieldSubPath) ClearValue(item *UpdateRoleBindingRequest_CAS) {
	if item != nil {
		switch fps.selector {
		case UpdateRoleBindingRequestCAS_FieldPathSelectorConditionalState:
			fps.subPath.ClearValueRaw(item.ConditionalState)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateRoleBindingRequest_CAS: %d", fps.selector))
		}
	}
}

func (fps *UpdateRoleBindingRequestCAS_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateRoleBindingRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateRoleBindingRequestCAS_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateRoleBindingRequestCAS_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&UpdateRoleBindingRequestCAS_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *UpdateRoleBindingRequestCAS_FieldSubPath) WithIValue(value interface{}) UpdateRoleBindingRequestCAS_FieldPathValue {
	return &UpdateRoleBindingRequestCAS_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateRoleBindingRequestCAS_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateRoleBindingRequestCAS_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateRoleBindingRequestCAS_FieldPathArrayOfValues {
	return &UpdateRoleBindingRequestCAS_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateRoleBindingRequestCAS_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateRoleBindingRequestCAS_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateRoleBindingRequestCAS_FieldPathArrayItemValue {
	return &UpdateRoleBindingRequestCAS_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateRoleBindingRequestCAS_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateRoleBindingRequestCAS_FieldPathValue allows storing values for CAS fields according to their type
type UpdateRoleBindingRequestCAS_FieldPathValue interface {
	UpdateRoleBindingRequestCAS_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateRoleBindingRequest_CAS)
	CompareWith(*UpdateRoleBindingRequest_CAS) (cmp int, comparable bool)
}

func ParseUpdateRoleBindingRequestCAS_FieldPathValue(pathStr, valueStr string) (UpdateRoleBindingRequestCAS_FieldPathValue, error) {
	fp, err := ParseUpdateRoleBindingRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateRoleBindingRequestCAS_FieldPathValue), nil
}

func MustParseUpdateRoleBindingRequestCAS_FieldPathValue(pathStr, valueStr string) UpdateRoleBindingRequestCAS_FieldPathValue {
	fpv, err := ParseUpdateRoleBindingRequestCAS_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateRoleBindingRequestCAS_FieldTerminalPathValue struct {
	UpdateRoleBindingRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateRoleBindingRequestCAS_FieldPathValue = (*UpdateRoleBindingRequestCAS_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CAS' as interface{}
func (fpv *UpdateRoleBindingRequestCAS_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateRoleBindingRequestCAS_FieldTerminalPathValue) AsConditionalStateValue() (*role_binding.RoleBinding, bool) {
	res, ok := fpv.value.(*role_binding.RoleBinding)
	return res, ok
}
func (fpv *UpdateRoleBindingRequestCAS_FieldTerminalPathValue) AsFieldMaskValue() (*role_binding.RoleBinding_FieldMask, bool) {
	res, ok := fpv.value.(*role_binding.RoleBinding_FieldMask)
	return res, ok
}

// SetTo stores value for selected field for object CAS
func (fpv *UpdateRoleBindingRequestCAS_FieldTerminalPathValue) SetTo(target **UpdateRoleBindingRequest_CAS) {
	if *target == nil {
		*target = new(UpdateRoleBindingRequest_CAS)
	}
	switch fpv.selector {
	case UpdateRoleBindingRequestCAS_FieldPathSelectorConditionalState:
		(*target).ConditionalState = fpv.value.(*role_binding.RoleBinding)
	case UpdateRoleBindingRequestCAS_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*role_binding.RoleBinding_FieldMask)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRoleBindingRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateRoleBindingRequestCAS_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateRoleBindingRequest_CAS)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateRoleBindingRequestCAS_FieldTerminalPathValue' with the value under path in 'UpdateRoleBindingRequest_CAS'.
func (fpv *UpdateRoleBindingRequestCAS_FieldTerminalPathValue) CompareWith(source *UpdateRoleBindingRequest_CAS) (int, bool) {
	switch fpv.selector {
	case UpdateRoleBindingRequestCAS_FieldPathSelectorConditionalState:
		return 0, false
	case UpdateRoleBindingRequestCAS_FieldPathSelectorFieldMask:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRoleBindingRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateRoleBindingRequestCAS_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateRoleBindingRequest_CAS))
}

type UpdateRoleBindingRequestCAS_FieldSubPathValue struct {
	UpdateRoleBindingRequestCAS_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateRoleBindingRequestCAS_FieldPathValue = (*UpdateRoleBindingRequestCAS_FieldSubPathValue)(nil)

func (fpvs *UpdateRoleBindingRequestCAS_FieldSubPathValue) AsConditionalStatePathValue() (role_binding.RoleBinding_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(role_binding.RoleBinding_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateRoleBindingRequestCAS_FieldSubPathValue) SetTo(target **UpdateRoleBindingRequest_CAS) {
	if *target == nil {
		*target = new(UpdateRoleBindingRequest_CAS)
	}
	switch fpvs.Selector() {
	case UpdateRoleBindingRequestCAS_FieldPathSelectorConditionalState:
		fpvs.subPathValue.(role_binding.RoleBinding_FieldPathValue).SetTo(&(*target).ConditionalState)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRoleBindingRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateRoleBindingRequestCAS_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateRoleBindingRequest_CAS)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateRoleBindingRequestCAS_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateRoleBindingRequestCAS_FieldSubPathValue) CompareWith(source *UpdateRoleBindingRequest_CAS) (int, bool) {
	switch fpvs.Selector() {
	case UpdateRoleBindingRequestCAS_FieldPathSelectorConditionalState:
		return fpvs.subPathValue.(role_binding.RoleBinding_FieldPathValue).CompareWith(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRoleBindingRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateRoleBindingRequestCAS_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateRoleBindingRequest_CAS))
}

// UpdateRoleBindingRequestCAS_FieldPathArrayItemValue allows storing single item in Path-specific values for CAS according to their type
// Present only for array (repeated) types.
type UpdateRoleBindingRequestCAS_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateRoleBindingRequestCAS_FieldPath
	ContainsValue(*UpdateRoleBindingRequest_CAS) bool
}

// ParseUpdateRoleBindingRequestCAS_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateRoleBindingRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateRoleBindingRequestCAS_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateRoleBindingRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateRoleBindingRequestCAS_FieldPathArrayItemValue), nil
}

func MustParseUpdateRoleBindingRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) UpdateRoleBindingRequestCAS_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateRoleBindingRequestCAS_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateRoleBindingRequestCAS_FieldTerminalPathArrayItemValue struct {
	UpdateRoleBindingRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateRoleBindingRequestCAS_FieldPathArrayItemValue = (*UpdateRoleBindingRequestCAS_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateRoleBindingRequest_CAS as interface{}
func (fpaiv *UpdateRoleBindingRequestCAS_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateRoleBindingRequestCAS_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateRoleBindingRequest_CAS) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateRoleBindingRequestCAS_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateRoleBindingRequest_CAS))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaiv *UpdateRoleBindingRequestCAS_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateRoleBindingRequest_CAS) bool {
	slice := fpaiv.UpdateRoleBindingRequestCAS_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateRoleBindingRequestCAS_FieldSubPathArrayItemValue struct {
	UpdateRoleBindingRequestCAS_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateRoleBindingRequestCAS_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateRoleBindingRequestCAS_FieldSubPathArrayItemValue) AsConditionalStatePathItemValue() (role_binding.RoleBinding_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(role_binding.RoleBinding_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaivs *UpdateRoleBindingRequestCAS_FieldSubPathArrayItemValue) ContainsValue(source *UpdateRoleBindingRequest_CAS) bool {
	switch fpaivs.Selector() {
	case UpdateRoleBindingRequestCAS_FieldPathSelectorConditionalState:
		return fpaivs.subPathItemValue.(role_binding.RoleBinding_FieldPathArrayItemValue).ContainsValue(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRoleBindingRequest_CAS: %d", fpaivs.Selector()))
	}
}

// UpdateRoleBindingRequestCAS_FieldPathArrayOfValues allows storing slice of values for CAS fields according to their type
type UpdateRoleBindingRequestCAS_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateRoleBindingRequestCAS_FieldPath
}

func ParseUpdateRoleBindingRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateRoleBindingRequestCAS_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateRoleBindingRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateRoleBindingRequestCAS_FieldPathArrayOfValues), nil
}

func MustParseUpdateRoleBindingRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateRoleBindingRequestCAS_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateRoleBindingRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateRoleBindingRequestCAS_FieldTerminalPathArrayOfValues struct {
	UpdateRoleBindingRequestCAS_FieldTerminalPath
	values interface{}
}

var _ UpdateRoleBindingRequestCAS_FieldPathArrayOfValues = (*UpdateRoleBindingRequestCAS_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateRoleBindingRequestCAS_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateRoleBindingRequestCAS_FieldPathSelectorConditionalState:
		for _, v := range fpaov.values.([]*role_binding.RoleBinding) {
			values = append(values, v)
		}
	case UpdateRoleBindingRequestCAS_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*role_binding.RoleBinding_FieldMask) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateRoleBindingRequestCAS_FieldTerminalPathArrayOfValues) AsConditionalStateArrayOfValues() ([]*role_binding.RoleBinding, bool) {
	res, ok := fpaov.values.([]*role_binding.RoleBinding)
	return res, ok
}
func (fpaov *UpdateRoleBindingRequestCAS_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*role_binding.RoleBinding_FieldMask, bool) {
	res, ok := fpaov.values.([]*role_binding.RoleBinding_FieldMask)
	return res, ok
}

type UpdateRoleBindingRequestCAS_FieldSubPathArrayOfValues struct {
	UpdateRoleBindingRequestCAS_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateRoleBindingRequestCAS_FieldPathArrayOfValues = (*UpdateRoleBindingRequestCAS_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateRoleBindingRequestCAS_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateRoleBindingRequestCAS_FieldSubPathArrayOfValues) AsConditionalStatePathArrayOfValues() (role_binding.RoleBinding_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(role_binding.RoleBinding_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeleteRoleBindingRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeleteRoleBindingRequest_FieldPathSelector
	Get(source *DeleteRoleBindingRequest) []interface{}
	GetSingle(source *DeleteRoleBindingRequest) (interface{}, bool)
	ClearValue(item *DeleteRoleBindingRequest)

	// Those methods build corresponding DeleteRoleBindingRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeleteRoleBindingRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) DeleteRoleBindingRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeleteRoleBindingRequest_FieldPathArrayItemValue
}

type DeleteRoleBindingRequest_FieldPathSelector int32

const (
	DeleteRoleBindingRequest_FieldPathSelectorName DeleteRoleBindingRequest_FieldPathSelector = 0
)

func (s DeleteRoleBindingRequest_FieldPathSelector) String() string {
	switch s {
	case DeleteRoleBindingRequest_FieldPathSelectorName:
		return "name"
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteRoleBindingRequest: %d", s))
	}
}

func BuildDeleteRoleBindingRequest_FieldPath(fp gotenobject.RawFieldPath) (DeleteRoleBindingRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object DeleteRoleBindingRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &DeleteRoleBindingRequest_FieldTerminalPath{selector: DeleteRoleBindingRequest_FieldPathSelectorName}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object DeleteRoleBindingRequest", fp)
}

func ParseDeleteRoleBindingRequest_FieldPath(rawField string) (DeleteRoleBindingRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeleteRoleBindingRequest_FieldPath(fp)
}

func MustParseDeleteRoleBindingRequest_FieldPath(rawField string) DeleteRoleBindingRequest_FieldPath {
	fp, err := ParseDeleteRoleBindingRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeleteRoleBindingRequest_FieldTerminalPath struct {
	selector DeleteRoleBindingRequest_FieldPathSelector
}

var _ DeleteRoleBindingRequest_FieldPath = (*DeleteRoleBindingRequest_FieldTerminalPath)(nil)

func (fp *DeleteRoleBindingRequest_FieldTerminalPath) Selector() DeleteRoleBindingRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeleteRoleBindingRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeleteRoleBindingRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source DeleteRoleBindingRequest
func (fp *DeleteRoleBindingRequest_FieldTerminalPath) Get(source *DeleteRoleBindingRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeleteRoleBindingRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteRoleBindingRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *DeleteRoleBindingRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*DeleteRoleBindingRequest))
}

// GetSingle returns value pointed by specific field of from source DeleteRoleBindingRequest
func (fp *DeleteRoleBindingRequest_FieldTerminalPath) GetSingle(source *DeleteRoleBindingRequest) (interface{}, bool) {
	switch fp.selector {
	case DeleteRoleBindingRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteRoleBindingRequest: %d", fp.selector))
	}
}

func (fp *DeleteRoleBindingRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*DeleteRoleBindingRequest))
}

// GetDefault returns a default value of the field type
func (fp *DeleteRoleBindingRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeleteRoleBindingRequest_FieldPathSelectorName:
		return (*role_binding.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteRoleBindingRequest: %d", fp.selector))
	}
}

func (fp *DeleteRoleBindingRequest_FieldTerminalPath) ClearValue(item *DeleteRoleBindingRequest) {
	if item != nil {
		switch fp.selector {
		case DeleteRoleBindingRequest_FieldPathSelectorName:
			item.Name = nil
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteRoleBindingRequest: %d", fp.selector))
		}
	}
}

func (fp *DeleteRoleBindingRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*DeleteRoleBindingRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeleteRoleBindingRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeleteRoleBindingRequest_FieldPathSelectorName
}

func (fp *DeleteRoleBindingRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *DeleteRoleBindingRequest_FieldTerminalPath) WithIValue(value interface{}) DeleteRoleBindingRequest_FieldPathValue {
	switch fp.selector {
	case DeleteRoleBindingRequest_FieldPathSelectorName:
		return &DeleteRoleBindingRequest_FieldTerminalPathValue{DeleteRoleBindingRequest_FieldTerminalPath: *fp, value: value.(*role_binding.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteRoleBindingRequest: %d", fp.selector))
	}
}

func (fp *DeleteRoleBindingRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeleteRoleBindingRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeleteRoleBindingRequest_FieldPathArrayOfValues {
	fpaov := &DeleteRoleBindingRequest_FieldTerminalPathArrayOfValues{DeleteRoleBindingRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeleteRoleBindingRequest_FieldPathSelectorName:
		return &DeleteRoleBindingRequest_FieldTerminalPathArrayOfValues{DeleteRoleBindingRequest_FieldTerminalPath: *fp, values: values.([]*role_binding.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteRoleBindingRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeleteRoleBindingRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeleteRoleBindingRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeleteRoleBindingRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteRoleBindingRequest: %d", fp.selector))
	}
}

func (fp *DeleteRoleBindingRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeleteRoleBindingRequest_FieldPathValue allows storing values for DeleteRoleBindingRequest fields according to their type
type DeleteRoleBindingRequest_FieldPathValue interface {
	DeleteRoleBindingRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **DeleteRoleBindingRequest)
	CompareWith(*DeleteRoleBindingRequest) (cmp int, comparable bool)
}

func ParseDeleteRoleBindingRequest_FieldPathValue(pathStr, valueStr string) (DeleteRoleBindingRequest_FieldPathValue, error) {
	fp, err := ParseDeleteRoleBindingRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteRoleBindingRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeleteRoleBindingRequest_FieldPathValue), nil
}

func MustParseDeleteRoleBindingRequest_FieldPathValue(pathStr, valueStr string) DeleteRoleBindingRequest_FieldPathValue {
	fpv, err := ParseDeleteRoleBindingRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeleteRoleBindingRequest_FieldTerminalPathValue struct {
	DeleteRoleBindingRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteRoleBindingRequest_FieldPathValue = (*DeleteRoleBindingRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'DeleteRoleBindingRequest' as interface{}
func (fpv *DeleteRoleBindingRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeleteRoleBindingRequest_FieldTerminalPathValue) AsNameValue() (*role_binding.Reference, bool) {
	res, ok := fpv.value.(*role_binding.Reference)
	return res, ok
}

// SetTo stores value for selected field for object DeleteRoleBindingRequest
func (fpv *DeleteRoleBindingRequest_FieldTerminalPathValue) SetTo(target **DeleteRoleBindingRequest) {
	if *target == nil {
		*target = new(DeleteRoleBindingRequest)
	}
	switch fpv.selector {
	case DeleteRoleBindingRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*role_binding.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteRoleBindingRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteRoleBindingRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*DeleteRoleBindingRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeleteRoleBindingRequest_FieldTerminalPathValue' with the value under path in 'DeleteRoleBindingRequest'.
func (fpv *DeleteRoleBindingRequest_FieldTerminalPathValue) CompareWith(source *DeleteRoleBindingRequest) (int, bool) {
	switch fpv.selector {
	case DeleteRoleBindingRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*role_binding.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteRoleBindingRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteRoleBindingRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*DeleteRoleBindingRequest))
}

// DeleteRoleBindingRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for DeleteRoleBindingRequest according to their type
// Present only for array (repeated) types.
type DeleteRoleBindingRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeleteRoleBindingRequest_FieldPath
	ContainsValue(*DeleteRoleBindingRequest) bool
}

// ParseDeleteRoleBindingRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeleteRoleBindingRequest_FieldPathArrayItemValue(pathStr, valueStr string) (DeleteRoleBindingRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseDeleteRoleBindingRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteRoleBindingRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeleteRoleBindingRequest_FieldPathArrayItemValue), nil
}

func MustParseDeleteRoleBindingRequest_FieldPathArrayItemValue(pathStr, valueStr string) DeleteRoleBindingRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseDeleteRoleBindingRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeleteRoleBindingRequest_FieldTerminalPathArrayItemValue struct {
	DeleteRoleBindingRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteRoleBindingRequest_FieldPathArrayItemValue = (*DeleteRoleBindingRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object DeleteRoleBindingRequest as interface{}
func (fpaiv *DeleteRoleBindingRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeleteRoleBindingRequest_FieldTerminalPathArrayItemValue) GetSingle(source *DeleteRoleBindingRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeleteRoleBindingRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*DeleteRoleBindingRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'DeleteRoleBindingRequest'
func (fpaiv *DeleteRoleBindingRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *DeleteRoleBindingRequest) bool {
	slice := fpaiv.DeleteRoleBindingRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeleteRoleBindingRequest_FieldPathArrayOfValues allows storing slice of values for DeleteRoleBindingRequest fields according to their type
type DeleteRoleBindingRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeleteRoleBindingRequest_FieldPath
}

func ParseDeleteRoleBindingRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (DeleteRoleBindingRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseDeleteRoleBindingRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteRoleBindingRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeleteRoleBindingRequest_FieldPathArrayOfValues), nil
}

func MustParseDeleteRoleBindingRequest_FieldPathArrayOfValues(pathStr, valuesStr string) DeleteRoleBindingRequest_FieldPathArrayOfValues {
	fpaov, err := ParseDeleteRoleBindingRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeleteRoleBindingRequest_FieldTerminalPathArrayOfValues struct {
	DeleteRoleBindingRequest_FieldTerminalPath
	values interface{}
}

var _ DeleteRoleBindingRequest_FieldPathArrayOfValues = (*DeleteRoleBindingRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeleteRoleBindingRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeleteRoleBindingRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*role_binding.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeleteRoleBindingRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*role_binding.Reference, bool) {
	res, ok := fpaov.values.([]*role_binding.Reference)
	return res, ok
}
