// Code generated by protoc-gen-goten-object
// File: edgelq/iam/proto/v1alpha/service_account_key_service.proto
// DO NOT EDIT!!!

package service_account_key_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	service_account "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha/service_account"
	service_account_key "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha/service_account_key"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &service_account.ServiceAccount{}
	_ = &service_account_key.ServiceAccountKey{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

func (o *GetServiceAccountKeyRequest) GotenObjectExt() {}

func (o *GetServiceAccountKeyRequest) MakeFullFieldMask() *GetServiceAccountKeyRequest_FieldMask {
	return FullGetServiceAccountKeyRequest_FieldMask()
}

func (o *GetServiceAccountKeyRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullGetServiceAccountKeyRequest_FieldMask()
}

func (o *GetServiceAccountKeyRequest) MakeDiffFieldMask(other *GetServiceAccountKeyRequest) *GetServiceAccountKeyRequest_FieldMask {
	if o == nil && other == nil {
		return &GetServiceAccountKeyRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullGetServiceAccountKeyRequest_FieldMask()
	}

	res := &GetServiceAccountKeyRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &GetServiceAccountKeyRequest_FieldTerminalPath{selector: GetServiceAccountKeyRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &GetServiceAccountKeyRequest_FieldTerminalPath{selector: GetServiceAccountKeyRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &GetServiceAccountKeyRequest_FieldTerminalPath{selector: GetServiceAccountKeyRequest_FieldPathSelectorView})
	}
	return res
}

func (o *GetServiceAccountKeyRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*GetServiceAccountKeyRequest))
}

func (o *GetServiceAccountKeyRequest) Clone() *GetServiceAccountKeyRequest {
	if o == nil {
		return nil
	}
	result := &GetServiceAccountKeyRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &service_account_key.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*service_account_key.ServiceAccountKey_FieldMask)
	result.View = o.View
	return result
}

func (o *GetServiceAccountKeyRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *GetServiceAccountKeyRequest) Merge(source *GetServiceAccountKeyRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &service_account_key.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(service_account_key.ServiceAccountKey_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *GetServiceAccountKeyRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*GetServiceAccountKeyRequest))
}

func (o *BatchGetServiceAccountKeysRequest) GotenObjectExt() {}

func (o *BatchGetServiceAccountKeysRequest) MakeFullFieldMask() *BatchGetServiceAccountKeysRequest_FieldMask {
	return FullBatchGetServiceAccountKeysRequest_FieldMask()
}

func (o *BatchGetServiceAccountKeysRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetServiceAccountKeysRequest_FieldMask()
}

func (o *BatchGetServiceAccountKeysRequest) MakeDiffFieldMask(other *BatchGetServiceAccountKeysRequest) *BatchGetServiceAccountKeysRequest_FieldMask {
	if o == nil && other == nil {
		return &BatchGetServiceAccountKeysRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetServiceAccountKeysRequest_FieldMask()
	}

	res := &BatchGetServiceAccountKeysRequest_FieldMask{}

	if len(o.GetNames()) == len(other.GetNames()) {
		for i, lValue := range o.GetNames() {
			rValue := other.GetNames()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetServiceAccountKeysRequest_FieldTerminalPath{selector: BatchGetServiceAccountKeysRequest_FieldPathSelectorNames})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetServiceAccountKeysRequest_FieldTerminalPath{selector: BatchGetServiceAccountKeysRequest_FieldPathSelectorNames})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &BatchGetServiceAccountKeysRequest_FieldTerminalPath{selector: BatchGetServiceAccountKeysRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &BatchGetServiceAccountKeysRequest_FieldTerminalPath{selector: BatchGetServiceAccountKeysRequest_FieldPathSelectorView})
	}
	return res
}

func (o *BatchGetServiceAccountKeysRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetServiceAccountKeysRequest))
}

func (o *BatchGetServiceAccountKeysRequest) Clone() *BatchGetServiceAccountKeysRequest {
	if o == nil {
		return nil
	}
	result := &BatchGetServiceAccountKeysRequest{}
	result.Names = make([]*service_account_key.Reference, len(o.Names))
	for i, sourceValue := range o.Names {
		if sourceValue == nil {
			result.Names[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Names[i] = &service_account_key.Reference{}
			if err := result.Names[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*service_account_key.ServiceAccountKey_FieldMask)
	result.View = o.View
	return result
}

func (o *BatchGetServiceAccountKeysRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetServiceAccountKeysRequest) Merge(source *BatchGetServiceAccountKeysRequest) {
	for _, sourceValue := range source.GetNames() {
		exists := false
		for _, currentValue := range o.Names {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *service_account_key.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &service_account_key.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Names = append(o.Names, newDstElement)
		}
	}

	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(service_account_key.ServiceAccountKey_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *BatchGetServiceAccountKeysRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetServiceAccountKeysRequest))
}

func (o *BatchGetServiceAccountKeysResponse) GotenObjectExt() {}

func (o *BatchGetServiceAccountKeysResponse) MakeFullFieldMask() *BatchGetServiceAccountKeysResponse_FieldMask {
	return FullBatchGetServiceAccountKeysResponse_FieldMask()
}

func (o *BatchGetServiceAccountKeysResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetServiceAccountKeysResponse_FieldMask()
}

func (o *BatchGetServiceAccountKeysResponse) MakeDiffFieldMask(other *BatchGetServiceAccountKeysResponse) *BatchGetServiceAccountKeysResponse_FieldMask {
	if o == nil && other == nil {
		return &BatchGetServiceAccountKeysResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetServiceAccountKeysResponse_FieldMask()
	}

	res := &BatchGetServiceAccountKeysResponse_FieldMask{}

	if len(o.GetServiceAccountKeys()) == len(other.GetServiceAccountKeys()) {
		for i, lValue := range o.GetServiceAccountKeys() {
			rValue := other.GetServiceAccountKeys()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &BatchGetServiceAccountKeysResponse_FieldTerminalPath{selector: BatchGetServiceAccountKeysResponse_FieldPathSelectorServiceAccountKeys})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetServiceAccountKeysResponse_FieldTerminalPath{selector: BatchGetServiceAccountKeysResponse_FieldPathSelectorServiceAccountKeys})
	}

	if len(o.GetMissing()) == len(other.GetMissing()) {
		for i, lValue := range o.GetMissing() {
			rValue := other.GetMissing()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetServiceAccountKeysResponse_FieldTerminalPath{selector: BatchGetServiceAccountKeysResponse_FieldPathSelectorMissing})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetServiceAccountKeysResponse_FieldTerminalPath{selector: BatchGetServiceAccountKeysResponse_FieldPathSelectorMissing})
	}
	return res
}

func (o *BatchGetServiceAccountKeysResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetServiceAccountKeysResponse))
}

func (o *BatchGetServiceAccountKeysResponse) Clone() *BatchGetServiceAccountKeysResponse {
	if o == nil {
		return nil
	}
	result := &BatchGetServiceAccountKeysResponse{}
	result.ServiceAccountKeys = make([]*service_account_key.ServiceAccountKey, len(o.ServiceAccountKeys))
	for i, sourceValue := range o.ServiceAccountKeys {
		result.ServiceAccountKeys[i] = sourceValue.Clone()
	}
	result.Missing = make([]*service_account_key.Reference, len(o.Missing))
	for i, sourceValue := range o.Missing {
		if sourceValue == nil {
			result.Missing[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Missing[i] = &service_account_key.Reference{}
			if err := result.Missing[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	return result
}

func (o *BatchGetServiceAccountKeysResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetServiceAccountKeysResponse) Merge(source *BatchGetServiceAccountKeysResponse) {
	for _, sourceValue := range source.GetServiceAccountKeys() {
		exists := false
		for _, currentValue := range o.ServiceAccountKeys {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *service_account_key.ServiceAccountKey
			if sourceValue != nil {
				newDstElement = new(service_account_key.ServiceAccountKey)
				newDstElement.Merge(sourceValue)
			}
			o.ServiceAccountKeys = append(o.ServiceAccountKeys, newDstElement)
		}
	}

	for _, sourceValue := range source.GetMissing() {
		exists := false
		for _, currentValue := range o.Missing {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *service_account_key.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &service_account_key.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Missing = append(o.Missing, newDstElement)
		}
	}

}

func (o *BatchGetServiceAccountKeysResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetServiceAccountKeysResponse))
}

func (o *ListServiceAccountKeysRequest) GotenObjectExt() {}

func (o *ListServiceAccountKeysRequest) MakeFullFieldMask() *ListServiceAccountKeysRequest_FieldMask {
	return FullListServiceAccountKeysRequest_FieldMask()
}

func (o *ListServiceAccountKeysRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListServiceAccountKeysRequest_FieldMask()
}

func (o *ListServiceAccountKeysRequest) MakeDiffFieldMask(other *ListServiceAccountKeysRequest) *ListServiceAccountKeysRequest_FieldMask {
	if o == nil && other == nil {
		return &ListServiceAccountKeysRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListServiceAccountKeysRequest_FieldMask()
	}

	res := &ListServiceAccountKeysRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &ListServiceAccountKeysRequest_FieldTerminalPath{selector: ListServiceAccountKeysRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &ListServiceAccountKeysRequest_FieldTerminalPath{selector: ListServiceAccountKeysRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &ListServiceAccountKeysRequest_FieldTerminalPath{selector: ListServiceAccountKeysRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &ListServiceAccountKeysRequest_FieldTerminalPath{selector: ListServiceAccountKeysRequest_FieldPathSelectorOrderBy})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &ListServiceAccountKeysRequest_FieldTerminalPath{selector: ListServiceAccountKeysRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &ListServiceAccountKeysRequest_FieldTerminalPath{selector: ListServiceAccountKeysRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &ListServiceAccountKeysRequest_FieldTerminalPath{selector: ListServiceAccountKeysRequest_FieldPathSelectorView})
	}
	if o.GetIncludePagingInfo() != other.GetIncludePagingInfo() {
		res.Paths = append(res.Paths, &ListServiceAccountKeysRequest_FieldTerminalPath{selector: ListServiceAccountKeysRequest_FieldPathSelectorIncludePagingInfo})
	}
	return res
}

func (o *ListServiceAccountKeysRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListServiceAccountKeysRequest))
}

func (o *ListServiceAccountKeysRequest) Clone() *ListServiceAccountKeysRequest {
	if o == nil {
		return nil
	}
	result := &ListServiceAccountKeysRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &service_account_key.ParentName{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &service_account_key.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &service_account_key.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &service_account_key.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*service_account_key.ServiceAccountKey_FieldMask)
	result.View = o.View
	result.IncludePagingInfo = o.IncludePagingInfo
	return result
}

func (o *ListServiceAccountKeysRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListServiceAccountKeysRequest) Merge(source *ListServiceAccountKeysRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &service_account_key.ParentName{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &service_account_key.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &service_account_key.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &service_account_key.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(service_account_key.ServiceAccountKey_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.IncludePagingInfo = source.GetIncludePagingInfo()
}

func (o *ListServiceAccountKeysRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListServiceAccountKeysRequest))
}

func (o *ListServiceAccountKeysResponse) GotenObjectExt() {}

func (o *ListServiceAccountKeysResponse) MakeFullFieldMask() *ListServiceAccountKeysResponse_FieldMask {
	return FullListServiceAccountKeysResponse_FieldMask()
}

func (o *ListServiceAccountKeysResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListServiceAccountKeysResponse_FieldMask()
}

func (o *ListServiceAccountKeysResponse) MakeDiffFieldMask(other *ListServiceAccountKeysResponse) *ListServiceAccountKeysResponse_FieldMask {
	if o == nil && other == nil {
		return &ListServiceAccountKeysResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListServiceAccountKeysResponse_FieldMask()
	}

	res := &ListServiceAccountKeysResponse_FieldMask{}

	if len(o.GetServiceAccountKeys()) == len(other.GetServiceAccountKeys()) {
		for i, lValue := range o.GetServiceAccountKeys() {
			rValue := other.GetServiceAccountKeys()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &ListServiceAccountKeysResponse_FieldTerminalPath{selector: ListServiceAccountKeysResponse_FieldPathSelectorServiceAccountKeys})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ListServiceAccountKeysResponse_FieldTerminalPath{selector: ListServiceAccountKeysResponse_FieldPathSelectorServiceAccountKeys})
	}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &ListServiceAccountKeysResponse_FieldTerminalPath{selector: ListServiceAccountKeysResponse_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &ListServiceAccountKeysResponse_FieldTerminalPath{selector: ListServiceAccountKeysResponse_FieldPathSelectorNextPageToken})
	}
	if o.GetCurrentOffset() != other.GetCurrentOffset() {
		res.Paths = append(res.Paths, &ListServiceAccountKeysResponse_FieldTerminalPath{selector: ListServiceAccountKeysResponse_FieldPathSelectorCurrentOffset})
	}
	if o.GetTotalResultsCount() != other.GetTotalResultsCount() {
		res.Paths = append(res.Paths, &ListServiceAccountKeysResponse_FieldTerminalPath{selector: ListServiceAccountKeysResponse_FieldPathSelectorTotalResultsCount})
	}
	return res
}

func (o *ListServiceAccountKeysResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListServiceAccountKeysResponse))
}

func (o *ListServiceAccountKeysResponse) Clone() *ListServiceAccountKeysResponse {
	if o == nil {
		return nil
	}
	result := &ListServiceAccountKeysResponse{}
	result.ServiceAccountKeys = make([]*service_account_key.ServiceAccountKey, len(o.ServiceAccountKeys))
	for i, sourceValue := range o.ServiceAccountKeys {
		result.ServiceAccountKeys[i] = sourceValue.Clone()
	}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &service_account_key.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &service_account_key.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.CurrentOffset = o.CurrentOffset
	result.TotalResultsCount = o.TotalResultsCount
	return result
}

func (o *ListServiceAccountKeysResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListServiceAccountKeysResponse) Merge(source *ListServiceAccountKeysResponse) {
	for _, sourceValue := range source.GetServiceAccountKeys() {
		exists := false
		for _, currentValue := range o.ServiceAccountKeys {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *service_account_key.ServiceAccountKey
			if sourceValue != nil {
				newDstElement = new(service_account_key.ServiceAccountKey)
				newDstElement.Merge(sourceValue)
			}
			o.ServiceAccountKeys = append(o.ServiceAccountKeys, newDstElement)
		}
	}

	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &service_account_key.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &service_account_key.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
	o.CurrentOffset = source.GetCurrentOffset()
	o.TotalResultsCount = source.GetTotalResultsCount()
}

func (o *ListServiceAccountKeysResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListServiceAccountKeysResponse))
}

func (o *WatchServiceAccountKeyRequest) GotenObjectExt() {}

func (o *WatchServiceAccountKeyRequest) MakeFullFieldMask() *WatchServiceAccountKeyRequest_FieldMask {
	return FullWatchServiceAccountKeyRequest_FieldMask()
}

func (o *WatchServiceAccountKeyRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchServiceAccountKeyRequest_FieldMask()
}

func (o *WatchServiceAccountKeyRequest) MakeDiffFieldMask(other *WatchServiceAccountKeyRequest) *WatchServiceAccountKeyRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchServiceAccountKeyRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchServiceAccountKeyRequest_FieldMask()
	}

	res := &WatchServiceAccountKeyRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &WatchServiceAccountKeyRequest_FieldTerminalPath{selector: WatchServiceAccountKeyRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchServiceAccountKeyRequest_FieldTerminalPath{selector: WatchServiceAccountKeyRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchServiceAccountKeyRequest_FieldTerminalPath{selector: WatchServiceAccountKeyRequest_FieldPathSelectorView})
	}
	return res
}

func (o *WatchServiceAccountKeyRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchServiceAccountKeyRequest))
}

func (o *WatchServiceAccountKeyRequest) Clone() *WatchServiceAccountKeyRequest {
	if o == nil {
		return nil
	}
	result := &WatchServiceAccountKeyRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &service_account_key.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*service_account_key.ServiceAccountKey_FieldMask)
	result.View = o.View
	return result
}

func (o *WatchServiceAccountKeyRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchServiceAccountKeyRequest) Merge(source *WatchServiceAccountKeyRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &service_account_key.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(service_account_key.ServiceAccountKey_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *WatchServiceAccountKeyRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchServiceAccountKeyRequest))
}

func (o *WatchServiceAccountKeyResponse) GotenObjectExt() {}

func (o *WatchServiceAccountKeyResponse) MakeFullFieldMask() *WatchServiceAccountKeyResponse_FieldMask {
	return FullWatchServiceAccountKeyResponse_FieldMask()
}

func (o *WatchServiceAccountKeyResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchServiceAccountKeyResponse_FieldMask()
}

func (o *WatchServiceAccountKeyResponse) MakeDiffFieldMask(other *WatchServiceAccountKeyResponse) *WatchServiceAccountKeyResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchServiceAccountKeyResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchServiceAccountKeyResponse_FieldMask()
	}

	res := &WatchServiceAccountKeyResponse_FieldMask{}
	if !proto.Equal(o.GetChange(), other.GetChange()) {
		res.Paths = append(res.Paths, &WatchServiceAccountKeyResponse_FieldTerminalPath{selector: WatchServiceAccountKeyResponse_FieldPathSelectorChange})
	}
	return res
}

func (o *WatchServiceAccountKeyResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchServiceAccountKeyResponse))
}

func (o *WatchServiceAccountKeyResponse) Clone() *WatchServiceAccountKeyResponse {
	if o == nil {
		return nil
	}
	result := &WatchServiceAccountKeyResponse{}
	result.Change = proto.Clone(o.Change).(*service_account_key.ServiceAccountKeyChange)
	return result
}

func (o *WatchServiceAccountKeyResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchServiceAccountKeyResponse) Merge(source *WatchServiceAccountKeyResponse) {
	if source.GetChange() != nil {
		if o.Change == nil {
			o.Change = new(service_account_key.ServiceAccountKeyChange)
		}
		proto.Merge(o.Change, source.GetChange())
	}
}

func (o *WatchServiceAccountKeyResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchServiceAccountKeyResponse))
}

func (o *WatchServiceAccountKeysRequest) GotenObjectExt() {}

func (o *WatchServiceAccountKeysRequest) MakeFullFieldMask() *WatchServiceAccountKeysRequest_FieldMask {
	return FullWatchServiceAccountKeysRequest_FieldMask()
}

func (o *WatchServiceAccountKeysRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchServiceAccountKeysRequest_FieldMask()
}

func (o *WatchServiceAccountKeysRequest) MakeDiffFieldMask(other *WatchServiceAccountKeysRequest) *WatchServiceAccountKeysRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchServiceAccountKeysRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchServiceAccountKeysRequest_FieldMask()
	}

	res := &WatchServiceAccountKeysRequest_FieldMask{}
	if o.GetType() != other.GetType() {
		res.Paths = append(res.Paths, &WatchServiceAccountKeysRequest_FieldTerminalPath{selector: WatchServiceAccountKeysRequest_FieldPathSelectorType})
	}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &WatchServiceAccountKeysRequest_FieldTerminalPath{selector: WatchServiceAccountKeysRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &WatchServiceAccountKeysRequest_FieldTerminalPath{selector: WatchServiceAccountKeysRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &WatchServiceAccountKeysRequest_FieldTerminalPath{selector: WatchServiceAccountKeysRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &WatchServiceAccountKeysRequest_FieldTerminalPath{selector: WatchServiceAccountKeysRequest_FieldPathSelectorOrderBy})
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchServiceAccountKeysRequest_FieldTerminalPath{selector: WatchServiceAccountKeysRequest_FieldPathSelectorResumeToken})
	}
	if !proto.Equal(o.GetStartingTime(), other.GetStartingTime()) {
		res.Paths = append(res.Paths, &WatchServiceAccountKeysRequest_FieldTerminalPath{selector: WatchServiceAccountKeysRequest_FieldPathSelectorStartingTime})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &WatchServiceAccountKeysRequest_FieldTerminalPath{selector: WatchServiceAccountKeysRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchServiceAccountKeysRequest_FieldTerminalPath{selector: WatchServiceAccountKeysRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchServiceAccountKeysRequest_FieldTerminalPath{selector: WatchServiceAccountKeysRequest_FieldPathSelectorView})
	}
	if o.GetMaxChunkSize() != other.GetMaxChunkSize() {
		res.Paths = append(res.Paths, &WatchServiceAccountKeysRequest_FieldTerminalPath{selector: WatchServiceAccountKeysRequest_FieldPathSelectorMaxChunkSize})
	}
	return res
}

func (o *WatchServiceAccountKeysRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchServiceAccountKeysRequest))
}

func (o *WatchServiceAccountKeysRequest) Clone() *WatchServiceAccountKeysRequest {
	if o == nil {
		return nil
	}
	result := &WatchServiceAccountKeysRequest{}
	result.Type = o.Type
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &service_account_key.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &service_account_key.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &service_account_key.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.ResumeToken = o.ResumeToken
	result.StartingTime = proto.Clone(o.StartingTime).(*timestamp.Timestamp)
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &service_account_key.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*service_account_key.ServiceAccountKey_FieldMask)
	result.View = o.View
	result.MaxChunkSize = o.MaxChunkSize
	return result
}

func (o *WatchServiceAccountKeysRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchServiceAccountKeysRequest) Merge(source *WatchServiceAccountKeysRequest) {
	o.Type = source.GetType()
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &service_account_key.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &service_account_key.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &service_account_key.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	o.ResumeToken = source.GetResumeToken()
	if source.GetStartingTime() != nil {
		if o.StartingTime == nil {
			o.StartingTime = new(timestamp.Timestamp)
		}
		proto.Merge(o.StartingTime, source.GetStartingTime())
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &service_account_key.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(service_account_key.ServiceAccountKey_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.MaxChunkSize = source.GetMaxChunkSize()
}

func (o *WatchServiceAccountKeysRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchServiceAccountKeysRequest))
}

func (o *WatchServiceAccountKeysResponse) GotenObjectExt() {}

func (o *WatchServiceAccountKeysResponse) MakeFullFieldMask() *WatchServiceAccountKeysResponse_FieldMask {
	return FullWatchServiceAccountKeysResponse_FieldMask()
}

func (o *WatchServiceAccountKeysResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchServiceAccountKeysResponse_FieldMask()
}

func (o *WatchServiceAccountKeysResponse) MakeDiffFieldMask(other *WatchServiceAccountKeysResponse) *WatchServiceAccountKeysResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchServiceAccountKeysResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchServiceAccountKeysResponse_FieldMask()
	}

	res := &WatchServiceAccountKeysResponse_FieldMask{}

	if len(o.GetServiceAccountKeyChanges()) == len(other.GetServiceAccountKeyChanges()) {
		for i, lValue := range o.GetServiceAccountKeyChanges() {
			rValue := other.GetServiceAccountKeyChanges()[i]
			if !proto.Equal(lValue, rValue) {
				res.Paths = append(res.Paths, &WatchServiceAccountKeysResponse_FieldTerminalPath{selector: WatchServiceAccountKeysResponse_FieldPathSelectorServiceAccountKeyChanges})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &WatchServiceAccountKeysResponse_FieldTerminalPath{selector: WatchServiceAccountKeysResponse_FieldPathSelectorServiceAccountKeyChanges})
	}
	if o.GetIsCurrent() != other.GetIsCurrent() {
		res.Paths = append(res.Paths, &WatchServiceAccountKeysResponse_FieldTerminalPath{selector: WatchServiceAccountKeysResponse_FieldPathSelectorIsCurrent})
	}
	{
		subMask := o.GetPageTokenChange().MakeDiffFieldMask(other.GetPageTokenChange())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &WatchServiceAccountKeysResponse_FieldTerminalPath{selector: WatchServiceAccountKeysResponse_FieldPathSelectorPageTokenChange})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &WatchServiceAccountKeysResponse_FieldSubPath{selector: WatchServiceAccountKeysResponse_FieldPathSelectorPageTokenChange, subPath: subpath})
			}
		}
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchServiceAccountKeysResponse_FieldTerminalPath{selector: WatchServiceAccountKeysResponse_FieldPathSelectorResumeToken})
	}
	if o.GetSnapshotSize() != other.GetSnapshotSize() {
		res.Paths = append(res.Paths, &WatchServiceAccountKeysResponse_FieldTerminalPath{selector: WatchServiceAccountKeysResponse_FieldPathSelectorSnapshotSize})
	}
	if o.GetIsSoftReset() != other.GetIsSoftReset() {
		res.Paths = append(res.Paths, &WatchServiceAccountKeysResponse_FieldTerminalPath{selector: WatchServiceAccountKeysResponse_FieldPathSelectorIsSoftReset})
	}
	if o.GetIsHardReset() != other.GetIsHardReset() {
		res.Paths = append(res.Paths, &WatchServiceAccountKeysResponse_FieldTerminalPath{selector: WatchServiceAccountKeysResponse_FieldPathSelectorIsHardReset})
	}
	return res
}

func (o *WatchServiceAccountKeysResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchServiceAccountKeysResponse))
}

func (o *WatchServiceAccountKeysResponse) Clone() *WatchServiceAccountKeysResponse {
	if o == nil {
		return nil
	}
	result := &WatchServiceAccountKeysResponse{}
	result.ServiceAccountKeyChanges = make([]*service_account_key.ServiceAccountKeyChange, len(o.ServiceAccountKeyChanges))
	for i, sourceValue := range o.ServiceAccountKeyChanges {
		result.ServiceAccountKeyChanges[i] = proto.Clone(sourceValue).(*service_account_key.ServiceAccountKeyChange)
	}
	result.IsCurrent = o.IsCurrent
	result.PageTokenChange = o.PageTokenChange.Clone()
	result.ResumeToken = o.ResumeToken
	result.SnapshotSize = o.SnapshotSize
	result.IsSoftReset = o.IsSoftReset
	result.IsHardReset = o.IsHardReset
	return result
}

func (o *WatchServiceAccountKeysResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchServiceAccountKeysResponse) Merge(source *WatchServiceAccountKeysResponse) {
	for _, sourceValue := range source.GetServiceAccountKeyChanges() {
		exists := false
		for _, currentValue := range o.ServiceAccountKeyChanges {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *service_account_key.ServiceAccountKeyChange
			if sourceValue != nil {
				newDstElement = new(service_account_key.ServiceAccountKeyChange)
				proto.Merge(newDstElement, sourceValue)
			}
			o.ServiceAccountKeyChanges = append(o.ServiceAccountKeyChanges, newDstElement)
		}
	}

	o.IsCurrent = source.GetIsCurrent()
	if source.GetPageTokenChange() != nil {
		if o.PageTokenChange == nil {
			o.PageTokenChange = new(WatchServiceAccountKeysResponse_PageTokenChange)
		}
		o.PageTokenChange.Merge(source.GetPageTokenChange())
	}
	o.ResumeToken = source.GetResumeToken()
	o.SnapshotSize = source.GetSnapshotSize()
	o.IsSoftReset = source.GetIsSoftReset()
	o.IsHardReset = source.GetIsHardReset()
}

func (o *WatchServiceAccountKeysResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchServiceAccountKeysResponse))
}

func (o *WatchServiceAccountKeysResponse_PageTokenChange) GotenObjectExt() {}

func (o *WatchServiceAccountKeysResponse_PageTokenChange) MakeFullFieldMask() *WatchServiceAccountKeysResponse_PageTokenChange_FieldMask {
	return FullWatchServiceAccountKeysResponse_PageTokenChange_FieldMask()
}

func (o *WatchServiceAccountKeysResponse_PageTokenChange) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchServiceAccountKeysResponse_PageTokenChange_FieldMask()
}

func (o *WatchServiceAccountKeysResponse_PageTokenChange) MakeDiffFieldMask(other *WatchServiceAccountKeysResponse_PageTokenChange) *WatchServiceAccountKeysResponse_PageTokenChange_FieldMask {
	if o == nil && other == nil {
		return &WatchServiceAccountKeysResponse_PageTokenChange_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchServiceAccountKeysResponse_PageTokenChange_FieldMask()
	}

	res := &WatchServiceAccountKeysResponse_PageTokenChange_FieldMask{}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &WatchServiceAccountKeysResponsePageTokenChange_FieldTerminalPath{selector: WatchServiceAccountKeysResponsePageTokenChange_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &WatchServiceAccountKeysResponsePageTokenChange_FieldTerminalPath{selector: WatchServiceAccountKeysResponsePageTokenChange_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *WatchServiceAccountKeysResponse_PageTokenChange) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchServiceAccountKeysResponse_PageTokenChange))
}

func (o *WatchServiceAccountKeysResponse_PageTokenChange) Clone() *WatchServiceAccountKeysResponse_PageTokenChange {
	if o == nil {
		return nil
	}
	result := &WatchServiceAccountKeysResponse_PageTokenChange{}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &service_account_key.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &service_account_key.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *WatchServiceAccountKeysResponse_PageTokenChange) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchServiceAccountKeysResponse_PageTokenChange) Merge(source *WatchServiceAccountKeysResponse_PageTokenChange) {
	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &service_account_key.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &service_account_key.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *WatchServiceAccountKeysResponse_PageTokenChange) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchServiceAccountKeysResponse_PageTokenChange))
}

func (o *CreateServiceAccountKeyRequest) GotenObjectExt() {}

func (o *CreateServiceAccountKeyRequest) MakeFullFieldMask() *CreateServiceAccountKeyRequest_FieldMask {
	return FullCreateServiceAccountKeyRequest_FieldMask()
}

func (o *CreateServiceAccountKeyRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullCreateServiceAccountKeyRequest_FieldMask()
}

func (o *CreateServiceAccountKeyRequest) MakeDiffFieldMask(other *CreateServiceAccountKeyRequest) *CreateServiceAccountKeyRequest_FieldMask {
	if o == nil && other == nil {
		return &CreateServiceAccountKeyRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullCreateServiceAccountKeyRequest_FieldMask()
	}

	res := &CreateServiceAccountKeyRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &CreateServiceAccountKeyRequest_FieldTerminalPath{selector: CreateServiceAccountKeyRequest_FieldPathSelectorParent})
	}
	{
		subMask := o.GetServiceAccountKey().MakeDiffFieldMask(other.GetServiceAccountKey())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &CreateServiceAccountKeyRequest_FieldTerminalPath{selector: CreateServiceAccountKeyRequest_FieldPathSelectorServiceAccountKey})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &CreateServiceAccountKeyRequest_FieldSubPath{selector: CreateServiceAccountKeyRequest_FieldPathSelectorServiceAccountKey, subPath: subpath})
			}
		}
	}
	return res
}

func (o *CreateServiceAccountKeyRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*CreateServiceAccountKeyRequest))
}

func (o *CreateServiceAccountKeyRequest) Clone() *CreateServiceAccountKeyRequest {
	if o == nil {
		return nil
	}
	result := &CreateServiceAccountKeyRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &service_account_key.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.ServiceAccountKey = o.ServiceAccountKey.Clone()
	return result
}

func (o *CreateServiceAccountKeyRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *CreateServiceAccountKeyRequest) Merge(source *CreateServiceAccountKeyRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &service_account_key.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	if source.GetServiceAccountKey() != nil {
		if o.ServiceAccountKey == nil {
			o.ServiceAccountKey = new(service_account_key.ServiceAccountKey)
		}
		o.ServiceAccountKey.Merge(source.GetServiceAccountKey())
	}
}

func (o *CreateServiceAccountKeyRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*CreateServiceAccountKeyRequest))
}

func (o *UpdateServiceAccountKeyRequest) GotenObjectExt() {}

func (o *UpdateServiceAccountKeyRequest) MakeFullFieldMask() *UpdateServiceAccountKeyRequest_FieldMask {
	return FullUpdateServiceAccountKeyRequest_FieldMask()
}

func (o *UpdateServiceAccountKeyRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateServiceAccountKeyRequest_FieldMask()
}

func (o *UpdateServiceAccountKeyRequest) MakeDiffFieldMask(other *UpdateServiceAccountKeyRequest) *UpdateServiceAccountKeyRequest_FieldMask {
	if o == nil && other == nil {
		return &UpdateServiceAccountKeyRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateServiceAccountKeyRequest_FieldMask()
	}

	res := &UpdateServiceAccountKeyRequest_FieldMask{}
	{
		subMask := o.GetServiceAccountKey().MakeDiffFieldMask(other.GetServiceAccountKey())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateServiceAccountKeyRequest_FieldTerminalPath{selector: UpdateServiceAccountKeyRequest_FieldPathSelectorServiceAccountKey})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateServiceAccountKeyRequest_FieldSubPath{selector: UpdateServiceAccountKeyRequest_FieldPathSelectorServiceAccountKey, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetUpdateMask(), other.GetUpdateMask()) {
		res.Paths = append(res.Paths, &UpdateServiceAccountKeyRequest_FieldTerminalPath{selector: UpdateServiceAccountKeyRequest_FieldPathSelectorUpdateMask})
	}
	{
		subMask := o.GetCas().MakeDiffFieldMask(other.GetCas())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateServiceAccountKeyRequest_FieldTerminalPath{selector: UpdateServiceAccountKeyRequest_FieldPathSelectorCas})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateServiceAccountKeyRequest_FieldSubPath{selector: UpdateServiceAccountKeyRequest_FieldPathSelectorCas, subPath: subpath})
			}
		}
	}
	if o.GetAllowMissing() != other.GetAllowMissing() {
		res.Paths = append(res.Paths, &UpdateServiceAccountKeyRequest_FieldTerminalPath{selector: UpdateServiceAccountKeyRequest_FieldPathSelectorAllowMissing})
	}
	return res
}

func (o *UpdateServiceAccountKeyRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateServiceAccountKeyRequest))
}

func (o *UpdateServiceAccountKeyRequest) Clone() *UpdateServiceAccountKeyRequest {
	if o == nil {
		return nil
	}
	result := &UpdateServiceAccountKeyRequest{}
	result.ServiceAccountKey = o.ServiceAccountKey.Clone()
	result.UpdateMask = proto.Clone(o.UpdateMask).(*service_account_key.ServiceAccountKey_FieldMask)
	result.Cas = o.Cas.Clone()
	result.AllowMissing = o.AllowMissing
	return result
}

func (o *UpdateServiceAccountKeyRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateServiceAccountKeyRequest) Merge(source *UpdateServiceAccountKeyRequest) {
	if source.GetServiceAccountKey() != nil {
		if o.ServiceAccountKey == nil {
			o.ServiceAccountKey = new(service_account_key.ServiceAccountKey)
		}
		o.ServiceAccountKey.Merge(source.GetServiceAccountKey())
	}
	if source.GetUpdateMask() != nil {
		if o.UpdateMask == nil {
			o.UpdateMask = new(service_account_key.ServiceAccountKey_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetUpdateMask().ToProtoFieldMask(), o.UpdateMask.ToProtoFieldMask())
		if err := o.UpdateMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	if source.GetCas() != nil {
		if o.Cas == nil {
			o.Cas = new(UpdateServiceAccountKeyRequest_CAS)
		}
		o.Cas.Merge(source.GetCas())
	}
	o.AllowMissing = source.GetAllowMissing()
}

func (o *UpdateServiceAccountKeyRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateServiceAccountKeyRequest))
}

func (o *UpdateServiceAccountKeyRequest_CAS) GotenObjectExt() {}

func (o *UpdateServiceAccountKeyRequest_CAS) MakeFullFieldMask() *UpdateServiceAccountKeyRequest_CAS_FieldMask {
	return FullUpdateServiceAccountKeyRequest_CAS_FieldMask()
}

func (o *UpdateServiceAccountKeyRequest_CAS) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateServiceAccountKeyRequest_CAS_FieldMask()
}

func (o *UpdateServiceAccountKeyRequest_CAS) MakeDiffFieldMask(other *UpdateServiceAccountKeyRequest_CAS) *UpdateServiceAccountKeyRequest_CAS_FieldMask {
	if o == nil && other == nil {
		return &UpdateServiceAccountKeyRequest_CAS_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateServiceAccountKeyRequest_CAS_FieldMask()
	}

	res := &UpdateServiceAccountKeyRequest_CAS_FieldMask{}
	{
		subMask := o.GetConditionalState().MakeDiffFieldMask(other.GetConditionalState())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateServiceAccountKeyRequestCAS_FieldTerminalPath{selector: UpdateServiceAccountKeyRequestCAS_FieldPathSelectorConditionalState})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateServiceAccountKeyRequestCAS_FieldSubPath{selector: UpdateServiceAccountKeyRequestCAS_FieldPathSelectorConditionalState, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &UpdateServiceAccountKeyRequestCAS_FieldTerminalPath{selector: UpdateServiceAccountKeyRequestCAS_FieldPathSelectorFieldMask})
	}
	return res
}

func (o *UpdateServiceAccountKeyRequest_CAS) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateServiceAccountKeyRequest_CAS))
}

func (o *UpdateServiceAccountKeyRequest_CAS) Clone() *UpdateServiceAccountKeyRequest_CAS {
	if o == nil {
		return nil
	}
	result := &UpdateServiceAccountKeyRequest_CAS{}
	result.ConditionalState = o.ConditionalState.Clone()
	result.FieldMask = proto.Clone(o.FieldMask).(*service_account_key.ServiceAccountKey_FieldMask)
	return result
}

func (o *UpdateServiceAccountKeyRequest_CAS) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateServiceAccountKeyRequest_CAS) Merge(source *UpdateServiceAccountKeyRequest_CAS) {
	if source.GetConditionalState() != nil {
		if o.ConditionalState == nil {
			o.ConditionalState = new(service_account_key.ServiceAccountKey)
		}
		o.ConditionalState.Merge(source.GetConditionalState())
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(service_account_key.ServiceAccountKey_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
}

func (o *UpdateServiceAccountKeyRequest_CAS) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateServiceAccountKeyRequest_CAS))
}

func (o *DeleteServiceAccountKeyRequest) GotenObjectExt() {}

func (o *DeleteServiceAccountKeyRequest) MakeFullFieldMask() *DeleteServiceAccountKeyRequest_FieldMask {
	return FullDeleteServiceAccountKeyRequest_FieldMask()
}

func (o *DeleteServiceAccountKeyRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDeleteServiceAccountKeyRequest_FieldMask()
}

func (o *DeleteServiceAccountKeyRequest) MakeDiffFieldMask(other *DeleteServiceAccountKeyRequest) *DeleteServiceAccountKeyRequest_FieldMask {
	if o == nil && other == nil {
		return &DeleteServiceAccountKeyRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDeleteServiceAccountKeyRequest_FieldMask()
	}

	res := &DeleteServiceAccountKeyRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &DeleteServiceAccountKeyRequest_FieldTerminalPath{selector: DeleteServiceAccountKeyRequest_FieldPathSelectorName})
	}
	return res
}

func (o *DeleteServiceAccountKeyRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*DeleteServiceAccountKeyRequest))
}

func (o *DeleteServiceAccountKeyRequest) Clone() *DeleteServiceAccountKeyRequest {
	if o == nil {
		return nil
	}
	result := &DeleteServiceAccountKeyRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &service_account_key.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *DeleteServiceAccountKeyRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *DeleteServiceAccountKeyRequest) Merge(source *DeleteServiceAccountKeyRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &service_account_key.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
}

func (o *DeleteServiceAccountKeyRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*DeleteServiceAccountKeyRequest))
}
