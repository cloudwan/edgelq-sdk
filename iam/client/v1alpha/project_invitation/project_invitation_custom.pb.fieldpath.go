// Code generated by protoc-gen-goten-object
// File: edgelq/iam/proto/v1alpha/project_invitation_custom.proto
// DO NOT EDIT!!!

package project_invitation_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	project "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha/project"
	project_invitation "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha/project_invitation"
)

// ensure the imports are used
var (
	_ = json.Marshaler(nil)
	_ = fmt.Stringer(nil)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = proto.Message(nil)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &project.Project{}
	_ = &project_invitation.ProjectInvitation{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type AcceptProjectInvitationRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() AcceptProjectInvitationRequest_FieldPathSelector
	Get(source *AcceptProjectInvitationRequest) []interface{}
	GetSingle(source *AcceptProjectInvitationRequest) (interface{}, bool)
	ClearValue(item *AcceptProjectInvitationRequest)

	// Those methods build corresponding AcceptProjectInvitationRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) AcceptProjectInvitationRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) AcceptProjectInvitationRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) AcceptProjectInvitationRequest_FieldPathArrayItemValue
}

type AcceptProjectInvitationRequest_FieldPathSelector int32

const (
	AcceptProjectInvitationRequest_FieldPathSelectorName AcceptProjectInvitationRequest_FieldPathSelector = 0
)

func (s AcceptProjectInvitationRequest_FieldPathSelector) String() string {
	switch s {
	case AcceptProjectInvitationRequest_FieldPathSelectorName:
		return "name"
	default:
		panic(fmt.Sprintf("Invalid selector for AcceptProjectInvitationRequest: %d", s))
	}
}

func BuildAcceptProjectInvitationRequest_FieldPath(fp gotenobject.RawFieldPath) (AcceptProjectInvitationRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object AcceptProjectInvitationRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &AcceptProjectInvitationRequest_FieldTerminalPath{selector: AcceptProjectInvitationRequest_FieldPathSelectorName}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object AcceptProjectInvitationRequest", fp)
}

func ParseAcceptProjectInvitationRequest_FieldPath(rawField string) (AcceptProjectInvitationRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildAcceptProjectInvitationRequest_FieldPath(fp)
}

func MustParseAcceptProjectInvitationRequest_FieldPath(rawField string) AcceptProjectInvitationRequest_FieldPath {
	fp, err := ParseAcceptProjectInvitationRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type AcceptProjectInvitationRequest_FieldTerminalPath struct {
	selector AcceptProjectInvitationRequest_FieldPathSelector
}

var _ AcceptProjectInvitationRequest_FieldPath = (*AcceptProjectInvitationRequest_FieldTerminalPath)(nil)

func (fp *AcceptProjectInvitationRequest_FieldTerminalPath) Selector() AcceptProjectInvitationRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *AcceptProjectInvitationRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *AcceptProjectInvitationRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source AcceptProjectInvitationRequest
func (fp *AcceptProjectInvitationRequest_FieldTerminalPath) Get(source *AcceptProjectInvitationRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case AcceptProjectInvitationRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for AcceptProjectInvitationRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *AcceptProjectInvitationRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*AcceptProjectInvitationRequest))
}

// GetSingle returns value pointed by specific field of from source AcceptProjectInvitationRequest
func (fp *AcceptProjectInvitationRequest_FieldTerminalPath) GetSingle(source *AcceptProjectInvitationRequest) (interface{}, bool) {
	switch fp.selector {
	case AcceptProjectInvitationRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for AcceptProjectInvitationRequest: %d", fp.selector))
	}
}

func (fp *AcceptProjectInvitationRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*AcceptProjectInvitationRequest))
}

// GetDefault returns a default value of the field type
func (fp *AcceptProjectInvitationRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case AcceptProjectInvitationRequest_FieldPathSelectorName:
		return (*project_invitation.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for AcceptProjectInvitationRequest: %d", fp.selector))
	}
}

func (fp *AcceptProjectInvitationRequest_FieldTerminalPath) ClearValue(item *AcceptProjectInvitationRequest) {
	if item != nil {
		switch fp.selector {
		case AcceptProjectInvitationRequest_FieldPathSelectorName:
			item.Name = nil
		default:
			panic(fmt.Sprintf("Invalid selector for AcceptProjectInvitationRequest: %d", fp.selector))
		}
	}
}

func (fp *AcceptProjectInvitationRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*AcceptProjectInvitationRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *AcceptProjectInvitationRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == AcceptProjectInvitationRequest_FieldPathSelectorName
}

func (fp *AcceptProjectInvitationRequest_FieldTerminalPath) WithIValue(value interface{}) AcceptProjectInvitationRequest_FieldPathValue {
	switch fp.selector {
	case AcceptProjectInvitationRequest_FieldPathSelectorName:
		return &AcceptProjectInvitationRequest_FieldTerminalPathValue{AcceptProjectInvitationRequest_FieldTerminalPath: *fp, value: value.(*project_invitation.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for AcceptProjectInvitationRequest: %d", fp.selector))
	}
}

func (fp *AcceptProjectInvitationRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *AcceptProjectInvitationRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) AcceptProjectInvitationRequest_FieldPathArrayOfValues {
	fpaov := &AcceptProjectInvitationRequest_FieldTerminalPathArrayOfValues{AcceptProjectInvitationRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case AcceptProjectInvitationRequest_FieldPathSelectorName:
		return &AcceptProjectInvitationRequest_FieldTerminalPathArrayOfValues{AcceptProjectInvitationRequest_FieldTerminalPath: *fp, values: values.([]*project_invitation.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for AcceptProjectInvitationRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *AcceptProjectInvitationRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *AcceptProjectInvitationRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) AcceptProjectInvitationRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for AcceptProjectInvitationRequest: %d", fp.selector))
	}
}

func (fp *AcceptProjectInvitationRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// AcceptProjectInvitationRequest_FieldPathValue allows storing values for AcceptProjectInvitationRequest fields according to their type
type AcceptProjectInvitationRequest_FieldPathValue interface {
	AcceptProjectInvitationRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **AcceptProjectInvitationRequest)
	CompareWith(*AcceptProjectInvitationRequest) (cmp int, comparable bool)
}

func ParseAcceptProjectInvitationRequest_FieldPathValue(pathStr, valueStr string) (AcceptProjectInvitationRequest_FieldPathValue, error) {
	fp, err := ParseAcceptProjectInvitationRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing AcceptProjectInvitationRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(AcceptProjectInvitationRequest_FieldPathValue), nil
}

func MustParseAcceptProjectInvitationRequest_FieldPathValue(pathStr, valueStr string) AcceptProjectInvitationRequest_FieldPathValue {
	fpv, err := ParseAcceptProjectInvitationRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type AcceptProjectInvitationRequest_FieldTerminalPathValue struct {
	AcceptProjectInvitationRequest_FieldTerminalPath
	value interface{}
}

var _ AcceptProjectInvitationRequest_FieldPathValue = (*AcceptProjectInvitationRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'AcceptProjectInvitationRequest' as interface{}
func (fpv *AcceptProjectInvitationRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *AcceptProjectInvitationRequest_FieldTerminalPathValue) AsNameValue() (*project_invitation.Reference, bool) {
	res, ok := fpv.value.(*project_invitation.Reference)
	return res, ok
}

// SetTo stores value for selected field for object AcceptProjectInvitationRequest
func (fpv *AcceptProjectInvitationRequest_FieldTerminalPathValue) SetTo(target **AcceptProjectInvitationRequest) {
	if *target == nil {
		*target = new(AcceptProjectInvitationRequest)
	}
	switch fpv.selector {
	case AcceptProjectInvitationRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*project_invitation.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for AcceptProjectInvitationRequest: %d", fpv.selector))
	}
}

func (fpv *AcceptProjectInvitationRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*AcceptProjectInvitationRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'AcceptProjectInvitationRequest_FieldTerminalPathValue' with the value under path in 'AcceptProjectInvitationRequest'.
func (fpv *AcceptProjectInvitationRequest_FieldTerminalPathValue) CompareWith(source *AcceptProjectInvitationRequest) (int, bool) {
	switch fpv.selector {
	case AcceptProjectInvitationRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*project_invitation.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for AcceptProjectInvitationRequest: %d", fpv.selector))
	}
}

func (fpv *AcceptProjectInvitationRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*AcceptProjectInvitationRequest))
}

// AcceptProjectInvitationRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for AcceptProjectInvitationRequest according to their type
// Present only for array (repeated) types.
type AcceptProjectInvitationRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	AcceptProjectInvitationRequest_FieldPath
	ContainsValue(*AcceptProjectInvitationRequest) bool
}

// ParseAcceptProjectInvitationRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseAcceptProjectInvitationRequest_FieldPathArrayItemValue(pathStr, valueStr string) (AcceptProjectInvitationRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseAcceptProjectInvitationRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing AcceptProjectInvitationRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(AcceptProjectInvitationRequest_FieldPathArrayItemValue), nil
}

func MustParseAcceptProjectInvitationRequest_FieldPathArrayItemValue(pathStr, valueStr string) AcceptProjectInvitationRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseAcceptProjectInvitationRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type AcceptProjectInvitationRequest_FieldTerminalPathArrayItemValue struct {
	AcceptProjectInvitationRequest_FieldTerminalPath
	value interface{}
}

var _ AcceptProjectInvitationRequest_FieldPathArrayItemValue = (*AcceptProjectInvitationRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object AcceptProjectInvitationRequest as interface{}
func (fpaiv *AcceptProjectInvitationRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *AcceptProjectInvitationRequest_FieldTerminalPathArrayItemValue) GetSingle(source *AcceptProjectInvitationRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *AcceptProjectInvitationRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*AcceptProjectInvitationRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'AcceptProjectInvitationRequest'
func (fpaiv *AcceptProjectInvitationRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *AcceptProjectInvitationRequest) bool {
	slice := fpaiv.AcceptProjectInvitationRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// AcceptProjectInvitationRequest_FieldPathArrayOfValues allows storing slice of values for AcceptProjectInvitationRequest fields according to their type
type AcceptProjectInvitationRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	AcceptProjectInvitationRequest_FieldPath
}

func ParseAcceptProjectInvitationRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (AcceptProjectInvitationRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseAcceptProjectInvitationRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing AcceptProjectInvitationRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(AcceptProjectInvitationRequest_FieldPathArrayOfValues), nil
}

func MustParseAcceptProjectInvitationRequest_FieldPathArrayOfValues(pathStr, valuesStr string) AcceptProjectInvitationRequest_FieldPathArrayOfValues {
	fpaov, err := ParseAcceptProjectInvitationRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type AcceptProjectInvitationRequest_FieldTerminalPathArrayOfValues struct {
	AcceptProjectInvitationRequest_FieldTerminalPath
	values interface{}
}

var _ AcceptProjectInvitationRequest_FieldPathArrayOfValues = (*AcceptProjectInvitationRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *AcceptProjectInvitationRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case AcceptProjectInvitationRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*project_invitation.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *AcceptProjectInvitationRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*project_invitation.Reference, bool) {
	res, ok := fpaov.values.([]*project_invitation.Reference)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type AcceptProjectInvitationResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() AcceptProjectInvitationResponse_FieldPathSelector
	Get(source *AcceptProjectInvitationResponse) []interface{}
	GetSingle(source *AcceptProjectInvitationResponse) (interface{}, bool)
	ClearValue(item *AcceptProjectInvitationResponse)

	// Those methods build corresponding AcceptProjectInvitationResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) AcceptProjectInvitationResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) AcceptProjectInvitationResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) AcceptProjectInvitationResponse_FieldPathArrayItemValue
}

type AcceptProjectInvitationResponse_FieldPathSelector int32

func (s AcceptProjectInvitationResponse_FieldPathSelector) String() string {
	switch s {
	default:
		panic(fmt.Sprintf("Invalid selector for AcceptProjectInvitationResponse: %d", s))
	}
}

func BuildAcceptProjectInvitationResponse_FieldPath(fp gotenobject.RawFieldPath) (AcceptProjectInvitationResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object AcceptProjectInvitationResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object AcceptProjectInvitationResponse", fp)
}

func ParseAcceptProjectInvitationResponse_FieldPath(rawField string) (AcceptProjectInvitationResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildAcceptProjectInvitationResponse_FieldPath(fp)
}

func MustParseAcceptProjectInvitationResponse_FieldPath(rawField string) AcceptProjectInvitationResponse_FieldPath {
	fp, err := ParseAcceptProjectInvitationResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type AcceptProjectInvitationResponse_FieldTerminalPath struct {
	selector AcceptProjectInvitationResponse_FieldPathSelector
}

var _ AcceptProjectInvitationResponse_FieldPath = (*AcceptProjectInvitationResponse_FieldTerminalPath)(nil)

func (fp *AcceptProjectInvitationResponse_FieldTerminalPath) Selector() AcceptProjectInvitationResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *AcceptProjectInvitationResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *AcceptProjectInvitationResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source AcceptProjectInvitationResponse
func (fp *AcceptProjectInvitationResponse_FieldTerminalPath) Get(source *AcceptProjectInvitationResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		default:
			panic(fmt.Sprintf("Invalid selector for AcceptProjectInvitationResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *AcceptProjectInvitationResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*AcceptProjectInvitationResponse))
}

// GetSingle returns value pointed by specific field of from source AcceptProjectInvitationResponse
func (fp *AcceptProjectInvitationResponse_FieldTerminalPath) GetSingle(source *AcceptProjectInvitationResponse) (interface{}, bool) {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for AcceptProjectInvitationResponse: %d", fp.selector))
	}
}

func (fp *AcceptProjectInvitationResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*AcceptProjectInvitationResponse))
}

// GetDefault returns a default value of the field type
func (fp *AcceptProjectInvitationResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for AcceptProjectInvitationResponse: %d", fp.selector))
	}
}

func (fp *AcceptProjectInvitationResponse_FieldTerminalPath) ClearValue(item *AcceptProjectInvitationResponse) {
	if item != nil {
		switch fp.selector {
		default:
			panic(fmt.Sprintf("Invalid selector for AcceptProjectInvitationResponse: %d", fp.selector))
		}
	}
}

func (fp *AcceptProjectInvitationResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*AcceptProjectInvitationResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *AcceptProjectInvitationResponse_FieldTerminalPath) IsLeaf() bool {
	return false
}

func (fp *AcceptProjectInvitationResponse_FieldTerminalPath) WithIValue(value interface{}) AcceptProjectInvitationResponse_FieldPathValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for AcceptProjectInvitationResponse: %d", fp.selector))
	}
}

func (fp *AcceptProjectInvitationResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *AcceptProjectInvitationResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) AcceptProjectInvitationResponse_FieldPathArrayOfValues {
	fpaov := &AcceptProjectInvitationResponse_FieldTerminalPathArrayOfValues{AcceptProjectInvitationResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for AcceptProjectInvitationResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *AcceptProjectInvitationResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *AcceptProjectInvitationResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) AcceptProjectInvitationResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for AcceptProjectInvitationResponse: %d", fp.selector))
	}
}

func (fp *AcceptProjectInvitationResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// AcceptProjectInvitationResponse_FieldPathValue allows storing values for AcceptProjectInvitationResponse fields according to their type
type AcceptProjectInvitationResponse_FieldPathValue interface {
	AcceptProjectInvitationResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **AcceptProjectInvitationResponse)
	CompareWith(*AcceptProjectInvitationResponse) (cmp int, comparable bool)
}

func ParseAcceptProjectInvitationResponse_FieldPathValue(pathStr, valueStr string) (AcceptProjectInvitationResponse_FieldPathValue, error) {
	fp, err := ParseAcceptProjectInvitationResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing AcceptProjectInvitationResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(AcceptProjectInvitationResponse_FieldPathValue), nil
}

func MustParseAcceptProjectInvitationResponse_FieldPathValue(pathStr, valueStr string) AcceptProjectInvitationResponse_FieldPathValue {
	fpv, err := ParseAcceptProjectInvitationResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type AcceptProjectInvitationResponse_FieldTerminalPathValue struct {
	AcceptProjectInvitationResponse_FieldTerminalPath
	value interface{}
}

var _ AcceptProjectInvitationResponse_FieldPathValue = (*AcceptProjectInvitationResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'AcceptProjectInvitationResponse' as interface{}
func (fpv *AcceptProjectInvitationResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}

// SetTo stores value for selected field for object AcceptProjectInvitationResponse
func (fpv *AcceptProjectInvitationResponse_FieldTerminalPathValue) SetTo(target **AcceptProjectInvitationResponse) {
	if *target == nil {
		*target = new(AcceptProjectInvitationResponse)
	}
	switch fpv.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for AcceptProjectInvitationResponse: %d", fpv.selector))
	}
}

func (fpv *AcceptProjectInvitationResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*AcceptProjectInvitationResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'AcceptProjectInvitationResponse_FieldTerminalPathValue' with the value under path in 'AcceptProjectInvitationResponse'.
func (fpv *AcceptProjectInvitationResponse_FieldTerminalPathValue) CompareWith(source *AcceptProjectInvitationResponse) (int, bool) {
	switch fpv.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for AcceptProjectInvitationResponse: %d", fpv.selector))
	}
}

func (fpv *AcceptProjectInvitationResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*AcceptProjectInvitationResponse))
}

// AcceptProjectInvitationResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for AcceptProjectInvitationResponse according to their type
// Present only for array (repeated) types.
type AcceptProjectInvitationResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	AcceptProjectInvitationResponse_FieldPath
	ContainsValue(*AcceptProjectInvitationResponse) bool
}

// ParseAcceptProjectInvitationResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseAcceptProjectInvitationResponse_FieldPathArrayItemValue(pathStr, valueStr string) (AcceptProjectInvitationResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseAcceptProjectInvitationResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing AcceptProjectInvitationResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(AcceptProjectInvitationResponse_FieldPathArrayItemValue), nil
}

func MustParseAcceptProjectInvitationResponse_FieldPathArrayItemValue(pathStr, valueStr string) AcceptProjectInvitationResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseAcceptProjectInvitationResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type AcceptProjectInvitationResponse_FieldTerminalPathArrayItemValue struct {
	AcceptProjectInvitationResponse_FieldTerminalPath
	value interface{}
}

var _ AcceptProjectInvitationResponse_FieldPathArrayItemValue = (*AcceptProjectInvitationResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object AcceptProjectInvitationResponse as interface{}
func (fpaiv *AcceptProjectInvitationResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *AcceptProjectInvitationResponse_FieldTerminalPathArrayItemValue) GetSingle(source *AcceptProjectInvitationResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *AcceptProjectInvitationResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*AcceptProjectInvitationResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'AcceptProjectInvitationResponse'
func (fpaiv *AcceptProjectInvitationResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *AcceptProjectInvitationResponse) bool {
	slice := fpaiv.AcceptProjectInvitationResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// AcceptProjectInvitationResponse_FieldPathArrayOfValues allows storing slice of values for AcceptProjectInvitationResponse fields according to their type
type AcceptProjectInvitationResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	AcceptProjectInvitationResponse_FieldPath
}

func ParseAcceptProjectInvitationResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (AcceptProjectInvitationResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseAcceptProjectInvitationResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing AcceptProjectInvitationResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(AcceptProjectInvitationResponse_FieldPathArrayOfValues), nil
}

func MustParseAcceptProjectInvitationResponse_FieldPathArrayOfValues(pathStr, valuesStr string) AcceptProjectInvitationResponse_FieldPathArrayOfValues {
	fpaov, err := ParseAcceptProjectInvitationResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type AcceptProjectInvitationResponse_FieldTerminalPathArrayOfValues struct {
	AcceptProjectInvitationResponse_FieldTerminalPath
	values interface{}
}

var _ AcceptProjectInvitationResponse_FieldPathArrayOfValues = (*AcceptProjectInvitationResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *AcceptProjectInvitationResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	}
	return
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeclineProjectInvitationRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeclineProjectInvitationRequest_FieldPathSelector
	Get(source *DeclineProjectInvitationRequest) []interface{}
	GetSingle(source *DeclineProjectInvitationRequest) (interface{}, bool)
	ClearValue(item *DeclineProjectInvitationRequest)

	// Those methods build corresponding DeclineProjectInvitationRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeclineProjectInvitationRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) DeclineProjectInvitationRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeclineProjectInvitationRequest_FieldPathArrayItemValue
}

type DeclineProjectInvitationRequest_FieldPathSelector int32

const (
	DeclineProjectInvitationRequest_FieldPathSelectorName DeclineProjectInvitationRequest_FieldPathSelector = 0
)

func (s DeclineProjectInvitationRequest_FieldPathSelector) String() string {
	switch s {
	case DeclineProjectInvitationRequest_FieldPathSelectorName:
		return "name"
	default:
		panic(fmt.Sprintf("Invalid selector for DeclineProjectInvitationRequest: %d", s))
	}
}

func BuildDeclineProjectInvitationRequest_FieldPath(fp gotenobject.RawFieldPath) (DeclineProjectInvitationRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object DeclineProjectInvitationRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &DeclineProjectInvitationRequest_FieldTerminalPath{selector: DeclineProjectInvitationRequest_FieldPathSelectorName}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object DeclineProjectInvitationRequest", fp)
}

func ParseDeclineProjectInvitationRequest_FieldPath(rawField string) (DeclineProjectInvitationRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeclineProjectInvitationRequest_FieldPath(fp)
}

func MustParseDeclineProjectInvitationRequest_FieldPath(rawField string) DeclineProjectInvitationRequest_FieldPath {
	fp, err := ParseDeclineProjectInvitationRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeclineProjectInvitationRequest_FieldTerminalPath struct {
	selector DeclineProjectInvitationRequest_FieldPathSelector
}

var _ DeclineProjectInvitationRequest_FieldPath = (*DeclineProjectInvitationRequest_FieldTerminalPath)(nil)

func (fp *DeclineProjectInvitationRequest_FieldTerminalPath) Selector() DeclineProjectInvitationRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeclineProjectInvitationRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeclineProjectInvitationRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source DeclineProjectInvitationRequest
func (fp *DeclineProjectInvitationRequest_FieldTerminalPath) Get(source *DeclineProjectInvitationRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeclineProjectInvitationRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for DeclineProjectInvitationRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *DeclineProjectInvitationRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*DeclineProjectInvitationRequest))
}

// GetSingle returns value pointed by specific field of from source DeclineProjectInvitationRequest
func (fp *DeclineProjectInvitationRequest_FieldTerminalPath) GetSingle(source *DeclineProjectInvitationRequest) (interface{}, bool) {
	switch fp.selector {
	case DeclineProjectInvitationRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for DeclineProjectInvitationRequest: %d", fp.selector))
	}
}

func (fp *DeclineProjectInvitationRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*DeclineProjectInvitationRequest))
}

// GetDefault returns a default value of the field type
func (fp *DeclineProjectInvitationRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeclineProjectInvitationRequest_FieldPathSelectorName:
		return (*project_invitation.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for DeclineProjectInvitationRequest: %d", fp.selector))
	}
}

func (fp *DeclineProjectInvitationRequest_FieldTerminalPath) ClearValue(item *DeclineProjectInvitationRequest) {
	if item != nil {
		switch fp.selector {
		case DeclineProjectInvitationRequest_FieldPathSelectorName:
			item.Name = nil
		default:
			panic(fmt.Sprintf("Invalid selector for DeclineProjectInvitationRequest: %d", fp.selector))
		}
	}
}

func (fp *DeclineProjectInvitationRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*DeclineProjectInvitationRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeclineProjectInvitationRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeclineProjectInvitationRequest_FieldPathSelectorName
}

func (fp *DeclineProjectInvitationRequest_FieldTerminalPath) WithIValue(value interface{}) DeclineProjectInvitationRequest_FieldPathValue {
	switch fp.selector {
	case DeclineProjectInvitationRequest_FieldPathSelectorName:
		return &DeclineProjectInvitationRequest_FieldTerminalPathValue{DeclineProjectInvitationRequest_FieldTerminalPath: *fp, value: value.(*project_invitation.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeclineProjectInvitationRequest: %d", fp.selector))
	}
}

func (fp *DeclineProjectInvitationRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeclineProjectInvitationRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeclineProjectInvitationRequest_FieldPathArrayOfValues {
	fpaov := &DeclineProjectInvitationRequest_FieldTerminalPathArrayOfValues{DeclineProjectInvitationRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeclineProjectInvitationRequest_FieldPathSelectorName:
		return &DeclineProjectInvitationRequest_FieldTerminalPathArrayOfValues{DeclineProjectInvitationRequest_FieldTerminalPath: *fp, values: values.([]*project_invitation.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeclineProjectInvitationRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeclineProjectInvitationRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeclineProjectInvitationRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeclineProjectInvitationRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for DeclineProjectInvitationRequest: %d", fp.selector))
	}
}

func (fp *DeclineProjectInvitationRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeclineProjectInvitationRequest_FieldPathValue allows storing values for DeclineProjectInvitationRequest fields according to their type
type DeclineProjectInvitationRequest_FieldPathValue interface {
	DeclineProjectInvitationRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **DeclineProjectInvitationRequest)
	CompareWith(*DeclineProjectInvitationRequest) (cmp int, comparable bool)
}

func ParseDeclineProjectInvitationRequest_FieldPathValue(pathStr, valueStr string) (DeclineProjectInvitationRequest_FieldPathValue, error) {
	fp, err := ParseDeclineProjectInvitationRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeclineProjectInvitationRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeclineProjectInvitationRequest_FieldPathValue), nil
}

func MustParseDeclineProjectInvitationRequest_FieldPathValue(pathStr, valueStr string) DeclineProjectInvitationRequest_FieldPathValue {
	fpv, err := ParseDeclineProjectInvitationRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeclineProjectInvitationRequest_FieldTerminalPathValue struct {
	DeclineProjectInvitationRequest_FieldTerminalPath
	value interface{}
}

var _ DeclineProjectInvitationRequest_FieldPathValue = (*DeclineProjectInvitationRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'DeclineProjectInvitationRequest' as interface{}
func (fpv *DeclineProjectInvitationRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeclineProjectInvitationRequest_FieldTerminalPathValue) AsNameValue() (*project_invitation.Reference, bool) {
	res, ok := fpv.value.(*project_invitation.Reference)
	return res, ok
}

// SetTo stores value for selected field for object DeclineProjectInvitationRequest
func (fpv *DeclineProjectInvitationRequest_FieldTerminalPathValue) SetTo(target **DeclineProjectInvitationRequest) {
	if *target == nil {
		*target = new(DeclineProjectInvitationRequest)
	}
	switch fpv.selector {
	case DeclineProjectInvitationRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*project_invitation.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for DeclineProjectInvitationRequest: %d", fpv.selector))
	}
}

func (fpv *DeclineProjectInvitationRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*DeclineProjectInvitationRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeclineProjectInvitationRequest_FieldTerminalPathValue' with the value under path in 'DeclineProjectInvitationRequest'.
func (fpv *DeclineProjectInvitationRequest_FieldTerminalPathValue) CompareWith(source *DeclineProjectInvitationRequest) (int, bool) {
	switch fpv.selector {
	case DeclineProjectInvitationRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*project_invitation.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for DeclineProjectInvitationRequest: %d", fpv.selector))
	}
}

func (fpv *DeclineProjectInvitationRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*DeclineProjectInvitationRequest))
}

// DeclineProjectInvitationRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for DeclineProjectInvitationRequest according to their type
// Present only for array (repeated) types.
type DeclineProjectInvitationRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeclineProjectInvitationRequest_FieldPath
	ContainsValue(*DeclineProjectInvitationRequest) bool
}

// ParseDeclineProjectInvitationRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeclineProjectInvitationRequest_FieldPathArrayItemValue(pathStr, valueStr string) (DeclineProjectInvitationRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseDeclineProjectInvitationRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeclineProjectInvitationRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeclineProjectInvitationRequest_FieldPathArrayItemValue), nil
}

func MustParseDeclineProjectInvitationRequest_FieldPathArrayItemValue(pathStr, valueStr string) DeclineProjectInvitationRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseDeclineProjectInvitationRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeclineProjectInvitationRequest_FieldTerminalPathArrayItemValue struct {
	DeclineProjectInvitationRequest_FieldTerminalPath
	value interface{}
}

var _ DeclineProjectInvitationRequest_FieldPathArrayItemValue = (*DeclineProjectInvitationRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object DeclineProjectInvitationRequest as interface{}
func (fpaiv *DeclineProjectInvitationRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeclineProjectInvitationRequest_FieldTerminalPathArrayItemValue) GetSingle(source *DeclineProjectInvitationRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeclineProjectInvitationRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*DeclineProjectInvitationRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'DeclineProjectInvitationRequest'
func (fpaiv *DeclineProjectInvitationRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *DeclineProjectInvitationRequest) bool {
	slice := fpaiv.DeclineProjectInvitationRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeclineProjectInvitationRequest_FieldPathArrayOfValues allows storing slice of values for DeclineProjectInvitationRequest fields according to their type
type DeclineProjectInvitationRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeclineProjectInvitationRequest_FieldPath
}

func ParseDeclineProjectInvitationRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (DeclineProjectInvitationRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseDeclineProjectInvitationRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeclineProjectInvitationRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeclineProjectInvitationRequest_FieldPathArrayOfValues), nil
}

func MustParseDeclineProjectInvitationRequest_FieldPathArrayOfValues(pathStr, valuesStr string) DeclineProjectInvitationRequest_FieldPathArrayOfValues {
	fpaov, err := ParseDeclineProjectInvitationRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeclineProjectInvitationRequest_FieldTerminalPathArrayOfValues struct {
	DeclineProjectInvitationRequest_FieldTerminalPath
	values interface{}
}

var _ DeclineProjectInvitationRequest_FieldPathArrayOfValues = (*DeclineProjectInvitationRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeclineProjectInvitationRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeclineProjectInvitationRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*project_invitation.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeclineProjectInvitationRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*project_invitation.Reference, bool) {
	res, ok := fpaov.values.([]*project_invitation.Reference)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeclineProjectInvitationResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeclineProjectInvitationResponse_FieldPathSelector
	Get(source *DeclineProjectInvitationResponse) []interface{}
	GetSingle(source *DeclineProjectInvitationResponse) (interface{}, bool)
	ClearValue(item *DeclineProjectInvitationResponse)

	// Those methods build corresponding DeclineProjectInvitationResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeclineProjectInvitationResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) DeclineProjectInvitationResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeclineProjectInvitationResponse_FieldPathArrayItemValue
}

type DeclineProjectInvitationResponse_FieldPathSelector int32

func (s DeclineProjectInvitationResponse_FieldPathSelector) String() string {
	switch s {
	default:
		panic(fmt.Sprintf("Invalid selector for DeclineProjectInvitationResponse: %d", s))
	}
}

func BuildDeclineProjectInvitationResponse_FieldPath(fp gotenobject.RawFieldPath) (DeclineProjectInvitationResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object DeclineProjectInvitationResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object DeclineProjectInvitationResponse", fp)
}

func ParseDeclineProjectInvitationResponse_FieldPath(rawField string) (DeclineProjectInvitationResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeclineProjectInvitationResponse_FieldPath(fp)
}

func MustParseDeclineProjectInvitationResponse_FieldPath(rawField string) DeclineProjectInvitationResponse_FieldPath {
	fp, err := ParseDeclineProjectInvitationResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeclineProjectInvitationResponse_FieldTerminalPath struct {
	selector DeclineProjectInvitationResponse_FieldPathSelector
}

var _ DeclineProjectInvitationResponse_FieldPath = (*DeclineProjectInvitationResponse_FieldTerminalPath)(nil)

func (fp *DeclineProjectInvitationResponse_FieldTerminalPath) Selector() DeclineProjectInvitationResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeclineProjectInvitationResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeclineProjectInvitationResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source DeclineProjectInvitationResponse
func (fp *DeclineProjectInvitationResponse_FieldTerminalPath) Get(source *DeclineProjectInvitationResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		default:
			panic(fmt.Sprintf("Invalid selector for DeclineProjectInvitationResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *DeclineProjectInvitationResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*DeclineProjectInvitationResponse))
}

// GetSingle returns value pointed by specific field of from source DeclineProjectInvitationResponse
func (fp *DeclineProjectInvitationResponse_FieldTerminalPath) GetSingle(source *DeclineProjectInvitationResponse) (interface{}, bool) {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for DeclineProjectInvitationResponse: %d", fp.selector))
	}
}

func (fp *DeclineProjectInvitationResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*DeclineProjectInvitationResponse))
}

// GetDefault returns a default value of the field type
func (fp *DeclineProjectInvitationResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for DeclineProjectInvitationResponse: %d", fp.selector))
	}
}

func (fp *DeclineProjectInvitationResponse_FieldTerminalPath) ClearValue(item *DeclineProjectInvitationResponse) {
	if item != nil {
		switch fp.selector {
		default:
			panic(fmt.Sprintf("Invalid selector for DeclineProjectInvitationResponse: %d", fp.selector))
		}
	}
}

func (fp *DeclineProjectInvitationResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*DeclineProjectInvitationResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeclineProjectInvitationResponse_FieldTerminalPath) IsLeaf() bool {
	return false
}

func (fp *DeclineProjectInvitationResponse_FieldTerminalPath) WithIValue(value interface{}) DeclineProjectInvitationResponse_FieldPathValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for DeclineProjectInvitationResponse: %d", fp.selector))
	}
}

func (fp *DeclineProjectInvitationResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeclineProjectInvitationResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeclineProjectInvitationResponse_FieldPathArrayOfValues {
	fpaov := &DeclineProjectInvitationResponse_FieldTerminalPathArrayOfValues{DeclineProjectInvitationResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for DeclineProjectInvitationResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeclineProjectInvitationResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeclineProjectInvitationResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeclineProjectInvitationResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for DeclineProjectInvitationResponse: %d", fp.selector))
	}
}

func (fp *DeclineProjectInvitationResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeclineProjectInvitationResponse_FieldPathValue allows storing values for DeclineProjectInvitationResponse fields according to their type
type DeclineProjectInvitationResponse_FieldPathValue interface {
	DeclineProjectInvitationResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **DeclineProjectInvitationResponse)
	CompareWith(*DeclineProjectInvitationResponse) (cmp int, comparable bool)
}

func ParseDeclineProjectInvitationResponse_FieldPathValue(pathStr, valueStr string) (DeclineProjectInvitationResponse_FieldPathValue, error) {
	fp, err := ParseDeclineProjectInvitationResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeclineProjectInvitationResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeclineProjectInvitationResponse_FieldPathValue), nil
}

func MustParseDeclineProjectInvitationResponse_FieldPathValue(pathStr, valueStr string) DeclineProjectInvitationResponse_FieldPathValue {
	fpv, err := ParseDeclineProjectInvitationResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeclineProjectInvitationResponse_FieldTerminalPathValue struct {
	DeclineProjectInvitationResponse_FieldTerminalPath
	value interface{}
}

var _ DeclineProjectInvitationResponse_FieldPathValue = (*DeclineProjectInvitationResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'DeclineProjectInvitationResponse' as interface{}
func (fpv *DeclineProjectInvitationResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}

// SetTo stores value for selected field for object DeclineProjectInvitationResponse
func (fpv *DeclineProjectInvitationResponse_FieldTerminalPathValue) SetTo(target **DeclineProjectInvitationResponse) {
	if *target == nil {
		*target = new(DeclineProjectInvitationResponse)
	}
	switch fpv.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for DeclineProjectInvitationResponse: %d", fpv.selector))
	}
}

func (fpv *DeclineProjectInvitationResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*DeclineProjectInvitationResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeclineProjectInvitationResponse_FieldTerminalPathValue' with the value under path in 'DeclineProjectInvitationResponse'.
func (fpv *DeclineProjectInvitationResponse_FieldTerminalPathValue) CompareWith(source *DeclineProjectInvitationResponse) (int, bool) {
	switch fpv.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for DeclineProjectInvitationResponse: %d", fpv.selector))
	}
}

func (fpv *DeclineProjectInvitationResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*DeclineProjectInvitationResponse))
}

// DeclineProjectInvitationResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for DeclineProjectInvitationResponse according to their type
// Present only for array (repeated) types.
type DeclineProjectInvitationResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeclineProjectInvitationResponse_FieldPath
	ContainsValue(*DeclineProjectInvitationResponse) bool
}

// ParseDeclineProjectInvitationResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeclineProjectInvitationResponse_FieldPathArrayItemValue(pathStr, valueStr string) (DeclineProjectInvitationResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseDeclineProjectInvitationResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeclineProjectInvitationResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeclineProjectInvitationResponse_FieldPathArrayItemValue), nil
}

func MustParseDeclineProjectInvitationResponse_FieldPathArrayItemValue(pathStr, valueStr string) DeclineProjectInvitationResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseDeclineProjectInvitationResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeclineProjectInvitationResponse_FieldTerminalPathArrayItemValue struct {
	DeclineProjectInvitationResponse_FieldTerminalPath
	value interface{}
}

var _ DeclineProjectInvitationResponse_FieldPathArrayItemValue = (*DeclineProjectInvitationResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object DeclineProjectInvitationResponse as interface{}
func (fpaiv *DeclineProjectInvitationResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeclineProjectInvitationResponse_FieldTerminalPathArrayItemValue) GetSingle(source *DeclineProjectInvitationResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeclineProjectInvitationResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*DeclineProjectInvitationResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'DeclineProjectInvitationResponse'
func (fpaiv *DeclineProjectInvitationResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *DeclineProjectInvitationResponse) bool {
	slice := fpaiv.DeclineProjectInvitationResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeclineProjectInvitationResponse_FieldPathArrayOfValues allows storing slice of values for DeclineProjectInvitationResponse fields according to their type
type DeclineProjectInvitationResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeclineProjectInvitationResponse_FieldPath
}

func ParseDeclineProjectInvitationResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (DeclineProjectInvitationResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseDeclineProjectInvitationResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeclineProjectInvitationResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeclineProjectInvitationResponse_FieldPathArrayOfValues), nil
}

func MustParseDeclineProjectInvitationResponse_FieldPathArrayOfValues(pathStr, valuesStr string) DeclineProjectInvitationResponse_FieldPathArrayOfValues {
	fpaov, err := ParseDeclineProjectInvitationResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeclineProjectInvitationResponse_FieldTerminalPathArrayOfValues struct {
	DeclineProjectInvitationResponse_FieldTerminalPath
	values interface{}
}

var _ DeclineProjectInvitationResponse_FieldPathArrayOfValues = (*DeclineProjectInvitationResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeclineProjectInvitationResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	}
	return
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListMyProjectInvitationsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListMyProjectInvitationsRequest_FieldPathSelector
	Get(source *ListMyProjectInvitationsRequest) []interface{}
	GetSingle(source *ListMyProjectInvitationsRequest) (interface{}, bool)
	ClearValue(item *ListMyProjectInvitationsRequest)

	// Those methods build corresponding ListMyProjectInvitationsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListMyProjectInvitationsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ListMyProjectInvitationsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListMyProjectInvitationsRequest_FieldPathArrayItemValue
}

type ListMyProjectInvitationsRequest_FieldPathSelector int32

const (
	ListMyProjectInvitationsRequest_FieldPathSelectorParent ListMyProjectInvitationsRequest_FieldPathSelector = 0
	ListMyProjectInvitationsRequest_FieldPathSelectorFilter ListMyProjectInvitationsRequest_FieldPathSelector = 1
)

func (s ListMyProjectInvitationsRequest_FieldPathSelector) String() string {
	switch s {
	case ListMyProjectInvitationsRequest_FieldPathSelectorParent:
		return "parent"
	case ListMyProjectInvitationsRequest_FieldPathSelectorFilter:
		return "filter"
	default:
		panic(fmt.Sprintf("Invalid selector for ListMyProjectInvitationsRequest: %d", s))
	}
}

func BuildListMyProjectInvitationsRequest_FieldPath(fp gotenobject.RawFieldPath) (ListMyProjectInvitationsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListMyProjectInvitationsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &ListMyProjectInvitationsRequest_FieldTerminalPath{selector: ListMyProjectInvitationsRequest_FieldPathSelectorParent}, nil
		case "filter":
			return &ListMyProjectInvitationsRequest_FieldTerminalPath{selector: ListMyProjectInvitationsRequest_FieldPathSelectorFilter}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListMyProjectInvitationsRequest", fp)
}

func ParseListMyProjectInvitationsRequest_FieldPath(rawField string) (ListMyProjectInvitationsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListMyProjectInvitationsRequest_FieldPath(fp)
}

func MustParseListMyProjectInvitationsRequest_FieldPath(rawField string) ListMyProjectInvitationsRequest_FieldPath {
	fp, err := ParseListMyProjectInvitationsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListMyProjectInvitationsRequest_FieldTerminalPath struct {
	selector ListMyProjectInvitationsRequest_FieldPathSelector
}

var _ ListMyProjectInvitationsRequest_FieldPath = (*ListMyProjectInvitationsRequest_FieldTerminalPath)(nil)

func (fp *ListMyProjectInvitationsRequest_FieldTerminalPath) Selector() ListMyProjectInvitationsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListMyProjectInvitationsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListMyProjectInvitationsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListMyProjectInvitationsRequest
func (fp *ListMyProjectInvitationsRequest_FieldTerminalPath) Get(source *ListMyProjectInvitationsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListMyProjectInvitationsRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case ListMyProjectInvitationsRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListMyProjectInvitationsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ListMyProjectInvitationsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListMyProjectInvitationsRequest))
}

// GetSingle returns value pointed by specific field of from source ListMyProjectInvitationsRequest
func (fp *ListMyProjectInvitationsRequest_FieldTerminalPath) GetSingle(source *ListMyProjectInvitationsRequest) (interface{}, bool) {
	switch fp.selector {
	case ListMyProjectInvitationsRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case ListMyProjectInvitationsRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListMyProjectInvitationsRequest: %d", fp.selector))
	}
}

func (fp *ListMyProjectInvitationsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListMyProjectInvitationsRequest))
}

// GetDefault returns a default value of the field type
func (fp *ListMyProjectInvitationsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListMyProjectInvitationsRequest_FieldPathSelectorParent:
		return (*project.Name)(nil)
	case ListMyProjectInvitationsRequest_FieldPathSelectorFilter:
		return (*project_invitation.Filter)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ListMyProjectInvitationsRequest: %d", fp.selector))
	}
}

func (fp *ListMyProjectInvitationsRequest_FieldTerminalPath) ClearValue(item *ListMyProjectInvitationsRequest) {
	if item != nil {
		switch fp.selector {
		case ListMyProjectInvitationsRequest_FieldPathSelectorParent:
			item.Parent = nil
		case ListMyProjectInvitationsRequest_FieldPathSelectorFilter:
			item.Filter = nil
		default:
			panic(fmt.Sprintf("Invalid selector for ListMyProjectInvitationsRequest: %d", fp.selector))
		}
	}
}

func (fp *ListMyProjectInvitationsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListMyProjectInvitationsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListMyProjectInvitationsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListMyProjectInvitationsRequest_FieldPathSelectorParent ||
		fp.selector == ListMyProjectInvitationsRequest_FieldPathSelectorFilter
}

func (fp *ListMyProjectInvitationsRequest_FieldTerminalPath) WithIValue(value interface{}) ListMyProjectInvitationsRequest_FieldPathValue {
	switch fp.selector {
	case ListMyProjectInvitationsRequest_FieldPathSelectorParent:
		return &ListMyProjectInvitationsRequest_FieldTerminalPathValue{ListMyProjectInvitationsRequest_FieldTerminalPath: *fp, value: value.(*project.Name)}
	case ListMyProjectInvitationsRequest_FieldPathSelectorFilter:
		return &ListMyProjectInvitationsRequest_FieldTerminalPathValue{ListMyProjectInvitationsRequest_FieldTerminalPath: *fp, value: value.(*project_invitation.Filter)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListMyProjectInvitationsRequest: %d", fp.selector))
	}
}

func (fp *ListMyProjectInvitationsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListMyProjectInvitationsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListMyProjectInvitationsRequest_FieldPathArrayOfValues {
	fpaov := &ListMyProjectInvitationsRequest_FieldTerminalPathArrayOfValues{ListMyProjectInvitationsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListMyProjectInvitationsRequest_FieldPathSelectorParent:
		return &ListMyProjectInvitationsRequest_FieldTerminalPathArrayOfValues{ListMyProjectInvitationsRequest_FieldTerminalPath: *fp, values: values.([]*project.Name)}
	case ListMyProjectInvitationsRequest_FieldPathSelectorFilter:
		return &ListMyProjectInvitationsRequest_FieldTerminalPathArrayOfValues{ListMyProjectInvitationsRequest_FieldTerminalPath: *fp, values: values.([]*project_invitation.Filter)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListMyProjectInvitationsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListMyProjectInvitationsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListMyProjectInvitationsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListMyProjectInvitationsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ListMyProjectInvitationsRequest: %d", fp.selector))
	}
}

func (fp *ListMyProjectInvitationsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ListMyProjectInvitationsRequest_FieldPathValue allows storing values for ListMyProjectInvitationsRequest fields according to their type
type ListMyProjectInvitationsRequest_FieldPathValue interface {
	ListMyProjectInvitationsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListMyProjectInvitationsRequest)
	CompareWith(*ListMyProjectInvitationsRequest) (cmp int, comparable bool)
}

func ParseListMyProjectInvitationsRequest_FieldPathValue(pathStr, valueStr string) (ListMyProjectInvitationsRequest_FieldPathValue, error) {
	fp, err := ParseListMyProjectInvitationsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListMyProjectInvitationsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListMyProjectInvitationsRequest_FieldPathValue), nil
}

func MustParseListMyProjectInvitationsRequest_FieldPathValue(pathStr, valueStr string) ListMyProjectInvitationsRequest_FieldPathValue {
	fpv, err := ParseListMyProjectInvitationsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListMyProjectInvitationsRequest_FieldTerminalPathValue struct {
	ListMyProjectInvitationsRequest_FieldTerminalPath
	value interface{}
}

var _ ListMyProjectInvitationsRequest_FieldPathValue = (*ListMyProjectInvitationsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListMyProjectInvitationsRequest' as interface{}
func (fpv *ListMyProjectInvitationsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListMyProjectInvitationsRequest_FieldTerminalPathValue) AsParentValue() (*project.Name, bool) {
	res, ok := fpv.value.(*project.Name)
	return res, ok
}
func (fpv *ListMyProjectInvitationsRequest_FieldTerminalPathValue) AsFilterValue() (*project_invitation.Filter, bool) {
	res, ok := fpv.value.(*project_invitation.Filter)
	return res, ok
}

// SetTo stores value for selected field for object ListMyProjectInvitationsRequest
func (fpv *ListMyProjectInvitationsRequest_FieldTerminalPathValue) SetTo(target **ListMyProjectInvitationsRequest) {
	if *target == nil {
		*target = new(ListMyProjectInvitationsRequest)
	}
	switch fpv.selector {
	case ListMyProjectInvitationsRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*project.Name)
	case ListMyProjectInvitationsRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*project_invitation.Filter)
	default:
		panic(fmt.Sprintf("Invalid selector for ListMyProjectInvitationsRequest: %d", fpv.selector))
	}
}

func (fpv *ListMyProjectInvitationsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListMyProjectInvitationsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListMyProjectInvitationsRequest_FieldTerminalPathValue' with the value under path in 'ListMyProjectInvitationsRequest'.
func (fpv *ListMyProjectInvitationsRequest_FieldTerminalPathValue) CompareWith(source *ListMyProjectInvitationsRequest) (int, bool) {
	switch fpv.selector {
	case ListMyProjectInvitationsRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*project.Name)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ListMyProjectInvitationsRequest_FieldPathSelectorFilter:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ListMyProjectInvitationsRequest: %d", fpv.selector))
	}
}

func (fpv *ListMyProjectInvitationsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListMyProjectInvitationsRequest))
}

// ListMyProjectInvitationsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for ListMyProjectInvitationsRequest according to their type
// Present only for array (repeated) types.
type ListMyProjectInvitationsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListMyProjectInvitationsRequest_FieldPath
	ContainsValue(*ListMyProjectInvitationsRequest) bool
}

// ParseListMyProjectInvitationsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListMyProjectInvitationsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ListMyProjectInvitationsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseListMyProjectInvitationsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListMyProjectInvitationsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListMyProjectInvitationsRequest_FieldPathArrayItemValue), nil
}

func MustParseListMyProjectInvitationsRequest_FieldPathArrayItemValue(pathStr, valueStr string) ListMyProjectInvitationsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseListMyProjectInvitationsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListMyProjectInvitationsRequest_FieldTerminalPathArrayItemValue struct {
	ListMyProjectInvitationsRequest_FieldTerminalPath
	value interface{}
}

var _ ListMyProjectInvitationsRequest_FieldPathArrayItemValue = (*ListMyProjectInvitationsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListMyProjectInvitationsRequest as interface{}
func (fpaiv *ListMyProjectInvitationsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ListMyProjectInvitationsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ListMyProjectInvitationsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListMyProjectInvitationsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListMyProjectInvitationsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListMyProjectInvitationsRequest'
func (fpaiv *ListMyProjectInvitationsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ListMyProjectInvitationsRequest) bool {
	slice := fpaiv.ListMyProjectInvitationsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ListMyProjectInvitationsRequest_FieldPathArrayOfValues allows storing slice of values for ListMyProjectInvitationsRequest fields according to their type
type ListMyProjectInvitationsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListMyProjectInvitationsRequest_FieldPath
}

func ParseListMyProjectInvitationsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ListMyProjectInvitationsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseListMyProjectInvitationsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListMyProjectInvitationsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListMyProjectInvitationsRequest_FieldPathArrayOfValues), nil
}

func MustParseListMyProjectInvitationsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ListMyProjectInvitationsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseListMyProjectInvitationsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListMyProjectInvitationsRequest_FieldTerminalPathArrayOfValues struct {
	ListMyProjectInvitationsRequest_FieldTerminalPath
	values interface{}
}

var _ ListMyProjectInvitationsRequest_FieldPathArrayOfValues = (*ListMyProjectInvitationsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListMyProjectInvitationsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListMyProjectInvitationsRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*project.Name) {
			values = append(values, v)
		}
	case ListMyProjectInvitationsRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*project_invitation.Filter) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListMyProjectInvitationsRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*project.Name, bool) {
	res, ok := fpaov.values.([]*project.Name)
	return res, ok
}
func (fpaov *ListMyProjectInvitationsRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*project_invitation.Filter, bool) {
	res, ok := fpaov.values.([]*project_invitation.Filter)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListMyProjectInvitationsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListMyProjectInvitationsResponse_FieldPathSelector
	Get(source *ListMyProjectInvitationsResponse) []interface{}
	GetSingle(source *ListMyProjectInvitationsResponse) (interface{}, bool)
	ClearValue(item *ListMyProjectInvitationsResponse)

	// Those methods build corresponding ListMyProjectInvitationsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListMyProjectInvitationsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) ListMyProjectInvitationsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListMyProjectInvitationsResponse_FieldPathArrayItemValue
}

type ListMyProjectInvitationsResponse_FieldPathSelector int32

const (
	ListMyProjectInvitationsResponse_FieldPathSelectorProjectInvitations ListMyProjectInvitationsResponse_FieldPathSelector = 0
)

func (s ListMyProjectInvitationsResponse_FieldPathSelector) String() string {
	switch s {
	case ListMyProjectInvitationsResponse_FieldPathSelectorProjectInvitations:
		return "project_invitations"
	default:
		panic(fmt.Sprintf("Invalid selector for ListMyProjectInvitationsResponse: %d", s))
	}
}

func BuildListMyProjectInvitationsResponse_FieldPath(fp gotenobject.RawFieldPath) (ListMyProjectInvitationsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListMyProjectInvitationsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "project_invitations", "projectInvitations", "project-invitations":
			return &ListMyProjectInvitationsResponse_FieldTerminalPath{selector: ListMyProjectInvitationsResponse_FieldPathSelectorProjectInvitations}, nil
		}
	} else {
		switch fp[0] {
		case "project_invitations", "projectInvitations", "project-invitations":
			if subpath, err := project_invitation.BuildProjectInvitation_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ListMyProjectInvitationsResponse_FieldSubPath{selector: ListMyProjectInvitationsResponse_FieldPathSelectorProjectInvitations, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListMyProjectInvitationsResponse", fp)
}

func ParseListMyProjectInvitationsResponse_FieldPath(rawField string) (ListMyProjectInvitationsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListMyProjectInvitationsResponse_FieldPath(fp)
}

func MustParseListMyProjectInvitationsResponse_FieldPath(rawField string) ListMyProjectInvitationsResponse_FieldPath {
	fp, err := ParseListMyProjectInvitationsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListMyProjectInvitationsResponse_FieldTerminalPath struct {
	selector ListMyProjectInvitationsResponse_FieldPathSelector
}

var _ ListMyProjectInvitationsResponse_FieldPath = (*ListMyProjectInvitationsResponse_FieldTerminalPath)(nil)

func (fp *ListMyProjectInvitationsResponse_FieldTerminalPath) Selector() ListMyProjectInvitationsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListMyProjectInvitationsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListMyProjectInvitationsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListMyProjectInvitationsResponse
func (fp *ListMyProjectInvitationsResponse_FieldTerminalPath) Get(source *ListMyProjectInvitationsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListMyProjectInvitationsResponse_FieldPathSelectorProjectInvitations:
			for _, value := range source.GetProjectInvitations() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListMyProjectInvitationsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *ListMyProjectInvitationsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListMyProjectInvitationsResponse))
}

// GetSingle returns value pointed by specific field of from source ListMyProjectInvitationsResponse
func (fp *ListMyProjectInvitationsResponse_FieldTerminalPath) GetSingle(source *ListMyProjectInvitationsResponse) (interface{}, bool) {
	switch fp.selector {
	case ListMyProjectInvitationsResponse_FieldPathSelectorProjectInvitations:
		res := source.GetProjectInvitations()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListMyProjectInvitationsResponse: %d", fp.selector))
	}
}

func (fp *ListMyProjectInvitationsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListMyProjectInvitationsResponse))
}

// GetDefault returns a default value of the field type
func (fp *ListMyProjectInvitationsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListMyProjectInvitationsResponse_FieldPathSelectorProjectInvitations:
		return ([]*project_invitation.ProjectInvitation)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ListMyProjectInvitationsResponse: %d", fp.selector))
	}
}

func (fp *ListMyProjectInvitationsResponse_FieldTerminalPath) ClearValue(item *ListMyProjectInvitationsResponse) {
	if item != nil {
		switch fp.selector {
		case ListMyProjectInvitationsResponse_FieldPathSelectorProjectInvitations:
			item.ProjectInvitations = nil
		default:
			panic(fmt.Sprintf("Invalid selector for ListMyProjectInvitationsResponse: %d", fp.selector))
		}
	}
}

func (fp *ListMyProjectInvitationsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListMyProjectInvitationsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListMyProjectInvitationsResponse_FieldTerminalPath) IsLeaf() bool {
	return false
}

func (fp *ListMyProjectInvitationsResponse_FieldTerminalPath) WithIValue(value interface{}) ListMyProjectInvitationsResponse_FieldPathValue {
	switch fp.selector {
	case ListMyProjectInvitationsResponse_FieldPathSelectorProjectInvitations:
		return &ListMyProjectInvitationsResponse_FieldTerminalPathValue{ListMyProjectInvitationsResponse_FieldTerminalPath: *fp, value: value.([]*project_invitation.ProjectInvitation)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListMyProjectInvitationsResponse: %d", fp.selector))
	}
}

func (fp *ListMyProjectInvitationsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListMyProjectInvitationsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListMyProjectInvitationsResponse_FieldPathArrayOfValues {
	fpaov := &ListMyProjectInvitationsResponse_FieldTerminalPathArrayOfValues{ListMyProjectInvitationsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListMyProjectInvitationsResponse_FieldPathSelectorProjectInvitations:
		return &ListMyProjectInvitationsResponse_FieldTerminalPathArrayOfValues{ListMyProjectInvitationsResponse_FieldTerminalPath: *fp, values: values.([][]*project_invitation.ProjectInvitation)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListMyProjectInvitationsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListMyProjectInvitationsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListMyProjectInvitationsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListMyProjectInvitationsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case ListMyProjectInvitationsResponse_FieldPathSelectorProjectInvitations:
		return &ListMyProjectInvitationsResponse_FieldTerminalPathArrayItemValue{ListMyProjectInvitationsResponse_FieldTerminalPath: *fp, value: value.(*project_invitation.ProjectInvitation)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListMyProjectInvitationsResponse: %d", fp.selector))
	}
}

func (fp *ListMyProjectInvitationsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ListMyProjectInvitationsResponse_FieldSubPath struct {
	selector ListMyProjectInvitationsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ListMyProjectInvitationsResponse_FieldPath = (*ListMyProjectInvitationsResponse_FieldSubPath)(nil)

func (fps *ListMyProjectInvitationsResponse_FieldSubPath) Selector() ListMyProjectInvitationsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *ListMyProjectInvitationsResponse_FieldSubPath) AsProjectInvitationsSubPath() (project_invitation.ProjectInvitation_FieldPath, bool) {
	res, ok := fps.subPath.(project_invitation.ProjectInvitation_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ListMyProjectInvitationsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ListMyProjectInvitationsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ListMyProjectInvitationsResponse
func (fps *ListMyProjectInvitationsResponse_FieldSubPath) Get(source *ListMyProjectInvitationsResponse) (values []interface{}) {
	if asProjectInvitationFieldPath, ok := fps.AsProjectInvitationsSubPath(); ok {
		for _, item := range source.GetProjectInvitations() {
			values = append(values, asProjectInvitationFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for ListMyProjectInvitationsResponse: %d", fps.selector))
	}
	return
}

func (fps *ListMyProjectInvitationsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ListMyProjectInvitationsResponse))
}

// GetSingle returns value of selected field from source ListMyProjectInvitationsResponse
func (fps *ListMyProjectInvitationsResponse_FieldSubPath) GetSingle(source *ListMyProjectInvitationsResponse) (interface{}, bool) {
	switch fps.selector {
	case ListMyProjectInvitationsResponse_FieldPathSelectorProjectInvitations:
		if len(source.GetProjectInvitations()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetProjectInvitations()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for ListMyProjectInvitationsResponse: %d", fps.selector))
	}
}

func (fps *ListMyProjectInvitationsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ListMyProjectInvitationsResponse))
}

// GetDefault returns a default value of the field type
func (fps *ListMyProjectInvitationsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ListMyProjectInvitationsResponse_FieldSubPath) ClearValue(item *ListMyProjectInvitationsResponse) {
	if item != nil {
		switch fps.selector {
		case ListMyProjectInvitationsResponse_FieldPathSelectorProjectInvitations:
			for _, subItem := range item.ProjectInvitations {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListMyProjectInvitationsResponse: %d", fps.selector))
		}
	}
}

func (fps *ListMyProjectInvitationsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ListMyProjectInvitationsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *ListMyProjectInvitationsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ListMyProjectInvitationsResponse_FieldSubPath) WithIValue(value interface{}) ListMyProjectInvitationsResponse_FieldPathValue {
	return &ListMyProjectInvitationsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ListMyProjectInvitationsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ListMyProjectInvitationsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) ListMyProjectInvitationsResponse_FieldPathArrayOfValues {
	return &ListMyProjectInvitationsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ListMyProjectInvitationsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ListMyProjectInvitationsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) ListMyProjectInvitationsResponse_FieldPathArrayItemValue {
	return &ListMyProjectInvitationsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ListMyProjectInvitationsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ListMyProjectInvitationsResponse_FieldPathValue allows storing values for ListMyProjectInvitationsResponse fields according to their type
type ListMyProjectInvitationsResponse_FieldPathValue interface {
	ListMyProjectInvitationsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListMyProjectInvitationsResponse)
	CompareWith(*ListMyProjectInvitationsResponse) (cmp int, comparable bool)
}

func ParseListMyProjectInvitationsResponse_FieldPathValue(pathStr, valueStr string) (ListMyProjectInvitationsResponse_FieldPathValue, error) {
	fp, err := ParseListMyProjectInvitationsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListMyProjectInvitationsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListMyProjectInvitationsResponse_FieldPathValue), nil
}

func MustParseListMyProjectInvitationsResponse_FieldPathValue(pathStr, valueStr string) ListMyProjectInvitationsResponse_FieldPathValue {
	fpv, err := ParseListMyProjectInvitationsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListMyProjectInvitationsResponse_FieldTerminalPathValue struct {
	ListMyProjectInvitationsResponse_FieldTerminalPath
	value interface{}
}

var _ ListMyProjectInvitationsResponse_FieldPathValue = (*ListMyProjectInvitationsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListMyProjectInvitationsResponse' as interface{}
func (fpv *ListMyProjectInvitationsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListMyProjectInvitationsResponse_FieldTerminalPathValue) AsProjectInvitationsValue() ([]*project_invitation.ProjectInvitation, bool) {
	res, ok := fpv.value.([]*project_invitation.ProjectInvitation)
	return res, ok
}

// SetTo stores value for selected field for object ListMyProjectInvitationsResponse
func (fpv *ListMyProjectInvitationsResponse_FieldTerminalPathValue) SetTo(target **ListMyProjectInvitationsResponse) {
	if *target == nil {
		*target = new(ListMyProjectInvitationsResponse)
	}
	switch fpv.selector {
	case ListMyProjectInvitationsResponse_FieldPathSelectorProjectInvitations:
		(*target).ProjectInvitations = fpv.value.([]*project_invitation.ProjectInvitation)
	default:
		panic(fmt.Sprintf("Invalid selector for ListMyProjectInvitationsResponse: %d", fpv.selector))
	}
}

func (fpv *ListMyProjectInvitationsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListMyProjectInvitationsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListMyProjectInvitationsResponse_FieldTerminalPathValue' with the value under path in 'ListMyProjectInvitationsResponse'.
func (fpv *ListMyProjectInvitationsResponse_FieldTerminalPathValue) CompareWith(source *ListMyProjectInvitationsResponse) (int, bool) {
	switch fpv.selector {
	case ListMyProjectInvitationsResponse_FieldPathSelectorProjectInvitations:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ListMyProjectInvitationsResponse: %d", fpv.selector))
	}
}

func (fpv *ListMyProjectInvitationsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListMyProjectInvitationsResponse))
}

type ListMyProjectInvitationsResponse_FieldSubPathValue struct {
	ListMyProjectInvitationsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ListMyProjectInvitationsResponse_FieldPathValue = (*ListMyProjectInvitationsResponse_FieldSubPathValue)(nil)

func (fpvs *ListMyProjectInvitationsResponse_FieldSubPathValue) AsProjectInvitationsPathValue() (project_invitation.ProjectInvitation_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(project_invitation.ProjectInvitation_FieldPathValue)
	return res, ok
}

func (fpvs *ListMyProjectInvitationsResponse_FieldSubPathValue) SetTo(target **ListMyProjectInvitationsResponse) {
	if *target == nil {
		*target = new(ListMyProjectInvitationsResponse)
	}
	switch fpvs.Selector() {
	case ListMyProjectInvitationsResponse_FieldPathSelectorProjectInvitations:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for ListMyProjectInvitationsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListMyProjectInvitationsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListMyProjectInvitationsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ListMyProjectInvitationsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ListMyProjectInvitationsResponse_FieldSubPathValue) CompareWith(source *ListMyProjectInvitationsResponse) (int, bool) {
	switch fpvs.Selector() {
	case ListMyProjectInvitationsResponse_FieldPathSelectorProjectInvitations:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for ListMyProjectInvitationsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListMyProjectInvitationsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ListMyProjectInvitationsResponse))
}

// ListMyProjectInvitationsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for ListMyProjectInvitationsResponse according to their type
// Present only for array (repeated) types.
type ListMyProjectInvitationsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListMyProjectInvitationsResponse_FieldPath
	ContainsValue(*ListMyProjectInvitationsResponse) bool
}

// ParseListMyProjectInvitationsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListMyProjectInvitationsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (ListMyProjectInvitationsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseListMyProjectInvitationsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListMyProjectInvitationsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListMyProjectInvitationsResponse_FieldPathArrayItemValue), nil
}

func MustParseListMyProjectInvitationsResponse_FieldPathArrayItemValue(pathStr, valueStr string) ListMyProjectInvitationsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseListMyProjectInvitationsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListMyProjectInvitationsResponse_FieldTerminalPathArrayItemValue struct {
	ListMyProjectInvitationsResponse_FieldTerminalPath
	value interface{}
}

var _ ListMyProjectInvitationsResponse_FieldPathArrayItemValue = (*ListMyProjectInvitationsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListMyProjectInvitationsResponse as interface{}
func (fpaiv *ListMyProjectInvitationsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *ListMyProjectInvitationsResponse_FieldTerminalPathArrayItemValue) AsProjectInvitationsItemValue() (*project_invitation.ProjectInvitation, bool) {
	res, ok := fpaiv.value.(*project_invitation.ProjectInvitation)
	return res, ok
}

func (fpaiv *ListMyProjectInvitationsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *ListMyProjectInvitationsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListMyProjectInvitationsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListMyProjectInvitationsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListMyProjectInvitationsResponse'
func (fpaiv *ListMyProjectInvitationsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *ListMyProjectInvitationsResponse) bool {
	slice := fpaiv.ListMyProjectInvitationsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ListMyProjectInvitationsResponse_FieldSubPathArrayItemValue struct {
	ListMyProjectInvitationsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ListMyProjectInvitationsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ListMyProjectInvitationsResponse_FieldSubPathArrayItemValue) AsProjectInvitationsPathItemValue() (project_invitation.ProjectInvitation_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(project_invitation.ProjectInvitation_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListMyProjectInvitationsResponse'
func (fpaivs *ListMyProjectInvitationsResponse_FieldSubPathArrayItemValue) ContainsValue(source *ListMyProjectInvitationsResponse) bool {
	switch fpaivs.Selector() {
	case ListMyProjectInvitationsResponse_FieldPathSelectorProjectInvitations:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for ListMyProjectInvitationsResponse: %d", fpaivs.Selector()))
	}
}

// ListMyProjectInvitationsResponse_FieldPathArrayOfValues allows storing slice of values for ListMyProjectInvitationsResponse fields according to their type
type ListMyProjectInvitationsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListMyProjectInvitationsResponse_FieldPath
}

func ParseListMyProjectInvitationsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (ListMyProjectInvitationsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseListMyProjectInvitationsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListMyProjectInvitationsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListMyProjectInvitationsResponse_FieldPathArrayOfValues), nil
}

func MustParseListMyProjectInvitationsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) ListMyProjectInvitationsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseListMyProjectInvitationsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListMyProjectInvitationsResponse_FieldTerminalPathArrayOfValues struct {
	ListMyProjectInvitationsResponse_FieldTerminalPath
	values interface{}
}

var _ ListMyProjectInvitationsResponse_FieldPathArrayOfValues = (*ListMyProjectInvitationsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListMyProjectInvitationsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListMyProjectInvitationsResponse_FieldPathSelectorProjectInvitations:
		for _, v := range fpaov.values.([][]*project_invitation.ProjectInvitation) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListMyProjectInvitationsResponse_FieldTerminalPathArrayOfValues) AsProjectInvitationsArrayOfValues() ([][]*project_invitation.ProjectInvitation, bool) {
	res, ok := fpaov.values.([][]*project_invitation.ProjectInvitation)
	return res, ok
}

type ListMyProjectInvitationsResponse_FieldSubPathArrayOfValues struct {
	ListMyProjectInvitationsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ListMyProjectInvitationsResponse_FieldPathArrayOfValues = (*ListMyProjectInvitationsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ListMyProjectInvitationsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ListMyProjectInvitationsResponse_FieldSubPathArrayOfValues) AsProjectInvitationsPathArrayOfValues() (project_invitation.ProjectInvitation_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(project_invitation.ProjectInvitation_FieldPathArrayOfValues)
	return res, ok
}
