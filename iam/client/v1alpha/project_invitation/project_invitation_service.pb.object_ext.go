// Code generated by protoc-gen-goten-object
// File: edgelq/iam/proto/v1alpha/project_invitation_service.proto
// DO NOT EDIT!!!

package project_invitation_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	project "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha/project"
	project_invitation "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha/project_invitation"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	empty "github.com/golang/protobuf/ptypes/empty"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = fmt.Stringer(nil)
	_ = sort.Interface(nil)

	_ = proto.Message(nil)
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &project.Project{}
	_ = &project_invitation.ProjectInvitation{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

func (o *GetProjectInvitationRequest) GotenObjectExt() {}

func (o *GetProjectInvitationRequest) MakeFullFieldMask() *GetProjectInvitationRequest_FieldMask {
	return FullGetProjectInvitationRequest_FieldMask()
}

func (o *GetProjectInvitationRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullGetProjectInvitationRequest_FieldMask()
}

func (o *GetProjectInvitationRequest) MakeDiffFieldMask(other *GetProjectInvitationRequest) *GetProjectInvitationRequest_FieldMask {
	if o == nil && other == nil {
		return &GetProjectInvitationRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullGetProjectInvitationRequest_FieldMask()
	}

	res := &GetProjectInvitationRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &GetProjectInvitationRequest_FieldTerminalPath{selector: GetProjectInvitationRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &GetProjectInvitationRequest_FieldTerminalPath{selector: GetProjectInvitationRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &GetProjectInvitationRequest_FieldTerminalPath{selector: GetProjectInvitationRequest_FieldPathSelectorView})
	}
	return res
}

func (o *GetProjectInvitationRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*GetProjectInvitationRequest))
}

func (o *GetProjectInvitationRequest) Clone() *GetProjectInvitationRequest {
	if o == nil {
		return nil
	}
	result := &GetProjectInvitationRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &project_invitation.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*project_invitation.ProjectInvitation_FieldMask)
	result.View = o.View
	return result
}

func (o *GetProjectInvitationRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *GetProjectInvitationRequest) Merge(source *GetProjectInvitationRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &project_invitation.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(project_invitation.ProjectInvitation_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *GetProjectInvitationRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*GetProjectInvitationRequest))
}

func (o *BatchGetProjectInvitationsRequest) GotenObjectExt() {}

func (o *BatchGetProjectInvitationsRequest) MakeFullFieldMask() *BatchGetProjectInvitationsRequest_FieldMask {
	return FullBatchGetProjectInvitationsRequest_FieldMask()
}

func (o *BatchGetProjectInvitationsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetProjectInvitationsRequest_FieldMask()
}

func (o *BatchGetProjectInvitationsRequest) MakeDiffFieldMask(other *BatchGetProjectInvitationsRequest) *BatchGetProjectInvitationsRequest_FieldMask {
	if o == nil && other == nil {
		return &BatchGetProjectInvitationsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetProjectInvitationsRequest_FieldMask()
	}

	res := &BatchGetProjectInvitationsRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &BatchGetProjectInvitationsRequest_FieldTerminalPath{selector: BatchGetProjectInvitationsRequest_FieldPathSelectorParent})
	}

	if len(o.GetNames()) == len(other.GetNames()) {
		for i, lValue := range o.GetNames() {
			rValue := other.GetNames()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetProjectInvitationsRequest_FieldTerminalPath{selector: BatchGetProjectInvitationsRequest_FieldPathSelectorNames})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetProjectInvitationsRequest_FieldTerminalPath{selector: BatchGetProjectInvitationsRequest_FieldPathSelectorNames})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &BatchGetProjectInvitationsRequest_FieldTerminalPath{selector: BatchGetProjectInvitationsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &BatchGetProjectInvitationsRequest_FieldTerminalPath{selector: BatchGetProjectInvitationsRequest_FieldPathSelectorView})
	}
	return res
}

func (o *BatchGetProjectInvitationsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetProjectInvitationsRequest))
}

func (o *BatchGetProjectInvitationsRequest) Clone() *BatchGetProjectInvitationsRequest {
	if o == nil {
		return nil
	}
	result := &BatchGetProjectInvitationsRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &project_invitation.Reference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Names = make([]*project_invitation.Reference, len(o.Names))
	for i, sourceValue := range o.Names {
		if sourceValue == nil {
			result.Names[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Names[i] = &project_invitation.Reference{}
			if err := result.Names[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*project_invitation.ProjectInvitation_FieldMask)
	result.View = o.View
	return result
}

func (o *BatchGetProjectInvitationsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetProjectInvitationsRequest) Merge(source *BatchGetProjectInvitationsRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &project_invitation.Reference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	for _, sourceValue := range source.GetNames() {
		exists := false
		for _, currentValue := range o.Names {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *project_invitation.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &project_invitation.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Names = append(o.Names, newDstElement)
		}
	}

	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(project_invitation.ProjectInvitation_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *BatchGetProjectInvitationsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetProjectInvitationsRequest))
}

func (o *BatchGetProjectInvitationsResponse) GotenObjectExt() {}

func (o *BatchGetProjectInvitationsResponse) MakeFullFieldMask() *BatchGetProjectInvitationsResponse_FieldMask {
	return FullBatchGetProjectInvitationsResponse_FieldMask()
}

func (o *BatchGetProjectInvitationsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetProjectInvitationsResponse_FieldMask()
}

func (o *BatchGetProjectInvitationsResponse) MakeDiffFieldMask(other *BatchGetProjectInvitationsResponse) *BatchGetProjectInvitationsResponse_FieldMask {
	if o == nil && other == nil {
		return &BatchGetProjectInvitationsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetProjectInvitationsResponse_FieldMask()
	}

	res := &BatchGetProjectInvitationsResponse_FieldMask{}

	if len(o.GetProjectInvitations()) == len(other.GetProjectInvitations()) {
		for i, lValue := range o.GetProjectInvitations() {
			rValue := other.GetProjectInvitations()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &BatchGetProjectInvitationsResponse_FieldTerminalPath{selector: BatchGetProjectInvitationsResponse_FieldPathSelectorProjectInvitations})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetProjectInvitationsResponse_FieldTerminalPath{selector: BatchGetProjectInvitationsResponse_FieldPathSelectorProjectInvitations})
	}

	if len(o.GetMissing()) == len(other.GetMissing()) {
		for i, lValue := range o.GetMissing() {
			rValue := other.GetMissing()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetProjectInvitationsResponse_FieldTerminalPath{selector: BatchGetProjectInvitationsResponse_FieldPathSelectorMissing})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetProjectInvitationsResponse_FieldTerminalPath{selector: BatchGetProjectInvitationsResponse_FieldPathSelectorMissing})
	}
	return res
}

func (o *BatchGetProjectInvitationsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetProjectInvitationsResponse))
}

func (o *BatchGetProjectInvitationsResponse) Clone() *BatchGetProjectInvitationsResponse {
	if o == nil {
		return nil
	}
	result := &BatchGetProjectInvitationsResponse{}
	result.ProjectInvitations = make([]*project_invitation.ProjectInvitation, len(o.ProjectInvitations))
	for i, sourceValue := range o.ProjectInvitations {
		result.ProjectInvitations[i] = sourceValue.Clone()
	}
	result.Missing = make([]*project_invitation.Reference, len(o.Missing))
	for i, sourceValue := range o.Missing {
		if sourceValue == nil {
			result.Missing[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Missing[i] = &project_invitation.Reference{}
			if err := result.Missing[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	return result
}

func (o *BatchGetProjectInvitationsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetProjectInvitationsResponse) Merge(source *BatchGetProjectInvitationsResponse) {
	for _, sourceValue := range source.GetProjectInvitations() {
		exists := false
		for _, currentValue := range o.ProjectInvitations {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *project_invitation.ProjectInvitation
			if sourceValue != nil {
				newDstElement = new(project_invitation.ProjectInvitation)
				newDstElement.Merge(sourceValue)
			}
			o.ProjectInvitations = append(o.ProjectInvitations, newDstElement)
		}
	}

	for _, sourceValue := range source.GetMissing() {
		exists := false
		for _, currentValue := range o.Missing {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *project_invitation.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &project_invitation.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Missing = append(o.Missing, newDstElement)
		}
	}

}

func (o *BatchGetProjectInvitationsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetProjectInvitationsResponse))
}

func (o *ListProjectInvitationsRequest) GotenObjectExt() {}

func (o *ListProjectInvitationsRequest) MakeFullFieldMask() *ListProjectInvitationsRequest_FieldMask {
	return FullListProjectInvitationsRequest_FieldMask()
}

func (o *ListProjectInvitationsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListProjectInvitationsRequest_FieldMask()
}

func (o *ListProjectInvitationsRequest) MakeDiffFieldMask(other *ListProjectInvitationsRequest) *ListProjectInvitationsRequest_FieldMask {
	if o == nil && other == nil {
		return &ListProjectInvitationsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListProjectInvitationsRequest_FieldMask()
	}

	res := &ListProjectInvitationsRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &ListProjectInvitationsRequest_FieldTerminalPath{selector: ListProjectInvitationsRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &ListProjectInvitationsRequest_FieldTerminalPath{selector: ListProjectInvitationsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &ListProjectInvitationsRequest_FieldTerminalPath{selector: ListProjectInvitationsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &ListProjectInvitationsRequest_FieldTerminalPath{selector: ListProjectInvitationsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &ListProjectInvitationsRequest_FieldTerminalPath{selector: ListProjectInvitationsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &ListProjectInvitationsRequest_FieldTerminalPath{selector: ListProjectInvitationsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &ListProjectInvitationsRequest_FieldTerminalPath{selector: ListProjectInvitationsRequest_FieldPathSelectorView})
	}
	return res
}

func (o *ListProjectInvitationsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListProjectInvitationsRequest))
}

func (o *ListProjectInvitationsRequest) Clone() *ListProjectInvitationsRequest {
	if o == nil {
		return nil
	}
	result := &ListProjectInvitationsRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &project_invitation.ParentName{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &project_invitation.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &project_invitation.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &project_invitation.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*project_invitation.ProjectInvitation_FieldMask)
	result.View = o.View
	return result
}

func (o *ListProjectInvitationsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListProjectInvitationsRequest) Merge(source *ListProjectInvitationsRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &project_invitation.ParentName{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &project_invitation.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &project_invitation.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &project_invitation.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(project_invitation.ProjectInvitation_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *ListProjectInvitationsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListProjectInvitationsRequest))
}

func (o *ListProjectInvitationsResponse) GotenObjectExt() {}

func (o *ListProjectInvitationsResponse) MakeFullFieldMask() *ListProjectInvitationsResponse_FieldMask {
	return FullListProjectInvitationsResponse_FieldMask()
}

func (o *ListProjectInvitationsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListProjectInvitationsResponse_FieldMask()
}

func (o *ListProjectInvitationsResponse) MakeDiffFieldMask(other *ListProjectInvitationsResponse) *ListProjectInvitationsResponse_FieldMask {
	if o == nil && other == nil {
		return &ListProjectInvitationsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListProjectInvitationsResponse_FieldMask()
	}

	res := &ListProjectInvitationsResponse_FieldMask{}

	if len(o.GetProjectInvitations()) == len(other.GetProjectInvitations()) {
		for i, lValue := range o.GetProjectInvitations() {
			rValue := other.GetProjectInvitations()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &ListProjectInvitationsResponse_FieldTerminalPath{selector: ListProjectInvitationsResponse_FieldPathSelectorProjectInvitations})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ListProjectInvitationsResponse_FieldTerminalPath{selector: ListProjectInvitationsResponse_FieldPathSelectorProjectInvitations})
	}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &ListProjectInvitationsResponse_FieldTerminalPath{selector: ListProjectInvitationsResponse_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &ListProjectInvitationsResponse_FieldTerminalPath{selector: ListProjectInvitationsResponse_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *ListProjectInvitationsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListProjectInvitationsResponse))
}

func (o *ListProjectInvitationsResponse) Clone() *ListProjectInvitationsResponse {
	if o == nil {
		return nil
	}
	result := &ListProjectInvitationsResponse{}
	result.ProjectInvitations = make([]*project_invitation.ProjectInvitation, len(o.ProjectInvitations))
	for i, sourceValue := range o.ProjectInvitations {
		result.ProjectInvitations[i] = sourceValue.Clone()
	}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &project_invitation.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &project_invitation.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *ListProjectInvitationsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListProjectInvitationsResponse) Merge(source *ListProjectInvitationsResponse) {
	for _, sourceValue := range source.GetProjectInvitations() {
		exists := false
		for _, currentValue := range o.ProjectInvitations {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *project_invitation.ProjectInvitation
			if sourceValue != nil {
				newDstElement = new(project_invitation.ProjectInvitation)
				newDstElement.Merge(sourceValue)
			}
			o.ProjectInvitations = append(o.ProjectInvitations, newDstElement)
		}
	}

	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &project_invitation.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &project_invitation.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *ListProjectInvitationsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListProjectInvitationsResponse))
}

func (o *WatchProjectInvitationRequest) GotenObjectExt() {}

func (o *WatchProjectInvitationRequest) MakeFullFieldMask() *WatchProjectInvitationRequest_FieldMask {
	return FullWatchProjectInvitationRequest_FieldMask()
}

func (o *WatchProjectInvitationRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchProjectInvitationRequest_FieldMask()
}

func (o *WatchProjectInvitationRequest) MakeDiffFieldMask(other *WatchProjectInvitationRequest) *WatchProjectInvitationRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchProjectInvitationRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchProjectInvitationRequest_FieldMask()
	}

	res := &WatchProjectInvitationRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &WatchProjectInvitationRequest_FieldTerminalPath{selector: WatchProjectInvitationRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchProjectInvitationRequest_FieldTerminalPath{selector: WatchProjectInvitationRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchProjectInvitationRequest_FieldTerminalPath{selector: WatchProjectInvitationRequest_FieldPathSelectorView})
	}
	return res
}

func (o *WatchProjectInvitationRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchProjectInvitationRequest))
}

func (o *WatchProjectInvitationRequest) Clone() *WatchProjectInvitationRequest {
	if o == nil {
		return nil
	}
	result := &WatchProjectInvitationRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &project_invitation.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*project_invitation.ProjectInvitation_FieldMask)
	result.View = o.View
	return result
}

func (o *WatchProjectInvitationRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchProjectInvitationRequest) Merge(source *WatchProjectInvitationRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &project_invitation.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(project_invitation.ProjectInvitation_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *WatchProjectInvitationRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchProjectInvitationRequest))
}

func (o *WatchProjectInvitationResponse) GotenObjectExt() {}

func (o *WatchProjectInvitationResponse) MakeFullFieldMask() *WatchProjectInvitationResponse_FieldMask {
	return FullWatchProjectInvitationResponse_FieldMask()
}

func (o *WatchProjectInvitationResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchProjectInvitationResponse_FieldMask()
}

func (o *WatchProjectInvitationResponse) MakeDiffFieldMask(other *WatchProjectInvitationResponse) *WatchProjectInvitationResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchProjectInvitationResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchProjectInvitationResponse_FieldMask()
	}

	res := &WatchProjectInvitationResponse_FieldMask{}
	if !proto.Equal(o.GetChange(), other.GetChange()) {
		res.Paths = append(res.Paths, &WatchProjectInvitationResponse_FieldTerminalPath{selector: WatchProjectInvitationResponse_FieldPathSelectorChange})
	}
	return res
}

func (o *WatchProjectInvitationResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchProjectInvitationResponse))
}

func (o *WatchProjectInvitationResponse) Clone() *WatchProjectInvitationResponse {
	if o == nil {
		return nil
	}
	result := &WatchProjectInvitationResponse{}
	result.Change = proto.Clone(o.Change).(*project_invitation.ProjectInvitationChange)
	return result
}

func (o *WatchProjectInvitationResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchProjectInvitationResponse) Merge(source *WatchProjectInvitationResponse) {
	if source.GetChange() != nil {
		if o.Change == nil {
			o.Change = new(project_invitation.ProjectInvitationChange)
		}
		proto.Merge(o.Change, source.GetChange())
	}
}

func (o *WatchProjectInvitationResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchProjectInvitationResponse))
}

func (o *WatchProjectInvitationsRequest) GotenObjectExt() {}

func (o *WatchProjectInvitationsRequest) MakeFullFieldMask() *WatchProjectInvitationsRequest_FieldMask {
	return FullWatchProjectInvitationsRequest_FieldMask()
}

func (o *WatchProjectInvitationsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchProjectInvitationsRequest_FieldMask()
}

func (o *WatchProjectInvitationsRequest) MakeDiffFieldMask(other *WatchProjectInvitationsRequest) *WatchProjectInvitationsRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchProjectInvitationsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchProjectInvitationsRequest_FieldMask()
	}

	res := &WatchProjectInvitationsRequest_FieldMask{}
	if o.GetType() != other.GetType() {
		res.Paths = append(res.Paths, &WatchProjectInvitationsRequest_FieldTerminalPath{selector: WatchProjectInvitationsRequest_FieldPathSelectorType})
	}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &WatchProjectInvitationsRequest_FieldTerminalPath{selector: WatchProjectInvitationsRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &WatchProjectInvitationsRequest_FieldTerminalPath{selector: WatchProjectInvitationsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &WatchProjectInvitationsRequest_FieldTerminalPath{selector: WatchProjectInvitationsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &WatchProjectInvitationsRequest_FieldTerminalPath{selector: WatchProjectInvitationsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchProjectInvitationsRequest_FieldTerminalPath{selector: WatchProjectInvitationsRequest_FieldPathSelectorResumeToken})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &WatchProjectInvitationsRequest_FieldTerminalPath{selector: WatchProjectInvitationsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchProjectInvitationsRequest_FieldTerminalPath{selector: WatchProjectInvitationsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchProjectInvitationsRequest_FieldTerminalPath{selector: WatchProjectInvitationsRequest_FieldPathSelectorView})
	}
	if o.GetMaxChunkSize() != other.GetMaxChunkSize() {
		res.Paths = append(res.Paths, &WatchProjectInvitationsRequest_FieldTerminalPath{selector: WatchProjectInvitationsRequest_FieldPathSelectorMaxChunkSize})
	}
	return res
}

func (o *WatchProjectInvitationsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchProjectInvitationsRequest))
}

func (o *WatchProjectInvitationsRequest) Clone() *WatchProjectInvitationsRequest {
	if o == nil {
		return nil
	}
	result := &WatchProjectInvitationsRequest{}
	result.Type = o.Type
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &project_invitation.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &project_invitation.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &project_invitation.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.ResumeToken = o.ResumeToken
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &project_invitation.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*project_invitation.ProjectInvitation_FieldMask)
	result.View = o.View
	result.MaxChunkSize = o.MaxChunkSize
	return result
}

func (o *WatchProjectInvitationsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchProjectInvitationsRequest) Merge(source *WatchProjectInvitationsRequest) {
	o.Type = source.GetType()
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &project_invitation.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &project_invitation.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &project_invitation.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	o.ResumeToken = source.GetResumeToken()
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &project_invitation.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(project_invitation.ProjectInvitation_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.MaxChunkSize = source.GetMaxChunkSize()
}

func (o *WatchProjectInvitationsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchProjectInvitationsRequest))
}

func (o *WatchProjectInvitationsResponse) GotenObjectExt() {}

func (o *WatchProjectInvitationsResponse) MakeFullFieldMask() *WatchProjectInvitationsResponse_FieldMask {
	return FullWatchProjectInvitationsResponse_FieldMask()
}

func (o *WatchProjectInvitationsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchProjectInvitationsResponse_FieldMask()
}

func (o *WatchProjectInvitationsResponse) MakeDiffFieldMask(other *WatchProjectInvitationsResponse) *WatchProjectInvitationsResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchProjectInvitationsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchProjectInvitationsResponse_FieldMask()
	}

	res := &WatchProjectInvitationsResponse_FieldMask{}

	if len(o.GetProjectInvitationChanges()) == len(other.GetProjectInvitationChanges()) {
		for i, lValue := range o.GetProjectInvitationChanges() {
			rValue := other.GetProjectInvitationChanges()[i]
			if !proto.Equal(lValue, rValue) {
				res.Paths = append(res.Paths, &WatchProjectInvitationsResponse_FieldTerminalPath{selector: WatchProjectInvitationsResponse_FieldPathSelectorProjectInvitationChanges})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &WatchProjectInvitationsResponse_FieldTerminalPath{selector: WatchProjectInvitationsResponse_FieldPathSelectorProjectInvitationChanges})
	}
	if o.GetIsCurrent() != other.GetIsCurrent() {
		res.Paths = append(res.Paths, &WatchProjectInvitationsResponse_FieldTerminalPath{selector: WatchProjectInvitationsResponse_FieldPathSelectorIsCurrent})
	}
	{
		subMask := o.GetPageTokenChange().MakeDiffFieldMask(other.GetPageTokenChange())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &WatchProjectInvitationsResponse_FieldTerminalPath{selector: WatchProjectInvitationsResponse_FieldPathSelectorPageTokenChange})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &WatchProjectInvitationsResponse_FieldSubPath{selector: WatchProjectInvitationsResponse_FieldPathSelectorPageTokenChange, subPath: subpath})
			}
		}
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchProjectInvitationsResponse_FieldTerminalPath{selector: WatchProjectInvitationsResponse_FieldPathSelectorResumeToken})
	}
	if o.GetSnapshotSize() != other.GetSnapshotSize() {
		res.Paths = append(res.Paths, &WatchProjectInvitationsResponse_FieldTerminalPath{selector: WatchProjectInvitationsResponse_FieldPathSelectorSnapshotSize})
	}
	if o.GetIsSoftReset() != other.GetIsSoftReset() {
		res.Paths = append(res.Paths, &WatchProjectInvitationsResponse_FieldTerminalPath{selector: WatchProjectInvitationsResponse_FieldPathSelectorIsSoftReset})
	}
	if o.GetIsHardReset() != other.GetIsHardReset() {
		res.Paths = append(res.Paths, &WatchProjectInvitationsResponse_FieldTerminalPath{selector: WatchProjectInvitationsResponse_FieldPathSelectorIsHardReset})
	}
	return res
}

func (o *WatchProjectInvitationsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchProjectInvitationsResponse))
}

func (o *WatchProjectInvitationsResponse) Clone() *WatchProjectInvitationsResponse {
	if o == nil {
		return nil
	}
	result := &WatchProjectInvitationsResponse{}
	result.ProjectInvitationChanges = make([]*project_invitation.ProjectInvitationChange, len(o.ProjectInvitationChanges))
	for i, sourceValue := range o.ProjectInvitationChanges {
		result.ProjectInvitationChanges[i] = proto.Clone(sourceValue).(*project_invitation.ProjectInvitationChange)
	}
	result.IsCurrent = o.IsCurrent
	result.PageTokenChange = o.PageTokenChange.Clone()
	result.ResumeToken = o.ResumeToken
	result.SnapshotSize = o.SnapshotSize
	result.IsSoftReset = o.IsSoftReset
	result.IsHardReset = o.IsHardReset
	return result
}

func (o *WatchProjectInvitationsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchProjectInvitationsResponse) Merge(source *WatchProjectInvitationsResponse) {
	for _, sourceValue := range source.GetProjectInvitationChanges() {
		exists := false
		for _, currentValue := range o.ProjectInvitationChanges {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *project_invitation.ProjectInvitationChange
			if sourceValue != nil {
				newDstElement = new(project_invitation.ProjectInvitationChange)
				proto.Merge(newDstElement, sourceValue)
			}
			o.ProjectInvitationChanges = append(o.ProjectInvitationChanges, newDstElement)
		}
	}

	o.IsCurrent = source.GetIsCurrent()
	if source.GetPageTokenChange() != nil {
		if o.PageTokenChange == nil {
			o.PageTokenChange = new(WatchProjectInvitationsResponse_PageTokenChange)
		}
		o.PageTokenChange.Merge(source.GetPageTokenChange())
	}
	o.ResumeToken = source.GetResumeToken()
	o.SnapshotSize = source.GetSnapshotSize()
	o.IsSoftReset = source.GetIsSoftReset()
	o.IsHardReset = source.GetIsHardReset()
}

func (o *WatchProjectInvitationsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchProjectInvitationsResponse))
}

func (o *WatchProjectInvitationsResponse_PageTokenChange) GotenObjectExt() {}

func (o *WatchProjectInvitationsResponse_PageTokenChange) MakeFullFieldMask() *WatchProjectInvitationsResponse_PageTokenChange_FieldMask {
	return FullWatchProjectInvitationsResponse_PageTokenChange_FieldMask()
}

func (o *WatchProjectInvitationsResponse_PageTokenChange) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchProjectInvitationsResponse_PageTokenChange_FieldMask()
}

func (o *WatchProjectInvitationsResponse_PageTokenChange) MakeDiffFieldMask(other *WatchProjectInvitationsResponse_PageTokenChange) *WatchProjectInvitationsResponse_PageTokenChange_FieldMask {
	if o == nil && other == nil {
		return &WatchProjectInvitationsResponse_PageTokenChange_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchProjectInvitationsResponse_PageTokenChange_FieldMask()
	}

	res := &WatchProjectInvitationsResponse_PageTokenChange_FieldMask{}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &WatchProjectInvitationsResponsePageTokenChange_FieldTerminalPath{selector: WatchProjectInvitationsResponsePageTokenChange_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &WatchProjectInvitationsResponsePageTokenChange_FieldTerminalPath{selector: WatchProjectInvitationsResponsePageTokenChange_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *WatchProjectInvitationsResponse_PageTokenChange) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchProjectInvitationsResponse_PageTokenChange))
}

func (o *WatchProjectInvitationsResponse_PageTokenChange) Clone() *WatchProjectInvitationsResponse_PageTokenChange {
	if o == nil {
		return nil
	}
	result := &WatchProjectInvitationsResponse_PageTokenChange{}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &project_invitation.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &project_invitation.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *WatchProjectInvitationsResponse_PageTokenChange) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchProjectInvitationsResponse_PageTokenChange) Merge(source *WatchProjectInvitationsResponse_PageTokenChange) {
	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &project_invitation.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &project_invitation.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *WatchProjectInvitationsResponse_PageTokenChange) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchProjectInvitationsResponse_PageTokenChange))
}

func (o *CreateProjectInvitationRequest) GotenObjectExt() {}

func (o *CreateProjectInvitationRequest) MakeFullFieldMask() *CreateProjectInvitationRequest_FieldMask {
	return FullCreateProjectInvitationRequest_FieldMask()
}

func (o *CreateProjectInvitationRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullCreateProjectInvitationRequest_FieldMask()
}

func (o *CreateProjectInvitationRequest) MakeDiffFieldMask(other *CreateProjectInvitationRequest) *CreateProjectInvitationRequest_FieldMask {
	if o == nil && other == nil {
		return &CreateProjectInvitationRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullCreateProjectInvitationRequest_FieldMask()
	}

	res := &CreateProjectInvitationRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &CreateProjectInvitationRequest_FieldTerminalPath{selector: CreateProjectInvitationRequest_FieldPathSelectorParent})
	}
	{
		subMask := o.GetProjectInvitation().MakeDiffFieldMask(other.GetProjectInvitation())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &CreateProjectInvitationRequest_FieldTerminalPath{selector: CreateProjectInvitationRequest_FieldPathSelectorProjectInvitation})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &CreateProjectInvitationRequest_FieldSubPath{selector: CreateProjectInvitationRequest_FieldPathSelectorProjectInvitation, subPath: subpath})
			}
		}
	}
	return res
}

func (o *CreateProjectInvitationRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*CreateProjectInvitationRequest))
}

func (o *CreateProjectInvitationRequest) Clone() *CreateProjectInvitationRequest {
	if o == nil {
		return nil
	}
	result := &CreateProjectInvitationRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &project_invitation.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.ProjectInvitation = o.ProjectInvitation.Clone()
	return result
}

func (o *CreateProjectInvitationRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *CreateProjectInvitationRequest) Merge(source *CreateProjectInvitationRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &project_invitation.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	if source.GetProjectInvitation() != nil {
		if o.ProjectInvitation == nil {
			o.ProjectInvitation = new(project_invitation.ProjectInvitation)
		}
		o.ProjectInvitation.Merge(source.GetProjectInvitation())
	}
}

func (o *CreateProjectInvitationRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*CreateProjectInvitationRequest))
}

func (o *UpdateProjectInvitationRequest) GotenObjectExt() {}

func (o *UpdateProjectInvitationRequest) MakeFullFieldMask() *UpdateProjectInvitationRequest_FieldMask {
	return FullUpdateProjectInvitationRequest_FieldMask()
}

func (o *UpdateProjectInvitationRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateProjectInvitationRequest_FieldMask()
}

func (o *UpdateProjectInvitationRequest) MakeDiffFieldMask(other *UpdateProjectInvitationRequest) *UpdateProjectInvitationRequest_FieldMask {
	if o == nil && other == nil {
		return &UpdateProjectInvitationRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateProjectInvitationRequest_FieldMask()
	}

	res := &UpdateProjectInvitationRequest_FieldMask{}
	{
		subMask := o.GetProjectInvitation().MakeDiffFieldMask(other.GetProjectInvitation())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateProjectInvitationRequest_FieldTerminalPath{selector: UpdateProjectInvitationRequest_FieldPathSelectorProjectInvitation})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateProjectInvitationRequest_FieldSubPath{selector: UpdateProjectInvitationRequest_FieldPathSelectorProjectInvitation, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetUpdateMask(), other.GetUpdateMask()) {
		res.Paths = append(res.Paths, &UpdateProjectInvitationRequest_FieldTerminalPath{selector: UpdateProjectInvitationRequest_FieldPathSelectorUpdateMask})
	}
	{
		subMask := o.GetCas().MakeDiffFieldMask(other.GetCas())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateProjectInvitationRequest_FieldTerminalPath{selector: UpdateProjectInvitationRequest_FieldPathSelectorCas})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateProjectInvitationRequest_FieldSubPath{selector: UpdateProjectInvitationRequest_FieldPathSelectorCas, subPath: subpath})
			}
		}
	}
	return res
}

func (o *UpdateProjectInvitationRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateProjectInvitationRequest))
}

func (o *UpdateProjectInvitationRequest) Clone() *UpdateProjectInvitationRequest {
	if o == nil {
		return nil
	}
	result := &UpdateProjectInvitationRequest{}
	result.ProjectInvitation = o.ProjectInvitation.Clone()
	result.UpdateMask = proto.Clone(o.UpdateMask).(*project_invitation.ProjectInvitation_FieldMask)
	result.Cas = o.Cas.Clone()
	return result
}

func (o *UpdateProjectInvitationRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateProjectInvitationRequest) Merge(source *UpdateProjectInvitationRequest) {
	if source.GetProjectInvitation() != nil {
		if o.ProjectInvitation == nil {
			o.ProjectInvitation = new(project_invitation.ProjectInvitation)
		}
		o.ProjectInvitation.Merge(source.GetProjectInvitation())
	}
	if source.GetUpdateMask() != nil {
		if o.UpdateMask == nil {
			o.UpdateMask = new(project_invitation.ProjectInvitation_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetUpdateMask().ToProtoFieldMask(), o.UpdateMask.ToProtoFieldMask())
		if err := o.UpdateMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	if source.GetCas() != nil {
		if o.Cas == nil {
			o.Cas = new(UpdateProjectInvitationRequest_CAS)
		}
		o.Cas.Merge(source.GetCas())
	}
}

func (o *UpdateProjectInvitationRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateProjectInvitationRequest))
}

func (o *UpdateProjectInvitationRequest_CAS) GotenObjectExt() {}

func (o *UpdateProjectInvitationRequest_CAS) MakeFullFieldMask() *UpdateProjectInvitationRequest_CAS_FieldMask {
	return FullUpdateProjectInvitationRequest_CAS_FieldMask()
}

func (o *UpdateProjectInvitationRequest_CAS) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateProjectInvitationRequest_CAS_FieldMask()
}

func (o *UpdateProjectInvitationRequest_CAS) MakeDiffFieldMask(other *UpdateProjectInvitationRequest_CAS) *UpdateProjectInvitationRequest_CAS_FieldMask {
	if o == nil && other == nil {
		return &UpdateProjectInvitationRequest_CAS_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateProjectInvitationRequest_CAS_FieldMask()
	}

	res := &UpdateProjectInvitationRequest_CAS_FieldMask{}
	{
		subMask := o.GetConditionalState().MakeDiffFieldMask(other.GetConditionalState())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateProjectInvitationRequestCAS_FieldTerminalPath{selector: UpdateProjectInvitationRequestCAS_FieldPathSelectorConditionalState})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateProjectInvitationRequestCAS_FieldSubPath{selector: UpdateProjectInvitationRequestCAS_FieldPathSelectorConditionalState, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &UpdateProjectInvitationRequestCAS_FieldTerminalPath{selector: UpdateProjectInvitationRequestCAS_FieldPathSelectorFieldMask})
	}
	return res
}

func (o *UpdateProjectInvitationRequest_CAS) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateProjectInvitationRequest_CAS))
}

func (o *UpdateProjectInvitationRequest_CAS) Clone() *UpdateProjectInvitationRequest_CAS {
	if o == nil {
		return nil
	}
	result := &UpdateProjectInvitationRequest_CAS{}
	result.ConditionalState = o.ConditionalState.Clone()
	result.FieldMask = proto.Clone(o.FieldMask).(*project_invitation.ProjectInvitation_FieldMask)
	return result
}

func (o *UpdateProjectInvitationRequest_CAS) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateProjectInvitationRequest_CAS) Merge(source *UpdateProjectInvitationRequest_CAS) {
	if source.GetConditionalState() != nil {
		if o.ConditionalState == nil {
			o.ConditionalState = new(project_invitation.ProjectInvitation)
		}
		o.ConditionalState.Merge(source.GetConditionalState())
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(project_invitation.ProjectInvitation_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
}

func (o *UpdateProjectInvitationRequest_CAS) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateProjectInvitationRequest_CAS))
}

func (o *DeleteProjectInvitationRequest) GotenObjectExt() {}

func (o *DeleteProjectInvitationRequest) MakeFullFieldMask() *DeleteProjectInvitationRequest_FieldMask {
	return FullDeleteProjectInvitationRequest_FieldMask()
}

func (o *DeleteProjectInvitationRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDeleteProjectInvitationRequest_FieldMask()
}

func (o *DeleteProjectInvitationRequest) MakeDiffFieldMask(other *DeleteProjectInvitationRequest) *DeleteProjectInvitationRequest_FieldMask {
	if o == nil && other == nil {
		return &DeleteProjectInvitationRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDeleteProjectInvitationRequest_FieldMask()
	}

	res := &DeleteProjectInvitationRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &DeleteProjectInvitationRequest_FieldTerminalPath{selector: DeleteProjectInvitationRequest_FieldPathSelectorName})
	}
	return res
}

func (o *DeleteProjectInvitationRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*DeleteProjectInvitationRequest))
}

func (o *DeleteProjectInvitationRequest) Clone() *DeleteProjectInvitationRequest {
	if o == nil {
		return nil
	}
	result := &DeleteProjectInvitationRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &project_invitation.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *DeleteProjectInvitationRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *DeleteProjectInvitationRequest) Merge(source *DeleteProjectInvitationRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &project_invitation.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
}

func (o *DeleteProjectInvitationRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*DeleteProjectInvitationRequest))
}
