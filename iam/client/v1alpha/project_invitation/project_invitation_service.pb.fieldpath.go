// Code generated by protoc-gen-goten-object
// File: edgelq/iam/proto/v1alpha/project_invitation_service.proto
// DO NOT EDIT!!!

package project_invitation_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	project "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha/project"
	project_invitation "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha/project_invitation"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &project.Project{}
	_ = &project_invitation.ProjectInvitation{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type GetProjectInvitationRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() GetProjectInvitationRequest_FieldPathSelector
	Get(source *GetProjectInvitationRequest) []interface{}
	GetSingle(source *GetProjectInvitationRequest) (interface{}, bool)
	ClearValue(item *GetProjectInvitationRequest)

	// Those methods build corresponding GetProjectInvitationRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) GetProjectInvitationRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) GetProjectInvitationRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) GetProjectInvitationRequest_FieldPathArrayItemValue
}

type GetProjectInvitationRequest_FieldPathSelector int32

const (
	GetProjectInvitationRequest_FieldPathSelectorName      GetProjectInvitationRequest_FieldPathSelector = 0
	GetProjectInvitationRequest_FieldPathSelectorFieldMask GetProjectInvitationRequest_FieldPathSelector = 1
	GetProjectInvitationRequest_FieldPathSelectorView      GetProjectInvitationRequest_FieldPathSelector = 2
)

func (s GetProjectInvitationRequest_FieldPathSelector) String() string {
	switch s {
	case GetProjectInvitationRequest_FieldPathSelectorName:
		return "name"
	case GetProjectInvitationRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case GetProjectInvitationRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for GetProjectInvitationRequest: %d", s))
	}
}

func BuildGetProjectInvitationRequest_FieldPath(fp gotenobject.RawFieldPath) (GetProjectInvitationRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object GetProjectInvitationRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &GetProjectInvitationRequest_FieldTerminalPath{selector: GetProjectInvitationRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &GetProjectInvitationRequest_FieldTerminalPath{selector: GetProjectInvitationRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &GetProjectInvitationRequest_FieldTerminalPath{selector: GetProjectInvitationRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object GetProjectInvitationRequest", fp)
}

func ParseGetProjectInvitationRequest_FieldPath(rawField string) (GetProjectInvitationRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildGetProjectInvitationRequest_FieldPath(fp)
}

func MustParseGetProjectInvitationRequest_FieldPath(rawField string) GetProjectInvitationRequest_FieldPath {
	fp, err := ParseGetProjectInvitationRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type GetProjectInvitationRequest_FieldTerminalPath struct {
	selector GetProjectInvitationRequest_FieldPathSelector
}

var _ GetProjectInvitationRequest_FieldPath = (*GetProjectInvitationRequest_FieldTerminalPath)(nil)

func (fp *GetProjectInvitationRequest_FieldTerminalPath) Selector() GetProjectInvitationRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *GetProjectInvitationRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *GetProjectInvitationRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source GetProjectInvitationRequest
func (fp *GetProjectInvitationRequest_FieldTerminalPath) Get(source *GetProjectInvitationRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case GetProjectInvitationRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case GetProjectInvitationRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case GetProjectInvitationRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for GetProjectInvitationRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *GetProjectInvitationRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*GetProjectInvitationRequest))
}

// GetSingle returns value pointed by specific field of from source GetProjectInvitationRequest
func (fp *GetProjectInvitationRequest_FieldTerminalPath) GetSingle(source *GetProjectInvitationRequest) (interface{}, bool) {
	switch fp.selector {
	case GetProjectInvitationRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case GetProjectInvitationRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case GetProjectInvitationRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for GetProjectInvitationRequest: %d", fp.selector))
	}
}

func (fp *GetProjectInvitationRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*GetProjectInvitationRequest))
}

// GetDefault returns a default value of the field type
func (fp *GetProjectInvitationRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case GetProjectInvitationRequest_FieldPathSelectorName:
		return (*project_invitation.Reference)(nil)
	case GetProjectInvitationRequest_FieldPathSelectorFieldMask:
		return (*project_invitation.ProjectInvitation_FieldMask)(nil)
	case GetProjectInvitationRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for GetProjectInvitationRequest: %d", fp.selector))
	}
}

func (fp *GetProjectInvitationRequest_FieldTerminalPath) ClearValue(item *GetProjectInvitationRequest) {
	if item != nil {
		switch fp.selector {
		case GetProjectInvitationRequest_FieldPathSelectorName:
			item.Name = nil
		case GetProjectInvitationRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case GetProjectInvitationRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for GetProjectInvitationRequest: %d", fp.selector))
		}
	}
}

func (fp *GetProjectInvitationRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*GetProjectInvitationRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *GetProjectInvitationRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == GetProjectInvitationRequest_FieldPathSelectorName ||
		fp.selector == GetProjectInvitationRequest_FieldPathSelectorFieldMask ||
		fp.selector == GetProjectInvitationRequest_FieldPathSelectorView
}

func (fp *GetProjectInvitationRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *GetProjectInvitationRequest_FieldTerminalPath) WithIValue(value interface{}) GetProjectInvitationRequest_FieldPathValue {
	switch fp.selector {
	case GetProjectInvitationRequest_FieldPathSelectorName:
		return &GetProjectInvitationRequest_FieldTerminalPathValue{GetProjectInvitationRequest_FieldTerminalPath: *fp, value: value.(*project_invitation.Reference)}
	case GetProjectInvitationRequest_FieldPathSelectorFieldMask:
		return &GetProjectInvitationRequest_FieldTerminalPathValue{GetProjectInvitationRequest_FieldTerminalPath: *fp, value: value.(*project_invitation.ProjectInvitation_FieldMask)}
	case GetProjectInvitationRequest_FieldPathSelectorView:
		return &GetProjectInvitationRequest_FieldTerminalPathValue{GetProjectInvitationRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetProjectInvitationRequest: %d", fp.selector))
	}
}

func (fp *GetProjectInvitationRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *GetProjectInvitationRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) GetProjectInvitationRequest_FieldPathArrayOfValues {
	fpaov := &GetProjectInvitationRequest_FieldTerminalPathArrayOfValues{GetProjectInvitationRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case GetProjectInvitationRequest_FieldPathSelectorName:
		return &GetProjectInvitationRequest_FieldTerminalPathArrayOfValues{GetProjectInvitationRequest_FieldTerminalPath: *fp, values: values.([]*project_invitation.Reference)}
	case GetProjectInvitationRequest_FieldPathSelectorFieldMask:
		return &GetProjectInvitationRequest_FieldTerminalPathArrayOfValues{GetProjectInvitationRequest_FieldTerminalPath: *fp, values: values.([]*project_invitation.ProjectInvitation_FieldMask)}
	case GetProjectInvitationRequest_FieldPathSelectorView:
		return &GetProjectInvitationRequest_FieldTerminalPathArrayOfValues{GetProjectInvitationRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetProjectInvitationRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *GetProjectInvitationRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *GetProjectInvitationRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) GetProjectInvitationRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for GetProjectInvitationRequest: %d", fp.selector))
	}
}

func (fp *GetProjectInvitationRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// GetProjectInvitationRequest_FieldPathValue allows storing values for GetProjectInvitationRequest fields according to their type
type GetProjectInvitationRequest_FieldPathValue interface {
	GetProjectInvitationRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **GetProjectInvitationRequest)
	CompareWith(*GetProjectInvitationRequest) (cmp int, comparable bool)
}

func ParseGetProjectInvitationRequest_FieldPathValue(pathStr, valueStr string) (GetProjectInvitationRequest_FieldPathValue, error) {
	fp, err := ParseGetProjectInvitationRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetProjectInvitationRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(GetProjectInvitationRequest_FieldPathValue), nil
}

func MustParseGetProjectInvitationRequest_FieldPathValue(pathStr, valueStr string) GetProjectInvitationRequest_FieldPathValue {
	fpv, err := ParseGetProjectInvitationRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type GetProjectInvitationRequest_FieldTerminalPathValue struct {
	GetProjectInvitationRequest_FieldTerminalPath
	value interface{}
}

var _ GetProjectInvitationRequest_FieldPathValue = (*GetProjectInvitationRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'GetProjectInvitationRequest' as interface{}
func (fpv *GetProjectInvitationRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *GetProjectInvitationRequest_FieldTerminalPathValue) AsNameValue() (*project_invitation.Reference, bool) {
	res, ok := fpv.value.(*project_invitation.Reference)
	return res, ok
}
func (fpv *GetProjectInvitationRequest_FieldTerminalPathValue) AsFieldMaskValue() (*project_invitation.ProjectInvitation_FieldMask, bool) {
	res, ok := fpv.value.(*project_invitation.ProjectInvitation_FieldMask)
	return res, ok
}
func (fpv *GetProjectInvitationRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object GetProjectInvitationRequest
func (fpv *GetProjectInvitationRequest_FieldTerminalPathValue) SetTo(target **GetProjectInvitationRequest) {
	if *target == nil {
		*target = new(GetProjectInvitationRequest)
	}
	switch fpv.selector {
	case GetProjectInvitationRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*project_invitation.Reference)
	case GetProjectInvitationRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*project_invitation.ProjectInvitation_FieldMask)
	case GetProjectInvitationRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for GetProjectInvitationRequest: %d", fpv.selector))
	}
}

func (fpv *GetProjectInvitationRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*GetProjectInvitationRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'GetProjectInvitationRequest_FieldTerminalPathValue' with the value under path in 'GetProjectInvitationRequest'.
func (fpv *GetProjectInvitationRequest_FieldTerminalPathValue) CompareWith(source *GetProjectInvitationRequest) (int, bool) {
	switch fpv.selector {
	case GetProjectInvitationRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*project_invitation.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case GetProjectInvitationRequest_FieldPathSelectorFieldMask:
		return 0, false
	case GetProjectInvitationRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for GetProjectInvitationRequest: %d", fpv.selector))
	}
}

func (fpv *GetProjectInvitationRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*GetProjectInvitationRequest))
}

// GetProjectInvitationRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for GetProjectInvitationRequest according to their type
// Present only for array (repeated) types.
type GetProjectInvitationRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	GetProjectInvitationRequest_FieldPath
	ContainsValue(*GetProjectInvitationRequest) bool
}

// ParseGetProjectInvitationRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseGetProjectInvitationRequest_FieldPathArrayItemValue(pathStr, valueStr string) (GetProjectInvitationRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseGetProjectInvitationRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetProjectInvitationRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(GetProjectInvitationRequest_FieldPathArrayItemValue), nil
}

func MustParseGetProjectInvitationRequest_FieldPathArrayItemValue(pathStr, valueStr string) GetProjectInvitationRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseGetProjectInvitationRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type GetProjectInvitationRequest_FieldTerminalPathArrayItemValue struct {
	GetProjectInvitationRequest_FieldTerminalPath
	value interface{}
}

var _ GetProjectInvitationRequest_FieldPathArrayItemValue = (*GetProjectInvitationRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object GetProjectInvitationRequest as interface{}
func (fpaiv *GetProjectInvitationRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *GetProjectInvitationRequest_FieldTerminalPathArrayItemValue) GetSingle(source *GetProjectInvitationRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *GetProjectInvitationRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*GetProjectInvitationRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'GetProjectInvitationRequest'
func (fpaiv *GetProjectInvitationRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *GetProjectInvitationRequest) bool {
	slice := fpaiv.GetProjectInvitationRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// GetProjectInvitationRequest_FieldPathArrayOfValues allows storing slice of values for GetProjectInvitationRequest fields according to their type
type GetProjectInvitationRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	GetProjectInvitationRequest_FieldPath
}

func ParseGetProjectInvitationRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (GetProjectInvitationRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseGetProjectInvitationRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetProjectInvitationRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(GetProjectInvitationRequest_FieldPathArrayOfValues), nil
}

func MustParseGetProjectInvitationRequest_FieldPathArrayOfValues(pathStr, valuesStr string) GetProjectInvitationRequest_FieldPathArrayOfValues {
	fpaov, err := ParseGetProjectInvitationRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type GetProjectInvitationRequest_FieldTerminalPathArrayOfValues struct {
	GetProjectInvitationRequest_FieldTerminalPath
	values interface{}
}

var _ GetProjectInvitationRequest_FieldPathArrayOfValues = (*GetProjectInvitationRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *GetProjectInvitationRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case GetProjectInvitationRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*project_invitation.Reference) {
			values = append(values, v)
		}
	case GetProjectInvitationRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*project_invitation.ProjectInvitation_FieldMask) {
			values = append(values, v)
		}
	case GetProjectInvitationRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *GetProjectInvitationRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*project_invitation.Reference, bool) {
	res, ok := fpaov.values.([]*project_invitation.Reference)
	return res, ok
}
func (fpaov *GetProjectInvitationRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*project_invitation.ProjectInvitation_FieldMask, bool) {
	res, ok := fpaov.values.([]*project_invitation.ProjectInvitation_FieldMask)
	return res, ok
}
func (fpaov *GetProjectInvitationRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetProjectInvitationsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetProjectInvitationsRequest_FieldPathSelector
	Get(source *BatchGetProjectInvitationsRequest) []interface{}
	GetSingle(source *BatchGetProjectInvitationsRequest) (interface{}, bool)
	ClearValue(item *BatchGetProjectInvitationsRequest)

	// Those methods build corresponding BatchGetProjectInvitationsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetProjectInvitationsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetProjectInvitationsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetProjectInvitationsRequest_FieldPathArrayItemValue
}

type BatchGetProjectInvitationsRequest_FieldPathSelector int32

const (
	BatchGetProjectInvitationsRequest_FieldPathSelectorNames     BatchGetProjectInvitationsRequest_FieldPathSelector = 0
	BatchGetProjectInvitationsRequest_FieldPathSelectorFieldMask BatchGetProjectInvitationsRequest_FieldPathSelector = 1
	BatchGetProjectInvitationsRequest_FieldPathSelectorView      BatchGetProjectInvitationsRequest_FieldPathSelector = 2
)

func (s BatchGetProjectInvitationsRequest_FieldPathSelector) String() string {
	switch s {
	case BatchGetProjectInvitationsRequest_FieldPathSelectorNames:
		return "names"
	case BatchGetProjectInvitationsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case BatchGetProjectInvitationsRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProjectInvitationsRequest: %d", s))
	}
}

func BuildBatchGetProjectInvitationsRequest_FieldPath(fp gotenobject.RawFieldPath) (BatchGetProjectInvitationsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetProjectInvitationsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "names":
			return &BatchGetProjectInvitationsRequest_FieldTerminalPath{selector: BatchGetProjectInvitationsRequest_FieldPathSelectorNames}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &BatchGetProjectInvitationsRequest_FieldTerminalPath{selector: BatchGetProjectInvitationsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &BatchGetProjectInvitationsRequest_FieldTerminalPath{selector: BatchGetProjectInvitationsRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetProjectInvitationsRequest", fp)
}

func ParseBatchGetProjectInvitationsRequest_FieldPath(rawField string) (BatchGetProjectInvitationsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetProjectInvitationsRequest_FieldPath(fp)
}

func MustParseBatchGetProjectInvitationsRequest_FieldPath(rawField string) BatchGetProjectInvitationsRequest_FieldPath {
	fp, err := ParseBatchGetProjectInvitationsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetProjectInvitationsRequest_FieldTerminalPath struct {
	selector BatchGetProjectInvitationsRequest_FieldPathSelector
}

var _ BatchGetProjectInvitationsRequest_FieldPath = (*BatchGetProjectInvitationsRequest_FieldTerminalPath)(nil)

func (fp *BatchGetProjectInvitationsRequest_FieldTerminalPath) Selector() BatchGetProjectInvitationsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetProjectInvitationsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetProjectInvitationsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetProjectInvitationsRequest
func (fp *BatchGetProjectInvitationsRequest_FieldTerminalPath) Get(source *BatchGetProjectInvitationsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetProjectInvitationsRequest_FieldPathSelectorNames:
			for _, value := range source.GetNames() {
				values = append(values, value)
			}
		case BatchGetProjectInvitationsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case BatchGetProjectInvitationsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetProjectInvitationsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetProjectInvitationsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetProjectInvitationsRequest))
}

// GetSingle returns value pointed by specific field of from source BatchGetProjectInvitationsRequest
func (fp *BatchGetProjectInvitationsRequest_FieldTerminalPath) GetSingle(source *BatchGetProjectInvitationsRequest) (interface{}, bool) {
	switch fp.selector {
	case BatchGetProjectInvitationsRequest_FieldPathSelectorNames:
		res := source.GetNames()
		return res, res != nil
	case BatchGetProjectInvitationsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case BatchGetProjectInvitationsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProjectInvitationsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetProjectInvitationsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetProjectInvitationsRequest))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetProjectInvitationsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetProjectInvitationsRequest_FieldPathSelectorNames:
		return ([]*project_invitation.Reference)(nil)
	case BatchGetProjectInvitationsRequest_FieldPathSelectorFieldMask:
		return (*project_invitation.ProjectInvitation_FieldMask)(nil)
	case BatchGetProjectInvitationsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProjectInvitationsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetProjectInvitationsRequest_FieldTerminalPath) ClearValue(item *BatchGetProjectInvitationsRequest) {
	if item != nil {
		switch fp.selector {
		case BatchGetProjectInvitationsRequest_FieldPathSelectorNames:
			item.Names = nil
		case BatchGetProjectInvitationsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case BatchGetProjectInvitationsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetProjectInvitationsRequest: %d", fp.selector))
		}
	}
}

func (fp *BatchGetProjectInvitationsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetProjectInvitationsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetProjectInvitationsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetProjectInvitationsRequest_FieldPathSelectorNames ||
		fp.selector == BatchGetProjectInvitationsRequest_FieldPathSelectorFieldMask ||
		fp.selector == BatchGetProjectInvitationsRequest_FieldPathSelectorView
}

func (fp *BatchGetProjectInvitationsRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *BatchGetProjectInvitationsRequest_FieldTerminalPath) WithIValue(value interface{}) BatchGetProjectInvitationsRequest_FieldPathValue {
	switch fp.selector {
	case BatchGetProjectInvitationsRequest_FieldPathSelectorNames:
		return &BatchGetProjectInvitationsRequest_FieldTerminalPathValue{BatchGetProjectInvitationsRequest_FieldTerminalPath: *fp, value: value.([]*project_invitation.Reference)}
	case BatchGetProjectInvitationsRequest_FieldPathSelectorFieldMask:
		return &BatchGetProjectInvitationsRequest_FieldTerminalPathValue{BatchGetProjectInvitationsRequest_FieldTerminalPath: *fp, value: value.(*project_invitation.ProjectInvitation_FieldMask)}
	case BatchGetProjectInvitationsRequest_FieldPathSelectorView:
		return &BatchGetProjectInvitationsRequest_FieldTerminalPathValue{BatchGetProjectInvitationsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProjectInvitationsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetProjectInvitationsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetProjectInvitationsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetProjectInvitationsRequest_FieldPathArrayOfValues {
	fpaov := &BatchGetProjectInvitationsRequest_FieldTerminalPathArrayOfValues{BatchGetProjectInvitationsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetProjectInvitationsRequest_FieldPathSelectorNames:
		return &BatchGetProjectInvitationsRequest_FieldTerminalPathArrayOfValues{BatchGetProjectInvitationsRequest_FieldTerminalPath: *fp, values: values.([][]*project_invitation.Reference)}
	case BatchGetProjectInvitationsRequest_FieldPathSelectorFieldMask:
		return &BatchGetProjectInvitationsRequest_FieldTerminalPathArrayOfValues{BatchGetProjectInvitationsRequest_FieldTerminalPath: *fp, values: values.([]*project_invitation.ProjectInvitation_FieldMask)}
	case BatchGetProjectInvitationsRequest_FieldPathSelectorView:
		return &BatchGetProjectInvitationsRequest_FieldTerminalPathArrayOfValues{BatchGetProjectInvitationsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProjectInvitationsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetProjectInvitationsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetProjectInvitationsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetProjectInvitationsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetProjectInvitationsRequest_FieldPathSelectorNames:
		return &BatchGetProjectInvitationsRequest_FieldTerminalPathArrayItemValue{BatchGetProjectInvitationsRequest_FieldTerminalPath: *fp, value: value.(*project_invitation.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProjectInvitationsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetProjectInvitationsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// BatchGetProjectInvitationsRequest_FieldPathValue allows storing values for BatchGetProjectInvitationsRequest fields according to their type
type BatchGetProjectInvitationsRequest_FieldPathValue interface {
	BatchGetProjectInvitationsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetProjectInvitationsRequest)
	CompareWith(*BatchGetProjectInvitationsRequest) (cmp int, comparable bool)
}

func ParseBatchGetProjectInvitationsRequest_FieldPathValue(pathStr, valueStr string) (BatchGetProjectInvitationsRequest_FieldPathValue, error) {
	fp, err := ParseBatchGetProjectInvitationsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetProjectInvitationsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetProjectInvitationsRequest_FieldPathValue), nil
}

func MustParseBatchGetProjectInvitationsRequest_FieldPathValue(pathStr, valueStr string) BatchGetProjectInvitationsRequest_FieldPathValue {
	fpv, err := ParseBatchGetProjectInvitationsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetProjectInvitationsRequest_FieldTerminalPathValue struct {
	BatchGetProjectInvitationsRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetProjectInvitationsRequest_FieldPathValue = (*BatchGetProjectInvitationsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetProjectInvitationsRequest' as interface{}
func (fpv *BatchGetProjectInvitationsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetProjectInvitationsRequest_FieldTerminalPathValue) AsNamesValue() ([]*project_invitation.Reference, bool) {
	res, ok := fpv.value.([]*project_invitation.Reference)
	return res, ok
}
func (fpv *BatchGetProjectInvitationsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*project_invitation.ProjectInvitation_FieldMask, bool) {
	res, ok := fpv.value.(*project_invitation.ProjectInvitation_FieldMask)
	return res, ok
}
func (fpv *BatchGetProjectInvitationsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetProjectInvitationsRequest
func (fpv *BatchGetProjectInvitationsRequest_FieldTerminalPathValue) SetTo(target **BatchGetProjectInvitationsRequest) {
	if *target == nil {
		*target = new(BatchGetProjectInvitationsRequest)
	}
	switch fpv.selector {
	case BatchGetProjectInvitationsRequest_FieldPathSelectorNames:
		(*target).Names = fpv.value.([]*project_invitation.Reference)
	case BatchGetProjectInvitationsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*project_invitation.ProjectInvitation_FieldMask)
	case BatchGetProjectInvitationsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProjectInvitationsRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetProjectInvitationsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetProjectInvitationsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetProjectInvitationsRequest_FieldTerminalPathValue' with the value under path in 'BatchGetProjectInvitationsRequest'.
func (fpv *BatchGetProjectInvitationsRequest_FieldTerminalPathValue) CompareWith(source *BatchGetProjectInvitationsRequest) (int, bool) {
	switch fpv.selector {
	case BatchGetProjectInvitationsRequest_FieldPathSelectorNames:
		return 0, false
	case BatchGetProjectInvitationsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case BatchGetProjectInvitationsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProjectInvitationsRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetProjectInvitationsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetProjectInvitationsRequest))
}

// BatchGetProjectInvitationsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetProjectInvitationsRequest according to their type
// Present only for array (repeated) types.
type BatchGetProjectInvitationsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetProjectInvitationsRequest_FieldPath
	ContainsValue(*BatchGetProjectInvitationsRequest) bool
}

// ParseBatchGetProjectInvitationsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetProjectInvitationsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetProjectInvitationsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetProjectInvitationsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetProjectInvitationsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetProjectInvitationsRequest_FieldPathArrayItemValue), nil
}

func MustParseBatchGetProjectInvitationsRequest_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetProjectInvitationsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetProjectInvitationsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetProjectInvitationsRequest_FieldTerminalPathArrayItemValue struct {
	BatchGetProjectInvitationsRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetProjectInvitationsRequest_FieldPathArrayItemValue = (*BatchGetProjectInvitationsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetProjectInvitationsRequest as interface{}
func (fpaiv *BatchGetProjectInvitationsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetProjectInvitationsRequest_FieldTerminalPathArrayItemValue) AsNamesItemValue() (*project_invitation.Reference, bool) {
	res, ok := fpaiv.value.(*project_invitation.Reference)
	return res, ok
}

func (fpaiv *BatchGetProjectInvitationsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetProjectInvitationsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetProjectInvitationsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetProjectInvitationsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetProjectInvitationsRequest'
func (fpaiv *BatchGetProjectInvitationsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetProjectInvitationsRequest) bool {
	slice := fpaiv.BatchGetProjectInvitationsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// BatchGetProjectInvitationsRequest_FieldPathArrayOfValues allows storing slice of values for BatchGetProjectInvitationsRequest fields according to their type
type BatchGetProjectInvitationsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetProjectInvitationsRequest_FieldPath
}

func ParseBatchGetProjectInvitationsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetProjectInvitationsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetProjectInvitationsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetProjectInvitationsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetProjectInvitationsRequest_FieldPathArrayOfValues), nil
}

func MustParseBatchGetProjectInvitationsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetProjectInvitationsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetProjectInvitationsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetProjectInvitationsRequest_FieldTerminalPathArrayOfValues struct {
	BatchGetProjectInvitationsRequest_FieldTerminalPath
	values interface{}
}

var _ BatchGetProjectInvitationsRequest_FieldPathArrayOfValues = (*BatchGetProjectInvitationsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetProjectInvitationsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetProjectInvitationsRequest_FieldPathSelectorNames:
		for _, v := range fpaov.values.([][]*project_invitation.Reference) {
			values = append(values, v)
		}
	case BatchGetProjectInvitationsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*project_invitation.ProjectInvitation_FieldMask) {
			values = append(values, v)
		}
	case BatchGetProjectInvitationsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetProjectInvitationsRequest_FieldTerminalPathArrayOfValues) AsNamesArrayOfValues() ([][]*project_invitation.Reference, bool) {
	res, ok := fpaov.values.([][]*project_invitation.Reference)
	return res, ok
}
func (fpaov *BatchGetProjectInvitationsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*project_invitation.ProjectInvitation_FieldMask, bool) {
	res, ok := fpaov.values.([]*project_invitation.ProjectInvitation_FieldMask)
	return res, ok
}
func (fpaov *BatchGetProjectInvitationsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetProjectInvitationsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetProjectInvitationsResponse_FieldPathSelector
	Get(source *BatchGetProjectInvitationsResponse) []interface{}
	GetSingle(source *BatchGetProjectInvitationsResponse) (interface{}, bool)
	ClearValue(item *BatchGetProjectInvitationsResponse)

	// Those methods build corresponding BatchGetProjectInvitationsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetProjectInvitationsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetProjectInvitationsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetProjectInvitationsResponse_FieldPathArrayItemValue
}

type BatchGetProjectInvitationsResponse_FieldPathSelector int32

const (
	BatchGetProjectInvitationsResponse_FieldPathSelectorProjectInvitations BatchGetProjectInvitationsResponse_FieldPathSelector = 0
	BatchGetProjectInvitationsResponse_FieldPathSelectorMissing            BatchGetProjectInvitationsResponse_FieldPathSelector = 1
)

func (s BatchGetProjectInvitationsResponse_FieldPathSelector) String() string {
	switch s {
	case BatchGetProjectInvitationsResponse_FieldPathSelectorProjectInvitations:
		return "project_invitations"
	case BatchGetProjectInvitationsResponse_FieldPathSelectorMissing:
		return "missing"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProjectInvitationsResponse: %d", s))
	}
}

func BuildBatchGetProjectInvitationsResponse_FieldPath(fp gotenobject.RawFieldPath) (BatchGetProjectInvitationsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetProjectInvitationsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "project_invitations", "projectInvitations", "project-invitations":
			return &BatchGetProjectInvitationsResponse_FieldTerminalPath{selector: BatchGetProjectInvitationsResponse_FieldPathSelectorProjectInvitations}, nil
		case "missing":
			return &BatchGetProjectInvitationsResponse_FieldTerminalPath{selector: BatchGetProjectInvitationsResponse_FieldPathSelectorMissing}, nil
		}
	} else {
		switch fp[0] {
		case "project_invitations", "projectInvitations", "project-invitations":
			if subpath, err := project_invitation.BuildProjectInvitation_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &BatchGetProjectInvitationsResponse_FieldSubPath{selector: BatchGetProjectInvitationsResponse_FieldPathSelectorProjectInvitations, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetProjectInvitationsResponse", fp)
}

func ParseBatchGetProjectInvitationsResponse_FieldPath(rawField string) (BatchGetProjectInvitationsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetProjectInvitationsResponse_FieldPath(fp)
}

func MustParseBatchGetProjectInvitationsResponse_FieldPath(rawField string) BatchGetProjectInvitationsResponse_FieldPath {
	fp, err := ParseBatchGetProjectInvitationsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetProjectInvitationsResponse_FieldTerminalPath struct {
	selector BatchGetProjectInvitationsResponse_FieldPathSelector
}

var _ BatchGetProjectInvitationsResponse_FieldPath = (*BatchGetProjectInvitationsResponse_FieldTerminalPath)(nil)

func (fp *BatchGetProjectInvitationsResponse_FieldTerminalPath) Selector() BatchGetProjectInvitationsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetProjectInvitationsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetProjectInvitationsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetProjectInvitationsResponse
func (fp *BatchGetProjectInvitationsResponse_FieldTerminalPath) Get(source *BatchGetProjectInvitationsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetProjectInvitationsResponse_FieldPathSelectorProjectInvitations:
			for _, value := range source.GetProjectInvitations() {
				values = append(values, value)
			}
		case BatchGetProjectInvitationsResponse_FieldPathSelectorMissing:
			for _, value := range source.GetMissing() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetProjectInvitationsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetProjectInvitationsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetProjectInvitationsResponse))
}

// GetSingle returns value pointed by specific field of from source BatchGetProjectInvitationsResponse
func (fp *BatchGetProjectInvitationsResponse_FieldTerminalPath) GetSingle(source *BatchGetProjectInvitationsResponse) (interface{}, bool) {
	switch fp.selector {
	case BatchGetProjectInvitationsResponse_FieldPathSelectorProjectInvitations:
		res := source.GetProjectInvitations()
		return res, res != nil
	case BatchGetProjectInvitationsResponse_FieldPathSelectorMissing:
		res := source.GetMissing()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProjectInvitationsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetProjectInvitationsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetProjectInvitationsResponse))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetProjectInvitationsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetProjectInvitationsResponse_FieldPathSelectorProjectInvitations:
		return ([]*project_invitation.ProjectInvitation)(nil)
	case BatchGetProjectInvitationsResponse_FieldPathSelectorMissing:
		return ([]*project_invitation.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProjectInvitationsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetProjectInvitationsResponse_FieldTerminalPath) ClearValue(item *BatchGetProjectInvitationsResponse) {
	if item != nil {
		switch fp.selector {
		case BatchGetProjectInvitationsResponse_FieldPathSelectorProjectInvitations:
			item.ProjectInvitations = nil
		case BatchGetProjectInvitationsResponse_FieldPathSelectorMissing:
			item.Missing = nil
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetProjectInvitationsResponse: %d", fp.selector))
		}
	}
}

func (fp *BatchGetProjectInvitationsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetProjectInvitationsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetProjectInvitationsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetProjectInvitationsResponse_FieldPathSelectorMissing
}

func (fp *BatchGetProjectInvitationsResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *BatchGetProjectInvitationsResponse_FieldTerminalPath) WithIValue(value interface{}) BatchGetProjectInvitationsResponse_FieldPathValue {
	switch fp.selector {
	case BatchGetProjectInvitationsResponse_FieldPathSelectorProjectInvitations:
		return &BatchGetProjectInvitationsResponse_FieldTerminalPathValue{BatchGetProjectInvitationsResponse_FieldTerminalPath: *fp, value: value.([]*project_invitation.ProjectInvitation)}
	case BatchGetProjectInvitationsResponse_FieldPathSelectorMissing:
		return &BatchGetProjectInvitationsResponse_FieldTerminalPathValue{BatchGetProjectInvitationsResponse_FieldTerminalPath: *fp, value: value.([]*project_invitation.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProjectInvitationsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetProjectInvitationsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetProjectInvitationsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetProjectInvitationsResponse_FieldPathArrayOfValues {
	fpaov := &BatchGetProjectInvitationsResponse_FieldTerminalPathArrayOfValues{BatchGetProjectInvitationsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetProjectInvitationsResponse_FieldPathSelectorProjectInvitations:
		return &BatchGetProjectInvitationsResponse_FieldTerminalPathArrayOfValues{BatchGetProjectInvitationsResponse_FieldTerminalPath: *fp, values: values.([][]*project_invitation.ProjectInvitation)}
	case BatchGetProjectInvitationsResponse_FieldPathSelectorMissing:
		return &BatchGetProjectInvitationsResponse_FieldTerminalPathArrayOfValues{BatchGetProjectInvitationsResponse_FieldTerminalPath: *fp, values: values.([][]*project_invitation.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProjectInvitationsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetProjectInvitationsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetProjectInvitationsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetProjectInvitationsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetProjectInvitationsResponse_FieldPathSelectorProjectInvitations:
		return &BatchGetProjectInvitationsResponse_FieldTerminalPathArrayItemValue{BatchGetProjectInvitationsResponse_FieldTerminalPath: *fp, value: value.(*project_invitation.ProjectInvitation)}
	case BatchGetProjectInvitationsResponse_FieldPathSelectorMissing:
		return &BatchGetProjectInvitationsResponse_FieldTerminalPathArrayItemValue{BatchGetProjectInvitationsResponse_FieldTerminalPath: *fp, value: value.(*project_invitation.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProjectInvitationsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetProjectInvitationsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type BatchGetProjectInvitationsResponse_FieldSubPath struct {
	selector BatchGetProjectInvitationsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ BatchGetProjectInvitationsResponse_FieldPath = (*BatchGetProjectInvitationsResponse_FieldSubPath)(nil)

func (fps *BatchGetProjectInvitationsResponse_FieldSubPath) Selector() BatchGetProjectInvitationsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *BatchGetProjectInvitationsResponse_FieldSubPath) AsProjectInvitationsSubPath() (project_invitation.ProjectInvitation_FieldPath, bool) {
	res, ok := fps.subPath.(project_invitation.ProjectInvitation_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *BatchGetProjectInvitationsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *BatchGetProjectInvitationsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source BatchGetProjectInvitationsResponse
func (fps *BatchGetProjectInvitationsResponse_FieldSubPath) Get(source *BatchGetProjectInvitationsResponse) (values []interface{}) {
	switch fps.selector {
	case BatchGetProjectInvitationsResponse_FieldPathSelectorProjectInvitations:
		for _, item := range source.GetProjectInvitations() {
			values = append(values, fps.subPath.GetRaw(item)...)
		}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProjectInvitationsResponse: %d", fps.selector))
	}
	return
}

func (fps *BatchGetProjectInvitationsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*BatchGetProjectInvitationsResponse))
}

// GetSingle returns value of selected field from source BatchGetProjectInvitationsResponse
func (fps *BatchGetProjectInvitationsResponse_FieldSubPath) GetSingle(source *BatchGetProjectInvitationsResponse) (interface{}, bool) {
	switch fps.selector {
	case BatchGetProjectInvitationsResponse_FieldPathSelectorProjectInvitations:
		if len(source.GetProjectInvitations()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetProjectInvitations()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProjectInvitationsResponse: %d", fps.selector))
	}
}

func (fps *BatchGetProjectInvitationsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*BatchGetProjectInvitationsResponse))
}

// GetDefault returns a default value of the field type
func (fps *BatchGetProjectInvitationsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *BatchGetProjectInvitationsResponse_FieldSubPath) ClearValue(item *BatchGetProjectInvitationsResponse) {
	if item != nil {
		switch fps.selector {
		case BatchGetProjectInvitationsResponse_FieldPathSelectorProjectInvitations:
			for _, subItem := range item.ProjectInvitations {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetProjectInvitationsResponse: %d", fps.selector))
		}
	}
}

func (fps *BatchGetProjectInvitationsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*BatchGetProjectInvitationsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *BatchGetProjectInvitationsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *BatchGetProjectInvitationsResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&BatchGetProjectInvitationsResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *BatchGetProjectInvitationsResponse_FieldSubPath) WithIValue(value interface{}) BatchGetProjectInvitationsResponse_FieldPathValue {
	return &BatchGetProjectInvitationsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *BatchGetProjectInvitationsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *BatchGetProjectInvitationsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) BatchGetProjectInvitationsResponse_FieldPathArrayOfValues {
	return &BatchGetProjectInvitationsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *BatchGetProjectInvitationsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *BatchGetProjectInvitationsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) BatchGetProjectInvitationsResponse_FieldPathArrayItemValue {
	return &BatchGetProjectInvitationsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *BatchGetProjectInvitationsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// BatchGetProjectInvitationsResponse_FieldPathValue allows storing values for BatchGetProjectInvitationsResponse fields according to their type
type BatchGetProjectInvitationsResponse_FieldPathValue interface {
	BatchGetProjectInvitationsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetProjectInvitationsResponse)
	CompareWith(*BatchGetProjectInvitationsResponse) (cmp int, comparable bool)
}

func ParseBatchGetProjectInvitationsResponse_FieldPathValue(pathStr, valueStr string) (BatchGetProjectInvitationsResponse_FieldPathValue, error) {
	fp, err := ParseBatchGetProjectInvitationsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetProjectInvitationsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetProjectInvitationsResponse_FieldPathValue), nil
}

func MustParseBatchGetProjectInvitationsResponse_FieldPathValue(pathStr, valueStr string) BatchGetProjectInvitationsResponse_FieldPathValue {
	fpv, err := ParseBatchGetProjectInvitationsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetProjectInvitationsResponse_FieldTerminalPathValue struct {
	BatchGetProjectInvitationsResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetProjectInvitationsResponse_FieldPathValue = (*BatchGetProjectInvitationsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetProjectInvitationsResponse' as interface{}
func (fpv *BatchGetProjectInvitationsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetProjectInvitationsResponse_FieldTerminalPathValue) AsProjectInvitationsValue() ([]*project_invitation.ProjectInvitation, bool) {
	res, ok := fpv.value.([]*project_invitation.ProjectInvitation)
	return res, ok
}
func (fpv *BatchGetProjectInvitationsResponse_FieldTerminalPathValue) AsMissingValue() ([]*project_invitation.Reference, bool) {
	res, ok := fpv.value.([]*project_invitation.Reference)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetProjectInvitationsResponse
func (fpv *BatchGetProjectInvitationsResponse_FieldTerminalPathValue) SetTo(target **BatchGetProjectInvitationsResponse) {
	if *target == nil {
		*target = new(BatchGetProjectInvitationsResponse)
	}
	switch fpv.selector {
	case BatchGetProjectInvitationsResponse_FieldPathSelectorProjectInvitations:
		(*target).ProjectInvitations = fpv.value.([]*project_invitation.ProjectInvitation)
	case BatchGetProjectInvitationsResponse_FieldPathSelectorMissing:
		(*target).Missing = fpv.value.([]*project_invitation.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProjectInvitationsResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetProjectInvitationsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetProjectInvitationsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetProjectInvitationsResponse_FieldTerminalPathValue' with the value under path in 'BatchGetProjectInvitationsResponse'.
func (fpv *BatchGetProjectInvitationsResponse_FieldTerminalPathValue) CompareWith(source *BatchGetProjectInvitationsResponse) (int, bool) {
	switch fpv.selector {
	case BatchGetProjectInvitationsResponse_FieldPathSelectorProjectInvitations:
		return 0, false
	case BatchGetProjectInvitationsResponse_FieldPathSelectorMissing:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProjectInvitationsResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetProjectInvitationsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetProjectInvitationsResponse))
}

type BatchGetProjectInvitationsResponse_FieldSubPathValue struct {
	BatchGetProjectInvitationsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ BatchGetProjectInvitationsResponse_FieldPathValue = (*BatchGetProjectInvitationsResponse_FieldSubPathValue)(nil)

func (fpvs *BatchGetProjectInvitationsResponse_FieldSubPathValue) AsProjectInvitationsPathValue() (project_invitation.ProjectInvitation_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(project_invitation.ProjectInvitation_FieldPathValue)
	return res, ok
}

func (fpvs *BatchGetProjectInvitationsResponse_FieldSubPathValue) SetTo(target **BatchGetProjectInvitationsResponse) {
	if *target == nil {
		*target = new(BatchGetProjectInvitationsResponse)
	}
	switch fpvs.Selector() {
	case BatchGetProjectInvitationsResponse_FieldPathSelectorProjectInvitations:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProjectInvitationsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetProjectInvitationsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetProjectInvitationsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *BatchGetProjectInvitationsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *BatchGetProjectInvitationsResponse_FieldSubPathValue) CompareWith(source *BatchGetProjectInvitationsResponse) (int, bool) {
	switch fpvs.Selector() {
	case BatchGetProjectInvitationsResponse_FieldPathSelectorProjectInvitations:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProjectInvitationsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetProjectInvitationsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*BatchGetProjectInvitationsResponse))
}

// BatchGetProjectInvitationsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetProjectInvitationsResponse according to their type
// Present only for array (repeated) types.
type BatchGetProjectInvitationsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetProjectInvitationsResponse_FieldPath
	ContainsValue(*BatchGetProjectInvitationsResponse) bool
}

// ParseBatchGetProjectInvitationsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetProjectInvitationsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetProjectInvitationsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetProjectInvitationsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetProjectInvitationsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetProjectInvitationsResponse_FieldPathArrayItemValue), nil
}

func MustParseBatchGetProjectInvitationsResponse_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetProjectInvitationsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetProjectInvitationsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetProjectInvitationsResponse_FieldTerminalPathArrayItemValue struct {
	BatchGetProjectInvitationsResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetProjectInvitationsResponse_FieldPathArrayItemValue = (*BatchGetProjectInvitationsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetProjectInvitationsResponse as interface{}
func (fpaiv *BatchGetProjectInvitationsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetProjectInvitationsResponse_FieldTerminalPathArrayItemValue) AsProjectInvitationsItemValue() (*project_invitation.ProjectInvitation, bool) {
	res, ok := fpaiv.value.(*project_invitation.ProjectInvitation)
	return res, ok
}
func (fpaiv *BatchGetProjectInvitationsResponse_FieldTerminalPathArrayItemValue) AsMissingItemValue() (*project_invitation.Reference, bool) {
	res, ok := fpaiv.value.(*project_invitation.Reference)
	return res, ok
}

func (fpaiv *BatchGetProjectInvitationsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetProjectInvitationsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetProjectInvitationsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetProjectInvitationsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetProjectInvitationsResponse'
func (fpaiv *BatchGetProjectInvitationsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetProjectInvitationsResponse) bool {
	slice := fpaiv.BatchGetProjectInvitationsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type BatchGetProjectInvitationsResponse_FieldSubPathArrayItemValue struct {
	BatchGetProjectInvitationsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *BatchGetProjectInvitationsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *BatchGetProjectInvitationsResponse_FieldSubPathArrayItemValue) AsProjectInvitationsPathItemValue() (project_invitation.ProjectInvitation_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(project_invitation.ProjectInvitation_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetProjectInvitationsResponse'
func (fpaivs *BatchGetProjectInvitationsResponse_FieldSubPathArrayItemValue) ContainsValue(source *BatchGetProjectInvitationsResponse) bool {
	switch fpaivs.Selector() {
	case BatchGetProjectInvitationsResponse_FieldPathSelectorProjectInvitations:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProjectInvitationsResponse: %d", fpaivs.Selector()))
	}
}

// BatchGetProjectInvitationsResponse_FieldPathArrayOfValues allows storing slice of values for BatchGetProjectInvitationsResponse fields according to their type
type BatchGetProjectInvitationsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetProjectInvitationsResponse_FieldPath
}

func ParseBatchGetProjectInvitationsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetProjectInvitationsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetProjectInvitationsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetProjectInvitationsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetProjectInvitationsResponse_FieldPathArrayOfValues), nil
}

func MustParseBatchGetProjectInvitationsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetProjectInvitationsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetProjectInvitationsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetProjectInvitationsResponse_FieldTerminalPathArrayOfValues struct {
	BatchGetProjectInvitationsResponse_FieldTerminalPath
	values interface{}
}

var _ BatchGetProjectInvitationsResponse_FieldPathArrayOfValues = (*BatchGetProjectInvitationsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetProjectInvitationsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetProjectInvitationsResponse_FieldPathSelectorProjectInvitations:
		for _, v := range fpaov.values.([][]*project_invitation.ProjectInvitation) {
			values = append(values, v)
		}
	case BatchGetProjectInvitationsResponse_FieldPathSelectorMissing:
		for _, v := range fpaov.values.([][]*project_invitation.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetProjectInvitationsResponse_FieldTerminalPathArrayOfValues) AsProjectInvitationsArrayOfValues() ([][]*project_invitation.ProjectInvitation, bool) {
	res, ok := fpaov.values.([][]*project_invitation.ProjectInvitation)
	return res, ok
}
func (fpaov *BatchGetProjectInvitationsResponse_FieldTerminalPathArrayOfValues) AsMissingArrayOfValues() ([][]*project_invitation.Reference, bool) {
	res, ok := fpaov.values.([][]*project_invitation.Reference)
	return res, ok
}

type BatchGetProjectInvitationsResponse_FieldSubPathArrayOfValues struct {
	BatchGetProjectInvitationsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ BatchGetProjectInvitationsResponse_FieldPathArrayOfValues = (*BatchGetProjectInvitationsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *BatchGetProjectInvitationsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *BatchGetProjectInvitationsResponse_FieldSubPathArrayOfValues) AsProjectInvitationsPathArrayOfValues() (project_invitation.ProjectInvitation_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(project_invitation.ProjectInvitation_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListProjectInvitationsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListProjectInvitationsRequest_FieldPathSelector
	Get(source *ListProjectInvitationsRequest) []interface{}
	GetSingle(source *ListProjectInvitationsRequest) (interface{}, bool)
	ClearValue(item *ListProjectInvitationsRequest)

	// Those methods build corresponding ListProjectInvitationsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListProjectInvitationsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ListProjectInvitationsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListProjectInvitationsRequest_FieldPathArrayItemValue
}

type ListProjectInvitationsRequest_FieldPathSelector int32

const (
	ListProjectInvitationsRequest_FieldPathSelectorParent            ListProjectInvitationsRequest_FieldPathSelector = 0
	ListProjectInvitationsRequest_FieldPathSelectorPageSize          ListProjectInvitationsRequest_FieldPathSelector = 1
	ListProjectInvitationsRequest_FieldPathSelectorPageToken         ListProjectInvitationsRequest_FieldPathSelector = 2
	ListProjectInvitationsRequest_FieldPathSelectorOrderBy           ListProjectInvitationsRequest_FieldPathSelector = 3
	ListProjectInvitationsRequest_FieldPathSelectorFilter            ListProjectInvitationsRequest_FieldPathSelector = 4
	ListProjectInvitationsRequest_FieldPathSelectorFieldMask         ListProjectInvitationsRequest_FieldPathSelector = 5
	ListProjectInvitationsRequest_FieldPathSelectorView              ListProjectInvitationsRequest_FieldPathSelector = 6
	ListProjectInvitationsRequest_FieldPathSelectorIncludePagingInfo ListProjectInvitationsRequest_FieldPathSelector = 7
)

func (s ListProjectInvitationsRequest_FieldPathSelector) String() string {
	switch s {
	case ListProjectInvitationsRequest_FieldPathSelectorParent:
		return "parent"
	case ListProjectInvitationsRequest_FieldPathSelectorPageSize:
		return "page_size"
	case ListProjectInvitationsRequest_FieldPathSelectorPageToken:
		return "page_token"
	case ListProjectInvitationsRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case ListProjectInvitationsRequest_FieldPathSelectorFilter:
		return "filter"
	case ListProjectInvitationsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case ListProjectInvitationsRequest_FieldPathSelectorView:
		return "view"
	case ListProjectInvitationsRequest_FieldPathSelectorIncludePagingInfo:
		return "include_paging_info"
	default:
		panic(fmt.Sprintf("Invalid selector for ListProjectInvitationsRequest: %d", s))
	}
}

func BuildListProjectInvitationsRequest_FieldPath(fp gotenobject.RawFieldPath) (ListProjectInvitationsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListProjectInvitationsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &ListProjectInvitationsRequest_FieldTerminalPath{selector: ListProjectInvitationsRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &ListProjectInvitationsRequest_FieldTerminalPath{selector: ListProjectInvitationsRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &ListProjectInvitationsRequest_FieldTerminalPath{selector: ListProjectInvitationsRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &ListProjectInvitationsRequest_FieldTerminalPath{selector: ListProjectInvitationsRequest_FieldPathSelectorOrderBy}, nil
		case "filter":
			return &ListProjectInvitationsRequest_FieldTerminalPath{selector: ListProjectInvitationsRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &ListProjectInvitationsRequest_FieldTerminalPath{selector: ListProjectInvitationsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &ListProjectInvitationsRequest_FieldTerminalPath{selector: ListProjectInvitationsRequest_FieldPathSelectorView}, nil
		case "include_paging_info", "includePagingInfo", "include-paging-info":
			return &ListProjectInvitationsRequest_FieldTerminalPath{selector: ListProjectInvitationsRequest_FieldPathSelectorIncludePagingInfo}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListProjectInvitationsRequest", fp)
}

func ParseListProjectInvitationsRequest_FieldPath(rawField string) (ListProjectInvitationsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListProjectInvitationsRequest_FieldPath(fp)
}

func MustParseListProjectInvitationsRequest_FieldPath(rawField string) ListProjectInvitationsRequest_FieldPath {
	fp, err := ParseListProjectInvitationsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListProjectInvitationsRequest_FieldTerminalPath struct {
	selector ListProjectInvitationsRequest_FieldPathSelector
}

var _ ListProjectInvitationsRequest_FieldPath = (*ListProjectInvitationsRequest_FieldTerminalPath)(nil)

func (fp *ListProjectInvitationsRequest_FieldTerminalPath) Selector() ListProjectInvitationsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListProjectInvitationsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListProjectInvitationsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListProjectInvitationsRequest
func (fp *ListProjectInvitationsRequest_FieldTerminalPath) Get(source *ListProjectInvitationsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListProjectInvitationsRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case ListProjectInvitationsRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case ListProjectInvitationsRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case ListProjectInvitationsRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case ListProjectInvitationsRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case ListProjectInvitationsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case ListProjectInvitationsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		case ListProjectInvitationsRequest_FieldPathSelectorIncludePagingInfo:
			values = append(values, source.IncludePagingInfo)
		default:
			panic(fmt.Sprintf("Invalid selector for ListProjectInvitationsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ListProjectInvitationsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListProjectInvitationsRequest))
}

// GetSingle returns value pointed by specific field of from source ListProjectInvitationsRequest
func (fp *ListProjectInvitationsRequest_FieldTerminalPath) GetSingle(source *ListProjectInvitationsRequest) (interface{}, bool) {
	switch fp.selector {
	case ListProjectInvitationsRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case ListProjectInvitationsRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case ListProjectInvitationsRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case ListProjectInvitationsRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case ListProjectInvitationsRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case ListProjectInvitationsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case ListProjectInvitationsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	case ListProjectInvitationsRequest_FieldPathSelectorIncludePagingInfo:
		return source.GetIncludePagingInfo(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListProjectInvitationsRequest: %d", fp.selector))
	}
}

func (fp *ListProjectInvitationsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListProjectInvitationsRequest))
}

// GetDefault returns a default value of the field type
func (fp *ListProjectInvitationsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListProjectInvitationsRequest_FieldPathSelectorParent:
		return (*project_invitation.ParentName)(nil)
	case ListProjectInvitationsRequest_FieldPathSelectorPageSize:
		return int32(0)
	case ListProjectInvitationsRequest_FieldPathSelectorPageToken:
		return (*project_invitation.PagerCursor)(nil)
	case ListProjectInvitationsRequest_FieldPathSelectorOrderBy:
		return (*project_invitation.OrderBy)(nil)
	case ListProjectInvitationsRequest_FieldPathSelectorFilter:
		return (*project_invitation.Filter)(nil)
	case ListProjectInvitationsRequest_FieldPathSelectorFieldMask:
		return (*project_invitation.ProjectInvitation_FieldMask)(nil)
	case ListProjectInvitationsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	case ListProjectInvitationsRequest_FieldPathSelectorIncludePagingInfo:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for ListProjectInvitationsRequest: %d", fp.selector))
	}
}

func (fp *ListProjectInvitationsRequest_FieldTerminalPath) ClearValue(item *ListProjectInvitationsRequest) {
	if item != nil {
		switch fp.selector {
		case ListProjectInvitationsRequest_FieldPathSelectorParent:
			item.Parent = nil
		case ListProjectInvitationsRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case ListProjectInvitationsRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case ListProjectInvitationsRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case ListProjectInvitationsRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case ListProjectInvitationsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case ListProjectInvitationsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		case ListProjectInvitationsRequest_FieldPathSelectorIncludePagingInfo:
			item.IncludePagingInfo = false
		default:
			panic(fmt.Sprintf("Invalid selector for ListProjectInvitationsRequest: %d", fp.selector))
		}
	}
}

func (fp *ListProjectInvitationsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListProjectInvitationsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListProjectInvitationsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListProjectInvitationsRequest_FieldPathSelectorParent ||
		fp.selector == ListProjectInvitationsRequest_FieldPathSelectorPageSize ||
		fp.selector == ListProjectInvitationsRequest_FieldPathSelectorPageToken ||
		fp.selector == ListProjectInvitationsRequest_FieldPathSelectorOrderBy ||
		fp.selector == ListProjectInvitationsRequest_FieldPathSelectorFilter ||
		fp.selector == ListProjectInvitationsRequest_FieldPathSelectorFieldMask ||
		fp.selector == ListProjectInvitationsRequest_FieldPathSelectorView ||
		fp.selector == ListProjectInvitationsRequest_FieldPathSelectorIncludePagingInfo
}

func (fp *ListProjectInvitationsRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ListProjectInvitationsRequest_FieldTerminalPath) WithIValue(value interface{}) ListProjectInvitationsRequest_FieldPathValue {
	switch fp.selector {
	case ListProjectInvitationsRequest_FieldPathSelectorParent:
		return &ListProjectInvitationsRequest_FieldTerminalPathValue{ListProjectInvitationsRequest_FieldTerminalPath: *fp, value: value.(*project_invitation.ParentName)}
	case ListProjectInvitationsRequest_FieldPathSelectorPageSize:
		return &ListProjectInvitationsRequest_FieldTerminalPathValue{ListProjectInvitationsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case ListProjectInvitationsRequest_FieldPathSelectorPageToken:
		return &ListProjectInvitationsRequest_FieldTerminalPathValue{ListProjectInvitationsRequest_FieldTerminalPath: *fp, value: value.(*project_invitation.PagerCursor)}
	case ListProjectInvitationsRequest_FieldPathSelectorOrderBy:
		return &ListProjectInvitationsRequest_FieldTerminalPathValue{ListProjectInvitationsRequest_FieldTerminalPath: *fp, value: value.(*project_invitation.OrderBy)}
	case ListProjectInvitationsRequest_FieldPathSelectorFilter:
		return &ListProjectInvitationsRequest_FieldTerminalPathValue{ListProjectInvitationsRequest_FieldTerminalPath: *fp, value: value.(*project_invitation.Filter)}
	case ListProjectInvitationsRequest_FieldPathSelectorFieldMask:
		return &ListProjectInvitationsRequest_FieldTerminalPathValue{ListProjectInvitationsRequest_FieldTerminalPath: *fp, value: value.(*project_invitation.ProjectInvitation_FieldMask)}
	case ListProjectInvitationsRequest_FieldPathSelectorView:
		return &ListProjectInvitationsRequest_FieldTerminalPathValue{ListProjectInvitationsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	case ListProjectInvitationsRequest_FieldPathSelectorIncludePagingInfo:
		return &ListProjectInvitationsRequest_FieldTerminalPathValue{ListProjectInvitationsRequest_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListProjectInvitationsRequest: %d", fp.selector))
	}
}

func (fp *ListProjectInvitationsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListProjectInvitationsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListProjectInvitationsRequest_FieldPathArrayOfValues {
	fpaov := &ListProjectInvitationsRequest_FieldTerminalPathArrayOfValues{ListProjectInvitationsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListProjectInvitationsRequest_FieldPathSelectorParent:
		return &ListProjectInvitationsRequest_FieldTerminalPathArrayOfValues{ListProjectInvitationsRequest_FieldTerminalPath: *fp, values: values.([]*project_invitation.ParentName)}
	case ListProjectInvitationsRequest_FieldPathSelectorPageSize:
		return &ListProjectInvitationsRequest_FieldTerminalPathArrayOfValues{ListProjectInvitationsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case ListProjectInvitationsRequest_FieldPathSelectorPageToken:
		return &ListProjectInvitationsRequest_FieldTerminalPathArrayOfValues{ListProjectInvitationsRequest_FieldTerminalPath: *fp, values: values.([]*project_invitation.PagerCursor)}
	case ListProjectInvitationsRequest_FieldPathSelectorOrderBy:
		return &ListProjectInvitationsRequest_FieldTerminalPathArrayOfValues{ListProjectInvitationsRequest_FieldTerminalPath: *fp, values: values.([]*project_invitation.OrderBy)}
	case ListProjectInvitationsRequest_FieldPathSelectorFilter:
		return &ListProjectInvitationsRequest_FieldTerminalPathArrayOfValues{ListProjectInvitationsRequest_FieldTerminalPath: *fp, values: values.([]*project_invitation.Filter)}
	case ListProjectInvitationsRequest_FieldPathSelectorFieldMask:
		return &ListProjectInvitationsRequest_FieldTerminalPathArrayOfValues{ListProjectInvitationsRequest_FieldTerminalPath: *fp, values: values.([]*project_invitation.ProjectInvitation_FieldMask)}
	case ListProjectInvitationsRequest_FieldPathSelectorView:
		return &ListProjectInvitationsRequest_FieldTerminalPathArrayOfValues{ListProjectInvitationsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	case ListProjectInvitationsRequest_FieldPathSelectorIncludePagingInfo:
		return &ListProjectInvitationsRequest_FieldTerminalPathArrayOfValues{ListProjectInvitationsRequest_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListProjectInvitationsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListProjectInvitationsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListProjectInvitationsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListProjectInvitationsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ListProjectInvitationsRequest: %d", fp.selector))
	}
}

func (fp *ListProjectInvitationsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ListProjectInvitationsRequest_FieldPathValue allows storing values for ListProjectInvitationsRequest fields according to their type
type ListProjectInvitationsRequest_FieldPathValue interface {
	ListProjectInvitationsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListProjectInvitationsRequest)
	CompareWith(*ListProjectInvitationsRequest) (cmp int, comparable bool)
}

func ParseListProjectInvitationsRequest_FieldPathValue(pathStr, valueStr string) (ListProjectInvitationsRequest_FieldPathValue, error) {
	fp, err := ParseListProjectInvitationsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListProjectInvitationsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListProjectInvitationsRequest_FieldPathValue), nil
}

func MustParseListProjectInvitationsRequest_FieldPathValue(pathStr, valueStr string) ListProjectInvitationsRequest_FieldPathValue {
	fpv, err := ParseListProjectInvitationsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListProjectInvitationsRequest_FieldTerminalPathValue struct {
	ListProjectInvitationsRequest_FieldTerminalPath
	value interface{}
}

var _ ListProjectInvitationsRequest_FieldPathValue = (*ListProjectInvitationsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListProjectInvitationsRequest' as interface{}
func (fpv *ListProjectInvitationsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListProjectInvitationsRequest_FieldTerminalPathValue) AsParentValue() (*project_invitation.ParentName, bool) {
	res, ok := fpv.value.(*project_invitation.ParentName)
	return res, ok
}
func (fpv *ListProjectInvitationsRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *ListProjectInvitationsRequest_FieldTerminalPathValue) AsPageTokenValue() (*project_invitation.PagerCursor, bool) {
	res, ok := fpv.value.(*project_invitation.PagerCursor)
	return res, ok
}
func (fpv *ListProjectInvitationsRequest_FieldTerminalPathValue) AsOrderByValue() (*project_invitation.OrderBy, bool) {
	res, ok := fpv.value.(*project_invitation.OrderBy)
	return res, ok
}
func (fpv *ListProjectInvitationsRequest_FieldTerminalPathValue) AsFilterValue() (*project_invitation.Filter, bool) {
	res, ok := fpv.value.(*project_invitation.Filter)
	return res, ok
}
func (fpv *ListProjectInvitationsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*project_invitation.ProjectInvitation_FieldMask, bool) {
	res, ok := fpv.value.(*project_invitation.ProjectInvitation_FieldMask)
	return res, ok
}
func (fpv *ListProjectInvitationsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}
func (fpv *ListProjectInvitationsRequest_FieldTerminalPathValue) AsIncludePagingInfoValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object ListProjectInvitationsRequest
func (fpv *ListProjectInvitationsRequest_FieldTerminalPathValue) SetTo(target **ListProjectInvitationsRequest) {
	if *target == nil {
		*target = new(ListProjectInvitationsRequest)
	}
	switch fpv.selector {
	case ListProjectInvitationsRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*project_invitation.ParentName)
	case ListProjectInvitationsRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case ListProjectInvitationsRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*project_invitation.PagerCursor)
	case ListProjectInvitationsRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*project_invitation.OrderBy)
	case ListProjectInvitationsRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*project_invitation.Filter)
	case ListProjectInvitationsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*project_invitation.ProjectInvitation_FieldMask)
	case ListProjectInvitationsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	case ListProjectInvitationsRequest_FieldPathSelectorIncludePagingInfo:
		(*target).IncludePagingInfo = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for ListProjectInvitationsRequest: %d", fpv.selector))
	}
}

func (fpv *ListProjectInvitationsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListProjectInvitationsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListProjectInvitationsRequest_FieldTerminalPathValue' with the value under path in 'ListProjectInvitationsRequest'.
func (fpv *ListProjectInvitationsRequest_FieldTerminalPathValue) CompareWith(source *ListProjectInvitationsRequest) (int, bool) {
	switch fpv.selector {
	case ListProjectInvitationsRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*project_invitation.ParentName)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ListProjectInvitationsRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListProjectInvitationsRequest_FieldPathSelectorPageToken:
		return 0, false
	case ListProjectInvitationsRequest_FieldPathSelectorOrderBy:
		return 0, false
	case ListProjectInvitationsRequest_FieldPathSelectorFilter:
		return 0, false
	case ListProjectInvitationsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case ListProjectInvitationsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListProjectInvitationsRequest_FieldPathSelectorIncludePagingInfo:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIncludePagingInfo()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListProjectInvitationsRequest: %d", fpv.selector))
	}
}

func (fpv *ListProjectInvitationsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListProjectInvitationsRequest))
}

// ListProjectInvitationsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for ListProjectInvitationsRequest according to their type
// Present only for array (repeated) types.
type ListProjectInvitationsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListProjectInvitationsRequest_FieldPath
	ContainsValue(*ListProjectInvitationsRequest) bool
}

// ParseListProjectInvitationsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListProjectInvitationsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ListProjectInvitationsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseListProjectInvitationsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListProjectInvitationsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListProjectInvitationsRequest_FieldPathArrayItemValue), nil
}

func MustParseListProjectInvitationsRequest_FieldPathArrayItemValue(pathStr, valueStr string) ListProjectInvitationsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseListProjectInvitationsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListProjectInvitationsRequest_FieldTerminalPathArrayItemValue struct {
	ListProjectInvitationsRequest_FieldTerminalPath
	value interface{}
}

var _ ListProjectInvitationsRequest_FieldPathArrayItemValue = (*ListProjectInvitationsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListProjectInvitationsRequest as interface{}
func (fpaiv *ListProjectInvitationsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ListProjectInvitationsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ListProjectInvitationsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListProjectInvitationsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListProjectInvitationsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListProjectInvitationsRequest'
func (fpaiv *ListProjectInvitationsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ListProjectInvitationsRequest) bool {
	slice := fpaiv.ListProjectInvitationsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ListProjectInvitationsRequest_FieldPathArrayOfValues allows storing slice of values for ListProjectInvitationsRequest fields according to their type
type ListProjectInvitationsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListProjectInvitationsRequest_FieldPath
}

func ParseListProjectInvitationsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ListProjectInvitationsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseListProjectInvitationsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListProjectInvitationsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListProjectInvitationsRequest_FieldPathArrayOfValues), nil
}

func MustParseListProjectInvitationsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ListProjectInvitationsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseListProjectInvitationsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListProjectInvitationsRequest_FieldTerminalPathArrayOfValues struct {
	ListProjectInvitationsRequest_FieldTerminalPath
	values interface{}
}

var _ ListProjectInvitationsRequest_FieldPathArrayOfValues = (*ListProjectInvitationsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListProjectInvitationsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListProjectInvitationsRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*project_invitation.ParentName) {
			values = append(values, v)
		}
	case ListProjectInvitationsRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case ListProjectInvitationsRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*project_invitation.PagerCursor) {
			values = append(values, v)
		}
	case ListProjectInvitationsRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*project_invitation.OrderBy) {
			values = append(values, v)
		}
	case ListProjectInvitationsRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*project_invitation.Filter) {
			values = append(values, v)
		}
	case ListProjectInvitationsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*project_invitation.ProjectInvitation_FieldMask) {
			values = append(values, v)
		}
	case ListProjectInvitationsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	case ListProjectInvitationsRequest_FieldPathSelectorIncludePagingInfo:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListProjectInvitationsRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*project_invitation.ParentName, bool) {
	res, ok := fpaov.values.([]*project_invitation.ParentName)
	return res, ok
}
func (fpaov *ListProjectInvitationsRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *ListProjectInvitationsRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*project_invitation.PagerCursor, bool) {
	res, ok := fpaov.values.([]*project_invitation.PagerCursor)
	return res, ok
}
func (fpaov *ListProjectInvitationsRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*project_invitation.OrderBy, bool) {
	res, ok := fpaov.values.([]*project_invitation.OrderBy)
	return res, ok
}
func (fpaov *ListProjectInvitationsRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*project_invitation.Filter, bool) {
	res, ok := fpaov.values.([]*project_invitation.Filter)
	return res, ok
}
func (fpaov *ListProjectInvitationsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*project_invitation.ProjectInvitation_FieldMask, bool) {
	res, ok := fpaov.values.([]*project_invitation.ProjectInvitation_FieldMask)
	return res, ok
}
func (fpaov *ListProjectInvitationsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}
func (fpaov *ListProjectInvitationsRequest_FieldTerminalPathArrayOfValues) AsIncludePagingInfoArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListProjectInvitationsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListProjectInvitationsResponse_FieldPathSelector
	Get(source *ListProjectInvitationsResponse) []interface{}
	GetSingle(source *ListProjectInvitationsResponse) (interface{}, bool)
	ClearValue(item *ListProjectInvitationsResponse)

	// Those methods build corresponding ListProjectInvitationsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListProjectInvitationsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) ListProjectInvitationsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListProjectInvitationsResponse_FieldPathArrayItemValue
}

type ListProjectInvitationsResponse_FieldPathSelector int32

const (
	ListProjectInvitationsResponse_FieldPathSelectorProjectInvitations ListProjectInvitationsResponse_FieldPathSelector = 0
	ListProjectInvitationsResponse_FieldPathSelectorPrevPageToken      ListProjectInvitationsResponse_FieldPathSelector = 1
	ListProjectInvitationsResponse_FieldPathSelectorNextPageToken      ListProjectInvitationsResponse_FieldPathSelector = 2
	ListProjectInvitationsResponse_FieldPathSelectorCurrentOffset      ListProjectInvitationsResponse_FieldPathSelector = 3
	ListProjectInvitationsResponse_FieldPathSelectorTotalResultsCount  ListProjectInvitationsResponse_FieldPathSelector = 4
)

func (s ListProjectInvitationsResponse_FieldPathSelector) String() string {
	switch s {
	case ListProjectInvitationsResponse_FieldPathSelectorProjectInvitations:
		return "project_invitations"
	case ListProjectInvitationsResponse_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case ListProjectInvitationsResponse_FieldPathSelectorNextPageToken:
		return "next_page_token"
	case ListProjectInvitationsResponse_FieldPathSelectorCurrentOffset:
		return "current_offset"
	case ListProjectInvitationsResponse_FieldPathSelectorTotalResultsCount:
		return "total_results_count"
	default:
		panic(fmt.Sprintf("Invalid selector for ListProjectInvitationsResponse: %d", s))
	}
}

func BuildListProjectInvitationsResponse_FieldPath(fp gotenobject.RawFieldPath) (ListProjectInvitationsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListProjectInvitationsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "project_invitations", "projectInvitations", "project-invitations":
			return &ListProjectInvitationsResponse_FieldTerminalPath{selector: ListProjectInvitationsResponse_FieldPathSelectorProjectInvitations}, nil
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &ListProjectInvitationsResponse_FieldTerminalPath{selector: ListProjectInvitationsResponse_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &ListProjectInvitationsResponse_FieldTerminalPath{selector: ListProjectInvitationsResponse_FieldPathSelectorNextPageToken}, nil
		case "current_offset", "currentOffset", "current-offset":
			return &ListProjectInvitationsResponse_FieldTerminalPath{selector: ListProjectInvitationsResponse_FieldPathSelectorCurrentOffset}, nil
		case "total_results_count", "totalResultsCount", "total-results-count":
			return &ListProjectInvitationsResponse_FieldTerminalPath{selector: ListProjectInvitationsResponse_FieldPathSelectorTotalResultsCount}, nil
		}
	} else {
		switch fp[0] {
		case "project_invitations", "projectInvitations", "project-invitations":
			if subpath, err := project_invitation.BuildProjectInvitation_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ListProjectInvitationsResponse_FieldSubPath{selector: ListProjectInvitationsResponse_FieldPathSelectorProjectInvitations, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListProjectInvitationsResponse", fp)
}

func ParseListProjectInvitationsResponse_FieldPath(rawField string) (ListProjectInvitationsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListProjectInvitationsResponse_FieldPath(fp)
}

func MustParseListProjectInvitationsResponse_FieldPath(rawField string) ListProjectInvitationsResponse_FieldPath {
	fp, err := ParseListProjectInvitationsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListProjectInvitationsResponse_FieldTerminalPath struct {
	selector ListProjectInvitationsResponse_FieldPathSelector
}

var _ ListProjectInvitationsResponse_FieldPath = (*ListProjectInvitationsResponse_FieldTerminalPath)(nil)

func (fp *ListProjectInvitationsResponse_FieldTerminalPath) Selector() ListProjectInvitationsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListProjectInvitationsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListProjectInvitationsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListProjectInvitationsResponse
func (fp *ListProjectInvitationsResponse_FieldTerminalPath) Get(source *ListProjectInvitationsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListProjectInvitationsResponse_FieldPathSelectorProjectInvitations:
			for _, value := range source.GetProjectInvitations() {
				values = append(values, value)
			}
		case ListProjectInvitationsResponse_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case ListProjectInvitationsResponse_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		case ListProjectInvitationsResponse_FieldPathSelectorCurrentOffset:
			values = append(values, source.CurrentOffset)
		case ListProjectInvitationsResponse_FieldPathSelectorTotalResultsCount:
			values = append(values, source.TotalResultsCount)
		default:
			panic(fmt.Sprintf("Invalid selector for ListProjectInvitationsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *ListProjectInvitationsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListProjectInvitationsResponse))
}

// GetSingle returns value pointed by specific field of from source ListProjectInvitationsResponse
func (fp *ListProjectInvitationsResponse_FieldTerminalPath) GetSingle(source *ListProjectInvitationsResponse) (interface{}, bool) {
	switch fp.selector {
	case ListProjectInvitationsResponse_FieldPathSelectorProjectInvitations:
		res := source.GetProjectInvitations()
		return res, res != nil
	case ListProjectInvitationsResponse_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case ListProjectInvitationsResponse_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	case ListProjectInvitationsResponse_FieldPathSelectorCurrentOffset:
		return source.GetCurrentOffset(), source != nil
	case ListProjectInvitationsResponse_FieldPathSelectorTotalResultsCount:
		return source.GetTotalResultsCount(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListProjectInvitationsResponse: %d", fp.selector))
	}
}

func (fp *ListProjectInvitationsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListProjectInvitationsResponse))
}

// GetDefault returns a default value of the field type
func (fp *ListProjectInvitationsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListProjectInvitationsResponse_FieldPathSelectorProjectInvitations:
		return ([]*project_invitation.ProjectInvitation)(nil)
	case ListProjectInvitationsResponse_FieldPathSelectorPrevPageToken:
		return (*project_invitation.PagerCursor)(nil)
	case ListProjectInvitationsResponse_FieldPathSelectorNextPageToken:
		return (*project_invitation.PagerCursor)(nil)
	case ListProjectInvitationsResponse_FieldPathSelectorCurrentOffset:
		return int32(0)
	case ListProjectInvitationsResponse_FieldPathSelectorTotalResultsCount:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for ListProjectInvitationsResponse: %d", fp.selector))
	}
}

func (fp *ListProjectInvitationsResponse_FieldTerminalPath) ClearValue(item *ListProjectInvitationsResponse) {
	if item != nil {
		switch fp.selector {
		case ListProjectInvitationsResponse_FieldPathSelectorProjectInvitations:
			item.ProjectInvitations = nil
		case ListProjectInvitationsResponse_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case ListProjectInvitationsResponse_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		case ListProjectInvitationsResponse_FieldPathSelectorCurrentOffset:
			item.CurrentOffset = int32(0)
		case ListProjectInvitationsResponse_FieldPathSelectorTotalResultsCount:
			item.TotalResultsCount = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for ListProjectInvitationsResponse: %d", fp.selector))
		}
	}
}

func (fp *ListProjectInvitationsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListProjectInvitationsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListProjectInvitationsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListProjectInvitationsResponse_FieldPathSelectorPrevPageToken ||
		fp.selector == ListProjectInvitationsResponse_FieldPathSelectorNextPageToken ||
		fp.selector == ListProjectInvitationsResponse_FieldPathSelectorCurrentOffset ||
		fp.selector == ListProjectInvitationsResponse_FieldPathSelectorTotalResultsCount
}

func (fp *ListProjectInvitationsResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ListProjectInvitationsResponse_FieldTerminalPath) WithIValue(value interface{}) ListProjectInvitationsResponse_FieldPathValue {
	switch fp.selector {
	case ListProjectInvitationsResponse_FieldPathSelectorProjectInvitations:
		return &ListProjectInvitationsResponse_FieldTerminalPathValue{ListProjectInvitationsResponse_FieldTerminalPath: *fp, value: value.([]*project_invitation.ProjectInvitation)}
	case ListProjectInvitationsResponse_FieldPathSelectorPrevPageToken:
		return &ListProjectInvitationsResponse_FieldTerminalPathValue{ListProjectInvitationsResponse_FieldTerminalPath: *fp, value: value.(*project_invitation.PagerCursor)}
	case ListProjectInvitationsResponse_FieldPathSelectorNextPageToken:
		return &ListProjectInvitationsResponse_FieldTerminalPathValue{ListProjectInvitationsResponse_FieldTerminalPath: *fp, value: value.(*project_invitation.PagerCursor)}
	case ListProjectInvitationsResponse_FieldPathSelectorCurrentOffset:
		return &ListProjectInvitationsResponse_FieldTerminalPathValue{ListProjectInvitationsResponse_FieldTerminalPath: *fp, value: value.(int32)}
	case ListProjectInvitationsResponse_FieldPathSelectorTotalResultsCount:
		return &ListProjectInvitationsResponse_FieldTerminalPathValue{ListProjectInvitationsResponse_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListProjectInvitationsResponse: %d", fp.selector))
	}
}

func (fp *ListProjectInvitationsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListProjectInvitationsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListProjectInvitationsResponse_FieldPathArrayOfValues {
	fpaov := &ListProjectInvitationsResponse_FieldTerminalPathArrayOfValues{ListProjectInvitationsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListProjectInvitationsResponse_FieldPathSelectorProjectInvitations:
		return &ListProjectInvitationsResponse_FieldTerminalPathArrayOfValues{ListProjectInvitationsResponse_FieldTerminalPath: *fp, values: values.([][]*project_invitation.ProjectInvitation)}
	case ListProjectInvitationsResponse_FieldPathSelectorPrevPageToken:
		return &ListProjectInvitationsResponse_FieldTerminalPathArrayOfValues{ListProjectInvitationsResponse_FieldTerminalPath: *fp, values: values.([]*project_invitation.PagerCursor)}
	case ListProjectInvitationsResponse_FieldPathSelectorNextPageToken:
		return &ListProjectInvitationsResponse_FieldTerminalPathArrayOfValues{ListProjectInvitationsResponse_FieldTerminalPath: *fp, values: values.([]*project_invitation.PagerCursor)}
	case ListProjectInvitationsResponse_FieldPathSelectorCurrentOffset:
		return &ListProjectInvitationsResponse_FieldTerminalPathArrayOfValues{ListProjectInvitationsResponse_FieldTerminalPath: *fp, values: values.([]int32)}
	case ListProjectInvitationsResponse_FieldPathSelectorTotalResultsCount:
		return &ListProjectInvitationsResponse_FieldTerminalPathArrayOfValues{ListProjectInvitationsResponse_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListProjectInvitationsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListProjectInvitationsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListProjectInvitationsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListProjectInvitationsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case ListProjectInvitationsResponse_FieldPathSelectorProjectInvitations:
		return &ListProjectInvitationsResponse_FieldTerminalPathArrayItemValue{ListProjectInvitationsResponse_FieldTerminalPath: *fp, value: value.(*project_invitation.ProjectInvitation)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListProjectInvitationsResponse: %d", fp.selector))
	}
}

func (fp *ListProjectInvitationsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ListProjectInvitationsResponse_FieldSubPath struct {
	selector ListProjectInvitationsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ListProjectInvitationsResponse_FieldPath = (*ListProjectInvitationsResponse_FieldSubPath)(nil)

func (fps *ListProjectInvitationsResponse_FieldSubPath) Selector() ListProjectInvitationsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *ListProjectInvitationsResponse_FieldSubPath) AsProjectInvitationsSubPath() (project_invitation.ProjectInvitation_FieldPath, bool) {
	res, ok := fps.subPath.(project_invitation.ProjectInvitation_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ListProjectInvitationsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ListProjectInvitationsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ListProjectInvitationsResponse
func (fps *ListProjectInvitationsResponse_FieldSubPath) Get(source *ListProjectInvitationsResponse) (values []interface{}) {
	switch fps.selector {
	case ListProjectInvitationsResponse_FieldPathSelectorProjectInvitations:
		for _, item := range source.GetProjectInvitations() {
			values = append(values, fps.subPath.GetRaw(item)...)
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListProjectInvitationsResponse: %d", fps.selector))
	}
	return
}

func (fps *ListProjectInvitationsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ListProjectInvitationsResponse))
}

// GetSingle returns value of selected field from source ListProjectInvitationsResponse
func (fps *ListProjectInvitationsResponse_FieldSubPath) GetSingle(source *ListProjectInvitationsResponse) (interface{}, bool) {
	switch fps.selector {
	case ListProjectInvitationsResponse_FieldPathSelectorProjectInvitations:
		if len(source.GetProjectInvitations()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetProjectInvitations()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for ListProjectInvitationsResponse: %d", fps.selector))
	}
}

func (fps *ListProjectInvitationsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ListProjectInvitationsResponse))
}

// GetDefault returns a default value of the field type
func (fps *ListProjectInvitationsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ListProjectInvitationsResponse_FieldSubPath) ClearValue(item *ListProjectInvitationsResponse) {
	if item != nil {
		switch fps.selector {
		case ListProjectInvitationsResponse_FieldPathSelectorProjectInvitations:
			for _, subItem := range item.ProjectInvitations {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListProjectInvitationsResponse: %d", fps.selector))
		}
	}
}

func (fps *ListProjectInvitationsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ListProjectInvitationsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *ListProjectInvitationsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ListProjectInvitationsResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&ListProjectInvitationsResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *ListProjectInvitationsResponse_FieldSubPath) WithIValue(value interface{}) ListProjectInvitationsResponse_FieldPathValue {
	return &ListProjectInvitationsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ListProjectInvitationsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ListProjectInvitationsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) ListProjectInvitationsResponse_FieldPathArrayOfValues {
	return &ListProjectInvitationsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ListProjectInvitationsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ListProjectInvitationsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) ListProjectInvitationsResponse_FieldPathArrayItemValue {
	return &ListProjectInvitationsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ListProjectInvitationsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ListProjectInvitationsResponse_FieldPathValue allows storing values for ListProjectInvitationsResponse fields according to their type
type ListProjectInvitationsResponse_FieldPathValue interface {
	ListProjectInvitationsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListProjectInvitationsResponse)
	CompareWith(*ListProjectInvitationsResponse) (cmp int, comparable bool)
}

func ParseListProjectInvitationsResponse_FieldPathValue(pathStr, valueStr string) (ListProjectInvitationsResponse_FieldPathValue, error) {
	fp, err := ParseListProjectInvitationsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListProjectInvitationsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListProjectInvitationsResponse_FieldPathValue), nil
}

func MustParseListProjectInvitationsResponse_FieldPathValue(pathStr, valueStr string) ListProjectInvitationsResponse_FieldPathValue {
	fpv, err := ParseListProjectInvitationsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListProjectInvitationsResponse_FieldTerminalPathValue struct {
	ListProjectInvitationsResponse_FieldTerminalPath
	value interface{}
}

var _ ListProjectInvitationsResponse_FieldPathValue = (*ListProjectInvitationsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListProjectInvitationsResponse' as interface{}
func (fpv *ListProjectInvitationsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListProjectInvitationsResponse_FieldTerminalPathValue) AsProjectInvitationsValue() ([]*project_invitation.ProjectInvitation, bool) {
	res, ok := fpv.value.([]*project_invitation.ProjectInvitation)
	return res, ok
}
func (fpv *ListProjectInvitationsResponse_FieldTerminalPathValue) AsPrevPageTokenValue() (*project_invitation.PagerCursor, bool) {
	res, ok := fpv.value.(*project_invitation.PagerCursor)
	return res, ok
}
func (fpv *ListProjectInvitationsResponse_FieldTerminalPathValue) AsNextPageTokenValue() (*project_invitation.PagerCursor, bool) {
	res, ok := fpv.value.(*project_invitation.PagerCursor)
	return res, ok
}
func (fpv *ListProjectInvitationsResponse_FieldTerminalPathValue) AsCurrentOffsetValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *ListProjectInvitationsResponse_FieldTerminalPathValue) AsTotalResultsCountValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object ListProjectInvitationsResponse
func (fpv *ListProjectInvitationsResponse_FieldTerminalPathValue) SetTo(target **ListProjectInvitationsResponse) {
	if *target == nil {
		*target = new(ListProjectInvitationsResponse)
	}
	switch fpv.selector {
	case ListProjectInvitationsResponse_FieldPathSelectorProjectInvitations:
		(*target).ProjectInvitations = fpv.value.([]*project_invitation.ProjectInvitation)
	case ListProjectInvitationsResponse_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*project_invitation.PagerCursor)
	case ListProjectInvitationsResponse_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*project_invitation.PagerCursor)
	case ListProjectInvitationsResponse_FieldPathSelectorCurrentOffset:
		(*target).CurrentOffset = fpv.value.(int32)
	case ListProjectInvitationsResponse_FieldPathSelectorTotalResultsCount:
		(*target).TotalResultsCount = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for ListProjectInvitationsResponse: %d", fpv.selector))
	}
}

func (fpv *ListProjectInvitationsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListProjectInvitationsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListProjectInvitationsResponse_FieldTerminalPathValue' with the value under path in 'ListProjectInvitationsResponse'.
func (fpv *ListProjectInvitationsResponse_FieldTerminalPathValue) CompareWith(source *ListProjectInvitationsResponse) (int, bool) {
	switch fpv.selector {
	case ListProjectInvitationsResponse_FieldPathSelectorProjectInvitations:
		return 0, false
	case ListProjectInvitationsResponse_FieldPathSelectorPrevPageToken:
		return 0, false
	case ListProjectInvitationsResponse_FieldPathSelectorNextPageToken:
		return 0, false
	case ListProjectInvitationsResponse_FieldPathSelectorCurrentOffset:
		leftValue := fpv.value.(int32)
		rightValue := source.GetCurrentOffset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListProjectInvitationsResponse_FieldPathSelectorTotalResultsCount:
		leftValue := fpv.value.(int32)
		rightValue := source.GetTotalResultsCount()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListProjectInvitationsResponse: %d", fpv.selector))
	}
}

func (fpv *ListProjectInvitationsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListProjectInvitationsResponse))
}

type ListProjectInvitationsResponse_FieldSubPathValue struct {
	ListProjectInvitationsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ListProjectInvitationsResponse_FieldPathValue = (*ListProjectInvitationsResponse_FieldSubPathValue)(nil)

func (fpvs *ListProjectInvitationsResponse_FieldSubPathValue) AsProjectInvitationsPathValue() (project_invitation.ProjectInvitation_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(project_invitation.ProjectInvitation_FieldPathValue)
	return res, ok
}

func (fpvs *ListProjectInvitationsResponse_FieldSubPathValue) SetTo(target **ListProjectInvitationsResponse) {
	if *target == nil {
		*target = new(ListProjectInvitationsResponse)
	}
	switch fpvs.Selector() {
	case ListProjectInvitationsResponse_FieldPathSelectorProjectInvitations:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for ListProjectInvitationsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListProjectInvitationsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListProjectInvitationsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ListProjectInvitationsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ListProjectInvitationsResponse_FieldSubPathValue) CompareWith(source *ListProjectInvitationsResponse) (int, bool) {
	switch fpvs.Selector() {
	case ListProjectInvitationsResponse_FieldPathSelectorProjectInvitations:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for ListProjectInvitationsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListProjectInvitationsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ListProjectInvitationsResponse))
}

// ListProjectInvitationsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for ListProjectInvitationsResponse according to their type
// Present only for array (repeated) types.
type ListProjectInvitationsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListProjectInvitationsResponse_FieldPath
	ContainsValue(*ListProjectInvitationsResponse) bool
}

// ParseListProjectInvitationsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListProjectInvitationsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (ListProjectInvitationsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseListProjectInvitationsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListProjectInvitationsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListProjectInvitationsResponse_FieldPathArrayItemValue), nil
}

func MustParseListProjectInvitationsResponse_FieldPathArrayItemValue(pathStr, valueStr string) ListProjectInvitationsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseListProjectInvitationsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListProjectInvitationsResponse_FieldTerminalPathArrayItemValue struct {
	ListProjectInvitationsResponse_FieldTerminalPath
	value interface{}
}

var _ ListProjectInvitationsResponse_FieldPathArrayItemValue = (*ListProjectInvitationsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListProjectInvitationsResponse as interface{}
func (fpaiv *ListProjectInvitationsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *ListProjectInvitationsResponse_FieldTerminalPathArrayItemValue) AsProjectInvitationsItemValue() (*project_invitation.ProjectInvitation, bool) {
	res, ok := fpaiv.value.(*project_invitation.ProjectInvitation)
	return res, ok
}

func (fpaiv *ListProjectInvitationsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *ListProjectInvitationsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListProjectInvitationsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListProjectInvitationsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListProjectInvitationsResponse'
func (fpaiv *ListProjectInvitationsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *ListProjectInvitationsResponse) bool {
	slice := fpaiv.ListProjectInvitationsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ListProjectInvitationsResponse_FieldSubPathArrayItemValue struct {
	ListProjectInvitationsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ListProjectInvitationsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ListProjectInvitationsResponse_FieldSubPathArrayItemValue) AsProjectInvitationsPathItemValue() (project_invitation.ProjectInvitation_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(project_invitation.ProjectInvitation_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListProjectInvitationsResponse'
func (fpaivs *ListProjectInvitationsResponse_FieldSubPathArrayItemValue) ContainsValue(source *ListProjectInvitationsResponse) bool {
	switch fpaivs.Selector() {
	case ListProjectInvitationsResponse_FieldPathSelectorProjectInvitations:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for ListProjectInvitationsResponse: %d", fpaivs.Selector()))
	}
}

// ListProjectInvitationsResponse_FieldPathArrayOfValues allows storing slice of values for ListProjectInvitationsResponse fields according to their type
type ListProjectInvitationsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListProjectInvitationsResponse_FieldPath
}

func ParseListProjectInvitationsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (ListProjectInvitationsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseListProjectInvitationsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListProjectInvitationsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListProjectInvitationsResponse_FieldPathArrayOfValues), nil
}

func MustParseListProjectInvitationsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) ListProjectInvitationsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseListProjectInvitationsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListProjectInvitationsResponse_FieldTerminalPathArrayOfValues struct {
	ListProjectInvitationsResponse_FieldTerminalPath
	values interface{}
}

var _ ListProjectInvitationsResponse_FieldPathArrayOfValues = (*ListProjectInvitationsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListProjectInvitationsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListProjectInvitationsResponse_FieldPathSelectorProjectInvitations:
		for _, v := range fpaov.values.([][]*project_invitation.ProjectInvitation) {
			values = append(values, v)
		}
	case ListProjectInvitationsResponse_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*project_invitation.PagerCursor) {
			values = append(values, v)
		}
	case ListProjectInvitationsResponse_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*project_invitation.PagerCursor) {
			values = append(values, v)
		}
	case ListProjectInvitationsResponse_FieldPathSelectorCurrentOffset:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case ListProjectInvitationsResponse_FieldPathSelectorTotalResultsCount:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListProjectInvitationsResponse_FieldTerminalPathArrayOfValues) AsProjectInvitationsArrayOfValues() ([][]*project_invitation.ProjectInvitation, bool) {
	res, ok := fpaov.values.([][]*project_invitation.ProjectInvitation)
	return res, ok
}
func (fpaov *ListProjectInvitationsResponse_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*project_invitation.PagerCursor, bool) {
	res, ok := fpaov.values.([]*project_invitation.PagerCursor)
	return res, ok
}
func (fpaov *ListProjectInvitationsResponse_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*project_invitation.PagerCursor, bool) {
	res, ok := fpaov.values.([]*project_invitation.PagerCursor)
	return res, ok
}
func (fpaov *ListProjectInvitationsResponse_FieldTerminalPathArrayOfValues) AsCurrentOffsetArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *ListProjectInvitationsResponse_FieldTerminalPathArrayOfValues) AsTotalResultsCountArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

type ListProjectInvitationsResponse_FieldSubPathArrayOfValues struct {
	ListProjectInvitationsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ListProjectInvitationsResponse_FieldPathArrayOfValues = (*ListProjectInvitationsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ListProjectInvitationsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ListProjectInvitationsResponse_FieldSubPathArrayOfValues) AsProjectInvitationsPathArrayOfValues() (project_invitation.ProjectInvitation_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(project_invitation.ProjectInvitation_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchProjectInvitationRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchProjectInvitationRequest_FieldPathSelector
	Get(source *WatchProjectInvitationRequest) []interface{}
	GetSingle(source *WatchProjectInvitationRequest) (interface{}, bool)
	ClearValue(item *WatchProjectInvitationRequest)

	// Those methods build corresponding WatchProjectInvitationRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchProjectInvitationRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchProjectInvitationRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchProjectInvitationRequest_FieldPathArrayItemValue
}

type WatchProjectInvitationRequest_FieldPathSelector int32

const (
	WatchProjectInvitationRequest_FieldPathSelectorName      WatchProjectInvitationRequest_FieldPathSelector = 0
	WatchProjectInvitationRequest_FieldPathSelectorFieldMask WatchProjectInvitationRequest_FieldPathSelector = 1
	WatchProjectInvitationRequest_FieldPathSelectorView      WatchProjectInvitationRequest_FieldPathSelector = 2
)

func (s WatchProjectInvitationRequest_FieldPathSelector) String() string {
	switch s {
	case WatchProjectInvitationRequest_FieldPathSelectorName:
		return "name"
	case WatchProjectInvitationRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchProjectInvitationRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProjectInvitationRequest: %d", s))
	}
}

func BuildWatchProjectInvitationRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchProjectInvitationRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchProjectInvitationRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &WatchProjectInvitationRequest_FieldTerminalPath{selector: WatchProjectInvitationRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchProjectInvitationRequest_FieldTerminalPath{selector: WatchProjectInvitationRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchProjectInvitationRequest_FieldTerminalPath{selector: WatchProjectInvitationRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchProjectInvitationRequest", fp)
}

func ParseWatchProjectInvitationRequest_FieldPath(rawField string) (WatchProjectInvitationRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchProjectInvitationRequest_FieldPath(fp)
}

func MustParseWatchProjectInvitationRequest_FieldPath(rawField string) WatchProjectInvitationRequest_FieldPath {
	fp, err := ParseWatchProjectInvitationRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchProjectInvitationRequest_FieldTerminalPath struct {
	selector WatchProjectInvitationRequest_FieldPathSelector
}

var _ WatchProjectInvitationRequest_FieldPath = (*WatchProjectInvitationRequest_FieldTerminalPath)(nil)

func (fp *WatchProjectInvitationRequest_FieldTerminalPath) Selector() WatchProjectInvitationRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchProjectInvitationRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchProjectInvitationRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchProjectInvitationRequest
func (fp *WatchProjectInvitationRequest_FieldTerminalPath) Get(source *WatchProjectInvitationRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchProjectInvitationRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case WatchProjectInvitationRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchProjectInvitationRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProjectInvitationRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchProjectInvitationRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchProjectInvitationRequest))
}

// GetSingle returns value pointed by specific field of from source WatchProjectInvitationRequest
func (fp *WatchProjectInvitationRequest_FieldTerminalPath) GetSingle(source *WatchProjectInvitationRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchProjectInvitationRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case WatchProjectInvitationRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchProjectInvitationRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProjectInvitationRequest: %d", fp.selector))
	}
}

func (fp *WatchProjectInvitationRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchProjectInvitationRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchProjectInvitationRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchProjectInvitationRequest_FieldPathSelectorName:
		return (*project_invitation.Reference)(nil)
	case WatchProjectInvitationRequest_FieldPathSelectorFieldMask:
		return (*project_invitation.ProjectInvitation_FieldMask)(nil)
	case WatchProjectInvitationRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProjectInvitationRequest: %d", fp.selector))
	}
}

func (fp *WatchProjectInvitationRequest_FieldTerminalPath) ClearValue(item *WatchProjectInvitationRequest) {
	if item != nil {
		switch fp.selector {
		case WatchProjectInvitationRequest_FieldPathSelectorName:
			item.Name = nil
		case WatchProjectInvitationRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchProjectInvitationRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProjectInvitationRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchProjectInvitationRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchProjectInvitationRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchProjectInvitationRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchProjectInvitationRequest_FieldPathSelectorName ||
		fp.selector == WatchProjectInvitationRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchProjectInvitationRequest_FieldPathSelectorView
}

func (fp *WatchProjectInvitationRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchProjectInvitationRequest_FieldTerminalPath) WithIValue(value interface{}) WatchProjectInvitationRequest_FieldPathValue {
	switch fp.selector {
	case WatchProjectInvitationRequest_FieldPathSelectorName:
		return &WatchProjectInvitationRequest_FieldTerminalPathValue{WatchProjectInvitationRequest_FieldTerminalPath: *fp, value: value.(*project_invitation.Reference)}
	case WatchProjectInvitationRequest_FieldPathSelectorFieldMask:
		return &WatchProjectInvitationRequest_FieldTerminalPathValue{WatchProjectInvitationRequest_FieldTerminalPath: *fp, value: value.(*project_invitation.ProjectInvitation_FieldMask)}
	case WatchProjectInvitationRequest_FieldPathSelectorView:
		return &WatchProjectInvitationRequest_FieldTerminalPathValue{WatchProjectInvitationRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProjectInvitationRequest: %d", fp.selector))
	}
}

func (fp *WatchProjectInvitationRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchProjectInvitationRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchProjectInvitationRequest_FieldPathArrayOfValues {
	fpaov := &WatchProjectInvitationRequest_FieldTerminalPathArrayOfValues{WatchProjectInvitationRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchProjectInvitationRequest_FieldPathSelectorName:
		return &WatchProjectInvitationRequest_FieldTerminalPathArrayOfValues{WatchProjectInvitationRequest_FieldTerminalPath: *fp, values: values.([]*project_invitation.Reference)}
	case WatchProjectInvitationRequest_FieldPathSelectorFieldMask:
		return &WatchProjectInvitationRequest_FieldTerminalPathArrayOfValues{WatchProjectInvitationRequest_FieldTerminalPath: *fp, values: values.([]*project_invitation.ProjectInvitation_FieldMask)}
	case WatchProjectInvitationRequest_FieldPathSelectorView:
		return &WatchProjectInvitationRequest_FieldTerminalPathArrayOfValues{WatchProjectInvitationRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProjectInvitationRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchProjectInvitationRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchProjectInvitationRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchProjectInvitationRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProjectInvitationRequest: %d", fp.selector))
	}
}

func (fp *WatchProjectInvitationRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchProjectInvitationRequest_FieldPathValue allows storing values for WatchProjectInvitationRequest fields according to their type
type WatchProjectInvitationRequest_FieldPathValue interface {
	WatchProjectInvitationRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchProjectInvitationRequest)
	CompareWith(*WatchProjectInvitationRequest) (cmp int, comparable bool)
}

func ParseWatchProjectInvitationRequest_FieldPathValue(pathStr, valueStr string) (WatchProjectInvitationRequest_FieldPathValue, error) {
	fp, err := ParseWatchProjectInvitationRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProjectInvitationRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchProjectInvitationRequest_FieldPathValue), nil
}

func MustParseWatchProjectInvitationRequest_FieldPathValue(pathStr, valueStr string) WatchProjectInvitationRequest_FieldPathValue {
	fpv, err := ParseWatchProjectInvitationRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchProjectInvitationRequest_FieldTerminalPathValue struct {
	WatchProjectInvitationRequest_FieldTerminalPath
	value interface{}
}

var _ WatchProjectInvitationRequest_FieldPathValue = (*WatchProjectInvitationRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchProjectInvitationRequest' as interface{}
func (fpv *WatchProjectInvitationRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchProjectInvitationRequest_FieldTerminalPathValue) AsNameValue() (*project_invitation.Reference, bool) {
	res, ok := fpv.value.(*project_invitation.Reference)
	return res, ok
}
func (fpv *WatchProjectInvitationRequest_FieldTerminalPathValue) AsFieldMaskValue() (*project_invitation.ProjectInvitation_FieldMask, bool) {
	res, ok := fpv.value.(*project_invitation.ProjectInvitation_FieldMask)
	return res, ok
}
func (fpv *WatchProjectInvitationRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object WatchProjectInvitationRequest
func (fpv *WatchProjectInvitationRequest_FieldTerminalPathValue) SetTo(target **WatchProjectInvitationRequest) {
	if *target == nil {
		*target = new(WatchProjectInvitationRequest)
	}
	switch fpv.selector {
	case WatchProjectInvitationRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*project_invitation.Reference)
	case WatchProjectInvitationRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*project_invitation.ProjectInvitation_FieldMask)
	case WatchProjectInvitationRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProjectInvitationRequest: %d", fpv.selector))
	}
}

func (fpv *WatchProjectInvitationRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchProjectInvitationRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchProjectInvitationRequest_FieldTerminalPathValue' with the value under path in 'WatchProjectInvitationRequest'.
func (fpv *WatchProjectInvitationRequest_FieldTerminalPathValue) CompareWith(source *WatchProjectInvitationRequest) (int, bool) {
	switch fpv.selector {
	case WatchProjectInvitationRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*project_invitation.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProjectInvitationRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchProjectInvitationRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProjectInvitationRequest: %d", fpv.selector))
	}
}

func (fpv *WatchProjectInvitationRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchProjectInvitationRequest))
}

// WatchProjectInvitationRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchProjectInvitationRequest according to their type
// Present only for array (repeated) types.
type WatchProjectInvitationRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchProjectInvitationRequest_FieldPath
	ContainsValue(*WatchProjectInvitationRequest) bool
}

// ParseWatchProjectInvitationRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchProjectInvitationRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchProjectInvitationRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchProjectInvitationRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProjectInvitationRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchProjectInvitationRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchProjectInvitationRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchProjectInvitationRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchProjectInvitationRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchProjectInvitationRequest_FieldTerminalPathArrayItemValue struct {
	WatchProjectInvitationRequest_FieldTerminalPath
	value interface{}
}

var _ WatchProjectInvitationRequest_FieldPathArrayItemValue = (*WatchProjectInvitationRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchProjectInvitationRequest as interface{}
func (fpaiv *WatchProjectInvitationRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchProjectInvitationRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchProjectInvitationRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchProjectInvitationRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchProjectInvitationRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchProjectInvitationRequest'
func (fpaiv *WatchProjectInvitationRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchProjectInvitationRequest) bool {
	slice := fpaiv.WatchProjectInvitationRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchProjectInvitationRequest_FieldPathArrayOfValues allows storing slice of values for WatchProjectInvitationRequest fields according to their type
type WatchProjectInvitationRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchProjectInvitationRequest_FieldPath
}

func ParseWatchProjectInvitationRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchProjectInvitationRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchProjectInvitationRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProjectInvitationRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchProjectInvitationRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchProjectInvitationRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchProjectInvitationRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchProjectInvitationRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchProjectInvitationRequest_FieldTerminalPathArrayOfValues struct {
	WatchProjectInvitationRequest_FieldTerminalPath
	values interface{}
}

var _ WatchProjectInvitationRequest_FieldPathArrayOfValues = (*WatchProjectInvitationRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchProjectInvitationRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchProjectInvitationRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*project_invitation.Reference) {
			values = append(values, v)
		}
	case WatchProjectInvitationRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*project_invitation.ProjectInvitation_FieldMask) {
			values = append(values, v)
		}
	case WatchProjectInvitationRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchProjectInvitationRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*project_invitation.Reference, bool) {
	res, ok := fpaov.values.([]*project_invitation.Reference)
	return res, ok
}
func (fpaov *WatchProjectInvitationRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*project_invitation.ProjectInvitation_FieldMask, bool) {
	res, ok := fpaov.values.([]*project_invitation.ProjectInvitation_FieldMask)
	return res, ok
}
func (fpaov *WatchProjectInvitationRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchProjectInvitationResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchProjectInvitationResponse_FieldPathSelector
	Get(source *WatchProjectInvitationResponse) []interface{}
	GetSingle(source *WatchProjectInvitationResponse) (interface{}, bool)
	ClearValue(item *WatchProjectInvitationResponse)

	// Those methods build corresponding WatchProjectInvitationResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchProjectInvitationResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchProjectInvitationResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchProjectInvitationResponse_FieldPathArrayItemValue
}

type WatchProjectInvitationResponse_FieldPathSelector int32

const (
	WatchProjectInvitationResponse_FieldPathSelectorChange WatchProjectInvitationResponse_FieldPathSelector = 0
)

func (s WatchProjectInvitationResponse_FieldPathSelector) String() string {
	switch s {
	case WatchProjectInvitationResponse_FieldPathSelectorChange:
		return "change"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProjectInvitationResponse: %d", s))
	}
}

func BuildWatchProjectInvitationResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchProjectInvitationResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchProjectInvitationResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "change":
			return &WatchProjectInvitationResponse_FieldTerminalPath{selector: WatchProjectInvitationResponse_FieldPathSelectorChange}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchProjectInvitationResponse", fp)
}

func ParseWatchProjectInvitationResponse_FieldPath(rawField string) (WatchProjectInvitationResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchProjectInvitationResponse_FieldPath(fp)
}

func MustParseWatchProjectInvitationResponse_FieldPath(rawField string) WatchProjectInvitationResponse_FieldPath {
	fp, err := ParseWatchProjectInvitationResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchProjectInvitationResponse_FieldTerminalPath struct {
	selector WatchProjectInvitationResponse_FieldPathSelector
}

var _ WatchProjectInvitationResponse_FieldPath = (*WatchProjectInvitationResponse_FieldTerminalPath)(nil)

func (fp *WatchProjectInvitationResponse_FieldTerminalPath) Selector() WatchProjectInvitationResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchProjectInvitationResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchProjectInvitationResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchProjectInvitationResponse
func (fp *WatchProjectInvitationResponse_FieldTerminalPath) Get(source *WatchProjectInvitationResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchProjectInvitationResponse_FieldPathSelectorChange:
			if source.Change != nil {
				values = append(values, source.Change)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProjectInvitationResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchProjectInvitationResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchProjectInvitationResponse))
}

// GetSingle returns value pointed by specific field of from source WatchProjectInvitationResponse
func (fp *WatchProjectInvitationResponse_FieldTerminalPath) GetSingle(source *WatchProjectInvitationResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchProjectInvitationResponse_FieldPathSelectorChange:
		res := source.GetChange()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProjectInvitationResponse: %d", fp.selector))
	}
}

func (fp *WatchProjectInvitationResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchProjectInvitationResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchProjectInvitationResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchProjectInvitationResponse_FieldPathSelectorChange:
		return (*project_invitation.ProjectInvitationChange)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProjectInvitationResponse: %d", fp.selector))
	}
}

func (fp *WatchProjectInvitationResponse_FieldTerminalPath) ClearValue(item *WatchProjectInvitationResponse) {
	if item != nil {
		switch fp.selector {
		case WatchProjectInvitationResponse_FieldPathSelectorChange:
			item.Change = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProjectInvitationResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchProjectInvitationResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchProjectInvitationResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchProjectInvitationResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchProjectInvitationResponse_FieldPathSelectorChange
}

func (fp *WatchProjectInvitationResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchProjectInvitationResponse_FieldTerminalPath) WithIValue(value interface{}) WatchProjectInvitationResponse_FieldPathValue {
	switch fp.selector {
	case WatchProjectInvitationResponse_FieldPathSelectorChange:
		return &WatchProjectInvitationResponse_FieldTerminalPathValue{WatchProjectInvitationResponse_FieldTerminalPath: *fp, value: value.(*project_invitation.ProjectInvitationChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProjectInvitationResponse: %d", fp.selector))
	}
}

func (fp *WatchProjectInvitationResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchProjectInvitationResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchProjectInvitationResponse_FieldPathArrayOfValues {
	fpaov := &WatchProjectInvitationResponse_FieldTerminalPathArrayOfValues{WatchProjectInvitationResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchProjectInvitationResponse_FieldPathSelectorChange:
		return &WatchProjectInvitationResponse_FieldTerminalPathArrayOfValues{WatchProjectInvitationResponse_FieldTerminalPath: *fp, values: values.([]*project_invitation.ProjectInvitationChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProjectInvitationResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchProjectInvitationResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchProjectInvitationResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchProjectInvitationResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProjectInvitationResponse: %d", fp.selector))
	}
}

func (fp *WatchProjectInvitationResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchProjectInvitationResponse_FieldPathValue allows storing values for WatchProjectInvitationResponse fields according to their type
type WatchProjectInvitationResponse_FieldPathValue interface {
	WatchProjectInvitationResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchProjectInvitationResponse)
	CompareWith(*WatchProjectInvitationResponse) (cmp int, comparable bool)
}

func ParseWatchProjectInvitationResponse_FieldPathValue(pathStr, valueStr string) (WatchProjectInvitationResponse_FieldPathValue, error) {
	fp, err := ParseWatchProjectInvitationResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProjectInvitationResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchProjectInvitationResponse_FieldPathValue), nil
}

func MustParseWatchProjectInvitationResponse_FieldPathValue(pathStr, valueStr string) WatchProjectInvitationResponse_FieldPathValue {
	fpv, err := ParseWatchProjectInvitationResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchProjectInvitationResponse_FieldTerminalPathValue struct {
	WatchProjectInvitationResponse_FieldTerminalPath
	value interface{}
}

var _ WatchProjectInvitationResponse_FieldPathValue = (*WatchProjectInvitationResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchProjectInvitationResponse' as interface{}
func (fpv *WatchProjectInvitationResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchProjectInvitationResponse_FieldTerminalPathValue) AsChangeValue() (*project_invitation.ProjectInvitationChange, bool) {
	res, ok := fpv.value.(*project_invitation.ProjectInvitationChange)
	return res, ok
}

// SetTo stores value for selected field for object WatchProjectInvitationResponse
func (fpv *WatchProjectInvitationResponse_FieldTerminalPathValue) SetTo(target **WatchProjectInvitationResponse) {
	if *target == nil {
		*target = new(WatchProjectInvitationResponse)
	}
	switch fpv.selector {
	case WatchProjectInvitationResponse_FieldPathSelectorChange:
		(*target).Change = fpv.value.(*project_invitation.ProjectInvitationChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProjectInvitationResponse: %d", fpv.selector))
	}
}

func (fpv *WatchProjectInvitationResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchProjectInvitationResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchProjectInvitationResponse_FieldTerminalPathValue' with the value under path in 'WatchProjectInvitationResponse'.
func (fpv *WatchProjectInvitationResponse_FieldTerminalPathValue) CompareWith(source *WatchProjectInvitationResponse) (int, bool) {
	switch fpv.selector {
	case WatchProjectInvitationResponse_FieldPathSelectorChange:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProjectInvitationResponse: %d", fpv.selector))
	}
}

func (fpv *WatchProjectInvitationResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchProjectInvitationResponse))
}

// WatchProjectInvitationResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchProjectInvitationResponse according to their type
// Present only for array (repeated) types.
type WatchProjectInvitationResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchProjectInvitationResponse_FieldPath
	ContainsValue(*WatchProjectInvitationResponse) bool
}

// ParseWatchProjectInvitationResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchProjectInvitationResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchProjectInvitationResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchProjectInvitationResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProjectInvitationResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchProjectInvitationResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchProjectInvitationResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchProjectInvitationResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchProjectInvitationResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchProjectInvitationResponse_FieldTerminalPathArrayItemValue struct {
	WatchProjectInvitationResponse_FieldTerminalPath
	value interface{}
}

var _ WatchProjectInvitationResponse_FieldPathArrayItemValue = (*WatchProjectInvitationResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchProjectInvitationResponse as interface{}
func (fpaiv *WatchProjectInvitationResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchProjectInvitationResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchProjectInvitationResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchProjectInvitationResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchProjectInvitationResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchProjectInvitationResponse'
func (fpaiv *WatchProjectInvitationResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchProjectInvitationResponse) bool {
	slice := fpaiv.WatchProjectInvitationResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchProjectInvitationResponse_FieldPathArrayOfValues allows storing slice of values for WatchProjectInvitationResponse fields according to their type
type WatchProjectInvitationResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchProjectInvitationResponse_FieldPath
}

func ParseWatchProjectInvitationResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchProjectInvitationResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchProjectInvitationResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProjectInvitationResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchProjectInvitationResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchProjectInvitationResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchProjectInvitationResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchProjectInvitationResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchProjectInvitationResponse_FieldTerminalPathArrayOfValues struct {
	WatchProjectInvitationResponse_FieldTerminalPath
	values interface{}
}

var _ WatchProjectInvitationResponse_FieldPathArrayOfValues = (*WatchProjectInvitationResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchProjectInvitationResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchProjectInvitationResponse_FieldPathSelectorChange:
		for _, v := range fpaov.values.([]*project_invitation.ProjectInvitationChange) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchProjectInvitationResponse_FieldTerminalPathArrayOfValues) AsChangeArrayOfValues() ([]*project_invitation.ProjectInvitationChange, bool) {
	res, ok := fpaov.values.([]*project_invitation.ProjectInvitationChange)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchProjectInvitationsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchProjectInvitationsRequest_FieldPathSelector
	Get(source *WatchProjectInvitationsRequest) []interface{}
	GetSingle(source *WatchProjectInvitationsRequest) (interface{}, bool)
	ClearValue(item *WatchProjectInvitationsRequest)

	// Those methods build corresponding WatchProjectInvitationsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchProjectInvitationsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchProjectInvitationsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchProjectInvitationsRequest_FieldPathArrayItemValue
}

type WatchProjectInvitationsRequest_FieldPathSelector int32

const (
	WatchProjectInvitationsRequest_FieldPathSelectorType         WatchProjectInvitationsRequest_FieldPathSelector = 0
	WatchProjectInvitationsRequest_FieldPathSelectorParent       WatchProjectInvitationsRequest_FieldPathSelector = 1
	WatchProjectInvitationsRequest_FieldPathSelectorPageSize     WatchProjectInvitationsRequest_FieldPathSelector = 2
	WatchProjectInvitationsRequest_FieldPathSelectorPageToken    WatchProjectInvitationsRequest_FieldPathSelector = 3
	WatchProjectInvitationsRequest_FieldPathSelectorOrderBy      WatchProjectInvitationsRequest_FieldPathSelector = 4
	WatchProjectInvitationsRequest_FieldPathSelectorResumeToken  WatchProjectInvitationsRequest_FieldPathSelector = 5
	WatchProjectInvitationsRequest_FieldPathSelectorStartingTime WatchProjectInvitationsRequest_FieldPathSelector = 6
	WatchProjectInvitationsRequest_FieldPathSelectorFilter       WatchProjectInvitationsRequest_FieldPathSelector = 7
	WatchProjectInvitationsRequest_FieldPathSelectorFieldMask    WatchProjectInvitationsRequest_FieldPathSelector = 8
	WatchProjectInvitationsRequest_FieldPathSelectorView         WatchProjectInvitationsRequest_FieldPathSelector = 9
	WatchProjectInvitationsRequest_FieldPathSelectorMaxChunkSize WatchProjectInvitationsRequest_FieldPathSelector = 10
)

func (s WatchProjectInvitationsRequest_FieldPathSelector) String() string {
	switch s {
	case WatchProjectInvitationsRequest_FieldPathSelectorType:
		return "type"
	case WatchProjectInvitationsRequest_FieldPathSelectorParent:
		return "parent"
	case WatchProjectInvitationsRequest_FieldPathSelectorPageSize:
		return "page_size"
	case WatchProjectInvitationsRequest_FieldPathSelectorPageToken:
		return "page_token"
	case WatchProjectInvitationsRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case WatchProjectInvitationsRequest_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchProjectInvitationsRequest_FieldPathSelectorStartingTime:
		return "starting_time"
	case WatchProjectInvitationsRequest_FieldPathSelectorFilter:
		return "filter"
	case WatchProjectInvitationsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchProjectInvitationsRequest_FieldPathSelectorView:
		return "view"
	case WatchProjectInvitationsRequest_FieldPathSelectorMaxChunkSize:
		return "max_chunk_size"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProjectInvitationsRequest: %d", s))
	}
}

func BuildWatchProjectInvitationsRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchProjectInvitationsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchProjectInvitationsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "type":
			return &WatchProjectInvitationsRequest_FieldTerminalPath{selector: WatchProjectInvitationsRequest_FieldPathSelectorType}, nil
		case "parent":
			return &WatchProjectInvitationsRequest_FieldTerminalPath{selector: WatchProjectInvitationsRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &WatchProjectInvitationsRequest_FieldTerminalPath{selector: WatchProjectInvitationsRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &WatchProjectInvitationsRequest_FieldTerminalPath{selector: WatchProjectInvitationsRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &WatchProjectInvitationsRequest_FieldTerminalPath{selector: WatchProjectInvitationsRequest_FieldPathSelectorOrderBy}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchProjectInvitationsRequest_FieldTerminalPath{selector: WatchProjectInvitationsRequest_FieldPathSelectorResumeToken}, nil
		case "starting_time", "startingTime", "starting-time":
			return &WatchProjectInvitationsRequest_FieldTerminalPath{selector: WatchProjectInvitationsRequest_FieldPathSelectorStartingTime}, nil
		case "filter":
			return &WatchProjectInvitationsRequest_FieldTerminalPath{selector: WatchProjectInvitationsRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchProjectInvitationsRequest_FieldTerminalPath{selector: WatchProjectInvitationsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchProjectInvitationsRequest_FieldTerminalPath{selector: WatchProjectInvitationsRequest_FieldPathSelectorView}, nil
		case "max_chunk_size", "maxChunkSize", "max-chunk-size":
			return &WatchProjectInvitationsRequest_FieldTerminalPath{selector: WatchProjectInvitationsRequest_FieldPathSelectorMaxChunkSize}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchProjectInvitationsRequest", fp)
}

func ParseWatchProjectInvitationsRequest_FieldPath(rawField string) (WatchProjectInvitationsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchProjectInvitationsRequest_FieldPath(fp)
}

func MustParseWatchProjectInvitationsRequest_FieldPath(rawField string) WatchProjectInvitationsRequest_FieldPath {
	fp, err := ParseWatchProjectInvitationsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchProjectInvitationsRequest_FieldTerminalPath struct {
	selector WatchProjectInvitationsRequest_FieldPathSelector
}

var _ WatchProjectInvitationsRequest_FieldPath = (*WatchProjectInvitationsRequest_FieldTerminalPath)(nil)

func (fp *WatchProjectInvitationsRequest_FieldTerminalPath) Selector() WatchProjectInvitationsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchProjectInvitationsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchProjectInvitationsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchProjectInvitationsRequest
func (fp *WatchProjectInvitationsRequest_FieldTerminalPath) Get(source *WatchProjectInvitationsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchProjectInvitationsRequest_FieldPathSelectorType:
			values = append(values, source.Type)
		case WatchProjectInvitationsRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case WatchProjectInvitationsRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case WatchProjectInvitationsRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case WatchProjectInvitationsRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case WatchProjectInvitationsRequest_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchProjectInvitationsRequest_FieldPathSelectorStartingTime:
			if source.StartingTime != nil {
				values = append(values, source.StartingTime)
			}
		case WatchProjectInvitationsRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case WatchProjectInvitationsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchProjectInvitationsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		case WatchProjectInvitationsRequest_FieldPathSelectorMaxChunkSize:
			values = append(values, source.MaxChunkSize)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProjectInvitationsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchProjectInvitationsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchProjectInvitationsRequest))
}

// GetSingle returns value pointed by specific field of from source WatchProjectInvitationsRequest
func (fp *WatchProjectInvitationsRequest_FieldTerminalPath) GetSingle(source *WatchProjectInvitationsRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchProjectInvitationsRequest_FieldPathSelectorType:
		return source.GetType(), source != nil
	case WatchProjectInvitationsRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case WatchProjectInvitationsRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case WatchProjectInvitationsRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case WatchProjectInvitationsRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case WatchProjectInvitationsRequest_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchProjectInvitationsRequest_FieldPathSelectorStartingTime:
		res := source.GetStartingTime()
		return res, res != nil
	case WatchProjectInvitationsRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case WatchProjectInvitationsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchProjectInvitationsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	case WatchProjectInvitationsRequest_FieldPathSelectorMaxChunkSize:
		return source.GetMaxChunkSize(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProjectInvitationsRequest: %d", fp.selector))
	}
}

func (fp *WatchProjectInvitationsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchProjectInvitationsRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchProjectInvitationsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchProjectInvitationsRequest_FieldPathSelectorType:
		return watch_type.WatchType_STATEFUL
	case WatchProjectInvitationsRequest_FieldPathSelectorParent:
		return (*project_invitation.ParentReference)(nil)
	case WatchProjectInvitationsRequest_FieldPathSelectorPageSize:
		return int32(0)
	case WatchProjectInvitationsRequest_FieldPathSelectorPageToken:
		return (*project_invitation.PagerCursor)(nil)
	case WatchProjectInvitationsRequest_FieldPathSelectorOrderBy:
		return (*project_invitation.OrderBy)(nil)
	case WatchProjectInvitationsRequest_FieldPathSelectorResumeToken:
		return ""
	case WatchProjectInvitationsRequest_FieldPathSelectorStartingTime:
		return (*timestamp.Timestamp)(nil)
	case WatchProjectInvitationsRequest_FieldPathSelectorFilter:
		return (*project_invitation.Filter)(nil)
	case WatchProjectInvitationsRequest_FieldPathSelectorFieldMask:
		return (*project_invitation.ProjectInvitation_FieldMask)(nil)
	case WatchProjectInvitationsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	case WatchProjectInvitationsRequest_FieldPathSelectorMaxChunkSize:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProjectInvitationsRequest: %d", fp.selector))
	}
}

func (fp *WatchProjectInvitationsRequest_FieldTerminalPath) ClearValue(item *WatchProjectInvitationsRequest) {
	if item != nil {
		switch fp.selector {
		case WatchProjectInvitationsRequest_FieldPathSelectorType:
			item.Type = watch_type.WatchType_STATEFUL
		case WatchProjectInvitationsRequest_FieldPathSelectorParent:
			item.Parent = nil
		case WatchProjectInvitationsRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case WatchProjectInvitationsRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case WatchProjectInvitationsRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case WatchProjectInvitationsRequest_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchProjectInvitationsRequest_FieldPathSelectorStartingTime:
			item.StartingTime = nil
		case WatchProjectInvitationsRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case WatchProjectInvitationsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchProjectInvitationsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		case WatchProjectInvitationsRequest_FieldPathSelectorMaxChunkSize:
			item.MaxChunkSize = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProjectInvitationsRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchProjectInvitationsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchProjectInvitationsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchProjectInvitationsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchProjectInvitationsRequest_FieldPathSelectorType ||
		fp.selector == WatchProjectInvitationsRequest_FieldPathSelectorParent ||
		fp.selector == WatchProjectInvitationsRequest_FieldPathSelectorPageSize ||
		fp.selector == WatchProjectInvitationsRequest_FieldPathSelectorPageToken ||
		fp.selector == WatchProjectInvitationsRequest_FieldPathSelectorOrderBy ||
		fp.selector == WatchProjectInvitationsRequest_FieldPathSelectorResumeToken ||
		fp.selector == WatchProjectInvitationsRequest_FieldPathSelectorStartingTime ||
		fp.selector == WatchProjectInvitationsRequest_FieldPathSelectorFilter ||
		fp.selector == WatchProjectInvitationsRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchProjectInvitationsRequest_FieldPathSelectorView ||
		fp.selector == WatchProjectInvitationsRequest_FieldPathSelectorMaxChunkSize
}

func (fp *WatchProjectInvitationsRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchProjectInvitationsRequest_FieldTerminalPath) WithIValue(value interface{}) WatchProjectInvitationsRequest_FieldPathValue {
	switch fp.selector {
	case WatchProjectInvitationsRequest_FieldPathSelectorType:
		return &WatchProjectInvitationsRequest_FieldTerminalPathValue{WatchProjectInvitationsRequest_FieldTerminalPath: *fp, value: value.(watch_type.WatchType)}
	case WatchProjectInvitationsRequest_FieldPathSelectorParent:
		return &WatchProjectInvitationsRequest_FieldTerminalPathValue{WatchProjectInvitationsRequest_FieldTerminalPath: *fp, value: value.(*project_invitation.ParentReference)}
	case WatchProjectInvitationsRequest_FieldPathSelectorPageSize:
		return &WatchProjectInvitationsRequest_FieldTerminalPathValue{WatchProjectInvitationsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case WatchProjectInvitationsRequest_FieldPathSelectorPageToken:
		return &WatchProjectInvitationsRequest_FieldTerminalPathValue{WatchProjectInvitationsRequest_FieldTerminalPath: *fp, value: value.(*project_invitation.PagerCursor)}
	case WatchProjectInvitationsRequest_FieldPathSelectorOrderBy:
		return &WatchProjectInvitationsRequest_FieldTerminalPathValue{WatchProjectInvitationsRequest_FieldTerminalPath: *fp, value: value.(*project_invitation.OrderBy)}
	case WatchProjectInvitationsRequest_FieldPathSelectorResumeToken:
		return &WatchProjectInvitationsRequest_FieldTerminalPathValue{WatchProjectInvitationsRequest_FieldTerminalPath: *fp, value: value.(string)}
	case WatchProjectInvitationsRequest_FieldPathSelectorStartingTime:
		return &WatchProjectInvitationsRequest_FieldTerminalPathValue{WatchProjectInvitationsRequest_FieldTerminalPath: *fp, value: value.(*timestamp.Timestamp)}
	case WatchProjectInvitationsRequest_FieldPathSelectorFilter:
		return &WatchProjectInvitationsRequest_FieldTerminalPathValue{WatchProjectInvitationsRequest_FieldTerminalPath: *fp, value: value.(*project_invitation.Filter)}
	case WatchProjectInvitationsRequest_FieldPathSelectorFieldMask:
		return &WatchProjectInvitationsRequest_FieldTerminalPathValue{WatchProjectInvitationsRequest_FieldTerminalPath: *fp, value: value.(*project_invitation.ProjectInvitation_FieldMask)}
	case WatchProjectInvitationsRequest_FieldPathSelectorView:
		return &WatchProjectInvitationsRequest_FieldTerminalPathValue{WatchProjectInvitationsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	case WatchProjectInvitationsRequest_FieldPathSelectorMaxChunkSize:
		return &WatchProjectInvitationsRequest_FieldTerminalPathValue{WatchProjectInvitationsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProjectInvitationsRequest: %d", fp.selector))
	}
}

func (fp *WatchProjectInvitationsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchProjectInvitationsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchProjectInvitationsRequest_FieldPathArrayOfValues {
	fpaov := &WatchProjectInvitationsRequest_FieldTerminalPathArrayOfValues{WatchProjectInvitationsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchProjectInvitationsRequest_FieldPathSelectorType:
		return &WatchProjectInvitationsRequest_FieldTerminalPathArrayOfValues{WatchProjectInvitationsRequest_FieldTerminalPath: *fp, values: values.([]watch_type.WatchType)}
	case WatchProjectInvitationsRequest_FieldPathSelectorParent:
		return &WatchProjectInvitationsRequest_FieldTerminalPathArrayOfValues{WatchProjectInvitationsRequest_FieldTerminalPath: *fp, values: values.([]*project_invitation.ParentReference)}
	case WatchProjectInvitationsRequest_FieldPathSelectorPageSize:
		return &WatchProjectInvitationsRequest_FieldTerminalPathArrayOfValues{WatchProjectInvitationsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case WatchProjectInvitationsRequest_FieldPathSelectorPageToken:
		return &WatchProjectInvitationsRequest_FieldTerminalPathArrayOfValues{WatchProjectInvitationsRequest_FieldTerminalPath: *fp, values: values.([]*project_invitation.PagerCursor)}
	case WatchProjectInvitationsRequest_FieldPathSelectorOrderBy:
		return &WatchProjectInvitationsRequest_FieldTerminalPathArrayOfValues{WatchProjectInvitationsRequest_FieldTerminalPath: *fp, values: values.([]*project_invitation.OrderBy)}
	case WatchProjectInvitationsRequest_FieldPathSelectorResumeToken:
		return &WatchProjectInvitationsRequest_FieldTerminalPathArrayOfValues{WatchProjectInvitationsRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchProjectInvitationsRequest_FieldPathSelectorStartingTime:
		return &WatchProjectInvitationsRequest_FieldTerminalPathArrayOfValues{WatchProjectInvitationsRequest_FieldTerminalPath: *fp, values: values.([]*timestamp.Timestamp)}
	case WatchProjectInvitationsRequest_FieldPathSelectorFilter:
		return &WatchProjectInvitationsRequest_FieldTerminalPathArrayOfValues{WatchProjectInvitationsRequest_FieldTerminalPath: *fp, values: values.([]*project_invitation.Filter)}
	case WatchProjectInvitationsRequest_FieldPathSelectorFieldMask:
		return &WatchProjectInvitationsRequest_FieldTerminalPathArrayOfValues{WatchProjectInvitationsRequest_FieldTerminalPath: *fp, values: values.([]*project_invitation.ProjectInvitation_FieldMask)}
	case WatchProjectInvitationsRequest_FieldPathSelectorView:
		return &WatchProjectInvitationsRequest_FieldTerminalPathArrayOfValues{WatchProjectInvitationsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	case WatchProjectInvitationsRequest_FieldPathSelectorMaxChunkSize:
		return &WatchProjectInvitationsRequest_FieldTerminalPathArrayOfValues{WatchProjectInvitationsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProjectInvitationsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchProjectInvitationsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchProjectInvitationsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchProjectInvitationsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProjectInvitationsRequest: %d", fp.selector))
	}
}

func (fp *WatchProjectInvitationsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchProjectInvitationsRequest_FieldPathValue allows storing values for WatchProjectInvitationsRequest fields according to their type
type WatchProjectInvitationsRequest_FieldPathValue interface {
	WatchProjectInvitationsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchProjectInvitationsRequest)
	CompareWith(*WatchProjectInvitationsRequest) (cmp int, comparable bool)
}

func ParseWatchProjectInvitationsRequest_FieldPathValue(pathStr, valueStr string) (WatchProjectInvitationsRequest_FieldPathValue, error) {
	fp, err := ParseWatchProjectInvitationsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProjectInvitationsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchProjectInvitationsRequest_FieldPathValue), nil
}

func MustParseWatchProjectInvitationsRequest_FieldPathValue(pathStr, valueStr string) WatchProjectInvitationsRequest_FieldPathValue {
	fpv, err := ParseWatchProjectInvitationsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchProjectInvitationsRequest_FieldTerminalPathValue struct {
	WatchProjectInvitationsRequest_FieldTerminalPath
	value interface{}
}

var _ WatchProjectInvitationsRequest_FieldPathValue = (*WatchProjectInvitationsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchProjectInvitationsRequest' as interface{}
func (fpv *WatchProjectInvitationsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchProjectInvitationsRequest_FieldTerminalPathValue) AsTypeValue() (watch_type.WatchType, bool) {
	res, ok := fpv.value.(watch_type.WatchType)
	return res, ok
}
func (fpv *WatchProjectInvitationsRequest_FieldTerminalPathValue) AsParentValue() (*project_invitation.ParentReference, bool) {
	res, ok := fpv.value.(*project_invitation.ParentReference)
	return res, ok
}
func (fpv *WatchProjectInvitationsRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *WatchProjectInvitationsRequest_FieldTerminalPathValue) AsPageTokenValue() (*project_invitation.PagerCursor, bool) {
	res, ok := fpv.value.(*project_invitation.PagerCursor)
	return res, ok
}
func (fpv *WatchProjectInvitationsRequest_FieldTerminalPathValue) AsOrderByValue() (*project_invitation.OrderBy, bool) {
	res, ok := fpv.value.(*project_invitation.OrderBy)
	return res, ok
}
func (fpv *WatchProjectInvitationsRequest_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchProjectInvitationsRequest_FieldTerminalPathValue) AsStartingTimeValue() (*timestamp.Timestamp, bool) {
	res, ok := fpv.value.(*timestamp.Timestamp)
	return res, ok
}
func (fpv *WatchProjectInvitationsRequest_FieldTerminalPathValue) AsFilterValue() (*project_invitation.Filter, bool) {
	res, ok := fpv.value.(*project_invitation.Filter)
	return res, ok
}
func (fpv *WatchProjectInvitationsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*project_invitation.ProjectInvitation_FieldMask, bool) {
	res, ok := fpv.value.(*project_invitation.ProjectInvitation_FieldMask)
	return res, ok
}
func (fpv *WatchProjectInvitationsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}
func (fpv *WatchProjectInvitationsRequest_FieldTerminalPathValue) AsMaxChunkSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object WatchProjectInvitationsRequest
func (fpv *WatchProjectInvitationsRequest_FieldTerminalPathValue) SetTo(target **WatchProjectInvitationsRequest) {
	if *target == nil {
		*target = new(WatchProjectInvitationsRequest)
	}
	switch fpv.selector {
	case WatchProjectInvitationsRequest_FieldPathSelectorType:
		(*target).Type = fpv.value.(watch_type.WatchType)
	case WatchProjectInvitationsRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*project_invitation.ParentReference)
	case WatchProjectInvitationsRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case WatchProjectInvitationsRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*project_invitation.PagerCursor)
	case WatchProjectInvitationsRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*project_invitation.OrderBy)
	case WatchProjectInvitationsRequest_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchProjectInvitationsRequest_FieldPathSelectorStartingTime:
		(*target).StartingTime = fpv.value.(*timestamp.Timestamp)
	case WatchProjectInvitationsRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*project_invitation.Filter)
	case WatchProjectInvitationsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*project_invitation.ProjectInvitation_FieldMask)
	case WatchProjectInvitationsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	case WatchProjectInvitationsRequest_FieldPathSelectorMaxChunkSize:
		(*target).MaxChunkSize = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProjectInvitationsRequest: %d", fpv.selector))
	}
}

func (fpv *WatchProjectInvitationsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchProjectInvitationsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchProjectInvitationsRequest_FieldTerminalPathValue' with the value under path in 'WatchProjectInvitationsRequest'.
func (fpv *WatchProjectInvitationsRequest_FieldTerminalPathValue) CompareWith(source *WatchProjectInvitationsRequest) (int, bool) {
	switch fpv.selector {
	case WatchProjectInvitationsRequest_FieldPathSelectorType:
		leftValue := fpv.value.(watch_type.WatchType)
		rightValue := source.GetType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProjectInvitationsRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*project_invitation.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProjectInvitationsRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProjectInvitationsRequest_FieldPathSelectorPageToken:
		return 0, false
	case WatchProjectInvitationsRequest_FieldPathSelectorOrderBy:
		return 0, false
	case WatchProjectInvitationsRequest_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProjectInvitationsRequest_FieldPathSelectorStartingTime:
		leftValue := fpv.value.(*timestamp.Timestamp)
		rightValue := source.GetStartingTime()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.AsTime().Equal(rightValue.AsTime()) {
			return 0, true
		} else if leftValue.AsTime().Before(rightValue.AsTime()) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProjectInvitationsRequest_FieldPathSelectorFilter:
		return 0, false
	case WatchProjectInvitationsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchProjectInvitationsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProjectInvitationsRequest_FieldPathSelectorMaxChunkSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetMaxChunkSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProjectInvitationsRequest: %d", fpv.selector))
	}
}

func (fpv *WatchProjectInvitationsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchProjectInvitationsRequest))
}

// WatchProjectInvitationsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchProjectInvitationsRequest according to their type
// Present only for array (repeated) types.
type WatchProjectInvitationsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchProjectInvitationsRequest_FieldPath
	ContainsValue(*WatchProjectInvitationsRequest) bool
}

// ParseWatchProjectInvitationsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchProjectInvitationsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchProjectInvitationsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchProjectInvitationsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProjectInvitationsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchProjectInvitationsRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchProjectInvitationsRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchProjectInvitationsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchProjectInvitationsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchProjectInvitationsRequest_FieldTerminalPathArrayItemValue struct {
	WatchProjectInvitationsRequest_FieldTerminalPath
	value interface{}
}

var _ WatchProjectInvitationsRequest_FieldPathArrayItemValue = (*WatchProjectInvitationsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchProjectInvitationsRequest as interface{}
func (fpaiv *WatchProjectInvitationsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchProjectInvitationsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchProjectInvitationsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchProjectInvitationsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchProjectInvitationsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchProjectInvitationsRequest'
func (fpaiv *WatchProjectInvitationsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchProjectInvitationsRequest) bool {
	slice := fpaiv.WatchProjectInvitationsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchProjectInvitationsRequest_FieldPathArrayOfValues allows storing slice of values for WatchProjectInvitationsRequest fields according to their type
type WatchProjectInvitationsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchProjectInvitationsRequest_FieldPath
}

func ParseWatchProjectInvitationsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchProjectInvitationsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchProjectInvitationsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProjectInvitationsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchProjectInvitationsRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchProjectInvitationsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchProjectInvitationsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchProjectInvitationsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchProjectInvitationsRequest_FieldTerminalPathArrayOfValues struct {
	WatchProjectInvitationsRequest_FieldTerminalPath
	values interface{}
}

var _ WatchProjectInvitationsRequest_FieldPathArrayOfValues = (*WatchProjectInvitationsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchProjectInvitationsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchProjectInvitationsRequest_FieldPathSelectorType:
		for _, v := range fpaov.values.([]watch_type.WatchType) {
			values = append(values, v)
		}
	case WatchProjectInvitationsRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*project_invitation.ParentReference) {
			values = append(values, v)
		}
	case WatchProjectInvitationsRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case WatchProjectInvitationsRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*project_invitation.PagerCursor) {
			values = append(values, v)
		}
	case WatchProjectInvitationsRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*project_invitation.OrderBy) {
			values = append(values, v)
		}
	case WatchProjectInvitationsRequest_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchProjectInvitationsRequest_FieldPathSelectorStartingTime:
		for _, v := range fpaov.values.([]*timestamp.Timestamp) {
			values = append(values, v)
		}
	case WatchProjectInvitationsRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*project_invitation.Filter) {
			values = append(values, v)
		}
	case WatchProjectInvitationsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*project_invitation.ProjectInvitation_FieldMask) {
			values = append(values, v)
		}
	case WatchProjectInvitationsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	case WatchProjectInvitationsRequest_FieldPathSelectorMaxChunkSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchProjectInvitationsRequest_FieldTerminalPathArrayOfValues) AsTypeArrayOfValues() ([]watch_type.WatchType, bool) {
	res, ok := fpaov.values.([]watch_type.WatchType)
	return res, ok
}
func (fpaov *WatchProjectInvitationsRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*project_invitation.ParentReference, bool) {
	res, ok := fpaov.values.([]*project_invitation.ParentReference)
	return res, ok
}
func (fpaov *WatchProjectInvitationsRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *WatchProjectInvitationsRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*project_invitation.PagerCursor, bool) {
	res, ok := fpaov.values.([]*project_invitation.PagerCursor)
	return res, ok
}
func (fpaov *WatchProjectInvitationsRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*project_invitation.OrderBy, bool) {
	res, ok := fpaov.values.([]*project_invitation.OrderBy)
	return res, ok
}
func (fpaov *WatchProjectInvitationsRequest_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchProjectInvitationsRequest_FieldTerminalPathArrayOfValues) AsStartingTimeArrayOfValues() ([]*timestamp.Timestamp, bool) {
	res, ok := fpaov.values.([]*timestamp.Timestamp)
	return res, ok
}
func (fpaov *WatchProjectInvitationsRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*project_invitation.Filter, bool) {
	res, ok := fpaov.values.([]*project_invitation.Filter)
	return res, ok
}
func (fpaov *WatchProjectInvitationsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*project_invitation.ProjectInvitation_FieldMask, bool) {
	res, ok := fpaov.values.([]*project_invitation.ProjectInvitation_FieldMask)
	return res, ok
}
func (fpaov *WatchProjectInvitationsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}
func (fpaov *WatchProjectInvitationsRequest_FieldTerminalPathArrayOfValues) AsMaxChunkSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchProjectInvitationsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchProjectInvitationsResponse_FieldPathSelector
	Get(source *WatchProjectInvitationsResponse) []interface{}
	GetSingle(source *WatchProjectInvitationsResponse) (interface{}, bool)
	ClearValue(item *WatchProjectInvitationsResponse)

	// Those methods build corresponding WatchProjectInvitationsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchProjectInvitationsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchProjectInvitationsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchProjectInvitationsResponse_FieldPathArrayItemValue
}

type WatchProjectInvitationsResponse_FieldPathSelector int32

const (
	WatchProjectInvitationsResponse_FieldPathSelectorProjectInvitationChanges WatchProjectInvitationsResponse_FieldPathSelector = 0
	WatchProjectInvitationsResponse_FieldPathSelectorIsCurrent                WatchProjectInvitationsResponse_FieldPathSelector = 1
	WatchProjectInvitationsResponse_FieldPathSelectorPageTokenChange          WatchProjectInvitationsResponse_FieldPathSelector = 2
	WatchProjectInvitationsResponse_FieldPathSelectorResumeToken              WatchProjectInvitationsResponse_FieldPathSelector = 3
	WatchProjectInvitationsResponse_FieldPathSelectorSnapshotSize             WatchProjectInvitationsResponse_FieldPathSelector = 4
	WatchProjectInvitationsResponse_FieldPathSelectorIsSoftReset              WatchProjectInvitationsResponse_FieldPathSelector = 5
	WatchProjectInvitationsResponse_FieldPathSelectorIsHardReset              WatchProjectInvitationsResponse_FieldPathSelector = 6
)

func (s WatchProjectInvitationsResponse_FieldPathSelector) String() string {
	switch s {
	case WatchProjectInvitationsResponse_FieldPathSelectorProjectInvitationChanges:
		return "project_invitation_changes"
	case WatchProjectInvitationsResponse_FieldPathSelectorIsCurrent:
		return "is_current"
	case WatchProjectInvitationsResponse_FieldPathSelectorPageTokenChange:
		return "page_token_change"
	case WatchProjectInvitationsResponse_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchProjectInvitationsResponse_FieldPathSelectorSnapshotSize:
		return "snapshot_size"
	case WatchProjectInvitationsResponse_FieldPathSelectorIsSoftReset:
		return "is_soft_reset"
	case WatchProjectInvitationsResponse_FieldPathSelectorIsHardReset:
		return "is_hard_reset"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProjectInvitationsResponse: %d", s))
	}
}

func BuildWatchProjectInvitationsResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchProjectInvitationsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchProjectInvitationsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "project_invitation_changes", "projectInvitationChanges", "project-invitation-changes":
			return &WatchProjectInvitationsResponse_FieldTerminalPath{selector: WatchProjectInvitationsResponse_FieldPathSelectorProjectInvitationChanges}, nil
		case "is_current", "isCurrent", "is-current":
			return &WatchProjectInvitationsResponse_FieldTerminalPath{selector: WatchProjectInvitationsResponse_FieldPathSelectorIsCurrent}, nil
		case "page_token_change", "pageTokenChange", "page-token-change":
			return &WatchProjectInvitationsResponse_FieldTerminalPath{selector: WatchProjectInvitationsResponse_FieldPathSelectorPageTokenChange}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchProjectInvitationsResponse_FieldTerminalPath{selector: WatchProjectInvitationsResponse_FieldPathSelectorResumeToken}, nil
		case "snapshot_size", "snapshotSize", "snapshot-size":
			return &WatchProjectInvitationsResponse_FieldTerminalPath{selector: WatchProjectInvitationsResponse_FieldPathSelectorSnapshotSize}, nil
		case "is_soft_reset", "isSoftReset", "is-soft-reset":
			return &WatchProjectInvitationsResponse_FieldTerminalPath{selector: WatchProjectInvitationsResponse_FieldPathSelectorIsSoftReset}, nil
		case "is_hard_reset", "isHardReset", "is-hard-reset":
			return &WatchProjectInvitationsResponse_FieldTerminalPath{selector: WatchProjectInvitationsResponse_FieldPathSelectorIsHardReset}, nil
		}
	} else {
		switch fp[0] {
		case "page_token_change", "pageTokenChange", "page-token-change":
			if subpath, err := BuildWatchProjectInvitationsResponsePageTokenChange_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &WatchProjectInvitationsResponse_FieldSubPath{selector: WatchProjectInvitationsResponse_FieldPathSelectorPageTokenChange, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchProjectInvitationsResponse", fp)
}

func ParseWatchProjectInvitationsResponse_FieldPath(rawField string) (WatchProjectInvitationsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchProjectInvitationsResponse_FieldPath(fp)
}

func MustParseWatchProjectInvitationsResponse_FieldPath(rawField string) WatchProjectInvitationsResponse_FieldPath {
	fp, err := ParseWatchProjectInvitationsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchProjectInvitationsResponse_FieldTerminalPath struct {
	selector WatchProjectInvitationsResponse_FieldPathSelector
}

var _ WatchProjectInvitationsResponse_FieldPath = (*WatchProjectInvitationsResponse_FieldTerminalPath)(nil)

func (fp *WatchProjectInvitationsResponse_FieldTerminalPath) Selector() WatchProjectInvitationsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchProjectInvitationsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchProjectInvitationsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchProjectInvitationsResponse
func (fp *WatchProjectInvitationsResponse_FieldTerminalPath) Get(source *WatchProjectInvitationsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchProjectInvitationsResponse_FieldPathSelectorProjectInvitationChanges:
			for _, value := range source.GetProjectInvitationChanges() {
				values = append(values, value)
			}
		case WatchProjectInvitationsResponse_FieldPathSelectorIsCurrent:
			values = append(values, source.IsCurrent)
		case WatchProjectInvitationsResponse_FieldPathSelectorPageTokenChange:
			if source.PageTokenChange != nil {
				values = append(values, source.PageTokenChange)
			}
		case WatchProjectInvitationsResponse_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchProjectInvitationsResponse_FieldPathSelectorSnapshotSize:
			values = append(values, source.SnapshotSize)
		case WatchProjectInvitationsResponse_FieldPathSelectorIsSoftReset:
			values = append(values, source.IsSoftReset)
		case WatchProjectInvitationsResponse_FieldPathSelectorIsHardReset:
			values = append(values, source.IsHardReset)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProjectInvitationsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchProjectInvitationsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchProjectInvitationsResponse))
}

// GetSingle returns value pointed by specific field of from source WatchProjectInvitationsResponse
func (fp *WatchProjectInvitationsResponse_FieldTerminalPath) GetSingle(source *WatchProjectInvitationsResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchProjectInvitationsResponse_FieldPathSelectorProjectInvitationChanges:
		res := source.GetProjectInvitationChanges()
		return res, res != nil
	case WatchProjectInvitationsResponse_FieldPathSelectorIsCurrent:
		return source.GetIsCurrent(), source != nil
	case WatchProjectInvitationsResponse_FieldPathSelectorPageTokenChange:
		res := source.GetPageTokenChange()
		return res, res != nil
	case WatchProjectInvitationsResponse_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchProjectInvitationsResponse_FieldPathSelectorSnapshotSize:
		return source.GetSnapshotSize(), source != nil
	case WatchProjectInvitationsResponse_FieldPathSelectorIsSoftReset:
		return source.GetIsSoftReset(), source != nil
	case WatchProjectInvitationsResponse_FieldPathSelectorIsHardReset:
		return source.GetIsHardReset(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProjectInvitationsResponse: %d", fp.selector))
	}
}

func (fp *WatchProjectInvitationsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchProjectInvitationsResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchProjectInvitationsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchProjectInvitationsResponse_FieldPathSelectorProjectInvitationChanges:
		return ([]*project_invitation.ProjectInvitationChange)(nil)
	case WatchProjectInvitationsResponse_FieldPathSelectorIsCurrent:
		return false
	case WatchProjectInvitationsResponse_FieldPathSelectorPageTokenChange:
		return (*WatchProjectInvitationsResponse_PageTokenChange)(nil)
	case WatchProjectInvitationsResponse_FieldPathSelectorResumeToken:
		return ""
	case WatchProjectInvitationsResponse_FieldPathSelectorSnapshotSize:
		return int64(0)
	case WatchProjectInvitationsResponse_FieldPathSelectorIsSoftReset:
		return false
	case WatchProjectInvitationsResponse_FieldPathSelectorIsHardReset:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProjectInvitationsResponse: %d", fp.selector))
	}
}

func (fp *WatchProjectInvitationsResponse_FieldTerminalPath) ClearValue(item *WatchProjectInvitationsResponse) {
	if item != nil {
		switch fp.selector {
		case WatchProjectInvitationsResponse_FieldPathSelectorProjectInvitationChanges:
			item.ProjectInvitationChanges = nil
		case WatchProjectInvitationsResponse_FieldPathSelectorIsCurrent:
			item.IsCurrent = false
		case WatchProjectInvitationsResponse_FieldPathSelectorPageTokenChange:
			item.PageTokenChange = nil
		case WatchProjectInvitationsResponse_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchProjectInvitationsResponse_FieldPathSelectorSnapshotSize:
			item.SnapshotSize = int64(0)
		case WatchProjectInvitationsResponse_FieldPathSelectorIsSoftReset:
			item.IsSoftReset = false
		case WatchProjectInvitationsResponse_FieldPathSelectorIsHardReset:
			item.IsHardReset = false
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProjectInvitationsResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchProjectInvitationsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchProjectInvitationsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchProjectInvitationsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchProjectInvitationsResponse_FieldPathSelectorProjectInvitationChanges ||
		fp.selector == WatchProjectInvitationsResponse_FieldPathSelectorIsCurrent ||
		fp.selector == WatchProjectInvitationsResponse_FieldPathSelectorResumeToken ||
		fp.selector == WatchProjectInvitationsResponse_FieldPathSelectorSnapshotSize ||
		fp.selector == WatchProjectInvitationsResponse_FieldPathSelectorIsSoftReset ||
		fp.selector == WatchProjectInvitationsResponse_FieldPathSelectorIsHardReset
}

func (fp *WatchProjectInvitationsResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchProjectInvitationsResponse_FieldTerminalPath) WithIValue(value interface{}) WatchProjectInvitationsResponse_FieldPathValue {
	switch fp.selector {
	case WatchProjectInvitationsResponse_FieldPathSelectorProjectInvitationChanges:
		return &WatchProjectInvitationsResponse_FieldTerminalPathValue{WatchProjectInvitationsResponse_FieldTerminalPath: *fp, value: value.([]*project_invitation.ProjectInvitationChange)}
	case WatchProjectInvitationsResponse_FieldPathSelectorIsCurrent:
		return &WatchProjectInvitationsResponse_FieldTerminalPathValue{WatchProjectInvitationsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchProjectInvitationsResponse_FieldPathSelectorPageTokenChange:
		return &WatchProjectInvitationsResponse_FieldTerminalPathValue{WatchProjectInvitationsResponse_FieldTerminalPath: *fp, value: value.(*WatchProjectInvitationsResponse_PageTokenChange)}
	case WatchProjectInvitationsResponse_FieldPathSelectorResumeToken:
		return &WatchProjectInvitationsResponse_FieldTerminalPathValue{WatchProjectInvitationsResponse_FieldTerminalPath: *fp, value: value.(string)}
	case WatchProjectInvitationsResponse_FieldPathSelectorSnapshotSize:
		return &WatchProjectInvitationsResponse_FieldTerminalPathValue{WatchProjectInvitationsResponse_FieldTerminalPath: *fp, value: value.(int64)}
	case WatchProjectInvitationsResponse_FieldPathSelectorIsSoftReset:
		return &WatchProjectInvitationsResponse_FieldTerminalPathValue{WatchProjectInvitationsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchProjectInvitationsResponse_FieldPathSelectorIsHardReset:
		return &WatchProjectInvitationsResponse_FieldTerminalPathValue{WatchProjectInvitationsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProjectInvitationsResponse: %d", fp.selector))
	}
}

func (fp *WatchProjectInvitationsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchProjectInvitationsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchProjectInvitationsResponse_FieldPathArrayOfValues {
	fpaov := &WatchProjectInvitationsResponse_FieldTerminalPathArrayOfValues{WatchProjectInvitationsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchProjectInvitationsResponse_FieldPathSelectorProjectInvitationChanges:
		return &WatchProjectInvitationsResponse_FieldTerminalPathArrayOfValues{WatchProjectInvitationsResponse_FieldTerminalPath: *fp, values: values.([][]*project_invitation.ProjectInvitationChange)}
	case WatchProjectInvitationsResponse_FieldPathSelectorIsCurrent:
		return &WatchProjectInvitationsResponse_FieldTerminalPathArrayOfValues{WatchProjectInvitationsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchProjectInvitationsResponse_FieldPathSelectorPageTokenChange:
		return &WatchProjectInvitationsResponse_FieldTerminalPathArrayOfValues{WatchProjectInvitationsResponse_FieldTerminalPath: *fp, values: values.([]*WatchProjectInvitationsResponse_PageTokenChange)}
	case WatchProjectInvitationsResponse_FieldPathSelectorResumeToken:
		return &WatchProjectInvitationsResponse_FieldTerminalPathArrayOfValues{WatchProjectInvitationsResponse_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchProjectInvitationsResponse_FieldPathSelectorSnapshotSize:
		return &WatchProjectInvitationsResponse_FieldTerminalPathArrayOfValues{WatchProjectInvitationsResponse_FieldTerminalPath: *fp, values: values.([]int64)}
	case WatchProjectInvitationsResponse_FieldPathSelectorIsSoftReset:
		return &WatchProjectInvitationsResponse_FieldTerminalPathArrayOfValues{WatchProjectInvitationsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchProjectInvitationsResponse_FieldPathSelectorIsHardReset:
		return &WatchProjectInvitationsResponse_FieldTerminalPathArrayOfValues{WatchProjectInvitationsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProjectInvitationsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchProjectInvitationsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchProjectInvitationsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchProjectInvitationsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case WatchProjectInvitationsResponse_FieldPathSelectorProjectInvitationChanges:
		return &WatchProjectInvitationsResponse_FieldTerminalPathArrayItemValue{WatchProjectInvitationsResponse_FieldTerminalPath: *fp, value: value.(*project_invitation.ProjectInvitationChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProjectInvitationsResponse: %d", fp.selector))
	}
}

func (fp *WatchProjectInvitationsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type WatchProjectInvitationsResponse_FieldSubPath struct {
	selector WatchProjectInvitationsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ WatchProjectInvitationsResponse_FieldPath = (*WatchProjectInvitationsResponse_FieldSubPath)(nil)

func (fps *WatchProjectInvitationsResponse_FieldSubPath) Selector() WatchProjectInvitationsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *WatchProjectInvitationsResponse_FieldSubPath) AsPageTokenChangeSubPath() (WatchProjectInvitationsResponsePageTokenChange_FieldPath, bool) {
	res, ok := fps.subPath.(WatchProjectInvitationsResponsePageTokenChange_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *WatchProjectInvitationsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *WatchProjectInvitationsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source WatchProjectInvitationsResponse
func (fps *WatchProjectInvitationsResponse_FieldSubPath) Get(source *WatchProjectInvitationsResponse) (values []interface{}) {
	switch fps.selector {
	case WatchProjectInvitationsResponse_FieldPathSelectorPageTokenChange:
		values = append(values, fps.subPath.GetRaw(source.GetPageTokenChange())...)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProjectInvitationsResponse: %d", fps.selector))
	}
	return
}

func (fps *WatchProjectInvitationsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*WatchProjectInvitationsResponse))
}

// GetSingle returns value of selected field from source WatchProjectInvitationsResponse
func (fps *WatchProjectInvitationsResponse_FieldSubPath) GetSingle(source *WatchProjectInvitationsResponse) (interface{}, bool) {
	switch fps.selector {
	case WatchProjectInvitationsResponse_FieldPathSelectorPageTokenChange:
		if source.GetPageTokenChange() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProjectInvitationsResponse: %d", fps.selector))
	}
}

func (fps *WatchProjectInvitationsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*WatchProjectInvitationsResponse))
}

// GetDefault returns a default value of the field type
func (fps *WatchProjectInvitationsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *WatchProjectInvitationsResponse_FieldSubPath) ClearValue(item *WatchProjectInvitationsResponse) {
	if item != nil {
		switch fps.selector {
		case WatchProjectInvitationsResponse_FieldPathSelectorPageTokenChange:
			fps.subPath.ClearValueRaw(item.PageTokenChange)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProjectInvitationsResponse: %d", fps.selector))
		}
	}
}

func (fps *WatchProjectInvitationsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*WatchProjectInvitationsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *WatchProjectInvitationsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *WatchProjectInvitationsResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&WatchProjectInvitationsResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *WatchProjectInvitationsResponse_FieldSubPath) WithIValue(value interface{}) WatchProjectInvitationsResponse_FieldPathValue {
	return &WatchProjectInvitationsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *WatchProjectInvitationsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *WatchProjectInvitationsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) WatchProjectInvitationsResponse_FieldPathArrayOfValues {
	return &WatchProjectInvitationsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *WatchProjectInvitationsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *WatchProjectInvitationsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) WatchProjectInvitationsResponse_FieldPathArrayItemValue {
	return &WatchProjectInvitationsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *WatchProjectInvitationsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// WatchProjectInvitationsResponse_FieldPathValue allows storing values for WatchProjectInvitationsResponse fields according to their type
type WatchProjectInvitationsResponse_FieldPathValue interface {
	WatchProjectInvitationsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchProjectInvitationsResponse)
	CompareWith(*WatchProjectInvitationsResponse) (cmp int, comparable bool)
}

func ParseWatchProjectInvitationsResponse_FieldPathValue(pathStr, valueStr string) (WatchProjectInvitationsResponse_FieldPathValue, error) {
	fp, err := ParseWatchProjectInvitationsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProjectInvitationsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchProjectInvitationsResponse_FieldPathValue), nil
}

func MustParseWatchProjectInvitationsResponse_FieldPathValue(pathStr, valueStr string) WatchProjectInvitationsResponse_FieldPathValue {
	fpv, err := ParseWatchProjectInvitationsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchProjectInvitationsResponse_FieldTerminalPathValue struct {
	WatchProjectInvitationsResponse_FieldTerminalPath
	value interface{}
}

var _ WatchProjectInvitationsResponse_FieldPathValue = (*WatchProjectInvitationsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchProjectInvitationsResponse' as interface{}
func (fpv *WatchProjectInvitationsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchProjectInvitationsResponse_FieldTerminalPathValue) AsProjectInvitationChangesValue() ([]*project_invitation.ProjectInvitationChange, bool) {
	res, ok := fpv.value.([]*project_invitation.ProjectInvitationChange)
	return res, ok
}
func (fpv *WatchProjectInvitationsResponse_FieldTerminalPathValue) AsIsCurrentValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchProjectInvitationsResponse_FieldTerminalPathValue) AsPageTokenChangeValue() (*WatchProjectInvitationsResponse_PageTokenChange, bool) {
	res, ok := fpv.value.(*WatchProjectInvitationsResponse_PageTokenChange)
	return res, ok
}
func (fpv *WatchProjectInvitationsResponse_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchProjectInvitationsResponse_FieldTerminalPathValue) AsSnapshotSizeValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}
func (fpv *WatchProjectInvitationsResponse_FieldTerminalPathValue) AsIsSoftResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchProjectInvitationsResponse_FieldTerminalPathValue) AsIsHardResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object WatchProjectInvitationsResponse
func (fpv *WatchProjectInvitationsResponse_FieldTerminalPathValue) SetTo(target **WatchProjectInvitationsResponse) {
	if *target == nil {
		*target = new(WatchProjectInvitationsResponse)
	}
	switch fpv.selector {
	case WatchProjectInvitationsResponse_FieldPathSelectorProjectInvitationChanges:
		(*target).ProjectInvitationChanges = fpv.value.([]*project_invitation.ProjectInvitationChange)
	case WatchProjectInvitationsResponse_FieldPathSelectorIsCurrent:
		(*target).IsCurrent = fpv.value.(bool)
	case WatchProjectInvitationsResponse_FieldPathSelectorPageTokenChange:
		(*target).PageTokenChange = fpv.value.(*WatchProjectInvitationsResponse_PageTokenChange)
	case WatchProjectInvitationsResponse_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchProjectInvitationsResponse_FieldPathSelectorSnapshotSize:
		(*target).SnapshotSize = fpv.value.(int64)
	case WatchProjectInvitationsResponse_FieldPathSelectorIsSoftReset:
		(*target).IsSoftReset = fpv.value.(bool)
	case WatchProjectInvitationsResponse_FieldPathSelectorIsHardReset:
		(*target).IsHardReset = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProjectInvitationsResponse: %d", fpv.selector))
	}
}

func (fpv *WatchProjectInvitationsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchProjectInvitationsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchProjectInvitationsResponse_FieldTerminalPathValue' with the value under path in 'WatchProjectInvitationsResponse'.
func (fpv *WatchProjectInvitationsResponse_FieldTerminalPathValue) CompareWith(source *WatchProjectInvitationsResponse) (int, bool) {
	switch fpv.selector {
	case WatchProjectInvitationsResponse_FieldPathSelectorProjectInvitationChanges:
		return 0, false
	case WatchProjectInvitationsResponse_FieldPathSelectorIsCurrent:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsCurrent()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProjectInvitationsResponse_FieldPathSelectorPageTokenChange:
		return 0, false
	case WatchProjectInvitationsResponse_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProjectInvitationsResponse_FieldPathSelectorSnapshotSize:
		leftValue := fpv.value.(int64)
		rightValue := source.GetSnapshotSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProjectInvitationsResponse_FieldPathSelectorIsSoftReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsSoftReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProjectInvitationsResponse_FieldPathSelectorIsHardReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsHardReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProjectInvitationsResponse: %d", fpv.selector))
	}
}

func (fpv *WatchProjectInvitationsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchProjectInvitationsResponse))
}

type WatchProjectInvitationsResponse_FieldSubPathValue struct {
	WatchProjectInvitationsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ WatchProjectInvitationsResponse_FieldPathValue = (*WatchProjectInvitationsResponse_FieldSubPathValue)(nil)

func (fpvs *WatchProjectInvitationsResponse_FieldSubPathValue) AsPageTokenChangePathValue() (WatchProjectInvitationsResponsePageTokenChange_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(WatchProjectInvitationsResponsePageTokenChange_FieldPathValue)
	return res, ok
}

func (fpvs *WatchProjectInvitationsResponse_FieldSubPathValue) SetTo(target **WatchProjectInvitationsResponse) {
	if *target == nil {
		*target = new(WatchProjectInvitationsResponse)
	}
	switch fpvs.Selector() {
	case WatchProjectInvitationsResponse_FieldPathSelectorPageTokenChange:
		fpvs.subPathValue.(WatchProjectInvitationsResponsePageTokenChange_FieldPathValue).SetTo(&(*target).PageTokenChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProjectInvitationsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchProjectInvitationsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchProjectInvitationsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *WatchProjectInvitationsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *WatchProjectInvitationsResponse_FieldSubPathValue) CompareWith(source *WatchProjectInvitationsResponse) (int, bool) {
	switch fpvs.Selector() {
	case WatchProjectInvitationsResponse_FieldPathSelectorPageTokenChange:
		return fpvs.subPathValue.(WatchProjectInvitationsResponsePageTokenChange_FieldPathValue).CompareWith(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProjectInvitationsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchProjectInvitationsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*WatchProjectInvitationsResponse))
}

// WatchProjectInvitationsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchProjectInvitationsResponse according to their type
// Present only for array (repeated) types.
type WatchProjectInvitationsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchProjectInvitationsResponse_FieldPath
	ContainsValue(*WatchProjectInvitationsResponse) bool
}

// ParseWatchProjectInvitationsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchProjectInvitationsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchProjectInvitationsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchProjectInvitationsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProjectInvitationsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchProjectInvitationsResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchProjectInvitationsResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchProjectInvitationsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchProjectInvitationsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchProjectInvitationsResponse_FieldTerminalPathArrayItemValue struct {
	WatchProjectInvitationsResponse_FieldTerminalPath
	value interface{}
}

var _ WatchProjectInvitationsResponse_FieldPathArrayItemValue = (*WatchProjectInvitationsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchProjectInvitationsResponse as interface{}
func (fpaiv *WatchProjectInvitationsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *WatchProjectInvitationsResponse_FieldTerminalPathArrayItemValue) AsProjectInvitationChangesItemValue() (*project_invitation.ProjectInvitationChange, bool) {
	res, ok := fpaiv.value.(*project_invitation.ProjectInvitationChange)
	return res, ok
}

func (fpaiv *WatchProjectInvitationsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchProjectInvitationsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchProjectInvitationsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchProjectInvitationsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchProjectInvitationsResponse'
func (fpaiv *WatchProjectInvitationsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchProjectInvitationsResponse) bool {
	slice := fpaiv.WatchProjectInvitationsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type WatchProjectInvitationsResponse_FieldSubPathArrayItemValue struct {
	WatchProjectInvitationsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *WatchProjectInvitationsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *WatchProjectInvitationsResponse_FieldSubPathArrayItemValue) AsPageTokenChangePathItemValue() (WatchProjectInvitationsResponsePageTokenChange_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(WatchProjectInvitationsResponsePageTokenChange_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchProjectInvitationsResponse'
func (fpaivs *WatchProjectInvitationsResponse_FieldSubPathArrayItemValue) ContainsValue(source *WatchProjectInvitationsResponse) bool {
	switch fpaivs.Selector() {
	case WatchProjectInvitationsResponse_FieldPathSelectorPageTokenChange:
		return fpaivs.subPathItemValue.(WatchProjectInvitationsResponsePageTokenChange_FieldPathArrayItemValue).ContainsValue(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProjectInvitationsResponse: %d", fpaivs.Selector()))
	}
}

// WatchProjectInvitationsResponse_FieldPathArrayOfValues allows storing slice of values for WatchProjectInvitationsResponse fields according to their type
type WatchProjectInvitationsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchProjectInvitationsResponse_FieldPath
}

func ParseWatchProjectInvitationsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchProjectInvitationsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchProjectInvitationsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProjectInvitationsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchProjectInvitationsResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchProjectInvitationsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchProjectInvitationsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchProjectInvitationsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchProjectInvitationsResponse_FieldTerminalPathArrayOfValues struct {
	WatchProjectInvitationsResponse_FieldTerminalPath
	values interface{}
}

var _ WatchProjectInvitationsResponse_FieldPathArrayOfValues = (*WatchProjectInvitationsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchProjectInvitationsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchProjectInvitationsResponse_FieldPathSelectorProjectInvitationChanges:
		for _, v := range fpaov.values.([][]*project_invitation.ProjectInvitationChange) {
			values = append(values, v)
		}
	case WatchProjectInvitationsResponse_FieldPathSelectorIsCurrent:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchProjectInvitationsResponse_FieldPathSelectorPageTokenChange:
		for _, v := range fpaov.values.([]*WatchProjectInvitationsResponse_PageTokenChange) {
			values = append(values, v)
		}
	case WatchProjectInvitationsResponse_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchProjectInvitationsResponse_FieldPathSelectorSnapshotSize:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	case WatchProjectInvitationsResponse_FieldPathSelectorIsSoftReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchProjectInvitationsResponse_FieldPathSelectorIsHardReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchProjectInvitationsResponse_FieldTerminalPathArrayOfValues) AsProjectInvitationChangesArrayOfValues() ([][]*project_invitation.ProjectInvitationChange, bool) {
	res, ok := fpaov.values.([][]*project_invitation.ProjectInvitationChange)
	return res, ok
}
func (fpaov *WatchProjectInvitationsResponse_FieldTerminalPathArrayOfValues) AsIsCurrentArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchProjectInvitationsResponse_FieldTerminalPathArrayOfValues) AsPageTokenChangeArrayOfValues() ([]*WatchProjectInvitationsResponse_PageTokenChange, bool) {
	res, ok := fpaov.values.([]*WatchProjectInvitationsResponse_PageTokenChange)
	return res, ok
}
func (fpaov *WatchProjectInvitationsResponse_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchProjectInvitationsResponse_FieldTerminalPathArrayOfValues) AsSnapshotSizeArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}
func (fpaov *WatchProjectInvitationsResponse_FieldTerminalPathArrayOfValues) AsIsSoftResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchProjectInvitationsResponse_FieldTerminalPathArrayOfValues) AsIsHardResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

type WatchProjectInvitationsResponse_FieldSubPathArrayOfValues struct {
	WatchProjectInvitationsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ WatchProjectInvitationsResponse_FieldPathArrayOfValues = (*WatchProjectInvitationsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *WatchProjectInvitationsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *WatchProjectInvitationsResponse_FieldSubPathArrayOfValues) AsPageTokenChangePathArrayOfValues() (WatchProjectInvitationsResponsePageTokenChange_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(WatchProjectInvitationsResponsePageTokenChange_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchProjectInvitationsResponsePageTokenChange_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchProjectInvitationsResponsePageTokenChange_FieldPathSelector
	Get(source *WatchProjectInvitationsResponse_PageTokenChange) []interface{}
	GetSingle(source *WatchProjectInvitationsResponse_PageTokenChange) (interface{}, bool)
	ClearValue(item *WatchProjectInvitationsResponse_PageTokenChange)

	// Those methods build corresponding WatchProjectInvitationsResponsePageTokenChange_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchProjectInvitationsResponsePageTokenChange_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchProjectInvitationsResponsePageTokenChange_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchProjectInvitationsResponsePageTokenChange_FieldPathArrayItemValue
}

type WatchProjectInvitationsResponsePageTokenChange_FieldPathSelector int32

const (
	WatchProjectInvitationsResponsePageTokenChange_FieldPathSelectorPrevPageToken WatchProjectInvitationsResponsePageTokenChange_FieldPathSelector = 0
	WatchProjectInvitationsResponsePageTokenChange_FieldPathSelectorNextPageToken WatchProjectInvitationsResponsePageTokenChange_FieldPathSelector = 1
)

func (s WatchProjectInvitationsResponsePageTokenChange_FieldPathSelector) String() string {
	switch s {
	case WatchProjectInvitationsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case WatchProjectInvitationsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProjectInvitationsResponse_PageTokenChange: %d", s))
	}
}

func BuildWatchProjectInvitationsResponsePageTokenChange_FieldPath(fp gotenobject.RawFieldPath) (WatchProjectInvitationsResponsePageTokenChange_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchProjectInvitationsResponse_PageTokenChange")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &WatchProjectInvitationsResponsePageTokenChange_FieldTerminalPath{selector: WatchProjectInvitationsResponsePageTokenChange_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &WatchProjectInvitationsResponsePageTokenChange_FieldTerminalPath{selector: WatchProjectInvitationsResponsePageTokenChange_FieldPathSelectorNextPageToken}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchProjectInvitationsResponse_PageTokenChange", fp)
}

func ParseWatchProjectInvitationsResponsePageTokenChange_FieldPath(rawField string) (WatchProjectInvitationsResponsePageTokenChange_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchProjectInvitationsResponsePageTokenChange_FieldPath(fp)
}

func MustParseWatchProjectInvitationsResponsePageTokenChange_FieldPath(rawField string) WatchProjectInvitationsResponsePageTokenChange_FieldPath {
	fp, err := ParseWatchProjectInvitationsResponsePageTokenChange_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchProjectInvitationsResponsePageTokenChange_FieldTerminalPath struct {
	selector WatchProjectInvitationsResponsePageTokenChange_FieldPathSelector
}

var _ WatchProjectInvitationsResponsePageTokenChange_FieldPath = (*WatchProjectInvitationsResponsePageTokenChange_FieldTerminalPath)(nil)

func (fp *WatchProjectInvitationsResponsePageTokenChange_FieldTerminalPath) Selector() WatchProjectInvitationsResponsePageTokenChange_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchProjectInvitationsResponsePageTokenChange_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchProjectInvitationsResponsePageTokenChange_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchProjectInvitationsResponse_PageTokenChange
func (fp *WatchProjectInvitationsResponsePageTokenChange_FieldTerminalPath) Get(source *WatchProjectInvitationsResponse_PageTokenChange) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchProjectInvitationsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case WatchProjectInvitationsResponsePageTokenChange_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProjectInvitationsResponse_PageTokenChange: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchProjectInvitationsResponsePageTokenChange_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchProjectInvitationsResponse_PageTokenChange))
}

// GetSingle returns value pointed by specific field of from source WatchProjectInvitationsResponse_PageTokenChange
func (fp *WatchProjectInvitationsResponsePageTokenChange_FieldTerminalPath) GetSingle(source *WatchProjectInvitationsResponse_PageTokenChange) (interface{}, bool) {
	switch fp.selector {
	case WatchProjectInvitationsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case WatchProjectInvitationsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProjectInvitationsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchProjectInvitationsResponsePageTokenChange_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchProjectInvitationsResponse_PageTokenChange))
}

// GetDefault returns a default value of the field type
func (fp *WatchProjectInvitationsResponsePageTokenChange_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchProjectInvitationsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return (*project_invitation.PagerCursor)(nil)
	case WatchProjectInvitationsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return (*project_invitation.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProjectInvitationsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchProjectInvitationsResponsePageTokenChange_FieldTerminalPath) ClearValue(item *WatchProjectInvitationsResponse_PageTokenChange) {
	if item != nil {
		switch fp.selector {
		case WatchProjectInvitationsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case WatchProjectInvitationsResponsePageTokenChange_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProjectInvitationsResponse_PageTokenChange: %d", fp.selector))
		}
	}
}

func (fp *WatchProjectInvitationsResponsePageTokenChange_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchProjectInvitationsResponse_PageTokenChange))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchProjectInvitationsResponsePageTokenChange_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchProjectInvitationsResponsePageTokenChange_FieldPathSelectorPrevPageToken ||
		fp.selector == WatchProjectInvitationsResponsePageTokenChange_FieldPathSelectorNextPageToken
}

func (fp *WatchProjectInvitationsResponsePageTokenChange_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchProjectInvitationsResponsePageTokenChange_FieldTerminalPath) WithIValue(value interface{}) WatchProjectInvitationsResponsePageTokenChange_FieldPathValue {
	switch fp.selector {
	case WatchProjectInvitationsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchProjectInvitationsResponsePageTokenChange_FieldTerminalPathValue{WatchProjectInvitationsResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*project_invitation.PagerCursor)}
	case WatchProjectInvitationsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchProjectInvitationsResponsePageTokenChange_FieldTerminalPathValue{WatchProjectInvitationsResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*project_invitation.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProjectInvitationsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchProjectInvitationsResponsePageTokenChange_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchProjectInvitationsResponsePageTokenChange_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchProjectInvitationsResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov := &WatchProjectInvitationsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchProjectInvitationsResponsePageTokenChange_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchProjectInvitationsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchProjectInvitationsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchProjectInvitationsResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*project_invitation.PagerCursor)}
	case WatchProjectInvitationsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchProjectInvitationsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchProjectInvitationsResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*project_invitation.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProjectInvitationsResponse_PageTokenChange: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchProjectInvitationsResponsePageTokenChange_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchProjectInvitationsResponsePageTokenChange_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchProjectInvitationsResponsePageTokenChange_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProjectInvitationsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchProjectInvitationsResponsePageTokenChange_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchProjectInvitationsResponsePageTokenChange_FieldPathValue allows storing values for PageTokenChange fields according to their type
type WatchProjectInvitationsResponsePageTokenChange_FieldPathValue interface {
	WatchProjectInvitationsResponsePageTokenChange_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchProjectInvitationsResponse_PageTokenChange)
	CompareWith(*WatchProjectInvitationsResponse_PageTokenChange) (cmp int, comparable bool)
}

func ParseWatchProjectInvitationsResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) (WatchProjectInvitationsResponsePageTokenChange_FieldPathValue, error) {
	fp, err := ParseWatchProjectInvitationsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchProjectInvitationsResponsePageTokenChange_FieldPathValue), nil
}

func MustParseWatchProjectInvitationsResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) WatchProjectInvitationsResponsePageTokenChange_FieldPathValue {
	fpv, err := ParseWatchProjectInvitationsResponsePageTokenChange_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchProjectInvitationsResponsePageTokenChange_FieldTerminalPathValue struct {
	WatchProjectInvitationsResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchProjectInvitationsResponsePageTokenChange_FieldPathValue = (*WatchProjectInvitationsResponsePageTokenChange_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'PageTokenChange' as interface{}
func (fpv *WatchProjectInvitationsResponsePageTokenChange_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchProjectInvitationsResponsePageTokenChange_FieldTerminalPathValue) AsPrevPageTokenValue() (*project_invitation.PagerCursor, bool) {
	res, ok := fpv.value.(*project_invitation.PagerCursor)
	return res, ok
}
func (fpv *WatchProjectInvitationsResponsePageTokenChange_FieldTerminalPathValue) AsNextPageTokenValue() (*project_invitation.PagerCursor, bool) {
	res, ok := fpv.value.(*project_invitation.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object PageTokenChange
func (fpv *WatchProjectInvitationsResponsePageTokenChange_FieldTerminalPathValue) SetTo(target **WatchProjectInvitationsResponse_PageTokenChange) {
	if *target == nil {
		*target = new(WatchProjectInvitationsResponse_PageTokenChange)
	}
	switch fpv.selector {
	case WatchProjectInvitationsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*project_invitation.PagerCursor)
	case WatchProjectInvitationsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*project_invitation.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProjectInvitationsResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchProjectInvitationsResponsePageTokenChange_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchProjectInvitationsResponse_PageTokenChange)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchProjectInvitationsResponsePageTokenChange_FieldTerminalPathValue' with the value under path in 'WatchProjectInvitationsResponse_PageTokenChange'.
func (fpv *WatchProjectInvitationsResponsePageTokenChange_FieldTerminalPathValue) CompareWith(source *WatchProjectInvitationsResponse_PageTokenChange) (int, bool) {
	switch fpv.selector {
	case WatchProjectInvitationsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return 0, false
	case WatchProjectInvitationsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProjectInvitationsResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchProjectInvitationsResponsePageTokenChange_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchProjectInvitationsResponse_PageTokenChange))
}

// WatchProjectInvitationsResponsePageTokenChange_FieldPathArrayItemValue allows storing single item in Path-specific values for PageTokenChange according to their type
// Present only for array (repeated) types.
type WatchProjectInvitationsResponsePageTokenChange_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchProjectInvitationsResponsePageTokenChange_FieldPath
	ContainsValue(*WatchProjectInvitationsResponse_PageTokenChange) bool
}

// ParseWatchProjectInvitationsResponsePageTokenChange_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchProjectInvitationsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) (WatchProjectInvitationsResponsePageTokenChange_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchProjectInvitationsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchProjectInvitationsResponsePageTokenChange_FieldPathArrayItemValue), nil
}

func MustParseWatchProjectInvitationsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) WatchProjectInvitationsResponsePageTokenChange_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchProjectInvitationsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchProjectInvitationsResponsePageTokenChange_FieldTerminalPathArrayItemValue struct {
	WatchProjectInvitationsResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchProjectInvitationsResponsePageTokenChange_FieldPathArrayItemValue = (*WatchProjectInvitationsResponsePageTokenChange_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchProjectInvitationsResponse_PageTokenChange as interface{}
func (fpaiv *WatchProjectInvitationsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchProjectInvitationsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingle(source *WatchProjectInvitationsResponse_PageTokenChange) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchProjectInvitationsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchProjectInvitationsResponse_PageTokenChange))
}

// Contains returns a boolean indicating if value that is being held is present in given 'PageTokenChange'
func (fpaiv *WatchProjectInvitationsResponsePageTokenChange_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchProjectInvitationsResponse_PageTokenChange) bool {
	slice := fpaiv.WatchProjectInvitationsResponsePageTokenChange_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchProjectInvitationsResponsePageTokenChange_FieldPathArrayOfValues allows storing slice of values for PageTokenChange fields according to their type
type WatchProjectInvitationsResponsePageTokenChange_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchProjectInvitationsResponsePageTokenChange_FieldPath
}

func ParseWatchProjectInvitationsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchProjectInvitationsResponsePageTokenChange_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchProjectInvitationsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchProjectInvitationsResponsePageTokenChange_FieldPathArrayOfValues), nil
}

func MustParseWatchProjectInvitationsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) WatchProjectInvitationsResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov, err := ParseWatchProjectInvitationsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchProjectInvitationsResponsePageTokenChange_FieldTerminalPathArrayOfValues struct {
	WatchProjectInvitationsResponsePageTokenChange_FieldTerminalPath
	values interface{}
}

var _ WatchProjectInvitationsResponsePageTokenChange_FieldPathArrayOfValues = (*WatchProjectInvitationsResponsePageTokenChange_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchProjectInvitationsResponsePageTokenChange_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchProjectInvitationsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*project_invitation.PagerCursor) {
			values = append(values, v)
		}
	case WatchProjectInvitationsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*project_invitation.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchProjectInvitationsResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*project_invitation.PagerCursor, bool) {
	res, ok := fpaov.values.([]*project_invitation.PagerCursor)
	return res, ok
}
func (fpaov *WatchProjectInvitationsResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*project_invitation.PagerCursor, bool) {
	res, ok := fpaov.values.([]*project_invitation.PagerCursor)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type CreateProjectInvitationRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() CreateProjectInvitationRequest_FieldPathSelector
	Get(source *CreateProjectInvitationRequest) []interface{}
	GetSingle(source *CreateProjectInvitationRequest) (interface{}, bool)
	ClearValue(item *CreateProjectInvitationRequest)

	// Those methods build corresponding CreateProjectInvitationRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) CreateProjectInvitationRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) CreateProjectInvitationRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) CreateProjectInvitationRequest_FieldPathArrayItemValue
}

type CreateProjectInvitationRequest_FieldPathSelector int32

const (
	CreateProjectInvitationRequest_FieldPathSelectorParent            CreateProjectInvitationRequest_FieldPathSelector = 0
	CreateProjectInvitationRequest_FieldPathSelectorProjectInvitation CreateProjectInvitationRequest_FieldPathSelector = 1
)

func (s CreateProjectInvitationRequest_FieldPathSelector) String() string {
	switch s {
	case CreateProjectInvitationRequest_FieldPathSelectorParent:
		return "parent"
	case CreateProjectInvitationRequest_FieldPathSelectorProjectInvitation:
		return "project_invitation"
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProjectInvitationRequest: %d", s))
	}
}

func BuildCreateProjectInvitationRequest_FieldPath(fp gotenobject.RawFieldPath) (CreateProjectInvitationRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object CreateProjectInvitationRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &CreateProjectInvitationRequest_FieldTerminalPath{selector: CreateProjectInvitationRequest_FieldPathSelectorParent}, nil
		case "project_invitation", "projectInvitation", "project-invitation":
			return &CreateProjectInvitationRequest_FieldTerminalPath{selector: CreateProjectInvitationRequest_FieldPathSelectorProjectInvitation}, nil
		}
	} else {
		switch fp[0] {
		case "project_invitation", "projectInvitation", "project-invitation":
			if subpath, err := project_invitation.BuildProjectInvitation_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &CreateProjectInvitationRequest_FieldSubPath{selector: CreateProjectInvitationRequest_FieldPathSelectorProjectInvitation, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object CreateProjectInvitationRequest", fp)
}

func ParseCreateProjectInvitationRequest_FieldPath(rawField string) (CreateProjectInvitationRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildCreateProjectInvitationRequest_FieldPath(fp)
}

func MustParseCreateProjectInvitationRequest_FieldPath(rawField string) CreateProjectInvitationRequest_FieldPath {
	fp, err := ParseCreateProjectInvitationRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type CreateProjectInvitationRequest_FieldTerminalPath struct {
	selector CreateProjectInvitationRequest_FieldPathSelector
}

var _ CreateProjectInvitationRequest_FieldPath = (*CreateProjectInvitationRequest_FieldTerminalPath)(nil)

func (fp *CreateProjectInvitationRequest_FieldTerminalPath) Selector() CreateProjectInvitationRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *CreateProjectInvitationRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *CreateProjectInvitationRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source CreateProjectInvitationRequest
func (fp *CreateProjectInvitationRequest_FieldTerminalPath) Get(source *CreateProjectInvitationRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case CreateProjectInvitationRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case CreateProjectInvitationRequest_FieldPathSelectorProjectInvitation:
			if source.ProjectInvitation != nil {
				values = append(values, source.ProjectInvitation)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for CreateProjectInvitationRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *CreateProjectInvitationRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*CreateProjectInvitationRequest))
}

// GetSingle returns value pointed by specific field of from source CreateProjectInvitationRequest
func (fp *CreateProjectInvitationRequest_FieldTerminalPath) GetSingle(source *CreateProjectInvitationRequest) (interface{}, bool) {
	switch fp.selector {
	case CreateProjectInvitationRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case CreateProjectInvitationRequest_FieldPathSelectorProjectInvitation:
		res := source.GetProjectInvitation()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProjectInvitationRequest: %d", fp.selector))
	}
}

func (fp *CreateProjectInvitationRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*CreateProjectInvitationRequest))
}

// GetDefault returns a default value of the field type
func (fp *CreateProjectInvitationRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case CreateProjectInvitationRequest_FieldPathSelectorParent:
		return (*project_invitation.ParentReference)(nil)
	case CreateProjectInvitationRequest_FieldPathSelectorProjectInvitation:
		return (*project_invitation.ProjectInvitation)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProjectInvitationRequest: %d", fp.selector))
	}
}

func (fp *CreateProjectInvitationRequest_FieldTerminalPath) ClearValue(item *CreateProjectInvitationRequest) {
	if item != nil {
		switch fp.selector {
		case CreateProjectInvitationRequest_FieldPathSelectorParent:
			item.Parent = nil
		case CreateProjectInvitationRequest_FieldPathSelectorProjectInvitation:
			item.ProjectInvitation = nil
		default:
			panic(fmt.Sprintf("Invalid selector for CreateProjectInvitationRequest: %d", fp.selector))
		}
	}
}

func (fp *CreateProjectInvitationRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*CreateProjectInvitationRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *CreateProjectInvitationRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == CreateProjectInvitationRequest_FieldPathSelectorParent
}

func (fp *CreateProjectInvitationRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *CreateProjectInvitationRequest_FieldTerminalPath) WithIValue(value interface{}) CreateProjectInvitationRequest_FieldPathValue {
	switch fp.selector {
	case CreateProjectInvitationRequest_FieldPathSelectorParent:
		return &CreateProjectInvitationRequest_FieldTerminalPathValue{CreateProjectInvitationRequest_FieldTerminalPath: *fp, value: value.(*project_invitation.ParentReference)}
	case CreateProjectInvitationRequest_FieldPathSelectorProjectInvitation:
		return &CreateProjectInvitationRequest_FieldTerminalPathValue{CreateProjectInvitationRequest_FieldTerminalPath: *fp, value: value.(*project_invitation.ProjectInvitation)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProjectInvitationRequest: %d", fp.selector))
	}
}

func (fp *CreateProjectInvitationRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *CreateProjectInvitationRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) CreateProjectInvitationRequest_FieldPathArrayOfValues {
	fpaov := &CreateProjectInvitationRequest_FieldTerminalPathArrayOfValues{CreateProjectInvitationRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case CreateProjectInvitationRequest_FieldPathSelectorParent:
		return &CreateProjectInvitationRequest_FieldTerminalPathArrayOfValues{CreateProjectInvitationRequest_FieldTerminalPath: *fp, values: values.([]*project_invitation.ParentReference)}
	case CreateProjectInvitationRequest_FieldPathSelectorProjectInvitation:
		return &CreateProjectInvitationRequest_FieldTerminalPathArrayOfValues{CreateProjectInvitationRequest_FieldTerminalPath: *fp, values: values.([]*project_invitation.ProjectInvitation)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProjectInvitationRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *CreateProjectInvitationRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *CreateProjectInvitationRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) CreateProjectInvitationRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProjectInvitationRequest: %d", fp.selector))
	}
}

func (fp *CreateProjectInvitationRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type CreateProjectInvitationRequest_FieldSubPath struct {
	selector CreateProjectInvitationRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ CreateProjectInvitationRequest_FieldPath = (*CreateProjectInvitationRequest_FieldSubPath)(nil)

func (fps *CreateProjectInvitationRequest_FieldSubPath) Selector() CreateProjectInvitationRequest_FieldPathSelector {
	return fps.selector
}
func (fps *CreateProjectInvitationRequest_FieldSubPath) AsProjectInvitationSubPath() (project_invitation.ProjectInvitation_FieldPath, bool) {
	res, ok := fps.subPath.(project_invitation.ProjectInvitation_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *CreateProjectInvitationRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *CreateProjectInvitationRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source CreateProjectInvitationRequest
func (fps *CreateProjectInvitationRequest_FieldSubPath) Get(source *CreateProjectInvitationRequest) (values []interface{}) {
	switch fps.selector {
	case CreateProjectInvitationRequest_FieldPathSelectorProjectInvitation:
		values = append(values, fps.subPath.GetRaw(source.GetProjectInvitation())...)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProjectInvitationRequest: %d", fps.selector))
	}
	return
}

func (fps *CreateProjectInvitationRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*CreateProjectInvitationRequest))
}

// GetSingle returns value of selected field from source CreateProjectInvitationRequest
func (fps *CreateProjectInvitationRequest_FieldSubPath) GetSingle(source *CreateProjectInvitationRequest) (interface{}, bool) {
	switch fps.selector {
	case CreateProjectInvitationRequest_FieldPathSelectorProjectInvitation:
		if source.GetProjectInvitation() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetProjectInvitation())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProjectInvitationRequest: %d", fps.selector))
	}
}

func (fps *CreateProjectInvitationRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*CreateProjectInvitationRequest))
}

// GetDefault returns a default value of the field type
func (fps *CreateProjectInvitationRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *CreateProjectInvitationRequest_FieldSubPath) ClearValue(item *CreateProjectInvitationRequest) {
	if item != nil {
		switch fps.selector {
		case CreateProjectInvitationRequest_FieldPathSelectorProjectInvitation:
			fps.subPath.ClearValueRaw(item.ProjectInvitation)
		default:
			panic(fmt.Sprintf("Invalid selector for CreateProjectInvitationRequest: %d", fps.selector))
		}
	}
}

func (fps *CreateProjectInvitationRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*CreateProjectInvitationRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *CreateProjectInvitationRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *CreateProjectInvitationRequest_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&CreateProjectInvitationRequest_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *CreateProjectInvitationRequest_FieldSubPath) WithIValue(value interface{}) CreateProjectInvitationRequest_FieldPathValue {
	return &CreateProjectInvitationRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *CreateProjectInvitationRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *CreateProjectInvitationRequest_FieldSubPath) WithIArrayOfValues(values interface{}) CreateProjectInvitationRequest_FieldPathArrayOfValues {
	return &CreateProjectInvitationRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *CreateProjectInvitationRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *CreateProjectInvitationRequest_FieldSubPath) WithIArrayItemValue(value interface{}) CreateProjectInvitationRequest_FieldPathArrayItemValue {
	return &CreateProjectInvitationRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *CreateProjectInvitationRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// CreateProjectInvitationRequest_FieldPathValue allows storing values for CreateProjectInvitationRequest fields according to their type
type CreateProjectInvitationRequest_FieldPathValue interface {
	CreateProjectInvitationRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **CreateProjectInvitationRequest)
	CompareWith(*CreateProjectInvitationRequest) (cmp int, comparable bool)
}

func ParseCreateProjectInvitationRequest_FieldPathValue(pathStr, valueStr string) (CreateProjectInvitationRequest_FieldPathValue, error) {
	fp, err := ParseCreateProjectInvitationRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateProjectInvitationRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(CreateProjectInvitationRequest_FieldPathValue), nil
}

func MustParseCreateProjectInvitationRequest_FieldPathValue(pathStr, valueStr string) CreateProjectInvitationRequest_FieldPathValue {
	fpv, err := ParseCreateProjectInvitationRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type CreateProjectInvitationRequest_FieldTerminalPathValue struct {
	CreateProjectInvitationRequest_FieldTerminalPath
	value interface{}
}

var _ CreateProjectInvitationRequest_FieldPathValue = (*CreateProjectInvitationRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CreateProjectInvitationRequest' as interface{}
func (fpv *CreateProjectInvitationRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *CreateProjectInvitationRequest_FieldTerminalPathValue) AsParentValue() (*project_invitation.ParentReference, bool) {
	res, ok := fpv.value.(*project_invitation.ParentReference)
	return res, ok
}
func (fpv *CreateProjectInvitationRequest_FieldTerminalPathValue) AsProjectInvitationValue() (*project_invitation.ProjectInvitation, bool) {
	res, ok := fpv.value.(*project_invitation.ProjectInvitation)
	return res, ok
}

// SetTo stores value for selected field for object CreateProjectInvitationRequest
func (fpv *CreateProjectInvitationRequest_FieldTerminalPathValue) SetTo(target **CreateProjectInvitationRequest) {
	if *target == nil {
		*target = new(CreateProjectInvitationRequest)
	}
	switch fpv.selector {
	case CreateProjectInvitationRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*project_invitation.ParentReference)
	case CreateProjectInvitationRequest_FieldPathSelectorProjectInvitation:
		(*target).ProjectInvitation = fpv.value.(*project_invitation.ProjectInvitation)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProjectInvitationRequest: %d", fpv.selector))
	}
}

func (fpv *CreateProjectInvitationRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateProjectInvitationRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'CreateProjectInvitationRequest_FieldTerminalPathValue' with the value under path in 'CreateProjectInvitationRequest'.
func (fpv *CreateProjectInvitationRequest_FieldTerminalPathValue) CompareWith(source *CreateProjectInvitationRequest) (int, bool) {
	switch fpv.selector {
	case CreateProjectInvitationRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*project_invitation.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case CreateProjectInvitationRequest_FieldPathSelectorProjectInvitation:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProjectInvitationRequest: %d", fpv.selector))
	}
}

func (fpv *CreateProjectInvitationRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*CreateProjectInvitationRequest))
}

type CreateProjectInvitationRequest_FieldSubPathValue struct {
	CreateProjectInvitationRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ CreateProjectInvitationRequest_FieldPathValue = (*CreateProjectInvitationRequest_FieldSubPathValue)(nil)

func (fpvs *CreateProjectInvitationRequest_FieldSubPathValue) AsProjectInvitationPathValue() (project_invitation.ProjectInvitation_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(project_invitation.ProjectInvitation_FieldPathValue)
	return res, ok
}

func (fpvs *CreateProjectInvitationRequest_FieldSubPathValue) SetTo(target **CreateProjectInvitationRequest) {
	if *target == nil {
		*target = new(CreateProjectInvitationRequest)
	}
	switch fpvs.Selector() {
	case CreateProjectInvitationRequest_FieldPathSelectorProjectInvitation:
		fpvs.subPathValue.(project_invitation.ProjectInvitation_FieldPathValue).SetTo(&(*target).ProjectInvitation)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProjectInvitationRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateProjectInvitationRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateProjectInvitationRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *CreateProjectInvitationRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *CreateProjectInvitationRequest_FieldSubPathValue) CompareWith(source *CreateProjectInvitationRequest) (int, bool) {
	switch fpvs.Selector() {
	case CreateProjectInvitationRequest_FieldPathSelectorProjectInvitation:
		return fpvs.subPathValue.(project_invitation.ProjectInvitation_FieldPathValue).CompareWith(source.GetProjectInvitation())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProjectInvitationRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateProjectInvitationRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*CreateProjectInvitationRequest))
}

// CreateProjectInvitationRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for CreateProjectInvitationRequest according to their type
// Present only for array (repeated) types.
type CreateProjectInvitationRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	CreateProjectInvitationRequest_FieldPath
	ContainsValue(*CreateProjectInvitationRequest) bool
}

// ParseCreateProjectInvitationRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseCreateProjectInvitationRequest_FieldPathArrayItemValue(pathStr, valueStr string) (CreateProjectInvitationRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseCreateProjectInvitationRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateProjectInvitationRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(CreateProjectInvitationRequest_FieldPathArrayItemValue), nil
}

func MustParseCreateProjectInvitationRequest_FieldPathArrayItemValue(pathStr, valueStr string) CreateProjectInvitationRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseCreateProjectInvitationRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type CreateProjectInvitationRequest_FieldTerminalPathArrayItemValue struct {
	CreateProjectInvitationRequest_FieldTerminalPath
	value interface{}
}

var _ CreateProjectInvitationRequest_FieldPathArrayItemValue = (*CreateProjectInvitationRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object CreateProjectInvitationRequest as interface{}
func (fpaiv *CreateProjectInvitationRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *CreateProjectInvitationRequest_FieldTerminalPathArrayItemValue) GetSingle(source *CreateProjectInvitationRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *CreateProjectInvitationRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*CreateProjectInvitationRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateProjectInvitationRequest'
func (fpaiv *CreateProjectInvitationRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *CreateProjectInvitationRequest) bool {
	slice := fpaiv.CreateProjectInvitationRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type CreateProjectInvitationRequest_FieldSubPathArrayItemValue struct {
	CreateProjectInvitationRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *CreateProjectInvitationRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *CreateProjectInvitationRequest_FieldSubPathArrayItemValue) AsProjectInvitationPathItemValue() (project_invitation.ProjectInvitation_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(project_invitation.ProjectInvitation_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateProjectInvitationRequest'
func (fpaivs *CreateProjectInvitationRequest_FieldSubPathArrayItemValue) ContainsValue(source *CreateProjectInvitationRequest) bool {
	switch fpaivs.Selector() {
	case CreateProjectInvitationRequest_FieldPathSelectorProjectInvitation:
		return fpaivs.subPathItemValue.(project_invitation.ProjectInvitation_FieldPathArrayItemValue).ContainsValue(source.GetProjectInvitation())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProjectInvitationRequest: %d", fpaivs.Selector()))
	}
}

// CreateProjectInvitationRequest_FieldPathArrayOfValues allows storing slice of values for CreateProjectInvitationRequest fields according to their type
type CreateProjectInvitationRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	CreateProjectInvitationRequest_FieldPath
}

func ParseCreateProjectInvitationRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (CreateProjectInvitationRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseCreateProjectInvitationRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateProjectInvitationRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(CreateProjectInvitationRequest_FieldPathArrayOfValues), nil
}

func MustParseCreateProjectInvitationRequest_FieldPathArrayOfValues(pathStr, valuesStr string) CreateProjectInvitationRequest_FieldPathArrayOfValues {
	fpaov, err := ParseCreateProjectInvitationRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type CreateProjectInvitationRequest_FieldTerminalPathArrayOfValues struct {
	CreateProjectInvitationRequest_FieldTerminalPath
	values interface{}
}

var _ CreateProjectInvitationRequest_FieldPathArrayOfValues = (*CreateProjectInvitationRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *CreateProjectInvitationRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case CreateProjectInvitationRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*project_invitation.ParentReference) {
			values = append(values, v)
		}
	case CreateProjectInvitationRequest_FieldPathSelectorProjectInvitation:
		for _, v := range fpaov.values.([]*project_invitation.ProjectInvitation) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *CreateProjectInvitationRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*project_invitation.ParentReference, bool) {
	res, ok := fpaov.values.([]*project_invitation.ParentReference)
	return res, ok
}
func (fpaov *CreateProjectInvitationRequest_FieldTerminalPathArrayOfValues) AsProjectInvitationArrayOfValues() ([]*project_invitation.ProjectInvitation, bool) {
	res, ok := fpaov.values.([]*project_invitation.ProjectInvitation)
	return res, ok
}

type CreateProjectInvitationRequest_FieldSubPathArrayOfValues struct {
	CreateProjectInvitationRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ CreateProjectInvitationRequest_FieldPathArrayOfValues = (*CreateProjectInvitationRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *CreateProjectInvitationRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *CreateProjectInvitationRequest_FieldSubPathArrayOfValues) AsProjectInvitationPathArrayOfValues() (project_invitation.ProjectInvitation_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(project_invitation.ProjectInvitation_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateProjectInvitationRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateProjectInvitationRequest_FieldPathSelector
	Get(source *UpdateProjectInvitationRequest) []interface{}
	GetSingle(source *UpdateProjectInvitationRequest) (interface{}, bool)
	ClearValue(item *UpdateProjectInvitationRequest)

	// Those methods build corresponding UpdateProjectInvitationRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateProjectInvitationRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateProjectInvitationRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateProjectInvitationRequest_FieldPathArrayItemValue
}

type UpdateProjectInvitationRequest_FieldPathSelector int32

const (
	UpdateProjectInvitationRequest_FieldPathSelectorProjectInvitation UpdateProjectInvitationRequest_FieldPathSelector = 0
	UpdateProjectInvitationRequest_FieldPathSelectorUpdateMask        UpdateProjectInvitationRequest_FieldPathSelector = 1
	UpdateProjectInvitationRequest_FieldPathSelectorCas               UpdateProjectInvitationRequest_FieldPathSelector = 2
)

func (s UpdateProjectInvitationRequest_FieldPathSelector) String() string {
	switch s {
	case UpdateProjectInvitationRequest_FieldPathSelectorProjectInvitation:
		return "project_invitation"
	case UpdateProjectInvitationRequest_FieldPathSelectorUpdateMask:
		return "update_mask"
	case UpdateProjectInvitationRequest_FieldPathSelectorCas:
		return "cas"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProjectInvitationRequest: %d", s))
	}
}

func BuildUpdateProjectInvitationRequest_FieldPath(fp gotenobject.RawFieldPath) (UpdateProjectInvitationRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateProjectInvitationRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "project_invitation", "projectInvitation", "project-invitation":
			return &UpdateProjectInvitationRequest_FieldTerminalPath{selector: UpdateProjectInvitationRequest_FieldPathSelectorProjectInvitation}, nil
		case "update_mask", "updateMask", "update-mask":
			return &UpdateProjectInvitationRequest_FieldTerminalPath{selector: UpdateProjectInvitationRequest_FieldPathSelectorUpdateMask}, nil
		case "cas":
			return &UpdateProjectInvitationRequest_FieldTerminalPath{selector: UpdateProjectInvitationRequest_FieldPathSelectorCas}, nil
		}
	} else {
		switch fp[0] {
		case "project_invitation", "projectInvitation", "project-invitation":
			if subpath, err := project_invitation.BuildProjectInvitation_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateProjectInvitationRequest_FieldSubPath{selector: UpdateProjectInvitationRequest_FieldPathSelectorProjectInvitation, subPath: subpath}, nil
			}
		case "cas":
			if subpath, err := BuildUpdateProjectInvitationRequestCAS_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateProjectInvitationRequest_FieldSubPath{selector: UpdateProjectInvitationRequest_FieldPathSelectorCas, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateProjectInvitationRequest", fp)
}

func ParseUpdateProjectInvitationRequest_FieldPath(rawField string) (UpdateProjectInvitationRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateProjectInvitationRequest_FieldPath(fp)
}

func MustParseUpdateProjectInvitationRequest_FieldPath(rawField string) UpdateProjectInvitationRequest_FieldPath {
	fp, err := ParseUpdateProjectInvitationRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateProjectInvitationRequest_FieldTerminalPath struct {
	selector UpdateProjectInvitationRequest_FieldPathSelector
}

var _ UpdateProjectInvitationRequest_FieldPath = (*UpdateProjectInvitationRequest_FieldTerminalPath)(nil)

func (fp *UpdateProjectInvitationRequest_FieldTerminalPath) Selector() UpdateProjectInvitationRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateProjectInvitationRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateProjectInvitationRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateProjectInvitationRequest
func (fp *UpdateProjectInvitationRequest_FieldTerminalPath) Get(source *UpdateProjectInvitationRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateProjectInvitationRequest_FieldPathSelectorProjectInvitation:
			if source.ProjectInvitation != nil {
				values = append(values, source.ProjectInvitation)
			}
		case UpdateProjectInvitationRequest_FieldPathSelectorUpdateMask:
			if source.UpdateMask != nil {
				values = append(values, source.UpdateMask)
			}
		case UpdateProjectInvitationRequest_FieldPathSelectorCas:
			if source.Cas != nil {
				values = append(values, source.Cas)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateProjectInvitationRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateProjectInvitationRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateProjectInvitationRequest))
}

// GetSingle returns value pointed by specific field of from source UpdateProjectInvitationRequest
func (fp *UpdateProjectInvitationRequest_FieldTerminalPath) GetSingle(source *UpdateProjectInvitationRequest) (interface{}, bool) {
	switch fp.selector {
	case UpdateProjectInvitationRequest_FieldPathSelectorProjectInvitation:
		res := source.GetProjectInvitation()
		return res, res != nil
	case UpdateProjectInvitationRequest_FieldPathSelectorUpdateMask:
		res := source.GetUpdateMask()
		return res, res != nil
	case UpdateProjectInvitationRequest_FieldPathSelectorCas:
		res := source.GetCas()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProjectInvitationRequest: %d", fp.selector))
	}
}

func (fp *UpdateProjectInvitationRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateProjectInvitationRequest))
}

// GetDefault returns a default value of the field type
func (fp *UpdateProjectInvitationRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateProjectInvitationRequest_FieldPathSelectorProjectInvitation:
		return (*project_invitation.ProjectInvitation)(nil)
	case UpdateProjectInvitationRequest_FieldPathSelectorUpdateMask:
		return (*project_invitation.ProjectInvitation_FieldMask)(nil)
	case UpdateProjectInvitationRequest_FieldPathSelectorCas:
		return (*UpdateProjectInvitationRequest_CAS)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProjectInvitationRequest: %d", fp.selector))
	}
}

func (fp *UpdateProjectInvitationRequest_FieldTerminalPath) ClearValue(item *UpdateProjectInvitationRequest) {
	if item != nil {
		switch fp.selector {
		case UpdateProjectInvitationRequest_FieldPathSelectorProjectInvitation:
			item.ProjectInvitation = nil
		case UpdateProjectInvitationRequest_FieldPathSelectorUpdateMask:
			item.UpdateMask = nil
		case UpdateProjectInvitationRequest_FieldPathSelectorCas:
			item.Cas = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateProjectInvitationRequest: %d", fp.selector))
		}
	}
}

func (fp *UpdateProjectInvitationRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateProjectInvitationRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateProjectInvitationRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateProjectInvitationRequest_FieldPathSelectorUpdateMask
}

func (fp *UpdateProjectInvitationRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *UpdateProjectInvitationRequest_FieldTerminalPath) WithIValue(value interface{}) UpdateProjectInvitationRequest_FieldPathValue {
	switch fp.selector {
	case UpdateProjectInvitationRequest_FieldPathSelectorProjectInvitation:
		return &UpdateProjectInvitationRequest_FieldTerminalPathValue{UpdateProjectInvitationRequest_FieldTerminalPath: *fp, value: value.(*project_invitation.ProjectInvitation)}
	case UpdateProjectInvitationRequest_FieldPathSelectorUpdateMask:
		return &UpdateProjectInvitationRequest_FieldTerminalPathValue{UpdateProjectInvitationRequest_FieldTerminalPath: *fp, value: value.(*project_invitation.ProjectInvitation_FieldMask)}
	case UpdateProjectInvitationRequest_FieldPathSelectorCas:
		return &UpdateProjectInvitationRequest_FieldTerminalPathValue{UpdateProjectInvitationRequest_FieldTerminalPath: *fp, value: value.(*UpdateProjectInvitationRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProjectInvitationRequest: %d", fp.selector))
	}
}

func (fp *UpdateProjectInvitationRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateProjectInvitationRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateProjectInvitationRequest_FieldPathArrayOfValues {
	fpaov := &UpdateProjectInvitationRequest_FieldTerminalPathArrayOfValues{UpdateProjectInvitationRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateProjectInvitationRequest_FieldPathSelectorProjectInvitation:
		return &UpdateProjectInvitationRequest_FieldTerminalPathArrayOfValues{UpdateProjectInvitationRequest_FieldTerminalPath: *fp, values: values.([]*project_invitation.ProjectInvitation)}
	case UpdateProjectInvitationRequest_FieldPathSelectorUpdateMask:
		return &UpdateProjectInvitationRequest_FieldTerminalPathArrayOfValues{UpdateProjectInvitationRequest_FieldTerminalPath: *fp, values: values.([]*project_invitation.ProjectInvitation_FieldMask)}
	case UpdateProjectInvitationRequest_FieldPathSelectorCas:
		return &UpdateProjectInvitationRequest_FieldTerminalPathArrayOfValues{UpdateProjectInvitationRequest_FieldTerminalPath: *fp, values: values.([]*UpdateProjectInvitationRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProjectInvitationRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateProjectInvitationRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateProjectInvitationRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateProjectInvitationRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProjectInvitationRequest: %d", fp.selector))
	}
}

func (fp *UpdateProjectInvitationRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateProjectInvitationRequest_FieldSubPath struct {
	selector UpdateProjectInvitationRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateProjectInvitationRequest_FieldPath = (*UpdateProjectInvitationRequest_FieldSubPath)(nil)

func (fps *UpdateProjectInvitationRequest_FieldSubPath) Selector() UpdateProjectInvitationRequest_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateProjectInvitationRequest_FieldSubPath) AsProjectInvitationSubPath() (project_invitation.ProjectInvitation_FieldPath, bool) {
	res, ok := fps.subPath.(project_invitation.ProjectInvitation_FieldPath)
	return res, ok
}
func (fps *UpdateProjectInvitationRequest_FieldSubPath) AsCasSubPath() (UpdateProjectInvitationRequestCAS_FieldPath, bool) {
	res, ok := fps.subPath.(UpdateProjectInvitationRequestCAS_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateProjectInvitationRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateProjectInvitationRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateProjectInvitationRequest
func (fps *UpdateProjectInvitationRequest_FieldSubPath) Get(source *UpdateProjectInvitationRequest) (values []interface{}) {
	switch fps.selector {
	case UpdateProjectInvitationRequest_FieldPathSelectorProjectInvitation:
		values = append(values, fps.subPath.GetRaw(source.GetProjectInvitation())...)
	case UpdateProjectInvitationRequest_FieldPathSelectorCas:
		values = append(values, fps.subPath.GetRaw(source.GetCas())...)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProjectInvitationRequest: %d", fps.selector))
	}
	return
}

func (fps *UpdateProjectInvitationRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateProjectInvitationRequest))
}

// GetSingle returns value of selected field from source UpdateProjectInvitationRequest
func (fps *UpdateProjectInvitationRequest_FieldSubPath) GetSingle(source *UpdateProjectInvitationRequest) (interface{}, bool) {
	switch fps.selector {
	case UpdateProjectInvitationRequest_FieldPathSelectorProjectInvitation:
		if source.GetProjectInvitation() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetProjectInvitation())
	case UpdateProjectInvitationRequest_FieldPathSelectorCas:
		if source.GetCas() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProjectInvitationRequest: %d", fps.selector))
	}
}

func (fps *UpdateProjectInvitationRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateProjectInvitationRequest))
}

// GetDefault returns a default value of the field type
func (fps *UpdateProjectInvitationRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateProjectInvitationRequest_FieldSubPath) ClearValue(item *UpdateProjectInvitationRequest) {
	if item != nil {
		switch fps.selector {
		case UpdateProjectInvitationRequest_FieldPathSelectorProjectInvitation:
			fps.subPath.ClearValueRaw(item.ProjectInvitation)
		case UpdateProjectInvitationRequest_FieldPathSelectorCas:
			fps.subPath.ClearValueRaw(item.Cas)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateProjectInvitationRequest: %d", fps.selector))
		}
	}
}

func (fps *UpdateProjectInvitationRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateProjectInvitationRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateProjectInvitationRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateProjectInvitationRequest_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&UpdateProjectInvitationRequest_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *UpdateProjectInvitationRequest_FieldSubPath) WithIValue(value interface{}) UpdateProjectInvitationRequest_FieldPathValue {
	return &UpdateProjectInvitationRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateProjectInvitationRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateProjectInvitationRequest_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateProjectInvitationRequest_FieldPathArrayOfValues {
	return &UpdateProjectInvitationRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateProjectInvitationRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateProjectInvitationRequest_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateProjectInvitationRequest_FieldPathArrayItemValue {
	return &UpdateProjectInvitationRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateProjectInvitationRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateProjectInvitationRequest_FieldPathValue allows storing values for UpdateProjectInvitationRequest fields according to their type
type UpdateProjectInvitationRequest_FieldPathValue interface {
	UpdateProjectInvitationRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateProjectInvitationRequest)
	CompareWith(*UpdateProjectInvitationRequest) (cmp int, comparable bool)
}

func ParseUpdateProjectInvitationRequest_FieldPathValue(pathStr, valueStr string) (UpdateProjectInvitationRequest_FieldPathValue, error) {
	fp, err := ParseUpdateProjectInvitationRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateProjectInvitationRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateProjectInvitationRequest_FieldPathValue), nil
}

func MustParseUpdateProjectInvitationRequest_FieldPathValue(pathStr, valueStr string) UpdateProjectInvitationRequest_FieldPathValue {
	fpv, err := ParseUpdateProjectInvitationRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateProjectInvitationRequest_FieldTerminalPathValue struct {
	UpdateProjectInvitationRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateProjectInvitationRequest_FieldPathValue = (*UpdateProjectInvitationRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'UpdateProjectInvitationRequest' as interface{}
func (fpv *UpdateProjectInvitationRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateProjectInvitationRequest_FieldTerminalPathValue) AsProjectInvitationValue() (*project_invitation.ProjectInvitation, bool) {
	res, ok := fpv.value.(*project_invitation.ProjectInvitation)
	return res, ok
}
func (fpv *UpdateProjectInvitationRequest_FieldTerminalPathValue) AsUpdateMaskValue() (*project_invitation.ProjectInvitation_FieldMask, bool) {
	res, ok := fpv.value.(*project_invitation.ProjectInvitation_FieldMask)
	return res, ok
}
func (fpv *UpdateProjectInvitationRequest_FieldTerminalPathValue) AsCasValue() (*UpdateProjectInvitationRequest_CAS, bool) {
	res, ok := fpv.value.(*UpdateProjectInvitationRequest_CAS)
	return res, ok
}

// SetTo stores value for selected field for object UpdateProjectInvitationRequest
func (fpv *UpdateProjectInvitationRequest_FieldTerminalPathValue) SetTo(target **UpdateProjectInvitationRequest) {
	if *target == nil {
		*target = new(UpdateProjectInvitationRequest)
	}
	switch fpv.selector {
	case UpdateProjectInvitationRequest_FieldPathSelectorProjectInvitation:
		(*target).ProjectInvitation = fpv.value.(*project_invitation.ProjectInvitation)
	case UpdateProjectInvitationRequest_FieldPathSelectorUpdateMask:
		(*target).UpdateMask = fpv.value.(*project_invitation.ProjectInvitation_FieldMask)
	case UpdateProjectInvitationRequest_FieldPathSelectorCas:
		(*target).Cas = fpv.value.(*UpdateProjectInvitationRequest_CAS)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProjectInvitationRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateProjectInvitationRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateProjectInvitationRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateProjectInvitationRequest_FieldTerminalPathValue' with the value under path in 'UpdateProjectInvitationRequest'.
func (fpv *UpdateProjectInvitationRequest_FieldTerminalPathValue) CompareWith(source *UpdateProjectInvitationRequest) (int, bool) {
	switch fpv.selector {
	case UpdateProjectInvitationRequest_FieldPathSelectorProjectInvitation:
		return 0, false
	case UpdateProjectInvitationRequest_FieldPathSelectorUpdateMask:
		return 0, false
	case UpdateProjectInvitationRequest_FieldPathSelectorCas:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProjectInvitationRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateProjectInvitationRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateProjectInvitationRequest))
}

type UpdateProjectInvitationRequest_FieldSubPathValue struct {
	UpdateProjectInvitationRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateProjectInvitationRequest_FieldPathValue = (*UpdateProjectInvitationRequest_FieldSubPathValue)(nil)

func (fpvs *UpdateProjectInvitationRequest_FieldSubPathValue) AsProjectInvitationPathValue() (project_invitation.ProjectInvitation_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(project_invitation.ProjectInvitation_FieldPathValue)
	return res, ok
}
func (fpvs *UpdateProjectInvitationRequest_FieldSubPathValue) AsCasPathValue() (UpdateProjectInvitationRequestCAS_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(UpdateProjectInvitationRequestCAS_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateProjectInvitationRequest_FieldSubPathValue) SetTo(target **UpdateProjectInvitationRequest) {
	if *target == nil {
		*target = new(UpdateProjectInvitationRequest)
	}
	switch fpvs.Selector() {
	case UpdateProjectInvitationRequest_FieldPathSelectorProjectInvitation:
		fpvs.subPathValue.(project_invitation.ProjectInvitation_FieldPathValue).SetTo(&(*target).ProjectInvitation)
	case UpdateProjectInvitationRequest_FieldPathSelectorCas:
		fpvs.subPathValue.(UpdateProjectInvitationRequestCAS_FieldPathValue).SetTo(&(*target).Cas)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProjectInvitationRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateProjectInvitationRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateProjectInvitationRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateProjectInvitationRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateProjectInvitationRequest_FieldSubPathValue) CompareWith(source *UpdateProjectInvitationRequest) (int, bool) {
	switch fpvs.Selector() {
	case UpdateProjectInvitationRequest_FieldPathSelectorProjectInvitation:
		return fpvs.subPathValue.(project_invitation.ProjectInvitation_FieldPathValue).CompareWith(source.GetProjectInvitation())
	case UpdateProjectInvitationRequest_FieldPathSelectorCas:
		return fpvs.subPathValue.(UpdateProjectInvitationRequestCAS_FieldPathValue).CompareWith(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProjectInvitationRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateProjectInvitationRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateProjectInvitationRequest))
}

// UpdateProjectInvitationRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for UpdateProjectInvitationRequest according to their type
// Present only for array (repeated) types.
type UpdateProjectInvitationRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateProjectInvitationRequest_FieldPath
	ContainsValue(*UpdateProjectInvitationRequest) bool
}

// ParseUpdateProjectInvitationRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateProjectInvitationRequest_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateProjectInvitationRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateProjectInvitationRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateProjectInvitationRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateProjectInvitationRequest_FieldPathArrayItemValue), nil
}

func MustParseUpdateProjectInvitationRequest_FieldPathArrayItemValue(pathStr, valueStr string) UpdateProjectInvitationRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateProjectInvitationRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateProjectInvitationRequest_FieldTerminalPathArrayItemValue struct {
	UpdateProjectInvitationRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateProjectInvitationRequest_FieldPathArrayItemValue = (*UpdateProjectInvitationRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateProjectInvitationRequest as interface{}
func (fpaiv *UpdateProjectInvitationRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateProjectInvitationRequest_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateProjectInvitationRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateProjectInvitationRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateProjectInvitationRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateProjectInvitationRequest'
func (fpaiv *UpdateProjectInvitationRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateProjectInvitationRequest) bool {
	slice := fpaiv.UpdateProjectInvitationRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateProjectInvitationRequest_FieldSubPathArrayItemValue struct {
	UpdateProjectInvitationRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateProjectInvitationRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateProjectInvitationRequest_FieldSubPathArrayItemValue) AsProjectInvitationPathItemValue() (project_invitation.ProjectInvitation_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(project_invitation.ProjectInvitation_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *UpdateProjectInvitationRequest_FieldSubPathArrayItemValue) AsCasPathItemValue() (UpdateProjectInvitationRequestCAS_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(UpdateProjectInvitationRequestCAS_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateProjectInvitationRequest'
func (fpaivs *UpdateProjectInvitationRequest_FieldSubPathArrayItemValue) ContainsValue(source *UpdateProjectInvitationRequest) bool {
	switch fpaivs.Selector() {
	case UpdateProjectInvitationRequest_FieldPathSelectorProjectInvitation:
		return fpaivs.subPathItemValue.(project_invitation.ProjectInvitation_FieldPathArrayItemValue).ContainsValue(source.GetProjectInvitation())
	case UpdateProjectInvitationRequest_FieldPathSelectorCas:
		return fpaivs.subPathItemValue.(UpdateProjectInvitationRequestCAS_FieldPathArrayItemValue).ContainsValue(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProjectInvitationRequest: %d", fpaivs.Selector()))
	}
}

// UpdateProjectInvitationRequest_FieldPathArrayOfValues allows storing slice of values for UpdateProjectInvitationRequest fields according to their type
type UpdateProjectInvitationRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateProjectInvitationRequest_FieldPath
}

func ParseUpdateProjectInvitationRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateProjectInvitationRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateProjectInvitationRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateProjectInvitationRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateProjectInvitationRequest_FieldPathArrayOfValues), nil
}

func MustParseUpdateProjectInvitationRequest_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateProjectInvitationRequest_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateProjectInvitationRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateProjectInvitationRequest_FieldTerminalPathArrayOfValues struct {
	UpdateProjectInvitationRequest_FieldTerminalPath
	values interface{}
}

var _ UpdateProjectInvitationRequest_FieldPathArrayOfValues = (*UpdateProjectInvitationRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateProjectInvitationRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateProjectInvitationRequest_FieldPathSelectorProjectInvitation:
		for _, v := range fpaov.values.([]*project_invitation.ProjectInvitation) {
			values = append(values, v)
		}
	case UpdateProjectInvitationRequest_FieldPathSelectorUpdateMask:
		for _, v := range fpaov.values.([]*project_invitation.ProjectInvitation_FieldMask) {
			values = append(values, v)
		}
	case UpdateProjectInvitationRequest_FieldPathSelectorCas:
		for _, v := range fpaov.values.([]*UpdateProjectInvitationRequest_CAS) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateProjectInvitationRequest_FieldTerminalPathArrayOfValues) AsProjectInvitationArrayOfValues() ([]*project_invitation.ProjectInvitation, bool) {
	res, ok := fpaov.values.([]*project_invitation.ProjectInvitation)
	return res, ok
}
func (fpaov *UpdateProjectInvitationRequest_FieldTerminalPathArrayOfValues) AsUpdateMaskArrayOfValues() ([]*project_invitation.ProjectInvitation_FieldMask, bool) {
	res, ok := fpaov.values.([]*project_invitation.ProjectInvitation_FieldMask)
	return res, ok
}
func (fpaov *UpdateProjectInvitationRequest_FieldTerminalPathArrayOfValues) AsCasArrayOfValues() ([]*UpdateProjectInvitationRequest_CAS, bool) {
	res, ok := fpaov.values.([]*UpdateProjectInvitationRequest_CAS)
	return res, ok
}

type UpdateProjectInvitationRequest_FieldSubPathArrayOfValues struct {
	UpdateProjectInvitationRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateProjectInvitationRequest_FieldPathArrayOfValues = (*UpdateProjectInvitationRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateProjectInvitationRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateProjectInvitationRequest_FieldSubPathArrayOfValues) AsProjectInvitationPathArrayOfValues() (project_invitation.ProjectInvitation_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(project_invitation.ProjectInvitation_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *UpdateProjectInvitationRequest_FieldSubPathArrayOfValues) AsCasPathArrayOfValues() (UpdateProjectInvitationRequestCAS_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(UpdateProjectInvitationRequestCAS_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateProjectInvitationRequestCAS_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateProjectInvitationRequestCAS_FieldPathSelector
	Get(source *UpdateProjectInvitationRequest_CAS) []interface{}
	GetSingle(source *UpdateProjectInvitationRequest_CAS) (interface{}, bool)
	ClearValue(item *UpdateProjectInvitationRequest_CAS)

	// Those methods build corresponding UpdateProjectInvitationRequestCAS_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateProjectInvitationRequestCAS_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateProjectInvitationRequestCAS_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateProjectInvitationRequestCAS_FieldPathArrayItemValue
}

type UpdateProjectInvitationRequestCAS_FieldPathSelector int32

const (
	UpdateProjectInvitationRequestCAS_FieldPathSelectorConditionalState UpdateProjectInvitationRequestCAS_FieldPathSelector = 0
	UpdateProjectInvitationRequestCAS_FieldPathSelectorFieldMask        UpdateProjectInvitationRequestCAS_FieldPathSelector = 1
)

func (s UpdateProjectInvitationRequestCAS_FieldPathSelector) String() string {
	switch s {
	case UpdateProjectInvitationRequestCAS_FieldPathSelectorConditionalState:
		return "conditional_state"
	case UpdateProjectInvitationRequestCAS_FieldPathSelectorFieldMask:
		return "field_mask"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProjectInvitationRequest_CAS: %d", s))
	}
}

func BuildUpdateProjectInvitationRequestCAS_FieldPath(fp gotenobject.RawFieldPath) (UpdateProjectInvitationRequestCAS_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateProjectInvitationRequest_CAS")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			return &UpdateProjectInvitationRequestCAS_FieldTerminalPath{selector: UpdateProjectInvitationRequestCAS_FieldPathSelectorConditionalState}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &UpdateProjectInvitationRequestCAS_FieldTerminalPath{selector: UpdateProjectInvitationRequestCAS_FieldPathSelectorFieldMask}, nil
		}
	} else {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			if subpath, err := project_invitation.BuildProjectInvitation_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateProjectInvitationRequestCAS_FieldSubPath{selector: UpdateProjectInvitationRequestCAS_FieldPathSelectorConditionalState, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateProjectInvitationRequest_CAS", fp)
}

func ParseUpdateProjectInvitationRequestCAS_FieldPath(rawField string) (UpdateProjectInvitationRequestCAS_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateProjectInvitationRequestCAS_FieldPath(fp)
}

func MustParseUpdateProjectInvitationRequestCAS_FieldPath(rawField string) UpdateProjectInvitationRequestCAS_FieldPath {
	fp, err := ParseUpdateProjectInvitationRequestCAS_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateProjectInvitationRequestCAS_FieldTerminalPath struct {
	selector UpdateProjectInvitationRequestCAS_FieldPathSelector
}

var _ UpdateProjectInvitationRequestCAS_FieldPath = (*UpdateProjectInvitationRequestCAS_FieldTerminalPath)(nil)

func (fp *UpdateProjectInvitationRequestCAS_FieldTerminalPath) Selector() UpdateProjectInvitationRequestCAS_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateProjectInvitationRequestCAS_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateProjectInvitationRequestCAS_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateProjectInvitationRequest_CAS
func (fp *UpdateProjectInvitationRequestCAS_FieldTerminalPath) Get(source *UpdateProjectInvitationRequest_CAS) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateProjectInvitationRequestCAS_FieldPathSelectorConditionalState:
			if source.ConditionalState != nil {
				values = append(values, source.ConditionalState)
			}
		case UpdateProjectInvitationRequestCAS_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateProjectInvitationRequest_CAS: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateProjectInvitationRequestCAS_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateProjectInvitationRequest_CAS))
}

// GetSingle returns value pointed by specific field of from source UpdateProjectInvitationRequest_CAS
func (fp *UpdateProjectInvitationRequestCAS_FieldTerminalPath) GetSingle(source *UpdateProjectInvitationRequest_CAS) (interface{}, bool) {
	switch fp.selector {
	case UpdateProjectInvitationRequestCAS_FieldPathSelectorConditionalState:
		res := source.GetConditionalState()
		return res, res != nil
	case UpdateProjectInvitationRequestCAS_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProjectInvitationRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateProjectInvitationRequestCAS_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateProjectInvitationRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fp *UpdateProjectInvitationRequestCAS_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateProjectInvitationRequestCAS_FieldPathSelectorConditionalState:
		return (*project_invitation.ProjectInvitation)(nil)
	case UpdateProjectInvitationRequestCAS_FieldPathSelectorFieldMask:
		return (*project_invitation.ProjectInvitation_FieldMask)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProjectInvitationRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateProjectInvitationRequestCAS_FieldTerminalPath) ClearValue(item *UpdateProjectInvitationRequest_CAS) {
	if item != nil {
		switch fp.selector {
		case UpdateProjectInvitationRequestCAS_FieldPathSelectorConditionalState:
			item.ConditionalState = nil
		case UpdateProjectInvitationRequestCAS_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateProjectInvitationRequest_CAS: %d", fp.selector))
		}
	}
}

func (fp *UpdateProjectInvitationRequestCAS_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateProjectInvitationRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateProjectInvitationRequestCAS_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateProjectInvitationRequestCAS_FieldPathSelectorFieldMask
}

func (fp *UpdateProjectInvitationRequestCAS_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *UpdateProjectInvitationRequestCAS_FieldTerminalPath) WithIValue(value interface{}) UpdateProjectInvitationRequestCAS_FieldPathValue {
	switch fp.selector {
	case UpdateProjectInvitationRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateProjectInvitationRequestCAS_FieldTerminalPathValue{UpdateProjectInvitationRequestCAS_FieldTerminalPath: *fp, value: value.(*project_invitation.ProjectInvitation)}
	case UpdateProjectInvitationRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateProjectInvitationRequestCAS_FieldTerminalPathValue{UpdateProjectInvitationRequestCAS_FieldTerminalPath: *fp, value: value.(*project_invitation.ProjectInvitation_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProjectInvitationRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateProjectInvitationRequestCAS_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateProjectInvitationRequestCAS_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateProjectInvitationRequestCAS_FieldPathArrayOfValues {
	fpaov := &UpdateProjectInvitationRequestCAS_FieldTerminalPathArrayOfValues{UpdateProjectInvitationRequestCAS_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateProjectInvitationRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateProjectInvitationRequestCAS_FieldTerminalPathArrayOfValues{UpdateProjectInvitationRequestCAS_FieldTerminalPath: *fp, values: values.([]*project_invitation.ProjectInvitation)}
	case UpdateProjectInvitationRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateProjectInvitationRequestCAS_FieldTerminalPathArrayOfValues{UpdateProjectInvitationRequestCAS_FieldTerminalPath: *fp, values: values.([]*project_invitation.ProjectInvitation_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProjectInvitationRequest_CAS: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateProjectInvitationRequestCAS_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateProjectInvitationRequestCAS_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateProjectInvitationRequestCAS_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProjectInvitationRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateProjectInvitationRequestCAS_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateProjectInvitationRequestCAS_FieldSubPath struct {
	selector UpdateProjectInvitationRequestCAS_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateProjectInvitationRequestCAS_FieldPath = (*UpdateProjectInvitationRequestCAS_FieldSubPath)(nil)

func (fps *UpdateProjectInvitationRequestCAS_FieldSubPath) Selector() UpdateProjectInvitationRequestCAS_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateProjectInvitationRequestCAS_FieldSubPath) AsConditionalStateSubPath() (project_invitation.ProjectInvitation_FieldPath, bool) {
	res, ok := fps.subPath.(project_invitation.ProjectInvitation_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateProjectInvitationRequestCAS_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateProjectInvitationRequestCAS_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateProjectInvitationRequest_CAS
func (fps *UpdateProjectInvitationRequestCAS_FieldSubPath) Get(source *UpdateProjectInvitationRequest_CAS) (values []interface{}) {
	switch fps.selector {
	case UpdateProjectInvitationRequestCAS_FieldPathSelectorConditionalState:
		values = append(values, fps.subPath.GetRaw(source.GetConditionalState())...)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProjectInvitationRequest_CAS: %d", fps.selector))
	}
	return
}

func (fps *UpdateProjectInvitationRequestCAS_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateProjectInvitationRequest_CAS))
}

// GetSingle returns value of selected field from source UpdateProjectInvitationRequest_CAS
func (fps *UpdateProjectInvitationRequestCAS_FieldSubPath) GetSingle(source *UpdateProjectInvitationRequest_CAS) (interface{}, bool) {
	switch fps.selector {
	case UpdateProjectInvitationRequestCAS_FieldPathSelectorConditionalState:
		if source.GetConditionalState() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProjectInvitationRequest_CAS: %d", fps.selector))
	}
}

func (fps *UpdateProjectInvitationRequestCAS_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateProjectInvitationRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fps *UpdateProjectInvitationRequestCAS_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateProjectInvitationRequestCAS_FieldSubPath) ClearValue(item *UpdateProjectInvitationRequest_CAS) {
	if item != nil {
		switch fps.selector {
		case UpdateProjectInvitationRequestCAS_FieldPathSelectorConditionalState:
			fps.subPath.ClearValueRaw(item.ConditionalState)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateProjectInvitationRequest_CAS: %d", fps.selector))
		}
	}
}

func (fps *UpdateProjectInvitationRequestCAS_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateProjectInvitationRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateProjectInvitationRequestCAS_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateProjectInvitationRequestCAS_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&UpdateProjectInvitationRequestCAS_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *UpdateProjectInvitationRequestCAS_FieldSubPath) WithIValue(value interface{}) UpdateProjectInvitationRequestCAS_FieldPathValue {
	return &UpdateProjectInvitationRequestCAS_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateProjectInvitationRequestCAS_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateProjectInvitationRequestCAS_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateProjectInvitationRequestCAS_FieldPathArrayOfValues {
	return &UpdateProjectInvitationRequestCAS_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateProjectInvitationRequestCAS_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateProjectInvitationRequestCAS_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateProjectInvitationRequestCAS_FieldPathArrayItemValue {
	return &UpdateProjectInvitationRequestCAS_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateProjectInvitationRequestCAS_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateProjectInvitationRequestCAS_FieldPathValue allows storing values for CAS fields according to their type
type UpdateProjectInvitationRequestCAS_FieldPathValue interface {
	UpdateProjectInvitationRequestCAS_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateProjectInvitationRequest_CAS)
	CompareWith(*UpdateProjectInvitationRequest_CAS) (cmp int, comparable bool)
}

func ParseUpdateProjectInvitationRequestCAS_FieldPathValue(pathStr, valueStr string) (UpdateProjectInvitationRequestCAS_FieldPathValue, error) {
	fp, err := ParseUpdateProjectInvitationRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateProjectInvitationRequestCAS_FieldPathValue), nil
}

func MustParseUpdateProjectInvitationRequestCAS_FieldPathValue(pathStr, valueStr string) UpdateProjectInvitationRequestCAS_FieldPathValue {
	fpv, err := ParseUpdateProjectInvitationRequestCAS_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateProjectInvitationRequestCAS_FieldTerminalPathValue struct {
	UpdateProjectInvitationRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateProjectInvitationRequestCAS_FieldPathValue = (*UpdateProjectInvitationRequestCAS_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CAS' as interface{}
func (fpv *UpdateProjectInvitationRequestCAS_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateProjectInvitationRequestCAS_FieldTerminalPathValue) AsConditionalStateValue() (*project_invitation.ProjectInvitation, bool) {
	res, ok := fpv.value.(*project_invitation.ProjectInvitation)
	return res, ok
}
func (fpv *UpdateProjectInvitationRequestCAS_FieldTerminalPathValue) AsFieldMaskValue() (*project_invitation.ProjectInvitation_FieldMask, bool) {
	res, ok := fpv.value.(*project_invitation.ProjectInvitation_FieldMask)
	return res, ok
}

// SetTo stores value for selected field for object CAS
func (fpv *UpdateProjectInvitationRequestCAS_FieldTerminalPathValue) SetTo(target **UpdateProjectInvitationRequest_CAS) {
	if *target == nil {
		*target = new(UpdateProjectInvitationRequest_CAS)
	}
	switch fpv.selector {
	case UpdateProjectInvitationRequestCAS_FieldPathSelectorConditionalState:
		(*target).ConditionalState = fpv.value.(*project_invitation.ProjectInvitation)
	case UpdateProjectInvitationRequestCAS_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*project_invitation.ProjectInvitation_FieldMask)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProjectInvitationRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateProjectInvitationRequestCAS_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateProjectInvitationRequest_CAS)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateProjectInvitationRequestCAS_FieldTerminalPathValue' with the value under path in 'UpdateProjectInvitationRequest_CAS'.
func (fpv *UpdateProjectInvitationRequestCAS_FieldTerminalPathValue) CompareWith(source *UpdateProjectInvitationRequest_CAS) (int, bool) {
	switch fpv.selector {
	case UpdateProjectInvitationRequestCAS_FieldPathSelectorConditionalState:
		return 0, false
	case UpdateProjectInvitationRequestCAS_FieldPathSelectorFieldMask:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProjectInvitationRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateProjectInvitationRequestCAS_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateProjectInvitationRequest_CAS))
}

type UpdateProjectInvitationRequestCAS_FieldSubPathValue struct {
	UpdateProjectInvitationRequestCAS_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateProjectInvitationRequestCAS_FieldPathValue = (*UpdateProjectInvitationRequestCAS_FieldSubPathValue)(nil)

func (fpvs *UpdateProjectInvitationRequestCAS_FieldSubPathValue) AsConditionalStatePathValue() (project_invitation.ProjectInvitation_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(project_invitation.ProjectInvitation_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateProjectInvitationRequestCAS_FieldSubPathValue) SetTo(target **UpdateProjectInvitationRequest_CAS) {
	if *target == nil {
		*target = new(UpdateProjectInvitationRequest_CAS)
	}
	switch fpvs.Selector() {
	case UpdateProjectInvitationRequestCAS_FieldPathSelectorConditionalState:
		fpvs.subPathValue.(project_invitation.ProjectInvitation_FieldPathValue).SetTo(&(*target).ConditionalState)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProjectInvitationRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateProjectInvitationRequestCAS_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateProjectInvitationRequest_CAS)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateProjectInvitationRequestCAS_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateProjectInvitationRequestCAS_FieldSubPathValue) CompareWith(source *UpdateProjectInvitationRequest_CAS) (int, bool) {
	switch fpvs.Selector() {
	case UpdateProjectInvitationRequestCAS_FieldPathSelectorConditionalState:
		return fpvs.subPathValue.(project_invitation.ProjectInvitation_FieldPathValue).CompareWith(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProjectInvitationRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateProjectInvitationRequestCAS_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateProjectInvitationRequest_CAS))
}

// UpdateProjectInvitationRequestCAS_FieldPathArrayItemValue allows storing single item in Path-specific values for CAS according to their type
// Present only for array (repeated) types.
type UpdateProjectInvitationRequestCAS_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateProjectInvitationRequestCAS_FieldPath
	ContainsValue(*UpdateProjectInvitationRequest_CAS) bool
}

// ParseUpdateProjectInvitationRequestCAS_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateProjectInvitationRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateProjectInvitationRequestCAS_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateProjectInvitationRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateProjectInvitationRequestCAS_FieldPathArrayItemValue), nil
}

func MustParseUpdateProjectInvitationRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) UpdateProjectInvitationRequestCAS_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateProjectInvitationRequestCAS_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateProjectInvitationRequestCAS_FieldTerminalPathArrayItemValue struct {
	UpdateProjectInvitationRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateProjectInvitationRequestCAS_FieldPathArrayItemValue = (*UpdateProjectInvitationRequestCAS_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateProjectInvitationRequest_CAS as interface{}
func (fpaiv *UpdateProjectInvitationRequestCAS_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateProjectInvitationRequestCAS_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateProjectInvitationRequest_CAS) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateProjectInvitationRequestCAS_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateProjectInvitationRequest_CAS))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaiv *UpdateProjectInvitationRequestCAS_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateProjectInvitationRequest_CAS) bool {
	slice := fpaiv.UpdateProjectInvitationRequestCAS_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateProjectInvitationRequestCAS_FieldSubPathArrayItemValue struct {
	UpdateProjectInvitationRequestCAS_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateProjectInvitationRequestCAS_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateProjectInvitationRequestCAS_FieldSubPathArrayItemValue) AsConditionalStatePathItemValue() (project_invitation.ProjectInvitation_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(project_invitation.ProjectInvitation_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaivs *UpdateProjectInvitationRequestCAS_FieldSubPathArrayItemValue) ContainsValue(source *UpdateProjectInvitationRequest_CAS) bool {
	switch fpaivs.Selector() {
	case UpdateProjectInvitationRequestCAS_FieldPathSelectorConditionalState:
		return fpaivs.subPathItemValue.(project_invitation.ProjectInvitation_FieldPathArrayItemValue).ContainsValue(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProjectInvitationRequest_CAS: %d", fpaivs.Selector()))
	}
}

// UpdateProjectInvitationRequestCAS_FieldPathArrayOfValues allows storing slice of values for CAS fields according to their type
type UpdateProjectInvitationRequestCAS_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateProjectInvitationRequestCAS_FieldPath
}

func ParseUpdateProjectInvitationRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateProjectInvitationRequestCAS_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateProjectInvitationRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateProjectInvitationRequestCAS_FieldPathArrayOfValues), nil
}

func MustParseUpdateProjectInvitationRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateProjectInvitationRequestCAS_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateProjectInvitationRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateProjectInvitationRequestCAS_FieldTerminalPathArrayOfValues struct {
	UpdateProjectInvitationRequestCAS_FieldTerminalPath
	values interface{}
}

var _ UpdateProjectInvitationRequestCAS_FieldPathArrayOfValues = (*UpdateProjectInvitationRequestCAS_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateProjectInvitationRequestCAS_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateProjectInvitationRequestCAS_FieldPathSelectorConditionalState:
		for _, v := range fpaov.values.([]*project_invitation.ProjectInvitation) {
			values = append(values, v)
		}
	case UpdateProjectInvitationRequestCAS_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*project_invitation.ProjectInvitation_FieldMask) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateProjectInvitationRequestCAS_FieldTerminalPathArrayOfValues) AsConditionalStateArrayOfValues() ([]*project_invitation.ProjectInvitation, bool) {
	res, ok := fpaov.values.([]*project_invitation.ProjectInvitation)
	return res, ok
}
func (fpaov *UpdateProjectInvitationRequestCAS_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*project_invitation.ProjectInvitation_FieldMask, bool) {
	res, ok := fpaov.values.([]*project_invitation.ProjectInvitation_FieldMask)
	return res, ok
}

type UpdateProjectInvitationRequestCAS_FieldSubPathArrayOfValues struct {
	UpdateProjectInvitationRequestCAS_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateProjectInvitationRequestCAS_FieldPathArrayOfValues = (*UpdateProjectInvitationRequestCAS_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateProjectInvitationRequestCAS_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateProjectInvitationRequestCAS_FieldSubPathArrayOfValues) AsConditionalStatePathArrayOfValues() (project_invitation.ProjectInvitation_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(project_invitation.ProjectInvitation_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeleteProjectInvitationRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeleteProjectInvitationRequest_FieldPathSelector
	Get(source *DeleteProjectInvitationRequest) []interface{}
	GetSingle(source *DeleteProjectInvitationRequest) (interface{}, bool)
	ClearValue(item *DeleteProjectInvitationRequest)

	// Those methods build corresponding DeleteProjectInvitationRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeleteProjectInvitationRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) DeleteProjectInvitationRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeleteProjectInvitationRequest_FieldPathArrayItemValue
}

type DeleteProjectInvitationRequest_FieldPathSelector int32

const (
	DeleteProjectInvitationRequest_FieldPathSelectorName DeleteProjectInvitationRequest_FieldPathSelector = 0
)

func (s DeleteProjectInvitationRequest_FieldPathSelector) String() string {
	switch s {
	case DeleteProjectInvitationRequest_FieldPathSelectorName:
		return "name"
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteProjectInvitationRequest: %d", s))
	}
}

func BuildDeleteProjectInvitationRequest_FieldPath(fp gotenobject.RawFieldPath) (DeleteProjectInvitationRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object DeleteProjectInvitationRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &DeleteProjectInvitationRequest_FieldTerminalPath{selector: DeleteProjectInvitationRequest_FieldPathSelectorName}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object DeleteProjectInvitationRequest", fp)
}

func ParseDeleteProjectInvitationRequest_FieldPath(rawField string) (DeleteProjectInvitationRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeleteProjectInvitationRequest_FieldPath(fp)
}

func MustParseDeleteProjectInvitationRequest_FieldPath(rawField string) DeleteProjectInvitationRequest_FieldPath {
	fp, err := ParseDeleteProjectInvitationRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeleteProjectInvitationRequest_FieldTerminalPath struct {
	selector DeleteProjectInvitationRequest_FieldPathSelector
}

var _ DeleteProjectInvitationRequest_FieldPath = (*DeleteProjectInvitationRequest_FieldTerminalPath)(nil)

func (fp *DeleteProjectInvitationRequest_FieldTerminalPath) Selector() DeleteProjectInvitationRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeleteProjectInvitationRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeleteProjectInvitationRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source DeleteProjectInvitationRequest
func (fp *DeleteProjectInvitationRequest_FieldTerminalPath) Get(source *DeleteProjectInvitationRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeleteProjectInvitationRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteProjectInvitationRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *DeleteProjectInvitationRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*DeleteProjectInvitationRequest))
}

// GetSingle returns value pointed by specific field of from source DeleteProjectInvitationRequest
func (fp *DeleteProjectInvitationRequest_FieldTerminalPath) GetSingle(source *DeleteProjectInvitationRequest) (interface{}, bool) {
	switch fp.selector {
	case DeleteProjectInvitationRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteProjectInvitationRequest: %d", fp.selector))
	}
}

func (fp *DeleteProjectInvitationRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*DeleteProjectInvitationRequest))
}

// GetDefault returns a default value of the field type
func (fp *DeleteProjectInvitationRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeleteProjectInvitationRequest_FieldPathSelectorName:
		return (*project_invitation.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteProjectInvitationRequest: %d", fp.selector))
	}
}

func (fp *DeleteProjectInvitationRequest_FieldTerminalPath) ClearValue(item *DeleteProjectInvitationRequest) {
	if item != nil {
		switch fp.selector {
		case DeleteProjectInvitationRequest_FieldPathSelectorName:
			item.Name = nil
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteProjectInvitationRequest: %d", fp.selector))
		}
	}
}

func (fp *DeleteProjectInvitationRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*DeleteProjectInvitationRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeleteProjectInvitationRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeleteProjectInvitationRequest_FieldPathSelectorName
}

func (fp *DeleteProjectInvitationRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *DeleteProjectInvitationRequest_FieldTerminalPath) WithIValue(value interface{}) DeleteProjectInvitationRequest_FieldPathValue {
	switch fp.selector {
	case DeleteProjectInvitationRequest_FieldPathSelectorName:
		return &DeleteProjectInvitationRequest_FieldTerminalPathValue{DeleteProjectInvitationRequest_FieldTerminalPath: *fp, value: value.(*project_invitation.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteProjectInvitationRequest: %d", fp.selector))
	}
}

func (fp *DeleteProjectInvitationRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeleteProjectInvitationRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeleteProjectInvitationRequest_FieldPathArrayOfValues {
	fpaov := &DeleteProjectInvitationRequest_FieldTerminalPathArrayOfValues{DeleteProjectInvitationRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeleteProjectInvitationRequest_FieldPathSelectorName:
		return &DeleteProjectInvitationRequest_FieldTerminalPathArrayOfValues{DeleteProjectInvitationRequest_FieldTerminalPath: *fp, values: values.([]*project_invitation.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteProjectInvitationRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeleteProjectInvitationRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeleteProjectInvitationRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeleteProjectInvitationRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteProjectInvitationRequest: %d", fp.selector))
	}
}

func (fp *DeleteProjectInvitationRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeleteProjectInvitationRequest_FieldPathValue allows storing values for DeleteProjectInvitationRequest fields according to their type
type DeleteProjectInvitationRequest_FieldPathValue interface {
	DeleteProjectInvitationRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **DeleteProjectInvitationRequest)
	CompareWith(*DeleteProjectInvitationRequest) (cmp int, comparable bool)
}

func ParseDeleteProjectInvitationRequest_FieldPathValue(pathStr, valueStr string) (DeleteProjectInvitationRequest_FieldPathValue, error) {
	fp, err := ParseDeleteProjectInvitationRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteProjectInvitationRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeleteProjectInvitationRequest_FieldPathValue), nil
}

func MustParseDeleteProjectInvitationRequest_FieldPathValue(pathStr, valueStr string) DeleteProjectInvitationRequest_FieldPathValue {
	fpv, err := ParseDeleteProjectInvitationRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeleteProjectInvitationRequest_FieldTerminalPathValue struct {
	DeleteProjectInvitationRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteProjectInvitationRequest_FieldPathValue = (*DeleteProjectInvitationRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'DeleteProjectInvitationRequest' as interface{}
func (fpv *DeleteProjectInvitationRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeleteProjectInvitationRequest_FieldTerminalPathValue) AsNameValue() (*project_invitation.Reference, bool) {
	res, ok := fpv.value.(*project_invitation.Reference)
	return res, ok
}

// SetTo stores value for selected field for object DeleteProjectInvitationRequest
func (fpv *DeleteProjectInvitationRequest_FieldTerminalPathValue) SetTo(target **DeleteProjectInvitationRequest) {
	if *target == nil {
		*target = new(DeleteProjectInvitationRequest)
	}
	switch fpv.selector {
	case DeleteProjectInvitationRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*project_invitation.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteProjectInvitationRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteProjectInvitationRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*DeleteProjectInvitationRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeleteProjectInvitationRequest_FieldTerminalPathValue' with the value under path in 'DeleteProjectInvitationRequest'.
func (fpv *DeleteProjectInvitationRequest_FieldTerminalPathValue) CompareWith(source *DeleteProjectInvitationRequest) (int, bool) {
	switch fpv.selector {
	case DeleteProjectInvitationRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*project_invitation.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteProjectInvitationRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteProjectInvitationRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*DeleteProjectInvitationRequest))
}

// DeleteProjectInvitationRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for DeleteProjectInvitationRequest according to their type
// Present only for array (repeated) types.
type DeleteProjectInvitationRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeleteProjectInvitationRequest_FieldPath
	ContainsValue(*DeleteProjectInvitationRequest) bool
}

// ParseDeleteProjectInvitationRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeleteProjectInvitationRequest_FieldPathArrayItemValue(pathStr, valueStr string) (DeleteProjectInvitationRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseDeleteProjectInvitationRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteProjectInvitationRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeleteProjectInvitationRequest_FieldPathArrayItemValue), nil
}

func MustParseDeleteProjectInvitationRequest_FieldPathArrayItemValue(pathStr, valueStr string) DeleteProjectInvitationRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseDeleteProjectInvitationRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeleteProjectInvitationRequest_FieldTerminalPathArrayItemValue struct {
	DeleteProjectInvitationRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteProjectInvitationRequest_FieldPathArrayItemValue = (*DeleteProjectInvitationRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object DeleteProjectInvitationRequest as interface{}
func (fpaiv *DeleteProjectInvitationRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeleteProjectInvitationRequest_FieldTerminalPathArrayItemValue) GetSingle(source *DeleteProjectInvitationRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeleteProjectInvitationRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*DeleteProjectInvitationRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'DeleteProjectInvitationRequest'
func (fpaiv *DeleteProjectInvitationRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *DeleteProjectInvitationRequest) bool {
	slice := fpaiv.DeleteProjectInvitationRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeleteProjectInvitationRequest_FieldPathArrayOfValues allows storing slice of values for DeleteProjectInvitationRequest fields according to their type
type DeleteProjectInvitationRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeleteProjectInvitationRequest_FieldPath
}

func ParseDeleteProjectInvitationRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (DeleteProjectInvitationRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseDeleteProjectInvitationRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteProjectInvitationRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeleteProjectInvitationRequest_FieldPathArrayOfValues), nil
}

func MustParseDeleteProjectInvitationRequest_FieldPathArrayOfValues(pathStr, valuesStr string) DeleteProjectInvitationRequest_FieldPathArrayOfValues {
	fpaov, err := ParseDeleteProjectInvitationRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeleteProjectInvitationRequest_FieldTerminalPathArrayOfValues struct {
	DeleteProjectInvitationRequest_FieldTerminalPath
	values interface{}
}

var _ DeleteProjectInvitationRequest_FieldPathArrayOfValues = (*DeleteProjectInvitationRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeleteProjectInvitationRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeleteProjectInvitationRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*project_invitation.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeleteProjectInvitationRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*project_invitation.Reference, bool) {
	res, ok := fpaov.values.([]*project_invitation.Reference)
	return res, ok
}
