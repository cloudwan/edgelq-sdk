// Code generated by protoc-gen-goten-client
// API: GroupService
// DO NOT EDIT!!!

package group_client

import (
	"google.golang.org/protobuf/proto"

	gotenclient "github.com/cloudwan/goten-sdk/runtime/client"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	group "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha/group"
	empty "github.com/golang/protobuf/ptypes/empty"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = new(proto.Message)
	_ = new(gotenclient.MethodDescriptor)
	_ = gotenresource.WildcardId
)

// make sure we're using proto imports
var (
	_ = &group.Group{}
	_ = &empty.Empty{}
)

var (
	descriptorsInitialized   bool
	groupServiceDescriptor   *GroupServiceDescriptor
	getGroupDescriptor       *GetGroupDescriptor
	batchGetGroupsDescriptor *BatchGetGroupsDescriptor
	listGroupsDescriptor     *ListGroupsDescriptor
	watchGroupDescriptor     *WatchGroupDescriptor
	watchGroupsDescriptor    *WatchGroupsDescriptor
	createGroupDescriptor    *CreateGroupDescriptor
	updateGroupDescriptor    *UpdateGroupDescriptor
	deleteGroupDescriptor    *DeleteGroupDescriptor
)

type GetGroupDescriptor struct{}

type GetGroupDescriptorClientMsgHandle struct{}

type GetGroupDescriptorServerMsgHandle struct{}

func (d *GetGroupDescriptor) NewEmptyClientMsg() proto.Message {
	return &GetGroupRequest{}
}

func (d *GetGroupDescriptor) NewEmptyServerMsg() proto.Message {
	return &group.Group{}
}

func (d *GetGroupDescriptor) IsUnary() bool {
	return true
}

func (d *GetGroupDescriptor) IsClientStream() bool {
	return false
}

func (d *GetGroupDescriptor) IsServerStream() bool {
	return false
}

func (d *GetGroupDescriptor) IsCollection() bool {
	return false
}

func (d *GetGroupDescriptor) IsPlural() bool {
	return false
}

func (d *GetGroupDescriptor) HasResource() bool {
	return true
}

func (d *GetGroupDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *GetGroupDescriptor) GetVerb() string {
	return "get"
}

func (d *GetGroupDescriptor) GetMethodName() string {
	return "GetGroup"
}

func (d *GetGroupDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1alpha.GroupService/GetGroup"
}

func (d *GetGroupDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha"
}

func (d *GetGroupDescriptor) GetApiName() string {
	return "GroupService"
}

func (d *GetGroupDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *GetGroupDescriptor) GetServiceVersion() string {
	return "v1alpha"
}

func (d *GetGroupDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return groupServiceDescriptor
}

func (d *GetGroupDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return group.GetDescriptor()
}

func (d *GetGroupDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetGroupDescriptorClientMsgHandle{}
}

func (d *GetGroupDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetGroupDescriptorServerMsgHandle{}
}

func (h *GetGroupDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetGroupRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*GetGroupRequest) *group.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if ref := typedMsg.GetName(); ref != nil {
			return &ref.Name
		}
	}
	return (*group.Name)(nil)
}

func (h *GetGroupDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*GetGroupRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*GetGroupRequest) []*group.Name
	})
	if ok {
		return group.GroupNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetGroupDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetGroupRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*GetGroupRequest) *group.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *GetGroupDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*group.Group)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*group.Group) *group.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*group.Name)(nil)
}

func (h *GetGroupDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*group.Group)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*group.Group) []*group.Name
	})
	if ok {
		return group.GroupNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetGroupDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*group.Group)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*group.Group) *group.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetGetGroupDescriptor() *GetGroupDescriptor {
	return getGroupDescriptor
}

type BatchGetGroupsDescriptor struct{}

type BatchGetGroupsDescriptorClientMsgHandle struct{}

type BatchGetGroupsDescriptorServerMsgHandle struct{}

func (d *BatchGetGroupsDescriptor) NewEmptyClientMsg() proto.Message {
	return &BatchGetGroupsRequest{}
}

func (d *BatchGetGroupsDescriptor) NewEmptyServerMsg() proto.Message {
	return &BatchGetGroupsResponse{}
}

func (d *BatchGetGroupsDescriptor) IsUnary() bool {
	return true
}

func (d *BatchGetGroupsDescriptor) IsClientStream() bool {
	return false
}

func (d *BatchGetGroupsDescriptor) IsServerStream() bool {
	return false
}

func (d *BatchGetGroupsDescriptor) IsCollection() bool {
	return false
}

func (d *BatchGetGroupsDescriptor) IsPlural() bool {
	return true
}

func (d *BatchGetGroupsDescriptor) HasResource() bool {
	return true
}

func (d *BatchGetGroupsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *BatchGetGroupsDescriptor) GetVerb() string {
	return "batchGet"
}

func (d *BatchGetGroupsDescriptor) GetMethodName() string {
	return "BatchGetGroups"
}

func (d *BatchGetGroupsDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1alpha.GroupService/BatchGetGroups"
}

func (d *BatchGetGroupsDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha"
}

func (d *BatchGetGroupsDescriptor) GetApiName() string {
	return "GroupService"
}

func (d *BatchGetGroupsDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *BatchGetGroupsDescriptor) GetServiceVersion() string {
	return "v1alpha"
}

func (d *BatchGetGroupsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return groupServiceDescriptor
}

func (d *BatchGetGroupsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return group.GetDescriptor()
}

func (d *BatchGetGroupsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetGroupsDescriptorClientMsgHandle{}
}

func (d *BatchGetGroupsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetGroupsDescriptorServerMsgHandle{}
}

func (h *BatchGetGroupsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetGroupsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetGroupsRequest) *group.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetGroupsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetGroupsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetGroupsRequest) []*group.Name
	})
	if ok {
		return group.GroupNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if refs := typedMsg.GetNames(); len(refs) > 0 {
			list := make(group.GroupNameList, 0, len(refs))
			for _, ref := range refs {
				list = append(list, &ref.Name)
			}
			return list
		}
	}
	return (group.GroupNameList)(nil)
}

func (h *BatchGetGroupsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetGroupsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*BatchGetGroupsRequest) *group.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *BatchGetGroupsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetGroupsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetGroupsResponse) *group.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetGroupsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetGroupsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetGroupsResponse) []*group.Name
	})
	if ok {
		return group.GroupNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetGroups(); len(resources) > 0 {
			list := make(group.GroupNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (group.GroupNameList)(nil)
}

func (h *BatchGetGroupsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetGroupsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*BatchGetGroupsResponse) *group.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetBatchGetGroupsDescriptor() *BatchGetGroupsDescriptor {
	return batchGetGroupsDescriptor
}

type ListGroupsDescriptor struct{}

type ListGroupsDescriptorClientMsgHandle struct{}

type ListGroupsDescriptorServerMsgHandle struct{}

func (d *ListGroupsDescriptor) NewEmptyClientMsg() proto.Message {
	return &ListGroupsRequest{}
}

func (d *ListGroupsDescriptor) NewEmptyServerMsg() proto.Message {
	return &ListGroupsResponse{}
}

func (d *ListGroupsDescriptor) IsUnary() bool {
	return true
}

func (d *ListGroupsDescriptor) IsClientStream() bool {
	return false
}

func (d *ListGroupsDescriptor) IsServerStream() bool {
	return false
}

func (d *ListGroupsDescriptor) IsCollection() bool {
	return true
}

func (d *ListGroupsDescriptor) IsPlural() bool {
	return true
}

func (d *ListGroupsDescriptor) HasResource() bool {
	return true
}

func (d *ListGroupsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ListGroupsDescriptor) GetVerb() string {
	return "list"
}

func (d *ListGroupsDescriptor) GetMethodName() string {
	return "ListGroups"
}

func (d *ListGroupsDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1alpha.GroupService/ListGroups"
}

func (d *ListGroupsDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha"
}

func (d *ListGroupsDescriptor) GetApiName() string {
	return "GroupService"
}

func (d *ListGroupsDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *ListGroupsDescriptor) GetServiceVersion() string {
	return "v1alpha"
}

func (d *ListGroupsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return groupServiceDescriptor
}

func (d *ListGroupsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return group.GetDescriptor()
}

func (d *ListGroupsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListGroupsDescriptorClientMsgHandle{}
}

func (d *ListGroupsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListGroupsDescriptorServerMsgHandle{}
}

func (h *ListGroupsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListGroupsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListGroupsRequest) *group.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListGroupsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListGroupsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListGroupsRequest) []*group.Name
	})
	if ok {
		return group.GroupNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *ListGroupsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListGroupsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ListGroupsRequest) *group.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*group.ParentName)(nil)
}

func (h *ListGroupsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListGroupsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListGroupsResponse) *group.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListGroupsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListGroupsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListGroupsResponse) []*group.Name
	})
	if ok {
		return group.GroupNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetGroups(); len(resources) > 0 {
			list := make(group.GroupNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (group.GroupNameList)(nil)
}

func (h *ListGroupsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListGroupsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ListGroupsResponse) *group.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetListGroupsDescriptor() *ListGroupsDescriptor {
	return listGroupsDescriptor
}

type WatchGroupDescriptor struct{}

type WatchGroupDescriptorClientMsgHandle struct{}

type WatchGroupDescriptorServerMsgHandle struct{}

func (d *WatchGroupDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchGroupRequest{}
}

func (d *WatchGroupDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchGroupResponse{}
}

func (d *WatchGroupDescriptor) IsUnary() bool {
	return false
}

func (d *WatchGroupDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchGroupDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchGroupDescriptor) IsCollection() bool {
	return false
}

func (d *WatchGroupDescriptor) IsPlural() bool {
	return false
}

func (d *WatchGroupDescriptor) HasResource() bool {
	return true
}

func (d *WatchGroupDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchGroupDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchGroupDescriptor) GetMethodName() string {
	return "WatchGroup"
}

func (d *WatchGroupDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1alpha.GroupService/WatchGroup"
}

func (d *WatchGroupDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha"
}

func (d *WatchGroupDescriptor) GetApiName() string {
	return "GroupService"
}

func (d *WatchGroupDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *WatchGroupDescriptor) GetServiceVersion() string {
	return "v1alpha"
}

func (d *WatchGroupDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return groupServiceDescriptor
}

func (d *WatchGroupDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return group.GetDescriptor()
}

func (d *WatchGroupDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchGroupDescriptorClientMsgHandle{}
}

func (d *WatchGroupDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchGroupDescriptorServerMsgHandle{}
}

func (h *WatchGroupDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchGroupRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchGroupRequest) *group.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if ref := typedMsg.GetName(); ref != nil {
			return &ref.Name
		}
	}
	return (*group.Name)(nil)
}

func (h *WatchGroupDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchGroupRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchGroupRequest) []*group.Name
	})
	if ok {
		return group.GroupNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchGroupDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchGroupRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchGroupRequest) *group.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchGroupDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchGroupResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchGroupResponse) *group.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if resChange := typedMsg.GetChange(); resChange != nil {
			switch tResChange := resChange.ChangeType.(type) {
			case *group.GroupChange_Added_:
				return tResChange.Added.GetGroup().GetName()
			case *group.GroupChange_Modified_:
				return tResChange.Modified.GetName()
			case *group.GroupChange_Removed_:
				return tResChange.Removed.GetName()
			case *group.GroupChange_Current_:
				return tResChange.Current.GetGroup().GetName()
			}
		}
	}
	return (*group.Name)(nil)
}

func (h *WatchGroupDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchGroupResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchGroupResponse) []*group.Name
	})
	if ok {
		return group.GroupNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchGroupDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchGroupResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchGroupResponse) *group.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetWatchGroupDescriptor() *WatchGroupDescriptor {
	return watchGroupDescriptor
}

type WatchGroupsDescriptor struct{}

type WatchGroupsDescriptorClientMsgHandle struct{}

type WatchGroupsDescriptorServerMsgHandle struct{}

func (d *WatchGroupsDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchGroupsRequest{}
}

func (d *WatchGroupsDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchGroupsResponse{}
}

func (d *WatchGroupsDescriptor) IsUnary() bool {
	return false
}

func (d *WatchGroupsDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchGroupsDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchGroupsDescriptor) IsCollection() bool {
	return true
}

func (d *WatchGroupsDescriptor) IsPlural() bool {
	return true
}

func (d *WatchGroupsDescriptor) HasResource() bool {
	return true
}

func (d *WatchGroupsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchGroupsDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchGroupsDescriptor) GetMethodName() string {
	return "WatchGroups"
}

func (d *WatchGroupsDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1alpha.GroupService/WatchGroups"
}

func (d *WatchGroupsDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha"
}

func (d *WatchGroupsDescriptor) GetApiName() string {
	return "GroupService"
}

func (d *WatchGroupsDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *WatchGroupsDescriptor) GetServiceVersion() string {
	return "v1alpha"
}

func (d *WatchGroupsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return groupServiceDescriptor
}

func (d *WatchGroupsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return group.GetDescriptor()
}

func (d *WatchGroupsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchGroupsDescriptorClientMsgHandle{}
}

func (d *WatchGroupsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchGroupsDescriptorServerMsgHandle{}
}

func (h *WatchGroupsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchGroupsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchGroupsRequest) *group.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchGroupsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchGroupsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchGroupsRequest) []*group.Name
	})
	if ok {
		return group.GroupNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchGroupsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchGroupsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchGroupsRequest) *group.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if ref := typedMsg.GetParent(); ref != nil {
			return &ref.ParentName
		}
	}
	return (*group.ParentName)(nil)
}

func (h *WatchGroupsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchGroupsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchGroupsResponse) *group.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchGroupsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchGroupsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchGroupsResponse) []*group.Name
	})
	if ok {
		return group.GroupNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resChanges := typedMsg.GetGroupChanges(); len(resChanges) > 0 {
			list := make(group.GroupNameList, 0, len(resChanges))
			for _, resChange := range resChanges {
				switch tResChange := resChange.ChangeType.(type) {
				case *group.GroupChange_Added_:
					list = append(list, tResChange.Added.GetGroup().GetName())
				case *group.GroupChange_Modified_:
					list = append(list, tResChange.Modified.GetName())
				case *group.GroupChange_Removed_:
					list = append(list, tResChange.Removed.GetName())
				case *group.GroupChange_Current_:
					list = append(list, tResChange.Current.GetGroup().GetName())
				}
			}
			return list
		}
	}
	return (group.GroupNameList)(nil)
}

func (h *WatchGroupsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchGroupsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchGroupsResponse) *group.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetWatchGroupsDescriptor() *WatchGroupsDescriptor {
	return watchGroupsDescriptor
}

type CreateGroupDescriptor struct{}

type CreateGroupDescriptorClientMsgHandle struct{}

type CreateGroupDescriptorServerMsgHandle struct{}

func (d *CreateGroupDescriptor) NewEmptyClientMsg() proto.Message {
	return &CreateGroupRequest{}
}

func (d *CreateGroupDescriptor) NewEmptyServerMsg() proto.Message {
	return &group.Group{}
}

func (d *CreateGroupDescriptor) IsUnary() bool {
	return true
}

func (d *CreateGroupDescriptor) IsClientStream() bool {
	return false
}

func (d *CreateGroupDescriptor) IsServerStream() bool {
	return false
}

func (d *CreateGroupDescriptor) IsCollection() bool {
	return true
}

func (d *CreateGroupDescriptor) IsPlural() bool {
	return false
}

func (d *CreateGroupDescriptor) HasResource() bool {
	return true
}

func (d *CreateGroupDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *CreateGroupDescriptor) GetVerb() string {
	return "create"
}

func (d *CreateGroupDescriptor) GetMethodName() string {
	return "CreateGroup"
}

func (d *CreateGroupDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1alpha.GroupService/CreateGroup"
}

func (d *CreateGroupDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha"
}

func (d *CreateGroupDescriptor) GetApiName() string {
	return "GroupService"
}

func (d *CreateGroupDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *CreateGroupDescriptor) GetServiceVersion() string {
	return "v1alpha"
}

func (d *CreateGroupDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return groupServiceDescriptor
}

func (d *CreateGroupDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return group.GetDescriptor()
}

func (d *CreateGroupDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateGroupDescriptorClientMsgHandle{}
}

func (d *CreateGroupDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateGroupDescriptorServerMsgHandle{}
}

func (h *CreateGroupDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateGroupRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*CreateGroupRequest) *group.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetGroup()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*group.Name)(nil)
}

func (h *CreateGroupDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*CreateGroupRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*CreateGroupRequest) []*group.Name
	})
	if ok {
		return group.GroupNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateGroupDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateGroupRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*CreateGroupRequest) *group.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if ref := typedMsg.GetParent(); ref != nil {
			return &ref.ParentName
		}
	}
	return (*group.ParentName)(nil)
}

func (h *CreateGroupDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*group.Group)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*group.Group) *group.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*group.Name)(nil)
}

func (h *CreateGroupDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*group.Group)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*group.Group) []*group.Name
	})
	if ok {
		return group.GroupNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateGroupDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*group.Group)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*group.Group) *group.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetCreateGroupDescriptor() *CreateGroupDescriptor {
	return createGroupDescriptor
}

type UpdateGroupDescriptor struct{}

type UpdateGroupDescriptorClientMsgHandle struct{}

type UpdateGroupDescriptorServerMsgHandle struct{}

func (d *UpdateGroupDescriptor) NewEmptyClientMsg() proto.Message {
	return &UpdateGroupRequest{}
}

func (d *UpdateGroupDescriptor) NewEmptyServerMsg() proto.Message {
	return &group.Group{}
}

func (d *UpdateGroupDescriptor) IsUnary() bool {
	return true
}

func (d *UpdateGroupDescriptor) IsClientStream() bool {
	return false
}

func (d *UpdateGroupDescriptor) IsServerStream() bool {
	return false
}

func (d *UpdateGroupDescriptor) IsCollection() bool {
	return false
}

func (d *UpdateGroupDescriptor) IsPlural() bool {
	return false
}

func (d *UpdateGroupDescriptor) HasResource() bool {
	return true
}

func (d *UpdateGroupDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *UpdateGroupDescriptor) GetVerb() string {
	return "update"
}

func (d *UpdateGroupDescriptor) GetMethodName() string {
	return "UpdateGroup"
}

func (d *UpdateGroupDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1alpha.GroupService/UpdateGroup"
}

func (d *UpdateGroupDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha"
}

func (d *UpdateGroupDescriptor) GetApiName() string {
	return "GroupService"
}

func (d *UpdateGroupDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *UpdateGroupDescriptor) GetServiceVersion() string {
	return "v1alpha"
}

func (d *UpdateGroupDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return groupServiceDescriptor
}

func (d *UpdateGroupDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return group.GetDescriptor()
}

func (d *UpdateGroupDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateGroupDescriptorClientMsgHandle{}
}

func (d *UpdateGroupDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateGroupDescriptorServerMsgHandle{}
}

func (h *UpdateGroupDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateGroupRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*UpdateGroupRequest) *group.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetGroup()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*group.Name)(nil)
}

func (h *UpdateGroupDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*UpdateGroupRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*UpdateGroupRequest) []*group.Name
	})
	if ok {
		return group.GroupNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateGroupDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateGroupRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*UpdateGroupRequest) *group.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *UpdateGroupDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*group.Group)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*group.Group) *group.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*group.Name)(nil)
}

func (h *UpdateGroupDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*group.Group)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*group.Group) []*group.Name
	})
	if ok {
		return group.GroupNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateGroupDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*group.Group)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*group.Group) *group.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetUpdateGroupDescriptor() *UpdateGroupDescriptor {
	return updateGroupDescriptor
}

type DeleteGroupDescriptor struct{}

type DeleteGroupDescriptorClientMsgHandle struct{}

type DeleteGroupDescriptorServerMsgHandle struct{}

func (d *DeleteGroupDescriptor) NewEmptyClientMsg() proto.Message {
	return &DeleteGroupRequest{}
}

func (d *DeleteGroupDescriptor) NewEmptyServerMsg() proto.Message {
	return &empty.Empty{}
}

func (d *DeleteGroupDescriptor) IsUnary() bool {
	return true
}

func (d *DeleteGroupDescriptor) IsClientStream() bool {
	return false
}

func (d *DeleteGroupDescriptor) IsServerStream() bool {
	return false
}

func (d *DeleteGroupDescriptor) IsCollection() bool {
	return false
}

func (d *DeleteGroupDescriptor) IsPlural() bool {
	return false
}

func (d *DeleteGroupDescriptor) HasResource() bool {
	return true
}

func (d *DeleteGroupDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *DeleteGroupDescriptor) GetVerb() string {
	return "delete"
}

func (d *DeleteGroupDescriptor) GetMethodName() string {
	return "DeleteGroup"
}

func (d *DeleteGroupDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1alpha.GroupService/DeleteGroup"
}

func (d *DeleteGroupDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha"
}

func (d *DeleteGroupDescriptor) GetApiName() string {
	return "GroupService"
}

func (d *DeleteGroupDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *DeleteGroupDescriptor) GetServiceVersion() string {
	return "v1alpha"
}

func (d *DeleteGroupDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return groupServiceDescriptor
}

func (d *DeleteGroupDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return group.GetDescriptor()
}

func (d *DeleteGroupDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteGroupDescriptorClientMsgHandle{}
}

func (d *DeleteGroupDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteGroupDescriptorServerMsgHandle{}
}

func (h *DeleteGroupDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteGroupRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*DeleteGroupRequest) *group.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if ref := typedMsg.GetName(); ref != nil {
			return &ref.Name
		}
	}
	return (*group.Name)(nil)
}

func (h *DeleteGroupDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*DeleteGroupRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*DeleteGroupRequest) []*group.Name
	})
	if ok {
		return group.GroupNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteGroupDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteGroupRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*DeleteGroupRequest) *group.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *DeleteGroupDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*empty.Empty) *group.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *DeleteGroupDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*empty.Empty) []*group.Name
	})
	if ok {
		return group.GroupNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteGroupDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*empty.Empty) *group.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetDeleteGroupDescriptor() *DeleteGroupDescriptor {
	return deleteGroupDescriptor
}

type GroupServiceDescriptor struct{}

func (d *GroupServiceDescriptor) AllMethodDescriptors() []gotenclient.MethodDescriptor {
	return []gotenclient.MethodDescriptor{
		getGroupDescriptor,
		batchGetGroupsDescriptor,
		listGroupsDescriptor,
		watchGroupDescriptor,
		watchGroupsDescriptor,
		createGroupDescriptor,
		updateGroupDescriptor,
		deleteGroupDescriptor,
	}
}

func (d *GroupServiceDescriptor) GetFullAPIName() string {
	return "/ntt.iam.v1alpha.GroupService"
}

func (d *GroupServiceDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha"
}

func (d *GroupServiceDescriptor) GetApiName() string {
	return "GroupService"
}

func (d *GroupServiceDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *GroupServiceDescriptor) GetServiceVersion() string {
	return "v1alpha"
}

func GetGroupServiceDescriptor() *GroupServiceDescriptor {
	return groupServiceDescriptor
}

func initDescriptors() {
	groupServiceDescriptor = &GroupServiceDescriptor{}
	getGroupDescriptor = &GetGroupDescriptor{}
	batchGetGroupsDescriptor = &BatchGetGroupsDescriptor{}
	listGroupsDescriptor = &ListGroupsDescriptor{}
	watchGroupDescriptor = &WatchGroupDescriptor{}
	watchGroupsDescriptor = &WatchGroupsDescriptor{}
	createGroupDescriptor = &CreateGroupDescriptor{}
	updateGroupDescriptor = &UpdateGroupDescriptor{}
	deleteGroupDescriptor = &DeleteGroupDescriptor{}
	gotenclient.GetRegistry().RegisterApiDescriptor(groupServiceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(getGroupDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(batchGetGroupsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(listGroupsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchGroupDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchGroupsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(createGroupDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(updateGroupDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(deleteGroupDescriptor)
}

func init() {
	if !descriptorsInitialized {
		initDescriptors()
		descriptorsInitialized = true
	}
}
