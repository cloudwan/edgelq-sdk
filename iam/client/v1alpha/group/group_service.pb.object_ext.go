// Code generated by protoc-gen-goten-object
// File: edgelq/iam/proto/v1alpha/group_service.proto
// DO NOT EDIT!!!

package group_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	group "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha/group"
	organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha/organization"
	project "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha/project"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &group.Group{}
	_ = &organization.Organization{}
	_ = &project.Project{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

func (o *GetGroupRequest) GotenObjectExt() {}

func (o *GetGroupRequest) MakeFullFieldMask() *GetGroupRequest_FieldMask {
	return FullGetGroupRequest_FieldMask()
}

func (o *GetGroupRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullGetGroupRequest_FieldMask()
}

func (o *GetGroupRequest) MakeDiffFieldMask(other *GetGroupRequest) *GetGroupRequest_FieldMask {
	if o == nil && other == nil {
		return &GetGroupRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullGetGroupRequest_FieldMask()
	}

	res := &GetGroupRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &GetGroupRequest_FieldTerminalPath{selector: GetGroupRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &GetGroupRequest_FieldTerminalPath{selector: GetGroupRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &GetGroupRequest_FieldTerminalPath{selector: GetGroupRequest_FieldPathSelectorView})
	}
	return res
}

func (o *GetGroupRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*GetGroupRequest))
}

func (o *GetGroupRequest) Clone() *GetGroupRequest {
	if o == nil {
		return nil
	}
	result := &GetGroupRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &group.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*group.Group_FieldMask)
	result.View = o.View
	return result
}

func (o *GetGroupRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *GetGroupRequest) Merge(source *GetGroupRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &group.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(group.Group_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *GetGroupRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*GetGroupRequest))
}

func (o *BatchGetGroupsRequest) GotenObjectExt() {}

func (o *BatchGetGroupsRequest) MakeFullFieldMask() *BatchGetGroupsRequest_FieldMask {
	return FullBatchGetGroupsRequest_FieldMask()
}

func (o *BatchGetGroupsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetGroupsRequest_FieldMask()
}

func (o *BatchGetGroupsRequest) MakeDiffFieldMask(other *BatchGetGroupsRequest) *BatchGetGroupsRequest_FieldMask {
	if o == nil && other == nil {
		return &BatchGetGroupsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetGroupsRequest_FieldMask()
	}

	res := &BatchGetGroupsRequest_FieldMask{}

	if len(o.GetNames()) == len(other.GetNames()) {
		for i, lValue := range o.GetNames() {
			rValue := other.GetNames()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetGroupsRequest_FieldTerminalPath{selector: BatchGetGroupsRequest_FieldPathSelectorNames})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetGroupsRequest_FieldTerminalPath{selector: BatchGetGroupsRequest_FieldPathSelectorNames})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &BatchGetGroupsRequest_FieldTerminalPath{selector: BatchGetGroupsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &BatchGetGroupsRequest_FieldTerminalPath{selector: BatchGetGroupsRequest_FieldPathSelectorView})
	}
	return res
}

func (o *BatchGetGroupsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetGroupsRequest))
}

func (o *BatchGetGroupsRequest) Clone() *BatchGetGroupsRequest {
	if o == nil {
		return nil
	}
	result := &BatchGetGroupsRequest{}
	result.Names = make([]*group.Reference, len(o.Names))
	for i, sourceValue := range o.Names {
		if sourceValue == nil {
			result.Names[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Names[i] = &group.Reference{}
			if err := result.Names[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*group.Group_FieldMask)
	result.View = o.View
	return result
}

func (o *BatchGetGroupsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetGroupsRequest) Merge(source *BatchGetGroupsRequest) {
	for _, sourceValue := range source.GetNames() {
		exists := false
		for _, currentValue := range o.Names {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *group.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &group.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Names = append(o.Names, newDstElement)
		}
	}

	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(group.Group_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *BatchGetGroupsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetGroupsRequest))
}

func (o *BatchGetGroupsResponse) GotenObjectExt() {}

func (o *BatchGetGroupsResponse) MakeFullFieldMask() *BatchGetGroupsResponse_FieldMask {
	return FullBatchGetGroupsResponse_FieldMask()
}

func (o *BatchGetGroupsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetGroupsResponse_FieldMask()
}

func (o *BatchGetGroupsResponse) MakeDiffFieldMask(other *BatchGetGroupsResponse) *BatchGetGroupsResponse_FieldMask {
	if o == nil && other == nil {
		return &BatchGetGroupsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetGroupsResponse_FieldMask()
	}

	res := &BatchGetGroupsResponse_FieldMask{}

	if len(o.GetGroups()) == len(other.GetGroups()) {
		for i, lValue := range o.GetGroups() {
			rValue := other.GetGroups()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &BatchGetGroupsResponse_FieldTerminalPath{selector: BatchGetGroupsResponse_FieldPathSelectorGroups})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetGroupsResponse_FieldTerminalPath{selector: BatchGetGroupsResponse_FieldPathSelectorGroups})
	}

	if len(o.GetMissing()) == len(other.GetMissing()) {
		for i, lValue := range o.GetMissing() {
			rValue := other.GetMissing()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetGroupsResponse_FieldTerminalPath{selector: BatchGetGroupsResponse_FieldPathSelectorMissing})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetGroupsResponse_FieldTerminalPath{selector: BatchGetGroupsResponse_FieldPathSelectorMissing})
	}
	return res
}

func (o *BatchGetGroupsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetGroupsResponse))
}

func (o *BatchGetGroupsResponse) Clone() *BatchGetGroupsResponse {
	if o == nil {
		return nil
	}
	result := &BatchGetGroupsResponse{}
	result.Groups = make([]*group.Group, len(o.Groups))
	for i, sourceValue := range o.Groups {
		result.Groups[i] = sourceValue.Clone()
	}
	result.Missing = make([]*group.Reference, len(o.Missing))
	for i, sourceValue := range o.Missing {
		if sourceValue == nil {
			result.Missing[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Missing[i] = &group.Reference{}
			if err := result.Missing[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	return result
}

func (o *BatchGetGroupsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetGroupsResponse) Merge(source *BatchGetGroupsResponse) {
	for _, sourceValue := range source.GetGroups() {
		exists := false
		for _, currentValue := range o.Groups {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *group.Group
			if sourceValue != nil {
				newDstElement = new(group.Group)
				newDstElement.Merge(sourceValue)
			}
			o.Groups = append(o.Groups, newDstElement)
		}
	}

	for _, sourceValue := range source.GetMissing() {
		exists := false
		for _, currentValue := range o.Missing {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *group.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &group.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Missing = append(o.Missing, newDstElement)
		}
	}

}

func (o *BatchGetGroupsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetGroupsResponse))
}

func (o *ListGroupsRequest) GotenObjectExt() {}

func (o *ListGroupsRequest) MakeFullFieldMask() *ListGroupsRequest_FieldMask {
	return FullListGroupsRequest_FieldMask()
}

func (o *ListGroupsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListGroupsRequest_FieldMask()
}

func (o *ListGroupsRequest) MakeDiffFieldMask(other *ListGroupsRequest) *ListGroupsRequest_FieldMask {
	if o == nil && other == nil {
		return &ListGroupsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListGroupsRequest_FieldMask()
	}

	res := &ListGroupsRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &ListGroupsRequest_FieldTerminalPath{selector: ListGroupsRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &ListGroupsRequest_FieldTerminalPath{selector: ListGroupsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &ListGroupsRequest_FieldTerminalPath{selector: ListGroupsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &ListGroupsRequest_FieldTerminalPath{selector: ListGroupsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &ListGroupsRequest_FieldTerminalPath{selector: ListGroupsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &ListGroupsRequest_FieldTerminalPath{selector: ListGroupsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &ListGroupsRequest_FieldTerminalPath{selector: ListGroupsRequest_FieldPathSelectorView})
	}
	return res
}

func (o *ListGroupsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListGroupsRequest))
}

func (o *ListGroupsRequest) Clone() *ListGroupsRequest {
	if o == nil {
		return nil
	}
	result := &ListGroupsRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &group.ParentName{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &group.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &group.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &group.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*group.Group_FieldMask)
	result.View = o.View
	return result
}

func (o *ListGroupsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListGroupsRequest) Merge(source *ListGroupsRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &group.ParentName{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &group.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &group.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &group.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(group.Group_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *ListGroupsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListGroupsRequest))
}

func (o *ListGroupsResponse) GotenObjectExt() {}

func (o *ListGroupsResponse) MakeFullFieldMask() *ListGroupsResponse_FieldMask {
	return FullListGroupsResponse_FieldMask()
}

func (o *ListGroupsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListGroupsResponse_FieldMask()
}

func (o *ListGroupsResponse) MakeDiffFieldMask(other *ListGroupsResponse) *ListGroupsResponse_FieldMask {
	if o == nil && other == nil {
		return &ListGroupsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListGroupsResponse_FieldMask()
	}

	res := &ListGroupsResponse_FieldMask{}

	if len(o.GetGroups()) == len(other.GetGroups()) {
		for i, lValue := range o.GetGroups() {
			rValue := other.GetGroups()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &ListGroupsResponse_FieldTerminalPath{selector: ListGroupsResponse_FieldPathSelectorGroups})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ListGroupsResponse_FieldTerminalPath{selector: ListGroupsResponse_FieldPathSelectorGroups})
	}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &ListGroupsResponse_FieldTerminalPath{selector: ListGroupsResponse_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &ListGroupsResponse_FieldTerminalPath{selector: ListGroupsResponse_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *ListGroupsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListGroupsResponse))
}

func (o *ListGroupsResponse) Clone() *ListGroupsResponse {
	if o == nil {
		return nil
	}
	result := &ListGroupsResponse{}
	result.Groups = make([]*group.Group, len(o.Groups))
	for i, sourceValue := range o.Groups {
		result.Groups[i] = sourceValue.Clone()
	}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &group.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &group.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *ListGroupsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListGroupsResponse) Merge(source *ListGroupsResponse) {
	for _, sourceValue := range source.GetGroups() {
		exists := false
		for _, currentValue := range o.Groups {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *group.Group
			if sourceValue != nil {
				newDstElement = new(group.Group)
				newDstElement.Merge(sourceValue)
			}
			o.Groups = append(o.Groups, newDstElement)
		}
	}

	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &group.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &group.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *ListGroupsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListGroupsResponse))
}

func (o *WatchGroupRequest) GotenObjectExt() {}

func (o *WatchGroupRequest) MakeFullFieldMask() *WatchGroupRequest_FieldMask {
	return FullWatchGroupRequest_FieldMask()
}

func (o *WatchGroupRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchGroupRequest_FieldMask()
}

func (o *WatchGroupRequest) MakeDiffFieldMask(other *WatchGroupRequest) *WatchGroupRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchGroupRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchGroupRequest_FieldMask()
	}

	res := &WatchGroupRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &WatchGroupRequest_FieldTerminalPath{selector: WatchGroupRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchGroupRequest_FieldTerminalPath{selector: WatchGroupRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchGroupRequest_FieldTerminalPath{selector: WatchGroupRequest_FieldPathSelectorView})
	}
	return res
}

func (o *WatchGroupRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchGroupRequest))
}

func (o *WatchGroupRequest) Clone() *WatchGroupRequest {
	if o == nil {
		return nil
	}
	result := &WatchGroupRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &group.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*group.Group_FieldMask)
	result.View = o.View
	return result
}

func (o *WatchGroupRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchGroupRequest) Merge(source *WatchGroupRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &group.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(group.Group_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *WatchGroupRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchGroupRequest))
}

func (o *WatchGroupResponse) GotenObjectExt() {}

func (o *WatchGroupResponse) MakeFullFieldMask() *WatchGroupResponse_FieldMask {
	return FullWatchGroupResponse_FieldMask()
}

func (o *WatchGroupResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchGroupResponse_FieldMask()
}

func (o *WatchGroupResponse) MakeDiffFieldMask(other *WatchGroupResponse) *WatchGroupResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchGroupResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchGroupResponse_FieldMask()
	}

	res := &WatchGroupResponse_FieldMask{}
	if !proto.Equal(o.GetChange(), other.GetChange()) {
		res.Paths = append(res.Paths, &WatchGroupResponse_FieldTerminalPath{selector: WatchGroupResponse_FieldPathSelectorChange})
	}
	return res
}

func (o *WatchGroupResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchGroupResponse))
}

func (o *WatchGroupResponse) Clone() *WatchGroupResponse {
	if o == nil {
		return nil
	}
	result := &WatchGroupResponse{}
	result.Change = proto.Clone(o.Change).(*group.GroupChange)
	return result
}

func (o *WatchGroupResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchGroupResponse) Merge(source *WatchGroupResponse) {
	if source.GetChange() != nil {
		if o.Change == nil {
			o.Change = new(group.GroupChange)
		}
		proto.Merge(o.Change, source.GetChange())
	}
}

func (o *WatchGroupResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchGroupResponse))
}

func (o *WatchGroupsRequest) GotenObjectExt() {}

func (o *WatchGroupsRequest) MakeFullFieldMask() *WatchGroupsRequest_FieldMask {
	return FullWatchGroupsRequest_FieldMask()
}

func (o *WatchGroupsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchGroupsRequest_FieldMask()
}

func (o *WatchGroupsRequest) MakeDiffFieldMask(other *WatchGroupsRequest) *WatchGroupsRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchGroupsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchGroupsRequest_FieldMask()
	}

	res := &WatchGroupsRequest_FieldMask{}
	if o.GetType() != other.GetType() {
		res.Paths = append(res.Paths, &WatchGroupsRequest_FieldTerminalPath{selector: WatchGroupsRequest_FieldPathSelectorType})
	}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &WatchGroupsRequest_FieldTerminalPath{selector: WatchGroupsRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &WatchGroupsRequest_FieldTerminalPath{selector: WatchGroupsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &WatchGroupsRequest_FieldTerminalPath{selector: WatchGroupsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &WatchGroupsRequest_FieldTerminalPath{selector: WatchGroupsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchGroupsRequest_FieldTerminalPath{selector: WatchGroupsRequest_FieldPathSelectorResumeToken})
	}
	if !proto.Equal(o.GetStartingTime(), other.GetStartingTime()) {
		res.Paths = append(res.Paths, &WatchGroupsRequest_FieldTerminalPath{selector: WatchGroupsRequest_FieldPathSelectorStartingTime})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &WatchGroupsRequest_FieldTerminalPath{selector: WatchGroupsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchGroupsRequest_FieldTerminalPath{selector: WatchGroupsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchGroupsRequest_FieldTerminalPath{selector: WatchGroupsRequest_FieldPathSelectorView})
	}
	if o.GetMaxChunkSize() != other.GetMaxChunkSize() {
		res.Paths = append(res.Paths, &WatchGroupsRequest_FieldTerminalPath{selector: WatchGroupsRequest_FieldPathSelectorMaxChunkSize})
	}
	return res
}

func (o *WatchGroupsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchGroupsRequest))
}

func (o *WatchGroupsRequest) Clone() *WatchGroupsRequest {
	if o == nil {
		return nil
	}
	result := &WatchGroupsRequest{}
	result.Type = o.Type
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &group.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &group.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &group.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.ResumeToken = o.ResumeToken
	result.StartingTime = proto.Clone(o.StartingTime).(*timestamp.Timestamp)
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &group.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*group.Group_FieldMask)
	result.View = o.View
	result.MaxChunkSize = o.MaxChunkSize
	return result
}

func (o *WatchGroupsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchGroupsRequest) Merge(source *WatchGroupsRequest) {
	o.Type = source.GetType()
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &group.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &group.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &group.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	o.ResumeToken = source.GetResumeToken()
	if source.GetStartingTime() != nil {
		if o.StartingTime == nil {
			o.StartingTime = new(timestamp.Timestamp)
		}
		proto.Merge(o.StartingTime, source.GetStartingTime())
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &group.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(group.Group_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.MaxChunkSize = source.GetMaxChunkSize()
}

func (o *WatchGroupsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchGroupsRequest))
}

func (o *WatchGroupsResponse) GotenObjectExt() {}

func (o *WatchGroupsResponse) MakeFullFieldMask() *WatchGroupsResponse_FieldMask {
	return FullWatchGroupsResponse_FieldMask()
}

func (o *WatchGroupsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchGroupsResponse_FieldMask()
}

func (o *WatchGroupsResponse) MakeDiffFieldMask(other *WatchGroupsResponse) *WatchGroupsResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchGroupsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchGroupsResponse_FieldMask()
	}

	res := &WatchGroupsResponse_FieldMask{}

	if len(o.GetGroupChanges()) == len(other.GetGroupChanges()) {
		for i, lValue := range o.GetGroupChanges() {
			rValue := other.GetGroupChanges()[i]
			if !proto.Equal(lValue, rValue) {
				res.Paths = append(res.Paths, &WatchGroupsResponse_FieldTerminalPath{selector: WatchGroupsResponse_FieldPathSelectorGroupChanges})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &WatchGroupsResponse_FieldTerminalPath{selector: WatchGroupsResponse_FieldPathSelectorGroupChanges})
	}
	if o.GetIsCurrent() != other.GetIsCurrent() {
		res.Paths = append(res.Paths, &WatchGroupsResponse_FieldTerminalPath{selector: WatchGroupsResponse_FieldPathSelectorIsCurrent})
	}
	{
		subMask := o.GetPageTokenChange().MakeDiffFieldMask(other.GetPageTokenChange())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &WatchGroupsResponse_FieldTerminalPath{selector: WatchGroupsResponse_FieldPathSelectorPageTokenChange})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &WatchGroupsResponse_FieldSubPath{selector: WatchGroupsResponse_FieldPathSelectorPageTokenChange, subPath: subpath})
			}
		}
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchGroupsResponse_FieldTerminalPath{selector: WatchGroupsResponse_FieldPathSelectorResumeToken})
	}
	if o.GetSnapshotSize() != other.GetSnapshotSize() {
		res.Paths = append(res.Paths, &WatchGroupsResponse_FieldTerminalPath{selector: WatchGroupsResponse_FieldPathSelectorSnapshotSize})
	}
	if o.GetIsSoftReset() != other.GetIsSoftReset() {
		res.Paths = append(res.Paths, &WatchGroupsResponse_FieldTerminalPath{selector: WatchGroupsResponse_FieldPathSelectorIsSoftReset})
	}
	if o.GetIsHardReset() != other.GetIsHardReset() {
		res.Paths = append(res.Paths, &WatchGroupsResponse_FieldTerminalPath{selector: WatchGroupsResponse_FieldPathSelectorIsHardReset})
	}
	return res
}

func (o *WatchGroupsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchGroupsResponse))
}

func (o *WatchGroupsResponse) Clone() *WatchGroupsResponse {
	if o == nil {
		return nil
	}
	result := &WatchGroupsResponse{}
	result.GroupChanges = make([]*group.GroupChange, len(o.GroupChanges))
	for i, sourceValue := range o.GroupChanges {
		result.GroupChanges[i] = proto.Clone(sourceValue).(*group.GroupChange)
	}
	result.IsCurrent = o.IsCurrent
	result.PageTokenChange = o.PageTokenChange.Clone()
	result.ResumeToken = o.ResumeToken
	result.SnapshotSize = o.SnapshotSize
	result.IsSoftReset = o.IsSoftReset
	result.IsHardReset = o.IsHardReset
	return result
}

func (o *WatchGroupsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchGroupsResponse) Merge(source *WatchGroupsResponse) {
	for _, sourceValue := range source.GetGroupChanges() {
		exists := false
		for _, currentValue := range o.GroupChanges {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *group.GroupChange
			if sourceValue != nil {
				newDstElement = new(group.GroupChange)
				proto.Merge(newDstElement, sourceValue)
			}
			o.GroupChanges = append(o.GroupChanges, newDstElement)
		}
	}

	o.IsCurrent = source.GetIsCurrent()
	if source.GetPageTokenChange() != nil {
		if o.PageTokenChange == nil {
			o.PageTokenChange = new(WatchGroupsResponse_PageTokenChange)
		}
		o.PageTokenChange.Merge(source.GetPageTokenChange())
	}
	o.ResumeToken = source.GetResumeToken()
	o.SnapshotSize = source.GetSnapshotSize()
	o.IsSoftReset = source.GetIsSoftReset()
	o.IsHardReset = source.GetIsHardReset()
}

func (o *WatchGroupsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchGroupsResponse))
}

func (o *WatchGroupsResponse_PageTokenChange) GotenObjectExt() {}

func (o *WatchGroupsResponse_PageTokenChange) MakeFullFieldMask() *WatchGroupsResponse_PageTokenChange_FieldMask {
	return FullWatchGroupsResponse_PageTokenChange_FieldMask()
}

func (o *WatchGroupsResponse_PageTokenChange) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchGroupsResponse_PageTokenChange_FieldMask()
}

func (o *WatchGroupsResponse_PageTokenChange) MakeDiffFieldMask(other *WatchGroupsResponse_PageTokenChange) *WatchGroupsResponse_PageTokenChange_FieldMask {
	if o == nil && other == nil {
		return &WatchGroupsResponse_PageTokenChange_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchGroupsResponse_PageTokenChange_FieldMask()
	}

	res := &WatchGroupsResponse_PageTokenChange_FieldMask{}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &WatchGroupsResponsePageTokenChange_FieldTerminalPath{selector: WatchGroupsResponsePageTokenChange_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &WatchGroupsResponsePageTokenChange_FieldTerminalPath{selector: WatchGroupsResponsePageTokenChange_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *WatchGroupsResponse_PageTokenChange) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchGroupsResponse_PageTokenChange))
}

func (o *WatchGroupsResponse_PageTokenChange) Clone() *WatchGroupsResponse_PageTokenChange {
	if o == nil {
		return nil
	}
	result := &WatchGroupsResponse_PageTokenChange{}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &group.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &group.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *WatchGroupsResponse_PageTokenChange) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchGroupsResponse_PageTokenChange) Merge(source *WatchGroupsResponse_PageTokenChange) {
	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &group.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &group.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *WatchGroupsResponse_PageTokenChange) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchGroupsResponse_PageTokenChange))
}

func (o *CreateGroupRequest) GotenObjectExt() {}

func (o *CreateGroupRequest) MakeFullFieldMask() *CreateGroupRequest_FieldMask {
	return FullCreateGroupRequest_FieldMask()
}

func (o *CreateGroupRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullCreateGroupRequest_FieldMask()
}

func (o *CreateGroupRequest) MakeDiffFieldMask(other *CreateGroupRequest) *CreateGroupRequest_FieldMask {
	if o == nil && other == nil {
		return &CreateGroupRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullCreateGroupRequest_FieldMask()
	}

	res := &CreateGroupRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &CreateGroupRequest_FieldTerminalPath{selector: CreateGroupRequest_FieldPathSelectorParent})
	}
	{
		subMask := o.GetGroup().MakeDiffFieldMask(other.GetGroup())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &CreateGroupRequest_FieldTerminalPath{selector: CreateGroupRequest_FieldPathSelectorGroup})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &CreateGroupRequest_FieldSubPath{selector: CreateGroupRequest_FieldPathSelectorGroup, subPath: subpath})
			}
		}
	}
	return res
}

func (o *CreateGroupRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*CreateGroupRequest))
}

func (o *CreateGroupRequest) Clone() *CreateGroupRequest {
	if o == nil {
		return nil
	}
	result := &CreateGroupRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &group.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Group = o.Group.Clone()
	return result
}

func (o *CreateGroupRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *CreateGroupRequest) Merge(source *CreateGroupRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &group.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	if source.GetGroup() != nil {
		if o.Group == nil {
			o.Group = new(group.Group)
		}
		o.Group.Merge(source.GetGroup())
	}
}

func (o *CreateGroupRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*CreateGroupRequest))
}

func (o *UpdateGroupRequest) GotenObjectExt() {}

func (o *UpdateGroupRequest) MakeFullFieldMask() *UpdateGroupRequest_FieldMask {
	return FullUpdateGroupRequest_FieldMask()
}

func (o *UpdateGroupRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateGroupRequest_FieldMask()
}

func (o *UpdateGroupRequest) MakeDiffFieldMask(other *UpdateGroupRequest) *UpdateGroupRequest_FieldMask {
	if o == nil && other == nil {
		return &UpdateGroupRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateGroupRequest_FieldMask()
	}

	res := &UpdateGroupRequest_FieldMask{}
	{
		subMask := o.GetGroup().MakeDiffFieldMask(other.GetGroup())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateGroupRequest_FieldTerminalPath{selector: UpdateGroupRequest_FieldPathSelectorGroup})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateGroupRequest_FieldSubPath{selector: UpdateGroupRequest_FieldPathSelectorGroup, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetUpdateMask(), other.GetUpdateMask()) {
		res.Paths = append(res.Paths, &UpdateGroupRequest_FieldTerminalPath{selector: UpdateGroupRequest_FieldPathSelectorUpdateMask})
	}
	{
		subMask := o.GetCas().MakeDiffFieldMask(other.GetCas())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateGroupRequest_FieldTerminalPath{selector: UpdateGroupRequest_FieldPathSelectorCas})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateGroupRequest_FieldSubPath{selector: UpdateGroupRequest_FieldPathSelectorCas, subPath: subpath})
			}
		}
	}
	return res
}

func (o *UpdateGroupRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateGroupRequest))
}

func (o *UpdateGroupRequest) Clone() *UpdateGroupRequest {
	if o == nil {
		return nil
	}
	result := &UpdateGroupRequest{}
	result.Group = o.Group.Clone()
	result.UpdateMask = proto.Clone(o.UpdateMask).(*group.Group_FieldMask)
	result.Cas = o.Cas.Clone()
	return result
}

func (o *UpdateGroupRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateGroupRequest) Merge(source *UpdateGroupRequest) {
	if source.GetGroup() != nil {
		if o.Group == nil {
			o.Group = new(group.Group)
		}
		o.Group.Merge(source.GetGroup())
	}
	if source.GetUpdateMask() != nil {
		if o.UpdateMask == nil {
			o.UpdateMask = new(group.Group_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetUpdateMask().ToProtoFieldMask(), o.UpdateMask.ToProtoFieldMask())
		if err := o.UpdateMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	if source.GetCas() != nil {
		if o.Cas == nil {
			o.Cas = new(UpdateGroupRequest_CAS)
		}
		o.Cas.Merge(source.GetCas())
	}
}

func (o *UpdateGroupRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateGroupRequest))
}

func (o *UpdateGroupRequest_CAS) GotenObjectExt() {}

func (o *UpdateGroupRequest_CAS) MakeFullFieldMask() *UpdateGroupRequest_CAS_FieldMask {
	return FullUpdateGroupRequest_CAS_FieldMask()
}

func (o *UpdateGroupRequest_CAS) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateGroupRequest_CAS_FieldMask()
}

func (o *UpdateGroupRequest_CAS) MakeDiffFieldMask(other *UpdateGroupRequest_CAS) *UpdateGroupRequest_CAS_FieldMask {
	if o == nil && other == nil {
		return &UpdateGroupRequest_CAS_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateGroupRequest_CAS_FieldMask()
	}

	res := &UpdateGroupRequest_CAS_FieldMask{}
	{
		subMask := o.GetConditionalState().MakeDiffFieldMask(other.GetConditionalState())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateGroupRequestCAS_FieldTerminalPath{selector: UpdateGroupRequestCAS_FieldPathSelectorConditionalState})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateGroupRequestCAS_FieldSubPath{selector: UpdateGroupRequestCAS_FieldPathSelectorConditionalState, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &UpdateGroupRequestCAS_FieldTerminalPath{selector: UpdateGroupRequestCAS_FieldPathSelectorFieldMask})
	}
	return res
}

func (o *UpdateGroupRequest_CAS) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateGroupRequest_CAS))
}

func (o *UpdateGroupRequest_CAS) Clone() *UpdateGroupRequest_CAS {
	if o == nil {
		return nil
	}
	result := &UpdateGroupRequest_CAS{}
	result.ConditionalState = o.ConditionalState.Clone()
	result.FieldMask = proto.Clone(o.FieldMask).(*group.Group_FieldMask)
	return result
}

func (o *UpdateGroupRequest_CAS) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateGroupRequest_CAS) Merge(source *UpdateGroupRequest_CAS) {
	if source.GetConditionalState() != nil {
		if o.ConditionalState == nil {
			o.ConditionalState = new(group.Group)
		}
		o.ConditionalState.Merge(source.GetConditionalState())
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(group.Group_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
}

func (o *UpdateGroupRequest_CAS) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateGroupRequest_CAS))
}

func (o *DeleteGroupRequest) GotenObjectExt() {}

func (o *DeleteGroupRequest) MakeFullFieldMask() *DeleteGroupRequest_FieldMask {
	return FullDeleteGroupRequest_FieldMask()
}

func (o *DeleteGroupRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDeleteGroupRequest_FieldMask()
}

func (o *DeleteGroupRequest) MakeDiffFieldMask(other *DeleteGroupRequest) *DeleteGroupRequest_FieldMask {
	if o == nil && other == nil {
		return &DeleteGroupRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDeleteGroupRequest_FieldMask()
	}

	res := &DeleteGroupRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &DeleteGroupRequest_FieldTerminalPath{selector: DeleteGroupRequest_FieldPathSelectorName})
	}
	return res
}

func (o *DeleteGroupRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*DeleteGroupRequest))
}

func (o *DeleteGroupRequest) Clone() *DeleteGroupRequest {
	if o == nil {
		return nil
	}
	result := &DeleteGroupRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &group.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *DeleteGroupRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *DeleteGroupRequest) Merge(source *DeleteGroupRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &group.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
}

func (o *DeleteGroupRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*DeleteGroupRequest))
}
