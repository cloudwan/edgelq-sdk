// Code generated by protoc-gen-goten-client
// API: ConditionService
// DO NOT EDIT!!!

package condition_client

import (
	"google.golang.org/protobuf/proto"

	gotenclient "github.com/cloudwan/goten-sdk/runtime/client"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	condition "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha/condition"
	empty "github.com/golang/protobuf/ptypes/empty"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = proto.Message(nil)
	_ = gotenclient.MethodDescriptor(nil)
	_ = gotenresource.WildcardId
)

// make sure we're using proto imports
var (
	_ = &condition.Condition{}
	_ = &empty.Empty{}
)

var (
	descriptorsInitialized       bool
	conditionServiceDescriptor   *ConditionServiceDescriptor
	getConditionDescriptor       *GetConditionDescriptor
	batchGetConditionsDescriptor *BatchGetConditionsDescriptor
	listConditionsDescriptor     *ListConditionsDescriptor
	watchConditionDescriptor     *WatchConditionDescriptor
	watchConditionsDescriptor    *WatchConditionsDescriptor
	createConditionDescriptor    *CreateConditionDescriptor
	updateConditionDescriptor    *UpdateConditionDescriptor
	deleteConditionDescriptor    *DeleteConditionDescriptor
)

type GetConditionDescriptor struct{}

type GetConditionDescriptorClientMsgHandle struct{}

type GetConditionDescriptorServerMsgHandle struct{}

func (d *GetConditionDescriptor) NewEmptyClientMsg() proto.Message {
	return &GetConditionRequest{}
}

func (d *GetConditionDescriptor) NewEmptyServerMsg() proto.Message {
	return &condition.Condition{}
}

func (d *GetConditionDescriptor) IsUnary() bool {
	return true
}

func (d *GetConditionDescriptor) IsClientStream() bool {
	return false
}

func (d *GetConditionDescriptor) IsServerStream() bool {
	return false
}

func (d *GetConditionDescriptor) IsCollection() bool {
	return false
}

func (d *GetConditionDescriptor) IsPlural() bool {
	return false
}

func (d *GetConditionDescriptor) HasResource() bool {
	return true
}

func (d *GetConditionDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *GetConditionDescriptor) GetVerb() string {
	return "get"
}

func (d *GetConditionDescriptor) GetMethodName() string {
	return "GetCondition"
}

func (d *GetConditionDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1alpha.ConditionService/GetCondition"
}

func (d *GetConditionDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha"
}

func (d *GetConditionDescriptor) GetApiName() string {
	return "ConditionService"
}

func (d *GetConditionDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *GetConditionDescriptor) GetServiceVersion() string {
	return "v1alpha"
}

func (d *GetConditionDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return conditionServiceDescriptor
}

func (d *GetConditionDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return condition.GetDescriptor()
}

func (d *GetConditionDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetConditionDescriptorClientMsgHandle{}
}

func (d *GetConditionDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetConditionDescriptorServerMsgHandle{}
}

func (h *GetConditionDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetConditionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*GetConditionRequest) *condition.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if ref := typedMsg.GetName(); ref != nil {
			return &ref.Name
		}
	}
	return (*condition.Name)(nil)
}

func (h *GetConditionDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*GetConditionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*GetConditionRequest) []*condition.Name
	})
	if ok {
		return condition.ConditionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetConditionDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetConditionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*GetConditionRequest) *condition.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *GetConditionDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*condition.Condition)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*condition.Condition) *condition.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*condition.Name)(nil)
}

func (h *GetConditionDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*condition.Condition)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*condition.Condition) []*condition.Name
	})
	if ok {
		return condition.ConditionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetConditionDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*condition.Condition)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*condition.Condition) *condition.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetGetConditionDescriptor() *GetConditionDescriptor {
	return getConditionDescriptor
}

type BatchGetConditionsDescriptor struct{}

type BatchGetConditionsDescriptorClientMsgHandle struct{}

type BatchGetConditionsDescriptorServerMsgHandle struct{}

func (d *BatchGetConditionsDescriptor) NewEmptyClientMsg() proto.Message {
	return &BatchGetConditionsRequest{}
}

func (d *BatchGetConditionsDescriptor) NewEmptyServerMsg() proto.Message {
	return &BatchGetConditionsResponse{}
}

func (d *BatchGetConditionsDescriptor) IsUnary() bool {
	return true
}

func (d *BatchGetConditionsDescriptor) IsClientStream() bool {
	return false
}

func (d *BatchGetConditionsDescriptor) IsServerStream() bool {
	return false
}

func (d *BatchGetConditionsDescriptor) IsCollection() bool {
	return false
}

func (d *BatchGetConditionsDescriptor) IsPlural() bool {
	return true
}

func (d *BatchGetConditionsDescriptor) HasResource() bool {
	return true
}

func (d *BatchGetConditionsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *BatchGetConditionsDescriptor) GetVerb() string {
	return "batchGet"
}

func (d *BatchGetConditionsDescriptor) GetMethodName() string {
	return "BatchGetConditions"
}

func (d *BatchGetConditionsDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1alpha.ConditionService/BatchGetConditions"
}

func (d *BatchGetConditionsDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha"
}

func (d *BatchGetConditionsDescriptor) GetApiName() string {
	return "ConditionService"
}

func (d *BatchGetConditionsDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *BatchGetConditionsDescriptor) GetServiceVersion() string {
	return "v1alpha"
}

func (d *BatchGetConditionsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return conditionServiceDescriptor
}

func (d *BatchGetConditionsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return condition.GetDescriptor()
}

func (d *BatchGetConditionsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetConditionsDescriptorClientMsgHandle{}
}

func (d *BatchGetConditionsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetConditionsDescriptorServerMsgHandle{}
}

func (h *BatchGetConditionsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetConditionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetConditionsRequest) *condition.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetConditionsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetConditionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetConditionsRequest) []*condition.Name
	})
	if ok {
		return condition.ConditionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if refs := typedMsg.GetNames(); len(refs) > 0 {
			list := make(condition.ConditionNameList, 0, len(refs))
			for _, ref := range refs {
				list = append(list, &ref.Name)
			}
			return list
		}
	}
	return (condition.ConditionNameList)(nil)
}

func (h *BatchGetConditionsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetConditionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*BatchGetConditionsRequest) *condition.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *BatchGetConditionsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetConditionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetConditionsResponse) *condition.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetConditionsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetConditionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetConditionsResponse) []*condition.Name
	})
	if ok {
		return condition.ConditionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetConditions(); len(resources) > 0 {
			list := make(condition.ConditionNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (condition.ConditionNameList)(nil)
}

func (h *BatchGetConditionsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetConditionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*BatchGetConditionsResponse) *condition.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetBatchGetConditionsDescriptor() *BatchGetConditionsDescriptor {
	return batchGetConditionsDescriptor
}

type ListConditionsDescriptor struct{}

type ListConditionsDescriptorClientMsgHandle struct{}

type ListConditionsDescriptorServerMsgHandle struct{}

func (d *ListConditionsDescriptor) NewEmptyClientMsg() proto.Message {
	return &ListConditionsRequest{}
}

func (d *ListConditionsDescriptor) NewEmptyServerMsg() proto.Message {
	return &ListConditionsResponse{}
}

func (d *ListConditionsDescriptor) IsUnary() bool {
	return true
}

func (d *ListConditionsDescriptor) IsClientStream() bool {
	return false
}

func (d *ListConditionsDescriptor) IsServerStream() bool {
	return false
}

func (d *ListConditionsDescriptor) IsCollection() bool {
	return true
}

func (d *ListConditionsDescriptor) IsPlural() bool {
	return true
}

func (d *ListConditionsDescriptor) HasResource() bool {
	return true
}

func (d *ListConditionsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ListConditionsDescriptor) GetVerb() string {
	return "list"
}

func (d *ListConditionsDescriptor) GetMethodName() string {
	return "ListConditions"
}

func (d *ListConditionsDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1alpha.ConditionService/ListConditions"
}

func (d *ListConditionsDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha"
}

func (d *ListConditionsDescriptor) GetApiName() string {
	return "ConditionService"
}

func (d *ListConditionsDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *ListConditionsDescriptor) GetServiceVersion() string {
	return "v1alpha"
}

func (d *ListConditionsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return conditionServiceDescriptor
}

func (d *ListConditionsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return condition.GetDescriptor()
}

func (d *ListConditionsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListConditionsDescriptorClientMsgHandle{}
}

func (d *ListConditionsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListConditionsDescriptorServerMsgHandle{}
}

func (h *ListConditionsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListConditionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListConditionsRequest) *condition.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListConditionsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListConditionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListConditionsRequest) []*condition.Name
	})
	if ok {
		return condition.ConditionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *ListConditionsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListConditionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ListConditionsRequest) *condition.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*condition.ParentName)(nil)
}

func (h *ListConditionsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListConditionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListConditionsResponse) *condition.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListConditionsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListConditionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListConditionsResponse) []*condition.Name
	})
	if ok {
		return condition.ConditionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetConditions(); len(resources) > 0 {
			list := make(condition.ConditionNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (condition.ConditionNameList)(nil)
}

func (h *ListConditionsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListConditionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ListConditionsResponse) *condition.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetListConditionsDescriptor() *ListConditionsDescriptor {
	return listConditionsDescriptor
}

type WatchConditionDescriptor struct{}

type WatchConditionDescriptorClientMsgHandle struct{}

type WatchConditionDescriptorServerMsgHandle struct{}

func (d *WatchConditionDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchConditionRequest{}
}

func (d *WatchConditionDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchConditionResponse{}
}

func (d *WatchConditionDescriptor) IsUnary() bool {
	return false
}

func (d *WatchConditionDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchConditionDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchConditionDescriptor) IsCollection() bool {
	return false
}

func (d *WatchConditionDescriptor) IsPlural() bool {
	return false
}

func (d *WatchConditionDescriptor) HasResource() bool {
	return true
}

func (d *WatchConditionDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchConditionDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchConditionDescriptor) GetMethodName() string {
	return "WatchCondition"
}

func (d *WatchConditionDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1alpha.ConditionService/WatchCondition"
}

func (d *WatchConditionDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha"
}

func (d *WatchConditionDescriptor) GetApiName() string {
	return "ConditionService"
}

func (d *WatchConditionDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *WatchConditionDescriptor) GetServiceVersion() string {
	return "v1alpha"
}

func (d *WatchConditionDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return conditionServiceDescriptor
}

func (d *WatchConditionDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return condition.GetDescriptor()
}

func (d *WatchConditionDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchConditionDescriptorClientMsgHandle{}
}

func (d *WatchConditionDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchConditionDescriptorServerMsgHandle{}
}

func (h *WatchConditionDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchConditionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchConditionRequest) *condition.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if ref := typedMsg.GetName(); ref != nil {
			return &ref.Name
		}
	}
	return (*condition.Name)(nil)
}

func (h *WatchConditionDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchConditionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchConditionRequest) []*condition.Name
	})
	if ok {
		return condition.ConditionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchConditionDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchConditionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchConditionRequest) *condition.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchConditionDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchConditionResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchConditionResponse) *condition.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if resChange := typedMsg.GetChange(); resChange != nil {
			switch tResChange := resChange.ChangeType.(type) {
			case *condition.ConditionChange_Added_:
				return tResChange.Added.GetCondition().GetName()
			case *condition.ConditionChange_Modified_:
				return tResChange.Modified.GetName()
			case *condition.ConditionChange_Removed_:
				return tResChange.Removed.GetName()
			case *condition.ConditionChange_Current_:
				return tResChange.Current.GetCondition().GetName()
			}
		}
	}
	return (*condition.Name)(nil)
}

func (h *WatchConditionDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchConditionResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchConditionResponse) []*condition.Name
	})
	if ok {
		return condition.ConditionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchConditionDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchConditionResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchConditionResponse) *condition.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetWatchConditionDescriptor() *WatchConditionDescriptor {
	return watchConditionDescriptor
}

type WatchConditionsDescriptor struct{}

type WatchConditionsDescriptorClientMsgHandle struct{}

type WatchConditionsDescriptorServerMsgHandle struct{}

func (d *WatchConditionsDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchConditionsRequest{}
}

func (d *WatchConditionsDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchConditionsResponse{}
}

func (d *WatchConditionsDescriptor) IsUnary() bool {
	return false
}

func (d *WatchConditionsDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchConditionsDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchConditionsDescriptor) IsCollection() bool {
	return true
}

func (d *WatchConditionsDescriptor) IsPlural() bool {
	return true
}

func (d *WatchConditionsDescriptor) HasResource() bool {
	return true
}

func (d *WatchConditionsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchConditionsDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchConditionsDescriptor) GetMethodName() string {
	return "WatchConditions"
}

func (d *WatchConditionsDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1alpha.ConditionService/WatchConditions"
}

func (d *WatchConditionsDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha"
}

func (d *WatchConditionsDescriptor) GetApiName() string {
	return "ConditionService"
}

func (d *WatchConditionsDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *WatchConditionsDescriptor) GetServiceVersion() string {
	return "v1alpha"
}

func (d *WatchConditionsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return conditionServiceDescriptor
}

func (d *WatchConditionsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return condition.GetDescriptor()
}

func (d *WatchConditionsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchConditionsDescriptorClientMsgHandle{}
}

func (d *WatchConditionsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchConditionsDescriptorServerMsgHandle{}
}

func (h *WatchConditionsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchConditionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchConditionsRequest) *condition.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchConditionsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchConditionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchConditionsRequest) []*condition.Name
	})
	if ok {
		return condition.ConditionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchConditionsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchConditionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchConditionsRequest) *condition.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if ref := typedMsg.GetParent(); ref != nil {
			return &ref.ParentName
		}
	}
	return (*condition.ParentName)(nil)
}

func (h *WatchConditionsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchConditionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchConditionsResponse) *condition.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchConditionsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchConditionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchConditionsResponse) []*condition.Name
	})
	if ok {
		return condition.ConditionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resChanges := typedMsg.GetConditionChanges(); len(resChanges) > 0 {
			list := make(condition.ConditionNameList, 0, len(resChanges))
			for _, resChange := range resChanges {
				switch tResChange := resChange.ChangeType.(type) {
				case *condition.ConditionChange_Added_:
					list = append(list, tResChange.Added.GetCondition().GetName())
				case *condition.ConditionChange_Modified_:
					list = append(list, tResChange.Modified.GetName())
				case *condition.ConditionChange_Removed_:
					list = append(list, tResChange.Removed.GetName())
				case *condition.ConditionChange_Current_:
					list = append(list, tResChange.Current.GetCondition().GetName())
				}
			}
			return list
		}
	}
	return (condition.ConditionNameList)(nil)
}

func (h *WatchConditionsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchConditionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchConditionsResponse) *condition.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetWatchConditionsDescriptor() *WatchConditionsDescriptor {
	return watchConditionsDescriptor
}

type CreateConditionDescriptor struct{}

type CreateConditionDescriptorClientMsgHandle struct{}

type CreateConditionDescriptorServerMsgHandle struct{}

func (d *CreateConditionDescriptor) NewEmptyClientMsg() proto.Message {
	return &CreateConditionRequest{}
}

func (d *CreateConditionDescriptor) NewEmptyServerMsg() proto.Message {
	return &condition.Condition{}
}

func (d *CreateConditionDescriptor) IsUnary() bool {
	return true
}

func (d *CreateConditionDescriptor) IsClientStream() bool {
	return false
}

func (d *CreateConditionDescriptor) IsServerStream() bool {
	return false
}

func (d *CreateConditionDescriptor) IsCollection() bool {
	return true
}

func (d *CreateConditionDescriptor) IsPlural() bool {
	return false
}

func (d *CreateConditionDescriptor) HasResource() bool {
	return true
}

func (d *CreateConditionDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *CreateConditionDescriptor) GetVerb() string {
	return "create"
}

func (d *CreateConditionDescriptor) GetMethodName() string {
	return "CreateCondition"
}

func (d *CreateConditionDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1alpha.ConditionService/CreateCondition"
}

func (d *CreateConditionDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha"
}

func (d *CreateConditionDescriptor) GetApiName() string {
	return "ConditionService"
}

func (d *CreateConditionDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *CreateConditionDescriptor) GetServiceVersion() string {
	return "v1alpha"
}

func (d *CreateConditionDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return conditionServiceDescriptor
}

func (d *CreateConditionDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return condition.GetDescriptor()
}

func (d *CreateConditionDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateConditionDescriptorClientMsgHandle{}
}

func (d *CreateConditionDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateConditionDescriptorServerMsgHandle{}
}

func (h *CreateConditionDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateConditionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*CreateConditionRequest) *condition.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetCondition()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*condition.Name)(nil)
}

func (h *CreateConditionDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*CreateConditionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*CreateConditionRequest) []*condition.Name
	})
	if ok {
		return condition.ConditionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateConditionDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateConditionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*CreateConditionRequest) *condition.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if ref := typedMsg.GetParent(); ref != nil {
			return &ref.ParentName
		}
	}
	return (*condition.ParentName)(nil)
}

func (h *CreateConditionDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*condition.Condition)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*condition.Condition) *condition.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*condition.Name)(nil)
}

func (h *CreateConditionDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*condition.Condition)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*condition.Condition) []*condition.Name
	})
	if ok {
		return condition.ConditionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateConditionDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*condition.Condition)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*condition.Condition) *condition.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetCreateConditionDescriptor() *CreateConditionDescriptor {
	return createConditionDescriptor
}

type UpdateConditionDescriptor struct{}

type UpdateConditionDescriptorClientMsgHandle struct{}

type UpdateConditionDescriptorServerMsgHandle struct{}

func (d *UpdateConditionDescriptor) NewEmptyClientMsg() proto.Message {
	return &UpdateConditionRequest{}
}

func (d *UpdateConditionDescriptor) NewEmptyServerMsg() proto.Message {
	return &condition.Condition{}
}

func (d *UpdateConditionDescriptor) IsUnary() bool {
	return true
}

func (d *UpdateConditionDescriptor) IsClientStream() bool {
	return false
}

func (d *UpdateConditionDescriptor) IsServerStream() bool {
	return false
}

func (d *UpdateConditionDescriptor) IsCollection() bool {
	return false
}

func (d *UpdateConditionDescriptor) IsPlural() bool {
	return false
}

func (d *UpdateConditionDescriptor) HasResource() bool {
	return true
}

func (d *UpdateConditionDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *UpdateConditionDescriptor) GetVerb() string {
	return "update"
}

func (d *UpdateConditionDescriptor) GetMethodName() string {
	return "UpdateCondition"
}

func (d *UpdateConditionDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1alpha.ConditionService/UpdateCondition"
}

func (d *UpdateConditionDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha"
}

func (d *UpdateConditionDescriptor) GetApiName() string {
	return "ConditionService"
}

func (d *UpdateConditionDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *UpdateConditionDescriptor) GetServiceVersion() string {
	return "v1alpha"
}

func (d *UpdateConditionDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return conditionServiceDescriptor
}

func (d *UpdateConditionDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return condition.GetDescriptor()
}

func (d *UpdateConditionDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateConditionDescriptorClientMsgHandle{}
}

func (d *UpdateConditionDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateConditionDescriptorServerMsgHandle{}
}

func (h *UpdateConditionDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateConditionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*UpdateConditionRequest) *condition.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetCondition()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*condition.Name)(nil)
}

func (h *UpdateConditionDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*UpdateConditionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*UpdateConditionRequest) []*condition.Name
	})
	if ok {
		return condition.ConditionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateConditionDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateConditionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*UpdateConditionRequest) *condition.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *UpdateConditionDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*condition.Condition)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*condition.Condition) *condition.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*condition.Name)(nil)
}

func (h *UpdateConditionDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*condition.Condition)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*condition.Condition) []*condition.Name
	})
	if ok {
		return condition.ConditionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateConditionDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*condition.Condition)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*condition.Condition) *condition.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetUpdateConditionDescriptor() *UpdateConditionDescriptor {
	return updateConditionDescriptor
}

type DeleteConditionDescriptor struct{}

type DeleteConditionDescriptorClientMsgHandle struct{}

type DeleteConditionDescriptorServerMsgHandle struct{}

func (d *DeleteConditionDescriptor) NewEmptyClientMsg() proto.Message {
	return &DeleteConditionRequest{}
}

func (d *DeleteConditionDescriptor) NewEmptyServerMsg() proto.Message {
	return &empty.Empty{}
}

func (d *DeleteConditionDescriptor) IsUnary() bool {
	return true
}

func (d *DeleteConditionDescriptor) IsClientStream() bool {
	return false
}

func (d *DeleteConditionDescriptor) IsServerStream() bool {
	return false
}

func (d *DeleteConditionDescriptor) IsCollection() bool {
	return false
}

func (d *DeleteConditionDescriptor) IsPlural() bool {
	return false
}

func (d *DeleteConditionDescriptor) HasResource() bool {
	return true
}

func (d *DeleteConditionDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *DeleteConditionDescriptor) GetVerb() string {
	return "delete"
}

func (d *DeleteConditionDescriptor) GetMethodName() string {
	return "DeleteCondition"
}

func (d *DeleteConditionDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1alpha.ConditionService/DeleteCondition"
}

func (d *DeleteConditionDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha"
}

func (d *DeleteConditionDescriptor) GetApiName() string {
	return "ConditionService"
}

func (d *DeleteConditionDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *DeleteConditionDescriptor) GetServiceVersion() string {
	return "v1alpha"
}

func (d *DeleteConditionDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return conditionServiceDescriptor
}

func (d *DeleteConditionDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return condition.GetDescriptor()
}

func (d *DeleteConditionDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteConditionDescriptorClientMsgHandle{}
}

func (d *DeleteConditionDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteConditionDescriptorServerMsgHandle{}
}

func (h *DeleteConditionDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteConditionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*DeleteConditionRequest) *condition.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if ref := typedMsg.GetName(); ref != nil {
			return &ref.Name
		}
	}
	return (*condition.Name)(nil)
}

func (h *DeleteConditionDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*DeleteConditionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*DeleteConditionRequest) []*condition.Name
	})
	if ok {
		return condition.ConditionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteConditionDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteConditionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*DeleteConditionRequest) *condition.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *DeleteConditionDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*empty.Empty) *condition.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *DeleteConditionDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*empty.Empty) []*condition.Name
	})
	if ok {
		return condition.ConditionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteConditionDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*empty.Empty) *condition.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetDeleteConditionDescriptor() *DeleteConditionDescriptor {
	return deleteConditionDescriptor
}

type ConditionServiceDescriptor struct{}

func (d *ConditionServiceDescriptor) AllMethodDescriptors() []gotenclient.MethodDescriptor {
	return []gotenclient.MethodDescriptor{
		getConditionDescriptor,
		batchGetConditionsDescriptor,
		listConditionsDescriptor,
		watchConditionDescriptor,
		watchConditionsDescriptor,
		createConditionDescriptor,
		updateConditionDescriptor,
		deleteConditionDescriptor,
	}
}

func (d *ConditionServiceDescriptor) GetFullAPIName() string {
	return "/ntt.iam.v1alpha.ConditionService"
}

func (d *ConditionServiceDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha"
}

func (d *ConditionServiceDescriptor) GetApiName() string {
	return "ConditionService"
}

func (d *ConditionServiceDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *ConditionServiceDescriptor) GetServiceVersion() string {
	return "v1alpha"
}

func GetConditionServiceDescriptor() *ConditionServiceDescriptor {
	return conditionServiceDescriptor
}

func initDescriptors() {
	conditionServiceDescriptor = &ConditionServiceDescriptor{}
	getConditionDescriptor = &GetConditionDescriptor{}
	batchGetConditionsDescriptor = &BatchGetConditionsDescriptor{}
	listConditionsDescriptor = &ListConditionsDescriptor{}
	watchConditionDescriptor = &WatchConditionDescriptor{}
	watchConditionsDescriptor = &WatchConditionsDescriptor{}
	createConditionDescriptor = &CreateConditionDescriptor{}
	updateConditionDescriptor = &UpdateConditionDescriptor{}
	deleteConditionDescriptor = &DeleteConditionDescriptor{}
	gotenclient.GetRegistry().RegisterApiDescriptor(conditionServiceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(getConditionDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(batchGetConditionsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(listConditionsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchConditionDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchConditionsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(createConditionDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(updateConditionDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(deleteConditionDescriptor)
}

func init() {
	if !descriptorsInitialized {
		initDescriptors()
		descriptorsInitialized = true
	}
}
