// Code generated by protoc-gen-goten-object
// File: edgelq/iam/proto/v1alpha/role_service.proto
// DO NOT EDIT!!!

package role_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	role "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha/role"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	empty "github.com/golang/protobuf/ptypes/empty"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = fmt.Stringer(nil)
	_ = sort.Interface(nil)

	_ = proto.Message(nil)
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &role.Role{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

func (o *GetRoleRequest) GotenObjectExt() {}

func (o *GetRoleRequest) MakeFullFieldMask() *GetRoleRequest_FieldMask {
	return FullGetRoleRequest_FieldMask()
}

func (o *GetRoleRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullGetRoleRequest_FieldMask()
}

func (o *GetRoleRequest) MakeDiffFieldMask(other *GetRoleRequest) *GetRoleRequest_FieldMask {
	if o == nil && other == nil {
		return &GetRoleRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullGetRoleRequest_FieldMask()
	}

	res := &GetRoleRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &GetRoleRequest_FieldTerminalPath{selector: GetRoleRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &GetRoleRequest_FieldTerminalPath{selector: GetRoleRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &GetRoleRequest_FieldTerminalPath{selector: GetRoleRequest_FieldPathSelectorView})
	}
	return res
}

func (o *GetRoleRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*GetRoleRequest))
}

func (o *GetRoleRequest) Clone() *GetRoleRequest {
	if o == nil {
		return nil
	}
	result := &GetRoleRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &role.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*role.Role_FieldMask)
	result.View = o.View
	return result
}

func (o *GetRoleRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *GetRoleRequest) Merge(source *GetRoleRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &role.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(role.Role_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *GetRoleRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*GetRoleRequest))
}

func (o *BatchGetRolesRequest) GotenObjectExt() {}

func (o *BatchGetRolesRequest) MakeFullFieldMask() *BatchGetRolesRequest_FieldMask {
	return FullBatchGetRolesRequest_FieldMask()
}

func (o *BatchGetRolesRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetRolesRequest_FieldMask()
}

func (o *BatchGetRolesRequest) MakeDiffFieldMask(other *BatchGetRolesRequest) *BatchGetRolesRequest_FieldMask {
	if o == nil && other == nil {
		return &BatchGetRolesRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetRolesRequest_FieldMask()
	}

	res := &BatchGetRolesRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &BatchGetRolesRequest_FieldTerminalPath{selector: BatchGetRolesRequest_FieldPathSelectorParent})
	}

	if len(o.GetNames()) == len(other.GetNames()) {
		for i, lValue := range o.GetNames() {
			rValue := other.GetNames()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetRolesRequest_FieldTerminalPath{selector: BatchGetRolesRequest_FieldPathSelectorNames})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetRolesRequest_FieldTerminalPath{selector: BatchGetRolesRequest_FieldPathSelectorNames})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &BatchGetRolesRequest_FieldTerminalPath{selector: BatchGetRolesRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &BatchGetRolesRequest_FieldTerminalPath{selector: BatchGetRolesRequest_FieldPathSelectorView})
	}
	return res
}

func (o *BatchGetRolesRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetRolesRequest))
}

func (o *BatchGetRolesRequest) Clone() *BatchGetRolesRequest {
	if o == nil {
		return nil
	}
	result := &BatchGetRolesRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &role.Reference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Names = make([]*role.Reference, len(o.Names))
	for i, sourceValue := range o.Names {
		if sourceValue == nil {
			result.Names[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Names[i] = &role.Reference{}
			if err := result.Names[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*role.Role_FieldMask)
	result.View = o.View
	return result
}

func (o *BatchGetRolesRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetRolesRequest) Merge(source *BatchGetRolesRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &role.Reference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	for _, sourceValue := range source.GetNames() {
		exists := false
		for _, currentValue := range o.Names {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *role.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &role.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Names = append(o.Names, newDstElement)
		}
	}

	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(role.Role_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *BatchGetRolesRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetRolesRequest))
}

func (o *BatchGetRolesResponse) GotenObjectExt() {}

func (o *BatchGetRolesResponse) MakeFullFieldMask() *BatchGetRolesResponse_FieldMask {
	return FullBatchGetRolesResponse_FieldMask()
}

func (o *BatchGetRolesResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetRolesResponse_FieldMask()
}

func (o *BatchGetRolesResponse) MakeDiffFieldMask(other *BatchGetRolesResponse) *BatchGetRolesResponse_FieldMask {
	if o == nil && other == nil {
		return &BatchGetRolesResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetRolesResponse_FieldMask()
	}

	res := &BatchGetRolesResponse_FieldMask{}

	if len(o.GetRoles()) == len(other.GetRoles()) {
		for i, lValue := range o.GetRoles() {
			rValue := other.GetRoles()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &BatchGetRolesResponse_FieldTerminalPath{selector: BatchGetRolesResponse_FieldPathSelectorRoles})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetRolesResponse_FieldTerminalPath{selector: BatchGetRolesResponse_FieldPathSelectorRoles})
	}

	if len(o.GetMissing()) == len(other.GetMissing()) {
		for i, lValue := range o.GetMissing() {
			rValue := other.GetMissing()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetRolesResponse_FieldTerminalPath{selector: BatchGetRolesResponse_FieldPathSelectorMissing})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetRolesResponse_FieldTerminalPath{selector: BatchGetRolesResponse_FieldPathSelectorMissing})
	}
	return res
}

func (o *BatchGetRolesResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetRolesResponse))
}

func (o *BatchGetRolesResponse) Clone() *BatchGetRolesResponse {
	if o == nil {
		return nil
	}
	result := &BatchGetRolesResponse{}
	result.Roles = make([]*role.Role, len(o.Roles))
	for i, sourceValue := range o.Roles {
		result.Roles[i] = sourceValue.Clone()
	}
	result.Missing = make([]*role.Reference, len(o.Missing))
	for i, sourceValue := range o.Missing {
		if sourceValue == nil {
			result.Missing[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Missing[i] = &role.Reference{}
			if err := result.Missing[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	return result
}

func (o *BatchGetRolesResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetRolesResponse) Merge(source *BatchGetRolesResponse) {
	for _, sourceValue := range source.GetRoles() {
		exists := false
		for _, currentValue := range o.Roles {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *role.Role
			if sourceValue != nil {
				newDstElement = new(role.Role)
				newDstElement.Merge(sourceValue)
			}
			o.Roles = append(o.Roles, newDstElement)
		}
	}

	for _, sourceValue := range source.GetMissing() {
		exists := false
		for _, currentValue := range o.Missing {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *role.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &role.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Missing = append(o.Missing, newDstElement)
		}
	}

}

func (o *BatchGetRolesResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetRolesResponse))
}

func (o *ListRolesRequest) GotenObjectExt() {}

func (o *ListRolesRequest) MakeFullFieldMask() *ListRolesRequest_FieldMask {
	return FullListRolesRequest_FieldMask()
}

func (o *ListRolesRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListRolesRequest_FieldMask()
}

func (o *ListRolesRequest) MakeDiffFieldMask(other *ListRolesRequest) *ListRolesRequest_FieldMask {
	if o == nil && other == nil {
		return &ListRolesRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListRolesRequest_FieldMask()
	}

	res := &ListRolesRequest_FieldMask{}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &ListRolesRequest_FieldTerminalPath{selector: ListRolesRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &ListRolesRequest_FieldTerminalPath{selector: ListRolesRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &ListRolesRequest_FieldTerminalPath{selector: ListRolesRequest_FieldPathSelectorOrderBy})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &ListRolesRequest_FieldTerminalPath{selector: ListRolesRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &ListRolesRequest_FieldTerminalPath{selector: ListRolesRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &ListRolesRequest_FieldTerminalPath{selector: ListRolesRequest_FieldPathSelectorView})
	}
	return res
}

func (o *ListRolesRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListRolesRequest))
}

func (o *ListRolesRequest) Clone() *ListRolesRequest {
	if o == nil {
		return nil
	}
	result := &ListRolesRequest{}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &role.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &role.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &role.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*role.Role_FieldMask)
	result.View = o.View
	return result
}

func (o *ListRolesRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListRolesRequest) Merge(source *ListRolesRequest) {
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &role.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &role.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &role.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(role.Role_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *ListRolesRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListRolesRequest))
}

func (o *ListRolesResponse) GotenObjectExt() {}

func (o *ListRolesResponse) MakeFullFieldMask() *ListRolesResponse_FieldMask {
	return FullListRolesResponse_FieldMask()
}

func (o *ListRolesResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListRolesResponse_FieldMask()
}

func (o *ListRolesResponse) MakeDiffFieldMask(other *ListRolesResponse) *ListRolesResponse_FieldMask {
	if o == nil && other == nil {
		return &ListRolesResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListRolesResponse_FieldMask()
	}

	res := &ListRolesResponse_FieldMask{}

	if len(o.GetRoles()) == len(other.GetRoles()) {
		for i, lValue := range o.GetRoles() {
			rValue := other.GetRoles()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &ListRolesResponse_FieldTerminalPath{selector: ListRolesResponse_FieldPathSelectorRoles})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ListRolesResponse_FieldTerminalPath{selector: ListRolesResponse_FieldPathSelectorRoles})
	}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &ListRolesResponse_FieldTerminalPath{selector: ListRolesResponse_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &ListRolesResponse_FieldTerminalPath{selector: ListRolesResponse_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *ListRolesResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListRolesResponse))
}

func (o *ListRolesResponse) Clone() *ListRolesResponse {
	if o == nil {
		return nil
	}
	result := &ListRolesResponse{}
	result.Roles = make([]*role.Role, len(o.Roles))
	for i, sourceValue := range o.Roles {
		result.Roles[i] = sourceValue.Clone()
	}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &role.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &role.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *ListRolesResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListRolesResponse) Merge(source *ListRolesResponse) {
	for _, sourceValue := range source.GetRoles() {
		exists := false
		for _, currentValue := range o.Roles {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *role.Role
			if sourceValue != nil {
				newDstElement = new(role.Role)
				newDstElement.Merge(sourceValue)
			}
			o.Roles = append(o.Roles, newDstElement)
		}
	}

	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &role.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &role.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *ListRolesResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListRolesResponse))
}

func (o *WatchRoleRequest) GotenObjectExt() {}

func (o *WatchRoleRequest) MakeFullFieldMask() *WatchRoleRequest_FieldMask {
	return FullWatchRoleRequest_FieldMask()
}

func (o *WatchRoleRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchRoleRequest_FieldMask()
}

func (o *WatchRoleRequest) MakeDiffFieldMask(other *WatchRoleRequest) *WatchRoleRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchRoleRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchRoleRequest_FieldMask()
	}

	res := &WatchRoleRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &WatchRoleRequest_FieldTerminalPath{selector: WatchRoleRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchRoleRequest_FieldTerminalPath{selector: WatchRoleRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchRoleRequest_FieldTerminalPath{selector: WatchRoleRequest_FieldPathSelectorView})
	}
	return res
}

func (o *WatchRoleRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchRoleRequest))
}

func (o *WatchRoleRequest) Clone() *WatchRoleRequest {
	if o == nil {
		return nil
	}
	result := &WatchRoleRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &role.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*role.Role_FieldMask)
	result.View = o.View
	return result
}

func (o *WatchRoleRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchRoleRequest) Merge(source *WatchRoleRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &role.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(role.Role_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *WatchRoleRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchRoleRequest))
}

func (o *WatchRoleResponse) GotenObjectExt() {}

func (o *WatchRoleResponse) MakeFullFieldMask() *WatchRoleResponse_FieldMask {
	return FullWatchRoleResponse_FieldMask()
}

func (o *WatchRoleResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchRoleResponse_FieldMask()
}

func (o *WatchRoleResponse) MakeDiffFieldMask(other *WatchRoleResponse) *WatchRoleResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchRoleResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchRoleResponse_FieldMask()
	}

	res := &WatchRoleResponse_FieldMask{}
	if !proto.Equal(o.GetChange(), other.GetChange()) {
		res.Paths = append(res.Paths, &WatchRoleResponse_FieldTerminalPath{selector: WatchRoleResponse_FieldPathSelectorChange})
	}
	return res
}

func (o *WatchRoleResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchRoleResponse))
}

func (o *WatchRoleResponse) Clone() *WatchRoleResponse {
	if o == nil {
		return nil
	}
	result := &WatchRoleResponse{}
	result.Change = proto.Clone(o.Change).(*role.RoleChange)
	return result
}

func (o *WatchRoleResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchRoleResponse) Merge(source *WatchRoleResponse) {
	if source.GetChange() != nil {
		if o.Change == nil {
			o.Change = new(role.RoleChange)
		}
		proto.Merge(o.Change, source.GetChange())
	}
}

func (o *WatchRoleResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchRoleResponse))
}

func (o *WatchRolesRequest) GotenObjectExt() {}

func (o *WatchRolesRequest) MakeFullFieldMask() *WatchRolesRequest_FieldMask {
	return FullWatchRolesRequest_FieldMask()
}

func (o *WatchRolesRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchRolesRequest_FieldMask()
}

func (o *WatchRolesRequest) MakeDiffFieldMask(other *WatchRolesRequest) *WatchRolesRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchRolesRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchRolesRequest_FieldMask()
	}

	res := &WatchRolesRequest_FieldMask{}
	if o.GetType() != other.GetType() {
		res.Paths = append(res.Paths, &WatchRolesRequest_FieldTerminalPath{selector: WatchRolesRequest_FieldPathSelectorType})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &WatchRolesRequest_FieldTerminalPath{selector: WatchRolesRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &WatchRolesRequest_FieldTerminalPath{selector: WatchRolesRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &WatchRolesRequest_FieldTerminalPath{selector: WatchRolesRequest_FieldPathSelectorOrderBy})
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchRolesRequest_FieldTerminalPath{selector: WatchRolesRequest_FieldPathSelectorResumeToken})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &WatchRolesRequest_FieldTerminalPath{selector: WatchRolesRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchRolesRequest_FieldTerminalPath{selector: WatchRolesRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchRolesRequest_FieldTerminalPath{selector: WatchRolesRequest_FieldPathSelectorView})
	}
	if o.GetMaxChunkSize() != other.GetMaxChunkSize() {
		res.Paths = append(res.Paths, &WatchRolesRequest_FieldTerminalPath{selector: WatchRolesRequest_FieldPathSelectorMaxChunkSize})
	}
	return res
}

func (o *WatchRolesRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchRolesRequest))
}

func (o *WatchRolesRequest) Clone() *WatchRolesRequest {
	if o == nil {
		return nil
	}
	result := &WatchRolesRequest{}
	result.Type = o.Type
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &role.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &role.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.ResumeToken = o.ResumeToken
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &role.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*role.Role_FieldMask)
	result.View = o.View
	result.MaxChunkSize = o.MaxChunkSize
	return result
}

func (o *WatchRolesRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchRolesRequest) Merge(source *WatchRolesRequest) {
	o.Type = source.GetType()
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &role.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &role.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	o.ResumeToken = source.GetResumeToken()
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &role.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(role.Role_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.MaxChunkSize = source.GetMaxChunkSize()
}

func (o *WatchRolesRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchRolesRequest))
}

func (o *WatchRolesResponse) GotenObjectExt() {}

func (o *WatchRolesResponse) MakeFullFieldMask() *WatchRolesResponse_FieldMask {
	return FullWatchRolesResponse_FieldMask()
}

func (o *WatchRolesResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchRolesResponse_FieldMask()
}

func (o *WatchRolesResponse) MakeDiffFieldMask(other *WatchRolesResponse) *WatchRolesResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchRolesResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchRolesResponse_FieldMask()
	}

	res := &WatchRolesResponse_FieldMask{}

	if len(o.GetRoleChanges()) == len(other.GetRoleChanges()) {
		for i, lValue := range o.GetRoleChanges() {
			rValue := other.GetRoleChanges()[i]
			if !proto.Equal(lValue, rValue) {
				res.Paths = append(res.Paths, &WatchRolesResponse_FieldTerminalPath{selector: WatchRolesResponse_FieldPathSelectorRoleChanges})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &WatchRolesResponse_FieldTerminalPath{selector: WatchRolesResponse_FieldPathSelectorRoleChanges})
	}
	if o.GetIsCurrent() != other.GetIsCurrent() {
		res.Paths = append(res.Paths, &WatchRolesResponse_FieldTerminalPath{selector: WatchRolesResponse_FieldPathSelectorIsCurrent})
	}
	{
		subMask := o.GetPageTokenChange().MakeDiffFieldMask(other.GetPageTokenChange())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &WatchRolesResponse_FieldTerminalPath{selector: WatchRolesResponse_FieldPathSelectorPageTokenChange})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &WatchRolesResponse_FieldSubPath{selector: WatchRolesResponse_FieldPathSelectorPageTokenChange, subPath: subpath})
			}
		}
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchRolesResponse_FieldTerminalPath{selector: WatchRolesResponse_FieldPathSelectorResumeToken})
	}
	if o.GetSnapshotSize() != other.GetSnapshotSize() {
		res.Paths = append(res.Paths, &WatchRolesResponse_FieldTerminalPath{selector: WatchRolesResponse_FieldPathSelectorSnapshotSize})
	}
	if o.GetIsSoftReset() != other.GetIsSoftReset() {
		res.Paths = append(res.Paths, &WatchRolesResponse_FieldTerminalPath{selector: WatchRolesResponse_FieldPathSelectorIsSoftReset})
	}
	if o.GetIsHardReset() != other.GetIsHardReset() {
		res.Paths = append(res.Paths, &WatchRolesResponse_FieldTerminalPath{selector: WatchRolesResponse_FieldPathSelectorIsHardReset})
	}
	return res
}

func (o *WatchRolesResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchRolesResponse))
}

func (o *WatchRolesResponse) Clone() *WatchRolesResponse {
	if o == nil {
		return nil
	}
	result := &WatchRolesResponse{}
	result.RoleChanges = make([]*role.RoleChange, len(o.RoleChanges))
	for i, sourceValue := range o.RoleChanges {
		result.RoleChanges[i] = proto.Clone(sourceValue).(*role.RoleChange)
	}
	result.IsCurrent = o.IsCurrent
	result.PageTokenChange = o.PageTokenChange.Clone()
	result.ResumeToken = o.ResumeToken
	result.SnapshotSize = o.SnapshotSize
	result.IsSoftReset = o.IsSoftReset
	result.IsHardReset = o.IsHardReset
	return result
}

func (o *WatchRolesResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchRolesResponse) Merge(source *WatchRolesResponse) {
	for _, sourceValue := range source.GetRoleChanges() {
		exists := false
		for _, currentValue := range o.RoleChanges {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *role.RoleChange
			if sourceValue != nil {
				newDstElement = new(role.RoleChange)
				proto.Merge(newDstElement, sourceValue)
			}
			o.RoleChanges = append(o.RoleChanges, newDstElement)
		}
	}

	o.IsCurrent = source.GetIsCurrent()
	if source.GetPageTokenChange() != nil {
		if o.PageTokenChange == nil {
			o.PageTokenChange = new(WatchRolesResponse_PageTokenChange)
		}
		o.PageTokenChange.Merge(source.GetPageTokenChange())
	}
	o.ResumeToken = source.GetResumeToken()
	o.SnapshotSize = source.GetSnapshotSize()
	o.IsSoftReset = source.GetIsSoftReset()
	o.IsHardReset = source.GetIsHardReset()
}

func (o *WatchRolesResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchRolesResponse))
}

func (o *WatchRolesResponse_PageTokenChange) GotenObjectExt() {}

func (o *WatchRolesResponse_PageTokenChange) MakeFullFieldMask() *WatchRolesResponse_PageTokenChange_FieldMask {
	return FullWatchRolesResponse_PageTokenChange_FieldMask()
}

func (o *WatchRolesResponse_PageTokenChange) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchRolesResponse_PageTokenChange_FieldMask()
}

func (o *WatchRolesResponse_PageTokenChange) MakeDiffFieldMask(other *WatchRolesResponse_PageTokenChange) *WatchRolesResponse_PageTokenChange_FieldMask {
	if o == nil && other == nil {
		return &WatchRolesResponse_PageTokenChange_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchRolesResponse_PageTokenChange_FieldMask()
	}

	res := &WatchRolesResponse_PageTokenChange_FieldMask{}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &WatchRolesResponsePageTokenChange_FieldTerminalPath{selector: WatchRolesResponsePageTokenChange_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &WatchRolesResponsePageTokenChange_FieldTerminalPath{selector: WatchRolesResponsePageTokenChange_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *WatchRolesResponse_PageTokenChange) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchRolesResponse_PageTokenChange))
}

func (o *WatchRolesResponse_PageTokenChange) Clone() *WatchRolesResponse_PageTokenChange {
	if o == nil {
		return nil
	}
	result := &WatchRolesResponse_PageTokenChange{}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &role.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &role.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *WatchRolesResponse_PageTokenChange) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchRolesResponse_PageTokenChange) Merge(source *WatchRolesResponse_PageTokenChange) {
	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &role.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &role.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *WatchRolesResponse_PageTokenChange) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchRolesResponse_PageTokenChange))
}

func (o *CreateRoleRequest) GotenObjectExt() {}

func (o *CreateRoleRequest) MakeFullFieldMask() *CreateRoleRequest_FieldMask {
	return FullCreateRoleRequest_FieldMask()
}

func (o *CreateRoleRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullCreateRoleRequest_FieldMask()
}

func (o *CreateRoleRequest) MakeDiffFieldMask(other *CreateRoleRequest) *CreateRoleRequest_FieldMask {
	if o == nil && other == nil {
		return &CreateRoleRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullCreateRoleRequest_FieldMask()
	}

	res := &CreateRoleRequest_FieldMask{}
	{
		subMask := o.GetRole().MakeDiffFieldMask(other.GetRole())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &CreateRoleRequest_FieldTerminalPath{selector: CreateRoleRequest_FieldPathSelectorRole})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &CreateRoleRequest_FieldSubPath{selector: CreateRoleRequest_FieldPathSelectorRole, subPath: subpath})
			}
		}
	}
	return res
}

func (o *CreateRoleRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*CreateRoleRequest))
}

func (o *CreateRoleRequest) Clone() *CreateRoleRequest {
	if o == nil {
		return nil
	}
	result := &CreateRoleRequest{}
	result.Role = o.Role.Clone()
	return result
}

func (o *CreateRoleRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *CreateRoleRequest) Merge(source *CreateRoleRequest) {
	if source.GetRole() != nil {
		if o.Role == nil {
			o.Role = new(role.Role)
		}
		o.Role.Merge(source.GetRole())
	}
}

func (o *CreateRoleRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*CreateRoleRequest))
}

func (o *UpdateRoleRequest) GotenObjectExt() {}

func (o *UpdateRoleRequest) MakeFullFieldMask() *UpdateRoleRequest_FieldMask {
	return FullUpdateRoleRequest_FieldMask()
}

func (o *UpdateRoleRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateRoleRequest_FieldMask()
}

func (o *UpdateRoleRequest) MakeDiffFieldMask(other *UpdateRoleRequest) *UpdateRoleRequest_FieldMask {
	if o == nil && other == nil {
		return &UpdateRoleRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateRoleRequest_FieldMask()
	}

	res := &UpdateRoleRequest_FieldMask{}
	{
		subMask := o.GetRole().MakeDiffFieldMask(other.GetRole())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateRoleRequest_FieldTerminalPath{selector: UpdateRoleRequest_FieldPathSelectorRole})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateRoleRequest_FieldSubPath{selector: UpdateRoleRequest_FieldPathSelectorRole, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetUpdateMask(), other.GetUpdateMask()) {
		res.Paths = append(res.Paths, &UpdateRoleRequest_FieldTerminalPath{selector: UpdateRoleRequest_FieldPathSelectorUpdateMask})
	}
	{
		subMask := o.GetCas().MakeDiffFieldMask(other.GetCas())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateRoleRequest_FieldTerminalPath{selector: UpdateRoleRequest_FieldPathSelectorCas})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateRoleRequest_FieldSubPath{selector: UpdateRoleRequest_FieldPathSelectorCas, subPath: subpath})
			}
		}
	}
	return res
}

func (o *UpdateRoleRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateRoleRequest))
}

func (o *UpdateRoleRequest) Clone() *UpdateRoleRequest {
	if o == nil {
		return nil
	}
	result := &UpdateRoleRequest{}
	result.Role = o.Role.Clone()
	result.UpdateMask = proto.Clone(o.UpdateMask).(*role.Role_FieldMask)
	result.Cas = o.Cas.Clone()
	return result
}

func (o *UpdateRoleRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateRoleRequest) Merge(source *UpdateRoleRequest) {
	if source.GetRole() != nil {
		if o.Role == nil {
			o.Role = new(role.Role)
		}
		o.Role.Merge(source.GetRole())
	}
	if source.GetUpdateMask() != nil {
		if o.UpdateMask == nil {
			o.UpdateMask = new(role.Role_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetUpdateMask().ToProtoFieldMask(), o.UpdateMask.ToProtoFieldMask())
		if err := o.UpdateMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	if source.GetCas() != nil {
		if o.Cas == nil {
			o.Cas = new(UpdateRoleRequest_CAS)
		}
		o.Cas.Merge(source.GetCas())
	}
}

func (o *UpdateRoleRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateRoleRequest))
}

func (o *UpdateRoleRequest_CAS) GotenObjectExt() {}

func (o *UpdateRoleRequest_CAS) MakeFullFieldMask() *UpdateRoleRequest_CAS_FieldMask {
	return FullUpdateRoleRequest_CAS_FieldMask()
}

func (o *UpdateRoleRequest_CAS) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateRoleRequest_CAS_FieldMask()
}

func (o *UpdateRoleRequest_CAS) MakeDiffFieldMask(other *UpdateRoleRequest_CAS) *UpdateRoleRequest_CAS_FieldMask {
	if o == nil && other == nil {
		return &UpdateRoleRequest_CAS_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateRoleRequest_CAS_FieldMask()
	}

	res := &UpdateRoleRequest_CAS_FieldMask{}
	{
		subMask := o.GetConditionalState().MakeDiffFieldMask(other.GetConditionalState())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateRoleRequestCAS_FieldTerminalPath{selector: UpdateRoleRequestCAS_FieldPathSelectorConditionalState})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateRoleRequestCAS_FieldSubPath{selector: UpdateRoleRequestCAS_FieldPathSelectorConditionalState, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &UpdateRoleRequestCAS_FieldTerminalPath{selector: UpdateRoleRequestCAS_FieldPathSelectorFieldMask})
	}
	return res
}

func (o *UpdateRoleRequest_CAS) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateRoleRequest_CAS))
}

func (o *UpdateRoleRequest_CAS) Clone() *UpdateRoleRequest_CAS {
	if o == nil {
		return nil
	}
	result := &UpdateRoleRequest_CAS{}
	result.ConditionalState = o.ConditionalState.Clone()
	result.FieldMask = proto.Clone(o.FieldMask).(*role.Role_FieldMask)
	return result
}

func (o *UpdateRoleRequest_CAS) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateRoleRequest_CAS) Merge(source *UpdateRoleRequest_CAS) {
	if source.GetConditionalState() != nil {
		if o.ConditionalState == nil {
			o.ConditionalState = new(role.Role)
		}
		o.ConditionalState.Merge(source.GetConditionalState())
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(role.Role_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
}

func (o *UpdateRoleRequest_CAS) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateRoleRequest_CAS))
}

func (o *DeleteRoleRequest) GotenObjectExt() {}

func (o *DeleteRoleRequest) MakeFullFieldMask() *DeleteRoleRequest_FieldMask {
	return FullDeleteRoleRequest_FieldMask()
}

func (o *DeleteRoleRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDeleteRoleRequest_FieldMask()
}

func (o *DeleteRoleRequest) MakeDiffFieldMask(other *DeleteRoleRequest) *DeleteRoleRequest_FieldMask {
	if o == nil && other == nil {
		return &DeleteRoleRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDeleteRoleRequest_FieldMask()
	}

	res := &DeleteRoleRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &DeleteRoleRequest_FieldTerminalPath{selector: DeleteRoleRequest_FieldPathSelectorName})
	}
	return res
}

func (o *DeleteRoleRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*DeleteRoleRequest))
}

func (o *DeleteRoleRequest) Clone() *DeleteRoleRequest {
	if o == nil {
		return nil
	}
	result := &DeleteRoleRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &role.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *DeleteRoleRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *DeleteRoleRequest) Merge(source *DeleteRoleRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &role.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
}

func (o *DeleteRoleRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*DeleteRoleRequest))
}
