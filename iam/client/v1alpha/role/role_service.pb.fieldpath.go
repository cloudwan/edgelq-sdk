// Code generated by protoc-gen-goten-object
// File: edgelq/iam/proto/v1alpha/role_service.proto
// DO NOT EDIT!!!

package role_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	role "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha/role"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	empty "github.com/golang/protobuf/ptypes/empty"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = json.Marshaler(nil)
	_ = fmt.Stringer(nil)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = proto.Message(nil)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &role.Role{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type GetRoleRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() GetRoleRequest_FieldPathSelector
	Get(source *GetRoleRequest) []interface{}
	GetSingle(source *GetRoleRequest) (interface{}, bool)
	ClearValue(item *GetRoleRequest)

	// Those methods build corresponding GetRoleRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) GetRoleRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) GetRoleRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) GetRoleRequest_FieldPathArrayItemValue
}

type GetRoleRequest_FieldPathSelector int32

const (
	GetRoleRequest_FieldPathSelectorName      GetRoleRequest_FieldPathSelector = 0
	GetRoleRequest_FieldPathSelectorFieldMask GetRoleRequest_FieldPathSelector = 1
	GetRoleRequest_FieldPathSelectorView      GetRoleRequest_FieldPathSelector = 2
)

func (s GetRoleRequest_FieldPathSelector) String() string {
	switch s {
	case GetRoleRequest_FieldPathSelectorName:
		return "name"
	case GetRoleRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case GetRoleRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for GetRoleRequest: %d", s))
	}
}

func BuildGetRoleRequest_FieldPath(fp gotenobject.RawFieldPath) (GetRoleRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object GetRoleRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &GetRoleRequest_FieldTerminalPath{selector: GetRoleRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &GetRoleRequest_FieldTerminalPath{selector: GetRoleRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &GetRoleRequest_FieldTerminalPath{selector: GetRoleRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object GetRoleRequest", fp)
}

func ParseGetRoleRequest_FieldPath(rawField string) (GetRoleRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildGetRoleRequest_FieldPath(fp)
}

func MustParseGetRoleRequest_FieldPath(rawField string) GetRoleRequest_FieldPath {
	fp, err := ParseGetRoleRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type GetRoleRequest_FieldTerminalPath struct {
	selector GetRoleRequest_FieldPathSelector
}

var _ GetRoleRequest_FieldPath = (*GetRoleRequest_FieldTerminalPath)(nil)

func (fp *GetRoleRequest_FieldTerminalPath) Selector() GetRoleRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *GetRoleRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *GetRoleRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source GetRoleRequest
func (fp *GetRoleRequest_FieldTerminalPath) Get(source *GetRoleRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case GetRoleRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case GetRoleRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case GetRoleRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for GetRoleRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *GetRoleRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*GetRoleRequest))
}

// GetSingle returns value pointed by specific field of from source GetRoleRequest
func (fp *GetRoleRequest_FieldTerminalPath) GetSingle(source *GetRoleRequest) (interface{}, bool) {
	switch fp.selector {
	case GetRoleRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case GetRoleRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case GetRoleRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for GetRoleRequest: %d", fp.selector))
	}
}

func (fp *GetRoleRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*GetRoleRequest))
}

// GetDefault returns a default value of the field type
func (fp *GetRoleRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case GetRoleRequest_FieldPathSelectorName:
		return (*role.Reference)(nil)
	case GetRoleRequest_FieldPathSelectorFieldMask:
		return (*role.Role_FieldMask)(nil)
	case GetRoleRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for GetRoleRequest: %d", fp.selector))
	}
}

func (fp *GetRoleRequest_FieldTerminalPath) ClearValue(item *GetRoleRequest) {
	if item != nil {
		switch fp.selector {
		case GetRoleRequest_FieldPathSelectorName:
			item.Name = nil
		case GetRoleRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case GetRoleRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for GetRoleRequest: %d", fp.selector))
		}
	}
}

func (fp *GetRoleRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*GetRoleRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *GetRoleRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == GetRoleRequest_FieldPathSelectorName ||
		fp.selector == GetRoleRequest_FieldPathSelectorFieldMask ||
		fp.selector == GetRoleRequest_FieldPathSelectorView
}

func (fp *GetRoleRequest_FieldTerminalPath) WithIValue(value interface{}) GetRoleRequest_FieldPathValue {
	switch fp.selector {
	case GetRoleRequest_FieldPathSelectorName:
		return &GetRoleRequest_FieldTerminalPathValue{GetRoleRequest_FieldTerminalPath: *fp, value: value.(*role.Reference)}
	case GetRoleRequest_FieldPathSelectorFieldMask:
		return &GetRoleRequest_FieldTerminalPathValue{GetRoleRequest_FieldTerminalPath: *fp, value: value.(*role.Role_FieldMask)}
	case GetRoleRequest_FieldPathSelectorView:
		return &GetRoleRequest_FieldTerminalPathValue{GetRoleRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetRoleRequest: %d", fp.selector))
	}
}

func (fp *GetRoleRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *GetRoleRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) GetRoleRequest_FieldPathArrayOfValues {
	fpaov := &GetRoleRequest_FieldTerminalPathArrayOfValues{GetRoleRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case GetRoleRequest_FieldPathSelectorName:
		return &GetRoleRequest_FieldTerminalPathArrayOfValues{GetRoleRequest_FieldTerminalPath: *fp, values: values.([]*role.Reference)}
	case GetRoleRequest_FieldPathSelectorFieldMask:
		return &GetRoleRequest_FieldTerminalPathArrayOfValues{GetRoleRequest_FieldTerminalPath: *fp, values: values.([]*role.Role_FieldMask)}
	case GetRoleRequest_FieldPathSelectorView:
		return &GetRoleRequest_FieldTerminalPathArrayOfValues{GetRoleRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetRoleRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *GetRoleRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *GetRoleRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) GetRoleRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for GetRoleRequest: %d", fp.selector))
	}
}

func (fp *GetRoleRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// GetRoleRequest_FieldPathValue allows storing values for GetRoleRequest fields according to their type
type GetRoleRequest_FieldPathValue interface {
	GetRoleRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **GetRoleRequest)
	CompareWith(*GetRoleRequest) (cmp int, comparable bool)
}

func ParseGetRoleRequest_FieldPathValue(pathStr, valueStr string) (GetRoleRequest_FieldPathValue, error) {
	fp, err := ParseGetRoleRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetRoleRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(GetRoleRequest_FieldPathValue), nil
}

func MustParseGetRoleRequest_FieldPathValue(pathStr, valueStr string) GetRoleRequest_FieldPathValue {
	fpv, err := ParseGetRoleRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type GetRoleRequest_FieldTerminalPathValue struct {
	GetRoleRequest_FieldTerminalPath
	value interface{}
}

var _ GetRoleRequest_FieldPathValue = (*GetRoleRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'GetRoleRequest' as interface{}
func (fpv *GetRoleRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *GetRoleRequest_FieldTerminalPathValue) AsNameValue() (*role.Reference, bool) {
	res, ok := fpv.value.(*role.Reference)
	return res, ok
}
func (fpv *GetRoleRequest_FieldTerminalPathValue) AsFieldMaskValue() (*role.Role_FieldMask, bool) {
	res, ok := fpv.value.(*role.Role_FieldMask)
	return res, ok
}
func (fpv *GetRoleRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object GetRoleRequest
func (fpv *GetRoleRequest_FieldTerminalPathValue) SetTo(target **GetRoleRequest) {
	if *target == nil {
		*target = new(GetRoleRequest)
	}
	switch fpv.selector {
	case GetRoleRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*role.Reference)
	case GetRoleRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*role.Role_FieldMask)
	case GetRoleRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for GetRoleRequest: %d", fpv.selector))
	}
}

func (fpv *GetRoleRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*GetRoleRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'GetRoleRequest_FieldTerminalPathValue' with the value under path in 'GetRoleRequest'.
func (fpv *GetRoleRequest_FieldTerminalPathValue) CompareWith(source *GetRoleRequest) (int, bool) {
	switch fpv.selector {
	case GetRoleRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*role.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case GetRoleRequest_FieldPathSelectorFieldMask:
		return 0, false
	case GetRoleRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for GetRoleRequest: %d", fpv.selector))
	}
}

func (fpv *GetRoleRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*GetRoleRequest))
}

// GetRoleRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for GetRoleRequest according to their type
// Present only for array (repeated) types.
type GetRoleRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	GetRoleRequest_FieldPath
	ContainsValue(*GetRoleRequest) bool
}

// ParseGetRoleRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseGetRoleRequest_FieldPathArrayItemValue(pathStr, valueStr string) (GetRoleRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseGetRoleRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetRoleRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(GetRoleRequest_FieldPathArrayItemValue), nil
}

func MustParseGetRoleRequest_FieldPathArrayItemValue(pathStr, valueStr string) GetRoleRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseGetRoleRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type GetRoleRequest_FieldTerminalPathArrayItemValue struct {
	GetRoleRequest_FieldTerminalPath
	value interface{}
}

var _ GetRoleRequest_FieldPathArrayItemValue = (*GetRoleRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object GetRoleRequest as interface{}
func (fpaiv *GetRoleRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *GetRoleRequest_FieldTerminalPathArrayItemValue) GetSingle(source *GetRoleRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *GetRoleRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*GetRoleRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'GetRoleRequest'
func (fpaiv *GetRoleRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *GetRoleRequest) bool {
	slice := fpaiv.GetRoleRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// GetRoleRequest_FieldPathArrayOfValues allows storing slice of values for GetRoleRequest fields according to their type
type GetRoleRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	GetRoleRequest_FieldPath
}

func ParseGetRoleRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (GetRoleRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseGetRoleRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetRoleRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(GetRoleRequest_FieldPathArrayOfValues), nil
}

func MustParseGetRoleRequest_FieldPathArrayOfValues(pathStr, valuesStr string) GetRoleRequest_FieldPathArrayOfValues {
	fpaov, err := ParseGetRoleRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type GetRoleRequest_FieldTerminalPathArrayOfValues struct {
	GetRoleRequest_FieldTerminalPath
	values interface{}
}

var _ GetRoleRequest_FieldPathArrayOfValues = (*GetRoleRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *GetRoleRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case GetRoleRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*role.Reference) {
			values = append(values, v)
		}
	case GetRoleRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*role.Role_FieldMask) {
			values = append(values, v)
		}
	case GetRoleRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *GetRoleRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*role.Reference, bool) {
	res, ok := fpaov.values.([]*role.Reference)
	return res, ok
}
func (fpaov *GetRoleRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*role.Role_FieldMask, bool) {
	res, ok := fpaov.values.([]*role.Role_FieldMask)
	return res, ok
}
func (fpaov *GetRoleRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetRolesRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetRolesRequest_FieldPathSelector
	Get(source *BatchGetRolesRequest) []interface{}
	GetSingle(source *BatchGetRolesRequest) (interface{}, bool)
	ClearValue(item *BatchGetRolesRequest)

	// Those methods build corresponding BatchGetRolesRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetRolesRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetRolesRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetRolesRequest_FieldPathArrayItemValue
}

type BatchGetRolesRequest_FieldPathSelector int32

const (
	BatchGetRolesRequest_FieldPathSelectorParent    BatchGetRolesRequest_FieldPathSelector = 0
	BatchGetRolesRequest_FieldPathSelectorNames     BatchGetRolesRequest_FieldPathSelector = 1
	BatchGetRolesRequest_FieldPathSelectorFieldMask BatchGetRolesRequest_FieldPathSelector = 2
	BatchGetRolesRequest_FieldPathSelectorView      BatchGetRolesRequest_FieldPathSelector = 3
)

func (s BatchGetRolesRequest_FieldPathSelector) String() string {
	switch s {
	case BatchGetRolesRequest_FieldPathSelectorParent:
		return "parent"
	case BatchGetRolesRequest_FieldPathSelectorNames:
		return "names"
	case BatchGetRolesRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case BatchGetRolesRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetRolesRequest: %d", s))
	}
}

func BuildBatchGetRolesRequest_FieldPath(fp gotenobject.RawFieldPath) (BatchGetRolesRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetRolesRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &BatchGetRolesRequest_FieldTerminalPath{selector: BatchGetRolesRequest_FieldPathSelectorParent}, nil
		case "names":
			return &BatchGetRolesRequest_FieldTerminalPath{selector: BatchGetRolesRequest_FieldPathSelectorNames}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &BatchGetRolesRequest_FieldTerminalPath{selector: BatchGetRolesRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &BatchGetRolesRequest_FieldTerminalPath{selector: BatchGetRolesRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetRolesRequest", fp)
}

func ParseBatchGetRolesRequest_FieldPath(rawField string) (BatchGetRolesRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetRolesRequest_FieldPath(fp)
}

func MustParseBatchGetRolesRequest_FieldPath(rawField string) BatchGetRolesRequest_FieldPath {
	fp, err := ParseBatchGetRolesRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetRolesRequest_FieldTerminalPath struct {
	selector BatchGetRolesRequest_FieldPathSelector
}

var _ BatchGetRolesRequest_FieldPath = (*BatchGetRolesRequest_FieldTerminalPath)(nil)

func (fp *BatchGetRolesRequest_FieldTerminalPath) Selector() BatchGetRolesRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetRolesRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetRolesRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetRolesRequest
func (fp *BatchGetRolesRequest_FieldTerminalPath) Get(source *BatchGetRolesRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetRolesRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case BatchGetRolesRequest_FieldPathSelectorNames:
			for _, value := range source.GetNames() {
				values = append(values, value)
			}
		case BatchGetRolesRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case BatchGetRolesRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetRolesRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetRolesRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetRolesRequest))
}

// GetSingle returns value pointed by specific field of from source BatchGetRolesRequest
func (fp *BatchGetRolesRequest_FieldTerminalPath) GetSingle(source *BatchGetRolesRequest) (interface{}, bool) {
	switch fp.selector {
	case BatchGetRolesRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case BatchGetRolesRequest_FieldPathSelectorNames:
		res := source.GetNames()
		return res, res != nil
	case BatchGetRolesRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case BatchGetRolesRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetRolesRequest: %d", fp.selector))
	}
}

func (fp *BatchGetRolesRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetRolesRequest))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetRolesRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetRolesRequest_FieldPathSelectorParent:
		return (*role.Reference)(nil)
	case BatchGetRolesRequest_FieldPathSelectorNames:
		return ([]*role.Reference)(nil)
	case BatchGetRolesRequest_FieldPathSelectorFieldMask:
		return (*role.Role_FieldMask)(nil)
	case BatchGetRolesRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetRolesRequest: %d", fp.selector))
	}
}

func (fp *BatchGetRolesRequest_FieldTerminalPath) ClearValue(item *BatchGetRolesRequest) {
	if item != nil {
		switch fp.selector {
		case BatchGetRolesRequest_FieldPathSelectorParent:
			item.Parent = nil
		case BatchGetRolesRequest_FieldPathSelectorNames:
			item.Names = nil
		case BatchGetRolesRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case BatchGetRolesRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetRolesRequest: %d", fp.selector))
		}
	}
}

func (fp *BatchGetRolesRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetRolesRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetRolesRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetRolesRequest_FieldPathSelectorParent ||
		fp.selector == BatchGetRolesRequest_FieldPathSelectorNames ||
		fp.selector == BatchGetRolesRequest_FieldPathSelectorFieldMask ||
		fp.selector == BatchGetRolesRequest_FieldPathSelectorView
}

func (fp *BatchGetRolesRequest_FieldTerminalPath) WithIValue(value interface{}) BatchGetRolesRequest_FieldPathValue {
	switch fp.selector {
	case BatchGetRolesRequest_FieldPathSelectorParent:
		return &BatchGetRolesRequest_FieldTerminalPathValue{BatchGetRolesRequest_FieldTerminalPath: *fp, value: value.(*role.Reference)}
	case BatchGetRolesRequest_FieldPathSelectorNames:
		return &BatchGetRolesRequest_FieldTerminalPathValue{BatchGetRolesRequest_FieldTerminalPath: *fp, value: value.([]*role.Reference)}
	case BatchGetRolesRequest_FieldPathSelectorFieldMask:
		return &BatchGetRolesRequest_FieldTerminalPathValue{BatchGetRolesRequest_FieldTerminalPath: *fp, value: value.(*role.Role_FieldMask)}
	case BatchGetRolesRequest_FieldPathSelectorView:
		return &BatchGetRolesRequest_FieldTerminalPathValue{BatchGetRolesRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetRolesRequest: %d", fp.selector))
	}
}

func (fp *BatchGetRolesRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetRolesRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetRolesRequest_FieldPathArrayOfValues {
	fpaov := &BatchGetRolesRequest_FieldTerminalPathArrayOfValues{BatchGetRolesRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetRolesRequest_FieldPathSelectorParent:
		return &BatchGetRolesRequest_FieldTerminalPathArrayOfValues{BatchGetRolesRequest_FieldTerminalPath: *fp, values: values.([]*role.Reference)}
	case BatchGetRolesRequest_FieldPathSelectorNames:
		return &BatchGetRolesRequest_FieldTerminalPathArrayOfValues{BatchGetRolesRequest_FieldTerminalPath: *fp, values: values.([][]*role.Reference)}
	case BatchGetRolesRequest_FieldPathSelectorFieldMask:
		return &BatchGetRolesRequest_FieldTerminalPathArrayOfValues{BatchGetRolesRequest_FieldTerminalPath: *fp, values: values.([]*role.Role_FieldMask)}
	case BatchGetRolesRequest_FieldPathSelectorView:
		return &BatchGetRolesRequest_FieldTerminalPathArrayOfValues{BatchGetRolesRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetRolesRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetRolesRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetRolesRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetRolesRequest_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetRolesRequest_FieldPathSelectorNames:
		return &BatchGetRolesRequest_FieldTerminalPathArrayItemValue{BatchGetRolesRequest_FieldTerminalPath: *fp, value: value.(*role.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetRolesRequest: %d", fp.selector))
	}
}

func (fp *BatchGetRolesRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// BatchGetRolesRequest_FieldPathValue allows storing values for BatchGetRolesRequest fields according to their type
type BatchGetRolesRequest_FieldPathValue interface {
	BatchGetRolesRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetRolesRequest)
	CompareWith(*BatchGetRolesRequest) (cmp int, comparable bool)
}

func ParseBatchGetRolesRequest_FieldPathValue(pathStr, valueStr string) (BatchGetRolesRequest_FieldPathValue, error) {
	fp, err := ParseBatchGetRolesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetRolesRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetRolesRequest_FieldPathValue), nil
}

func MustParseBatchGetRolesRequest_FieldPathValue(pathStr, valueStr string) BatchGetRolesRequest_FieldPathValue {
	fpv, err := ParseBatchGetRolesRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetRolesRequest_FieldTerminalPathValue struct {
	BatchGetRolesRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetRolesRequest_FieldPathValue = (*BatchGetRolesRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetRolesRequest' as interface{}
func (fpv *BatchGetRolesRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetRolesRequest_FieldTerminalPathValue) AsParentValue() (*role.Reference, bool) {
	res, ok := fpv.value.(*role.Reference)
	return res, ok
}
func (fpv *BatchGetRolesRequest_FieldTerminalPathValue) AsNamesValue() ([]*role.Reference, bool) {
	res, ok := fpv.value.([]*role.Reference)
	return res, ok
}
func (fpv *BatchGetRolesRequest_FieldTerminalPathValue) AsFieldMaskValue() (*role.Role_FieldMask, bool) {
	res, ok := fpv.value.(*role.Role_FieldMask)
	return res, ok
}
func (fpv *BatchGetRolesRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetRolesRequest
func (fpv *BatchGetRolesRequest_FieldTerminalPathValue) SetTo(target **BatchGetRolesRequest) {
	if *target == nil {
		*target = new(BatchGetRolesRequest)
	}
	switch fpv.selector {
	case BatchGetRolesRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*role.Reference)
	case BatchGetRolesRequest_FieldPathSelectorNames:
		(*target).Names = fpv.value.([]*role.Reference)
	case BatchGetRolesRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*role.Role_FieldMask)
	case BatchGetRolesRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetRolesRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetRolesRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetRolesRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetRolesRequest_FieldTerminalPathValue' with the value under path in 'BatchGetRolesRequest'.
func (fpv *BatchGetRolesRequest_FieldTerminalPathValue) CompareWith(source *BatchGetRolesRequest) (int, bool) {
	switch fpv.selector {
	case BatchGetRolesRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*role.Reference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case BatchGetRolesRequest_FieldPathSelectorNames:
		return 0, false
	case BatchGetRolesRequest_FieldPathSelectorFieldMask:
		return 0, false
	case BatchGetRolesRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetRolesRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetRolesRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetRolesRequest))
}

// BatchGetRolesRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetRolesRequest according to their type
// Present only for array (repeated) types.
type BatchGetRolesRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetRolesRequest_FieldPath
	ContainsValue(*BatchGetRolesRequest) bool
}

// ParseBatchGetRolesRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetRolesRequest_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetRolesRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetRolesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetRolesRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetRolesRequest_FieldPathArrayItemValue), nil
}

func MustParseBatchGetRolesRequest_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetRolesRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetRolesRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetRolesRequest_FieldTerminalPathArrayItemValue struct {
	BatchGetRolesRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetRolesRequest_FieldPathArrayItemValue = (*BatchGetRolesRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetRolesRequest as interface{}
func (fpaiv *BatchGetRolesRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetRolesRequest_FieldTerminalPathArrayItemValue) AsNamesItemValue() (*role.Reference, bool) {
	res, ok := fpaiv.value.(*role.Reference)
	return res, ok
}

func (fpaiv *BatchGetRolesRequest_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetRolesRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetRolesRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetRolesRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetRolesRequest'
func (fpaiv *BatchGetRolesRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetRolesRequest) bool {
	slice := fpaiv.BatchGetRolesRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// BatchGetRolesRequest_FieldPathArrayOfValues allows storing slice of values for BatchGetRolesRequest fields according to their type
type BatchGetRolesRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetRolesRequest_FieldPath
}

func ParseBatchGetRolesRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetRolesRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetRolesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetRolesRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetRolesRequest_FieldPathArrayOfValues), nil
}

func MustParseBatchGetRolesRequest_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetRolesRequest_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetRolesRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetRolesRequest_FieldTerminalPathArrayOfValues struct {
	BatchGetRolesRequest_FieldTerminalPath
	values interface{}
}

var _ BatchGetRolesRequest_FieldPathArrayOfValues = (*BatchGetRolesRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetRolesRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetRolesRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*role.Reference) {
			values = append(values, v)
		}
	case BatchGetRolesRequest_FieldPathSelectorNames:
		for _, v := range fpaov.values.([][]*role.Reference) {
			values = append(values, v)
		}
	case BatchGetRolesRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*role.Role_FieldMask) {
			values = append(values, v)
		}
	case BatchGetRolesRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetRolesRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*role.Reference, bool) {
	res, ok := fpaov.values.([]*role.Reference)
	return res, ok
}
func (fpaov *BatchGetRolesRequest_FieldTerminalPathArrayOfValues) AsNamesArrayOfValues() ([][]*role.Reference, bool) {
	res, ok := fpaov.values.([][]*role.Reference)
	return res, ok
}
func (fpaov *BatchGetRolesRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*role.Role_FieldMask, bool) {
	res, ok := fpaov.values.([]*role.Role_FieldMask)
	return res, ok
}
func (fpaov *BatchGetRolesRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetRolesResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetRolesResponse_FieldPathSelector
	Get(source *BatchGetRolesResponse) []interface{}
	GetSingle(source *BatchGetRolesResponse) (interface{}, bool)
	ClearValue(item *BatchGetRolesResponse)

	// Those methods build corresponding BatchGetRolesResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetRolesResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetRolesResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetRolesResponse_FieldPathArrayItemValue
}

type BatchGetRolesResponse_FieldPathSelector int32

const (
	BatchGetRolesResponse_FieldPathSelectorRoles   BatchGetRolesResponse_FieldPathSelector = 0
	BatchGetRolesResponse_FieldPathSelectorMissing BatchGetRolesResponse_FieldPathSelector = 1
)

func (s BatchGetRolesResponse_FieldPathSelector) String() string {
	switch s {
	case BatchGetRolesResponse_FieldPathSelectorRoles:
		return "roles"
	case BatchGetRolesResponse_FieldPathSelectorMissing:
		return "missing"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetRolesResponse: %d", s))
	}
}

func BuildBatchGetRolesResponse_FieldPath(fp gotenobject.RawFieldPath) (BatchGetRolesResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetRolesResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "roles":
			return &BatchGetRolesResponse_FieldTerminalPath{selector: BatchGetRolesResponse_FieldPathSelectorRoles}, nil
		case "missing":
			return &BatchGetRolesResponse_FieldTerminalPath{selector: BatchGetRolesResponse_FieldPathSelectorMissing}, nil
		}
	} else {
		switch fp[0] {
		case "roles":
			if subpath, err := role.BuildRole_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &BatchGetRolesResponse_FieldSubPath{selector: BatchGetRolesResponse_FieldPathSelectorRoles, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetRolesResponse", fp)
}

func ParseBatchGetRolesResponse_FieldPath(rawField string) (BatchGetRolesResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetRolesResponse_FieldPath(fp)
}

func MustParseBatchGetRolesResponse_FieldPath(rawField string) BatchGetRolesResponse_FieldPath {
	fp, err := ParseBatchGetRolesResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetRolesResponse_FieldTerminalPath struct {
	selector BatchGetRolesResponse_FieldPathSelector
}

var _ BatchGetRolesResponse_FieldPath = (*BatchGetRolesResponse_FieldTerminalPath)(nil)

func (fp *BatchGetRolesResponse_FieldTerminalPath) Selector() BatchGetRolesResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetRolesResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetRolesResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetRolesResponse
func (fp *BatchGetRolesResponse_FieldTerminalPath) Get(source *BatchGetRolesResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetRolesResponse_FieldPathSelectorRoles:
			for _, value := range source.GetRoles() {
				values = append(values, value)
			}
		case BatchGetRolesResponse_FieldPathSelectorMissing:
			for _, value := range source.GetMissing() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetRolesResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetRolesResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetRolesResponse))
}

// GetSingle returns value pointed by specific field of from source BatchGetRolesResponse
func (fp *BatchGetRolesResponse_FieldTerminalPath) GetSingle(source *BatchGetRolesResponse) (interface{}, bool) {
	switch fp.selector {
	case BatchGetRolesResponse_FieldPathSelectorRoles:
		res := source.GetRoles()
		return res, res != nil
	case BatchGetRolesResponse_FieldPathSelectorMissing:
		res := source.GetMissing()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetRolesResponse: %d", fp.selector))
	}
}

func (fp *BatchGetRolesResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetRolesResponse))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetRolesResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetRolesResponse_FieldPathSelectorRoles:
		return ([]*role.Role)(nil)
	case BatchGetRolesResponse_FieldPathSelectorMissing:
		return ([]*role.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetRolesResponse: %d", fp.selector))
	}
}

func (fp *BatchGetRolesResponse_FieldTerminalPath) ClearValue(item *BatchGetRolesResponse) {
	if item != nil {
		switch fp.selector {
		case BatchGetRolesResponse_FieldPathSelectorRoles:
			item.Roles = nil
		case BatchGetRolesResponse_FieldPathSelectorMissing:
			item.Missing = nil
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetRolesResponse: %d", fp.selector))
		}
	}
}

func (fp *BatchGetRolesResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetRolesResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetRolesResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetRolesResponse_FieldPathSelectorMissing
}

func (fp *BatchGetRolesResponse_FieldTerminalPath) WithIValue(value interface{}) BatchGetRolesResponse_FieldPathValue {
	switch fp.selector {
	case BatchGetRolesResponse_FieldPathSelectorRoles:
		return &BatchGetRolesResponse_FieldTerminalPathValue{BatchGetRolesResponse_FieldTerminalPath: *fp, value: value.([]*role.Role)}
	case BatchGetRolesResponse_FieldPathSelectorMissing:
		return &BatchGetRolesResponse_FieldTerminalPathValue{BatchGetRolesResponse_FieldTerminalPath: *fp, value: value.([]*role.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetRolesResponse: %d", fp.selector))
	}
}

func (fp *BatchGetRolesResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetRolesResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetRolesResponse_FieldPathArrayOfValues {
	fpaov := &BatchGetRolesResponse_FieldTerminalPathArrayOfValues{BatchGetRolesResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetRolesResponse_FieldPathSelectorRoles:
		return &BatchGetRolesResponse_FieldTerminalPathArrayOfValues{BatchGetRolesResponse_FieldTerminalPath: *fp, values: values.([][]*role.Role)}
	case BatchGetRolesResponse_FieldPathSelectorMissing:
		return &BatchGetRolesResponse_FieldTerminalPathArrayOfValues{BatchGetRolesResponse_FieldTerminalPath: *fp, values: values.([][]*role.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetRolesResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetRolesResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetRolesResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetRolesResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetRolesResponse_FieldPathSelectorRoles:
		return &BatchGetRolesResponse_FieldTerminalPathArrayItemValue{BatchGetRolesResponse_FieldTerminalPath: *fp, value: value.(*role.Role)}
	case BatchGetRolesResponse_FieldPathSelectorMissing:
		return &BatchGetRolesResponse_FieldTerminalPathArrayItemValue{BatchGetRolesResponse_FieldTerminalPath: *fp, value: value.(*role.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetRolesResponse: %d", fp.selector))
	}
}

func (fp *BatchGetRolesResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type BatchGetRolesResponse_FieldSubPath struct {
	selector BatchGetRolesResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ BatchGetRolesResponse_FieldPath = (*BatchGetRolesResponse_FieldSubPath)(nil)

func (fps *BatchGetRolesResponse_FieldSubPath) Selector() BatchGetRolesResponse_FieldPathSelector {
	return fps.selector
}
func (fps *BatchGetRolesResponse_FieldSubPath) AsRolesSubPath() (role.Role_FieldPath, bool) {
	res, ok := fps.subPath.(role.Role_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *BatchGetRolesResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *BatchGetRolesResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source BatchGetRolesResponse
func (fps *BatchGetRolesResponse_FieldSubPath) Get(source *BatchGetRolesResponse) (values []interface{}) {
	if asRoleFieldPath, ok := fps.AsRolesSubPath(); ok {
		for _, item := range source.GetRoles() {
			values = append(values, asRoleFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for BatchGetRolesResponse: %d", fps.selector))
	}
	return
}

func (fps *BatchGetRolesResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*BatchGetRolesResponse))
}

// GetSingle returns value of selected field from source BatchGetRolesResponse
func (fps *BatchGetRolesResponse_FieldSubPath) GetSingle(source *BatchGetRolesResponse) (interface{}, bool) {
	switch fps.selector {
	case BatchGetRolesResponse_FieldPathSelectorRoles:
		if len(source.GetRoles()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetRoles()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetRolesResponse: %d", fps.selector))
	}
}

func (fps *BatchGetRolesResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*BatchGetRolesResponse))
}

// GetDefault returns a default value of the field type
func (fps *BatchGetRolesResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *BatchGetRolesResponse_FieldSubPath) ClearValue(item *BatchGetRolesResponse) {
	if item != nil {
		switch fps.selector {
		case BatchGetRolesResponse_FieldPathSelectorRoles:
			for _, subItem := range item.Roles {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetRolesResponse: %d", fps.selector))
		}
	}
}

func (fps *BatchGetRolesResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*BatchGetRolesResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *BatchGetRolesResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *BatchGetRolesResponse_FieldSubPath) WithIValue(value interface{}) BatchGetRolesResponse_FieldPathValue {
	return &BatchGetRolesResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *BatchGetRolesResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *BatchGetRolesResponse_FieldSubPath) WithIArrayOfValues(values interface{}) BatchGetRolesResponse_FieldPathArrayOfValues {
	return &BatchGetRolesResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *BatchGetRolesResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *BatchGetRolesResponse_FieldSubPath) WithIArrayItemValue(value interface{}) BatchGetRolesResponse_FieldPathArrayItemValue {
	return &BatchGetRolesResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *BatchGetRolesResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// BatchGetRolesResponse_FieldPathValue allows storing values for BatchGetRolesResponse fields according to their type
type BatchGetRolesResponse_FieldPathValue interface {
	BatchGetRolesResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetRolesResponse)
	CompareWith(*BatchGetRolesResponse) (cmp int, comparable bool)
}

func ParseBatchGetRolesResponse_FieldPathValue(pathStr, valueStr string) (BatchGetRolesResponse_FieldPathValue, error) {
	fp, err := ParseBatchGetRolesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetRolesResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetRolesResponse_FieldPathValue), nil
}

func MustParseBatchGetRolesResponse_FieldPathValue(pathStr, valueStr string) BatchGetRolesResponse_FieldPathValue {
	fpv, err := ParseBatchGetRolesResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetRolesResponse_FieldTerminalPathValue struct {
	BatchGetRolesResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetRolesResponse_FieldPathValue = (*BatchGetRolesResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetRolesResponse' as interface{}
func (fpv *BatchGetRolesResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetRolesResponse_FieldTerminalPathValue) AsRolesValue() ([]*role.Role, bool) {
	res, ok := fpv.value.([]*role.Role)
	return res, ok
}
func (fpv *BatchGetRolesResponse_FieldTerminalPathValue) AsMissingValue() ([]*role.Reference, bool) {
	res, ok := fpv.value.([]*role.Reference)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetRolesResponse
func (fpv *BatchGetRolesResponse_FieldTerminalPathValue) SetTo(target **BatchGetRolesResponse) {
	if *target == nil {
		*target = new(BatchGetRolesResponse)
	}
	switch fpv.selector {
	case BatchGetRolesResponse_FieldPathSelectorRoles:
		(*target).Roles = fpv.value.([]*role.Role)
	case BatchGetRolesResponse_FieldPathSelectorMissing:
		(*target).Missing = fpv.value.([]*role.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetRolesResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetRolesResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetRolesResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetRolesResponse_FieldTerminalPathValue' with the value under path in 'BatchGetRolesResponse'.
func (fpv *BatchGetRolesResponse_FieldTerminalPathValue) CompareWith(source *BatchGetRolesResponse) (int, bool) {
	switch fpv.selector {
	case BatchGetRolesResponse_FieldPathSelectorRoles:
		return 0, false
	case BatchGetRolesResponse_FieldPathSelectorMissing:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetRolesResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetRolesResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetRolesResponse))
}

type BatchGetRolesResponse_FieldSubPathValue struct {
	BatchGetRolesResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ BatchGetRolesResponse_FieldPathValue = (*BatchGetRolesResponse_FieldSubPathValue)(nil)

func (fpvs *BatchGetRolesResponse_FieldSubPathValue) AsRolesPathValue() (role.Role_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(role.Role_FieldPathValue)
	return res, ok
}

func (fpvs *BatchGetRolesResponse_FieldSubPathValue) SetTo(target **BatchGetRolesResponse) {
	if *target == nil {
		*target = new(BatchGetRolesResponse)
	}
	switch fpvs.Selector() {
	case BatchGetRolesResponse_FieldPathSelectorRoles:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetRolesResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetRolesResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetRolesResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *BatchGetRolesResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *BatchGetRolesResponse_FieldSubPathValue) CompareWith(source *BatchGetRolesResponse) (int, bool) {
	switch fpvs.Selector() {
	case BatchGetRolesResponse_FieldPathSelectorRoles:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetRolesResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetRolesResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*BatchGetRolesResponse))
}

// BatchGetRolesResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetRolesResponse according to their type
// Present only for array (repeated) types.
type BatchGetRolesResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetRolesResponse_FieldPath
	ContainsValue(*BatchGetRolesResponse) bool
}

// ParseBatchGetRolesResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetRolesResponse_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetRolesResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetRolesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetRolesResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetRolesResponse_FieldPathArrayItemValue), nil
}

func MustParseBatchGetRolesResponse_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetRolesResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetRolesResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetRolesResponse_FieldTerminalPathArrayItemValue struct {
	BatchGetRolesResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetRolesResponse_FieldPathArrayItemValue = (*BatchGetRolesResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetRolesResponse as interface{}
func (fpaiv *BatchGetRolesResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetRolesResponse_FieldTerminalPathArrayItemValue) AsRolesItemValue() (*role.Role, bool) {
	res, ok := fpaiv.value.(*role.Role)
	return res, ok
}
func (fpaiv *BatchGetRolesResponse_FieldTerminalPathArrayItemValue) AsMissingItemValue() (*role.Reference, bool) {
	res, ok := fpaiv.value.(*role.Reference)
	return res, ok
}

func (fpaiv *BatchGetRolesResponse_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetRolesResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetRolesResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetRolesResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetRolesResponse'
func (fpaiv *BatchGetRolesResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetRolesResponse) bool {
	slice := fpaiv.BatchGetRolesResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type BatchGetRolesResponse_FieldSubPathArrayItemValue struct {
	BatchGetRolesResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *BatchGetRolesResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *BatchGetRolesResponse_FieldSubPathArrayItemValue) AsRolesPathItemValue() (role.Role_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(role.Role_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetRolesResponse'
func (fpaivs *BatchGetRolesResponse_FieldSubPathArrayItemValue) ContainsValue(source *BatchGetRolesResponse) bool {
	switch fpaivs.Selector() {
	case BatchGetRolesResponse_FieldPathSelectorRoles:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetRolesResponse: %d", fpaivs.Selector()))
	}
}

// BatchGetRolesResponse_FieldPathArrayOfValues allows storing slice of values for BatchGetRolesResponse fields according to their type
type BatchGetRolesResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetRolesResponse_FieldPath
}

func ParseBatchGetRolesResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetRolesResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetRolesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetRolesResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetRolesResponse_FieldPathArrayOfValues), nil
}

func MustParseBatchGetRolesResponse_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetRolesResponse_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetRolesResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetRolesResponse_FieldTerminalPathArrayOfValues struct {
	BatchGetRolesResponse_FieldTerminalPath
	values interface{}
}

var _ BatchGetRolesResponse_FieldPathArrayOfValues = (*BatchGetRolesResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetRolesResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetRolesResponse_FieldPathSelectorRoles:
		for _, v := range fpaov.values.([][]*role.Role) {
			values = append(values, v)
		}
	case BatchGetRolesResponse_FieldPathSelectorMissing:
		for _, v := range fpaov.values.([][]*role.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetRolesResponse_FieldTerminalPathArrayOfValues) AsRolesArrayOfValues() ([][]*role.Role, bool) {
	res, ok := fpaov.values.([][]*role.Role)
	return res, ok
}
func (fpaov *BatchGetRolesResponse_FieldTerminalPathArrayOfValues) AsMissingArrayOfValues() ([][]*role.Reference, bool) {
	res, ok := fpaov.values.([][]*role.Reference)
	return res, ok
}

type BatchGetRolesResponse_FieldSubPathArrayOfValues struct {
	BatchGetRolesResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ BatchGetRolesResponse_FieldPathArrayOfValues = (*BatchGetRolesResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *BatchGetRolesResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *BatchGetRolesResponse_FieldSubPathArrayOfValues) AsRolesPathArrayOfValues() (role.Role_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(role.Role_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListRolesRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListRolesRequest_FieldPathSelector
	Get(source *ListRolesRequest) []interface{}
	GetSingle(source *ListRolesRequest) (interface{}, bool)
	ClearValue(item *ListRolesRequest)

	// Those methods build corresponding ListRolesRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListRolesRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ListRolesRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListRolesRequest_FieldPathArrayItemValue
}

type ListRolesRequest_FieldPathSelector int32

const (
	ListRolesRequest_FieldPathSelectorPageSize  ListRolesRequest_FieldPathSelector = 0
	ListRolesRequest_FieldPathSelectorPageToken ListRolesRequest_FieldPathSelector = 1
	ListRolesRequest_FieldPathSelectorOrderBy   ListRolesRequest_FieldPathSelector = 2
	ListRolesRequest_FieldPathSelectorFilter    ListRolesRequest_FieldPathSelector = 3
	ListRolesRequest_FieldPathSelectorFieldMask ListRolesRequest_FieldPathSelector = 4
	ListRolesRequest_FieldPathSelectorView      ListRolesRequest_FieldPathSelector = 5
)

func (s ListRolesRequest_FieldPathSelector) String() string {
	switch s {
	case ListRolesRequest_FieldPathSelectorPageSize:
		return "page_size"
	case ListRolesRequest_FieldPathSelectorPageToken:
		return "page_token"
	case ListRolesRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case ListRolesRequest_FieldPathSelectorFilter:
		return "filter"
	case ListRolesRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case ListRolesRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for ListRolesRequest: %d", s))
	}
}

func BuildListRolesRequest_FieldPath(fp gotenobject.RawFieldPath) (ListRolesRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListRolesRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "page_size", "pageSize", "page-size":
			return &ListRolesRequest_FieldTerminalPath{selector: ListRolesRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &ListRolesRequest_FieldTerminalPath{selector: ListRolesRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &ListRolesRequest_FieldTerminalPath{selector: ListRolesRequest_FieldPathSelectorOrderBy}, nil
		case "filter":
			return &ListRolesRequest_FieldTerminalPath{selector: ListRolesRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &ListRolesRequest_FieldTerminalPath{selector: ListRolesRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &ListRolesRequest_FieldTerminalPath{selector: ListRolesRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListRolesRequest", fp)
}

func ParseListRolesRequest_FieldPath(rawField string) (ListRolesRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListRolesRequest_FieldPath(fp)
}

func MustParseListRolesRequest_FieldPath(rawField string) ListRolesRequest_FieldPath {
	fp, err := ParseListRolesRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListRolesRequest_FieldTerminalPath struct {
	selector ListRolesRequest_FieldPathSelector
}

var _ ListRolesRequest_FieldPath = (*ListRolesRequest_FieldTerminalPath)(nil)

func (fp *ListRolesRequest_FieldTerminalPath) Selector() ListRolesRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListRolesRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListRolesRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListRolesRequest
func (fp *ListRolesRequest_FieldTerminalPath) Get(source *ListRolesRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListRolesRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case ListRolesRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case ListRolesRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case ListRolesRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case ListRolesRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case ListRolesRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for ListRolesRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ListRolesRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListRolesRequest))
}

// GetSingle returns value pointed by specific field of from source ListRolesRequest
func (fp *ListRolesRequest_FieldTerminalPath) GetSingle(source *ListRolesRequest) (interface{}, bool) {
	switch fp.selector {
	case ListRolesRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case ListRolesRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case ListRolesRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case ListRolesRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case ListRolesRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case ListRolesRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListRolesRequest: %d", fp.selector))
	}
}

func (fp *ListRolesRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListRolesRequest))
}

// GetDefault returns a default value of the field type
func (fp *ListRolesRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListRolesRequest_FieldPathSelectorPageSize:
		return int32(0)
	case ListRolesRequest_FieldPathSelectorPageToken:
		return (*role.PagerCursor)(nil)
	case ListRolesRequest_FieldPathSelectorOrderBy:
		return (*role.OrderBy)(nil)
	case ListRolesRequest_FieldPathSelectorFilter:
		return (*role.Filter)(nil)
	case ListRolesRequest_FieldPathSelectorFieldMask:
		return (*role.Role_FieldMask)(nil)
	case ListRolesRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for ListRolesRequest: %d", fp.selector))
	}
}

func (fp *ListRolesRequest_FieldTerminalPath) ClearValue(item *ListRolesRequest) {
	if item != nil {
		switch fp.selector {
		case ListRolesRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case ListRolesRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case ListRolesRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case ListRolesRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case ListRolesRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case ListRolesRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for ListRolesRequest: %d", fp.selector))
		}
	}
}

func (fp *ListRolesRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListRolesRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListRolesRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListRolesRequest_FieldPathSelectorPageSize ||
		fp.selector == ListRolesRequest_FieldPathSelectorPageToken ||
		fp.selector == ListRolesRequest_FieldPathSelectorOrderBy ||
		fp.selector == ListRolesRequest_FieldPathSelectorFilter ||
		fp.selector == ListRolesRequest_FieldPathSelectorFieldMask ||
		fp.selector == ListRolesRequest_FieldPathSelectorView
}

func (fp *ListRolesRequest_FieldTerminalPath) WithIValue(value interface{}) ListRolesRequest_FieldPathValue {
	switch fp.selector {
	case ListRolesRequest_FieldPathSelectorPageSize:
		return &ListRolesRequest_FieldTerminalPathValue{ListRolesRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case ListRolesRequest_FieldPathSelectorPageToken:
		return &ListRolesRequest_FieldTerminalPathValue{ListRolesRequest_FieldTerminalPath: *fp, value: value.(*role.PagerCursor)}
	case ListRolesRequest_FieldPathSelectorOrderBy:
		return &ListRolesRequest_FieldTerminalPathValue{ListRolesRequest_FieldTerminalPath: *fp, value: value.(*role.OrderBy)}
	case ListRolesRequest_FieldPathSelectorFilter:
		return &ListRolesRequest_FieldTerminalPathValue{ListRolesRequest_FieldTerminalPath: *fp, value: value.(*role.Filter)}
	case ListRolesRequest_FieldPathSelectorFieldMask:
		return &ListRolesRequest_FieldTerminalPathValue{ListRolesRequest_FieldTerminalPath: *fp, value: value.(*role.Role_FieldMask)}
	case ListRolesRequest_FieldPathSelectorView:
		return &ListRolesRequest_FieldTerminalPathValue{ListRolesRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListRolesRequest: %d", fp.selector))
	}
}

func (fp *ListRolesRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListRolesRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListRolesRequest_FieldPathArrayOfValues {
	fpaov := &ListRolesRequest_FieldTerminalPathArrayOfValues{ListRolesRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListRolesRequest_FieldPathSelectorPageSize:
		return &ListRolesRequest_FieldTerminalPathArrayOfValues{ListRolesRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case ListRolesRequest_FieldPathSelectorPageToken:
		return &ListRolesRequest_FieldTerminalPathArrayOfValues{ListRolesRequest_FieldTerminalPath: *fp, values: values.([]*role.PagerCursor)}
	case ListRolesRequest_FieldPathSelectorOrderBy:
		return &ListRolesRequest_FieldTerminalPathArrayOfValues{ListRolesRequest_FieldTerminalPath: *fp, values: values.([]*role.OrderBy)}
	case ListRolesRequest_FieldPathSelectorFilter:
		return &ListRolesRequest_FieldTerminalPathArrayOfValues{ListRolesRequest_FieldTerminalPath: *fp, values: values.([]*role.Filter)}
	case ListRolesRequest_FieldPathSelectorFieldMask:
		return &ListRolesRequest_FieldTerminalPathArrayOfValues{ListRolesRequest_FieldTerminalPath: *fp, values: values.([]*role.Role_FieldMask)}
	case ListRolesRequest_FieldPathSelectorView:
		return &ListRolesRequest_FieldTerminalPathArrayOfValues{ListRolesRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListRolesRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListRolesRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListRolesRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListRolesRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ListRolesRequest: %d", fp.selector))
	}
}

func (fp *ListRolesRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ListRolesRequest_FieldPathValue allows storing values for ListRolesRequest fields according to their type
type ListRolesRequest_FieldPathValue interface {
	ListRolesRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListRolesRequest)
	CompareWith(*ListRolesRequest) (cmp int, comparable bool)
}

func ParseListRolesRequest_FieldPathValue(pathStr, valueStr string) (ListRolesRequest_FieldPathValue, error) {
	fp, err := ParseListRolesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListRolesRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListRolesRequest_FieldPathValue), nil
}

func MustParseListRolesRequest_FieldPathValue(pathStr, valueStr string) ListRolesRequest_FieldPathValue {
	fpv, err := ParseListRolesRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListRolesRequest_FieldTerminalPathValue struct {
	ListRolesRequest_FieldTerminalPath
	value interface{}
}

var _ ListRolesRequest_FieldPathValue = (*ListRolesRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListRolesRequest' as interface{}
func (fpv *ListRolesRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListRolesRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *ListRolesRequest_FieldTerminalPathValue) AsPageTokenValue() (*role.PagerCursor, bool) {
	res, ok := fpv.value.(*role.PagerCursor)
	return res, ok
}
func (fpv *ListRolesRequest_FieldTerminalPathValue) AsOrderByValue() (*role.OrderBy, bool) {
	res, ok := fpv.value.(*role.OrderBy)
	return res, ok
}
func (fpv *ListRolesRequest_FieldTerminalPathValue) AsFilterValue() (*role.Filter, bool) {
	res, ok := fpv.value.(*role.Filter)
	return res, ok
}
func (fpv *ListRolesRequest_FieldTerminalPathValue) AsFieldMaskValue() (*role.Role_FieldMask, bool) {
	res, ok := fpv.value.(*role.Role_FieldMask)
	return res, ok
}
func (fpv *ListRolesRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object ListRolesRequest
func (fpv *ListRolesRequest_FieldTerminalPathValue) SetTo(target **ListRolesRequest) {
	if *target == nil {
		*target = new(ListRolesRequest)
	}
	switch fpv.selector {
	case ListRolesRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case ListRolesRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*role.PagerCursor)
	case ListRolesRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*role.OrderBy)
	case ListRolesRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*role.Filter)
	case ListRolesRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*role.Role_FieldMask)
	case ListRolesRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for ListRolesRequest: %d", fpv.selector))
	}
}

func (fpv *ListRolesRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListRolesRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListRolesRequest_FieldTerminalPathValue' with the value under path in 'ListRolesRequest'.
func (fpv *ListRolesRequest_FieldTerminalPathValue) CompareWith(source *ListRolesRequest) (int, bool) {
	switch fpv.selector {
	case ListRolesRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListRolesRequest_FieldPathSelectorPageToken:
		return 0, false
	case ListRolesRequest_FieldPathSelectorOrderBy:
		return 0, false
	case ListRolesRequest_FieldPathSelectorFilter:
		return 0, false
	case ListRolesRequest_FieldPathSelectorFieldMask:
		return 0, false
	case ListRolesRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListRolesRequest: %d", fpv.selector))
	}
}

func (fpv *ListRolesRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListRolesRequest))
}

// ListRolesRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for ListRolesRequest according to their type
// Present only for array (repeated) types.
type ListRolesRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListRolesRequest_FieldPath
	ContainsValue(*ListRolesRequest) bool
}

// ParseListRolesRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListRolesRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ListRolesRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseListRolesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListRolesRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListRolesRequest_FieldPathArrayItemValue), nil
}

func MustParseListRolesRequest_FieldPathArrayItemValue(pathStr, valueStr string) ListRolesRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseListRolesRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListRolesRequest_FieldTerminalPathArrayItemValue struct {
	ListRolesRequest_FieldTerminalPath
	value interface{}
}

var _ ListRolesRequest_FieldPathArrayItemValue = (*ListRolesRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListRolesRequest as interface{}
func (fpaiv *ListRolesRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ListRolesRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ListRolesRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListRolesRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListRolesRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListRolesRequest'
func (fpaiv *ListRolesRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ListRolesRequest) bool {
	slice := fpaiv.ListRolesRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ListRolesRequest_FieldPathArrayOfValues allows storing slice of values for ListRolesRequest fields according to their type
type ListRolesRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListRolesRequest_FieldPath
}

func ParseListRolesRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ListRolesRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseListRolesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListRolesRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListRolesRequest_FieldPathArrayOfValues), nil
}

func MustParseListRolesRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ListRolesRequest_FieldPathArrayOfValues {
	fpaov, err := ParseListRolesRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListRolesRequest_FieldTerminalPathArrayOfValues struct {
	ListRolesRequest_FieldTerminalPath
	values interface{}
}

var _ ListRolesRequest_FieldPathArrayOfValues = (*ListRolesRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListRolesRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListRolesRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case ListRolesRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*role.PagerCursor) {
			values = append(values, v)
		}
	case ListRolesRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*role.OrderBy) {
			values = append(values, v)
		}
	case ListRolesRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*role.Filter) {
			values = append(values, v)
		}
	case ListRolesRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*role.Role_FieldMask) {
			values = append(values, v)
		}
	case ListRolesRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListRolesRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *ListRolesRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*role.PagerCursor, bool) {
	res, ok := fpaov.values.([]*role.PagerCursor)
	return res, ok
}
func (fpaov *ListRolesRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*role.OrderBy, bool) {
	res, ok := fpaov.values.([]*role.OrderBy)
	return res, ok
}
func (fpaov *ListRolesRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*role.Filter, bool) {
	res, ok := fpaov.values.([]*role.Filter)
	return res, ok
}
func (fpaov *ListRolesRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*role.Role_FieldMask, bool) {
	res, ok := fpaov.values.([]*role.Role_FieldMask)
	return res, ok
}
func (fpaov *ListRolesRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListRolesResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListRolesResponse_FieldPathSelector
	Get(source *ListRolesResponse) []interface{}
	GetSingle(source *ListRolesResponse) (interface{}, bool)
	ClearValue(item *ListRolesResponse)

	// Those methods build corresponding ListRolesResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListRolesResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) ListRolesResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListRolesResponse_FieldPathArrayItemValue
}

type ListRolesResponse_FieldPathSelector int32

const (
	ListRolesResponse_FieldPathSelectorRoles         ListRolesResponse_FieldPathSelector = 0
	ListRolesResponse_FieldPathSelectorPrevPageToken ListRolesResponse_FieldPathSelector = 1
	ListRolesResponse_FieldPathSelectorNextPageToken ListRolesResponse_FieldPathSelector = 2
)

func (s ListRolesResponse_FieldPathSelector) String() string {
	switch s {
	case ListRolesResponse_FieldPathSelectorRoles:
		return "roles"
	case ListRolesResponse_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case ListRolesResponse_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for ListRolesResponse: %d", s))
	}
}

func BuildListRolesResponse_FieldPath(fp gotenobject.RawFieldPath) (ListRolesResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListRolesResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "roles":
			return &ListRolesResponse_FieldTerminalPath{selector: ListRolesResponse_FieldPathSelectorRoles}, nil
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &ListRolesResponse_FieldTerminalPath{selector: ListRolesResponse_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &ListRolesResponse_FieldTerminalPath{selector: ListRolesResponse_FieldPathSelectorNextPageToken}, nil
		}
	} else {
		switch fp[0] {
		case "roles":
			if subpath, err := role.BuildRole_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ListRolesResponse_FieldSubPath{selector: ListRolesResponse_FieldPathSelectorRoles, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListRolesResponse", fp)
}

func ParseListRolesResponse_FieldPath(rawField string) (ListRolesResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListRolesResponse_FieldPath(fp)
}

func MustParseListRolesResponse_FieldPath(rawField string) ListRolesResponse_FieldPath {
	fp, err := ParseListRolesResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListRolesResponse_FieldTerminalPath struct {
	selector ListRolesResponse_FieldPathSelector
}

var _ ListRolesResponse_FieldPath = (*ListRolesResponse_FieldTerminalPath)(nil)

func (fp *ListRolesResponse_FieldTerminalPath) Selector() ListRolesResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListRolesResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListRolesResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListRolesResponse
func (fp *ListRolesResponse_FieldTerminalPath) Get(source *ListRolesResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListRolesResponse_FieldPathSelectorRoles:
			for _, value := range source.GetRoles() {
				values = append(values, value)
			}
		case ListRolesResponse_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case ListRolesResponse_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListRolesResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *ListRolesResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListRolesResponse))
}

// GetSingle returns value pointed by specific field of from source ListRolesResponse
func (fp *ListRolesResponse_FieldTerminalPath) GetSingle(source *ListRolesResponse) (interface{}, bool) {
	switch fp.selector {
	case ListRolesResponse_FieldPathSelectorRoles:
		res := source.GetRoles()
		return res, res != nil
	case ListRolesResponse_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case ListRolesResponse_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListRolesResponse: %d", fp.selector))
	}
}

func (fp *ListRolesResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListRolesResponse))
}

// GetDefault returns a default value of the field type
func (fp *ListRolesResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListRolesResponse_FieldPathSelectorRoles:
		return ([]*role.Role)(nil)
	case ListRolesResponse_FieldPathSelectorPrevPageToken:
		return (*role.PagerCursor)(nil)
	case ListRolesResponse_FieldPathSelectorNextPageToken:
		return (*role.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ListRolesResponse: %d", fp.selector))
	}
}

func (fp *ListRolesResponse_FieldTerminalPath) ClearValue(item *ListRolesResponse) {
	if item != nil {
		switch fp.selector {
		case ListRolesResponse_FieldPathSelectorRoles:
			item.Roles = nil
		case ListRolesResponse_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case ListRolesResponse_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for ListRolesResponse: %d", fp.selector))
		}
	}
}

func (fp *ListRolesResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListRolesResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListRolesResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListRolesResponse_FieldPathSelectorPrevPageToken ||
		fp.selector == ListRolesResponse_FieldPathSelectorNextPageToken
}

func (fp *ListRolesResponse_FieldTerminalPath) WithIValue(value interface{}) ListRolesResponse_FieldPathValue {
	switch fp.selector {
	case ListRolesResponse_FieldPathSelectorRoles:
		return &ListRolesResponse_FieldTerminalPathValue{ListRolesResponse_FieldTerminalPath: *fp, value: value.([]*role.Role)}
	case ListRolesResponse_FieldPathSelectorPrevPageToken:
		return &ListRolesResponse_FieldTerminalPathValue{ListRolesResponse_FieldTerminalPath: *fp, value: value.(*role.PagerCursor)}
	case ListRolesResponse_FieldPathSelectorNextPageToken:
		return &ListRolesResponse_FieldTerminalPathValue{ListRolesResponse_FieldTerminalPath: *fp, value: value.(*role.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListRolesResponse: %d", fp.selector))
	}
}

func (fp *ListRolesResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListRolesResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListRolesResponse_FieldPathArrayOfValues {
	fpaov := &ListRolesResponse_FieldTerminalPathArrayOfValues{ListRolesResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListRolesResponse_FieldPathSelectorRoles:
		return &ListRolesResponse_FieldTerminalPathArrayOfValues{ListRolesResponse_FieldTerminalPath: *fp, values: values.([][]*role.Role)}
	case ListRolesResponse_FieldPathSelectorPrevPageToken:
		return &ListRolesResponse_FieldTerminalPathArrayOfValues{ListRolesResponse_FieldTerminalPath: *fp, values: values.([]*role.PagerCursor)}
	case ListRolesResponse_FieldPathSelectorNextPageToken:
		return &ListRolesResponse_FieldTerminalPathArrayOfValues{ListRolesResponse_FieldTerminalPath: *fp, values: values.([]*role.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListRolesResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListRolesResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListRolesResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListRolesResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case ListRolesResponse_FieldPathSelectorRoles:
		return &ListRolesResponse_FieldTerminalPathArrayItemValue{ListRolesResponse_FieldTerminalPath: *fp, value: value.(*role.Role)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListRolesResponse: %d", fp.selector))
	}
}

func (fp *ListRolesResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ListRolesResponse_FieldSubPath struct {
	selector ListRolesResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ListRolesResponse_FieldPath = (*ListRolesResponse_FieldSubPath)(nil)

func (fps *ListRolesResponse_FieldSubPath) Selector() ListRolesResponse_FieldPathSelector {
	return fps.selector
}
func (fps *ListRolesResponse_FieldSubPath) AsRolesSubPath() (role.Role_FieldPath, bool) {
	res, ok := fps.subPath.(role.Role_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ListRolesResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ListRolesResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ListRolesResponse
func (fps *ListRolesResponse_FieldSubPath) Get(source *ListRolesResponse) (values []interface{}) {
	if asRoleFieldPath, ok := fps.AsRolesSubPath(); ok {
		for _, item := range source.GetRoles() {
			values = append(values, asRoleFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for ListRolesResponse: %d", fps.selector))
	}
	return
}

func (fps *ListRolesResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ListRolesResponse))
}

// GetSingle returns value of selected field from source ListRolesResponse
func (fps *ListRolesResponse_FieldSubPath) GetSingle(source *ListRolesResponse) (interface{}, bool) {
	switch fps.selector {
	case ListRolesResponse_FieldPathSelectorRoles:
		if len(source.GetRoles()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetRoles()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for ListRolesResponse: %d", fps.selector))
	}
}

func (fps *ListRolesResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ListRolesResponse))
}

// GetDefault returns a default value of the field type
func (fps *ListRolesResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ListRolesResponse_FieldSubPath) ClearValue(item *ListRolesResponse) {
	if item != nil {
		switch fps.selector {
		case ListRolesResponse_FieldPathSelectorRoles:
			for _, subItem := range item.Roles {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListRolesResponse: %d", fps.selector))
		}
	}
}

func (fps *ListRolesResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ListRolesResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *ListRolesResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ListRolesResponse_FieldSubPath) WithIValue(value interface{}) ListRolesResponse_FieldPathValue {
	return &ListRolesResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ListRolesResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ListRolesResponse_FieldSubPath) WithIArrayOfValues(values interface{}) ListRolesResponse_FieldPathArrayOfValues {
	return &ListRolesResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ListRolesResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ListRolesResponse_FieldSubPath) WithIArrayItemValue(value interface{}) ListRolesResponse_FieldPathArrayItemValue {
	return &ListRolesResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ListRolesResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ListRolesResponse_FieldPathValue allows storing values for ListRolesResponse fields according to their type
type ListRolesResponse_FieldPathValue interface {
	ListRolesResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListRolesResponse)
	CompareWith(*ListRolesResponse) (cmp int, comparable bool)
}

func ParseListRolesResponse_FieldPathValue(pathStr, valueStr string) (ListRolesResponse_FieldPathValue, error) {
	fp, err := ParseListRolesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListRolesResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListRolesResponse_FieldPathValue), nil
}

func MustParseListRolesResponse_FieldPathValue(pathStr, valueStr string) ListRolesResponse_FieldPathValue {
	fpv, err := ParseListRolesResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListRolesResponse_FieldTerminalPathValue struct {
	ListRolesResponse_FieldTerminalPath
	value interface{}
}

var _ ListRolesResponse_FieldPathValue = (*ListRolesResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListRolesResponse' as interface{}
func (fpv *ListRolesResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListRolesResponse_FieldTerminalPathValue) AsRolesValue() ([]*role.Role, bool) {
	res, ok := fpv.value.([]*role.Role)
	return res, ok
}
func (fpv *ListRolesResponse_FieldTerminalPathValue) AsPrevPageTokenValue() (*role.PagerCursor, bool) {
	res, ok := fpv.value.(*role.PagerCursor)
	return res, ok
}
func (fpv *ListRolesResponse_FieldTerminalPathValue) AsNextPageTokenValue() (*role.PagerCursor, bool) {
	res, ok := fpv.value.(*role.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object ListRolesResponse
func (fpv *ListRolesResponse_FieldTerminalPathValue) SetTo(target **ListRolesResponse) {
	if *target == nil {
		*target = new(ListRolesResponse)
	}
	switch fpv.selector {
	case ListRolesResponse_FieldPathSelectorRoles:
		(*target).Roles = fpv.value.([]*role.Role)
	case ListRolesResponse_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*role.PagerCursor)
	case ListRolesResponse_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*role.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for ListRolesResponse: %d", fpv.selector))
	}
}

func (fpv *ListRolesResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListRolesResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListRolesResponse_FieldTerminalPathValue' with the value under path in 'ListRolesResponse'.
func (fpv *ListRolesResponse_FieldTerminalPathValue) CompareWith(source *ListRolesResponse) (int, bool) {
	switch fpv.selector {
	case ListRolesResponse_FieldPathSelectorRoles:
		return 0, false
	case ListRolesResponse_FieldPathSelectorPrevPageToken:
		return 0, false
	case ListRolesResponse_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ListRolesResponse: %d", fpv.selector))
	}
}

func (fpv *ListRolesResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListRolesResponse))
}

type ListRolesResponse_FieldSubPathValue struct {
	ListRolesResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ListRolesResponse_FieldPathValue = (*ListRolesResponse_FieldSubPathValue)(nil)

func (fpvs *ListRolesResponse_FieldSubPathValue) AsRolesPathValue() (role.Role_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(role.Role_FieldPathValue)
	return res, ok
}

func (fpvs *ListRolesResponse_FieldSubPathValue) SetTo(target **ListRolesResponse) {
	if *target == nil {
		*target = new(ListRolesResponse)
	}
	switch fpvs.Selector() {
	case ListRolesResponse_FieldPathSelectorRoles:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for ListRolesResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListRolesResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListRolesResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ListRolesResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ListRolesResponse_FieldSubPathValue) CompareWith(source *ListRolesResponse) (int, bool) {
	switch fpvs.Selector() {
	case ListRolesResponse_FieldPathSelectorRoles:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for ListRolesResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListRolesResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ListRolesResponse))
}

// ListRolesResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for ListRolesResponse according to their type
// Present only for array (repeated) types.
type ListRolesResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListRolesResponse_FieldPath
	ContainsValue(*ListRolesResponse) bool
}

// ParseListRolesResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListRolesResponse_FieldPathArrayItemValue(pathStr, valueStr string) (ListRolesResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseListRolesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListRolesResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListRolesResponse_FieldPathArrayItemValue), nil
}

func MustParseListRolesResponse_FieldPathArrayItemValue(pathStr, valueStr string) ListRolesResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseListRolesResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListRolesResponse_FieldTerminalPathArrayItemValue struct {
	ListRolesResponse_FieldTerminalPath
	value interface{}
}

var _ ListRolesResponse_FieldPathArrayItemValue = (*ListRolesResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListRolesResponse as interface{}
func (fpaiv *ListRolesResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *ListRolesResponse_FieldTerminalPathArrayItemValue) AsRolesItemValue() (*role.Role, bool) {
	res, ok := fpaiv.value.(*role.Role)
	return res, ok
}

func (fpaiv *ListRolesResponse_FieldTerminalPathArrayItemValue) GetSingle(source *ListRolesResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListRolesResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListRolesResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListRolesResponse'
func (fpaiv *ListRolesResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *ListRolesResponse) bool {
	slice := fpaiv.ListRolesResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ListRolesResponse_FieldSubPathArrayItemValue struct {
	ListRolesResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ListRolesResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ListRolesResponse_FieldSubPathArrayItemValue) AsRolesPathItemValue() (role.Role_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(role.Role_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListRolesResponse'
func (fpaivs *ListRolesResponse_FieldSubPathArrayItemValue) ContainsValue(source *ListRolesResponse) bool {
	switch fpaivs.Selector() {
	case ListRolesResponse_FieldPathSelectorRoles:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for ListRolesResponse: %d", fpaivs.Selector()))
	}
}

// ListRolesResponse_FieldPathArrayOfValues allows storing slice of values for ListRolesResponse fields according to their type
type ListRolesResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListRolesResponse_FieldPath
}

func ParseListRolesResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (ListRolesResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseListRolesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListRolesResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListRolesResponse_FieldPathArrayOfValues), nil
}

func MustParseListRolesResponse_FieldPathArrayOfValues(pathStr, valuesStr string) ListRolesResponse_FieldPathArrayOfValues {
	fpaov, err := ParseListRolesResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListRolesResponse_FieldTerminalPathArrayOfValues struct {
	ListRolesResponse_FieldTerminalPath
	values interface{}
}

var _ ListRolesResponse_FieldPathArrayOfValues = (*ListRolesResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListRolesResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListRolesResponse_FieldPathSelectorRoles:
		for _, v := range fpaov.values.([][]*role.Role) {
			values = append(values, v)
		}
	case ListRolesResponse_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*role.PagerCursor) {
			values = append(values, v)
		}
	case ListRolesResponse_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*role.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListRolesResponse_FieldTerminalPathArrayOfValues) AsRolesArrayOfValues() ([][]*role.Role, bool) {
	res, ok := fpaov.values.([][]*role.Role)
	return res, ok
}
func (fpaov *ListRolesResponse_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*role.PagerCursor, bool) {
	res, ok := fpaov.values.([]*role.PagerCursor)
	return res, ok
}
func (fpaov *ListRolesResponse_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*role.PagerCursor, bool) {
	res, ok := fpaov.values.([]*role.PagerCursor)
	return res, ok
}

type ListRolesResponse_FieldSubPathArrayOfValues struct {
	ListRolesResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ListRolesResponse_FieldPathArrayOfValues = (*ListRolesResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ListRolesResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ListRolesResponse_FieldSubPathArrayOfValues) AsRolesPathArrayOfValues() (role.Role_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(role.Role_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchRoleRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchRoleRequest_FieldPathSelector
	Get(source *WatchRoleRequest) []interface{}
	GetSingle(source *WatchRoleRequest) (interface{}, bool)
	ClearValue(item *WatchRoleRequest)

	// Those methods build corresponding WatchRoleRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchRoleRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchRoleRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchRoleRequest_FieldPathArrayItemValue
}

type WatchRoleRequest_FieldPathSelector int32

const (
	WatchRoleRequest_FieldPathSelectorName      WatchRoleRequest_FieldPathSelector = 0
	WatchRoleRequest_FieldPathSelectorFieldMask WatchRoleRequest_FieldPathSelector = 1
	WatchRoleRequest_FieldPathSelectorView      WatchRoleRequest_FieldPathSelector = 2
)

func (s WatchRoleRequest_FieldPathSelector) String() string {
	switch s {
	case WatchRoleRequest_FieldPathSelectorName:
		return "name"
	case WatchRoleRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchRoleRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRoleRequest: %d", s))
	}
}

func BuildWatchRoleRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchRoleRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchRoleRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &WatchRoleRequest_FieldTerminalPath{selector: WatchRoleRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchRoleRequest_FieldTerminalPath{selector: WatchRoleRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchRoleRequest_FieldTerminalPath{selector: WatchRoleRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchRoleRequest", fp)
}

func ParseWatchRoleRequest_FieldPath(rawField string) (WatchRoleRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchRoleRequest_FieldPath(fp)
}

func MustParseWatchRoleRequest_FieldPath(rawField string) WatchRoleRequest_FieldPath {
	fp, err := ParseWatchRoleRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchRoleRequest_FieldTerminalPath struct {
	selector WatchRoleRequest_FieldPathSelector
}

var _ WatchRoleRequest_FieldPath = (*WatchRoleRequest_FieldTerminalPath)(nil)

func (fp *WatchRoleRequest_FieldTerminalPath) Selector() WatchRoleRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchRoleRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchRoleRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchRoleRequest
func (fp *WatchRoleRequest_FieldTerminalPath) Get(source *WatchRoleRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchRoleRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case WatchRoleRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchRoleRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchRoleRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchRoleRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchRoleRequest))
}

// GetSingle returns value pointed by specific field of from source WatchRoleRequest
func (fp *WatchRoleRequest_FieldTerminalPath) GetSingle(source *WatchRoleRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchRoleRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case WatchRoleRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchRoleRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRoleRequest: %d", fp.selector))
	}
}

func (fp *WatchRoleRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchRoleRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchRoleRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchRoleRequest_FieldPathSelectorName:
		return (*role.Reference)(nil)
	case WatchRoleRequest_FieldPathSelectorFieldMask:
		return (*role.Role_FieldMask)(nil)
	case WatchRoleRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRoleRequest: %d", fp.selector))
	}
}

func (fp *WatchRoleRequest_FieldTerminalPath) ClearValue(item *WatchRoleRequest) {
	if item != nil {
		switch fp.selector {
		case WatchRoleRequest_FieldPathSelectorName:
			item.Name = nil
		case WatchRoleRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchRoleRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for WatchRoleRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchRoleRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchRoleRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchRoleRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchRoleRequest_FieldPathSelectorName ||
		fp.selector == WatchRoleRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchRoleRequest_FieldPathSelectorView
}

func (fp *WatchRoleRequest_FieldTerminalPath) WithIValue(value interface{}) WatchRoleRequest_FieldPathValue {
	switch fp.selector {
	case WatchRoleRequest_FieldPathSelectorName:
		return &WatchRoleRequest_FieldTerminalPathValue{WatchRoleRequest_FieldTerminalPath: *fp, value: value.(*role.Reference)}
	case WatchRoleRequest_FieldPathSelectorFieldMask:
		return &WatchRoleRequest_FieldTerminalPathValue{WatchRoleRequest_FieldTerminalPath: *fp, value: value.(*role.Role_FieldMask)}
	case WatchRoleRequest_FieldPathSelectorView:
		return &WatchRoleRequest_FieldTerminalPathValue{WatchRoleRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRoleRequest: %d", fp.selector))
	}
}

func (fp *WatchRoleRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchRoleRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchRoleRequest_FieldPathArrayOfValues {
	fpaov := &WatchRoleRequest_FieldTerminalPathArrayOfValues{WatchRoleRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchRoleRequest_FieldPathSelectorName:
		return &WatchRoleRequest_FieldTerminalPathArrayOfValues{WatchRoleRequest_FieldTerminalPath: *fp, values: values.([]*role.Reference)}
	case WatchRoleRequest_FieldPathSelectorFieldMask:
		return &WatchRoleRequest_FieldTerminalPathArrayOfValues{WatchRoleRequest_FieldTerminalPath: *fp, values: values.([]*role.Role_FieldMask)}
	case WatchRoleRequest_FieldPathSelectorView:
		return &WatchRoleRequest_FieldTerminalPathArrayOfValues{WatchRoleRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRoleRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchRoleRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchRoleRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchRoleRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRoleRequest: %d", fp.selector))
	}
}

func (fp *WatchRoleRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchRoleRequest_FieldPathValue allows storing values for WatchRoleRequest fields according to their type
type WatchRoleRequest_FieldPathValue interface {
	WatchRoleRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchRoleRequest)
	CompareWith(*WatchRoleRequest) (cmp int, comparable bool)
}

func ParseWatchRoleRequest_FieldPathValue(pathStr, valueStr string) (WatchRoleRequest_FieldPathValue, error) {
	fp, err := ParseWatchRoleRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchRoleRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchRoleRequest_FieldPathValue), nil
}

func MustParseWatchRoleRequest_FieldPathValue(pathStr, valueStr string) WatchRoleRequest_FieldPathValue {
	fpv, err := ParseWatchRoleRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchRoleRequest_FieldTerminalPathValue struct {
	WatchRoleRequest_FieldTerminalPath
	value interface{}
}

var _ WatchRoleRequest_FieldPathValue = (*WatchRoleRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchRoleRequest' as interface{}
func (fpv *WatchRoleRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchRoleRequest_FieldTerminalPathValue) AsNameValue() (*role.Reference, bool) {
	res, ok := fpv.value.(*role.Reference)
	return res, ok
}
func (fpv *WatchRoleRequest_FieldTerminalPathValue) AsFieldMaskValue() (*role.Role_FieldMask, bool) {
	res, ok := fpv.value.(*role.Role_FieldMask)
	return res, ok
}
func (fpv *WatchRoleRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object WatchRoleRequest
func (fpv *WatchRoleRequest_FieldTerminalPathValue) SetTo(target **WatchRoleRequest) {
	if *target == nil {
		*target = new(WatchRoleRequest)
	}
	switch fpv.selector {
	case WatchRoleRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*role.Reference)
	case WatchRoleRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*role.Role_FieldMask)
	case WatchRoleRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRoleRequest: %d", fpv.selector))
	}
}

func (fpv *WatchRoleRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchRoleRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchRoleRequest_FieldTerminalPathValue' with the value under path in 'WatchRoleRequest'.
func (fpv *WatchRoleRequest_FieldTerminalPathValue) CompareWith(source *WatchRoleRequest) (int, bool) {
	switch fpv.selector {
	case WatchRoleRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*role.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchRoleRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchRoleRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRoleRequest: %d", fpv.selector))
	}
}

func (fpv *WatchRoleRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchRoleRequest))
}

// WatchRoleRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchRoleRequest according to their type
// Present only for array (repeated) types.
type WatchRoleRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchRoleRequest_FieldPath
	ContainsValue(*WatchRoleRequest) bool
}

// ParseWatchRoleRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchRoleRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchRoleRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchRoleRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchRoleRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchRoleRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchRoleRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchRoleRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchRoleRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchRoleRequest_FieldTerminalPathArrayItemValue struct {
	WatchRoleRequest_FieldTerminalPath
	value interface{}
}

var _ WatchRoleRequest_FieldPathArrayItemValue = (*WatchRoleRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchRoleRequest as interface{}
func (fpaiv *WatchRoleRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchRoleRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchRoleRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchRoleRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchRoleRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchRoleRequest'
func (fpaiv *WatchRoleRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchRoleRequest) bool {
	slice := fpaiv.WatchRoleRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchRoleRequest_FieldPathArrayOfValues allows storing slice of values for WatchRoleRequest fields according to their type
type WatchRoleRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchRoleRequest_FieldPath
}

func ParseWatchRoleRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchRoleRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchRoleRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchRoleRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchRoleRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchRoleRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchRoleRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchRoleRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchRoleRequest_FieldTerminalPathArrayOfValues struct {
	WatchRoleRequest_FieldTerminalPath
	values interface{}
}

var _ WatchRoleRequest_FieldPathArrayOfValues = (*WatchRoleRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchRoleRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchRoleRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*role.Reference) {
			values = append(values, v)
		}
	case WatchRoleRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*role.Role_FieldMask) {
			values = append(values, v)
		}
	case WatchRoleRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchRoleRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*role.Reference, bool) {
	res, ok := fpaov.values.([]*role.Reference)
	return res, ok
}
func (fpaov *WatchRoleRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*role.Role_FieldMask, bool) {
	res, ok := fpaov.values.([]*role.Role_FieldMask)
	return res, ok
}
func (fpaov *WatchRoleRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchRoleResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchRoleResponse_FieldPathSelector
	Get(source *WatchRoleResponse) []interface{}
	GetSingle(source *WatchRoleResponse) (interface{}, bool)
	ClearValue(item *WatchRoleResponse)

	// Those methods build corresponding WatchRoleResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchRoleResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchRoleResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchRoleResponse_FieldPathArrayItemValue
}

type WatchRoleResponse_FieldPathSelector int32

const (
	WatchRoleResponse_FieldPathSelectorChange WatchRoleResponse_FieldPathSelector = 0
)

func (s WatchRoleResponse_FieldPathSelector) String() string {
	switch s {
	case WatchRoleResponse_FieldPathSelectorChange:
		return "change"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRoleResponse: %d", s))
	}
}

func BuildWatchRoleResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchRoleResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchRoleResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "change":
			return &WatchRoleResponse_FieldTerminalPath{selector: WatchRoleResponse_FieldPathSelectorChange}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchRoleResponse", fp)
}

func ParseWatchRoleResponse_FieldPath(rawField string) (WatchRoleResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchRoleResponse_FieldPath(fp)
}

func MustParseWatchRoleResponse_FieldPath(rawField string) WatchRoleResponse_FieldPath {
	fp, err := ParseWatchRoleResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchRoleResponse_FieldTerminalPath struct {
	selector WatchRoleResponse_FieldPathSelector
}

var _ WatchRoleResponse_FieldPath = (*WatchRoleResponse_FieldTerminalPath)(nil)

func (fp *WatchRoleResponse_FieldTerminalPath) Selector() WatchRoleResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchRoleResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchRoleResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchRoleResponse
func (fp *WatchRoleResponse_FieldTerminalPath) Get(source *WatchRoleResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchRoleResponse_FieldPathSelectorChange:
			if source.Change != nil {
				values = append(values, source.Change)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchRoleResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchRoleResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchRoleResponse))
}

// GetSingle returns value pointed by specific field of from source WatchRoleResponse
func (fp *WatchRoleResponse_FieldTerminalPath) GetSingle(source *WatchRoleResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchRoleResponse_FieldPathSelectorChange:
		res := source.GetChange()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRoleResponse: %d", fp.selector))
	}
}

func (fp *WatchRoleResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchRoleResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchRoleResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchRoleResponse_FieldPathSelectorChange:
		return (*role.RoleChange)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRoleResponse: %d", fp.selector))
	}
}

func (fp *WatchRoleResponse_FieldTerminalPath) ClearValue(item *WatchRoleResponse) {
	if item != nil {
		switch fp.selector {
		case WatchRoleResponse_FieldPathSelectorChange:
			item.Change = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchRoleResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchRoleResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchRoleResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchRoleResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchRoleResponse_FieldPathSelectorChange
}

func (fp *WatchRoleResponse_FieldTerminalPath) WithIValue(value interface{}) WatchRoleResponse_FieldPathValue {
	switch fp.selector {
	case WatchRoleResponse_FieldPathSelectorChange:
		return &WatchRoleResponse_FieldTerminalPathValue{WatchRoleResponse_FieldTerminalPath: *fp, value: value.(*role.RoleChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRoleResponse: %d", fp.selector))
	}
}

func (fp *WatchRoleResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchRoleResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchRoleResponse_FieldPathArrayOfValues {
	fpaov := &WatchRoleResponse_FieldTerminalPathArrayOfValues{WatchRoleResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchRoleResponse_FieldPathSelectorChange:
		return &WatchRoleResponse_FieldTerminalPathArrayOfValues{WatchRoleResponse_FieldTerminalPath: *fp, values: values.([]*role.RoleChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRoleResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchRoleResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchRoleResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchRoleResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRoleResponse: %d", fp.selector))
	}
}

func (fp *WatchRoleResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchRoleResponse_FieldPathValue allows storing values for WatchRoleResponse fields according to their type
type WatchRoleResponse_FieldPathValue interface {
	WatchRoleResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchRoleResponse)
	CompareWith(*WatchRoleResponse) (cmp int, comparable bool)
}

func ParseWatchRoleResponse_FieldPathValue(pathStr, valueStr string) (WatchRoleResponse_FieldPathValue, error) {
	fp, err := ParseWatchRoleResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchRoleResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchRoleResponse_FieldPathValue), nil
}

func MustParseWatchRoleResponse_FieldPathValue(pathStr, valueStr string) WatchRoleResponse_FieldPathValue {
	fpv, err := ParseWatchRoleResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchRoleResponse_FieldTerminalPathValue struct {
	WatchRoleResponse_FieldTerminalPath
	value interface{}
}

var _ WatchRoleResponse_FieldPathValue = (*WatchRoleResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchRoleResponse' as interface{}
func (fpv *WatchRoleResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchRoleResponse_FieldTerminalPathValue) AsChangeValue() (*role.RoleChange, bool) {
	res, ok := fpv.value.(*role.RoleChange)
	return res, ok
}

// SetTo stores value for selected field for object WatchRoleResponse
func (fpv *WatchRoleResponse_FieldTerminalPathValue) SetTo(target **WatchRoleResponse) {
	if *target == nil {
		*target = new(WatchRoleResponse)
	}
	switch fpv.selector {
	case WatchRoleResponse_FieldPathSelectorChange:
		(*target).Change = fpv.value.(*role.RoleChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRoleResponse: %d", fpv.selector))
	}
}

func (fpv *WatchRoleResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchRoleResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchRoleResponse_FieldTerminalPathValue' with the value under path in 'WatchRoleResponse'.
func (fpv *WatchRoleResponse_FieldTerminalPathValue) CompareWith(source *WatchRoleResponse) (int, bool) {
	switch fpv.selector {
	case WatchRoleResponse_FieldPathSelectorChange:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRoleResponse: %d", fpv.selector))
	}
}

func (fpv *WatchRoleResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchRoleResponse))
}

// WatchRoleResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchRoleResponse according to their type
// Present only for array (repeated) types.
type WatchRoleResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchRoleResponse_FieldPath
	ContainsValue(*WatchRoleResponse) bool
}

// ParseWatchRoleResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchRoleResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchRoleResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchRoleResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchRoleResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchRoleResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchRoleResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchRoleResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchRoleResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchRoleResponse_FieldTerminalPathArrayItemValue struct {
	WatchRoleResponse_FieldTerminalPath
	value interface{}
}

var _ WatchRoleResponse_FieldPathArrayItemValue = (*WatchRoleResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchRoleResponse as interface{}
func (fpaiv *WatchRoleResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchRoleResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchRoleResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchRoleResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchRoleResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchRoleResponse'
func (fpaiv *WatchRoleResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchRoleResponse) bool {
	slice := fpaiv.WatchRoleResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchRoleResponse_FieldPathArrayOfValues allows storing slice of values for WatchRoleResponse fields according to their type
type WatchRoleResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchRoleResponse_FieldPath
}

func ParseWatchRoleResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchRoleResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchRoleResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchRoleResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchRoleResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchRoleResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchRoleResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchRoleResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchRoleResponse_FieldTerminalPathArrayOfValues struct {
	WatchRoleResponse_FieldTerminalPath
	values interface{}
}

var _ WatchRoleResponse_FieldPathArrayOfValues = (*WatchRoleResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchRoleResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchRoleResponse_FieldPathSelectorChange:
		for _, v := range fpaov.values.([]*role.RoleChange) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchRoleResponse_FieldTerminalPathArrayOfValues) AsChangeArrayOfValues() ([]*role.RoleChange, bool) {
	res, ok := fpaov.values.([]*role.RoleChange)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchRolesRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchRolesRequest_FieldPathSelector
	Get(source *WatchRolesRequest) []interface{}
	GetSingle(source *WatchRolesRequest) (interface{}, bool)
	ClearValue(item *WatchRolesRequest)

	// Those methods build corresponding WatchRolesRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchRolesRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchRolesRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchRolesRequest_FieldPathArrayItemValue
}

type WatchRolesRequest_FieldPathSelector int32

const (
	WatchRolesRequest_FieldPathSelectorType         WatchRolesRequest_FieldPathSelector = 0
	WatchRolesRequest_FieldPathSelectorPageSize     WatchRolesRequest_FieldPathSelector = 1
	WatchRolesRequest_FieldPathSelectorPageToken    WatchRolesRequest_FieldPathSelector = 2
	WatchRolesRequest_FieldPathSelectorOrderBy      WatchRolesRequest_FieldPathSelector = 3
	WatchRolesRequest_FieldPathSelectorResumeToken  WatchRolesRequest_FieldPathSelector = 4
	WatchRolesRequest_FieldPathSelectorFilter       WatchRolesRequest_FieldPathSelector = 5
	WatchRolesRequest_FieldPathSelectorFieldMask    WatchRolesRequest_FieldPathSelector = 6
	WatchRolesRequest_FieldPathSelectorView         WatchRolesRequest_FieldPathSelector = 7
	WatchRolesRequest_FieldPathSelectorMaxChunkSize WatchRolesRequest_FieldPathSelector = 8
)

func (s WatchRolesRequest_FieldPathSelector) String() string {
	switch s {
	case WatchRolesRequest_FieldPathSelectorType:
		return "type"
	case WatchRolesRequest_FieldPathSelectorPageSize:
		return "page_size"
	case WatchRolesRequest_FieldPathSelectorPageToken:
		return "page_token"
	case WatchRolesRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case WatchRolesRequest_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchRolesRequest_FieldPathSelectorFilter:
		return "filter"
	case WatchRolesRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchRolesRequest_FieldPathSelectorView:
		return "view"
	case WatchRolesRequest_FieldPathSelectorMaxChunkSize:
		return "max_chunk_size"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRolesRequest: %d", s))
	}
}

func BuildWatchRolesRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchRolesRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchRolesRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "type":
			return &WatchRolesRequest_FieldTerminalPath{selector: WatchRolesRequest_FieldPathSelectorType}, nil
		case "page_size", "pageSize", "page-size":
			return &WatchRolesRequest_FieldTerminalPath{selector: WatchRolesRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &WatchRolesRequest_FieldTerminalPath{selector: WatchRolesRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &WatchRolesRequest_FieldTerminalPath{selector: WatchRolesRequest_FieldPathSelectorOrderBy}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchRolesRequest_FieldTerminalPath{selector: WatchRolesRequest_FieldPathSelectorResumeToken}, nil
		case "filter":
			return &WatchRolesRequest_FieldTerminalPath{selector: WatchRolesRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchRolesRequest_FieldTerminalPath{selector: WatchRolesRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchRolesRequest_FieldTerminalPath{selector: WatchRolesRequest_FieldPathSelectorView}, nil
		case "max_chunk_size", "maxChunkSize", "max-chunk-size":
			return &WatchRolesRequest_FieldTerminalPath{selector: WatchRolesRequest_FieldPathSelectorMaxChunkSize}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchRolesRequest", fp)
}

func ParseWatchRolesRequest_FieldPath(rawField string) (WatchRolesRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchRolesRequest_FieldPath(fp)
}

func MustParseWatchRolesRequest_FieldPath(rawField string) WatchRolesRequest_FieldPath {
	fp, err := ParseWatchRolesRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchRolesRequest_FieldTerminalPath struct {
	selector WatchRolesRequest_FieldPathSelector
}

var _ WatchRolesRequest_FieldPath = (*WatchRolesRequest_FieldTerminalPath)(nil)

func (fp *WatchRolesRequest_FieldTerminalPath) Selector() WatchRolesRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchRolesRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchRolesRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchRolesRequest
func (fp *WatchRolesRequest_FieldTerminalPath) Get(source *WatchRolesRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchRolesRequest_FieldPathSelectorType:
			values = append(values, source.Type)
		case WatchRolesRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case WatchRolesRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case WatchRolesRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case WatchRolesRequest_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchRolesRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case WatchRolesRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchRolesRequest_FieldPathSelectorView:
			values = append(values, source.View)
		case WatchRolesRequest_FieldPathSelectorMaxChunkSize:
			values = append(values, source.MaxChunkSize)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchRolesRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchRolesRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchRolesRequest))
}

// GetSingle returns value pointed by specific field of from source WatchRolesRequest
func (fp *WatchRolesRequest_FieldTerminalPath) GetSingle(source *WatchRolesRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchRolesRequest_FieldPathSelectorType:
		return source.GetType(), source != nil
	case WatchRolesRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case WatchRolesRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case WatchRolesRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case WatchRolesRequest_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchRolesRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case WatchRolesRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchRolesRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	case WatchRolesRequest_FieldPathSelectorMaxChunkSize:
		return source.GetMaxChunkSize(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRolesRequest: %d", fp.selector))
	}
}

func (fp *WatchRolesRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchRolesRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchRolesRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchRolesRequest_FieldPathSelectorType:
		return watch_type.WatchType_STATEFUL
	case WatchRolesRequest_FieldPathSelectorPageSize:
		return int32(0)
	case WatchRolesRequest_FieldPathSelectorPageToken:
		return (*role.PagerCursor)(nil)
	case WatchRolesRequest_FieldPathSelectorOrderBy:
		return (*role.OrderBy)(nil)
	case WatchRolesRequest_FieldPathSelectorResumeToken:
		return ""
	case WatchRolesRequest_FieldPathSelectorFilter:
		return (*role.Filter)(nil)
	case WatchRolesRequest_FieldPathSelectorFieldMask:
		return (*role.Role_FieldMask)(nil)
	case WatchRolesRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	case WatchRolesRequest_FieldPathSelectorMaxChunkSize:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRolesRequest: %d", fp.selector))
	}
}

func (fp *WatchRolesRequest_FieldTerminalPath) ClearValue(item *WatchRolesRequest) {
	if item != nil {
		switch fp.selector {
		case WatchRolesRequest_FieldPathSelectorType:
			item.Type = watch_type.WatchType_STATEFUL
		case WatchRolesRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case WatchRolesRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case WatchRolesRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case WatchRolesRequest_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchRolesRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case WatchRolesRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchRolesRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		case WatchRolesRequest_FieldPathSelectorMaxChunkSize:
			item.MaxChunkSize = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchRolesRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchRolesRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchRolesRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchRolesRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchRolesRequest_FieldPathSelectorType ||
		fp.selector == WatchRolesRequest_FieldPathSelectorPageSize ||
		fp.selector == WatchRolesRequest_FieldPathSelectorPageToken ||
		fp.selector == WatchRolesRequest_FieldPathSelectorOrderBy ||
		fp.selector == WatchRolesRequest_FieldPathSelectorResumeToken ||
		fp.selector == WatchRolesRequest_FieldPathSelectorFilter ||
		fp.selector == WatchRolesRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchRolesRequest_FieldPathSelectorView ||
		fp.selector == WatchRolesRequest_FieldPathSelectorMaxChunkSize
}

func (fp *WatchRolesRequest_FieldTerminalPath) WithIValue(value interface{}) WatchRolesRequest_FieldPathValue {
	switch fp.selector {
	case WatchRolesRequest_FieldPathSelectorType:
		return &WatchRolesRequest_FieldTerminalPathValue{WatchRolesRequest_FieldTerminalPath: *fp, value: value.(watch_type.WatchType)}
	case WatchRolesRequest_FieldPathSelectorPageSize:
		return &WatchRolesRequest_FieldTerminalPathValue{WatchRolesRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case WatchRolesRequest_FieldPathSelectorPageToken:
		return &WatchRolesRequest_FieldTerminalPathValue{WatchRolesRequest_FieldTerminalPath: *fp, value: value.(*role.PagerCursor)}
	case WatchRolesRequest_FieldPathSelectorOrderBy:
		return &WatchRolesRequest_FieldTerminalPathValue{WatchRolesRequest_FieldTerminalPath: *fp, value: value.(*role.OrderBy)}
	case WatchRolesRequest_FieldPathSelectorResumeToken:
		return &WatchRolesRequest_FieldTerminalPathValue{WatchRolesRequest_FieldTerminalPath: *fp, value: value.(string)}
	case WatchRolesRequest_FieldPathSelectorFilter:
		return &WatchRolesRequest_FieldTerminalPathValue{WatchRolesRequest_FieldTerminalPath: *fp, value: value.(*role.Filter)}
	case WatchRolesRequest_FieldPathSelectorFieldMask:
		return &WatchRolesRequest_FieldTerminalPathValue{WatchRolesRequest_FieldTerminalPath: *fp, value: value.(*role.Role_FieldMask)}
	case WatchRolesRequest_FieldPathSelectorView:
		return &WatchRolesRequest_FieldTerminalPathValue{WatchRolesRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	case WatchRolesRequest_FieldPathSelectorMaxChunkSize:
		return &WatchRolesRequest_FieldTerminalPathValue{WatchRolesRequest_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRolesRequest: %d", fp.selector))
	}
}

func (fp *WatchRolesRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchRolesRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchRolesRequest_FieldPathArrayOfValues {
	fpaov := &WatchRolesRequest_FieldTerminalPathArrayOfValues{WatchRolesRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchRolesRequest_FieldPathSelectorType:
		return &WatchRolesRequest_FieldTerminalPathArrayOfValues{WatchRolesRequest_FieldTerminalPath: *fp, values: values.([]watch_type.WatchType)}
	case WatchRolesRequest_FieldPathSelectorPageSize:
		return &WatchRolesRequest_FieldTerminalPathArrayOfValues{WatchRolesRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case WatchRolesRequest_FieldPathSelectorPageToken:
		return &WatchRolesRequest_FieldTerminalPathArrayOfValues{WatchRolesRequest_FieldTerminalPath: *fp, values: values.([]*role.PagerCursor)}
	case WatchRolesRequest_FieldPathSelectorOrderBy:
		return &WatchRolesRequest_FieldTerminalPathArrayOfValues{WatchRolesRequest_FieldTerminalPath: *fp, values: values.([]*role.OrderBy)}
	case WatchRolesRequest_FieldPathSelectorResumeToken:
		return &WatchRolesRequest_FieldTerminalPathArrayOfValues{WatchRolesRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchRolesRequest_FieldPathSelectorFilter:
		return &WatchRolesRequest_FieldTerminalPathArrayOfValues{WatchRolesRequest_FieldTerminalPath: *fp, values: values.([]*role.Filter)}
	case WatchRolesRequest_FieldPathSelectorFieldMask:
		return &WatchRolesRequest_FieldTerminalPathArrayOfValues{WatchRolesRequest_FieldTerminalPath: *fp, values: values.([]*role.Role_FieldMask)}
	case WatchRolesRequest_FieldPathSelectorView:
		return &WatchRolesRequest_FieldTerminalPathArrayOfValues{WatchRolesRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	case WatchRolesRequest_FieldPathSelectorMaxChunkSize:
		return &WatchRolesRequest_FieldTerminalPathArrayOfValues{WatchRolesRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRolesRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchRolesRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchRolesRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchRolesRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRolesRequest: %d", fp.selector))
	}
}

func (fp *WatchRolesRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchRolesRequest_FieldPathValue allows storing values for WatchRolesRequest fields according to their type
type WatchRolesRequest_FieldPathValue interface {
	WatchRolesRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchRolesRequest)
	CompareWith(*WatchRolesRequest) (cmp int, comparable bool)
}

func ParseWatchRolesRequest_FieldPathValue(pathStr, valueStr string) (WatchRolesRequest_FieldPathValue, error) {
	fp, err := ParseWatchRolesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchRolesRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchRolesRequest_FieldPathValue), nil
}

func MustParseWatchRolesRequest_FieldPathValue(pathStr, valueStr string) WatchRolesRequest_FieldPathValue {
	fpv, err := ParseWatchRolesRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchRolesRequest_FieldTerminalPathValue struct {
	WatchRolesRequest_FieldTerminalPath
	value interface{}
}

var _ WatchRolesRequest_FieldPathValue = (*WatchRolesRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchRolesRequest' as interface{}
func (fpv *WatchRolesRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchRolesRequest_FieldTerminalPathValue) AsTypeValue() (watch_type.WatchType, bool) {
	res, ok := fpv.value.(watch_type.WatchType)
	return res, ok
}
func (fpv *WatchRolesRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *WatchRolesRequest_FieldTerminalPathValue) AsPageTokenValue() (*role.PagerCursor, bool) {
	res, ok := fpv.value.(*role.PagerCursor)
	return res, ok
}
func (fpv *WatchRolesRequest_FieldTerminalPathValue) AsOrderByValue() (*role.OrderBy, bool) {
	res, ok := fpv.value.(*role.OrderBy)
	return res, ok
}
func (fpv *WatchRolesRequest_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchRolesRequest_FieldTerminalPathValue) AsFilterValue() (*role.Filter, bool) {
	res, ok := fpv.value.(*role.Filter)
	return res, ok
}
func (fpv *WatchRolesRequest_FieldTerminalPathValue) AsFieldMaskValue() (*role.Role_FieldMask, bool) {
	res, ok := fpv.value.(*role.Role_FieldMask)
	return res, ok
}
func (fpv *WatchRolesRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}
func (fpv *WatchRolesRequest_FieldTerminalPathValue) AsMaxChunkSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object WatchRolesRequest
func (fpv *WatchRolesRequest_FieldTerminalPathValue) SetTo(target **WatchRolesRequest) {
	if *target == nil {
		*target = new(WatchRolesRequest)
	}
	switch fpv.selector {
	case WatchRolesRequest_FieldPathSelectorType:
		(*target).Type = fpv.value.(watch_type.WatchType)
	case WatchRolesRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case WatchRolesRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*role.PagerCursor)
	case WatchRolesRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*role.OrderBy)
	case WatchRolesRequest_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchRolesRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*role.Filter)
	case WatchRolesRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*role.Role_FieldMask)
	case WatchRolesRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	case WatchRolesRequest_FieldPathSelectorMaxChunkSize:
		(*target).MaxChunkSize = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRolesRequest: %d", fpv.selector))
	}
}

func (fpv *WatchRolesRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchRolesRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchRolesRequest_FieldTerminalPathValue' with the value under path in 'WatchRolesRequest'.
func (fpv *WatchRolesRequest_FieldTerminalPathValue) CompareWith(source *WatchRolesRequest) (int, bool) {
	switch fpv.selector {
	case WatchRolesRequest_FieldPathSelectorType:
		leftValue := fpv.value.(watch_type.WatchType)
		rightValue := source.GetType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchRolesRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchRolesRequest_FieldPathSelectorPageToken:
		return 0, false
	case WatchRolesRequest_FieldPathSelectorOrderBy:
		return 0, false
	case WatchRolesRequest_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchRolesRequest_FieldPathSelectorFilter:
		return 0, false
	case WatchRolesRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchRolesRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchRolesRequest_FieldPathSelectorMaxChunkSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetMaxChunkSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRolesRequest: %d", fpv.selector))
	}
}

func (fpv *WatchRolesRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchRolesRequest))
}

// WatchRolesRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchRolesRequest according to their type
// Present only for array (repeated) types.
type WatchRolesRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchRolesRequest_FieldPath
	ContainsValue(*WatchRolesRequest) bool
}

// ParseWatchRolesRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchRolesRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchRolesRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchRolesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchRolesRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchRolesRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchRolesRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchRolesRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchRolesRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchRolesRequest_FieldTerminalPathArrayItemValue struct {
	WatchRolesRequest_FieldTerminalPath
	value interface{}
}

var _ WatchRolesRequest_FieldPathArrayItemValue = (*WatchRolesRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchRolesRequest as interface{}
func (fpaiv *WatchRolesRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchRolesRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchRolesRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchRolesRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchRolesRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchRolesRequest'
func (fpaiv *WatchRolesRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchRolesRequest) bool {
	slice := fpaiv.WatchRolesRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchRolesRequest_FieldPathArrayOfValues allows storing slice of values for WatchRolesRequest fields according to their type
type WatchRolesRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchRolesRequest_FieldPath
}

func ParseWatchRolesRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchRolesRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchRolesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchRolesRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchRolesRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchRolesRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchRolesRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchRolesRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchRolesRequest_FieldTerminalPathArrayOfValues struct {
	WatchRolesRequest_FieldTerminalPath
	values interface{}
}

var _ WatchRolesRequest_FieldPathArrayOfValues = (*WatchRolesRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchRolesRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchRolesRequest_FieldPathSelectorType:
		for _, v := range fpaov.values.([]watch_type.WatchType) {
			values = append(values, v)
		}
	case WatchRolesRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case WatchRolesRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*role.PagerCursor) {
			values = append(values, v)
		}
	case WatchRolesRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*role.OrderBy) {
			values = append(values, v)
		}
	case WatchRolesRequest_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchRolesRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*role.Filter) {
			values = append(values, v)
		}
	case WatchRolesRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*role.Role_FieldMask) {
			values = append(values, v)
		}
	case WatchRolesRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	case WatchRolesRequest_FieldPathSelectorMaxChunkSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchRolesRequest_FieldTerminalPathArrayOfValues) AsTypeArrayOfValues() ([]watch_type.WatchType, bool) {
	res, ok := fpaov.values.([]watch_type.WatchType)
	return res, ok
}
func (fpaov *WatchRolesRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *WatchRolesRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*role.PagerCursor, bool) {
	res, ok := fpaov.values.([]*role.PagerCursor)
	return res, ok
}
func (fpaov *WatchRolesRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*role.OrderBy, bool) {
	res, ok := fpaov.values.([]*role.OrderBy)
	return res, ok
}
func (fpaov *WatchRolesRequest_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchRolesRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*role.Filter, bool) {
	res, ok := fpaov.values.([]*role.Filter)
	return res, ok
}
func (fpaov *WatchRolesRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*role.Role_FieldMask, bool) {
	res, ok := fpaov.values.([]*role.Role_FieldMask)
	return res, ok
}
func (fpaov *WatchRolesRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}
func (fpaov *WatchRolesRequest_FieldTerminalPathArrayOfValues) AsMaxChunkSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchRolesResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchRolesResponse_FieldPathSelector
	Get(source *WatchRolesResponse) []interface{}
	GetSingle(source *WatchRolesResponse) (interface{}, bool)
	ClearValue(item *WatchRolesResponse)

	// Those methods build corresponding WatchRolesResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchRolesResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchRolesResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchRolesResponse_FieldPathArrayItemValue
}

type WatchRolesResponse_FieldPathSelector int32

const (
	WatchRolesResponse_FieldPathSelectorRoleChanges     WatchRolesResponse_FieldPathSelector = 0
	WatchRolesResponse_FieldPathSelectorIsCurrent       WatchRolesResponse_FieldPathSelector = 1
	WatchRolesResponse_FieldPathSelectorPageTokenChange WatchRolesResponse_FieldPathSelector = 2
	WatchRolesResponse_FieldPathSelectorResumeToken     WatchRolesResponse_FieldPathSelector = 3
	WatchRolesResponse_FieldPathSelectorSnapshotSize    WatchRolesResponse_FieldPathSelector = 4
	WatchRolesResponse_FieldPathSelectorIsSoftReset     WatchRolesResponse_FieldPathSelector = 5
	WatchRolesResponse_FieldPathSelectorIsHardReset     WatchRolesResponse_FieldPathSelector = 6
)

func (s WatchRolesResponse_FieldPathSelector) String() string {
	switch s {
	case WatchRolesResponse_FieldPathSelectorRoleChanges:
		return "role_changes"
	case WatchRolesResponse_FieldPathSelectorIsCurrent:
		return "is_current"
	case WatchRolesResponse_FieldPathSelectorPageTokenChange:
		return "page_token_change"
	case WatchRolesResponse_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchRolesResponse_FieldPathSelectorSnapshotSize:
		return "snapshot_size"
	case WatchRolesResponse_FieldPathSelectorIsSoftReset:
		return "is_soft_reset"
	case WatchRolesResponse_FieldPathSelectorIsHardReset:
		return "is_hard_reset"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRolesResponse: %d", s))
	}
}

func BuildWatchRolesResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchRolesResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchRolesResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "role_changes", "roleChanges", "role-changes":
			return &WatchRolesResponse_FieldTerminalPath{selector: WatchRolesResponse_FieldPathSelectorRoleChanges}, nil
		case "is_current", "isCurrent", "is-current":
			return &WatchRolesResponse_FieldTerminalPath{selector: WatchRolesResponse_FieldPathSelectorIsCurrent}, nil
		case "page_token_change", "pageTokenChange", "page-token-change":
			return &WatchRolesResponse_FieldTerminalPath{selector: WatchRolesResponse_FieldPathSelectorPageTokenChange}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchRolesResponse_FieldTerminalPath{selector: WatchRolesResponse_FieldPathSelectorResumeToken}, nil
		case "snapshot_size", "snapshotSize", "snapshot-size":
			return &WatchRolesResponse_FieldTerminalPath{selector: WatchRolesResponse_FieldPathSelectorSnapshotSize}, nil
		case "is_soft_reset", "isSoftReset", "is-soft-reset":
			return &WatchRolesResponse_FieldTerminalPath{selector: WatchRolesResponse_FieldPathSelectorIsSoftReset}, nil
		case "is_hard_reset", "isHardReset", "is-hard-reset":
			return &WatchRolesResponse_FieldTerminalPath{selector: WatchRolesResponse_FieldPathSelectorIsHardReset}, nil
		}
	} else {
		switch fp[0] {
		case "page_token_change", "pageTokenChange", "page-token-change":
			if subpath, err := BuildWatchRolesResponsePageTokenChange_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &WatchRolesResponse_FieldSubPath{selector: WatchRolesResponse_FieldPathSelectorPageTokenChange, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchRolesResponse", fp)
}

func ParseWatchRolesResponse_FieldPath(rawField string) (WatchRolesResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchRolesResponse_FieldPath(fp)
}

func MustParseWatchRolesResponse_FieldPath(rawField string) WatchRolesResponse_FieldPath {
	fp, err := ParseWatchRolesResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchRolesResponse_FieldTerminalPath struct {
	selector WatchRolesResponse_FieldPathSelector
}

var _ WatchRolesResponse_FieldPath = (*WatchRolesResponse_FieldTerminalPath)(nil)

func (fp *WatchRolesResponse_FieldTerminalPath) Selector() WatchRolesResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchRolesResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchRolesResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchRolesResponse
func (fp *WatchRolesResponse_FieldTerminalPath) Get(source *WatchRolesResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchRolesResponse_FieldPathSelectorRoleChanges:
			for _, value := range source.GetRoleChanges() {
				values = append(values, value)
			}
		case WatchRolesResponse_FieldPathSelectorIsCurrent:
			values = append(values, source.IsCurrent)
		case WatchRolesResponse_FieldPathSelectorPageTokenChange:
			if source.PageTokenChange != nil {
				values = append(values, source.PageTokenChange)
			}
		case WatchRolesResponse_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchRolesResponse_FieldPathSelectorSnapshotSize:
			values = append(values, source.SnapshotSize)
		case WatchRolesResponse_FieldPathSelectorIsSoftReset:
			values = append(values, source.IsSoftReset)
		case WatchRolesResponse_FieldPathSelectorIsHardReset:
			values = append(values, source.IsHardReset)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchRolesResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchRolesResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchRolesResponse))
}

// GetSingle returns value pointed by specific field of from source WatchRolesResponse
func (fp *WatchRolesResponse_FieldTerminalPath) GetSingle(source *WatchRolesResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchRolesResponse_FieldPathSelectorRoleChanges:
		res := source.GetRoleChanges()
		return res, res != nil
	case WatchRolesResponse_FieldPathSelectorIsCurrent:
		return source.GetIsCurrent(), source != nil
	case WatchRolesResponse_FieldPathSelectorPageTokenChange:
		res := source.GetPageTokenChange()
		return res, res != nil
	case WatchRolesResponse_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchRolesResponse_FieldPathSelectorSnapshotSize:
		return source.GetSnapshotSize(), source != nil
	case WatchRolesResponse_FieldPathSelectorIsSoftReset:
		return source.GetIsSoftReset(), source != nil
	case WatchRolesResponse_FieldPathSelectorIsHardReset:
		return source.GetIsHardReset(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRolesResponse: %d", fp.selector))
	}
}

func (fp *WatchRolesResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchRolesResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchRolesResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchRolesResponse_FieldPathSelectorRoleChanges:
		return ([]*role.RoleChange)(nil)
	case WatchRolesResponse_FieldPathSelectorIsCurrent:
		return false
	case WatchRolesResponse_FieldPathSelectorPageTokenChange:
		return (*WatchRolesResponse_PageTokenChange)(nil)
	case WatchRolesResponse_FieldPathSelectorResumeToken:
		return ""
	case WatchRolesResponse_FieldPathSelectorSnapshotSize:
		return int64(0)
	case WatchRolesResponse_FieldPathSelectorIsSoftReset:
		return false
	case WatchRolesResponse_FieldPathSelectorIsHardReset:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRolesResponse: %d", fp.selector))
	}
}

func (fp *WatchRolesResponse_FieldTerminalPath) ClearValue(item *WatchRolesResponse) {
	if item != nil {
		switch fp.selector {
		case WatchRolesResponse_FieldPathSelectorRoleChanges:
			item.RoleChanges = nil
		case WatchRolesResponse_FieldPathSelectorIsCurrent:
			item.IsCurrent = false
		case WatchRolesResponse_FieldPathSelectorPageTokenChange:
			item.PageTokenChange = nil
		case WatchRolesResponse_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchRolesResponse_FieldPathSelectorSnapshotSize:
			item.SnapshotSize = int64(0)
		case WatchRolesResponse_FieldPathSelectorIsSoftReset:
			item.IsSoftReset = false
		case WatchRolesResponse_FieldPathSelectorIsHardReset:
			item.IsHardReset = false
		default:
			panic(fmt.Sprintf("Invalid selector for WatchRolesResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchRolesResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchRolesResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchRolesResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchRolesResponse_FieldPathSelectorRoleChanges ||
		fp.selector == WatchRolesResponse_FieldPathSelectorIsCurrent ||
		fp.selector == WatchRolesResponse_FieldPathSelectorResumeToken ||
		fp.selector == WatchRolesResponse_FieldPathSelectorSnapshotSize ||
		fp.selector == WatchRolesResponse_FieldPathSelectorIsSoftReset ||
		fp.selector == WatchRolesResponse_FieldPathSelectorIsHardReset
}

func (fp *WatchRolesResponse_FieldTerminalPath) WithIValue(value interface{}) WatchRolesResponse_FieldPathValue {
	switch fp.selector {
	case WatchRolesResponse_FieldPathSelectorRoleChanges:
		return &WatchRolesResponse_FieldTerminalPathValue{WatchRolesResponse_FieldTerminalPath: *fp, value: value.([]*role.RoleChange)}
	case WatchRolesResponse_FieldPathSelectorIsCurrent:
		return &WatchRolesResponse_FieldTerminalPathValue{WatchRolesResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchRolesResponse_FieldPathSelectorPageTokenChange:
		return &WatchRolesResponse_FieldTerminalPathValue{WatchRolesResponse_FieldTerminalPath: *fp, value: value.(*WatchRolesResponse_PageTokenChange)}
	case WatchRolesResponse_FieldPathSelectorResumeToken:
		return &WatchRolesResponse_FieldTerminalPathValue{WatchRolesResponse_FieldTerminalPath: *fp, value: value.(string)}
	case WatchRolesResponse_FieldPathSelectorSnapshotSize:
		return &WatchRolesResponse_FieldTerminalPathValue{WatchRolesResponse_FieldTerminalPath: *fp, value: value.(int64)}
	case WatchRolesResponse_FieldPathSelectorIsSoftReset:
		return &WatchRolesResponse_FieldTerminalPathValue{WatchRolesResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchRolesResponse_FieldPathSelectorIsHardReset:
		return &WatchRolesResponse_FieldTerminalPathValue{WatchRolesResponse_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRolesResponse: %d", fp.selector))
	}
}

func (fp *WatchRolesResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchRolesResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchRolesResponse_FieldPathArrayOfValues {
	fpaov := &WatchRolesResponse_FieldTerminalPathArrayOfValues{WatchRolesResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchRolesResponse_FieldPathSelectorRoleChanges:
		return &WatchRolesResponse_FieldTerminalPathArrayOfValues{WatchRolesResponse_FieldTerminalPath: *fp, values: values.([][]*role.RoleChange)}
	case WatchRolesResponse_FieldPathSelectorIsCurrent:
		return &WatchRolesResponse_FieldTerminalPathArrayOfValues{WatchRolesResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchRolesResponse_FieldPathSelectorPageTokenChange:
		return &WatchRolesResponse_FieldTerminalPathArrayOfValues{WatchRolesResponse_FieldTerminalPath: *fp, values: values.([]*WatchRolesResponse_PageTokenChange)}
	case WatchRolesResponse_FieldPathSelectorResumeToken:
		return &WatchRolesResponse_FieldTerminalPathArrayOfValues{WatchRolesResponse_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchRolesResponse_FieldPathSelectorSnapshotSize:
		return &WatchRolesResponse_FieldTerminalPathArrayOfValues{WatchRolesResponse_FieldTerminalPath: *fp, values: values.([]int64)}
	case WatchRolesResponse_FieldPathSelectorIsSoftReset:
		return &WatchRolesResponse_FieldTerminalPathArrayOfValues{WatchRolesResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchRolesResponse_FieldPathSelectorIsHardReset:
		return &WatchRolesResponse_FieldTerminalPathArrayOfValues{WatchRolesResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRolesResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchRolesResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchRolesResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchRolesResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case WatchRolesResponse_FieldPathSelectorRoleChanges:
		return &WatchRolesResponse_FieldTerminalPathArrayItemValue{WatchRolesResponse_FieldTerminalPath: *fp, value: value.(*role.RoleChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRolesResponse: %d", fp.selector))
	}
}

func (fp *WatchRolesResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type WatchRolesResponse_FieldSubPath struct {
	selector WatchRolesResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ WatchRolesResponse_FieldPath = (*WatchRolesResponse_FieldSubPath)(nil)

func (fps *WatchRolesResponse_FieldSubPath) Selector() WatchRolesResponse_FieldPathSelector {
	return fps.selector
}
func (fps *WatchRolesResponse_FieldSubPath) AsPageTokenChangeSubPath() (WatchRolesResponsePageTokenChange_FieldPath, bool) {
	res, ok := fps.subPath.(WatchRolesResponsePageTokenChange_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *WatchRolesResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *WatchRolesResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source WatchRolesResponse
func (fps *WatchRolesResponse_FieldSubPath) Get(source *WatchRolesResponse) (values []interface{}) {
	if asPageTokenChangeFieldPath, ok := fps.AsPageTokenChangeSubPath(); ok {
		values = append(values, asPageTokenChangeFieldPath.Get(source.GetPageTokenChange())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for WatchRolesResponse: %d", fps.selector))
	}
	return
}

func (fps *WatchRolesResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*WatchRolesResponse))
}

// GetSingle returns value of selected field from source WatchRolesResponse
func (fps *WatchRolesResponse_FieldSubPath) GetSingle(source *WatchRolesResponse) (interface{}, bool) {
	switch fps.selector {
	case WatchRolesResponse_FieldPathSelectorPageTokenChange:
		if source.GetPageTokenChange() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRolesResponse: %d", fps.selector))
	}
}

func (fps *WatchRolesResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*WatchRolesResponse))
}

// GetDefault returns a default value of the field type
func (fps *WatchRolesResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *WatchRolesResponse_FieldSubPath) ClearValue(item *WatchRolesResponse) {
	if item != nil {
		switch fps.selector {
		case WatchRolesResponse_FieldPathSelectorPageTokenChange:
			fps.subPath.ClearValueRaw(item.PageTokenChange)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchRolesResponse: %d", fps.selector))
		}
	}
}

func (fps *WatchRolesResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*WatchRolesResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *WatchRolesResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *WatchRolesResponse_FieldSubPath) WithIValue(value interface{}) WatchRolesResponse_FieldPathValue {
	return &WatchRolesResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *WatchRolesResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *WatchRolesResponse_FieldSubPath) WithIArrayOfValues(values interface{}) WatchRolesResponse_FieldPathArrayOfValues {
	return &WatchRolesResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *WatchRolesResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *WatchRolesResponse_FieldSubPath) WithIArrayItemValue(value interface{}) WatchRolesResponse_FieldPathArrayItemValue {
	return &WatchRolesResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *WatchRolesResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// WatchRolesResponse_FieldPathValue allows storing values for WatchRolesResponse fields according to their type
type WatchRolesResponse_FieldPathValue interface {
	WatchRolesResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchRolesResponse)
	CompareWith(*WatchRolesResponse) (cmp int, comparable bool)
}

func ParseWatchRolesResponse_FieldPathValue(pathStr, valueStr string) (WatchRolesResponse_FieldPathValue, error) {
	fp, err := ParseWatchRolesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchRolesResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchRolesResponse_FieldPathValue), nil
}

func MustParseWatchRolesResponse_FieldPathValue(pathStr, valueStr string) WatchRolesResponse_FieldPathValue {
	fpv, err := ParseWatchRolesResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchRolesResponse_FieldTerminalPathValue struct {
	WatchRolesResponse_FieldTerminalPath
	value interface{}
}

var _ WatchRolesResponse_FieldPathValue = (*WatchRolesResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchRolesResponse' as interface{}
func (fpv *WatchRolesResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchRolesResponse_FieldTerminalPathValue) AsRoleChangesValue() ([]*role.RoleChange, bool) {
	res, ok := fpv.value.([]*role.RoleChange)
	return res, ok
}
func (fpv *WatchRolesResponse_FieldTerminalPathValue) AsIsCurrentValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchRolesResponse_FieldTerminalPathValue) AsPageTokenChangeValue() (*WatchRolesResponse_PageTokenChange, bool) {
	res, ok := fpv.value.(*WatchRolesResponse_PageTokenChange)
	return res, ok
}
func (fpv *WatchRolesResponse_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchRolesResponse_FieldTerminalPathValue) AsSnapshotSizeValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}
func (fpv *WatchRolesResponse_FieldTerminalPathValue) AsIsSoftResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchRolesResponse_FieldTerminalPathValue) AsIsHardResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object WatchRolesResponse
func (fpv *WatchRolesResponse_FieldTerminalPathValue) SetTo(target **WatchRolesResponse) {
	if *target == nil {
		*target = new(WatchRolesResponse)
	}
	switch fpv.selector {
	case WatchRolesResponse_FieldPathSelectorRoleChanges:
		(*target).RoleChanges = fpv.value.([]*role.RoleChange)
	case WatchRolesResponse_FieldPathSelectorIsCurrent:
		(*target).IsCurrent = fpv.value.(bool)
	case WatchRolesResponse_FieldPathSelectorPageTokenChange:
		(*target).PageTokenChange = fpv.value.(*WatchRolesResponse_PageTokenChange)
	case WatchRolesResponse_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchRolesResponse_FieldPathSelectorSnapshotSize:
		(*target).SnapshotSize = fpv.value.(int64)
	case WatchRolesResponse_FieldPathSelectorIsSoftReset:
		(*target).IsSoftReset = fpv.value.(bool)
	case WatchRolesResponse_FieldPathSelectorIsHardReset:
		(*target).IsHardReset = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRolesResponse: %d", fpv.selector))
	}
}

func (fpv *WatchRolesResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchRolesResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchRolesResponse_FieldTerminalPathValue' with the value under path in 'WatchRolesResponse'.
func (fpv *WatchRolesResponse_FieldTerminalPathValue) CompareWith(source *WatchRolesResponse) (int, bool) {
	switch fpv.selector {
	case WatchRolesResponse_FieldPathSelectorRoleChanges:
		return 0, false
	case WatchRolesResponse_FieldPathSelectorIsCurrent:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsCurrent()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchRolesResponse_FieldPathSelectorPageTokenChange:
		return 0, false
	case WatchRolesResponse_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchRolesResponse_FieldPathSelectorSnapshotSize:
		leftValue := fpv.value.(int64)
		rightValue := source.GetSnapshotSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchRolesResponse_FieldPathSelectorIsSoftReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsSoftReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchRolesResponse_FieldPathSelectorIsHardReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsHardReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRolesResponse: %d", fpv.selector))
	}
}

func (fpv *WatchRolesResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchRolesResponse))
}

type WatchRolesResponse_FieldSubPathValue struct {
	WatchRolesResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ WatchRolesResponse_FieldPathValue = (*WatchRolesResponse_FieldSubPathValue)(nil)

func (fpvs *WatchRolesResponse_FieldSubPathValue) AsPageTokenChangePathValue() (WatchRolesResponsePageTokenChange_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(WatchRolesResponsePageTokenChange_FieldPathValue)
	return res, ok
}

func (fpvs *WatchRolesResponse_FieldSubPathValue) SetTo(target **WatchRolesResponse) {
	if *target == nil {
		*target = new(WatchRolesResponse)
	}
	switch fpvs.Selector() {
	case WatchRolesResponse_FieldPathSelectorPageTokenChange:
		fpvs.subPathValue.(WatchRolesResponsePageTokenChange_FieldPathValue).SetTo(&(*target).PageTokenChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRolesResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchRolesResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchRolesResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *WatchRolesResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *WatchRolesResponse_FieldSubPathValue) CompareWith(source *WatchRolesResponse) (int, bool) {
	switch fpvs.Selector() {
	case WatchRolesResponse_FieldPathSelectorPageTokenChange:
		return fpvs.subPathValue.(WatchRolesResponsePageTokenChange_FieldPathValue).CompareWith(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRolesResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchRolesResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*WatchRolesResponse))
}

// WatchRolesResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchRolesResponse according to their type
// Present only for array (repeated) types.
type WatchRolesResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchRolesResponse_FieldPath
	ContainsValue(*WatchRolesResponse) bool
}

// ParseWatchRolesResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchRolesResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchRolesResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchRolesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchRolesResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchRolesResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchRolesResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchRolesResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchRolesResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchRolesResponse_FieldTerminalPathArrayItemValue struct {
	WatchRolesResponse_FieldTerminalPath
	value interface{}
}

var _ WatchRolesResponse_FieldPathArrayItemValue = (*WatchRolesResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchRolesResponse as interface{}
func (fpaiv *WatchRolesResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *WatchRolesResponse_FieldTerminalPathArrayItemValue) AsRoleChangesItemValue() (*role.RoleChange, bool) {
	res, ok := fpaiv.value.(*role.RoleChange)
	return res, ok
}

func (fpaiv *WatchRolesResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchRolesResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchRolesResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchRolesResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchRolesResponse'
func (fpaiv *WatchRolesResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchRolesResponse) bool {
	slice := fpaiv.WatchRolesResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type WatchRolesResponse_FieldSubPathArrayItemValue struct {
	WatchRolesResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *WatchRolesResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *WatchRolesResponse_FieldSubPathArrayItemValue) AsPageTokenChangePathItemValue() (WatchRolesResponsePageTokenChange_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(WatchRolesResponsePageTokenChange_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchRolesResponse'
func (fpaivs *WatchRolesResponse_FieldSubPathArrayItemValue) ContainsValue(source *WatchRolesResponse) bool {
	switch fpaivs.Selector() {
	case WatchRolesResponse_FieldPathSelectorPageTokenChange:
		return fpaivs.subPathItemValue.(WatchRolesResponsePageTokenChange_FieldPathArrayItemValue).ContainsValue(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRolesResponse: %d", fpaivs.Selector()))
	}
}

// WatchRolesResponse_FieldPathArrayOfValues allows storing slice of values for WatchRolesResponse fields according to their type
type WatchRolesResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchRolesResponse_FieldPath
}

func ParseWatchRolesResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchRolesResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchRolesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchRolesResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchRolesResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchRolesResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchRolesResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchRolesResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchRolesResponse_FieldTerminalPathArrayOfValues struct {
	WatchRolesResponse_FieldTerminalPath
	values interface{}
}

var _ WatchRolesResponse_FieldPathArrayOfValues = (*WatchRolesResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchRolesResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchRolesResponse_FieldPathSelectorRoleChanges:
		for _, v := range fpaov.values.([][]*role.RoleChange) {
			values = append(values, v)
		}
	case WatchRolesResponse_FieldPathSelectorIsCurrent:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchRolesResponse_FieldPathSelectorPageTokenChange:
		for _, v := range fpaov.values.([]*WatchRolesResponse_PageTokenChange) {
			values = append(values, v)
		}
	case WatchRolesResponse_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchRolesResponse_FieldPathSelectorSnapshotSize:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	case WatchRolesResponse_FieldPathSelectorIsSoftReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchRolesResponse_FieldPathSelectorIsHardReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchRolesResponse_FieldTerminalPathArrayOfValues) AsRoleChangesArrayOfValues() ([][]*role.RoleChange, bool) {
	res, ok := fpaov.values.([][]*role.RoleChange)
	return res, ok
}
func (fpaov *WatchRolesResponse_FieldTerminalPathArrayOfValues) AsIsCurrentArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchRolesResponse_FieldTerminalPathArrayOfValues) AsPageTokenChangeArrayOfValues() ([]*WatchRolesResponse_PageTokenChange, bool) {
	res, ok := fpaov.values.([]*WatchRolesResponse_PageTokenChange)
	return res, ok
}
func (fpaov *WatchRolesResponse_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchRolesResponse_FieldTerminalPathArrayOfValues) AsSnapshotSizeArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}
func (fpaov *WatchRolesResponse_FieldTerminalPathArrayOfValues) AsIsSoftResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchRolesResponse_FieldTerminalPathArrayOfValues) AsIsHardResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

type WatchRolesResponse_FieldSubPathArrayOfValues struct {
	WatchRolesResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ WatchRolesResponse_FieldPathArrayOfValues = (*WatchRolesResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *WatchRolesResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *WatchRolesResponse_FieldSubPathArrayOfValues) AsPageTokenChangePathArrayOfValues() (WatchRolesResponsePageTokenChange_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(WatchRolesResponsePageTokenChange_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchRolesResponsePageTokenChange_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchRolesResponsePageTokenChange_FieldPathSelector
	Get(source *WatchRolesResponse_PageTokenChange) []interface{}
	GetSingle(source *WatchRolesResponse_PageTokenChange) (interface{}, bool)
	ClearValue(item *WatchRolesResponse_PageTokenChange)

	// Those methods build corresponding WatchRolesResponsePageTokenChange_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchRolesResponsePageTokenChange_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchRolesResponsePageTokenChange_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchRolesResponsePageTokenChange_FieldPathArrayItemValue
}

type WatchRolesResponsePageTokenChange_FieldPathSelector int32

const (
	WatchRolesResponsePageTokenChange_FieldPathSelectorPrevPageToken WatchRolesResponsePageTokenChange_FieldPathSelector = 0
	WatchRolesResponsePageTokenChange_FieldPathSelectorNextPageToken WatchRolesResponsePageTokenChange_FieldPathSelector = 1
)

func (s WatchRolesResponsePageTokenChange_FieldPathSelector) String() string {
	switch s {
	case WatchRolesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case WatchRolesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRolesResponse_PageTokenChange: %d", s))
	}
}

func BuildWatchRolesResponsePageTokenChange_FieldPath(fp gotenobject.RawFieldPath) (WatchRolesResponsePageTokenChange_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchRolesResponse_PageTokenChange")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &WatchRolesResponsePageTokenChange_FieldTerminalPath{selector: WatchRolesResponsePageTokenChange_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &WatchRolesResponsePageTokenChange_FieldTerminalPath{selector: WatchRolesResponsePageTokenChange_FieldPathSelectorNextPageToken}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchRolesResponse_PageTokenChange", fp)
}

func ParseWatchRolesResponsePageTokenChange_FieldPath(rawField string) (WatchRolesResponsePageTokenChange_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchRolesResponsePageTokenChange_FieldPath(fp)
}

func MustParseWatchRolesResponsePageTokenChange_FieldPath(rawField string) WatchRolesResponsePageTokenChange_FieldPath {
	fp, err := ParseWatchRolesResponsePageTokenChange_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchRolesResponsePageTokenChange_FieldTerminalPath struct {
	selector WatchRolesResponsePageTokenChange_FieldPathSelector
}

var _ WatchRolesResponsePageTokenChange_FieldPath = (*WatchRolesResponsePageTokenChange_FieldTerminalPath)(nil)

func (fp *WatchRolesResponsePageTokenChange_FieldTerminalPath) Selector() WatchRolesResponsePageTokenChange_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchRolesResponsePageTokenChange_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchRolesResponsePageTokenChange_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchRolesResponse_PageTokenChange
func (fp *WatchRolesResponsePageTokenChange_FieldTerminalPath) Get(source *WatchRolesResponse_PageTokenChange) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchRolesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case WatchRolesResponsePageTokenChange_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchRolesResponse_PageTokenChange: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchRolesResponsePageTokenChange_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchRolesResponse_PageTokenChange))
}

// GetSingle returns value pointed by specific field of from source WatchRolesResponse_PageTokenChange
func (fp *WatchRolesResponsePageTokenChange_FieldTerminalPath) GetSingle(source *WatchRolesResponse_PageTokenChange) (interface{}, bool) {
	switch fp.selector {
	case WatchRolesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case WatchRolesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRolesResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchRolesResponsePageTokenChange_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchRolesResponse_PageTokenChange))
}

// GetDefault returns a default value of the field type
func (fp *WatchRolesResponsePageTokenChange_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchRolesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return (*role.PagerCursor)(nil)
	case WatchRolesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return (*role.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRolesResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchRolesResponsePageTokenChange_FieldTerminalPath) ClearValue(item *WatchRolesResponse_PageTokenChange) {
	if item != nil {
		switch fp.selector {
		case WatchRolesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case WatchRolesResponsePageTokenChange_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchRolesResponse_PageTokenChange: %d", fp.selector))
		}
	}
}

func (fp *WatchRolesResponsePageTokenChange_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchRolesResponse_PageTokenChange))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchRolesResponsePageTokenChange_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchRolesResponsePageTokenChange_FieldPathSelectorPrevPageToken ||
		fp.selector == WatchRolesResponsePageTokenChange_FieldPathSelectorNextPageToken
}

func (fp *WatchRolesResponsePageTokenChange_FieldTerminalPath) WithIValue(value interface{}) WatchRolesResponsePageTokenChange_FieldPathValue {
	switch fp.selector {
	case WatchRolesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchRolesResponsePageTokenChange_FieldTerminalPathValue{WatchRolesResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*role.PagerCursor)}
	case WatchRolesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchRolesResponsePageTokenChange_FieldTerminalPathValue{WatchRolesResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*role.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRolesResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchRolesResponsePageTokenChange_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchRolesResponsePageTokenChange_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchRolesResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov := &WatchRolesResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchRolesResponsePageTokenChange_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchRolesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchRolesResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchRolesResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*role.PagerCursor)}
	case WatchRolesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchRolesResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchRolesResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*role.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRolesResponse_PageTokenChange: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchRolesResponsePageTokenChange_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchRolesResponsePageTokenChange_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchRolesResponsePageTokenChange_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRolesResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchRolesResponsePageTokenChange_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchRolesResponsePageTokenChange_FieldPathValue allows storing values for PageTokenChange fields according to their type
type WatchRolesResponsePageTokenChange_FieldPathValue interface {
	WatchRolesResponsePageTokenChange_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchRolesResponse_PageTokenChange)
	CompareWith(*WatchRolesResponse_PageTokenChange) (cmp int, comparable bool)
}

func ParseWatchRolesResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) (WatchRolesResponsePageTokenChange_FieldPathValue, error) {
	fp, err := ParseWatchRolesResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchRolesResponsePageTokenChange_FieldPathValue), nil
}

func MustParseWatchRolesResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) WatchRolesResponsePageTokenChange_FieldPathValue {
	fpv, err := ParseWatchRolesResponsePageTokenChange_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchRolesResponsePageTokenChange_FieldTerminalPathValue struct {
	WatchRolesResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchRolesResponsePageTokenChange_FieldPathValue = (*WatchRolesResponsePageTokenChange_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'PageTokenChange' as interface{}
func (fpv *WatchRolesResponsePageTokenChange_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchRolesResponsePageTokenChange_FieldTerminalPathValue) AsPrevPageTokenValue() (*role.PagerCursor, bool) {
	res, ok := fpv.value.(*role.PagerCursor)
	return res, ok
}
func (fpv *WatchRolesResponsePageTokenChange_FieldTerminalPathValue) AsNextPageTokenValue() (*role.PagerCursor, bool) {
	res, ok := fpv.value.(*role.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object PageTokenChange
func (fpv *WatchRolesResponsePageTokenChange_FieldTerminalPathValue) SetTo(target **WatchRolesResponse_PageTokenChange) {
	if *target == nil {
		*target = new(WatchRolesResponse_PageTokenChange)
	}
	switch fpv.selector {
	case WatchRolesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*role.PagerCursor)
	case WatchRolesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*role.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRolesResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchRolesResponsePageTokenChange_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchRolesResponse_PageTokenChange)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchRolesResponsePageTokenChange_FieldTerminalPathValue' with the value under path in 'WatchRolesResponse_PageTokenChange'.
func (fpv *WatchRolesResponsePageTokenChange_FieldTerminalPathValue) CompareWith(source *WatchRolesResponse_PageTokenChange) (int, bool) {
	switch fpv.selector {
	case WatchRolesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return 0, false
	case WatchRolesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRolesResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchRolesResponsePageTokenChange_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchRolesResponse_PageTokenChange))
}

// WatchRolesResponsePageTokenChange_FieldPathArrayItemValue allows storing single item in Path-specific values for PageTokenChange according to their type
// Present only for array (repeated) types.
type WatchRolesResponsePageTokenChange_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchRolesResponsePageTokenChange_FieldPath
	ContainsValue(*WatchRolesResponse_PageTokenChange) bool
}

// ParseWatchRolesResponsePageTokenChange_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchRolesResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) (WatchRolesResponsePageTokenChange_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchRolesResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchRolesResponsePageTokenChange_FieldPathArrayItemValue), nil
}

func MustParseWatchRolesResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) WatchRolesResponsePageTokenChange_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchRolesResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchRolesResponsePageTokenChange_FieldTerminalPathArrayItemValue struct {
	WatchRolesResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchRolesResponsePageTokenChange_FieldPathArrayItemValue = (*WatchRolesResponsePageTokenChange_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchRolesResponse_PageTokenChange as interface{}
func (fpaiv *WatchRolesResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchRolesResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingle(source *WatchRolesResponse_PageTokenChange) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchRolesResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchRolesResponse_PageTokenChange))
}

// Contains returns a boolean indicating if value that is being held is present in given 'PageTokenChange'
func (fpaiv *WatchRolesResponsePageTokenChange_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchRolesResponse_PageTokenChange) bool {
	slice := fpaiv.WatchRolesResponsePageTokenChange_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchRolesResponsePageTokenChange_FieldPathArrayOfValues allows storing slice of values for PageTokenChange fields according to their type
type WatchRolesResponsePageTokenChange_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchRolesResponsePageTokenChange_FieldPath
}

func ParseWatchRolesResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchRolesResponsePageTokenChange_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchRolesResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchRolesResponsePageTokenChange_FieldPathArrayOfValues), nil
}

func MustParseWatchRolesResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) WatchRolesResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov, err := ParseWatchRolesResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchRolesResponsePageTokenChange_FieldTerminalPathArrayOfValues struct {
	WatchRolesResponsePageTokenChange_FieldTerminalPath
	values interface{}
}

var _ WatchRolesResponsePageTokenChange_FieldPathArrayOfValues = (*WatchRolesResponsePageTokenChange_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchRolesResponsePageTokenChange_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchRolesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*role.PagerCursor) {
			values = append(values, v)
		}
	case WatchRolesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*role.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchRolesResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*role.PagerCursor, bool) {
	res, ok := fpaov.values.([]*role.PagerCursor)
	return res, ok
}
func (fpaov *WatchRolesResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*role.PagerCursor, bool) {
	res, ok := fpaov.values.([]*role.PagerCursor)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type CreateRoleRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() CreateRoleRequest_FieldPathSelector
	Get(source *CreateRoleRequest) []interface{}
	GetSingle(source *CreateRoleRequest) (interface{}, bool)
	ClearValue(item *CreateRoleRequest)

	// Those methods build corresponding CreateRoleRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) CreateRoleRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) CreateRoleRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) CreateRoleRequest_FieldPathArrayItemValue
}

type CreateRoleRequest_FieldPathSelector int32

const (
	CreateRoleRequest_FieldPathSelectorRole CreateRoleRequest_FieldPathSelector = 0
)

func (s CreateRoleRequest_FieldPathSelector) String() string {
	switch s {
	case CreateRoleRequest_FieldPathSelectorRole:
		return "role"
	default:
		panic(fmt.Sprintf("Invalid selector for CreateRoleRequest: %d", s))
	}
}

func BuildCreateRoleRequest_FieldPath(fp gotenobject.RawFieldPath) (CreateRoleRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object CreateRoleRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "role":
			return &CreateRoleRequest_FieldTerminalPath{selector: CreateRoleRequest_FieldPathSelectorRole}, nil
		}
	} else {
		switch fp[0] {
		case "role":
			if subpath, err := role.BuildRole_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &CreateRoleRequest_FieldSubPath{selector: CreateRoleRequest_FieldPathSelectorRole, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object CreateRoleRequest", fp)
}

func ParseCreateRoleRequest_FieldPath(rawField string) (CreateRoleRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildCreateRoleRequest_FieldPath(fp)
}

func MustParseCreateRoleRequest_FieldPath(rawField string) CreateRoleRequest_FieldPath {
	fp, err := ParseCreateRoleRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type CreateRoleRequest_FieldTerminalPath struct {
	selector CreateRoleRequest_FieldPathSelector
}

var _ CreateRoleRequest_FieldPath = (*CreateRoleRequest_FieldTerminalPath)(nil)

func (fp *CreateRoleRequest_FieldTerminalPath) Selector() CreateRoleRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *CreateRoleRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *CreateRoleRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source CreateRoleRequest
func (fp *CreateRoleRequest_FieldTerminalPath) Get(source *CreateRoleRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case CreateRoleRequest_FieldPathSelectorRole:
			if source.Role != nil {
				values = append(values, source.Role)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for CreateRoleRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *CreateRoleRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*CreateRoleRequest))
}

// GetSingle returns value pointed by specific field of from source CreateRoleRequest
func (fp *CreateRoleRequest_FieldTerminalPath) GetSingle(source *CreateRoleRequest) (interface{}, bool) {
	switch fp.selector {
	case CreateRoleRequest_FieldPathSelectorRole:
		res := source.GetRole()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for CreateRoleRequest: %d", fp.selector))
	}
}

func (fp *CreateRoleRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*CreateRoleRequest))
}

// GetDefault returns a default value of the field type
func (fp *CreateRoleRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case CreateRoleRequest_FieldPathSelectorRole:
		return (*role.Role)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateRoleRequest: %d", fp.selector))
	}
}

func (fp *CreateRoleRequest_FieldTerminalPath) ClearValue(item *CreateRoleRequest) {
	if item != nil {
		switch fp.selector {
		case CreateRoleRequest_FieldPathSelectorRole:
			item.Role = nil
		default:
			panic(fmt.Sprintf("Invalid selector for CreateRoleRequest: %d", fp.selector))
		}
	}
}

func (fp *CreateRoleRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*CreateRoleRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *CreateRoleRequest_FieldTerminalPath) IsLeaf() bool {
	return false
}

func (fp *CreateRoleRequest_FieldTerminalPath) WithIValue(value interface{}) CreateRoleRequest_FieldPathValue {
	switch fp.selector {
	case CreateRoleRequest_FieldPathSelectorRole:
		return &CreateRoleRequest_FieldTerminalPathValue{CreateRoleRequest_FieldTerminalPath: *fp, value: value.(*role.Role)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateRoleRequest: %d", fp.selector))
	}
}

func (fp *CreateRoleRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *CreateRoleRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) CreateRoleRequest_FieldPathArrayOfValues {
	fpaov := &CreateRoleRequest_FieldTerminalPathArrayOfValues{CreateRoleRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case CreateRoleRequest_FieldPathSelectorRole:
		return &CreateRoleRequest_FieldTerminalPathArrayOfValues{CreateRoleRequest_FieldTerminalPath: *fp, values: values.([]*role.Role)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateRoleRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *CreateRoleRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *CreateRoleRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) CreateRoleRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for CreateRoleRequest: %d", fp.selector))
	}
}

func (fp *CreateRoleRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type CreateRoleRequest_FieldSubPath struct {
	selector CreateRoleRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ CreateRoleRequest_FieldPath = (*CreateRoleRequest_FieldSubPath)(nil)

func (fps *CreateRoleRequest_FieldSubPath) Selector() CreateRoleRequest_FieldPathSelector {
	return fps.selector
}
func (fps *CreateRoleRequest_FieldSubPath) AsRoleSubPath() (role.Role_FieldPath, bool) {
	res, ok := fps.subPath.(role.Role_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *CreateRoleRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *CreateRoleRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source CreateRoleRequest
func (fps *CreateRoleRequest_FieldSubPath) Get(source *CreateRoleRequest) (values []interface{}) {
	if asRoleFieldPath, ok := fps.AsRoleSubPath(); ok {
		values = append(values, asRoleFieldPath.Get(source.GetRole())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for CreateRoleRequest: %d", fps.selector))
	}
	return
}

func (fps *CreateRoleRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*CreateRoleRequest))
}

// GetSingle returns value of selected field from source CreateRoleRequest
func (fps *CreateRoleRequest_FieldSubPath) GetSingle(source *CreateRoleRequest) (interface{}, bool) {
	switch fps.selector {
	case CreateRoleRequest_FieldPathSelectorRole:
		if source.GetRole() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetRole())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateRoleRequest: %d", fps.selector))
	}
}

func (fps *CreateRoleRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*CreateRoleRequest))
}

// GetDefault returns a default value of the field type
func (fps *CreateRoleRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *CreateRoleRequest_FieldSubPath) ClearValue(item *CreateRoleRequest) {
	if item != nil {
		switch fps.selector {
		case CreateRoleRequest_FieldPathSelectorRole:
			fps.subPath.ClearValueRaw(item.Role)
		default:
			panic(fmt.Sprintf("Invalid selector for CreateRoleRequest: %d", fps.selector))
		}
	}
}

func (fps *CreateRoleRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*CreateRoleRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *CreateRoleRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *CreateRoleRequest_FieldSubPath) WithIValue(value interface{}) CreateRoleRequest_FieldPathValue {
	return &CreateRoleRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *CreateRoleRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *CreateRoleRequest_FieldSubPath) WithIArrayOfValues(values interface{}) CreateRoleRequest_FieldPathArrayOfValues {
	return &CreateRoleRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *CreateRoleRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *CreateRoleRequest_FieldSubPath) WithIArrayItemValue(value interface{}) CreateRoleRequest_FieldPathArrayItemValue {
	return &CreateRoleRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *CreateRoleRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// CreateRoleRequest_FieldPathValue allows storing values for CreateRoleRequest fields according to their type
type CreateRoleRequest_FieldPathValue interface {
	CreateRoleRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **CreateRoleRequest)
	CompareWith(*CreateRoleRequest) (cmp int, comparable bool)
}

func ParseCreateRoleRequest_FieldPathValue(pathStr, valueStr string) (CreateRoleRequest_FieldPathValue, error) {
	fp, err := ParseCreateRoleRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateRoleRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(CreateRoleRequest_FieldPathValue), nil
}

func MustParseCreateRoleRequest_FieldPathValue(pathStr, valueStr string) CreateRoleRequest_FieldPathValue {
	fpv, err := ParseCreateRoleRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type CreateRoleRequest_FieldTerminalPathValue struct {
	CreateRoleRequest_FieldTerminalPath
	value interface{}
}

var _ CreateRoleRequest_FieldPathValue = (*CreateRoleRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CreateRoleRequest' as interface{}
func (fpv *CreateRoleRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *CreateRoleRequest_FieldTerminalPathValue) AsRoleValue() (*role.Role, bool) {
	res, ok := fpv.value.(*role.Role)
	return res, ok
}

// SetTo stores value for selected field for object CreateRoleRequest
func (fpv *CreateRoleRequest_FieldTerminalPathValue) SetTo(target **CreateRoleRequest) {
	if *target == nil {
		*target = new(CreateRoleRequest)
	}
	switch fpv.selector {
	case CreateRoleRequest_FieldPathSelectorRole:
		(*target).Role = fpv.value.(*role.Role)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateRoleRequest: %d", fpv.selector))
	}
}

func (fpv *CreateRoleRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateRoleRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'CreateRoleRequest_FieldTerminalPathValue' with the value under path in 'CreateRoleRequest'.
func (fpv *CreateRoleRequest_FieldTerminalPathValue) CompareWith(source *CreateRoleRequest) (int, bool) {
	switch fpv.selector {
	case CreateRoleRequest_FieldPathSelectorRole:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for CreateRoleRequest: %d", fpv.selector))
	}
}

func (fpv *CreateRoleRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*CreateRoleRequest))
}

type CreateRoleRequest_FieldSubPathValue struct {
	CreateRoleRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ CreateRoleRequest_FieldPathValue = (*CreateRoleRequest_FieldSubPathValue)(nil)

func (fpvs *CreateRoleRequest_FieldSubPathValue) AsRolePathValue() (role.Role_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(role.Role_FieldPathValue)
	return res, ok
}

func (fpvs *CreateRoleRequest_FieldSubPathValue) SetTo(target **CreateRoleRequest) {
	if *target == nil {
		*target = new(CreateRoleRequest)
	}
	switch fpvs.Selector() {
	case CreateRoleRequest_FieldPathSelectorRole:
		fpvs.subPathValue.(role.Role_FieldPathValue).SetTo(&(*target).Role)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateRoleRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateRoleRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateRoleRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *CreateRoleRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *CreateRoleRequest_FieldSubPathValue) CompareWith(source *CreateRoleRequest) (int, bool) {
	switch fpvs.Selector() {
	case CreateRoleRequest_FieldPathSelectorRole:
		return fpvs.subPathValue.(role.Role_FieldPathValue).CompareWith(source.GetRole())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateRoleRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateRoleRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*CreateRoleRequest))
}

// CreateRoleRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for CreateRoleRequest according to their type
// Present only for array (repeated) types.
type CreateRoleRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	CreateRoleRequest_FieldPath
	ContainsValue(*CreateRoleRequest) bool
}

// ParseCreateRoleRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseCreateRoleRequest_FieldPathArrayItemValue(pathStr, valueStr string) (CreateRoleRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseCreateRoleRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateRoleRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(CreateRoleRequest_FieldPathArrayItemValue), nil
}

func MustParseCreateRoleRequest_FieldPathArrayItemValue(pathStr, valueStr string) CreateRoleRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseCreateRoleRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type CreateRoleRequest_FieldTerminalPathArrayItemValue struct {
	CreateRoleRequest_FieldTerminalPath
	value interface{}
}

var _ CreateRoleRequest_FieldPathArrayItemValue = (*CreateRoleRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object CreateRoleRequest as interface{}
func (fpaiv *CreateRoleRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *CreateRoleRequest_FieldTerminalPathArrayItemValue) GetSingle(source *CreateRoleRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *CreateRoleRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*CreateRoleRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateRoleRequest'
func (fpaiv *CreateRoleRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *CreateRoleRequest) bool {
	slice := fpaiv.CreateRoleRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type CreateRoleRequest_FieldSubPathArrayItemValue struct {
	CreateRoleRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *CreateRoleRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *CreateRoleRequest_FieldSubPathArrayItemValue) AsRolePathItemValue() (role.Role_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(role.Role_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateRoleRequest'
func (fpaivs *CreateRoleRequest_FieldSubPathArrayItemValue) ContainsValue(source *CreateRoleRequest) bool {
	switch fpaivs.Selector() {
	case CreateRoleRequest_FieldPathSelectorRole:
		return fpaivs.subPathItemValue.(role.Role_FieldPathArrayItemValue).ContainsValue(source.GetRole())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateRoleRequest: %d", fpaivs.Selector()))
	}
}

// CreateRoleRequest_FieldPathArrayOfValues allows storing slice of values for CreateRoleRequest fields according to their type
type CreateRoleRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	CreateRoleRequest_FieldPath
}

func ParseCreateRoleRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (CreateRoleRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseCreateRoleRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateRoleRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(CreateRoleRequest_FieldPathArrayOfValues), nil
}

func MustParseCreateRoleRequest_FieldPathArrayOfValues(pathStr, valuesStr string) CreateRoleRequest_FieldPathArrayOfValues {
	fpaov, err := ParseCreateRoleRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type CreateRoleRequest_FieldTerminalPathArrayOfValues struct {
	CreateRoleRequest_FieldTerminalPath
	values interface{}
}

var _ CreateRoleRequest_FieldPathArrayOfValues = (*CreateRoleRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *CreateRoleRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case CreateRoleRequest_FieldPathSelectorRole:
		for _, v := range fpaov.values.([]*role.Role) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *CreateRoleRequest_FieldTerminalPathArrayOfValues) AsRoleArrayOfValues() ([]*role.Role, bool) {
	res, ok := fpaov.values.([]*role.Role)
	return res, ok
}

type CreateRoleRequest_FieldSubPathArrayOfValues struct {
	CreateRoleRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ CreateRoleRequest_FieldPathArrayOfValues = (*CreateRoleRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *CreateRoleRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *CreateRoleRequest_FieldSubPathArrayOfValues) AsRolePathArrayOfValues() (role.Role_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(role.Role_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateRoleRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateRoleRequest_FieldPathSelector
	Get(source *UpdateRoleRequest) []interface{}
	GetSingle(source *UpdateRoleRequest) (interface{}, bool)
	ClearValue(item *UpdateRoleRequest)

	// Those methods build corresponding UpdateRoleRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateRoleRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateRoleRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateRoleRequest_FieldPathArrayItemValue
}

type UpdateRoleRequest_FieldPathSelector int32

const (
	UpdateRoleRequest_FieldPathSelectorRole       UpdateRoleRequest_FieldPathSelector = 0
	UpdateRoleRequest_FieldPathSelectorUpdateMask UpdateRoleRequest_FieldPathSelector = 1
	UpdateRoleRequest_FieldPathSelectorCas        UpdateRoleRequest_FieldPathSelector = 2
)

func (s UpdateRoleRequest_FieldPathSelector) String() string {
	switch s {
	case UpdateRoleRequest_FieldPathSelectorRole:
		return "role"
	case UpdateRoleRequest_FieldPathSelectorUpdateMask:
		return "update_mask"
	case UpdateRoleRequest_FieldPathSelectorCas:
		return "cas"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRoleRequest: %d", s))
	}
}

func BuildUpdateRoleRequest_FieldPath(fp gotenobject.RawFieldPath) (UpdateRoleRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateRoleRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "role":
			return &UpdateRoleRequest_FieldTerminalPath{selector: UpdateRoleRequest_FieldPathSelectorRole}, nil
		case "update_mask", "updateMask", "update-mask":
			return &UpdateRoleRequest_FieldTerminalPath{selector: UpdateRoleRequest_FieldPathSelectorUpdateMask}, nil
		case "cas":
			return &UpdateRoleRequest_FieldTerminalPath{selector: UpdateRoleRequest_FieldPathSelectorCas}, nil
		}
	} else {
		switch fp[0] {
		case "role":
			if subpath, err := role.BuildRole_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateRoleRequest_FieldSubPath{selector: UpdateRoleRequest_FieldPathSelectorRole, subPath: subpath}, nil
			}
		case "cas":
			if subpath, err := BuildUpdateRoleRequestCAS_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateRoleRequest_FieldSubPath{selector: UpdateRoleRequest_FieldPathSelectorCas, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateRoleRequest", fp)
}

func ParseUpdateRoleRequest_FieldPath(rawField string) (UpdateRoleRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateRoleRequest_FieldPath(fp)
}

func MustParseUpdateRoleRequest_FieldPath(rawField string) UpdateRoleRequest_FieldPath {
	fp, err := ParseUpdateRoleRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateRoleRequest_FieldTerminalPath struct {
	selector UpdateRoleRequest_FieldPathSelector
}

var _ UpdateRoleRequest_FieldPath = (*UpdateRoleRequest_FieldTerminalPath)(nil)

func (fp *UpdateRoleRequest_FieldTerminalPath) Selector() UpdateRoleRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateRoleRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateRoleRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateRoleRequest
func (fp *UpdateRoleRequest_FieldTerminalPath) Get(source *UpdateRoleRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateRoleRequest_FieldPathSelectorRole:
			if source.Role != nil {
				values = append(values, source.Role)
			}
		case UpdateRoleRequest_FieldPathSelectorUpdateMask:
			if source.UpdateMask != nil {
				values = append(values, source.UpdateMask)
			}
		case UpdateRoleRequest_FieldPathSelectorCas:
			if source.Cas != nil {
				values = append(values, source.Cas)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateRoleRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateRoleRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateRoleRequest))
}

// GetSingle returns value pointed by specific field of from source UpdateRoleRequest
func (fp *UpdateRoleRequest_FieldTerminalPath) GetSingle(source *UpdateRoleRequest) (interface{}, bool) {
	switch fp.selector {
	case UpdateRoleRequest_FieldPathSelectorRole:
		res := source.GetRole()
		return res, res != nil
	case UpdateRoleRequest_FieldPathSelectorUpdateMask:
		res := source.GetUpdateMask()
		return res, res != nil
	case UpdateRoleRequest_FieldPathSelectorCas:
		res := source.GetCas()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRoleRequest: %d", fp.selector))
	}
}

func (fp *UpdateRoleRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateRoleRequest))
}

// GetDefault returns a default value of the field type
func (fp *UpdateRoleRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateRoleRequest_FieldPathSelectorRole:
		return (*role.Role)(nil)
	case UpdateRoleRequest_FieldPathSelectorUpdateMask:
		return (*role.Role_FieldMask)(nil)
	case UpdateRoleRequest_FieldPathSelectorCas:
		return (*UpdateRoleRequest_CAS)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRoleRequest: %d", fp.selector))
	}
}

func (fp *UpdateRoleRequest_FieldTerminalPath) ClearValue(item *UpdateRoleRequest) {
	if item != nil {
		switch fp.selector {
		case UpdateRoleRequest_FieldPathSelectorRole:
			item.Role = nil
		case UpdateRoleRequest_FieldPathSelectorUpdateMask:
			item.UpdateMask = nil
		case UpdateRoleRequest_FieldPathSelectorCas:
			item.Cas = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateRoleRequest: %d", fp.selector))
		}
	}
}

func (fp *UpdateRoleRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateRoleRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateRoleRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateRoleRequest_FieldPathSelectorUpdateMask
}

func (fp *UpdateRoleRequest_FieldTerminalPath) WithIValue(value interface{}) UpdateRoleRequest_FieldPathValue {
	switch fp.selector {
	case UpdateRoleRequest_FieldPathSelectorRole:
		return &UpdateRoleRequest_FieldTerminalPathValue{UpdateRoleRequest_FieldTerminalPath: *fp, value: value.(*role.Role)}
	case UpdateRoleRequest_FieldPathSelectorUpdateMask:
		return &UpdateRoleRequest_FieldTerminalPathValue{UpdateRoleRequest_FieldTerminalPath: *fp, value: value.(*role.Role_FieldMask)}
	case UpdateRoleRequest_FieldPathSelectorCas:
		return &UpdateRoleRequest_FieldTerminalPathValue{UpdateRoleRequest_FieldTerminalPath: *fp, value: value.(*UpdateRoleRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRoleRequest: %d", fp.selector))
	}
}

func (fp *UpdateRoleRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateRoleRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateRoleRequest_FieldPathArrayOfValues {
	fpaov := &UpdateRoleRequest_FieldTerminalPathArrayOfValues{UpdateRoleRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateRoleRequest_FieldPathSelectorRole:
		return &UpdateRoleRequest_FieldTerminalPathArrayOfValues{UpdateRoleRequest_FieldTerminalPath: *fp, values: values.([]*role.Role)}
	case UpdateRoleRequest_FieldPathSelectorUpdateMask:
		return &UpdateRoleRequest_FieldTerminalPathArrayOfValues{UpdateRoleRequest_FieldTerminalPath: *fp, values: values.([]*role.Role_FieldMask)}
	case UpdateRoleRequest_FieldPathSelectorCas:
		return &UpdateRoleRequest_FieldTerminalPathArrayOfValues{UpdateRoleRequest_FieldTerminalPath: *fp, values: values.([]*UpdateRoleRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRoleRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateRoleRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateRoleRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateRoleRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRoleRequest: %d", fp.selector))
	}
}

func (fp *UpdateRoleRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateRoleRequest_FieldSubPath struct {
	selector UpdateRoleRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateRoleRequest_FieldPath = (*UpdateRoleRequest_FieldSubPath)(nil)

func (fps *UpdateRoleRequest_FieldSubPath) Selector() UpdateRoleRequest_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateRoleRequest_FieldSubPath) AsRoleSubPath() (role.Role_FieldPath, bool) {
	res, ok := fps.subPath.(role.Role_FieldPath)
	return res, ok
}
func (fps *UpdateRoleRequest_FieldSubPath) AsCasSubPath() (UpdateRoleRequestCAS_FieldPath, bool) {
	res, ok := fps.subPath.(UpdateRoleRequestCAS_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateRoleRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateRoleRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateRoleRequest
func (fps *UpdateRoleRequest_FieldSubPath) Get(source *UpdateRoleRequest) (values []interface{}) {
	if asRoleFieldPath, ok := fps.AsRoleSubPath(); ok {
		values = append(values, asRoleFieldPath.Get(source.GetRole())...)
	} else if asCASFieldPath, ok := fps.AsCasSubPath(); ok {
		values = append(values, asCASFieldPath.Get(source.GetCas())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for UpdateRoleRequest: %d", fps.selector))
	}
	return
}

func (fps *UpdateRoleRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateRoleRequest))
}

// GetSingle returns value of selected field from source UpdateRoleRequest
func (fps *UpdateRoleRequest_FieldSubPath) GetSingle(source *UpdateRoleRequest) (interface{}, bool) {
	switch fps.selector {
	case UpdateRoleRequest_FieldPathSelectorRole:
		if source.GetRole() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetRole())
	case UpdateRoleRequest_FieldPathSelectorCas:
		if source.GetCas() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRoleRequest: %d", fps.selector))
	}
}

func (fps *UpdateRoleRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateRoleRequest))
}

// GetDefault returns a default value of the field type
func (fps *UpdateRoleRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateRoleRequest_FieldSubPath) ClearValue(item *UpdateRoleRequest) {
	if item != nil {
		switch fps.selector {
		case UpdateRoleRequest_FieldPathSelectorRole:
			fps.subPath.ClearValueRaw(item.Role)
		case UpdateRoleRequest_FieldPathSelectorCas:
			fps.subPath.ClearValueRaw(item.Cas)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateRoleRequest: %d", fps.selector))
		}
	}
}

func (fps *UpdateRoleRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateRoleRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateRoleRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateRoleRequest_FieldSubPath) WithIValue(value interface{}) UpdateRoleRequest_FieldPathValue {
	return &UpdateRoleRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateRoleRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateRoleRequest_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateRoleRequest_FieldPathArrayOfValues {
	return &UpdateRoleRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateRoleRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateRoleRequest_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateRoleRequest_FieldPathArrayItemValue {
	return &UpdateRoleRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateRoleRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateRoleRequest_FieldPathValue allows storing values for UpdateRoleRequest fields according to their type
type UpdateRoleRequest_FieldPathValue interface {
	UpdateRoleRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateRoleRequest)
	CompareWith(*UpdateRoleRequest) (cmp int, comparable bool)
}

func ParseUpdateRoleRequest_FieldPathValue(pathStr, valueStr string) (UpdateRoleRequest_FieldPathValue, error) {
	fp, err := ParseUpdateRoleRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateRoleRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateRoleRequest_FieldPathValue), nil
}

func MustParseUpdateRoleRequest_FieldPathValue(pathStr, valueStr string) UpdateRoleRequest_FieldPathValue {
	fpv, err := ParseUpdateRoleRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateRoleRequest_FieldTerminalPathValue struct {
	UpdateRoleRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateRoleRequest_FieldPathValue = (*UpdateRoleRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'UpdateRoleRequest' as interface{}
func (fpv *UpdateRoleRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateRoleRequest_FieldTerminalPathValue) AsRoleValue() (*role.Role, bool) {
	res, ok := fpv.value.(*role.Role)
	return res, ok
}
func (fpv *UpdateRoleRequest_FieldTerminalPathValue) AsUpdateMaskValue() (*role.Role_FieldMask, bool) {
	res, ok := fpv.value.(*role.Role_FieldMask)
	return res, ok
}
func (fpv *UpdateRoleRequest_FieldTerminalPathValue) AsCasValue() (*UpdateRoleRequest_CAS, bool) {
	res, ok := fpv.value.(*UpdateRoleRequest_CAS)
	return res, ok
}

// SetTo stores value for selected field for object UpdateRoleRequest
func (fpv *UpdateRoleRequest_FieldTerminalPathValue) SetTo(target **UpdateRoleRequest) {
	if *target == nil {
		*target = new(UpdateRoleRequest)
	}
	switch fpv.selector {
	case UpdateRoleRequest_FieldPathSelectorRole:
		(*target).Role = fpv.value.(*role.Role)
	case UpdateRoleRequest_FieldPathSelectorUpdateMask:
		(*target).UpdateMask = fpv.value.(*role.Role_FieldMask)
	case UpdateRoleRequest_FieldPathSelectorCas:
		(*target).Cas = fpv.value.(*UpdateRoleRequest_CAS)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRoleRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateRoleRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateRoleRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateRoleRequest_FieldTerminalPathValue' with the value under path in 'UpdateRoleRequest'.
func (fpv *UpdateRoleRequest_FieldTerminalPathValue) CompareWith(source *UpdateRoleRequest) (int, bool) {
	switch fpv.selector {
	case UpdateRoleRequest_FieldPathSelectorRole:
		return 0, false
	case UpdateRoleRequest_FieldPathSelectorUpdateMask:
		return 0, false
	case UpdateRoleRequest_FieldPathSelectorCas:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRoleRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateRoleRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateRoleRequest))
}

type UpdateRoleRequest_FieldSubPathValue struct {
	UpdateRoleRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateRoleRequest_FieldPathValue = (*UpdateRoleRequest_FieldSubPathValue)(nil)

func (fpvs *UpdateRoleRequest_FieldSubPathValue) AsRolePathValue() (role.Role_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(role.Role_FieldPathValue)
	return res, ok
}
func (fpvs *UpdateRoleRequest_FieldSubPathValue) AsCasPathValue() (UpdateRoleRequestCAS_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(UpdateRoleRequestCAS_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateRoleRequest_FieldSubPathValue) SetTo(target **UpdateRoleRequest) {
	if *target == nil {
		*target = new(UpdateRoleRequest)
	}
	switch fpvs.Selector() {
	case UpdateRoleRequest_FieldPathSelectorRole:
		fpvs.subPathValue.(role.Role_FieldPathValue).SetTo(&(*target).Role)
	case UpdateRoleRequest_FieldPathSelectorCas:
		fpvs.subPathValue.(UpdateRoleRequestCAS_FieldPathValue).SetTo(&(*target).Cas)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRoleRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateRoleRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateRoleRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateRoleRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateRoleRequest_FieldSubPathValue) CompareWith(source *UpdateRoleRequest) (int, bool) {
	switch fpvs.Selector() {
	case UpdateRoleRequest_FieldPathSelectorRole:
		return fpvs.subPathValue.(role.Role_FieldPathValue).CompareWith(source.GetRole())
	case UpdateRoleRequest_FieldPathSelectorCas:
		return fpvs.subPathValue.(UpdateRoleRequestCAS_FieldPathValue).CompareWith(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRoleRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateRoleRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateRoleRequest))
}

// UpdateRoleRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for UpdateRoleRequest according to their type
// Present only for array (repeated) types.
type UpdateRoleRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateRoleRequest_FieldPath
	ContainsValue(*UpdateRoleRequest) bool
}

// ParseUpdateRoleRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateRoleRequest_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateRoleRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateRoleRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateRoleRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateRoleRequest_FieldPathArrayItemValue), nil
}

func MustParseUpdateRoleRequest_FieldPathArrayItemValue(pathStr, valueStr string) UpdateRoleRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateRoleRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateRoleRequest_FieldTerminalPathArrayItemValue struct {
	UpdateRoleRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateRoleRequest_FieldPathArrayItemValue = (*UpdateRoleRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateRoleRequest as interface{}
func (fpaiv *UpdateRoleRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateRoleRequest_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateRoleRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateRoleRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateRoleRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateRoleRequest'
func (fpaiv *UpdateRoleRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateRoleRequest) bool {
	slice := fpaiv.UpdateRoleRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateRoleRequest_FieldSubPathArrayItemValue struct {
	UpdateRoleRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateRoleRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateRoleRequest_FieldSubPathArrayItemValue) AsRolePathItemValue() (role.Role_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(role.Role_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *UpdateRoleRequest_FieldSubPathArrayItemValue) AsCasPathItemValue() (UpdateRoleRequestCAS_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(UpdateRoleRequestCAS_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateRoleRequest'
func (fpaivs *UpdateRoleRequest_FieldSubPathArrayItemValue) ContainsValue(source *UpdateRoleRequest) bool {
	switch fpaivs.Selector() {
	case UpdateRoleRequest_FieldPathSelectorRole:
		return fpaivs.subPathItemValue.(role.Role_FieldPathArrayItemValue).ContainsValue(source.GetRole())
	case UpdateRoleRequest_FieldPathSelectorCas:
		return fpaivs.subPathItemValue.(UpdateRoleRequestCAS_FieldPathArrayItemValue).ContainsValue(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRoleRequest: %d", fpaivs.Selector()))
	}
}

// UpdateRoleRequest_FieldPathArrayOfValues allows storing slice of values for UpdateRoleRequest fields according to their type
type UpdateRoleRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateRoleRequest_FieldPath
}

func ParseUpdateRoleRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateRoleRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateRoleRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateRoleRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateRoleRequest_FieldPathArrayOfValues), nil
}

func MustParseUpdateRoleRequest_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateRoleRequest_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateRoleRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateRoleRequest_FieldTerminalPathArrayOfValues struct {
	UpdateRoleRequest_FieldTerminalPath
	values interface{}
}

var _ UpdateRoleRequest_FieldPathArrayOfValues = (*UpdateRoleRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateRoleRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateRoleRequest_FieldPathSelectorRole:
		for _, v := range fpaov.values.([]*role.Role) {
			values = append(values, v)
		}
	case UpdateRoleRequest_FieldPathSelectorUpdateMask:
		for _, v := range fpaov.values.([]*role.Role_FieldMask) {
			values = append(values, v)
		}
	case UpdateRoleRequest_FieldPathSelectorCas:
		for _, v := range fpaov.values.([]*UpdateRoleRequest_CAS) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateRoleRequest_FieldTerminalPathArrayOfValues) AsRoleArrayOfValues() ([]*role.Role, bool) {
	res, ok := fpaov.values.([]*role.Role)
	return res, ok
}
func (fpaov *UpdateRoleRequest_FieldTerminalPathArrayOfValues) AsUpdateMaskArrayOfValues() ([]*role.Role_FieldMask, bool) {
	res, ok := fpaov.values.([]*role.Role_FieldMask)
	return res, ok
}
func (fpaov *UpdateRoleRequest_FieldTerminalPathArrayOfValues) AsCasArrayOfValues() ([]*UpdateRoleRequest_CAS, bool) {
	res, ok := fpaov.values.([]*UpdateRoleRequest_CAS)
	return res, ok
}

type UpdateRoleRequest_FieldSubPathArrayOfValues struct {
	UpdateRoleRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateRoleRequest_FieldPathArrayOfValues = (*UpdateRoleRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateRoleRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateRoleRequest_FieldSubPathArrayOfValues) AsRolePathArrayOfValues() (role.Role_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(role.Role_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *UpdateRoleRequest_FieldSubPathArrayOfValues) AsCasPathArrayOfValues() (UpdateRoleRequestCAS_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(UpdateRoleRequestCAS_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateRoleRequestCAS_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateRoleRequestCAS_FieldPathSelector
	Get(source *UpdateRoleRequest_CAS) []interface{}
	GetSingle(source *UpdateRoleRequest_CAS) (interface{}, bool)
	ClearValue(item *UpdateRoleRequest_CAS)

	// Those methods build corresponding UpdateRoleRequestCAS_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateRoleRequestCAS_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateRoleRequestCAS_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateRoleRequestCAS_FieldPathArrayItemValue
}

type UpdateRoleRequestCAS_FieldPathSelector int32

const (
	UpdateRoleRequestCAS_FieldPathSelectorConditionalState UpdateRoleRequestCAS_FieldPathSelector = 0
	UpdateRoleRequestCAS_FieldPathSelectorFieldMask        UpdateRoleRequestCAS_FieldPathSelector = 1
)

func (s UpdateRoleRequestCAS_FieldPathSelector) String() string {
	switch s {
	case UpdateRoleRequestCAS_FieldPathSelectorConditionalState:
		return "conditional_state"
	case UpdateRoleRequestCAS_FieldPathSelectorFieldMask:
		return "field_mask"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRoleRequest_CAS: %d", s))
	}
}

func BuildUpdateRoleRequestCAS_FieldPath(fp gotenobject.RawFieldPath) (UpdateRoleRequestCAS_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateRoleRequest_CAS")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			return &UpdateRoleRequestCAS_FieldTerminalPath{selector: UpdateRoleRequestCAS_FieldPathSelectorConditionalState}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &UpdateRoleRequestCAS_FieldTerminalPath{selector: UpdateRoleRequestCAS_FieldPathSelectorFieldMask}, nil
		}
	} else {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			if subpath, err := role.BuildRole_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateRoleRequestCAS_FieldSubPath{selector: UpdateRoleRequestCAS_FieldPathSelectorConditionalState, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateRoleRequest_CAS", fp)
}

func ParseUpdateRoleRequestCAS_FieldPath(rawField string) (UpdateRoleRequestCAS_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateRoleRequestCAS_FieldPath(fp)
}

func MustParseUpdateRoleRequestCAS_FieldPath(rawField string) UpdateRoleRequestCAS_FieldPath {
	fp, err := ParseUpdateRoleRequestCAS_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateRoleRequestCAS_FieldTerminalPath struct {
	selector UpdateRoleRequestCAS_FieldPathSelector
}

var _ UpdateRoleRequestCAS_FieldPath = (*UpdateRoleRequestCAS_FieldTerminalPath)(nil)

func (fp *UpdateRoleRequestCAS_FieldTerminalPath) Selector() UpdateRoleRequestCAS_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateRoleRequestCAS_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateRoleRequestCAS_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateRoleRequest_CAS
func (fp *UpdateRoleRequestCAS_FieldTerminalPath) Get(source *UpdateRoleRequest_CAS) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateRoleRequestCAS_FieldPathSelectorConditionalState:
			if source.ConditionalState != nil {
				values = append(values, source.ConditionalState)
			}
		case UpdateRoleRequestCAS_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateRoleRequest_CAS: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateRoleRequestCAS_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateRoleRequest_CAS))
}

// GetSingle returns value pointed by specific field of from source UpdateRoleRequest_CAS
func (fp *UpdateRoleRequestCAS_FieldTerminalPath) GetSingle(source *UpdateRoleRequest_CAS) (interface{}, bool) {
	switch fp.selector {
	case UpdateRoleRequestCAS_FieldPathSelectorConditionalState:
		res := source.GetConditionalState()
		return res, res != nil
	case UpdateRoleRequestCAS_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRoleRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateRoleRequestCAS_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateRoleRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fp *UpdateRoleRequestCAS_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateRoleRequestCAS_FieldPathSelectorConditionalState:
		return (*role.Role)(nil)
	case UpdateRoleRequestCAS_FieldPathSelectorFieldMask:
		return (*role.Role_FieldMask)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRoleRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateRoleRequestCAS_FieldTerminalPath) ClearValue(item *UpdateRoleRequest_CAS) {
	if item != nil {
		switch fp.selector {
		case UpdateRoleRequestCAS_FieldPathSelectorConditionalState:
			item.ConditionalState = nil
		case UpdateRoleRequestCAS_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateRoleRequest_CAS: %d", fp.selector))
		}
	}
}

func (fp *UpdateRoleRequestCAS_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateRoleRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateRoleRequestCAS_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateRoleRequestCAS_FieldPathSelectorFieldMask
}

func (fp *UpdateRoleRequestCAS_FieldTerminalPath) WithIValue(value interface{}) UpdateRoleRequestCAS_FieldPathValue {
	switch fp.selector {
	case UpdateRoleRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateRoleRequestCAS_FieldTerminalPathValue{UpdateRoleRequestCAS_FieldTerminalPath: *fp, value: value.(*role.Role)}
	case UpdateRoleRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateRoleRequestCAS_FieldTerminalPathValue{UpdateRoleRequestCAS_FieldTerminalPath: *fp, value: value.(*role.Role_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRoleRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateRoleRequestCAS_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateRoleRequestCAS_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateRoleRequestCAS_FieldPathArrayOfValues {
	fpaov := &UpdateRoleRequestCAS_FieldTerminalPathArrayOfValues{UpdateRoleRequestCAS_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateRoleRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateRoleRequestCAS_FieldTerminalPathArrayOfValues{UpdateRoleRequestCAS_FieldTerminalPath: *fp, values: values.([]*role.Role)}
	case UpdateRoleRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateRoleRequestCAS_FieldTerminalPathArrayOfValues{UpdateRoleRequestCAS_FieldTerminalPath: *fp, values: values.([]*role.Role_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRoleRequest_CAS: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateRoleRequestCAS_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateRoleRequestCAS_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateRoleRequestCAS_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRoleRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateRoleRequestCAS_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateRoleRequestCAS_FieldSubPath struct {
	selector UpdateRoleRequestCAS_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateRoleRequestCAS_FieldPath = (*UpdateRoleRequestCAS_FieldSubPath)(nil)

func (fps *UpdateRoleRequestCAS_FieldSubPath) Selector() UpdateRoleRequestCAS_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateRoleRequestCAS_FieldSubPath) AsConditionalStateSubPath() (role.Role_FieldPath, bool) {
	res, ok := fps.subPath.(role.Role_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateRoleRequestCAS_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateRoleRequestCAS_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateRoleRequest_CAS
func (fps *UpdateRoleRequestCAS_FieldSubPath) Get(source *UpdateRoleRequest_CAS) (values []interface{}) {
	if asRoleFieldPath, ok := fps.AsConditionalStateSubPath(); ok {
		values = append(values, asRoleFieldPath.Get(source.GetConditionalState())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for UpdateRoleRequest_CAS: %d", fps.selector))
	}
	return
}

func (fps *UpdateRoleRequestCAS_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateRoleRequest_CAS))
}

// GetSingle returns value of selected field from source UpdateRoleRequest_CAS
func (fps *UpdateRoleRequestCAS_FieldSubPath) GetSingle(source *UpdateRoleRequest_CAS) (interface{}, bool) {
	switch fps.selector {
	case UpdateRoleRequestCAS_FieldPathSelectorConditionalState:
		if source.GetConditionalState() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRoleRequest_CAS: %d", fps.selector))
	}
}

func (fps *UpdateRoleRequestCAS_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateRoleRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fps *UpdateRoleRequestCAS_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateRoleRequestCAS_FieldSubPath) ClearValue(item *UpdateRoleRequest_CAS) {
	if item != nil {
		switch fps.selector {
		case UpdateRoleRequestCAS_FieldPathSelectorConditionalState:
			fps.subPath.ClearValueRaw(item.ConditionalState)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateRoleRequest_CAS: %d", fps.selector))
		}
	}
}

func (fps *UpdateRoleRequestCAS_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateRoleRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateRoleRequestCAS_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateRoleRequestCAS_FieldSubPath) WithIValue(value interface{}) UpdateRoleRequestCAS_FieldPathValue {
	return &UpdateRoleRequestCAS_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateRoleRequestCAS_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateRoleRequestCAS_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateRoleRequestCAS_FieldPathArrayOfValues {
	return &UpdateRoleRequestCAS_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateRoleRequestCAS_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateRoleRequestCAS_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateRoleRequestCAS_FieldPathArrayItemValue {
	return &UpdateRoleRequestCAS_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateRoleRequestCAS_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateRoleRequestCAS_FieldPathValue allows storing values for CAS fields according to their type
type UpdateRoleRequestCAS_FieldPathValue interface {
	UpdateRoleRequestCAS_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateRoleRequest_CAS)
	CompareWith(*UpdateRoleRequest_CAS) (cmp int, comparable bool)
}

func ParseUpdateRoleRequestCAS_FieldPathValue(pathStr, valueStr string) (UpdateRoleRequestCAS_FieldPathValue, error) {
	fp, err := ParseUpdateRoleRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateRoleRequestCAS_FieldPathValue), nil
}

func MustParseUpdateRoleRequestCAS_FieldPathValue(pathStr, valueStr string) UpdateRoleRequestCAS_FieldPathValue {
	fpv, err := ParseUpdateRoleRequestCAS_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateRoleRequestCAS_FieldTerminalPathValue struct {
	UpdateRoleRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateRoleRequestCAS_FieldPathValue = (*UpdateRoleRequestCAS_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CAS' as interface{}
func (fpv *UpdateRoleRequestCAS_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateRoleRequestCAS_FieldTerminalPathValue) AsConditionalStateValue() (*role.Role, bool) {
	res, ok := fpv.value.(*role.Role)
	return res, ok
}
func (fpv *UpdateRoleRequestCAS_FieldTerminalPathValue) AsFieldMaskValue() (*role.Role_FieldMask, bool) {
	res, ok := fpv.value.(*role.Role_FieldMask)
	return res, ok
}

// SetTo stores value for selected field for object CAS
func (fpv *UpdateRoleRequestCAS_FieldTerminalPathValue) SetTo(target **UpdateRoleRequest_CAS) {
	if *target == nil {
		*target = new(UpdateRoleRequest_CAS)
	}
	switch fpv.selector {
	case UpdateRoleRequestCAS_FieldPathSelectorConditionalState:
		(*target).ConditionalState = fpv.value.(*role.Role)
	case UpdateRoleRequestCAS_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*role.Role_FieldMask)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRoleRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateRoleRequestCAS_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateRoleRequest_CAS)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateRoleRequestCAS_FieldTerminalPathValue' with the value under path in 'UpdateRoleRequest_CAS'.
func (fpv *UpdateRoleRequestCAS_FieldTerminalPathValue) CompareWith(source *UpdateRoleRequest_CAS) (int, bool) {
	switch fpv.selector {
	case UpdateRoleRequestCAS_FieldPathSelectorConditionalState:
		return 0, false
	case UpdateRoleRequestCAS_FieldPathSelectorFieldMask:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRoleRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateRoleRequestCAS_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateRoleRequest_CAS))
}

type UpdateRoleRequestCAS_FieldSubPathValue struct {
	UpdateRoleRequestCAS_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateRoleRequestCAS_FieldPathValue = (*UpdateRoleRequestCAS_FieldSubPathValue)(nil)

func (fpvs *UpdateRoleRequestCAS_FieldSubPathValue) AsConditionalStatePathValue() (role.Role_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(role.Role_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateRoleRequestCAS_FieldSubPathValue) SetTo(target **UpdateRoleRequest_CAS) {
	if *target == nil {
		*target = new(UpdateRoleRequest_CAS)
	}
	switch fpvs.Selector() {
	case UpdateRoleRequestCAS_FieldPathSelectorConditionalState:
		fpvs.subPathValue.(role.Role_FieldPathValue).SetTo(&(*target).ConditionalState)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRoleRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateRoleRequestCAS_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateRoleRequest_CAS)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateRoleRequestCAS_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateRoleRequestCAS_FieldSubPathValue) CompareWith(source *UpdateRoleRequest_CAS) (int, bool) {
	switch fpvs.Selector() {
	case UpdateRoleRequestCAS_FieldPathSelectorConditionalState:
		return fpvs.subPathValue.(role.Role_FieldPathValue).CompareWith(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRoleRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateRoleRequestCAS_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateRoleRequest_CAS))
}

// UpdateRoleRequestCAS_FieldPathArrayItemValue allows storing single item in Path-specific values for CAS according to their type
// Present only for array (repeated) types.
type UpdateRoleRequestCAS_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateRoleRequestCAS_FieldPath
	ContainsValue(*UpdateRoleRequest_CAS) bool
}

// ParseUpdateRoleRequestCAS_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateRoleRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateRoleRequestCAS_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateRoleRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateRoleRequestCAS_FieldPathArrayItemValue), nil
}

func MustParseUpdateRoleRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) UpdateRoleRequestCAS_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateRoleRequestCAS_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateRoleRequestCAS_FieldTerminalPathArrayItemValue struct {
	UpdateRoleRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateRoleRequestCAS_FieldPathArrayItemValue = (*UpdateRoleRequestCAS_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateRoleRequest_CAS as interface{}
func (fpaiv *UpdateRoleRequestCAS_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateRoleRequestCAS_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateRoleRequest_CAS) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateRoleRequestCAS_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateRoleRequest_CAS))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaiv *UpdateRoleRequestCAS_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateRoleRequest_CAS) bool {
	slice := fpaiv.UpdateRoleRequestCAS_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateRoleRequestCAS_FieldSubPathArrayItemValue struct {
	UpdateRoleRequestCAS_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateRoleRequestCAS_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateRoleRequestCAS_FieldSubPathArrayItemValue) AsConditionalStatePathItemValue() (role.Role_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(role.Role_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaivs *UpdateRoleRequestCAS_FieldSubPathArrayItemValue) ContainsValue(source *UpdateRoleRequest_CAS) bool {
	switch fpaivs.Selector() {
	case UpdateRoleRequestCAS_FieldPathSelectorConditionalState:
		return fpaivs.subPathItemValue.(role.Role_FieldPathArrayItemValue).ContainsValue(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRoleRequest_CAS: %d", fpaivs.Selector()))
	}
}

// UpdateRoleRequestCAS_FieldPathArrayOfValues allows storing slice of values for CAS fields according to their type
type UpdateRoleRequestCAS_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateRoleRequestCAS_FieldPath
}

func ParseUpdateRoleRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateRoleRequestCAS_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateRoleRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateRoleRequestCAS_FieldPathArrayOfValues), nil
}

func MustParseUpdateRoleRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateRoleRequestCAS_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateRoleRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateRoleRequestCAS_FieldTerminalPathArrayOfValues struct {
	UpdateRoleRequestCAS_FieldTerminalPath
	values interface{}
}

var _ UpdateRoleRequestCAS_FieldPathArrayOfValues = (*UpdateRoleRequestCAS_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateRoleRequestCAS_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateRoleRequestCAS_FieldPathSelectorConditionalState:
		for _, v := range fpaov.values.([]*role.Role) {
			values = append(values, v)
		}
	case UpdateRoleRequestCAS_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*role.Role_FieldMask) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateRoleRequestCAS_FieldTerminalPathArrayOfValues) AsConditionalStateArrayOfValues() ([]*role.Role, bool) {
	res, ok := fpaov.values.([]*role.Role)
	return res, ok
}
func (fpaov *UpdateRoleRequestCAS_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*role.Role_FieldMask, bool) {
	res, ok := fpaov.values.([]*role.Role_FieldMask)
	return res, ok
}

type UpdateRoleRequestCAS_FieldSubPathArrayOfValues struct {
	UpdateRoleRequestCAS_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateRoleRequestCAS_FieldPathArrayOfValues = (*UpdateRoleRequestCAS_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateRoleRequestCAS_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateRoleRequestCAS_FieldSubPathArrayOfValues) AsConditionalStatePathArrayOfValues() (role.Role_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(role.Role_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeleteRoleRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeleteRoleRequest_FieldPathSelector
	Get(source *DeleteRoleRequest) []interface{}
	GetSingle(source *DeleteRoleRequest) (interface{}, bool)
	ClearValue(item *DeleteRoleRequest)

	// Those methods build corresponding DeleteRoleRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeleteRoleRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) DeleteRoleRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeleteRoleRequest_FieldPathArrayItemValue
}

type DeleteRoleRequest_FieldPathSelector int32

const (
	DeleteRoleRequest_FieldPathSelectorName DeleteRoleRequest_FieldPathSelector = 0
)

func (s DeleteRoleRequest_FieldPathSelector) String() string {
	switch s {
	case DeleteRoleRequest_FieldPathSelectorName:
		return "name"
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteRoleRequest: %d", s))
	}
}

func BuildDeleteRoleRequest_FieldPath(fp gotenobject.RawFieldPath) (DeleteRoleRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object DeleteRoleRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &DeleteRoleRequest_FieldTerminalPath{selector: DeleteRoleRequest_FieldPathSelectorName}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object DeleteRoleRequest", fp)
}

func ParseDeleteRoleRequest_FieldPath(rawField string) (DeleteRoleRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeleteRoleRequest_FieldPath(fp)
}

func MustParseDeleteRoleRequest_FieldPath(rawField string) DeleteRoleRequest_FieldPath {
	fp, err := ParseDeleteRoleRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeleteRoleRequest_FieldTerminalPath struct {
	selector DeleteRoleRequest_FieldPathSelector
}

var _ DeleteRoleRequest_FieldPath = (*DeleteRoleRequest_FieldTerminalPath)(nil)

func (fp *DeleteRoleRequest_FieldTerminalPath) Selector() DeleteRoleRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeleteRoleRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeleteRoleRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source DeleteRoleRequest
func (fp *DeleteRoleRequest_FieldTerminalPath) Get(source *DeleteRoleRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeleteRoleRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteRoleRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *DeleteRoleRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*DeleteRoleRequest))
}

// GetSingle returns value pointed by specific field of from source DeleteRoleRequest
func (fp *DeleteRoleRequest_FieldTerminalPath) GetSingle(source *DeleteRoleRequest) (interface{}, bool) {
	switch fp.selector {
	case DeleteRoleRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteRoleRequest: %d", fp.selector))
	}
}

func (fp *DeleteRoleRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*DeleteRoleRequest))
}

// GetDefault returns a default value of the field type
func (fp *DeleteRoleRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeleteRoleRequest_FieldPathSelectorName:
		return (*role.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteRoleRequest: %d", fp.selector))
	}
}

func (fp *DeleteRoleRequest_FieldTerminalPath) ClearValue(item *DeleteRoleRequest) {
	if item != nil {
		switch fp.selector {
		case DeleteRoleRequest_FieldPathSelectorName:
			item.Name = nil
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteRoleRequest: %d", fp.selector))
		}
	}
}

func (fp *DeleteRoleRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*DeleteRoleRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeleteRoleRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeleteRoleRequest_FieldPathSelectorName
}

func (fp *DeleteRoleRequest_FieldTerminalPath) WithIValue(value interface{}) DeleteRoleRequest_FieldPathValue {
	switch fp.selector {
	case DeleteRoleRequest_FieldPathSelectorName:
		return &DeleteRoleRequest_FieldTerminalPathValue{DeleteRoleRequest_FieldTerminalPath: *fp, value: value.(*role.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteRoleRequest: %d", fp.selector))
	}
}

func (fp *DeleteRoleRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeleteRoleRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeleteRoleRequest_FieldPathArrayOfValues {
	fpaov := &DeleteRoleRequest_FieldTerminalPathArrayOfValues{DeleteRoleRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeleteRoleRequest_FieldPathSelectorName:
		return &DeleteRoleRequest_FieldTerminalPathArrayOfValues{DeleteRoleRequest_FieldTerminalPath: *fp, values: values.([]*role.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteRoleRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeleteRoleRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeleteRoleRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeleteRoleRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteRoleRequest: %d", fp.selector))
	}
}

func (fp *DeleteRoleRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeleteRoleRequest_FieldPathValue allows storing values for DeleteRoleRequest fields according to their type
type DeleteRoleRequest_FieldPathValue interface {
	DeleteRoleRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **DeleteRoleRequest)
	CompareWith(*DeleteRoleRequest) (cmp int, comparable bool)
}

func ParseDeleteRoleRequest_FieldPathValue(pathStr, valueStr string) (DeleteRoleRequest_FieldPathValue, error) {
	fp, err := ParseDeleteRoleRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteRoleRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeleteRoleRequest_FieldPathValue), nil
}

func MustParseDeleteRoleRequest_FieldPathValue(pathStr, valueStr string) DeleteRoleRequest_FieldPathValue {
	fpv, err := ParseDeleteRoleRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeleteRoleRequest_FieldTerminalPathValue struct {
	DeleteRoleRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteRoleRequest_FieldPathValue = (*DeleteRoleRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'DeleteRoleRequest' as interface{}
func (fpv *DeleteRoleRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeleteRoleRequest_FieldTerminalPathValue) AsNameValue() (*role.Reference, bool) {
	res, ok := fpv.value.(*role.Reference)
	return res, ok
}

// SetTo stores value for selected field for object DeleteRoleRequest
func (fpv *DeleteRoleRequest_FieldTerminalPathValue) SetTo(target **DeleteRoleRequest) {
	if *target == nil {
		*target = new(DeleteRoleRequest)
	}
	switch fpv.selector {
	case DeleteRoleRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*role.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteRoleRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteRoleRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*DeleteRoleRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeleteRoleRequest_FieldTerminalPathValue' with the value under path in 'DeleteRoleRequest'.
func (fpv *DeleteRoleRequest_FieldTerminalPathValue) CompareWith(source *DeleteRoleRequest) (int, bool) {
	switch fpv.selector {
	case DeleteRoleRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*role.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteRoleRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteRoleRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*DeleteRoleRequest))
}

// DeleteRoleRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for DeleteRoleRequest according to their type
// Present only for array (repeated) types.
type DeleteRoleRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeleteRoleRequest_FieldPath
	ContainsValue(*DeleteRoleRequest) bool
}

// ParseDeleteRoleRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeleteRoleRequest_FieldPathArrayItemValue(pathStr, valueStr string) (DeleteRoleRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseDeleteRoleRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteRoleRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeleteRoleRequest_FieldPathArrayItemValue), nil
}

func MustParseDeleteRoleRequest_FieldPathArrayItemValue(pathStr, valueStr string) DeleteRoleRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseDeleteRoleRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeleteRoleRequest_FieldTerminalPathArrayItemValue struct {
	DeleteRoleRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteRoleRequest_FieldPathArrayItemValue = (*DeleteRoleRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object DeleteRoleRequest as interface{}
func (fpaiv *DeleteRoleRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeleteRoleRequest_FieldTerminalPathArrayItemValue) GetSingle(source *DeleteRoleRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeleteRoleRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*DeleteRoleRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'DeleteRoleRequest'
func (fpaiv *DeleteRoleRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *DeleteRoleRequest) bool {
	slice := fpaiv.DeleteRoleRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeleteRoleRequest_FieldPathArrayOfValues allows storing slice of values for DeleteRoleRequest fields according to their type
type DeleteRoleRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeleteRoleRequest_FieldPath
}

func ParseDeleteRoleRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (DeleteRoleRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseDeleteRoleRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteRoleRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeleteRoleRequest_FieldPathArrayOfValues), nil
}

func MustParseDeleteRoleRequest_FieldPathArrayOfValues(pathStr, valuesStr string) DeleteRoleRequest_FieldPathArrayOfValues {
	fpaov, err := ParseDeleteRoleRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeleteRoleRequest_FieldTerminalPathArrayOfValues struct {
	DeleteRoleRequest_FieldTerminalPath
	values interface{}
}

var _ DeleteRoleRequest_FieldPathArrayOfValues = (*DeleteRoleRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeleteRoleRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeleteRoleRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*role.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeleteRoleRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*role.Reference, bool) {
	res, ok := fpaov.values.([]*role.Reference)
	return res, ok
}
