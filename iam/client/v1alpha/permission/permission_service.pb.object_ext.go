// Code generated by protoc-gen-goten-object
// File: edgelq/iam/proto/v1alpha/permission_service.proto
// DO NOT EDIT!!!

package permission_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	permission "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha/permission"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	empty "github.com/golang/protobuf/ptypes/empty"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = fmt.Stringer(nil)
	_ = sort.Interface(nil)

	_ = proto.Message(nil)
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &permission.Permission{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

func (o *GetPermissionRequest) GotenObjectExt() {}

func (o *GetPermissionRequest) MakeFullFieldMask() *GetPermissionRequest_FieldMask {
	return FullGetPermissionRequest_FieldMask()
}

func (o *GetPermissionRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullGetPermissionRequest_FieldMask()
}

func (o *GetPermissionRequest) MakeDiffFieldMask(other *GetPermissionRequest) *GetPermissionRequest_FieldMask {
	if o == nil && other == nil {
		return &GetPermissionRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullGetPermissionRequest_FieldMask()
	}

	res := &GetPermissionRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &GetPermissionRequest_FieldTerminalPath{selector: GetPermissionRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &GetPermissionRequest_FieldTerminalPath{selector: GetPermissionRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &GetPermissionRequest_FieldTerminalPath{selector: GetPermissionRequest_FieldPathSelectorView})
	}
	return res
}

func (o *GetPermissionRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*GetPermissionRequest))
}

func (o *GetPermissionRequest) Clone() *GetPermissionRequest {
	if o == nil {
		return nil
	}
	result := &GetPermissionRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &permission.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*permission.Permission_FieldMask)
	result.View = o.View
	return result
}

func (o *GetPermissionRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *GetPermissionRequest) Merge(source *GetPermissionRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &permission.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(permission.Permission_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *GetPermissionRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*GetPermissionRequest))
}

func (o *BatchGetPermissionsRequest) GotenObjectExt() {}

func (o *BatchGetPermissionsRequest) MakeFullFieldMask() *BatchGetPermissionsRequest_FieldMask {
	return FullBatchGetPermissionsRequest_FieldMask()
}

func (o *BatchGetPermissionsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetPermissionsRequest_FieldMask()
}

func (o *BatchGetPermissionsRequest) MakeDiffFieldMask(other *BatchGetPermissionsRequest) *BatchGetPermissionsRequest_FieldMask {
	if o == nil && other == nil {
		return &BatchGetPermissionsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetPermissionsRequest_FieldMask()
	}

	res := &BatchGetPermissionsRequest_FieldMask{}

	if len(o.GetNames()) == len(other.GetNames()) {
		for i, lValue := range o.GetNames() {
			rValue := other.GetNames()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetPermissionsRequest_FieldTerminalPath{selector: BatchGetPermissionsRequest_FieldPathSelectorNames})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetPermissionsRequest_FieldTerminalPath{selector: BatchGetPermissionsRequest_FieldPathSelectorNames})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &BatchGetPermissionsRequest_FieldTerminalPath{selector: BatchGetPermissionsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &BatchGetPermissionsRequest_FieldTerminalPath{selector: BatchGetPermissionsRequest_FieldPathSelectorView})
	}
	return res
}

func (o *BatchGetPermissionsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetPermissionsRequest))
}

func (o *BatchGetPermissionsRequest) Clone() *BatchGetPermissionsRequest {
	if o == nil {
		return nil
	}
	result := &BatchGetPermissionsRequest{}
	result.Names = make([]*permission.Reference, len(o.Names))
	for i, sourceValue := range o.Names {
		if sourceValue == nil {
			result.Names[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Names[i] = &permission.Reference{}
			if err := result.Names[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*permission.Permission_FieldMask)
	result.View = o.View
	return result
}

func (o *BatchGetPermissionsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetPermissionsRequest) Merge(source *BatchGetPermissionsRequest) {
	for _, sourceValue := range source.GetNames() {
		exists := false
		for _, currentValue := range o.Names {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *permission.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &permission.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Names = append(o.Names, newDstElement)
		}
	}

	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(permission.Permission_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *BatchGetPermissionsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetPermissionsRequest))
}

func (o *BatchGetPermissionsResponse) GotenObjectExt() {}

func (o *BatchGetPermissionsResponse) MakeFullFieldMask() *BatchGetPermissionsResponse_FieldMask {
	return FullBatchGetPermissionsResponse_FieldMask()
}

func (o *BatchGetPermissionsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetPermissionsResponse_FieldMask()
}

func (o *BatchGetPermissionsResponse) MakeDiffFieldMask(other *BatchGetPermissionsResponse) *BatchGetPermissionsResponse_FieldMask {
	if o == nil && other == nil {
		return &BatchGetPermissionsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetPermissionsResponse_FieldMask()
	}

	res := &BatchGetPermissionsResponse_FieldMask{}

	if len(o.GetPermissions()) == len(other.GetPermissions()) {
		for i, lValue := range o.GetPermissions() {
			rValue := other.GetPermissions()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &BatchGetPermissionsResponse_FieldTerminalPath{selector: BatchGetPermissionsResponse_FieldPathSelectorPermissions})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetPermissionsResponse_FieldTerminalPath{selector: BatchGetPermissionsResponse_FieldPathSelectorPermissions})
	}

	if len(o.GetMissing()) == len(other.GetMissing()) {
		for i, lValue := range o.GetMissing() {
			rValue := other.GetMissing()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetPermissionsResponse_FieldTerminalPath{selector: BatchGetPermissionsResponse_FieldPathSelectorMissing})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetPermissionsResponse_FieldTerminalPath{selector: BatchGetPermissionsResponse_FieldPathSelectorMissing})
	}
	return res
}

func (o *BatchGetPermissionsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetPermissionsResponse))
}

func (o *BatchGetPermissionsResponse) Clone() *BatchGetPermissionsResponse {
	if o == nil {
		return nil
	}
	result := &BatchGetPermissionsResponse{}
	result.Permissions = make([]*permission.Permission, len(o.Permissions))
	for i, sourceValue := range o.Permissions {
		result.Permissions[i] = sourceValue.Clone()
	}
	result.Missing = make([]*permission.Reference, len(o.Missing))
	for i, sourceValue := range o.Missing {
		if sourceValue == nil {
			result.Missing[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Missing[i] = &permission.Reference{}
			if err := result.Missing[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	return result
}

func (o *BatchGetPermissionsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetPermissionsResponse) Merge(source *BatchGetPermissionsResponse) {
	for _, sourceValue := range source.GetPermissions() {
		exists := false
		for _, currentValue := range o.Permissions {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *permission.Permission
			if sourceValue != nil {
				newDstElement = new(permission.Permission)
				newDstElement.Merge(sourceValue)
			}
			o.Permissions = append(o.Permissions, newDstElement)
		}
	}

	for _, sourceValue := range source.GetMissing() {
		exists := false
		for _, currentValue := range o.Missing {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *permission.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &permission.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Missing = append(o.Missing, newDstElement)
		}
	}

}

func (o *BatchGetPermissionsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetPermissionsResponse))
}

func (o *ListPermissionsRequest) GotenObjectExt() {}

func (o *ListPermissionsRequest) MakeFullFieldMask() *ListPermissionsRequest_FieldMask {
	return FullListPermissionsRequest_FieldMask()
}

func (o *ListPermissionsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListPermissionsRequest_FieldMask()
}

func (o *ListPermissionsRequest) MakeDiffFieldMask(other *ListPermissionsRequest) *ListPermissionsRequest_FieldMask {
	if o == nil && other == nil {
		return &ListPermissionsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListPermissionsRequest_FieldMask()
	}

	res := &ListPermissionsRequest_FieldMask{}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &ListPermissionsRequest_FieldTerminalPath{selector: ListPermissionsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &ListPermissionsRequest_FieldTerminalPath{selector: ListPermissionsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &ListPermissionsRequest_FieldTerminalPath{selector: ListPermissionsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &ListPermissionsRequest_FieldTerminalPath{selector: ListPermissionsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &ListPermissionsRequest_FieldTerminalPath{selector: ListPermissionsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &ListPermissionsRequest_FieldTerminalPath{selector: ListPermissionsRequest_FieldPathSelectorView})
	}
	return res
}

func (o *ListPermissionsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListPermissionsRequest))
}

func (o *ListPermissionsRequest) Clone() *ListPermissionsRequest {
	if o == nil {
		return nil
	}
	result := &ListPermissionsRequest{}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &permission.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &permission.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &permission.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*permission.Permission_FieldMask)
	result.View = o.View
	return result
}

func (o *ListPermissionsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListPermissionsRequest) Merge(source *ListPermissionsRequest) {
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &permission.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &permission.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &permission.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(permission.Permission_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *ListPermissionsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListPermissionsRequest))
}

func (o *ListPermissionsResponse) GotenObjectExt() {}

func (o *ListPermissionsResponse) MakeFullFieldMask() *ListPermissionsResponse_FieldMask {
	return FullListPermissionsResponse_FieldMask()
}

func (o *ListPermissionsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListPermissionsResponse_FieldMask()
}

func (o *ListPermissionsResponse) MakeDiffFieldMask(other *ListPermissionsResponse) *ListPermissionsResponse_FieldMask {
	if o == nil && other == nil {
		return &ListPermissionsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListPermissionsResponse_FieldMask()
	}

	res := &ListPermissionsResponse_FieldMask{}

	if len(o.GetPermissions()) == len(other.GetPermissions()) {
		for i, lValue := range o.GetPermissions() {
			rValue := other.GetPermissions()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &ListPermissionsResponse_FieldTerminalPath{selector: ListPermissionsResponse_FieldPathSelectorPermissions})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ListPermissionsResponse_FieldTerminalPath{selector: ListPermissionsResponse_FieldPathSelectorPermissions})
	}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &ListPermissionsResponse_FieldTerminalPath{selector: ListPermissionsResponse_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &ListPermissionsResponse_FieldTerminalPath{selector: ListPermissionsResponse_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *ListPermissionsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListPermissionsResponse))
}

func (o *ListPermissionsResponse) Clone() *ListPermissionsResponse {
	if o == nil {
		return nil
	}
	result := &ListPermissionsResponse{}
	result.Permissions = make([]*permission.Permission, len(o.Permissions))
	for i, sourceValue := range o.Permissions {
		result.Permissions[i] = sourceValue.Clone()
	}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &permission.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &permission.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *ListPermissionsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListPermissionsResponse) Merge(source *ListPermissionsResponse) {
	for _, sourceValue := range source.GetPermissions() {
		exists := false
		for _, currentValue := range o.Permissions {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *permission.Permission
			if sourceValue != nil {
				newDstElement = new(permission.Permission)
				newDstElement.Merge(sourceValue)
			}
			o.Permissions = append(o.Permissions, newDstElement)
		}
	}

	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &permission.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &permission.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *ListPermissionsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListPermissionsResponse))
}

func (o *WatchPermissionRequest) GotenObjectExt() {}

func (o *WatchPermissionRequest) MakeFullFieldMask() *WatchPermissionRequest_FieldMask {
	return FullWatchPermissionRequest_FieldMask()
}

func (o *WatchPermissionRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchPermissionRequest_FieldMask()
}

func (o *WatchPermissionRequest) MakeDiffFieldMask(other *WatchPermissionRequest) *WatchPermissionRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchPermissionRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchPermissionRequest_FieldMask()
	}

	res := &WatchPermissionRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &WatchPermissionRequest_FieldTerminalPath{selector: WatchPermissionRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchPermissionRequest_FieldTerminalPath{selector: WatchPermissionRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchPermissionRequest_FieldTerminalPath{selector: WatchPermissionRequest_FieldPathSelectorView})
	}
	return res
}

func (o *WatchPermissionRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchPermissionRequest))
}

func (o *WatchPermissionRequest) Clone() *WatchPermissionRequest {
	if o == nil {
		return nil
	}
	result := &WatchPermissionRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &permission.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*permission.Permission_FieldMask)
	result.View = o.View
	return result
}

func (o *WatchPermissionRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchPermissionRequest) Merge(source *WatchPermissionRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &permission.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(permission.Permission_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *WatchPermissionRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchPermissionRequest))
}

func (o *WatchPermissionResponse) GotenObjectExt() {}

func (o *WatchPermissionResponse) MakeFullFieldMask() *WatchPermissionResponse_FieldMask {
	return FullWatchPermissionResponse_FieldMask()
}

func (o *WatchPermissionResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchPermissionResponse_FieldMask()
}

func (o *WatchPermissionResponse) MakeDiffFieldMask(other *WatchPermissionResponse) *WatchPermissionResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchPermissionResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchPermissionResponse_FieldMask()
	}

	res := &WatchPermissionResponse_FieldMask{}
	if !proto.Equal(o.GetChange(), other.GetChange()) {
		res.Paths = append(res.Paths, &WatchPermissionResponse_FieldTerminalPath{selector: WatchPermissionResponse_FieldPathSelectorChange})
	}
	return res
}

func (o *WatchPermissionResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchPermissionResponse))
}

func (o *WatchPermissionResponse) Clone() *WatchPermissionResponse {
	if o == nil {
		return nil
	}
	result := &WatchPermissionResponse{}
	result.Change = proto.Clone(o.Change).(*permission.PermissionChange)
	return result
}

func (o *WatchPermissionResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchPermissionResponse) Merge(source *WatchPermissionResponse) {
	if source.GetChange() != nil {
		if o.Change == nil {
			o.Change = new(permission.PermissionChange)
		}
		proto.Merge(o.Change, source.GetChange())
	}
}

func (o *WatchPermissionResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchPermissionResponse))
}

func (o *WatchPermissionsRequest) GotenObjectExt() {}

func (o *WatchPermissionsRequest) MakeFullFieldMask() *WatchPermissionsRequest_FieldMask {
	return FullWatchPermissionsRequest_FieldMask()
}

func (o *WatchPermissionsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchPermissionsRequest_FieldMask()
}

func (o *WatchPermissionsRequest) MakeDiffFieldMask(other *WatchPermissionsRequest) *WatchPermissionsRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchPermissionsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchPermissionsRequest_FieldMask()
	}

	res := &WatchPermissionsRequest_FieldMask{}
	if o.GetType() != other.GetType() {
		res.Paths = append(res.Paths, &WatchPermissionsRequest_FieldTerminalPath{selector: WatchPermissionsRequest_FieldPathSelectorType})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &WatchPermissionsRequest_FieldTerminalPath{selector: WatchPermissionsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &WatchPermissionsRequest_FieldTerminalPath{selector: WatchPermissionsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &WatchPermissionsRequest_FieldTerminalPath{selector: WatchPermissionsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchPermissionsRequest_FieldTerminalPath{selector: WatchPermissionsRequest_FieldPathSelectorResumeToken})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &WatchPermissionsRequest_FieldTerminalPath{selector: WatchPermissionsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchPermissionsRequest_FieldTerminalPath{selector: WatchPermissionsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchPermissionsRequest_FieldTerminalPath{selector: WatchPermissionsRequest_FieldPathSelectorView})
	}
	if o.GetMaxChunkSize() != other.GetMaxChunkSize() {
		res.Paths = append(res.Paths, &WatchPermissionsRequest_FieldTerminalPath{selector: WatchPermissionsRequest_FieldPathSelectorMaxChunkSize})
	}
	return res
}

func (o *WatchPermissionsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchPermissionsRequest))
}

func (o *WatchPermissionsRequest) Clone() *WatchPermissionsRequest {
	if o == nil {
		return nil
	}
	result := &WatchPermissionsRequest{}
	result.Type = o.Type
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &permission.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &permission.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.ResumeToken = o.ResumeToken
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &permission.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*permission.Permission_FieldMask)
	result.View = o.View
	result.MaxChunkSize = o.MaxChunkSize
	return result
}

func (o *WatchPermissionsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchPermissionsRequest) Merge(source *WatchPermissionsRequest) {
	o.Type = source.GetType()
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &permission.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &permission.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	o.ResumeToken = source.GetResumeToken()
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &permission.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(permission.Permission_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.MaxChunkSize = source.GetMaxChunkSize()
}

func (o *WatchPermissionsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchPermissionsRequest))
}

func (o *WatchPermissionsResponse) GotenObjectExt() {}

func (o *WatchPermissionsResponse) MakeFullFieldMask() *WatchPermissionsResponse_FieldMask {
	return FullWatchPermissionsResponse_FieldMask()
}

func (o *WatchPermissionsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchPermissionsResponse_FieldMask()
}

func (o *WatchPermissionsResponse) MakeDiffFieldMask(other *WatchPermissionsResponse) *WatchPermissionsResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchPermissionsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchPermissionsResponse_FieldMask()
	}

	res := &WatchPermissionsResponse_FieldMask{}

	if len(o.GetPermissionChanges()) == len(other.GetPermissionChanges()) {
		for i, lValue := range o.GetPermissionChanges() {
			rValue := other.GetPermissionChanges()[i]
			if !proto.Equal(lValue, rValue) {
				res.Paths = append(res.Paths, &WatchPermissionsResponse_FieldTerminalPath{selector: WatchPermissionsResponse_FieldPathSelectorPermissionChanges})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &WatchPermissionsResponse_FieldTerminalPath{selector: WatchPermissionsResponse_FieldPathSelectorPermissionChanges})
	}
	if o.GetIsCurrent() != other.GetIsCurrent() {
		res.Paths = append(res.Paths, &WatchPermissionsResponse_FieldTerminalPath{selector: WatchPermissionsResponse_FieldPathSelectorIsCurrent})
	}
	{
		subMask := o.GetPageTokenChange().MakeDiffFieldMask(other.GetPageTokenChange())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &WatchPermissionsResponse_FieldTerminalPath{selector: WatchPermissionsResponse_FieldPathSelectorPageTokenChange})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &WatchPermissionsResponse_FieldSubPath{selector: WatchPermissionsResponse_FieldPathSelectorPageTokenChange, subPath: subpath})
			}
		}
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchPermissionsResponse_FieldTerminalPath{selector: WatchPermissionsResponse_FieldPathSelectorResumeToken})
	}
	if o.GetSnapshotSize() != other.GetSnapshotSize() {
		res.Paths = append(res.Paths, &WatchPermissionsResponse_FieldTerminalPath{selector: WatchPermissionsResponse_FieldPathSelectorSnapshotSize})
	}
	if o.GetIsSoftReset() != other.GetIsSoftReset() {
		res.Paths = append(res.Paths, &WatchPermissionsResponse_FieldTerminalPath{selector: WatchPermissionsResponse_FieldPathSelectorIsSoftReset})
	}
	if o.GetIsHardReset() != other.GetIsHardReset() {
		res.Paths = append(res.Paths, &WatchPermissionsResponse_FieldTerminalPath{selector: WatchPermissionsResponse_FieldPathSelectorIsHardReset})
	}
	return res
}

func (o *WatchPermissionsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchPermissionsResponse))
}

func (o *WatchPermissionsResponse) Clone() *WatchPermissionsResponse {
	if o == nil {
		return nil
	}
	result := &WatchPermissionsResponse{}
	result.PermissionChanges = make([]*permission.PermissionChange, len(o.PermissionChanges))
	for i, sourceValue := range o.PermissionChanges {
		result.PermissionChanges[i] = proto.Clone(sourceValue).(*permission.PermissionChange)
	}
	result.IsCurrent = o.IsCurrent
	result.PageTokenChange = o.PageTokenChange.Clone()
	result.ResumeToken = o.ResumeToken
	result.SnapshotSize = o.SnapshotSize
	result.IsSoftReset = o.IsSoftReset
	result.IsHardReset = o.IsHardReset
	return result
}

func (o *WatchPermissionsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchPermissionsResponse) Merge(source *WatchPermissionsResponse) {
	for _, sourceValue := range source.GetPermissionChanges() {
		exists := false
		for _, currentValue := range o.PermissionChanges {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *permission.PermissionChange
			if sourceValue != nil {
				newDstElement = new(permission.PermissionChange)
				proto.Merge(newDstElement, sourceValue)
			}
			o.PermissionChanges = append(o.PermissionChanges, newDstElement)
		}
	}

	o.IsCurrent = source.GetIsCurrent()
	if source.GetPageTokenChange() != nil {
		if o.PageTokenChange == nil {
			o.PageTokenChange = new(WatchPermissionsResponse_PageTokenChange)
		}
		o.PageTokenChange.Merge(source.GetPageTokenChange())
	}
	o.ResumeToken = source.GetResumeToken()
	o.SnapshotSize = source.GetSnapshotSize()
	o.IsSoftReset = source.GetIsSoftReset()
	o.IsHardReset = source.GetIsHardReset()
}

func (o *WatchPermissionsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchPermissionsResponse))
}

func (o *WatchPermissionsResponse_PageTokenChange) GotenObjectExt() {}

func (o *WatchPermissionsResponse_PageTokenChange) MakeFullFieldMask() *WatchPermissionsResponse_PageTokenChange_FieldMask {
	return FullWatchPermissionsResponse_PageTokenChange_FieldMask()
}

func (o *WatchPermissionsResponse_PageTokenChange) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchPermissionsResponse_PageTokenChange_FieldMask()
}

func (o *WatchPermissionsResponse_PageTokenChange) MakeDiffFieldMask(other *WatchPermissionsResponse_PageTokenChange) *WatchPermissionsResponse_PageTokenChange_FieldMask {
	if o == nil && other == nil {
		return &WatchPermissionsResponse_PageTokenChange_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchPermissionsResponse_PageTokenChange_FieldMask()
	}

	res := &WatchPermissionsResponse_PageTokenChange_FieldMask{}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &WatchPermissionsResponsePageTokenChange_FieldTerminalPath{selector: WatchPermissionsResponsePageTokenChange_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &WatchPermissionsResponsePageTokenChange_FieldTerminalPath{selector: WatchPermissionsResponsePageTokenChange_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *WatchPermissionsResponse_PageTokenChange) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchPermissionsResponse_PageTokenChange))
}

func (o *WatchPermissionsResponse_PageTokenChange) Clone() *WatchPermissionsResponse_PageTokenChange {
	if o == nil {
		return nil
	}
	result := &WatchPermissionsResponse_PageTokenChange{}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &permission.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &permission.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *WatchPermissionsResponse_PageTokenChange) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchPermissionsResponse_PageTokenChange) Merge(source *WatchPermissionsResponse_PageTokenChange) {
	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &permission.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &permission.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *WatchPermissionsResponse_PageTokenChange) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchPermissionsResponse_PageTokenChange))
}

func (o *CreatePermissionRequest) GotenObjectExt() {}

func (o *CreatePermissionRequest) MakeFullFieldMask() *CreatePermissionRequest_FieldMask {
	return FullCreatePermissionRequest_FieldMask()
}

func (o *CreatePermissionRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullCreatePermissionRequest_FieldMask()
}

func (o *CreatePermissionRequest) MakeDiffFieldMask(other *CreatePermissionRequest) *CreatePermissionRequest_FieldMask {
	if o == nil && other == nil {
		return &CreatePermissionRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullCreatePermissionRequest_FieldMask()
	}

	res := &CreatePermissionRequest_FieldMask{}
	{
		subMask := o.GetPermission().MakeDiffFieldMask(other.GetPermission())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &CreatePermissionRequest_FieldTerminalPath{selector: CreatePermissionRequest_FieldPathSelectorPermission})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &CreatePermissionRequest_FieldSubPath{selector: CreatePermissionRequest_FieldPathSelectorPermission, subPath: subpath})
			}
		}
	}
	return res
}

func (o *CreatePermissionRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*CreatePermissionRequest))
}

func (o *CreatePermissionRequest) Clone() *CreatePermissionRequest {
	if o == nil {
		return nil
	}
	result := &CreatePermissionRequest{}
	result.Permission = o.Permission.Clone()
	return result
}

func (o *CreatePermissionRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *CreatePermissionRequest) Merge(source *CreatePermissionRequest) {
	if source.GetPermission() != nil {
		if o.Permission == nil {
			o.Permission = new(permission.Permission)
		}
		o.Permission.Merge(source.GetPermission())
	}
}

func (o *CreatePermissionRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*CreatePermissionRequest))
}

func (o *UpdatePermissionRequest) GotenObjectExt() {}

func (o *UpdatePermissionRequest) MakeFullFieldMask() *UpdatePermissionRequest_FieldMask {
	return FullUpdatePermissionRequest_FieldMask()
}

func (o *UpdatePermissionRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdatePermissionRequest_FieldMask()
}

func (o *UpdatePermissionRequest) MakeDiffFieldMask(other *UpdatePermissionRequest) *UpdatePermissionRequest_FieldMask {
	if o == nil && other == nil {
		return &UpdatePermissionRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdatePermissionRequest_FieldMask()
	}

	res := &UpdatePermissionRequest_FieldMask{}
	{
		subMask := o.GetPermission().MakeDiffFieldMask(other.GetPermission())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdatePermissionRequest_FieldTerminalPath{selector: UpdatePermissionRequest_FieldPathSelectorPermission})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdatePermissionRequest_FieldSubPath{selector: UpdatePermissionRequest_FieldPathSelectorPermission, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetUpdateMask(), other.GetUpdateMask()) {
		res.Paths = append(res.Paths, &UpdatePermissionRequest_FieldTerminalPath{selector: UpdatePermissionRequest_FieldPathSelectorUpdateMask})
	}
	{
		subMask := o.GetCas().MakeDiffFieldMask(other.GetCas())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdatePermissionRequest_FieldTerminalPath{selector: UpdatePermissionRequest_FieldPathSelectorCas})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdatePermissionRequest_FieldSubPath{selector: UpdatePermissionRequest_FieldPathSelectorCas, subPath: subpath})
			}
		}
	}
	return res
}

func (o *UpdatePermissionRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdatePermissionRequest))
}

func (o *UpdatePermissionRequest) Clone() *UpdatePermissionRequest {
	if o == nil {
		return nil
	}
	result := &UpdatePermissionRequest{}
	result.Permission = o.Permission.Clone()
	result.UpdateMask = proto.Clone(o.UpdateMask).(*permission.Permission_FieldMask)
	result.Cas = o.Cas.Clone()
	return result
}

func (o *UpdatePermissionRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdatePermissionRequest) Merge(source *UpdatePermissionRequest) {
	if source.GetPermission() != nil {
		if o.Permission == nil {
			o.Permission = new(permission.Permission)
		}
		o.Permission.Merge(source.GetPermission())
	}
	if source.GetUpdateMask() != nil {
		if o.UpdateMask == nil {
			o.UpdateMask = new(permission.Permission_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetUpdateMask().ToProtoFieldMask(), o.UpdateMask.ToProtoFieldMask())
		if err := o.UpdateMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	if source.GetCas() != nil {
		if o.Cas == nil {
			o.Cas = new(UpdatePermissionRequest_CAS)
		}
		o.Cas.Merge(source.GetCas())
	}
}

func (o *UpdatePermissionRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdatePermissionRequest))
}

func (o *UpdatePermissionRequest_CAS) GotenObjectExt() {}

func (o *UpdatePermissionRequest_CAS) MakeFullFieldMask() *UpdatePermissionRequest_CAS_FieldMask {
	return FullUpdatePermissionRequest_CAS_FieldMask()
}

func (o *UpdatePermissionRequest_CAS) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdatePermissionRequest_CAS_FieldMask()
}

func (o *UpdatePermissionRequest_CAS) MakeDiffFieldMask(other *UpdatePermissionRequest_CAS) *UpdatePermissionRequest_CAS_FieldMask {
	if o == nil && other == nil {
		return &UpdatePermissionRequest_CAS_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdatePermissionRequest_CAS_FieldMask()
	}

	res := &UpdatePermissionRequest_CAS_FieldMask{}
	{
		subMask := o.GetConditionalState().MakeDiffFieldMask(other.GetConditionalState())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdatePermissionRequestCAS_FieldTerminalPath{selector: UpdatePermissionRequestCAS_FieldPathSelectorConditionalState})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdatePermissionRequestCAS_FieldSubPath{selector: UpdatePermissionRequestCAS_FieldPathSelectorConditionalState, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &UpdatePermissionRequestCAS_FieldTerminalPath{selector: UpdatePermissionRequestCAS_FieldPathSelectorFieldMask})
	}
	return res
}

func (o *UpdatePermissionRequest_CAS) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdatePermissionRequest_CAS))
}

func (o *UpdatePermissionRequest_CAS) Clone() *UpdatePermissionRequest_CAS {
	if o == nil {
		return nil
	}
	result := &UpdatePermissionRequest_CAS{}
	result.ConditionalState = o.ConditionalState.Clone()
	result.FieldMask = proto.Clone(o.FieldMask).(*permission.Permission_FieldMask)
	return result
}

func (o *UpdatePermissionRequest_CAS) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdatePermissionRequest_CAS) Merge(source *UpdatePermissionRequest_CAS) {
	if source.GetConditionalState() != nil {
		if o.ConditionalState == nil {
			o.ConditionalState = new(permission.Permission)
		}
		o.ConditionalState.Merge(source.GetConditionalState())
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(permission.Permission_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
}

func (o *UpdatePermissionRequest_CAS) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdatePermissionRequest_CAS))
}

func (o *DeletePermissionRequest) GotenObjectExt() {}

func (o *DeletePermissionRequest) MakeFullFieldMask() *DeletePermissionRequest_FieldMask {
	return FullDeletePermissionRequest_FieldMask()
}

func (o *DeletePermissionRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDeletePermissionRequest_FieldMask()
}

func (o *DeletePermissionRequest) MakeDiffFieldMask(other *DeletePermissionRequest) *DeletePermissionRequest_FieldMask {
	if o == nil && other == nil {
		return &DeletePermissionRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDeletePermissionRequest_FieldMask()
	}

	res := &DeletePermissionRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &DeletePermissionRequest_FieldTerminalPath{selector: DeletePermissionRequest_FieldPathSelectorName})
	}
	return res
}

func (o *DeletePermissionRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*DeletePermissionRequest))
}

func (o *DeletePermissionRequest) Clone() *DeletePermissionRequest {
	if o == nil {
		return nil
	}
	result := &DeletePermissionRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &permission.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *DeletePermissionRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *DeletePermissionRequest) Merge(source *DeletePermissionRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &permission.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
}

func (o *DeletePermissionRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*DeletePermissionRequest))
}
