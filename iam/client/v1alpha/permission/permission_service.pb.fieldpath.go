// Code generated by protoc-gen-goten-object
// File: edgelq/iam/proto/v1alpha/permission_service.proto
// DO NOT EDIT!!!

package permission_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	permission "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha/permission"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &permission.Permission{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type GetPermissionRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() GetPermissionRequest_FieldPathSelector
	Get(source *GetPermissionRequest) []interface{}
	GetSingle(source *GetPermissionRequest) (interface{}, bool)
	ClearValue(item *GetPermissionRequest)

	// Those methods build corresponding GetPermissionRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) GetPermissionRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) GetPermissionRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) GetPermissionRequest_FieldPathArrayItemValue
}

type GetPermissionRequest_FieldPathSelector int32

const (
	GetPermissionRequest_FieldPathSelectorName      GetPermissionRequest_FieldPathSelector = 0
	GetPermissionRequest_FieldPathSelectorFieldMask GetPermissionRequest_FieldPathSelector = 1
	GetPermissionRequest_FieldPathSelectorView      GetPermissionRequest_FieldPathSelector = 2
)

func (s GetPermissionRequest_FieldPathSelector) String() string {
	switch s {
	case GetPermissionRequest_FieldPathSelectorName:
		return "name"
	case GetPermissionRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case GetPermissionRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for GetPermissionRequest: %d", s))
	}
}

func BuildGetPermissionRequest_FieldPath(fp gotenobject.RawFieldPath) (GetPermissionRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object GetPermissionRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &GetPermissionRequest_FieldTerminalPath{selector: GetPermissionRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &GetPermissionRequest_FieldTerminalPath{selector: GetPermissionRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &GetPermissionRequest_FieldTerminalPath{selector: GetPermissionRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object GetPermissionRequest", fp)
}

func ParseGetPermissionRequest_FieldPath(rawField string) (GetPermissionRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildGetPermissionRequest_FieldPath(fp)
}

func MustParseGetPermissionRequest_FieldPath(rawField string) GetPermissionRequest_FieldPath {
	fp, err := ParseGetPermissionRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type GetPermissionRequest_FieldTerminalPath struct {
	selector GetPermissionRequest_FieldPathSelector
}

var _ GetPermissionRequest_FieldPath = (*GetPermissionRequest_FieldTerminalPath)(nil)

func (fp *GetPermissionRequest_FieldTerminalPath) Selector() GetPermissionRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *GetPermissionRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *GetPermissionRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source GetPermissionRequest
func (fp *GetPermissionRequest_FieldTerminalPath) Get(source *GetPermissionRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case GetPermissionRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case GetPermissionRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case GetPermissionRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for GetPermissionRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *GetPermissionRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*GetPermissionRequest))
}

// GetSingle returns value pointed by specific field of from source GetPermissionRequest
func (fp *GetPermissionRequest_FieldTerminalPath) GetSingle(source *GetPermissionRequest) (interface{}, bool) {
	switch fp.selector {
	case GetPermissionRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case GetPermissionRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case GetPermissionRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for GetPermissionRequest: %d", fp.selector))
	}
}

func (fp *GetPermissionRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*GetPermissionRequest))
}

// GetDefault returns a default value of the field type
func (fp *GetPermissionRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case GetPermissionRequest_FieldPathSelectorName:
		return (*permission.Reference)(nil)
	case GetPermissionRequest_FieldPathSelectorFieldMask:
		return (*permission.Permission_FieldMask)(nil)
	case GetPermissionRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for GetPermissionRequest: %d", fp.selector))
	}
}

func (fp *GetPermissionRequest_FieldTerminalPath) ClearValue(item *GetPermissionRequest) {
	if item != nil {
		switch fp.selector {
		case GetPermissionRequest_FieldPathSelectorName:
			item.Name = nil
		case GetPermissionRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case GetPermissionRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for GetPermissionRequest: %d", fp.selector))
		}
	}
}

func (fp *GetPermissionRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*GetPermissionRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *GetPermissionRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == GetPermissionRequest_FieldPathSelectorName ||
		fp.selector == GetPermissionRequest_FieldPathSelectorFieldMask ||
		fp.selector == GetPermissionRequest_FieldPathSelectorView
}

func (fp *GetPermissionRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *GetPermissionRequest_FieldTerminalPath) WithIValue(value interface{}) GetPermissionRequest_FieldPathValue {
	switch fp.selector {
	case GetPermissionRequest_FieldPathSelectorName:
		return &GetPermissionRequest_FieldTerminalPathValue{GetPermissionRequest_FieldTerminalPath: *fp, value: value.(*permission.Reference)}
	case GetPermissionRequest_FieldPathSelectorFieldMask:
		return &GetPermissionRequest_FieldTerminalPathValue{GetPermissionRequest_FieldTerminalPath: *fp, value: value.(*permission.Permission_FieldMask)}
	case GetPermissionRequest_FieldPathSelectorView:
		return &GetPermissionRequest_FieldTerminalPathValue{GetPermissionRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetPermissionRequest: %d", fp.selector))
	}
}

func (fp *GetPermissionRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *GetPermissionRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) GetPermissionRequest_FieldPathArrayOfValues {
	fpaov := &GetPermissionRequest_FieldTerminalPathArrayOfValues{GetPermissionRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case GetPermissionRequest_FieldPathSelectorName:
		return &GetPermissionRequest_FieldTerminalPathArrayOfValues{GetPermissionRequest_FieldTerminalPath: *fp, values: values.([]*permission.Reference)}
	case GetPermissionRequest_FieldPathSelectorFieldMask:
		return &GetPermissionRequest_FieldTerminalPathArrayOfValues{GetPermissionRequest_FieldTerminalPath: *fp, values: values.([]*permission.Permission_FieldMask)}
	case GetPermissionRequest_FieldPathSelectorView:
		return &GetPermissionRequest_FieldTerminalPathArrayOfValues{GetPermissionRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetPermissionRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *GetPermissionRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *GetPermissionRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) GetPermissionRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for GetPermissionRequest: %d", fp.selector))
	}
}

func (fp *GetPermissionRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// GetPermissionRequest_FieldPathValue allows storing values for GetPermissionRequest fields according to their type
type GetPermissionRequest_FieldPathValue interface {
	GetPermissionRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **GetPermissionRequest)
	CompareWith(*GetPermissionRequest) (cmp int, comparable bool)
}

func ParseGetPermissionRequest_FieldPathValue(pathStr, valueStr string) (GetPermissionRequest_FieldPathValue, error) {
	fp, err := ParseGetPermissionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetPermissionRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(GetPermissionRequest_FieldPathValue), nil
}

func MustParseGetPermissionRequest_FieldPathValue(pathStr, valueStr string) GetPermissionRequest_FieldPathValue {
	fpv, err := ParseGetPermissionRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type GetPermissionRequest_FieldTerminalPathValue struct {
	GetPermissionRequest_FieldTerminalPath
	value interface{}
}

var _ GetPermissionRequest_FieldPathValue = (*GetPermissionRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'GetPermissionRequest' as interface{}
func (fpv *GetPermissionRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *GetPermissionRequest_FieldTerminalPathValue) AsNameValue() (*permission.Reference, bool) {
	res, ok := fpv.value.(*permission.Reference)
	return res, ok
}
func (fpv *GetPermissionRequest_FieldTerminalPathValue) AsFieldMaskValue() (*permission.Permission_FieldMask, bool) {
	res, ok := fpv.value.(*permission.Permission_FieldMask)
	return res, ok
}
func (fpv *GetPermissionRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object GetPermissionRequest
func (fpv *GetPermissionRequest_FieldTerminalPathValue) SetTo(target **GetPermissionRequest) {
	if *target == nil {
		*target = new(GetPermissionRequest)
	}
	switch fpv.selector {
	case GetPermissionRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*permission.Reference)
	case GetPermissionRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*permission.Permission_FieldMask)
	case GetPermissionRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for GetPermissionRequest: %d", fpv.selector))
	}
}

func (fpv *GetPermissionRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*GetPermissionRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'GetPermissionRequest_FieldTerminalPathValue' with the value under path in 'GetPermissionRequest'.
func (fpv *GetPermissionRequest_FieldTerminalPathValue) CompareWith(source *GetPermissionRequest) (int, bool) {
	switch fpv.selector {
	case GetPermissionRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*permission.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case GetPermissionRequest_FieldPathSelectorFieldMask:
		return 0, false
	case GetPermissionRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for GetPermissionRequest: %d", fpv.selector))
	}
}

func (fpv *GetPermissionRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*GetPermissionRequest))
}

// GetPermissionRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for GetPermissionRequest according to their type
// Present only for array (repeated) types.
type GetPermissionRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	GetPermissionRequest_FieldPath
	ContainsValue(*GetPermissionRequest) bool
}

// ParseGetPermissionRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseGetPermissionRequest_FieldPathArrayItemValue(pathStr, valueStr string) (GetPermissionRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseGetPermissionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetPermissionRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(GetPermissionRequest_FieldPathArrayItemValue), nil
}

func MustParseGetPermissionRequest_FieldPathArrayItemValue(pathStr, valueStr string) GetPermissionRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseGetPermissionRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type GetPermissionRequest_FieldTerminalPathArrayItemValue struct {
	GetPermissionRequest_FieldTerminalPath
	value interface{}
}

var _ GetPermissionRequest_FieldPathArrayItemValue = (*GetPermissionRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object GetPermissionRequest as interface{}
func (fpaiv *GetPermissionRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *GetPermissionRequest_FieldTerminalPathArrayItemValue) GetSingle(source *GetPermissionRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *GetPermissionRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*GetPermissionRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'GetPermissionRequest'
func (fpaiv *GetPermissionRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *GetPermissionRequest) bool {
	slice := fpaiv.GetPermissionRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// GetPermissionRequest_FieldPathArrayOfValues allows storing slice of values for GetPermissionRequest fields according to their type
type GetPermissionRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	GetPermissionRequest_FieldPath
}

func ParseGetPermissionRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (GetPermissionRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseGetPermissionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetPermissionRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(GetPermissionRequest_FieldPathArrayOfValues), nil
}

func MustParseGetPermissionRequest_FieldPathArrayOfValues(pathStr, valuesStr string) GetPermissionRequest_FieldPathArrayOfValues {
	fpaov, err := ParseGetPermissionRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type GetPermissionRequest_FieldTerminalPathArrayOfValues struct {
	GetPermissionRequest_FieldTerminalPath
	values interface{}
}

var _ GetPermissionRequest_FieldPathArrayOfValues = (*GetPermissionRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *GetPermissionRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case GetPermissionRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*permission.Reference) {
			values = append(values, v)
		}
	case GetPermissionRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*permission.Permission_FieldMask) {
			values = append(values, v)
		}
	case GetPermissionRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *GetPermissionRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*permission.Reference, bool) {
	res, ok := fpaov.values.([]*permission.Reference)
	return res, ok
}
func (fpaov *GetPermissionRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*permission.Permission_FieldMask, bool) {
	res, ok := fpaov.values.([]*permission.Permission_FieldMask)
	return res, ok
}
func (fpaov *GetPermissionRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetPermissionsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetPermissionsRequest_FieldPathSelector
	Get(source *BatchGetPermissionsRequest) []interface{}
	GetSingle(source *BatchGetPermissionsRequest) (interface{}, bool)
	ClearValue(item *BatchGetPermissionsRequest)

	// Those methods build corresponding BatchGetPermissionsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetPermissionsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetPermissionsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetPermissionsRequest_FieldPathArrayItemValue
}

type BatchGetPermissionsRequest_FieldPathSelector int32

const (
	BatchGetPermissionsRequest_FieldPathSelectorNames     BatchGetPermissionsRequest_FieldPathSelector = 0
	BatchGetPermissionsRequest_FieldPathSelectorFieldMask BatchGetPermissionsRequest_FieldPathSelector = 1
	BatchGetPermissionsRequest_FieldPathSelectorView      BatchGetPermissionsRequest_FieldPathSelector = 2
)

func (s BatchGetPermissionsRequest_FieldPathSelector) String() string {
	switch s {
	case BatchGetPermissionsRequest_FieldPathSelectorNames:
		return "names"
	case BatchGetPermissionsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case BatchGetPermissionsRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPermissionsRequest: %d", s))
	}
}

func BuildBatchGetPermissionsRequest_FieldPath(fp gotenobject.RawFieldPath) (BatchGetPermissionsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetPermissionsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "names":
			return &BatchGetPermissionsRequest_FieldTerminalPath{selector: BatchGetPermissionsRequest_FieldPathSelectorNames}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &BatchGetPermissionsRequest_FieldTerminalPath{selector: BatchGetPermissionsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &BatchGetPermissionsRequest_FieldTerminalPath{selector: BatchGetPermissionsRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetPermissionsRequest", fp)
}

func ParseBatchGetPermissionsRequest_FieldPath(rawField string) (BatchGetPermissionsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetPermissionsRequest_FieldPath(fp)
}

func MustParseBatchGetPermissionsRequest_FieldPath(rawField string) BatchGetPermissionsRequest_FieldPath {
	fp, err := ParseBatchGetPermissionsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetPermissionsRequest_FieldTerminalPath struct {
	selector BatchGetPermissionsRequest_FieldPathSelector
}

var _ BatchGetPermissionsRequest_FieldPath = (*BatchGetPermissionsRequest_FieldTerminalPath)(nil)

func (fp *BatchGetPermissionsRequest_FieldTerminalPath) Selector() BatchGetPermissionsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetPermissionsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetPermissionsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetPermissionsRequest
func (fp *BatchGetPermissionsRequest_FieldTerminalPath) Get(source *BatchGetPermissionsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetPermissionsRequest_FieldPathSelectorNames:
			for _, value := range source.GetNames() {
				values = append(values, value)
			}
		case BatchGetPermissionsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case BatchGetPermissionsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetPermissionsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetPermissionsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetPermissionsRequest))
}

// GetSingle returns value pointed by specific field of from source BatchGetPermissionsRequest
func (fp *BatchGetPermissionsRequest_FieldTerminalPath) GetSingle(source *BatchGetPermissionsRequest) (interface{}, bool) {
	switch fp.selector {
	case BatchGetPermissionsRequest_FieldPathSelectorNames:
		res := source.GetNames()
		return res, res != nil
	case BatchGetPermissionsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case BatchGetPermissionsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPermissionsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetPermissionsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetPermissionsRequest))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetPermissionsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetPermissionsRequest_FieldPathSelectorNames:
		return ([]*permission.Reference)(nil)
	case BatchGetPermissionsRequest_FieldPathSelectorFieldMask:
		return (*permission.Permission_FieldMask)(nil)
	case BatchGetPermissionsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPermissionsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetPermissionsRequest_FieldTerminalPath) ClearValue(item *BatchGetPermissionsRequest) {
	if item != nil {
		switch fp.selector {
		case BatchGetPermissionsRequest_FieldPathSelectorNames:
			item.Names = nil
		case BatchGetPermissionsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case BatchGetPermissionsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetPermissionsRequest: %d", fp.selector))
		}
	}
}

func (fp *BatchGetPermissionsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetPermissionsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetPermissionsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetPermissionsRequest_FieldPathSelectorNames ||
		fp.selector == BatchGetPermissionsRequest_FieldPathSelectorFieldMask ||
		fp.selector == BatchGetPermissionsRequest_FieldPathSelectorView
}

func (fp *BatchGetPermissionsRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *BatchGetPermissionsRequest_FieldTerminalPath) WithIValue(value interface{}) BatchGetPermissionsRequest_FieldPathValue {
	switch fp.selector {
	case BatchGetPermissionsRequest_FieldPathSelectorNames:
		return &BatchGetPermissionsRequest_FieldTerminalPathValue{BatchGetPermissionsRequest_FieldTerminalPath: *fp, value: value.([]*permission.Reference)}
	case BatchGetPermissionsRequest_FieldPathSelectorFieldMask:
		return &BatchGetPermissionsRequest_FieldTerminalPathValue{BatchGetPermissionsRequest_FieldTerminalPath: *fp, value: value.(*permission.Permission_FieldMask)}
	case BatchGetPermissionsRequest_FieldPathSelectorView:
		return &BatchGetPermissionsRequest_FieldTerminalPathValue{BatchGetPermissionsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPermissionsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetPermissionsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetPermissionsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetPermissionsRequest_FieldPathArrayOfValues {
	fpaov := &BatchGetPermissionsRequest_FieldTerminalPathArrayOfValues{BatchGetPermissionsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetPermissionsRequest_FieldPathSelectorNames:
		return &BatchGetPermissionsRequest_FieldTerminalPathArrayOfValues{BatchGetPermissionsRequest_FieldTerminalPath: *fp, values: values.([][]*permission.Reference)}
	case BatchGetPermissionsRequest_FieldPathSelectorFieldMask:
		return &BatchGetPermissionsRequest_FieldTerminalPathArrayOfValues{BatchGetPermissionsRequest_FieldTerminalPath: *fp, values: values.([]*permission.Permission_FieldMask)}
	case BatchGetPermissionsRequest_FieldPathSelectorView:
		return &BatchGetPermissionsRequest_FieldTerminalPathArrayOfValues{BatchGetPermissionsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPermissionsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetPermissionsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetPermissionsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetPermissionsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetPermissionsRequest_FieldPathSelectorNames:
		return &BatchGetPermissionsRequest_FieldTerminalPathArrayItemValue{BatchGetPermissionsRequest_FieldTerminalPath: *fp, value: value.(*permission.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPermissionsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetPermissionsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// BatchGetPermissionsRequest_FieldPathValue allows storing values for BatchGetPermissionsRequest fields according to their type
type BatchGetPermissionsRequest_FieldPathValue interface {
	BatchGetPermissionsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetPermissionsRequest)
	CompareWith(*BatchGetPermissionsRequest) (cmp int, comparable bool)
}

func ParseBatchGetPermissionsRequest_FieldPathValue(pathStr, valueStr string) (BatchGetPermissionsRequest_FieldPathValue, error) {
	fp, err := ParseBatchGetPermissionsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetPermissionsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetPermissionsRequest_FieldPathValue), nil
}

func MustParseBatchGetPermissionsRequest_FieldPathValue(pathStr, valueStr string) BatchGetPermissionsRequest_FieldPathValue {
	fpv, err := ParseBatchGetPermissionsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetPermissionsRequest_FieldTerminalPathValue struct {
	BatchGetPermissionsRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetPermissionsRequest_FieldPathValue = (*BatchGetPermissionsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetPermissionsRequest' as interface{}
func (fpv *BatchGetPermissionsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetPermissionsRequest_FieldTerminalPathValue) AsNamesValue() ([]*permission.Reference, bool) {
	res, ok := fpv.value.([]*permission.Reference)
	return res, ok
}
func (fpv *BatchGetPermissionsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*permission.Permission_FieldMask, bool) {
	res, ok := fpv.value.(*permission.Permission_FieldMask)
	return res, ok
}
func (fpv *BatchGetPermissionsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetPermissionsRequest
func (fpv *BatchGetPermissionsRequest_FieldTerminalPathValue) SetTo(target **BatchGetPermissionsRequest) {
	if *target == nil {
		*target = new(BatchGetPermissionsRequest)
	}
	switch fpv.selector {
	case BatchGetPermissionsRequest_FieldPathSelectorNames:
		(*target).Names = fpv.value.([]*permission.Reference)
	case BatchGetPermissionsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*permission.Permission_FieldMask)
	case BatchGetPermissionsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPermissionsRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetPermissionsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetPermissionsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetPermissionsRequest_FieldTerminalPathValue' with the value under path in 'BatchGetPermissionsRequest'.
func (fpv *BatchGetPermissionsRequest_FieldTerminalPathValue) CompareWith(source *BatchGetPermissionsRequest) (int, bool) {
	switch fpv.selector {
	case BatchGetPermissionsRequest_FieldPathSelectorNames:
		return 0, false
	case BatchGetPermissionsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case BatchGetPermissionsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPermissionsRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetPermissionsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetPermissionsRequest))
}

// BatchGetPermissionsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetPermissionsRequest according to their type
// Present only for array (repeated) types.
type BatchGetPermissionsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetPermissionsRequest_FieldPath
	ContainsValue(*BatchGetPermissionsRequest) bool
}

// ParseBatchGetPermissionsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetPermissionsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetPermissionsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetPermissionsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetPermissionsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetPermissionsRequest_FieldPathArrayItemValue), nil
}

func MustParseBatchGetPermissionsRequest_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetPermissionsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetPermissionsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetPermissionsRequest_FieldTerminalPathArrayItemValue struct {
	BatchGetPermissionsRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetPermissionsRequest_FieldPathArrayItemValue = (*BatchGetPermissionsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetPermissionsRequest as interface{}
func (fpaiv *BatchGetPermissionsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetPermissionsRequest_FieldTerminalPathArrayItemValue) AsNamesItemValue() (*permission.Reference, bool) {
	res, ok := fpaiv.value.(*permission.Reference)
	return res, ok
}

func (fpaiv *BatchGetPermissionsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetPermissionsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetPermissionsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetPermissionsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetPermissionsRequest'
func (fpaiv *BatchGetPermissionsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetPermissionsRequest) bool {
	slice := fpaiv.BatchGetPermissionsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// BatchGetPermissionsRequest_FieldPathArrayOfValues allows storing slice of values for BatchGetPermissionsRequest fields according to their type
type BatchGetPermissionsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetPermissionsRequest_FieldPath
}

func ParseBatchGetPermissionsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetPermissionsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetPermissionsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetPermissionsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetPermissionsRequest_FieldPathArrayOfValues), nil
}

func MustParseBatchGetPermissionsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetPermissionsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetPermissionsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetPermissionsRequest_FieldTerminalPathArrayOfValues struct {
	BatchGetPermissionsRequest_FieldTerminalPath
	values interface{}
}

var _ BatchGetPermissionsRequest_FieldPathArrayOfValues = (*BatchGetPermissionsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetPermissionsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetPermissionsRequest_FieldPathSelectorNames:
		for _, v := range fpaov.values.([][]*permission.Reference) {
			values = append(values, v)
		}
	case BatchGetPermissionsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*permission.Permission_FieldMask) {
			values = append(values, v)
		}
	case BatchGetPermissionsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetPermissionsRequest_FieldTerminalPathArrayOfValues) AsNamesArrayOfValues() ([][]*permission.Reference, bool) {
	res, ok := fpaov.values.([][]*permission.Reference)
	return res, ok
}
func (fpaov *BatchGetPermissionsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*permission.Permission_FieldMask, bool) {
	res, ok := fpaov.values.([]*permission.Permission_FieldMask)
	return res, ok
}
func (fpaov *BatchGetPermissionsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetPermissionsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetPermissionsResponse_FieldPathSelector
	Get(source *BatchGetPermissionsResponse) []interface{}
	GetSingle(source *BatchGetPermissionsResponse) (interface{}, bool)
	ClearValue(item *BatchGetPermissionsResponse)

	// Those methods build corresponding BatchGetPermissionsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetPermissionsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetPermissionsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetPermissionsResponse_FieldPathArrayItemValue
}

type BatchGetPermissionsResponse_FieldPathSelector int32

const (
	BatchGetPermissionsResponse_FieldPathSelectorPermissions BatchGetPermissionsResponse_FieldPathSelector = 0
	BatchGetPermissionsResponse_FieldPathSelectorMissing     BatchGetPermissionsResponse_FieldPathSelector = 1
)

func (s BatchGetPermissionsResponse_FieldPathSelector) String() string {
	switch s {
	case BatchGetPermissionsResponse_FieldPathSelectorPermissions:
		return "permissions"
	case BatchGetPermissionsResponse_FieldPathSelectorMissing:
		return "missing"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPermissionsResponse: %d", s))
	}
}

func BuildBatchGetPermissionsResponse_FieldPath(fp gotenobject.RawFieldPath) (BatchGetPermissionsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetPermissionsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "permissions":
			return &BatchGetPermissionsResponse_FieldTerminalPath{selector: BatchGetPermissionsResponse_FieldPathSelectorPermissions}, nil
		case "missing":
			return &BatchGetPermissionsResponse_FieldTerminalPath{selector: BatchGetPermissionsResponse_FieldPathSelectorMissing}, nil
		}
	} else {
		switch fp[0] {
		case "permissions":
			if subpath, err := permission.BuildPermission_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &BatchGetPermissionsResponse_FieldSubPath{selector: BatchGetPermissionsResponse_FieldPathSelectorPermissions, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetPermissionsResponse", fp)
}

func ParseBatchGetPermissionsResponse_FieldPath(rawField string) (BatchGetPermissionsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetPermissionsResponse_FieldPath(fp)
}

func MustParseBatchGetPermissionsResponse_FieldPath(rawField string) BatchGetPermissionsResponse_FieldPath {
	fp, err := ParseBatchGetPermissionsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetPermissionsResponse_FieldTerminalPath struct {
	selector BatchGetPermissionsResponse_FieldPathSelector
}

var _ BatchGetPermissionsResponse_FieldPath = (*BatchGetPermissionsResponse_FieldTerminalPath)(nil)

func (fp *BatchGetPermissionsResponse_FieldTerminalPath) Selector() BatchGetPermissionsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetPermissionsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetPermissionsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetPermissionsResponse
func (fp *BatchGetPermissionsResponse_FieldTerminalPath) Get(source *BatchGetPermissionsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetPermissionsResponse_FieldPathSelectorPermissions:
			for _, value := range source.GetPermissions() {
				values = append(values, value)
			}
		case BatchGetPermissionsResponse_FieldPathSelectorMissing:
			for _, value := range source.GetMissing() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetPermissionsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetPermissionsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetPermissionsResponse))
}

// GetSingle returns value pointed by specific field of from source BatchGetPermissionsResponse
func (fp *BatchGetPermissionsResponse_FieldTerminalPath) GetSingle(source *BatchGetPermissionsResponse) (interface{}, bool) {
	switch fp.selector {
	case BatchGetPermissionsResponse_FieldPathSelectorPermissions:
		res := source.GetPermissions()
		return res, res != nil
	case BatchGetPermissionsResponse_FieldPathSelectorMissing:
		res := source.GetMissing()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPermissionsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetPermissionsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetPermissionsResponse))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetPermissionsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetPermissionsResponse_FieldPathSelectorPermissions:
		return ([]*permission.Permission)(nil)
	case BatchGetPermissionsResponse_FieldPathSelectorMissing:
		return ([]*permission.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPermissionsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetPermissionsResponse_FieldTerminalPath) ClearValue(item *BatchGetPermissionsResponse) {
	if item != nil {
		switch fp.selector {
		case BatchGetPermissionsResponse_FieldPathSelectorPermissions:
			item.Permissions = nil
		case BatchGetPermissionsResponse_FieldPathSelectorMissing:
			item.Missing = nil
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetPermissionsResponse: %d", fp.selector))
		}
	}
}

func (fp *BatchGetPermissionsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetPermissionsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetPermissionsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetPermissionsResponse_FieldPathSelectorMissing
}

func (fp *BatchGetPermissionsResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *BatchGetPermissionsResponse_FieldTerminalPath) WithIValue(value interface{}) BatchGetPermissionsResponse_FieldPathValue {
	switch fp.selector {
	case BatchGetPermissionsResponse_FieldPathSelectorPermissions:
		return &BatchGetPermissionsResponse_FieldTerminalPathValue{BatchGetPermissionsResponse_FieldTerminalPath: *fp, value: value.([]*permission.Permission)}
	case BatchGetPermissionsResponse_FieldPathSelectorMissing:
		return &BatchGetPermissionsResponse_FieldTerminalPathValue{BatchGetPermissionsResponse_FieldTerminalPath: *fp, value: value.([]*permission.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPermissionsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetPermissionsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetPermissionsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetPermissionsResponse_FieldPathArrayOfValues {
	fpaov := &BatchGetPermissionsResponse_FieldTerminalPathArrayOfValues{BatchGetPermissionsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetPermissionsResponse_FieldPathSelectorPermissions:
		return &BatchGetPermissionsResponse_FieldTerminalPathArrayOfValues{BatchGetPermissionsResponse_FieldTerminalPath: *fp, values: values.([][]*permission.Permission)}
	case BatchGetPermissionsResponse_FieldPathSelectorMissing:
		return &BatchGetPermissionsResponse_FieldTerminalPathArrayOfValues{BatchGetPermissionsResponse_FieldTerminalPath: *fp, values: values.([][]*permission.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPermissionsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetPermissionsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetPermissionsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetPermissionsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetPermissionsResponse_FieldPathSelectorPermissions:
		return &BatchGetPermissionsResponse_FieldTerminalPathArrayItemValue{BatchGetPermissionsResponse_FieldTerminalPath: *fp, value: value.(*permission.Permission)}
	case BatchGetPermissionsResponse_FieldPathSelectorMissing:
		return &BatchGetPermissionsResponse_FieldTerminalPathArrayItemValue{BatchGetPermissionsResponse_FieldTerminalPath: *fp, value: value.(*permission.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPermissionsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetPermissionsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type BatchGetPermissionsResponse_FieldSubPath struct {
	selector BatchGetPermissionsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ BatchGetPermissionsResponse_FieldPath = (*BatchGetPermissionsResponse_FieldSubPath)(nil)

func (fps *BatchGetPermissionsResponse_FieldSubPath) Selector() BatchGetPermissionsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *BatchGetPermissionsResponse_FieldSubPath) AsPermissionsSubPath() (permission.Permission_FieldPath, bool) {
	res, ok := fps.subPath.(permission.Permission_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *BatchGetPermissionsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *BatchGetPermissionsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source BatchGetPermissionsResponse
func (fps *BatchGetPermissionsResponse_FieldSubPath) Get(source *BatchGetPermissionsResponse) (values []interface{}) {
	switch fps.selector {
	case BatchGetPermissionsResponse_FieldPathSelectorPermissions:
		for _, item := range source.GetPermissions() {
			values = append(values, fps.subPath.GetRaw(item)...)
		}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPermissionsResponse: %d", fps.selector))
	}
	return
}

func (fps *BatchGetPermissionsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*BatchGetPermissionsResponse))
}

// GetSingle returns value of selected field from source BatchGetPermissionsResponse
func (fps *BatchGetPermissionsResponse_FieldSubPath) GetSingle(source *BatchGetPermissionsResponse) (interface{}, bool) {
	switch fps.selector {
	case BatchGetPermissionsResponse_FieldPathSelectorPermissions:
		if len(source.GetPermissions()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPermissions()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPermissionsResponse: %d", fps.selector))
	}
}

func (fps *BatchGetPermissionsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*BatchGetPermissionsResponse))
}

// GetDefault returns a default value of the field type
func (fps *BatchGetPermissionsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *BatchGetPermissionsResponse_FieldSubPath) ClearValue(item *BatchGetPermissionsResponse) {
	if item != nil {
		switch fps.selector {
		case BatchGetPermissionsResponse_FieldPathSelectorPermissions:
			for _, subItem := range item.Permissions {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetPermissionsResponse: %d", fps.selector))
		}
	}
}

func (fps *BatchGetPermissionsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*BatchGetPermissionsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *BatchGetPermissionsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *BatchGetPermissionsResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&BatchGetPermissionsResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *BatchGetPermissionsResponse_FieldSubPath) WithIValue(value interface{}) BatchGetPermissionsResponse_FieldPathValue {
	return &BatchGetPermissionsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *BatchGetPermissionsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *BatchGetPermissionsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) BatchGetPermissionsResponse_FieldPathArrayOfValues {
	return &BatchGetPermissionsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *BatchGetPermissionsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *BatchGetPermissionsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) BatchGetPermissionsResponse_FieldPathArrayItemValue {
	return &BatchGetPermissionsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *BatchGetPermissionsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// BatchGetPermissionsResponse_FieldPathValue allows storing values for BatchGetPermissionsResponse fields according to their type
type BatchGetPermissionsResponse_FieldPathValue interface {
	BatchGetPermissionsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetPermissionsResponse)
	CompareWith(*BatchGetPermissionsResponse) (cmp int, comparable bool)
}

func ParseBatchGetPermissionsResponse_FieldPathValue(pathStr, valueStr string) (BatchGetPermissionsResponse_FieldPathValue, error) {
	fp, err := ParseBatchGetPermissionsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetPermissionsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetPermissionsResponse_FieldPathValue), nil
}

func MustParseBatchGetPermissionsResponse_FieldPathValue(pathStr, valueStr string) BatchGetPermissionsResponse_FieldPathValue {
	fpv, err := ParseBatchGetPermissionsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetPermissionsResponse_FieldTerminalPathValue struct {
	BatchGetPermissionsResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetPermissionsResponse_FieldPathValue = (*BatchGetPermissionsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetPermissionsResponse' as interface{}
func (fpv *BatchGetPermissionsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetPermissionsResponse_FieldTerminalPathValue) AsPermissionsValue() ([]*permission.Permission, bool) {
	res, ok := fpv.value.([]*permission.Permission)
	return res, ok
}
func (fpv *BatchGetPermissionsResponse_FieldTerminalPathValue) AsMissingValue() ([]*permission.Reference, bool) {
	res, ok := fpv.value.([]*permission.Reference)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetPermissionsResponse
func (fpv *BatchGetPermissionsResponse_FieldTerminalPathValue) SetTo(target **BatchGetPermissionsResponse) {
	if *target == nil {
		*target = new(BatchGetPermissionsResponse)
	}
	switch fpv.selector {
	case BatchGetPermissionsResponse_FieldPathSelectorPermissions:
		(*target).Permissions = fpv.value.([]*permission.Permission)
	case BatchGetPermissionsResponse_FieldPathSelectorMissing:
		(*target).Missing = fpv.value.([]*permission.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPermissionsResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetPermissionsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetPermissionsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetPermissionsResponse_FieldTerminalPathValue' with the value under path in 'BatchGetPermissionsResponse'.
func (fpv *BatchGetPermissionsResponse_FieldTerminalPathValue) CompareWith(source *BatchGetPermissionsResponse) (int, bool) {
	switch fpv.selector {
	case BatchGetPermissionsResponse_FieldPathSelectorPermissions:
		return 0, false
	case BatchGetPermissionsResponse_FieldPathSelectorMissing:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPermissionsResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetPermissionsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetPermissionsResponse))
}

type BatchGetPermissionsResponse_FieldSubPathValue struct {
	BatchGetPermissionsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ BatchGetPermissionsResponse_FieldPathValue = (*BatchGetPermissionsResponse_FieldSubPathValue)(nil)

func (fpvs *BatchGetPermissionsResponse_FieldSubPathValue) AsPermissionsPathValue() (permission.Permission_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(permission.Permission_FieldPathValue)
	return res, ok
}

func (fpvs *BatchGetPermissionsResponse_FieldSubPathValue) SetTo(target **BatchGetPermissionsResponse) {
	if *target == nil {
		*target = new(BatchGetPermissionsResponse)
	}
	switch fpvs.Selector() {
	case BatchGetPermissionsResponse_FieldPathSelectorPermissions:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPermissionsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetPermissionsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetPermissionsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *BatchGetPermissionsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *BatchGetPermissionsResponse_FieldSubPathValue) CompareWith(source *BatchGetPermissionsResponse) (int, bool) {
	switch fpvs.Selector() {
	case BatchGetPermissionsResponse_FieldPathSelectorPermissions:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPermissionsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetPermissionsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*BatchGetPermissionsResponse))
}

// BatchGetPermissionsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetPermissionsResponse according to their type
// Present only for array (repeated) types.
type BatchGetPermissionsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetPermissionsResponse_FieldPath
	ContainsValue(*BatchGetPermissionsResponse) bool
}

// ParseBatchGetPermissionsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetPermissionsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetPermissionsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetPermissionsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetPermissionsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetPermissionsResponse_FieldPathArrayItemValue), nil
}

func MustParseBatchGetPermissionsResponse_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetPermissionsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetPermissionsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetPermissionsResponse_FieldTerminalPathArrayItemValue struct {
	BatchGetPermissionsResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetPermissionsResponse_FieldPathArrayItemValue = (*BatchGetPermissionsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetPermissionsResponse as interface{}
func (fpaiv *BatchGetPermissionsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetPermissionsResponse_FieldTerminalPathArrayItemValue) AsPermissionsItemValue() (*permission.Permission, bool) {
	res, ok := fpaiv.value.(*permission.Permission)
	return res, ok
}
func (fpaiv *BatchGetPermissionsResponse_FieldTerminalPathArrayItemValue) AsMissingItemValue() (*permission.Reference, bool) {
	res, ok := fpaiv.value.(*permission.Reference)
	return res, ok
}

func (fpaiv *BatchGetPermissionsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetPermissionsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetPermissionsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetPermissionsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetPermissionsResponse'
func (fpaiv *BatchGetPermissionsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetPermissionsResponse) bool {
	slice := fpaiv.BatchGetPermissionsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type BatchGetPermissionsResponse_FieldSubPathArrayItemValue struct {
	BatchGetPermissionsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *BatchGetPermissionsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *BatchGetPermissionsResponse_FieldSubPathArrayItemValue) AsPermissionsPathItemValue() (permission.Permission_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(permission.Permission_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetPermissionsResponse'
func (fpaivs *BatchGetPermissionsResponse_FieldSubPathArrayItemValue) ContainsValue(source *BatchGetPermissionsResponse) bool {
	switch fpaivs.Selector() {
	case BatchGetPermissionsResponse_FieldPathSelectorPermissions:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPermissionsResponse: %d", fpaivs.Selector()))
	}
}

// BatchGetPermissionsResponse_FieldPathArrayOfValues allows storing slice of values for BatchGetPermissionsResponse fields according to their type
type BatchGetPermissionsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetPermissionsResponse_FieldPath
}

func ParseBatchGetPermissionsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetPermissionsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetPermissionsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetPermissionsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetPermissionsResponse_FieldPathArrayOfValues), nil
}

func MustParseBatchGetPermissionsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetPermissionsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetPermissionsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetPermissionsResponse_FieldTerminalPathArrayOfValues struct {
	BatchGetPermissionsResponse_FieldTerminalPath
	values interface{}
}

var _ BatchGetPermissionsResponse_FieldPathArrayOfValues = (*BatchGetPermissionsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetPermissionsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetPermissionsResponse_FieldPathSelectorPermissions:
		for _, v := range fpaov.values.([][]*permission.Permission) {
			values = append(values, v)
		}
	case BatchGetPermissionsResponse_FieldPathSelectorMissing:
		for _, v := range fpaov.values.([][]*permission.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetPermissionsResponse_FieldTerminalPathArrayOfValues) AsPermissionsArrayOfValues() ([][]*permission.Permission, bool) {
	res, ok := fpaov.values.([][]*permission.Permission)
	return res, ok
}
func (fpaov *BatchGetPermissionsResponse_FieldTerminalPathArrayOfValues) AsMissingArrayOfValues() ([][]*permission.Reference, bool) {
	res, ok := fpaov.values.([][]*permission.Reference)
	return res, ok
}

type BatchGetPermissionsResponse_FieldSubPathArrayOfValues struct {
	BatchGetPermissionsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ BatchGetPermissionsResponse_FieldPathArrayOfValues = (*BatchGetPermissionsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *BatchGetPermissionsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *BatchGetPermissionsResponse_FieldSubPathArrayOfValues) AsPermissionsPathArrayOfValues() (permission.Permission_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(permission.Permission_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListPermissionsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListPermissionsRequest_FieldPathSelector
	Get(source *ListPermissionsRequest) []interface{}
	GetSingle(source *ListPermissionsRequest) (interface{}, bool)
	ClearValue(item *ListPermissionsRequest)

	// Those methods build corresponding ListPermissionsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListPermissionsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ListPermissionsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListPermissionsRequest_FieldPathArrayItemValue
}

type ListPermissionsRequest_FieldPathSelector int32

const (
	ListPermissionsRequest_FieldPathSelectorPageSize          ListPermissionsRequest_FieldPathSelector = 0
	ListPermissionsRequest_FieldPathSelectorPageToken         ListPermissionsRequest_FieldPathSelector = 1
	ListPermissionsRequest_FieldPathSelectorOrderBy           ListPermissionsRequest_FieldPathSelector = 2
	ListPermissionsRequest_FieldPathSelectorFilter            ListPermissionsRequest_FieldPathSelector = 3
	ListPermissionsRequest_FieldPathSelectorFieldMask         ListPermissionsRequest_FieldPathSelector = 4
	ListPermissionsRequest_FieldPathSelectorView              ListPermissionsRequest_FieldPathSelector = 5
	ListPermissionsRequest_FieldPathSelectorIncludePagingInfo ListPermissionsRequest_FieldPathSelector = 6
)

func (s ListPermissionsRequest_FieldPathSelector) String() string {
	switch s {
	case ListPermissionsRequest_FieldPathSelectorPageSize:
		return "page_size"
	case ListPermissionsRequest_FieldPathSelectorPageToken:
		return "page_token"
	case ListPermissionsRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case ListPermissionsRequest_FieldPathSelectorFilter:
		return "filter"
	case ListPermissionsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case ListPermissionsRequest_FieldPathSelectorView:
		return "view"
	case ListPermissionsRequest_FieldPathSelectorIncludePagingInfo:
		return "include_paging_info"
	default:
		panic(fmt.Sprintf("Invalid selector for ListPermissionsRequest: %d", s))
	}
}

func BuildListPermissionsRequest_FieldPath(fp gotenobject.RawFieldPath) (ListPermissionsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListPermissionsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "page_size", "pageSize", "page-size":
			return &ListPermissionsRequest_FieldTerminalPath{selector: ListPermissionsRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &ListPermissionsRequest_FieldTerminalPath{selector: ListPermissionsRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &ListPermissionsRequest_FieldTerminalPath{selector: ListPermissionsRequest_FieldPathSelectorOrderBy}, nil
		case "filter":
			return &ListPermissionsRequest_FieldTerminalPath{selector: ListPermissionsRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &ListPermissionsRequest_FieldTerminalPath{selector: ListPermissionsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &ListPermissionsRequest_FieldTerminalPath{selector: ListPermissionsRequest_FieldPathSelectorView}, nil
		case "include_paging_info", "includePagingInfo", "include-paging-info":
			return &ListPermissionsRequest_FieldTerminalPath{selector: ListPermissionsRequest_FieldPathSelectorIncludePagingInfo}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListPermissionsRequest", fp)
}

func ParseListPermissionsRequest_FieldPath(rawField string) (ListPermissionsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListPermissionsRequest_FieldPath(fp)
}

func MustParseListPermissionsRequest_FieldPath(rawField string) ListPermissionsRequest_FieldPath {
	fp, err := ParseListPermissionsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListPermissionsRequest_FieldTerminalPath struct {
	selector ListPermissionsRequest_FieldPathSelector
}

var _ ListPermissionsRequest_FieldPath = (*ListPermissionsRequest_FieldTerminalPath)(nil)

func (fp *ListPermissionsRequest_FieldTerminalPath) Selector() ListPermissionsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListPermissionsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListPermissionsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListPermissionsRequest
func (fp *ListPermissionsRequest_FieldTerminalPath) Get(source *ListPermissionsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListPermissionsRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case ListPermissionsRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case ListPermissionsRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case ListPermissionsRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case ListPermissionsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case ListPermissionsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		case ListPermissionsRequest_FieldPathSelectorIncludePagingInfo:
			values = append(values, source.IncludePagingInfo)
		default:
			panic(fmt.Sprintf("Invalid selector for ListPermissionsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ListPermissionsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListPermissionsRequest))
}

// GetSingle returns value pointed by specific field of from source ListPermissionsRequest
func (fp *ListPermissionsRequest_FieldTerminalPath) GetSingle(source *ListPermissionsRequest) (interface{}, bool) {
	switch fp.selector {
	case ListPermissionsRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case ListPermissionsRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case ListPermissionsRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case ListPermissionsRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case ListPermissionsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case ListPermissionsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	case ListPermissionsRequest_FieldPathSelectorIncludePagingInfo:
		return source.GetIncludePagingInfo(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListPermissionsRequest: %d", fp.selector))
	}
}

func (fp *ListPermissionsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListPermissionsRequest))
}

// GetDefault returns a default value of the field type
func (fp *ListPermissionsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListPermissionsRequest_FieldPathSelectorPageSize:
		return int32(0)
	case ListPermissionsRequest_FieldPathSelectorPageToken:
		return (*permission.PagerCursor)(nil)
	case ListPermissionsRequest_FieldPathSelectorOrderBy:
		return (*permission.OrderBy)(nil)
	case ListPermissionsRequest_FieldPathSelectorFilter:
		return (*permission.Filter)(nil)
	case ListPermissionsRequest_FieldPathSelectorFieldMask:
		return (*permission.Permission_FieldMask)(nil)
	case ListPermissionsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	case ListPermissionsRequest_FieldPathSelectorIncludePagingInfo:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for ListPermissionsRequest: %d", fp.selector))
	}
}

func (fp *ListPermissionsRequest_FieldTerminalPath) ClearValue(item *ListPermissionsRequest) {
	if item != nil {
		switch fp.selector {
		case ListPermissionsRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case ListPermissionsRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case ListPermissionsRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case ListPermissionsRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case ListPermissionsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case ListPermissionsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		case ListPermissionsRequest_FieldPathSelectorIncludePagingInfo:
			item.IncludePagingInfo = false
		default:
			panic(fmt.Sprintf("Invalid selector for ListPermissionsRequest: %d", fp.selector))
		}
	}
}

func (fp *ListPermissionsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListPermissionsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListPermissionsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListPermissionsRequest_FieldPathSelectorPageSize ||
		fp.selector == ListPermissionsRequest_FieldPathSelectorPageToken ||
		fp.selector == ListPermissionsRequest_FieldPathSelectorOrderBy ||
		fp.selector == ListPermissionsRequest_FieldPathSelectorFilter ||
		fp.selector == ListPermissionsRequest_FieldPathSelectorFieldMask ||
		fp.selector == ListPermissionsRequest_FieldPathSelectorView ||
		fp.selector == ListPermissionsRequest_FieldPathSelectorIncludePagingInfo
}

func (fp *ListPermissionsRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ListPermissionsRequest_FieldTerminalPath) WithIValue(value interface{}) ListPermissionsRequest_FieldPathValue {
	switch fp.selector {
	case ListPermissionsRequest_FieldPathSelectorPageSize:
		return &ListPermissionsRequest_FieldTerminalPathValue{ListPermissionsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case ListPermissionsRequest_FieldPathSelectorPageToken:
		return &ListPermissionsRequest_FieldTerminalPathValue{ListPermissionsRequest_FieldTerminalPath: *fp, value: value.(*permission.PagerCursor)}
	case ListPermissionsRequest_FieldPathSelectorOrderBy:
		return &ListPermissionsRequest_FieldTerminalPathValue{ListPermissionsRequest_FieldTerminalPath: *fp, value: value.(*permission.OrderBy)}
	case ListPermissionsRequest_FieldPathSelectorFilter:
		return &ListPermissionsRequest_FieldTerminalPathValue{ListPermissionsRequest_FieldTerminalPath: *fp, value: value.(*permission.Filter)}
	case ListPermissionsRequest_FieldPathSelectorFieldMask:
		return &ListPermissionsRequest_FieldTerminalPathValue{ListPermissionsRequest_FieldTerminalPath: *fp, value: value.(*permission.Permission_FieldMask)}
	case ListPermissionsRequest_FieldPathSelectorView:
		return &ListPermissionsRequest_FieldTerminalPathValue{ListPermissionsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	case ListPermissionsRequest_FieldPathSelectorIncludePagingInfo:
		return &ListPermissionsRequest_FieldTerminalPathValue{ListPermissionsRequest_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListPermissionsRequest: %d", fp.selector))
	}
}

func (fp *ListPermissionsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListPermissionsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListPermissionsRequest_FieldPathArrayOfValues {
	fpaov := &ListPermissionsRequest_FieldTerminalPathArrayOfValues{ListPermissionsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListPermissionsRequest_FieldPathSelectorPageSize:
		return &ListPermissionsRequest_FieldTerminalPathArrayOfValues{ListPermissionsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case ListPermissionsRequest_FieldPathSelectorPageToken:
		return &ListPermissionsRequest_FieldTerminalPathArrayOfValues{ListPermissionsRequest_FieldTerminalPath: *fp, values: values.([]*permission.PagerCursor)}
	case ListPermissionsRequest_FieldPathSelectorOrderBy:
		return &ListPermissionsRequest_FieldTerminalPathArrayOfValues{ListPermissionsRequest_FieldTerminalPath: *fp, values: values.([]*permission.OrderBy)}
	case ListPermissionsRequest_FieldPathSelectorFilter:
		return &ListPermissionsRequest_FieldTerminalPathArrayOfValues{ListPermissionsRequest_FieldTerminalPath: *fp, values: values.([]*permission.Filter)}
	case ListPermissionsRequest_FieldPathSelectorFieldMask:
		return &ListPermissionsRequest_FieldTerminalPathArrayOfValues{ListPermissionsRequest_FieldTerminalPath: *fp, values: values.([]*permission.Permission_FieldMask)}
	case ListPermissionsRequest_FieldPathSelectorView:
		return &ListPermissionsRequest_FieldTerminalPathArrayOfValues{ListPermissionsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	case ListPermissionsRequest_FieldPathSelectorIncludePagingInfo:
		return &ListPermissionsRequest_FieldTerminalPathArrayOfValues{ListPermissionsRequest_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListPermissionsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListPermissionsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListPermissionsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListPermissionsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ListPermissionsRequest: %d", fp.selector))
	}
}

func (fp *ListPermissionsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ListPermissionsRequest_FieldPathValue allows storing values for ListPermissionsRequest fields according to their type
type ListPermissionsRequest_FieldPathValue interface {
	ListPermissionsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListPermissionsRequest)
	CompareWith(*ListPermissionsRequest) (cmp int, comparable bool)
}

func ParseListPermissionsRequest_FieldPathValue(pathStr, valueStr string) (ListPermissionsRequest_FieldPathValue, error) {
	fp, err := ParseListPermissionsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListPermissionsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListPermissionsRequest_FieldPathValue), nil
}

func MustParseListPermissionsRequest_FieldPathValue(pathStr, valueStr string) ListPermissionsRequest_FieldPathValue {
	fpv, err := ParseListPermissionsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListPermissionsRequest_FieldTerminalPathValue struct {
	ListPermissionsRequest_FieldTerminalPath
	value interface{}
}

var _ ListPermissionsRequest_FieldPathValue = (*ListPermissionsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListPermissionsRequest' as interface{}
func (fpv *ListPermissionsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListPermissionsRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *ListPermissionsRequest_FieldTerminalPathValue) AsPageTokenValue() (*permission.PagerCursor, bool) {
	res, ok := fpv.value.(*permission.PagerCursor)
	return res, ok
}
func (fpv *ListPermissionsRequest_FieldTerminalPathValue) AsOrderByValue() (*permission.OrderBy, bool) {
	res, ok := fpv.value.(*permission.OrderBy)
	return res, ok
}
func (fpv *ListPermissionsRequest_FieldTerminalPathValue) AsFilterValue() (*permission.Filter, bool) {
	res, ok := fpv.value.(*permission.Filter)
	return res, ok
}
func (fpv *ListPermissionsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*permission.Permission_FieldMask, bool) {
	res, ok := fpv.value.(*permission.Permission_FieldMask)
	return res, ok
}
func (fpv *ListPermissionsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}
func (fpv *ListPermissionsRequest_FieldTerminalPathValue) AsIncludePagingInfoValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object ListPermissionsRequest
func (fpv *ListPermissionsRequest_FieldTerminalPathValue) SetTo(target **ListPermissionsRequest) {
	if *target == nil {
		*target = new(ListPermissionsRequest)
	}
	switch fpv.selector {
	case ListPermissionsRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case ListPermissionsRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*permission.PagerCursor)
	case ListPermissionsRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*permission.OrderBy)
	case ListPermissionsRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*permission.Filter)
	case ListPermissionsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*permission.Permission_FieldMask)
	case ListPermissionsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	case ListPermissionsRequest_FieldPathSelectorIncludePagingInfo:
		(*target).IncludePagingInfo = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for ListPermissionsRequest: %d", fpv.selector))
	}
}

func (fpv *ListPermissionsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListPermissionsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListPermissionsRequest_FieldTerminalPathValue' with the value under path in 'ListPermissionsRequest'.
func (fpv *ListPermissionsRequest_FieldTerminalPathValue) CompareWith(source *ListPermissionsRequest) (int, bool) {
	switch fpv.selector {
	case ListPermissionsRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListPermissionsRequest_FieldPathSelectorPageToken:
		return 0, false
	case ListPermissionsRequest_FieldPathSelectorOrderBy:
		return 0, false
	case ListPermissionsRequest_FieldPathSelectorFilter:
		return 0, false
	case ListPermissionsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case ListPermissionsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListPermissionsRequest_FieldPathSelectorIncludePagingInfo:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIncludePagingInfo()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListPermissionsRequest: %d", fpv.selector))
	}
}

func (fpv *ListPermissionsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListPermissionsRequest))
}

// ListPermissionsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for ListPermissionsRequest according to their type
// Present only for array (repeated) types.
type ListPermissionsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListPermissionsRequest_FieldPath
	ContainsValue(*ListPermissionsRequest) bool
}

// ParseListPermissionsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListPermissionsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ListPermissionsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseListPermissionsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListPermissionsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListPermissionsRequest_FieldPathArrayItemValue), nil
}

func MustParseListPermissionsRequest_FieldPathArrayItemValue(pathStr, valueStr string) ListPermissionsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseListPermissionsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListPermissionsRequest_FieldTerminalPathArrayItemValue struct {
	ListPermissionsRequest_FieldTerminalPath
	value interface{}
}

var _ ListPermissionsRequest_FieldPathArrayItemValue = (*ListPermissionsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListPermissionsRequest as interface{}
func (fpaiv *ListPermissionsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ListPermissionsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ListPermissionsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListPermissionsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListPermissionsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListPermissionsRequest'
func (fpaiv *ListPermissionsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ListPermissionsRequest) bool {
	slice := fpaiv.ListPermissionsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ListPermissionsRequest_FieldPathArrayOfValues allows storing slice of values for ListPermissionsRequest fields according to their type
type ListPermissionsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListPermissionsRequest_FieldPath
}

func ParseListPermissionsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ListPermissionsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseListPermissionsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListPermissionsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListPermissionsRequest_FieldPathArrayOfValues), nil
}

func MustParseListPermissionsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ListPermissionsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseListPermissionsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListPermissionsRequest_FieldTerminalPathArrayOfValues struct {
	ListPermissionsRequest_FieldTerminalPath
	values interface{}
}

var _ ListPermissionsRequest_FieldPathArrayOfValues = (*ListPermissionsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListPermissionsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListPermissionsRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case ListPermissionsRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*permission.PagerCursor) {
			values = append(values, v)
		}
	case ListPermissionsRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*permission.OrderBy) {
			values = append(values, v)
		}
	case ListPermissionsRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*permission.Filter) {
			values = append(values, v)
		}
	case ListPermissionsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*permission.Permission_FieldMask) {
			values = append(values, v)
		}
	case ListPermissionsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	case ListPermissionsRequest_FieldPathSelectorIncludePagingInfo:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListPermissionsRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *ListPermissionsRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*permission.PagerCursor, bool) {
	res, ok := fpaov.values.([]*permission.PagerCursor)
	return res, ok
}
func (fpaov *ListPermissionsRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*permission.OrderBy, bool) {
	res, ok := fpaov.values.([]*permission.OrderBy)
	return res, ok
}
func (fpaov *ListPermissionsRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*permission.Filter, bool) {
	res, ok := fpaov.values.([]*permission.Filter)
	return res, ok
}
func (fpaov *ListPermissionsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*permission.Permission_FieldMask, bool) {
	res, ok := fpaov.values.([]*permission.Permission_FieldMask)
	return res, ok
}
func (fpaov *ListPermissionsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}
func (fpaov *ListPermissionsRequest_FieldTerminalPathArrayOfValues) AsIncludePagingInfoArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListPermissionsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListPermissionsResponse_FieldPathSelector
	Get(source *ListPermissionsResponse) []interface{}
	GetSingle(source *ListPermissionsResponse) (interface{}, bool)
	ClearValue(item *ListPermissionsResponse)

	// Those methods build corresponding ListPermissionsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListPermissionsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) ListPermissionsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListPermissionsResponse_FieldPathArrayItemValue
}

type ListPermissionsResponse_FieldPathSelector int32

const (
	ListPermissionsResponse_FieldPathSelectorPermissions       ListPermissionsResponse_FieldPathSelector = 0
	ListPermissionsResponse_FieldPathSelectorPrevPageToken     ListPermissionsResponse_FieldPathSelector = 1
	ListPermissionsResponse_FieldPathSelectorNextPageToken     ListPermissionsResponse_FieldPathSelector = 2
	ListPermissionsResponse_FieldPathSelectorCurrentOffset     ListPermissionsResponse_FieldPathSelector = 3
	ListPermissionsResponse_FieldPathSelectorTotalResultsCount ListPermissionsResponse_FieldPathSelector = 4
)

func (s ListPermissionsResponse_FieldPathSelector) String() string {
	switch s {
	case ListPermissionsResponse_FieldPathSelectorPermissions:
		return "permissions"
	case ListPermissionsResponse_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case ListPermissionsResponse_FieldPathSelectorNextPageToken:
		return "next_page_token"
	case ListPermissionsResponse_FieldPathSelectorCurrentOffset:
		return "current_offset"
	case ListPermissionsResponse_FieldPathSelectorTotalResultsCount:
		return "total_results_count"
	default:
		panic(fmt.Sprintf("Invalid selector for ListPermissionsResponse: %d", s))
	}
}

func BuildListPermissionsResponse_FieldPath(fp gotenobject.RawFieldPath) (ListPermissionsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListPermissionsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "permissions":
			return &ListPermissionsResponse_FieldTerminalPath{selector: ListPermissionsResponse_FieldPathSelectorPermissions}, nil
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &ListPermissionsResponse_FieldTerminalPath{selector: ListPermissionsResponse_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &ListPermissionsResponse_FieldTerminalPath{selector: ListPermissionsResponse_FieldPathSelectorNextPageToken}, nil
		case "current_offset", "currentOffset", "current-offset":
			return &ListPermissionsResponse_FieldTerminalPath{selector: ListPermissionsResponse_FieldPathSelectorCurrentOffset}, nil
		case "total_results_count", "totalResultsCount", "total-results-count":
			return &ListPermissionsResponse_FieldTerminalPath{selector: ListPermissionsResponse_FieldPathSelectorTotalResultsCount}, nil
		}
	} else {
		switch fp[0] {
		case "permissions":
			if subpath, err := permission.BuildPermission_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ListPermissionsResponse_FieldSubPath{selector: ListPermissionsResponse_FieldPathSelectorPermissions, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListPermissionsResponse", fp)
}

func ParseListPermissionsResponse_FieldPath(rawField string) (ListPermissionsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListPermissionsResponse_FieldPath(fp)
}

func MustParseListPermissionsResponse_FieldPath(rawField string) ListPermissionsResponse_FieldPath {
	fp, err := ParseListPermissionsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListPermissionsResponse_FieldTerminalPath struct {
	selector ListPermissionsResponse_FieldPathSelector
}

var _ ListPermissionsResponse_FieldPath = (*ListPermissionsResponse_FieldTerminalPath)(nil)

func (fp *ListPermissionsResponse_FieldTerminalPath) Selector() ListPermissionsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListPermissionsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListPermissionsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListPermissionsResponse
func (fp *ListPermissionsResponse_FieldTerminalPath) Get(source *ListPermissionsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListPermissionsResponse_FieldPathSelectorPermissions:
			for _, value := range source.GetPermissions() {
				values = append(values, value)
			}
		case ListPermissionsResponse_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case ListPermissionsResponse_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		case ListPermissionsResponse_FieldPathSelectorCurrentOffset:
			values = append(values, source.CurrentOffset)
		case ListPermissionsResponse_FieldPathSelectorTotalResultsCount:
			values = append(values, source.TotalResultsCount)
		default:
			panic(fmt.Sprintf("Invalid selector for ListPermissionsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *ListPermissionsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListPermissionsResponse))
}

// GetSingle returns value pointed by specific field of from source ListPermissionsResponse
func (fp *ListPermissionsResponse_FieldTerminalPath) GetSingle(source *ListPermissionsResponse) (interface{}, bool) {
	switch fp.selector {
	case ListPermissionsResponse_FieldPathSelectorPermissions:
		res := source.GetPermissions()
		return res, res != nil
	case ListPermissionsResponse_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case ListPermissionsResponse_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	case ListPermissionsResponse_FieldPathSelectorCurrentOffset:
		return source.GetCurrentOffset(), source != nil
	case ListPermissionsResponse_FieldPathSelectorTotalResultsCount:
		return source.GetTotalResultsCount(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListPermissionsResponse: %d", fp.selector))
	}
}

func (fp *ListPermissionsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListPermissionsResponse))
}

// GetDefault returns a default value of the field type
func (fp *ListPermissionsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListPermissionsResponse_FieldPathSelectorPermissions:
		return ([]*permission.Permission)(nil)
	case ListPermissionsResponse_FieldPathSelectorPrevPageToken:
		return (*permission.PagerCursor)(nil)
	case ListPermissionsResponse_FieldPathSelectorNextPageToken:
		return (*permission.PagerCursor)(nil)
	case ListPermissionsResponse_FieldPathSelectorCurrentOffset:
		return int32(0)
	case ListPermissionsResponse_FieldPathSelectorTotalResultsCount:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for ListPermissionsResponse: %d", fp.selector))
	}
}

func (fp *ListPermissionsResponse_FieldTerminalPath) ClearValue(item *ListPermissionsResponse) {
	if item != nil {
		switch fp.selector {
		case ListPermissionsResponse_FieldPathSelectorPermissions:
			item.Permissions = nil
		case ListPermissionsResponse_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case ListPermissionsResponse_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		case ListPermissionsResponse_FieldPathSelectorCurrentOffset:
			item.CurrentOffset = int32(0)
		case ListPermissionsResponse_FieldPathSelectorTotalResultsCount:
			item.TotalResultsCount = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for ListPermissionsResponse: %d", fp.selector))
		}
	}
}

func (fp *ListPermissionsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListPermissionsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListPermissionsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListPermissionsResponse_FieldPathSelectorPrevPageToken ||
		fp.selector == ListPermissionsResponse_FieldPathSelectorNextPageToken ||
		fp.selector == ListPermissionsResponse_FieldPathSelectorCurrentOffset ||
		fp.selector == ListPermissionsResponse_FieldPathSelectorTotalResultsCount
}

func (fp *ListPermissionsResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ListPermissionsResponse_FieldTerminalPath) WithIValue(value interface{}) ListPermissionsResponse_FieldPathValue {
	switch fp.selector {
	case ListPermissionsResponse_FieldPathSelectorPermissions:
		return &ListPermissionsResponse_FieldTerminalPathValue{ListPermissionsResponse_FieldTerminalPath: *fp, value: value.([]*permission.Permission)}
	case ListPermissionsResponse_FieldPathSelectorPrevPageToken:
		return &ListPermissionsResponse_FieldTerminalPathValue{ListPermissionsResponse_FieldTerminalPath: *fp, value: value.(*permission.PagerCursor)}
	case ListPermissionsResponse_FieldPathSelectorNextPageToken:
		return &ListPermissionsResponse_FieldTerminalPathValue{ListPermissionsResponse_FieldTerminalPath: *fp, value: value.(*permission.PagerCursor)}
	case ListPermissionsResponse_FieldPathSelectorCurrentOffset:
		return &ListPermissionsResponse_FieldTerminalPathValue{ListPermissionsResponse_FieldTerminalPath: *fp, value: value.(int32)}
	case ListPermissionsResponse_FieldPathSelectorTotalResultsCount:
		return &ListPermissionsResponse_FieldTerminalPathValue{ListPermissionsResponse_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListPermissionsResponse: %d", fp.selector))
	}
}

func (fp *ListPermissionsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListPermissionsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListPermissionsResponse_FieldPathArrayOfValues {
	fpaov := &ListPermissionsResponse_FieldTerminalPathArrayOfValues{ListPermissionsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListPermissionsResponse_FieldPathSelectorPermissions:
		return &ListPermissionsResponse_FieldTerminalPathArrayOfValues{ListPermissionsResponse_FieldTerminalPath: *fp, values: values.([][]*permission.Permission)}
	case ListPermissionsResponse_FieldPathSelectorPrevPageToken:
		return &ListPermissionsResponse_FieldTerminalPathArrayOfValues{ListPermissionsResponse_FieldTerminalPath: *fp, values: values.([]*permission.PagerCursor)}
	case ListPermissionsResponse_FieldPathSelectorNextPageToken:
		return &ListPermissionsResponse_FieldTerminalPathArrayOfValues{ListPermissionsResponse_FieldTerminalPath: *fp, values: values.([]*permission.PagerCursor)}
	case ListPermissionsResponse_FieldPathSelectorCurrentOffset:
		return &ListPermissionsResponse_FieldTerminalPathArrayOfValues{ListPermissionsResponse_FieldTerminalPath: *fp, values: values.([]int32)}
	case ListPermissionsResponse_FieldPathSelectorTotalResultsCount:
		return &ListPermissionsResponse_FieldTerminalPathArrayOfValues{ListPermissionsResponse_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListPermissionsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListPermissionsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListPermissionsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListPermissionsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case ListPermissionsResponse_FieldPathSelectorPermissions:
		return &ListPermissionsResponse_FieldTerminalPathArrayItemValue{ListPermissionsResponse_FieldTerminalPath: *fp, value: value.(*permission.Permission)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListPermissionsResponse: %d", fp.selector))
	}
}

func (fp *ListPermissionsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ListPermissionsResponse_FieldSubPath struct {
	selector ListPermissionsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ListPermissionsResponse_FieldPath = (*ListPermissionsResponse_FieldSubPath)(nil)

func (fps *ListPermissionsResponse_FieldSubPath) Selector() ListPermissionsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *ListPermissionsResponse_FieldSubPath) AsPermissionsSubPath() (permission.Permission_FieldPath, bool) {
	res, ok := fps.subPath.(permission.Permission_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ListPermissionsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ListPermissionsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ListPermissionsResponse
func (fps *ListPermissionsResponse_FieldSubPath) Get(source *ListPermissionsResponse) (values []interface{}) {
	switch fps.selector {
	case ListPermissionsResponse_FieldPathSelectorPermissions:
		for _, item := range source.GetPermissions() {
			values = append(values, fps.subPath.GetRaw(item)...)
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListPermissionsResponse: %d", fps.selector))
	}
	return
}

func (fps *ListPermissionsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ListPermissionsResponse))
}

// GetSingle returns value of selected field from source ListPermissionsResponse
func (fps *ListPermissionsResponse_FieldSubPath) GetSingle(source *ListPermissionsResponse) (interface{}, bool) {
	switch fps.selector {
	case ListPermissionsResponse_FieldPathSelectorPermissions:
		if len(source.GetPermissions()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPermissions()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for ListPermissionsResponse: %d", fps.selector))
	}
}

func (fps *ListPermissionsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ListPermissionsResponse))
}

// GetDefault returns a default value of the field type
func (fps *ListPermissionsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ListPermissionsResponse_FieldSubPath) ClearValue(item *ListPermissionsResponse) {
	if item != nil {
		switch fps.selector {
		case ListPermissionsResponse_FieldPathSelectorPermissions:
			for _, subItem := range item.Permissions {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListPermissionsResponse: %d", fps.selector))
		}
	}
}

func (fps *ListPermissionsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ListPermissionsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *ListPermissionsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ListPermissionsResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&ListPermissionsResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *ListPermissionsResponse_FieldSubPath) WithIValue(value interface{}) ListPermissionsResponse_FieldPathValue {
	return &ListPermissionsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ListPermissionsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ListPermissionsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) ListPermissionsResponse_FieldPathArrayOfValues {
	return &ListPermissionsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ListPermissionsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ListPermissionsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) ListPermissionsResponse_FieldPathArrayItemValue {
	return &ListPermissionsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ListPermissionsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ListPermissionsResponse_FieldPathValue allows storing values for ListPermissionsResponse fields according to their type
type ListPermissionsResponse_FieldPathValue interface {
	ListPermissionsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListPermissionsResponse)
	CompareWith(*ListPermissionsResponse) (cmp int, comparable bool)
}

func ParseListPermissionsResponse_FieldPathValue(pathStr, valueStr string) (ListPermissionsResponse_FieldPathValue, error) {
	fp, err := ParseListPermissionsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListPermissionsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListPermissionsResponse_FieldPathValue), nil
}

func MustParseListPermissionsResponse_FieldPathValue(pathStr, valueStr string) ListPermissionsResponse_FieldPathValue {
	fpv, err := ParseListPermissionsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListPermissionsResponse_FieldTerminalPathValue struct {
	ListPermissionsResponse_FieldTerminalPath
	value interface{}
}

var _ ListPermissionsResponse_FieldPathValue = (*ListPermissionsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListPermissionsResponse' as interface{}
func (fpv *ListPermissionsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListPermissionsResponse_FieldTerminalPathValue) AsPermissionsValue() ([]*permission.Permission, bool) {
	res, ok := fpv.value.([]*permission.Permission)
	return res, ok
}
func (fpv *ListPermissionsResponse_FieldTerminalPathValue) AsPrevPageTokenValue() (*permission.PagerCursor, bool) {
	res, ok := fpv.value.(*permission.PagerCursor)
	return res, ok
}
func (fpv *ListPermissionsResponse_FieldTerminalPathValue) AsNextPageTokenValue() (*permission.PagerCursor, bool) {
	res, ok := fpv.value.(*permission.PagerCursor)
	return res, ok
}
func (fpv *ListPermissionsResponse_FieldTerminalPathValue) AsCurrentOffsetValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *ListPermissionsResponse_FieldTerminalPathValue) AsTotalResultsCountValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object ListPermissionsResponse
func (fpv *ListPermissionsResponse_FieldTerminalPathValue) SetTo(target **ListPermissionsResponse) {
	if *target == nil {
		*target = new(ListPermissionsResponse)
	}
	switch fpv.selector {
	case ListPermissionsResponse_FieldPathSelectorPermissions:
		(*target).Permissions = fpv.value.([]*permission.Permission)
	case ListPermissionsResponse_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*permission.PagerCursor)
	case ListPermissionsResponse_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*permission.PagerCursor)
	case ListPermissionsResponse_FieldPathSelectorCurrentOffset:
		(*target).CurrentOffset = fpv.value.(int32)
	case ListPermissionsResponse_FieldPathSelectorTotalResultsCount:
		(*target).TotalResultsCount = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for ListPermissionsResponse: %d", fpv.selector))
	}
}

func (fpv *ListPermissionsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListPermissionsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListPermissionsResponse_FieldTerminalPathValue' with the value under path in 'ListPermissionsResponse'.
func (fpv *ListPermissionsResponse_FieldTerminalPathValue) CompareWith(source *ListPermissionsResponse) (int, bool) {
	switch fpv.selector {
	case ListPermissionsResponse_FieldPathSelectorPermissions:
		return 0, false
	case ListPermissionsResponse_FieldPathSelectorPrevPageToken:
		return 0, false
	case ListPermissionsResponse_FieldPathSelectorNextPageToken:
		return 0, false
	case ListPermissionsResponse_FieldPathSelectorCurrentOffset:
		leftValue := fpv.value.(int32)
		rightValue := source.GetCurrentOffset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListPermissionsResponse_FieldPathSelectorTotalResultsCount:
		leftValue := fpv.value.(int32)
		rightValue := source.GetTotalResultsCount()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListPermissionsResponse: %d", fpv.selector))
	}
}

func (fpv *ListPermissionsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListPermissionsResponse))
}

type ListPermissionsResponse_FieldSubPathValue struct {
	ListPermissionsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ListPermissionsResponse_FieldPathValue = (*ListPermissionsResponse_FieldSubPathValue)(nil)

func (fpvs *ListPermissionsResponse_FieldSubPathValue) AsPermissionsPathValue() (permission.Permission_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(permission.Permission_FieldPathValue)
	return res, ok
}

func (fpvs *ListPermissionsResponse_FieldSubPathValue) SetTo(target **ListPermissionsResponse) {
	if *target == nil {
		*target = new(ListPermissionsResponse)
	}
	switch fpvs.Selector() {
	case ListPermissionsResponse_FieldPathSelectorPermissions:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for ListPermissionsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListPermissionsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListPermissionsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ListPermissionsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ListPermissionsResponse_FieldSubPathValue) CompareWith(source *ListPermissionsResponse) (int, bool) {
	switch fpvs.Selector() {
	case ListPermissionsResponse_FieldPathSelectorPermissions:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for ListPermissionsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListPermissionsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ListPermissionsResponse))
}

// ListPermissionsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for ListPermissionsResponse according to their type
// Present only for array (repeated) types.
type ListPermissionsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListPermissionsResponse_FieldPath
	ContainsValue(*ListPermissionsResponse) bool
}

// ParseListPermissionsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListPermissionsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (ListPermissionsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseListPermissionsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListPermissionsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListPermissionsResponse_FieldPathArrayItemValue), nil
}

func MustParseListPermissionsResponse_FieldPathArrayItemValue(pathStr, valueStr string) ListPermissionsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseListPermissionsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListPermissionsResponse_FieldTerminalPathArrayItemValue struct {
	ListPermissionsResponse_FieldTerminalPath
	value interface{}
}

var _ ListPermissionsResponse_FieldPathArrayItemValue = (*ListPermissionsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListPermissionsResponse as interface{}
func (fpaiv *ListPermissionsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *ListPermissionsResponse_FieldTerminalPathArrayItemValue) AsPermissionsItemValue() (*permission.Permission, bool) {
	res, ok := fpaiv.value.(*permission.Permission)
	return res, ok
}

func (fpaiv *ListPermissionsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *ListPermissionsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListPermissionsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListPermissionsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListPermissionsResponse'
func (fpaiv *ListPermissionsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *ListPermissionsResponse) bool {
	slice := fpaiv.ListPermissionsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ListPermissionsResponse_FieldSubPathArrayItemValue struct {
	ListPermissionsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ListPermissionsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ListPermissionsResponse_FieldSubPathArrayItemValue) AsPermissionsPathItemValue() (permission.Permission_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(permission.Permission_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListPermissionsResponse'
func (fpaivs *ListPermissionsResponse_FieldSubPathArrayItemValue) ContainsValue(source *ListPermissionsResponse) bool {
	switch fpaivs.Selector() {
	case ListPermissionsResponse_FieldPathSelectorPermissions:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for ListPermissionsResponse: %d", fpaivs.Selector()))
	}
}

// ListPermissionsResponse_FieldPathArrayOfValues allows storing slice of values for ListPermissionsResponse fields according to their type
type ListPermissionsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListPermissionsResponse_FieldPath
}

func ParseListPermissionsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (ListPermissionsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseListPermissionsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListPermissionsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListPermissionsResponse_FieldPathArrayOfValues), nil
}

func MustParseListPermissionsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) ListPermissionsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseListPermissionsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListPermissionsResponse_FieldTerminalPathArrayOfValues struct {
	ListPermissionsResponse_FieldTerminalPath
	values interface{}
}

var _ ListPermissionsResponse_FieldPathArrayOfValues = (*ListPermissionsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListPermissionsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListPermissionsResponse_FieldPathSelectorPermissions:
		for _, v := range fpaov.values.([][]*permission.Permission) {
			values = append(values, v)
		}
	case ListPermissionsResponse_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*permission.PagerCursor) {
			values = append(values, v)
		}
	case ListPermissionsResponse_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*permission.PagerCursor) {
			values = append(values, v)
		}
	case ListPermissionsResponse_FieldPathSelectorCurrentOffset:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case ListPermissionsResponse_FieldPathSelectorTotalResultsCount:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListPermissionsResponse_FieldTerminalPathArrayOfValues) AsPermissionsArrayOfValues() ([][]*permission.Permission, bool) {
	res, ok := fpaov.values.([][]*permission.Permission)
	return res, ok
}
func (fpaov *ListPermissionsResponse_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*permission.PagerCursor, bool) {
	res, ok := fpaov.values.([]*permission.PagerCursor)
	return res, ok
}
func (fpaov *ListPermissionsResponse_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*permission.PagerCursor, bool) {
	res, ok := fpaov.values.([]*permission.PagerCursor)
	return res, ok
}
func (fpaov *ListPermissionsResponse_FieldTerminalPathArrayOfValues) AsCurrentOffsetArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *ListPermissionsResponse_FieldTerminalPathArrayOfValues) AsTotalResultsCountArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

type ListPermissionsResponse_FieldSubPathArrayOfValues struct {
	ListPermissionsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ListPermissionsResponse_FieldPathArrayOfValues = (*ListPermissionsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ListPermissionsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ListPermissionsResponse_FieldSubPathArrayOfValues) AsPermissionsPathArrayOfValues() (permission.Permission_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(permission.Permission_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchPermissionRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchPermissionRequest_FieldPathSelector
	Get(source *WatchPermissionRequest) []interface{}
	GetSingle(source *WatchPermissionRequest) (interface{}, bool)
	ClearValue(item *WatchPermissionRequest)

	// Those methods build corresponding WatchPermissionRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchPermissionRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchPermissionRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchPermissionRequest_FieldPathArrayItemValue
}

type WatchPermissionRequest_FieldPathSelector int32

const (
	WatchPermissionRequest_FieldPathSelectorName      WatchPermissionRequest_FieldPathSelector = 0
	WatchPermissionRequest_FieldPathSelectorFieldMask WatchPermissionRequest_FieldPathSelector = 1
	WatchPermissionRequest_FieldPathSelectorView      WatchPermissionRequest_FieldPathSelector = 2
)

func (s WatchPermissionRequest_FieldPathSelector) String() string {
	switch s {
	case WatchPermissionRequest_FieldPathSelectorName:
		return "name"
	case WatchPermissionRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchPermissionRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPermissionRequest: %d", s))
	}
}

func BuildWatchPermissionRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchPermissionRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchPermissionRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &WatchPermissionRequest_FieldTerminalPath{selector: WatchPermissionRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchPermissionRequest_FieldTerminalPath{selector: WatchPermissionRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchPermissionRequest_FieldTerminalPath{selector: WatchPermissionRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchPermissionRequest", fp)
}

func ParseWatchPermissionRequest_FieldPath(rawField string) (WatchPermissionRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchPermissionRequest_FieldPath(fp)
}

func MustParseWatchPermissionRequest_FieldPath(rawField string) WatchPermissionRequest_FieldPath {
	fp, err := ParseWatchPermissionRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchPermissionRequest_FieldTerminalPath struct {
	selector WatchPermissionRequest_FieldPathSelector
}

var _ WatchPermissionRequest_FieldPath = (*WatchPermissionRequest_FieldTerminalPath)(nil)

func (fp *WatchPermissionRequest_FieldTerminalPath) Selector() WatchPermissionRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchPermissionRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchPermissionRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchPermissionRequest
func (fp *WatchPermissionRequest_FieldTerminalPath) Get(source *WatchPermissionRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchPermissionRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case WatchPermissionRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchPermissionRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchPermissionRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchPermissionRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchPermissionRequest))
}

// GetSingle returns value pointed by specific field of from source WatchPermissionRequest
func (fp *WatchPermissionRequest_FieldTerminalPath) GetSingle(source *WatchPermissionRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchPermissionRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case WatchPermissionRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchPermissionRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPermissionRequest: %d", fp.selector))
	}
}

func (fp *WatchPermissionRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchPermissionRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchPermissionRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchPermissionRequest_FieldPathSelectorName:
		return (*permission.Reference)(nil)
	case WatchPermissionRequest_FieldPathSelectorFieldMask:
		return (*permission.Permission_FieldMask)(nil)
	case WatchPermissionRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPermissionRequest: %d", fp.selector))
	}
}

func (fp *WatchPermissionRequest_FieldTerminalPath) ClearValue(item *WatchPermissionRequest) {
	if item != nil {
		switch fp.selector {
		case WatchPermissionRequest_FieldPathSelectorName:
			item.Name = nil
		case WatchPermissionRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchPermissionRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for WatchPermissionRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchPermissionRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchPermissionRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchPermissionRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchPermissionRequest_FieldPathSelectorName ||
		fp.selector == WatchPermissionRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchPermissionRequest_FieldPathSelectorView
}

func (fp *WatchPermissionRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchPermissionRequest_FieldTerminalPath) WithIValue(value interface{}) WatchPermissionRequest_FieldPathValue {
	switch fp.selector {
	case WatchPermissionRequest_FieldPathSelectorName:
		return &WatchPermissionRequest_FieldTerminalPathValue{WatchPermissionRequest_FieldTerminalPath: *fp, value: value.(*permission.Reference)}
	case WatchPermissionRequest_FieldPathSelectorFieldMask:
		return &WatchPermissionRequest_FieldTerminalPathValue{WatchPermissionRequest_FieldTerminalPath: *fp, value: value.(*permission.Permission_FieldMask)}
	case WatchPermissionRequest_FieldPathSelectorView:
		return &WatchPermissionRequest_FieldTerminalPathValue{WatchPermissionRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPermissionRequest: %d", fp.selector))
	}
}

func (fp *WatchPermissionRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchPermissionRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchPermissionRequest_FieldPathArrayOfValues {
	fpaov := &WatchPermissionRequest_FieldTerminalPathArrayOfValues{WatchPermissionRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchPermissionRequest_FieldPathSelectorName:
		return &WatchPermissionRequest_FieldTerminalPathArrayOfValues{WatchPermissionRequest_FieldTerminalPath: *fp, values: values.([]*permission.Reference)}
	case WatchPermissionRequest_FieldPathSelectorFieldMask:
		return &WatchPermissionRequest_FieldTerminalPathArrayOfValues{WatchPermissionRequest_FieldTerminalPath: *fp, values: values.([]*permission.Permission_FieldMask)}
	case WatchPermissionRequest_FieldPathSelectorView:
		return &WatchPermissionRequest_FieldTerminalPathArrayOfValues{WatchPermissionRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPermissionRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchPermissionRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchPermissionRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchPermissionRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPermissionRequest: %d", fp.selector))
	}
}

func (fp *WatchPermissionRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchPermissionRequest_FieldPathValue allows storing values for WatchPermissionRequest fields according to their type
type WatchPermissionRequest_FieldPathValue interface {
	WatchPermissionRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchPermissionRequest)
	CompareWith(*WatchPermissionRequest) (cmp int, comparable bool)
}

func ParseWatchPermissionRequest_FieldPathValue(pathStr, valueStr string) (WatchPermissionRequest_FieldPathValue, error) {
	fp, err := ParseWatchPermissionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchPermissionRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchPermissionRequest_FieldPathValue), nil
}

func MustParseWatchPermissionRequest_FieldPathValue(pathStr, valueStr string) WatchPermissionRequest_FieldPathValue {
	fpv, err := ParseWatchPermissionRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchPermissionRequest_FieldTerminalPathValue struct {
	WatchPermissionRequest_FieldTerminalPath
	value interface{}
}

var _ WatchPermissionRequest_FieldPathValue = (*WatchPermissionRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchPermissionRequest' as interface{}
func (fpv *WatchPermissionRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchPermissionRequest_FieldTerminalPathValue) AsNameValue() (*permission.Reference, bool) {
	res, ok := fpv.value.(*permission.Reference)
	return res, ok
}
func (fpv *WatchPermissionRequest_FieldTerminalPathValue) AsFieldMaskValue() (*permission.Permission_FieldMask, bool) {
	res, ok := fpv.value.(*permission.Permission_FieldMask)
	return res, ok
}
func (fpv *WatchPermissionRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object WatchPermissionRequest
func (fpv *WatchPermissionRequest_FieldTerminalPathValue) SetTo(target **WatchPermissionRequest) {
	if *target == nil {
		*target = new(WatchPermissionRequest)
	}
	switch fpv.selector {
	case WatchPermissionRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*permission.Reference)
	case WatchPermissionRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*permission.Permission_FieldMask)
	case WatchPermissionRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPermissionRequest: %d", fpv.selector))
	}
}

func (fpv *WatchPermissionRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchPermissionRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchPermissionRequest_FieldTerminalPathValue' with the value under path in 'WatchPermissionRequest'.
func (fpv *WatchPermissionRequest_FieldTerminalPathValue) CompareWith(source *WatchPermissionRequest) (int, bool) {
	switch fpv.selector {
	case WatchPermissionRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*permission.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchPermissionRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchPermissionRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPermissionRequest: %d", fpv.selector))
	}
}

func (fpv *WatchPermissionRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchPermissionRequest))
}

// WatchPermissionRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchPermissionRequest according to their type
// Present only for array (repeated) types.
type WatchPermissionRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchPermissionRequest_FieldPath
	ContainsValue(*WatchPermissionRequest) bool
}

// ParseWatchPermissionRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchPermissionRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchPermissionRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchPermissionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchPermissionRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchPermissionRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchPermissionRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchPermissionRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchPermissionRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchPermissionRequest_FieldTerminalPathArrayItemValue struct {
	WatchPermissionRequest_FieldTerminalPath
	value interface{}
}

var _ WatchPermissionRequest_FieldPathArrayItemValue = (*WatchPermissionRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchPermissionRequest as interface{}
func (fpaiv *WatchPermissionRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchPermissionRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchPermissionRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchPermissionRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchPermissionRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchPermissionRequest'
func (fpaiv *WatchPermissionRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchPermissionRequest) bool {
	slice := fpaiv.WatchPermissionRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchPermissionRequest_FieldPathArrayOfValues allows storing slice of values for WatchPermissionRequest fields according to their type
type WatchPermissionRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchPermissionRequest_FieldPath
}

func ParseWatchPermissionRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchPermissionRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchPermissionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchPermissionRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchPermissionRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchPermissionRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchPermissionRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchPermissionRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchPermissionRequest_FieldTerminalPathArrayOfValues struct {
	WatchPermissionRequest_FieldTerminalPath
	values interface{}
}

var _ WatchPermissionRequest_FieldPathArrayOfValues = (*WatchPermissionRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchPermissionRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchPermissionRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*permission.Reference) {
			values = append(values, v)
		}
	case WatchPermissionRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*permission.Permission_FieldMask) {
			values = append(values, v)
		}
	case WatchPermissionRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchPermissionRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*permission.Reference, bool) {
	res, ok := fpaov.values.([]*permission.Reference)
	return res, ok
}
func (fpaov *WatchPermissionRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*permission.Permission_FieldMask, bool) {
	res, ok := fpaov.values.([]*permission.Permission_FieldMask)
	return res, ok
}
func (fpaov *WatchPermissionRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchPermissionResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchPermissionResponse_FieldPathSelector
	Get(source *WatchPermissionResponse) []interface{}
	GetSingle(source *WatchPermissionResponse) (interface{}, bool)
	ClearValue(item *WatchPermissionResponse)

	// Those methods build corresponding WatchPermissionResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchPermissionResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchPermissionResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchPermissionResponse_FieldPathArrayItemValue
}

type WatchPermissionResponse_FieldPathSelector int32

const (
	WatchPermissionResponse_FieldPathSelectorChange WatchPermissionResponse_FieldPathSelector = 0
)

func (s WatchPermissionResponse_FieldPathSelector) String() string {
	switch s {
	case WatchPermissionResponse_FieldPathSelectorChange:
		return "change"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPermissionResponse: %d", s))
	}
}

func BuildWatchPermissionResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchPermissionResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchPermissionResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "change":
			return &WatchPermissionResponse_FieldTerminalPath{selector: WatchPermissionResponse_FieldPathSelectorChange}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchPermissionResponse", fp)
}

func ParseWatchPermissionResponse_FieldPath(rawField string) (WatchPermissionResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchPermissionResponse_FieldPath(fp)
}

func MustParseWatchPermissionResponse_FieldPath(rawField string) WatchPermissionResponse_FieldPath {
	fp, err := ParseWatchPermissionResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchPermissionResponse_FieldTerminalPath struct {
	selector WatchPermissionResponse_FieldPathSelector
}

var _ WatchPermissionResponse_FieldPath = (*WatchPermissionResponse_FieldTerminalPath)(nil)

func (fp *WatchPermissionResponse_FieldTerminalPath) Selector() WatchPermissionResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchPermissionResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchPermissionResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchPermissionResponse
func (fp *WatchPermissionResponse_FieldTerminalPath) Get(source *WatchPermissionResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchPermissionResponse_FieldPathSelectorChange:
			if source.Change != nil {
				values = append(values, source.Change)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchPermissionResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchPermissionResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchPermissionResponse))
}

// GetSingle returns value pointed by specific field of from source WatchPermissionResponse
func (fp *WatchPermissionResponse_FieldTerminalPath) GetSingle(source *WatchPermissionResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchPermissionResponse_FieldPathSelectorChange:
		res := source.GetChange()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPermissionResponse: %d", fp.selector))
	}
}

func (fp *WatchPermissionResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchPermissionResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchPermissionResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchPermissionResponse_FieldPathSelectorChange:
		return (*permission.PermissionChange)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPermissionResponse: %d", fp.selector))
	}
}

func (fp *WatchPermissionResponse_FieldTerminalPath) ClearValue(item *WatchPermissionResponse) {
	if item != nil {
		switch fp.selector {
		case WatchPermissionResponse_FieldPathSelectorChange:
			item.Change = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchPermissionResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchPermissionResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchPermissionResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchPermissionResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchPermissionResponse_FieldPathSelectorChange
}

func (fp *WatchPermissionResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchPermissionResponse_FieldTerminalPath) WithIValue(value interface{}) WatchPermissionResponse_FieldPathValue {
	switch fp.selector {
	case WatchPermissionResponse_FieldPathSelectorChange:
		return &WatchPermissionResponse_FieldTerminalPathValue{WatchPermissionResponse_FieldTerminalPath: *fp, value: value.(*permission.PermissionChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPermissionResponse: %d", fp.selector))
	}
}

func (fp *WatchPermissionResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchPermissionResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchPermissionResponse_FieldPathArrayOfValues {
	fpaov := &WatchPermissionResponse_FieldTerminalPathArrayOfValues{WatchPermissionResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchPermissionResponse_FieldPathSelectorChange:
		return &WatchPermissionResponse_FieldTerminalPathArrayOfValues{WatchPermissionResponse_FieldTerminalPath: *fp, values: values.([]*permission.PermissionChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPermissionResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchPermissionResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchPermissionResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchPermissionResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPermissionResponse: %d", fp.selector))
	}
}

func (fp *WatchPermissionResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchPermissionResponse_FieldPathValue allows storing values for WatchPermissionResponse fields according to their type
type WatchPermissionResponse_FieldPathValue interface {
	WatchPermissionResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchPermissionResponse)
	CompareWith(*WatchPermissionResponse) (cmp int, comparable bool)
}

func ParseWatchPermissionResponse_FieldPathValue(pathStr, valueStr string) (WatchPermissionResponse_FieldPathValue, error) {
	fp, err := ParseWatchPermissionResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchPermissionResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchPermissionResponse_FieldPathValue), nil
}

func MustParseWatchPermissionResponse_FieldPathValue(pathStr, valueStr string) WatchPermissionResponse_FieldPathValue {
	fpv, err := ParseWatchPermissionResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchPermissionResponse_FieldTerminalPathValue struct {
	WatchPermissionResponse_FieldTerminalPath
	value interface{}
}

var _ WatchPermissionResponse_FieldPathValue = (*WatchPermissionResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchPermissionResponse' as interface{}
func (fpv *WatchPermissionResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchPermissionResponse_FieldTerminalPathValue) AsChangeValue() (*permission.PermissionChange, bool) {
	res, ok := fpv.value.(*permission.PermissionChange)
	return res, ok
}

// SetTo stores value for selected field for object WatchPermissionResponse
func (fpv *WatchPermissionResponse_FieldTerminalPathValue) SetTo(target **WatchPermissionResponse) {
	if *target == nil {
		*target = new(WatchPermissionResponse)
	}
	switch fpv.selector {
	case WatchPermissionResponse_FieldPathSelectorChange:
		(*target).Change = fpv.value.(*permission.PermissionChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPermissionResponse: %d", fpv.selector))
	}
}

func (fpv *WatchPermissionResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchPermissionResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchPermissionResponse_FieldTerminalPathValue' with the value under path in 'WatchPermissionResponse'.
func (fpv *WatchPermissionResponse_FieldTerminalPathValue) CompareWith(source *WatchPermissionResponse) (int, bool) {
	switch fpv.selector {
	case WatchPermissionResponse_FieldPathSelectorChange:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPermissionResponse: %d", fpv.selector))
	}
}

func (fpv *WatchPermissionResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchPermissionResponse))
}

// WatchPermissionResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchPermissionResponse according to their type
// Present only for array (repeated) types.
type WatchPermissionResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchPermissionResponse_FieldPath
	ContainsValue(*WatchPermissionResponse) bool
}

// ParseWatchPermissionResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchPermissionResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchPermissionResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchPermissionResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchPermissionResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchPermissionResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchPermissionResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchPermissionResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchPermissionResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchPermissionResponse_FieldTerminalPathArrayItemValue struct {
	WatchPermissionResponse_FieldTerminalPath
	value interface{}
}

var _ WatchPermissionResponse_FieldPathArrayItemValue = (*WatchPermissionResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchPermissionResponse as interface{}
func (fpaiv *WatchPermissionResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchPermissionResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchPermissionResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchPermissionResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchPermissionResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchPermissionResponse'
func (fpaiv *WatchPermissionResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchPermissionResponse) bool {
	slice := fpaiv.WatchPermissionResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchPermissionResponse_FieldPathArrayOfValues allows storing slice of values for WatchPermissionResponse fields according to their type
type WatchPermissionResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchPermissionResponse_FieldPath
}

func ParseWatchPermissionResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchPermissionResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchPermissionResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchPermissionResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchPermissionResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchPermissionResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchPermissionResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchPermissionResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchPermissionResponse_FieldTerminalPathArrayOfValues struct {
	WatchPermissionResponse_FieldTerminalPath
	values interface{}
}

var _ WatchPermissionResponse_FieldPathArrayOfValues = (*WatchPermissionResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchPermissionResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchPermissionResponse_FieldPathSelectorChange:
		for _, v := range fpaov.values.([]*permission.PermissionChange) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchPermissionResponse_FieldTerminalPathArrayOfValues) AsChangeArrayOfValues() ([]*permission.PermissionChange, bool) {
	res, ok := fpaov.values.([]*permission.PermissionChange)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchPermissionsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchPermissionsRequest_FieldPathSelector
	Get(source *WatchPermissionsRequest) []interface{}
	GetSingle(source *WatchPermissionsRequest) (interface{}, bool)
	ClearValue(item *WatchPermissionsRequest)

	// Those methods build corresponding WatchPermissionsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchPermissionsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchPermissionsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchPermissionsRequest_FieldPathArrayItemValue
}

type WatchPermissionsRequest_FieldPathSelector int32

const (
	WatchPermissionsRequest_FieldPathSelectorType         WatchPermissionsRequest_FieldPathSelector = 0
	WatchPermissionsRequest_FieldPathSelectorPageSize     WatchPermissionsRequest_FieldPathSelector = 1
	WatchPermissionsRequest_FieldPathSelectorPageToken    WatchPermissionsRequest_FieldPathSelector = 2
	WatchPermissionsRequest_FieldPathSelectorOrderBy      WatchPermissionsRequest_FieldPathSelector = 3
	WatchPermissionsRequest_FieldPathSelectorResumeToken  WatchPermissionsRequest_FieldPathSelector = 4
	WatchPermissionsRequest_FieldPathSelectorStartingTime WatchPermissionsRequest_FieldPathSelector = 5
	WatchPermissionsRequest_FieldPathSelectorFilter       WatchPermissionsRequest_FieldPathSelector = 6
	WatchPermissionsRequest_FieldPathSelectorFieldMask    WatchPermissionsRequest_FieldPathSelector = 7
	WatchPermissionsRequest_FieldPathSelectorView         WatchPermissionsRequest_FieldPathSelector = 8
	WatchPermissionsRequest_FieldPathSelectorMaxChunkSize WatchPermissionsRequest_FieldPathSelector = 9
)

func (s WatchPermissionsRequest_FieldPathSelector) String() string {
	switch s {
	case WatchPermissionsRequest_FieldPathSelectorType:
		return "type"
	case WatchPermissionsRequest_FieldPathSelectorPageSize:
		return "page_size"
	case WatchPermissionsRequest_FieldPathSelectorPageToken:
		return "page_token"
	case WatchPermissionsRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case WatchPermissionsRequest_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchPermissionsRequest_FieldPathSelectorStartingTime:
		return "starting_time"
	case WatchPermissionsRequest_FieldPathSelectorFilter:
		return "filter"
	case WatchPermissionsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchPermissionsRequest_FieldPathSelectorView:
		return "view"
	case WatchPermissionsRequest_FieldPathSelectorMaxChunkSize:
		return "max_chunk_size"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPermissionsRequest: %d", s))
	}
}

func BuildWatchPermissionsRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchPermissionsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchPermissionsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "type":
			return &WatchPermissionsRequest_FieldTerminalPath{selector: WatchPermissionsRequest_FieldPathSelectorType}, nil
		case "page_size", "pageSize", "page-size":
			return &WatchPermissionsRequest_FieldTerminalPath{selector: WatchPermissionsRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &WatchPermissionsRequest_FieldTerminalPath{selector: WatchPermissionsRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &WatchPermissionsRequest_FieldTerminalPath{selector: WatchPermissionsRequest_FieldPathSelectorOrderBy}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchPermissionsRequest_FieldTerminalPath{selector: WatchPermissionsRequest_FieldPathSelectorResumeToken}, nil
		case "starting_time", "startingTime", "starting-time":
			return &WatchPermissionsRequest_FieldTerminalPath{selector: WatchPermissionsRequest_FieldPathSelectorStartingTime}, nil
		case "filter":
			return &WatchPermissionsRequest_FieldTerminalPath{selector: WatchPermissionsRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchPermissionsRequest_FieldTerminalPath{selector: WatchPermissionsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchPermissionsRequest_FieldTerminalPath{selector: WatchPermissionsRequest_FieldPathSelectorView}, nil
		case "max_chunk_size", "maxChunkSize", "max-chunk-size":
			return &WatchPermissionsRequest_FieldTerminalPath{selector: WatchPermissionsRequest_FieldPathSelectorMaxChunkSize}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchPermissionsRequest", fp)
}

func ParseWatchPermissionsRequest_FieldPath(rawField string) (WatchPermissionsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchPermissionsRequest_FieldPath(fp)
}

func MustParseWatchPermissionsRequest_FieldPath(rawField string) WatchPermissionsRequest_FieldPath {
	fp, err := ParseWatchPermissionsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchPermissionsRequest_FieldTerminalPath struct {
	selector WatchPermissionsRequest_FieldPathSelector
}

var _ WatchPermissionsRequest_FieldPath = (*WatchPermissionsRequest_FieldTerminalPath)(nil)

func (fp *WatchPermissionsRequest_FieldTerminalPath) Selector() WatchPermissionsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchPermissionsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchPermissionsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchPermissionsRequest
func (fp *WatchPermissionsRequest_FieldTerminalPath) Get(source *WatchPermissionsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchPermissionsRequest_FieldPathSelectorType:
			values = append(values, source.Type)
		case WatchPermissionsRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case WatchPermissionsRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case WatchPermissionsRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case WatchPermissionsRequest_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchPermissionsRequest_FieldPathSelectorStartingTime:
			if source.StartingTime != nil {
				values = append(values, source.StartingTime)
			}
		case WatchPermissionsRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case WatchPermissionsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchPermissionsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		case WatchPermissionsRequest_FieldPathSelectorMaxChunkSize:
			values = append(values, source.MaxChunkSize)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchPermissionsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchPermissionsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchPermissionsRequest))
}

// GetSingle returns value pointed by specific field of from source WatchPermissionsRequest
func (fp *WatchPermissionsRequest_FieldTerminalPath) GetSingle(source *WatchPermissionsRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchPermissionsRequest_FieldPathSelectorType:
		return source.GetType(), source != nil
	case WatchPermissionsRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case WatchPermissionsRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case WatchPermissionsRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case WatchPermissionsRequest_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchPermissionsRequest_FieldPathSelectorStartingTime:
		res := source.GetStartingTime()
		return res, res != nil
	case WatchPermissionsRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case WatchPermissionsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchPermissionsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	case WatchPermissionsRequest_FieldPathSelectorMaxChunkSize:
		return source.GetMaxChunkSize(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPermissionsRequest: %d", fp.selector))
	}
}

func (fp *WatchPermissionsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchPermissionsRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchPermissionsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchPermissionsRequest_FieldPathSelectorType:
		return watch_type.WatchType_STATEFUL
	case WatchPermissionsRequest_FieldPathSelectorPageSize:
		return int32(0)
	case WatchPermissionsRequest_FieldPathSelectorPageToken:
		return (*permission.PagerCursor)(nil)
	case WatchPermissionsRequest_FieldPathSelectorOrderBy:
		return (*permission.OrderBy)(nil)
	case WatchPermissionsRequest_FieldPathSelectorResumeToken:
		return ""
	case WatchPermissionsRequest_FieldPathSelectorStartingTime:
		return (*timestamp.Timestamp)(nil)
	case WatchPermissionsRequest_FieldPathSelectorFilter:
		return (*permission.Filter)(nil)
	case WatchPermissionsRequest_FieldPathSelectorFieldMask:
		return (*permission.Permission_FieldMask)(nil)
	case WatchPermissionsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	case WatchPermissionsRequest_FieldPathSelectorMaxChunkSize:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPermissionsRequest: %d", fp.selector))
	}
}

func (fp *WatchPermissionsRequest_FieldTerminalPath) ClearValue(item *WatchPermissionsRequest) {
	if item != nil {
		switch fp.selector {
		case WatchPermissionsRequest_FieldPathSelectorType:
			item.Type = watch_type.WatchType_STATEFUL
		case WatchPermissionsRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case WatchPermissionsRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case WatchPermissionsRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case WatchPermissionsRequest_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchPermissionsRequest_FieldPathSelectorStartingTime:
			item.StartingTime = nil
		case WatchPermissionsRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case WatchPermissionsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchPermissionsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		case WatchPermissionsRequest_FieldPathSelectorMaxChunkSize:
			item.MaxChunkSize = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchPermissionsRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchPermissionsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchPermissionsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchPermissionsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchPermissionsRequest_FieldPathSelectorType ||
		fp.selector == WatchPermissionsRequest_FieldPathSelectorPageSize ||
		fp.selector == WatchPermissionsRequest_FieldPathSelectorPageToken ||
		fp.selector == WatchPermissionsRequest_FieldPathSelectorOrderBy ||
		fp.selector == WatchPermissionsRequest_FieldPathSelectorResumeToken ||
		fp.selector == WatchPermissionsRequest_FieldPathSelectorStartingTime ||
		fp.selector == WatchPermissionsRequest_FieldPathSelectorFilter ||
		fp.selector == WatchPermissionsRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchPermissionsRequest_FieldPathSelectorView ||
		fp.selector == WatchPermissionsRequest_FieldPathSelectorMaxChunkSize
}

func (fp *WatchPermissionsRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchPermissionsRequest_FieldTerminalPath) WithIValue(value interface{}) WatchPermissionsRequest_FieldPathValue {
	switch fp.selector {
	case WatchPermissionsRequest_FieldPathSelectorType:
		return &WatchPermissionsRequest_FieldTerminalPathValue{WatchPermissionsRequest_FieldTerminalPath: *fp, value: value.(watch_type.WatchType)}
	case WatchPermissionsRequest_FieldPathSelectorPageSize:
		return &WatchPermissionsRequest_FieldTerminalPathValue{WatchPermissionsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case WatchPermissionsRequest_FieldPathSelectorPageToken:
		return &WatchPermissionsRequest_FieldTerminalPathValue{WatchPermissionsRequest_FieldTerminalPath: *fp, value: value.(*permission.PagerCursor)}
	case WatchPermissionsRequest_FieldPathSelectorOrderBy:
		return &WatchPermissionsRequest_FieldTerminalPathValue{WatchPermissionsRequest_FieldTerminalPath: *fp, value: value.(*permission.OrderBy)}
	case WatchPermissionsRequest_FieldPathSelectorResumeToken:
		return &WatchPermissionsRequest_FieldTerminalPathValue{WatchPermissionsRequest_FieldTerminalPath: *fp, value: value.(string)}
	case WatchPermissionsRequest_FieldPathSelectorStartingTime:
		return &WatchPermissionsRequest_FieldTerminalPathValue{WatchPermissionsRequest_FieldTerminalPath: *fp, value: value.(*timestamp.Timestamp)}
	case WatchPermissionsRequest_FieldPathSelectorFilter:
		return &WatchPermissionsRequest_FieldTerminalPathValue{WatchPermissionsRequest_FieldTerminalPath: *fp, value: value.(*permission.Filter)}
	case WatchPermissionsRequest_FieldPathSelectorFieldMask:
		return &WatchPermissionsRequest_FieldTerminalPathValue{WatchPermissionsRequest_FieldTerminalPath: *fp, value: value.(*permission.Permission_FieldMask)}
	case WatchPermissionsRequest_FieldPathSelectorView:
		return &WatchPermissionsRequest_FieldTerminalPathValue{WatchPermissionsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	case WatchPermissionsRequest_FieldPathSelectorMaxChunkSize:
		return &WatchPermissionsRequest_FieldTerminalPathValue{WatchPermissionsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPermissionsRequest: %d", fp.selector))
	}
}

func (fp *WatchPermissionsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchPermissionsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchPermissionsRequest_FieldPathArrayOfValues {
	fpaov := &WatchPermissionsRequest_FieldTerminalPathArrayOfValues{WatchPermissionsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchPermissionsRequest_FieldPathSelectorType:
		return &WatchPermissionsRequest_FieldTerminalPathArrayOfValues{WatchPermissionsRequest_FieldTerminalPath: *fp, values: values.([]watch_type.WatchType)}
	case WatchPermissionsRequest_FieldPathSelectorPageSize:
		return &WatchPermissionsRequest_FieldTerminalPathArrayOfValues{WatchPermissionsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case WatchPermissionsRequest_FieldPathSelectorPageToken:
		return &WatchPermissionsRequest_FieldTerminalPathArrayOfValues{WatchPermissionsRequest_FieldTerminalPath: *fp, values: values.([]*permission.PagerCursor)}
	case WatchPermissionsRequest_FieldPathSelectorOrderBy:
		return &WatchPermissionsRequest_FieldTerminalPathArrayOfValues{WatchPermissionsRequest_FieldTerminalPath: *fp, values: values.([]*permission.OrderBy)}
	case WatchPermissionsRequest_FieldPathSelectorResumeToken:
		return &WatchPermissionsRequest_FieldTerminalPathArrayOfValues{WatchPermissionsRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchPermissionsRequest_FieldPathSelectorStartingTime:
		return &WatchPermissionsRequest_FieldTerminalPathArrayOfValues{WatchPermissionsRequest_FieldTerminalPath: *fp, values: values.([]*timestamp.Timestamp)}
	case WatchPermissionsRequest_FieldPathSelectorFilter:
		return &WatchPermissionsRequest_FieldTerminalPathArrayOfValues{WatchPermissionsRequest_FieldTerminalPath: *fp, values: values.([]*permission.Filter)}
	case WatchPermissionsRequest_FieldPathSelectorFieldMask:
		return &WatchPermissionsRequest_FieldTerminalPathArrayOfValues{WatchPermissionsRequest_FieldTerminalPath: *fp, values: values.([]*permission.Permission_FieldMask)}
	case WatchPermissionsRequest_FieldPathSelectorView:
		return &WatchPermissionsRequest_FieldTerminalPathArrayOfValues{WatchPermissionsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	case WatchPermissionsRequest_FieldPathSelectorMaxChunkSize:
		return &WatchPermissionsRequest_FieldTerminalPathArrayOfValues{WatchPermissionsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPermissionsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchPermissionsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchPermissionsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchPermissionsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPermissionsRequest: %d", fp.selector))
	}
}

func (fp *WatchPermissionsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchPermissionsRequest_FieldPathValue allows storing values for WatchPermissionsRequest fields according to their type
type WatchPermissionsRequest_FieldPathValue interface {
	WatchPermissionsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchPermissionsRequest)
	CompareWith(*WatchPermissionsRequest) (cmp int, comparable bool)
}

func ParseWatchPermissionsRequest_FieldPathValue(pathStr, valueStr string) (WatchPermissionsRequest_FieldPathValue, error) {
	fp, err := ParseWatchPermissionsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchPermissionsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchPermissionsRequest_FieldPathValue), nil
}

func MustParseWatchPermissionsRequest_FieldPathValue(pathStr, valueStr string) WatchPermissionsRequest_FieldPathValue {
	fpv, err := ParseWatchPermissionsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchPermissionsRequest_FieldTerminalPathValue struct {
	WatchPermissionsRequest_FieldTerminalPath
	value interface{}
}

var _ WatchPermissionsRequest_FieldPathValue = (*WatchPermissionsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchPermissionsRequest' as interface{}
func (fpv *WatchPermissionsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchPermissionsRequest_FieldTerminalPathValue) AsTypeValue() (watch_type.WatchType, bool) {
	res, ok := fpv.value.(watch_type.WatchType)
	return res, ok
}
func (fpv *WatchPermissionsRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *WatchPermissionsRequest_FieldTerminalPathValue) AsPageTokenValue() (*permission.PagerCursor, bool) {
	res, ok := fpv.value.(*permission.PagerCursor)
	return res, ok
}
func (fpv *WatchPermissionsRequest_FieldTerminalPathValue) AsOrderByValue() (*permission.OrderBy, bool) {
	res, ok := fpv.value.(*permission.OrderBy)
	return res, ok
}
func (fpv *WatchPermissionsRequest_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchPermissionsRequest_FieldTerminalPathValue) AsStartingTimeValue() (*timestamp.Timestamp, bool) {
	res, ok := fpv.value.(*timestamp.Timestamp)
	return res, ok
}
func (fpv *WatchPermissionsRequest_FieldTerminalPathValue) AsFilterValue() (*permission.Filter, bool) {
	res, ok := fpv.value.(*permission.Filter)
	return res, ok
}
func (fpv *WatchPermissionsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*permission.Permission_FieldMask, bool) {
	res, ok := fpv.value.(*permission.Permission_FieldMask)
	return res, ok
}
func (fpv *WatchPermissionsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}
func (fpv *WatchPermissionsRequest_FieldTerminalPathValue) AsMaxChunkSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object WatchPermissionsRequest
func (fpv *WatchPermissionsRequest_FieldTerminalPathValue) SetTo(target **WatchPermissionsRequest) {
	if *target == nil {
		*target = new(WatchPermissionsRequest)
	}
	switch fpv.selector {
	case WatchPermissionsRequest_FieldPathSelectorType:
		(*target).Type = fpv.value.(watch_type.WatchType)
	case WatchPermissionsRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case WatchPermissionsRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*permission.PagerCursor)
	case WatchPermissionsRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*permission.OrderBy)
	case WatchPermissionsRequest_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchPermissionsRequest_FieldPathSelectorStartingTime:
		(*target).StartingTime = fpv.value.(*timestamp.Timestamp)
	case WatchPermissionsRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*permission.Filter)
	case WatchPermissionsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*permission.Permission_FieldMask)
	case WatchPermissionsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	case WatchPermissionsRequest_FieldPathSelectorMaxChunkSize:
		(*target).MaxChunkSize = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPermissionsRequest: %d", fpv.selector))
	}
}

func (fpv *WatchPermissionsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchPermissionsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchPermissionsRequest_FieldTerminalPathValue' with the value under path in 'WatchPermissionsRequest'.
func (fpv *WatchPermissionsRequest_FieldTerminalPathValue) CompareWith(source *WatchPermissionsRequest) (int, bool) {
	switch fpv.selector {
	case WatchPermissionsRequest_FieldPathSelectorType:
		leftValue := fpv.value.(watch_type.WatchType)
		rightValue := source.GetType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchPermissionsRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchPermissionsRequest_FieldPathSelectorPageToken:
		return 0, false
	case WatchPermissionsRequest_FieldPathSelectorOrderBy:
		return 0, false
	case WatchPermissionsRequest_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchPermissionsRequest_FieldPathSelectorStartingTime:
		leftValue := fpv.value.(*timestamp.Timestamp)
		rightValue := source.GetStartingTime()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.AsTime().Equal(rightValue.AsTime()) {
			return 0, true
		} else if leftValue.AsTime().Before(rightValue.AsTime()) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchPermissionsRequest_FieldPathSelectorFilter:
		return 0, false
	case WatchPermissionsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchPermissionsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchPermissionsRequest_FieldPathSelectorMaxChunkSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetMaxChunkSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPermissionsRequest: %d", fpv.selector))
	}
}

func (fpv *WatchPermissionsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchPermissionsRequest))
}

// WatchPermissionsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchPermissionsRequest according to their type
// Present only for array (repeated) types.
type WatchPermissionsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchPermissionsRequest_FieldPath
	ContainsValue(*WatchPermissionsRequest) bool
}

// ParseWatchPermissionsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchPermissionsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchPermissionsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchPermissionsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchPermissionsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchPermissionsRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchPermissionsRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchPermissionsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchPermissionsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchPermissionsRequest_FieldTerminalPathArrayItemValue struct {
	WatchPermissionsRequest_FieldTerminalPath
	value interface{}
}

var _ WatchPermissionsRequest_FieldPathArrayItemValue = (*WatchPermissionsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchPermissionsRequest as interface{}
func (fpaiv *WatchPermissionsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchPermissionsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchPermissionsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchPermissionsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchPermissionsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchPermissionsRequest'
func (fpaiv *WatchPermissionsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchPermissionsRequest) bool {
	slice := fpaiv.WatchPermissionsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchPermissionsRequest_FieldPathArrayOfValues allows storing slice of values for WatchPermissionsRequest fields according to their type
type WatchPermissionsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchPermissionsRequest_FieldPath
}

func ParseWatchPermissionsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchPermissionsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchPermissionsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchPermissionsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchPermissionsRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchPermissionsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchPermissionsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchPermissionsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchPermissionsRequest_FieldTerminalPathArrayOfValues struct {
	WatchPermissionsRequest_FieldTerminalPath
	values interface{}
}

var _ WatchPermissionsRequest_FieldPathArrayOfValues = (*WatchPermissionsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchPermissionsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchPermissionsRequest_FieldPathSelectorType:
		for _, v := range fpaov.values.([]watch_type.WatchType) {
			values = append(values, v)
		}
	case WatchPermissionsRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case WatchPermissionsRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*permission.PagerCursor) {
			values = append(values, v)
		}
	case WatchPermissionsRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*permission.OrderBy) {
			values = append(values, v)
		}
	case WatchPermissionsRequest_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchPermissionsRequest_FieldPathSelectorStartingTime:
		for _, v := range fpaov.values.([]*timestamp.Timestamp) {
			values = append(values, v)
		}
	case WatchPermissionsRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*permission.Filter) {
			values = append(values, v)
		}
	case WatchPermissionsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*permission.Permission_FieldMask) {
			values = append(values, v)
		}
	case WatchPermissionsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	case WatchPermissionsRequest_FieldPathSelectorMaxChunkSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchPermissionsRequest_FieldTerminalPathArrayOfValues) AsTypeArrayOfValues() ([]watch_type.WatchType, bool) {
	res, ok := fpaov.values.([]watch_type.WatchType)
	return res, ok
}
func (fpaov *WatchPermissionsRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *WatchPermissionsRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*permission.PagerCursor, bool) {
	res, ok := fpaov.values.([]*permission.PagerCursor)
	return res, ok
}
func (fpaov *WatchPermissionsRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*permission.OrderBy, bool) {
	res, ok := fpaov.values.([]*permission.OrderBy)
	return res, ok
}
func (fpaov *WatchPermissionsRequest_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchPermissionsRequest_FieldTerminalPathArrayOfValues) AsStartingTimeArrayOfValues() ([]*timestamp.Timestamp, bool) {
	res, ok := fpaov.values.([]*timestamp.Timestamp)
	return res, ok
}
func (fpaov *WatchPermissionsRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*permission.Filter, bool) {
	res, ok := fpaov.values.([]*permission.Filter)
	return res, ok
}
func (fpaov *WatchPermissionsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*permission.Permission_FieldMask, bool) {
	res, ok := fpaov.values.([]*permission.Permission_FieldMask)
	return res, ok
}
func (fpaov *WatchPermissionsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}
func (fpaov *WatchPermissionsRequest_FieldTerminalPathArrayOfValues) AsMaxChunkSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchPermissionsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchPermissionsResponse_FieldPathSelector
	Get(source *WatchPermissionsResponse) []interface{}
	GetSingle(source *WatchPermissionsResponse) (interface{}, bool)
	ClearValue(item *WatchPermissionsResponse)

	// Those methods build corresponding WatchPermissionsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchPermissionsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchPermissionsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchPermissionsResponse_FieldPathArrayItemValue
}

type WatchPermissionsResponse_FieldPathSelector int32

const (
	WatchPermissionsResponse_FieldPathSelectorPermissionChanges WatchPermissionsResponse_FieldPathSelector = 0
	WatchPermissionsResponse_FieldPathSelectorIsCurrent         WatchPermissionsResponse_FieldPathSelector = 1
	WatchPermissionsResponse_FieldPathSelectorPageTokenChange   WatchPermissionsResponse_FieldPathSelector = 2
	WatchPermissionsResponse_FieldPathSelectorResumeToken       WatchPermissionsResponse_FieldPathSelector = 3
	WatchPermissionsResponse_FieldPathSelectorSnapshotSize      WatchPermissionsResponse_FieldPathSelector = 4
	WatchPermissionsResponse_FieldPathSelectorIsSoftReset       WatchPermissionsResponse_FieldPathSelector = 5
	WatchPermissionsResponse_FieldPathSelectorIsHardReset       WatchPermissionsResponse_FieldPathSelector = 6
)

func (s WatchPermissionsResponse_FieldPathSelector) String() string {
	switch s {
	case WatchPermissionsResponse_FieldPathSelectorPermissionChanges:
		return "permission_changes"
	case WatchPermissionsResponse_FieldPathSelectorIsCurrent:
		return "is_current"
	case WatchPermissionsResponse_FieldPathSelectorPageTokenChange:
		return "page_token_change"
	case WatchPermissionsResponse_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchPermissionsResponse_FieldPathSelectorSnapshotSize:
		return "snapshot_size"
	case WatchPermissionsResponse_FieldPathSelectorIsSoftReset:
		return "is_soft_reset"
	case WatchPermissionsResponse_FieldPathSelectorIsHardReset:
		return "is_hard_reset"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPermissionsResponse: %d", s))
	}
}

func BuildWatchPermissionsResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchPermissionsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchPermissionsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "permission_changes", "permissionChanges", "permission-changes":
			return &WatchPermissionsResponse_FieldTerminalPath{selector: WatchPermissionsResponse_FieldPathSelectorPermissionChanges}, nil
		case "is_current", "isCurrent", "is-current":
			return &WatchPermissionsResponse_FieldTerminalPath{selector: WatchPermissionsResponse_FieldPathSelectorIsCurrent}, nil
		case "page_token_change", "pageTokenChange", "page-token-change":
			return &WatchPermissionsResponse_FieldTerminalPath{selector: WatchPermissionsResponse_FieldPathSelectorPageTokenChange}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchPermissionsResponse_FieldTerminalPath{selector: WatchPermissionsResponse_FieldPathSelectorResumeToken}, nil
		case "snapshot_size", "snapshotSize", "snapshot-size":
			return &WatchPermissionsResponse_FieldTerminalPath{selector: WatchPermissionsResponse_FieldPathSelectorSnapshotSize}, nil
		case "is_soft_reset", "isSoftReset", "is-soft-reset":
			return &WatchPermissionsResponse_FieldTerminalPath{selector: WatchPermissionsResponse_FieldPathSelectorIsSoftReset}, nil
		case "is_hard_reset", "isHardReset", "is-hard-reset":
			return &WatchPermissionsResponse_FieldTerminalPath{selector: WatchPermissionsResponse_FieldPathSelectorIsHardReset}, nil
		}
	} else {
		switch fp[0] {
		case "page_token_change", "pageTokenChange", "page-token-change":
			if subpath, err := BuildWatchPermissionsResponsePageTokenChange_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &WatchPermissionsResponse_FieldSubPath{selector: WatchPermissionsResponse_FieldPathSelectorPageTokenChange, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchPermissionsResponse", fp)
}

func ParseWatchPermissionsResponse_FieldPath(rawField string) (WatchPermissionsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchPermissionsResponse_FieldPath(fp)
}

func MustParseWatchPermissionsResponse_FieldPath(rawField string) WatchPermissionsResponse_FieldPath {
	fp, err := ParseWatchPermissionsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchPermissionsResponse_FieldTerminalPath struct {
	selector WatchPermissionsResponse_FieldPathSelector
}

var _ WatchPermissionsResponse_FieldPath = (*WatchPermissionsResponse_FieldTerminalPath)(nil)

func (fp *WatchPermissionsResponse_FieldTerminalPath) Selector() WatchPermissionsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchPermissionsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchPermissionsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchPermissionsResponse
func (fp *WatchPermissionsResponse_FieldTerminalPath) Get(source *WatchPermissionsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchPermissionsResponse_FieldPathSelectorPermissionChanges:
			for _, value := range source.GetPermissionChanges() {
				values = append(values, value)
			}
		case WatchPermissionsResponse_FieldPathSelectorIsCurrent:
			values = append(values, source.IsCurrent)
		case WatchPermissionsResponse_FieldPathSelectorPageTokenChange:
			if source.PageTokenChange != nil {
				values = append(values, source.PageTokenChange)
			}
		case WatchPermissionsResponse_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchPermissionsResponse_FieldPathSelectorSnapshotSize:
			values = append(values, source.SnapshotSize)
		case WatchPermissionsResponse_FieldPathSelectorIsSoftReset:
			values = append(values, source.IsSoftReset)
		case WatchPermissionsResponse_FieldPathSelectorIsHardReset:
			values = append(values, source.IsHardReset)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchPermissionsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchPermissionsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchPermissionsResponse))
}

// GetSingle returns value pointed by specific field of from source WatchPermissionsResponse
func (fp *WatchPermissionsResponse_FieldTerminalPath) GetSingle(source *WatchPermissionsResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchPermissionsResponse_FieldPathSelectorPermissionChanges:
		res := source.GetPermissionChanges()
		return res, res != nil
	case WatchPermissionsResponse_FieldPathSelectorIsCurrent:
		return source.GetIsCurrent(), source != nil
	case WatchPermissionsResponse_FieldPathSelectorPageTokenChange:
		res := source.GetPageTokenChange()
		return res, res != nil
	case WatchPermissionsResponse_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchPermissionsResponse_FieldPathSelectorSnapshotSize:
		return source.GetSnapshotSize(), source != nil
	case WatchPermissionsResponse_FieldPathSelectorIsSoftReset:
		return source.GetIsSoftReset(), source != nil
	case WatchPermissionsResponse_FieldPathSelectorIsHardReset:
		return source.GetIsHardReset(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPermissionsResponse: %d", fp.selector))
	}
}

func (fp *WatchPermissionsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchPermissionsResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchPermissionsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchPermissionsResponse_FieldPathSelectorPermissionChanges:
		return ([]*permission.PermissionChange)(nil)
	case WatchPermissionsResponse_FieldPathSelectorIsCurrent:
		return false
	case WatchPermissionsResponse_FieldPathSelectorPageTokenChange:
		return (*WatchPermissionsResponse_PageTokenChange)(nil)
	case WatchPermissionsResponse_FieldPathSelectorResumeToken:
		return ""
	case WatchPermissionsResponse_FieldPathSelectorSnapshotSize:
		return int64(0)
	case WatchPermissionsResponse_FieldPathSelectorIsSoftReset:
		return false
	case WatchPermissionsResponse_FieldPathSelectorIsHardReset:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPermissionsResponse: %d", fp.selector))
	}
}

func (fp *WatchPermissionsResponse_FieldTerminalPath) ClearValue(item *WatchPermissionsResponse) {
	if item != nil {
		switch fp.selector {
		case WatchPermissionsResponse_FieldPathSelectorPermissionChanges:
			item.PermissionChanges = nil
		case WatchPermissionsResponse_FieldPathSelectorIsCurrent:
			item.IsCurrent = false
		case WatchPermissionsResponse_FieldPathSelectorPageTokenChange:
			item.PageTokenChange = nil
		case WatchPermissionsResponse_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchPermissionsResponse_FieldPathSelectorSnapshotSize:
			item.SnapshotSize = int64(0)
		case WatchPermissionsResponse_FieldPathSelectorIsSoftReset:
			item.IsSoftReset = false
		case WatchPermissionsResponse_FieldPathSelectorIsHardReset:
			item.IsHardReset = false
		default:
			panic(fmt.Sprintf("Invalid selector for WatchPermissionsResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchPermissionsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchPermissionsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchPermissionsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchPermissionsResponse_FieldPathSelectorPermissionChanges ||
		fp.selector == WatchPermissionsResponse_FieldPathSelectorIsCurrent ||
		fp.selector == WatchPermissionsResponse_FieldPathSelectorResumeToken ||
		fp.selector == WatchPermissionsResponse_FieldPathSelectorSnapshotSize ||
		fp.selector == WatchPermissionsResponse_FieldPathSelectorIsSoftReset ||
		fp.selector == WatchPermissionsResponse_FieldPathSelectorIsHardReset
}

func (fp *WatchPermissionsResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchPermissionsResponse_FieldTerminalPath) WithIValue(value interface{}) WatchPermissionsResponse_FieldPathValue {
	switch fp.selector {
	case WatchPermissionsResponse_FieldPathSelectorPermissionChanges:
		return &WatchPermissionsResponse_FieldTerminalPathValue{WatchPermissionsResponse_FieldTerminalPath: *fp, value: value.([]*permission.PermissionChange)}
	case WatchPermissionsResponse_FieldPathSelectorIsCurrent:
		return &WatchPermissionsResponse_FieldTerminalPathValue{WatchPermissionsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchPermissionsResponse_FieldPathSelectorPageTokenChange:
		return &WatchPermissionsResponse_FieldTerminalPathValue{WatchPermissionsResponse_FieldTerminalPath: *fp, value: value.(*WatchPermissionsResponse_PageTokenChange)}
	case WatchPermissionsResponse_FieldPathSelectorResumeToken:
		return &WatchPermissionsResponse_FieldTerminalPathValue{WatchPermissionsResponse_FieldTerminalPath: *fp, value: value.(string)}
	case WatchPermissionsResponse_FieldPathSelectorSnapshotSize:
		return &WatchPermissionsResponse_FieldTerminalPathValue{WatchPermissionsResponse_FieldTerminalPath: *fp, value: value.(int64)}
	case WatchPermissionsResponse_FieldPathSelectorIsSoftReset:
		return &WatchPermissionsResponse_FieldTerminalPathValue{WatchPermissionsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchPermissionsResponse_FieldPathSelectorIsHardReset:
		return &WatchPermissionsResponse_FieldTerminalPathValue{WatchPermissionsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPermissionsResponse: %d", fp.selector))
	}
}

func (fp *WatchPermissionsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchPermissionsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchPermissionsResponse_FieldPathArrayOfValues {
	fpaov := &WatchPermissionsResponse_FieldTerminalPathArrayOfValues{WatchPermissionsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchPermissionsResponse_FieldPathSelectorPermissionChanges:
		return &WatchPermissionsResponse_FieldTerminalPathArrayOfValues{WatchPermissionsResponse_FieldTerminalPath: *fp, values: values.([][]*permission.PermissionChange)}
	case WatchPermissionsResponse_FieldPathSelectorIsCurrent:
		return &WatchPermissionsResponse_FieldTerminalPathArrayOfValues{WatchPermissionsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchPermissionsResponse_FieldPathSelectorPageTokenChange:
		return &WatchPermissionsResponse_FieldTerminalPathArrayOfValues{WatchPermissionsResponse_FieldTerminalPath: *fp, values: values.([]*WatchPermissionsResponse_PageTokenChange)}
	case WatchPermissionsResponse_FieldPathSelectorResumeToken:
		return &WatchPermissionsResponse_FieldTerminalPathArrayOfValues{WatchPermissionsResponse_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchPermissionsResponse_FieldPathSelectorSnapshotSize:
		return &WatchPermissionsResponse_FieldTerminalPathArrayOfValues{WatchPermissionsResponse_FieldTerminalPath: *fp, values: values.([]int64)}
	case WatchPermissionsResponse_FieldPathSelectorIsSoftReset:
		return &WatchPermissionsResponse_FieldTerminalPathArrayOfValues{WatchPermissionsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchPermissionsResponse_FieldPathSelectorIsHardReset:
		return &WatchPermissionsResponse_FieldTerminalPathArrayOfValues{WatchPermissionsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPermissionsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchPermissionsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchPermissionsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchPermissionsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case WatchPermissionsResponse_FieldPathSelectorPermissionChanges:
		return &WatchPermissionsResponse_FieldTerminalPathArrayItemValue{WatchPermissionsResponse_FieldTerminalPath: *fp, value: value.(*permission.PermissionChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPermissionsResponse: %d", fp.selector))
	}
}

func (fp *WatchPermissionsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type WatchPermissionsResponse_FieldSubPath struct {
	selector WatchPermissionsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ WatchPermissionsResponse_FieldPath = (*WatchPermissionsResponse_FieldSubPath)(nil)

func (fps *WatchPermissionsResponse_FieldSubPath) Selector() WatchPermissionsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *WatchPermissionsResponse_FieldSubPath) AsPageTokenChangeSubPath() (WatchPermissionsResponsePageTokenChange_FieldPath, bool) {
	res, ok := fps.subPath.(WatchPermissionsResponsePageTokenChange_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *WatchPermissionsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *WatchPermissionsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source WatchPermissionsResponse
func (fps *WatchPermissionsResponse_FieldSubPath) Get(source *WatchPermissionsResponse) (values []interface{}) {
	switch fps.selector {
	case WatchPermissionsResponse_FieldPathSelectorPageTokenChange:
		values = append(values, fps.subPath.GetRaw(source.GetPageTokenChange())...)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPermissionsResponse: %d", fps.selector))
	}
	return
}

func (fps *WatchPermissionsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*WatchPermissionsResponse))
}

// GetSingle returns value of selected field from source WatchPermissionsResponse
func (fps *WatchPermissionsResponse_FieldSubPath) GetSingle(source *WatchPermissionsResponse) (interface{}, bool) {
	switch fps.selector {
	case WatchPermissionsResponse_FieldPathSelectorPageTokenChange:
		if source.GetPageTokenChange() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPermissionsResponse: %d", fps.selector))
	}
}

func (fps *WatchPermissionsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*WatchPermissionsResponse))
}

// GetDefault returns a default value of the field type
func (fps *WatchPermissionsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *WatchPermissionsResponse_FieldSubPath) ClearValue(item *WatchPermissionsResponse) {
	if item != nil {
		switch fps.selector {
		case WatchPermissionsResponse_FieldPathSelectorPageTokenChange:
			fps.subPath.ClearValueRaw(item.PageTokenChange)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchPermissionsResponse: %d", fps.selector))
		}
	}
}

func (fps *WatchPermissionsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*WatchPermissionsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *WatchPermissionsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *WatchPermissionsResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&WatchPermissionsResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *WatchPermissionsResponse_FieldSubPath) WithIValue(value interface{}) WatchPermissionsResponse_FieldPathValue {
	return &WatchPermissionsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *WatchPermissionsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *WatchPermissionsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) WatchPermissionsResponse_FieldPathArrayOfValues {
	return &WatchPermissionsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *WatchPermissionsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *WatchPermissionsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) WatchPermissionsResponse_FieldPathArrayItemValue {
	return &WatchPermissionsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *WatchPermissionsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// WatchPermissionsResponse_FieldPathValue allows storing values for WatchPermissionsResponse fields according to their type
type WatchPermissionsResponse_FieldPathValue interface {
	WatchPermissionsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchPermissionsResponse)
	CompareWith(*WatchPermissionsResponse) (cmp int, comparable bool)
}

func ParseWatchPermissionsResponse_FieldPathValue(pathStr, valueStr string) (WatchPermissionsResponse_FieldPathValue, error) {
	fp, err := ParseWatchPermissionsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchPermissionsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchPermissionsResponse_FieldPathValue), nil
}

func MustParseWatchPermissionsResponse_FieldPathValue(pathStr, valueStr string) WatchPermissionsResponse_FieldPathValue {
	fpv, err := ParseWatchPermissionsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchPermissionsResponse_FieldTerminalPathValue struct {
	WatchPermissionsResponse_FieldTerminalPath
	value interface{}
}

var _ WatchPermissionsResponse_FieldPathValue = (*WatchPermissionsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchPermissionsResponse' as interface{}
func (fpv *WatchPermissionsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchPermissionsResponse_FieldTerminalPathValue) AsPermissionChangesValue() ([]*permission.PermissionChange, bool) {
	res, ok := fpv.value.([]*permission.PermissionChange)
	return res, ok
}
func (fpv *WatchPermissionsResponse_FieldTerminalPathValue) AsIsCurrentValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchPermissionsResponse_FieldTerminalPathValue) AsPageTokenChangeValue() (*WatchPermissionsResponse_PageTokenChange, bool) {
	res, ok := fpv.value.(*WatchPermissionsResponse_PageTokenChange)
	return res, ok
}
func (fpv *WatchPermissionsResponse_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchPermissionsResponse_FieldTerminalPathValue) AsSnapshotSizeValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}
func (fpv *WatchPermissionsResponse_FieldTerminalPathValue) AsIsSoftResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchPermissionsResponse_FieldTerminalPathValue) AsIsHardResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object WatchPermissionsResponse
func (fpv *WatchPermissionsResponse_FieldTerminalPathValue) SetTo(target **WatchPermissionsResponse) {
	if *target == nil {
		*target = new(WatchPermissionsResponse)
	}
	switch fpv.selector {
	case WatchPermissionsResponse_FieldPathSelectorPermissionChanges:
		(*target).PermissionChanges = fpv.value.([]*permission.PermissionChange)
	case WatchPermissionsResponse_FieldPathSelectorIsCurrent:
		(*target).IsCurrent = fpv.value.(bool)
	case WatchPermissionsResponse_FieldPathSelectorPageTokenChange:
		(*target).PageTokenChange = fpv.value.(*WatchPermissionsResponse_PageTokenChange)
	case WatchPermissionsResponse_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchPermissionsResponse_FieldPathSelectorSnapshotSize:
		(*target).SnapshotSize = fpv.value.(int64)
	case WatchPermissionsResponse_FieldPathSelectorIsSoftReset:
		(*target).IsSoftReset = fpv.value.(bool)
	case WatchPermissionsResponse_FieldPathSelectorIsHardReset:
		(*target).IsHardReset = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPermissionsResponse: %d", fpv.selector))
	}
}

func (fpv *WatchPermissionsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchPermissionsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchPermissionsResponse_FieldTerminalPathValue' with the value under path in 'WatchPermissionsResponse'.
func (fpv *WatchPermissionsResponse_FieldTerminalPathValue) CompareWith(source *WatchPermissionsResponse) (int, bool) {
	switch fpv.selector {
	case WatchPermissionsResponse_FieldPathSelectorPermissionChanges:
		return 0, false
	case WatchPermissionsResponse_FieldPathSelectorIsCurrent:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsCurrent()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchPermissionsResponse_FieldPathSelectorPageTokenChange:
		return 0, false
	case WatchPermissionsResponse_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchPermissionsResponse_FieldPathSelectorSnapshotSize:
		leftValue := fpv.value.(int64)
		rightValue := source.GetSnapshotSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchPermissionsResponse_FieldPathSelectorIsSoftReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsSoftReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchPermissionsResponse_FieldPathSelectorIsHardReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsHardReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPermissionsResponse: %d", fpv.selector))
	}
}

func (fpv *WatchPermissionsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchPermissionsResponse))
}

type WatchPermissionsResponse_FieldSubPathValue struct {
	WatchPermissionsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ WatchPermissionsResponse_FieldPathValue = (*WatchPermissionsResponse_FieldSubPathValue)(nil)

func (fpvs *WatchPermissionsResponse_FieldSubPathValue) AsPageTokenChangePathValue() (WatchPermissionsResponsePageTokenChange_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(WatchPermissionsResponsePageTokenChange_FieldPathValue)
	return res, ok
}

func (fpvs *WatchPermissionsResponse_FieldSubPathValue) SetTo(target **WatchPermissionsResponse) {
	if *target == nil {
		*target = new(WatchPermissionsResponse)
	}
	switch fpvs.Selector() {
	case WatchPermissionsResponse_FieldPathSelectorPageTokenChange:
		fpvs.subPathValue.(WatchPermissionsResponsePageTokenChange_FieldPathValue).SetTo(&(*target).PageTokenChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPermissionsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchPermissionsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchPermissionsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *WatchPermissionsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *WatchPermissionsResponse_FieldSubPathValue) CompareWith(source *WatchPermissionsResponse) (int, bool) {
	switch fpvs.Selector() {
	case WatchPermissionsResponse_FieldPathSelectorPageTokenChange:
		return fpvs.subPathValue.(WatchPermissionsResponsePageTokenChange_FieldPathValue).CompareWith(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPermissionsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchPermissionsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*WatchPermissionsResponse))
}

// WatchPermissionsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchPermissionsResponse according to their type
// Present only for array (repeated) types.
type WatchPermissionsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchPermissionsResponse_FieldPath
	ContainsValue(*WatchPermissionsResponse) bool
}

// ParseWatchPermissionsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchPermissionsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchPermissionsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchPermissionsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchPermissionsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchPermissionsResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchPermissionsResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchPermissionsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchPermissionsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchPermissionsResponse_FieldTerminalPathArrayItemValue struct {
	WatchPermissionsResponse_FieldTerminalPath
	value interface{}
}

var _ WatchPermissionsResponse_FieldPathArrayItemValue = (*WatchPermissionsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchPermissionsResponse as interface{}
func (fpaiv *WatchPermissionsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *WatchPermissionsResponse_FieldTerminalPathArrayItemValue) AsPermissionChangesItemValue() (*permission.PermissionChange, bool) {
	res, ok := fpaiv.value.(*permission.PermissionChange)
	return res, ok
}

func (fpaiv *WatchPermissionsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchPermissionsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchPermissionsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchPermissionsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchPermissionsResponse'
func (fpaiv *WatchPermissionsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchPermissionsResponse) bool {
	slice := fpaiv.WatchPermissionsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type WatchPermissionsResponse_FieldSubPathArrayItemValue struct {
	WatchPermissionsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *WatchPermissionsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *WatchPermissionsResponse_FieldSubPathArrayItemValue) AsPageTokenChangePathItemValue() (WatchPermissionsResponsePageTokenChange_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(WatchPermissionsResponsePageTokenChange_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchPermissionsResponse'
func (fpaivs *WatchPermissionsResponse_FieldSubPathArrayItemValue) ContainsValue(source *WatchPermissionsResponse) bool {
	switch fpaivs.Selector() {
	case WatchPermissionsResponse_FieldPathSelectorPageTokenChange:
		return fpaivs.subPathItemValue.(WatchPermissionsResponsePageTokenChange_FieldPathArrayItemValue).ContainsValue(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPermissionsResponse: %d", fpaivs.Selector()))
	}
}

// WatchPermissionsResponse_FieldPathArrayOfValues allows storing slice of values for WatchPermissionsResponse fields according to their type
type WatchPermissionsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchPermissionsResponse_FieldPath
}

func ParseWatchPermissionsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchPermissionsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchPermissionsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchPermissionsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchPermissionsResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchPermissionsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchPermissionsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchPermissionsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchPermissionsResponse_FieldTerminalPathArrayOfValues struct {
	WatchPermissionsResponse_FieldTerminalPath
	values interface{}
}

var _ WatchPermissionsResponse_FieldPathArrayOfValues = (*WatchPermissionsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchPermissionsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchPermissionsResponse_FieldPathSelectorPermissionChanges:
		for _, v := range fpaov.values.([][]*permission.PermissionChange) {
			values = append(values, v)
		}
	case WatchPermissionsResponse_FieldPathSelectorIsCurrent:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchPermissionsResponse_FieldPathSelectorPageTokenChange:
		for _, v := range fpaov.values.([]*WatchPermissionsResponse_PageTokenChange) {
			values = append(values, v)
		}
	case WatchPermissionsResponse_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchPermissionsResponse_FieldPathSelectorSnapshotSize:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	case WatchPermissionsResponse_FieldPathSelectorIsSoftReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchPermissionsResponse_FieldPathSelectorIsHardReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchPermissionsResponse_FieldTerminalPathArrayOfValues) AsPermissionChangesArrayOfValues() ([][]*permission.PermissionChange, bool) {
	res, ok := fpaov.values.([][]*permission.PermissionChange)
	return res, ok
}
func (fpaov *WatchPermissionsResponse_FieldTerminalPathArrayOfValues) AsIsCurrentArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchPermissionsResponse_FieldTerminalPathArrayOfValues) AsPageTokenChangeArrayOfValues() ([]*WatchPermissionsResponse_PageTokenChange, bool) {
	res, ok := fpaov.values.([]*WatchPermissionsResponse_PageTokenChange)
	return res, ok
}
func (fpaov *WatchPermissionsResponse_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchPermissionsResponse_FieldTerminalPathArrayOfValues) AsSnapshotSizeArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}
func (fpaov *WatchPermissionsResponse_FieldTerminalPathArrayOfValues) AsIsSoftResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchPermissionsResponse_FieldTerminalPathArrayOfValues) AsIsHardResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

type WatchPermissionsResponse_FieldSubPathArrayOfValues struct {
	WatchPermissionsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ WatchPermissionsResponse_FieldPathArrayOfValues = (*WatchPermissionsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *WatchPermissionsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *WatchPermissionsResponse_FieldSubPathArrayOfValues) AsPageTokenChangePathArrayOfValues() (WatchPermissionsResponsePageTokenChange_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(WatchPermissionsResponsePageTokenChange_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchPermissionsResponsePageTokenChange_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchPermissionsResponsePageTokenChange_FieldPathSelector
	Get(source *WatchPermissionsResponse_PageTokenChange) []interface{}
	GetSingle(source *WatchPermissionsResponse_PageTokenChange) (interface{}, bool)
	ClearValue(item *WatchPermissionsResponse_PageTokenChange)

	// Those methods build corresponding WatchPermissionsResponsePageTokenChange_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchPermissionsResponsePageTokenChange_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchPermissionsResponsePageTokenChange_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchPermissionsResponsePageTokenChange_FieldPathArrayItemValue
}

type WatchPermissionsResponsePageTokenChange_FieldPathSelector int32

const (
	WatchPermissionsResponsePageTokenChange_FieldPathSelectorPrevPageToken WatchPermissionsResponsePageTokenChange_FieldPathSelector = 0
	WatchPermissionsResponsePageTokenChange_FieldPathSelectorNextPageToken WatchPermissionsResponsePageTokenChange_FieldPathSelector = 1
)

func (s WatchPermissionsResponsePageTokenChange_FieldPathSelector) String() string {
	switch s {
	case WatchPermissionsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case WatchPermissionsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPermissionsResponse_PageTokenChange: %d", s))
	}
}

func BuildWatchPermissionsResponsePageTokenChange_FieldPath(fp gotenobject.RawFieldPath) (WatchPermissionsResponsePageTokenChange_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchPermissionsResponse_PageTokenChange")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &WatchPermissionsResponsePageTokenChange_FieldTerminalPath{selector: WatchPermissionsResponsePageTokenChange_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &WatchPermissionsResponsePageTokenChange_FieldTerminalPath{selector: WatchPermissionsResponsePageTokenChange_FieldPathSelectorNextPageToken}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchPermissionsResponse_PageTokenChange", fp)
}

func ParseWatchPermissionsResponsePageTokenChange_FieldPath(rawField string) (WatchPermissionsResponsePageTokenChange_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchPermissionsResponsePageTokenChange_FieldPath(fp)
}

func MustParseWatchPermissionsResponsePageTokenChange_FieldPath(rawField string) WatchPermissionsResponsePageTokenChange_FieldPath {
	fp, err := ParseWatchPermissionsResponsePageTokenChange_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchPermissionsResponsePageTokenChange_FieldTerminalPath struct {
	selector WatchPermissionsResponsePageTokenChange_FieldPathSelector
}

var _ WatchPermissionsResponsePageTokenChange_FieldPath = (*WatchPermissionsResponsePageTokenChange_FieldTerminalPath)(nil)

func (fp *WatchPermissionsResponsePageTokenChange_FieldTerminalPath) Selector() WatchPermissionsResponsePageTokenChange_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchPermissionsResponsePageTokenChange_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchPermissionsResponsePageTokenChange_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchPermissionsResponse_PageTokenChange
func (fp *WatchPermissionsResponsePageTokenChange_FieldTerminalPath) Get(source *WatchPermissionsResponse_PageTokenChange) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchPermissionsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case WatchPermissionsResponsePageTokenChange_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchPermissionsResponse_PageTokenChange: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchPermissionsResponsePageTokenChange_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchPermissionsResponse_PageTokenChange))
}

// GetSingle returns value pointed by specific field of from source WatchPermissionsResponse_PageTokenChange
func (fp *WatchPermissionsResponsePageTokenChange_FieldTerminalPath) GetSingle(source *WatchPermissionsResponse_PageTokenChange) (interface{}, bool) {
	switch fp.selector {
	case WatchPermissionsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case WatchPermissionsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPermissionsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchPermissionsResponsePageTokenChange_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchPermissionsResponse_PageTokenChange))
}

// GetDefault returns a default value of the field type
func (fp *WatchPermissionsResponsePageTokenChange_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchPermissionsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return (*permission.PagerCursor)(nil)
	case WatchPermissionsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return (*permission.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPermissionsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchPermissionsResponsePageTokenChange_FieldTerminalPath) ClearValue(item *WatchPermissionsResponse_PageTokenChange) {
	if item != nil {
		switch fp.selector {
		case WatchPermissionsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case WatchPermissionsResponsePageTokenChange_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchPermissionsResponse_PageTokenChange: %d", fp.selector))
		}
	}
}

func (fp *WatchPermissionsResponsePageTokenChange_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchPermissionsResponse_PageTokenChange))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchPermissionsResponsePageTokenChange_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchPermissionsResponsePageTokenChange_FieldPathSelectorPrevPageToken ||
		fp.selector == WatchPermissionsResponsePageTokenChange_FieldPathSelectorNextPageToken
}

func (fp *WatchPermissionsResponsePageTokenChange_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchPermissionsResponsePageTokenChange_FieldTerminalPath) WithIValue(value interface{}) WatchPermissionsResponsePageTokenChange_FieldPathValue {
	switch fp.selector {
	case WatchPermissionsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchPermissionsResponsePageTokenChange_FieldTerminalPathValue{WatchPermissionsResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*permission.PagerCursor)}
	case WatchPermissionsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchPermissionsResponsePageTokenChange_FieldTerminalPathValue{WatchPermissionsResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*permission.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPermissionsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchPermissionsResponsePageTokenChange_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchPermissionsResponsePageTokenChange_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchPermissionsResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov := &WatchPermissionsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchPermissionsResponsePageTokenChange_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchPermissionsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchPermissionsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchPermissionsResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*permission.PagerCursor)}
	case WatchPermissionsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchPermissionsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchPermissionsResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*permission.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPermissionsResponse_PageTokenChange: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchPermissionsResponsePageTokenChange_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchPermissionsResponsePageTokenChange_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchPermissionsResponsePageTokenChange_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPermissionsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchPermissionsResponsePageTokenChange_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchPermissionsResponsePageTokenChange_FieldPathValue allows storing values for PageTokenChange fields according to their type
type WatchPermissionsResponsePageTokenChange_FieldPathValue interface {
	WatchPermissionsResponsePageTokenChange_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchPermissionsResponse_PageTokenChange)
	CompareWith(*WatchPermissionsResponse_PageTokenChange) (cmp int, comparable bool)
}

func ParseWatchPermissionsResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) (WatchPermissionsResponsePageTokenChange_FieldPathValue, error) {
	fp, err := ParseWatchPermissionsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchPermissionsResponsePageTokenChange_FieldPathValue), nil
}

func MustParseWatchPermissionsResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) WatchPermissionsResponsePageTokenChange_FieldPathValue {
	fpv, err := ParseWatchPermissionsResponsePageTokenChange_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchPermissionsResponsePageTokenChange_FieldTerminalPathValue struct {
	WatchPermissionsResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchPermissionsResponsePageTokenChange_FieldPathValue = (*WatchPermissionsResponsePageTokenChange_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'PageTokenChange' as interface{}
func (fpv *WatchPermissionsResponsePageTokenChange_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchPermissionsResponsePageTokenChange_FieldTerminalPathValue) AsPrevPageTokenValue() (*permission.PagerCursor, bool) {
	res, ok := fpv.value.(*permission.PagerCursor)
	return res, ok
}
func (fpv *WatchPermissionsResponsePageTokenChange_FieldTerminalPathValue) AsNextPageTokenValue() (*permission.PagerCursor, bool) {
	res, ok := fpv.value.(*permission.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object PageTokenChange
func (fpv *WatchPermissionsResponsePageTokenChange_FieldTerminalPathValue) SetTo(target **WatchPermissionsResponse_PageTokenChange) {
	if *target == nil {
		*target = new(WatchPermissionsResponse_PageTokenChange)
	}
	switch fpv.selector {
	case WatchPermissionsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*permission.PagerCursor)
	case WatchPermissionsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*permission.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPermissionsResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchPermissionsResponsePageTokenChange_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchPermissionsResponse_PageTokenChange)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchPermissionsResponsePageTokenChange_FieldTerminalPathValue' with the value under path in 'WatchPermissionsResponse_PageTokenChange'.
func (fpv *WatchPermissionsResponsePageTokenChange_FieldTerminalPathValue) CompareWith(source *WatchPermissionsResponse_PageTokenChange) (int, bool) {
	switch fpv.selector {
	case WatchPermissionsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return 0, false
	case WatchPermissionsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPermissionsResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchPermissionsResponsePageTokenChange_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchPermissionsResponse_PageTokenChange))
}

// WatchPermissionsResponsePageTokenChange_FieldPathArrayItemValue allows storing single item in Path-specific values for PageTokenChange according to their type
// Present only for array (repeated) types.
type WatchPermissionsResponsePageTokenChange_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchPermissionsResponsePageTokenChange_FieldPath
	ContainsValue(*WatchPermissionsResponse_PageTokenChange) bool
}

// ParseWatchPermissionsResponsePageTokenChange_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchPermissionsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) (WatchPermissionsResponsePageTokenChange_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchPermissionsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchPermissionsResponsePageTokenChange_FieldPathArrayItemValue), nil
}

func MustParseWatchPermissionsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) WatchPermissionsResponsePageTokenChange_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchPermissionsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchPermissionsResponsePageTokenChange_FieldTerminalPathArrayItemValue struct {
	WatchPermissionsResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchPermissionsResponsePageTokenChange_FieldPathArrayItemValue = (*WatchPermissionsResponsePageTokenChange_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchPermissionsResponse_PageTokenChange as interface{}
func (fpaiv *WatchPermissionsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchPermissionsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingle(source *WatchPermissionsResponse_PageTokenChange) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchPermissionsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchPermissionsResponse_PageTokenChange))
}

// Contains returns a boolean indicating if value that is being held is present in given 'PageTokenChange'
func (fpaiv *WatchPermissionsResponsePageTokenChange_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchPermissionsResponse_PageTokenChange) bool {
	slice := fpaiv.WatchPermissionsResponsePageTokenChange_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchPermissionsResponsePageTokenChange_FieldPathArrayOfValues allows storing slice of values for PageTokenChange fields according to their type
type WatchPermissionsResponsePageTokenChange_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchPermissionsResponsePageTokenChange_FieldPath
}

func ParseWatchPermissionsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchPermissionsResponsePageTokenChange_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchPermissionsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchPermissionsResponsePageTokenChange_FieldPathArrayOfValues), nil
}

func MustParseWatchPermissionsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) WatchPermissionsResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov, err := ParseWatchPermissionsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchPermissionsResponsePageTokenChange_FieldTerminalPathArrayOfValues struct {
	WatchPermissionsResponsePageTokenChange_FieldTerminalPath
	values interface{}
}

var _ WatchPermissionsResponsePageTokenChange_FieldPathArrayOfValues = (*WatchPermissionsResponsePageTokenChange_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchPermissionsResponsePageTokenChange_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchPermissionsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*permission.PagerCursor) {
			values = append(values, v)
		}
	case WatchPermissionsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*permission.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchPermissionsResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*permission.PagerCursor, bool) {
	res, ok := fpaov.values.([]*permission.PagerCursor)
	return res, ok
}
func (fpaov *WatchPermissionsResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*permission.PagerCursor, bool) {
	res, ok := fpaov.values.([]*permission.PagerCursor)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type CreatePermissionRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() CreatePermissionRequest_FieldPathSelector
	Get(source *CreatePermissionRequest) []interface{}
	GetSingle(source *CreatePermissionRequest) (interface{}, bool)
	ClearValue(item *CreatePermissionRequest)

	// Those methods build corresponding CreatePermissionRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) CreatePermissionRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) CreatePermissionRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) CreatePermissionRequest_FieldPathArrayItemValue
}

type CreatePermissionRequest_FieldPathSelector int32

const (
	CreatePermissionRequest_FieldPathSelectorPermission CreatePermissionRequest_FieldPathSelector = 0
)

func (s CreatePermissionRequest_FieldPathSelector) String() string {
	switch s {
	case CreatePermissionRequest_FieldPathSelectorPermission:
		return "permission"
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePermissionRequest: %d", s))
	}
}

func BuildCreatePermissionRequest_FieldPath(fp gotenobject.RawFieldPath) (CreatePermissionRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object CreatePermissionRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "permission":
			return &CreatePermissionRequest_FieldTerminalPath{selector: CreatePermissionRequest_FieldPathSelectorPermission}, nil
		}
	} else {
		switch fp[0] {
		case "permission":
			if subpath, err := permission.BuildPermission_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &CreatePermissionRequest_FieldSubPath{selector: CreatePermissionRequest_FieldPathSelectorPermission, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object CreatePermissionRequest", fp)
}

func ParseCreatePermissionRequest_FieldPath(rawField string) (CreatePermissionRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildCreatePermissionRequest_FieldPath(fp)
}

func MustParseCreatePermissionRequest_FieldPath(rawField string) CreatePermissionRequest_FieldPath {
	fp, err := ParseCreatePermissionRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type CreatePermissionRequest_FieldTerminalPath struct {
	selector CreatePermissionRequest_FieldPathSelector
}

var _ CreatePermissionRequest_FieldPath = (*CreatePermissionRequest_FieldTerminalPath)(nil)

func (fp *CreatePermissionRequest_FieldTerminalPath) Selector() CreatePermissionRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *CreatePermissionRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *CreatePermissionRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source CreatePermissionRequest
func (fp *CreatePermissionRequest_FieldTerminalPath) Get(source *CreatePermissionRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case CreatePermissionRequest_FieldPathSelectorPermission:
			if source.Permission != nil {
				values = append(values, source.Permission)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for CreatePermissionRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *CreatePermissionRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*CreatePermissionRequest))
}

// GetSingle returns value pointed by specific field of from source CreatePermissionRequest
func (fp *CreatePermissionRequest_FieldTerminalPath) GetSingle(source *CreatePermissionRequest) (interface{}, bool) {
	switch fp.selector {
	case CreatePermissionRequest_FieldPathSelectorPermission:
		res := source.GetPermission()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePermissionRequest: %d", fp.selector))
	}
}

func (fp *CreatePermissionRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*CreatePermissionRequest))
}

// GetDefault returns a default value of the field type
func (fp *CreatePermissionRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case CreatePermissionRequest_FieldPathSelectorPermission:
		return (*permission.Permission)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePermissionRequest: %d", fp.selector))
	}
}

func (fp *CreatePermissionRequest_FieldTerminalPath) ClearValue(item *CreatePermissionRequest) {
	if item != nil {
		switch fp.selector {
		case CreatePermissionRequest_FieldPathSelectorPermission:
			item.Permission = nil
		default:
			panic(fmt.Sprintf("Invalid selector for CreatePermissionRequest: %d", fp.selector))
		}
	}
}

func (fp *CreatePermissionRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*CreatePermissionRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *CreatePermissionRequest_FieldTerminalPath) IsLeaf() bool {
	return false
}

func (fp *CreatePermissionRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *CreatePermissionRequest_FieldTerminalPath) WithIValue(value interface{}) CreatePermissionRequest_FieldPathValue {
	switch fp.selector {
	case CreatePermissionRequest_FieldPathSelectorPermission:
		return &CreatePermissionRequest_FieldTerminalPathValue{CreatePermissionRequest_FieldTerminalPath: *fp, value: value.(*permission.Permission)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePermissionRequest: %d", fp.selector))
	}
}

func (fp *CreatePermissionRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *CreatePermissionRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) CreatePermissionRequest_FieldPathArrayOfValues {
	fpaov := &CreatePermissionRequest_FieldTerminalPathArrayOfValues{CreatePermissionRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case CreatePermissionRequest_FieldPathSelectorPermission:
		return &CreatePermissionRequest_FieldTerminalPathArrayOfValues{CreatePermissionRequest_FieldTerminalPath: *fp, values: values.([]*permission.Permission)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePermissionRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *CreatePermissionRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *CreatePermissionRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) CreatePermissionRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePermissionRequest: %d", fp.selector))
	}
}

func (fp *CreatePermissionRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type CreatePermissionRequest_FieldSubPath struct {
	selector CreatePermissionRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ CreatePermissionRequest_FieldPath = (*CreatePermissionRequest_FieldSubPath)(nil)

func (fps *CreatePermissionRequest_FieldSubPath) Selector() CreatePermissionRequest_FieldPathSelector {
	return fps.selector
}
func (fps *CreatePermissionRequest_FieldSubPath) AsPermissionSubPath() (permission.Permission_FieldPath, bool) {
	res, ok := fps.subPath.(permission.Permission_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *CreatePermissionRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *CreatePermissionRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source CreatePermissionRequest
func (fps *CreatePermissionRequest_FieldSubPath) Get(source *CreatePermissionRequest) (values []interface{}) {
	switch fps.selector {
	case CreatePermissionRequest_FieldPathSelectorPermission:
		values = append(values, fps.subPath.GetRaw(source.GetPermission())...)
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePermissionRequest: %d", fps.selector))
	}
	return
}

func (fps *CreatePermissionRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*CreatePermissionRequest))
}

// GetSingle returns value of selected field from source CreatePermissionRequest
func (fps *CreatePermissionRequest_FieldSubPath) GetSingle(source *CreatePermissionRequest) (interface{}, bool) {
	switch fps.selector {
	case CreatePermissionRequest_FieldPathSelectorPermission:
		if source.GetPermission() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPermission())
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePermissionRequest: %d", fps.selector))
	}
}

func (fps *CreatePermissionRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*CreatePermissionRequest))
}

// GetDefault returns a default value of the field type
func (fps *CreatePermissionRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *CreatePermissionRequest_FieldSubPath) ClearValue(item *CreatePermissionRequest) {
	if item != nil {
		switch fps.selector {
		case CreatePermissionRequest_FieldPathSelectorPermission:
			fps.subPath.ClearValueRaw(item.Permission)
		default:
			panic(fmt.Sprintf("Invalid selector for CreatePermissionRequest: %d", fps.selector))
		}
	}
}

func (fps *CreatePermissionRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*CreatePermissionRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *CreatePermissionRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *CreatePermissionRequest_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&CreatePermissionRequest_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *CreatePermissionRequest_FieldSubPath) WithIValue(value interface{}) CreatePermissionRequest_FieldPathValue {
	return &CreatePermissionRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *CreatePermissionRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *CreatePermissionRequest_FieldSubPath) WithIArrayOfValues(values interface{}) CreatePermissionRequest_FieldPathArrayOfValues {
	return &CreatePermissionRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *CreatePermissionRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *CreatePermissionRequest_FieldSubPath) WithIArrayItemValue(value interface{}) CreatePermissionRequest_FieldPathArrayItemValue {
	return &CreatePermissionRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *CreatePermissionRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// CreatePermissionRequest_FieldPathValue allows storing values for CreatePermissionRequest fields according to their type
type CreatePermissionRequest_FieldPathValue interface {
	CreatePermissionRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **CreatePermissionRequest)
	CompareWith(*CreatePermissionRequest) (cmp int, comparable bool)
}

func ParseCreatePermissionRequest_FieldPathValue(pathStr, valueStr string) (CreatePermissionRequest_FieldPathValue, error) {
	fp, err := ParseCreatePermissionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreatePermissionRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(CreatePermissionRequest_FieldPathValue), nil
}

func MustParseCreatePermissionRequest_FieldPathValue(pathStr, valueStr string) CreatePermissionRequest_FieldPathValue {
	fpv, err := ParseCreatePermissionRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type CreatePermissionRequest_FieldTerminalPathValue struct {
	CreatePermissionRequest_FieldTerminalPath
	value interface{}
}

var _ CreatePermissionRequest_FieldPathValue = (*CreatePermissionRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CreatePermissionRequest' as interface{}
func (fpv *CreatePermissionRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *CreatePermissionRequest_FieldTerminalPathValue) AsPermissionValue() (*permission.Permission, bool) {
	res, ok := fpv.value.(*permission.Permission)
	return res, ok
}

// SetTo stores value for selected field for object CreatePermissionRequest
func (fpv *CreatePermissionRequest_FieldTerminalPathValue) SetTo(target **CreatePermissionRequest) {
	if *target == nil {
		*target = new(CreatePermissionRequest)
	}
	switch fpv.selector {
	case CreatePermissionRequest_FieldPathSelectorPermission:
		(*target).Permission = fpv.value.(*permission.Permission)
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePermissionRequest: %d", fpv.selector))
	}
}

func (fpv *CreatePermissionRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreatePermissionRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'CreatePermissionRequest_FieldTerminalPathValue' with the value under path in 'CreatePermissionRequest'.
func (fpv *CreatePermissionRequest_FieldTerminalPathValue) CompareWith(source *CreatePermissionRequest) (int, bool) {
	switch fpv.selector {
	case CreatePermissionRequest_FieldPathSelectorPermission:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePermissionRequest: %d", fpv.selector))
	}
}

func (fpv *CreatePermissionRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*CreatePermissionRequest))
}

type CreatePermissionRequest_FieldSubPathValue struct {
	CreatePermissionRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ CreatePermissionRequest_FieldPathValue = (*CreatePermissionRequest_FieldSubPathValue)(nil)

func (fpvs *CreatePermissionRequest_FieldSubPathValue) AsPermissionPathValue() (permission.Permission_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(permission.Permission_FieldPathValue)
	return res, ok
}

func (fpvs *CreatePermissionRequest_FieldSubPathValue) SetTo(target **CreatePermissionRequest) {
	if *target == nil {
		*target = new(CreatePermissionRequest)
	}
	switch fpvs.Selector() {
	case CreatePermissionRequest_FieldPathSelectorPermission:
		fpvs.subPathValue.(permission.Permission_FieldPathValue).SetTo(&(*target).Permission)
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePermissionRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreatePermissionRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreatePermissionRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *CreatePermissionRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *CreatePermissionRequest_FieldSubPathValue) CompareWith(source *CreatePermissionRequest) (int, bool) {
	switch fpvs.Selector() {
	case CreatePermissionRequest_FieldPathSelectorPermission:
		return fpvs.subPathValue.(permission.Permission_FieldPathValue).CompareWith(source.GetPermission())
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePermissionRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreatePermissionRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*CreatePermissionRequest))
}

// CreatePermissionRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for CreatePermissionRequest according to their type
// Present only for array (repeated) types.
type CreatePermissionRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	CreatePermissionRequest_FieldPath
	ContainsValue(*CreatePermissionRequest) bool
}

// ParseCreatePermissionRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseCreatePermissionRequest_FieldPathArrayItemValue(pathStr, valueStr string) (CreatePermissionRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseCreatePermissionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreatePermissionRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(CreatePermissionRequest_FieldPathArrayItemValue), nil
}

func MustParseCreatePermissionRequest_FieldPathArrayItemValue(pathStr, valueStr string) CreatePermissionRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseCreatePermissionRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type CreatePermissionRequest_FieldTerminalPathArrayItemValue struct {
	CreatePermissionRequest_FieldTerminalPath
	value interface{}
}

var _ CreatePermissionRequest_FieldPathArrayItemValue = (*CreatePermissionRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object CreatePermissionRequest as interface{}
func (fpaiv *CreatePermissionRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *CreatePermissionRequest_FieldTerminalPathArrayItemValue) GetSingle(source *CreatePermissionRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *CreatePermissionRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*CreatePermissionRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreatePermissionRequest'
func (fpaiv *CreatePermissionRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *CreatePermissionRequest) bool {
	slice := fpaiv.CreatePermissionRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type CreatePermissionRequest_FieldSubPathArrayItemValue struct {
	CreatePermissionRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *CreatePermissionRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *CreatePermissionRequest_FieldSubPathArrayItemValue) AsPermissionPathItemValue() (permission.Permission_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(permission.Permission_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreatePermissionRequest'
func (fpaivs *CreatePermissionRequest_FieldSubPathArrayItemValue) ContainsValue(source *CreatePermissionRequest) bool {
	switch fpaivs.Selector() {
	case CreatePermissionRequest_FieldPathSelectorPermission:
		return fpaivs.subPathItemValue.(permission.Permission_FieldPathArrayItemValue).ContainsValue(source.GetPermission())
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePermissionRequest: %d", fpaivs.Selector()))
	}
}

// CreatePermissionRequest_FieldPathArrayOfValues allows storing slice of values for CreatePermissionRequest fields according to their type
type CreatePermissionRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	CreatePermissionRequest_FieldPath
}

func ParseCreatePermissionRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (CreatePermissionRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseCreatePermissionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreatePermissionRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(CreatePermissionRequest_FieldPathArrayOfValues), nil
}

func MustParseCreatePermissionRequest_FieldPathArrayOfValues(pathStr, valuesStr string) CreatePermissionRequest_FieldPathArrayOfValues {
	fpaov, err := ParseCreatePermissionRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type CreatePermissionRequest_FieldTerminalPathArrayOfValues struct {
	CreatePermissionRequest_FieldTerminalPath
	values interface{}
}

var _ CreatePermissionRequest_FieldPathArrayOfValues = (*CreatePermissionRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *CreatePermissionRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case CreatePermissionRequest_FieldPathSelectorPermission:
		for _, v := range fpaov.values.([]*permission.Permission) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *CreatePermissionRequest_FieldTerminalPathArrayOfValues) AsPermissionArrayOfValues() ([]*permission.Permission, bool) {
	res, ok := fpaov.values.([]*permission.Permission)
	return res, ok
}

type CreatePermissionRequest_FieldSubPathArrayOfValues struct {
	CreatePermissionRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ CreatePermissionRequest_FieldPathArrayOfValues = (*CreatePermissionRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *CreatePermissionRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *CreatePermissionRequest_FieldSubPathArrayOfValues) AsPermissionPathArrayOfValues() (permission.Permission_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(permission.Permission_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdatePermissionRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdatePermissionRequest_FieldPathSelector
	Get(source *UpdatePermissionRequest) []interface{}
	GetSingle(source *UpdatePermissionRequest) (interface{}, bool)
	ClearValue(item *UpdatePermissionRequest)

	// Those methods build corresponding UpdatePermissionRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdatePermissionRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdatePermissionRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdatePermissionRequest_FieldPathArrayItemValue
}

type UpdatePermissionRequest_FieldPathSelector int32

const (
	UpdatePermissionRequest_FieldPathSelectorPermission   UpdatePermissionRequest_FieldPathSelector = 0
	UpdatePermissionRequest_FieldPathSelectorUpdateMask   UpdatePermissionRequest_FieldPathSelector = 1
	UpdatePermissionRequest_FieldPathSelectorCas          UpdatePermissionRequest_FieldPathSelector = 2
	UpdatePermissionRequest_FieldPathSelectorAllowMissing UpdatePermissionRequest_FieldPathSelector = 3
)

func (s UpdatePermissionRequest_FieldPathSelector) String() string {
	switch s {
	case UpdatePermissionRequest_FieldPathSelectorPermission:
		return "permission"
	case UpdatePermissionRequest_FieldPathSelectorUpdateMask:
		return "update_mask"
	case UpdatePermissionRequest_FieldPathSelectorCas:
		return "cas"
	case UpdatePermissionRequest_FieldPathSelectorAllowMissing:
		return "allow_missing"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePermissionRequest: %d", s))
	}
}

func BuildUpdatePermissionRequest_FieldPath(fp gotenobject.RawFieldPath) (UpdatePermissionRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdatePermissionRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "permission":
			return &UpdatePermissionRequest_FieldTerminalPath{selector: UpdatePermissionRequest_FieldPathSelectorPermission}, nil
		case "update_mask", "updateMask", "update-mask":
			return &UpdatePermissionRequest_FieldTerminalPath{selector: UpdatePermissionRequest_FieldPathSelectorUpdateMask}, nil
		case "cas":
			return &UpdatePermissionRequest_FieldTerminalPath{selector: UpdatePermissionRequest_FieldPathSelectorCas}, nil
		case "allow_missing", "allowMissing", "allow-missing":
			return &UpdatePermissionRequest_FieldTerminalPath{selector: UpdatePermissionRequest_FieldPathSelectorAllowMissing}, nil
		}
	} else {
		switch fp[0] {
		case "permission":
			if subpath, err := permission.BuildPermission_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdatePermissionRequest_FieldSubPath{selector: UpdatePermissionRequest_FieldPathSelectorPermission, subPath: subpath}, nil
			}
		case "cas":
			if subpath, err := BuildUpdatePermissionRequestCAS_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdatePermissionRequest_FieldSubPath{selector: UpdatePermissionRequest_FieldPathSelectorCas, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdatePermissionRequest", fp)
}

func ParseUpdatePermissionRequest_FieldPath(rawField string) (UpdatePermissionRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdatePermissionRequest_FieldPath(fp)
}

func MustParseUpdatePermissionRequest_FieldPath(rawField string) UpdatePermissionRequest_FieldPath {
	fp, err := ParseUpdatePermissionRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdatePermissionRequest_FieldTerminalPath struct {
	selector UpdatePermissionRequest_FieldPathSelector
}

var _ UpdatePermissionRequest_FieldPath = (*UpdatePermissionRequest_FieldTerminalPath)(nil)

func (fp *UpdatePermissionRequest_FieldTerminalPath) Selector() UpdatePermissionRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdatePermissionRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdatePermissionRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdatePermissionRequest
func (fp *UpdatePermissionRequest_FieldTerminalPath) Get(source *UpdatePermissionRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdatePermissionRequest_FieldPathSelectorPermission:
			if source.Permission != nil {
				values = append(values, source.Permission)
			}
		case UpdatePermissionRequest_FieldPathSelectorUpdateMask:
			if source.UpdateMask != nil {
				values = append(values, source.UpdateMask)
			}
		case UpdatePermissionRequest_FieldPathSelectorCas:
			if source.Cas != nil {
				values = append(values, source.Cas)
			}
		case UpdatePermissionRequest_FieldPathSelectorAllowMissing:
			values = append(values, source.AllowMissing)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdatePermissionRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdatePermissionRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdatePermissionRequest))
}

// GetSingle returns value pointed by specific field of from source UpdatePermissionRequest
func (fp *UpdatePermissionRequest_FieldTerminalPath) GetSingle(source *UpdatePermissionRequest) (interface{}, bool) {
	switch fp.selector {
	case UpdatePermissionRequest_FieldPathSelectorPermission:
		res := source.GetPermission()
		return res, res != nil
	case UpdatePermissionRequest_FieldPathSelectorUpdateMask:
		res := source.GetUpdateMask()
		return res, res != nil
	case UpdatePermissionRequest_FieldPathSelectorCas:
		res := source.GetCas()
		return res, res != nil
	case UpdatePermissionRequest_FieldPathSelectorAllowMissing:
		return source.GetAllowMissing(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePermissionRequest: %d", fp.selector))
	}
}

func (fp *UpdatePermissionRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdatePermissionRequest))
}

// GetDefault returns a default value of the field type
func (fp *UpdatePermissionRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdatePermissionRequest_FieldPathSelectorPermission:
		return (*permission.Permission)(nil)
	case UpdatePermissionRequest_FieldPathSelectorUpdateMask:
		return (*permission.Permission_FieldMask)(nil)
	case UpdatePermissionRequest_FieldPathSelectorCas:
		return (*UpdatePermissionRequest_CAS)(nil)
	case UpdatePermissionRequest_FieldPathSelectorAllowMissing:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePermissionRequest: %d", fp.selector))
	}
}

func (fp *UpdatePermissionRequest_FieldTerminalPath) ClearValue(item *UpdatePermissionRequest) {
	if item != nil {
		switch fp.selector {
		case UpdatePermissionRequest_FieldPathSelectorPermission:
			item.Permission = nil
		case UpdatePermissionRequest_FieldPathSelectorUpdateMask:
			item.UpdateMask = nil
		case UpdatePermissionRequest_FieldPathSelectorCas:
			item.Cas = nil
		case UpdatePermissionRequest_FieldPathSelectorAllowMissing:
			item.AllowMissing = false
		default:
			panic(fmt.Sprintf("Invalid selector for UpdatePermissionRequest: %d", fp.selector))
		}
	}
}

func (fp *UpdatePermissionRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdatePermissionRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdatePermissionRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdatePermissionRequest_FieldPathSelectorUpdateMask ||
		fp.selector == UpdatePermissionRequest_FieldPathSelectorAllowMissing
}

func (fp *UpdatePermissionRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *UpdatePermissionRequest_FieldTerminalPath) WithIValue(value interface{}) UpdatePermissionRequest_FieldPathValue {
	switch fp.selector {
	case UpdatePermissionRequest_FieldPathSelectorPermission:
		return &UpdatePermissionRequest_FieldTerminalPathValue{UpdatePermissionRequest_FieldTerminalPath: *fp, value: value.(*permission.Permission)}
	case UpdatePermissionRequest_FieldPathSelectorUpdateMask:
		return &UpdatePermissionRequest_FieldTerminalPathValue{UpdatePermissionRequest_FieldTerminalPath: *fp, value: value.(*permission.Permission_FieldMask)}
	case UpdatePermissionRequest_FieldPathSelectorCas:
		return &UpdatePermissionRequest_FieldTerminalPathValue{UpdatePermissionRequest_FieldTerminalPath: *fp, value: value.(*UpdatePermissionRequest_CAS)}
	case UpdatePermissionRequest_FieldPathSelectorAllowMissing:
		return &UpdatePermissionRequest_FieldTerminalPathValue{UpdatePermissionRequest_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePermissionRequest: %d", fp.selector))
	}
}

func (fp *UpdatePermissionRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdatePermissionRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdatePermissionRequest_FieldPathArrayOfValues {
	fpaov := &UpdatePermissionRequest_FieldTerminalPathArrayOfValues{UpdatePermissionRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdatePermissionRequest_FieldPathSelectorPermission:
		return &UpdatePermissionRequest_FieldTerminalPathArrayOfValues{UpdatePermissionRequest_FieldTerminalPath: *fp, values: values.([]*permission.Permission)}
	case UpdatePermissionRequest_FieldPathSelectorUpdateMask:
		return &UpdatePermissionRequest_FieldTerminalPathArrayOfValues{UpdatePermissionRequest_FieldTerminalPath: *fp, values: values.([]*permission.Permission_FieldMask)}
	case UpdatePermissionRequest_FieldPathSelectorCas:
		return &UpdatePermissionRequest_FieldTerminalPathArrayOfValues{UpdatePermissionRequest_FieldTerminalPath: *fp, values: values.([]*UpdatePermissionRequest_CAS)}
	case UpdatePermissionRequest_FieldPathSelectorAllowMissing:
		return &UpdatePermissionRequest_FieldTerminalPathArrayOfValues{UpdatePermissionRequest_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePermissionRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdatePermissionRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdatePermissionRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdatePermissionRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePermissionRequest: %d", fp.selector))
	}
}

func (fp *UpdatePermissionRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdatePermissionRequest_FieldSubPath struct {
	selector UpdatePermissionRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdatePermissionRequest_FieldPath = (*UpdatePermissionRequest_FieldSubPath)(nil)

func (fps *UpdatePermissionRequest_FieldSubPath) Selector() UpdatePermissionRequest_FieldPathSelector {
	return fps.selector
}
func (fps *UpdatePermissionRequest_FieldSubPath) AsPermissionSubPath() (permission.Permission_FieldPath, bool) {
	res, ok := fps.subPath.(permission.Permission_FieldPath)
	return res, ok
}
func (fps *UpdatePermissionRequest_FieldSubPath) AsCasSubPath() (UpdatePermissionRequestCAS_FieldPath, bool) {
	res, ok := fps.subPath.(UpdatePermissionRequestCAS_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdatePermissionRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdatePermissionRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdatePermissionRequest
func (fps *UpdatePermissionRequest_FieldSubPath) Get(source *UpdatePermissionRequest) (values []interface{}) {
	switch fps.selector {
	case UpdatePermissionRequest_FieldPathSelectorPermission:
		values = append(values, fps.subPath.GetRaw(source.GetPermission())...)
	case UpdatePermissionRequest_FieldPathSelectorCas:
		values = append(values, fps.subPath.GetRaw(source.GetCas())...)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePermissionRequest: %d", fps.selector))
	}
	return
}

func (fps *UpdatePermissionRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdatePermissionRequest))
}

// GetSingle returns value of selected field from source UpdatePermissionRequest
func (fps *UpdatePermissionRequest_FieldSubPath) GetSingle(source *UpdatePermissionRequest) (interface{}, bool) {
	switch fps.selector {
	case UpdatePermissionRequest_FieldPathSelectorPermission:
		if source.GetPermission() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPermission())
	case UpdatePermissionRequest_FieldPathSelectorCas:
		if source.GetCas() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePermissionRequest: %d", fps.selector))
	}
}

func (fps *UpdatePermissionRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdatePermissionRequest))
}

// GetDefault returns a default value of the field type
func (fps *UpdatePermissionRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdatePermissionRequest_FieldSubPath) ClearValue(item *UpdatePermissionRequest) {
	if item != nil {
		switch fps.selector {
		case UpdatePermissionRequest_FieldPathSelectorPermission:
			fps.subPath.ClearValueRaw(item.Permission)
		case UpdatePermissionRequest_FieldPathSelectorCas:
			fps.subPath.ClearValueRaw(item.Cas)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdatePermissionRequest: %d", fps.selector))
		}
	}
}

func (fps *UpdatePermissionRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdatePermissionRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdatePermissionRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdatePermissionRequest_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&UpdatePermissionRequest_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *UpdatePermissionRequest_FieldSubPath) WithIValue(value interface{}) UpdatePermissionRequest_FieldPathValue {
	return &UpdatePermissionRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdatePermissionRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdatePermissionRequest_FieldSubPath) WithIArrayOfValues(values interface{}) UpdatePermissionRequest_FieldPathArrayOfValues {
	return &UpdatePermissionRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdatePermissionRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdatePermissionRequest_FieldSubPath) WithIArrayItemValue(value interface{}) UpdatePermissionRequest_FieldPathArrayItemValue {
	return &UpdatePermissionRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdatePermissionRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdatePermissionRequest_FieldPathValue allows storing values for UpdatePermissionRequest fields according to their type
type UpdatePermissionRequest_FieldPathValue interface {
	UpdatePermissionRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdatePermissionRequest)
	CompareWith(*UpdatePermissionRequest) (cmp int, comparable bool)
}

func ParseUpdatePermissionRequest_FieldPathValue(pathStr, valueStr string) (UpdatePermissionRequest_FieldPathValue, error) {
	fp, err := ParseUpdatePermissionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdatePermissionRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdatePermissionRequest_FieldPathValue), nil
}

func MustParseUpdatePermissionRequest_FieldPathValue(pathStr, valueStr string) UpdatePermissionRequest_FieldPathValue {
	fpv, err := ParseUpdatePermissionRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdatePermissionRequest_FieldTerminalPathValue struct {
	UpdatePermissionRequest_FieldTerminalPath
	value interface{}
}

var _ UpdatePermissionRequest_FieldPathValue = (*UpdatePermissionRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'UpdatePermissionRequest' as interface{}
func (fpv *UpdatePermissionRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdatePermissionRequest_FieldTerminalPathValue) AsPermissionValue() (*permission.Permission, bool) {
	res, ok := fpv.value.(*permission.Permission)
	return res, ok
}
func (fpv *UpdatePermissionRequest_FieldTerminalPathValue) AsUpdateMaskValue() (*permission.Permission_FieldMask, bool) {
	res, ok := fpv.value.(*permission.Permission_FieldMask)
	return res, ok
}
func (fpv *UpdatePermissionRequest_FieldTerminalPathValue) AsCasValue() (*UpdatePermissionRequest_CAS, bool) {
	res, ok := fpv.value.(*UpdatePermissionRequest_CAS)
	return res, ok
}
func (fpv *UpdatePermissionRequest_FieldTerminalPathValue) AsAllowMissingValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object UpdatePermissionRequest
func (fpv *UpdatePermissionRequest_FieldTerminalPathValue) SetTo(target **UpdatePermissionRequest) {
	if *target == nil {
		*target = new(UpdatePermissionRequest)
	}
	switch fpv.selector {
	case UpdatePermissionRequest_FieldPathSelectorPermission:
		(*target).Permission = fpv.value.(*permission.Permission)
	case UpdatePermissionRequest_FieldPathSelectorUpdateMask:
		(*target).UpdateMask = fpv.value.(*permission.Permission_FieldMask)
	case UpdatePermissionRequest_FieldPathSelectorCas:
		(*target).Cas = fpv.value.(*UpdatePermissionRequest_CAS)
	case UpdatePermissionRequest_FieldPathSelectorAllowMissing:
		(*target).AllowMissing = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePermissionRequest: %d", fpv.selector))
	}
}

func (fpv *UpdatePermissionRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdatePermissionRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdatePermissionRequest_FieldTerminalPathValue' with the value under path in 'UpdatePermissionRequest'.
func (fpv *UpdatePermissionRequest_FieldTerminalPathValue) CompareWith(source *UpdatePermissionRequest) (int, bool) {
	switch fpv.selector {
	case UpdatePermissionRequest_FieldPathSelectorPermission:
		return 0, false
	case UpdatePermissionRequest_FieldPathSelectorUpdateMask:
		return 0, false
	case UpdatePermissionRequest_FieldPathSelectorCas:
		return 0, false
	case UpdatePermissionRequest_FieldPathSelectorAllowMissing:
		leftValue := fpv.value.(bool)
		rightValue := source.GetAllowMissing()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePermissionRequest: %d", fpv.selector))
	}
}

func (fpv *UpdatePermissionRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdatePermissionRequest))
}

type UpdatePermissionRequest_FieldSubPathValue struct {
	UpdatePermissionRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdatePermissionRequest_FieldPathValue = (*UpdatePermissionRequest_FieldSubPathValue)(nil)

func (fpvs *UpdatePermissionRequest_FieldSubPathValue) AsPermissionPathValue() (permission.Permission_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(permission.Permission_FieldPathValue)
	return res, ok
}
func (fpvs *UpdatePermissionRequest_FieldSubPathValue) AsCasPathValue() (UpdatePermissionRequestCAS_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(UpdatePermissionRequestCAS_FieldPathValue)
	return res, ok
}

func (fpvs *UpdatePermissionRequest_FieldSubPathValue) SetTo(target **UpdatePermissionRequest) {
	if *target == nil {
		*target = new(UpdatePermissionRequest)
	}
	switch fpvs.Selector() {
	case UpdatePermissionRequest_FieldPathSelectorPermission:
		fpvs.subPathValue.(permission.Permission_FieldPathValue).SetTo(&(*target).Permission)
	case UpdatePermissionRequest_FieldPathSelectorCas:
		fpvs.subPathValue.(UpdatePermissionRequestCAS_FieldPathValue).SetTo(&(*target).Cas)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePermissionRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdatePermissionRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdatePermissionRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdatePermissionRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdatePermissionRequest_FieldSubPathValue) CompareWith(source *UpdatePermissionRequest) (int, bool) {
	switch fpvs.Selector() {
	case UpdatePermissionRequest_FieldPathSelectorPermission:
		return fpvs.subPathValue.(permission.Permission_FieldPathValue).CompareWith(source.GetPermission())
	case UpdatePermissionRequest_FieldPathSelectorCas:
		return fpvs.subPathValue.(UpdatePermissionRequestCAS_FieldPathValue).CompareWith(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePermissionRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdatePermissionRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdatePermissionRequest))
}

// UpdatePermissionRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for UpdatePermissionRequest according to their type
// Present only for array (repeated) types.
type UpdatePermissionRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdatePermissionRequest_FieldPath
	ContainsValue(*UpdatePermissionRequest) bool
}

// ParseUpdatePermissionRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdatePermissionRequest_FieldPathArrayItemValue(pathStr, valueStr string) (UpdatePermissionRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdatePermissionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdatePermissionRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdatePermissionRequest_FieldPathArrayItemValue), nil
}

func MustParseUpdatePermissionRequest_FieldPathArrayItemValue(pathStr, valueStr string) UpdatePermissionRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdatePermissionRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdatePermissionRequest_FieldTerminalPathArrayItemValue struct {
	UpdatePermissionRequest_FieldTerminalPath
	value interface{}
}

var _ UpdatePermissionRequest_FieldPathArrayItemValue = (*UpdatePermissionRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdatePermissionRequest as interface{}
func (fpaiv *UpdatePermissionRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdatePermissionRequest_FieldTerminalPathArrayItemValue) GetSingle(source *UpdatePermissionRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdatePermissionRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdatePermissionRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdatePermissionRequest'
func (fpaiv *UpdatePermissionRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdatePermissionRequest) bool {
	slice := fpaiv.UpdatePermissionRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdatePermissionRequest_FieldSubPathArrayItemValue struct {
	UpdatePermissionRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdatePermissionRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdatePermissionRequest_FieldSubPathArrayItemValue) AsPermissionPathItemValue() (permission.Permission_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(permission.Permission_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *UpdatePermissionRequest_FieldSubPathArrayItemValue) AsCasPathItemValue() (UpdatePermissionRequestCAS_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(UpdatePermissionRequestCAS_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdatePermissionRequest'
func (fpaivs *UpdatePermissionRequest_FieldSubPathArrayItemValue) ContainsValue(source *UpdatePermissionRequest) bool {
	switch fpaivs.Selector() {
	case UpdatePermissionRequest_FieldPathSelectorPermission:
		return fpaivs.subPathItemValue.(permission.Permission_FieldPathArrayItemValue).ContainsValue(source.GetPermission())
	case UpdatePermissionRequest_FieldPathSelectorCas:
		return fpaivs.subPathItemValue.(UpdatePermissionRequestCAS_FieldPathArrayItemValue).ContainsValue(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePermissionRequest: %d", fpaivs.Selector()))
	}
}

// UpdatePermissionRequest_FieldPathArrayOfValues allows storing slice of values for UpdatePermissionRequest fields according to their type
type UpdatePermissionRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdatePermissionRequest_FieldPath
}

func ParseUpdatePermissionRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdatePermissionRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdatePermissionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdatePermissionRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdatePermissionRequest_FieldPathArrayOfValues), nil
}

func MustParseUpdatePermissionRequest_FieldPathArrayOfValues(pathStr, valuesStr string) UpdatePermissionRequest_FieldPathArrayOfValues {
	fpaov, err := ParseUpdatePermissionRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdatePermissionRequest_FieldTerminalPathArrayOfValues struct {
	UpdatePermissionRequest_FieldTerminalPath
	values interface{}
}

var _ UpdatePermissionRequest_FieldPathArrayOfValues = (*UpdatePermissionRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdatePermissionRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdatePermissionRequest_FieldPathSelectorPermission:
		for _, v := range fpaov.values.([]*permission.Permission) {
			values = append(values, v)
		}
	case UpdatePermissionRequest_FieldPathSelectorUpdateMask:
		for _, v := range fpaov.values.([]*permission.Permission_FieldMask) {
			values = append(values, v)
		}
	case UpdatePermissionRequest_FieldPathSelectorCas:
		for _, v := range fpaov.values.([]*UpdatePermissionRequest_CAS) {
			values = append(values, v)
		}
	case UpdatePermissionRequest_FieldPathSelectorAllowMissing:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdatePermissionRequest_FieldTerminalPathArrayOfValues) AsPermissionArrayOfValues() ([]*permission.Permission, bool) {
	res, ok := fpaov.values.([]*permission.Permission)
	return res, ok
}
func (fpaov *UpdatePermissionRequest_FieldTerminalPathArrayOfValues) AsUpdateMaskArrayOfValues() ([]*permission.Permission_FieldMask, bool) {
	res, ok := fpaov.values.([]*permission.Permission_FieldMask)
	return res, ok
}
func (fpaov *UpdatePermissionRequest_FieldTerminalPathArrayOfValues) AsCasArrayOfValues() ([]*UpdatePermissionRequest_CAS, bool) {
	res, ok := fpaov.values.([]*UpdatePermissionRequest_CAS)
	return res, ok
}
func (fpaov *UpdatePermissionRequest_FieldTerminalPathArrayOfValues) AsAllowMissingArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

type UpdatePermissionRequest_FieldSubPathArrayOfValues struct {
	UpdatePermissionRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdatePermissionRequest_FieldPathArrayOfValues = (*UpdatePermissionRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdatePermissionRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdatePermissionRequest_FieldSubPathArrayOfValues) AsPermissionPathArrayOfValues() (permission.Permission_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(permission.Permission_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *UpdatePermissionRequest_FieldSubPathArrayOfValues) AsCasPathArrayOfValues() (UpdatePermissionRequestCAS_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(UpdatePermissionRequestCAS_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdatePermissionRequestCAS_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdatePermissionRequestCAS_FieldPathSelector
	Get(source *UpdatePermissionRequest_CAS) []interface{}
	GetSingle(source *UpdatePermissionRequest_CAS) (interface{}, bool)
	ClearValue(item *UpdatePermissionRequest_CAS)

	// Those methods build corresponding UpdatePermissionRequestCAS_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdatePermissionRequestCAS_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdatePermissionRequestCAS_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdatePermissionRequestCAS_FieldPathArrayItemValue
}

type UpdatePermissionRequestCAS_FieldPathSelector int32

const (
	UpdatePermissionRequestCAS_FieldPathSelectorConditionalState UpdatePermissionRequestCAS_FieldPathSelector = 0
	UpdatePermissionRequestCAS_FieldPathSelectorFieldMask        UpdatePermissionRequestCAS_FieldPathSelector = 1
)

func (s UpdatePermissionRequestCAS_FieldPathSelector) String() string {
	switch s {
	case UpdatePermissionRequestCAS_FieldPathSelectorConditionalState:
		return "conditional_state"
	case UpdatePermissionRequestCAS_FieldPathSelectorFieldMask:
		return "field_mask"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePermissionRequest_CAS: %d", s))
	}
}

func BuildUpdatePermissionRequestCAS_FieldPath(fp gotenobject.RawFieldPath) (UpdatePermissionRequestCAS_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdatePermissionRequest_CAS")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			return &UpdatePermissionRequestCAS_FieldTerminalPath{selector: UpdatePermissionRequestCAS_FieldPathSelectorConditionalState}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &UpdatePermissionRequestCAS_FieldTerminalPath{selector: UpdatePermissionRequestCAS_FieldPathSelectorFieldMask}, nil
		}
	} else {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			if subpath, err := permission.BuildPermission_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdatePermissionRequestCAS_FieldSubPath{selector: UpdatePermissionRequestCAS_FieldPathSelectorConditionalState, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdatePermissionRequest_CAS", fp)
}

func ParseUpdatePermissionRequestCAS_FieldPath(rawField string) (UpdatePermissionRequestCAS_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdatePermissionRequestCAS_FieldPath(fp)
}

func MustParseUpdatePermissionRequestCAS_FieldPath(rawField string) UpdatePermissionRequestCAS_FieldPath {
	fp, err := ParseUpdatePermissionRequestCAS_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdatePermissionRequestCAS_FieldTerminalPath struct {
	selector UpdatePermissionRequestCAS_FieldPathSelector
}

var _ UpdatePermissionRequestCAS_FieldPath = (*UpdatePermissionRequestCAS_FieldTerminalPath)(nil)

func (fp *UpdatePermissionRequestCAS_FieldTerminalPath) Selector() UpdatePermissionRequestCAS_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdatePermissionRequestCAS_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdatePermissionRequestCAS_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdatePermissionRequest_CAS
func (fp *UpdatePermissionRequestCAS_FieldTerminalPath) Get(source *UpdatePermissionRequest_CAS) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdatePermissionRequestCAS_FieldPathSelectorConditionalState:
			if source.ConditionalState != nil {
				values = append(values, source.ConditionalState)
			}
		case UpdatePermissionRequestCAS_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdatePermissionRequest_CAS: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdatePermissionRequestCAS_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdatePermissionRequest_CAS))
}

// GetSingle returns value pointed by specific field of from source UpdatePermissionRequest_CAS
func (fp *UpdatePermissionRequestCAS_FieldTerminalPath) GetSingle(source *UpdatePermissionRequest_CAS) (interface{}, bool) {
	switch fp.selector {
	case UpdatePermissionRequestCAS_FieldPathSelectorConditionalState:
		res := source.GetConditionalState()
		return res, res != nil
	case UpdatePermissionRequestCAS_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePermissionRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdatePermissionRequestCAS_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdatePermissionRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fp *UpdatePermissionRequestCAS_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdatePermissionRequestCAS_FieldPathSelectorConditionalState:
		return (*permission.Permission)(nil)
	case UpdatePermissionRequestCAS_FieldPathSelectorFieldMask:
		return (*permission.Permission_FieldMask)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePermissionRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdatePermissionRequestCAS_FieldTerminalPath) ClearValue(item *UpdatePermissionRequest_CAS) {
	if item != nil {
		switch fp.selector {
		case UpdatePermissionRequestCAS_FieldPathSelectorConditionalState:
			item.ConditionalState = nil
		case UpdatePermissionRequestCAS_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdatePermissionRequest_CAS: %d", fp.selector))
		}
	}
}

func (fp *UpdatePermissionRequestCAS_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdatePermissionRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdatePermissionRequestCAS_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdatePermissionRequestCAS_FieldPathSelectorFieldMask
}

func (fp *UpdatePermissionRequestCAS_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *UpdatePermissionRequestCAS_FieldTerminalPath) WithIValue(value interface{}) UpdatePermissionRequestCAS_FieldPathValue {
	switch fp.selector {
	case UpdatePermissionRequestCAS_FieldPathSelectorConditionalState:
		return &UpdatePermissionRequestCAS_FieldTerminalPathValue{UpdatePermissionRequestCAS_FieldTerminalPath: *fp, value: value.(*permission.Permission)}
	case UpdatePermissionRequestCAS_FieldPathSelectorFieldMask:
		return &UpdatePermissionRequestCAS_FieldTerminalPathValue{UpdatePermissionRequestCAS_FieldTerminalPath: *fp, value: value.(*permission.Permission_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePermissionRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdatePermissionRequestCAS_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdatePermissionRequestCAS_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdatePermissionRequestCAS_FieldPathArrayOfValues {
	fpaov := &UpdatePermissionRequestCAS_FieldTerminalPathArrayOfValues{UpdatePermissionRequestCAS_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdatePermissionRequestCAS_FieldPathSelectorConditionalState:
		return &UpdatePermissionRequestCAS_FieldTerminalPathArrayOfValues{UpdatePermissionRequestCAS_FieldTerminalPath: *fp, values: values.([]*permission.Permission)}
	case UpdatePermissionRequestCAS_FieldPathSelectorFieldMask:
		return &UpdatePermissionRequestCAS_FieldTerminalPathArrayOfValues{UpdatePermissionRequestCAS_FieldTerminalPath: *fp, values: values.([]*permission.Permission_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePermissionRequest_CAS: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdatePermissionRequestCAS_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdatePermissionRequestCAS_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdatePermissionRequestCAS_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePermissionRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdatePermissionRequestCAS_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdatePermissionRequestCAS_FieldSubPath struct {
	selector UpdatePermissionRequestCAS_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdatePermissionRequestCAS_FieldPath = (*UpdatePermissionRequestCAS_FieldSubPath)(nil)

func (fps *UpdatePermissionRequestCAS_FieldSubPath) Selector() UpdatePermissionRequestCAS_FieldPathSelector {
	return fps.selector
}
func (fps *UpdatePermissionRequestCAS_FieldSubPath) AsConditionalStateSubPath() (permission.Permission_FieldPath, bool) {
	res, ok := fps.subPath.(permission.Permission_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdatePermissionRequestCAS_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdatePermissionRequestCAS_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdatePermissionRequest_CAS
func (fps *UpdatePermissionRequestCAS_FieldSubPath) Get(source *UpdatePermissionRequest_CAS) (values []interface{}) {
	switch fps.selector {
	case UpdatePermissionRequestCAS_FieldPathSelectorConditionalState:
		values = append(values, fps.subPath.GetRaw(source.GetConditionalState())...)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePermissionRequest_CAS: %d", fps.selector))
	}
	return
}

func (fps *UpdatePermissionRequestCAS_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdatePermissionRequest_CAS))
}

// GetSingle returns value of selected field from source UpdatePermissionRequest_CAS
func (fps *UpdatePermissionRequestCAS_FieldSubPath) GetSingle(source *UpdatePermissionRequest_CAS) (interface{}, bool) {
	switch fps.selector {
	case UpdatePermissionRequestCAS_FieldPathSelectorConditionalState:
		if source.GetConditionalState() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePermissionRequest_CAS: %d", fps.selector))
	}
}

func (fps *UpdatePermissionRequestCAS_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdatePermissionRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fps *UpdatePermissionRequestCAS_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdatePermissionRequestCAS_FieldSubPath) ClearValue(item *UpdatePermissionRequest_CAS) {
	if item != nil {
		switch fps.selector {
		case UpdatePermissionRequestCAS_FieldPathSelectorConditionalState:
			fps.subPath.ClearValueRaw(item.ConditionalState)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdatePermissionRequest_CAS: %d", fps.selector))
		}
	}
}

func (fps *UpdatePermissionRequestCAS_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdatePermissionRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdatePermissionRequestCAS_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdatePermissionRequestCAS_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&UpdatePermissionRequestCAS_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *UpdatePermissionRequestCAS_FieldSubPath) WithIValue(value interface{}) UpdatePermissionRequestCAS_FieldPathValue {
	return &UpdatePermissionRequestCAS_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdatePermissionRequestCAS_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdatePermissionRequestCAS_FieldSubPath) WithIArrayOfValues(values interface{}) UpdatePermissionRequestCAS_FieldPathArrayOfValues {
	return &UpdatePermissionRequestCAS_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdatePermissionRequestCAS_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdatePermissionRequestCAS_FieldSubPath) WithIArrayItemValue(value interface{}) UpdatePermissionRequestCAS_FieldPathArrayItemValue {
	return &UpdatePermissionRequestCAS_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdatePermissionRequestCAS_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdatePermissionRequestCAS_FieldPathValue allows storing values for CAS fields according to their type
type UpdatePermissionRequestCAS_FieldPathValue interface {
	UpdatePermissionRequestCAS_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdatePermissionRequest_CAS)
	CompareWith(*UpdatePermissionRequest_CAS) (cmp int, comparable bool)
}

func ParseUpdatePermissionRequestCAS_FieldPathValue(pathStr, valueStr string) (UpdatePermissionRequestCAS_FieldPathValue, error) {
	fp, err := ParseUpdatePermissionRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdatePermissionRequestCAS_FieldPathValue), nil
}

func MustParseUpdatePermissionRequestCAS_FieldPathValue(pathStr, valueStr string) UpdatePermissionRequestCAS_FieldPathValue {
	fpv, err := ParseUpdatePermissionRequestCAS_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdatePermissionRequestCAS_FieldTerminalPathValue struct {
	UpdatePermissionRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdatePermissionRequestCAS_FieldPathValue = (*UpdatePermissionRequestCAS_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CAS' as interface{}
func (fpv *UpdatePermissionRequestCAS_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdatePermissionRequestCAS_FieldTerminalPathValue) AsConditionalStateValue() (*permission.Permission, bool) {
	res, ok := fpv.value.(*permission.Permission)
	return res, ok
}
func (fpv *UpdatePermissionRequestCAS_FieldTerminalPathValue) AsFieldMaskValue() (*permission.Permission_FieldMask, bool) {
	res, ok := fpv.value.(*permission.Permission_FieldMask)
	return res, ok
}

// SetTo stores value for selected field for object CAS
func (fpv *UpdatePermissionRequestCAS_FieldTerminalPathValue) SetTo(target **UpdatePermissionRequest_CAS) {
	if *target == nil {
		*target = new(UpdatePermissionRequest_CAS)
	}
	switch fpv.selector {
	case UpdatePermissionRequestCAS_FieldPathSelectorConditionalState:
		(*target).ConditionalState = fpv.value.(*permission.Permission)
	case UpdatePermissionRequestCAS_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*permission.Permission_FieldMask)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePermissionRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdatePermissionRequestCAS_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdatePermissionRequest_CAS)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdatePermissionRequestCAS_FieldTerminalPathValue' with the value under path in 'UpdatePermissionRequest_CAS'.
func (fpv *UpdatePermissionRequestCAS_FieldTerminalPathValue) CompareWith(source *UpdatePermissionRequest_CAS) (int, bool) {
	switch fpv.selector {
	case UpdatePermissionRequestCAS_FieldPathSelectorConditionalState:
		return 0, false
	case UpdatePermissionRequestCAS_FieldPathSelectorFieldMask:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePermissionRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdatePermissionRequestCAS_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdatePermissionRequest_CAS))
}

type UpdatePermissionRequestCAS_FieldSubPathValue struct {
	UpdatePermissionRequestCAS_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdatePermissionRequestCAS_FieldPathValue = (*UpdatePermissionRequestCAS_FieldSubPathValue)(nil)

func (fpvs *UpdatePermissionRequestCAS_FieldSubPathValue) AsConditionalStatePathValue() (permission.Permission_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(permission.Permission_FieldPathValue)
	return res, ok
}

func (fpvs *UpdatePermissionRequestCAS_FieldSubPathValue) SetTo(target **UpdatePermissionRequest_CAS) {
	if *target == nil {
		*target = new(UpdatePermissionRequest_CAS)
	}
	switch fpvs.Selector() {
	case UpdatePermissionRequestCAS_FieldPathSelectorConditionalState:
		fpvs.subPathValue.(permission.Permission_FieldPathValue).SetTo(&(*target).ConditionalState)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePermissionRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdatePermissionRequestCAS_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdatePermissionRequest_CAS)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdatePermissionRequestCAS_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdatePermissionRequestCAS_FieldSubPathValue) CompareWith(source *UpdatePermissionRequest_CAS) (int, bool) {
	switch fpvs.Selector() {
	case UpdatePermissionRequestCAS_FieldPathSelectorConditionalState:
		return fpvs.subPathValue.(permission.Permission_FieldPathValue).CompareWith(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePermissionRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdatePermissionRequestCAS_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdatePermissionRequest_CAS))
}

// UpdatePermissionRequestCAS_FieldPathArrayItemValue allows storing single item in Path-specific values for CAS according to their type
// Present only for array (repeated) types.
type UpdatePermissionRequestCAS_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdatePermissionRequestCAS_FieldPath
	ContainsValue(*UpdatePermissionRequest_CAS) bool
}

// ParseUpdatePermissionRequestCAS_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdatePermissionRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) (UpdatePermissionRequestCAS_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdatePermissionRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdatePermissionRequestCAS_FieldPathArrayItemValue), nil
}

func MustParseUpdatePermissionRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) UpdatePermissionRequestCAS_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdatePermissionRequestCAS_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdatePermissionRequestCAS_FieldTerminalPathArrayItemValue struct {
	UpdatePermissionRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdatePermissionRequestCAS_FieldPathArrayItemValue = (*UpdatePermissionRequestCAS_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdatePermissionRequest_CAS as interface{}
func (fpaiv *UpdatePermissionRequestCAS_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdatePermissionRequestCAS_FieldTerminalPathArrayItemValue) GetSingle(source *UpdatePermissionRequest_CAS) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdatePermissionRequestCAS_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdatePermissionRequest_CAS))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaiv *UpdatePermissionRequestCAS_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdatePermissionRequest_CAS) bool {
	slice := fpaiv.UpdatePermissionRequestCAS_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdatePermissionRequestCAS_FieldSubPathArrayItemValue struct {
	UpdatePermissionRequestCAS_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdatePermissionRequestCAS_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdatePermissionRequestCAS_FieldSubPathArrayItemValue) AsConditionalStatePathItemValue() (permission.Permission_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(permission.Permission_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaivs *UpdatePermissionRequestCAS_FieldSubPathArrayItemValue) ContainsValue(source *UpdatePermissionRequest_CAS) bool {
	switch fpaivs.Selector() {
	case UpdatePermissionRequestCAS_FieldPathSelectorConditionalState:
		return fpaivs.subPathItemValue.(permission.Permission_FieldPathArrayItemValue).ContainsValue(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePermissionRequest_CAS: %d", fpaivs.Selector()))
	}
}

// UpdatePermissionRequestCAS_FieldPathArrayOfValues allows storing slice of values for CAS fields according to their type
type UpdatePermissionRequestCAS_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdatePermissionRequestCAS_FieldPath
}

func ParseUpdatePermissionRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdatePermissionRequestCAS_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdatePermissionRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdatePermissionRequestCAS_FieldPathArrayOfValues), nil
}

func MustParseUpdatePermissionRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) UpdatePermissionRequestCAS_FieldPathArrayOfValues {
	fpaov, err := ParseUpdatePermissionRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdatePermissionRequestCAS_FieldTerminalPathArrayOfValues struct {
	UpdatePermissionRequestCAS_FieldTerminalPath
	values interface{}
}

var _ UpdatePermissionRequestCAS_FieldPathArrayOfValues = (*UpdatePermissionRequestCAS_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdatePermissionRequestCAS_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdatePermissionRequestCAS_FieldPathSelectorConditionalState:
		for _, v := range fpaov.values.([]*permission.Permission) {
			values = append(values, v)
		}
	case UpdatePermissionRequestCAS_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*permission.Permission_FieldMask) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdatePermissionRequestCAS_FieldTerminalPathArrayOfValues) AsConditionalStateArrayOfValues() ([]*permission.Permission, bool) {
	res, ok := fpaov.values.([]*permission.Permission)
	return res, ok
}
func (fpaov *UpdatePermissionRequestCAS_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*permission.Permission_FieldMask, bool) {
	res, ok := fpaov.values.([]*permission.Permission_FieldMask)
	return res, ok
}

type UpdatePermissionRequestCAS_FieldSubPathArrayOfValues struct {
	UpdatePermissionRequestCAS_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdatePermissionRequestCAS_FieldPathArrayOfValues = (*UpdatePermissionRequestCAS_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdatePermissionRequestCAS_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdatePermissionRequestCAS_FieldSubPathArrayOfValues) AsConditionalStatePathArrayOfValues() (permission.Permission_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(permission.Permission_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeletePermissionRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeletePermissionRequest_FieldPathSelector
	Get(source *DeletePermissionRequest) []interface{}
	GetSingle(source *DeletePermissionRequest) (interface{}, bool)
	ClearValue(item *DeletePermissionRequest)

	// Those methods build corresponding DeletePermissionRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeletePermissionRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) DeletePermissionRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeletePermissionRequest_FieldPathArrayItemValue
}

type DeletePermissionRequest_FieldPathSelector int32

const (
	DeletePermissionRequest_FieldPathSelectorName DeletePermissionRequest_FieldPathSelector = 0
)

func (s DeletePermissionRequest_FieldPathSelector) String() string {
	switch s {
	case DeletePermissionRequest_FieldPathSelectorName:
		return "name"
	default:
		panic(fmt.Sprintf("Invalid selector for DeletePermissionRequest: %d", s))
	}
}

func BuildDeletePermissionRequest_FieldPath(fp gotenobject.RawFieldPath) (DeletePermissionRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object DeletePermissionRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &DeletePermissionRequest_FieldTerminalPath{selector: DeletePermissionRequest_FieldPathSelectorName}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object DeletePermissionRequest", fp)
}

func ParseDeletePermissionRequest_FieldPath(rawField string) (DeletePermissionRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeletePermissionRequest_FieldPath(fp)
}

func MustParseDeletePermissionRequest_FieldPath(rawField string) DeletePermissionRequest_FieldPath {
	fp, err := ParseDeletePermissionRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeletePermissionRequest_FieldTerminalPath struct {
	selector DeletePermissionRequest_FieldPathSelector
}

var _ DeletePermissionRequest_FieldPath = (*DeletePermissionRequest_FieldTerminalPath)(nil)

func (fp *DeletePermissionRequest_FieldTerminalPath) Selector() DeletePermissionRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeletePermissionRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeletePermissionRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source DeletePermissionRequest
func (fp *DeletePermissionRequest_FieldTerminalPath) Get(source *DeletePermissionRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeletePermissionRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for DeletePermissionRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *DeletePermissionRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*DeletePermissionRequest))
}

// GetSingle returns value pointed by specific field of from source DeletePermissionRequest
func (fp *DeletePermissionRequest_FieldTerminalPath) GetSingle(source *DeletePermissionRequest) (interface{}, bool) {
	switch fp.selector {
	case DeletePermissionRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for DeletePermissionRequest: %d", fp.selector))
	}
}

func (fp *DeletePermissionRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*DeletePermissionRequest))
}

// GetDefault returns a default value of the field type
func (fp *DeletePermissionRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeletePermissionRequest_FieldPathSelectorName:
		return (*permission.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for DeletePermissionRequest: %d", fp.selector))
	}
}

func (fp *DeletePermissionRequest_FieldTerminalPath) ClearValue(item *DeletePermissionRequest) {
	if item != nil {
		switch fp.selector {
		case DeletePermissionRequest_FieldPathSelectorName:
			item.Name = nil
		default:
			panic(fmt.Sprintf("Invalid selector for DeletePermissionRequest: %d", fp.selector))
		}
	}
}

func (fp *DeletePermissionRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*DeletePermissionRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeletePermissionRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeletePermissionRequest_FieldPathSelectorName
}

func (fp *DeletePermissionRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *DeletePermissionRequest_FieldTerminalPath) WithIValue(value interface{}) DeletePermissionRequest_FieldPathValue {
	switch fp.selector {
	case DeletePermissionRequest_FieldPathSelectorName:
		return &DeletePermissionRequest_FieldTerminalPathValue{DeletePermissionRequest_FieldTerminalPath: *fp, value: value.(*permission.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeletePermissionRequest: %d", fp.selector))
	}
}

func (fp *DeletePermissionRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeletePermissionRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeletePermissionRequest_FieldPathArrayOfValues {
	fpaov := &DeletePermissionRequest_FieldTerminalPathArrayOfValues{DeletePermissionRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeletePermissionRequest_FieldPathSelectorName:
		return &DeletePermissionRequest_FieldTerminalPathArrayOfValues{DeletePermissionRequest_FieldTerminalPath: *fp, values: values.([]*permission.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeletePermissionRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeletePermissionRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeletePermissionRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeletePermissionRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for DeletePermissionRequest: %d", fp.selector))
	}
}

func (fp *DeletePermissionRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeletePermissionRequest_FieldPathValue allows storing values for DeletePermissionRequest fields according to their type
type DeletePermissionRequest_FieldPathValue interface {
	DeletePermissionRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **DeletePermissionRequest)
	CompareWith(*DeletePermissionRequest) (cmp int, comparable bool)
}

func ParseDeletePermissionRequest_FieldPathValue(pathStr, valueStr string) (DeletePermissionRequest_FieldPathValue, error) {
	fp, err := ParseDeletePermissionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeletePermissionRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeletePermissionRequest_FieldPathValue), nil
}

func MustParseDeletePermissionRequest_FieldPathValue(pathStr, valueStr string) DeletePermissionRequest_FieldPathValue {
	fpv, err := ParseDeletePermissionRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeletePermissionRequest_FieldTerminalPathValue struct {
	DeletePermissionRequest_FieldTerminalPath
	value interface{}
}

var _ DeletePermissionRequest_FieldPathValue = (*DeletePermissionRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'DeletePermissionRequest' as interface{}
func (fpv *DeletePermissionRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeletePermissionRequest_FieldTerminalPathValue) AsNameValue() (*permission.Reference, bool) {
	res, ok := fpv.value.(*permission.Reference)
	return res, ok
}

// SetTo stores value for selected field for object DeletePermissionRequest
func (fpv *DeletePermissionRequest_FieldTerminalPathValue) SetTo(target **DeletePermissionRequest) {
	if *target == nil {
		*target = new(DeletePermissionRequest)
	}
	switch fpv.selector {
	case DeletePermissionRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*permission.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for DeletePermissionRequest: %d", fpv.selector))
	}
}

func (fpv *DeletePermissionRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*DeletePermissionRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeletePermissionRequest_FieldTerminalPathValue' with the value under path in 'DeletePermissionRequest'.
func (fpv *DeletePermissionRequest_FieldTerminalPathValue) CompareWith(source *DeletePermissionRequest) (int, bool) {
	switch fpv.selector {
	case DeletePermissionRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*permission.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for DeletePermissionRequest: %d", fpv.selector))
	}
}

func (fpv *DeletePermissionRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*DeletePermissionRequest))
}

// DeletePermissionRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for DeletePermissionRequest according to their type
// Present only for array (repeated) types.
type DeletePermissionRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeletePermissionRequest_FieldPath
	ContainsValue(*DeletePermissionRequest) bool
}

// ParseDeletePermissionRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeletePermissionRequest_FieldPathArrayItemValue(pathStr, valueStr string) (DeletePermissionRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseDeletePermissionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeletePermissionRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeletePermissionRequest_FieldPathArrayItemValue), nil
}

func MustParseDeletePermissionRequest_FieldPathArrayItemValue(pathStr, valueStr string) DeletePermissionRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseDeletePermissionRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeletePermissionRequest_FieldTerminalPathArrayItemValue struct {
	DeletePermissionRequest_FieldTerminalPath
	value interface{}
}

var _ DeletePermissionRequest_FieldPathArrayItemValue = (*DeletePermissionRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object DeletePermissionRequest as interface{}
func (fpaiv *DeletePermissionRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeletePermissionRequest_FieldTerminalPathArrayItemValue) GetSingle(source *DeletePermissionRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeletePermissionRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*DeletePermissionRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'DeletePermissionRequest'
func (fpaiv *DeletePermissionRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *DeletePermissionRequest) bool {
	slice := fpaiv.DeletePermissionRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeletePermissionRequest_FieldPathArrayOfValues allows storing slice of values for DeletePermissionRequest fields according to their type
type DeletePermissionRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeletePermissionRequest_FieldPath
}

func ParseDeletePermissionRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (DeletePermissionRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseDeletePermissionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeletePermissionRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeletePermissionRequest_FieldPathArrayOfValues), nil
}

func MustParseDeletePermissionRequest_FieldPathArrayOfValues(pathStr, valuesStr string) DeletePermissionRequest_FieldPathArrayOfValues {
	fpaov, err := ParseDeletePermissionRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeletePermissionRequest_FieldTerminalPathArrayOfValues struct {
	DeletePermissionRequest_FieldTerminalPath
	values interface{}
}

var _ DeletePermissionRequest_FieldPathArrayOfValues = (*DeletePermissionRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeletePermissionRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeletePermissionRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*permission.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeletePermissionRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*permission.Reference, bool) {
	res, ok := fpaov.values.([]*permission.Reference)
	return res, ok
}
