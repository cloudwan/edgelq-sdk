// Code generated by protoc-gen-goten-object
// File: edgelq/iam/proto/v1alpha/user_service.proto
// DO NOT EDIT!!!

package user_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	user "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha/user"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	empty "github.com/golang/protobuf/ptypes/empty"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = json.Marshaler(nil)
	_ = fmt.Stringer(nil)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = proto.Message(nil)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &user.User{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type GetUserRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() GetUserRequest_FieldPathSelector
	Get(source *GetUserRequest) []interface{}
	GetSingle(source *GetUserRequest) (interface{}, bool)
	ClearValue(item *GetUserRequest)

	// Those methods build corresponding GetUserRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) GetUserRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) GetUserRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) GetUserRequest_FieldPathArrayItemValue
}

type GetUserRequest_FieldPathSelector int32

const (
	GetUserRequest_FieldPathSelectorName      GetUserRequest_FieldPathSelector = 0
	GetUserRequest_FieldPathSelectorFieldMask GetUserRequest_FieldPathSelector = 1
	GetUserRequest_FieldPathSelectorView      GetUserRequest_FieldPathSelector = 2
)

func (s GetUserRequest_FieldPathSelector) String() string {
	switch s {
	case GetUserRequest_FieldPathSelectorName:
		return "name"
	case GetUserRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case GetUserRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for GetUserRequest: %d", s))
	}
}

func BuildGetUserRequest_FieldPath(fp gotenobject.RawFieldPath) (GetUserRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object GetUserRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &GetUserRequest_FieldTerminalPath{selector: GetUserRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &GetUserRequest_FieldTerminalPath{selector: GetUserRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &GetUserRequest_FieldTerminalPath{selector: GetUserRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object GetUserRequest", fp)
}

func ParseGetUserRequest_FieldPath(rawField string) (GetUserRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildGetUserRequest_FieldPath(fp)
}

func MustParseGetUserRequest_FieldPath(rawField string) GetUserRequest_FieldPath {
	fp, err := ParseGetUserRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type GetUserRequest_FieldTerminalPath struct {
	selector GetUserRequest_FieldPathSelector
}

var _ GetUserRequest_FieldPath = (*GetUserRequest_FieldTerminalPath)(nil)

func (fp *GetUserRequest_FieldTerminalPath) Selector() GetUserRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *GetUserRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *GetUserRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source GetUserRequest
func (fp *GetUserRequest_FieldTerminalPath) Get(source *GetUserRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case GetUserRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case GetUserRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case GetUserRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for GetUserRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *GetUserRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*GetUserRequest))
}

// GetSingle returns value pointed by specific field of from source GetUserRequest
func (fp *GetUserRequest_FieldTerminalPath) GetSingle(source *GetUserRequest) (interface{}, bool) {
	switch fp.selector {
	case GetUserRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case GetUserRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case GetUserRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for GetUserRequest: %d", fp.selector))
	}
}

func (fp *GetUserRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*GetUserRequest))
}

// GetDefault returns a default value of the field type
func (fp *GetUserRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case GetUserRequest_FieldPathSelectorName:
		return (*user.Reference)(nil)
	case GetUserRequest_FieldPathSelectorFieldMask:
		return (*user.User_FieldMask)(nil)
	case GetUserRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for GetUserRequest: %d", fp.selector))
	}
}

func (fp *GetUserRequest_FieldTerminalPath) ClearValue(item *GetUserRequest) {
	if item != nil {
		switch fp.selector {
		case GetUserRequest_FieldPathSelectorName:
			item.Name = nil
		case GetUserRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case GetUserRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for GetUserRequest: %d", fp.selector))
		}
	}
}

func (fp *GetUserRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*GetUserRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *GetUserRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == GetUserRequest_FieldPathSelectorName ||
		fp.selector == GetUserRequest_FieldPathSelectorFieldMask ||
		fp.selector == GetUserRequest_FieldPathSelectorView
}

func (fp *GetUserRequest_FieldTerminalPath) WithIValue(value interface{}) GetUserRequest_FieldPathValue {
	switch fp.selector {
	case GetUserRequest_FieldPathSelectorName:
		return &GetUserRequest_FieldTerminalPathValue{GetUserRequest_FieldTerminalPath: *fp, value: value.(*user.Reference)}
	case GetUserRequest_FieldPathSelectorFieldMask:
		return &GetUserRequest_FieldTerminalPathValue{GetUserRequest_FieldTerminalPath: *fp, value: value.(*user.User_FieldMask)}
	case GetUserRequest_FieldPathSelectorView:
		return &GetUserRequest_FieldTerminalPathValue{GetUserRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetUserRequest: %d", fp.selector))
	}
}

func (fp *GetUserRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *GetUserRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) GetUserRequest_FieldPathArrayOfValues {
	fpaov := &GetUserRequest_FieldTerminalPathArrayOfValues{GetUserRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case GetUserRequest_FieldPathSelectorName:
		return &GetUserRequest_FieldTerminalPathArrayOfValues{GetUserRequest_FieldTerminalPath: *fp, values: values.([]*user.Reference)}
	case GetUserRequest_FieldPathSelectorFieldMask:
		return &GetUserRequest_FieldTerminalPathArrayOfValues{GetUserRequest_FieldTerminalPath: *fp, values: values.([]*user.User_FieldMask)}
	case GetUserRequest_FieldPathSelectorView:
		return &GetUserRequest_FieldTerminalPathArrayOfValues{GetUserRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetUserRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *GetUserRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *GetUserRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) GetUserRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for GetUserRequest: %d", fp.selector))
	}
}

func (fp *GetUserRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// GetUserRequest_FieldPathValue allows storing values for GetUserRequest fields according to their type
type GetUserRequest_FieldPathValue interface {
	GetUserRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **GetUserRequest)
	CompareWith(*GetUserRequest) (cmp int, comparable bool)
}

func ParseGetUserRequest_FieldPathValue(pathStr, valueStr string) (GetUserRequest_FieldPathValue, error) {
	fp, err := ParseGetUserRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetUserRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(GetUserRequest_FieldPathValue), nil
}

func MustParseGetUserRequest_FieldPathValue(pathStr, valueStr string) GetUserRequest_FieldPathValue {
	fpv, err := ParseGetUserRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type GetUserRequest_FieldTerminalPathValue struct {
	GetUserRequest_FieldTerminalPath
	value interface{}
}

var _ GetUserRequest_FieldPathValue = (*GetUserRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'GetUserRequest' as interface{}
func (fpv *GetUserRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *GetUserRequest_FieldTerminalPathValue) AsNameValue() (*user.Reference, bool) {
	res, ok := fpv.value.(*user.Reference)
	return res, ok
}
func (fpv *GetUserRequest_FieldTerminalPathValue) AsFieldMaskValue() (*user.User_FieldMask, bool) {
	res, ok := fpv.value.(*user.User_FieldMask)
	return res, ok
}
func (fpv *GetUserRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object GetUserRequest
func (fpv *GetUserRequest_FieldTerminalPathValue) SetTo(target **GetUserRequest) {
	if *target == nil {
		*target = new(GetUserRequest)
	}
	switch fpv.selector {
	case GetUserRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*user.Reference)
	case GetUserRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*user.User_FieldMask)
	case GetUserRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for GetUserRequest: %d", fpv.selector))
	}
}

func (fpv *GetUserRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*GetUserRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'GetUserRequest_FieldTerminalPathValue' with the value under path in 'GetUserRequest'.
func (fpv *GetUserRequest_FieldTerminalPathValue) CompareWith(source *GetUserRequest) (int, bool) {
	switch fpv.selector {
	case GetUserRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*user.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case GetUserRequest_FieldPathSelectorFieldMask:
		return 0, false
	case GetUserRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for GetUserRequest: %d", fpv.selector))
	}
}

func (fpv *GetUserRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*GetUserRequest))
}

// GetUserRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for GetUserRequest according to their type
// Present only for array (repeated) types.
type GetUserRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	GetUserRequest_FieldPath
	ContainsValue(*GetUserRequest) bool
}

// ParseGetUserRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseGetUserRequest_FieldPathArrayItemValue(pathStr, valueStr string) (GetUserRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseGetUserRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetUserRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(GetUserRequest_FieldPathArrayItemValue), nil
}

func MustParseGetUserRequest_FieldPathArrayItemValue(pathStr, valueStr string) GetUserRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseGetUserRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type GetUserRequest_FieldTerminalPathArrayItemValue struct {
	GetUserRequest_FieldTerminalPath
	value interface{}
}

var _ GetUserRequest_FieldPathArrayItemValue = (*GetUserRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object GetUserRequest as interface{}
func (fpaiv *GetUserRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *GetUserRequest_FieldTerminalPathArrayItemValue) GetSingle(source *GetUserRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *GetUserRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*GetUserRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'GetUserRequest'
func (fpaiv *GetUserRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *GetUserRequest) bool {
	slice := fpaiv.GetUserRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// GetUserRequest_FieldPathArrayOfValues allows storing slice of values for GetUserRequest fields according to their type
type GetUserRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	GetUserRequest_FieldPath
}

func ParseGetUserRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (GetUserRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseGetUserRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetUserRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(GetUserRequest_FieldPathArrayOfValues), nil
}

func MustParseGetUserRequest_FieldPathArrayOfValues(pathStr, valuesStr string) GetUserRequest_FieldPathArrayOfValues {
	fpaov, err := ParseGetUserRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type GetUserRequest_FieldTerminalPathArrayOfValues struct {
	GetUserRequest_FieldTerminalPath
	values interface{}
}

var _ GetUserRequest_FieldPathArrayOfValues = (*GetUserRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *GetUserRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case GetUserRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*user.Reference) {
			values = append(values, v)
		}
	case GetUserRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*user.User_FieldMask) {
			values = append(values, v)
		}
	case GetUserRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *GetUserRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*user.Reference, bool) {
	res, ok := fpaov.values.([]*user.Reference)
	return res, ok
}
func (fpaov *GetUserRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*user.User_FieldMask, bool) {
	res, ok := fpaov.values.([]*user.User_FieldMask)
	return res, ok
}
func (fpaov *GetUserRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetUsersRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetUsersRequest_FieldPathSelector
	Get(source *BatchGetUsersRequest) []interface{}
	GetSingle(source *BatchGetUsersRequest) (interface{}, bool)
	ClearValue(item *BatchGetUsersRequest)

	// Those methods build corresponding BatchGetUsersRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetUsersRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetUsersRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetUsersRequest_FieldPathArrayItemValue
}

type BatchGetUsersRequest_FieldPathSelector int32

const (
	BatchGetUsersRequest_FieldPathSelectorParent    BatchGetUsersRequest_FieldPathSelector = 0
	BatchGetUsersRequest_FieldPathSelectorNames     BatchGetUsersRequest_FieldPathSelector = 1
	BatchGetUsersRequest_FieldPathSelectorFieldMask BatchGetUsersRequest_FieldPathSelector = 2
	BatchGetUsersRequest_FieldPathSelectorView      BatchGetUsersRequest_FieldPathSelector = 3
)

func (s BatchGetUsersRequest_FieldPathSelector) String() string {
	switch s {
	case BatchGetUsersRequest_FieldPathSelectorParent:
		return "parent"
	case BatchGetUsersRequest_FieldPathSelectorNames:
		return "names"
	case BatchGetUsersRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case BatchGetUsersRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetUsersRequest: %d", s))
	}
}

func BuildBatchGetUsersRequest_FieldPath(fp gotenobject.RawFieldPath) (BatchGetUsersRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetUsersRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &BatchGetUsersRequest_FieldTerminalPath{selector: BatchGetUsersRequest_FieldPathSelectorParent}, nil
		case "names":
			return &BatchGetUsersRequest_FieldTerminalPath{selector: BatchGetUsersRequest_FieldPathSelectorNames}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &BatchGetUsersRequest_FieldTerminalPath{selector: BatchGetUsersRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &BatchGetUsersRequest_FieldTerminalPath{selector: BatchGetUsersRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetUsersRequest", fp)
}

func ParseBatchGetUsersRequest_FieldPath(rawField string) (BatchGetUsersRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetUsersRequest_FieldPath(fp)
}

func MustParseBatchGetUsersRequest_FieldPath(rawField string) BatchGetUsersRequest_FieldPath {
	fp, err := ParseBatchGetUsersRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetUsersRequest_FieldTerminalPath struct {
	selector BatchGetUsersRequest_FieldPathSelector
}

var _ BatchGetUsersRequest_FieldPath = (*BatchGetUsersRequest_FieldTerminalPath)(nil)

func (fp *BatchGetUsersRequest_FieldTerminalPath) Selector() BatchGetUsersRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetUsersRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetUsersRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetUsersRequest
func (fp *BatchGetUsersRequest_FieldTerminalPath) Get(source *BatchGetUsersRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetUsersRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case BatchGetUsersRequest_FieldPathSelectorNames:
			for _, value := range source.GetNames() {
				values = append(values, value)
			}
		case BatchGetUsersRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case BatchGetUsersRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetUsersRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetUsersRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetUsersRequest))
}

// GetSingle returns value pointed by specific field of from source BatchGetUsersRequest
func (fp *BatchGetUsersRequest_FieldTerminalPath) GetSingle(source *BatchGetUsersRequest) (interface{}, bool) {
	switch fp.selector {
	case BatchGetUsersRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case BatchGetUsersRequest_FieldPathSelectorNames:
		res := source.GetNames()
		return res, res != nil
	case BatchGetUsersRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case BatchGetUsersRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetUsersRequest: %d", fp.selector))
	}
}

func (fp *BatchGetUsersRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetUsersRequest))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetUsersRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetUsersRequest_FieldPathSelectorParent:
		return (*user.Reference)(nil)
	case BatchGetUsersRequest_FieldPathSelectorNames:
		return ([]*user.Reference)(nil)
	case BatchGetUsersRequest_FieldPathSelectorFieldMask:
		return (*user.User_FieldMask)(nil)
	case BatchGetUsersRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetUsersRequest: %d", fp.selector))
	}
}

func (fp *BatchGetUsersRequest_FieldTerminalPath) ClearValue(item *BatchGetUsersRequest) {
	if item != nil {
		switch fp.selector {
		case BatchGetUsersRequest_FieldPathSelectorParent:
			item.Parent = nil
		case BatchGetUsersRequest_FieldPathSelectorNames:
			item.Names = nil
		case BatchGetUsersRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case BatchGetUsersRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetUsersRequest: %d", fp.selector))
		}
	}
}

func (fp *BatchGetUsersRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetUsersRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetUsersRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetUsersRequest_FieldPathSelectorParent ||
		fp.selector == BatchGetUsersRequest_FieldPathSelectorNames ||
		fp.selector == BatchGetUsersRequest_FieldPathSelectorFieldMask ||
		fp.selector == BatchGetUsersRequest_FieldPathSelectorView
}

func (fp *BatchGetUsersRequest_FieldTerminalPath) WithIValue(value interface{}) BatchGetUsersRequest_FieldPathValue {
	switch fp.selector {
	case BatchGetUsersRequest_FieldPathSelectorParent:
		return &BatchGetUsersRequest_FieldTerminalPathValue{BatchGetUsersRequest_FieldTerminalPath: *fp, value: value.(*user.Reference)}
	case BatchGetUsersRequest_FieldPathSelectorNames:
		return &BatchGetUsersRequest_FieldTerminalPathValue{BatchGetUsersRequest_FieldTerminalPath: *fp, value: value.([]*user.Reference)}
	case BatchGetUsersRequest_FieldPathSelectorFieldMask:
		return &BatchGetUsersRequest_FieldTerminalPathValue{BatchGetUsersRequest_FieldTerminalPath: *fp, value: value.(*user.User_FieldMask)}
	case BatchGetUsersRequest_FieldPathSelectorView:
		return &BatchGetUsersRequest_FieldTerminalPathValue{BatchGetUsersRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetUsersRequest: %d", fp.selector))
	}
}

func (fp *BatchGetUsersRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetUsersRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetUsersRequest_FieldPathArrayOfValues {
	fpaov := &BatchGetUsersRequest_FieldTerminalPathArrayOfValues{BatchGetUsersRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetUsersRequest_FieldPathSelectorParent:
		return &BatchGetUsersRequest_FieldTerminalPathArrayOfValues{BatchGetUsersRequest_FieldTerminalPath: *fp, values: values.([]*user.Reference)}
	case BatchGetUsersRequest_FieldPathSelectorNames:
		return &BatchGetUsersRequest_FieldTerminalPathArrayOfValues{BatchGetUsersRequest_FieldTerminalPath: *fp, values: values.([][]*user.Reference)}
	case BatchGetUsersRequest_FieldPathSelectorFieldMask:
		return &BatchGetUsersRequest_FieldTerminalPathArrayOfValues{BatchGetUsersRequest_FieldTerminalPath: *fp, values: values.([]*user.User_FieldMask)}
	case BatchGetUsersRequest_FieldPathSelectorView:
		return &BatchGetUsersRequest_FieldTerminalPathArrayOfValues{BatchGetUsersRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetUsersRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetUsersRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetUsersRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetUsersRequest_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetUsersRequest_FieldPathSelectorNames:
		return &BatchGetUsersRequest_FieldTerminalPathArrayItemValue{BatchGetUsersRequest_FieldTerminalPath: *fp, value: value.(*user.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetUsersRequest: %d", fp.selector))
	}
}

func (fp *BatchGetUsersRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// BatchGetUsersRequest_FieldPathValue allows storing values for BatchGetUsersRequest fields according to their type
type BatchGetUsersRequest_FieldPathValue interface {
	BatchGetUsersRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetUsersRequest)
	CompareWith(*BatchGetUsersRequest) (cmp int, comparable bool)
}

func ParseBatchGetUsersRequest_FieldPathValue(pathStr, valueStr string) (BatchGetUsersRequest_FieldPathValue, error) {
	fp, err := ParseBatchGetUsersRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetUsersRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetUsersRequest_FieldPathValue), nil
}

func MustParseBatchGetUsersRequest_FieldPathValue(pathStr, valueStr string) BatchGetUsersRequest_FieldPathValue {
	fpv, err := ParseBatchGetUsersRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetUsersRequest_FieldTerminalPathValue struct {
	BatchGetUsersRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetUsersRequest_FieldPathValue = (*BatchGetUsersRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetUsersRequest' as interface{}
func (fpv *BatchGetUsersRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetUsersRequest_FieldTerminalPathValue) AsParentValue() (*user.Reference, bool) {
	res, ok := fpv.value.(*user.Reference)
	return res, ok
}
func (fpv *BatchGetUsersRequest_FieldTerminalPathValue) AsNamesValue() ([]*user.Reference, bool) {
	res, ok := fpv.value.([]*user.Reference)
	return res, ok
}
func (fpv *BatchGetUsersRequest_FieldTerminalPathValue) AsFieldMaskValue() (*user.User_FieldMask, bool) {
	res, ok := fpv.value.(*user.User_FieldMask)
	return res, ok
}
func (fpv *BatchGetUsersRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetUsersRequest
func (fpv *BatchGetUsersRequest_FieldTerminalPathValue) SetTo(target **BatchGetUsersRequest) {
	if *target == nil {
		*target = new(BatchGetUsersRequest)
	}
	switch fpv.selector {
	case BatchGetUsersRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*user.Reference)
	case BatchGetUsersRequest_FieldPathSelectorNames:
		(*target).Names = fpv.value.([]*user.Reference)
	case BatchGetUsersRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*user.User_FieldMask)
	case BatchGetUsersRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetUsersRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetUsersRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetUsersRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetUsersRequest_FieldTerminalPathValue' with the value under path in 'BatchGetUsersRequest'.
func (fpv *BatchGetUsersRequest_FieldTerminalPathValue) CompareWith(source *BatchGetUsersRequest) (int, bool) {
	switch fpv.selector {
	case BatchGetUsersRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*user.Reference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case BatchGetUsersRequest_FieldPathSelectorNames:
		return 0, false
	case BatchGetUsersRequest_FieldPathSelectorFieldMask:
		return 0, false
	case BatchGetUsersRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetUsersRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetUsersRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetUsersRequest))
}

// BatchGetUsersRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetUsersRequest according to their type
// Present only for array (repeated) types.
type BatchGetUsersRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetUsersRequest_FieldPath
	ContainsValue(*BatchGetUsersRequest) bool
}

// ParseBatchGetUsersRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetUsersRequest_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetUsersRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetUsersRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetUsersRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetUsersRequest_FieldPathArrayItemValue), nil
}

func MustParseBatchGetUsersRequest_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetUsersRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetUsersRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetUsersRequest_FieldTerminalPathArrayItemValue struct {
	BatchGetUsersRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetUsersRequest_FieldPathArrayItemValue = (*BatchGetUsersRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetUsersRequest as interface{}
func (fpaiv *BatchGetUsersRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetUsersRequest_FieldTerminalPathArrayItemValue) AsNamesItemValue() (*user.Reference, bool) {
	res, ok := fpaiv.value.(*user.Reference)
	return res, ok
}

func (fpaiv *BatchGetUsersRequest_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetUsersRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetUsersRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetUsersRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetUsersRequest'
func (fpaiv *BatchGetUsersRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetUsersRequest) bool {
	slice := fpaiv.BatchGetUsersRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// BatchGetUsersRequest_FieldPathArrayOfValues allows storing slice of values for BatchGetUsersRequest fields according to their type
type BatchGetUsersRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetUsersRequest_FieldPath
}

func ParseBatchGetUsersRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetUsersRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetUsersRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetUsersRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetUsersRequest_FieldPathArrayOfValues), nil
}

func MustParseBatchGetUsersRequest_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetUsersRequest_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetUsersRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetUsersRequest_FieldTerminalPathArrayOfValues struct {
	BatchGetUsersRequest_FieldTerminalPath
	values interface{}
}

var _ BatchGetUsersRequest_FieldPathArrayOfValues = (*BatchGetUsersRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetUsersRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetUsersRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*user.Reference) {
			values = append(values, v)
		}
	case BatchGetUsersRequest_FieldPathSelectorNames:
		for _, v := range fpaov.values.([][]*user.Reference) {
			values = append(values, v)
		}
	case BatchGetUsersRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*user.User_FieldMask) {
			values = append(values, v)
		}
	case BatchGetUsersRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetUsersRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*user.Reference, bool) {
	res, ok := fpaov.values.([]*user.Reference)
	return res, ok
}
func (fpaov *BatchGetUsersRequest_FieldTerminalPathArrayOfValues) AsNamesArrayOfValues() ([][]*user.Reference, bool) {
	res, ok := fpaov.values.([][]*user.Reference)
	return res, ok
}
func (fpaov *BatchGetUsersRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*user.User_FieldMask, bool) {
	res, ok := fpaov.values.([]*user.User_FieldMask)
	return res, ok
}
func (fpaov *BatchGetUsersRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetUsersResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetUsersResponse_FieldPathSelector
	Get(source *BatchGetUsersResponse) []interface{}
	GetSingle(source *BatchGetUsersResponse) (interface{}, bool)
	ClearValue(item *BatchGetUsersResponse)

	// Those methods build corresponding BatchGetUsersResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetUsersResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetUsersResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetUsersResponse_FieldPathArrayItemValue
}

type BatchGetUsersResponse_FieldPathSelector int32

const (
	BatchGetUsersResponse_FieldPathSelectorUsers   BatchGetUsersResponse_FieldPathSelector = 0
	BatchGetUsersResponse_FieldPathSelectorMissing BatchGetUsersResponse_FieldPathSelector = 1
)

func (s BatchGetUsersResponse_FieldPathSelector) String() string {
	switch s {
	case BatchGetUsersResponse_FieldPathSelectorUsers:
		return "users"
	case BatchGetUsersResponse_FieldPathSelectorMissing:
		return "missing"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetUsersResponse: %d", s))
	}
}

func BuildBatchGetUsersResponse_FieldPath(fp gotenobject.RawFieldPath) (BatchGetUsersResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetUsersResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "users":
			return &BatchGetUsersResponse_FieldTerminalPath{selector: BatchGetUsersResponse_FieldPathSelectorUsers}, nil
		case "missing":
			return &BatchGetUsersResponse_FieldTerminalPath{selector: BatchGetUsersResponse_FieldPathSelectorMissing}, nil
		}
	} else {
		switch fp[0] {
		case "users":
			if subpath, err := user.BuildUser_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &BatchGetUsersResponse_FieldSubPath{selector: BatchGetUsersResponse_FieldPathSelectorUsers, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetUsersResponse", fp)
}

func ParseBatchGetUsersResponse_FieldPath(rawField string) (BatchGetUsersResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetUsersResponse_FieldPath(fp)
}

func MustParseBatchGetUsersResponse_FieldPath(rawField string) BatchGetUsersResponse_FieldPath {
	fp, err := ParseBatchGetUsersResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetUsersResponse_FieldTerminalPath struct {
	selector BatchGetUsersResponse_FieldPathSelector
}

var _ BatchGetUsersResponse_FieldPath = (*BatchGetUsersResponse_FieldTerminalPath)(nil)

func (fp *BatchGetUsersResponse_FieldTerminalPath) Selector() BatchGetUsersResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetUsersResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetUsersResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetUsersResponse
func (fp *BatchGetUsersResponse_FieldTerminalPath) Get(source *BatchGetUsersResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetUsersResponse_FieldPathSelectorUsers:
			for _, value := range source.GetUsers() {
				values = append(values, value)
			}
		case BatchGetUsersResponse_FieldPathSelectorMissing:
			for _, value := range source.GetMissing() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetUsersResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetUsersResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetUsersResponse))
}

// GetSingle returns value pointed by specific field of from source BatchGetUsersResponse
func (fp *BatchGetUsersResponse_FieldTerminalPath) GetSingle(source *BatchGetUsersResponse) (interface{}, bool) {
	switch fp.selector {
	case BatchGetUsersResponse_FieldPathSelectorUsers:
		res := source.GetUsers()
		return res, res != nil
	case BatchGetUsersResponse_FieldPathSelectorMissing:
		res := source.GetMissing()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetUsersResponse: %d", fp.selector))
	}
}

func (fp *BatchGetUsersResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetUsersResponse))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetUsersResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetUsersResponse_FieldPathSelectorUsers:
		return ([]*user.User)(nil)
	case BatchGetUsersResponse_FieldPathSelectorMissing:
		return ([]*user.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetUsersResponse: %d", fp.selector))
	}
}

func (fp *BatchGetUsersResponse_FieldTerminalPath) ClearValue(item *BatchGetUsersResponse) {
	if item != nil {
		switch fp.selector {
		case BatchGetUsersResponse_FieldPathSelectorUsers:
			item.Users = nil
		case BatchGetUsersResponse_FieldPathSelectorMissing:
			item.Missing = nil
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetUsersResponse: %d", fp.selector))
		}
	}
}

func (fp *BatchGetUsersResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetUsersResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetUsersResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetUsersResponse_FieldPathSelectorMissing
}

func (fp *BatchGetUsersResponse_FieldTerminalPath) WithIValue(value interface{}) BatchGetUsersResponse_FieldPathValue {
	switch fp.selector {
	case BatchGetUsersResponse_FieldPathSelectorUsers:
		return &BatchGetUsersResponse_FieldTerminalPathValue{BatchGetUsersResponse_FieldTerminalPath: *fp, value: value.([]*user.User)}
	case BatchGetUsersResponse_FieldPathSelectorMissing:
		return &BatchGetUsersResponse_FieldTerminalPathValue{BatchGetUsersResponse_FieldTerminalPath: *fp, value: value.([]*user.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetUsersResponse: %d", fp.selector))
	}
}

func (fp *BatchGetUsersResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetUsersResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetUsersResponse_FieldPathArrayOfValues {
	fpaov := &BatchGetUsersResponse_FieldTerminalPathArrayOfValues{BatchGetUsersResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetUsersResponse_FieldPathSelectorUsers:
		return &BatchGetUsersResponse_FieldTerminalPathArrayOfValues{BatchGetUsersResponse_FieldTerminalPath: *fp, values: values.([][]*user.User)}
	case BatchGetUsersResponse_FieldPathSelectorMissing:
		return &BatchGetUsersResponse_FieldTerminalPathArrayOfValues{BatchGetUsersResponse_FieldTerminalPath: *fp, values: values.([][]*user.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetUsersResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetUsersResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetUsersResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetUsersResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetUsersResponse_FieldPathSelectorUsers:
		return &BatchGetUsersResponse_FieldTerminalPathArrayItemValue{BatchGetUsersResponse_FieldTerminalPath: *fp, value: value.(*user.User)}
	case BatchGetUsersResponse_FieldPathSelectorMissing:
		return &BatchGetUsersResponse_FieldTerminalPathArrayItemValue{BatchGetUsersResponse_FieldTerminalPath: *fp, value: value.(*user.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetUsersResponse: %d", fp.selector))
	}
}

func (fp *BatchGetUsersResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type BatchGetUsersResponse_FieldSubPath struct {
	selector BatchGetUsersResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ BatchGetUsersResponse_FieldPath = (*BatchGetUsersResponse_FieldSubPath)(nil)

func (fps *BatchGetUsersResponse_FieldSubPath) Selector() BatchGetUsersResponse_FieldPathSelector {
	return fps.selector
}
func (fps *BatchGetUsersResponse_FieldSubPath) AsUsersSubPath() (user.User_FieldPath, bool) {
	res, ok := fps.subPath.(user.User_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *BatchGetUsersResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *BatchGetUsersResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source BatchGetUsersResponse
func (fps *BatchGetUsersResponse_FieldSubPath) Get(source *BatchGetUsersResponse) (values []interface{}) {
	if asUserFieldPath, ok := fps.AsUsersSubPath(); ok {
		for _, item := range source.GetUsers() {
			values = append(values, asUserFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for BatchGetUsersResponse: %d", fps.selector))
	}
	return
}

func (fps *BatchGetUsersResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*BatchGetUsersResponse))
}

// GetSingle returns value of selected field from source BatchGetUsersResponse
func (fps *BatchGetUsersResponse_FieldSubPath) GetSingle(source *BatchGetUsersResponse) (interface{}, bool) {
	switch fps.selector {
	case BatchGetUsersResponse_FieldPathSelectorUsers:
		if len(source.GetUsers()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetUsers()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetUsersResponse: %d", fps.selector))
	}
}

func (fps *BatchGetUsersResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*BatchGetUsersResponse))
}

// GetDefault returns a default value of the field type
func (fps *BatchGetUsersResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *BatchGetUsersResponse_FieldSubPath) ClearValue(item *BatchGetUsersResponse) {
	if item != nil {
		switch fps.selector {
		case BatchGetUsersResponse_FieldPathSelectorUsers:
			for _, subItem := range item.Users {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetUsersResponse: %d", fps.selector))
		}
	}
}

func (fps *BatchGetUsersResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*BatchGetUsersResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *BatchGetUsersResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *BatchGetUsersResponse_FieldSubPath) WithIValue(value interface{}) BatchGetUsersResponse_FieldPathValue {
	return &BatchGetUsersResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *BatchGetUsersResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *BatchGetUsersResponse_FieldSubPath) WithIArrayOfValues(values interface{}) BatchGetUsersResponse_FieldPathArrayOfValues {
	return &BatchGetUsersResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *BatchGetUsersResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *BatchGetUsersResponse_FieldSubPath) WithIArrayItemValue(value interface{}) BatchGetUsersResponse_FieldPathArrayItemValue {
	return &BatchGetUsersResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *BatchGetUsersResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// BatchGetUsersResponse_FieldPathValue allows storing values for BatchGetUsersResponse fields according to their type
type BatchGetUsersResponse_FieldPathValue interface {
	BatchGetUsersResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetUsersResponse)
	CompareWith(*BatchGetUsersResponse) (cmp int, comparable bool)
}

func ParseBatchGetUsersResponse_FieldPathValue(pathStr, valueStr string) (BatchGetUsersResponse_FieldPathValue, error) {
	fp, err := ParseBatchGetUsersResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetUsersResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetUsersResponse_FieldPathValue), nil
}

func MustParseBatchGetUsersResponse_FieldPathValue(pathStr, valueStr string) BatchGetUsersResponse_FieldPathValue {
	fpv, err := ParseBatchGetUsersResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetUsersResponse_FieldTerminalPathValue struct {
	BatchGetUsersResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetUsersResponse_FieldPathValue = (*BatchGetUsersResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetUsersResponse' as interface{}
func (fpv *BatchGetUsersResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetUsersResponse_FieldTerminalPathValue) AsUsersValue() ([]*user.User, bool) {
	res, ok := fpv.value.([]*user.User)
	return res, ok
}
func (fpv *BatchGetUsersResponse_FieldTerminalPathValue) AsMissingValue() ([]*user.Reference, bool) {
	res, ok := fpv.value.([]*user.Reference)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetUsersResponse
func (fpv *BatchGetUsersResponse_FieldTerminalPathValue) SetTo(target **BatchGetUsersResponse) {
	if *target == nil {
		*target = new(BatchGetUsersResponse)
	}
	switch fpv.selector {
	case BatchGetUsersResponse_FieldPathSelectorUsers:
		(*target).Users = fpv.value.([]*user.User)
	case BatchGetUsersResponse_FieldPathSelectorMissing:
		(*target).Missing = fpv.value.([]*user.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetUsersResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetUsersResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetUsersResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetUsersResponse_FieldTerminalPathValue' with the value under path in 'BatchGetUsersResponse'.
func (fpv *BatchGetUsersResponse_FieldTerminalPathValue) CompareWith(source *BatchGetUsersResponse) (int, bool) {
	switch fpv.selector {
	case BatchGetUsersResponse_FieldPathSelectorUsers:
		return 0, false
	case BatchGetUsersResponse_FieldPathSelectorMissing:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetUsersResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetUsersResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetUsersResponse))
}

type BatchGetUsersResponse_FieldSubPathValue struct {
	BatchGetUsersResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ BatchGetUsersResponse_FieldPathValue = (*BatchGetUsersResponse_FieldSubPathValue)(nil)

func (fpvs *BatchGetUsersResponse_FieldSubPathValue) AsUsersPathValue() (user.User_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(user.User_FieldPathValue)
	return res, ok
}

func (fpvs *BatchGetUsersResponse_FieldSubPathValue) SetTo(target **BatchGetUsersResponse) {
	if *target == nil {
		*target = new(BatchGetUsersResponse)
	}
	switch fpvs.Selector() {
	case BatchGetUsersResponse_FieldPathSelectorUsers:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetUsersResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetUsersResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetUsersResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *BatchGetUsersResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *BatchGetUsersResponse_FieldSubPathValue) CompareWith(source *BatchGetUsersResponse) (int, bool) {
	switch fpvs.Selector() {
	case BatchGetUsersResponse_FieldPathSelectorUsers:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetUsersResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetUsersResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*BatchGetUsersResponse))
}

// BatchGetUsersResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetUsersResponse according to their type
// Present only for array (repeated) types.
type BatchGetUsersResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetUsersResponse_FieldPath
	ContainsValue(*BatchGetUsersResponse) bool
}

// ParseBatchGetUsersResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetUsersResponse_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetUsersResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetUsersResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetUsersResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetUsersResponse_FieldPathArrayItemValue), nil
}

func MustParseBatchGetUsersResponse_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetUsersResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetUsersResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetUsersResponse_FieldTerminalPathArrayItemValue struct {
	BatchGetUsersResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetUsersResponse_FieldPathArrayItemValue = (*BatchGetUsersResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetUsersResponse as interface{}
func (fpaiv *BatchGetUsersResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetUsersResponse_FieldTerminalPathArrayItemValue) AsUsersItemValue() (*user.User, bool) {
	res, ok := fpaiv.value.(*user.User)
	return res, ok
}
func (fpaiv *BatchGetUsersResponse_FieldTerminalPathArrayItemValue) AsMissingItemValue() (*user.Reference, bool) {
	res, ok := fpaiv.value.(*user.Reference)
	return res, ok
}

func (fpaiv *BatchGetUsersResponse_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetUsersResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetUsersResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetUsersResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetUsersResponse'
func (fpaiv *BatchGetUsersResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetUsersResponse) bool {
	slice := fpaiv.BatchGetUsersResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type BatchGetUsersResponse_FieldSubPathArrayItemValue struct {
	BatchGetUsersResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *BatchGetUsersResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *BatchGetUsersResponse_FieldSubPathArrayItemValue) AsUsersPathItemValue() (user.User_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(user.User_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetUsersResponse'
func (fpaivs *BatchGetUsersResponse_FieldSubPathArrayItemValue) ContainsValue(source *BatchGetUsersResponse) bool {
	switch fpaivs.Selector() {
	case BatchGetUsersResponse_FieldPathSelectorUsers:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetUsersResponse: %d", fpaivs.Selector()))
	}
}

// BatchGetUsersResponse_FieldPathArrayOfValues allows storing slice of values for BatchGetUsersResponse fields according to their type
type BatchGetUsersResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetUsersResponse_FieldPath
}

func ParseBatchGetUsersResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetUsersResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetUsersResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetUsersResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetUsersResponse_FieldPathArrayOfValues), nil
}

func MustParseBatchGetUsersResponse_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetUsersResponse_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetUsersResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetUsersResponse_FieldTerminalPathArrayOfValues struct {
	BatchGetUsersResponse_FieldTerminalPath
	values interface{}
}

var _ BatchGetUsersResponse_FieldPathArrayOfValues = (*BatchGetUsersResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetUsersResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetUsersResponse_FieldPathSelectorUsers:
		for _, v := range fpaov.values.([][]*user.User) {
			values = append(values, v)
		}
	case BatchGetUsersResponse_FieldPathSelectorMissing:
		for _, v := range fpaov.values.([][]*user.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetUsersResponse_FieldTerminalPathArrayOfValues) AsUsersArrayOfValues() ([][]*user.User, bool) {
	res, ok := fpaov.values.([][]*user.User)
	return res, ok
}
func (fpaov *BatchGetUsersResponse_FieldTerminalPathArrayOfValues) AsMissingArrayOfValues() ([][]*user.Reference, bool) {
	res, ok := fpaov.values.([][]*user.Reference)
	return res, ok
}

type BatchGetUsersResponse_FieldSubPathArrayOfValues struct {
	BatchGetUsersResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ BatchGetUsersResponse_FieldPathArrayOfValues = (*BatchGetUsersResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *BatchGetUsersResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *BatchGetUsersResponse_FieldSubPathArrayOfValues) AsUsersPathArrayOfValues() (user.User_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(user.User_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListUsersRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListUsersRequest_FieldPathSelector
	Get(source *ListUsersRequest) []interface{}
	GetSingle(source *ListUsersRequest) (interface{}, bool)
	ClearValue(item *ListUsersRequest)

	// Those methods build corresponding ListUsersRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListUsersRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ListUsersRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListUsersRequest_FieldPathArrayItemValue
}

type ListUsersRequest_FieldPathSelector int32

const (
	ListUsersRequest_FieldPathSelectorPageSize  ListUsersRequest_FieldPathSelector = 0
	ListUsersRequest_FieldPathSelectorPageToken ListUsersRequest_FieldPathSelector = 1
	ListUsersRequest_FieldPathSelectorOrderBy   ListUsersRequest_FieldPathSelector = 2
	ListUsersRequest_FieldPathSelectorFilter    ListUsersRequest_FieldPathSelector = 3
	ListUsersRequest_FieldPathSelectorFieldMask ListUsersRequest_FieldPathSelector = 4
	ListUsersRequest_FieldPathSelectorView      ListUsersRequest_FieldPathSelector = 5
)

func (s ListUsersRequest_FieldPathSelector) String() string {
	switch s {
	case ListUsersRequest_FieldPathSelectorPageSize:
		return "page_size"
	case ListUsersRequest_FieldPathSelectorPageToken:
		return "page_token"
	case ListUsersRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case ListUsersRequest_FieldPathSelectorFilter:
		return "filter"
	case ListUsersRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case ListUsersRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for ListUsersRequest: %d", s))
	}
}

func BuildListUsersRequest_FieldPath(fp gotenobject.RawFieldPath) (ListUsersRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListUsersRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "page_size", "pageSize", "page-size":
			return &ListUsersRequest_FieldTerminalPath{selector: ListUsersRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &ListUsersRequest_FieldTerminalPath{selector: ListUsersRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &ListUsersRequest_FieldTerminalPath{selector: ListUsersRequest_FieldPathSelectorOrderBy}, nil
		case "filter":
			return &ListUsersRequest_FieldTerminalPath{selector: ListUsersRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &ListUsersRequest_FieldTerminalPath{selector: ListUsersRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &ListUsersRequest_FieldTerminalPath{selector: ListUsersRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListUsersRequest", fp)
}

func ParseListUsersRequest_FieldPath(rawField string) (ListUsersRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListUsersRequest_FieldPath(fp)
}

func MustParseListUsersRequest_FieldPath(rawField string) ListUsersRequest_FieldPath {
	fp, err := ParseListUsersRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListUsersRequest_FieldTerminalPath struct {
	selector ListUsersRequest_FieldPathSelector
}

var _ ListUsersRequest_FieldPath = (*ListUsersRequest_FieldTerminalPath)(nil)

func (fp *ListUsersRequest_FieldTerminalPath) Selector() ListUsersRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListUsersRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListUsersRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListUsersRequest
func (fp *ListUsersRequest_FieldTerminalPath) Get(source *ListUsersRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListUsersRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case ListUsersRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case ListUsersRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case ListUsersRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case ListUsersRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case ListUsersRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for ListUsersRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ListUsersRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListUsersRequest))
}

// GetSingle returns value pointed by specific field of from source ListUsersRequest
func (fp *ListUsersRequest_FieldTerminalPath) GetSingle(source *ListUsersRequest) (interface{}, bool) {
	switch fp.selector {
	case ListUsersRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case ListUsersRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case ListUsersRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case ListUsersRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case ListUsersRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case ListUsersRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListUsersRequest: %d", fp.selector))
	}
}

func (fp *ListUsersRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListUsersRequest))
}

// GetDefault returns a default value of the field type
func (fp *ListUsersRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListUsersRequest_FieldPathSelectorPageSize:
		return int32(0)
	case ListUsersRequest_FieldPathSelectorPageToken:
		return (*user.PagerCursor)(nil)
	case ListUsersRequest_FieldPathSelectorOrderBy:
		return (*user.OrderBy)(nil)
	case ListUsersRequest_FieldPathSelectorFilter:
		return (*user.Filter)(nil)
	case ListUsersRequest_FieldPathSelectorFieldMask:
		return (*user.User_FieldMask)(nil)
	case ListUsersRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for ListUsersRequest: %d", fp.selector))
	}
}

func (fp *ListUsersRequest_FieldTerminalPath) ClearValue(item *ListUsersRequest) {
	if item != nil {
		switch fp.selector {
		case ListUsersRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case ListUsersRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case ListUsersRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case ListUsersRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case ListUsersRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case ListUsersRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for ListUsersRequest: %d", fp.selector))
		}
	}
}

func (fp *ListUsersRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListUsersRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListUsersRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListUsersRequest_FieldPathSelectorPageSize ||
		fp.selector == ListUsersRequest_FieldPathSelectorPageToken ||
		fp.selector == ListUsersRequest_FieldPathSelectorOrderBy ||
		fp.selector == ListUsersRequest_FieldPathSelectorFilter ||
		fp.selector == ListUsersRequest_FieldPathSelectorFieldMask ||
		fp.selector == ListUsersRequest_FieldPathSelectorView
}

func (fp *ListUsersRequest_FieldTerminalPath) WithIValue(value interface{}) ListUsersRequest_FieldPathValue {
	switch fp.selector {
	case ListUsersRequest_FieldPathSelectorPageSize:
		return &ListUsersRequest_FieldTerminalPathValue{ListUsersRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case ListUsersRequest_FieldPathSelectorPageToken:
		return &ListUsersRequest_FieldTerminalPathValue{ListUsersRequest_FieldTerminalPath: *fp, value: value.(*user.PagerCursor)}
	case ListUsersRequest_FieldPathSelectorOrderBy:
		return &ListUsersRequest_FieldTerminalPathValue{ListUsersRequest_FieldTerminalPath: *fp, value: value.(*user.OrderBy)}
	case ListUsersRequest_FieldPathSelectorFilter:
		return &ListUsersRequest_FieldTerminalPathValue{ListUsersRequest_FieldTerminalPath: *fp, value: value.(*user.Filter)}
	case ListUsersRequest_FieldPathSelectorFieldMask:
		return &ListUsersRequest_FieldTerminalPathValue{ListUsersRequest_FieldTerminalPath: *fp, value: value.(*user.User_FieldMask)}
	case ListUsersRequest_FieldPathSelectorView:
		return &ListUsersRequest_FieldTerminalPathValue{ListUsersRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListUsersRequest: %d", fp.selector))
	}
}

func (fp *ListUsersRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListUsersRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListUsersRequest_FieldPathArrayOfValues {
	fpaov := &ListUsersRequest_FieldTerminalPathArrayOfValues{ListUsersRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListUsersRequest_FieldPathSelectorPageSize:
		return &ListUsersRequest_FieldTerminalPathArrayOfValues{ListUsersRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case ListUsersRequest_FieldPathSelectorPageToken:
		return &ListUsersRequest_FieldTerminalPathArrayOfValues{ListUsersRequest_FieldTerminalPath: *fp, values: values.([]*user.PagerCursor)}
	case ListUsersRequest_FieldPathSelectorOrderBy:
		return &ListUsersRequest_FieldTerminalPathArrayOfValues{ListUsersRequest_FieldTerminalPath: *fp, values: values.([]*user.OrderBy)}
	case ListUsersRequest_FieldPathSelectorFilter:
		return &ListUsersRequest_FieldTerminalPathArrayOfValues{ListUsersRequest_FieldTerminalPath: *fp, values: values.([]*user.Filter)}
	case ListUsersRequest_FieldPathSelectorFieldMask:
		return &ListUsersRequest_FieldTerminalPathArrayOfValues{ListUsersRequest_FieldTerminalPath: *fp, values: values.([]*user.User_FieldMask)}
	case ListUsersRequest_FieldPathSelectorView:
		return &ListUsersRequest_FieldTerminalPathArrayOfValues{ListUsersRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListUsersRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListUsersRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListUsersRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListUsersRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ListUsersRequest: %d", fp.selector))
	}
}

func (fp *ListUsersRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ListUsersRequest_FieldPathValue allows storing values for ListUsersRequest fields according to their type
type ListUsersRequest_FieldPathValue interface {
	ListUsersRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListUsersRequest)
	CompareWith(*ListUsersRequest) (cmp int, comparable bool)
}

func ParseListUsersRequest_FieldPathValue(pathStr, valueStr string) (ListUsersRequest_FieldPathValue, error) {
	fp, err := ParseListUsersRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListUsersRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListUsersRequest_FieldPathValue), nil
}

func MustParseListUsersRequest_FieldPathValue(pathStr, valueStr string) ListUsersRequest_FieldPathValue {
	fpv, err := ParseListUsersRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListUsersRequest_FieldTerminalPathValue struct {
	ListUsersRequest_FieldTerminalPath
	value interface{}
}

var _ ListUsersRequest_FieldPathValue = (*ListUsersRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListUsersRequest' as interface{}
func (fpv *ListUsersRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListUsersRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *ListUsersRequest_FieldTerminalPathValue) AsPageTokenValue() (*user.PagerCursor, bool) {
	res, ok := fpv.value.(*user.PagerCursor)
	return res, ok
}
func (fpv *ListUsersRequest_FieldTerminalPathValue) AsOrderByValue() (*user.OrderBy, bool) {
	res, ok := fpv.value.(*user.OrderBy)
	return res, ok
}
func (fpv *ListUsersRequest_FieldTerminalPathValue) AsFilterValue() (*user.Filter, bool) {
	res, ok := fpv.value.(*user.Filter)
	return res, ok
}
func (fpv *ListUsersRequest_FieldTerminalPathValue) AsFieldMaskValue() (*user.User_FieldMask, bool) {
	res, ok := fpv.value.(*user.User_FieldMask)
	return res, ok
}
func (fpv *ListUsersRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object ListUsersRequest
func (fpv *ListUsersRequest_FieldTerminalPathValue) SetTo(target **ListUsersRequest) {
	if *target == nil {
		*target = new(ListUsersRequest)
	}
	switch fpv.selector {
	case ListUsersRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case ListUsersRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*user.PagerCursor)
	case ListUsersRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*user.OrderBy)
	case ListUsersRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*user.Filter)
	case ListUsersRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*user.User_FieldMask)
	case ListUsersRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for ListUsersRequest: %d", fpv.selector))
	}
}

func (fpv *ListUsersRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListUsersRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListUsersRequest_FieldTerminalPathValue' with the value under path in 'ListUsersRequest'.
func (fpv *ListUsersRequest_FieldTerminalPathValue) CompareWith(source *ListUsersRequest) (int, bool) {
	switch fpv.selector {
	case ListUsersRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListUsersRequest_FieldPathSelectorPageToken:
		return 0, false
	case ListUsersRequest_FieldPathSelectorOrderBy:
		return 0, false
	case ListUsersRequest_FieldPathSelectorFilter:
		return 0, false
	case ListUsersRequest_FieldPathSelectorFieldMask:
		return 0, false
	case ListUsersRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListUsersRequest: %d", fpv.selector))
	}
}

func (fpv *ListUsersRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListUsersRequest))
}

// ListUsersRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for ListUsersRequest according to their type
// Present only for array (repeated) types.
type ListUsersRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListUsersRequest_FieldPath
	ContainsValue(*ListUsersRequest) bool
}

// ParseListUsersRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListUsersRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ListUsersRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseListUsersRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListUsersRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListUsersRequest_FieldPathArrayItemValue), nil
}

func MustParseListUsersRequest_FieldPathArrayItemValue(pathStr, valueStr string) ListUsersRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseListUsersRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListUsersRequest_FieldTerminalPathArrayItemValue struct {
	ListUsersRequest_FieldTerminalPath
	value interface{}
}

var _ ListUsersRequest_FieldPathArrayItemValue = (*ListUsersRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListUsersRequest as interface{}
func (fpaiv *ListUsersRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ListUsersRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ListUsersRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListUsersRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListUsersRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListUsersRequest'
func (fpaiv *ListUsersRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ListUsersRequest) bool {
	slice := fpaiv.ListUsersRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ListUsersRequest_FieldPathArrayOfValues allows storing slice of values for ListUsersRequest fields according to their type
type ListUsersRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListUsersRequest_FieldPath
}

func ParseListUsersRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ListUsersRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseListUsersRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListUsersRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListUsersRequest_FieldPathArrayOfValues), nil
}

func MustParseListUsersRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ListUsersRequest_FieldPathArrayOfValues {
	fpaov, err := ParseListUsersRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListUsersRequest_FieldTerminalPathArrayOfValues struct {
	ListUsersRequest_FieldTerminalPath
	values interface{}
}

var _ ListUsersRequest_FieldPathArrayOfValues = (*ListUsersRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListUsersRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListUsersRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case ListUsersRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*user.PagerCursor) {
			values = append(values, v)
		}
	case ListUsersRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*user.OrderBy) {
			values = append(values, v)
		}
	case ListUsersRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*user.Filter) {
			values = append(values, v)
		}
	case ListUsersRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*user.User_FieldMask) {
			values = append(values, v)
		}
	case ListUsersRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListUsersRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *ListUsersRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*user.PagerCursor, bool) {
	res, ok := fpaov.values.([]*user.PagerCursor)
	return res, ok
}
func (fpaov *ListUsersRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*user.OrderBy, bool) {
	res, ok := fpaov.values.([]*user.OrderBy)
	return res, ok
}
func (fpaov *ListUsersRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*user.Filter, bool) {
	res, ok := fpaov.values.([]*user.Filter)
	return res, ok
}
func (fpaov *ListUsersRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*user.User_FieldMask, bool) {
	res, ok := fpaov.values.([]*user.User_FieldMask)
	return res, ok
}
func (fpaov *ListUsersRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListUsersResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListUsersResponse_FieldPathSelector
	Get(source *ListUsersResponse) []interface{}
	GetSingle(source *ListUsersResponse) (interface{}, bool)
	ClearValue(item *ListUsersResponse)

	// Those methods build corresponding ListUsersResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListUsersResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) ListUsersResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListUsersResponse_FieldPathArrayItemValue
}

type ListUsersResponse_FieldPathSelector int32

const (
	ListUsersResponse_FieldPathSelectorUsers         ListUsersResponse_FieldPathSelector = 0
	ListUsersResponse_FieldPathSelectorPrevPageToken ListUsersResponse_FieldPathSelector = 1
	ListUsersResponse_FieldPathSelectorNextPageToken ListUsersResponse_FieldPathSelector = 2
)

func (s ListUsersResponse_FieldPathSelector) String() string {
	switch s {
	case ListUsersResponse_FieldPathSelectorUsers:
		return "users"
	case ListUsersResponse_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case ListUsersResponse_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for ListUsersResponse: %d", s))
	}
}

func BuildListUsersResponse_FieldPath(fp gotenobject.RawFieldPath) (ListUsersResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListUsersResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "users":
			return &ListUsersResponse_FieldTerminalPath{selector: ListUsersResponse_FieldPathSelectorUsers}, nil
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &ListUsersResponse_FieldTerminalPath{selector: ListUsersResponse_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &ListUsersResponse_FieldTerminalPath{selector: ListUsersResponse_FieldPathSelectorNextPageToken}, nil
		}
	} else {
		switch fp[0] {
		case "users":
			if subpath, err := user.BuildUser_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ListUsersResponse_FieldSubPath{selector: ListUsersResponse_FieldPathSelectorUsers, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListUsersResponse", fp)
}

func ParseListUsersResponse_FieldPath(rawField string) (ListUsersResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListUsersResponse_FieldPath(fp)
}

func MustParseListUsersResponse_FieldPath(rawField string) ListUsersResponse_FieldPath {
	fp, err := ParseListUsersResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListUsersResponse_FieldTerminalPath struct {
	selector ListUsersResponse_FieldPathSelector
}

var _ ListUsersResponse_FieldPath = (*ListUsersResponse_FieldTerminalPath)(nil)

func (fp *ListUsersResponse_FieldTerminalPath) Selector() ListUsersResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListUsersResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListUsersResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListUsersResponse
func (fp *ListUsersResponse_FieldTerminalPath) Get(source *ListUsersResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListUsersResponse_FieldPathSelectorUsers:
			for _, value := range source.GetUsers() {
				values = append(values, value)
			}
		case ListUsersResponse_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case ListUsersResponse_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListUsersResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *ListUsersResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListUsersResponse))
}

// GetSingle returns value pointed by specific field of from source ListUsersResponse
func (fp *ListUsersResponse_FieldTerminalPath) GetSingle(source *ListUsersResponse) (interface{}, bool) {
	switch fp.selector {
	case ListUsersResponse_FieldPathSelectorUsers:
		res := source.GetUsers()
		return res, res != nil
	case ListUsersResponse_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case ListUsersResponse_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListUsersResponse: %d", fp.selector))
	}
}

func (fp *ListUsersResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListUsersResponse))
}

// GetDefault returns a default value of the field type
func (fp *ListUsersResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListUsersResponse_FieldPathSelectorUsers:
		return ([]*user.User)(nil)
	case ListUsersResponse_FieldPathSelectorPrevPageToken:
		return (*user.PagerCursor)(nil)
	case ListUsersResponse_FieldPathSelectorNextPageToken:
		return (*user.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ListUsersResponse: %d", fp.selector))
	}
}

func (fp *ListUsersResponse_FieldTerminalPath) ClearValue(item *ListUsersResponse) {
	if item != nil {
		switch fp.selector {
		case ListUsersResponse_FieldPathSelectorUsers:
			item.Users = nil
		case ListUsersResponse_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case ListUsersResponse_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for ListUsersResponse: %d", fp.selector))
		}
	}
}

func (fp *ListUsersResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListUsersResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListUsersResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListUsersResponse_FieldPathSelectorPrevPageToken ||
		fp.selector == ListUsersResponse_FieldPathSelectorNextPageToken
}

func (fp *ListUsersResponse_FieldTerminalPath) WithIValue(value interface{}) ListUsersResponse_FieldPathValue {
	switch fp.selector {
	case ListUsersResponse_FieldPathSelectorUsers:
		return &ListUsersResponse_FieldTerminalPathValue{ListUsersResponse_FieldTerminalPath: *fp, value: value.([]*user.User)}
	case ListUsersResponse_FieldPathSelectorPrevPageToken:
		return &ListUsersResponse_FieldTerminalPathValue{ListUsersResponse_FieldTerminalPath: *fp, value: value.(*user.PagerCursor)}
	case ListUsersResponse_FieldPathSelectorNextPageToken:
		return &ListUsersResponse_FieldTerminalPathValue{ListUsersResponse_FieldTerminalPath: *fp, value: value.(*user.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListUsersResponse: %d", fp.selector))
	}
}

func (fp *ListUsersResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListUsersResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListUsersResponse_FieldPathArrayOfValues {
	fpaov := &ListUsersResponse_FieldTerminalPathArrayOfValues{ListUsersResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListUsersResponse_FieldPathSelectorUsers:
		return &ListUsersResponse_FieldTerminalPathArrayOfValues{ListUsersResponse_FieldTerminalPath: *fp, values: values.([][]*user.User)}
	case ListUsersResponse_FieldPathSelectorPrevPageToken:
		return &ListUsersResponse_FieldTerminalPathArrayOfValues{ListUsersResponse_FieldTerminalPath: *fp, values: values.([]*user.PagerCursor)}
	case ListUsersResponse_FieldPathSelectorNextPageToken:
		return &ListUsersResponse_FieldTerminalPathArrayOfValues{ListUsersResponse_FieldTerminalPath: *fp, values: values.([]*user.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListUsersResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListUsersResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListUsersResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListUsersResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case ListUsersResponse_FieldPathSelectorUsers:
		return &ListUsersResponse_FieldTerminalPathArrayItemValue{ListUsersResponse_FieldTerminalPath: *fp, value: value.(*user.User)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListUsersResponse: %d", fp.selector))
	}
}

func (fp *ListUsersResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ListUsersResponse_FieldSubPath struct {
	selector ListUsersResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ListUsersResponse_FieldPath = (*ListUsersResponse_FieldSubPath)(nil)

func (fps *ListUsersResponse_FieldSubPath) Selector() ListUsersResponse_FieldPathSelector {
	return fps.selector
}
func (fps *ListUsersResponse_FieldSubPath) AsUsersSubPath() (user.User_FieldPath, bool) {
	res, ok := fps.subPath.(user.User_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ListUsersResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ListUsersResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ListUsersResponse
func (fps *ListUsersResponse_FieldSubPath) Get(source *ListUsersResponse) (values []interface{}) {
	if asUserFieldPath, ok := fps.AsUsersSubPath(); ok {
		for _, item := range source.GetUsers() {
			values = append(values, asUserFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for ListUsersResponse: %d", fps.selector))
	}
	return
}

func (fps *ListUsersResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ListUsersResponse))
}

// GetSingle returns value of selected field from source ListUsersResponse
func (fps *ListUsersResponse_FieldSubPath) GetSingle(source *ListUsersResponse) (interface{}, bool) {
	switch fps.selector {
	case ListUsersResponse_FieldPathSelectorUsers:
		if len(source.GetUsers()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetUsers()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for ListUsersResponse: %d", fps.selector))
	}
}

func (fps *ListUsersResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ListUsersResponse))
}

// GetDefault returns a default value of the field type
func (fps *ListUsersResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ListUsersResponse_FieldSubPath) ClearValue(item *ListUsersResponse) {
	if item != nil {
		switch fps.selector {
		case ListUsersResponse_FieldPathSelectorUsers:
			for _, subItem := range item.Users {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListUsersResponse: %d", fps.selector))
		}
	}
}

func (fps *ListUsersResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ListUsersResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *ListUsersResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ListUsersResponse_FieldSubPath) WithIValue(value interface{}) ListUsersResponse_FieldPathValue {
	return &ListUsersResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ListUsersResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ListUsersResponse_FieldSubPath) WithIArrayOfValues(values interface{}) ListUsersResponse_FieldPathArrayOfValues {
	return &ListUsersResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ListUsersResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ListUsersResponse_FieldSubPath) WithIArrayItemValue(value interface{}) ListUsersResponse_FieldPathArrayItemValue {
	return &ListUsersResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ListUsersResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ListUsersResponse_FieldPathValue allows storing values for ListUsersResponse fields according to their type
type ListUsersResponse_FieldPathValue interface {
	ListUsersResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListUsersResponse)
	CompareWith(*ListUsersResponse) (cmp int, comparable bool)
}

func ParseListUsersResponse_FieldPathValue(pathStr, valueStr string) (ListUsersResponse_FieldPathValue, error) {
	fp, err := ParseListUsersResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListUsersResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListUsersResponse_FieldPathValue), nil
}

func MustParseListUsersResponse_FieldPathValue(pathStr, valueStr string) ListUsersResponse_FieldPathValue {
	fpv, err := ParseListUsersResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListUsersResponse_FieldTerminalPathValue struct {
	ListUsersResponse_FieldTerminalPath
	value interface{}
}

var _ ListUsersResponse_FieldPathValue = (*ListUsersResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListUsersResponse' as interface{}
func (fpv *ListUsersResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListUsersResponse_FieldTerminalPathValue) AsUsersValue() ([]*user.User, bool) {
	res, ok := fpv.value.([]*user.User)
	return res, ok
}
func (fpv *ListUsersResponse_FieldTerminalPathValue) AsPrevPageTokenValue() (*user.PagerCursor, bool) {
	res, ok := fpv.value.(*user.PagerCursor)
	return res, ok
}
func (fpv *ListUsersResponse_FieldTerminalPathValue) AsNextPageTokenValue() (*user.PagerCursor, bool) {
	res, ok := fpv.value.(*user.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object ListUsersResponse
func (fpv *ListUsersResponse_FieldTerminalPathValue) SetTo(target **ListUsersResponse) {
	if *target == nil {
		*target = new(ListUsersResponse)
	}
	switch fpv.selector {
	case ListUsersResponse_FieldPathSelectorUsers:
		(*target).Users = fpv.value.([]*user.User)
	case ListUsersResponse_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*user.PagerCursor)
	case ListUsersResponse_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*user.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for ListUsersResponse: %d", fpv.selector))
	}
}

func (fpv *ListUsersResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListUsersResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListUsersResponse_FieldTerminalPathValue' with the value under path in 'ListUsersResponse'.
func (fpv *ListUsersResponse_FieldTerminalPathValue) CompareWith(source *ListUsersResponse) (int, bool) {
	switch fpv.selector {
	case ListUsersResponse_FieldPathSelectorUsers:
		return 0, false
	case ListUsersResponse_FieldPathSelectorPrevPageToken:
		return 0, false
	case ListUsersResponse_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ListUsersResponse: %d", fpv.selector))
	}
}

func (fpv *ListUsersResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListUsersResponse))
}

type ListUsersResponse_FieldSubPathValue struct {
	ListUsersResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ListUsersResponse_FieldPathValue = (*ListUsersResponse_FieldSubPathValue)(nil)

func (fpvs *ListUsersResponse_FieldSubPathValue) AsUsersPathValue() (user.User_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(user.User_FieldPathValue)
	return res, ok
}

func (fpvs *ListUsersResponse_FieldSubPathValue) SetTo(target **ListUsersResponse) {
	if *target == nil {
		*target = new(ListUsersResponse)
	}
	switch fpvs.Selector() {
	case ListUsersResponse_FieldPathSelectorUsers:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for ListUsersResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListUsersResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListUsersResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ListUsersResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ListUsersResponse_FieldSubPathValue) CompareWith(source *ListUsersResponse) (int, bool) {
	switch fpvs.Selector() {
	case ListUsersResponse_FieldPathSelectorUsers:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for ListUsersResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListUsersResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ListUsersResponse))
}

// ListUsersResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for ListUsersResponse according to their type
// Present only for array (repeated) types.
type ListUsersResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListUsersResponse_FieldPath
	ContainsValue(*ListUsersResponse) bool
}

// ParseListUsersResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListUsersResponse_FieldPathArrayItemValue(pathStr, valueStr string) (ListUsersResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseListUsersResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListUsersResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListUsersResponse_FieldPathArrayItemValue), nil
}

func MustParseListUsersResponse_FieldPathArrayItemValue(pathStr, valueStr string) ListUsersResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseListUsersResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListUsersResponse_FieldTerminalPathArrayItemValue struct {
	ListUsersResponse_FieldTerminalPath
	value interface{}
}

var _ ListUsersResponse_FieldPathArrayItemValue = (*ListUsersResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListUsersResponse as interface{}
func (fpaiv *ListUsersResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *ListUsersResponse_FieldTerminalPathArrayItemValue) AsUsersItemValue() (*user.User, bool) {
	res, ok := fpaiv.value.(*user.User)
	return res, ok
}

func (fpaiv *ListUsersResponse_FieldTerminalPathArrayItemValue) GetSingle(source *ListUsersResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListUsersResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListUsersResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListUsersResponse'
func (fpaiv *ListUsersResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *ListUsersResponse) bool {
	slice := fpaiv.ListUsersResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ListUsersResponse_FieldSubPathArrayItemValue struct {
	ListUsersResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ListUsersResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ListUsersResponse_FieldSubPathArrayItemValue) AsUsersPathItemValue() (user.User_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(user.User_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListUsersResponse'
func (fpaivs *ListUsersResponse_FieldSubPathArrayItemValue) ContainsValue(source *ListUsersResponse) bool {
	switch fpaivs.Selector() {
	case ListUsersResponse_FieldPathSelectorUsers:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for ListUsersResponse: %d", fpaivs.Selector()))
	}
}

// ListUsersResponse_FieldPathArrayOfValues allows storing slice of values for ListUsersResponse fields according to their type
type ListUsersResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListUsersResponse_FieldPath
}

func ParseListUsersResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (ListUsersResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseListUsersResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListUsersResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListUsersResponse_FieldPathArrayOfValues), nil
}

func MustParseListUsersResponse_FieldPathArrayOfValues(pathStr, valuesStr string) ListUsersResponse_FieldPathArrayOfValues {
	fpaov, err := ParseListUsersResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListUsersResponse_FieldTerminalPathArrayOfValues struct {
	ListUsersResponse_FieldTerminalPath
	values interface{}
}

var _ ListUsersResponse_FieldPathArrayOfValues = (*ListUsersResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListUsersResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListUsersResponse_FieldPathSelectorUsers:
		for _, v := range fpaov.values.([][]*user.User) {
			values = append(values, v)
		}
	case ListUsersResponse_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*user.PagerCursor) {
			values = append(values, v)
		}
	case ListUsersResponse_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*user.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListUsersResponse_FieldTerminalPathArrayOfValues) AsUsersArrayOfValues() ([][]*user.User, bool) {
	res, ok := fpaov.values.([][]*user.User)
	return res, ok
}
func (fpaov *ListUsersResponse_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*user.PagerCursor, bool) {
	res, ok := fpaov.values.([]*user.PagerCursor)
	return res, ok
}
func (fpaov *ListUsersResponse_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*user.PagerCursor, bool) {
	res, ok := fpaov.values.([]*user.PagerCursor)
	return res, ok
}

type ListUsersResponse_FieldSubPathArrayOfValues struct {
	ListUsersResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ListUsersResponse_FieldPathArrayOfValues = (*ListUsersResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ListUsersResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ListUsersResponse_FieldSubPathArrayOfValues) AsUsersPathArrayOfValues() (user.User_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(user.User_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchUserRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchUserRequest_FieldPathSelector
	Get(source *WatchUserRequest) []interface{}
	GetSingle(source *WatchUserRequest) (interface{}, bool)
	ClearValue(item *WatchUserRequest)

	// Those methods build corresponding WatchUserRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchUserRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchUserRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchUserRequest_FieldPathArrayItemValue
}

type WatchUserRequest_FieldPathSelector int32

const (
	WatchUserRequest_FieldPathSelectorName      WatchUserRequest_FieldPathSelector = 0
	WatchUserRequest_FieldPathSelectorFieldMask WatchUserRequest_FieldPathSelector = 1
	WatchUserRequest_FieldPathSelectorView      WatchUserRequest_FieldPathSelector = 2
)

func (s WatchUserRequest_FieldPathSelector) String() string {
	switch s {
	case WatchUserRequest_FieldPathSelectorName:
		return "name"
	case WatchUserRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchUserRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchUserRequest: %d", s))
	}
}

func BuildWatchUserRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchUserRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchUserRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &WatchUserRequest_FieldTerminalPath{selector: WatchUserRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchUserRequest_FieldTerminalPath{selector: WatchUserRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchUserRequest_FieldTerminalPath{selector: WatchUserRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchUserRequest", fp)
}

func ParseWatchUserRequest_FieldPath(rawField string) (WatchUserRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchUserRequest_FieldPath(fp)
}

func MustParseWatchUserRequest_FieldPath(rawField string) WatchUserRequest_FieldPath {
	fp, err := ParseWatchUserRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchUserRequest_FieldTerminalPath struct {
	selector WatchUserRequest_FieldPathSelector
}

var _ WatchUserRequest_FieldPath = (*WatchUserRequest_FieldTerminalPath)(nil)

func (fp *WatchUserRequest_FieldTerminalPath) Selector() WatchUserRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchUserRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchUserRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchUserRequest
func (fp *WatchUserRequest_FieldTerminalPath) Get(source *WatchUserRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchUserRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case WatchUserRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchUserRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchUserRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchUserRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchUserRequest))
}

// GetSingle returns value pointed by specific field of from source WatchUserRequest
func (fp *WatchUserRequest_FieldTerminalPath) GetSingle(source *WatchUserRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchUserRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case WatchUserRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchUserRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchUserRequest: %d", fp.selector))
	}
}

func (fp *WatchUserRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchUserRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchUserRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchUserRequest_FieldPathSelectorName:
		return (*user.Reference)(nil)
	case WatchUserRequest_FieldPathSelectorFieldMask:
		return (*user.User_FieldMask)(nil)
	case WatchUserRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for WatchUserRequest: %d", fp.selector))
	}
}

func (fp *WatchUserRequest_FieldTerminalPath) ClearValue(item *WatchUserRequest) {
	if item != nil {
		switch fp.selector {
		case WatchUserRequest_FieldPathSelectorName:
			item.Name = nil
		case WatchUserRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchUserRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for WatchUserRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchUserRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchUserRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchUserRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchUserRequest_FieldPathSelectorName ||
		fp.selector == WatchUserRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchUserRequest_FieldPathSelectorView
}

func (fp *WatchUserRequest_FieldTerminalPath) WithIValue(value interface{}) WatchUserRequest_FieldPathValue {
	switch fp.selector {
	case WatchUserRequest_FieldPathSelectorName:
		return &WatchUserRequest_FieldTerminalPathValue{WatchUserRequest_FieldTerminalPath: *fp, value: value.(*user.Reference)}
	case WatchUserRequest_FieldPathSelectorFieldMask:
		return &WatchUserRequest_FieldTerminalPathValue{WatchUserRequest_FieldTerminalPath: *fp, value: value.(*user.User_FieldMask)}
	case WatchUserRequest_FieldPathSelectorView:
		return &WatchUserRequest_FieldTerminalPathValue{WatchUserRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchUserRequest: %d", fp.selector))
	}
}

func (fp *WatchUserRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchUserRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchUserRequest_FieldPathArrayOfValues {
	fpaov := &WatchUserRequest_FieldTerminalPathArrayOfValues{WatchUserRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchUserRequest_FieldPathSelectorName:
		return &WatchUserRequest_FieldTerminalPathArrayOfValues{WatchUserRequest_FieldTerminalPath: *fp, values: values.([]*user.Reference)}
	case WatchUserRequest_FieldPathSelectorFieldMask:
		return &WatchUserRequest_FieldTerminalPathArrayOfValues{WatchUserRequest_FieldTerminalPath: *fp, values: values.([]*user.User_FieldMask)}
	case WatchUserRequest_FieldPathSelectorView:
		return &WatchUserRequest_FieldTerminalPathArrayOfValues{WatchUserRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchUserRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchUserRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchUserRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchUserRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchUserRequest: %d", fp.selector))
	}
}

func (fp *WatchUserRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchUserRequest_FieldPathValue allows storing values for WatchUserRequest fields according to their type
type WatchUserRequest_FieldPathValue interface {
	WatchUserRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchUserRequest)
	CompareWith(*WatchUserRequest) (cmp int, comparable bool)
}

func ParseWatchUserRequest_FieldPathValue(pathStr, valueStr string) (WatchUserRequest_FieldPathValue, error) {
	fp, err := ParseWatchUserRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchUserRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchUserRequest_FieldPathValue), nil
}

func MustParseWatchUserRequest_FieldPathValue(pathStr, valueStr string) WatchUserRequest_FieldPathValue {
	fpv, err := ParseWatchUserRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchUserRequest_FieldTerminalPathValue struct {
	WatchUserRequest_FieldTerminalPath
	value interface{}
}

var _ WatchUserRequest_FieldPathValue = (*WatchUserRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchUserRequest' as interface{}
func (fpv *WatchUserRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchUserRequest_FieldTerminalPathValue) AsNameValue() (*user.Reference, bool) {
	res, ok := fpv.value.(*user.Reference)
	return res, ok
}
func (fpv *WatchUserRequest_FieldTerminalPathValue) AsFieldMaskValue() (*user.User_FieldMask, bool) {
	res, ok := fpv.value.(*user.User_FieldMask)
	return res, ok
}
func (fpv *WatchUserRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object WatchUserRequest
func (fpv *WatchUserRequest_FieldTerminalPathValue) SetTo(target **WatchUserRequest) {
	if *target == nil {
		*target = new(WatchUserRequest)
	}
	switch fpv.selector {
	case WatchUserRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*user.Reference)
	case WatchUserRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*user.User_FieldMask)
	case WatchUserRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchUserRequest: %d", fpv.selector))
	}
}

func (fpv *WatchUserRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchUserRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchUserRequest_FieldTerminalPathValue' with the value under path in 'WatchUserRequest'.
func (fpv *WatchUserRequest_FieldTerminalPathValue) CompareWith(source *WatchUserRequest) (int, bool) {
	switch fpv.selector {
	case WatchUserRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*user.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchUserRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchUserRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchUserRequest: %d", fpv.selector))
	}
}

func (fpv *WatchUserRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchUserRequest))
}

// WatchUserRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchUserRequest according to their type
// Present only for array (repeated) types.
type WatchUserRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchUserRequest_FieldPath
	ContainsValue(*WatchUserRequest) bool
}

// ParseWatchUserRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchUserRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchUserRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchUserRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchUserRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchUserRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchUserRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchUserRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchUserRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchUserRequest_FieldTerminalPathArrayItemValue struct {
	WatchUserRequest_FieldTerminalPath
	value interface{}
}

var _ WatchUserRequest_FieldPathArrayItemValue = (*WatchUserRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchUserRequest as interface{}
func (fpaiv *WatchUserRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchUserRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchUserRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchUserRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchUserRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchUserRequest'
func (fpaiv *WatchUserRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchUserRequest) bool {
	slice := fpaiv.WatchUserRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchUserRequest_FieldPathArrayOfValues allows storing slice of values for WatchUserRequest fields according to their type
type WatchUserRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchUserRequest_FieldPath
}

func ParseWatchUserRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchUserRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchUserRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchUserRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchUserRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchUserRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchUserRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchUserRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchUserRequest_FieldTerminalPathArrayOfValues struct {
	WatchUserRequest_FieldTerminalPath
	values interface{}
}

var _ WatchUserRequest_FieldPathArrayOfValues = (*WatchUserRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchUserRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchUserRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*user.Reference) {
			values = append(values, v)
		}
	case WatchUserRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*user.User_FieldMask) {
			values = append(values, v)
		}
	case WatchUserRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchUserRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*user.Reference, bool) {
	res, ok := fpaov.values.([]*user.Reference)
	return res, ok
}
func (fpaov *WatchUserRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*user.User_FieldMask, bool) {
	res, ok := fpaov.values.([]*user.User_FieldMask)
	return res, ok
}
func (fpaov *WatchUserRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchUserResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchUserResponse_FieldPathSelector
	Get(source *WatchUserResponse) []interface{}
	GetSingle(source *WatchUserResponse) (interface{}, bool)
	ClearValue(item *WatchUserResponse)

	// Those methods build corresponding WatchUserResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchUserResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchUserResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchUserResponse_FieldPathArrayItemValue
}

type WatchUserResponse_FieldPathSelector int32

const (
	WatchUserResponse_FieldPathSelectorChange WatchUserResponse_FieldPathSelector = 0
)

func (s WatchUserResponse_FieldPathSelector) String() string {
	switch s {
	case WatchUserResponse_FieldPathSelectorChange:
		return "change"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchUserResponse: %d", s))
	}
}

func BuildWatchUserResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchUserResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchUserResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "change":
			return &WatchUserResponse_FieldTerminalPath{selector: WatchUserResponse_FieldPathSelectorChange}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchUserResponse", fp)
}

func ParseWatchUserResponse_FieldPath(rawField string) (WatchUserResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchUserResponse_FieldPath(fp)
}

func MustParseWatchUserResponse_FieldPath(rawField string) WatchUserResponse_FieldPath {
	fp, err := ParseWatchUserResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchUserResponse_FieldTerminalPath struct {
	selector WatchUserResponse_FieldPathSelector
}

var _ WatchUserResponse_FieldPath = (*WatchUserResponse_FieldTerminalPath)(nil)

func (fp *WatchUserResponse_FieldTerminalPath) Selector() WatchUserResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchUserResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchUserResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchUserResponse
func (fp *WatchUserResponse_FieldTerminalPath) Get(source *WatchUserResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchUserResponse_FieldPathSelectorChange:
			if source.Change != nil {
				values = append(values, source.Change)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchUserResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchUserResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchUserResponse))
}

// GetSingle returns value pointed by specific field of from source WatchUserResponse
func (fp *WatchUserResponse_FieldTerminalPath) GetSingle(source *WatchUserResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchUserResponse_FieldPathSelectorChange:
		res := source.GetChange()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchUserResponse: %d", fp.selector))
	}
}

func (fp *WatchUserResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchUserResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchUserResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchUserResponse_FieldPathSelectorChange:
		return (*user.UserChange)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchUserResponse: %d", fp.selector))
	}
}

func (fp *WatchUserResponse_FieldTerminalPath) ClearValue(item *WatchUserResponse) {
	if item != nil {
		switch fp.selector {
		case WatchUserResponse_FieldPathSelectorChange:
			item.Change = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchUserResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchUserResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchUserResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchUserResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchUserResponse_FieldPathSelectorChange
}

func (fp *WatchUserResponse_FieldTerminalPath) WithIValue(value interface{}) WatchUserResponse_FieldPathValue {
	switch fp.selector {
	case WatchUserResponse_FieldPathSelectorChange:
		return &WatchUserResponse_FieldTerminalPathValue{WatchUserResponse_FieldTerminalPath: *fp, value: value.(*user.UserChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchUserResponse: %d", fp.selector))
	}
}

func (fp *WatchUserResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchUserResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchUserResponse_FieldPathArrayOfValues {
	fpaov := &WatchUserResponse_FieldTerminalPathArrayOfValues{WatchUserResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchUserResponse_FieldPathSelectorChange:
		return &WatchUserResponse_FieldTerminalPathArrayOfValues{WatchUserResponse_FieldTerminalPath: *fp, values: values.([]*user.UserChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchUserResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchUserResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchUserResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchUserResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchUserResponse: %d", fp.selector))
	}
}

func (fp *WatchUserResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchUserResponse_FieldPathValue allows storing values for WatchUserResponse fields according to their type
type WatchUserResponse_FieldPathValue interface {
	WatchUserResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchUserResponse)
	CompareWith(*WatchUserResponse) (cmp int, comparable bool)
}

func ParseWatchUserResponse_FieldPathValue(pathStr, valueStr string) (WatchUserResponse_FieldPathValue, error) {
	fp, err := ParseWatchUserResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchUserResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchUserResponse_FieldPathValue), nil
}

func MustParseWatchUserResponse_FieldPathValue(pathStr, valueStr string) WatchUserResponse_FieldPathValue {
	fpv, err := ParseWatchUserResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchUserResponse_FieldTerminalPathValue struct {
	WatchUserResponse_FieldTerminalPath
	value interface{}
}

var _ WatchUserResponse_FieldPathValue = (*WatchUserResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchUserResponse' as interface{}
func (fpv *WatchUserResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchUserResponse_FieldTerminalPathValue) AsChangeValue() (*user.UserChange, bool) {
	res, ok := fpv.value.(*user.UserChange)
	return res, ok
}

// SetTo stores value for selected field for object WatchUserResponse
func (fpv *WatchUserResponse_FieldTerminalPathValue) SetTo(target **WatchUserResponse) {
	if *target == nil {
		*target = new(WatchUserResponse)
	}
	switch fpv.selector {
	case WatchUserResponse_FieldPathSelectorChange:
		(*target).Change = fpv.value.(*user.UserChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchUserResponse: %d", fpv.selector))
	}
}

func (fpv *WatchUserResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchUserResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchUserResponse_FieldTerminalPathValue' with the value under path in 'WatchUserResponse'.
func (fpv *WatchUserResponse_FieldTerminalPathValue) CompareWith(source *WatchUserResponse) (int, bool) {
	switch fpv.selector {
	case WatchUserResponse_FieldPathSelectorChange:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchUserResponse: %d", fpv.selector))
	}
}

func (fpv *WatchUserResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchUserResponse))
}

// WatchUserResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchUserResponse according to their type
// Present only for array (repeated) types.
type WatchUserResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchUserResponse_FieldPath
	ContainsValue(*WatchUserResponse) bool
}

// ParseWatchUserResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchUserResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchUserResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchUserResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchUserResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchUserResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchUserResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchUserResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchUserResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchUserResponse_FieldTerminalPathArrayItemValue struct {
	WatchUserResponse_FieldTerminalPath
	value interface{}
}

var _ WatchUserResponse_FieldPathArrayItemValue = (*WatchUserResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchUserResponse as interface{}
func (fpaiv *WatchUserResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchUserResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchUserResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchUserResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchUserResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchUserResponse'
func (fpaiv *WatchUserResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchUserResponse) bool {
	slice := fpaiv.WatchUserResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchUserResponse_FieldPathArrayOfValues allows storing slice of values for WatchUserResponse fields according to their type
type WatchUserResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchUserResponse_FieldPath
}

func ParseWatchUserResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchUserResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchUserResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchUserResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchUserResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchUserResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchUserResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchUserResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchUserResponse_FieldTerminalPathArrayOfValues struct {
	WatchUserResponse_FieldTerminalPath
	values interface{}
}

var _ WatchUserResponse_FieldPathArrayOfValues = (*WatchUserResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchUserResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchUserResponse_FieldPathSelectorChange:
		for _, v := range fpaov.values.([]*user.UserChange) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchUserResponse_FieldTerminalPathArrayOfValues) AsChangeArrayOfValues() ([]*user.UserChange, bool) {
	res, ok := fpaov.values.([]*user.UserChange)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchUsersRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchUsersRequest_FieldPathSelector
	Get(source *WatchUsersRequest) []interface{}
	GetSingle(source *WatchUsersRequest) (interface{}, bool)
	ClearValue(item *WatchUsersRequest)

	// Those methods build corresponding WatchUsersRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchUsersRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchUsersRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchUsersRequest_FieldPathArrayItemValue
}

type WatchUsersRequest_FieldPathSelector int32

const (
	WatchUsersRequest_FieldPathSelectorType         WatchUsersRequest_FieldPathSelector = 0
	WatchUsersRequest_FieldPathSelectorPageSize     WatchUsersRequest_FieldPathSelector = 1
	WatchUsersRequest_FieldPathSelectorPageToken    WatchUsersRequest_FieldPathSelector = 2
	WatchUsersRequest_FieldPathSelectorOrderBy      WatchUsersRequest_FieldPathSelector = 3
	WatchUsersRequest_FieldPathSelectorResumeToken  WatchUsersRequest_FieldPathSelector = 4
	WatchUsersRequest_FieldPathSelectorFilter       WatchUsersRequest_FieldPathSelector = 5
	WatchUsersRequest_FieldPathSelectorFieldMask    WatchUsersRequest_FieldPathSelector = 6
	WatchUsersRequest_FieldPathSelectorView         WatchUsersRequest_FieldPathSelector = 7
	WatchUsersRequest_FieldPathSelectorMaxChunkSize WatchUsersRequest_FieldPathSelector = 8
)

func (s WatchUsersRequest_FieldPathSelector) String() string {
	switch s {
	case WatchUsersRequest_FieldPathSelectorType:
		return "type"
	case WatchUsersRequest_FieldPathSelectorPageSize:
		return "page_size"
	case WatchUsersRequest_FieldPathSelectorPageToken:
		return "page_token"
	case WatchUsersRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case WatchUsersRequest_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchUsersRequest_FieldPathSelectorFilter:
		return "filter"
	case WatchUsersRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchUsersRequest_FieldPathSelectorView:
		return "view"
	case WatchUsersRequest_FieldPathSelectorMaxChunkSize:
		return "max_chunk_size"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchUsersRequest: %d", s))
	}
}

func BuildWatchUsersRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchUsersRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchUsersRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "type":
			return &WatchUsersRequest_FieldTerminalPath{selector: WatchUsersRequest_FieldPathSelectorType}, nil
		case "page_size", "pageSize", "page-size":
			return &WatchUsersRequest_FieldTerminalPath{selector: WatchUsersRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &WatchUsersRequest_FieldTerminalPath{selector: WatchUsersRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &WatchUsersRequest_FieldTerminalPath{selector: WatchUsersRequest_FieldPathSelectorOrderBy}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchUsersRequest_FieldTerminalPath{selector: WatchUsersRequest_FieldPathSelectorResumeToken}, nil
		case "filter":
			return &WatchUsersRequest_FieldTerminalPath{selector: WatchUsersRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchUsersRequest_FieldTerminalPath{selector: WatchUsersRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchUsersRequest_FieldTerminalPath{selector: WatchUsersRequest_FieldPathSelectorView}, nil
		case "max_chunk_size", "maxChunkSize", "max-chunk-size":
			return &WatchUsersRequest_FieldTerminalPath{selector: WatchUsersRequest_FieldPathSelectorMaxChunkSize}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchUsersRequest", fp)
}

func ParseWatchUsersRequest_FieldPath(rawField string) (WatchUsersRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchUsersRequest_FieldPath(fp)
}

func MustParseWatchUsersRequest_FieldPath(rawField string) WatchUsersRequest_FieldPath {
	fp, err := ParseWatchUsersRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchUsersRequest_FieldTerminalPath struct {
	selector WatchUsersRequest_FieldPathSelector
}

var _ WatchUsersRequest_FieldPath = (*WatchUsersRequest_FieldTerminalPath)(nil)

func (fp *WatchUsersRequest_FieldTerminalPath) Selector() WatchUsersRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchUsersRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchUsersRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchUsersRequest
func (fp *WatchUsersRequest_FieldTerminalPath) Get(source *WatchUsersRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchUsersRequest_FieldPathSelectorType:
			values = append(values, source.Type)
		case WatchUsersRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case WatchUsersRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case WatchUsersRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case WatchUsersRequest_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchUsersRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case WatchUsersRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchUsersRequest_FieldPathSelectorView:
			values = append(values, source.View)
		case WatchUsersRequest_FieldPathSelectorMaxChunkSize:
			values = append(values, source.MaxChunkSize)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchUsersRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchUsersRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchUsersRequest))
}

// GetSingle returns value pointed by specific field of from source WatchUsersRequest
func (fp *WatchUsersRequest_FieldTerminalPath) GetSingle(source *WatchUsersRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchUsersRequest_FieldPathSelectorType:
		return source.GetType(), source != nil
	case WatchUsersRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case WatchUsersRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case WatchUsersRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case WatchUsersRequest_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchUsersRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case WatchUsersRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchUsersRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	case WatchUsersRequest_FieldPathSelectorMaxChunkSize:
		return source.GetMaxChunkSize(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchUsersRequest: %d", fp.selector))
	}
}

func (fp *WatchUsersRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchUsersRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchUsersRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchUsersRequest_FieldPathSelectorType:
		return watch_type.WatchType_STATEFUL
	case WatchUsersRequest_FieldPathSelectorPageSize:
		return int32(0)
	case WatchUsersRequest_FieldPathSelectorPageToken:
		return (*user.PagerCursor)(nil)
	case WatchUsersRequest_FieldPathSelectorOrderBy:
		return (*user.OrderBy)(nil)
	case WatchUsersRequest_FieldPathSelectorResumeToken:
		return ""
	case WatchUsersRequest_FieldPathSelectorFilter:
		return (*user.Filter)(nil)
	case WatchUsersRequest_FieldPathSelectorFieldMask:
		return (*user.User_FieldMask)(nil)
	case WatchUsersRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	case WatchUsersRequest_FieldPathSelectorMaxChunkSize:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchUsersRequest: %d", fp.selector))
	}
}

func (fp *WatchUsersRequest_FieldTerminalPath) ClearValue(item *WatchUsersRequest) {
	if item != nil {
		switch fp.selector {
		case WatchUsersRequest_FieldPathSelectorType:
			item.Type = watch_type.WatchType_STATEFUL
		case WatchUsersRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case WatchUsersRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case WatchUsersRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case WatchUsersRequest_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchUsersRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case WatchUsersRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchUsersRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		case WatchUsersRequest_FieldPathSelectorMaxChunkSize:
			item.MaxChunkSize = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchUsersRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchUsersRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchUsersRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchUsersRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchUsersRequest_FieldPathSelectorType ||
		fp.selector == WatchUsersRequest_FieldPathSelectorPageSize ||
		fp.selector == WatchUsersRequest_FieldPathSelectorPageToken ||
		fp.selector == WatchUsersRequest_FieldPathSelectorOrderBy ||
		fp.selector == WatchUsersRequest_FieldPathSelectorResumeToken ||
		fp.selector == WatchUsersRequest_FieldPathSelectorFilter ||
		fp.selector == WatchUsersRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchUsersRequest_FieldPathSelectorView ||
		fp.selector == WatchUsersRequest_FieldPathSelectorMaxChunkSize
}

func (fp *WatchUsersRequest_FieldTerminalPath) WithIValue(value interface{}) WatchUsersRequest_FieldPathValue {
	switch fp.selector {
	case WatchUsersRequest_FieldPathSelectorType:
		return &WatchUsersRequest_FieldTerminalPathValue{WatchUsersRequest_FieldTerminalPath: *fp, value: value.(watch_type.WatchType)}
	case WatchUsersRequest_FieldPathSelectorPageSize:
		return &WatchUsersRequest_FieldTerminalPathValue{WatchUsersRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case WatchUsersRequest_FieldPathSelectorPageToken:
		return &WatchUsersRequest_FieldTerminalPathValue{WatchUsersRequest_FieldTerminalPath: *fp, value: value.(*user.PagerCursor)}
	case WatchUsersRequest_FieldPathSelectorOrderBy:
		return &WatchUsersRequest_FieldTerminalPathValue{WatchUsersRequest_FieldTerminalPath: *fp, value: value.(*user.OrderBy)}
	case WatchUsersRequest_FieldPathSelectorResumeToken:
		return &WatchUsersRequest_FieldTerminalPathValue{WatchUsersRequest_FieldTerminalPath: *fp, value: value.(string)}
	case WatchUsersRequest_FieldPathSelectorFilter:
		return &WatchUsersRequest_FieldTerminalPathValue{WatchUsersRequest_FieldTerminalPath: *fp, value: value.(*user.Filter)}
	case WatchUsersRequest_FieldPathSelectorFieldMask:
		return &WatchUsersRequest_FieldTerminalPathValue{WatchUsersRequest_FieldTerminalPath: *fp, value: value.(*user.User_FieldMask)}
	case WatchUsersRequest_FieldPathSelectorView:
		return &WatchUsersRequest_FieldTerminalPathValue{WatchUsersRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	case WatchUsersRequest_FieldPathSelectorMaxChunkSize:
		return &WatchUsersRequest_FieldTerminalPathValue{WatchUsersRequest_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchUsersRequest: %d", fp.selector))
	}
}

func (fp *WatchUsersRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchUsersRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchUsersRequest_FieldPathArrayOfValues {
	fpaov := &WatchUsersRequest_FieldTerminalPathArrayOfValues{WatchUsersRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchUsersRequest_FieldPathSelectorType:
		return &WatchUsersRequest_FieldTerminalPathArrayOfValues{WatchUsersRequest_FieldTerminalPath: *fp, values: values.([]watch_type.WatchType)}
	case WatchUsersRequest_FieldPathSelectorPageSize:
		return &WatchUsersRequest_FieldTerminalPathArrayOfValues{WatchUsersRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case WatchUsersRequest_FieldPathSelectorPageToken:
		return &WatchUsersRequest_FieldTerminalPathArrayOfValues{WatchUsersRequest_FieldTerminalPath: *fp, values: values.([]*user.PagerCursor)}
	case WatchUsersRequest_FieldPathSelectorOrderBy:
		return &WatchUsersRequest_FieldTerminalPathArrayOfValues{WatchUsersRequest_FieldTerminalPath: *fp, values: values.([]*user.OrderBy)}
	case WatchUsersRequest_FieldPathSelectorResumeToken:
		return &WatchUsersRequest_FieldTerminalPathArrayOfValues{WatchUsersRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchUsersRequest_FieldPathSelectorFilter:
		return &WatchUsersRequest_FieldTerminalPathArrayOfValues{WatchUsersRequest_FieldTerminalPath: *fp, values: values.([]*user.Filter)}
	case WatchUsersRequest_FieldPathSelectorFieldMask:
		return &WatchUsersRequest_FieldTerminalPathArrayOfValues{WatchUsersRequest_FieldTerminalPath: *fp, values: values.([]*user.User_FieldMask)}
	case WatchUsersRequest_FieldPathSelectorView:
		return &WatchUsersRequest_FieldTerminalPathArrayOfValues{WatchUsersRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	case WatchUsersRequest_FieldPathSelectorMaxChunkSize:
		return &WatchUsersRequest_FieldTerminalPathArrayOfValues{WatchUsersRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchUsersRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchUsersRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchUsersRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchUsersRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchUsersRequest: %d", fp.selector))
	}
}

func (fp *WatchUsersRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchUsersRequest_FieldPathValue allows storing values for WatchUsersRequest fields according to their type
type WatchUsersRequest_FieldPathValue interface {
	WatchUsersRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchUsersRequest)
	CompareWith(*WatchUsersRequest) (cmp int, comparable bool)
}

func ParseWatchUsersRequest_FieldPathValue(pathStr, valueStr string) (WatchUsersRequest_FieldPathValue, error) {
	fp, err := ParseWatchUsersRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchUsersRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchUsersRequest_FieldPathValue), nil
}

func MustParseWatchUsersRequest_FieldPathValue(pathStr, valueStr string) WatchUsersRequest_FieldPathValue {
	fpv, err := ParseWatchUsersRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchUsersRequest_FieldTerminalPathValue struct {
	WatchUsersRequest_FieldTerminalPath
	value interface{}
}

var _ WatchUsersRequest_FieldPathValue = (*WatchUsersRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchUsersRequest' as interface{}
func (fpv *WatchUsersRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchUsersRequest_FieldTerminalPathValue) AsTypeValue() (watch_type.WatchType, bool) {
	res, ok := fpv.value.(watch_type.WatchType)
	return res, ok
}
func (fpv *WatchUsersRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *WatchUsersRequest_FieldTerminalPathValue) AsPageTokenValue() (*user.PagerCursor, bool) {
	res, ok := fpv.value.(*user.PagerCursor)
	return res, ok
}
func (fpv *WatchUsersRequest_FieldTerminalPathValue) AsOrderByValue() (*user.OrderBy, bool) {
	res, ok := fpv.value.(*user.OrderBy)
	return res, ok
}
func (fpv *WatchUsersRequest_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchUsersRequest_FieldTerminalPathValue) AsFilterValue() (*user.Filter, bool) {
	res, ok := fpv.value.(*user.Filter)
	return res, ok
}
func (fpv *WatchUsersRequest_FieldTerminalPathValue) AsFieldMaskValue() (*user.User_FieldMask, bool) {
	res, ok := fpv.value.(*user.User_FieldMask)
	return res, ok
}
func (fpv *WatchUsersRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}
func (fpv *WatchUsersRequest_FieldTerminalPathValue) AsMaxChunkSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object WatchUsersRequest
func (fpv *WatchUsersRequest_FieldTerminalPathValue) SetTo(target **WatchUsersRequest) {
	if *target == nil {
		*target = new(WatchUsersRequest)
	}
	switch fpv.selector {
	case WatchUsersRequest_FieldPathSelectorType:
		(*target).Type = fpv.value.(watch_type.WatchType)
	case WatchUsersRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case WatchUsersRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*user.PagerCursor)
	case WatchUsersRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*user.OrderBy)
	case WatchUsersRequest_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchUsersRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*user.Filter)
	case WatchUsersRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*user.User_FieldMask)
	case WatchUsersRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	case WatchUsersRequest_FieldPathSelectorMaxChunkSize:
		(*target).MaxChunkSize = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchUsersRequest: %d", fpv.selector))
	}
}

func (fpv *WatchUsersRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchUsersRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchUsersRequest_FieldTerminalPathValue' with the value under path in 'WatchUsersRequest'.
func (fpv *WatchUsersRequest_FieldTerminalPathValue) CompareWith(source *WatchUsersRequest) (int, bool) {
	switch fpv.selector {
	case WatchUsersRequest_FieldPathSelectorType:
		leftValue := fpv.value.(watch_type.WatchType)
		rightValue := source.GetType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchUsersRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchUsersRequest_FieldPathSelectorPageToken:
		return 0, false
	case WatchUsersRequest_FieldPathSelectorOrderBy:
		return 0, false
	case WatchUsersRequest_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchUsersRequest_FieldPathSelectorFilter:
		return 0, false
	case WatchUsersRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchUsersRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchUsersRequest_FieldPathSelectorMaxChunkSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetMaxChunkSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchUsersRequest: %d", fpv.selector))
	}
}

func (fpv *WatchUsersRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchUsersRequest))
}

// WatchUsersRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchUsersRequest according to their type
// Present only for array (repeated) types.
type WatchUsersRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchUsersRequest_FieldPath
	ContainsValue(*WatchUsersRequest) bool
}

// ParseWatchUsersRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchUsersRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchUsersRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchUsersRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchUsersRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchUsersRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchUsersRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchUsersRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchUsersRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchUsersRequest_FieldTerminalPathArrayItemValue struct {
	WatchUsersRequest_FieldTerminalPath
	value interface{}
}

var _ WatchUsersRequest_FieldPathArrayItemValue = (*WatchUsersRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchUsersRequest as interface{}
func (fpaiv *WatchUsersRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchUsersRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchUsersRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchUsersRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchUsersRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchUsersRequest'
func (fpaiv *WatchUsersRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchUsersRequest) bool {
	slice := fpaiv.WatchUsersRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchUsersRequest_FieldPathArrayOfValues allows storing slice of values for WatchUsersRequest fields according to their type
type WatchUsersRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchUsersRequest_FieldPath
}

func ParseWatchUsersRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchUsersRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchUsersRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchUsersRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchUsersRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchUsersRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchUsersRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchUsersRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchUsersRequest_FieldTerminalPathArrayOfValues struct {
	WatchUsersRequest_FieldTerminalPath
	values interface{}
}

var _ WatchUsersRequest_FieldPathArrayOfValues = (*WatchUsersRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchUsersRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchUsersRequest_FieldPathSelectorType:
		for _, v := range fpaov.values.([]watch_type.WatchType) {
			values = append(values, v)
		}
	case WatchUsersRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case WatchUsersRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*user.PagerCursor) {
			values = append(values, v)
		}
	case WatchUsersRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*user.OrderBy) {
			values = append(values, v)
		}
	case WatchUsersRequest_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchUsersRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*user.Filter) {
			values = append(values, v)
		}
	case WatchUsersRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*user.User_FieldMask) {
			values = append(values, v)
		}
	case WatchUsersRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	case WatchUsersRequest_FieldPathSelectorMaxChunkSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchUsersRequest_FieldTerminalPathArrayOfValues) AsTypeArrayOfValues() ([]watch_type.WatchType, bool) {
	res, ok := fpaov.values.([]watch_type.WatchType)
	return res, ok
}
func (fpaov *WatchUsersRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *WatchUsersRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*user.PagerCursor, bool) {
	res, ok := fpaov.values.([]*user.PagerCursor)
	return res, ok
}
func (fpaov *WatchUsersRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*user.OrderBy, bool) {
	res, ok := fpaov.values.([]*user.OrderBy)
	return res, ok
}
func (fpaov *WatchUsersRequest_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchUsersRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*user.Filter, bool) {
	res, ok := fpaov.values.([]*user.Filter)
	return res, ok
}
func (fpaov *WatchUsersRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*user.User_FieldMask, bool) {
	res, ok := fpaov.values.([]*user.User_FieldMask)
	return res, ok
}
func (fpaov *WatchUsersRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}
func (fpaov *WatchUsersRequest_FieldTerminalPathArrayOfValues) AsMaxChunkSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchUsersResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchUsersResponse_FieldPathSelector
	Get(source *WatchUsersResponse) []interface{}
	GetSingle(source *WatchUsersResponse) (interface{}, bool)
	ClearValue(item *WatchUsersResponse)

	// Those methods build corresponding WatchUsersResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchUsersResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchUsersResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchUsersResponse_FieldPathArrayItemValue
}

type WatchUsersResponse_FieldPathSelector int32

const (
	WatchUsersResponse_FieldPathSelectorUserChanges     WatchUsersResponse_FieldPathSelector = 0
	WatchUsersResponse_FieldPathSelectorIsCurrent       WatchUsersResponse_FieldPathSelector = 1
	WatchUsersResponse_FieldPathSelectorPageTokenChange WatchUsersResponse_FieldPathSelector = 2
	WatchUsersResponse_FieldPathSelectorResumeToken     WatchUsersResponse_FieldPathSelector = 3
	WatchUsersResponse_FieldPathSelectorSnapshotSize    WatchUsersResponse_FieldPathSelector = 4
	WatchUsersResponse_FieldPathSelectorIsSoftReset     WatchUsersResponse_FieldPathSelector = 5
	WatchUsersResponse_FieldPathSelectorIsHardReset     WatchUsersResponse_FieldPathSelector = 6
)

func (s WatchUsersResponse_FieldPathSelector) String() string {
	switch s {
	case WatchUsersResponse_FieldPathSelectorUserChanges:
		return "user_changes"
	case WatchUsersResponse_FieldPathSelectorIsCurrent:
		return "is_current"
	case WatchUsersResponse_FieldPathSelectorPageTokenChange:
		return "page_token_change"
	case WatchUsersResponse_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchUsersResponse_FieldPathSelectorSnapshotSize:
		return "snapshot_size"
	case WatchUsersResponse_FieldPathSelectorIsSoftReset:
		return "is_soft_reset"
	case WatchUsersResponse_FieldPathSelectorIsHardReset:
		return "is_hard_reset"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchUsersResponse: %d", s))
	}
}

func BuildWatchUsersResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchUsersResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchUsersResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "user_changes", "userChanges", "user-changes":
			return &WatchUsersResponse_FieldTerminalPath{selector: WatchUsersResponse_FieldPathSelectorUserChanges}, nil
		case "is_current", "isCurrent", "is-current":
			return &WatchUsersResponse_FieldTerminalPath{selector: WatchUsersResponse_FieldPathSelectorIsCurrent}, nil
		case "page_token_change", "pageTokenChange", "page-token-change":
			return &WatchUsersResponse_FieldTerminalPath{selector: WatchUsersResponse_FieldPathSelectorPageTokenChange}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchUsersResponse_FieldTerminalPath{selector: WatchUsersResponse_FieldPathSelectorResumeToken}, nil
		case "snapshot_size", "snapshotSize", "snapshot-size":
			return &WatchUsersResponse_FieldTerminalPath{selector: WatchUsersResponse_FieldPathSelectorSnapshotSize}, nil
		case "is_soft_reset", "isSoftReset", "is-soft-reset":
			return &WatchUsersResponse_FieldTerminalPath{selector: WatchUsersResponse_FieldPathSelectorIsSoftReset}, nil
		case "is_hard_reset", "isHardReset", "is-hard-reset":
			return &WatchUsersResponse_FieldTerminalPath{selector: WatchUsersResponse_FieldPathSelectorIsHardReset}, nil
		}
	} else {
		switch fp[0] {
		case "page_token_change", "pageTokenChange", "page-token-change":
			if subpath, err := BuildWatchUsersResponsePageTokenChange_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &WatchUsersResponse_FieldSubPath{selector: WatchUsersResponse_FieldPathSelectorPageTokenChange, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchUsersResponse", fp)
}

func ParseWatchUsersResponse_FieldPath(rawField string) (WatchUsersResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchUsersResponse_FieldPath(fp)
}

func MustParseWatchUsersResponse_FieldPath(rawField string) WatchUsersResponse_FieldPath {
	fp, err := ParseWatchUsersResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchUsersResponse_FieldTerminalPath struct {
	selector WatchUsersResponse_FieldPathSelector
}

var _ WatchUsersResponse_FieldPath = (*WatchUsersResponse_FieldTerminalPath)(nil)

func (fp *WatchUsersResponse_FieldTerminalPath) Selector() WatchUsersResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchUsersResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchUsersResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchUsersResponse
func (fp *WatchUsersResponse_FieldTerminalPath) Get(source *WatchUsersResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchUsersResponse_FieldPathSelectorUserChanges:
			for _, value := range source.GetUserChanges() {
				values = append(values, value)
			}
		case WatchUsersResponse_FieldPathSelectorIsCurrent:
			values = append(values, source.IsCurrent)
		case WatchUsersResponse_FieldPathSelectorPageTokenChange:
			if source.PageTokenChange != nil {
				values = append(values, source.PageTokenChange)
			}
		case WatchUsersResponse_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchUsersResponse_FieldPathSelectorSnapshotSize:
			values = append(values, source.SnapshotSize)
		case WatchUsersResponse_FieldPathSelectorIsSoftReset:
			values = append(values, source.IsSoftReset)
		case WatchUsersResponse_FieldPathSelectorIsHardReset:
			values = append(values, source.IsHardReset)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchUsersResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchUsersResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchUsersResponse))
}

// GetSingle returns value pointed by specific field of from source WatchUsersResponse
func (fp *WatchUsersResponse_FieldTerminalPath) GetSingle(source *WatchUsersResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchUsersResponse_FieldPathSelectorUserChanges:
		res := source.GetUserChanges()
		return res, res != nil
	case WatchUsersResponse_FieldPathSelectorIsCurrent:
		return source.GetIsCurrent(), source != nil
	case WatchUsersResponse_FieldPathSelectorPageTokenChange:
		res := source.GetPageTokenChange()
		return res, res != nil
	case WatchUsersResponse_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchUsersResponse_FieldPathSelectorSnapshotSize:
		return source.GetSnapshotSize(), source != nil
	case WatchUsersResponse_FieldPathSelectorIsSoftReset:
		return source.GetIsSoftReset(), source != nil
	case WatchUsersResponse_FieldPathSelectorIsHardReset:
		return source.GetIsHardReset(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchUsersResponse: %d", fp.selector))
	}
}

func (fp *WatchUsersResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchUsersResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchUsersResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchUsersResponse_FieldPathSelectorUserChanges:
		return ([]*user.UserChange)(nil)
	case WatchUsersResponse_FieldPathSelectorIsCurrent:
		return false
	case WatchUsersResponse_FieldPathSelectorPageTokenChange:
		return (*WatchUsersResponse_PageTokenChange)(nil)
	case WatchUsersResponse_FieldPathSelectorResumeToken:
		return ""
	case WatchUsersResponse_FieldPathSelectorSnapshotSize:
		return int64(0)
	case WatchUsersResponse_FieldPathSelectorIsSoftReset:
		return false
	case WatchUsersResponse_FieldPathSelectorIsHardReset:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchUsersResponse: %d", fp.selector))
	}
}

func (fp *WatchUsersResponse_FieldTerminalPath) ClearValue(item *WatchUsersResponse) {
	if item != nil {
		switch fp.selector {
		case WatchUsersResponse_FieldPathSelectorUserChanges:
			item.UserChanges = nil
		case WatchUsersResponse_FieldPathSelectorIsCurrent:
			item.IsCurrent = false
		case WatchUsersResponse_FieldPathSelectorPageTokenChange:
			item.PageTokenChange = nil
		case WatchUsersResponse_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchUsersResponse_FieldPathSelectorSnapshotSize:
			item.SnapshotSize = int64(0)
		case WatchUsersResponse_FieldPathSelectorIsSoftReset:
			item.IsSoftReset = false
		case WatchUsersResponse_FieldPathSelectorIsHardReset:
			item.IsHardReset = false
		default:
			panic(fmt.Sprintf("Invalid selector for WatchUsersResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchUsersResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchUsersResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchUsersResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchUsersResponse_FieldPathSelectorUserChanges ||
		fp.selector == WatchUsersResponse_FieldPathSelectorIsCurrent ||
		fp.selector == WatchUsersResponse_FieldPathSelectorResumeToken ||
		fp.selector == WatchUsersResponse_FieldPathSelectorSnapshotSize ||
		fp.selector == WatchUsersResponse_FieldPathSelectorIsSoftReset ||
		fp.selector == WatchUsersResponse_FieldPathSelectorIsHardReset
}

func (fp *WatchUsersResponse_FieldTerminalPath) WithIValue(value interface{}) WatchUsersResponse_FieldPathValue {
	switch fp.selector {
	case WatchUsersResponse_FieldPathSelectorUserChanges:
		return &WatchUsersResponse_FieldTerminalPathValue{WatchUsersResponse_FieldTerminalPath: *fp, value: value.([]*user.UserChange)}
	case WatchUsersResponse_FieldPathSelectorIsCurrent:
		return &WatchUsersResponse_FieldTerminalPathValue{WatchUsersResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchUsersResponse_FieldPathSelectorPageTokenChange:
		return &WatchUsersResponse_FieldTerminalPathValue{WatchUsersResponse_FieldTerminalPath: *fp, value: value.(*WatchUsersResponse_PageTokenChange)}
	case WatchUsersResponse_FieldPathSelectorResumeToken:
		return &WatchUsersResponse_FieldTerminalPathValue{WatchUsersResponse_FieldTerminalPath: *fp, value: value.(string)}
	case WatchUsersResponse_FieldPathSelectorSnapshotSize:
		return &WatchUsersResponse_FieldTerminalPathValue{WatchUsersResponse_FieldTerminalPath: *fp, value: value.(int64)}
	case WatchUsersResponse_FieldPathSelectorIsSoftReset:
		return &WatchUsersResponse_FieldTerminalPathValue{WatchUsersResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchUsersResponse_FieldPathSelectorIsHardReset:
		return &WatchUsersResponse_FieldTerminalPathValue{WatchUsersResponse_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchUsersResponse: %d", fp.selector))
	}
}

func (fp *WatchUsersResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchUsersResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchUsersResponse_FieldPathArrayOfValues {
	fpaov := &WatchUsersResponse_FieldTerminalPathArrayOfValues{WatchUsersResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchUsersResponse_FieldPathSelectorUserChanges:
		return &WatchUsersResponse_FieldTerminalPathArrayOfValues{WatchUsersResponse_FieldTerminalPath: *fp, values: values.([][]*user.UserChange)}
	case WatchUsersResponse_FieldPathSelectorIsCurrent:
		return &WatchUsersResponse_FieldTerminalPathArrayOfValues{WatchUsersResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchUsersResponse_FieldPathSelectorPageTokenChange:
		return &WatchUsersResponse_FieldTerminalPathArrayOfValues{WatchUsersResponse_FieldTerminalPath: *fp, values: values.([]*WatchUsersResponse_PageTokenChange)}
	case WatchUsersResponse_FieldPathSelectorResumeToken:
		return &WatchUsersResponse_FieldTerminalPathArrayOfValues{WatchUsersResponse_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchUsersResponse_FieldPathSelectorSnapshotSize:
		return &WatchUsersResponse_FieldTerminalPathArrayOfValues{WatchUsersResponse_FieldTerminalPath: *fp, values: values.([]int64)}
	case WatchUsersResponse_FieldPathSelectorIsSoftReset:
		return &WatchUsersResponse_FieldTerminalPathArrayOfValues{WatchUsersResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchUsersResponse_FieldPathSelectorIsHardReset:
		return &WatchUsersResponse_FieldTerminalPathArrayOfValues{WatchUsersResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchUsersResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchUsersResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchUsersResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchUsersResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case WatchUsersResponse_FieldPathSelectorUserChanges:
		return &WatchUsersResponse_FieldTerminalPathArrayItemValue{WatchUsersResponse_FieldTerminalPath: *fp, value: value.(*user.UserChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchUsersResponse: %d", fp.selector))
	}
}

func (fp *WatchUsersResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type WatchUsersResponse_FieldSubPath struct {
	selector WatchUsersResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ WatchUsersResponse_FieldPath = (*WatchUsersResponse_FieldSubPath)(nil)

func (fps *WatchUsersResponse_FieldSubPath) Selector() WatchUsersResponse_FieldPathSelector {
	return fps.selector
}
func (fps *WatchUsersResponse_FieldSubPath) AsPageTokenChangeSubPath() (WatchUsersResponsePageTokenChange_FieldPath, bool) {
	res, ok := fps.subPath.(WatchUsersResponsePageTokenChange_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *WatchUsersResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *WatchUsersResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source WatchUsersResponse
func (fps *WatchUsersResponse_FieldSubPath) Get(source *WatchUsersResponse) (values []interface{}) {
	if asPageTokenChangeFieldPath, ok := fps.AsPageTokenChangeSubPath(); ok {
		values = append(values, asPageTokenChangeFieldPath.Get(source.GetPageTokenChange())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for WatchUsersResponse: %d", fps.selector))
	}
	return
}

func (fps *WatchUsersResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*WatchUsersResponse))
}

// GetSingle returns value of selected field from source WatchUsersResponse
func (fps *WatchUsersResponse_FieldSubPath) GetSingle(source *WatchUsersResponse) (interface{}, bool) {
	switch fps.selector {
	case WatchUsersResponse_FieldPathSelectorPageTokenChange:
		if source.GetPageTokenChange() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchUsersResponse: %d", fps.selector))
	}
}

func (fps *WatchUsersResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*WatchUsersResponse))
}

// GetDefault returns a default value of the field type
func (fps *WatchUsersResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *WatchUsersResponse_FieldSubPath) ClearValue(item *WatchUsersResponse) {
	if item != nil {
		switch fps.selector {
		case WatchUsersResponse_FieldPathSelectorPageTokenChange:
			fps.subPath.ClearValueRaw(item.PageTokenChange)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchUsersResponse: %d", fps.selector))
		}
	}
}

func (fps *WatchUsersResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*WatchUsersResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *WatchUsersResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *WatchUsersResponse_FieldSubPath) WithIValue(value interface{}) WatchUsersResponse_FieldPathValue {
	return &WatchUsersResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *WatchUsersResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *WatchUsersResponse_FieldSubPath) WithIArrayOfValues(values interface{}) WatchUsersResponse_FieldPathArrayOfValues {
	return &WatchUsersResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *WatchUsersResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *WatchUsersResponse_FieldSubPath) WithIArrayItemValue(value interface{}) WatchUsersResponse_FieldPathArrayItemValue {
	return &WatchUsersResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *WatchUsersResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// WatchUsersResponse_FieldPathValue allows storing values for WatchUsersResponse fields according to their type
type WatchUsersResponse_FieldPathValue interface {
	WatchUsersResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchUsersResponse)
	CompareWith(*WatchUsersResponse) (cmp int, comparable bool)
}

func ParseWatchUsersResponse_FieldPathValue(pathStr, valueStr string) (WatchUsersResponse_FieldPathValue, error) {
	fp, err := ParseWatchUsersResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchUsersResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchUsersResponse_FieldPathValue), nil
}

func MustParseWatchUsersResponse_FieldPathValue(pathStr, valueStr string) WatchUsersResponse_FieldPathValue {
	fpv, err := ParseWatchUsersResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchUsersResponse_FieldTerminalPathValue struct {
	WatchUsersResponse_FieldTerminalPath
	value interface{}
}

var _ WatchUsersResponse_FieldPathValue = (*WatchUsersResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchUsersResponse' as interface{}
func (fpv *WatchUsersResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchUsersResponse_FieldTerminalPathValue) AsUserChangesValue() ([]*user.UserChange, bool) {
	res, ok := fpv.value.([]*user.UserChange)
	return res, ok
}
func (fpv *WatchUsersResponse_FieldTerminalPathValue) AsIsCurrentValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchUsersResponse_FieldTerminalPathValue) AsPageTokenChangeValue() (*WatchUsersResponse_PageTokenChange, bool) {
	res, ok := fpv.value.(*WatchUsersResponse_PageTokenChange)
	return res, ok
}
func (fpv *WatchUsersResponse_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchUsersResponse_FieldTerminalPathValue) AsSnapshotSizeValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}
func (fpv *WatchUsersResponse_FieldTerminalPathValue) AsIsSoftResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchUsersResponse_FieldTerminalPathValue) AsIsHardResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object WatchUsersResponse
func (fpv *WatchUsersResponse_FieldTerminalPathValue) SetTo(target **WatchUsersResponse) {
	if *target == nil {
		*target = new(WatchUsersResponse)
	}
	switch fpv.selector {
	case WatchUsersResponse_FieldPathSelectorUserChanges:
		(*target).UserChanges = fpv.value.([]*user.UserChange)
	case WatchUsersResponse_FieldPathSelectorIsCurrent:
		(*target).IsCurrent = fpv.value.(bool)
	case WatchUsersResponse_FieldPathSelectorPageTokenChange:
		(*target).PageTokenChange = fpv.value.(*WatchUsersResponse_PageTokenChange)
	case WatchUsersResponse_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchUsersResponse_FieldPathSelectorSnapshotSize:
		(*target).SnapshotSize = fpv.value.(int64)
	case WatchUsersResponse_FieldPathSelectorIsSoftReset:
		(*target).IsSoftReset = fpv.value.(bool)
	case WatchUsersResponse_FieldPathSelectorIsHardReset:
		(*target).IsHardReset = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchUsersResponse: %d", fpv.selector))
	}
}

func (fpv *WatchUsersResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchUsersResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchUsersResponse_FieldTerminalPathValue' with the value under path in 'WatchUsersResponse'.
func (fpv *WatchUsersResponse_FieldTerminalPathValue) CompareWith(source *WatchUsersResponse) (int, bool) {
	switch fpv.selector {
	case WatchUsersResponse_FieldPathSelectorUserChanges:
		return 0, false
	case WatchUsersResponse_FieldPathSelectorIsCurrent:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsCurrent()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchUsersResponse_FieldPathSelectorPageTokenChange:
		return 0, false
	case WatchUsersResponse_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchUsersResponse_FieldPathSelectorSnapshotSize:
		leftValue := fpv.value.(int64)
		rightValue := source.GetSnapshotSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchUsersResponse_FieldPathSelectorIsSoftReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsSoftReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchUsersResponse_FieldPathSelectorIsHardReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsHardReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchUsersResponse: %d", fpv.selector))
	}
}

func (fpv *WatchUsersResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchUsersResponse))
}

type WatchUsersResponse_FieldSubPathValue struct {
	WatchUsersResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ WatchUsersResponse_FieldPathValue = (*WatchUsersResponse_FieldSubPathValue)(nil)

func (fpvs *WatchUsersResponse_FieldSubPathValue) AsPageTokenChangePathValue() (WatchUsersResponsePageTokenChange_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(WatchUsersResponsePageTokenChange_FieldPathValue)
	return res, ok
}

func (fpvs *WatchUsersResponse_FieldSubPathValue) SetTo(target **WatchUsersResponse) {
	if *target == nil {
		*target = new(WatchUsersResponse)
	}
	switch fpvs.Selector() {
	case WatchUsersResponse_FieldPathSelectorPageTokenChange:
		fpvs.subPathValue.(WatchUsersResponsePageTokenChange_FieldPathValue).SetTo(&(*target).PageTokenChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchUsersResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchUsersResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchUsersResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *WatchUsersResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *WatchUsersResponse_FieldSubPathValue) CompareWith(source *WatchUsersResponse) (int, bool) {
	switch fpvs.Selector() {
	case WatchUsersResponse_FieldPathSelectorPageTokenChange:
		return fpvs.subPathValue.(WatchUsersResponsePageTokenChange_FieldPathValue).CompareWith(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchUsersResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchUsersResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*WatchUsersResponse))
}

// WatchUsersResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchUsersResponse according to their type
// Present only for array (repeated) types.
type WatchUsersResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchUsersResponse_FieldPath
	ContainsValue(*WatchUsersResponse) bool
}

// ParseWatchUsersResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchUsersResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchUsersResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchUsersResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchUsersResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchUsersResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchUsersResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchUsersResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchUsersResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchUsersResponse_FieldTerminalPathArrayItemValue struct {
	WatchUsersResponse_FieldTerminalPath
	value interface{}
}

var _ WatchUsersResponse_FieldPathArrayItemValue = (*WatchUsersResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchUsersResponse as interface{}
func (fpaiv *WatchUsersResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *WatchUsersResponse_FieldTerminalPathArrayItemValue) AsUserChangesItemValue() (*user.UserChange, bool) {
	res, ok := fpaiv.value.(*user.UserChange)
	return res, ok
}

func (fpaiv *WatchUsersResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchUsersResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchUsersResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchUsersResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchUsersResponse'
func (fpaiv *WatchUsersResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchUsersResponse) bool {
	slice := fpaiv.WatchUsersResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type WatchUsersResponse_FieldSubPathArrayItemValue struct {
	WatchUsersResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *WatchUsersResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *WatchUsersResponse_FieldSubPathArrayItemValue) AsPageTokenChangePathItemValue() (WatchUsersResponsePageTokenChange_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(WatchUsersResponsePageTokenChange_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchUsersResponse'
func (fpaivs *WatchUsersResponse_FieldSubPathArrayItemValue) ContainsValue(source *WatchUsersResponse) bool {
	switch fpaivs.Selector() {
	case WatchUsersResponse_FieldPathSelectorPageTokenChange:
		return fpaivs.subPathItemValue.(WatchUsersResponsePageTokenChange_FieldPathArrayItemValue).ContainsValue(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchUsersResponse: %d", fpaivs.Selector()))
	}
}

// WatchUsersResponse_FieldPathArrayOfValues allows storing slice of values for WatchUsersResponse fields according to their type
type WatchUsersResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchUsersResponse_FieldPath
}

func ParseWatchUsersResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchUsersResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchUsersResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchUsersResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchUsersResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchUsersResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchUsersResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchUsersResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchUsersResponse_FieldTerminalPathArrayOfValues struct {
	WatchUsersResponse_FieldTerminalPath
	values interface{}
}

var _ WatchUsersResponse_FieldPathArrayOfValues = (*WatchUsersResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchUsersResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchUsersResponse_FieldPathSelectorUserChanges:
		for _, v := range fpaov.values.([][]*user.UserChange) {
			values = append(values, v)
		}
	case WatchUsersResponse_FieldPathSelectorIsCurrent:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchUsersResponse_FieldPathSelectorPageTokenChange:
		for _, v := range fpaov.values.([]*WatchUsersResponse_PageTokenChange) {
			values = append(values, v)
		}
	case WatchUsersResponse_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchUsersResponse_FieldPathSelectorSnapshotSize:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	case WatchUsersResponse_FieldPathSelectorIsSoftReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchUsersResponse_FieldPathSelectorIsHardReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchUsersResponse_FieldTerminalPathArrayOfValues) AsUserChangesArrayOfValues() ([][]*user.UserChange, bool) {
	res, ok := fpaov.values.([][]*user.UserChange)
	return res, ok
}
func (fpaov *WatchUsersResponse_FieldTerminalPathArrayOfValues) AsIsCurrentArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchUsersResponse_FieldTerminalPathArrayOfValues) AsPageTokenChangeArrayOfValues() ([]*WatchUsersResponse_PageTokenChange, bool) {
	res, ok := fpaov.values.([]*WatchUsersResponse_PageTokenChange)
	return res, ok
}
func (fpaov *WatchUsersResponse_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchUsersResponse_FieldTerminalPathArrayOfValues) AsSnapshotSizeArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}
func (fpaov *WatchUsersResponse_FieldTerminalPathArrayOfValues) AsIsSoftResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchUsersResponse_FieldTerminalPathArrayOfValues) AsIsHardResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

type WatchUsersResponse_FieldSubPathArrayOfValues struct {
	WatchUsersResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ WatchUsersResponse_FieldPathArrayOfValues = (*WatchUsersResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *WatchUsersResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *WatchUsersResponse_FieldSubPathArrayOfValues) AsPageTokenChangePathArrayOfValues() (WatchUsersResponsePageTokenChange_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(WatchUsersResponsePageTokenChange_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchUsersResponsePageTokenChange_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchUsersResponsePageTokenChange_FieldPathSelector
	Get(source *WatchUsersResponse_PageTokenChange) []interface{}
	GetSingle(source *WatchUsersResponse_PageTokenChange) (interface{}, bool)
	ClearValue(item *WatchUsersResponse_PageTokenChange)

	// Those methods build corresponding WatchUsersResponsePageTokenChange_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchUsersResponsePageTokenChange_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchUsersResponsePageTokenChange_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchUsersResponsePageTokenChange_FieldPathArrayItemValue
}

type WatchUsersResponsePageTokenChange_FieldPathSelector int32

const (
	WatchUsersResponsePageTokenChange_FieldPathSelectorPrevPageToken WatchUsersResponsePageTokenChange_FieldPathSelector = 0
	WatchUsersResponsePageTokenChange_FieldPathSelectorNextPageToken WatchUsersResponsePageTokenChange_FieldPathSelector = 1
)

func (s WatchUsersResponsePageTokenChange_FieldPathSelector) String() string {
	switch s {
	case WatchUsersResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case WatchUsersResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchUsersResponse_PageTokenChange: %d", s))
	}
}

func BuildWatchUsersResponsePageTokenChange_FieldPath(fp gotenobject.RawFieldPath) (WatchUsersResponsePageTokenChange_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchUsersResponse_PageTokenChange")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &WatchUsersResponsePageTokenChange_FieldTerminalPath{selector: WatchUsersResponsePageTokenChange_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &WatchUsersResponsePageTokenChange_FieldTerminalPath{selector: WatchUsersResponsePageTokenChange_FieldPathSelectorNextPageToken}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchUsersResponse_PageTokenChange", fp)
}

func ParseWatchUsersResponsePageTokenChange_FieldPath(rawField string) (WatchUsersResponsePageTokenChange_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchUsersResponsePageTokenChange_FieldPath(fp)
}

func MustParseWatchUsersResponsePageTokenChange_FieldPath(rawField string) WatchUsersResponsePageTokenChange_FieldPath {
	fp, err := ParseWatchUsersResponsePageTokenChange_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchUsersResponsePageTokenChange_FieldTerminalPath struct {
	selector WatchUsersResponsePageTokenChange_FieldPathSelector
}

var _ WatchUsersResponsePageTokenChange_FieldPath = (*WatchUsersResponsePageTokenChange_FieldTerminalPath)(nil)

func (fp *WatchUsersResponsePageTokenChange_FieldTerminalPath) Selector() WatchUsersResponsePageTokenChange_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchUsersResponsePageTokenChange_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchUsersResponsePageTokenChange_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchUsersResponse_PageTokenChange
func (fp *WatchUsersResponsePageTokenChange_FieldTerminalPath) Get(source *WatchUsersResponse_PageTokenChange) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchUsersResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case WatchUsersResponsePageTokenChange_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchUsersResponse_PageTokenChange: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchUsersResponsePageTokenChange_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchUsersResponse_PageTokenChange))
}

// GetSingle returns value pointed by specific field of from source WatchUsersResponse_PageTokenChange
func (fp *WatchUsersResponsePageTokenChange_FieldTerminalPath) GetSingle(source *WatchUsersResponse_PageTokenChange) (interface{}, bool) {
	switch fp.selector {
	case WatchUsersResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case WatchUsersResponsePageTokenChange_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchUsersResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchUsersResponsePageTokenChange_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchUsersResponse_PageTokenChange))
}

// GetDefault returns a default value of the field type
func (fp *WatchUsersResponsePageTokenChange_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchUsersResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return (*user.PagerCursor)(nil)
	case WatchUsersResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return (*user.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchUsersResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchUsersResponsePageTokenChange_FieldTerminalPath) ClearValue(item *WatchUsersResponse_PageTokenChange) {
	if item != nil {
		switch fp.selector {
		case WatchUsersResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case WatchUsersResponsePageTokenChange_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchUsersResponse_PageTokenChange: %d", fp.selector))
		}
	}
}

func (fp *WatchUsersResponsePageTokenChange_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchUsersResponse_PageTokenChange))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchUsersResponsePageTokenChange_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchUsersResponsePageTokenChange_FieldPathSelectorPrevPageToken ||
		fp.selector == WatchUsersResponsePageTokenChange_FieldPathSelectorNextPageToken
}

func (fp *WatchUsersResponsePageTokenChange_FieldTerminalPath) WithIValue(value interface{}) WatchUsersResponsePageTokenChange_FieldPathValue {
	switch fp.selector {
	case WatchUsersResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchUsersResponsePageTokenChange_FieldTerminalPathValue{WatchUsersResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*user.PagerCursor)}
	case WatchUsersResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchUsersResponsePageTokenChange_FieldTerminalPathValue{WatchUsersResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*user.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchUsersResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchUsersResponsePageTokenChange_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchUsersResponsePageTokenChange_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchUsersResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov := &WatchUsersResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchUsersResponsePageTokenChange_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchUsersResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchUsersResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchUsersResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*user.PagerCursor)}
	case WatchUsersResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchUsersResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchUsersResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*user.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchUsersResponse_PageTokenChange: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchUsersResponsePageTokenChange_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchUsersResponsePageTokenChange_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchUsersResponsePageTokenChange_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchUsersResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchUsersResponsePageTokenChange_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchUsersResponsePageTokenChange_FieldPathValue allows storing values for PageTokenChange fields according to their type
type WatchUsersResponsePageTokenChange_FieldPathValue interface {
	WatchUsersResponsePageTokenChange_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchUsersResponse_PageTokenChange)
	CompareWith(*WatchUsersResponse_PageTokenChange) (cmp int, comparable bool)
}

func ParseWatchUsersResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) (WatchUsersResponsePageTokenChange_FieldPathValue, error) {
	fp, err := ParseWatchUsersResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchUsersResponsePageTokenChange_FieldPathValue), nil
}

func MustParseWatchUsersResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) WatchUsersResponsePageTokenChange_FieldPathValue {
	fpv, err := ParseWatchUsersResponsePageTokenChange_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchUsersResponsePageTokenChange_FieldTerminalPathValue struct {
	WatchUsersResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchUsersResponsePageTokenChange_FieldPathValue = (*WatchUsersResponsePageTokenChange_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'PageTokenChange' as interface{}
func (fpv *WatchUsersResponsePageTokenChange_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchUsersResponsePageTokenChange_FieldTerminalPathValue) AsPrevPageTokenValue() (*user.PagerCursor, bool) {
	res, ok := fpv.value.(*user.PagerCursor)
	return res, ok
}
func (fpv *WatchUsersResponsePageTokenChange_FieldTerminalPathValue) AsNextPageTokenValue() (*user.PagerCursor, bool) {
	res, ok := fpv.value.(*user.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object PageTokenChange
func (fpv *WatchUsersResponsePageTokenChange_FieldTerminalPathValue) SetTo(target **WatchUsersResponse_PageTokenChange) {
	if *target == nil {
		*target = new(WatchUsersResponse_PageTokenChange)
	}
	switch fpv.selector {
	case WatchUsersResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*user.PagerCursor)
	case WatchUsersResponsePageTokenChange_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*user.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchUsersResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchUsersResponsePageTokenChange_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchUsersResponse_PageTokenChange)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchUsersResponsePageTokenChange_FieldTerminalPathValue' with the value under path in 'WatchUsersResponse_PageTokenChange'.
func (fpv *WatchUsersResponsePageTokenChange_FieldTerminalPathValue) CompareWith(source *WatchUsersResponse_PageTokenChange) (int, bool) {
	switch fpv.selector {
	case WatchUsersResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return 0, false
	case WatchUsersResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchUsersResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchUsersResponsePageTokenChange_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchUsersResponse_PageTokenChange))
}

// WatchUsersResponsePageTokenChange_FieldPathArrayItemValue allows storing single item in Path-specific values for PageTokenChange according to their type
// Present only for array (repeated) types.
type WatchUsersResponsePageTokenChange_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchUsersResponsePageTokenChange_FieldPath
	ContainsValue(*WatchUsersResponse_PageTokenChange) bool
}

// ParseWatchUsersResponsePageTokenChange_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchUsersResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) (WatchUsersResponsePageTokenChange_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchUsersResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchUsersResponsePageTokenChange_FieldPathArrayItemValue), nil
}

func MustParseWatchUsersResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) WatchUsersResponsePageTokenChange_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchUsersResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchUsersResponsePageTokenChange_FieldTerminalPathArrayItemValue struct {
	WatchUsersResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchUsersResponsePageTokenChange_FieldPathArrayItemValue = (*WatchUsersResponsePageTokenChange_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchUsersResponse_PageTokenChange as interface{}
func (fpaiv *WatchUsersResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchUsersResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingle(source *WatchUsersResponse_PageTokenChange) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchUsersResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchUsersResponse_PageTokenChange))
}

// Contains returns a boolean indicating if value that is being held is present in given 'PageTokenChange'
func (fpaiv *WatchUsersResponsePageTokenChange_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchUsersResponse_PageTokenChange) bool {
	slice := fpaiv.WatchUsersResponsePageTokenChange_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchUsersResponsePageTokenChange_FieldPathArrayOfValues allows storing slice of values for PageTokenChange fields according to their type
type WatchUsersResponsePageTokenChange_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchUsersResponsePageTokenChange_FieldPath
}

func ParseWatchUsersResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchUsersResponsePageTokenChange_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchUsersResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchUsersResponsePageTokenChange_FieldPathArrayOfValues), nil
}

func MustParseWatchUsersResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) WatchUsersResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov, err := ParseWatchUsersResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchUsersResponsePageTokenChange_FieldTerminalPathArrayOfValues struct {
	WatchUsersResponsePageTokenChange_FieldTerminalPath
	values interface{}
}

var _ WatchUsersResponsePageTokenChange_FieldPathArrayOfValues = (*WatchUsersResponsePageTokenChange_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchUsersResponsePageTokenChange_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchUsersResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*user.PagerCursor) {
			values = append(values, v)
		}
	case WatchUsersResponsePageTokenChange_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*user.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchUsersResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*user.PagerCursor, bool) {
	res, ok := fpaov.values.([]*user.PagerCursor)
	return res, ok
}
func (fpaov *WatchUsersResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*user.PagerCursor, bool) {
	res, ok := fpaov.values.([]*user.PagerCursor)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type CreateUserRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() CreateUserRequest_FieldPathSelector
	Get(source *CreateUserRequest) []interface{}
	GetSingle(source *CreateUserRequest) (interface{}, bool)
	ClearValue(item *CreateUserRequest)

	// Those methods build corresponding CreateUserRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) CreateUserRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) CreateUserRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) CreateUserRequest_FieldPathArrayItemValue
}

type CreateUserRequest_FieldPathSelector int32

const (
	CreateUserRequest_FieldPathSelectorUser CreateUserRequest_FieldPathSelector = 0
)

func (s CreateUserRequest_FieldPathSelector) String() string {
	switch s {
	case CreateUserRequest_FieldPathSelectorUser:
		return "user"
	default:
		panic(fmt.Sprintf("Invalid selector for CreateUserRequest: %d", s))
	}
}

func BuildCreateUserRequest_FieldPath(fp gotenobject.RawFieldPath) (CreateUserRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object CreateUserRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "user":
			return &CreateUserRequest_FieldTerminalPath{selector: CreateUserRequest_FieldPathSelectorUser}, nil
		}
	} else {
		switch fp[0] {
		case "user":
			if subpath, err := user.BuildUser_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &CreateUserRequest_FieldSubPath{selector: CreateUserRequest_FieldPathSelectorUser, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object CreateUserRequest", fp)
}

func ParseCreateUserRequest_FieldPath(rawField string) (CreateUserRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildCreateUserRequest_FieldPath(fp)
}

func MustParseCreateUserRequest_FieldPath(rawField string) CreateUserRequest_FieldPath {
	fp, err := ParseCreateUserRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type CreateUserRequest_FieldTerminalPath struct {
	selector CreateUserRequest_FieldPathSelector
}

var _ CreateUserRequest_FieldPath = (*CreateUserRequest_FieldTerminalPath)(nil)

func (fp *CreateUserRequest_FieldTerminalPath) Selector() CreateUserRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *CreateUserRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *CreateUserRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source CreateUserRequest
func (fp *CreateUserRequest_FieldTerminalPath) Get(source *CreateUserRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case CreateUserRequest_FieldPathSelectorUser:
			if source.User != nil {
				values = append(values, source.User)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for CreateUserRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *CreateUserRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*CreateUserRequest))
}

// GetSingle returns value pointed by specific field of from source CreateUserRequest
func (fp *CreateUserRequest_FieldTerminalPath) GetSingle(source *CreateUserRequest) (interface{}, bool) {
	switch fp.selector {
	case CreateUserRequest_FieldPathSelectorUser:
		res := source.GetUser()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for CreateUserRequest: %d", fp.selector))
	}
}

func (fp *CreateUserRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*CreateUserRequest))
}

// GetDefault returns a default value of the field type
func (fp *CreateUserRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case CreateUserRequest_FieldPathSelectorUser:
		return (*user.User)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateUserRequest: %d", fp.selector))
	}
}

func (fp *CreateUserRequest_FieldTerminalPath) ClearValue(item *CreateUserRequest) {
	if item != nil {
		switch fp.selector {
		case CreateUserRequest_FieldPathSelectorUser:
			item.User = nil
		default:
			panic(fmt.Sprintf("Invalid selector for CreateUserRequest: %d", fp.selector))
		}
	}
}

func (fp *CreateUserRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*CreateUserRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *CreateUserRequest_FieldTerminalPath) IsLeaf() bool {
	return false
}

func (fp *CreateUserRequest_FieldTerminalPath) WithIValue(value interface{}) CreateUserRequest_FieldPathValue {
	switch fp.selector {
	case CreateUserRequest_FieldPathSelectorUser:
		return &CreateUserRequest_FieldTerminalPathValue{CreateUserRequest_FieldTerminalPath: *fp, value: value.(*user.User)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateUserRequest: %d", fp.selector))
	}
}

func (fp *CreateUserRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *CreateUserRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) CreateUserRequest_FieldPathArrayOfValues {
	fpaov := &CreateUserRequest_FieldTerminalPathArrayOfValues{CreateUserRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case CreateUserRequest_FieldPathSelectorUser:
		return &CreateUserRequest_FieldTerminalPathArrayOfValues{CreateUserRequest_FieldTerminalPath: *fp, values: values.([]*user.User)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateUserRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *CreateUserRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *CreateUserRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) CreateUserRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for CreateUserRequest: %d", fp.selector))
	}
}

func (fp *CreateUserRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type CreateUserRequest_FieldSubPath struct {
	selector CreateUserRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ CreateUserRequest_FieldPath = (*CreateUserRequest_FieldSubPath)(nil)

func (fps *CreateUserRequest_FieldSubPath) Selector() CreateUserRequest_FieldPathSelector {
	return fps.selector
}
func (fps *CreateUserRequest_FieldSubPath) AsUserSubPath() (user.User_FieldPath, bool) {
	res, ok := fps.subPath.(user.User_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *CreateUserRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *CreateUserRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source CreateUserRequest
func (fps *CreateUserRequest_FieldSubPath) Get(source *CreateUserRequest) (values []interface{}) {
	if asUserFieldPath, ok := fps.AsUserSubPath(); ok {
		values = append(values, asUserFieldPath.Get(source.GetUser())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for CreateUserRequest: %d", fps.selector))
	}
	return
}

func (fps *CreateUserRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*CreateUserRequest))
}

// GetSingle returns value of selected field from source CreateUserRequest
func (fps *CreateUserRequest_FieldSubPath) GetSingle(source *CreateUserRequest) (interface{}, bool) {
	switch fps.selector {
	case CreateUserRequest_FieldPathSelectorUser:
		if source.GetUser() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetUser())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateUserRequest: %d", fps.selector))
	}
}

func (fps *CreateUserRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*CreateUserRequest))
}

// GetDefault returns a default value of the field type
func (fps *CreateUserRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *CreateUserRequest_FieldSubPath) ClearValue(item *CreateUserRequest) {
	if item != nil {
		switch fps.selector {
		case CreateUserRequest_FieldPathSelectorUser:
			fps.subPath.ClearValueRaw(item.User)
		default:
			panic(fmt.Sprintf("Invalid selector for CreateUserRequest: %d", fps.selector))
		}
	}
}

func (fps *CreateUserRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*CreateUserRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *CreateUserRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *CreateUserRequest_FieldSubPath) WithIValue(value interface{}) CreateUserRequest_FieldPathValue {
	return &CreateUserRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *CreateUserRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *CreateUserRequest_FieldSubPath) WithIArrayOfValues(values interface{}) CreateUserRequest_FieldPathArrayOfValues {
	return &CreateUserRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *CreateUserRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *CreateUserRequest_FieldSubPath) WithIArrayItemValue(value interface{}) CreateUserRequest_FieldPathArrayItemValue {
	return &CreateUserRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *CreateUserRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// CreateUserRequest_FieldPathValue allows storing values for CreateUserRequest fields according to their type
type CreateUserRequest_FieldPathValue interface {
	CreateUserRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **CreateUserRequest)
	CompareWith(*CreateUserRequest) (cmp int, comparable bool)
}

func ParseCreateUserRequest_FieldPathValue(pathStr, valueStr string) (CreateUserRequest_FieldPathValue, error) {
	fp, err := ParseCreateUserRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateUserRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(CreateUserRequest_FieldPathValue), nil
}

func MustParseCreateUserRequest_FieldPathValue(pathStr, valueStr string) CreateUserRequest_FieldPathValue {
	fpv, err := ParseCreateUserRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type CreateUserRequest_FieldTerminalPathValue struct {
	CreateUserRequest_FieldTerminalPath
	value interface{}
}

var _ CreateUserRequest_FieldPathValue = (*CreateUserRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CreateUserRequest' as interface{}
func (fpv *CreateUserRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *CreateUserRequest_FieldTerminalPathValue) AsUserValue() (*user.User, bool) {
	res, ok := fpv.value.(*user.User)
	return res, ok
}

// SetTo stores value for selected field for object CreateUserRequest
func (fpv *CreateUserRequest_FieldTerminalPathValue) SetTo(target **CreateUserRequest) {
	if *target == nil {
		*target = new(CreateUserRequest)
	}
	switch fpv.selector {
	case CreateUserRequest_FieldPathSelectorUser:
		(*target).User = fpv.value.(*user.User)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateUserRequest: %d", fpv.selector))
	}
}

func (fpv *CreateUserRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateUserRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'CreateUserRequest_FieldTerminalPathValue' with the value under path in 'CreateUserRequest'.
func (fpv *CreateUserRequest_FieldTerminalPathValue) CompareWith(source *CreateUserRequest) (int, bool) {
	switch fpv.selector {
	case CreateUserRequest_FieldPathSelectorUser:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for CreateUserRequest: %d", fpv.selector))
	}
}

func (fpv *CreateUserRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*CreateUserRequest))
}

type CreateUserRequest_FieldSubPathValue struct {
	CreateUserRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ CreateUserRequest_FieldPathValue = (*CreateUserRequest_FieldSubPathValue)(nil)

func (fpvs *CreateUserRequest_FieldSubPathValue) AsUserPathValue() (user.User_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(user.User_FieldPathValue)
	return res, ok
}

func (fpvs *CreateUserRequest_FieldSubPathValue) SetTo(target **CreateUserRequest) {
	if *target == nil {
		*target = new(CreateUserRequest)
	}
	switch fpvs.Selector() {
	case CreateUserRequest_FieldPathSelectorUser:
		fpvs.subPathValue.(user.User_FieldPathValue).SetTo(&(*target).User)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateUserRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateUserRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateUserRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *CreateUserRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *CreateUserRequest_FieldSubPathValue) CompareWith(source *CreateUserRequest) (int, bool) {
	switch fpvs.Selector() {
	case CreateUserRequest_FieldPathSelectorUser:
		return fpvs.subPathValue.(user.User_FieldPathValue).CompareWith(source.GetUser())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateUserRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateUserRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*CreateUserRequest))
}

// CreateUserRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for CreateUserRequest according to their type
// Present only for array (repeated) types.
type CreateUserRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	CreateUserRequest_FieldPath
	ContainsValue(*CreateUserRequest) bool
}

// ParseCreateUserRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseCreateUserRequest_FieldPathArrayItemValue(pathStr, valueStr string) (CreateUserRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseCreateUserRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateUserRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(CreateUserRequest_FieldPathArrayItemValue), nil
}

func MustParseCreateUserRequest_FieldPathArrayItemValue(pathStr, valueStr string) CreateUserRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseCreateUserRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type CreateUserRequest_FieldTerminalPathArrayItemValue struct {
	CreateUserRequest_FieldTerminalPath
	value interface{}
}

var _ CreateUserRequest_FieldPathArrayItemValue = (*CreateUserRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object CreateUserRequest as interface{}
func (fpaiv *CreateUserRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *CreateUserRequest_FieldTerminalPathArrayItemValue) GetSingle(source *CreateUserRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *CreateUserRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*CreateUserRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateUserRequest'
func (fpaiv *CreateUserRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *CreateUserRequest) bool {
	slice := fpaiv.CreateUserRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type CreateUserRequest_FieldSubPathArrayItemValue struct {
	CreateUserRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *CreateUserRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *CreateUserRequest_FieldSubPathArrayItemValue) AsUserPathItemValue() (user.User_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(user.User_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateUserRequest'
func (fpaivs *CreateUserRequest_FieldSubPathArrayItemValue) ContainsValue(source *CreateUserRequest) bool {
	switch fpaivs.Selector() {
	case CreateUserRequest_FieldPathSelectorUser:
		return fpaivs.subPathItemValue.(user.User_FieldPathArrayItemValue).ContainsValue(source.GetUser())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateUserRequest: %d", fpaivs.Selector()))
	}
}

// CreateUserRequest_FieldPathArrayOfValues allows storing slice of values for CreateUserRequest fields according to their type
type CreateUserRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	CreateUserRequest_FieldPath
}

func ParseCreateUserRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (CreateUserRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseCreateUserRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateUserRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(CreateUserRequest_FieldPathArrayOfValues), nil
}

func MustParseCreateUserRequest_FieldPathArrayOfValues(pathStr, valuesStr string) CreateUserRequest_FieldPathArrayOfValues {
	fpaov, err := ParseCreateUserRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type CreateUserRequest_FieldTerminalPathArrayOfValues struct {
	CreateUserRequest_FieldTerminalPath
	values interface{}
}

var _ CreateUserRequest_FieldPathArrayOfValues = (*CreateUserRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *CreateUserRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case CreateUserRequest_FieldPathSelectorUser:
		for _, v := range fpaov.values.([]*user.User) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *CreateUserRequest_FieldTerminalPathArrayOfValues) AsUserArrayOfValues() ([]*user.User, bool) {
	res, ok := fpaov.values.([]*user.User)
	return res, ok
}

type CreateUserRequest_FieldSubPathArrayOfValues struct {
	CreateUserRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ CreateUserRequest_FieldPathArrayOfValues = (*CreateUserRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *CreateUserRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *CreateUserRequest_FieldSubPathArrayOfValues) AsUserPathArrayOfValues() (user.User_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(user.User_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateUserRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateUserRequest_FieldPathSelector
	Get(source *UpdateUserRequest) []interface{}
	GetSingle(source *UpdateUserRequest) (interface{}, bool)
	ClearValue(item *UpdateUserRequest)

	// Those methods build corresponding UpdateUserRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateUserRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateUserRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateUserRequest_FieldPathArrayItemValue
}

type UpdateUserRequest_FieldPathSelector int32

const (
	UpdateUserRequest_FieldPathSelectorUser       UpdateUserRequest_FieldPathSelector = 0
	UpdateUserRequest_FieldPathSelectorUpdateMask UpdateUserRequest_FieldPathSelector = 1
	UpdateUserRequest_FieldPathSelectorCas        UpdateUserRequest_FieldPathSelector = 2
)

func (s UpdateUserRequest_FieldPathSelector) String() string {
	switch s {
	case UpdateUserRequest_FieldPathSelectorUser:
		return "user"
	case UpdateUserRequest_FieldPathSelectorUpdateMask:
		return "update_mask"
	case UpdateUserRequest_FieldPathSelectorCas:
		return "cas"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateUserRequest: %d", s))
	}
}

func BuildUpdateUserRequest_FieldPath(fp gotenobject.RawFieldPath) (UpdateUserRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateUserRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "user":
			return &UpdateUserRequest_FieldTerminalPath{selector: UpdateUserRequest_FieldPathSelectorUser}, nil
		case "update_mask", "updateMask", "update-mask":
			return &UpdateUserRequest_FieldTerminalPath{selector: UpdateUserRequest_FieldPathSelectorUpdateMask}, nil
		case "cas":
			return &UpdateUserRequest_FieldTerminalPath{selector: UpdateUserRequest_FieldPathSelectorCas}, nil
		}
	} else {
		switch fp[0] {
		case "user":
			if subpath, err := user.BuildUser_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateUserRequest_FieldSubPath{selector: UpdateUserRequest_FieldPathSelectorUser, subPath: subpath}, nil
			}
		case "cas":
			if subpath, err := BuildUpdateUserRequestCAS_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateUserRequest_FieldSubPath{selector: UpdateUserRequest_FieldPathSelectorCas, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateUserRequest", fp)
}

func ParseUpdateUserRequest_FieldPath(rawField string) (UpdateUserRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateUserRequest_FieldPath(fp)
}

func MustParseUpdateUserRequest_FieldPath(rawField string) UpdateUserRequest_FieldPath {
	fp, err := ParseUpdateUserRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateUserRequest_FieldTerminalPath struct {
	selector UpdateUserRequest_FieldPathSelector
}

var _ UpdateUserRequest_FieldPath = (*UpdateUserRequest_FieldTerminalPath)(nil)

func (fp *UpdateUserRequest_FieldTerminalPath) Selector() UpdateUserRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateUserRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateUserRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateUserRequest
func (fp *UpdateUserRequest_FieldTerminalPath) Get(source *UpdateUserRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateUserRequest_FieldPathSelectorUser:
			if source.User != nil {
				values = append(values, source.User)
			}
		case UpdateUserRequest_FieldPathSelectorUpdateMask:
			if source.UpdateMask != nil {
				values = append(values, source.UpdateMask)
			}
		case UpdateUserRequest_FieldPathSelectorCas:
			if source.Cas != nil {
				values = append(values, source.Cas)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateUserRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateUserRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateUserRequest))
}

// GetSingle returns value pointed by specific field of from source UpdateUserRequest
func (fp *UpdateUserRequest_FieldTerminalPath) GetSingle(source *UpdateUserRequest) (interface{}, bool) {
	switch fp.selector {
	case UpdateUserRequest_FieldPathSelectorUser:
		res := source.GetUser()
		return res, res != nil
	case UpdateUserRequest_FieldPathSelectorUpdateMask:
		res := source.GetUpdateMask()
		return res, res != nil
	case UpdateUserRequest_FieldPathSelectorCas:
		res := source.GetCas()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateUserRequest: %d", fp.selector))
	}
}

func (fp *UpdateUserRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateUserRequest))
}

// GetDefault returns a default value of the field type
func (fp *UpdateUserRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateUserRequest_FieldPathSelectorUser:
		return (*user.User)(nil)
	case UpdateUserRequest_FieldPathSelectorUpdateMask:
		return (*user.User_FieldMask)(nil)
	case UpdateUserRequest_FieldPathSelectorCas:
		return (*UpdateUserRequest_CAS)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateUserRequest: %d", fp.selector))
	}
}

func (fp *UpdateUserRequest_FieldTerminalPath) ClearValue(item *UpdateUserRequest) {
	if item != nil {
		switch fp.selector {
		case UpdateUserRequest_FieldPathSelectorUser:
			item.User = nil
		case UpdateUserRequest_FieldPathSelectorUpdateMask:
			item.UpdateMask = nil
		case UpdateUserRequest_FieldPathSelectorCas:
			item.Cas = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateUserRequest: %d", fp.selector))
		}
	}
}

func (fp *UpdateUserRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateUserRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateUserRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateUserRequest_FieldPathSelectorUpdateMask
}

func (fp *UpdateUserRequest_FieldTerminalPath) WithIValue(value interface{}) UpdateUserRequest_FieldPathValue {
	switch fp.selector {
	case UpdateUserRequest_FieldPathSelectorUser:
		return &UpdateUserRequest_FieldTerminalPathValue{UpdateUserRequest_FieldTerminalPath: *fp, value: value.(*user.User)}
	case UpdateUserRequest_FieldPathSelectorUpdateMask:
		return &UpdateUserRequest_FieldTerminalPathValue{UpdateUserRequest_FieldTerminalPath: *fp, value: value.(*user.User_FieldMask)}
	case UpdateUserRequest_FieldPathSelectorCas:
		return &UpdateUserRequest_FieldTerminalPathValue{UpdateUserRequest_FieldTerminalPath: *fp, value: value.(*UpdateUserRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateUserRequest: %d", fp.selector))
	}
}

func (fp *UpdateUserRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateUserRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateUserRequest_FieldPathArrayOfValues {
	fpaov := &UpdateUserRequest_FieldTerminalPathArrayOfValues{UpdateUserRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateUserRequest_FieldPathSelectorUser:
		return &UpdateUserRequest_FieldTerminalPathArrayOfValues{UpdateUserRequest_FieldTerminalPath: *fp, values: values.([]*user.User)}
	case UpdateUserRequest_FieldPathSelectorUpdateMask:
		return &UpdateUserRequest_FieldTerminalPathArrayOfValues{UpdateUserRequest_FieldTerminalPath: *fp, values: values.([]*user.User_FieldMask)}
	case UpdateUserRequest_FieldPathSelectorCas:
		return &UpdateUserRequest_FieldTerminalPathArrayOfValues{UpdateUserRequest_FieldTerminalPath: *fp, values: values.([]*UpdateUserRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateUserRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateUserRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateUserRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateUserRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateUserRequest: %d", fp.selector))
	}
}

func (fp *UpdateUserRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateUserRequest_FieldSubPath struct {
	selector UpdateUserRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateUserRequest_FieldPath = (*UpdateUserRequest_FieldSubPath)(nil)

func (fps *UpdateUserRequest_FieldSubPath) Selector() UpdateUserRequest_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateUserRequest_FieldSubPath) AsUserSubPath() (user.User_FieldPath, bool) {
	res, ok := fps.subPath.(user.User_FieldPath)
	return res, ok
}
func (fps *UpdateUserRequest_FieldSubPath) AsCasSubPath() (UpdateUserRequestCAS_FieldPath, bool) {
	res, ok := fps.subPath.(UpdateUserRequestCAS_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateUserRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateUserRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateUserRequest
func (fps *UpdateUserRequest_FieldSubPath) Get(source *UpdateUserRequest) (values []interface{}) {
	if asUserFieldPath, ok := fps.AsUserSubPath(); ok {
		values = append(values, asUserFieldPath.Get(source.GetUser())...)
	} else if asCASFieldPath, ok := fps.AsCasSubPath(); ok {
		values = append(values, asCASFieldPath.Get(source.GetCas())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for UpdateUserRequest: %d", fps.selector))
	}
	return
}

func (fps *UpdateUserRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateUserRequest))
}

// GetSingle returns value of selected field from source UpdateUserRequest
func (fps *UpdateUserRequest_FieldSubPath) GetSingle(source *UpdateUserRequest) (interface{}, bool) {
	switch fps.selector {
	case UpdateUserRequest_FieldPathSelectorUser:
		if source.GetUser() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetUser())
	case UpdateUserRequest_FieldPathSelectorCas:
		if source.GetCas() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateUserRequest: %d", fps.selector))
	}
}

func (fps *UpdateUserRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateUserRequest))
}

// GetDefault returns a default value of the field type
func (fps *UpdateUserRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateUserRequest_FieldSubPath) ClearValue(item *UpdateUserRequest) {
	if item != nil {
		switch fps.selector {
		case UpdateUserRequest_FieldPathSelectorUser:
			fps.subPath.ClearValueRaw(item.User)
		case UpdateUserRequest_FieldPathSelectorCas:
			fps.subPath.ClearValueRaw(item.Cas)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateUserRequest: %d", fps.selector))
		}
	}
}

func (fps *UpdateUserRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateUserRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateUserRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateUserRequest_FieldSubPath) WithIValue(value interface{}) UpdateUserRequest_FieldPathValue {
	return &UpdateUserRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateUserRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateUserRequest_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateUserRequest_FieldPathArrayOfValues {
	return &UpdateUserRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateUserRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateUserRequest_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateUserRequest_FieldPathArrayItemValue {
	return &UpdateUserRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateUserRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateUserRequest_FieldPathValue allows storing values for UpdateUserRequest fields according to their type
type UpdateUserRequest_FieldPathValue interface {
	UpdateUserRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateUserRequest)
	CompareWith(*UpdateUserRequest) (cmp int, comparable bool)
}

func ParseUpdateUserRequest_FieldPathValue(pathStr, valueStr string) (UpdateUserRequest_FieldPathValue, error) {
	fp, err := ParseUpdateUserRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateUserRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateUserRequest_FieldPathValue), nil
}

func MustParseUpdateUserRequest_FieldPathValue(pathStr, valueStr string) UpdateUserRequest_FieldPathValue {
	fpv, err := ParseUpdateUserRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateUserRequest_FieldTerminalPathValue struct {
	UpdateUserRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateUserRequest_FieldPathValue = (*UpdateUserRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'UpdateUserRequest' as interface{}
func (fpv *UpdateUserRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateUserRequest_FieldTerminalPathValue) AsUserValue() (*user.User, bool) {
	res, ok := fpv.value.(*user.User)
	return res, ok
}
func (fpv *UpdateUserRequest_FieldTerminalPathValue) AsUpdateMaskValue() (*user.User_FieldMask, bool) {
	res, ok := fpv.value.(*user.User_FieldMask)
	return res, ok
}
func (fpv *UpdateUserRequest_FieldTerminalPathValue) AsCasValue() (*UpdateUserRequest_CAS, bool) {
	res, ok := fpv.value.(*UpdateUserRequest_CAS)
	return res, ok
}

// SetTo stores value for selected field for object UpdateUserRequest
func (fpv *UpdateUserRequest_FieldTerminalPathValue) SetTo(target **UpdateUserRequest) {
	if *target == nil {
		*target = new(UpdateUserRequest)
	}
	switch fpv.selector {
	case UpdateUserRequest_FieldPathSelectorUser:
		(*target).User = fpv.value.(*user.User)
	case UpdateUserRequest_FieldPathSelectorUpdateMask:
		(*target).UpdateMask = fpv.value.(*user.User_FieldMask)
	case UpdateUserRequest_FieldPathSelectorCas:
		(*target).Cas = fpv.value.(*UpdateUserRequest_CAS)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateUserRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateUserRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateUserRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateUserRequest_FieldTerminalPathValue' with the value under path in 'UpdateUserRequest'.
func (fpv *UpdateUserRequest_FieldTerminalPathValue) CompareWith(source *UpdateUserRequest) (int, bool) {
	switch fpv.selector {
	case UpdateUserRequest_FieldPathSelectorUser:
		return 0, false
	case UpdateUserRequest_FieldPathSelectorUpdateMask:
		return 0, false
	case UpdateUserRequest_FieldPathSelectorCas:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateUserRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateUserRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateUserRequest))
}

type UpdateUserRequest_FieldSubPathValue struct {
	UpdateUserRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateUserRequest_FieldPathValue = (*UpdateUserRequest_FieldSubPathValue)(nil)

func (fpvs *UpdateUserRequest_FieldSubPathValue) AsUserPathValue() (user.User_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(user.User_FieldPathValue)
	return res, ok
}
func (fpvs *UpdateUserRequest_FieldSubPathValue) AsCasPathValue() (UpdateUserRequestCAS_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(UpdateUserRequestCAS_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateUserRequest_FieldSubPathValue) SetTo(target **UpdateUserRequest) {
	if *target == nil {
		*target = new(UpdateUserRequest)
	}
	switch fpvs.Selector() {
	case UpdateUserRequest_FieldPathSelectorUser:
		fpvs.subPathValue.(user.User_FieldPathValue).SetTo(&(*target).User)
	case UpdateUserRequest_FieldPathSelectorCas:
		fpvs.subPathValue.(UpdateUserRequestCAS_FieldPathValue).SetTo(&(*target).Cas)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateUserRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateUserRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateUserRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateUserRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateUserRequest_FieldSubPathValue) CompareWith(source *UpdateUserRequest) (int, bool) {
	switch fpvs.Selector() {
	case UpdateUserRequest_FieldPathSelectorUser:
		return fpvs.subPathValue.(user.User_FieldPathValue).CompareWith(source.GetUser())
	case UpdateUserRequest_FieldPathSelectorCas:
		return fpvs.subPathValue.(UpdateUserRequestCAS_FieldPathValue).CompareWith(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateUserRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateUserRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateUserRequest))
}

// UpdateUserRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for UpdateUserRequest according to their type
// Present only for array (repeated) types.
type UpdateUserRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateUserRequest_FieldPath
	ContainsValue(*UpdateUserRequest) bool
}

// ParseUpdateUserRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateUserRequest_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateUserRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateUserRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateUserRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateUserRequest_FieldPathArrayItemValue), nil
}

func MustParseUpdateUserRequest_FieldPathArrayItemValue(pathStr, valueStr string) UpdateUserRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateUserRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateUserRequest_FieldTerminalPathArrayItemValue struct {
	UpdateUserRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateUserRequest_FieldPathArrayItemValue = (*UpdateUserRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateUserRequest as interface{}
func (fpaiv *UpdateUserRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateUserRequest_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateUserRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateUserRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateUserRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateUserRequest'
func (fpaiv *UpdateUserRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateUserRequest) bool {
	slice := fpaiv.UpdateUserRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateUserRequest_FieldSubPathArrayItemValue struct {
	UpdateUserRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateUserRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateUserRequest_FieldSubPathArrayItemValue) AsUserPathItemValue() (user.User_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(user.User_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *UpdateUserRequest_FieldSubPathArrayItemValue) AsCasPathItemValue() (UpdateUserRequestCAS_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(UpdateUserRequestCAS_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateUserRequest'
func (fpaivs *UpdateUserRequest_FieldSubPathArrayItemValue) ContainsValue(source *UpdateUserRequest) bool {
	switch fpaivs.Selector() {
	case UpdateUserRequest_FieldPathSelectorUser:
		return fpaivs.subPathItemValue.(user.User_FieldPathArrayItemValue).ContainsValue(source.GetUser())
	case UpdateUserRequest_FieldPathSelectorCas:
		return fpaivs.subPathItemValue.(UpdateUserRequestCAS_FieldPathArrayItemValue).ContainsValue(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateUserRequest: %d", fpaivs.Selector()))
	}
}

// UpdateUserRequest_FieldPathArrayOfValues allows storing slice of values for UpdateUserRequest fields according to their type
type UpdateUserRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateUserRequest_FieldPath
}

func ParseUpdateUserRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateUserRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateUserRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateUserRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateUserRequest_FieldPathArrayOfValues), nil
}

func MustParseUpdateUserRequest_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateUserRequest_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateUserRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateUserRequest_FieldTerminalPathArrayOfValues struct {
	UpdateUserRequest_FieldTerminalPath
	values interface{}
}

var _ UpdateUserRequest_FieldPathArrayOfValues = (*UpdateUserRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateUserRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateUserRequest_FieldPathSelectorUser:
		for _, v := range fpaov.values.([]*user.User) {
			values = append(values, v)
		}
	case UpdateUserRequest_FieldPathSelectorUpdateMask:
		for _, v := range fpaov.values.([]*user.User_FieldMask) {
			values = append(values, v)
		}
	case UpdateUserRequest_FieldPathSelectorCas:
		for _, v := range fpaov.values.([]*UpdateUserRequest_CAS) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateUserRequest_FieldTerminalPathArrayOfValues) AsUserArrayOfValues() ([]*user.User, bool) {
	res, ok := fpaov.values.([]*user.User)
	return res, ok
}
func (fpaov *UpdateUserRequest_FieldTerminalPathArrayOfValues) AsUpdateMaskArrayOfValues() ([]*user.User_FieldMask, bool) {
	res, ok := fpaov.values.([]*user.User_FieldMask)
	return res, ok
}
func (fpaov *UpdateUserRequest_FieldTerminalPathArrayOfValues) AsCasArrayOfValues() ([]*UpdateUserRequest_CAS, bool) {
	res, ok := fpaov.values.([]*UpdateUserRequest_CAS)
	return res, ok
}

type UpdateUserRequest_FieldSubPathArrayOfValues struct {
	UpdateUserRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateUserRequest_FieldPathArrayOfValues = (*UpdateUserRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateUserRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateUserRequest_FieldSubPathArrayOfValues) AsUserPathArrayOfValues() (user.User_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(user.User_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *UpdateUserRequest_FieldSubPathArrayOfValues) AsCasPathArrayOfValues() (UpdateUserRequestCAS_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(UpdateUserRequestCAS_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateUserRequestCAS_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateUserRequestCAS_FieldPathSelector
	Get(source *UpdateUserRequest_CAS) []interface{}
	GetSingle(source *UpdateUserRequest_CAS) (interface{}, bool)
	ClearValue(item *UpdateUserRequest_CAS)

	// Those methods build corresponding UpdateUserRequestCAS_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateUserRequestCAS_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateUserRequestCAS_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateUserRequestCAS_FieldPathArrayItemValue
}

type UpdateUserRequestCAS_FieldPathSelector int32

const (
	UpdateUserRequestCAS_FieldPathSelectorConditionalState UpdateUserRequestCAS_FieldPathSelector = 0
	UpdateUserRequestCAS_FieldPathSelectorFieldMask        UpdateUserRequestCAS_FieldPathSelector = 1
)

func (s UpdateUserRequestCAS_FieldPathSelector) String() string {
	switch s {
	case UpdateUserRequestCAS_FieldPathSelectorConditionalState:
		return "conditional_state"
	case UpdateUserRequestCAS_FieldPathSelectorFieldMask:
		return "field_mask"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateUserRequest_CAS: %d", s))
	}
}

func BuildUpdateUserRequestCAS_FieldPath(fp gotenobject.RawFieldPath) (UpdateUserRequestCAS_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateUserRequest_CAS")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			return &UpdateUserRequestCAS_FieldTerminalPath{selector: UpdateUserRequestCAS_FieldPathSelectorConditionalState}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &UpdateUserRequestCAS_FieldTerminalPath{selector: UpdateUserRequestCAS_FieldPathSelectorFieldMask}, nil
		}
	} else {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			if subpath, err := user.BuildUser_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateUserRequestCAS_FieldSubPath{selector: UpdateUserRequestCAS_FieldPathSelectorConditionalState, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateUserRequest_CAS", fp)
}

func ParseUpdateUserRequestCAS_FieldPath(rawField string) (UpdateUserRequestCAS_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateUserRequestCAS_FieldPath(fp)
}

func MustParseUpdateUserRequestCAS_FieldPath(rawField string) UpdateUserRequestCAS_FieldPath {
	fp, err := ParseUpdateUserRequestCAS_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateUserRequestCAS_FieldTerminalPath struct {
	selector UpdateUserRequestCAS_FieldPathSelector
}

var _ UpdateUserRequestCAS_FieldPath = (*UpdateUserRequestCAS_FieldTerminalPath)(nil)

func (fp *UpdateUserRequestCAS_FieldTerminalPath) Selector() UpdateUserRequestCAS_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateUserRequestCAS_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateUserRequestCAS_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateUserRequest_CAS
func (fp *UpdateUserRequestCAS_FieldTerminalPath) Get(source *UpdateUserRequest_CAS) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateUserRequestCAS_FieldPathSelectorConditionalState:
			if source.ConditionalState != nil {
				values = append(values, source.ConditionalState)
			}
		case UpdateUserRequestCAS_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateUserRequest_CAS: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateUserRequestCAS_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateUserRequest_CAS))
}

// GetSingle returns value pointed by specific field of from source UpdateUserRequest_CAS
func (fp *UpdateUserRequestCAS_FieldTerminalPath) GetSingle(source *UpdateUserRequest_CAS) (interface{}, bool) {
	switch fp.selector {
	case UpdateUserRequestCAS_FieldPathSelectorConditionalState:
		res := source.GetConditionalState()
		return res, res != nil
	case UpdateUserRequestCAS_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateUserRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateUserRequestCAS_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateUserRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fp *UpdateUserRequestCAS_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateUserRequestCAS_FieldPathSelectorConditionalState:
		return (*user.User)(nil)
	case UpdateUserRequestCAS_FieldPathSelectorFieldMask:
		return (*user.User_FieldMask)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateUserRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateUserRequestCAS_FieldTerminalPath) ClearValue(item *UpdateUserRequest_CAS) {
	if item != nil {
		switch fp.selector {
		case UpdateUserRequestCAS_FieldPathSelectorConditionalState:
			item.ConditionalState = nil
		case UpdateUserRequestCAS_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateUserRequest_CAS: %d", fp.selector))
		}
	}
}

func (fp *UpdateUserRequestCAS_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateUserRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateUserRequestCAS_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateUserRequestCAS_FieldPathSelectorFieldMask
}

func (fp *UpdateUserRequestCAS_FieldTerminalPath) WithIValue(value interface{}) UpdateUserRequestCAS_FieldPathValue {
	switch fp.selector {
	case UpdateUserRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateUserRequestCAS_FieldTerminalPathValue{UpdateUserRequestCAS_FieldTerminalPath: *fp, value: value.(*user.User)}
	case UpdateUserRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateUserRequestCAS_FieldTerminalPathValue{UpdateUserRequestCAS_FieldTerminalPath: *fp, value: value.(*user.User_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateUserRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateUserRequestCAS_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateUserRequestCAS_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateUserRequestCAS_FieldPathArrayOfValues {
	fpaov := &UpdateUserRequestCAS_FieldTerminalPathArrayOfValues{UpdateUserRequestCAS_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateUserRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateUserRequestCAS_FieldTerminalPathArrayOfValues{UpdateUserRequestCAS_FieldTerminalPath: *fp, values: values.([]*user.User)}
	case UpdateUserRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateUserRequestCAS_FieldTerminalPathArrayOfValues{UpdateUserRequestCAS_FieldTerminalPath: *fp, values: values.([]*user.User_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateUserRequest_CAS: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateUserRequestCAS_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateUserRequestCAS_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateUserRequestCAS_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateUserRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateUserRequestCAS_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateUserRequestCAS_FieldSubPath struct {
	selector UpdateUserRequestCAS_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateUserRequestCAS_FieldPath = (*UpdateUserRequestCAS_FieldSubPath)(nil)

func (fps *UpdateUserRequestCAS_FieldSubPath) Selector() UpdateUserRequestCAS_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateUserRequestCAS_FieldSubPath) AsConditionalStateSubPath() (user.User_FieldPath, bool) {
	res, ok := fps.subPath.(user.User_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateUserRequestCAS_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateUserRequestCAS_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateUserRequest_CAS
func (fps *UpdateUserRequestCAS_FieldSubPath) Get(source *UpdateUserRequest_CAS) (values []interface{}) {
	if asUserFieldPath, ok := fps.AsConditionalStateSubPath(); ok {
		values = append(values, asUserFieldPath.Get(source.GetConditionalState())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for UpdateUserRequest_CAS: %d", fps.selector))
	}
	return
}

func (fps *UpdateUserRequestCAS_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateUserRequest_CAS))
}

// GetSingle returns value of selected field from source UpdateUserRequest_CAS
func (fps *UpdateUserRequestCAS_FieldSubPath) GetSingle(source *UpdateUserRequest_CAS) (interface{}, bool) {
	switch fps.selector {
	case UpdateUserRequestCAS_FieldPathSelectorConditionalState:
		if source.GetConditionalState() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateUserRequest_CAS: %d", fps.selector))
	}
}

func (fps *UpdateUserRequestCAS_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateUserRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fps *UpdateUserRequestCAS_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateUserRequestCAS_FieldSubPath) ClearValue(item *UpdateUserRequest_CAS) {
	if item != nil {
		switch fps.selector {
		case UpdateUserRequestCAS_FieldPathSelectorConditionalState:
			fps.subPath.ClearValueRaw(item.ConditionalState)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateUserRequest_CAS: %d", fps.selector))
		}
	}
}

func (fps *UpdateUserRequestCAS_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateUserRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateUserRequestCAS_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateUserRequestCAS_FieldSubPath) WithIValue(value interface{}) UpdateUserRequestCAS_FieldPathValue {
	return &UpdateUserRequestCAS_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateUserRequestCAS_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateUserRequestCAS_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateUserRequestCAS_FieldPathArrayOfValues {
	return &UpdateUserRequestCAS_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateUserRequestCAS_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateUserRequestCAS_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateUserRequestCAS_FieldPathArrayItemValue {
	return &UpdateUserRequestCAS_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateUserRequestCAS_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateUserRequestCAS_FieldPathValue allows storing values for CAS fields according to their type
type UpdateUserRequestCAS_FieldPathValue interface {
	UpdateUserRequestCAS_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateUserRequest_CAS)
	CompareWith(*UpdateUserRequest_CAS) (cmp int, comparable bool)
}

func ParseUpdateUserRequestCAS_FieldPathValue(pathStr, valueStr string) (UpdateUserRequestCAS_FieldPathValue, error) {
	fp, err := ParseUpdateUserRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateUserRequestCAS_FieldPathValue), nil
}

func MustParseUpdateUserRequestCAS_FieldPathValue(pathStr, valueStr string) UpdateUserRequestCAS_FieldPathValue {
	fpv, err := ParseUpdateUserRequestCAS_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateUserRequestCAS_FieldTerminalPathValue struct {
	UpdateUserRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateUserRequestCAS_FieldPathValue = (*UpdateUserRequestCAS_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CAS' as interface{}
func (fpv *UpdateUserRequestCAS_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateUserRequestCAS_FieldTerminalPathValue) AsConditionalStateValue() (*user.User, bool) {
	res, ok := fpv.value.(*user.User)
	return res, ok
}
func (fpv *UpdateUserRequestCAS_FieldTerminalPathValue) AsFieldMaskValue() (*user.User_FieldMask, bool) {
	res, ok := fpv.value.(*user.User_FieldMask)
	return res, ok
}

// SetTo stores value for selected field for object CAS
func (fpv *UpdateUserRequestCAS_FieldTerminalPathValue) SetTo(target **UpdateUserRequest_CAS) {
	if *target == nil {
		*target = new(UpdateUserRequest_CAS)
	}
	switch fpv.selector {
	case UpdateUserRequestCAS_FieldPathSelectorConditionalState:
		(*target).ConditionalState = fpv.value.(*user.User)
	case UpdateUserRequestCAS_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*user.User_FieldMask)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateUserRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateUserRequestCAS_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateUserRequest_CAS)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateUserRequestCAS_FieldTerminalPathValue' with the value under path in 'UpdateUserRequest_CAS'.
func (fpv *UpdateUserRequestCAS_FieldTerminalPathValue) CompareWith(source *UpdateUserRequest_CAS) (int, bool) {
	switch fpv.selector {
	case UpdateUserRequestCAS_FieldPathSelectorConditionalState:
		return 0, false
	case UpdateUserRequestCAS_FieldPathSelectorFieldMask:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateUserRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateUserRequestCAS_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateUserRequest_CAS))
}

type UpdateUserRequestCAS_FieldSubPathValue struct {
	UpdateUserRequestCAS_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateUserRequestCAS_FieldPathValue = (*UpdateUserRequestCAS_FieldSubPathValue)(nil)

func (fpvs *UpdateUserRequestCAS_FieldSubPathValue) AsConditionalStatePathValue() (user.User_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(user.User_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateUserRequestCAS_FieldSubPathValue) SetTo(target **UpdateUserRequest_CAS) {
	if *target == nil {
		*target = new(UpdateUserRequest_CAS)
	}
	switch fpvs.Selector() {
	case UpdateUserRequestCAS_FieldPathSelectorConditionalState:
		fpvs.subPathValue.(user.User_FieldPathValue).SetTo(&(*target).ConditionalState)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateUserRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateUserRequestCAS_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateUserRequest_CAS)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateUserRequestCAS_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateUserRequestCAS_FieldSubPathValue) CompareWith(source *UpdateUserRequest_CAS) (int, bool) {
	switch fpvs.Selector() {
	case UpdateUserRequestCAS_FieldPathSelectorConditionalState:
		return fpvs.subPathValue.(user.User_FieldPathValue).CompareWith(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateUserRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateUserRequestCAS_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateUserRequest_CAS))
}

// UpdateUserRequestCAS_FieldPathArrayItemValue allows storing single item in Path-specific values for CAS according to their type
// Present only for array (repeated) types.
type UpdateUserRequestCAS_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateUserRequestCAS_FieldPath
	ContainsValue(*UpdateUserRequest_CAS) bool
}

// ParseUpdateUserRequestCAS_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateUserRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateUserRequestCAS_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateUserRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateUserRequestCAS_FieldPathArrayItemValue), nil
}

func MustParseUpdateUserRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) UpdateUserRequestCAS_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateUserRequestCAS_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateUserRequestCAS_FieldTerminalPathArrayItemValue struct {
	UpdateUserRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateUserRequestCAS_FieldPathArrayItemValue = (*UpdateUserRequestCAS_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateUserRequest_CAS as interface{}
func (fpaiv *UpdateUserRequestCAS_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateUserRequestCAS_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateUserRequest_CAS) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateUserRequestCAS_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateUserRequest_CAS))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaiv *UpdateUserRequestCAS_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateUserRequest_CAS) bool {
	slice := fpaiv.UpdateUserRequestCAS_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateUserRequestCAS_FieldSubPathArrayItemValue struct {
	UpdateUserRequestCAS_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateUserRequestCAS_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateUserRequestCAS_FieldSubPathArrayItemValue) AsConditionalStatePathItemValue() (user.User_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(user.User_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaivs *UpdateUserRequestCAS_FieldSubPathArrayItemValue) ContainsValue(source *UpdateUserRequest_CAS) bool {
	switch fpaivs.Selector() {
	case UpdateUserRequestCAS_FieldPathSelectorConditionalState:
		return fpaivs.subPathItemValue.(user.User_FieldPathArrayItemValue).ContainsValue(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateUserRequest_CAS: %d", fpaivs.Selector()))
	}
}

// UpdateUserRequestCAS_FieldPathArrayOfValues allows storing slice of values for CAS fields according to their type
type UpdateUserRequestCAS_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateUserRequestCAS_FieldPath
}

func ParseUpdateUserRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateUserRequestCAS_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateUserRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateUserRequestCAS_FieldPathArrayOfValues), nil
}

func MustParseUpdateUserRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateUserRequestCAS_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateUserRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateUserRequestCAS_FieldTerminalPathArrayOfValues struct {
	UpdateUserRequestCAS_FieldTerminalPath
	values interface{}
}

var _ UpdateUserRequestCAS_FieldPathArrayOfValues = (*UpdateUserRequestCAS_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateUserRequestCAS_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateUserRequestCAS_FieldPathSelectorConditionalState:
		for _, v := range fpaov.values.([]*user.User) {
			values = append(values, v)
		}
	case UpdateUserRequestCAS_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*user.User_FieldMask) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateUserRequestCAS_FieldTerminalPathArrayOfValues) AsConditionalStateArrayOfValues() ([]*user.User, bool) {
	res, ok := fpaov.values.([]*user.User)
	return res, ok
}
func (fpaov *UpdateUserRequestCAS_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*user.User_FieldMask, bool) {
	res, ok := fpaov.values.([]*user.User_FieldMask)
	return res, ok
}

type UpdateUserRequestCAS_FieldSubPathArrayOfValues struct {
	UpdateUserRequestCAS_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateUserRequestCAS_FieldPathArrayOfValues = (*UpdateUserRequestCAS_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateUserRequestCAS_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateUserRequestCAS_FieldSubPathArrayOfValues) AsConditionalStatePathArrayOfValues() (user.User_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(user.User_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeleteUserRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeleteUserRequest_FieldPathSelector
	Get(source *DeleteUserRequest) []interface{}
	GetSingle(source *DeleteUserRequest) (interface{}, bool)
	ClearValue(item *DeleteUserRequest)

	// Those methods build corresponding DeleteUserRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeleteUserRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) DeleteUserRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeleteUserRequest_FieldPathArrayItemValue
}

type DeleteUserRequest_FieldPathSelector int32

const (
	DeleteUserRequest_FieldPathSelectorName DeleteUserRequest_FieldPathSelector = 0
)

func (s DeleteUserRequest_FieldPathSelector) String() string {
	switch s {
	case DeleteUserRequest_FieldPathSelectorName:
		return "name"
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteUserRequest: %d", s))
	}
}

func BuildDeleteUserRequest_FieldPath(fp gotenobject.RawFieldPath) (DeleteUserRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object DeleteUserRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &DeleteUserRequest_FieldTerminalPath{selector: DeleteUserRequest_FieldPathSelectorName}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object DeleteUserRequest", fp)
}

func ParseDeleteUserRequest_FieldPath(rawField string) (DeleteUserRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeleteUserRequest_FieldPath(fp)
}

func MustParseDeleteUserRequest_FieldPath(rawField string) DeleteUserRequest_FieldPath {
	fp, err := ParseDeleteUserRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeleteUserRequest_FieldTerminalPath struct {
	selector DeleteUserRequest_FieldPathSelector
}

var _ DeleteUserRequest_FieldPath = (*DeleteUserRequest_FieldTerminalPath)(nil)

func (fp *DeleteUserRequest_FieldTerminalPath) Selector() DeleteUserRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeleteUserRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeleteUserRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source DeleteUserRequest
func (fp *DeleteUserRequest_FieldTerminalPath) Get(source *DeleteUserRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeleteUserRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteUserRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *DeleteUserRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*DeleteUserRequest))
}

// GetSingle returns value pointed by specific field of from source DeleteUserRequest
func (fp *DeleteUserRequest_FieldTerminalPath) GetSingle(source *DeleteUserRequest) (interface{}, bool) {
	switch fp.selector {
	case DeleteUserRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteUserRequest: %d", fp.selector))
	}
}

func (fp *DeleteUserRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*DeleteUserRequest))
}

// GetDefault returns a default value of the field type
func (fp *DeleteUserRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeleteUserRequest_FieldPathSelectorName:
		return (*user.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteUserRequest: %d", fp.selector))
	}
}

func (fp *DeleteUserRequest_FieldTerminalPath) ClearValue(item *DeleteUserRequest) {
	if item != nil {
		switch fp.selector {
		case DeleteUserRequest_FieldPathSelectorName:
			item.Name = nil
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteUserRequest: %d", fp.selector))
		}
	}
}

func (fp *DeleteUserRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*DeleteUserRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeleteUserRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeleteUserRequest_FieldPathSelectorName
}

func (fp *DeleteUserRequest_FieldTerminalPath) WithIValue(value interface{}) DeleteUserRequest_FieldPathValue {
	switch fp.selector {
	case DeleteUserRequest_FieldPathSelectorName:
		return &DeleteUserRequest_FieldTerminalPathValue{DeleteUserRequest_FieldTerminalPath: *fp, value: value.(*user.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteUserRequest: %d", fp.selector))
	}
}

func (fp *DeleteUserRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeleteUserRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeleteUserRequest_FieldPathArrayOfValues {
	fpaov := &DeleteUserRequest_FieldTerminalPathArrayOfValues{DeleteUserRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeleteUserRequest_FieldPathSelectorName:
		return &DeleteUserRequest_FieldTerminalPathArrayOfValues{DeleteUserRequest_FieldTerminalPath: *fp, values: values.([]*user.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteUserRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeleteUserRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeleteUserRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeleteUserRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteUserRequest: %d", fp.selector))
	}
}

func (fp *DeleteUserRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeleteUserRequest_FieldPathValue allows storing values for DeleteUserRequest fields according to their type
type DeleteUserRequest_FieldPathValue interface {
	DeleteUserRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **DeleteUserRequest)
	CompareWith(*DeleteUserRequest) (cmp int, comparable bool)
}

func ParseDeleteUserRequest_FieldPathValue(pathStr, valueStr string) (DeleteUserRequest_FieldPathValue, error) {
	fp, err := ParseDeleteUserRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteUserRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeleteUserRequest_FieldPathValue), nil
}

func MustParseDeleteUserRequest_FieldPathValue(pathStr, valueStr string) DeleteUserRequest_FieldPathValue {
	fpv, err := ParseDeleteUserRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeleteUserRequest_FieldTerminalPathValue struct {
	DeleteUserRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteUserRequest_FieldPathValue = (*DeleteUserRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'DeleteUserRequest' as interface{}
func (fpv *DeleteUserRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeleteUserRequest_FieldTerminalPathValue) AsNameValue() (*user.Reference, bool) {
	res, ok := fpv.value.(*user.Reference)
	return res, ok
}

// SetTo stores value for selected field for object DeleteUserRequest
func (fpv *DeleteUserRequest_FieldTerminalPathValue) SetTo(target **DeleteUserRequest) {
	if *target == nil {
		*target = new(DeleteUserRequest)
	}
	switch fpv.selector {
	case DeleteUserRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*user.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteUserRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteUserRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*DeleteUserRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeleteUserRequest_FieldTerminalPathValue' with the value under path in 'DeleteUserRequest'.
func (fpv *DeleteUserRequest_FieldTerminalPathValue) CompareWith(source *DeleteUserRequest) (int, bool) {
	switch fpv.selector {
	case DeleteUserRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*user.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteUserRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteUserRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*DeleteUserRequest))
}

// DeleteUserRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for DeleteUserRequest according to their type
// Present only for array (repeated) types.
type DeleteUserRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeleteUserRequest_FieldPath
	ContainsValue(*DeleteUserRequest) bool
}

// ParseDeleteUserRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeleteUserRequest_FieldPathArrayItemValue(pathStr, valueStr string) (DeleteUserRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseDeleteUserRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteUserRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeleteUserRequest_FieldPathArrayItemValue), nil
}

func MustParseDeleteUserRequest_FieldPathArrayItemValue(pathStr, valueStr string) DeleteUserRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseDeleteUserRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeleteUserRequest_FieldTerminalPathArrayItemValue struct {
	DeleteUserRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteUserRequest_FieldPathArrayItemValue = (*DeleteUserRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object DeleteUserRequest as interface{}
func (fpaiv *DeleteUserRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeleteUserRequest_FieldTerminalPathArrayItemValue) GetSingle(source *DeleteUserRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeleteUserRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*DeleteUserRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'DeleteUserRequest'
func (fpaiv *DeleteUserRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *DeleteUserRequest) bool {
	slice := fpaiv.DeleteUserRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeleteUserRequest_FieldPathArrayOfValues allows storing slice of values for DeleteUserRequest fields according to their type
type DeleteUserRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeleteUserRequest_FieldPath
}

func ParseDeleteUserRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (DeleteUserRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseDeleteUserRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteUserRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeleteUserRequest_FieldPathArrayOfValues), nil
}

func MustParseDeleteUserRequest_FieldPathArrayOfValues(pathStr, valuesStr string) DeleteUserRequest_FieldPathArrayOfValues {
	fpaov, err := ParseDeleteUserRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeleteUserRequest_FieldTerminalPathArrayOfValues struct {
	DeleteUserRequest_FieldTerminalPath
	values interface{}
}

var _ DeleteUserRequest_FieldPathArrayOfValues = (*DeleteUserRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeleteUserRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeleteUserRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*user.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeleteUserRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*user.Reference, bool) {
	res, ok := fpaov.values.([]*user.Reference)
	return res, ok
}
