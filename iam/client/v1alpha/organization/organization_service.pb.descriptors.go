// Code generated by protoc-gen-goten-client
// API: OrganizationService
// DO NOT EDIT!!!

package organization_client

import (
	"google.golang.org/protobuf/proto"

	gotenclient "github.com/cloudwan/goten-sdk/runtime/client"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha/organization"
	empty "github.com/golang/protobuf/ptypes/empty"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = proto.Message(nil)
	_ = gotenclient.MethodDescriptor(nil)
	_ = gotenresource.WildcardId
)

// make sure we're using proto imports
var (
	_ = &organization.Organization{}
	_ = &empty.Empty{}
)

var (
	descriptorsInitialized          bool
	organizationServiceDescriptor   *OrganizationServiceDescriptor
	getOrganizationDescriptor       *GetOrganizationDescriptor
	batchGetOrganizationsDescriptor *BatchGetOrganizationsDescriptor
	listOrganizationsDescriptor     *ListOrganizationsDescriptor
	watchOrganizationDescriptor     *WatchOrganizationDescriptor
	watchOrganizationsDescriptor    *WatchOrganizationsDescriptor
	createOrganizationDescriptor    *CreateOrganizationDescriptor
	updateOrganizationDescriptor    *UpdateOrganizationDescriptor
	deleteOrganizationDescriptor    *DeleteOrganizationDescriptor
	listMyOrganizationsDescriptor   *ListMyOrganizationsDescriptor
)

type GetOrganizationDescriptor struct{}

type GetOrganizationDescriptorClientMsgHandle struct{}

type GetOrganizationDescriptorServerMsgHandle struct{}

func (d *GetOrganizationDescriptor) NewEmptyClientMsg() proto.Message {
	return &GetOrganizationRequest{}
}

func (d *GetOrganizationDescriptor) NewEmptyServerMsg() proto.Message {
	return &organization.Organization{}
}

func (d *GetOrganizationDescriptor) IsUnary() bool {
	return true
}

func (d *GetOrganizationDescriptor) IsClientStream() bool {
	return false
}

func (d *GetOrganizationDescriptor) IsServerStream() bool {
	return false
}

func (d *GetOrganizationDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *GetOrganizationDescriptor) IsPluralSubject() bool {
	return false
}

func (d *GetOrganizationDescriptor) HasSubjectResource() bool {
	return true
}

func (d *GetOrganizationDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *GetOrganizationDescriptor) GetVerb() string {
	return "get"
}

func (d *GetOrganizationDescriptor) GetMethodName() string {
	return "GetOrganization"
}

func (d *GetOrganizationDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1alpha.OrganizationService/GetOrganization"
}

func (d *GetOrganizationDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha"
}

func (d *GetOrganizationDescriptor) GetApiName() string {
	return "OrganizationService"
}

func (d *GetOrganizationDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *GetOrganizationDescriptor) GetServiceVersion() string {
	return "v1alpha"
}

func (d *GetOrganizationDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return organizationServiceDescriptor
}

func (d *GetOrganizationDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return organization.GetDescriptor()
}

func (d *GetOrganizationDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetOrganizationDescriptorClientMsgHandle{}
}

func (d *GetOrganizationDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetOrganizationDescriptorServerMsgHandle{}
}

func (h *GetOrganizationDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetOrganizationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*GetOrganizationRequest) *organization.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*organization.Name)(nil)
}

func (h *GetOrganizationDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*GetOrganizationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*GetOrganizationRequest) []*organization.Name
	})
	if ok {
		return organization.OrganizationNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *GetOrganizationDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *GetOrganizationDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*organization.Organization)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*organization.Organization) *organization.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetName()
}

func (h *GetOrganizationDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*organization.Organization)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*organization.Organization) []*organization.Name
	})
	if ok {
		return organization.OrganizationNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *GetOrganizationDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func GetGetOrganizationDescriptor() *GetOrganizationDescriptor {
	return getOrganizationDescriptor
}

type BatchGetOrganizationsDescriptor struct{}

type BatchGetOrganizationsDescriptorClientMsgHandle struct{}

type BatchGetOrganizationsDescriptorServerMsgHandle struct{}

func (d *BatchGetOrganizationsDescriptor) NewEmptyClientMsg() proto.Message {
	return &BatchGetOrganizationsRequest{}
}

func (d *BatchGetOrganizationsDescriptor) NewEmptyServerMsg() proto.Message {
	return &BatchGetOrganizationsResponse{}
}

func (d *BatchGetOrganizationsDescriptor) IsUnary() bool {
	return true
}

func (d *BatchGetOrganizationsDescriptor) IsClientStream() bool {
	return false
}

func (d *BatchGetOrganizationsDescriptor) IsServerStream() bool {
	return false
}

func (d *BatchGetOrganizationsDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *BatchGetOrganizationsDescriptor) IsPluralSubject() bool {
	return true
}

func (d *BatchGetOrganizationsDescriptor) HasSubjectResource() bool {
	return true
}

func (d *BatchGetOrganizationsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *BatchGetOrganizationsDescriptor) GetVerb() string {
	return "batchGet"
}

func (d *BatchGetOrganizationsDescriptor) GetMethodName() string {
	return "BatchGetOrganizations"
}

func (d *BatchGetOrganizationsDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1alpha.OrganizationService/BatchGetOrganizations"
}

func (d *BatchGetOrganizationsDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha"
}

func (d *BatchGetOrganizationsDescriptor) GetApiName() string {
	return "OrganizationService"
}

func (d *BatchGetOrganizationsDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *BatchGetOrganizationsDescriptor) GetServiceVersion() string {
	return "v1alpha"
}

func (d *BatchGetOrganizationsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return organizationServiceDescriptor
}

func (d *BatchGetOrganizationsDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return organization.GetDescriptor()
}

func (d *BatchGetOrganizationsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetOrganizationsDescriptorClientMsgHandle{}
}

func (d *BatchGetOrganizationsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetOrganizationsDescriptorServerMsgHandle{}
}

func (h *BatchGetOrganizationsDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetOrganizationsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*BatchGetOrganizationsRequest) *organization.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetOrganizationsDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetOrganizationsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*BatchGetOrganizationsRequest) []*organization.Name
	})
	if ok {
		return organization.OrganizationNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	if refs := typedMsg.GetNames(); len(refs) > 0 {
		list := make(organization.OrganizationNameList, 0, len(refs))
		for _, ref := range refs {
			list = append(list, &ref.Name)
		}
		return list
	}
	return (organization.OrganizationNameList)(nil)
}

func (h *BatchGetOrganizationsDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *BatchGetOrganizationsDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetOrganizationsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*BatchGetOrganizationsResponse) *organization.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetOrganizationsDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetOrganizationsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*BatchGetOrganizationsResponse) []*organization.Name
	})
	if ok {
		return organization.OrganizationNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	resources := typedMsg.GetOrganizations()
	list := make(organization.OrganizationNameList, 0, len(resources))
	for _, res := range resources {
		list = append(list, res.GetName())
	}
	return list
}

func (h *BatchGetOrganizationsDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func GetBatchGetOrganizationsDescriptor() *BatchGetOrganizationsDescriptor {
	return batchGetOrganizationsDescriptor
}

type ListOrganizationsDescriptor struct{}

type ListOrganizationsDescriptorClientMsgHandle struct{}

type ListOrganizationsDescriptorServerMsgHandle struct{}

func (d *ListOrganizationsDescriptor) NewEmptyClientMsg() proto.Message {
	return &ListOrganizationsRequest{}
}

func (d *ListOrganizationsDescriptor) NewEmptyServerMsg() proto.Message {
	return &ListOrganizationsResponse{}
}

func (d *ListOrganizationsDescriptor) IsUnary() bool {
	return true
}

func (d *ListOrganizationsDescriptor) IsClientStream() bool {
	return false
}

func (d *ListOrganizationsDescriptor) IsServerStream() bool {
	return false
}

func (d *ListOrganizationsDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *ListOrganizationsDescriptor) IsPluralSubject() bool {
	return true
}

func (d *ListOrganizationsDescriptor) HasSubjectResource() bool {
	return true
}

func (d *ListOrganizationsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ListOrganizationsDescriptor) GetVerb() string {
	return "list"
}

func (d *ListOrganizationsDescriptor) GetMethodName() string {
	return "ListOrganizations"
}

func (d *ListOrganizationsDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1alpha.OrganizationService/ListOrganizations"
}

func (d *ListOrganizationsDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha"
}

func (d *ListOrganizationsDescriptor) GetApiName() string {
	return "OrganizationService"
}

func (d *ListOrganizationsDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *ListOrganizationsDescriptor) GetServiceVersion() string {
	return "v1alpha"
}

func (d *ListOrganizationsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return organizationServiceDescriptor
}

func (d *ListOrganizationsDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return organization.GetDescriptor()
}

func (d *ListOrganizationsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListOrganizationsDescriptorClientMsgHandle{}
}

func (d *ListOrganizationsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListOrganizationsDescriptorServerMsgHandle{}
}

func (h *ListOrganizationsDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListOrganizationsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*ListOrganizationsRequest) *organization.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *ListOrganizationsDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListOrganizationsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*ListOrganizationsRequest) []*organization.Name
	})
	if ok {
		return organization.OrganizationNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *ListOrganizationsDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *ListOrganizationsDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListOrganizationsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*ListOrganizationsResponse) *organization.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *ListOrganizationsDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListOrganizationsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*ListOrganizationsResponse) []*organization.Name
	})
	if ok {
		return organization.OrganizationNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	resources := typedMsg.GetOrganizations()
	list := make(organization.OrganizationNameList, 0, len(resources))
	for _, res := range resources {
		list = append(list, res.GetName())
	}
	return list
}

func (h *ListOrganizationsDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func GetListOrganizationsDescriptor() *ListOrganizationsDescriptor {
	return listOrganizationsDescriptor
}

type WatchOrganizationDescriptor struct{}

type WatchOrganizationDescriptorClientMsgHandle struct{}

type WatchOrganizationDescriptorServerMsgHandle struct{}

func (d *WatchOrganizationDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchOrganizationRequest{}
}

func (d *WatchOrganizationDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchOrganizationResponse{}
}

func (d *WatchOrganizationDescriptor) IsUnary() bool {
	return false
}

func (d *WatchOrganizationDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchOrganizationDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchOrganizationDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *WatchOrganizationDescriptor) IsPluralSubject() bool {
	return false
}

func (d *WatchOrganizationDescriptor) HasSubjectResource() bool {
	return true
}

func (d *WatchOrganizationDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchOrganizationDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchOrganizationDescriptor) GetMethodName() string {
	return "WatchOrganization"
}

func (d *WatchOrganizationDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1alpha.OrganizationService/WatchOrganization"
}

func (d *WatchOrganizationDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha"
}

func (d *WatchOrganizationDescriptor) GetApiName() string {
	return "OrganizationService"
}

func (d *WatchOrganizationDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *WatchOrganizationDescriptor) GetServiceVersion() string {
	return "v1alpha"
}

func (d *WatchOrganizationDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return organizationServiceDescriptor
}

func (d *WatchOrganizationDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return organization.GetDescriptor()
}

func (d *WatchOrganizationDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchOrganizationDescriptorClientMsgHandle{}
}

func (d *WatchOrganizationDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchOrganizationDescriptorServerMsgHandle{}
}

func (h *WatchOrganizationDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchOrganizationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchOrganizationRequest) *organization.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*organization.Name)(nil)
}

func (h *WatchOrganizationDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchOrganizationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchOrganizationRequest) []*organization.Name
	})
	if ok {
		return organization.OrganizationNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchOrganizationDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *WatchOrganizationDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchOrganizationResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchOrganizationResponse) *organization.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if typedMsg.GetChange() != nil {
		switch tResChange := typedMsg.GetChange().ChangeType.(type) {
		case *organization.OrganizationChange_Added_:
			return tResChange.Added.GetOrganization().GetName()
		case *organization.OrganizationChange_Modified_:
			return tResChange.Modified.GetName()
		case *organization.OrganizationChange_Removed_:
			return tResChange.Removed.GetName()
		case *organization.OrganizationChange_Current_:
			return tResChange.Current.GetOrganization().GetName()
		}
	}
	return (*organization.Name)(nil)
}

func (h *WatchOrganizationDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchOrganizationResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchOrganizationResponse) []*organization.Name
	})
	if ok {
		return organization.OrganizationNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchOrganizationDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func GetWatchOrganizationDescriptor() *WatchOrganizationDescriptor {
	return watchOrganizationDescriptor
}

type WatchOrganizationsDescriptor struct{}

type WatchOrganizationsDescriptorClientMsgHandle struct{}

type WatchOrganizationsDescriptorServerMsgHandle struct{}

func (d *WatchOrganizationsDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchOrganizationsRequest{}
}

func (d *WatchOrganizationsDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchOrganizationsResponse{}
}

func (d *WatchOrganizationsDescriptor) IsUnary() bool {
	return false
}

func (d *WatchOrganizationsDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchOrganizationsDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchOrganizationsDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *WatchOrganizationsDescriptor) IsPluralSubject() bool {
	return true
}

func (d *WatchOrganizationsDescriptor) HasSubjectResource() bool {
	return true
}

func (d *WatchOrganizationsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchOrganizationsDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchOrganizationsDescriptor) GetMethodName() string {
	return "WatchOrganizations"
}

func (d *WatchOrganizationsDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1alpha.OrganizationService/WatchOrganizations"
}

func (d *WatchOrganizationsDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha"
}

func (d *WatchOrganizationsDescriptor) GetApiName() string {
	return "OrganizationService"
}

func (d *WatchOrganizationsDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *WatchOrganizationsDescriptor) GetServiceVersion() string {
	return "v1alpha"
}

func (d *WatchOrganizationsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return organizationServiceDescriptor
}

func (d *WatchOrganizationsDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return organization.GetDescriptor()
}

func (d *WatchOrganizationsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchOrganizationsDescriptorClientMsgHandle{}
}

func (d *WatchOrganizationsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchOrganizationsDescriptorServerMsgHandle{}
}

func (h *WatchOrganizationsDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchOrganizationsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchOrganizationsRequest) *organization.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *WatchOrganizationsDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchOrganizationsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchOrganizationsRequest) []*organization.Name
	})
	if ok {
		return organization.OrganizationNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchOrganizationsDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *WatchOrganizationsDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchOrganizationsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchOrganizationsResponse) *organization.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *WatchOrganizationsDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchOrganizationsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchOrganizationsResponse) []*organization.Name
	})
	if ok {
		return organization.OrganizationNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	resourceChanges := typedMsg.GetOrganizationChanges()
	list := make(organization.OrganizationNameList, 0, len(resourceChanges))
	for _, resChange := range resourceChanges {
		switch tResChange := resChange.ChangeType.(type) {
		case *organization.OrganizationChange_Added_:
			list = append(list, tResChange.Added.GetOrganization().GetName())
		case *organization.OrganizationChange_Modified_:
			list = append(list, tResChange.Modified.GetName())
		case *organization.OrganizationChange_Removed_:
			list = append(list, tResChange.Removed.GetName())
		case *organization.OrganizationChange_Current_:
			list = append(list, tResChange.Current.GetOrganization().GetName())
		}
	}
	return list
}

func (h *WatchOrganizationsDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func GetWatchOrganizationsDescriptor() *WatchOrganizationsDescriptor {
	return watchOrganizationsDescriptor
}

type CreateOrganizationDescriptor struct{}

type CreateOrganizationDescriptorClientMsgHandle struct{}

type CreateOrganizationDescriptorServerMsgHandle struct{}

func (d *CreateOrganizationDescriptor) NewEmptyClientMsg() proto.Message {
	return &CreateOrganizationRequest{}
}

func (d *CreateOrganizationDescriptor) NewEmptyServerMsg() proto.Message {
	return &organization.Organization{}
}

func (d *CreateOrganizationDescriptor) IsUnary() bool {
	return true
}

func (d *CreateOrganizationDescriptor) IsClientStream() bool {
	return false
}

func (d *CreateOrganizationDescriptor) IsServerStream() bool {
	return false
}

func (d *CreateOrganizationDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *CreateOrganizationDescriptor) IsPluralSubject() bool {
	return false
}

func (d *CreateOrganizationDescriptor) HasSubjectResource() bool {
	return true
}

func (d *CreateOrganizationDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *CreateOrganizationDescriptor) GetVerb() string {
	return "create"
}

func (d *CreateOrganizationDescriptor) GetMethodName() string {
	return "CreateOrganization"
}

func (d *CreateOrganizationDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1alpha.OrganizationService/CreateOrganization"
}

func (d *CreateOrganizationDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha"
}

func (d *CreateOrganizationDescriptor) GetApiName() string {
	return "OrganizationService"
}

func (d *CreateOrganizationDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *CreateOrganizationDescriptor) GetServiceVersion() string {
	return "v1alpha"
}

func (d *CreateOrganizationDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return organizationServiceDescriptor
}

func (d *CreateOrganizationDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return organization.GetDescriptor()
}

func (d *CreateOrganizationDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateOrganizationDescriptorClientMsgHandle{}
}

func (d *CreateOrganizationDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateOrganizationDescriptorServerMsgHandle{}
}

func (h *CreateOrganizationDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateOrganizationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*CreateOrganizationRequest) *organization.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetOrganization().GetName()
}

func (h *CreateOrganizationDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*CreateOrganizationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*CreateOrganizationRequest) []*organization.Name
	})
	if ok {
		return organization.OrganizationNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateOrganizationDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *CreateOrganizationDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*organization.Organization)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*organization.Organization) *organization.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetName()
}

func (h *CreateOrganizationDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*organization.Organization)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*organization.Organization) []*organization.Name
	})
	if ok {
		return organization.OrganizationNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateOrganizationDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func GetCreateOrganizationDescriptor() *CreateOrganizationDescriptor {
	return createOrganizationDescriptor
}

type UpdateOrganizationDescriptor struct{}

type UpdateOrganizationDescriptorClientMsgHandle struct{}

type UpdateOrganizationDescriptorServerMsgHandle struct{}

func (d *UpdateOrganizationDescriptor) NewEmptyClientMsg() proto.Message {
	return &UpdateOrganizationRequest{}
}

func (d *UpdateOrganizationDescriptor) NewEmptyServerMsg() proto.Message {
	return &organization.Organization{}
}

func (d *UpdateOrganizationDescriptor) IsUnary() bool {
	return true
}

func (d *UpdateOrganizationDescriptor) IsClientStream() bool {
	return false
}

func (d *UpdateOrganizationDescriptor) IsServerStream() bool {
	return false
}

func (d *UpdateOrganizationDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *UpdateOrganizationDescriptor) IsPluralSubject() bool {
	return false
}

func (d *UpdateOrganizationDescriptor) HasSubjectResource() bool {
	return true
}

func (d *UpdateOrganizationDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *UpdateOrganizationDescriptor) GetVerb() string {
	return "update"
}

func (d *UpdateOrganizationDescriptor) GetMethodName() string {
	return "UpdateOrganization"
}

func (d *UpdateOrganizationDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1alpha.OrganizationService/UpdateOrganization"
}

func (d *UpdateOrganizationDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha"
}

func (d *UpdateOrganizationDescriptor) GetApiName() string {
	return "OrganizationService"
}

func (d *UpdateOrganizationDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *UpdateOrganizationDescriptor) GetServiceVersion() string {
	return "v1alpha"
}

func (d *UpdateOrganizationDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return organizationServiceDescriptor
}

func (d *UpdateOrganizationDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return organization.GetDescriptor()
}

func (d *UpdateOrganizationDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateOrganizationDescriptorClientMsgHandle{}
}

func (d *UpdateOrganizationDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateOrganizationDescriptorServerMsgHandle{}
}

func (h *UpdateOrganizationDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateOrganizationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*UpdateOrganizationRequest) *organization.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetOrganization().GetName()
}

func (h *UpdateOrganizationDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*UpdateOrganizationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*UpdateOrganizationRequest) []*organization.Name
	})
	if ok {
		return organization.OrganizationNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateOrganizationDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *UpdateOrganizationDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*organization.Organization)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*organization.Organization) *organization.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetName()
}

func (h *UpdateOrganizationDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*organization.Organization)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*organization.Organization) []*organization.Name
	})
	if ok {
		return organization.OrganizationNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateOrganizationDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func GetUpdateOrganizationDescriptor() *UpdateOrganizationDescriptor {
	return updateOrganizationDescriptor
}

type DeleteOrganizationDescriptor struct{}

type DeleteOrganizationDescriptorClientMsgHandle struct{}

type DeleteOrganizationDescriptorServerMsgHandle struct{}

func (d *DeleteOrganizationDescriptor) NewEmptyClientMsg() proto.Message {
	return &DeleteOrganizationRequest{}
}

func (d *DeleteOrganizationDescriptor) NewEmptyServerMsg() proto.Message {
	return &empty.Empty{}
}

func (d *DeleteOrganizationDescriptor) IsUnary() bool {
	return true
}

func (d *DeleteOrganizationDescriptor) IsClientStream() bool {
	return false
}

func (d *DeleteOrganizationDescriptor) IsServerStream() bool {
	return false
}

func (d *DeleteOrganizationDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *DeleteOrganizationDescriptor) IsPluralSubject() bool {
	return false
}

func (d *DeleteOrganizationDescriptor) HasSubjectResource() bool {
	return true
}

func (d *DeleteOrganizationDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *DeleteOrganizationDescriptor) GetVerb() string {
	return "delete"
}

func (d *DeleteOrganizationDescriptor) GetMethodName() string {
	return "DeleteOrganization"
}

func (d *DeleteOrganizationDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1alpha.OrganizationService/DeleteOrganization"
}

func (d *DeleteOrganizationDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha"
}

func (d *DeleteOrganizationDescriptor) GetApiName() string {
	return "OrganizationService"
}

func (d *DeleteOrganizationDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *DeleteOrganizationDescriptor) GetServiceVersion() string {
	return "v1alpha"
}

func (d *DeleteOrganizationDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return organizationServiceDescriptor
}

func (d *DeleteOrganizationDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return organization.GetDescriptor()
}

func (d *DeleteOrganizationDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteOrganizationDescriptorClientMsgHandle{}
}

func (d *DeleteOrganizationDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteOrganizationDescriptorServerMsgHandle{}
}

func (h *DeleteOrganizationDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteOrganizationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*DeleteOrganizationRequest) *organization.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*organization.Name)(nil)
}

func (h *DeleteOrganizationDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*DeleteOrganizationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*DeleteOrganizationRequest) []*organization.Name
	})
	if ok {
		return organization.OrganizationNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteOrganizationDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *DeleteOrganizationDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*empty.Empty) *organization.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *DeleteOrganizationDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*empty.Empty) []*organization.Name
	})
	if ok {
		return organization.OrganizationNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteOrganizationDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func GetDeleteOrganizationDescriptor() *DeleteOrganizationDescriptor {
	return deleteOrganizationDescriptor
}

type ListMyOrganizationsDescriptor struct{}

type ListMyOrganizationsDescriptorClientMsgHandle struct{}

type ListMyOrganizationsDescriptorServerMsgHandle struct{}

func (d *ListMyOrganizationsDescriptor) NewEmptyClientMsg() proto.Message {
	return &ListMyOrganizationsRequest{}
}

func (d *ListMyOrganizationsDescriptor) NewEmptyServerMsg() proto.Message {
	return &ListMyOrganizationsResponse{}
}

func (d *ListMyOrganizationsDescriptor) IsUnary() bool {
	return true
}

func (d *ListMyOrganizationsDescriptor) IsClientStream() bool {
	return false
}

func (d *ListMyOrganizationsDescriptor) IsServerStream() bool {
	return false
}

func (d *ListMyOrganizationsDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *ListMyOrganizationsDescriptor) IsPluralSubject() bool {
	return true
}

func (d *ListMyOrganizationsDescriptor) HasSubjectResource() bool {
	return true
}

func (d *ListMyOrganizationsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ListMyOrganizationsDescriptor) GetVerb() string {
	return "listMy"
}

func (d *ListMyOrganizationsDescriptor) GetMethodName() string {
	return "ListMyOrganizations"
}

func (d *ListMyOrganizationsDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1alpha.OrganizationService/ListMyOrganizations"
}

func (d *ListMyOrganizationsDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha"
}

func (d *ListMyOrganizationsDescriptor) GetApiName() string {
	return "OrganizationService"
}

func (d *ListMyOrganizationsDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *ListMyOrganizationsDescriptor) GetServiceVersion() string {
	return "v1alpha"
}

func (d *ListMyOrganizationsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return organizationServiceDescriptor
}

func (d *ListMyOrganizationsDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return organization.GetDescriptor()
}

func (d *ListMyOrganizationsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListMyOrganizationsDescriptorClientMsgHandle{}
}

func (d *ListMyOrganizationsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListMyOrganizationsDescriptorServerMsgHandle{}
}

func (h *ListMyOrganizationsDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListMyOrganizationsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*ListMyOrganizationsRequest) *organization.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *ListMyOrganizationsDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListMyOrganizationsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*ListMyOrganizationsRequest) []*organization.Name
	})
	if ok {
		return organization.OrganizationNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *ListMyOrganizationsDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *ListMyOrganizationsDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListMyOrganizationsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*ListMyOrganizationsResponse) *organization.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *ListMyOrganizationsDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListMyOrganizationsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*ListMyOrganizationsResponse) []*organization.Name
	})
	if ok {
		return organization.OrganizationNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	resources := typedMsg.GetOrganizations()
	list := make(organization.OrganizationNameList, 0, len(resources))
	for _, res := range resources {
		list = append(list, res.GetName())
	}
	return list
}

func (h *ListMyOrganizationsDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func GetListMyOrganizationsDescriptor() *ListMyOrganizationsDescriptor {
	return listMyOrganizationsDescriptor
}

type OrganizationServiceDescriptor struct{}

func (d *OrganizationServiceDescriptor) AllMethodDescriptors() []gotenclient.MethodDescriptor {
	return []gotenclient.MethodDescriptor{
		getOrganizationDescriptor,
		batchGetOrganizationsDescriptor,
		listOrganizationsDescriptor,
		watchOrganizationDescriptor,
		watchOrganizationsDescriptor,
		createOrganizationDescriptor,
		updateOrganizationDescriptor,
		deleteOrganizationDescriptor,
		listMyOrganizationsDescriptor,
	}
}

func (d *OrganizationServiceDescriptor) GetFullAPIName() string {
	return "/ntt.iam.v1alpha.OrganizationService"
}

func (d *OrganizationServiceDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha"
}

func (d *OrganizationServiceDescriptor) GetApiName() string {
	return "OrganizationService"
}

func (d *OrganizationServiceDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *OrganizationServiceDescriptor) GetServiceVersion() string {
	return "v1alpha"
}

func GetOrganizationServiceDescriptor() *OrganizationServiceDescriptor {
	return organizationServiceDescriptor
}

func initDescriptors() {
	organizationServiceDescriptor = &OrganizationServiceDescriptor{}
	getOrganizationDescriptor = &GetOrganizationDescriptor{}
	batchGetOrganizationsDescriptor = &BatchGetOrganizationsDescriptor{}
	listOrganizationsDescriptor = &ListOrganizationsDescriptor{}
	watchOrganizationDescriptor = &WatchOrganizationDescriptor{}
	watchOrganizationsDescriptor = &WatchOrganizationsDescriptor{}
	createOrganizationDescriptor = &CreateOrganizationDescriptor{}
	updateOrganizationDescriptor = &UpdateOrganizationDescriptor{}
	deleteOrganizationDescriptor = &DeleteOrganizationDescriptor{}
	listMyOrganizationsDescriptor = &ListMyOrganizationsDescriptor{}
	gotenclient.GetRegistry().RegisterApiDescriptor(organizationServiceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(getOrganizationDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(batchGetOrganizationsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(listOrganizationsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchOrganizationDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchOrganizationsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(createOrganizationDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(updateOrganizationDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(deleteOrganizationDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(listMyOrganizationsDescriptor)
}

func init() {
	if !descriptorsInitialized {
		initDescriptors()
		descriptorsInitialized = true
	}
}
