// Code generated by protoc-gen-goten-object
// File: edgelq/iam/proto/v1alpha/group_member_service.proto
// DO NOT EDIT!!!

package group_member_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	group "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha/group"
	group_member "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha/group_member"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	empty "github.com/golang/protobuf/ptypes/empty"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = json.Marshaler(nil)
	_ = fmt.Stringer(nil)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = proto.Message(nil)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &group.Group{}
	_ = &group_member.GroupMember{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type GetGroupMemberRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() GetGroupMemberRequest_FieldPathSelector
	Get(source *GetGroupMemberRequest) []interface{}
	GetSingle(source *GetGroupMemberRequest) (interface{}, bool)
	ClearValue(item *GetGroupMemberRequest)

	// Those methods build corresponding GetGroupMemberRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) GetGroupMemberRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) GetGroupMemberRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) GetGroupMemberRequest_FieldPathArrayItemValue
}

type GetGroupMemberRequest_FieldPathSelector int32

const (
	GetGroupMemberRequest_FieldPathSelectorName      GetGroupMemberRequest_FieldPathSelector = 0
	GetGroupMemberRequest_FieldPathSelectorFieldMask GetGroupMemberRequest_FieldPathSelector = 1
	GetGroupMemberRequest_FieldPathSelectorView      GetGroupMemberRequest_FieldPathSelector = 2
)

func (s GetGroupMemberRequest_FieldPathSelector) String() string {
	switch s {
	case GetGroupMemberRequest_FieldPathSelectorName:
		return "name"
	case GetGroupMemberRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case GetGroupMemberRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for GetGroupMemberRequest: %d", s))
	}
}

func BuildGetGroupMemberRequest_FieldPath(fp gotenobject.RawFieldPath) (GetGroupMemberRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object GetGroupMemberRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &GetGroupMemberRequest_FieldTerminalPath{selector: GetGroupMemberRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &GetGroupMemberRequest_FieldTerminalPath{selector: GetGroupMemberRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &GetGroupMemberRequest_FieldTerminalPath{selector: GetGroupMemberRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object GetGroupMemberRequest", fp)
}

func ParseGetGroupMemberRequest_FieldPath(rawField string) (GetGroupMemberRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildGetGroupMemberRequest_FieldPath(fp)
}

func MustParseGetGroupMemberRequest_FieldPath(rawField string) GetGroupMemberRequest_FieldPath {
	fp, err := ParseGetGroupMemberRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type GetGroupMemberRequest_FieldTerminalPath struct {
	selector GetGroupMemberRequest_FieldPathSelector
}

var _ GetGroupMemberRequest_FieldPath = (*GetGroupMemberRequest_FieldTerminalPath)(nil)

func (fp *GetGroupMemberRequest_FieldTerminalPath) Selector() GetGroupMemberRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *GetGroupMemberRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *GetGroupMemberRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source GetGroupMemberRequest
func (fp *GetGroupMemberRequest_FieldTerminalPath) Get(source *GetGroupMemberRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case GetGroupMemberRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case GetGroupMemberRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case GetGroupMemberRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for GetGroupMemberRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *GetGroupMemberRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*GetGroupMemberRequest))
}

// GetSingle returns value pointed by specific field of from source GetGroupMemberRequest
func (fp *GetGroupMemberRequest_FieldTerminalPath) GetSingle(source *GetGroupMemberRequest) (interface{}, bool) {
	switch fp.selector {
	case GetGroupMemberRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case GetGroupMemberRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case GetGroupMemberRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for GetGroupMemberRequest: %d", fp.selector))
	}
}

func (fp *GetGroupMemberRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*GetGroupMemberRequest))
}

// GetDefault returns a default value of the field type
func (fp *GetGroupMemberRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case GetGroupMemberRequest_FieldPathSelectorName:
		return (*group_member.Reference)(nil)
	case GetGroupMemberRequest_FieldPathSelectorFieldMask:
		return (*group_member.GroupMember_FieldMask)(nil)
	case GetGroupMemberRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for GetGroupMemberRequest: %d", fp.selector))
	}
}

func (fp *GetGroupMemberRequest_FieldTerminalPath) ClearValue(item *GetGroupMemberRequest) {
	if item != nil {
		switch fp.selector {
		case GetGroupMemberRequest_FieldPathSelectorName:
			item.Name = nil
		case GetGroupMemberRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case GetGroupMemberRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for GetGroupMemberRequest: %d", fp.selector))
		}
	}
}

func (fp *GetGroupMemberRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*GetGroupMemberRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *GetGroupMemberRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == GetGroupMemberRequest_FieldPathSelectorName ||
		fp.selector == GetGroupMemberRequest_FieldPathSelectorFieldMask ||
		fp.selector == GetGroupMemberRequest_FieldPathSelectorView
}

func (fp *GetGroupMemberRequest_FieldTerminalPath) WithIValue(value interface{}) GetGroupMemberRequest_FieldPathValue {
	switch fp.selector {
	case GetGroupMemberRequest_FieldPathSelectorName:
		return &GetGroupMemberRequest_FieldTerminalPathValue{GetGroupMemberRequest_FieldTerminalPath: *fp, value: value.(*group_member.Reference)}
	case GetGroupMemberRequest_FieldPathSelectorFieldMask:
		return &GetGroupMemberRequest_FieldTerminalPathValue{GetGroupMemberRequest_FieldTerminalPath: *fp, value: value.(*group_member.GroupMember_FieldMask)}
	case GetGroupMemberRequest_FieldPathSelectorView:
		return &GetGroupMemberRequest_FieldTerminalPathValue{GetGroupMemberRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetGroupMemberRequest: %d", fp.selector))
	}
}

func (fp *GetGroupMemberRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *GetGroupMemberRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) GetGroupMemberRequest_FieldPathArrayOfValues {
	fpaov := &GetGroupMemberRequest_FieldTerminalPathArrayOfValues{GetGroupMemberRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case GetGroupMemberRequest_FieldPathSelectorName:
		return &GetGroupMemberRequest_FieldTerminalPathArrayOfValues{GetGroupMemberRequest_FieldTerminalPath: *fp, values: values.([]*group_member.Reference)}
	case GetGroupMemberRequest_FieldPathSelectorFieldMask:
		return &GetGroupMemberRequest_FieldTerminalPathArrayOfValues{GetGroupMemberRequest_FieldTerminalPath: *fp, values: values.([]*group_member.GroupMember_FieldMask)}
	case GetGroupMemberRequest_FieldPathSelectorView:
		return &GetGroupMemberRequest_FieldTerminalPathArrayOfValues{GetGroupMemberRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetGroupMemberRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *GetGroupMemberRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *GetGroupMemberRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) GetGroupMemberRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for GetGroupMemberRequest: %d", fp.selector))
	}
}

func (fp *GetGroupMemberRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// GetGroupMemberRequest_FieldPathValue allows storing values for GetGroupMemberRequest fields according to their type
type GetGroupMemberRequest_FieldPathValue interface {
	GetGroupMemberRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **GetGroupMemberRequest)
	CompareWith(*GetGroupMemberRequest) (cmp int, comparable bool)
}

func ParseGetGroupMemberRequest_FieldPathValue(pathStr, valueStr string) (GetGroupMemberRequest_FieldPathValue, error) {
	fp, err := ParseGetGroupMemberRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetGroupMemberRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(GetGroupMemberRequest_FieldPathValue), nil
}

func MustParseGetGroupMemberRequest_FieldPathValue(pathStr, valueStr string) GetGroupMemberRequest_FieldPathValue {
	fpv, err := ParseGetGroupMemberRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type GetGroupMemberRequest_FieldTerminalPathValue struct {
	GetGroupMemberRequest_FieldTerminalPath
	value interface{}
}

var _ GetGroupMemberRequest_FieldPathValue = (*GetGroupMemberRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'GetGroupMemberRequest' as interface{}
func (fpv *GetGroupMemberRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *GetGroupMemberRequest_FieldTerminalPathValue) AsNameValue() (*group_member.Reference, bool) {
	res, ok := fpv.value.(*group_member.Reference)
	return res, ok
}
func (fpv *GetGroupMemberRequest_FieldTerminalPathValue) AsFieldMaskValue() (*group_member.GroupMember_FieldMask, bool) {
	res, ok := fpv.value.(*group_member.GroupMember_FieldMask)
	return res, ok
}
func (fpv *GetGroupMemberRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object GetGroupMemberRequest
func (fpv *GetGroupMemberRequest_FieldTerminalPathValue) SetTo(target **GetGroupMemberRequest) {
	if *target == nil {
		*target = new(GetGroupMemberRequest)
	}
	switch fpv.selector {
	case GetGroupMemberRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*group_member.Reference)
	case GetGroupMemberRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*group_member.GroupMember_FieldMask)
	case GetGroupMemberRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for GetGroupMemberRequest: %d", fpv.selector))
	}
}

func (fpv *GetGroupMemberRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*GetGroupMemberRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'GetGroupMemberRequest_FieldTerminalPathValue' with the value under path in 'GetGroupMemberRequest'.
func (fpv *GetGroupMemberRequest_FieldTerminalPathValue) CompareWith(source *GetGroupMemberRequest) (int, bool) {
	switch fpv.selector {
	case GetGroupMemberRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*group_member.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case GetGroupMemberRequest_FieldPathSelectorFieldMask:
		return 0, false
	case GetGroupMemberRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for GetGroupMemberRequest: %d", fpv.selector))
	}
}

func (fpv *GetGroupMemberRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*GetGroupMemberRequest))
}

// GetGroupMemberRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for GetGroupMemberRequest according to their type
// Present only for array (repeated) types.
type GetGroupMemberRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	GetGroupMemberRequest_FieldPath
	ContainsValue(*GetGroupMemberRequest) bool
}

// ParseGetGroupMemberRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseGetGroupMemberRequest_FieldPathArrayItemValue(pathStr, valueStr string) (GetGroupMemberRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseGetGroupMemberRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetGroupMemberRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(GetGroupMemberRequest_FieldPathArrayItemValue), nil
}

func MustParseGetGroupMemberRequest_FieldPathArrayItemValue(pathStr, valueStr string) GetGroupMemberRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseGetGroupMemberRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type GetGroupMemberRequest_FieldTerminalPathArrayItemValue struct {
	GetGroupMemberRequest_FieldTerminalPath
	value interface{}
}

var _ GetGroupMemberRequest_FieldPathArrayItemValue = (*GetGroupMemberRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object GetGroupMemberRequest as interface{}
func (fpaiv *GetGroupMemberRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *GetGroupMemberRequest_FieldTerminalPathArrayItemValue) GetSingle(source *GetGroupMemberRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *GetGroupMemberRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*GetGroupMemberRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'GetGroupMemberRequest'
func (fpaiv *GetGroupMemberRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *GetGroupMemberRequest) bool {
	slice := fpaiv.GetGroupMemberRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// GetGroupMemberRequest_FieldPathArrayOfValues allows storing slice of values for GetGroupMemberRequest fields according to their type
type GetGroupMemberRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	GetGroupMemberRequest_FieldPath
}

func ParseGetGroupMemberRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (GetGroupMemberRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseGetGroupMemberRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetGroupMemberRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(GetGroupMemberRequest_FieldPathArrayOfValues), nil
}

func MustParseGetGroupMemberRequest_FieldPathArrayOfValues(pathStr, valuesStr string) GetGroupMemberRequest_FieldPathArrayOfValues {
	fpaov, err := ParseGetGroupMemberRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type GetGroupMemberRequest_FieldTerminalPathArrayOfValues struct {
	GetGroupMemberRequest_FieldTerminalPath
	values interface{}
}

var _ GetGroupMemberRequest_FieldPathArrayOfValues = (*GetGroupMemberRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *GetGroupMemberRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case GetGroupMemberRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*group_member.Reference) {
			values = append(values, v)
		}
	case GetGroupMemberRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*group_member.GroupMember_FieldMask) {
			values = append(values, v)
		}
	case GetGroupMemberRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *GetGroupMemberRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*group_member.Reference, bool) {
	res, ok := fpaov.values.([]*group_member.Reference)
	return res, ok
}
func (fpaov *GetGroupMemberRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*group_member.GroupMember_FieldMask, bool) {
	res, ok := fpaov.values.([]*group_member.GroupMember_FieldMask)
	return res, ok
}
func (fpaov *GetGroupMemberRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetGroupMembersRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetGroupMembersRequest_FieldPathSelector
	Get(source *BatchGetGroupMembersRequest) []interface{}
	GetSingle(source *BatchGetGroupMembersRequest) (interface{}, bool)
	ClearValue(item *BatchGetGroupMembersRequest)

	// Those methods build corresponding BatchGetGroupMembersRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetGroupMembersRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetGroupMembersRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetGroupMembersRequest_FieldPathArrayItemValue
}

type BatchGetGroupMembersRequest_FieldPathSelector int32

const (
	BatchGetGroupMembersRequest_FieldPathSelectorParent    BatchGetGroupMembersRequest_FieldPathSelector = 0
	BatchGetGroupMembersRequest_FieldPathSelectorNames     BatchGetGroupMembersRequest_FieldPathSelector = 1
	BatchGetGroupMembersRequest_FieldPathSelectorFieldMask BatchGetGroupMembersRequest_FieldPathSelector = 2
	BatchGetGroupMembersRequest_FieldPathSelectorView      BatchGetGroupMembersRequest_FieldPathSelector = 3
)

func (s BatchGetGroupMembersRequest_FieldPathSelector) String() string {
	switch s {
	case BatchGetGroupMembersRequest_FieldPathSelectorParent:
		return "parent"
	case BatchGetGroupMembersRequest_FieldPathSelectorNames:
		return "names"
	case BatchGetGroupMembersRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case BatchGetGroupMembersRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetGroupMembersRequest: %d", s))
	}
}

func BuildBatchGetGroupMembersRequest_FieldPath(fp gotenobject.RawFieldPath) (BatchGetGroupMembersRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetGroupMembersRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &BatchGetGroupMembersRequest_FieldTerminalPath{selector: BatchGetGroupMembersRequest_FieldPathSelectorParent}, nil
		case "names":
			return &BatchGetGroupMembersRequest_FieldTerminalPath{selector: BatchGetGroupMembersRequest_FieldPathSelectorNames}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &BatchGetGroupMembersRequest_FieldTerminalPath{selector: BatchGetGroupMembersRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &BatchGetGroupMembersRequest_FieldTerminalPath{selector: BatchGetGroupMembersRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetGroupMembersRequest", fp)
}

func ParseBatchGetGroupMembersRequest_FieldPath(rawField string) (BatchGetGroupMembersRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetGroupMembersRequest_FieldPath(fp)
}

func MustParseBatchGetGroupMembersRequest_FieldPath(rawField string) BatchGetGroupMembersRequest_FieldPath {
	fp, err := ParseBatchGetGroupMembersRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetGroupMembersRequest_FieldTerminalPath struct {
	selector BatchGetGroupMembersRequest_FieldPathSelector
}

var _ BatchGetGroupMembersRequest_FieldPath = (*BatchGetGroupMembersRequest_FieldTerminalPath)(nil)

func (fp *BatchGetGroupMembersRequest_FieldTerminalPath) Selector() BatchGetGroupMembersRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetGroupMembersRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetGroupMembersRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetGroupMembersRequest
func (fp *BatchGetGroupMembersRequest_FieldTerminalPath) Get(source *BatchGetGroupMembersRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetGroupMembersRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case BatchGetGroupMembersRequest_FieldPathSelectorNames:
			for _, value := range source.GetNames() {
				values = append(values, value)
			}
		case BatchGetGroupMembersRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case BatchGetGroupMembersRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetGroupMembersRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetGroupMembersRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetGroupMembersRequest))
}

// GetSingle returns value pointed by specific field of from source BatchGetGroupMembersRequest
func (fp *BatchGetGroupMembersRequest_FieldTerminalPath) GetSingle(source *BatchGetGroupMembersRequest) (interface{}, bool) {
	switch fp.selector {
	case BatchGetGroupMembersRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case BatchGetGroupMembersRequest_FieldPathSelectorNames:
		res := source.GetNames()
		return res, res != nil
	case BatchGetGroupMembersRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case BatchGetGroupMembersRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetGroupMembersRequest: %d", fp.selector))
	}
}

func (fp *BatchGetGroupMembersRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetGroupMembersRequest))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetGroupMembersRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetGroupMembersRequest_FieldPathSelectorParent:
		return (*group_member.Reference)(nil)
	case BatchGetGroupMembersRequest_FieldPathSelectorNames:
		return ([]*group_member.Reference)(nil)
	case BatchGetGroupMembersRequest_FieldPathSelectorFieldMask:
		return (*group_member.GroupMember_FieldMask)(nil)
	case BatchGetGroupMembersRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetGroupMembersRequest: %d", fp.selector))
	}
}

func (fp *BatchGetGroupMembersRequest_FieldTerminalPath) ClearValue(item *BatchGetGroupMembersRequest) {
	if item != nil {
		switch fp.selector {
		case BatchGetGroupMembersRequest_FieldPathSelectorParent:
			item.Parent = nil
		case BatchGetGroupMembersRequest_FieldPathSelectorNames:
			item.Names = nil
		case BatchGetGroupMembersRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case BatchGetGroupMembersRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetGroupMembersRequest: %d", fp.selector))
		}
	}
}

func (fp *BatchGetGroupMembersRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetGroupMembersRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetGroupMembersRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetGroupMembersRequest_FieldPathSelectorParent ||
		fp.selector == BatchGetGroupMembersRequest_FieldPathSelectorNames ||
		fp.selector == BatchGetGroupMembersRequest_FieldPathSelectorFieldMask ||
		fp.selector == BatchGetGroupMembersRequest_FieldPathSelectorView
}

func (fp *BatchGetGroupMembersRequest_FieldTerminalPath) WithIValue(value interface{}) BatchGetGroupMembersRequest_FieldPathValue {
	switch fp.selector {
	case BatchGetGroupMembersRequest_FieldPathSelectorParent:
		return &BatchGetGroupMembersRequest_FieldTerminalPathValue{BatchGetGroupMembersRequest_FieldTerminalPath: *fp, value: value.(*group_member.Reference)}
	case BatchGetGroupMembersRequest_FieldPathSelectorNames:
		return &BatchGetGroupMembersRequest_FieldTerminalPathValue{BatchGetGroupMembersRequest_FieldTerminalPath: *fp, value: value.([]*group_member.Reference)}
	case BatchGetGroupMembersRequest_FieldPathSelectorFieldMask:
		return &BatchGetGroupMembersRequest_FieldTerminalPathValue{BatchGetGroupMembersRequest_FieldTerminalPath: *fp, value: value.(*group_member.GroupMember_FieldMask)}
	case BatchGetGroupMembersRequest_FieldPathSelectorView:
		return &BatchGetGroupMembersRequest_FieldTerminalPathValue{BatchGetGroupMembersRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetGroupMembersRequest: %d", fp.selector))
	}
}

func (fp *BatchGetGroupMembersRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetGroupMembersRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetGroupMembersRequest_FieldPathArrayOfValues {
	fpaov := &BatchGetGroupMembersRequest_FieldTerminalPathArrayOfValues{BatchGetGroupMembersRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetGroupMembersRequest_FieldPathSelectorParent:
		return &BatchGetGroupMembersRequest_FieldTerminalPathArrayOfValues{BatchGetGroupMembersRequest_FieldTerminalPath: *fp, values: values.([]*group_member.Reference)}
	case BatchGetGroupMembersRequest_FieldPathSelectorNames:
		return &BatchGetGroupMembersRequest_FieldTerminalPathArrayOfValues{BatchGetGroupMembersRequest_FieldTerminalPath: *fp, values: values.([][]*group_member.Reference)}
	case BatchGetGroupMembersRequest_FieldPathSelectorFieldMask:
		return &BatchGetGroupMembersRequest_FieldTerminalPathArrayOfValues{BatchGetGroupMembersRequest_FieldTerminalPath: *fp, values: values.([]*group_member.GroupMember_FieldMask)}
	case BatchGetGroupMembersRequest_FieldPathSelectorView:
		return &BatchGetGroupMembersRequest_FieldTerminalPathArrayOfValues{BatchGetGroupMembersRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetGroupMembersRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetGroupMembersRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetGroupMembersRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetGroupMembersRequest_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetGroupMembersRequest_FieldPathSelectorNames:
		return &BatchGetGroupMembersRequest_FieldTerminalPathArrayItemValue{BatchGetGroupMembersRequest_FieldTerminalPath: *fp, value: value.(*group_member.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetGroupMembersRequest: %d", fp.selector))
	}
}

func (fp *BatchGetGroupMembersRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// BatchGetGroupMembersRequest_FieldPathValue allows storing values for BatchGetGroupMembersRequest fields according to their type
type BatchGetGroupMembersRequest_FieldPathValue interface {
	BatchGetGroupMembersRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetGroupMembersRequest)
	CompareWith(*BatchGetGroupMembersRequest) (cmp int, comparable bool)
}

func ParseBatchGetGroupMembersRequest_FieldPathValue(pathStr, valueStr string) (BatchGetGroupMembersRequest_FieldPathValue, error) {
	fp, err := ParseBatchGetGroupMembersRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetGroupMembersRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetGroupMembersRequest_FieldPathValue), nil
}

func MustParseBatchGetGroupMembersRequest_FieldPathValue(pathStr, valueStr string) BatchGetGroupMembersRequest_FieldPathValue {
	fpv, err := ParseBatchGetGroupMembersRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetGroupMembersRequest_FieldTerminalPathValue struct {
	BatchGetGroupMembersRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetGroupMembersRequest_FieldPathValue = (*BatchGetGroupMembersRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetGroupMembersRequest' as interface{}
func (fpv *BatchGetGroupMembersRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetGroupMembersRequest_FieldTerminalPathValue) AsParentValue() (*group_member.Reference, bool) {
	res, ok := fpv.value.(*group_member.Reference)
	return res, ok
}
func (fpv *BatchGetGroupMembersRequest_FieldTerminalPathValue) AsNamesValue() ([]*group_member.Reference, bool) {
	res, ok := fpv.value.([]*group_member.Reference)
	return res, ok
}
func (fpv *BatchGetGroupMembersRequest_FieldTerminalPathValue) AsFieldMaskValue() (*group_member.GroupMember_FieldMask, bool) {
	res, ok := fpv.value.(*group_member.GroupMember_FieldMask)
	return res, ok
}
func (fpv *BatchGetGroupMembersRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetGroupMembersRequest
func (fpv *BatchGetGroupMembersRequest_FieldTerminalPathValue) SetTo(target **BatchGetGroupMembersRequest) {
	if *target == nil {
		*target = new(BatchGetGroupMembersRequest)
	}
	switch fpv.selector {
	case BatchGetGroupMembersRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*group_member.Reference)
	case BatchGetGroupMembersRequest_FieldPathSelectorNames:
		(*target).Names = fpv.value.([]*group_member.Reference)
	case BatchGetGroupMembersRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*group_member.GroupMember_FieldMask)
	case BatchGetGroupMembersRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetGroupMembersRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetGroupMembersRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetGroupMembersRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetGroupMembersRequest_FieldTerminalPathValue' with the value under path in 'BatchGetGroupMembersRequest'.
func (fpv *BatchGetGroupMembersRequest_FieldTerminalPathValue) CompareWith(source *BatchGetGroupMembersRequest) (int, bool) {
	switch fpv.selector {
	case BatchGetGroupMembersRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*group_member.Reference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case BatchGetGroupMembersRequest_FieldPathSelectorNames:
		return 0, false
	case BatchGetGroupMembersRequest_FieldPathSelectorFieldMask:
		return 0, false
	case BatchGetGroupMembersRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetGroupMembersRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetGroupMembersRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetGroupMembersRequest))
}

// BatchGetGroupMembersRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetGroupMembersRequest according to their type
// Present only for array (repeated) types.
type BatchGetGroupMembersRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetGroupMembersRequest_FieldPath
	ContainsValue(*BatchGetGroupMembersRequest) bool
}

// ParseBatchGetGroupMembersRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetGroupMembersRequest_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetGroupMembersRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetGroupMembersRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetGroupMembersRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetGroupMembersRequest_FieldPathArrayItemValue), nil
}

func MustParseBatchGetGroupMembersRequest_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetGroupMembersRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetGroupMembersRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetGroupMembersRequest_FieldTerminalPathArrayItemValue struct {
	BatchGetGroupMembersRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetGroupMembersRequest_FieldPathArrayItemValue = (*BatchGetGroupMembersRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetGroupMembersRequest as interface{}
func (fpaiv *BatchGetGroupMembersRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetGroupMembersRequest_FieldTerminalPathArrayItemValue) AsNamesItemValue() (*group_member.Reference, bool) {
	res, ok := fpaiv.value.(*group_member.Reference)
	return res, ok
}

func (fpaiv *BatchGetGroupMembersRequest_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetGroupMembersRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetGroupMembersRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetGroupMembersRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetGroupMembersRequest'
func (fpaiv *BatchGetGroupMembersRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetGroupMembersRequest) bool {
	slice := fpaiv.BatchGetGroupMembersRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// BatchGetGroupMembersRequest_FieldPathArrayOfValues allows storing slice of values for BatchGetGroupMembersRequest fields according to their type
type BatchGetGroupMembersRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetGroupMembersRequest_FieldPath
}

func ParseBatchGetGroupMembersRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetGroupMembersRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetGroupMembersRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetGroupMembersRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetGroupMembersRequest_FieldPathArrayOfValues), nil
}

func MustParseBatchGetGroupMembersRequest_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetGroupMembersRequest_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetGroupMembersRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetGroupMembersRequest_FieldTerminalPathArrayOfValues struct {
	BatchGetGroupMembersRequest_FieldTerminalPath
	values interface{}
}

var _ BatchGetGroupMembersRequest_FieldPathArrayOfValues = (*BatchGetGroupMembersRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetGroupMembersRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetGroupMembersRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*group_member.Reference) {
			values = append(values, v)
		}
	case BatchGetGroupMembersRequest_FieldPathSelectorNames:
		for _, v := range fpaov.values.([][]*group_member.Reference) {
			values = append(values, v)
		}
	case BatchGetGroupMembersRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*group_member.GroupMember_FieldMask) {
			values = append(values, v)
		}
	case BatchGetGroupMembersRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetGroupMembersRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*group_member.Reference, bool) {
	res, ok := fpaov.values.([]*group_member.Reference)
	return res, ok
}
func (fpaov *BatchGetGroupMembersRequest_FieldTerminalPathArrayOfValues) AsNamesArrayOfValues() ([][]*group_member.Reference, bool) {
	res, ok := fpaov.values.([][]*group_member.Reference)
	return res, ok
}
func (fpaov *BatchGetGroupMembersRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*group_member.GroupMember_FieldMask, bool) {
	res, ok := fpaov.values.([]*group_member.GroupMember_FieldMask)
	return res, ok
}
func (fpaov *BatchGetGroupMembersRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetGroupMembersResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetGroupMembersResponse_FieldPathSelector
	Get(source *BatchGetGroupMembersResponse) []interface{}
	GetSingle(source *BatchGetGroupMembersResponse) (interface{}, bool)
	ClearValue(item *BatchGetGroupMembersResponse)

	// Those methods build corresponding BatchGetGroupMembersResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetGroupMembersResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetGroupMembersResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetGroupMembersResponse_FieldPathArrayItemValue
}

type BatchGetGroupMembersResponse_FieldPathSelector int32

const (
	BatchGetGroupMembersResponse_FieldPathSelectorGroupMembers BatchGetGroupMembersResponse_FieldPathSelector = 0
	BatchGetGroupMembersResponse_FieldPathSelectorMissing      BatchGetGroupMembersResponse_FieldPathSelector = 1
)

func (s BatchGetGroupMembersResponse_FieldPathSelector) String() string {
	switch s {
	case BatchGetGroupMembersResponse_FieldPathSelectorGroupMembers:
		return "group_members"
	case BatchGetGroupMembersResponse_FieldPathSelectorMissing:
		return "missing"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetGroupMembersResponse: %d", s))
	}
}

func BuildBatchGetGroupMembersResponse_FieldPath(fp gotenobject.RawFieldPath) (BatchGetGroupMembersResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetGroupMembersResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "group_members", "groupMembers", "group-members":
			return &BatchGetGroupMembersResponse_FieldTerminalPath{selector: BatchGetGroupMembersResponse_FieldPathSelectorGroupMembers}, nil
		case "missing":
			return &BatchGetGroupMembersResponse_FieldTerminalPath{selector: BatchGetGroupMembersResponse_FieldPathSelectorMissing}, nil
		}
	} else {
		switch fp[0] {
		case "group_members", "groupMembers", "group-members":
			if subpath, err := group_member.BuildGroupMember_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &BatchGetGroupMembersResponse_FieldSubPath{selector: BatchGetGroupMembersResponse_FieldPathSelectorGroupMembers, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetGroupMembersResponse", fp)
}

func ParseBatchGetGroupMembersResponse_FieldPath(rawField string) (BatchGetGroupMembersResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetGroupMembersResponse_FieldPath(fp)
}

func MustParseBatchGetGroupMembersResponse_FieldPath(rawField string) BatchGetGroupMembersResponse_FieldPath {
	fp, err := ParseBatchGetGroupMembersResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetGroupMembersResponse_FieldTerminalPath struct {
	selector BatchGetGroupMembersResponse_FieldPathSelector
}

var _ BatchGetGroupMembersResponse_FieldPath = (*BatchGetGroupMembersResponse_FieldTerminalPath)(nil)

func (fp *BatchGetGroupMembersResponse_FieldTerminalPath) Selector() BatchGetGroupMembersResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetGroupMembersResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetGroupMembersResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetGroupMembersResponse
func (fp *BatchGetGroupMembersResponse_FieldTerminalPath) Get(source *BatchGetGroupMembersResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetGroupMembersResponse_FieldPathSelectorGroupMembers:
			for _, value := range source.GetGroupMembers() {
				values = append(values, value)
			}
		case BatchGetGroupMembersResponse_FieldPathSelectorMissing:
			for _, value := range source.GetMissing() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetGroupMembersResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetGroupMembersResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetGroupMembersResponse))
}

// GetSingle returns value pointed by specific field of from source BatchGetGroupMembersResponse
func (fp *BatchGetGroupMembersResponse_FieldTerminalPath) GetSingle(source *BatchGetGroupMembersResponse) (interface{}, bool) {
	switch fp.selector {
	case BatchGetGroupMembersResponse_FieldPathSelectorGroupMembers:
		res := source.GetGroupMembers()
		return res, res != nil
	case BatchGetGroupMembersResponse_FieldPathSelectorMissing:
		res := source.GetMissing()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetGroupMembersResponse: %d", fp.selector))
	}
}

func (fp *BatchGetGroupMembersResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetGroupMembersResponse))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetGroupMembersResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetGroupMembersResponse_FieldPathSelectorGroupMembers:
		return ([]*group_member.GroupMember)(nil)
	case BatchGetGroupMembersResponse_FieldPathSelectorMissing:
		return ([]*group_member.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetGroupMembersResponse: %d", fp.selector))
	}
}

func (fp *BatchGetGroupMembersResponse_FieldTerminalPath) ClearValue(item *BatchGetGroupMembersResponse) {
	if item != nil {
		switch fp.selector {
		case BatchGetGroupMembersResponse_FieldPathSelectorGroupMembers:
			item.GroupMembers = nil
		case BatchGetGroupMembersResponse_FieldPathSelectorMissing:
			item.Missing = nil
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetGroupMembersResponse: %d", fp.selector))
		}
	}
}

func (fp *BatchGetGroupMembersResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetGroupMembersResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetGroupMembersResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetGroupMembersResponse_FieldPathSelectorMissing
}

func (fp *BatchGetGroupMembersResponse_FieldTerminalPath) WithIValue(value interface{}) BatchGetGroupMembersResponse_FieldPathValue {
	switch fp.selector {
	case BatchGetGroupMembersResponse_FieldPathSelectorGroupMembers:
		return &BatchGetGroupMembersResponse_FieldTerminalPathValue{BatchGetGroupMembersResponse_FieldTerminalPath: *fp, value: value.([]*group_member.GroupMember)}
	case BatchGetGroupMembersResponse_FieldPathSelectorMissing:
		return &BatchGetGroupMembersResponse_FieldTerminalPathValue{BatchGetGroupMembersResponse_FieldTerminalPath: *fp, value: value.([]*group_member.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetGroupMembersResponse: %d", fp.selector))
	}
}

func (fp *BatchGetGroupMembersResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetGroupMembersResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetGroupMembersResponse_FieldPathArrayOfValues {
	fpaov := &BatchGetGroupMembersResponse_FieldTerminalPathArrayOfValues{BatchGetGroupMembersResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetGroupMembersResponse_FieldPathSelectorGroupMembers:
		return &BatchGetGroupMembersResponse_FieldTerminalPathArrayOfValues{BatchGetGroupMembersResponse_FieldTerminalPath: *fp, values: values.([][]*group_member.GroupMember)}
	case BatchGetGroupMembersResponse_FieldPathSelectorMissing:
		return &BatchGetGroupMembersResponse_FieldTerminalPathArrayOfValues{BatchGetGroupMembersResponse_FieldTerminalPath: *fp, values: values.([][]*group_member.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetGroupMembersResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetGroupMembersResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetGroupMembersResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetGroupMembersResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetGroupMembersResponse_FieldPathSelectorGroupMembers:
		return &BatchGetGroupMembersResponse_FieldTerminalPathArrayItemValue{BatchGetGroupMembersResponse_FieldTerminalPath: *fp, value: value.(*group_member.GroupMember)}
	case BatchGetGroupMembersResponse_FieldPathSelectorMissing:
		return &BatchGetGroupMembersResponse_FieldTerminalPathArrayItemValue{BatchGetGroupMembersResponse_FieldTerminalPath: *fp, value: value.(*group_member.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetGroupMembersResponse: %d", fp.selector))
	}
}

func (fp *BatchGetGroupMembersResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type BatchGetGroupMembersResponse_FieldSubPath struct {
	selector BatchGetGroupMembersResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ BatchGetGroupMembersResponse_FieldPath = (*BatchGetGroupMembersResponse_FieldSubPath)(nil)

func (fps *BatchGetGroupMembersResponse_FieldSubPath) Selector() BatchGetGroupMembersResponse_FieldPathSelector {
	return fps.selector
}
func (fps *BatchGetGroupMembersResponse_FieldSubPath) AsGroupMembersSubPath() (group_member.GroupMember_FieldPath, bool) {
	res, ok := fps.subPath.(group_member.GroupMember_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *BatchGetGroupMembersResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *BatchGetGroupMembersResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source BatchGetGroupMembersResponse
func (fps *BatchGetGroupMembersResponse_FieldSubPath) Get(source *BatchGetGroupMembersResponse) (values []interface{}) {
	if asGroupMemberFieldPath, ok := fps.AsGroupMembersSubPath(); ok {
		for _, item := range source.GetGroupMembers() {
			values = append(values, asGroupMemberFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for BatchGetGroupMembersResponse: %d", fps.selector))
	}
	return
}

func (fps *BatchGetGroupMembersResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*BatchGetGroupMembersResponse))
}

// GetSingle returns value of selected field from source BatchGetGroupMembersResponse
func (fps *BatchGetGroupMembersResponse_FieldSubPath) GetSingle(source *BatchGetGroupMembersResponse) (interface{}, bool) {
	switch fps.selector {
	case BatchGetGroupMembersResponse_FieldPathSelectorGroupMembers:
		if len(source.GetGroupMembers()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetGroupMembers()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetGroupMembersResponse: %d", fps.selector))
	}
}

func (fps *BatchGetGroupMembersResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*BatchGetGroupMembersResponse))
}

// GetDefault returns a default value of the field type
func (fps *BatchGetGroupMembersResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *BatchGetGroupMembersResponse_FieldSubPath) ClearValue(item *BatchGetGroupMembersResponse) {
	if item != nil {
		switch fps.selector {
		case BatchGetGroupMembersResponse_FieldPathSelectorGroupMembers:
			for _, subItem := range item.GroupMembers {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetGroupMembersResponse: %d", fps.selector))
		}
	}
}

func (fps *BatchGetGroupMembersResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*BatchGetGroupMembersResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *BatchGetGroupMembersResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *BatchGetGroupMembersResponse_FieldSubPath) WithIValue(value interface{}) BatchGetGroupMembersResponse_FieldPathValue {
	return &BatchGetGroupMembersResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *BatchGetGroupMembersResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *BatchGetGroupMembersResponse_FieldSubPath) WithIArrayOfValues(values interface{}) BatchGetGroupMembersResponse_FieldPathArrayOfValues {
	return &BatchGetGroupMembersResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *BatchGetGroupMembersResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *BatchGetGroupMembersResponse_FieldSubPath) WithIArrayItemValue(value interface{}) BatchGetGroupMembersResponse_FieldPathArrayItemValue {
	return &BatchGetGroupMembersResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *BatchGetGroupMembersResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// BatchGetGroupMembersResponse_FieldPathValue allows storing values for BatchGetGroupMembersResponse fields according to their type
type BatchGetGroupMembersResponse_FieldPathValue interface {
	BatchGetGroupMembersResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetGroupMembersResponse)
	CompareWith(*BatchGetGroupMembersResponse) (cmp int, comparable bool)
}

func ParseBatchGetGroupMembersResponse_FieldPathValue(pathStr, valueStr string) (BatchGetGroupMembersResponse_FieldPathValue, error) {
	fp, err := ParseBatchGetGroupMembersResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetGroupMembersResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetGroupMembersResponse_FieldPathValue), nil
}

func MustParseBatchGetGroupMembersResponse_FieldPathValue(pathStr, valueStr string) BatchGetGroupMembersResponse_FieldPathValue {
	fpv, err := ParseBatchGetGroupMembersResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetGroupMembersResponse_FieldTerminalPathValue struct {
	BatchGetGroupMembersResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetGroupMembersResponse_FieldPathValue = (*BatchGetGroupMembersResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetGroupMembersResponse' as interface{}
func (fpv *BatchGetGroupMembersResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetGroupMembersResponse_FieldTerminalPathValue) AsGroupMembersValue() ([]*group_member.GroupMember, bool) {
	res, ok := fpv.value.([]*group_member.GroupMember)
	return res, ok
}
func (fpv *BatchGetGroupMembersResponse_FieldTerminalPathValue) AsMissingValue() ([]*group_member.Reference, bool) {
	res, ok := fpv.value.([]*group_member.Reference)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetGroupMembersResponse
func (fpv *BatchGetGroupMembersResponse_FieldTerminalPathValue) SetTo(target **BatchGetGroupMembersResponse) {
	if *target == nil {
		*target = new(BatchGetGroupMembersResponse)
	}
	switch fpv.selector {
	case BatchGetGroupMembersResponse_FieldPathSelectorGroupMembers:
		(*target).GroupMembers = fpv.value.([]*group_member.GroupMember)
	case BatchGetGroupMembersResponse_FieldPathSelectorMissing:
		(*target).Missing = fpv.value.([]*group_member.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetGroupMembersResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetGroupMembersResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetGroupMembersResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetGroupMembersResponse_FieldTerminalPathValue' with the value under path in 'BatchGetGroupMembersResponse'.
func (fpv *BatchGetGroupMembersResponse_FieldTerminalPathValue) CompareWith(source *BatchGetGroupMembersResponse) (int, bool) {
	switch fpv.selector {
	case BatchGetGroupMembersResponse_FieldPathSelectorGroupMembers:
		return 0, false
	case BatchGetGroupMembersResponse_FieldPathSelectorMissing:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetGroupMembersResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetGroupMembersResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetGroupMembersResponse))
}

type BatchGetGroupMembersResponse_FieldSubPathValue struct {
	BatchGetGroupMembersResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ BatchGetGroupMembersResponse_FieldPathValue = (*BatchGetGroupMembersResponse_FieldSubPathValue)(nil)

func (fpvs *BatchGetGroupMembersResponse_FieldSubPathValue) AsGroupMembersPathValue() (group_member.GroupMember_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(group_member.GroupMember_FieldPathValue)
	return res, ok
}

func (fpvs *BatchGetGroupMembersResponse_FieldSubPathValue) SetTo(target **BatchGetGroupMembersResponse) {
	if *target == nil {
		*target = new(BatchGetGroupMembersResponse)
	}
	switch fpvs.Selector() {
	case BatchGetGroupMembersResponse_FieldPathSelectorGroupMembers:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetGroupMembersResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetGroupMembersResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetGroupMembersResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *BatchGetGroupMembersResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *BatchGetGroupMembersResponse_FieldSubPathValue) CompareWith(source *BatchGetGroupMembersResponse) (int, bool) {
	switch fpvs.Selector() {
	case BatchGetGroupMembersResponse_FieldPathSelectorGroupMembers:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetGroupMembersResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetGroupMembersResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*BatchGetGroupMembersResponse))
}

// BatchGetGroupMembersResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetGroupMembersResponse according to their type
// Present only for array (repeated) types.
type BatchGetGroupMembersResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetGroupMembersResponse_FieldPath
	ContainsValue(*BatchGetGroupMembersResponse) bool
}

// ParseBatchGetGroupMembersResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetGroupMembersResponse_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetGroupMembersResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetGroupMembersResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetGroupMembersResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetGroupMembersResponse_FieldPathArrayItemValue), nil
}

func MustParseBatchGetGroupMembersResponse_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetGroupMembersResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetGroupMembersResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetGroupMembersResponse_FieldTerminalPathArrayItemValue struct {
	BatchGetGroupMembersResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetGroupMembersResponse_FieldPathArrayItemValue = (*BatchGetGroupMembersResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetGroupMembersResponse as interface{}
func (fpaiv *BatchGetGroupMembersResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetGroupMembersResponse_FieldTerminalPathArrayItemValue) AsGroupMembersItemValue() (*group_member.GroupMember, bool) {
	res, ok := fpaiv.value.(*group_member.GroupMember)
	return res, ok
}
func (fpaiv *BatchGetGroupMembersResponse_FieldTerminalPathArrayItemValue) AsMissingItemValue() (*group_member.Reference, bool) {
	res, ok := fpaiv.value.(*group_member.Reference)
	return res, ok
}

func (fpaiv *BatchGetGroupMembersResponse_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetGroupMembersResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetGroupMembersResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetGroupMembersResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetGroupMembersResponse'
func (fpaiv *BatchGetGroupMembersResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetGroupMembersResponse) bool {
	slice := fpaiv.BatchGetGroupMembersResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type BatchGetGroupMembersResponse_FieldSubPathArrayItemValue struct {
	BatchGetGroupMembersResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *BatchGetGroupMembersResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *BatchGetGroupMembersResponse_FieldSubPathArrayItemValue) AsGroupMembersPathItemValue() (group_member.GroupMember_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(group_member.GroupMember_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetGroupMembersResponse'
func (fpaivs *BatchGetGroupMembersResponse_FieldSubPathArrayItemValue) ContainsValue(source *BatchGetGroupMembersResponse) bool {
	switch fpaivs.Selector() {
	case BatchGetGroupMembersResponse_FieldPathSelectorGroupMembers:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetGroupMembersResponse: %d", fpaivs.Selector()))
	}
}

// BatchGetGroupMembersResponse_FieldPathArrayOfValues allows storing slice of values for BatchGetGroupMembersResponse fields according to their type
type BatchGetGroupMembersResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetGroupMembersResponse_FieldPath
}

func ParseBatchGetGroupMembersResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetGroupMembersResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetGroupMembersResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetGroupMembersResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetGroupMembersResponse_FieldPathArrayOfValues), nil
}

func MustParseBatchGetGroupMembersResponse_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetGroupMembersResponse_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetGroupMembersResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetGroupMembersResponse_FieldTerminalPathArrayOfValues struct {
	BatchGetGroupMembersResponse_FieldTerminalPath
	values interface{}
}

var _ BatchGetGroupMembersResponse_FieldPathArrayOfValues = (*BatchGetGroupMembersResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetGroupMembersResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetGroupMembersResponse_FieldPathSelectorGroupMembers:
		for _, v := range fpaov.values.([][]*group_member.GroupMember) {
			values = append(values, v)
		}
	case BatchGetGroupMembersResponse_FieldPathSelectorMissing:
		for _, v := range fpaov.values.([][]*group_member.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetGroupMembersResponse_FieldTerminalPathArrayOfValues) AsGroupMembersArrayOfValues() ([][]*group_member.GroupMember, bool) {
	res, ok := fpaov.values.([][]*group_member.GroupMember)
	return res, ok
}
func (fpaov *BatchGetGroupMembersResponse_FieldTerminalPathArrayOfValues) AsMissingArrayOfValues() ([][]*group_member.Reference, bool) {
	res, ok := fpaov.values.([][]*group_member.Reference)
	return res, ok
}

type BatchGetGroupMembersResponse_FieldSubPathArrayOfValues struct {
	BatchGetGroupMembersResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ BatchGetGroupMembersResponse_FieldPathArrayOfValues = (*BatchGetGroupMembersResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *BatchGetGroupMembersResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *BatchGetGroupMembersResponse_FieldSubPathArrayOfValues) AsGroupMembersPathArrayOfValues() (group_member.GroupMember_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(group_member.GroupMember_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListGroupMembersRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListGroupMembersRequest_FieldPathSelector
	Get(source *ListGroupMembersRequest) []interface{}
	GetSingle(source *ListGroupMembersRequest) (interface{}, bool)
	ClearValue(item *ListGroupMembersRequest)

	// Those methods build corresponding ListGroupMembersRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListGroupMembersRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ListGroupMembersRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListGroupMembersRequest_FieldPathArrayItemValue
}

type ListGroupMembersRequest_FieldPathSelector int32

const (
	ListGroupMembersRequest_FieldPathSelectorParent    ListGroupMembersRequest_FieldPathSelector = 0
	ListGroupMembersRequest_FieldPathSelectorPageSize  ListGroupMembersRequest_FieldPathSelector = 1
	ListGroupMembersRequest_FieldPathSelectorPageToken ListGroupMembersRequest_FieldPathSelector = 2
	ListGroupMembersRequest_FieldPathSelectorOrderBy   ListGroupMembersRequest_FieldPathSelector = 3
	ListGroupMembersRequest_FieldPathSelectorFilter    ListGroupMembersRequest_FieldPathSelector = 4
	ListGroupMembersRequest_FieldPathSelectorFieldMask ListGroupMembersRequest_FieldPathSelector = 5
	ListGroupMembersRequest_FieldPathSelectorView      ListGroupMembersRequest_FieldPathSelector = 6
)

func (s ListGroupMembersRequest_FieldPathSelector) String() string {
	switch s {
	case ListGroupMembersRequest_FieldPathSelectorParent:
		return "parent"
	case ListGroupMembersRequest_FieldPathSelectorPageSize:
		return "page_size"
	case ListGroupMembersRequest_FieldPathSelectorPageToken:
		return "page_token"
	case ListGroupMembersRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case ListGroupMembersRequest_FieldPathSelectorFilter:
		return "filter"
	case ListGroupMembersRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case ListGroupMembersRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for ListGroupMembersRequest: %d", s))
	}
}

func BuildListGroupMembersRequest_FieldPath(fp gotenobject.RawFieldPath) (ListGroupMembersRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListGroupMembersRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &ListGroupMembersRequest_FieldTerminalPath{selector: ListGroupMembersRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &ListGroupMembersRequest_FieldTerminalPath{selector: ListGroupMembersRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &ListGroupMembersRequest_FieldTerminalPath{selector: ListGroupMembersRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &ListGroupMembersRequest_FieldTerminalPath{selector: ListGroupMembersRequest_FieldPathSelectorOrderBy}, nil
		case "filter":
			return &ListGroupMembersRequest_FieldTerminalPath{selector: ListGroupMembersRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &ListGroupMembersRequest_FieldTerminalPath{selector: ListGroupMembersRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &ListGroupMembersRequest_FieldTerminalPath{selector: ListGroupMembersRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListGroupMembersRequest", fp)
}

func ParseListGroupMembersRequest_FieldPath(rawField string) (ListGroupMembersRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListGroupMembersRequest_FieldPath(fp)
}

func MustParseListGroupMembersRequest_FieldPath(rawField string) ListGroupMembersRequest_FieldPath {
	fp, err := ParseListGroupMembersRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListGroupMembersRequest_FieldTerminalPath struct {
	selector ListGroupMembersRequest_FieldPathSelector
}

var _ ListGroupMembersRequest_FieldPath = (*ListGroupMembersRequest_FieldTerminalPath)(nil)

func (fp *ListGroupMembersRequest_FieldTerminalPath) Selector() ListGroupMembersRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListGroupMembersRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListGroupMembersRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListGroupMembersRequest
func (fp *ListGroupMembersRequest_FieldTerminalPath) Get(source *ListGroupMembersRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListGroupMembersRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case ListGroupMembersRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case ListGroupMembersRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case ListGroupMembersRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case ListGroupMembersRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case ListGroupMembersRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case ListGroupMembersRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for ListGroupMembersRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ListGroupMembersRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListGroupMembersRequest))
}

// GetSingle returns value pointed by specific field of from source ListGroupMembersRequest
func (fp *ListGroupMembersRequest_FieldTerminalPath) GetSingle(source *ListGroupMembersRequest) (interface{}, bool) {
	switch fp.selector {
	case ListGroupMembersRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case ListGroupMembersRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case ListGroupMembersRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case ListGroupMembersRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case ListGroupMembersRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case ListGroupMembersRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case ListGroupMembersRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListGroupMembersRequest: %d", fp.selector))
	}
}

func (fp *ListGroupMembersRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListGroupMembersRequest))
}

// GetDefault returns a default value of the field type
func (fp *ListGroupMembersRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListGroupMembersRequest_FieldPathSelectorParent:
		return (*group_member.ParentName)(nil)
	case ListGroupMembersRequest_FieldPathSelectorPageSize:
		return int32(0)
	case ListGroupMembersRequest_FieldPathSelectorPageToken:
		return (*group_member.PagerCursor)(nil)
	case ListGroupMembersRequest_FieldPathSelectorOrderBy:
		return (*group_member.OrderBy)(nil)
	case ListGroupMembersRequest_FieldPathSelectorFilter:
		return (*group_member.Filter)(nil)
	case ListGroupMembersRequest_FieldPathSelectorFieldMask:
		return (*group_member.GroupMember_FieldMask)(nil)
	case ListGroupMembersRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for ListGroupMembersRequest: %d", fp.selector))
	}
}

func (fp *ListGroupMembersRequest_FieldTerminalPath) ClearValue(item *ListGroupMembersRequest) {
	if item != nil {
		switch fp.selector {
		case ListGroupMembersRequest_FieldPathSelectorParent:
			item.Parent = nil
		case ListGroupMembersRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case ListGroupMembersRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case ListGroupMembersRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case ListGroupMembersRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case ListGroupMembersRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case ListGroupMembersRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for ListGroupMembersRequest: %d", fp.selector))
		}
	}
}

func (fp *ListGroupMembersRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListGroupMembersRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListGroupMembersRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListGroupMembersRequest_FieldPathSelectorParent ||
		fp.selector == ListGroupMembersRequest_FieldPathSelectorPageSize ||
		fp.selector == ListGroupMembersRequest_FieldPathSelectorPageToken ||
		fp.selector == ListGroupMembersRequest_FieldPathSelectorOrderBy ||
		fp.selector == ListGroupMembersRequest_FieldPathSelectorFilter ||
		fp.selector == ListGroupMembersRequest_FieldPathSelectorFieldMask ||
		fp.selector == ListGroupMembersRequest_FieldPathSelectorView
}

func (fp *ListGroupMembersRequest_FieldTerminalPath) WithIValue(value interface{}) ListGroupMembersRequest_FieldPathValue {
	switch fp.selector {
	case ListGroupMembersRequest_FieldPathSelectorParent:
		return &ListGroupMembersRequest_FieldTerminalPathValue{ListGroupMembersRequest_FieldTerminalPath: *fp, value: value.(*group_member.ParentName)}
	case ListGroupMembersRequest_FieldPathSelectorPageSize:
		return &ListGroupMembersRequest_FieldTerminalPathValue{ListGroupMembersRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case ListGroupMembersRequest_FieldPathSelectorPageToken:
		return &ListGroupMembersRequest_FieldTerminalPathValue{ListGroupMembersRequest_FieldTerminalPath: *fp, value: value.(*group_member.PagerCursor)}
	case ListGroupMembersRequest_FieldPathSelectorOrderBy:
		return &ListGroupMembersRequest_FieldTerminalPathValue{ListGroupMembersRequest_FieldTerminalPath: *fp, value: value.(*group_member.OrderBy)}
	case ListGroupMembersRequest_FieldPathSelectorFilter:
		return &ListGroupMembersRequest_FieldTerminalPathValue{ListGroupMembersRequest_FieldTerminalPath: *fp, value: value.(*group_member.Filter)}
	case ListGroupMembersRequest_FieldPathSelectorFieldMask:
		return &ListGroupMembersRequest_FieldTerminalPathValue{ListGroupMembersRequest_FieldTerminalPath: *fp, value: value.(*group_member.GroupMember_FieldMask)}
	case ListGroupMembersRequest_FieldPathSelectorView:
		return &ListGroupMembersRequest_FieldTerminalPathValue{ListGroupMembersRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListGroupMembersRequest: %d", fp.selector))
	}
}

func (fp *ListGroupMembersRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListGroupMembersRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListGroupMembersRequest_FieldPathArrayOfValues {
	fpaov := &ListGroupMembersRequest_FieldTerminalPathArrayOfValues{ListGroupMembersRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListGroupMembersRequest_FieldPathSelectorParent:
		return &ListGroupMembersRequest_FieldTerminalPathArrayOfValues{ListGroupMembersRequest_FieldTerminalPath: *fp, values: values.([]*group_member.ParentName)}
	case ListGroupMembersRequest_FieldPathSelectorPageSize:
		return &ListGroupMembersRequest_FieldTerminalPathArrayOfValues{ListGroupMembersRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case ListGroupMembersRequest_FieldPathSelectorPageToken:
		return &ListGroupMembersRequest_FieldTerminalPathArrayOfValues{ListGroupMembersRequest_FieldTerminalPath: *fp, values: values.([]*group_member.PagerCursor)}
	case ListGroupMembersRequest_FieldPathSelectorOrderBy:
		return &ListGroupMembersRequest_FieldTerminalPathArrayOfValues{ListGroupMembersRequest_FieldTerminalPath: *fp, values: values.([]*group_member.OrderBy)}
	case ListGroupMembersRequest_FieldPathSelectorFilter:
		return &ListGroupMembersRequest_FieldTerminalPathArrayOfValues{ListGroupMembersRequest_FieldTerminalPath: *fp, values: values.([]*group_member.Filter)}
	case ListGroupMembersRequest_FieldPathSelectorFieldMask:
		return &ListGroupMembersRequest_FieldTerminalPathArrayOfValues{ListGroupMembersRequest_FieldTerminalPath: *fp, values: values.([]*group_member.GroupMember_FieldMask)}
	case ListGroupMembersRequest_FieldPathSelectorView:
		return &ListGroupMembersRequest_FieldTerminalPathArrayOfValues{ListGroupMembersRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListGroupMembersRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListGroupMembersRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListGroupMembersRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListGroupMembersRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ListGroupMembersRequest: %d", fp.selector))
	}
}

func (fp *ListGroupMembersRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ListGroupMembersRequest_FieldPathValue allows storing values for ListGroupMembersRequest fields according to their type
type ListGroupMembersRequest_FieldPathValue interface {
	ListGroupMembersRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListGroupMembersRequest)
	CompareWith(*ListGroupMembersRequest) (cmp int, comparable bool)
}

func ParseListGroupMembersRequest_FieldPathValue(pathStr, valueStr string) (ListGroupMembersRequest_FieldPathValue, error) {
	fp, err := ParseListGroupMembersRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListGroupMembersRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListGroupMembersRequest_FieldPathValue), nil
}

func MustParseListGroupMembersRequest_FieldPathValue(pathStr, valueStr string) ListGroupMembersRequest_FieldPathValue {
	fpv, err := ParseListGroupMembersRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListGroupMembersRequest_FieldTerminalPathValue struct {
	ListGroupMembersRequest_FieldTerminalPath
	value interface{}
}

var _ ListGroupMembersRequest_FieldPathValue = (*ListGroupMembersRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListGroupMembersRequest' as interface{}
func (fpv *ListGroupMembersRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListGroupMembersRequest_FieldTerminalPathValue) AsParentValue() (*group_member.ParentName, bool) {
	res, ok := fpv.value.(*group_member.ParentName)
	return res, ok
}
func (fpv *ListGroupMembersRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *ListGroupMembersRequest_FieldTerminalPathValue) AsPageTokenValue() (*group_member.PagerCursor, bool) {
	res, ok := fpv.value.(*group_member.PagerCursor)
	return res, ok
}
func (fpv *ListGroupMembersRequest_FieldTerminalPathValue) AsOrderByValue() (*group_member.OrderBy, bool) {
	res, ok := fpv.value.(*group_member.OrderBy)
	return res, ok
}
func (fpv *ListGroupMembersRequest_FieldTerminalPathValue) AsFilterValue() (*group_member.Filter, bool) {
	res, ok := fpv.value.(*group_member.Filter)
	return res, ok
}
func (fpv *ListGroupMembersRequest_FieldTerminalPathValue) AsFieldMaskValue() (*group_member.GroupMember_FieldMask, bool) {
	res, ok := fpv.value.(*group_member.GroupMember_FieldMask)
	return res, ok
}
func (fpv *ListGroupMembersRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object ListGroupMembersRequest
func (fpv *ListGroupMembersRequest_FieldTerminalPathValue) SetTo(target **ListGroupMembersRequest) {
	if *target == nil {
		*target = new(ListGroupMembersRequest)
	}
	switch fpv.selector {
	case ListGroupMembersRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*group_member.ParentName)
	case ListGroupMembersRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case ListGroupMembersRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*group_member.PagerCursor)
	case ListGroupMembersRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*group_member.OrderBy)
	case ListGroupMembersRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*group_member.Filter)
	case ListGroupMembersRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*group_member.GroupMember_FieldMask)
	case ListGroupMembersRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for ListGroupMembersRequest: %d", fpv.selector))
	}
}

func (fpv *ListGroupMembersRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListGroupMembersRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListGroupMembersRequest_FieldTerminalPathValue' with the value under path in 'ListGroupMembersRequest'.
func (fpv *ListGroupMembersRequest_FieldTerminalPathValue) CompareWith(source *ListGroupMembersRequest) (int, bool) {
	switch fpv.selector {
	case ListGroupMembersRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*group_member.ParentName)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ListGroupMembersRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListGroupMembersRequest_FieldPathSelectorPageToken:
		return 0, false
	case ListGroupMembersRequest_FieldPathSelectorOrderBy:
		return 0, false
	case ListGroupMembersRequest_FieldPathSelectorFilter:
		return 0, false
	case ListGroupMembersRequest_FieldPathSelectorFieldMask:
		return 0, false
	case ListGroupMembersRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListGroupMembersRequest: %d", fpv.selector))
	}
}

func (fpv *ListGroupMembersRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListGroupMembersRequest))
}

// ListGroupMembersRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for ListGroupMembersRequest according to their type
// Present only for array (repeated) types.
type ListGroupMembersRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListGroupMembersRequest_FieldPath
	ContainsValue(*ListGroupMembersRequest) bool
}

// ParseListGroupMembersRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListGroupMembersRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ListGroupMembersRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseListGroupMembersRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListGroupMembersRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListGroupMembersRequest_FieldPathArrayItemValue), nil
}

func MustParseListGroupMembersRequest_FieldPathArrayItemValue(pathStr, valueStr string) ListGroupMembersRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseListGroupMembersRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListGroupMembersRequest_FieldTerminalPathArrayItemValue struct {
	ListGroupMembersRequest_FieldTerminalPath
	value interface{}
}

var _ ListGroupMembersRequest_FieldPathArrayItemValue = (*ListGroupMembersRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListGroupMembersRequest as interface{}
func (fpaiv *ListGroupMembersRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ListGroupMembersRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ListGroupMembersRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListGroupMembersRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListGroupMembersRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListGroupMembersRequest'
func (fpaiv *ListGroupMembersRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ListGroupMembersRequest) bool {
	slice := fpaiv.ListGroupMembersRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ListGroupMembersRequest_FieldPathArrayOfValues allows storing slice of values for ListGroupMembersRequest fields according to their type
type ListGroupMembersRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListGroupMembersRequest_FieldPath
}

func ParseListGroupMembersRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ListGroupMembersRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseListGroupMembersRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListGroupMembersRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListGroupMembersRequest_FieldPathArrayOfValues), nil
}

func MustParseListGroupMembersRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ListGroupMembersRequest_FieldPathArrayOfValues {
	fpaov, err := ParseListGroupMembersRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListGroupMembersRequest_FieldTerminalPathArrayOfValues struct {
	ListGroupMembersRequest_FieldTerminalPath
	values interface{}
}

var _ ListGroupMembersRequest_FieldPathArrayOfValues = (*ListGroupMembersRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListGroupMembersRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListGroupMembersRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*group_member.ParentName) {
			values = append(values, v)
		}
	case ListGroupMembersRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case ListGroupMembersRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*group_member.PagerCursor) {
			values = append(values, v)
		}
	case ListGroupMembersRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*group_member.OrderBy) {
			values = append(values, v)
		}
	case ListGroupMembersRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*group_member.Filter) {
			values = append(values, v)
		}
	case ListGroupMembersRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*group_member.GroupMember_FieldMask) {
			values = append(values, v)
		}
	case ListGroupMembersRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListGroupMembersRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*group_member.ParentName, bool) {
	res, ok := fpaov.values.([]*group_member.ParentName)
	return res, ok
}
func (fpaov *ListGroupMembersRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *ListGroupMembersRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*group_member.PagerCursor, bool) {
	res, ok := fpaov.values.([]*group_member.PagerCursor)
	return res, ok
}
func (fpaov *ListGroupMembersRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*group_member.OrderBy, bool) {
	res, ok := fpaov.values.([]*group_member.OrderBy)
	return res, ok
}
func (fpaov *ListGroupMembersRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*group_member.Filter, bool) {
	res, ok := fpaov.values.([]*group_member.Filter)
	return res, ok
}
func (fpaov *ListGroupMembersRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*group_member.GroupMember_FieldMask, bool) {
	res, ok := fpaov.values.([]*group_member.GroupMember_FieldMask)
	return res, ok
}
func (fpaov *ListGroupMembersRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListGroupMembersResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListGroupMembersResponse_FieldPathSelector
	Get(source *ListGroupMembersResponse) []interface{}
	GetSingle(source *ListGroupMembersResponse) (interface{}, bool)
	ClearValue(item *ListGroupMembersResponse)

	// Those methods build corresponding ListGroupMembersResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListGroupMembersResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) ListGroupMembersResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListGroupMembersResponse_FieldPathArrayItemValue
}

type ListGroupMembersResponse_FieldPathSelector int32

const (
	ListGroupMembersResponse_FieldPathSelectorGroupMembers  ListGroupMembersResponse_FieldPathSelector = 0
	ListGroupMembersResponse_FieldPathSelectorPrevPageToken ListGroupMembersResponse_FieldPathSelector = 1
	ListGroupMembersResponse_FieldPathSelectorNextPageToken ListGroupMembersResponse_FieldPathSelector = 2
)

func (s ListGroupMembersResponse_FieldPathSelector) String() string {
	switch s {
	case ListGroupMembersResponse_FieldPathSelectorGroupMembers:
		return "group_members"
	case ListGroupMembersResponse_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case ListGroupMembersResponse_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for ListGroupMembersResponse: %d", s))
	}
}

func BuildListGroupMembersResponse_FieldPath(fp gotenobject.RawFieldPath) (ListGroupMembersResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListGroupMembersResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "group_members", "groupMembers", "group-members":
			return &ListGroupMembersResponse_FieldTerminalPath{selector: ListGroupMembersResponse_FieldPathSelectorGroupMembers}, nil
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &ListGroupMembersResponse_FieldTerminalPath{selector: ListGroupMembersResponse_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &ListGroupMembersResponse_FieldTerminalPath{selector: ListGroupMembersResponse_FieldPathSelectorNextPageToken}, nil
		}
	} else {
		switch fp[0] {
		case "group_members", "groupMembers", "group-members":
			if subpath, err := group_member.BuildGroupMember_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ListGroupMembersResponse_FieldSubPath{selector: ListGroupMembersResponse_FieldPathSelectorGroupMembers, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListGroupMembersResponse", fp)
}

func ParseListGroupMembersResponse_FieldPath(rawField string) (ListGroupMembersResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListGroupMembersResponse_FieldPath(fp)
}

func MustParseListGroupMembersResponse_FieldPath(rawField string) ListGroupMembersResponse_FieldPath {
	fp, err := ParseListGroupMembersResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListGroupMembersResponse_FieldTerminalPath struct {
	selector ListGroupMembersResponse_FieldPathSelector
}

var _ ListGroupMembersResponse_FieldPath = (*ListGroupMembersResponse_FieldTerminalPath)(nil)

func (fp *ListGroupMembersResponse_FieldTerminalPath) Selector() ListGroupMembersResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListGroupMembersResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListGroupMembersResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListGroupMembersResponse
func (fp *ListGroupMembersResponse_FieldTerminalPath) Get(source *ListGroupMembersResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListGroupMembersResponse_FieldPathSelectorGroupMembers:
			for _, value := range source.GetGroupMembers() {
				values = append(values, value)
			}
		case ListGroupMembersResponse_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case ListGroupMembersResponse_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListGroupMembersResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *ListGroupMembersResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListGroupMembersResponse))
}

// GetSingle returns value pointed by specific field of from source ListGroupMembersResponse
func (fp *ListGroupMembersResponse_FieldTerminalPath) GetSingle(source *ListGroupMembersResponse) (interface{}, bool) {
	switch fp.selector {
	case ListGroupMembersResponse_FieldPathSelectorGroupMembers:
		res := source.GetGroupMembers()
		return res, res != nil
	case ListGroupMembersResponse_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case ListGroupMembersResponse_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListGroupMembersResponse: %d", fp.selector))
	}
}

func (fp *ListGroupMembersResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListGroupMembersResponse))
}

// GetDefault returns a default value of the field type
func (fp *ListGroupMembersResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListGroupMembersResponse_FieldPathSelectorGroupMembers:
		return ([]*group_member.GroupMember)(nil)
	case ListGroupMembersResponse_FieldPathSelectorPrevPageToken:
		return (*group_member.PagerCursor)(nil)
	case ListGroupMembersResponse_FieldPathSelectorNextPageToken:
		return (*group_member.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ListGroupMembersResponse: %d", fp.selector))
	}
}

func (fp *ListGroupMembersResponse_FieldTerminalPath) ClearValue(item *ListGroupMembersResponse) {
	if item != nil {
		switch fp.selector {
		case ListGroupMembersResponse_FieldPathSelectorGroupMembers:
			item.GroupMembers = nil
		case ListGroupMembersResponse_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case ListGroupMembersResponse_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for ListGroupMembersResponse: %d", fp.selector))
		}
	}
}

func (fp *ListGroupMembersResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListGroupMembersResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListGroupMembersResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListGroupMembersResponse_FieldPathSelectorPrevPageToken ||
		fp.selector == ListGroupMembersResponse_FieldPathSelectorNextPageToken
}

func (fp *ListGroupMembersResponse_FieldTerminalPath) WithIValue(value interface{}) ListGroupMembersResponse_FieldPathValue {
	switch fp.selector {
	case ListGroupMembersResponse_FieldPathSelectorGroupMembers:
		return &ListGroupMembersResponse_FieldTerminalPathValue{ListGroupMembersResponse_FieldTerminalPath: *fp, value: value.([]*group_member.GroupMember)}
	case ListGroupMembersResponse_FieldPathSelectorPrevPageToken:
		return &ListGroupMembersResponse_FieldTerminalPathValue{ListGroupMembersResponse_FieldTerminalPath: *fp, value: value.(*group_member.PagerCursor)}
	case ListGroupMembersResponse_FieldPathSelectorNextPageToken:
		return &ListGroupMembersResponse_FieldTerminalPathValue{ListGroupMembersResponse_FieldTerminalPath: *fp, value: value.(*group_member.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListGroupMembersResponse: %d", fp.selector))
	}
}

func (fp *ListGroupMembersResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListGroupMembersResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListGroupMembersResponse_FieldPathArrayOfValues {
	fpaov := &ListGroupMembersResponse_FieldTerminalPathArrayOfValues{ListGroupMembersResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListGroupMembersResponse_FieldPathSelectorGroupMembers:
		return &ListGroupMembersResponse_FieldTerminalPathArrayOfValues{ListGroupMembersResponse_FieldTerminalPath: *fp, values: values.([][]*group_member.GroupMember)}
	case ListGroupMembersResponse_FieldPathSelectorPrevPageToken:
		return &ListGroupMembersResponse_FieldTerminalPathArrayOfValues{ListGroupMembersResponse_FieldTerminalPath: *fp, values: values.([]*group_member.PagerCursor)}
	case ListGroupMembersResponse_FieldPathSelectorNextPageToken:
		return &ListGroupMembersResponse_FieldTerminalPathArrayOfValues{ListGroupMembersResponse_FieldTerminalPath: *fp, values: values.([]*group_member.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListGroupMembersResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListGroupMembersResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListGroupMembersResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListGroupMembersResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case ListGroupMembersResponse_FieldPathSelectorGroupMembers:
		return &ListGroupMembersResponse_FieldTerminalPathArrayItemValue{ListGroupMembersResponse_FieldTerminalPath: *fp, value: value.(*group_member.GroupMember)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListGroupMembersResponse: %d", fp.selector))
	}
}

func (fp *ListGroupMembersResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ListGroupMembersResponse_FieldSubPath struct {
	selector ListGroupMembersResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ListGroupMembersResponse_FieldPath = (*ListGroupMembersResponse_FieldSubPath)(nil)

func (fps *ListGroupMembersResponse_FieldSubPath) Selector() ListGroupMembersResponse_FieldPathSelector {
	return fps.selector
}
func (fps *ListGroupMembersResponse_FieldSubPath) AsGroupMembersSubPath() (group_member.GroupMember_FieldPath, bool) {
	res, ok := fps.subPath.(group_member.GroupMember_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ListGroupMembersResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ListGroupMembersResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ListGroupMembersResponse
func (fps *ListGroupMembersResponse_FieldSubPath) Get(source *ListGroupMembersResponse) (values []interface{}) {
	if asGroupMemberFieldPath, ok := fps.AsGroupMembersSubPath(); ok {
		for _, item := range source.GetGroupMembers() {
			values = append(values, asGroupMemberFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for ListGroupMembersResponse: %d", fps.selector))
	}
	return
}

func (fps *ListGroupMembersResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ListGroupMembersResponse))
}

// GetSingle returns value of selected field from source ListGroupMembersResponse
func (fps *ListGroupMembersResponse_FieldSubPath) GetSingle(source *ListGroupMembersResponse) (interface{}, bool) {
	switch fps.selector {
	case ListGroupMembersResponse_FieldPathSelectorGroupMembers:
		if len(source.GetGroupMembers()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetGroupMembers()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for ListGroupMembersResponse: %d", fps.selector))
	}
}

func (fps *ListGroupMembersResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ListGroupMembersResponse))
}

// GetDefault returns a default value of the field type
func (fps *ListGroupMembersResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ListGroupMembersResponse_FieldSubPath) ClearValue(item *ListGroupMembersResponse) {
	if item != nil {
		switch fps.selector {
		case ListGroupMembersResponse_FieldPathSelectorGroupMembers:
			for _, subItem := range item.GroupMembers {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListGroupMembersResponse: %d", fps.selector))
		}
	}
}

func (fps *ListGroupMembersResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ListGroupMembersResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *ListGroupMembersResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ListGroupMembersResponse_FieldSubPath) WithIValue(value interface{}) ListGroupMembersResponse_FieldPathValue {
	return &ListGroupMembersResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ListGroupMembersResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ListGroupMembersResponse_FieldSubPath) WithIArrayOfValues(values interface{}) ListGroupMembersResponse_FieldPathArrayOfValues {
	return &ListGroupMembersResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ListGroupMembersResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ListGroupMembersResponse_FieldSubPath) WithIArrayItemValue(value interface{}) ListGroupMembersResponse_FieldPathArrayItemValue {
	return &ListGroupMembersResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ListGroupMembersResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ListGroupMembersResponse_FieldPathValue allows storing values for ListGroupMembersResponse fields according to their type
type ListGroupMembersResponse_FieldPathValue interface {
	ListGroupMembersResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListGroupMembersResponse)
	CompareWith(*ListGroupMembersResponse) (cmp int, comparable bool)
}

func ParseListGroupMembersResponse_FieldPathValue(pathStr, valueStr string) (ListGroupMembersResponse_FieldPathValue, error) {
	fp, err := ParseListGroupMembersResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListGroupMembersResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListGroupMembersResponse_FieldPathValue), nil
}

func MustParseListGroupMembersResponse_FieldPathValue(pathStr, valueStr string) ListGroupMembersResponse_FieldPathValue {
	fpv, err := ParseListGroupMembersResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListGroupMembersResponse_FieldTerminalPathValue struct {
	ListGroupMembersResponse_FieldTerminalPath
	value interface{}
}

var _ ListGroupMembersResponse_FieldPathValue = (*ListGroupMembersResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListGroupMembersResponse' as interface{}
func (fpv *ListGroupMembersResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListGroupMembersResponse_FieldTerminalPathValue) AsGroupMembersValue() ([]*group_member.GroupMember, bool) {
	res, ok := fpv.value.([]*group_member.GroupMember)
	return res, ok
}
func (fpv *ListGroupMembersResponse_FieldTerminalPathValue) AsPrevPageTokenValue() (*group_member.PagerCursor, bool) {
	res, ok := fpv.value.(*group_member.PagerCursor)
	return res, ok
}
func (fpv *ListGroupMembersResponse_FieldTerminalPathValue) AsNextPageTokenValue() (*group_member.PagerCursor, bool) {
	res, ok := fpv.value.(*group_member.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object ListGroupMembersResponse
func (fpv *ListGroupMembersResponse_FieldTerminalPathValue) SetTo(target **ListGroupMembersResponse) {
	if *target == nil {
		*target = new(ListGroupMembersResponse)
	}
	switch fpv.selector {
	case ListGroupMembersResponse_FieldPathSelectorGroupMembers:
		(*target).GroupMembers = fpv.value.([]*group_member.GroupMember)
	case ListGroupMembersResponse_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*group_member.PagerCursor)
	case ListGroupMembersResponse_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*group_member.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for ListGroupMembersResponse: %d", fpv.selector))
	}
}

func (fpv *ListGroupMembersResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListGroupMembersResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListGroupMembersResponse_FieldTerminalPathValue' with the value under path in 'ListGroupMembersResponse'.
func (fpv *ListGroupMembersResponse_FieldTerminalPathValue) CompareWith(source *ListGroupMembersResponse) (int, bool) {
	switch fpv.selector {
	case ListGroupMembersResponse_FieldPathSelectorGroupMembers:
		return 0, false
	case ListGroupMembersResponse_FieldPathSelectorPrevPageToken:
		return 0, false
	case ListGroupMembersResponse_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ListGroupMembersResponse: %d", fpv.selector))
	}
}

func (fpv *ListGroupMembersResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListGroupMembersResponse))
}

type ListGroupMembersResponse_FieldSubPathValue struct {
	ListGroupMembersResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ListGroupMembersResponse_FieldPathValue = (*ListGroupMembersResponse_FieldSubPathValue)(nil)

func (fpvs *ListGroupMembersResponse_FieldSubPathValue) AsGroupMembersPathValue() (group_member.GroupMember_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(group_member.GroupMember_FieldPathValue)
	return res, ok
}

func (fpvs *ListGroupMembersResponse_FieldSubPathValue) SetTo(target **ListGroupMembersResponse) {
	if *target == nil {
		*target = new(ListGroupMembersResponse)
	}
	switch fpvs.Selector() {
	case ListGroupMembersResponse_FieldPathSelectorGroupMembers:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for ListGroupMembersResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListGroupMembersResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListGroupMembersResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ListGroupMembersResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ListGroupMembersResponse_FieldSubPathValue) CompareWith(source *ListGroupMembersResponse) (int, bool) {
	switch fpvs.Selector() {
	case ListGroupMembersResponse_FieldPathSelectorGroupMembers:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for ListGroupMembersResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListGroupMembersResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ListGroupMembersResponse))
}

// ListGroupMembersResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for ListGroupMembersResponse according to their type
// Present only for array (repeated) types.
type ListGroupMembersResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListGroupMembersResponse_FieldPath
	ContainsValue(*ListGroupMembersResponse) bool
}

// ParseListGroupMembersResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListGroupMembersResponse_FieldPathArrayItemValue(pathStr, valueStr string) (ListGroupMembersResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseListGroupMembersResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListGroupMembersResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListGroupMembersResponse_FieldPathArrayItemValue), nil
}

func MustParseListGroupMembersResponse_FieldPathArrayItemValue(pathStr, valueStr string) ListGroupMembersResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseListGroupMembersResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListGroupMembersResponse_FieldTerminalPathArrayItemValue struct {
	ListGroupMembersResponse_FieldTerminalPath
	value interface{}
}

var _ ListGroupMembersResponse_FieldPathArrayItemValue = (*ListGroupMembersResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListGroupMembersResponse as interface{}
func (fpaiv *ListGroupMembersResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *ListGroupMembersResponse_FieldTerminalPathArrayItemValue) AsGroupMembersItemValue() (*group_member.GroupMember, bool) {
	res, ok := fpaiv.value.(*group_member.GroupMember)
	return res, ok
}

func (fpaiv *ListGroupMembersResponse_FieldTerminalPathArrayItemValue) GetSingle(source *ListGroupMembersResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListGroupMembersResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListGroupMembersResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListGroupMembersResponse'
func (fpaiv *ListGroupMembersResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *ListGroupMembersResponse) bool {
	slice := fpaiv.ListGroupMembersResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ListGroupMembersResponse_FieldSubPathArrayItemValue struct {
	ListGroupMembersResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ListGroupMembersResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ListGroupMembersResponse_FieldSubPathArrayItemValue) AsGroupMembersPathItemValue() (group_member.GroupMember_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(group_member.GroupMember_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListGroupMembersResponse'
func (fpaivs *ListGroupMembersResponse_FieldSubPathArrayItemValue) ContainsValue(source *ListGroupMembersResponse) bool {
	switch fpaivs.Selector() {
	case ListGroupMembersResponse_FieldPathSelectorGroupMembers:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for ListGroupMembersResponse: %d", fpaivs.Selector()))
	}
}

// ListGroupMembersResponse_FieldPathArrayOfValues allows storing slice of values for ListGroupMembersResponse fields according to their type
type ListGroupMembersResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListGroupMembersResponse_FieldPath
}

func ParseListGroupMembersResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (ListGroupMembersResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseListGroupMembersResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListGroupMembersResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListGroupMembersResponse_FieldPathArrayOfValues), nil
}

func MustParseListGroupMembersResponse_FieldPathArrayOfValues(pathStr, valuesStr string) ListGroupMembersResponse_FieldPathArrayOfValues {
	fpaov, err := ParseListGroupMembersResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListGroupMembersResponse_FieldTerminalPathArrayOfValues struct {
	ListGroupMembersResponse_FieldTerminalPath
	values interface{}
}

var _ ListGroupMembersResponse_FieldPathArrayOfValues = (*ListGroupMembersResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListGroupMembersResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListGroupMembersResponse_FieldPathSelectorGroupMembers:
		for _, v := range fpaov.values.([][]*group_member.GroupMember) {
			values = append(values, v)
		}
	case ListGroupMembersResponse_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*group_member.PagerCursor) {
			values = append(values, v)
		}
	case ListGroupMembersResponse_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*group_member.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListGroupMembersResponse_FieldTerminalPathArrayOfValues) AsGroupMembersArrayOfValues() ([][]*group_member.GroupMember, bool) {
	res, ok := fpaov.values.([][]*group_member.GroupMember)
	return res, ok
}
func (fpaov *ListGroupMembersResponse_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*group_member.PagerCursor, bool) {
	res, ok := fpaov.values.([]*group_member.PagerCursor)
	return res, ok
}
func (fpaov *ListGroupMembersResponse_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*group_member.PagerCursor, bool) {
	res, ok := fpaov.values.([]*group_member.PagerCursor)
	return res, ok
}

type ListGroupMembersResponse_FieldSubPathArrayOfValues struct {
	ListGroupMembersResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ListGroupMembersResponse_FieldPathArrayOfValues = (*ListGroupMembersResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ListGroupMembersResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ListGroupMembersResponse_FieldSubPathArrayOfValues) AsGroupMembersPathArrayOfValues() (group_member.GroupMember_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(group_member.GroupMember_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchGroupMemberRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchGroupMemberRequest_FieldPathSelector
	Get(source *WatchGroupMemberRequest) []interface{}
	GetSingle(source *WatchGroupMemberRequest) (interface{}, bool)
	ClearValue(item *WatchGroupMemberRequest)

	// Those methods build corresponding WatchGroupMemberRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchGroupMemberRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchGroupMemberRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchGroupMemberRequest_FieldPathArrayItemValue
}

type WatchGroupMemberRequest_FieldPathSelector int32

const (
	WatchGroupMemberRequest_FieldPathSelectorName      WatchGroupMemberRequest_FieldPathSelector = 0
	WatchGroupMemberRequest_FieldPathSelectorFieldMask WatchGroupMemberRequest_FieldPathSelector = 1
	WatchGroupMemberRequest_FieldPathSelectorView      WatchGroupMemberRequest_FieldPathSelector = 2
)

func (s WatchGroupMemberRequest_FieldPathSelector) String() string {
	switch s {
	case WatchGroupMemberRequest_FieldPathSelectorName:
		return "name"
	case WatchGroupMemberRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchGroupMemberRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchGroupMemberRequest: %d", s))
	}
}

func BuildWatchGroupMemberRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchGroupMemberRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchGroupMemberRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &WatchGroupMemberRequest_FieldTerminalPath{selector: WatchGroupMemberRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchGroupMemberRequest_FieldTerminalPath{selector: WatchGroupMemberRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchGroupMemberRequest_FieldTerminalPath{selector: WatchGroupMemberRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchGroupMemberRequest", fp)
}

func ParseWatchGroupMemberRequest_FieldPath(rawField string) (WatchGroupMemberRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchGroupMemberRequest_FieldPath(fp)
}

func MustParseWatchGroupMemberRequest_FieldPath(rawField string) WatchGroupMemberRequest_FieldPath {
	fp, err := ParseWatchGroupMemberRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchGroupMemberRequest_FieldTerminalPath struct {
	selector WatchGroupMemberRequest_FieldPathSelector
}

var _ WatchGroupMemberRequest_FieldPath = (*WatchGroupMemberRequest_FieldTerminalPath)(nil)

func (fp *WatchGroupMemberRequest_FieldTerminalPath) Selector() WatchGroupMemberRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchGroupMemberRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchGroupMemberRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchGroupMemberRequest
func (fp *WatchGroupMemberRequest_FieldTerminalPath) Get(source *WatchGroupMemberRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchGroupMemberRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case WatchGroupMemberRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchGroupMemberRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchGroupMemberRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchGroupMemberRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchGroupMemberRequest))
}

// GetSingle returns value pointed by specific field of from source WatchGroupMemberRequest
func (fp *WatchGroupMemberRequest_FieldTerminalPath) GetSingle(source *WatchGroupMemberRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchGroupMemberRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case WatchGroupMemberRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchGroupMemberRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchGroupMemberRequest: %d", fp.selector))
	}
}

func (fp *WatchGroupMemberRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchGroupMemberRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchGroupMemberRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchGroupMemberRequest_FieldPathSelectorName:
		return (*group_member.Reference)(nil)
	case WatchGroupMemberRequest_FieldPathSelectorFieldMask:
		return (*group_member.GroupMember_FieldMask)(nil)
	case WatchGroupMemberRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for WatchGroupMemberRequest: %d", fp.selector))
	}
}

func (fp *WatchGroupMemberRequest_FieldTerminalPath) ClearValue(item *WatchGroupMemberRequest) {
	if item != nil {
		switch fp.selector {
		case WatchGroupMemberRequest_FieldPathSelectorName:
			item.Name = nil
		case WatchGroupMemberRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchGroupMemberRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for WatchGroupMemberRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchGroupMemberRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchGroupMemberRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchGroupMemberRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchGroupMemberRequest_FieldPathSelectorName ||
		fp.selector == WatchGroupMemberRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchGroupMemberRequest_FieldPathSelectorView
}

func (fp *WatchGroupMemberRequest_FieldTerminalPath) WithIValue(value interface{}) WatchGroupMemberRequest_FieldPathValue {
	switch fp.selector {
	case WatchGroupMemberRequest_FieldPathSelectorName:
		return &WatchGroupMemberRequest_FieldTerminalPathValue{WatchGroupMemberRequest_FieldTerminalPath: *fp, value: value.(*group_member.Reference)}
	case WatchGroupMemberRequest_FieldPathSelectorFieldMask:
		return &WatchGroupMemberRequest_FieldTerminalPathValue{WatchGroupMemberRequest_FieldTerminalPath: *fp, value: value.(*group_member.GroupMember_FieldMask)}
	case WatchGroupMemberRequest_FieldPathSelectorView:
		return &WatchGroupMemberRequest_FieldTerminalPathValue{WatchGroupMemberRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchGroupMemberRequest: %d", fp.selector))
	}
}

func (fp *WatchGroupMemberRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchGroupMemberRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchGroupMemberRequest_FieldPathArrayOfValues {
	fpaov := &WatchGroupMemberRequest_FieldTerminalPathArrayOfValues{WatchGroupMemberRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchGroupMemberRequest_FieldPathSelectorName:
		return &WatchGroupMemberRequest_FieldTerminalPathArrayOfValues{WatchGroupMemberRequest_FieldTerminalPath: *fp, values: values.([]*group_member.Reference)}
	case WatchGroupMemberRequest_FieldPathSelectorFieldMask:
		return &WatchGroupMemberRequest_FieldTerminalPathArrayOfValues{WatchGroupMemberRequest_FieldTerminalPath: *fp, values: values.([]*group_member.GroupMember_FieldMask)}
	case WatchGroupMemberRequest_FieldPathSelectorView:
		return &WatchGroupMemberRequest_FieldTerminalPathArrayOfValues{WatchGroupMemberRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchGroupMemberRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchGroupMemberRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchGroupMemberRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchGroupMemberRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchGroupMemberRequest: %d", fp.selector))
	}
}

func (fp *WatchGroupMemberRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchGroupMemberRequest_FieldPathValue allows storing values for WatchGroupMemberRequest fields according to their type
type WatchGroupMemberRequest_FieldPathValue interface {
	WatchGroupMemberRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchGroupMemberRequest)
	CompareWith(*WatchGroupMemberRequest) (cmp int, comparable bool)
}

func ParseWatchGroupMemberRequest_FieldPathValue(pathStr, valueStr string) (WatchGroupMemberRequest_FieldPathValue, error) {
	fp, err := ParseWatchGroupMemberRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchGroupMemberRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchGroupMemberRequest_FieldPathValue), nil
}

func MustParseWatchGroupMemberRequest_FieldPathValue(pathStr, valueStr string) WatchGroupMemberRequest_FieldPathValue {
	fpv, err := ParseWatchGroupMemberRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchGroupMemberRequest_FieldTerminalPathValue struct {
	WatchGroupMemberRequest_FieldTerminalPath
	value interface{}
}

var _ WatchGroupMemberRequest_FieldPathValue = (*WatchGroupMemberRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchGroupMemberRequest' as interface{}
func (fpv *WatchGroupMemberRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchGroupMemberRequest_FieldTerminalPathValue) AsNameValue() (*group_member.Reference, bool) {
	res, ok := fpv.value.(*group_member.Reference)
	return res, ok
}
func (fpv *WatchGroupMemberRequest_FieldTerminalPathValue) AsFieldMaskValue() (*group_member.GroupMember_FieldMask, bool) {
	res, ok := fpv.value.(*group_member.GroupMember_FieldMask)
	return res, ok
}
func (fpv *WatchGroupMemberRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object WatchGroupMemberRequest
func (fpv *WatchGroupMemberRequest_FieldTerminalPathValue) SetTo(target **WatchGroupMemberRequest) {
	if *target == nil {
		*target = new(WatchGroupMemberRequest)
	}
	switch fpv.selector {
	case WatchGroupMemberRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*group_member.Reference)
	case WatchGroupMemberRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*group_member.GroupMember_FieldMask)
	case WatchGroupMemberRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchGroupMemberRequest: %d", fpv.selector))
	}
}

func (fpv *WatchGroupMemberRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchGroupMemberRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchGroupMemberRequest_FieldTerminalPathValue' with the value under path in 'WatchGroupMemberRequest'.
func (fpv *WatchGroupMemberRequest_FieldTerminalPathValue) CompareWith(source *WatchGroupMemberRequest) (int, bool) {
	switch fpv.selector {
	case WatchGroupMemberRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*group_member.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchGroupMemberRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchGroupMemberRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchGroupMemberRequest: %d", fpv.selector))
	}
}

func (fpv *WatchGroupMemberRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchGroupMemberRequest))
}

// WatchGroupMemberRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchGroupMemberRequest according to their type
// Present only for array (repeated) types.
type WatchGroupMemberRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchGroupMemberRequest_FieldPath
	ContainsValue(*WatchGroupMemberRequest) bool
}

// ParseWatchGroupMemberRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchGroupMemberRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchGroupMemberRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchGroupMemberRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchGroupMemberRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchGroupMemberRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchGroupMemberRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchGroupMemberRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchGroupMemberRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchGroupMemberRequest_FieldTerminalPathArrayItemValue struct {
	WatchGroupMemberRequest_FieldTerminalPath
	value interface{}
}

var _ WatchGroupMemberRequest_FieldPathArrayItemValue = (*WatchGroupMemberRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchGroupMemberRequest as interface{}
func (fpaiv *WatchGroupMemberRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchGroupMemberRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchGroupMemberRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchGroupMemberRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchGroupMemberRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchGroupMemberRequest'
func (fpaiv *WatchGroupMemberRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchGroupMemberRequest) bool {
	slice := fpaiv.WatchGroupMemberRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchGroupMemberRequest_FieldPathArrayOfValues allows storing slice of values for WatchGroupMemberRequest fields according to their type
type WatchGroupMemberRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchGroupMemberRequest_FieldPath
}

func ParseWatchGroupMemberRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchGroupMemberRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchGroupMemberRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchGroupMemberRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchGroupMemberRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchGroupMemberRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchGroupMemberRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchGroupMemberRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchGroupMemberRequest_FieldTerminalPathArrayOfValues struct {
	WatchGroupMemberRequest_FieldTerminalPath
	values interface{}
}

var _ WatchGroupMemberRequest_FieldPathArrayOfValues = (*WatchGroupMemberRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchGroupMemberRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchGroupMemberRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*group_member.Reference) {
			values = append(values, v)
		}
	case WatchGroupMemberRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*group_member.GroupMember_FieldMask) {
			values = append(values, v)
		}
	case WatchGroupMemberRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchGroupMemberRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*group_member.Reference, bool) {
	res, ok := fpaov.values.([]*group_member.Reference)
	return res, ok
}
func (fpaov *WatchGroupMemberRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*group_member.GroupMember_FieldMask, bool) {
	res, ok := fpaov.values.([]*group_member.GroupMember_FieldMask)
	return res, ok
}
func (fpaov *WatchGroupMemberRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchGroupMemberResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchGroupMemberResponse_FieldPathSelector
	Get(source *WatchGroupMemberResponse) []interface{}
	GetSingle(source *WatchGroupMemberResponse) (interface{}, bool)
	ClearValue(item *WatchGroupMemberResponse)

	// Those methods build corresponding WatchGroupMemberResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchGroupMemberResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchGroupMemberResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchGroupMemberResponse_FieldPathArrayItemValue
}

type WatchGroupMemberResponse_FieldPathSelector int32

const (
	WatchGroupMemberResponse_FieldPathSelectorChange WatchGroupMemberResponse_FieldPathSelector = 0
)

func (s WatchGroupMemberResponse_FieldPathSelector) String() string {
	switch s {
	case WatchGroupMemberResponse_FieldPathSelectorChange:
		return "change"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchGroupMemberResponse: %d", s))
	}
}

func BuildWatchGroupMemberResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchGroupMemberResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchGroupMemberResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "change":
			return &WatchGroupMemberResponse_FieldTerminalPath{selector: WatchGroupMemberResponse_FieldPathSelectorChange}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchGroupMemberResponse", fp)
}

func ParseWatchGroupMemberResponse_FieldPath(rawField string) (WatchGroupMemberResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchGroupMemberResponse_FieldPath(fp)
}

func MustParseWatchGroupMemberResponse_FieldPath(rawField string) WatchGroupMemberResponse_FieldPath {
	fp, err := ParseWatchGroupMemberResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchGroupMemberResponse_FieldTerminalPath struct {
	selector WatchGroupMemberResponse_FieldPathSelector
}

var _ WatchGroupMemberResponse_FieldPath = (*WatchGroupMemberResponse_FieldTerminalPath)(nil)

func (fp *WatchGroupMemberResponse_FieldTerminalPath) Selector() WatchGroupMemberResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchGroupMemberResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchGroupMemberResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchGroupMemberResponse
func (fp *WatchGroupMemberResponse_FieldTerminalPath) Get(source *WatchGroupMemberResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchGroupMemberResponse_FieldPathSelectorChange:
			if source.Change != nil {
				values = append(values, source.Change)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchGroupMemberResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchGroupMemberResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchGroupMemberResponse))
}

// GetSingle returns value pointed by specific field of from source WatchGroupMemberResponse
func (fp *WatchGroupMemberResponse_FieldTerminalPath) GetSingle(source *WatchGroupMemberResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchGroupMemberResponse_FieldPathSelectorChange:
		res := source.GetChange()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchGroupMemberResponse: %d", fp.selector))
	}
}

func (fp *WatchGroupMemberResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchGroupMemberResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchGroupMemberResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchGroupMemberResponse_FieldPathSelectorChange:
		return (*group_member.GroupMemberChange)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchGroupMemberResponse: %d", fp.selector))
	}
}

func (fp *WatchGroupMemberResponse_FieldTerminalPath) ClearValue(item *WatchGroupMemberResponse) {
	if item != nil {
		switch fp.selector {
		case WatchGroupMemberResponse_FieldPathSelectorChange:
			item.Change = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchGroupMemberResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchGroupMemberResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchGroupMemberResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchGroupMemberResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchGroupMemberResponse_FieldPathSelectorChange
}

func (fp *WatchGroupMemberResponse_FieldTerminalPath) WithIValue(value interface{}) WatchGroupMemberResponse_FieldPathValue {
	switch fp.selector {
	case WatchGroupMemberResponse_FieldPathSelectorChange:
		return &WatchGroupMemberResponse_FieldTerminalPathValue{WatchGroupMemberResponse_FieldTerminalPath: *fp, value: value.(*group_member.GroupMemberChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchGroupMemberResponse: %d", fp.selector))
	}
}

func (fp *WatchGroupMemberResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchGroupMemberResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchGroupMemberResponse_FieldPathArrayOfValues {
	fpaov := &WatchGroupMemberResponse_FieldTerminalPathArrayOfValues{WatchGroupMemberResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchGroupMemberResponse_FieldPathSelectorChange:
		return &WatchGroupMemberResponse_FieldTerminalPathArrayOfValues{WatchGroupMemberResponse_FieldTerminalPath: *fp, values: values.([]*group_member.GroupMemberChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchGroupMemberResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchGroupMemberResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchGroupMemberResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchGroupMemberResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchGroupMemberResponse: %d", fp.selector))
	}
}

func (fp *WatchGroupMemberResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchGroupMemberResponse_FieldPathValue allows storing values for WatchGroupMemberResponse fields according to their type
type WatchGroupMemberResponse_FieldPathValue interface {
	WatchGroupMemberResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchGroupMemberResponse)
	CompareWith(*WatchGroupMemberResponse) (cmp int, comparable bool)
}

func ParseWatchGroupMemberResponse_FieldPathValue(pathStr, valueStr string) (WatchGroupMemberResponse_FieldPathValue, error) {
	fp, err := ParseWatchGroupMemberResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchGroupMemberResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchGroupMemberResponse_FieldPathValue), nil
}

func MustParseWatchGroupMemberResponse_FieldPathValue(pathStr, valueStr string) WatchGroupMemberResponse_FieldPathValue {
	fpv, err := ParseWatchGroupMemberResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchGroupMemberResponse_FieldTerminalPathValue struct {
	WatchGroupMemberResponse_FieldTerminalPath
	value interface{}
}

var _ WatchGroupMemberResponse_FieldPathValue = (*WatchGroupMemberResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchGroupMemberResponse' as interface{}
func (fpv *WatchGroupMemberResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchGroupMemberResponse_FieldTerminalPathValue) AsChangeValue() (*group_member.GroupMemberChange, bool) {
	res, ok := fpv.value.(*group_member.GroupMemberChange)
	return res, ok
}

// SetTo stores value for selected field for object WatchGroupMemberResponse
func (fpv *WatchGroupMemberResponse_FieldTerminalPathValue) SetTo(target **WatchGroupMemberResponse) {
	if *target == nil {
		*target = new(WatchGroupMemberResponse)
	}
	switch fpv.selector {
	case WatchGroupMemberResponse_FieldPathSelectorChange:
		(*target).Change = fpv.value.(*group_member.GroupMemberChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchGroupMemberResponse: %d", fpv.selector))
	}
}

func (fpv *WatchGroupMemberResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchGroupMemberResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchGroupMemberResponse_FieldTerminalPathValue' with the value under path in 'WatchGroupMemberResponse'.
func (fpv *WatchGroupMemberResponse_FieldTerminalPathValue) CompareWith(source *WatchGroupMemberResponse) (int, bool) {
	switch fpv.selector {
	case WatchGroupMemberResponse_FieldPathSelectorChange:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchGroupMemberResponse: %d", fpv.selector))
	}
}

func (fpv *WatchGroupMemberResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchGroupMemberResponse))
}

// WatchGroupMemberResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchGroupMemberResponse according to their type
// Present only for array (repeated) types.
type WatchGroupMemberResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchGroupMemberResponse_FieldPath
	ContainsValue(*WatchGroupMemberResponse) bool
}

// ParseWatchGroupMemberResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchGroupMemberResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchGroupMemberResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchGroupMemberResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchGroupMemberResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchGroupMemberResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchGroupMemberResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchGroupMemberResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchGroupMemberResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchGroupMemberResponse_FieldTerminalPathArrayItemValue struct {
	WatchGroupMemberResponse_FieldTerminalPath
	value interface{}
}

var _ WatchGroupMemberResponse_FieldPathArrayItemValue = (*WatchGroupMemberResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchGroupMemberResponse as interface{}
func (fpaiv *WatchGroupMemberResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchGroupMemberResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchGroupMemberResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchGroupMemberResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchGroupMemberResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchGroupMemberResponse'
func (fpaiv *WatchGroupMemberResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchGroupMemberResponse) bool {
	slice := fpaiv.WatchGroupMemberResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchGroupMemberResponse_FieldPathArrayOfValues allows storing slice of values for WatchGroupMemberResponse fields according to their type
type WatchGroupMemberResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchGroupMemberResponse_FieldPath
}

func ParseWatchGroupMemberResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchGroupMemberResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchGroupMemberResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchGroupMemberResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchGroupMemberResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchGroupMemberResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchGroupMemberResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchGroupMemberResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchGroupMemberResponse_FieldTerminalPathArrayOfValues struct {
	WatchGroupMemberResponse_FieldTerminalPath
	values interface{}
}

var _ WatchGroupMemberResponse_FieldPathArrayOfValues = (*WatchGroupMemberResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchGroupMemberResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchGroupMemberResponse_FieldPathSelectorChange:
		for _, v := range fpaov.values.([]*group_member.GroupMemberChange) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchGroupMemberResponse_FieldTerminalPathArrayOfValues) AsChangeArrayOfValues() ([]*group_member.GroupMemberChange, bool) {
	res, ok := fpaov.values.([]*group_member.GroupMemberChange)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchGroupMembersRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchGroupMembersRequest_FieldPathSelector
	Get(source *WatchGroupMembersRequest) []interface{}
	GetSingle(source *WatchGroupMembersRequest) (interface{}, bool)
	ClearValue(item *WatchGroupMembersRequest)

	// Those methods build corresponding WatchGroupMembersRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchGroupMembersRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchGroupMembersRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchGroupMembersRequest_FieldPathArrayItemValue
}

type WatchGroupMembersRequest_FieldPathSelector int32

const (
	WatchGroupMembersRequest_FieldPathSelectorType         WatchGroupMembersRequest_FieldPathSelector = 0
	WatchGroupMembersRequest_FieldPathSelectorParent       WatchGroupMembersRequest_FieldPathSelector = 1
	WatchGroupMembersRequest_FieldPathSelectorPageSize     WatchGroupMembersRequest_FieldPathSelector = 2
	WatchGroupMembersRequest_FieldPathSelectorPageToken    WatchGroupMembersRequest_FieldPathSelector = 3
	WatchGroupMembersRequest_FieldPathSelectorOrderBy      WatchGroupMembersRequest_FieldPathSelector = 4
	WatchGroupMembersRequest_FieldPathSelectorResumeToken  WatchGroupMembersRequest_FieldPathSelector = 5
	WatchGroupMembersRequest_FieldPathSelectorFilter       WatchGroupMembersRequest_FieldPathSelector = 6
	WatchGroupMembersRequest_FieldPathSelectorFieldMask    WatchGroupMembersRequest_FieldPathSelector = 7
	WatchGroupMembersRequest_FieldPathSelectorView         WatchGroupMembersRequest_FieldPathSelector = 8
	WatchGroupMembersRequest_FieldPathSelectorMaxChunkSize WatchGroupMembersRequest_FieldPathSelector = 9
)

func (s WatchGroupMembersRequest_FieldPathSelector) String() string {
	switch s {
	case WatchGroupMembersRequest_FieldPathSelectorType:
		return "type"
	case WatchGroupMembersRequest_FieldPathSelectorParent:
		return "parent"
	case WatchGroupMembersRequest_FieldPathSelectorPageSize:
		return "page_size"
	case WatchGroupMembersRequest_FieldPathSelectorPageToken:
		return "page_token"
	case WatchGroupMembersRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case WatchGroupMembersRequest_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchGroupMembersRequest_FieldPathSelectorFilter:
		return "filter"
	case WatchGroupMembersRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchGroupMembersRequest_FieldPathSelectorView:
		return "view"
	case WatchGroupMembersRequest_FieldPathSelectorMaxChunkSize:
		return "max_chunk_size"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchGroupMembersRequest: %d", s))
	}
}

func BuildWatchGroupMembersRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchGroupMembersRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchGroupMembersRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "type":
			return &WatchGroupMembersRequest_FieldTerminalPath{selector: WatchGroupMembersRequest_FieldPathSelectorType}, nil
		case "parent":
			return &WatchGroupMembersRequest_FieldTerminalPath{selector: WatchGroupMembersRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &WatchGroupMembersRequest_FieldTerminalPath{selector: WatchGroupMembersRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &WatchGroupMembersRequest_FieldTerminalPath{selector: WatchGroupMembersRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &WatchGroupMembersRequest_FieldTerminalPath{selector: WatchGroupMembersRequest_FieldPathSelectorOrderBy}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchGroupMembersRequest_FieldTerminalPath{selector: WatchGroupMembersRequest_FieldPathSelectorResumeToken}, nil
		case "filter":
			return &WatchGroupMembersRequest_FieldTerminalPath{selector: WatchGroupMembersRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchGroupMembersRequest_FieldTerminalPath{selector: WatchGroupMembersRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchGroupMembersRequest_FieldTerminalPath{selector: WatchGroupMembersRequest_FieldPathSelectorView}, nil
		case "max_chunk_size", "maxChunkSize", "max-chunk-size":
			return &WatchGroupMembersRequest_FieldTerminalPath{selector: WatchGroupMembersRequest_FieldPathSelectorMaxChunkSize}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchGroupMembersRequest", fp)
}

func ParseWatchGroupMembersRequest_FieldPath(rawField string) (WatchGroupMembersRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchGroupMembersRequest_FieldPath(fp)
}

func MustParseWatchGroupMembersRequest_FieldPath(rawField string) WatchGroupMembersRequest_FieldPath {
	fp, err := ParseWatchGroupMembersRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchGroupMembersRequest_FieldTerminalPath struct {
	selector WatchGroupMembersRequest_FieldPathSelector
}

var _ WatchGroupMembersRequest_FieldPath = (*WatchGroupMembersRequest_FieldTerminalPath)(nil)

func (fp *WatchGroupMembersRequest_FieldTerminalPath) Selector() WatchGroupMembersRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchGroupMembersRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchGroupMembersRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchGroupMembersRequest
func (fp *WatchGroupMembersRequest_FieldTerminalPath) Get(source *WatchGroupMembersRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchGroupMembersRequest_FieldPathSelectorType:
			values = append(values, source.Type)
		case WatchGroupMembersRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case WatchGroupMembersRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case WatchGroupMembersRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case WatchGroupMembersRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case WatchGroupMembersRequest_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchGroupMembersRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case WatchGroupMembersRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchGroupMembersRequest_FieldPathSelectorView:
			values = append(values, source.View)
		case WatchGroupMembersRequest_FieldPathSelectorMaxChunkSize:
			values = append(values, source.MaxChunkSize)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchGroupMembersRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchGroupMembersRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchGroupMembersRequest))
}

// GetSingle returns value pointed by specific field of from source WatchGroupMembersRequest
func (fp *WatchGroupMembersRequest_FieldTerminalPath) GetSingle(source *WatchGroupMembersRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchGroupMembersRequest_FieldPathSelectorType:
		return source.GetType(), source != nil
	case WatchGroupMembersRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case WatchGroupMembersRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case WatchGroupMembersRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case WatchGroupMembersRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case WatchGroupMembersRequest_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchGroupMembersRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case WatchGroupMembersRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchGroupMembersRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	case WatchGroupMembersRequest_FieldPathSelectorMaxChunkSize:
		return source.GetMaxChunkSize(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchGroupMembersRequest: %d", fp.selector))
	}
}

func (fp *WatchGroupMembersRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchGroupMembersRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchGroupMembersRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchGroupMembersRequest_FieldPathSelectorType:
		return watch_type.WatchType_STATEFUL
	case WatchGroupMembersRequest_FieldPathSelectorParent:
		return (*group_member.ParentReference)(nil)
	case WatchGroupMembersRequest_FieldPathSelectorPageSize:
		return int32(0)
	case WatchGroupMembersRequest_FieldPathSelectorPageToken:
		return (*group_member.PagerCursor)(nil)
	case WatchGroupMembersRequest_FieldPathSelectorOrderBy:
		return (*group_member.OrderBy)(nil)
	case WatchGroupMembersRequest_FieldPathSelectorResumeToken:
		return ""
	case WatchGroupMembersRequest_FieldPathSelectorFilter:
		return (*group_member.Filter)(nil)
	case WatchGroupMembersRequest_FieldPathSelectorFieldMask:
		return (*group_member.GroupMember_FieldMask)(nil)
	case WatchGroupMembersRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	case WatchGroupMembersRequest_FieldPathSelectorMaxChunkSize:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchGroupMembersRequest: %d", fp.selector))
	}
}

func (fp *WatchGroupMembersRequest_FieldTerminalPath) ClearValue(item *WatchGroupMembersRequest) {
	if item != nil {
		switch fp.selector {
		case WatchGroupMembersRequest_FieldPathSelectorType:
			item.Type = watch_type.WatchType_STATEFUL
		case WatchGroupMembersRequest_FieldPathSelectorParent:
			item.Parent = nil
		case WatchGroupMembersRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case WatchGroupMembersRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case WatchGroupMembersRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case WatchGroupMembersRequest_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchGroupMembersRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case WatchGroupMembersRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchGroupMembersRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		case WatchGroupMembersRequest_FieldPathSelectorMaxChunkSize:
			item.MaxChunkSize = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchGroupMembersRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchGroupMembersRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchGroupMembersRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchGroupMembersRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchGroupMembersRequest_FieldPathSelectorType ||
		fp.selector == WatchGroupMembersRequest_FieldPathSelectorParent ||
		fp.selector == WatchGroupMembersRequest_FieldPathSelectorPageSize ||
		fp.selector == WatchGroupMembersRequest_FieldPathSelectorPageToken ||
		fp.selector == WatchGroupMembersRequest_FieldPathSelectorOrderBy ||
		fp.selector == WatchGroupMembersRequest_FieldPathSelectorResumeToken ||
		fp.selector == WatchGroupMembersRequest_FieldPathSelectorFilter ||
		fp.selector == WatchGroupMembersRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchGroupMembersRequest_FieldPathSelectorView ||
		fp.selector == WatchGroupMembersRequest_FieldPathSelectorMaxChunkSize
}

func (fp *WatchGroupMembersRequest_FieldTerminalPath) WithIValue(value interface{}) WatchGroupMembersRequest_FieldPathValue {
	switch fp.selector {
	case WatchGroupMembersRequest_FieldPathSelectorType:
		return &WatchGroupMembersRequest_FieldTerminalPathValue{WatchGroupMembersRequest_FieldTerminalPath: *fp, value: value.(watch_type.WatchType)}
	case WatchGroupMembersRequest_FieldPathSelectorParent:
		return &WatchGroupMembersRequest_FieldTerminalPathValue{WatchGroupMembersRequest_FieldTerminalPath: *fp, value: value.(*group_member.ParentReference)}
	case WatchGroupMembersRequest_FieldPathSelectorPageSize:
		return &WatchGroupMembersRequest_FieldTerminalPathValue{WatchGroupMembersRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case WatchGroupMembersRequest_FieldPathSelectorPageToken:
		return &WatchGroupMembersRequest_FieldTerminalPathValue{WatchGroupMembersRequest_FieldTerminalPath: *fp, value: value.(*group_member.PagerCursor)}
	case WatchGroupMembersRequest_FieldPathSelectorOrderBy:
		return &WatchGroupMembersRequest_FieldTerminalPathValue{WatchGroupMembersRequest_FieldTerminalPath: *fp, value: value.(*group_member.OrderBy)}
	case WatchGroupMembersRequest_FieldPathSelectorResumeToken:
		return &WatchGroupMembersRequest_FieldTerminalPathValue{WatchGroupMembersRequest_FieldTerminalPath: *fp, value: value.(string)}
	case WatchGroupMembersRequest_FieldPathSelectorFilter:
		return &WatchGroupMembersRequest_FieldTerminalPathValue{WatchGroupMembersRequest_FieldTerminalPath: *fp, value: value.(*group_member.Filter)}
	case WatchGroupMembersRequest_FieldPathSelectorFieldMask:
		return &WatchGroupMembersRequest_FieldTerminalPathValue{WatchGroupMembersRequest_FieldTerminalPath: *fp, value: value.(*group_member.GroupMember_FieldMask)}
	case WatchGroupMembersRequest_FieldPathSelectorView:
		return &WatchGroupMembersRequest_FieldTerminalPathValue{WatchGroupMembersRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	case WatchGroupMembersRequest_FieldPathSelectorMaxChunkSize:
		return &WatchGroupMembersRequest_FieldTerminalPathValue{WatchGroupMembersRequest_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchGroupMembersRequest: %d", fp.selector))
	}
}

func (fp *WatchGroupMembersRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchGroupMembersRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchGroupMembersRequest_FieldPathArrayOfValues {
	fpaov := &WatchGroupMembersRequest_FieldTerminalPathArrayOfValues{WatchGroupMembersRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchGroupMembersRequest_FieldPathSelectorType:
		return &WatchGroupMembersRequest_FieldTerminalPathArrayOfValues{WatchGroupMembersRequest_FieldTerminalPath: *fp, values: values.([]watch_type.WatchType)}
	case WatchGroupMembersRequest_FieldPathSelectorParent:
		return &WatchGroupMembersRequest_FieldTerminalPathArrayOfValues{WatchGroupMembersRequest_FieldTerminalPath: *fp, values: values.([]*group_member.ParentReference)}
	case WatchGroupMembersRequest_FieldPathSelectorPageSize:
		return &WatchGroupMembersRequest_FieldTerminalPathArrayOfValues{WatchGroupMembersRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case WatchGroupMembersRequest_FieldPathSelectorPageToken:
		return &WatchGroupMembersRequest_FieldTerminalPathArrayOfValues{WatchGroupMembersRequest_FieldTerminalPath: *fp, values: values.([]*group_member.PagerCursor)}
	case WatchGroupMembersRequest_FieldPathSelectorOrderBy:
		return &WatchGroupMembersRequest_FieldTerminalPathArrayOfValues{WatchGroupMembersRequest_FieldTerminalPath: *fp, values: values.([]*group_member.OrderBy)}
	case WatchGroupMembersRequest_FieldPathSelectorResumeToken:
		return &WatchGroupMembersRequest_FieldTerminalPathArrayOfValues{WatchGroupMembersRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchGroupMembersRequest_FieldPathSelectorFilter:
		return &WatchGroupMembersRequest_FieldTerminalPathArrayOfValues{WatchGroupMembersRequest_FieldTerminalPath: *fp, values: values.([]*group_member.Filter)}
	case WatchGroupMembersRequest_FieldPathSelectorFieldMask:
		return &WatchGroupMembersRequest_FieldTerminalPathArrayOfValues{WatchGroupMembersRequest_FieldTerminalPath: *fp, values: values.([]*group_member.GroupMember_FieldMask)}
	case WatchGroupMembersRequest_FieldPathSelectorView:
		return &WatchGroupMembersRequest_FieldTerminalPathArrayOfValues{WatchGroupMembersRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	case WatchGroupMembersRequest_FieldPathSelectorMaxChunkSize:
		return &WatchGroupMembersRequest_FieldTerminalPathArrayOfValues{WatchGroupMembersRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchGroupMembersRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchGroupMembersRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchGroupMembersRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchGroupMembersRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchGroupMembersRequest: %d", fp.selector))
	}
}

func (fp *WatchGroupMembersRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchGroupMembersRequest_FieldPathValue allows storing values for WatchGroupMembersRequest fields according to their type
type WatchGroupMembersRequest_FieldPathValue interface {
	WatchGroupMembersRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchGroupMembersRequest)
	CompareWith(*WatchGroupMembersRequest) (cmp int, comparable bool)
}

func ParseWatchGroupMembersRequest_FieldPathValue(pathStr, valueStr string) (WatchGroupMembersRequest_FieldPathValue, error) {
	fp, err := ParseWatchGroupMembersRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchGroupMembersRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchGroupMembersRequest_FieldPathValue), nil
}

func MustParseWatchGroupMembersRequest_FieldPathValue(pathStr, valueStr string) WatchGroupMembersRequest_FieldPathValue {
	fpv, err := ParseWatchGroupMembersRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchGroupMembersRequest_FieldTerminalPathValue struct {
	WatchGroupMembersRequest_FieldTerminalPath
	value interface{}
}

var _ WatchGroupMembersRequest_FieldPathValue = (*WatchGroupMembersRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchGroupMembersRequest' as interface{}
func (fpv *WatchGroupMembersRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchGroupMembersRequest_FieldTerminalPathValue) AsTypeValue() (watch_type.WatchType, bool) {
	res, ok := fpv.value.(watch_type.WatchType)
	return res, ok
}
func (fpv *WatchGroupMembersRequest_FieldTerminalPathValue) AsParentValue() (*group_member.ParentReference, bool) {
	res, ok := fpv.value.(*group_member.ParentReference)
	return res, ok
}
func (fpv *WatchGroupMembersRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *WatchGroupMembersRequest_FieldTerminalPathValue) AsPageTokenValue() (*group_member.PagerCursor, bool) {
	res, ok := fpv.value.(*group_member.PagerCursor)
	return res, ok
}
func (fpv *WatchGroupMembersRequest_FieldTerminalPathValue) AsOrderByValue() (*group_member.OrderBy, bool) {
	res, ok := fpv.value.(*group_member.OrderBy)
	return res, ok
}
func (fpv *WatchGroupMembersRequest_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchGroupMembersRequest_FieldTerminalPathValue) AsFilterValue() (*group_member.Filter, bool) {
	res, ok := fpv.value.(*group_member.Filter)
	return res, ok
}
func (fpv *WatchGroupMembersRequest_FieldTerminalPathValue) AsFieldMaskValue() (*group_member.GroupMember_FieldMask, bool) {
	res, ok := fpv.value.(*group_member.GroupMember_FieldMask)
	return res, ok
}
func (fpv *WatchGroupMembersRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}
func (fpv *WatchGroupMembersRequest_FieldTerminalPathValue) AsMaxChunkSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object WatchGroupMembersRequest
func (fpv *WatchGroupMembersRequest_FieldTerminalPathValue) SetTo(target **WatchGroupMembersRequest) {
	if *target == nil {
		*target = new(WatchGroupMembersRequest)
	}
	switch fpv.selector {
	case WatchGroupMembersRequest_FieldPathSelectorType:
		(*target).Type = fpv.value.(watch_type.WatchType)
	case WatchGroupMembersRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*group_member.ParentReference)
	case WatchGroupMembersRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case WatchGroupMembersRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*group_member.PagerCursor)
	case WatchGroupMembersRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*group_member.OrderBy)
	case WatchGroupMembersRequest_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchGroupMembersRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*group_member.Filter)
	case WatchGroupMembersRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*group_member.GroupMember_FieldMask)
	case WatchGroupMembersRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	case WatchGroupMembersRequest_FieldPathSelectorMaxChunkSize:
		(*target).MaxChunkSize = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchGroupMembersRequest: %d", fpv.selector))
	}
}

func (fpv *WatchGroupMembersRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchGroupMembersRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchGroupMembersRequest_FieldTerminalPathValue' with the value under path in 'WatchGroupMembersRequest'.
func (fpv *WatchGroupMembersRequest_FieldTerminalPathValue) CompareWith(source *WatchGroupMembersRequest) (int, bool) {
	switch fpv.selector {
	case WatchGroupMembersRequest_FieldPathSelectorType:
		leftValue := fpv.value.(watch_type.WatchType)
		rightValue := source.GetType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchGroupMembersRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*group_member.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchGroupMembersRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchGroupMembersRequest_FieldPathSelectorPageToken:
		return 0, false
	case WatchGroupMembersRequest_FieldPathSelectorOrderBy:
		return 0, false
	case WatchGroupMembersRequest_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchGroupMembersRequest_FieldPathSelectorFilter:
		return 0, false
	case WatchGroupMembersRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchGroupMembersRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchGroupMembersRequest_FieldPathSelectorMaxChunkSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetMaxChunkSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchGroupMembersRequest: %d", fpv.selector))
	}
}

func (fpv *WatchGroupMembersRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchGroupMembersRequest))
}

// WatchGroupMembersRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchGroupMembersRequest according to their type
// Present only for array (repeated) types.
type WatchGroupMembersRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchGroupMembersRequest_FieldPath
	ContainsValue(*WatchGroupMembersRequest) bool
}

// ParseWatchGroupMembersRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchGroupMembersRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchGroupMembersRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchGroupMembersRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchGroupMembersRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchGroupMembersRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchGroupMembersRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchGroupMembersRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchGroupMembersRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchGroupMembersRequest_FieldTerminalPathArrayItemValue struct {
	WatchGroupMembersRequest_FieldTerminalPath
	value interface{}
}

var _ WatchGroupMembersRequest_FieldPathArrayItemValue = (*WatchGroupMembersRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchGroupMembersRequest as interface{}
func (fpaiv *WatchGroupMembersRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchGroupMembersRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchGroupMembersRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchGroupMembersRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchGroupMembersRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchGroupMembersRequest'
func (fpaiv *WatchGroupMembersRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchGroupMembersRequest) bool {
	slice := fpaiv.WatchGroupMembersRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchGroupMembersRequest_FieldPathArrayOfValues allows storing slice of values for WatchGroupMembersRequest fields according to their type
type WatchGroupMembersRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchGroupMembersRequest_FieldPath
}

func ParseWatchGroupMembersRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchGroupMembersRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchGroupMembersRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchGroupMembersRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchGroupMembersRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchGroupMembersRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchGroupMembersRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchGroupMembersRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchGroupMembersRequest_FieldTerminalPathArrayOfValues struct {
	WatchGroupMembersRequest_FieldTerminalPath
	values interface{}
}

var _ WatchGroupMembersRequest_FieldPathArrayOfValues = (*WatchGroupMembersRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchGroupMembersRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchGroupMembersRequest_FieldPathSelectorType:
		for _, v := range fpaov.values.([]watch_type.WatchType) {
			values = append(values, v)
		}
	case WatchGroupMembersRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*group_member.ParentReference) {
			values = append(values, v)
		}
	case WatchGroupMembersRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case WatchGroupMembersRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*group_member.PagerCursor) {
			values = append(values, v)
		}
	case WatchGroupMembersRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*group_member.OrderBy) {
			values = append(values, v)
		}
	case WatchGroupMembersRequest_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchGroupMembersRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*group_member.Filter) {
			values = append(values, v)
		}
	case WatchGroupMembersRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*group_member.GroupMember_FieldMask) {
			values = append(values, v)
		}
	case WatchGroupMembersRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	case WatchGroupMembersRequest_FieldPathSelectorMaxChunkSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchGroupMembersRequest_FieldTerminalPathArrayOfValues) AsTypeArrayOfValues() ([]watch_type.WatchType, bool) {
	res, ok := fpaov.values.([]watch_type.WatchType)
	return res, ok
}
func (fpaov *WatchGroupMembersRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*group_member.ParentReference, bool) {
	res, ok := fpaov.values.([]*group_member.ParentReference)
	return res, ok
}
func (fpaov *WatchGroupMembersRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *WatchGroupMembersRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*group_member.PagerCursor, bool) {
	res, ok := fpaov.values.([]*group_member.PagerCursor)
	return res, ok
}
func (fpaov *WatchGroupMembersRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*group_member.OrderBy, bool) {
	res, ok := fpaov.values.([]*group_member.OrderBy)
	return res, ok
}
func (fpaov *WatchGroupMembersRequest_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchGroupMembersRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*group_member.Filter, bool) {
	res, ok := fpaov.values.([]*group_member.Filter)
	return res, ok
}
func (fpaov *WatchGroupMembersRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*group_member.GroupMember_FieldMask, bool) {
	res, ok := fpaov.values.([]*group_member.GroupMember_FieldMask)
	return res, ok
}
func (fpaov *WatchGroupMembersRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}
func (fpaov *WatchGroupMembersRequest_FieldTerminalPathArrayOfValues) AsMaxChunkSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchGroupMembersResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchGroupMembersResponse_FieldPathSelector
	Get(source *WatchGroupMembersResponse) []interface{}
	GetSingle(source *WatchGroupMembersResponse) (interface{}, bool)
	ClearValue(item *WatchGroupMembersResponse)

	// Those methods build corresponding WatchGroupMembersResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchGroupMembersResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchGroupMembersResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchGroupMembersResponse_FieldPathArrayItemValue
}

type WatchGroupMembersResponse_FieldPathSelector int32

const (
	WatchGroupMembersResponse_FieldPathSelectorGroupMemberChanges WatchGroupMembersResponse_FieldPathSelector = 0
	WatchGroupMembersResponse_FieldPathSelectorIsCurrent          WatchGroupMembersResponse_FieldPathSelector = 1
	WatchGroupMembersResponse_FieldPathSelectorPageTokenChange    WatchGroupMembersResponse_FieldPathSelector = 2
	WatchGroupMembersResponse_FieldPathSelectorResumeToken        WatchGroupMembersResponse_FieldPathSelector = 3
	WatchGroupMembersResponse_FieldPathSelectorSnapshotSize       WatchGroupMembersResponse_FieldPathSelector = 4
	WatchGroupMembersResponse_FieldPathSelectorIsSoftReset        WatchGroupMembersResponse_FieldPathSelector = 5
	WatchGroupMembersResponse_FieldPathSelectorIsHardReset        WatchGroupMembersResponse_FieldPathSelector = 6
)

func (s WatchGroupMembersResponse_FieldPathSelector) String() string {
	switch s {
	case WatchGroupMembersResponse_FieldPathSelectorGroupMemberChanges:
		return "group_member_changes"
	case WatchGroupMembersResponse_FieldPathSelectorIsCurrent:
		return "is_current"
	case WatchGroupMembersResponse_FieldPathSelectorPageTokenChange:
		return "page_token_change"
	case WatchGroupMembersResponse_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchGroupMembersResponse_FieldPathSelectorSnapshotSize:
		return "snapshot_size"
	case WatchGroupMembersResponse_FieldPathSelectorIsSoftReset:
		return "is_soft_reset"
	case WatchGroupMembersResponse_FieldPathSelectorIsHardReset:
		return "is_hard_reset"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchGroupMembersResponse: %d", s))
	}
}

func BuildWatchGroupMembersResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchGroupMembersResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchGroupMembersResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "group_member_changes", "groupMemberChanges", "group-member-changes":
			return &WatchGroupMembersResponse_FieldTerminalPath{selector: WatchGroupMembersResponse_FieldPathSelectorGroupMemberChanges}, nil
		case "is_current", "isCurrent", "is-current":
			return &WatchGroupMembersResponse_FieldTerminalPath{selector: WatchGroupMembersResponse_FieldPathSelectorIsCurrent}, nil
		case "page_token_change", "pageTokenChange", "page-token-change":
			return &WatchGroupMembersResponse_FieldTerminalPath{selector: WatchGroupMembersResponse_FieldPathSelectorPageTokenChange}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchGroupMembersResponse_FieldTerminalPath{selector: WatchGroupMembersResponse_FieldPathSelectorResumeToken}, nil
		case "snapshot_size", "snapshotSize", "snapshot-size":
			return &WatchGroupMembersResponse_FieldTerminalPath{selector: WatchGroupMembersResponse_FieldPathSelectorSnapshotSize}, nil
		case "is_soft_reset", "isSoftReset", "is-soft-reset":
			return &WatchGroupMembersResponse_FieldTerminalPath{selector: WatchGroupMembersResponse_FieldPathSelectorIsSoftReset}, nil
		case "is_hard_reset", "isHardReset", "is-hard-reset":
			return &WatchGroupMembersResponse_FieldTerminalPath{selector: WatchGroupMembersResponse_FieldPathSelectorIsHardReset}, nil
		}
	} else {
		switch fp[0] {
		case "page_token_change", "pageTokenChange", "page-token-change":
			if subpath, err := BuildWatchGroupMembersResponsePageTokenChange_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &WatchGroupMembersResponse_FieldSubPath{selector: WatchGroupMembersResponse_FieldPathSelectorPageTokenChange, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchGroupMembersResponse", fp)
}

func ParseWatchGroupMembersResponse_FieldPath(rawField string) (WatchGroupMembersResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchGroupMembersResponse_FieldPath(fp)
}

func MustParseWatchGroupMembersResponse_FieldPath(rawField string) WatchGroupMembersResponse_FieldPath {
	fp, err := ParseWatchGroupMembersResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchGroupMembersResponse_FieldTerminalPath struct {
	selector WatchGroupMembersResponse_FieldPathSelector
}

var _ WatchGroupMembersResponse_FieldPath = (*WatchGroupMembersResponse_FieldTerminalPath)(nil)

func (fp *WatchGroupMembersResponse_FieldTerminalPath) Selector() WatchGroupMembersResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchGroupMembersResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchGroupMembersResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchGroupMembersResponse
func (fp *WatchGroupMembersResponse_FieldTerminalPath) Get(source *WatchGroupMembersResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchGroupMembersResponse_FieldPathSelectorGroupMemberChanges:
			for _, value := range source.GetGroupMemberChanges() {
				values = append(values, value)
			}
		case WatchGroupMembersResponse_FieldPathSelectorIsCurrent:
			values = append(values, source.IsCurrent)
		case WatchGroupMembersResponse_FieldPathSelectorPageTokenChange:
			if source.PageTokenChange != nil {
				values = append(values, source.PageTokenChange)
			}
		case WatchGroupMembersResponse_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchGroupMembersResponse_FieldPathSelectorSnapshotSize:
			values = append(values, source.SnapshotSize)
		case WatchGroupMembersResponse_FieldPathSelectorIsSoftReset:
			values = append(values, source.IsSoftReset)
		case WatchGroupMembersResponse_FieldPathSelectorIsHardReset:
			values = append(values, source.IsHardReset)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchGroupMembersResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchGroupMembersResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchGroupMembersResponse))
}

// GetSingle returns value pointed by specific field of from source WatchGroupMembersResponse
func (fp *WatchGroupMembersResponse_FieldTerminalPath) GetSingle(source *WatchGroupMembersResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchGroupMembersResponse_FieldPathSelectorGroupMemberChanges:
		res := source.GetGroupMemberChanges()
		return res, res != nil
	case WatchGroupMembersResponse_FieldPathSelectorIsCurrent:
		return source.GetIsCurrent(), source != nil
	case WatchGroupMembersResponse_FieldPathSelectorPageTokenChange:
		res := source.GetPageTokenChange()
		return res, res != nil
	case WatchGroupMembersResponse_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchGroupMembersResponse_FieldPathSelectorSnapshotSize:
		return source.GetSnapshotSize(), source != nil
	case WatchGroupMembersResponse_FieldPathSelectorIsSoftReset:
		return source.GetIsSoftReset(), source != nil
	case WatchGroupMembersResponse_FieldPathSelectorIsHardReset:
		return source.GetIsHardReset(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchGroupMembersResponse: %d", fp.selector))
	}
}

func (fp *WatchGroupMembersResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchGroupMembersResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchGroupMembersResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchGroupMembersResponse_FieldPathSelectorGroupMemberChanges:
		return ([]*group_member.GroupMemberChange)(nil)
	case WatchGroupMembersResponse_FieldPathSelectorIsCurrent:
		return false
	case WatchGroupMembersResponse_FieldPathSelectorPageTokenChange:
		return (*WatchGroupMembersResponse_PageTokenChange)(nil)
	case WatchGroupMembersResponse_FieldPathSelectorResumeToken:
		return ""
	case WatchGroupMembersResponse_FieldPathSelectorSnapshotSize:
		return int64(0)
	case WatchGroupMembersResponse_FieldPathSelectorIsSoftReset:
		return false
	case WatchGroupMembersResponse_FieldPathSelectorIsHardReset:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchGroupMembersResponse: %d", fp.selector))
	}
}

func (fp *WatchGroupMembersResponse_FieldTerminalPath) ClearValue(item *WatchGroupMembersResponse) {
	if item != nil {
		switch fp.selector {
		case WatchGroupMembersResponse_FieldPathSelectorGroupMemberChanges:
			item.GroupMemberChanges = nil
		case WatchGroupMembersResponse_FieldPathSelectorIsCurrent:
			item.IsCurrent = false
		case WatchGroupMembersResponse_FieldPathSelectorPageTokenChange:
			item.PageTokenChange = nil
		case WatchGroupMembersResponse_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchGroupMembersResponse_FieldPathSelectorSnapshotSize:
			item.SnapshotSize = int64(0)
		case WatchGroupMembersResponse_FieldPathSelectorIsSoftReset:
			item.IsSoftReset = false
		case WatchGroupMembersResponse_FieldPathSelectorIsHardReset:
			item.IsHardReset = false
		default:
			panic(fmt.Sprintf("Invalid selector for WatchGroupMembersResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchGroupMembersResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchGroupMembersResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchGroupMembersResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchGroupMembersResponse_FieldPathSelectorGroupMemberChanges ||
		fp.selector == WatchGroupMembersResponse_FieldPathSelectorIsCurrent ||
		fp.selector == WatchGroupMembersResponse_FieldPathSelectorResumeToken ||
		fp.selector == WatchGroupMembersResponse_FieldPathSelectorSnapshotSize ||
		fp.selector == WatchGroupMembersResponse_FieldPathSelectorIsSoftReset ||
		fp.selector == WatchGroupMembersResponse_FieldPathSelectorIsHardReset
}

func (fp *WatchGroupMembersResponse_FieldTerminalPath) WithIValue(value interface{}) WatchGroupMembersResponse_FieldPathValue {
	switch fp.selector {
	case WatchGroupMembersResponse_FieldPathSelectorGroupMemberChanges:
		return &WatchGroupMembersResponse_FieldTerminalPathValue{WatchGroupMembersResponse_FieldTerminalPath: *fp, value: value.([]*group_member.GroupMemberChange)}
	case WatchGroupMembersResponse_FieldPathSelectorIsCurrent:
		return &WatchGroupMembersResponse_FieldTerminalPathValue{WatchGroupMembersResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchGroupMembersResponse_FieldPathSelectorPageTokenChange:
		return &WatchGroupMembersResponse_FieldTerminalPathValue{WatchGroupMembersResponse_FieldTerminalPath: *fp, value: value.(*WatchGroupMembersResponse_PageTokenChange)}
	case WatchGroupMembersResponse_FieldPathSelectorResumeToken:
		return &WatchGroupMembersResponse_FieldTerminalPathValue{WatchGroupMembersResponse_FieldTerminalPath: *fp, value: value.(string)}
	case WatchGroupMembersResponse_FieldPathSelectorSnapshotSize:
		return &WatchGroupMembersResponse_FieldTerminalPathValue{WatchGroupMembersResponse_FieldTerminalPath: *fp, value: value.(int64)}
	case WatchGroupMembersResponse_FieldPathSelectorIsSoftReset:
		return &WatchGroupMembersResponse_FieldTerminalPathValue{WatchGroupMembersResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchGroupMembersResponse_FieldPathSelectorIsHardReset:
		return &WatchGroupMembersResponse_FieldTerminalPathValue{WatchGroupMembersResponse_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchGroupMembersResponse: %d", fp.selector))
	}
}

func (fp *WatchGroupMembersResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchGroupMembersResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchGroupMembersResponse_FieldPathArrayOfValues {
	fpaov := &WatchGroupMembersResponse_FieldTerminalPathArrayOfValues{WatchGroupMembersResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchGroupMembersResponse_FieldPathSelectorGroupMemberChanges:
		return &WatchGroupMembersResponse_FieldTerminalPathArrayOfValues{WatchGroupMembersResponse_FieldTerminalPath: *fp, values: values.([][]*group_member.GroupMemberChange)}
	case WatchGroupMembersResponse_FieldPathSelectorIsCurrent:
		return &WatchGroupMembersResponse_FieldTerminalPathArrayOfValues{WatchGroupMembersResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchGroupMembersResponse_FieldPathSelectorPageTokenChange:
		return &WatchGroupMembersResponse_FieldTerminalPathArrayOfValues{WatchGroupMembersResponse_FieldTerminalPath: *fp, values: values.([]*WatchGroupMembersResponse_PageTokenChange)}
	case WatchGroupMembersResponse_FieldPathSelectorResumeToken:
		return &WatchGroupMembersResponse_FieldTerminalPathArrayOfValues{WatchGroupMembersResponse_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchGroupMembersResponse_FieldPathSelectorSnapshotSize:
		return &WatchGroupMembersResponse_FieldTerminalPathArrayOfValues{WatchGroupMembersResponse_FieldTerminalPath: *fp, values: values.([]int64)}
	case WatchGroupMembersResponse_FieldPathSelectorIsSoftReset:
		return &WatchGroupMembersResponse_FieldTerminalPathArrayOfValues{WatchGroupMembersResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchGroupMembersResponse_FieldPathSelectorIsHardReset:
		return &WatchGroupMembersResponse_FieldTerminalPathArrayOfValues{WatchGroupMembersResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchGroupMembersResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchGroupMembersResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchGroupMembersResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchGroupMembersResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case WatchGroupMembersResponse_FieldPathSelectorGroupMemberChanges:
		return &WatchGroupMembersResponse_FieldTerminalPathArrayItemValue{WatchGroupMembersResponse_FieldTerminalPath: *fp, value: value.(*group_member.GroupMemberChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchGroupMembersResponse: %d", fp.selector))
	}
}

func (fp *WatchGroupMembersResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type WatchGroupMembersResponse_FieldSubPath struct {
	selector WatchGroupMembersResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ WatchGroupMembersResponse_FieldPath = (*WatchGroupMembersResponse_FieldSubPath)(nil)

func (fps *WatchGroupMembersResponse_FieldSubPath) Selector() WatchGroupMembersResponse_FieldPathSelector {
	return fps.selector
}
func (fps *WatchGroupMembersResponse_FieldSubPath) AsPageTokenChangeSubPath() (WatchGroupMembersResponsePageTokenChange_FieldPath, bool) {
	res, ok := fps.subPath.(WatchGroupMembersResponsePageTokenChange_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *WatchGroupMembersResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *WatchGroupMembersResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source WatchGroupMembersResponse
func (fps *WatchGroupMembersResponse_FieldSubPath) Get(source *WatchGroupMembersResponse) (values []interface{}) {
	if asPageTokenChangeFieldPath, ok := fps.AsPageTokenChangeSubPath(); ok {
		values = append(values, asPageTokenChangeFieldPath.Get(source.GetPageTokenChange())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for WatchGroupMembersResponse: %d", fps.selector))
	}
	return
}

func (fps *WatchGroupMembersResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*WatchGroupMembersResponse))
}

// GetSingle returns value of selected field from source WatchGroupMembersResponse
func (fps *WatchGroupMembersResponse_FieldSubPath) GetSingle(source *WatchGroupMembersResponse) (interface{}, bool) {
	switch fps.selector {
	case WatchGroupMembersResponse_FieldPathSelectorPageTokenChange:
		if source.GetPageTokenChange() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchGroupMembersResponse: %d", fps.selector))
	}
}

func (fps *WatchGroupMembersResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*WatchGroupMembersResponse))
}

// GetDefault returns a default value of the field type
func (fps *WatchGroupMembersResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *WatchGroupMembersResponse_FieldSubPath) ClearValue(item *WatchGroupMembersResponse) {
	if item != nil {
		switch fps.selector {
		case WatchGroupMembersResponse_FieldPathSelectorPageTokenChange:
			fps.subPath.ClearValueRaw(item.PageTokenChange)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchGroupMembersResponse: %d", fps.selector))
		}
	}
}

func (fps *WatchGroupMembersResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*WatchGroupMembersResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *WatchGroupMembersResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *WatchGroupMembersResponse_FieldSubPath) WithIValue(value interface{}) WatchGroupMembersResponse_FieldPathValue {
	return &WatchGroupMembersResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *WatchGroupMembersResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *WatchGroupMembersResponse_FieldSubPath) WithIArrayOfValues(values interface{}) WatchGroupMembersResponse_FieldPathArrayOfValues {
	return &WatchGroupMembersResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *WatchGroupMembersResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *WatchGroupMembersResponse_FieldSubPath) WithIArrayItemValue(value interface{}) WatchGroupMembersResponse_FieldPathArrayItemValue {
	return &WatchGroupMembersResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *WatchGroupMembersResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// WatchGroupMembersResponse_FieldPathValue allows storing values for WatchGroupMembersResponse fields according to their type
type WatchGroupMembersResponse_FieldPathValue interface {
	WatchGroupMembersResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchGroupMembersResponse)
	CompareWith(*WatchGroupMembersResponse) (cmp int, comparable bool)
}

func ParseWatchGroupMembersResponse_FieldPathValue(pathStr, valueStr string) (WatchGroupMembersResponse_FieldPathValue, error) {
	fp, err := ParseWatchGroupMembersResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchGroupMembersResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchGroupMembersResponse_FieldPathValue), nil
}

func MustParseWatchGroupMembersResponse_FieldPathValue(pathStr, valueStr string) WatchGroupMembersResponse_FieldPathValue {
	fpv, err := ParseWatchGroupMembersResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchGroupMembersResponse_FieldTerminalPathValue struct {
	WatchGroupMembersResponse_FieldTerminalPath
	value interface{}
}

var _ WatchGroupMembersResponse_FieldPathValue = (*WatchGroupMembersResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchGroupMembersResponse' as interface{}
func (fpv *WatchGroupMembersResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchGroupMembersResponse_FieldTerminalPathValue) AsGroupMemberChangesValue() ([]*group_member.GroupMemberChange, bool) {
	res, ok := fpv.value.([]*group_member.GroupMemberChange)
	return res, ok
}
func (fpv *WatchGroupMembersResponse_FieldTerminalPathValue) AsIsCurrentValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchGroupMembersResponse_FieldTerminalPathValue) AsPageTokenChangeValue() (*WatchGroupMembersResponse_PageTokenChange, bool) {
	res, ok := fpv.value.(*WatchGroupMembersResponse_PageTokenChange)
	return res, ok
}
func (fpv *WatchGroupMembersResponse_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchGroupMembersResponse_FieldTerminalPathValue) AsSnapshotSizeValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}
func (fpv *WatchGroupMembersResponse_FieldTerminalPathValue) AsIsSoftResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchGroupMembersResponse_FieldTerminalPathValue) AsIsHardResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object WatchGroupMembersResponse
func (fpv *WatchGroupMembersResponse_FieldTerminalPathValue) SetTo(target **WatchGroupMembersResponse) {
	if *target == nil {
		*target = new(WatchGroupMembersResponse)
	}
	switch fpv.selector {
	case WatchGroupMembersResponse_FieldPathSelectorGroupMemberChanges:
		(*target).GroupMemberChanges = fpv.value.([]*group_member.GroupMemberChange)
	case WatchGroupMembersResponse_FieldPathSelectorIsCurrent:
		(*target).IsCurrent = fpv.value.(bool)
	case WatchGroupMembersResponse_FieldPathSelectorPageTokenChange:
		(*target).PageTokenChange = fpv.value.(*WatchGroupMembersResponse_PageTokenChange)
	case WatchGroupMembersResponse_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchGroupMembersResponse_FieldPathSelectorSnapshotSize:
		(*target).SnapshotSize = fpv.value.(int64)
	case WatchGroupMembersResponse_FieldPathSelectorIsSoftReset:
		(*target).IsSoftReset = fpv.value.(bool)
	case WatchGroupMembersResponse_FieldPathSelectorIsHardReset:
		(*target).IsHardReset = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchGroupMembersResponse: %d", fpv.selector))
	}
}

func (fpv *WatchGroupMembersResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchGroupMembersResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchGroupMembersResponse_FieldTerminalPathValue' with the value under path in 'WatchGroupMembersResponse'.
func (fpv *WatchGroupMembersResponse_FieldTerminalPathValue) CompareWith(source *WatchGroupMembersResponse) (int, bool) {
	switch fpv.selector {
	case WatchGroupMembersResponse_FieldPathSelectorGroupMemberChanges:
		return 0, false
	case WatchGroupMembersResponse_FieldPathSelectorIsCurrent:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsCurrent()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchGroupMembersResponse_FieldPathSelectorPageTokenChange:
		return 0, false
	case WatchGroupMembersResponse_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchGroupMembersResponse_FieldPathSelectorSnapshotSize:
		leftValue := fpv.value.(int64)
		rightValue := source.GetSnapshotSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchGroupMembersResponse_FieldPathSelectorIsSoftReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsSoftReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchGroupMembersResponse_FieldPathSelectorIsHardReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsHardReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchGroupMembersResponse: %d", fpv.selector))
	}
}

func (fpv *WatchGroupMembersResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchGroupMembersResponse))
}

type WatchGroupMembersResponse_FieldSubPathValue struct {
	WatchGroupMembersResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ WatchGroupMembersResponse_FieldPathValue = (*WatchGroupMembersResponse_FieldSubPathValue)(nil)

func (fpvs *WatchGroupMembersResponse_FieldSubPathValue) AsPageTokenChangePathValue() (WatchGroupMembersResponsePageTokenChange_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(WatchGroupMembersResponsePageTokenChange_FieldPathValue)
	return res, ok
}

func (fpvs *WatchGroupMembersResponse_FieldSubPathValue) SetTo(target **WatchGroupMembersResponse) {
	if *target == nil {
		*target = new(WatchGroupMembersResponse)
	}
	switch fpvs.Selector() {
	case WatchGroupMembersResponse_FieldPathSelectorPageTokenChange:
		fpvs.subPathValue.(WatchGroupMembersResponsePageTokenChange_FieldPathValue).SetTo(&(*target).PageTokenChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchGroupMembersResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchGroupMembersResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchGroupMembersResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *WatchGroupMembersResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *WatchGroupMembersResponse_FieldSubPathValue) CompareWith(source *WatchGroupMembersResponse) (int, bool) {
	switch fpvs.Selector() {
	case WatchGroupMembersResponse_FieldPathSelectorPageTokenChange:
		return fpvs.subPathValue.(WatchGroupMembersResponsePageTokenChange_FieldPathValue).CompareWith(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchGroupMembersResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchGroupMembersResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*WatchGroupMembersResponse))
}

// WatchGroupMembersResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchGroupMembersResponse according to their type
// Present only for array (repeated) types.
type WatchGroupMembersResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchGroupMembersResponse_FieldPath
	ContainsValue(*WatchGroupMembersResponse) bool
}

// ParseWatchGroupMembersResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchGroupMembersResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchGroupMembersResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchGroupMembersResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchGroupMembersResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchGroupMembersResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchGroupMembersResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchGroupMembersResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchGroupMembersResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchGroupMembersResponse_FieldTerminalPathArrayItemValue struct {
	WatchGroupMembersResponse_FieldTerminalPath
	value interface{}
}

var _ WatchGroupMembersResponse_FieldPathArrayItemValue = (*WatchGroupMembersResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchGroupMembersResponse as interface{}
func (fpaiv *WatchGroupMembersResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *WatchGroupMembersResponse_FieldTerminalPathArrayItemValue) AsGroupMemberChangesItemValue() (*group_member.GroupMemberChange, bool) {
	res, ok := fpaiv.value.(*group_member.GroupMemberChange)
	return res, ok
}

func (fpaiv *WatchGroupMembersResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchGroupMembersResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchGroupMembersResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchGroupMembersResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchGroupMembersResponse'
func (fpaiv *WatchGroupMembersResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchGroupMembersResponse) bool {
	slice := fpaiv.WatchGroupMembersResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type WatchGroupMembersResponse_FieldSubPathArrayItemValue struct {
	WatchGroupMembersResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *WatchGroupMembersResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *WatchGroupMembersResponse_FieldSubPathArrayItemValue) AsPageTokenChangePathItemValue() (WatchGroupMembersResponsePageTokenChange_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(WatchGroupMembersResponsePageTokenChange_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchGroupMembersResponse'
func (fpaivs *WatchGroupMembersResponse_FieldSubPathArrayItemValue) ContainsValue(source *WatchGroupMembersResponse) bool {
	switch fpaivs.Selector() {
	case WatchGroupMembersResponse_FieldPathSelectorPageTokenChange:
		return fpaivs.subPathItemValue.(WatchGroupMembersResponsePageTokenChange_FieldPathArrayItemValue).ContainsValue(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchGroupMembersResponse: %d", fpaivs.Selector()))
	}
}

// WatchGroupMembersResponse_FieldPathArrayOfValues allows storing slice of values for WatchGroupMembersResponse fields according to their type
type WatchGroupMembersResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchGroupMembersResponse_FieldPath
}

func ParseWatchGroupMembersResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchGroupMembersResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchGroupMembersResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchGroupMembersResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchGroupMembersResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchGroupMembersResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchGroupMembersResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchGroupMembersResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchGroupMembersResponse_FieldTerminalPathArrayOfValues struct {
	WatchGroupMembersResponse_FieldTerminalPath
	values interface{}
}

var _ WatchGroupMembersResponse_FieldPathArrayOfValues = (*WatchGroupMembersResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchGroupMembersResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchGroupMembersResponse_FieldPathSelectorGroupMemberChanges:
		for _, v := range fpaov.values.([][]*group_member.GroupMemberChange) {
			values = append(values, v)
		}
	case WatchGroupMembersResponse_FieldPathSelectorIsCurrent:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchGroupMembersResponse_FieldPathSelectorPageTokenChange:
		for _, v := range fpaov.values.([]*WatchGroupMembersResponse_PageTokenChange) {
			values = append(values, v)
		}
	case WatchGroupMembersResponse_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchGroupMembersResponse_FieldPathSelectorSnapshotSize:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	case WatchGroupMembersResponse_FieldPathSelectorIsSoftReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchGroupMembersResponse_FieldPathSelectorIsHardReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchGroupMembersResponse_FieldTerminalPathArrayOfValues) AsGroupMemberChangesArrayOfValues() ([][]*group_member.GroupMemberChange, bool) {
	res, ok := fpaov.values.([][]*group_member.GroupMemberChange)
	return res, ok
}
func (fpaov *WatchGroupMembersResponse_FieldTerminalPathArrayOfValues) AsIsCurrentArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchGroupMembersResponse_FieldTerminalPathArrayOfValues) AsPageTokenChangeArrayOfValues() ([]*WatchGroupMembersResponse_PageTokenChange, bool) {
	res, ok := fpaov.values.([]*WatchGroupMembersResponse_PageTokenChange)
	return res, ok
}
func (fpaov *WatchGroupMembersResponse_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchGroupMembersResponse_FieldTerminalPathArrayOfValues) AsSnapshotSizeArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}
func (fpaov *WatchGroupMembersResponse_FieldTerminalPathArrayOfValues) AsIsSoftResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchGroupMembersResponse_FieldTerminalPathArrayOfValues) AsIsHardResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

type WatchGroupMembersResponse_FieldSubPathArrayOfValues struct {
	WatchGroupMembersResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ WatchGroupMembersResponse_FieldPathArrayOfValues = (*WatchGroupMembersResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *WatchGroupMembersResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *WatchGroupMembersResponse_FieldSubPathArrayOfValues) AsPageTokenChangePathArrayOfValues() (WatchGroupMembersResponsePageTokenChange_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(WatchGroupMembersResponsePageTokenChange_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchGroupMembersResponsePageTokenChange_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchGroupMembersResponsePageTokenChange_FieldPathSelector
	Get(source *WatchGroupMembersResponse_PageTokenChange) []interface{}
	GetSingle(source *WatchGroupMembersResponse_PageTokenChange) (interface{}, bool)
	ClearValue(item *WatchGroupMembersResponse_PageTokenChange)

	// Those methods build corresponding WatchGroupMembersResponsePageTokenChange_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchGroupMembersResponsePageTokenChange_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchGroupMembersResponsePageTokenChange_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchGroupMembersResponsePageTokenChange_FieldPathArrayItemValue
}

type WatchGroupMembersResponsePageTokenChange_FieldPathSelector int32

const (
	WatchGroupMembersResponsePageTokenChange_FieldPathSelectorPrevPageToken WatchGroupMembersResponsePageTokenChange_FieldPathSelector = 0
	WatchGroupMembersResponsePageTokenChange_FieldPathSelectorNextPageToken WatchGroupMembersResponsePageTokenChange_FieldPathSelector = 1
)

func (s WatchGroupMembersResponsePageTokenChange_FieldPathSelector) String() string {
	switch s {
	case WatchGroupMembersResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case WatchGroupMembersResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchGroupMembersResponse_PageTokenChange: %d", s))
	}
}

func BuildWatchGroupMembersResponsePageTokenChange_FieldPath(fp gotenobject.RawFieldPath) (WatchGroupMembersResponsePageTokenChange_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchGroupMembersResponse_PageTokenChange")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &WatchGroupMembersResponsePageTokenChange_FieldTerminalPath{selector: WatchGroupMembersResponsePageTokenChange_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &WatchGroupMembersResponsePageTokenChange_FieldTerminalPath{selector: WatchGroupMembersResponsePageTokenChange_FieldPathSelectorNextPageToken}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchGroupMembersResponse_PageTokenChange", fp)
}

func ParseWatchGroupMembersResponsePageTokenChange_FieldPath(rawField string) (WatchGroupMembersResponsePageTokenChange_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchGroupMembersResponsePageTokenChange_FieldPath(fp)
}

func MustParseWatchGroupMembersResponsePageTokenChange_FieldPath(rawField string) WatchGroupMembersResponsePageTokenChange_FieldPath {
	fp, err := ParseWatchGroupMembersResponsePageTokenChange_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchGroupMembersResponsePageTokenChange_FieldTerminalPath struct {
	selector WatchGroupMembersResponsePageTokenChange_FieldPathSelector
}

var _ WatchGroupMembersResponsePageTokenChange_FieldPath = (*WatchGroupMembersResponsePageTokenChange_FieldTerminalPath)(nil)

func (fp *WatchGroupMembersResponsePageTokenChange_FieldTerminalPath) Selector() WatchGroupMembersResponsePageTokenChange_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchGroupMembersResponsePageTokenChange_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchGroupMembersResponsePageTokenChange_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchGroupMembersResponse_PageTokenChange
func (fp *WatchGroupMembersResponsePageTokenChange_FieldTerminalPath) Get(source *WatchGroupMembersResponse_PageTokenChange) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchGroupMembersResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case WatchGroupMembersResponsePageTokenChange_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchGroupMembersResponse_PageTokenChange: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchGroupMembersResponsePageTokenChange_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchGroupMembersResponse_PageTokenChange))
}

// GetSingle returns value pointed by specific field of from source WatchGroupMembersResponse_PageTokenChange
func (fp *WatchGroupMembersResponsePageTokenChange_FieldTerminalPath) GetSingle(source *WatchGroupMembersResponse_PageTokenChange) (interface{}, bool) {
	switch fp.selector {
	case WatchGroupMembersResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case WatchGroupMembersResponsePageTokenChange_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchGroupMembersResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchGroupMembersResponsePageTokenChange_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchGroupMembersResponse_PageTokenChange))
}

// GetDefault returns a default value of the field type
func (fp *WatchGroupMembersResponsePageTokenChange_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchGroupMembersResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return (*group_member.PagerCursor)(nil)
	case WatchGroupMembersResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return (*group_member.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchGroupMembersResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchGroupMembersResponsePageTokenChange_FieldTerminalPath) ClearValue(item *WatchGroupMembersResponse_PageTokenChange) {
	if item != nil {
		switch fp.selector {
		case WatchGroupMembersResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case WatchGroupMembersResponsePageTokenChange_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchGroupMembersResponse_PageTokenChange: %d", fp.selector))
		}
	}
}

func (fp *WatchGroupMembersResponsePageTokenChange_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchGroupMembersResponse_PageTokenChange))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchGroupMembersResponsePageTokenChange_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchGroupMembersResponsePageTokenChange_FieldPathSelectorPrevPageToken ||
		fp.selector == WatchGroupMembersResponsePageTokenChange_FieldPathSelectorNextPageToken
}

func (fp *WatchGroupMembersResponsePageTokenChange_FieldTerminalPath) WithIValue(value interface{}) WatchGroupMembersResponsePageTokenChange_FieldPathValue {
	switch fp.selector {
	case WatchGroupMembersResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchGroupMembersResponsePageTokenChange_FieldTerminalPathValue{WatchGroupMembersResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*group_member.PagerCursor)}
	case WatchGroupMembersResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchGroupMembersResponsePageTokenChange_FieldTerminalPathValue{WatchGroupMembersResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*group_member.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchGroupMembersResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchGroupMembersResponsePageTokenChange_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchGroupMembersResponsePageTokenChange_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchGroupMembersResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov := &WatchGroupMembersResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchGroupMembersResponsePageTokenChange_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchGroupMembersResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchGroupMembersResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchGroupMembersResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*group_member.PagerCursor)}
	case WatchGroupMembersResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchGroupMembersResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchGroupMembersResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*group_member.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchGroupMembersResponse_PageTokenChange: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchGroupMembersResponsePageTokenChange_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchGroupMembersResponsePageTokenChange_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchGroupMembersResponsePageTokenChange_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchGroupMembersResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchGroupMembersResponsePageTokenChange_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchGroupMembersResponsePageTokenChange_FieldPathValue allows storing values for PageTokenChange fields according to their type
type WatchGroupMembersResponsePageTokenChange_FieldPathValue interface {
	WatchGroupMembersResponsePageTokenChange_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchGroupMembersResponse_PageTokenChange)
	CompareWith(*WatchGroupMembersResponse_PageTokenChange) (cmp int, comparable bool)
}

func ParseWatchGroupMembersResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) (WatchGroupMembersResponsePageTokenChange_FieldPathValue, error) {
	fp, err := ParseWatchGroupMembersResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchGroupMembersResponsePageTokenChange_FieldPathValue), nil
}

func MustParseWatchGroupMembersResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) WatchGroupMembersResponsePageTokenChange_FieldPathValue {
	fpv, err := ParseWatchGroupMembersResponsePageTokenChange_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchGroupMembersResponsePageTokenChange_FieldTerminalPathValue struct {
	WatchGroupMembersResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchGroupMembersResponsePageTokenChange_FieldPathValue = (*WatchGroupMembersResponsePageTokenChange_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'PageTokenChange' as interface{}
func (fpv *WatchGroupMembersResponsePageTokenChange_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchGroupMembersResponsePageTokenChange_FieldTerminalPathValue) AsPrevPageTokenValue() (*group_member.PagerCursor, bool) {
	res, ok := fpv.value.(*group_member.PagerCursor)
	return res, ok
}
func (fpv *WatchGroupMembersResponsePageTokenChange_FieldTerminalPathValue) AsNextPageTokenValue() (*group_member.PagerCursor, bool) {
	res, ok := fpv.value.(*group_member.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object PageTokenChange
func (fpv *WatchGroupMembersResponsePageTokenChange_FieldTerminalPathValue) SetTo(target **WatchGroupMembersResponse_PageTokenChange) {
	if *target == nil {
		*target = new(WatchGroupMembersResponse_PageTokenChange)
	}
	switch fpv.selector {
	case WatchGroupMembersResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*group_member.PagerCursor)
	case WatchGroupMembersResponsePageTokenChange_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*group_member.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchGroupMembersResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchGroupMembersResponsePageTokenChange_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchGroupMembersResponse_PageTokenChange)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchGroupMembersResponsePageTokenChange_FieldTerminalPathValue' with the value under path in 'WatchGroupMembersResponse_PageTokenChange'.
func (fpv *WatchGroupMembersResponsePageTokenChange_FieldTerminalPathValue) CompareWith(source *WatchGroupMembersResponse_PageTokenChange) (int, bool) {
	switch fpv.selector {
	case WatchGroupMembersResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return 0, false
	case WatchGroupMembersResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchGroupMembersResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchGroupMembersResponsePageTokenChange_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchGroupMembersResponse_PageTokenChange))
}

// WatchGroupMembersResponsePageTokenChange_FieldPathArrayItemValue allows storing single item in Path-specific values for PageTokenChange according to their type
// Present only for array (repeated) types.
type WatchGroupMembersResponsePageTokenChange_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchGroupMembersResponsePageTokenChange_FieldPath
	ContainsValue(*WatchGroupMembersResponse_PageTokenChange) bool
}

// ParseWatchGroupMembersResponsePageTokenChange_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchGroupMembersResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) (WatchGroupMembersResponsePageTokenChange_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchGroupMembersResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchGroupMembersResponsePageTokenChange_FieldPathArrayItemValue), nil
}

func MustParseWatchGroupMembersResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) WatchGroupMembersResponsePageTokenChange_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchGroupMembersResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchGroupMembersResponsePageTokenChange_FieldTerminalPathArrayItemValue struct {
	WatchGroupMembersResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchGroupMembersResponsePageTokenChange_FieldPathArrayItemValue = (*WatchGroupMembersResponsePageTokenChange_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchGroupMembersResponse_PageTokenChange as interface{}
func (fpaiv *WatchGroupMembersResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchGroupMembersResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingle(source *WatchGroupMembersResponse_PageTokenChange) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchGroupMembersResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchGroupMembersResponse_PageTokenChange))
}

// Contains returns a boolean indicating if value that is being held is present in given 'PageTokenChange'
func (fpaiv *WatchGroupMembersResponsePageTokenChange_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchGroupMembersResponse_PageTokenChange) bool {
	slice := fpaiv.WatchGroupMembersResponsePageTokenChange_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchGroupMembersResponsePageTokenChange_FieldPathArrayOfValues allows storing slice of values for PageTokenChange fields according to their type
type WatchGroupMembersResponsePageTokenChange_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchGroupMembersResponsePageTokenChange_FieldPath
}

func ParseWatchGroupMembersResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchGroupMembersResponsePageTokenChange_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchGroupMembersResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchGroupMembersResponsePageTokenChange_FieldPathArrayOfValues), nil
}

func MustParseWatchGroupMembersResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) WatchGroupMembersResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov, err := ParseWatchGroupMembersResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchGroupMembersResponsePageTokenChange_FieldTerminalPathArrayOfValues struct {
	WatchGroupMembersResponsePageTokenChange_FieldTerminalPath
	values interface{}
}

var _ WatchGroupMembersResponsePageTokenChange_FieldPathArrayOfValues = (*WatchGroupMembersResponsePageTokenChange_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchGroupMembersResponsePageTokenChange_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchGroupMembersResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*group_member.PagerCursor) {
			values = append(values, v)
		}
	case WatchGroupMembersResponsePageTokenChange_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*group_member.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchGroupMembersResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*group_member.PagerCursor, bool) {
	res, ok := fpaov.values.([]*group_member.PagerCursor)
	return res, ok
}
func (fpaov *WatchGroupMembersResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*group_member.PagerCursor, bool) {
	res, ok := fpaov.values.([]*group_member.PagerCursor)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type CreateGroupMemberRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() CreateGroupMemberRequest_FieldPathSelector
	Get(source *CreateGroupMemberRequest) []interface{}
	GetSingle(source *CreateGroupMemberRequest) (interface{}, bool)
	ClearValue(item *CreateGroupMemberRequest)

	// Those methods build corresponding CreateGroupMemberRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) CreateGroupMemberRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) CreateGroupMemberRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) CreateGroupMemberRequest_FieldPathArrayItemValue
}

type CreateGroupMemberRequest_FieldPathSelector int32

const (
	CreateGroupMemberRequest_FieldPathSelectorParent      CreateGroupMemberRequest_FieldPathSelector = 0
	CreateGroupMemberRequest_FieldPathSelectorGroupMember CreateGroupMemberRequest_FieldPathSelector = 1
)

func (s CreateGroupMemberRequest_FieldPathSelector) String() string {
	switch s {
	case CreateGroupMemberRequest_FieldPathSelectorParent:
		return "parent"
	case CreateGroupMemberRequest_FieldPathSelectorGroupMember:
		return "group_member"
	default:
		panic(fmt.Sprintf("Invalid selector for CreateGroupMemberRequest: %d", s))
	}
}

func BuildCreateGroupMemberRequest_FieldPath(fp gotenobject.RawFieldPath) (CreateGroupMemberRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object CreateGroupMemberRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &CreateGroupMemberRequest_FieldTerminalPath{selector: CreateGroupMemberRequest_FieldPathSelectorParent}, nil
		case "group_member", "groupMember", "group-member":
			return &CreateGroupMemberRequest_FieldTerminalPath{selector: CreateGroupMemberRequest_FieldPathSelectorGroupMember}, nil
		}
	} else {
		switch fp[0] {
		case "group_member", "groupMember", "group-member":
			if subpath, err := group_member.BuildGroupMember_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &CreateGroupMemberRequest_FieldSubPath{selector: CreateGroupMemberRequest_FieldPathSelectorGroupMember, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object CreateGroupMemberRequest", fp)
}

func ParseCreateGroupMemberRequest_FieldPath(rawField string) (CreateGroupMemberRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildCreateGroupMemberRequest_FieldPath(fp)
}

func MustParseCreateGroupMemberRequest_FieldPath(rawField string) CreateGroupMemberRequest_FieldPath {
	fp, err := ParseCreateGroupMemberRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type CreateGroupMemberRequest_FieldTerminalPath struct {
	selector CreateGroupMemberRequest_FieldPathSelector
}

var _ CreateGroupMemberRequest_FieldPath = (*CreateGroupMemberRequest_FieldTerminalPath)(nil)

func (fp *CreateGroupMemberRequest_FieldTerminalPath) Selector() CreateGroupMemberRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *CreateGroupMemberRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *CreateGroupMemberRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source CreateGroupMemberRequest
func (fp *CreateGroupMemberRequest_FieldTerminalPath) Get(source *CreateGroupMemberRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case CreateGroupMemberRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case CreateGroupMemberRequest_FieldPathSelectorGroupMember:
			if source.GroupMember != nil {
				values = append(values, source.GroupMember)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for CreateGroupMemberRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *CreateGroupMemberRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*CreateGroupMemberRequest))
}

// GetSingle returns value pointed by specific field of from source CreateGroupMemberRequest
func (fp *CreateGroupMemberRequest_FieldTerminalPath) GetSingle(source *CreateGroupMemberRequest) (interface{}, bool) {
	switch fp.selector {
	case CreateGroupMemberRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case CreateGroupMemberRequest_FieldPathSelectorGroupMember:
		res := source.GetGroupMember()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for CreateGroupMemberRequest: %d", fp.selector))
	}
}

func (fp *CreateGroupMemberRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*CreateGroupMemberRequest))
}

// GetDefault returns a default value of the field type
func (fp *CreateGroupMemberRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case CreateGroupMemberRequest_FieldPathSelectorParent:
		return (*group_member.ParentReference)(nil)
	case CreateGroupMemberRequest_FieldPathSelectorGroupMember:
		return (*group_member.GroupMember)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateGroupMemberRequest: %d", fp.selector))
	}
}

func (fp *CreateGroupMemberRequest_FieldTerminalPath) ClearValue(item *CreateGroupMemberRequest) {
	if item != nil {
		switch fp.selector {
		case CreateGroupMemberRequest_FieldPathSelectorParent:
			item.Parent = nil
		case CreateGroupMemberRequest_FieldPathSelectorGroupMember:
			item.GroupMember = nil
		default:
			panic(fmt.Sprintf("Invalid selector for CreateGroupMemberRequest: %d", fp.selector))
		}
	}
}

func (fp *CreateGroupMemberRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*CreateGroupMemberRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *CreateGroupMemberRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == CreateGroupMemberRequest_FieldPathSelectorParent
}

func (fp *CreateGroupMemberRequest_FieldTerminalPath) WithIValue(value interface{}) CreateGroupMemberRequest_FieldPathValue {
	switch fp.selector {
	case CreateGroupMemberRequest_FieldPathSelectorParent:
		return &CreateGroupMemberRequest_FieldTerminalPathValue{CreateGroupMemberRequest_FieldTerminalPath: *fp, value: value.(*group_member.ParentReference)}
	case CreateGroupMemberRequest_FieldPathSelectorGroupMember:
		return &CreateGroupMemberRequest_FieldTerminalPathValue{CreateGroupMemberRequest_FieldTerminalPath: *fp, value: value.(*group_member.GroupMember)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateGroupMemberRequest: %d", fp.selector))
	}
}

func (fp *CreateGroupMemberRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *CreateGroupMemberRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) CreateGroupMemberRequest_FieldPathArrayOfValues {
	fpaov := &CreateGroupMemberRequest_FieldTerminalPathArrayOfValues{CreateGroupMemberRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case CreateGroupMemberRequest_FieldPathSelectorParent:
		return &CreateGroupMemberRequest_FieldTerminalPathArrayOfValues{CreateGroupMemberRequest_FieldTerminalPath: *fp, values: values.([]*group_member.ParentReference)}
	case CreateGroupMemberRequest_FieldPathSelectorGroupMember:
		return &CreateGroupMemberRequest_FieldTerminalPathArrayOfValues{CreateGroupMemberRequest_FieldTerminalPath: *fp, values: values.([]*group_member.GroupMember)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateGroupMemberRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *CreateGroupMemberRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *CreateGroupMemberRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) CreateGroupMemberRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for CreateGroupMemberRequest: %d", fp.selector))
	}
}

func (fp *CreateGroupMemberRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type CreateGroupMemberRequest_FieldSubPath struct {
	selector CreateGroupMemberRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ CreateGroupMemberRequest_FieldPath = (*CreateGroupMemberRequest_FieldSubPath)(nil)

func (fps *CreateGroupMemberRequest_FieldSubPath) Selector() CreateGroupMemberRequest_FieldPathSelector {
	return fps.selector
}
func (fps *CreateGroupMemberRequest_FieldSubPath) AsGroupMemberSubPath() (group_member.GroupMember_FieldPath, bool) {
	res, ok := fps.subPath.(group_member.GroupMember_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *CreateGroupMemberRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *CreateGroupMemberRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source CreateGroupMemberRequest
func (fps *CreateGroupMemberRequest_FieldSubPath) Get(source *CreateGroupMemberRequest) (values []interface{}) {
	if asGroupMemberFieldPath, ok := fps.AsGroupMemberSubPath(); ok {
		values = append(values, asGroupMemberFieldPath.Get(source.GetGroupMember())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for CreateGroupMemberRequest: %d", fps.selector))
	}
	return
}

func (fps *CreateGroupMemberRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*CreateGroupMemberRequest))
}

// GetSingle returns value of selected field from source CreateGroupMemberRequest
func (fps *CreateGroupMemberRequest_FieldSubPath) GetSingle(source *CreateGroupMemberRequest) (interface{}, bool) {
	switch fps.selector {
	case CreateGroupMemberRequest_FieldPathSelectorGroupMember:
		if source.GetGroupMember() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetGroupMember())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateGroupMemberRequest: %d", fps.selector))
	}
}

func (fps *CreateGroupMemberRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*CreateGroupMemberRequest))
}

// GetDefault returns a default value of the field type
func (fps *CreateGroupMemberRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *CreateGroupMemberRequest_FieldSubPath) ClearValue(item *CreateGroupMemberRequest) {
	if item != nil {
		switch fps.selector {
		case CreateGroupMemberRequest_FieldPathSelectorGroupMember:
			fps.subPath.ClearValueRaw(item.GroupMember)
		default:
			panic(fmt.Sprintf("Invalid selector for CreateGroupMemberRequest: %d", fps.selector))
		}
	}
}

func (fps *CreateGroupMemberRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*CreateGroupMemberRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *CreateGroupMemberRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *CreateGroupMemberRequest_FieldSubPath) WithIValue(value interface{}) CreateGroupMemberRequest_FieldPathValue {
	return &CreateGroupMemberRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *CreateGroupMemberRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *CreateGroupMemberRequest_FieldSubPath) WithIArrayOfValues(values interface{}) CreateGroupMemberRequest_FieldPathArrayOfValues {
	return &CreateGroupMemberRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *CreateGroupMemberRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *CreateGroupMemberRequest_FieldSubPath) WithIArrayItemValue(value interface{}) CreateGroupMemberRequest_FieldPathArrayItemValue {
	return &CreateGroupMemberRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *CreateGroupMemberRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// CreateGroupMemberRequest_FieldPathValue allows storing values for CreateGroupMemberRequest fields according to their type
type CreateGroupMemberRequest_FieldPathValue interface {
	CreateGroupMemberRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **CreateGroupMemberRequest)
	CompareWith(*CreateGroupMemberRequest) (cmp int, comparable bool)
}

func ParseCreateGroupMemberRequest_FieldPathValue(pathStr, valueStr string) (CreateGroupMemberRequest_FieldPathValue, error) {
	fp, err := ParseCreateGroupMemberRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateGroupMemberRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(CreateGroupMemberRequest_FieldPathValue), nil
}

func MustParseCreateGroupMemberRequest_FieldPathValue(pathStr, valueStr string) CreateGroupMemberRequest_FieldPathValue {
	fpv, err := ParseCreateGroupMemberRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type CreateGroupMemberRequest_FieldTerminalPathValue struct {
	CreateGroupMemberRequest_FieldTerminalPath
	value interface{}
}

var _ CreateGroupMemberRequest_FieldPathValue = (*CreateGroupMemberRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CreateGroupMemberRequest' as interface{}
func (fpv *CreateGroupMemberRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *CreateGroupMemberRequest_FieldTerminalPathValue) AsParentValue() (*group_member.ParentReference, bool) {
	res, ok := fpv.value.(*group_member.ParentReference)
	return res, ok
}
func (fpv *CreateGroupMemberRequest_FieldTerminalPathValue) AsGroupMemberValue() (*group_member.GroupMember, bool) {
	res, ok := fpv.value.(*group_member.GroupMember)
	return res, ok
}

// SetTo stores value for selected field for object CreateGroupMemberRequest
func (fpv *CreateGroupMemberRequest_FieldTerminalPathValue) SetTo(target **CreateGroupMemberRequest) {
	if *target == nil {
		*target = new(CreateGroupMemberRequest)
	}
	switch fpv.selector {
	case CreateGroupMemberRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*group_member.ParentReference)
	case CreateGroupMemberRequest_FieldPathSelectorGroupMember:
		(*target).GroupMember = fpv.value.(*group_member.GroupMember)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateGroupMemberRequest: %d", fpv.selector))
	}
}

func (fpv *CreateGroupMemberRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateGroupMemberRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'CreateGroupMemberRequest_FieldTerminalPathValue' with the value under path in 'CreateGroupMemberRequest'.
func (fpv *CreateGroupMemberRequest_FieldTerminalPathValue) CompareWith(source *CreateGroupMemberRequest) (int, bool) {
	switch fpv.selector {
	case CreateGroupMemberRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*group_member.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case CreateGroupMemberRequest_FieldPathSelectorGroupMember:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for CreateGroupMemberRequest: %d", fpv.selector))
	}
}

func (fpv *CreateGroupMemberRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*CreateGroupMemberRequest))
}

type CreateGroupMemberRequest_FieldSubPathValue struct {
	CreateGroupMemberRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ CreateGroupMemberRequest_FieldPathValue = (*CreateGroupMemberRequest_FieldSubPathValue)(nil)

func (fpvs *CreateGroupMemberRequest_FieldSubPathValue) AsGroupMemberPathValue() (group_member.GroupMember_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(group_member.GroupMember_FieldPathValue)
	return res, ok
}

func (fpvs *CreateGroupMemberRequest_FieldSubPathValue) SetTo(target **CreateGroupMemberRequest) {
	if *target == nil {
		*target = new(CreateGroupMemberRequest)
	}
	switch fpvs.Selector() {
	case CreateGroupMemberRequest_FieldPathSelectorGroupMember:
		fpvs.subPathValue.(group_member.GroupMember_FieldPathValue).SetTo(&(*target).GroupMember)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateGroupMemberRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateGroupMemberRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateGroupMemberRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *CreateGroupMemberRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *CreateGroupMemberRequest_FieldSubPathValue) CompareWith(source *CreateGroupMemberRequest) (int, bool) {
	switch fpvs.Selector() {
	case CreateGroupMemberRequest_FieldPathSelectorGroupMember:
		return fpvs.subPathValue.(group_member.GroupMember_FieldPathValue).CompareWith(source.GetGroupMember())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateGroupMemberRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateGroupMemberRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*CreateGroupMemberRequest))
}

// CreateGroupMemberRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for CreateGroupMemberRequest according to their type
// Present only for array (repeated) types.
type CreateGroupMemberRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	CreateGroupMemberRequest_FieldPath
	ContainsValue(*CreateGroupMemberRequest) bool
}

// ParseCreateGroupMemberRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseCreateGroupMemberRequest_FieldPathArrayItemValue(pathStr, valueStr string) (CreateGroupMemberRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseCreateGroupMemberRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateGroupMemberRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(CreateGroupMemberRequest_FieldPathArrayItemValue), nil
}

func MustParseCreateGroupMemberRequest_FieldPathArrayItemValue(pathStr, valueStr string) CreateGroupMemberRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseCreateGroupMemberRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type CreateGroupMemberRequest_FieldTerminalPathArrayItemValue struct {
	CreateGroupMemberRequest_FieldTerminalPath
	value interface{}
}

var _ CreateGroupMemberRequest_FieldPathArrayItemValue = (*CreateGroupMemberRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object CreateGroupMemberRequest as interface{}
func (fpaiv *CreateGroupMemberRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *CreateGroupMemberRequest_FieldTerminalPathArrayItemValue) GetSingle(source *CreateGroupMemberRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *CreateGroupMemberRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*CreateGroupMemberRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateGroupMemberRequest'
func (fpaiv *CreateGroupMemberRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *CreateGroupMemberRequest) bool {
	slice := fpaiv.CreateGroupMemberRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type CreateGroupMemberRequest_FieldSubPathArrayItemValue struct {
	CreateGroupMemberRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *CreateGroupMemberRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *CreateGroupMemberRequest_FieldSubPathArrayItemValue) AsGroupMemberPathItemValue() (group_member.GroupMember_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(group_member.GroupMember_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateGroupMemberRequest'
func (fpaivs *CreateGroupMemberRequest_FieldSubPathArrayItemValue) ContainsValue(source *CreateGroupMemberRequest) bool {
	switch fpaivs.Selector() {
	case CreateGroupMemberRequest_FieldPathSelectorGroupMember:
		return fpaivs.subPathItemValue.(group_member.GroupMember_FieldPathArrayItemValue).ContainsValue(source.GetGroupMember())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateGroupMemberRequest: %d", fpaivs.Selector()))
	}
}

// CreateGroupMemberRequest_FieldPathArrayOfValues allows storing slice of values for CreateGroupMemberRequest fields according to their type
type CreateGroupMemberRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	CreateGroupMemberRequest_FieldPath
}

func ParseCreateGroupMemberRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (CreateGroupMemberRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseCreateGroupMemberRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateGroupMemberRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(CreateGroupMemberRequest_FieldPathArrayOfValues), nil
}

func MustParseCreateGroupMemberRequest_FieldPathArrayOfValues(pathStr, valuesStr string) CreateGroupMemberRequest_FieldPathArrayOfValues {
	fpaov, err := ParseCreateGroupMemberRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type CreateGroupMemberRequest_FieldTerminalPathArrayOfValues struct {
	CreateGroupMemberRequest_FieldTerminalPath
	values interface{}
}

var _ CreateGroupMemberRequest_FieldPathArrayOfValues = (*CreateGroupMemberRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *CreateGroupMemberRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case CreateGroupMemberRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*group_member.ParentReference) {
			values = append(values, v)
		}
	case CreateGroupMemberRequest_FieldPathSelectorGroupMember:
		for _, v := range fpaov.values.([]*group_member.GroupMember) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *CreateGroupMemberRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*group_member.ParentReference, bool) {
	res, ok := fpaov.values.([]*group_member.ParentReference)
	return res, ok
}
func (fpaov *CreateGroupMemberRequest_FieldTerminalPathArrayOfValues) AsGroupMemberArrayOfValues() ([]*group_member.GroupMember, bool) {
	res, ok := fpaov.values.([]*group_member.GroupMember)
	return res, ok
}

type CreateGroupMemberRequest_FieldSubPathArrayOfValues struct {
	CreateGroupMemberRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ CreateGroupMemberRequest_FieldPathArrayOfValues = (*CreateGroupMemberRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *CreateGroupMemberRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *CreateGroupMemberRequest_FieldSubPathArrayOfValues) AsGroupMemberPathArrayOfValues() (group_member.GroupMember_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(group_member.GroupMember_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateGroupMemberRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateGroupMemberRequest_FieldPathSelector
	Get(source *UpdateGroupMemberRequest) []interface{}
	GetSingle(source *UpdateGroupMemberRequest) (interface{}, bool)
	ClearValue(item *UpdateGroupMemberRequest)

	// Those methods build corresponding UpdateGroupMemberRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateGroupMemberRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateGroupMemberRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateGroupMemberRequest_FieldPathArrayItemValue
}

type UpdateGroupMemberRequest_FieldPathSelector int32

const (
	UpdateGroupMemberRequest_FieldPathSelectorGroupMember UpdateGroupMemberRequest_FieldPathSelector = 0
	UpdateGroupMemberRequest_FieldPathSelectorUpdateMask  UpdateGroupMemberRequest_FieldPathSelector = 1
	UpdateGroupMemberRequest_FieldPathSelectorCas         UpdateGroupMemberRequest_FieldPathSelector = 2
)

func (s UpdateGroupMemberRequest_FieldPathSelector) String() string {
	switch s {
	case UpdateGroupMemberRequest_FieldPathSelectorGroupMember:
		return "group_member"
	case UpdateGroupMemberRequest_FieldPathSelectorUpdateMask:
		return "update_mask"
	case UpdateGroupMemberRequest_FieldPathSelectorCas:
		return "cas"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateGroupMemberRequest: %d", s))
	}
}

func BuildUpdateGroupMemberRequest_FieldPath(fp gotenobject.RawFieldPath) (UpdateGroupMemberRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateGroupMemberRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "group_member", "groupMember", "group-member":
			return &UpdateGroupMemberRequest_FieldTerminalPath{selector: UpdateGroupMemberRequest_FieldPathSelectorGroupMember}, nil
		case "update_mask", "updateMask", "update-mask":
			return &UpdateGroupMemberRequest_FieldTerminalPath{selector: UpdateGroupMemberRequest_FieldPathSelectorUpdateMask}, nil
		case "cas":
			return &UpdateGroupMemberRequest_FieldTerminalPath{selector: UpdateGroupMemberRequest_FieldPathSelectorCas}, nil
		}
	} else {
		switch fp[0] {
		case "group_member", "groupMember", "group-member":
			if subpath, err := group_member.BuildGroupMember_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateGroupMemberRequest_FieldSubPath{selector: UpdateGroupMemberRequest_FieldPathSelectorGroupMember, subPath: subpath}, nil
			}
		case "cas":
			if subpath, err := BuildUpdateGroupMemberRequestCAS_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateGroupMemberRequest_FieldSubPath{selector: UpdateGroupMemberRequest_FieldPathSelectorCas, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateGroupMemberRequest", fp)
}

func ParseUpdateGroupMemberRequest_FieldPath(rawField string) (UpdateGroupMemberRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateGroupMemberRequest_FieldPath(fp)
}

func MustParseUpdateGroupMemberRequest_FieldPath(rawField string) UpdateGroupMemberRequest_FieldPath {
	fp, err := ParseUpdateGroupMemberRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateGroupMemberRequest_FieldTerminalPath struct {
	selector UpdateGroupMemberRequest_FieldPathSelector
}

var _ UpdateGroupMemberRequest_FieldPath = (*UpdateGroupMemberRequest_FieldTerminalPath)(nil)

func (fp *UpdateGroupMemberRequest_FieldTerminalPath) Selector() UpdateGroupMemberRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateGroupMemberRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateGroupMemberRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateGroupMemberRequest
func (fp *UpdateGroupMemberRequest_FieldTerminalPath) Get(source *UpdateGroupMemberRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateGroupMemberRequest_FieldPathSelectorGroupMember:
			if source.GroupMember != nil {
				values = append(values, source.GroupMember)
			}
		case UpdateGroupMemberRequest_FieldPathSelectorUpdateMask:
			if source.UpdateMask != nil {
				values = append(values, source.UpdateMask)
			}
		case UpdateGroupMemberRequest_FieldPathSelectorCas:
			if source.Cas != nil {
				values = append(values, source.Cas)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateGroupMemberRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateGroupMemberRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateGroupMemberRequest))
}

// GetSingle returns value pointed by specific field of from source UpdateGroupMemberRequest
func (fp *UpdateGroupMemberRequest_FieldTerminalPath) GetSingle(source *UpdateGroupMemberRequest) (interface{}, bool) {
	switch fp.selector {
	case UpdateGroupMemberRequest_FieldPathSelectorGroupMember:
		res := source.GetGroupMember()
		return res, res != nil
	case UpdateGroupMemberRequest_FieldPathSelectorUpdateMask:
		res := source.GetUpdateMask()
		return res, res != nil
	case UpdateGroupMemberRequest_FieldPathSelectorCas:
		res := source.GetCas()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateGroupMemberRequest: %d", fp.selector))
	}
}

func (fp *UpdateGroupMemberRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateGroupMemberRequest))
}

// GetDefault returns a default value of the field type
func (fp *UpdateGroupMemberRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateGroupMemberRequest_FieldPathSelectorGroupMember:
		return (*group_member.GroupMember)(nil)
	case UpdateGroupMemberRequest_FieldPathSelectorUpdateMask:
		return (*group_member.GroupMember_FieldMask)(nil)
	case UpdateGroupMemberRequest_FieldPathSelectorCas:
		return (*UpdateGroupMemberRequest_CAS)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateGroupMemberRequest: %d", fp.selector))
	}
}

func (fp *UpdateGroupMemberRequest_FieldTerminalPath) ClearValue(item *UpdateGroupMemberRequest) {
	if item != nil {
		switch fp.selector {
		case UpdateGroupMemberRequest_FieldPathSelectorGroupMember:
			item.GroupMember = nil
		case UpdateGroupMemberRequest_FieldPathSelectorUpdateMask:
			item.UpdateMask = nil
		case UpdateGroupMemberRequest_FieldPathSelectorCas:
			item.Cas = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateGroupMemberRequest: %d", fp.selector))
		}
	}
}

func (fp *UpdateGroupMemberRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateGroupMemberRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateGroupMemberRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateGroupMemberRequest_FieldPathSelectorUpdateMask
}

func (fp *UpdateGroupMemberRequest_FieldTerminalPath) WithIValue(value interface{}) UpdateGroupMemberRequest_FieldPathValue {
	switch fp.selector {
	case UpdateGroupMemberRequest_FieldPathSelectorGroupMember:
		return &UpdateGroupMemberRequest_FieldTerminalPathValue{UpdateGroupMemberRequest_FieldTerminalPath: *fp, value: value.(*group_member.GroupMember)}
	case UpdateGroupMemberRequest_FieldPathSelectorUpdateMask:
		return &UpdateGroupMemberRequest_FieldTerminalPathValue{UpdateGroupMemberRequest_FieldTerminalPath: *fp, value: value.(*group_member.GroupMember_FieldMask)}
	case UpdateGroupMemberRequest_FieldPathSelectorCas:
		return &UpdateGroupMemberRequest_FieldTerminalPathValue{UpdateGroupMemberRequest_FieldTerminalPath: *fp, value: value.(*UpdateGroupMemberRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateGroupMemberRequest: %d", fp.selector))
	}
}

func (fp *UpdateGroupMemberRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateGroupMemberRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateGroupMemberRequest_FieldPathArrayOfValues {
	fpaov := &UpdateGroupMemberRequest_FieldTerminalPathArrayOfValues{UpdateGroupMemberRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateGroupMemberRequest_FieldPathSelectorGroupMember:
		return &UpdateGroupMemberRequest_FieldTerminalPathArrayOfValues{UpdateGroupMemberRequest_FieldTerminalPath: *fp, values: values.([]*group_member.GroupMember)}
	case UpdateGroupMemberRequest_FieldPathSelectorUpdateMask:
		return &UpdateGroupMemberRequest_FieldTerminalPathArrayOfValues{UpdateGroupMemberRequest_FieldTerminalPath: *fp, values: values.([]*group_member.GroupMember_FieldMask)}
	case UpdateGroupMemberRequest_FieldPathSelectorCas:
		return &UpdateGroupMemberRequest_FieldTerminalPathArrayOfValues{UpdateGroupMemberRequest_FieldTerminalPath: *fp, values: values.([]*UpdateGroupMemberRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateGroupMemberRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateGroupMemberRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateGroupMemberRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateGroupMemberRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateGroupMemberRequest: %d", fp.selector))
	}
}

func (fp *UpdateGroupMemberRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateGroupMemberRequest_FieldSubPath struct {
	selector UpdateGroupMemberRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateGroupMemberRequest_FieldPath = (*UpdateGroupMemberRequest_FieldSubPath)(nil)

func (fps *UpdateGroupMemberRequest_FieldSubPath) Selector() UpdateGroupMemberRequest_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateGroupMemberRequest_FieldSubPath) AsGroupMemberSubPath() (group_member.GroupMember_FieldPath, bool) {
	res, ok := fps.subPath.(group_member.GroupMember_FieldPath)
	return res, ok
}
func (fps *UpdateGroupMemberRequest_FieldSubPath) AsCasSubPath() (UpdateGroupMemberRequestCAS_FieldPath, bool) {
	res, ok := fps.subPath.(UpdateGroupMemberRequestCAS_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateGroupMemberRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateGroupMemberRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateGroupMemberRequest
func (fps *UpdateGroupMemberRequest_FieldSubPath) Get(source *UpdateGroupMemberRequest) (values []interface{}) {
	if asGroupMemberFieldPath, ok := fps.AsGroupMemberSubPath(); ok {
		values = append(values, asGroupMemberFieldPath.Get(source.GetGroupMember())...)
	} else if asCASFieldPath, ok := fps.AsCasSubPath(); ok {
		values = append(values, asCASFieldPath.Get(source.GetCas())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for UpdateGroupMemberRequest: %d", fps.selector))
	}
	return
}

func (fps *UpdateGroupMemberRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateGroupMemberRequest))
}

// GetSingle returns value of selected field from source UpdateGroupMemberRequest
func (fps *UpdateGroupMemberRequest_FieldSubPath) GetSingle(source *UpdateGroupMemberRequest) (interface{}, bool) {
	switch fps.selector {
	case UpdateGroupMemberRequest_FieldPathSelectorGroupMember:
		if source.GetGroupMember() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetGroupMember())
	case UpdateGroupMemberRequest_FieldPathSelectorCas:
		if source.GetCas() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateGroupMemberRequest: %d", fps.selector))
	}
}

func (fps *UpdateGroupMemberRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateGroupMemberRequest))
}

// GetDefault returns a default value of the field type
func (fps *UpdateGroupMemberRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateGroupMemberRequest_FieldSubPath) ClearValue(item *UpdateGroupMemberRequest) {
	if item != nil {
		switch fps.selector {
		case UpdateGroupMemberRequest_FieldPathSelectorGroupMember:
			fps.subPath.ClearValueRaw(item.GroupMember)
		case UpdateGroupMemberRequest_FieldPathSelectorCas:
			fps.subPath.ClearValueRaw(item.Cas)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateGroupMemberRequest: %d", fps.selector))
		}
	}
}

func (fps *UpdateGroupMemberRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateGroupMemberRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateGroupMemberRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateGroupMemberRequest_FieldSubPath) WithIValue(value interface{}) UpdateGroupMemberRequest_FieldPathValue {
	return &UpdateGroupMemberRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateGroupMemberRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateGroupMemberRequest_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateGroupMemberRequest_FieldPathArrayOfValues {
	return &UpdateGroupMemberRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateGroupMemberRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateGroupMemberRequest_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateGroupMemberRequest_FieldPathArrayItemValue {
	return &UpdateGroupMemberRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateGroupMemberRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateGroupMemberRequest_FieldPathValue allows storing values for UpdateGroupMemberRequest fields according to their type
type UpdateGroupMemberRequest_FieldPathValue interface {
	UpdateGroupMemberRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateGroupMemberRequest)
	CompareWith(*UpdateGroupMemberRequest) (cmp int, comparable bool)
}

func ParseUpdateGroupMemberRequest_FieldPathValue(pathStr, valueStr string) (UpdateGroupMemberRequest_FieldPathValue, error) {
	fp, err := ParseUpdateGroupMemberRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateGroupMemberRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateGroupMemberRequest_FieldPathValue), nil
}

func MustParseUpdateGroupMemberRequest_FieldPathValue(pathStr, valueStr string) UpdateGroupMemberRequest_FieldPathValue {
	fpv, err := ParseUpdateGroupMemberRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateGroupMemberRequest_FieldTerminalPathValue struct {
	UpdateGroupMemberRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateGroupMemberRequest_FieldPathValue = (*UpdateGroupMemberRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'UpdateGroupMemberRequest' as interface{}
func (fpv *UpdateGroupMemberRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateGroupMemberRequest_FieldTerminalPathValue) AsGroupMemberValue() (*group_member.GroupMember, bool) {
	res, ok := fpv.value.(*group_member.GroupMember)
	return res, ok
}
func (fpv *UpdateGroupMemberRequest_FieldTerminalPathValue) AsUpdateMaskValue() (*group_member.GroupMember_FieldMask, bool) {
	res, ok := fpv.value.(*group_member.GroupMember_FieldMask)
	return res, ok
}
func (fpv *UpdateGroupMemberRequest_FieldTerminalPathValue) AsCasValue() (*UpdateGroupMemberRequest_CAS, bool) {
	res, ok := fpv.value.(*UpdateGroupMemberRequest_CAS)
	return res, ok
}

// SetTo stores value for selected field for object UpdateGroupMemberRequest
func (fpv *UpdateGroupMemberRequest_FieldTerminalPathValue) SetTo(target **UpdateGroupMemberRequest) {
	if *target == nil {
		*target = new(UpdateGroupMemberRequest)
	}
	switch fpv.selector {
	case UpdateGroupMemberRequest_FieldPathSelectorGroupMember:
		(*target).GroupMember = fpv.value.(*group_member.GroupMember)
	case UpdateGroupMemberRequest_FieldPathSelectorUpdateMask:
		(*target).UpdateMask = fpv.value.(*group_member.GroupMember_FieldMask)
	case UpdateGroupMemberRequest_FieldPathSelectorCas:
		(*target).Cas = fpv.value.(*UpdateGroupMemberRequest_CAS)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateGroupMemberRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateGroupMemberRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateGroupMemberRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateGroupMemberRequest_FieldTerminalPathValue' with the value under path in 'UpdateGroupMemberRequest'.
func (fpv *UpdateGroupMemberRequest_FieldTerminalPathValue) CompareWith(source *UpdateGroupMemberRequest) (int, bool) {
	switch fpv.selector {
	case UpdateGroupMemberRequest_FieldPathSelectorGroupMember:
		return 0, false
	case UpdateGroupMemberRequest_FieldPathSelectorUpdateMask:
		return 0, false
	case UpdateGroupMemberRequest_FieldPathSelectorCas:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateGroupMemberRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateGroupMemberRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateGroupMemberRequest))
}

type UpdateGroupMemberRequest_FieldSubPathValue struct {
	UpdateGroupMemberRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateGroupMemberRequest_FieldPathValue = (*UpdateGroupMemberRequest_FieldSubPathValue)(nil)

func (fpvs *UpdateGroupMemberRequest_FieldSubPathValue) AsGroupMemberPathValue() (group_member.GroupMember_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(group_member.GroupMember_FieldPathValue)
	return res, ok
}
func (fpvs *UpdateGroupMemberRequest_FieldSubPathValue) AsCasPathValue() (UpdateGroupMemberRequestCAS_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(UpdateGroupMemberRequestCAS_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateGroupMemberRequest_FieldSubPathValue) SetTo(target **UpdateGroupMemberRequest) {
	if *target == nil {
		*target = new(UpdateGroupMemberRequest)
	}
	switch fpvs.Selector() {
	case UpdateGroupMemberRequest_FieldPathSelectorGroupMember:
		fpvs.subPathValue.(group_member.GroupMember_FieldPathValue).SetTo(&(*target).GroupMember)
	case UpdateGroupMemberRequest_FieldPathSelectorCas:
		fpvs.subPathValue.(UpdateGroupMemberRequestCAS_FieldPathValue).SetTo(&(*target).Cas)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateGroupMemberRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateGroupMemberRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateGroupMemberRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateGroupMemberRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateGroupMemberRequest_FieldSubPathValue) CompareWith(source *UpdateGroupMemberRequest) (int, bool) {
	switch fpvs.Selector() {
	case UpdateGroupMemberRequest_FieldPathSelectorGroupMember:
		return fpvs.subPathValue.(group_member.GroupMember_FieldPathValue).CompareWith(source.GetGroupMember())
	case UpdateGroupMemberRequest_FieldPathSelectorCas:
		return fpvs.subPathValue.(UpdateGroupMemberRequestCAS_FieldPathValue).CompareWith(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateGroupMemberRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateGroupMemberRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateGroupMemberRequest))
}

// UpdateGroupMemberRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for UpdateGroupMemberRequest according to their type
// Present only for array (repeated) types.
type UpdateGroupMemberRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateGroupMemberRequest_FieldPath
	ContainsValue(*UpdateGroupMemberRequest) bool
}

// ParseUpdateGroupMemberRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateGroupMemberRequest_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateGroupMemberRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateGroupMemberRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateGroupMemberRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateGroupMemberRequest_FieldPathArrayItemValue), nil
}

func MustParseUpdateGroupMemberRequest_FieldPathArrayItemValue(pathStr, valueStr string) UpdateGroupMemberRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateGroupMemberRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateGroupMemberRequest_FieldTerminalPathArrayItemValue struct {
	UpdateGroupMemberRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateGroupMemberRequest_FieldPathArrayItemValue = (*UpdateGroupMemberRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateGroupMemberRequest as interface{}
func (fpaiv *UpdateGroupMemberRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateGroupMemberRequest_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateGroupMemberRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateGroupMemberRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateGroupMemberRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateGroupMemberRequest'
func (fpaiv *UpdateGroupMemberRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateGroupMemberRequest) bool {
	slice := fpaiv.UpdateGroupMemberRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateGroupMemberRequest_FieldSubPathArrayItemValue struct {
	UpdateGroupMemberRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateGroupMemberRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateGroupMemberRequest_FieldSubPathArrayItemValue) AsGroupMemberPathItemValue() (group_member.GroupMember_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(group_member.GroupMember_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *UpdateGroupMemberRequest_FieldSubPathArrayItemValue) AsCasPathItemValue() (UpdateGroupMemberRequestCAS_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(UpdateGroupMemberRequestCAS_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateGroupMemberRequest'
func (fpaivs *UpdateGroupMemberRequest_FieldSubPathArrayItemValue) ContainsValue(source *UpdateGroupMemberRequest) bool {
	switch fpaivs.Selector() {
	case UpdateGroupMemberRequest_FieldPathSelectorGroupMember:
		return fpaivs.subPathItemValue.(group_member.GroupMember_FieldPathArrayItemValue).ContainsValue(source.GetGroupMember())
	case UpdateGroupMemberRequest_FieldPathSelectorCas:
		return fpaivs.subPathItemValue.(UpdateGroupMemberRequestCAS_FieldPathArrayItemValue).ContainsValue(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateGroupMemberRequest: %d", fpaivs.Selector()))
	}
}

// UpdateGroupMemberRequest_FieldPathArrayOfValues allows storing slice of values for UpdateGroupMemberRequest fields according to their type
type UpdateGroupMemberRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateGroupMemberRequest_FieldPath
}

func ParseUpdateGroupMemberRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateGroupMemberRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateGroupMemberRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateGroupMemberRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateGroupMemberRequest_FieldPathArrayOfValues), nil
}

func MustParseUpdateGroupMemberRequest_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateGroupMemberRequest_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateGroupMemberRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateGroupMemberRequest_FieldTerminalPathArrayOfValues struct {
	UpdateGroupMemberRequest_FieldTerminalPath
	values interface{}
}

var _ UpdateGroupMemberRequest_FieldPathArrayOfValues = (*UpdateGroupMemberRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateGroupMemberRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateGroupMemberRequest_FieldPathSelectorGroupMember:
		for _, v := range fpaov.values.([]*group_member.GroupMember) {
			values = append(values, v)
		}
	case UpdateGroupMemberRequest_FieldPathSelectorUpdateMask:
		for _, v := range fpaov.values.([]*group_member.GroupMember_FieldMask) {
			values = append(values, v)
		}
	case UpdateGroupMemberRequest_FieldPathSelectorCas:
		for _, v := range fpaov.values.([]*UpdateGroupMemberRequest_CAS) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateGroupMemberRequest_FieldTerminalPathArrayOfValues) AsGroupMemberArrayOfValues() ([]*group_member.GroupMember, bool) {
	res, ok := fpaov.values.([]*group_member.GroupMember)
	return res, ok
}
func (fpaov *UpdateGroupMemberRequest_FieldTerminalPathArrayOfValues) AsUpdateMaskArrayOfValues() ([]*group_member.GroupMember_FieldMask, bool) {
	res, ok := fpaov.values.([]*group_member.GroupMember_FieldMask)
	return res, ok
}
func (fpaov *UpdateGroupMemberRequest_FieldTerminalPathArrayOfValues) AsCasArrayOfValues() ([]*UpdateGroupMemberRequest_CAS, bool) {
	res, ok := fpaov.values.([]*UpdateGroupMemberRequest_CAS)
	return res, ok
}

type UpdateGroupMemberRequest_FieldSubPathArrayOfValues struct {
	UpdateGroupMemberRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateGroupMemberRequest_FieldPathArrayOfValues = (*UpdateGroupMemberRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateGroupMemberRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateGroupMemberRequest_FieldSubPathArrayOfValues) AsGroupMemberPathArrayOfValues() (group_member.GroupMember_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(group_member.GroupMember_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *UpdateGroupMemberRequest_FieldSubPathArrayOfValues) AsCasPathArrayOfValues() (UpdateGroupMemberRequestCAS_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(UpdateGroupMemberRequestCAS_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateGroupMemberRequestCAS_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateGroupMemberRequestCAS_FieldPathSelector
	Get(source *UpdateGroupMemberRequest_CAS) []interface{}
	GetSingle(source *UpdateGroupMemberRequest_CAS) (interface{}, bool)
	ClearValue(item *UpdateGroupMemberRequest_CAS)

	// Those methods build corresponding UpdateGroupMemberRequestCAS_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateGroupMemberRequestCAS_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateGroupMemberRequestCAS_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateGroupMemberRequestCAS_FieldPathArrayItemValue
}

type UpdateGroupMemberRequestCAS_FieldPathSelector int32

const (
	UpdateGroupMemberRequestCAS_FieldPathSelectorConditionalState UpdateGroupMemberRequestCAS_FieldPathSelector = 0
	UpdateGroupMemberRequestCAS_FieldPathSelectorFieldMask        UpdateGroupMemberRequestCAS_FieldPathSelector = 1
)

func (s UpdateGroupMemberRequestCAS_FieldPathSelector) String() string {
	switch s {
	case UpdateGroupMemberRequestCAS_FieldPathSelectorConditionalState:
		return "conditional_state"
	case UpdateGroupMemberRequestCAS_FieldPathSelectorFieldMask:
		return "field_mask"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateGroupMemberRequest_CAS: %d", s))
	}
}

func BuildUpdateGroupMemberRequestCAS_FieldPath(fp gotenobject.RawFieldPath) (UpdateGroupMemberRequestCAS_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateGroupMemberRequest_CAS")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			return &UpdateGroupMemberRequestCAS_FieldTerminalPath{selector: UpdateGroupMemberRequestCAS_FieldPathSelectorConditionalState}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &UpdateGroupMemberRequestCAS_FieldTerminalPath{selector: UpdateGroupMemberRequestCAS_FieldPathSelectorFieldMask}, nil
		}
	} else {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			if subpath, err := group_member.BuildGroupMember_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateGroupMemberRequestCAS_FieldSubPath{selector: UpdateGroupMemberRequestCAS_FieldPathSelectorConditionalState, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateGroupMemberRequest_CAS", fp)
}

func ParseUpdateGroupMemberRequestCAS_FieldPath(rawField string) (UpdateGroupMemberRequestCAS_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateGroupMemberRequestCAS_FieldPath(fp)
}

func MustParseUpdateGroupMemberRequestCAS_FieldPath(rawField string) UpdateGroupMemberRequestCAS_FieldPath {
	fp, err := ParseUpdateGroupMemberRequestCAS_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateGroupMemberRequestCAS_FieldTerminalPath struct {
	selector UpdateGroupMemberRequestCAS_FieldPathSelector
}

var _ UpdateGroupMemberRequestCAS_FieldPath = (*UpdateGroupMemberRequestCAS_FieldTerminalPath)(nil)

func (fp *UpdateGroupMemberRequestCAS_FieldTerminalPath) Selector() UpdateGroupMemberRequestCAS_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateGroupMemberRequestCAS_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateGroupMemberRequestCAS_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateGroupMemberRequest_CAS
func (fp *UpdateGroupMemberRequestCAS_FieldTerminalPath) Get(source *UpdateGroupMemberRequest_CAS) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateGroupMemberRequestCAS_FieldPathSelectorConditionalState:
			if source.ConditionalState != nil {
				values = append(values, source.ConditionalState)
			}
		case UpdateGroupMemberRequestCAS_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateGroupMemberRequest_CAS: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateGroupMemberRequestCAS_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateGroupMemberRequest_CAS))
}

// GetSingle returns value pointed by specific field of from source UpdateGroupMemberRequest_CAS
func (fp *UpdateGroupMemberRequestCAS_FieldTerminalPath) GetSingle(source *UpdateGroupMemberRequest_CAS) (interface{}, bool) {
	switch fp.selector {
	case UpdateGroupMemberRequestCAS_FieldPathSelectorConditionalState:
		res := source.GetConditionalState()
		return res, res != nil
	case UpdateGroupMemberRequestCAS_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateGroupMemberRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateGroupMemberRequestCAS_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateGroupMemberRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fp *UpdateGroupMemberRequestCAS_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateGroupMemberRequestCAS_FieldPathSelectorConditionalState:
		return (*group_member.GroupMember)(nil)
	case UpdateGroupMemberRequestCAS_FieldPathSelectorFieldMask:
		return (*group_member.GroupMember_FieldMask)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateGroupMemberRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateGroupMemberRequestCAS_FieldTerminalPath) ClearValue(item *UpdateGroupMemberRequest_CAS) {
	if item != nil {
		switch fp.selector {
		case UpdateGroupMemberRequestCAS_FieldPathSelectorConditionalState:
			item.ConditionalState = nil
		case UpdateGroupMemberRequestCAS_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateGroupMemberRequest_CAS: %d", fp.selector))
		}
	}
}

func (fp *UpdateGroupMemberRequestCAS_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateGroupMemberRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateGroupMemberRequestCAS_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateGroupMemberRequestCAS_FieldPathSelectorFieldMask
}

func (fp *UpdateGroupMemberRequestCAS_FieldTerminalPath) WithIValue(value interface{}) UpdateGroupMemberRequestCAS_FieldPathValue {
	switch fp.selector {
	case UpdateGroupMemberRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateGroupMemberRequestCAS_FieldTerminalPathValue{UpdateGroupMemberRequestCAS_FieldTerminalPath: *fp, value: value.(*group_member.GroupMember)}
	case UpdateGroupMemberRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateGroupMemberRequestCAS_FieldTerminalPathValue{UpdateGroupMemberRequestCAS_FieldTerminalPath: *fp, value: value.(*group_member.GroupMember_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateGroupMemberRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateGroupMemberRequestCAS_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateGroupMemberRequestCAS_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateGroupMemberRequestCAS_FieldPathArrayOfValues {
	fpaov := &UpdateGroupMemberRequestCAS_FieldTerminalPathArrayOfValues{UpdateGroupMemberRequestCAS_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateGroupMemberRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateGroupMemberRequestCAS_FieldTerminalPathArrayOfValues{UpdateGroupMemberRequestCAS_FieldTerminalPath: *fp, values: values.([]*group_member.GroupMember)}
	case UpdateGroupMemberRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateGroupMemberRequestCAS_FieldTerminalPathArrayOfValues{UpdateGroupMemberRequestCAS_FieldTerminalPath: *fp, values: values.([]*group_member.GroupMember_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateGroupMemberRequest_CAS: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateGroupMemberRequestCAS_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateGroupMemberRequestCAS_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateGroupMemberRequestCAS_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateGroupMemberRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateGroupMemberRequestCAS_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateGroupMemberRequestCAS_FieldSubPath struct {
	selector UpdateGroupMemberRequestCAS_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateGroupMemberRequestCAS_FieldPath = (*UpdateGroupMemberRequestCAS_FieldSubPath)(nil)

func (fps *UpdateGroupMemberRequestCAS_FieldSubPath) Selector() UpdateGroupMemberRequestCAS_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateGroupMemberRequestCAS_FieldSubPath) AsConditionalStateSubPath() (group_member.GroupMember_FieldPath, bool) {
	res, ok := fps.subPath.(group_member.GroupMember_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateGroupMemberRequestCAS_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateGroupMemberRequestCAS_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateGroupMemberRequest_CAS
func (fps *UpdateGroupMemberRequestCAS_FieldSubPath) Get(source *UpdateGroupMemberRequest_CAS) (values []interface{}) {
	if asGroupMemberFieldPath, ok := fps.AsConditionalStateSubPath(); ok {
		values = append(values, asGroupMemberFieldPath.Get(source.GetConditionalState())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for UpdateGroupMemberRequest_CAS: %d", fps.selector))
	}
	return
}

func (fps *UpdateGroupMemberRequestCAS_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateGroupMemberRequest_CAS))
}

// GetSingle returns value of selected field from source UpdateGroupMemberRequest_CAS
func (fps *UpdateGroupMemberRequestCAS_FieldSubPath) GetSingle(source *UpdateGroupMemberRequest_CAS) (interface{}, bool) {
	switch fps.selector {
	case UpdateGroupMemberRequestCAS_FieldPathSelectorConditionalState:
		if source.GetConditionalState() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateGroupMemberRequest_CAS: %d", fps.selector))
	}
}

func (fps *UpdateGroupMemberRequestCAS_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateGroupMemberRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fps *UpdateGroupMemberRequestCAS_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateGroupMemberRequestCAS_FieldSubPath) ClearValue(item *UpdateGroupMemberRequest_CAS) {
	if item != nil {
		switch fps.selector {
		case UpdateGroupMemberRequestCAS_FieldPathSelectorConditionalState:
			fps.subPath.ClearValueRaw(item.ConditionalState)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateGroupMemberRequest_CAS: %d", fps.selector))
		}
	}
}

func (fps *UpdateGroupMemberRequestCAS_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateGroupMemberRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateGroupMemberRequestCAS_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateGroupMemberRequestCAS_FieldSubPath) WithIValue(value interface{}) UpdateGroupMemberRequestCAS_FieldPathValue {
	return &UpdateGroupMemberRequestCAS_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateGroupMemberRequestCAS_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateGroupMemberRequestCAS_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateGroupMemberRequestCAS_FieldPathArrayOfValues {
	return &UpdateGroupMemberRequestCAS_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateGroupMemberRequestCAS_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateGroupMemberRequestCAS_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateGroupMemberRequestCAS_FieldPathArrayItemValue {
	return &UpdateGroupMemberRequestCAS_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateGroupMemberRequestCAS_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateGroupMemberRequestCAS_FieldPathValue allows storing values for CAS fields according to their type
type UpdateGroupMemberRequestCAS_FieldPathValue interface {
	UpdateGroupMemberRequestCAS_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateGroupMemberRequest_CAS)
	CompareWith(*UpdateGroupMemberRequest_CAS) (cmp int, comparable bool)
}

func ParseUpdateGroupMemberRequestCAS_FieldPathValue(pathStr, valueStr string) (UpdateGroupMemberRequestCAS_FieldPathValue, error) {
	fp, err := ParseUpdateGroupMemberRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateGroupMemberRequestCAS_FieldPathValue), nil
}

func MustParseUpdateGroupMemberRequestCAS_FieldPathValue(pathStr, valueStr string) UpdateGroupMemberRequestCAS_FieldPathValue {
	fpv, err := ParseUpdateGroupMemberRequestCAS_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateGroupMemberRequestCAS_FieldTerminalPathValue struct {
	UpdateGroupMemberRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateGroupMemberRequestCAS_FieldPathValue = (*UpdateGroupMemberRequestCAS_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CAS' as interface{}
func (fpv *UpdateGroupMemberRequestCAS_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateGroupMemberRequestCAS_FieldTerminalPathValue) AsConditionalStateValue() (*group_member.GroupMember, bool) {
	res, ok := fpv.value.(*group_member.GroupMember)
	return res, ok
}
func (fpv *UpdateGroupMemberRequestCAS_FieldTerminalPathValue) AsFieldMaskValue() (*group_member.GroupMember_FieldMask, bool) {
	res, ok := fpv.value.(*group_member.GroupMember_FieldMask)
	return res, ok
}

// SetTo stores value for selected field for object CAS
func (fpv *UpdateGroupMemberRequestCAS_FieldTerminalPathValue) SetTo(target **UpdateGroupMemberRequest_CAS) {
	if *target == nil {
		*target = new(UpdateGroupMemberRequest_CAS)
	}
	switch fpv.selector {
	case UpdateGroupMemberRequestCAS_FieldPathSelectorConditionalState:
		(*target).ConditionalState = fpv.value.(*group_member.GroupMember)
	case UpdateGroupMemberRequestCAS_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*group_member.GroupMember_FieldMask)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateGroupMemberRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateGroupMemberRequestCAS_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateGroupMemberRequest_CAS)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateGroupMemberRequestCAS_FieldTerminalPathValue' with the value under path in 'UpdateGroupMemberRequest_CAS'.
func (fpv *UpdateGroupMemberRequestCAS_FieldTerminalPathValue) CompareWith(source *UpdateGroupMemberRequest_CAS) (int, bool) {
	switch fpv.selector {
	case UpdateGroupMemberRequestCAS_FieldPathSelectorConditionalState:
		return 0, false
	case UpdateGroupMemberRequestCAS_FieldPathSelectorFieldMask:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateGroupMemberRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateGroupMemberRequestCAS_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateGroupMemberRequest_CAS))
}

type UpdateGroupMemberRequestCAS_FieldSubPathValue struct {
	UpdateGroupMemberRequestCAS_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateGroupMemberRequestCAS_FieldPathValue = (*UpdateGroupMemberRequestCAS_FieldSubPathValue)(nil)

func (fpvs *UpdateGroupMemberRequestCAS_FieldSubPathValue) AsConditionalStatePathValue() (group_member.GroupMember_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(group_member.GroupMember_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateGroupMemberRequestCAS_FieldSubPathValue) SetTo(target **UpdateGroupMemberRequest_CAS) {
	if *target == nil {
		*target = new(UpdateGroupMemberRequest_CAS)
	}
	switch fpvs.Selector() {
	case UpdateGroupMemberRequestCAS_FieldPathSelectorConditionalState:
		fpvs.subPathValue.(group_member.GroupMember_FieldPathValue).SetTo(&(*target).ConditionalState)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateGroupMemberRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateGroupMemberRequestCAS_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateGroupMemberRequest_CAS)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateGroupMemberRequestCAS_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateGroupMemberRequestCAS_FieldSubPathValue) CompareWith(source *UpdateGroupMemberRequest_CAS) (int, bool) {
	switch fpvs.Selector() {
	case UpdateGroupMemberRequestCAS_FieldPathSelectorConditionalState:
		return fpvs.subPathValue.(group_member.GroupMember_FieldPathValue).CompareWith(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateGroupMemberRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateGroupMemberRequestCAS_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateGroupMemberRequest_CAS))
}

// UpdateGroupMemberRequestCAS_FieldPathArrayItemValue allows storing single item in Path-specific values for CAS according to their type
// Present only for array (repeated) types.
type UpdateGroupMemberRequestCAS_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateGroupMemberRequestCAS_FieldPath
	ContainsValue(*UpdateGroupMemberRequest_CAS) bool
}

// ParseUpdateGroupMemberRequestCAS_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateGroupMemberRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateGroupMemberRequestCAS_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateGroupMemberRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateGroupMemberRequestCAS_FieldPathArrayItemValue), nil
}

func MustParseUpdateGroupMemberRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) UpdateGroupMemberRequestCAS_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateGroupMemberRequestCAS_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateGroupMemberRequestCAS_FieldTerminalPathArrayItemValue struct {
	UpdateGroupMemberRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateGroupMemberRequestCAS_FieldPathArrayItemValue = (*UpdateGroupMemberRequestCAS_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateGroupMemberRequest_CAS as interface{}
func (fpaiv *UpdateGroupMemberRequestCAS_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateGroupMemberRequestCAS_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateGroupMemberRequest_CAS) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateGroupMemberRequestCAS_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateGroupMemberRequest_CAS))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaiv *UpdateGroupMemberRequestCAS_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateGroupMemberRequest_CAS) bool {
	slice := fpaiv.UpdateGroupMemberRequestCAS_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateGroupMemberRequestCAS_FieldSubPathArrayItemValue struct {
	UpdateGroupMemberRequestCAS_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateGroupMemberRequestCAS_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateGroupMemberRequestCAS_FieldSubPathArrayItemValue) AsConditionalStatePathItemValue() (group_member.GroupMember_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(group_member.GroupMember_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaivs *UpdateGroupMemberRequestCAS_FieldSubPathArrayItemValue) ContainsValue(source *UpdateGroupMemberRequest_CAS) bool {
	switch fpaivs.Selector() {
	case UpdateGroupMemberRequestCAS_FieldPathSelectorConditionalState:
		return fpaivs.subPathItemValue.(group_member.GroupMember_FieldPathArrayItemValue).ContainsValue(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateGroupMemberRequest_CAS: %d", fpaivs.Selector()))
	}
}

// UpdateGroupMemberRequestCAS_FieldPathArrayOfValues allows storing slice of values for CAS fields according to their type
type UpdateGroupMemberRequestCAS_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateGroupMemberRequestCAS_FieldPath
}

func ParseUpdateGroupMemberRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateGroupMemberRequestCAS_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateGroupMemberRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateGroupMemberRequestCAS_FieldPathArrayOfValues), nil
}

func MustParseUpdateGroupMemberRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateGroupMemberRequestCAS_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateGroupMemberRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateGroupMemberRequestCAS_FieldTerminalPathArrayOfValues struct {
	UpdateGroupMemberRequestCAS_FieldTerminalPath
	values interface{}
}

var _ UpdateGroupMemberRequestCAS_FieldPathArrayOfValues = (*UpdateGroupMemberRequestCAS_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateGroupMemberRequestCAS_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateGroupMemberRequestCAS_FieldPathSelectorConditionalState:
		for _, v := range fpaov.values.([]*group_member.GroupMember) {
			values = append(values, v)
		}
	case UpdateGroupMemberRequestCAS_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*group_member.GroupMember_FieldMask) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateGroupMemberRequestCAS_FieldTerminalPathArrayOfValues) AsConditionalStateArrayOfValues() ([]*group_member.GroupMember, bool) {
	res, ok := fpaov.values.([]*group_member.GroupMember)
	return res, ok
}
func (fpaov *UpdateGroupMemberRequestCAS_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*group_member.GroupMember_FieldMask, bool) {
	res, ok := fpaov.values.([]*group_member.GroupMember_FieldMask)
	return res, ok
}

type UpdateGroupMemberRequestCAS_FieldSubPathArrayOfValues struct {
	UpdateGroupMemberRequestCAS_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateGroupMemberRequestCAS_FieldPathArrayOfValues = (*UpdateGroupMemberRequestCAS_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateGroupMemberRequestCAS_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateGroupMemberRequestCAS_FieldSubPathArrayOfValues) AsConditionalStatePathArrayOfValues() (group_member.GroupMember_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(group_member.GroupMember_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeleteGroupMemberRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeleteGroupMemberRequest_FieldPathSelector
	Get(source *DeleteGroupMemberRequest) []interface{}
	GetSingle(source *DeleteGroupMemberRequest) (interface{}, bool)
	ClearValue(item *DeleteGroupMemberRequest)

	// Those methods build corresponding DeleteGroupMemberRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeleteGroupMemberRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) DeleteGroupMemberRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeleteGroupMemberRequest_FieldPathArrayItemValue
}

type DeleteGroupMemberRequest_FieldPathSelector int32

const (
	DeleteGroupMemberRequest_FieldPathSelectorName DeleteGroupMemberRequest_FieldPathSelector = 0
)

func (s DeleteGroupMemberRequest_FieldPathSelector) String() string {
	switch s {
	case DeleteGroupMemberRequest_FieldPathSelectorName:
		return "name"
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteGroupMemberRequest: %d", s))
	}
}

func BuildDeleteGroupMemberRequest_FieldPath(fp gotenobject.RawFieldPath) (DeleteGroupMemberRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object DeleteGroupMemberRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &DeleteGroupMemberRequest_FieldTerminalPath{selector: DeleteGroupMemberRequest_FieldPathSelectorName}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object DeleteGroupMemberRequest", fp)
}

func ParseDeleteGroupMemberRequest_FieldPath(rawField string) (DeleteGroupMemberRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeleteGroupMemberRequest_FieldPath(fp)
}

func MustParseDeleteGroupMemberRequest_FieldPath(rawField string) DeleteGroupMemberRequest_FieldPath {
	fp, err := ParseDeleteGroupMemberRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeleteGroupMemberRequest_FieldTerminalPath struct {
	selector DeleteGroupMemberRequest_FieldPathSelector
}

var _ DeleteGroupMemberRequest_FieldPath = (*DeleteGroupMemberRequest_FieldTerminalPath)(nil)

func (fp *DeleteGroupMemberRequest_FieldTerminalPath) Selector() DeleteGroupMemberRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeleteGroupMemberRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeleteGroupMemberRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source DeleteGroupMemberRequest
func (fp *DeleteGroupMemberRequest_FieldTerminalPath) Get(source *DeleteGroupMemberRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeleteGroupMemberRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteGroupMemberRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *DeleteGroupMemberRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*DeleteGroupMemberRequest))
}

// GetSingle returns value pointed by specific field of from source DeleteGroupMemberRequest
func (fp *DeleteGroupMemberRequest_FieldTerminalPath) GetSingle(source *DeleteGroupMemberRequest) (interface{}, bool) {
	switch fp.selector {
	case DeleteGroupMemberRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteGroupMemberRequest: %d", fp.selector))
	}
}

func (fp *DeleteGroupMemberRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*DeleteGroupMemberRequest))
}

// GetDefault returns a default value of the field type
func (fp *DeleteGroupMemberRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeleteGroupMemberRequest_FieldPathSelectorName:
		return (*group_member.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteGroupMemberRequest: %d", fp.selector))
	}
}

func (fp *DeleteGroupMemberRequest_FieldTerminalPath) ClearValue(item *DeleteGroupMemberRequest) {
	if item != nil {
		switch fp.selector {
		case DeleteGroupMemberRequest_FieldPathSelectorName:
			item.Name = nil
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteGroupMemberRequest: %d", fp.selector))
		}
	}
}

func (fp *DeleteGroupMemberRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*DeleteGroupMemberRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeleteGroupMemberRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeleteGroupMemberRequest_FieldPathSelectorName
}

func (fp *DeleteGroupMemberRequest_FieldTerminalPath) WithIValue(value interface{}) DeleteGroupMemberRequest_FieldPathValue {
	switch fp.selector {
	case DeleteGroupMemberRequest_FieldPathSelectorName:
		return &DeleteGroupMemberRequest_FieldTerminalPathValue{DeleteGroupMemberRequest_FieldTerminalPath: *fp, value: value.(*group_member.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteGroupMemberRequest: %d", fp.selector))
	}
}

func (fp *DeleteGroupMemberRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeleteGroupMemberRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeleteGroupMemberRequest_FieldPathArrayOfValues {
	fpaov := &DeleteGroupMemberRequest_FieldTerminalPathArrayOfValues{DeleteGroupMemberRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeleteGroupMemberRequest_FieldPathSelectorName:
		return &DeleteGroupMemberRequest_FieldTerminalPathArrayOfValues{DeleteGroupMemberRequest_FieldTerminalPath: *fp, values: values.([]*group_member.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteGroupMemberRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeleteGroupMemberRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeleteGroupMemberRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeleteGroupMemberRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteGroupMemberRequest: %d", fp.selector))
	}
}

func (fp *DeleteGroupMemberRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeleteGroupMemberRequest_FieldPathValue allows storing values for DeleteGroupMemberRequest fields according to their type
type DeleteGroupMemberRequest_FieldPathValue interface {
	DeleteGroupMemberRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **DeleteGroupMemberRequest)
	CompareWith(*DeleteGroupMemberRequest) (cmp int, comparable bool)
}

func ParseDeleteGroupMemberRequest_FieldPathValue(pathStr, valueStr string) (DeleteGroupMemberRequest_FieldPathValue, error) {
	fp, err := ParseDeleteGroupMemberRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteGroupMemberRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeleteGroupMemberRequest_FieldPathValue), nil
}

func MustParseDeleteGroupMemberRequest_FieldPathValue(pathStr, valueStr string) DeleteGroupMemberRequest_FieldPathValue {
	fpv, err := ParseDeleteGroupMemberRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeleteGroupMemberRequest_FieldTerminalPathValue struct {
	DeleteGroupMemberRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteGroupMemberRequest_FieldPathValue = (*DeleteGroupMemberRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'DeleteGroupMemberRequest' as interface{}
func (fpv *DeleteGroupMemberRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeleteGroupMemberRequest_FieldTerminalPathValue) AsNameValue() (*group_member.Reference, bool) {
	res, ok := fpv.value.(*group_member.Reference)
	return res, ok
}

// SetTo stores value for selected field for object DeleteGroupMemberRequest
func (fpv *DeleteGroupMemberRequest_FieldTerminalPathValue) SetTo(target **DeleteGroupMemberRequest) {
	if *target == nil {
		*target = new(DeleteGroupMemberRequest)
	}
	switch fpv.selector {
	case DeleteGroupMemberRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*group_member.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteGroupMemberRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteGroupMemberRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*DeleteGroupMemberRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeleteGroupMemberRequest_FieldTerminalPathValue' with the value under path in 'DeleteGroupMemberRequest'.
func (fpv *DeleteGroupMemberRequest_FieldTerminalPathValue) CompareWith(source *DeleteGroupMemberRequest) (int, bool) {
	switch fpv.selector {
	case DeleteGroupMemberRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*group_member.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteGroupMemberRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteGroupMemberRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*DeleteGroupMemberRequest))
}

// DeleteGroupMemberRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for DeleteGroupMemberRequest according to their type
// Present only for array (repeated) types.
type DeleteGroupMemberRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeleteGroupMemberRequest_FieldPath
	ContainsValue(*DeleteGroupMemberRequest) bool
}

// ParseDeleteGroupMemberRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeleteGroupMemberRequest_FieldPathArrayItemValue(pathStr, valueStr string) (DeleteGroupMemberRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseDeleteGroupMemberRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteGroupMemberRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeleteGroupMemberRequest_FieldPathArrayItemValue), nil
}

func MustParseDeleteGroupMemberRequest_FieldPathArrayItemValue(pathStr, valueStr string) DeleteGroupMemberRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseDeleteGroupMemberRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeleteGroupMemberRequest_FieldTerminalPathArrayItemValue struct {
	DeleteGroupMemberRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteGroupMemberRequest_FieldPathArrayItemValue = (*DeleteGroupMemberRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object DeleteGroupMemberRequest as interface{}
func (fpaiv *DeleteGroupMemberRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeleteGroupMemberRequest_FieldTerminalPathArrayItemValue) GetSingle(source *DeleteGroupMemberRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeleteGroupMemberRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*DeleteGroupMemberRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'DeleteGroupMemberRequest'
func (fpaiv *DeleteGroupMemberRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *DeleteGroupMemberRequest) bool {
	slice := fpaiv.DeleteGroupMemberRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeleteGroupMemberRequest_FieldPathArrayOfValues allows storing slice of values for DeleteGroupMemberRequest fields according to their type
type DeleteGroupMemberRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeleteGroupMemberRequest_FieldPath
}

func ParseDeleteGroupMemberRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (DeleteGroupMemberRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseDeleteGroupMemberRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteGroupMemberRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeleteGroupMemberRequest_FieldPathArrayOfValues), nil
}

func MustParseDeleteGroupMemberRequest_FieldPathArrayOfValues(pathStr, valuesStr string) DeleteGroupMemberRequest_FieldPathArrayOfValues {
	fpaov, err := ParseDeleteGroupMemberRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeleteGroupMemberRequest_FieldTerminalPathArrayOfValues struct {
	DeleteGroupMemberRequest_FieldTerminalPath
	values interface{}
}

var _ DeleteGroupMemberRequest_FieldPathArrayOfValues = (*DeleteGroupMemberRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeleteGroupMemberRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeleteGroupMemberRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*group_member.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeleteGroupMemberRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*group_member.Reference, bool) {
	res, ok := fpaov.values.([]*group_member.Reference)
	return res, ok
}
