// Code generated by protoc-gen-goten-object
// File: edgelq/iam/proto/v1alpha/group_member_service.proto
// DO NOT EDIT!!!

package group_member_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	group "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha/group"
	group_member "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha/group_member"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &group.Group{}
	_ = &group_member.GroupMember{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

func (o *GetGroupMemberRequest) GotenObjectExt() {}

func (o *GetGroupMemberRequest) MakeFullFieldMask() *GetGroupMemberRequest_FieldMask {
	return FullGetGroupMemberRequest_FieldMask()
}

func (o *GetGroupMemberRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullGetGroupMemberRequest_FieldMask()
}

func (o *GetGroupMemberRequest) MakeDiffFieldMask(other *GetGroupMemberRequest) *GetGroupMemberRequest_FieldMask {
	if o == nil && other == nil {
		return &GetGroupMemberRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullGetGroupMemberRequest_FieldMask()
	}

	res := &GetGroupMemberRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &GetGroupMemberRequest_FieldTerminalPath{selector: GetGroupMemberRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &GetGroupMemberRequest_FieldTerminalPath{selector: GetGroupMemberRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &GetGroupMemberRequest_FieldTerminalPath{selector: GetGroupMemberRequest_FieldPathSelectorView})
	}
	return res
}

func (o *GetGroupMemberRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*GetGroupMemberRequest))
}

func (o *GetGroupMemberRequest) Clone() *GetGroupMemberRequest {
	if o == nil {
		return nil
	}
	result := &GetGroupMemberRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &group_member.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*group_member.GroupMember_FieldMask)
	result.View = o.View
	return result
}

func (o *GetGroupMemberRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *GetGroupMemberRequest) Merge(source *GetGroupMemberRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &group_member.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(group_member.GroupMember_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *GetGroupMemberRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*GetGroupMemberRequest))
}

func (o *BatchGetGroupMembersRequest) GotenObjectExt() {}

func (o *BatchGetGroupMembersRequest) MakeFullFieldMask() *BatchGetGroupMembersRequest_FieldMask {
	return FullBatchGetGroupMembersRequest_FieldMask()
}

func (o *BatchGetGroupMembersRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetGroupMembersRequest_FieldMask()
}

func (o *BatchGetGroupMembersRequest) MakeDiffFieldMask(other *BatchGetGroupMembersRequest) *BatchGetGroupMembersRequest_FieldMask {
	if o == nil && other == nil {
		return &BatchGetGroupMembersRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetGroupMembersRequest_FieldMask()
	}

	res := &BatchGetGroupMembersRequest_FieldMask{}

	if len(o.GetNames()) == len(other.GetNames()) {
		for i, lValue := range o.GetNames() {
			rValue := other.GetNames()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetGroupMembersRequest_FieldTerminalPath{selector: BatchGetGroupMembersRequest_FieldPathSelectorNames})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetGroupMembersRequest_FieldTerminalPath{selector: BatchGetGroupMembersRequest_FieldPathSelectorNames})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &BatchGetGroupMembersRequest_FieldTerminalPath{selector: BatchGetGroupMembersRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &BatchGetGroupMembersRequest_FieldTerminalPath{selector: BatchGetGroupMembersRequest_FieldPathSelectorView})
	}
	return res
}

func (o *BatchGetGroupMembersRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetGroupMembersRequest))
}

func (o *BatchGetGroupMembersRequest) Clone() *BatchGetGroupMembersRequest {
	if o == nil {
		return nil
	}
	result := &BatchGetGroupMembersRequest{}
	result.Names = make([]*group_member.Reference, len(o.Names))
	for i, sourceValue := range o.Names {
		if sourceValue == nil {
			result.Names[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Names[i] = &group_member.Reference{}
			if err := result.Names[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*group_member.GroupMember_FieldMask)
	result.View = o.View
	return result
}

func (o *BatchGetGroupMembersRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetGroupMembersRequest) Merge(source *BatchGetGroupMembersRequest) {
	for _, sourceValue := range source.GetNames() {
		exists := false
		for _, currentValue := range o.Names {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *group_member.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &group_member.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Names = append(o.Names, newDstElement)
		}
	}

	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(group_member.GroupMember_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *BatchGetGroupMembersRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetGroupMembersRequest))
}

func (o *BatchGetGroupMembersResponse) GotenObjectExt() {}

func (o *BatchGetGroupMembersResponse) MakeFullFieldMask() *BatchGetGroupMembersResponse_FieldMask {
	return FullBatchGetGroupMembersResponse_FieldMask()
}

func (o *BatchGetGroupMembersResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetGroupMembersResponse_FieldMask()
}

func (o *BatchGetGroupMembersResponse) MakeDiffFieldMask(other *BatchGetGroupMembersResponse) *BatchGetGroupMembersResponse_FieldMask {
	if o == nil && other == nil {
		return &BatchGetGroupMembersResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetGroupMembersResponse_FieldMask()
	}

	res := &BatchGetGroupMembersResponse_FieldMask{}

	if len(o.GetGroupMembers()) == len(other.GetGroupMembers()) {
		for i, lValue := range o.GetGroupMembers() {
			rValue := other.GetGroupMembers()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &BatchGetGroupMembersResponse_FieldTerminalPath{selector: BatchGetGroupMembersResponse_FieldPathSelectorGroupMembers})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetGroupMembersResponse_FieldTerminalPath{selector: BatchGetGroupMembersResponse_FieldPathSelectorGroupMembers})
	}

	if len(o.GetMissing()) == len(other.GetMissing()) {
		for i, lValue := range o.GetMissing() {
			rValue := other.GetMissing()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetGroupMembersResponse_FieldTerminalPath{selector: BatchGetGroupMembersResponse_FieldPathSelectorMissing})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetGroupMembersResponse_FieldTerminalPath{selector: BatchGetGroupMembersResponse_FieldPathSelectorMissing})
	}
	return res
}

func (o *BatchGetGroupMembersResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetGroupMembersResponse))
}

func (o *BatchGetGroupMembersResponse) Clone() *BatchGetGroupMembersResponse {
	if o == nil {
		return nil
	}
	result := &BatchGetGroupMembersResponse{}
	result.GroupMembers = make([]*group_member.GroupMember, len(o.GroupMembers))
	for i, sourceValue := range o.GroupMembers {
		result.GroupMembers[i] = sourceValue.Clone()
	}
	result.Missing = make([]*group_member.Reference, len(o.Missing))
	for i, sourceValue := range o.Missing {
		if sourceValue == nil {
			result.Missing[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Missing[i] = &group_member.Reference{}
			if err := result.Missing[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	return result
}

func (o *BatchGetGroupMembersResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetGroupMembersResponse) Merge(source *BatchGetGroupMembersResponse) {
	for _, sourceValue := range source.GetGroupMembers() {
		exists := false
		for _, currentValue := range o.GroupMembers {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *group_member.GroupMember
			if sourceValue != nil {
				newDstElement = new(group_member.GroupMember)
				newDstElement.Merge(sourceValue)
			}
			o.GroupMembers = append(o.GroupMembers, newDstElement)
		}
	}

	for _, sourceValue := range source.GetMissing() {
		exists := false
		for _, currentValue := range o.Missing {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *group_member.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &group_member.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Missing = append(o.Missing, newDstElement)
		}
	}

}

func (o *BatchGetGroupMembersResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetGroupMembersResponse))
}

func (o *ListGroupMembersRequest) GotenObjectExt() {}

func (o *ListGroupMembersRequest) MakeFullFieldMask() *ListGroupMembersRequest_FieldMask {
	return FullListGroupMembersRequest_FieldMask()
}

func (o *ListGroupMembersRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListGroupMembersRequest_FieldMask()
}

func (o *ListGroupMembersRequest) MakeDiffFieldMask(other *ListGroupMembersRequest) *ListGroupMembersRequest_FieldMask {
	if o == nil && other == nil {
		return &ListGroupMembersRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListGroupMembersRequest_FieldMask()
	}

	res := &ListGroupMembersRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &ListGroupMembersRequest_FieldTerminalPath{selector: ListGroupMembersRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &ListGroupMembersRequest_FieldTerminalPath{selector: ListGroupMembersRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &ListGroupMembersRequest_FieldTerminalPath{selector: ListGroupMembersRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &ListGroupMembersRequest_FieldTerminalPath{selector: ListGroupMembersRequest_FieldPathSelectorOrderBy})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &ListGroupMembersRequest_FieldTerminalPath{selector: ListGroupMembersRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &ListGroupMembersRequest_FieldTerminalPath{selector: ListGroupMembersRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &ListGroupMembersRequest_FieldTerminalPath{selector: ListGroupMembersRequest_FieldPathSelectorView})
	}
	if o.GetIncludePagingInfo() != other.GetIncludePagingInfo() {
		res.Paths = append(res.Paths, &ListGroupMembersRequest_FieldTerminalPath{selector: ListGroupMembersRequest_FieldPathSelectorIncludePagingInfo})
	}
	return res
}

func (o *ListGroupMembersRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListGroupMembersRequest))
}

func (o *ListGroupMembersRequest) Clone() *ListGroupMembersRequest {
	if o == nil {
		return nil
	}
	result := &ListGroupMembersRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &group_member.ParentName{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &group_member.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &group_member.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &group_member.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*group_member.GroupMember_FieldMask)
	result.View = o.View
	result.IncludePagingInfo = o.IncludePagingInfo
	return result
}

func (o *ListGroupMembersRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListGroupMembersRequest) Merge(source *ListGroupMembersRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &group_member.ParentName{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &group_member.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &group_member.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &group_member.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(group_member.GroupMember_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.IncludePagingInfo = source.GetIncludePagingInfo()
}

func (o *ListGroupMembersRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListGroupMembersRequest))
}

func (o *ListGroupMembersResponse) GotenObjectExt() {}

func (o *ListGroupMembersResponse) MakeFullFieldMask() *ListGroupMembersResponse_FieldMask {
	return FullListGroupMembersResponse_FieldMask()
}

func (o *ListGroupMembersResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListGroupMembersResponse_FieldMask()
}

func (o *ListGroupMembersResponse) MakeDiffFieldMask(other *ListGroupMembersResponse) *ListGroupMembersResponse_FieldMask {
	if o == nil && other == nil {
		return &ListGroupMembersResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListGroupMembersResponse_FieldMask()
	}

	res := &ListGroupMembersResponse_FieldMask{}

	if len(o.GetGroupMembers()) == len(other.GetGroupMembers()) {
		for i, lValue := range o.GetGroupMembers() {
			rValue := other.GetGroupMembers()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &ListGroupMembersResponse_FieldTerminalPath{selector: ListGroupMembersResponse_FieldPathSelectorGroupMembers})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ListGroupMembersResponse_FieldTerminalPath{selector: ListGroupMembersResponse_FieldPathSelectorGroupMembers})
	}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &ListGroupMembersResponse_FieldTerminalPath{selector: ListGroupMembersResponse_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &ListGroupMembersResponse_FieldTerminalPath{selector: ListGroupMembersResponse_FieldPathSelectorNextPageToken})
	}
	if o.GetCurrentOffset() != other.GetCurrentOffset() {
		res.Paths = append(res.Paths, &ListGroupMembersResponse_FieldTerminalPath{selector: ListGroupMembersResponse_FieldPathSelectorCurrentOffset})
	}
	if o.GetTotalResultsCount() != other.GetTotalResultsCount() {
		res.Paths = append(res.Paths, &ListGroupMembersResponse_FieldTerminalPath{selector: ListGroupMembersResponse_FieldPathSelectorTotalResultsCount})
	}
	return res
}

func (o *ListGroupMembersResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListGroupMembersResponse))
}

func (o *ListGroupMembersResponse) Clone() *ListGroupMembersResponse {
	if o == nil {
		return nil
	}
	result := &ListGroupMembersResponse{}
	result.GroupMembers = make([]*group_member.GroupMember, len(o.GroupMembers))
	for i, sourceValue := range o.GroupMembers {
		result.GroupMembers[i] = sourceValue.Clone()
	}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &group_member.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &group_member.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.CurrentOffset = o.CurrentOffset
	result.TotalResultsCount = o.TotalResultsCount
	return result
}

func (o *ListGroupMembersResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListGroupMembersResponse) Merge(source *ListGroupMembersResponse) {
	for _, sourceValue := range source.GetGroupMembers() {
		exists := false
		for _, currentValue := range o.GroupMembers {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *group_member.GroupMember
			if sourceValue != nil {
				newDstElement = new(group_member.GroupMember)
				newDstElement.Merge(sourceValue)
			}
			o.GroupMembers = append(o.GroupMembers, newDstElement)
		}
	}

	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &group_member.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &group_member.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
	o.CurrentOffset = source.GetCurrentOffset()
	o.TotalResultsCount = source.GetTotalResultsCount()
}

func (o *ListGroupMembersResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListGroupMembersResponse))
}

func (o *WatchGroupMemberRequest) GotenObjectExt() {}

func (o *WatchGroupMemberRequest) MakeFullFieldMask() *WatchGroupMemberRequest_FieldMask {
	return FullWatchGroupMemberRequest_FieldMask()
}

func (o *WatchGroupMemberRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchGroupMemberRequest_FieldMask()
}

func (o *WatchGroupMemberRequest) MakeDiffFieldMask(other *WatchGroupMemberRequest) *WatchGroupMemberRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchGroupMemberRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchGroupMemberRequest_FieldMask()
	}

	res := &WatchGroupMemberRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &WatchGroupMemberRequest_FieldTerminalPath{selector: WatchGroupMemberRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchGroupMemberRequest_FieldTerminalPath{selector: WatchGroupMemberRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchGroupMemberRequest_FieldTerminalPath{selector: WatchGroupMemberRequest_FieldPathSelectorView})
	}
	return res
}

func (o *WatchGroupMemberRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchGroupMemberRequest))
}

func (o *WatchGroupMemberRequest) Clone() *WatchGroupMemberRequest {
	if o == nil {
		return nil
	}
	result := &WatchGroupMemberRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &group_member.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*group_member.GroupMember_FieldMask)
	result.View = o.View
	return result
}

func (o *WatchGroupMemberRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchGroupMemberRequest) Merge(source *WatchGroupMemberRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &group_member.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(group_member.GroupMember_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *WatchGroupMemberRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchGroupMemberRequest))
}

func (o *WatchGroupMemberResponse) GotenObjectExt() {}

func (o *WatchGroupMemberResponse) MakeFullFieldMask() *WatchGroupMemberResponse_FieldMask {
	return FullWatchGroupMemberResponse_FieldMask()
}

func (o *WatchGroupMemberResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchGroupMemberResponse_FieldMask()
}

func (o *WatchGroupMemberResponse) MakeDiffFieldMask(other *WatchGroupMemberResponse) *WatchGroupMemberResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchGroupMemberResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchGroupMemberResponse_FieldMask()
	}

	res := &WatchGroupMemberResponse_FieldMask{}
	if !proto.Equal(o.GetChange(), other.GetChange()) {
		res.Paths = append(res.Paths, &WatchGroupMemberResponse_FieldTerminalPath{selector: WatchGroupMemberResponse_FieldPathSelectorChange})
	}
	return res
}

func (o *WatchGroupMemberResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchGroupMemberResponse))
}

func (o *WatchGroupMemberResponse) Clone() *WatchGroupMemberResponse {
	if o == nil {
		return nil
	}
	result := &WatchGroupMemberResponse{}
	result.Change = proto.Clone(o.Change).(*group_member.GroupMemberChange)
	return result
}

func (o *WatchGroupMemberResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchGroupMemberResponse) Merge(source *WatchGroupMemberResponse) {
	if source.GetChange() != nil {
		if o.Change == nil {
			o.Change = new(group_member.GroupMemberChange)
		}
		proto.Merge(o.Change, source.GetChange())
	}
}

func (o *WatchGroupMemberResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchGroupMemberResponse))
}

func (o *WatchGroupMembersRequest) GotenObjectExt() {}

func (o *WatchGroupMembersRequest) MakeFullFieldMask() *WatchGroupMembersRequest_FieldMask {
	return FullWatchGroupMembersRequest_FieldMask()
}

func (o *WatchGroupMembersRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchGroupMembersRequest_FieldMask()
}

func (o *WatchGroupMembersRequest) MakeDiffFieldMask(other *WatchGroupMembersRequest) *WatchGroupMembersRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchGroupMembersRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchGroupMembersRequest_FieldMask()
	}

	res := &WatchGroupMembersRequest_FieldMask{}
	if o.GetType() != other.GetType() {
		res.Paths = append(res.Paths, &WatchGroupMembersRequest_FieldTerminalPath{selector: WatchGroupMembersRequest_FieldPathSelectorType})
	}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &WatchGroupMembersRequest_FieldTerminalPath{selector: WatchGroupMembersRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &WatchGroupMembersRequest_FieldTerminalPath{selector: WatchGroupMembersRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &WatchGroupMembersRequest_FieldTerminalPath{selector: WatchGroupMembersRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &WatchGroupMembersRequest_FieldTerminalPath{selector: WatchGroupMembersRequest_FieldPathSelectorOrderBy})
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchGroupMembersRequest_FieldTerminalPath{selector: WatchGroupMembersRequest_FieldPathSelectorResumeToken})
	}
	if !proto.Equal(o.GetStartingTime(), other.GetStartingTime()) {
		res.Paths = append(res.Paths, &WatchGroupMembersRequest_FieldTerminalPath{selector: WatchGroupMembersRequest_FieldPathSelectorStartingTime})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &WatchGroupMembersRequest_FieldTerminalPath{selector: WatchGroupMembersRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchGroupMembersRequest_FieldTerminalPath{selector: WatchGroupMembersRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchGroupMembersRequest_FieldTerminalPath{selector: WatchGroupMembersRequest_FieldPathSelectorView})
	}
	if o.GetMaxChunkSize() != other.GetMaxChunkSize() {
		res.Paths = append(res.Paths, &WatchGroupMembersRequest_FieldTerminalPath{selector: WatchGroupMembersRequest_FieldPathSelectorMaxChunkSize})
	}
	return res
}

func (o *WatchGroupMembersRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchGroupMembersRequest))
}

func (o *WatchGroupMembersRequest) Clone() *WatchGroupMembersRequest {
	if o == nil {
		return nil
	}
	result := &WatchGroupMembersRequest{}
	result.Type = o.Type
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &group_member.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &group_member.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &group_member.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.ResumeToken = o.ResumeToken
	result.StartingTime = proto.Clone(o.StartingTime).(*timestamp.Timestamp)
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &group_member.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*group_member.GroupMember_FieldMask)
	result.View = o.View
	result.MaxChunkSize = o.MaxChunkSize
	return result
}

func (o *WatchGroupMembersRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchGroupMembersRequest) Merge(source *WatchGroupMembersRequest) {
	o.Type = source.GetType()
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &group_member.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &group_member.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &group_member.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	o.ResumeToken = source.GetResumeToken()
	if source.GetStartingTime() != nil {
		if o.StartingTime == nil {
			o.StartingTime = new(timestamp.Timestamp)
		}
		proto.Merge(o.StartingTime, source.GetStartingTime())
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &group_member.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(group_member.GroupMember_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.MaxChunkSize = source.GetMaxChunkSize()
}

func (o *WatchGroupMembersRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchGroupMembersRequest))
}

func (o *WatchGroupMembersResponse) GotenObjectExt() {}

func (o *WatchGroupMembersResponse) MakeFullFieldMask() *WatchGroupMembersResponse_FieldMask {
	return FullWatchGroupMembersResponse_FieldMask()
}

func (o *WatchGroupMembersResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchGroupMembersResponse_FieldMask()
}

func (o *WatchGroupMembersResponse) MakeDiffFieldMask(other *WatchGroupMembersResponse) *WatchGroupMembersResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchGroupMembersResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchGroupMembersResponse_FieldMask()
	}

	res := &WatchGroupMembersResponse_FieldMask{}

	if len(o.GetGroupMemberChanges()) == len(other.GetGroupMemberChanges()) {
		for i, lValue := range o.GetGroupMemberChanges() {
			rValue := other.GetGroupMemberChanges()[i]
			if !proto.Equal(lValue, rValue) {
				res.Paths = append(res.Paths, &WatchGroupMembersResponse_FieldTerminalPath{selector: WatchGroupMembersResponse_FieldPathSelectorGroupMemberChanges})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &WatchGroupMembersResponse_FieldTerminalPath{selector: WatchGroupMembersResponse_FieldPathSelectorGroupMemberChanges})
	}
	if o.GetIsCurrent() != other.GetIsCurrent() {
		res.Paths = append(res.Paths, &WatchGroupMembersResponse_FieldTerminalPath{selector: WatchGroupMembersResponse_FieldPathSelectorIsCurrent})
	}
	{
		subMask := o.GetPageTokenChange().MakeDiffFieldMask(other.GetPageTokenChange())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &WatchGroupMembersResponse_FieldTerminalPath{selector: WatchGroupMembersResponse_FieldPathSelectorPageTokenChange})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &WatchGroupMembersResponse_FieldSubPath{selector: WatchGroupMembersResponse_FieldPathSelectorPageTokenChange, subPath: subpath})
			}
		}
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchGroupMembersResponse_FieldTerminalPath{selector: WatchGroupMembersResponse_FieldPathSelectorResumeToken})
	}
	if o.GetSnapshotSize() != other.GetSnapshotSize() {
		res.Paths = append(res.Paths, &WatchGroupMembersResponse_FieldTerminalPath{selector: WatchGroupMembersResponse_FieldPathSelectorSnapshotSize})
	}
	if o.GetIsSoftReset() != other.GetIsSoftReset() {
		res.Paths = append(res.Paths, &WatchGroupMembersResponse_FieldTerminalPath{selector: WatchGroupMembersResponse_FieldPathSelectorIsSoftReset})
	}
	if o.GetIsHardReset() != other.GetIsHardReset() {
		res.Paths = append(res.Paths, &WatchGroupMembersResponse_FieldTerminalPath{selector: WatchGroupMembersResponse_FieldPathSelectorIsHardReset})
	}
	return res
}

func (o *WatchGroupMembersResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchGroupMembersResponse))
}

func (o *WatchGroupMembersResponse) Clone() *WatchGroupMembersResponse {
	if o == nil {
		return nil
	}
	result := &WatchGroupMembersResponse{}
	result.GroupMemberChanges = make([]*group_member.GroupMemberChange, len(o.GroupMemberChanges))
	for i, sourceValue := range o.GroupMemberChanges {
		result.GroupMemberChanges[i] = proto.Clone(sourceValue).(*group_member.GroupMemberChange)
	}
	result.IsCurrent = o.IsCurrent
	result.PageTokenChange = o.PageTokenChange.Clone()
	result.ResumeToken = o.ResumeToken
	result.SnapshotSize = o.SnapshotSize
	result.IsSoftReset = o.IsSoftReset
	result.IsHardReset = o.IsHardReset
	return result
}

func (o *WatchGroupMembersResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchGroupMembersResponse) Merge(source *WatchGroupMembersResponse) {
	for _, sourceValue := range source.GetGroupMemberChanges() {
		exists := false
		for _, currentValue := range o.GroupMemberChanges {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *group_member.GroupMemberChange
			if sourceValue != nil {
				newDstElement = new(group_member.GroupMemberChange)
				proto.Merge(newDstElement, sourceValue)
			}
			o.GroupMemberChanges = append(o.GroupMemberChanges, newDstElement)
		}
	}

	o.IsCurrent = source.GetIsCurrent()
	if source.GetPageTokenChange() != nil {
		if o.PageTokenChange == nil {
			o.PageTokenChange = new(WatchGroupMembersResponse_PageTokenChange)
		}
		o.PageTokenChange.Merge(source.GetPageTokenChange())
	}
	o.ResumeToken = source.GetResumeToken()
	o.SnapshotSize = source.GetSnapshotSize()
	o.IsSoftReset = source.GetIsSoftReset()
	o.IsHardReset = source.GetIsHardReset()
}

func (o *WatchGroupMembersResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchGroupMembersResponse))
}

func (o *WatchGroupMembersResponse_PageTokenChange) GotenObjectExt() {}

func (o *WatchGroupMembersResponse_PageTokenChange) MakeFullFieldMask() *WatchGroupMembersResponse_PageTokenChange_FieldMask {
	return FullWatchGroupMembersResponse_PageTokenChange_FieldMask()
}

func (o *WatchGroupMembersResponse_PageTokenChange) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchGroupMembersResponse_PageTokenChange_FieldMask()
}

func (o *WatchGroupMembersResponse_PageTokenChange) MakeDiffFieldMask(other *WatchGroupMembersResponse_PageTokenChange) *WatchGroupMembersResponse_PageTokenChange_FieldMask {
	if o == nil && other == nil {
		return &WatchGroupMembersResponse_PageTokenChange_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchGroupMembersResponse_PageTokenChange_FieldMask()
	}

	res := &WatchGroupMembersResponse_PageTokenChange_FieldMask{}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &WatchGroupMembersResponsePageTokenChange_FieldTerminalPath{selector: WatchGroupMembersResponsePageTokenChange_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &WatchGroupMembersResponsePageTokenChange_FieldTerminalPath{selector: WatchGroupMembersResponsePageTokenChange_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *WatchGroupMembersResponse_PageTokenChange) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchGroupMembersResponse_PageTokenChange))
}

func (o *WatchGroupMembersResponse_PageTokenChange) Clone() *WatchGroupMembersResponse_PageTokenChange {
	if o == nil {
		return nil
	}
	result := &WatchGroupMembersResponse_PageTokenChange{}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &group_member.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &group_member.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *WatchGroupMembersResponse_PageTokenChange) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchGroupMembersResponse_PageTokenChange) Merge(source *WatchGroupMembersResponse_PageTokenChange) {
	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &group_member.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &group_member.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *WatchGroupMembersResponse_PageTokenChange) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchGroupMembersResponse_PageTokenChange))
}

func (o *CreateGroupMemberRequest) GotenObjectExt() {}

func (o *CreateGroupMemberRequest) MakeFullFieldMask() *CreateGroupMemberRequest_FieldMask {
	return FullCreateGroupMemberRequest_FieldMask()
}

func (o *CreateGroupMemberRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullCreateGroupMemberRequest_FieldMask()
}

func (o *CreateGroupMemberRequest) MakeDiffFieldMask(other *CreateGroupMemberRequest) *CreateGroupMemberRequest_FieldMask {
	if o == nil && other == nil {
		return &CreateGroupMemberRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullCreateGroupMemberRequest_FieldMask()
	}

	res := &CreateGroupMemberRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &CreateGroupMemberRequest_FieldTerminalPath{selector: CreateGroupMemberRequest_FieldPathSelectorParent})
	}
	{
		subMask := o.GetGroupMember().MakeDiffFieldMask(other.GetGroupMember())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &CreateGroupMemberRequest_FieldTerminalPath{selector: CreateGroupMemberRequest_FieldPathSelectorGroupMember})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &CreateGroupMemberRequest_FieldSubPath{selector: CreateGroupMemberRequest_FieldPathSelectorGroupMember, subPath: subpath})
			}
		}
	}
	return res
}

func (o *CreateGroupMemberRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*CreateGroupMemberRequest))
}

func (o *CreateGroupMemberRequest) Clone() *CreateGroupMemberRequest {
	if o == nil {
		return nil
	}
	result := &CreateGroupMemberRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &group_member.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.GroupMember = o.GroupMember.Clone()
	return result
}

func (o *CreateGroupMemberRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *CreateGroupMemberRequest) Merge(source *CreateGroupMemberRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &group_member.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	if source.GetGroupMember() != nil {
		if o.GroupMember == nil {
			o.GroupMember = new(group_member.GroupMember)
		}
		o.GroupMember.Merge(source.GetGroupMember())
	}
}

func (o *CreateGroupMemberRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*CreateGroupMemberRequest))
}

func (o *UpdateGroupMemberRequest) GotenObjectExt() {}

func (o *UpdateGroupMemberRequest) MakeFullFieldMask() *UpdateGroupMemberRequest_FieldMask {
	return FullUpdateGroupMemberRequest_FieldMask()
}

func (o *UpdateGroupMemberRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateGroupMemberRequest_FieldMask()
}

func (o *UpdateGroupMemberRequest) MakeDiffFieldMask(other *UpdateGroupMemberRequest) *UpdateGroupMemberRequest_FieldMask {
	if o == nil && other == nil {
		return &UpdateGroupMemberRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateGroupMemberRequest_FieldMask()
	}

	res := &UpdateGroupMemberRequest_FieldMask{}
	{
		subMask := o.GetGroupMember().MakeDiffFieldMask(other.GetGroupMember())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateGroupMemberRequest_FieldTerminalPath{selector: UpdateGroupMemberRequest_FieldPathSelectorGroupMember})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateGroupMemberRequest_FieldSubPath{selector: UpdateGroupMemberRequest_FieldPathSelectorGroupMember, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetUpdateMask(), other.GetUpdateMask()) {
		res.Paths = append(res.Paths, &UpdateGroupMemberRequest_FieldTerminalPath{selector: UpdateGroupMemberRequest_FieldPathSelectorUpdateMask})
	}
	{
		subMask := o.GetCas().MakeDiffFieldMask(other.GetCas())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateGroupMemberRequest_FieldTerminalPath{selector: UpdateGroupMemberRequest_FieldPathSelectorCas})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateGroupMemberRequest_FieldSubPath{selector: UpdateGroupMemberRequest_FieldPathSelectorCas, subPath: subpath})
			}
		}
	}
	if o.GetAllowMissing() != other.GetAllowMissing() {
		res.Paths = append(res.Paths, &UpdateGroupMemberRequest_FieldTerminalPath{selector: UpdateGroupMemberRequest_FieldPathSelectorAllowMissing})
	}
	return res
}

func (o *UpdateGroupMemberRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateGroupMemberRequest))
}

func (o *UpdateGroupMemberRequest) Clone() *UpdateGroupMemberRequest {
	if o == nil {
		return nil
	}
	result := &UpdateGroupMemberRequest{}
	result.GroupMember = o.GroupMember.Clone()
	result.UpdateMask = proto.Clone(o.UpdateMask).(*group_member.GroupMember_FieldMask)
	result.Cas = o.Cas.Clone()
	result.AllowMissing = o.AllowMissing
	return result
}

func (o *UpdateGroupMemberRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateGroupMemberRequest) Merge(source *UpdateGroupMemberRequest) {
	if source.GetGroupMember() != nil {
		if o.GroupMember == nil {
			o.GroupMember = new(group_member.GroupMember)
		}
		o.GroupMember.Merge(source.GetGroupMember())
	}
	if source.GetUpdateMask() != nil {
		if o.UpdateMask == nil {
			o.UpdateMask = new(group_member.GroupMember_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetUpdateMask().ToProtoFieldMask(), o.UpdateMask.ToProtoFieldMask())
		if err := o.UpdateMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	if source.GetCas() != nil {
		if o.Cas == nil {
			o.Cas = new(UpdateGroupMemberRequest_CAS)
		}
		o.Cas.Merge(source.GetCas())
	}
	o.AllowMissing = source.GetAllowMissing()
}

func (o *UpdateGroupMemberRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateGroupMemberRequest))
}

func (o *UpdateGroupMemberRequest_CAS) GotenObjectExt() {}

func (o *UpdateGroupMemberRequest_CAS) MakeFullFieldMask() *UpdateGroupMemberRequest_CAS_FieldMask {
	return FullUpdateGroupMemberRequest_CAS_FieldMask()
}

func (o *UpdateGroupMemberRequest_CAS) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateGroupMemberRequest_CAS_FieldMask()
}

func (o *UpdateGroupMemberRequest_CAS) MakeDiffFieldMask(other *UpdateGroupMemberRequest_CAS) *UpdateGroupMemberRequest_CAS_FieldMask {
	if o == nil && other == nil {
		return &UpdateGroupMemberRequest_CAS_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateGroupMemberRequest_CAS_FieldMask()
	}

	res := &UpdateGroupMemberRequest_CAS_FieldMask{}
	{
		subMask := o.GetConditionalState().MakeDiffFieldMask(other.GetConditionalState())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateGroupMemberRequestCAS_FieldTerminalPath{selector: UpdateGroupMemberRequestCAS_FieldPathSelectorConditionalState})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateGroupMemberRequestCAS_FieldSubPath{selector: UpdateGroupMemberRequestCAS_FieldPathSelectorConditionalState, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &UpdateGroupMemberRequestCAS_FieldTerminalPath{selector: UpdateGroupMemberRequestCAS_FieldPathSelectorFieldMask})
	}
	return res
}

func (o *UpdateGroupMemberRequest_CAS) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateGroupMemberRequest_CAS))
}

func (o *UpdateGroupMemberRequest_CAS) Clone() *UpdateGroupMemberRequest_CAS {
	if o == nil {
		return nil
	}
	result := &UpdateGroupMemberRequest_CAS{}
	result.ConditionalState = o.ConditionalState.Clone()
	result.FieldMask = proto.Clone(o.FieldMask).(*group_member.GroupMember_FieldMask)
	return result
}

func (o *UpdateGroupMemberRequest_CAS) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateGroupMemberRequest_CAS) Merge(source *UpdateGroupMemberRequest_CAS) {
	if source.GetConditionalState() != nil {
		if o.ConditionalState == nil {
			o.ConditionalState = new(group_member.GroupMember)
		}
		o.ConditionalState.Merge(source.GetConditionalState())
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(group_member.GroupMember_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
}

func (o *UpdateGroupMemberRequest_CAS) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateGroupMemberRequest_CAS))
}

func (o *DeleteGroupMemberRequest) GotenObjectExt() {}

func (o *DeleteGroupMemberRequest) MakeFullFieldMask() *DeleteGroupMemberRequest_FieldMask {
	return FullDeleteGroupMemberRequest_FieldMask()
}

func (o *DeleteGroupMemberRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDeleteGroupMemberRequest_FieldMask()
}

func (o *DeleteGroupMemberRequest) MakeDiffFieldMask(other *DeleteGroupMemberRequest) *DeleteGroupMemberRequest_FieldMask {
	if o == nil && other == nil {
		return &DeleteGroupMemberRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDeleteGroupMemberRequest_FieldMask()
	}

	res := &DeleteGroupMemberRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &DeleteGroupMemberRequest_FieldTerminalPath{selector: DeleteGroupMemberRequest_FieldPathSelectorName})
	}
	return res
}

func (o *DeleteGroupMemberRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*DeleteGroupMemberRequest))
}

func (o *DeleteGroupMemberRequest) Clone() *DeleteGroupMemberRequest {
	if o == nil {
		return nil
	}
	result := &DeleteGroupMemberRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &group_member.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *DeleteGroupMemberRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *DeleteGroupMemberRequest) Merge(source *DeleteGroupMemberRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &group_member.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
}

func (o *DeleteGroupMemberRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*DeleteGroupMemberRequest))
}
