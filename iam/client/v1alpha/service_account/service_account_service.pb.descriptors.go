// Code generated by protoc-gen-goten-client
// API: ServiceAccountService
// DO NOT EDIT!!!

package service_account_client

import (
	"google.golang.org/protobuf/proto"

	gotenclient "github.com/cloudwan/goten-sdk/runtime/client"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	service_account "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha/service_account"
	empty "github.com/golang/protobuf/ptypes/empty"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = proto.Message(nil)
	_ = gotenclient.MethodDescriptor(nil)
	_ = gotenresource.WildcardId
)

// make sure we're using proto imports
var (
	_ = &service_account.ServiceAccount{}
	_ = &empty.Empty{}
)

var (
	descriptorsInitialized            bool
	serviceAccountServiceDescriptor   *ServiceAccountServiceDescriptor
	getServiceAccountDescriptor       *GetServiceAccountDescriptor
	batchGetServiceAccountsDescriptor *BatchGetServiceAccountsDescriptor
	listServiceAccountsDescriptor     *ListServiceAccountsDescriptor
	watchServiceAccountDescriptor     *WatchServiceAccountDescriptor
	watchServiceAccountsDescriptor    *WatchServiceAccountsDescriptor
	createServiceAccountDescriptor    *CreateServiceAccountDescriptor
	updateServiceAccountDescriptor    *UpdateServiceAccountDescriptor
	deleteServiceAccountDescriptor    *DeleteServiceAccountDescriptor
)

type GetServiceAccountDescriptor struct{}

type GetServiceAccountDescriptorClientMsgHandle struct{}

type GetServiceAccountDescriptorServerMsgHandle struct{}

func (d *GetServiceAccountDescriptor) NewEmptyClientMsg() proto.Message {
	return &GetServiceAccountRequest{}
}

func (d *GetServiceAccountDescriptor) NewEmptyServerMsg() proto.Message {
	return &service_account.ServiceAccount{}
}

func (d *GetServiceAccountDescriptor) IsUnary() bool {
	return true
}

func (d *GetServiceAccountDescriptor) IsClientStream() bool {
	return false
}

func (d *GetServiceAccountDescriptor) IsServerStream() bool {
	return false
}

func (d *GetServiceAccountDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *GetServiceAccountDescriptor) IsPluralSubject() bool {
	return false
}

func (d *GetServiceAccountDescriptor) HasSubjectResource() bool {
	return true
}

func (d *GetServiceAccountDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *GetServiceAccountDescriptor) GetVerb() string {
	return "get"
}

func (d *GetServiceAccountDescriptor) GetMethodName() string {
	return "GetServiceAccount"
}

func (d *GetServiceAccountDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1alpha.ServiceAccountService/GetServiceAccount"
}

func (d *GetServiceAccountDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha"
}

func (d *GetServiceAccountDescriptor) GetApiName() string {
	return "ServiceAccountService"
}

func (d *GetServiceAccountDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *GetServiceAccountDescriptor) GetServiceVersion() string {
	return "v1alpha"
}

func (d *GetServiceAccountDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return serviceAccountServiceDescriptor
}

func (d *GetServiceAccountDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return service_account.GetDescriptor()
}

func (d *GetServiceAccountDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetServiceAccountDescriptorClientMsgHandle{}
}

func (d *GetServiceAccountDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetServiceAccountDescriptorServerMsgHandle{}
}

func (h *GetServiceAccountDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetServiceAccountRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*GetServiceAccountRequest) *service_account.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*service_account.Name)(nil)
}

func (h *GetServiceAccountDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*GetServiceAccountRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*GetServiceAccountRequest) []*service_account.Name
	})
	if ok {
		return service_account.ServiceAccountNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *GetServiceAccountDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetServiceAccountRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*GetServiceAccountRequest) *service_account.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *GetServiceAccountDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*service_account.ServiceAccount)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*service_account.ServiceAccount) *service_account.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetName()
}

func (h *GetServiceAccountDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*service_account.ServiceAccount)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*service_account.ServiceAccount) []*service_account.Name
	})
	if ok {
		return service_account.ServiceAccountNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *GetServiceAccountDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*service_account.ServiceAccount)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*service_account.ServiceAccount) *service_account.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetGetServiceAccountDescriptor() *GetServiceAccountDescriptor {
	return getServiceAccountDescriptor
}

type BatchGetServiceAccountsDescriptor struct{}

type BatchGetServiceAccountsDescriptorClientMsgHandle struct{}

type BatchGetServiceAccountsDescriptorServerMsgHandle struct{}

func (d *BatchGetServiceAccountsDescriptor) NewEmptyClientMsg() proto.Message {
	return &BatchGetServiceAccountsRequest{}
}

func (d *BatchGetServiceAccountsDescriptor) NewEmptyServerMsg() proto.Message {
	return &BatchGetServiceAccountsResponse{}
}

func (d *BatchGetServiceAccountsDescriptor) IsUnary() bool {
	return true
}

func (d *BatchGetServiceAccountsDescriptor) IsClientStream() bool {
	return false
}

func (d *BatchGetServiceAccountsDescriptor) IsServerStream() bool {
	return false
}

func (d *BatchGetServiceAccountsDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *BatchGetServiceAccountsDescriptor) IsPluralSubject() bool {
	return true
}

func (d *BatchGetServiceAccountsDescriptor) HasSubjectResource() bool {
	return true
}

func (d *BatchGetServiceAccountsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *BatchGetServiceAccountsDescriptor) GetVerb() string {
	return "batchGet"
}

func (d *BatchGetServiceAccountsDescriptor) GetMethodName() string {
	return "BatchGetServiceAccounts"
}

func (d *BatchGetServiceAccountsDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1alpha.ServiceAccountService/BatchGetServiceAccounts"
}

func (d *BatchGetServiceAccountsDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha"
}

func (d *BatchGetServiceAccountsDescriptor) GetApiName() string {
	return "ServiceAccountService"
}

func (d *BatchGetServiceAccountsDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *BatchGetServiceAccountsDescriptor) GetServiceVersion() string {
	return "v1alpha"
}

func (d *BatchGetServiceAccountsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return serviceAccountServiceDescriptor
}

func (d *BatchGetServiceAccountsDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return service_account.GetDescriptor()
}

func (d *BatchGetServiceAccountsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetServiceAccountsDescriptorClientMsgHandle{}
}

func (d *BatchGetServiceAccountsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetServiceAccountsDescriptorServerMsgHandle{}
}

func (h *BatchGetServiceAccountsDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetServiceAccountsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*BatchGetServiceAccountsRequest) *service_account.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetServiceAccountsDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetServiceAccountsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*BatchGetServiceAccountsRequest) []*service_account.Name
	})
	if ok {
		return service_account.ServiceAccountNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	if refs := typedMsg.GetNames(); len(refs) > 0 {
		list := make(service_account.ServiceAccountNameList, 0, len(refs))
		for _, ref := range refs {
			list = append(list, &ref.Name)
		}
		return list
	}
	return (service_account.ServiceAccountNameList)(nil)
}

func (h *BatchGetServiceAccountsDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetServiceAccountsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*BatchGetServiceAccountsRequest) *service_account.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *BatchGetServiceAccountsDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetServiceAccountsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*BatchGetServiceAccountsResponse) *service_account.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetServiceAccountsDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetServiceAccountsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*BatchGetServiceAccountsResponse) []*service_account.Name
	})
	if ok {
		return service_account.ServiceAccountNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	resources := typedMsg.GetServiceAccounts()
	list := make(service_account.ServiceAccountNameList, 0, len(resources))
	for _, res := range resources {
		list = append(list, res.GetName())
	}
	return list
}

func (h *BatchGetServiceAccountsDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetServiceAccountsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*BatchGetServiceAccountsResponse) *service_account.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetBatchGetServiceAccountsDescriptor() *BatchGetServiceAccountsDescriptor {
	return batchGetServiceAccountsDescriptor
}

type ListServiceAccountsDescriptor struct{}

type ListServiceAccountsDescriptorClientMsgHandle struct{}

type ListServiceAccountsDescriptorServerMsgHandle struct{}

func (d *ListServiceAccountsDescriptor) NewEmptyClientMsg() proto.Message {
	return &ListServiceAccountsRequest{}
}

func (d *ListServiceAccountsDescriptor) NewEmptyServerMsg() proto.Message {
	return &ListServiceAccountsResponse{}
}

func (d *ListServiceAccountsDescriptor) IsUnary() bool {
	return true
}

func (d *ListServiceAccountsDescriptor) IsClientStream() bool {
	return false
}

func (d *ListServiceAccountsDescriptor) IsServerStream() bool {
	return false
}

func (d *ListServiceAccountsDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *ListServiceAccountsDescriptor) IsPluralSubject() bool {
	return true
}

func (d *ListServiceAccountsDescriptor) HasSubjectResource() bool {
	return true
}

func (d *ListServiceAccountsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ListServiceAccountsDescriptor) GetVerb() string {
	return "list"
}

func (d *ListServiceAccountsDescriptor) GetMethodName() string {
	return "ListServiceAccounts"
}

func (d *ListServiceAccountsDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1alpha.ServiceAccountService/ListServiceAccounts"
}

func (d *ListServiceAccountsDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha"
}

func (d *ListServiceAccountsDescriptor) GetApiName() string {
	return "ServiceAccountService"
}

func (d *ListServiceAccountsDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *ListServiceAccountsDescriptor) GetServiceVersion() string {
	return "v1alpha"
}

func (d *ListServiceAccountsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return serviceAccountServiceDescriptor
}

func (d *ListServiceAccountsDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return service_account.GetDescriptor()
}

func (d *ListServiceAccountsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListServiceAccountsDescriptorClientMsgHandle{}
}

func (d *ListServiceAccountsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListServiceAccountsDescriptorServerMsgHandle{}
}

func (h *ListServiceAccountsDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListServiceAccountsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*ListServiceAccountsRequest) *service_account.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *ListServiceAccountsDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListServiceAccountsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*ListServiceAccountsRequest) []*service_account.Name
	})
	if ok {
		return service_account.ServiceAccountNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *ListServiceAccountsDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListServiceAccountsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*ListServiceAccountsRequest) *service_account.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return typedMsg.GetParent()
}

func (h *ListServiceAccountsDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListServiceAccountsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*ListServiceAccountsResponse) *service_account.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *ListServiceAccountsDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListServiceAccountsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*ListServiceAccountsResponse) []*service_account.Name
	})
	if ok {
		return service_account.ServiceAccountNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	resources := typedMsg.GetServiceAccounts()
	list := make(service_account.ServiceAccountNameList, 0, len(resources))
	for _, res := range resources {
		list = append(list, res.GetName())
	}
	return list
}

func (h *ListServiceAccountsDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListServiceAccountsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*ListServiceAccountsResponse) *service_account.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetListServiceAccountsDescriptor() *ListServiceAccountsDescriptor {
	return listServiceAccountsDescriptor
}

type WatchServiceAccountDescriptor struct{}

type WatchServiceAccountDescriptorClientMsgHandle struct{}

type WatchServiceAccountDescriptorServerMsgHandle struct{}

func (d *WatchServiceAccountDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchServiceAccountRequest{}
}

func (d *WatchServiceAccountDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchServiceAccountResponse{}
}

func (d *WatchServiceAccountDescriptor) IsUnary() bool {
	return false
}

func (d *WatchServiceAccountDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchServiceAccountDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchServiceAccountDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *WatchServiceAccountDescriptor) IsPluralSubject() bool {
	return false
}

func (d *WatchServiceAccountDescriptor) HasSubjectResource() bool {
	return true
}

func (d *WatchServiceAccountDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchServiceAccountDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchServiceAccountDescriptor) GetMethodName() string {
	return "WatchServiceAccount"
}

func (d *WatchServiceAccountDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1alpha.ServiceAccountService/WatchServiceAccount"
}

func (d *WatchServiceAccountDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha"
}

func (d *WatchServiceAccountDescriptor) GetApiName() string {
	return "ServiceAccountService"
}

func (d *WatchServiceAccountDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *WatchServiceAccountDescriptor) GetServiceVersion() string {
	return "v1alpha"
}

func (d *WatchServiceAccountDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return serviceAccountServiceDescriptor
}

func (d *WatchServiceAccountDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return service_account.GetDescriptor()
}

func (d *WatchServiceAccountDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchServiceAccountDescriptorClientMsgHandle{}
}

func (d *WatchServiceAccountDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchServiceAccountDescriptorServerMsgHandle{}
}

func (h *WatchServiceAccountDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchServiceAccountRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchServiceAccountRequest) *service_account.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*service_account.Name)(nil)
}

func (h *WatchServiceAccountDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchServiceAccountRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchServiceAccountRequest) []*service_account.Name
	})
	if ok {
		return service_account.ServiceAccountNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchServiceAccountDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchServiceAccountRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchServiceAccountRequest) *service_account.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchServiceAccountDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchServiceAccountResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchServiceAccountResponse) *service_account.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if typedMsg.GetChange() != nil {
		switch tResChange := typedMsg.GetChange().ChangeType.(type) {
		case *service_account.ServiceAccountChange_Added_:
			return tResChange.Added.GetServiceAccount().GetName()
		case *service_account.ServiceAccountChange_Modified_:
			return tResChange.Modified.GetName()
		case *service_account.ServiceAccountChange_Removed_:
			return tResChange.Removed.GetName()
		case *service_account.ServiceAccountChange_Current_:
			return tResChange.Current.GetServiceAccount().GetName()
		}
	}
	return (*service_account.Name)(nil)
}

func (h *WatchServiceAccountDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchServiceAccountResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchServiceAccountResponse) []*service_account.Name
	})
	if ok {
		return service_account.ServiceAccountNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchServiceAccountDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchServiceAccountResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchServiceAccountResponse) *service_account.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetWatchServiceAccountDescriptor() *WatchServiceAccountDescriptor {
	return watchServiceAccountDescriptor
}

type WatchServiceAccountsDescriptor struct{}

type WatchServiceAccountsDescriptorClientMsgHandle struct{}

type WatchServiceAccountsDescriptorServerMsgHandle struct{}

func (d *WatchServiceAccountsDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchServiceAccountsRequest{}
}

func (d *WatchServiceAccountsDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchServiceAccountsResponse{}
}

func (d *WatchServiceAccountsDescriptor) IsUnary() bool {
	return false
}

func (d *WatchServiceAccountsDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchServiceAccountsDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchServiceAccountsDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *WatchServiceAccountsDescriptor) IsPluralSubject() bool {
	return true
}

func (d *WatchServiceAccountsDescriptor) HasSubjectResource() bool {
	return true
}

func (d *WatchServiceAccountsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchServiceAccountsDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchServiceAccountsDescriptor) GetMethodName() string {
	return "WatchServiceAccounts"
}

func (d *WatchServiceAccountsDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1alpha.ServiceAccountService/WatchServiceAccounts"
}

func (d *WatchServiceAccountsDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha"
}

func (d *WatchServiceAccountsDescriptor) GetApiName() string {
	return "ServiceAccountService"
}

func (d *WatchServiceAccountsDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *WatchServiceAccountsDescriptor) GetServiceVersion() string {
	return "v1alpha"
}

func (d *WatchServiceAccountsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return serviceAccountServiceDescriptor
}

func (d *WatchServiceAccountsDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return service_account.GetDescriptor()
}

func (d *WatchServiceAccountsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchServiceAccountsDescriptorClientMsgHandle{}
}

func (d *WatchServiceAccountsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchServiceAccountsDescriptorServerMsgHandle{}
}

func (h *WatchServiceAccountsDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchServiceAccountsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchServiceAccountsRequest) *service_account.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *WatchServiceAccountsDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchServiceAccountsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchServiceAccountsRequest) []*service_account.Name
	})
	if ok {
		return service_account.ServiceAccountNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchServiceAccountsDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchServiceAccountsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchServiceAccountsRequest) *service_account.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	if ref := typedMsg.GetParent(); ref != nil {
		return &ref.ParentName
	}
	return (*service_account.ParentName)(nil)
}

func (h *WatchServiceAccountsDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchServiceAccountsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchServiceAccountsResponse) *service_account.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *WatchServiceAccountsDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchServiceAccountsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchServiceAccountsResponse) []*service_account.Name
	})
	if ok {
		return service_account.ServiceAccountNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	resourceChanges := typedMsg.GetServiceAccountChanges()
	list := make(service_account.ServiceAccountNameList, 0, len(resourceChanges))
	for _, resChange := range resourceChanges {
		switch tResChange := resChange.ChangeType.(type) {
		case *service_account.ServiceAccountChange_Added_:
			list = append(list, tResChange.Added.GetServiceAccount().GetName())
		case *service_account.ServiceAccountChange_Modified_:
			list = append(list, tResChange.Modified.GetName())
		case *service_account.ServiceAccountChange_Removed_:
			list = append(list, tResChange.Removed.GetName())
		case *service_account.ServiceAccountChange_Current_:
			list = append(list, tResChange.Current.GetServiceAccount().GetName())
		}
	}
	return list
}

func (h *WatchServiceAccountsDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchServiceAccountsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchServiceAccountsResponse) *service_account.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetWatchServiceAccountsDescriptor() *WatchServiceAccountsDescriptor {
	return watchServiceAccountsDescriptor
}

type CreateServiceAccountDescriptor struct{}

type CreateServiceAccountDescriptorClientMsgHandle struct{}

type CreateServiceAccountDescriptorServerMsgHandle struct{}

func (d *CreateServiceAccountDescriptor) NewEmptyClientMsg() proto.Message {
	return &CreateServiceAccountRequest{}
}

func (d *CreateServiceAccountDescriptor) NewEmptyServerMsg() proto.Message {
	return &service_account.ServiceAccount{}
}

func (d *CreateServiceAccountDescriptor) IsUnary() bool {
	return true
}

func (d *CreateServiceAccountDescriptor) IsClientStream() bool {
	return false
}

func (d *CreateServiceAccountDescriptor) IsServerStream() bool {
	return false
}

func (d *CreateServiceAccountDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *CreateServiceAccountDescriptor) IsPluralSubject() bool {
	return false
}

func (d *CreateServiceAccountDescriptor) HasSubjectResource() bool {
	return true
}

func (d *CreateServiceAccountDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *CreateServiceAccountDescriptor) GetVerb() string {
	return "create"
}

func (d *CreateServiceAccountDescriptor) GetMethodName() string {
	return "CreateServiceAccount"
}

func (d *CreateServiceAccountDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1alpha.ServiceAccountService/CreateServiceAccount"
}

func (d *CreateServiceAccountDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha"
}

func (d *CreateServiceAccountDescriptor) GetApiName() string {
	return "ServiceAccountService"
}

func (d *CreateServiceAccountDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *CreateServiceAccountDescriptor) GetServiceVersion() string {
	return "v1alpha"
}

func (d *CreateServiceAccountDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return serviceAccountServiceDescriptor
}

func (d *CreateServiceAccountDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return service_account.GetDescriptor()
}

func (d *CreateServiceAccountDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateServiceAccountDescriptorClientMsgHandle{}
}

func (d *CreateServiceAccountDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateServiceAccountDescriptorServerMsgHandle{}
}

func (h *CreateServiceAccountDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateServiceAccountRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*CreateServiceAccountRequest) *service_account.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetServiceAccount().GetName()
}

func (h *CreateServiceAccountDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*CreateServiceAccountRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*CreateServiceAccountRequest) []*service_account.Name
	})
	if ok {
		return service_account.ServiceAccountNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateServiceAccountDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateServiceAccountRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*CreateServiceAccountRequest) *service_account.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	if ref := typedMsg.GetParent(); ref != nil {
		return &ref.ParentName
	}
	return (*service_account.ParentName)(nil)
}

func (h *CreateServiceAccountDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*service_account.ServiceAccount)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*service_account.ServiceAccount) *service_account.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetName()
}

func (h *CreateServiceAccountDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*service_account.ServiceAccount)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*service_account.ServiceAccount) []*service_account.Name
	})
	if ok {
		return service_account.ServiceAccountNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateServiceAccountDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*service_account.ServiceAccount)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*service_account.ServiceAccount) *service_account.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetCreateServiceAccountDescriptor() *CreateServiceAccountDescriptor {
	return createServiceAccountDescriptor
}

type UpdateServiceAccountDescriptor struct{}

type UpdateServiceAccountDescriptorClientMsgHandle struct{}

type UpdateServiceAccountDescriptorServerMsgHandle struct{}

func (d *UpdateServiceAccountDescriptor) NewEmptyClientMsg() proto.Message {
	return &UpdateServiceAccountRequest{}
}

func (d *UpdateServiceAccountDescriptor) NewEmptyServerMsg() proto.Message {
	return &service_account.ServiceAccount{}
}

func (d *UpdateServiceAccountDescriptor) IsUnary() bool {
	return true
}

func (d *UpdateServiceAccountDescriptor) IsClientStream() bool {
	return false
}

func (d *UpdateServiceAccountDescriptor) IsServerStream() bool {
	return false
}

func (d *UpdateServiceAccountDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *UpdateServiceAccountDescriptor) IsPluralSubject() bool {
	return false
}

func (d *UpdateServiceAccountDescriptor) HasSubjectResource() bool {
	return true
}

func (d *UpdateServiceAccountDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *UpdateServiceAccountDescriptor) GetVerb() string {
	return "update"
}

func (d *UpdateServiceAccountDescriptor) GetMethodName() string {
	return "UpdateServiceAccount"
}

func (d *UpdateServiceAccountDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1alpha.ServiceAccountService/UpdateServiceAccount"
}

func (d *UpdateServiceAccountDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha"
}

func (d *UpdateServiceAccountDescriptor) GetApiName() string {
	return "ServiceAccountService"
}

func (d *UpdateServiceAccountDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *UpdateServiceAccountDescriptor) GetServiceVersion() string {
	return "v1alpha"
}

func (d *UpdateServiceAccountDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return serviceAccountServiceDescriptor
}

func (d *UpdateServiceAccountDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return service_account.GetDescriptor()
}

func (d *UpdateServiceAccountDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateServiceAccountDescriptorClientMsgHandle{}
}

func (d *UpdateServiceAccountDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateServiceAccountDescriptorServerMsgHandle{}
}

func (h *UpdateServiceAccountDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateServiceAccountRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*UpdateServiceAccountRequest) *service_account.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetServiceAccount().GetName()
}

func (h *UpdateServiceAccountDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*UpdateServiceAccountRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*UpdateServiceAccountRequest) []*service_account.Name
	})
	if ok {
		return service_account.ServiceAccountNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateServiceAccountDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateServiceAccountRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*UpdateServiceAccountRequest) *service_account.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *UpdateServiceAccountDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*service_account.ServiceAccount)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*service_account.ServiceAccount) *service_account.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetName()
}

func (h *UpdateServiceAccountDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*service_account.ServiceAccount)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*service_account.ServiceAccount) []*service_account.Name
	})
	if ok {
		return service_account.ServiceAccountNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateServiceAccountDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*service_account.ServiceAccount)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*service_account.ServiceAccount) *service_account.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetUpdateServiceAccountDescriptor() *UpdateServiceAccountDescriptor {
	return updateServiceAccountDescriptor
}

type DeleteServiceAccountDescriptor struct{}

type DeleteServiceAccountDescriptorClientMsgHandle struct{}

type DeleteServiceAccountDescriptorServerMsgHandle struct{}

func (d *DeleteServiceAccountDescriptor) NewEmptyClientMsg() proto.Message {
	return &DeleteServiceAccountRequest{}
}

func (d *DeleteServiceAccountDescriptor) NewEmptyServerMsg() proto.Message {
	return &empty.Empty{}
}

func (d *DeleteServiceAccountDescriptor) IsUnary() bool {
	return true
}

func (d *DeleteServiceAccountDescriptor) IsClientStream() bool {
	return false
}

func (d *DeleteServiceAccountDescriptor) IsServerStream() bool {
	return false
}

func (d *DeleteServiceAccountDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *DeleteServiceAccountDescriptor) IsPluralSubject() bool {
	return false
}

func (d *DeleteServiceAccountDescriptor) HasSubjectResource() bool {
	return true
}

func (d *DeleteServiceAccountDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *DeleteServiceAccountDescriptor) GetVerb() string {
	return "delete"
}

func (d *DeleteServiceAccountDescriptor) GetMethodName() string {
	return "DeleteServiceAccount"
}

func (d *DeleteServiceAccountDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1alpha.ServiceAccountService/DeleteServiceAccount"
}

func (d *DeleteServiceAccountDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha"
}

func (d *DeleteServiceAccountDescriptor) GetApiName() string {
	return "ServiceAccountService"
}

func (d *DeleteServiceAccountDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *DeleteServiceAccountDescriptor) GetServiceVersion() string {
	return "v1alpha"
}

func (d *DeleteServiceAccountDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return serviceAccountServiceDescriptor
}

func (d *DeleteServiceAccountDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return service_account.GetDescriptor()
}

func (d *DeleteServiceAccountDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteServiceAccountDescriptorClientMsgHandle{}
}

func (d *DeleteServiceAccountDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteServiceAccountDescriptorServerMsgHandle{}
}

func (h *DeleteServiceAccountDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteServiceAccountRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*DeleteServiceAccountRequest) *service_account.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*service_account.Name)(nil)
}

func (h *DeleteServiceAccountDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*DeleteServiceAccountRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*DeleteServiceAccountRequest) []*service_account.Name
	})
	if ok {
		return service_account.ServiceAccountNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteServiceAccountDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteServiceAccountRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*DeleteServiceAccountRequest) *service_account.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *DeleteServiceAccountDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*empty.Empty) *service_account.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *DeleteServiceAccountDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*empty.Empty) []*service_account.Name
	})
	if ok {
		return service_account.ServiceAccountNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteServiceAccountDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*empty.Empty) *service_account.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetDeleteServiceAccountDescriptor() *DeleteServiceAccountDescriptor {
	return deleteServiceAccountDescriptor
}

type ServiceAccountServiceDescriptor struct{}

func (d *ServiceAccountServiceDescriptor) AllMethodDescriptors() []gotenclient.MethodDescriptor {
	return []gotenclient.MethodDescriptor{
		getServiceAccountDescriptor,
		batchGetServiceAccountsDescriptor,
		listServiceAccountsDescriptor,
		watchServiceAccountDescriptor,
		watchServiceAccountsDescriptor,
		createServiceAccountDescriptor,
		updateServiceAccountDescriptor,
		deleteServiceAccountDescriptor,
	}
}

func (d *ServiceAccountServiceDescriptor) GetFullAPIName() string {
	return "/ntt.iam.v1alpha.ServiceAccountService"
}

func (d *ServiceAccountServiceDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha"
}

func (d *ServiceAccountServiceDescriptor) GetApiName() string {
	return "ServiceAccountService"
}

func (d *ServiceAccountServiceDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *ServiceAccountServiceDescriptor) GetServiceVersion() string {
	return "v1alpha"
}

func GetServiceAccountServiceDescriptor() *ServiceAccountServiceDescriptor {
	return serviceAccountServiceDescriptor
}

func initDescriptors() {
	serviceAccountServiceDescriptor = &ServiceAccountServiceDescriptor{}
	getServiceAccountDescriptor = &GetServiceAccountDescriptor{}
	batchGetServiceAccountsDescriptor = &BatchGetServiceAccountsDescriptor{}
	listServiceAccountsDescriptor = &ListServiceAccountsDescriptor{}
	watchServiceAccountDescriptor = &WatchServiceAccountDescriptor{}
	watchServiceAccountsDescriptor = &WatchServiceAccountsDescriptor{}
	createServiceAccountDescriptor = &CreateServiceAccountDescriptor{}
	updateServiceAccountDescriptor = &UpdateServiceAccountDescriptor{}
	deleteServiceAccountDescriptor = &DeleteServiceAccountDescriptor{}
	gotenclient.GetRegistry().RegisterApiDescriptor(serviceAccountServiceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(getServiceAccountDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(batchGetServiceAccountsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(listServiceAccountsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchServiceAccountDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchServiceAccountsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(createServiceAccountDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(updateServiceAccountDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(deleteServiceAccountDescriptor)
}

func init() {
	if !descriptorsInitialized {
		initDescriptors()
		descriptorsInitialized = true
	}
}
