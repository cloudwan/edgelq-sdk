// Code generated by protoc-gen-goten-object
// File: edgelq/iam/proto/v1alpha/authorization_custom.proto
// DO NOT EDIT!!!

package authorization_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	condition "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha/condition"
	permission "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha/permission"
)

// ensure the imports are used
var (
	_ = json.Marshaler(nil)
	_ = fmt.Stringer(nil)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = proto.Message(nil)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &condition.Condition{}
	_ = &permission.Permission{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type Check_FieldPath interface {
	gotenobject.FieldPath
	Selector() Check_FieldPathSelector
	Get(source *Check) []interface{}
	GetSingle(source *Check) (interface{}, bool)
	ClearValue(item *Check)

	// Those methods build corresponding Check_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) Check_FieldPathValue
	WithIArrayOfValues(values interface{}) Check_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) Check_FieldPathArrayItemValue
}

type Check_FieldPathSelector int32

const (
	Check_FieldPathSelectorObject      Check_FieldPathSelector = 0
	Check_FieldPathSelectorPermissions Check_FieldPathSelector = 1
)

func (s Check_FieldPathSelector) String() string {
	switch s {
	case Check_FieldPathSelectorObject:
		return "object"
	case Check_FieldPathSelectorPermissions:
		return "permissions"
	default:
		panic(fmt.Sprintf("Invalid selector for Check: %d", s))
	}
}

func BuildCheck_FieldPath(fp gotenobject.RawFieldPath) (Check_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Check")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "object":
			return &Check_FieldTerminalPath{selector: Check_FieldPathSelectorObject}, nil
		case "permissions":
			return &Check_FieldTerminalPath{selector: Check_FieldPathSelectorPermissions}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Check", fp)
}

func ParseCheck_FieldPath(rawField string) (Check_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildCheck_FieldPath(fp)
}

func MustParseCheck_FieldPath(rawField string) Check_FieldPath {
	fp, err := ParseCheck_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type Check_FieldTerminalPath struct {
	selector Check_FieldPathSelector
}

var _ Check_FieldPath = (*Check_FieldTerminalPath)(nil)

func (fp *Check_FieldTerminalPath) Selector() Check_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *Check_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *Check_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Check
func (fp *Check_FieldTerminalPath) Get(source *Check) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case Check_FieldPathSelectorObject:
			values = append(values, source.Object)
		case Check_FieldPathSelectorPermissions:
			for _, value := range source.GetPermissions() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Check: %d", fp.selector))
		}
	}
	return
}

func (fp *Check_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Check))
}

// GetSingle returns value pointed by specific field of from source Check
func (fp *Check_FieldTerminalPath) GetSingle(source *Check) (interface{}, bool) {
	switch fp.selector {
	case Check_FieldPathSelectorObject:
		return source.GetObject(), source != nil
	case Check_FieldPathSelectorPermissions:
		res := source.GetPermissions()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Check: %d", fp.selector))
	}
}

func (fp *Check_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Check))
}

// GetDefault returns a default value of the field type
func (fp *Check_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case Check_FieldPathSelectorObject:
		return ""
	case Check_FieldPathSelectorPermissions:
		return ([]*permission.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for Check: %d", fp.selector))
	}
}

func (fp *Check_FieldTerminalPath) ClearValue(item *Check) {
	if item != nil {
		switch fp.selector {
		case Check_FieldPathSelectorObject:
			item.Object = ""
		case Check_FieldPathSelectorPermissions:
			item.Permissions = nil
		default:
			panic(fmt.Sprintf("Invalid selector for Check: %d", fp.selector))
		}
	}
}

func (fp *Check_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Check))
}

// IsLeaf - whether field path is holds simple value
func (fp *Check_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == Check_FieldPathSelectorObject ||
		fp.selector == Check_FieldPathSelectorPermissions
}

func (fp *Check_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *Check_FieldTerminalPath) WithIValue(value interface{}) Check_FieldPathValue {
	switch fp.selector {
	case Check_FieldPathSelectorObject:
		return &Check_FieldTerminalPathValue{Check_FieldTerminalPath: *fp, value: value.(string)}
	case Check_FieldPathSelectorPermissions:
		return &Check_FieldTerminalPathValue{Check_FieldTerminalPath: *fp, value: value.([]*permission.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for Check: %d", fp.selector))
	}
}

func (fp *Check_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *Check_FieldTerminalPath) WithIArrayOfValues(values interface{}) Check_FieldPathArrayOfValues {
	fpaov := &Check_FieldTerminalPathArrayOfValues{Check_FieldTerminalPath: *fp}
	switch fp.selector {
	case Check_FieldPathSelectorObject:
		return &Check_FieldTerminalPathArrayOfValues{Check_FieldTerminalPath: *fp, values: values.([]string)}
	case Check_FieldPathSelectorPermissions:
		return &Check_FieldTerminalPathArrayOfValues{Check_FieldTerminalPath: *fp, values: values.([][]*permission.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for Check: %d", fp.selector))
	}
	return fpaov
}

func (fp *Check_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *Check_FieldTerminalPath) WithIArrayItemValue(value interface{}) Check_FieldPathArrayItemValue {
	switch fp.selector {
	case Check_FieldPathSelectorPermissions:
		return &Check_FieldTerminalPathArrayItemValue{Check_FieldTerminalPath: *fp, value: value.(*permission.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for Check: %d", fp.selector))
	}
}

func (fp *Check_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// Check_FieldPathValue allows storing values for Check fields according to their type
type Check_FieldPathValue interface {
	Check_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Check)
	CompareWith(*Check) (cmp int, comparable bool)
}

func ParseCheck_FieldPathValue(pathStr, valueStr string) (Check_FieldPathValue, error) {
	fp, err := ParseCheck_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Check field path value from %s: %v", valueStr, err)
	}
	return fpv.(Check_FieldPathValue), nil
}

func MustParseCheck_FieldPathValue(pathStr, valueStr string) Check_FieldPathValue {
	fpv, err := ParseCheck_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type Check_FieldTerminalPathValue struct {
	Check_FieldTerminalPath
	value interface{}
}

var _ Check_FieldPathValue = (*Check_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Check' as interface{}
func (fpv *Check_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *Check_FieldTerminalPathValue) AsObjectValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *Check_FieldTerminalPathValue) AsPermissionsValue() ([]*permission.Reference, bool) {
	res, ok := fpv.value.([]*permission.Reference)
	return res, ok
}

// SetTo stores value for selected field for object Check
func (fpv *Check_FieldTerminalPathValue) SetTo(target **Check) {
	if *target == nil {
		*target = new(Check)
	}
	switch fpv.selector {
	case Check_FieldPathSelectorObject:
		(*target).Object = fpv.value.(string)
	case Check_FieldPathSelectorPermissions:
		(*target).Permissions = fpv.value.([]*permission.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for Check: %d", fpv.selector))
	}
}

func (fpv *Check_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Check)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'Check_FieldTerminalPathValue' with the value under path in 'Check'.
func (fpv *Check_FieldTerminalPathValue) CompareWith(source *Check) (int, bool) {
	switch fpv.selector {
	case Check_FieldPathSelectorObject:
		leftValue := fpv.value.(string)
		rightValue := source.GetObject()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case Check_FieldPathSelectorPermissions:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for Check: %d", fpv.selector))
	}
}

func (fpv *Check_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Check))
}

// Check_FieldPathArrayItemValue allows storing single item in Path-specific values for Check according to their type
// Present only for array (repeated) types.
type Check_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	Check_FieldPath
	ContainsValue(*Check) bool
}

// ParseCheck_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseCheck_FieldPathArrayItemValue(pathStr, valueStr string) (Check_FieldPathArrayItemValue, error) {
	fp, err := ParseCheck_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Check field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(Check_FieldPathArrayItemValue), nil
}

func MustParseCheck_FieldPathArrayItemValue(pathStr, valueStr string) Check_FieldPathArrayItemValue {
	fpaiv, err := ParseCheck_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type Check_FieldTerminalPathArrayItemValue struct {
	Check_FieldTerminalPath
	value interface{}
}

var _ Check_FieldPathArrayItemValue = (*Check_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Check as interface{}
func (fpaiv *Check_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *Check_FieldTerminalPathArrayItemValue) AsPermissionsItemValue() (*permission.Reference, bool) {
	res, ok := fpaiv.value.(*permission.Reference)
	return res, ok
}

func (fpaiv *Check_FieldTerminalPathArrayItemValue) GetSingle(source *Check) (interface{}, bool) {
	return nil, false
}

func (fpaiv *Check_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Check))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Check'
func (fpaiv *Check_FieldTerminalPathArrayItemValue) ContainsValue(source *Check) bool {
	slice := fpaiv.Check_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// Check_FieldPathArrayOfValues allows storing slice of values for Check fields according to their type
type Check_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	Check_FieldPath
}

func ParseCheck_FieldPathArrayOfValues(pathStr, valuesStr string) (Check_FieldPathArrayOfValues, error) {
	fp, err := ParseCheck_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Check field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(Check_FieldPathArrayOfValues), nil
}

func MustParseCheck_FieldPathArrayOfValues(pathStr, valuesStr string) Check_FieldPathArrayOfValues {
	fpaov, err := ParseCheck_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type Check_FieldTerminalPathArrayOfValues struct {
	Check_FieldTerminalPath
	values interface{}
}

var _ Check_FieldPathArrayOfValues = (*Check_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *Check_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case Check_FieldPathSelectorObject:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case Check_FieldPathSelectorPermissions:
		for _, v := range fpaov.values.([][]*permission.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *Check_FieldTerminalPathArrayOfValues) AsObjectArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *Check_FieldTerminalPathArrayOfValues) AsPermissionsArrayOfValues() ([][]*permission.Reference, bool) {
	res, ok := fpaov.values.([][]*permission.Reference)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ConditionalGrant_FieldPath interface {
	gotenobject.FieldPath
	Selector() ConditionalGrant_FieldPathSelector
	Get(source *ConditionalGrant) []interface{}
	GetSingle(source *ConditionalGrant) (interface{}, bool)
	ClearValue(item *ConditionalGrant)

	// Those methods build corresponding ConditionalGrant_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ConditionalGrant_FieldPathValue
	WithIArrayOfValues(values interface{}) ConditionalGrant_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ConditionalGrant_FieldPathArrayItemValue
}

type ConditionalGrant_FieldPathSelector int32

const (
	ConditionalGrant_FieldPathSelectorPermissions       ConditionalGrant_FieldPathSelector = 0
	ConditionalGrant_FieldPathSelectorConditionBindings ConditionalGrant_FieldPathSelector = 1
)

func (s ConditionalGrant_FieldPathSelector) String() string {
	switch s {
	case ConditionalGrant_FieldPathSelectorPermissions:
		return "permissions"
	case ConditionalGrant_FieldPathSelectorConditionBindings:
		return "condition_bindings"
	default:
		panic(fmt.Sprintf("Invalid selector for ConditionalGrant: %d", s))
	}
}

func BuildConditionalGrant_FieldPath(fp gotenobject.RawFieldPath) (ConditionalGrant_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ConditionalGrant")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "permissions":
			return &ConditionalGrant_FieldTerminalPath{selector: ConditionalGrant_FieldPathSelectorPermissions}, nil
		case "condition_bindings", "conditionBindings", "condition-bindings":
			return &ConditionalGrant_FieldTerminalPath{selector: ConditionalGrant_FieldPathSelectorConditionBindings}, nil
		}
	} else {
		switch fp[0] {
		case "condition_bindings", "conditionBindings", "condition-bindings":
			if subpath, err := condition.BuildConditionBinding_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ConditionalGrant_FieldSubPath{selector: ConditionalGrant_FieldPathSelectorConditionBindings, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ConditionalGrant", fp)
}

func ParseConditionalGrant_FieldPath(rawField string) (ConditionalGrant_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildConditionalGrant_FieldPath(fp)
}

func MustParseConditionalGrant_FieldPath(rawField string) ConditionalGrant_FieldPath {
	fp, err := ParseConditionalGrant_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ConditionalGrant_FieldTerminalPath struct {
	selector ConditionalGrant_FieldPathSelector
}

var _ ConditionalGrant_FieldPath = (*ConditionalGrant_FieldTerminalPath)(nil)

func (fp *ConditionalGrant_FieldTerminalPath) Selector() ConditionalGrant_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ConditionalGrant_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ConditionalGrant_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ConditionalGrant
func (fp *ConditionalGrant_FieldTerminalPath) Get(source *ConditionalGrant) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ConditionalGrant_FieldPathSelectorPermissions:
			for _, value := range source.GetPermissions() {
				values = append(values, value)
			}
		case ConditionalGrant_FieldPathSelectorConditionBindings:
			for _, value := range source.GetConditionBindings() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ConditionalGrant: %d", fp.selector))
		}
	}
	return
}

func (fp *ConditionalGrant_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ConditionalGrant))
}

// GetSingle returns value pointed by specific field of from source ConditionalGrant
func (fp *ConditionalGrant_FieldTerminalPath) GetSingle(source *ConditionalGrant) (interface{}, bool) {
	switch fp.selector {
	case ConditionalGrant_FieldPathSelectorPermissions:
		res := source.GetPermissions()
		return res, res != nil
	case ConditionalGrant_FieldPathSelectorConditionBindings:
		res := source.GetConditionBindings()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ConditionalGrant: %d", fp.selector))
	}
}

func (fp *ConditionalGrant_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ConditionalGrant))
}

// GetDefault returns a default value of the field type
func (fp *ConditionalGrant_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ConditionalGrant_FieldPathSelectorPermissions:
		return ([]*permission.Reference)(nil)
	case ConditionalGrant_FieldPathSelectorConditionBindings:
		return ([]*condition.ConditionBinding)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ConditionalGrant: %d", fp.selector))
	}
}

func (fp *ConditionalGrant_FieldTerminalPath) ClearValue(item *ConditionalGrant) {
	if item != nil {
		switch fp.selector {
		case ConditionalGrant_FieldPathSelectorPermissions:
			item.Permissions = nil
		case ConditionalGrant_FieldPathSelectorConditionBindings:
			item.ConditionBindings = nil
		default:
			panic(fmt.Sprintf("Invalid selector for ConditionalGrant: %d", fp.selector))
		}
	}
}

func (fp *ConditionalGrant_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ConditionalGrant))
}

// IsLeaf - whether field path is holds simple value
func (fp *ConditionalGrant_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ConditionalGrant_FieldPathSelectorPermissions
}

func (fp *ConditionalGrant_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ConditionalGrant_FieldTerminalPath) WithIValue(value interface{}) ConditionalGrant_FieldPathValue {
	switch fp.selector {
	case ConditionalGrant_FieldPathSelectorPermissions:
		return &ConditionalGrant_FieldTerminalPathValue{ConditionalGrant_FieldTerminalPath: *fp, value: value.([]*permission.Reference)}
	case ConditionalGrant_FieldPathSelectorConditionBindings:
		return &ConditionalGrant_FieldTerminalPathValue{ConditionalGrant_FieldTerminalPath: *fp, value: value.([]*condition.ConditionBinding)}
	default:
		panic(fmt.Sprintf("Invalid selector for ConditionalGrant: %d", fp.selector))
	}
}

func (fp *ConditionalGrant_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ConditionalGrant_FieldTerminalPath) WithIArrayOfValues(values interface{}) ConditionalGrant_FieldPathArrayOfValues {
	fpaov := &ConditionalGrant_FieldTerminalPathArrayOfValues{ConditionalGrant_FieldTerminalPath: *fp}
	switch fp.selector {
	case ConditionalGrant_FieldPathSelectorPermissions:
		return &ConditionalGrant_FieldTerminalPathArrayOfValues{ConditionalGrant_FieldTerminalPath: *fp, values: values.([][]*permission.Reference)}
	case ConditionalGrant_FieldPathSelectorConditionBindings:
		return &ConditionalGrant_FieldTerminalPathArrayOfValues{ConditionalGrant_FieldTerminalPath: *fp, values: values.([][]*condition.ConditionBinding)}
	default:
		panic(fmt.Sprintf("Invalid selector for ConditionalGrant: %d", fp.selector))
	}
	return fpaov
}

func (fp *ConditionalGrant_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ConditionalGrant_FieldTerminalPath) WithIArrayItemValue(value interface{}) ConditionalGrant_FieldPathArrayItemValue {
	switch fp.selector {
	case ConditionalGrant_FieldPathSelectorPermissions:
		return &ConditionalGrant_FieldTerminalPathArrayItemValue{ConditionalGrant_FieldTerminalPath: *fp, value: value.(*permission.Reference)}
	case ConditionalGrant_FieldPathSelectorConditionBindings:
		return &ConditionalGrant_FieldTerminalPathArrayItemValue{ConditionalGrant_FieldTerminalPath: *fp, value: value.(*condition.ConditionBinding)}
	default:
		panic(fmt.Sprintf("Invalid selector for ConditionalGrant: %d", fp.selector))
	}
}

func (fp *ConditionalGrant_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ConditionalGrant_FieldSubPath struct {
	selector ConditionalGrant_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ConditionalGrant_FieldPath = (*ConditionalGrant_FieldSubPath)(nil)

func (fps *ConditionalGrant_FieldSubPath) Selector() ConditionalGrant_FieldPathSelector {
	return fps.selector
}
func (fps *ConditionalGrant_FieldSubPath) AsConditionBindingsSubPath() (condition.ConditionBinding_FieldPath, bool) {
	res, ok := fps.subPath.(condition.ConditionBinding_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ConditionalGrant_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ConditionalGrant_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ConditionalGrant
func (fps *ConditionalGrant_FieldSubPath) Get(source *ConditionalGrant) (values []interface{}) {
	if asConditionBindingFieldPath, ok := fps.AsConditionBindingsSubPath(); ok {
		for _, item := range source.GetConditionBindings() {
			values = append(values, asConditionBindingFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for ConditionalGrant: %d", fps.selector))
	}
	return
}

func (fps *ConditionalGrant_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ConditionalGrant))
}

// GetSingle returns value of selected field from source ConditionalGrant
func (fps *ConditionalGrant_FieldSubPath) GetSingle(source *ConditionalGrant) (interface{}, bool) {
	switch fps.selector {
	case ConditionalGrant_FieldPathSelectorConditionBindings:
		if len(source.GetConditionBindings()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetConditionBindings()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for ConditionalGrant: %d", fps.selector))
	}
}

func (fps *ConditionalGrant_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ConditionalGrant))
}

// GetDefault returns a default value of the field type
func (fps *ConditionalGrant_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ConditionalGrant_FieldSubPath) ClearValue(item *ConditionalGrant) {
	if item != nil {
		switch fps.selector {
		case ConditionalGrant_FieldPathSelectorConditionBindings:
			for _, subItem := range item.ConditionBindings {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ConditionalGrant: %d", fps.selector))
		}
	}
}

func (fps *ConditionalGrant_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ConditionalGrant))
}

// IsLeaf - whether field path is holds simple value
func (fps *ConditionalGrant_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ConditionalGrant_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&ConditionalGrant_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *ConditionalGrant_FieldSubPath) WithIValue(value interface{}) ConditionalGrant_FieldPathValue {
	return &ConditionalGrant_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ConditionalGrant_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ConditionalGrant_FieldSubPath) WithIArrayOfValues(values interface{}) ConditionalGrant_FieldPathArrayOfValues {
	return &ConditionalGrant_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ConditionalGrant_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ConditionalGrant_FieldSubPath) WithIArrayItemValue(value interface{}) ConditionalGrant_FieldPathArrayItemValue {
	return &ConditionalGrant_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ConditionalGrant_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ConditionalGrant_FieldPathValue allows storing values for ConditionalGrant fields according to their type
type ConditionalGrant_FieldPathValue interface {
	ConditionalGrant_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ConditionalGrant)
	CompareWith(*ConditionalGrant) (cmp int, comparable bool)
}

func ParseConditionalGrant_FieldPathValue(pathStr, valueStr string) (ConditionalGrant_FieldPathValue, error) {
	fp, err := ParseConditionalGrant_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ConditionalGrant field path value from %s: %v", valueStr, err)
	}
	return fpv.(ConditionalGrant_FieldPathValue), nil
}

func MustParseConditionalGrant_FieldPathValue(pathStr, valueStr string) ConditionalGrant_FieldPathValue {
	fpv, err := ParseConditionalGrant_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ConditionalGrant_FieldTerminalPathValue struct {
	ConditionalGrant_FieldTerminalPath
	value interface{}
}

var _ ConditionalGrant_FieldPathValue = (*ConditionalGrant_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ConditionalGrant' as interface{}
func (fpv *ConditionalGrant_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ConditionalGrant_FieldTerminalPathValue) AsPermissionsValue() ([]*permission.Reference, bool) {
	res, ok := fpv.value.([]*permission.Reference)
	return res, ok
}
func (fpv *ConditionalGrant_FieldTerminalPathValue) AsConditionBindingsValue() ([]*condition.ConditionBinding, bool) {
	res, ok := fpv.value.([]*condition.ConditionBinding)
	return res, ok
}

// SetTo stores value for selected field for object ConditionalGrant
func (fpv *ConditionalGrant_FieldTerminalPathValue) SetTo(target **ConditionalGrant) {
	if *target == nil {
		*target = new(ConditionalGrant)
	}
	switch fpv.selector {
	case ConditionalGrant_FieldPathSelectorPermissions:
		(*target).Permissions = fpv.value.([]*permission.Reference)
	case ConditionalGrant_FieldPathSelectorConditionBindings:
		(*target).ConditionBindings = fpv.value.([]*condition.ConditionBinding)
	default:
		panic(fmt.Sprintf("Invalid selector for ConditionalGrant: %d", fpv.selector))
	}
}

func (fpv *ConditionalGrant_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ConditionalGrant)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ConditionalGrant_FieldTerminalPathValue' with the value under path in 'ConditionalGrant'.
func (fpv *ConditionalGrant_FieldTerminalPathValue) CompareWith(source *ConditionalGrant) (int, bool) {
	switch fpv.selector {
	case ConditionalGrant_FieldPathSelectorPermissions:
		return 0, false
	case ConditionalGrant_FieldPathSelectorConditionBindings:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ConditionalGrant: %d", fpv.selector))
	}
}

func (fpv *ConditionalGrant_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ConditionalGrant))
}

type ConditionalGrant_FieldSubPathValue struct {
	ConditionalGrant_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ConditionalGrant_FieldPathValue = (*ConditionalGrant_FieldSubPathValue)(nil)

func (fpvs *ConditionalGrant_FieldSubPathValue) AsConditionBindingsPathValue() (condition.ConditionBinding_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(condition.ConditionBinding_FieldPathValue)
	return res, ok
}

func (fpvs *ConditionalGrant_FieldSubPathValue) SetTo(target **ConditionalGrant) {
	if *target == nil {
		*target = new(ConditionalGrant)
	}
	switch fpvs.Selector() {
	case ConditionalGrant_FieldPathSelectorConditionBindings:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for ConditionalGrant: %d", fpvs.Selector()))
	}
}

func (fpvs *ConditionalGrant_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ConditionalGrant)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ConditionalGrant_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ConditionalGrant_FieldSubPathValue) CompareWith(source *ConditionalGrant) (int, bool) {
	switch fpvs.Selector() {
	case ConditionalGrant_FieldPathSelectorConditionBindings:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for ConditionalGrant: %d", fpvs.Selector()))
	}
}

func (fpvs *ConditionalGrant_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ConditionalGrant))
}

// ConditionalGrant_FieldPathArrayItemValue allows storing single item in Path-specific values for ConditionalGrant according to their type
// Present only for array (repeated) types.
type ConditionalGrant_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ConditionalGrant_FieldPath
	ContainsValue(*ConditionalGrant) bool
}

// ParseConditionalGrant_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseConditionalGrant_FieldPathArrayItemValue(pathStr, valueStr string) (ConditionalGrant_FieldPathArrayItemValue, error) {
	fp, err := ParseConditionalGrant_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ConditionalGrant field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ConditionalGrant_FieldPathArrayItemValue), nil
}

func MustParseConditionalGrant_FieldPathArrayItemValue(pathStr, valueStr string) ConditionalGrant_FieldPathArrayItemValue {
	fpaiv, err := ParseConditionalGrant_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ConditionalGrant_FieldTerminalPathArrayItemValue struct {
	ConditionalGrant_FieldTerminalPath
	value interface{}
}

var _ ConditionalGrant_FieldPathArrayItemValue = (*ConditionalGrant_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ConditionalGrant as interface{}
func (fpaiv *ConditionalGrant_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *ConditionalGrant_FieldTerminalPathArrayItemValue) AsPermissionsItemValue() (*permission.Reference, bool) {
	res, ok := fpaiv.value.(*permission.Reference)
	return res, ok
}
func (fpaiv *ConditionalGrant_FieldTerminalPathArrayItemValue) AsConditionBindingsItemValue() (*condition.ConditionBinding, bool) {
	res, ok := fpaiv.value.(*condition.ConditionBinding)
	return res, ok
}

func (fpaiv *ConditionalGrant_FieldTerminalPathArrayItemValue) GetSingle(source *ConditionalGrant) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ConditionalGrant_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ConditionalGrant))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ConditionalGrant'
func (fpaiv *ConditionalGrant_FieldTerminalPathArrayItemValue) ContainsValue(source *ConditionalGrant) bool {
	slice := fpaiv.ConditionalGrant_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ConditionalGrant_FieldSubPathArrayItemValue struct {
	ConditionalGrant_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ConditionalGrant_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ConditionalGrant_FieldSubPathArrayItemValue) AsConditionBindingsPathItemValue() (condition.ConditionBinding_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(condition.ConditionBinding_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ConditionalGrant'
func (fpaivs *ConditionalGrant_FieldSubPathArrayItemValue) ContainsValue(source *ConditionalGrant) bool {
	switch fpaivs.Selector() {
	case ConditionalGrant_FieldPathSelectorConditionBindings:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for ConditionalGrant: %d", fpaivs.Selector()))
	}
}

// ConditionalGrant_FieldPathArrayOfValues allows storing slice of values for ConditionalGrant fields according to their type
type ConditionalGrant_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ConditionalGrant_FieldPath
}

func ParseConditionalGrant_FieldPathArrayOfValues(pathStr, valuesStr string) (ConditionalGrant_FieldPathArrayOfValues, error) {
	fp, err := ParseConditionalGrant_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ConditionalGrant field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ConditionalGrant_FieldPathArrayOfValues), nil
}

func MustParseConditionalGrant_FieldPathArrayOfValues(pathStr, valuesStr string) ConditionalGrant_FieldPathArrayOfValues {
	fpaov, err := ParseConditionalGrant_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ConditionalGrant_FieldTerminalPathArrayOfValues struct {
	ConditionalGrant_FieldTerminalPath
	values interface{}
}

var _ ConditionalGrant_FieldPathArrayOfValues = (*ConditionalGrant_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ConditionalGrant_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ConditionalGrant_FieldPathSelectorPermissions:
		for _, v := range fpaov.values.([][]*permission.Reference) {
			values = append(values, v)
		}
	case ConditionalGrant_FieldPathSelectorConditionBindings:
		for _, v := range fpaov.values.([][]*condition.ConditionBinding) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ConditionalGrant_FieldTerminalPathArrayOfValues) AsPermissionsArrayOfValues() ([][]*permission.Reference, bool) {
	res, ok := fpaov.values.([][]*permission.Reference)
	return res, ok
}
func (fpaov *ConditionalGrant_FieldTerminalPathArrayOfValues) AsConditionBindingsArrayOfValues() ([][]*condition.ConditionBinding, bool) {
	res, ok := fpaov.values.([][]*condition.ConditionBinding)
	return res, ok
}

type ConditionalGrant_FieldSubPathArrayOfValues struct {
	ConditionalGrant_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ConditionalGrant_FieldPathArrayOfValues = (*ConditionalGrant_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ConditionalGrant_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ConditionalGrant_FieldSubPathArrayOfValues) AsConditionBindingsPathArrayOfValues() (condition.ConditionBinding_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(condition.ConditionBinding_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type CheckResult_FieldPath interface {
	gotenobject.FieldPath
	Selector() CheckResult_FieldPathSelector
	Get(source *CheckResult) []interface{}
	GetSingle(source *CheckResult) (interface{}, bool)
	ClearValue(item *CheckResult)

	// Those methods build corresponding CheckResult_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) CheckResult_FieldPathValue
	WithIArrayOfValues(values interface{}) CheckResult_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) CheckResult_FieldPathArrayItemValue
}

type CheckResult_FieldPathSelector int32

const (
	CheckResult_FieldPathSelectorObject                          CheckResult_FieldPathSelector = 0
	CheckResult_FieldPathSelectorGrantedPermissions              CheckResult_FieldPathSelector = 1
	CheckResult_FieldPathSelectorConditionallyGrantedPermissions CheckResult_FieldPathSelector = 2
)

func (s CheckResult_FieldPathSelector) String() string {
	switch s {
	case CheckResult_FieldPathSelectorObject:
		return "object"
	case CheckResult_FieldPathSelectorGrantedPermissions:
		return "granted_permissions"
	case CheckResult_FieldPathSelectorConditionallyGrantedPermissions:
		return "conditionally_granted_permissions"
	default:
		panic(fmt.Sprintf("Invalid selector for CheckResult: %d", s))
	}
}

func BuildCheckResult_FieldPath(fp gotenobject.RawFieldPath) (CheckResult_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object CheckResult")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "object":
			return &CheckResult_FieldTerminalPath{selector: CheckResult_FieldPathSelectorObject}, nil
		case "granted_permissions", "grantedPermissions", "granted-permissions":
			return &CheckResult_FieldTerminalPath{selector: CheckResult_FieldPathSelectorGrantedPermissions}, nil
		case "conditionally_granted_permissions", "conditionallyGrantedPermissions", "conditionally-granted-permissions":
			return &CheckResult_FieldTerminalPath{selector: CheckResult_FieldPathSelectorConditionallyGrantedPermissions}, nil
		}
	} else {
		switch fp[0] {
		case "conditionally_granted_permissions", "conditionallyGrantedPermissions", "conditionally-granted-permissions":
			if subpath, err := BuildConditionalGrant_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &CheckResult_FieldSubPath{selector: CheckResult_FieldPathSelectorConditionallyGrantedPermissions, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object CheckResult", fp)
}

func ParseCheckResult_FieldPath(rawField string) (CheckResult_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildCheckResult_FieldPath(fp)
}

func MustParseCheckResult_FieldPath(rawField string) CheckResult_FieldPath {
	fp, err := ParseCheckResult_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type CheckResult_FieldTerminalPath struct {
	selector CheckResult_FieldPathSelector
}

var _ CheckResult_FieldPath = (*CheckResult_FieldTerminalPath)(nil)

func (fp *CheckResult_FieldTerminalPath) Selector() CheckResult_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *CheckResult_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *CheckResult_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source CheckResult
func (fp *CheckResult_FieldTerminalPath) Get(source *CheckResult) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case CheckResult_FieldPathSelectorObject:
			values = append(values, source.Object)
		case CheckResult_FieldPathSelectorGrantedPermissions:
			for _, value := range source.GetGrantedPermissions() {
				values = append(values, value)
			}
		case CheckResult_FieldPathSelectorConditionallyGrantedPermissions:
			for _, value := range source.GetConditionallyGrantedPermissions() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for CheckResult: %d", fp.selector))
		}
	}
	return
}

func (fp *CheckResult_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*CheckResult))
}

// GetSingle returns value pointed by specific field of from source CheckResult
func (fp *CheckResult_FieldTerminalPath) GetSingle(source *CheckResult) (interface{}, bool) {
	switch fp.selector {
	case CheckResult_FieldPathSelectorObject:
		return source.GetObject(), source != nil
	case CheckResult_FieldPathSelectorGrantedPermissions:
		res := source.GetGrantedPermissions()
		return res, res != nil
	case CheckResult_FieldPathSelectorConditionallyGrantedPermissions:
		res := source.GetConditionallyGrantedPermissions()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for CheckResult: %d", fp.selector))
	}
}

func (fp *CheckResult_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*CheckResult))
}

// GetDefault returns a default value of the field type
func (fp *CheckResult_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case CheckResult_FieldPathSelectorObject:
		return ""
	case CheckResult_FieldPathSelectorGrantedPermissions:
		return ([]*permission.Reference)(nil)
	case CheckResult_FieldPathSelectorConditionallyGrantedPermissions:
		return ([]*ConditionalGrant)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for CheckResult: %d", fp.selector))
	}
}

func (fp *CheckResult_FieldTerminalPath) ClearValue(item *CheckResult) {
	if item != nil {
		switch fp.selector {
		case CheckResult_FieldPathSelectorObject:
			item.Object = ""
		case CheckResult_FieldPathSelectorGrantedPermissions:
			item.GrantedPermissions = nil
		case CheckResult_FieldPathSelectorConditionallyGrantedPermissions:
			item.ConditionallyGrantedPermissions = nil
		default:
			panic(fmt.Sprintf("Invalid selector for CheckResult: %d", fp.selector))
		}
	}
}

func (fp *CheckResult_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*CheckResult))
}

// IsLeaf - whether field path is holds simple value
func (fp *CheckResult_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == CheckResult_FieldPathSelectorObject ||
		fp.selector == CheckResult_FieldPathSelectorGrantedPermissions
}

func (fp *CheckResult_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *CheckResult_FieldTerminalPath) WithIValue(value interface{}) CheckResult_FieldPathValue {
	switch fp.selector {
	case CheckResult_FieldPathSelectorObject:
		return &CheckResult_FieldTerminalPathValue{CheckResult_FieldTerminalPath: *fp, value: value.(string)}
	case CheckResult_FieldPathSelectorGrantedPermissions:
		return &CheckResult_FieldTerminalPathValue{CheckResult_FieldTerminalPath: *fp, value: value.([]*permission.Reference)}
	case CheckResult_FieldPathSelectorConditionallyGrantedPermissions:
		return &CheckResult_FieldTerminalPathValue{CheckResult_FieldTerminalPath: *fp, value: value.([]*ConditionalGrant)}
	default:
		panic(fmt.Sprintf("Invalid selector for CheckResult: %d", fp.selector))
	}
}

func (fp *CheckResult_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *CheckResult_FieldTerminalPath) WithIArrayOfValues(values interface{}) CheckResult_FieldPathArrayOfValues {
	fpaov := &CheckResult_FieldTerminalPathArrayOfValues{CheckResult_FieldTerminalPath: *fp}
	switch fp.selector {
	case CheckResult_FieldPathSelectorObject:
		return &CheckResult_FieldTerminalPathArrayOfValues{CheckResult_FieldTerminalPath: *fp, values: values.([]string)}
	case CheckResult_FieldPathSelectorGrantedPermissions:
		return &CheckResult_FieldTerminalPathArrayOfValues{CheckResult_FieldTerminalPath: *fp, values: values.([][]*permission.Reference)}
	case CheckResult_FieldPathSelectorConditionallyGrantedPermissions:
		return &CheckResult_FieldTerminalPathArrayOfValues{CheckResult_FieldTerminalPath: *fp, values: values.([][]*ConditionalGrant)}
	default:
		panic(fmt.Sprintf("Invalid selector for CheckResult: %d", fp.selector))
	}
	return fpaov
}

func (fp *CheckResult_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *CheckResult_FieldTerminalPath) WithIArrayItemValue(value interface{}) CheckResult_FieldPathArrayItemValue {
	switch fp.selector {
	case CheckResult_FieldPathSelectorGrantedPermissions:
		return &CheckResult_FieldTerminalPathArrayItemValue{CheckResult_FieldTerminalPath: *fp, value: value.(*permission.Reference)}
	case CheckResult_FieldPathSelectorConditionallyGrantedPermissions:
		return &CheckResult_FieldTerminalPathArrayItemValue{CheckResult_FieldTerminalPath: *fp, value: value.(*ConditionalGrant)}
	default:
		panic(fmt.Sprintf("Invalid selector for CheckResult: %d", fp.selector))
	}
}

func (fp *CheckResult_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type CheckResult_FieldSubPath struct {
	selector CheckResult_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ CheckResult_FieldPath = (*CheckResult_FieldSubPath)(nil)

func (fps *CheckResult_FieldSubPath) Selector() CheckResult_FieldPathSelector {
	return fps.selector
}
func (fps *CheckResult_FieldSubPath) AsConditionallyGrantedPermissionsSubPath() (ConditionalGrant_FieldPath, bool) {
	res, ok := fps.subPath.(ConditionalGrant_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *CheckResult_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *CheckResult_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source CheckResult
func (fps *CheckResult_FieldSubPath) Get(source *CheckResult) (values []interface{}) {
	if asConditionalGrantFieldPath, ok := fps.AsConditionallyGrantedPermissionsSubPath(); ok {
		for _, item := range source.GetConditionallyGrantedPermissions() {
			values = append(values, asConditionalGrantFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for CheckResult: %d", fps.selector))
	}
	return
}

func (fps *CheckResult_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*CheckResult))
}

// GetSingle returns value of selected field from source CheckResult
func (fps *CheckResult_FieldSubPath) GetSingle(source *CheckResult) (interface{}, bool) {
	switch fps.selector {
	case CheckResult_FieldPathSelectorConditionallyGrantedPermissions:
		if len(source.GetConditionallyGrantedPermissions()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetConditionallyGrantedPermissions()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for CheckResult: %d", fps.selector))
	}
}

func (fps *CheckResult_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*CheckResult))
}

// GetDefault returns a default value of the field type
func (fps *CheckResult_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *CheckResult_FieldSubPath) ClearValue(item *CheckResult) {
	if item != nil {
		switch fps.selector {
		case CheckResult_FieldPathSelectorConditionallyGrantedPermissions:
			for _, subItem := range item.ConditionallyGrantedPermissions {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for CheckResult: %d", fps.selector))
		}
	}
}

func (fps *CheckResult_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*CheckResult))
}

// IsLeaf - whether field path is holds simple value
func (fps *CheckResult_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *CheckResult_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&CheckResult_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *CheckResult_FieldSubPath) WithIValue(value interface{}) CheckResult_FieldPathValue {
	return &CheckResult_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *CheckResult_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *CheckResult_FieldSubPath) WithIArrayOfValues(values interface{}) CheckResult_FieldPathArrayOfValues {
	return &CheckResult_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *CheckResult_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *CheckResult_FieldSubPath) WithIArrayItemValue(value interface{}) CheckResult_FieldPathArrayItemValue {
	return &CheckResult_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *CheckResult_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// CheckResult_FieldPathValue allows storing values for CheckResult fields according to their type
type CheckResult_FieldPathValue interface {
	CheckResult_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **CheckResult)
	CompareWith(*CheckResult) (cmp int, comparable bool)
}

func ParseCheckResult_FieldPathValue(pathStr, valueStr string) (CheckResult_FieldPathValue, error) {
	fp, err := ParseCheckResult_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CheckResult field path value from %s: %v", valueStr, err)
	}
	return fpv.(CheckResult_FieldPathValue), nil
}

func MustParseCheckResult_FieldPathValue(pathStr, valueStr string) CheckResult_FieldPathValue {
	fpv, err := ParseCheckResult_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type CheckResult_FieldTerminalPathValue struct {
	CheckResult_FieldTerminalPath
	value interface{}
}

var _ CheckResult_FieldPathValue = (*CheckResult_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CheckResult' as interface{}
func (fpv *CheckResult_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *CheckResult_FieldTerminalPathValue) AsObjectValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *CheckResult_FieldTerminalPathValue) AsGrantedPermissionsValue() ([]*permission.Reference, bool) {
	res, ok := fpv.value.([]*permission.Reference)
	return res, ok
}
func (fpv *CheckResult_FieldTerminalPathValue) AsConditionallyGrantedPermissionsValue() ([]*ConditionalGrant, bool) {
	res, ok := fpv.value.([]*ConditionalGrant)
	return res, ok
}

// SetTo stores value for selected field for object CheckResult
func (fpv *CheckResult_FieldTerminalPathValue) SetTo(target **CheckResult) {
	if *target == nil {
		*target = new(CheckResult)
	}
	switch fpv.selector {
	case CheckResult_FieldPathSelectorObject:
		(*target).Object = fpv.value.(string)
	case CheckResult_FieldPathSelectorGrantedPermissions:
		(*target).GrantedPermissions = fpv.value.([]*permission.Reference)
	case CheckResult_FieldPathSelectorConditionallyGrantedPermissions:
		(*target).ConditionallyGrantedPermissions = fpv.value.([]*ConditionalGrant)
	default:
		panic(fmt.Sprintf("Invalid selector for CheckResult: %d", fpv.selector))
	}
}

func (fpv *CheckResult_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CheckResult)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'CheckResult_FieldTerminalPathValue' with the value under path in 'CheckResult'.
func (fpv *CheckResult_FieldTerminalPathValue) CompareWith(source *CheckResult) (int, bool) {
	switch fpv.selector {
	case CheckResult_FieldPathSelectorObject:
		leftValue := fpv.value.(string)
		rightValue := source.GetObject()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case CheckResult_FieldPathSelectorGrantedPermissions:
		return 0, false
	case CheckResult_FieldPathSelectorConditionallyGrantedPermissions:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for CheckResult: %d", fpv.selector))
	}
}

func (fpv *CheckResult_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*CheckResult))
}

type CheckResult_FieldSubPathValue struct {
	CheckResult_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ CheckResult_FieldPathValue = (*CheckResult_FieldSubPathValue)(nil)

func (fpvs *CheckResult_FieldSubPathValue) AsConditionallyGrantedPermissionsPathValue() (ConditionalGrant_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ConditionalGrant_FieldPathValue)
	return res, ok
}

func (fpvs *CheckResult_FieldSubPathValue) SetTo(target **CheckResult) {
	if *target == nil {
		*target = new(CheckResult)
	}
	switch fpvs.Selector() {
	case CheckResult_FieldPathSelectorConditionallyGrantedPermissions:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for CheckResult: %d", fpvs.Selector()))
	}
}

func (fpvs *CheckResult_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CheckResult)
	fpvs.SetTo(&typedObject)
}

func (fpvs *CheckResult_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *CheckResult_FieldSubPathValue) CompareWith(source *CheckResult) (int, bool) {
	switch fpvs.Selector() {
	case CheckResult_FieldPathSelectorConditionallyGrantedPermissions:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for CheckResult: %d", fpvs.Selector()))
	}
}

func (fpvs *CheckResult_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*CheckResult))
}

// CheckResult_FieldPathArrayItemValue allows storing single item in Path-specific values for CheckResult according to their type
// Present only for array (repeated) types.
type CheckResult_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	CheckResult_FieldPath
	ContainsValue(*CheckResult) bool
}

// ParseCheckResult_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseCheckResult_FieldPathArrayItemValue(pathStr, valueStr string) (CheckResult_FieldPathArrayItemValue, error) {
	fp, err := ParseCheckResult_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CheckResult field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(CheckResult_FieldPathArrayItemValue), nil
}

func MustParseCheckResult_FieldPathArrayItemValue(pathStr, valueStr string) CheckResult_FieldPathArrayItemValue {
	fpaiv, err := ParseCheckResult_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type CheckResult_FieldTerminalPathArrayItemValue struct {
	CheckResult_FieldTerminalPath
	value interface{}
}

var _ CheckResult_FieldPathArrayItemValue = (*CheckResult_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object CheckResult as interface{}
func (fpaiv *CheckResult_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *CheckResult_FieldTerminalPathArrayItemValue) AsGrantedPermissionsItemValue() (*permission.Reference, bool) {
	res, ok := fpaiv.value.(*permission.Reference)
	return res, ok
}
func (fpaiv *CheckResult_FieldTerminalPathArrayItemValue) AsConditionallyGrantedPermissionsItemValue() (*ConditionalGrant, bool) {
	res, ok := fpaiv.value.(*ConditionalGrant)
	return res, ok
}

func (fpaiv *CheckResult_FieldTerminalPathArrayItemValue) GetSingle(source *CheckResult) (interface{}, bool) {
	return nil, false
}

func (fpaiv *CheckResult_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*CheckResult))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CheckResult'
func (fpaiv *CheckResult_FieldTerminalPathArrayItemValue) ContainsValue(source *CheckResult) bool {
	slice := fpaiv.CheckResult_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type CheckResult_FieldSubPathArrayItemValue struct {
	CheckResult_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *CheckResult_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *CheckResult_FieldSubPathArrayItemValue) AsConditionallyGrantedPermissionsPathItemValue() (ConditionalGrant_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ConditionalGrant_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CheckResult'
func (fpaivs *CheckResult_FieldSubPathArrayItemValue) ContainsValue(source *CheckResult) bool {
	switch fpaivs.Selector() {
	case CheckResult_FieldPathSelectorConditionallyGrantedPermissions:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for CheckResult: %d", fpaivs.Selector()))
	}
}

// CheckResult_FieldPathArrayOfValues allows storing slice of values for CheckResult fields according to their type
type CheckResult_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	CheckResult_FieldPath
}

func ParseCheckResult_FieldPathArrayOfValues(pathStr, valuesStr string) (CheckResult_FieldPathArrayOfValues, error) {
	fp, err := ParseCheckResult_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CheckResult field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(CheckResult_FieldPathArrayOfValues), nil
}

func MustParseCheckResult_FieldPathArrayOfValues(pathStr, valuesStr string) CheckResult_FieldPathArrayOfValues {
	fpaov, err := ParseCheckResult_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type CheckResult_FieldTerminalPathArrayOfValues struct {
	CheckResult_FieldTerminalPath
	values interface{}
}

var _ CheckResult_FieldPathArrayOfValues = (*CheckResult_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *CheckResult_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case CheckResult_FieldPathSelectorObject:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case CheckResult_FieldPathSelectorGrantedPermissions:
		for _, v := range fpaov.values.([][]*permission.Reference) {
			values = append(values, v)
		}
	case CheckResult_FieldPathSelectorConditionallyGrantedPermissions:
		for _, v := range fpaov.values.([][]*ConditionalGrant) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *CheckResult_FieldTerminalPathArrayOfValues) AsObjectArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *CheckResult_FieldTerminalPathArrayOfValues) AsGrantedPermissionsArrayOfValues() ([][]*permission.Reference, bool) {
	res, ok := fpaov.values.([][]*permission.Reference)
	return res, ok
}
func (fpaov *CheckResult_FieldTerminalPathArrayOfValues) AsConditionallyGrantedPermissionsArrayOfValues() ([][]*ConditionalGrant, bool) {
	res, ok := fpaov.values.([][]*ConditionalGrant)
	return res, ok
}

type CheckResult_FieldSubPathArrayOfValues struct {
	CheckResult_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ CheckResult_FieldPathArrayOfValues = (*CheckResult_FieldSubPathArrayOfValues)(nil)

func (fpsaov *CheckResult_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *CheckResult_FieldSubPathArrayOfValues) AsConditionallyGrantedPermissionsPathArrayOfValues() (ConditionalGrant_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ConditionalGrant_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type CheckPermissionsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() CheckPermissionsRequest_FieldPathSelector
	Get(source *CheckPermissionsRequest) []interface{}
	GetSingle(source *CheckPermissionsRequest) (interface{}, bool)
	ClearValue(item *CheckPermissionsRequest)

	// Those methods build corresponding CheckPermissionsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) CheckPermissionsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) CheckPermissionsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) CheckPermissionsRequest_FieldPathArrayItemValue
}

type CheckPermissionsRequest_FieldPathSelector int32

const (
	CheckPermissionsRequest_FieldPathSelectorMember    CheckPermissionsRequest_FieldPathSelector = 0
	CheckPermissionsRequest_FieldPathSelectorChecks    CheckPermissionsRequest_FieldPathSelector = 1
	CheckPermissionsRequest_FieldPathSelectorSkipCache CheckPermissionsRequest_FieldPathSelector = 2
)

func (s CheckPermissionsRequest_FieldPathSelector) String() string {
	switch s {
	case CheckPermissionsRequest_FieldPathSelectorMember:
		return "member"
	case CheckPermissionsRequest_FieldPathSelectorChecks:
		return "checks"
	case CheckPermissionsRequest_FieldPathSelectorSkipCache:
		return "skip_cache"
	default:
		panic(fmt.Sprintf("Invalid selector for CheckPermissionsRequest: %d", s))
	}
}

func BuildCheckPermissionsRequest_FieldPath(fp gotenobject.RawFieldPath) (CheckPermissionsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object CheckPermissionsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "member":
			return &CheckPermissionsRequest_FieldTerminalPath{selector: CheckPermissionsRequest_FieldPathSelectorMember}, nil
		case "checks":
			return &CheckPermissionsRequest_FieldTerminalPath{selector: CheckPermissionsRequest_FieldPathSelectorChecks}, nil
		case "skip_cache", "skipCache", "skip-cache":
			return &CheckPermissionsRequest_FieldTerminalPath{selector: CheckPermissionsRequest_FieldPathSelectorSkipCache}, nil
		}
	} else {
		switch fp[0] {
		case "checks":
			if subpath, err := BuildCheck_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &CheckPermissionsRequest_FieldSubPath{selector: CheckPermissionsRequest_FieldPathSelectorChecks, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object CheckPermissionsRequest", fp)
}

func ParseCheckPermissionsRequest_FieldPath(rawField string) (CheckPermissionsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildCheckPermissionsRequest_FieldPath(fp)
}

func MustParseCheckPermissionsRequest_FieldPath(rawField string) CheckPermissionsRequest_FieldPath {
	fp, err := ParseCheckPermissionsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type CheckPermissionsRequest_FieldTerminalPath struct {
	selector CheckPermissionsRequest_FieldPathSelector
}

var _ CheckPermissionsRequest_FieldPath = (*CheckPermissionsRequest_FieldTerminalPath)(nil)

func (fp *CheckPermissionsRequest_FieldTerminalPath) Selector() CheckPermissionsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *CheckPermissionsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *CheckPermissionsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source CheckPermissionsRequest
func (fp *CheckPermissionsRequest_FieldTerminalPath) Get(source *CheckPermissionsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case CheckPermissionsRequest_FieldPathSelectorMember:
			values = append(values, source.Member)
		case CheckPermissionsRequest_FieldPathSelectorChecks:
			for _, value := range source.GetChecks() {
				values = append(values, value)
			}
		case CheckPermissionsRequest_FieldPathSelectorSkipCache:
			values = append(values, source.SkipCache)
		default:
			panic(fmt.Sprintf("Invalid selector for CheckPermissionsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *CheckPermissionsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*CheckPermissionsRequest))
}

// GetSingle returns value pointed by specific field of from source CheckPermissionsRequest
func (fp *CheckPermissionsRequest_FieldTerminalPath) GetSingle(source *CheckPermissionsRequest) (interface{}, bool) {
	switch fp.selector {
	case CheckPermissionsRequest_FieldPathSelectorMember:
		return source.GetMember(), source != nil
	case CheckPermissionsRequest_FieldPathSelectorChecks:
		res := source.GetChecks()
		return res, res != nil
	case CheckPermissionsRequest_FieldPathSelectorSkipCache:
		return source.GetSkipCache(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for CheckPermissionsRequest: %d", fp.selector))
	}
}

func (fp *CheckPermissionsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*CheckPermissionsRequest))
}

// GetDefault returns a default value of the field type
func (fp *CheckPermissionsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case CheckPermissionsRequest_FieldPathSelectorMember:
		return ""
	case CheckPermissionsRequest_FieldPathSelectorChecks:
		return ([]*Check)(nil)
	case CheckPermissionsRequest_FieldPathSelectorSkipCache:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for CheckPermissionsRequest: %d", fp.selector))
	}
}

func (fp *CheckPermissionsRequest_FieldTerminalPath) ClearValue(item *CheckPermissionsRequest) {
	if item != nil {
		switch fp.selector {
		case CheckPermissionsRequest_FieldPathSelectorMember:
			item.Member = ""
		case CheckPermissionsRequest_FieldPathSelectorChecks:
			item.Checks = nil
		case CheckPermissionsRequest_FieldPathSelectorSkipCache:
			item.SkipCache = false
		default:
			panic(fmt.Sprintf("Invalid selector for CheckPermissionsRequest: %d", fp.selector))
		}
	}
}

func (fp *CheckPermissionsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*CheckPermissionsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *CheckPermissionsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == CheckPermissionsRequest_FieldPathSelectorMember ||
		fp.selector == CheckPermissionsRequest_FieldPathSelectorSkipCache
}

func (fp *CheckPermissionsRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *CheckPermissionsRequest_FieldTerminalPath) WithIValue(value interface{}) CheckPermissionsRequest_FieldPathValue {
	switch fp.selector {
	case CheckPermissionsRequest_FieldPathSelectorMember:
		return &CheckPermissionsRequest_FieldTerminalPathValue{CheckPermissionsRequest_FieldTerminalPath: *fp, value: value.(string)}
	case CheckPermissionsRequest_FieldPathSelectorChecks:
		return &CheckPermissionsRequest_FieldTerminalPathValue{CheckPermissionsRequest_FieldTerminalPath: *fp, value: value.([]*Check)}
	case CheckPermissionsRequest_FieldPathSelectorSkipCache:
		return &CheckPermissionsRequest_FieldTerminalPathValue{CheckPermissionsRequest_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for CheckPermissionsRequest: %d", fp.selector))
	}
}

func (fp *CheckPermissionsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *CheckPermissionsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) CheckPermissionsRequest_FieldPathArrayOfValues {
	fpaov := &CheckPermissionsRequest_FieldTerminalPathArrayOfValues{CheckPermissionsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case CheckPermissionsRequest_FieldPathSelectorMember:
		return &CheckPermissionsRequest_FieldTerminalPathArrayOfValues{CheckPermissionsRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case CheckPermissionsRequest_FieldPathSelectorChecks:
		return &CheckPermissionsRequest_FieldTerminalPathArrayOfValues{CheckPermissionsRequest_FieldTerminalPath: *fp, values: values.([][]*Check)}
	case CheckPermissionsRequest_FieldPathSelectorSkipCache:
		return &CheckPermissionsRequest_FieldTerminalPathArrayOfValues{CheckPermissionsRequest_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for CheckPermissionsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *CheckPermissionsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *CheckPermissionsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) CheckPermissionsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	case CheckPermissionsRequest_FieldPathSelectorChecks:
		return &CheckPermissionsRequest_FieldTerminalPathArrayItemValue{CheckPermissionsRequest_FieldTerminalPath: *fp, value: value.(*Check)}
	default:
		panic(fmt.Sprintf("Invalid selector for CheckPermissionsRequest: %d", fp.selector))
	}
}

func (fp *CheckPermissionsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type CheckPermissionsRequest_FieldSubPath struct {
	selector CheckPermissionsRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ CheckPermissionsRequest_FieldPath = (*CheckPermissionsRequest_FieldSubPath)(nil)

func (fps *CheckPermissionsRequest_FieldSubPath) Selector() CheckPermissionsRequest_FieldPathSelector {
	return fps.selector
}
func (fps *CheckPermissionsRequest_FieldSubPath) AsChecksSubPath() (Check_FieldPath, bool) {
	res, ok := fps.subPath.(Check_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *CheckPermissionsRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *CheckPermissionsRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source CheckPermissionsRequest
func (fps *CheckPermissionsRequest_FieldSubPath) Get(source *CheckPermissionsRequest) (values []interface{}) {
	if asCheckFieldPath, ok := fps.AsChecksSubPath(); ok {
		for _, item := range source.GetChecks() {
			values = append(values, asCheckFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for CheckPermissionsRequest: %d", fps.selector))
	}
	return
}

func (fps *CheckPermissionsRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*CheckPermissionsRequest))
}

// GetSingle returns value of selected field from source CheckPermissionsRequest
func (fps *CheckPermissionsRequest_FieldSubPath) GetSingle(source *CheckPermissionsRequest) (interface{}, bool) {
	switch fps.selector {
	case CheckPermissionsRequest_FieldPathSelectorChecks:
		if len(source.GetChecks()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetChecks()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for CheckPermissionsRequest: %d", fps.selector))
	}
}

func (fps *CheckPermissionsRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*CheckPermissionsRequest))
}

// GetDefault returns a default value of the field type
func (fps *CheckPermissionsRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *CheckPermissionsRequest_FieldSubPath) ClearValue(item *CheckPermissionsRequest) {
	if item != nil {
		switch fps.selector {
		case CheckPermissionsRequest_FieldPathSelectorChecks:
			for _, subItem := range item.Checks {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for CheckPermissionsRequest: %d", fps.selector))
		}
	}
}

func (fps *CheckPermissionsRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*CheckPermissionsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *CheckPermissionsRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *CheckPermissionsRequest_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&CheckPermissionsRequest_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *CheckPermissionsRequest_FieldSubPath) WithIValue(value interface{}) CheckPermissionsRequest_FieldPathValue {
	return &CheckPermissionsRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *CheckPermissionsRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *CheckPermissionsRequest_FieldSubPath) WithIArrayOfValues(values interface{}) CheckPermissionsRequest_FieldPathArrayOfValues {
	return &CheckPermissionsRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *CheckPermissionsRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *CheckPermissionsRequest_FieldSubPath) WithIArrayItemValue(value interface{}) CheckPermissionsRequest_FieldPathArrayItemValue {
	return &CheckPermissionsRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *CheckPermissionsRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// CheckPermissionsRequest_FieldPathValue allows storing values for CheckPermissionsRequest fields according to their type
type CheckPermissionsRequest_FieldPathValue interface {
	CheckPermissionsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **CheckPermissionsRequest)
	CompareWith(*CheckPermissionsRequest) (cmp int, comparable bool)
}

func ParseCheckPermissionsRequest_FieldPathValue(pathStr, valueStr string) (CheckPermissionsRequest_FieldPathValue, error) {
	fp, err := ParseCheckPermissionsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CheckPermissionsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(CheckPermissionsRequest_FieldPathValue), nil
}

func MustParseCheckPermissionsRequest_FieldPathValue(pathStr, valueStr string) CheckPermissionsRequest_FieldPathValue {
	fpv, err := ParseCheckPermissionsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type CheckPermissionsRequest_FieldTerminalPathValue struct {
	CheckPermissionsRequest_FieldTerminalPath
	value interface{}
}

var _ CheckPermissionsRequest_FieldPathValue = (*CheckPermissionsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CheckPermissionsRequest' as interface{}
func (fpv *CheckPermissionsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *CheckPermissionsRequest_FieldTerminalPathValue) AsMemberValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *CheckPermissionsRequest_FieldTerminalPathValue) AsChecksValue() ([]*Check, bool) {
	res, ok := fpv.value.([]*Check)
	return res, ok
}
func (fpv *CheckPermissionsRequest_FieldTerminalPathValue) AsSkipCacheValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object CheckPermissionsRequest
func (fpv *CheckPermissionsRequest_FieldTerminalPathValue) SetTo(target **CheckPermissionsRequest) {
	if *target == nil {
		*target = new(CheckPermissionsRequest)
	}
	switch fpv.selector {
	case CheckPermissionsRequest_FieldPathSelectorMember:
		(*target).Member = fpv.value.(string)
	case CheckPermissionsRequest_FieldPathSelectorChecks:
		(*target).Checks = fpv.value.([]*Check)
	case CheckPermissionsRequest_FieldPathSelectorSkipCache:
		(*target).SkipCache = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for CheckPermissionsRequest: %d", fpv.selector))
	}
}

func (fpv *CheckPermissionsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CheckPermissionsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'CheckPermissionsRequest_FieldTerminalPathValue' with the value under path in 'CheckPermissionsRequest'.
func (fpv *CheckPermissionsRequest_FieldTerminalPathValue) CompareWith(source *CheckPermissionsRequest) (int, bool) {
	switch fpv.selector {
	case CheckPermissionsRequest_FieldPathSelectorMember:
		leftValue := fpv.value.(string)
		rightValue := source.GetMember()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case CheckPermissionsRequest_FieldPathSelectorChecks:
		return 0, false
	case CheckPermissionsRequest_FieldPathSelectorSkipCache:
		leftValue := fpv.value.(bool)
		rightValue := source.GetSkipCache()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for CheckPermissionsRequest: %d", fpv.selector))
	}
}

func (fpv *CheckPermissionsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*CheckPermissionsRequest))
}

type CheckPermissionsRequest_FieldSubPathValue struct {
	CheckPermissionsRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ CheckPermissionsRequest_FieldPathValue = (*CheckPermissionsRequest_FieldSubPathValue)(nil)

func (fpvs *CheckPermissionsRequest_FieldSubPathValue) AsChecksPathValue() (Check_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(Check_FieldPathValue)
	return res, ok
}

func (fpvs *CheckPermissionsRequest_FieldSubPathValue) SetTo(target **CheckPermissionsRequest) {
	if *target == nil {
		*target = new(CheckPermissionsRequest)
	}
	switch fpvs.Selector() {
	case CheckPermissionsRequest_FieldPathSelectorChecks:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for CheckPermissionsRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CheckPermissionsRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CheckPermissionsRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *CheckPermissionsRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *CheckPermissionsRequest_FieldSubPathValue) CompareWith(source *CheckPermissionsRequest) (int, bool) {
	switch fpvs.Selector() {
	case CheckPermissionsRequest_FieldPathSelectorChecks:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for CheckPermissionsRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CheckPermissionsRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*CheckPermissionsRequest))
}

// CheckPermissionsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for CheckPermissionsRequest according to their type
// Present only for array (repeated) types.
type CheckPermissionsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	CheckPermissionsRequest_FieldPath
	ContainsValue(*CheckPermissionsRequest) bool
}

// ParseCheckPermissionsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseCheckPermissionsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (CheckPermissionsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseCheckPermissionsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CheckPermissionsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(CheckPermissionsRequest_FieldPathArrayItemValue), nil
}

func MustParseCheckPermissionsRequest_FieldPathArrayItemValue(pathStr, valueStr string) CheckPermissionsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseCheckPermissionsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type CheckPermissionsRequest_FieldTerminalPathArrayItemValue struct {
	CheckPermissionsRequest_FieldTerminalPath
	value interface{}
}

var _ CheckPermissionsRequest_FieldPathArrayItemValue = (*CheckPermissionsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object CheckPermissionsRequest as interface{}
func (fpaiv *CheckPermissionsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *CheckPermissionsRequest_FieldTerminalPathArrayItemValue) AsChecksItemValue() (*Check, bool) {
	res, ok := fpaiv.value.(*Check)
	return res, ok
}

func (fpaiv *CheckPermissionsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *CheckPermissionsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *CheckPermissionsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*CheckPermissionsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CheckPermissionsRequest'
func (fpaiv *CheckPermissionsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *CheckPermissionsRequest) bool {
	slice := fpaiv.CheckPermissionsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type CheckPermissionsRequest_FieldSubPathArrayItemValue struct {
	CheckPermissionsRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *CheckPermissionsRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *CheckPermissionsRequest_FieldSubPathArrayItemValue) AsChecksPathItemValue() (Check_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(Check_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CheckPermissionsRequest'
func (fpaivs *CheckPermissionsRequest_FieldSubPathArrayItemValue) ContainsValue(source *CheckPermissionsRequest) bool {
	switch fpaivs.Selector() {
	case CheckPermissionsRequest_FieldPathSelectorChecks:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for CheckPermissionsRequest: %d", fpaivs.Selector()))
	}
}

// CheckPermissionsRequest_FieldPathArrayOfValues allows storing slice of values for CheckPermissionsRequest fields according to their type
type CheckPermissionsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	CheckPermissionsRequest_FieldPath
}

func ParseCheckPermissionsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (CheckPermissionsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseCheckPermissionsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CheckPermissionsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(CheckPermissionsRequest_FieldPathArrayOfValues), nil
}

func MustParseCheckPermissionsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) CheckPermissionsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseCheckPermissionsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type CheckPermissionsRequest_FieldTerminalPathArrayOfValues struct {
	CheckPermissionsRequest_FieldTerminalPath
	values interface{}
}

var _ CheckPermissionsRequest_FieldPathArrayOfValues = (*CheckPermissionsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *CheckPermissionsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case CheckPermissionsRequest_FieldPathSelectorMember:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case CheckPermissionsRequest_FieldPathSelectorChecks:
		for _, v := range fpaov.values.([][]*Check) {
			values = append(values, v)
		}
	case CheckPermissionsRequest_FieldPathSelectorSkipCache:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *CheckPermissionsRequest_FieldTerminalPathArrayOfValues) AsMemberArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *CheckPermissionsRequest_FieldTerminalPathArrayOfValues) AsChecksArrayOfValues() ([][]*Check, bool) {
	res, ok := fpaov.values.([][]*Check)
	return res, ok
}
func (fpaov *CheckPermissionsRequest_FieldTerminalPathArrayOfValues) AsSkipCacheArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

type CheckPermissionsRequest_FieldSubPathArrayOfValues struct {
	CheckPermissionsRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ CheckPermissionsRequest_FieldPathArrayOfValues = (*CheckPermissionsRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *CheckPermissionsRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *CheckPermissionsRequest_FieldSubPathArrayOfValues) AsChecksPathArrayOfValues() (Check_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(Check_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type CheckPermissionsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() CheckPermissionsResponse_FieldPathSelector
	Get(source *CheckPermissionsResponse) []interface{}
	GetSingle(source *CheckPermissionsResponse) (interface{}, bool)
	ClearValue(item *CheckPermissionsResponse)

	// Those methods build corresponding CheckPermissionsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) CheckPermissionsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) CheckPermissionsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) CheckPermissionsResponse_FieldPathArrayItemValue
}

type CheckPermissionsResponse_FieldPathSelector int32

const (
	CheckPermissionsResponse_FieldPathSelectorCheckResults CheckPermissionsResponse_FieldPathSelector = 0
)

func (s CheckPermissionsResponse_FieldPathSelector) String() string {
	switch s {
	case CheckPermissionsResponse_FieldPathSelectorCheckResults:
		return "check_results"
	default:
		panic(fmt.Sprintf("Invalid selector for CheckPermissionsResponse: %d", s))
	}
}

func BuildCheckPermissionsResponse_FieldPath(fp gotenobject.RawFieldPath) (CheckPermissionsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object CheckPermissionsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "check_results", "checkResults", "check-results":
			return &CheckPermissionsResponse_FieldTerminalPath{selector: CheckPermissionsResponse_FieldPathSelectorCheckResults}, nil
		}
	} else {
		switch fp[0] {
		case "check_results", "checkResults", "check-results":
			if subpath, err := BuildCheckResult_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &CheckPermissionsResponse_FieldSubPath{selector: CheckPermissionsResponse_FieldPathSelectorCheckResults, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object CheckPermissionsResponse", fp)
}

func ParseCheckPermissionsResponse_FieldPath(rawField string) (CheckPermissionsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildCheckPermissionsResponse_FieldPath(fp)
}

func MustParseCheckPermissionsResponse_FieldPath(rawField string) CheckPermissionsResponse_FieldPath {
	fp, err := ParseCheckPermissionsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type CheckPermissionsResponse_FieldTerminalPath struct {
	selector CheckPermissionsResponse_FieldPathSelector
}

var _ CheckPermissionsResponse_FieldPath = (*CheckPermissionsResponse_FieldTerminalPath)(nil)

func (fp *CheckPermissionsResponse_FieldTerminalPath) Selector() CheckPermissionsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *CheckPermissionsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *CheckPermissionsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source CheckPermissionsResponse
func (fp *CheckPermissionsResponse_FieldTerminalPath) Get(source *CheckPermissionsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case CheckPermissionsResponse_FieldPathSelectorCheckResults:
			for _, value := range source.GetCheckResults() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for CheckPermissionsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *CheckPermissionsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*CheckPermissionsResponse))
}

// GetSingle returns value pointed by specific field of from source CheckPermissionsResponse
func (fp *CheckPermissionsResponse_FieldTerminalPath) GetSingle(source *CheckPermissionsResponse) (interface{}, bool) {
	switch fp.selector {
	case CheckPermissionsResponse_FieldPathSelectorCheckResults:
		res := source.GetCheckResults()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for CheckPermissionsResponse: %d", fp.selector))
	}
}

func (fp *CheckPermissionsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*CheckPermissionsResponse))
}

// GetDefault returns a default value of the field type
func (fp *CheckPermissionsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case CheckPermissionsResponse_FieldPathSelectorCheckResults:
		return ([]*CheckResult)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for CheckPermissionsResponse: %d", fp.selector))
	}
}

func (fp *CheckPermissionsResponse_FieldTerminalPath) ClearValue(item *CheckPermissionsResponse) {
	if item != nil {
		switch fp.selector {
		case CheckPermissionsResponse_FieldPathSelectorCheckResults:
			item.CheckResults = nil
		default:
			panic(fmt.Sprintf("Invalid selector for CheckPermissionsResponse: %d", fp.selector))
		}
	}
}

func (fp *CheckPermissionsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*CheckPermissionsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *CheckPermissionsResponse_FieldTerminalPath) IsLeaf() bool {
	return false
}

func (fp *CheckPermissionsResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *CheckPermissionsResponse_FieldTerminalPath) WithIValue(value interface{}) CheckPermissionsResponse_FieldPathValue {
	switch fp.selector {
	case CheckPermissionsResponse_FieldPathSelectorCheckResults:
		return &CheckPermissionsResponse_FieldTerminalPathValue{CheckPermissionsResponse_FieldTerminalPath: *fp, value: value.([]*CheckResult)}
	default:
		panic(fmt.Sprintf("Invalid selector for CheckPermissionsResponse: %d", fp.selector))
	}
}

func (fp *CheckPermissionsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *CheckPermissionsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) CheckPermissionsResponse_FieldPathArrayOfValues {
	fpaov := &CheckPermissionsResponse_FieldTerminalPathArrayOfValues{CheckPermissionsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case CheckPermissionsResponse_FieldPathSelectorCheckResults:
		return &CheckPermissionsResponse_FieldTerminalPathArrayOfValues{CheckPermissionsResponse_FieldTerminalPath: *fp, values: values.([][]*CheckResult)}
	default:
		panic(fmt.Sprintf("Invalid selector for CheckPermissionsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *CheckPermissionsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *CheckPermissionsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) CheckPermissionsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case CheckPermissionsResponse_FieldPathSelectorCheckResults:
		return &CheckPermissionsResponse_FieldTerminalPathArrayItemValue{CheckPermissionsResponse_FieldTerminalPath: *fp, value: value.(*CheckResult)}
	default:
		panic(fmt.Sprintf("Invalid selector for CheckPermissionsResponse: %d", fp.selector))
	}
}

func (fp *CheckPermissionsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type CheckPermissionsResponse_FieldSubPath struct {
	selector CheckPermissionsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ CheckPermissionsResponse_FieldPath = (*CheckPermissionsResponse_FieldSubPath)(nil)

func (fps *CheckPermissionsResponse_FieldSubPath) Selector() CheckPermissionsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *CheckPermissionsResponse_FieldSubPath) AsCheckResultsSubPath() (CheckResult_FieldPath, bool) {
	res, ok := fps.subPath.(CheckResult_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *CheckPermissionsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *CheckPermissionsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source CheckPermissionsResponse
func (fps *CheckPermissionsResponse_FieldSubPath) Get(source *CheckPermissionsResponse) (values []interface{}) {
	if asCheckResultFieldPath, ok := fps.AsCheckResultsSubPath(); ok {
		for _, item := range source.GetCheckResults() {
			values = append(values, asCheckResultFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for CheckPermissionsResponse: %d", fps.selector))
	}
	return
}

func (fps *CheckPermissionsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*CheckPermissionsResponse))
}

// GetSingle returns value of selected field from source CheckPermissionsResponse
func (fps *CheckPermissionsResponse_FieldSubPath) GetSingle(source *CheckPermissionsResponse) (interface{}, bool) {
	switch fps.selector {
	case CheckPermissionsResponse_FieldPathSelectorCheckResults:
		if len(source.GetCheckResults()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetCheckResults()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for CheckPermissionsResponse: %d", fps.selector))
	}
}

func (fps *CheckPermissionsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*CheckPermissionsResponse))
}

// GetDefault returns a default value of the field type
func (fps *CheckPermissionsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *CheckPermissionsResponse_FieldSubPath) ClearValue(item *CheckPermissionsResponse) {
	if item != nil {
		switch fps.selector {
		case CheckPermissionsResponse_FieldPathSelectorCheckResults:
			for _, subItem := range item.CheckResults {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for CheckPermissionsResponse: %d", fps.selector))
		}
	}
}

func (fps *CheckPermissionsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*CheckPermissionsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *CheckPermissionsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *CheckPermissionsResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&CheckPermissionsResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *CheckPermissionsResponse_FieldSubPath) WithIValue(value interface{}) CheckPermissionsResponse_FieldPathValue {
	return &CheckPermissionsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *CheckPermissionsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *CheckPermissionsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) CheckPermissionsResponse_FieldPathArrayOfValues {
	return &CheckPermissionsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *CheckPermissionsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *CheckPermissionsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) CheckPermissionsResponse_FieldPathArrayItemValue {
	return &CheckPermissionsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *CheckPermissionsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// CheckPermissionsResponse_FieldPathValue allows storing values for CheckPermissionsResponse fields according to their type
type CheckPermissionsResponse_FieldPathValue interface {
	CheckPermissionsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **CheckPermissionsResponse)
	CompareWith(*CheckPermissionsResponse) (cmp int, comparable bool)
}

func ParseCheckPermissionsResponse_FieldPathValue(pathStr, valueStr string) (CheckPermissionsResponse_FieldPathValue, error) {
	fp, err := ParseCheckPermissionsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CheckPermissionsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(CheckPermissionsResponse_FieldPathValue), nil
}

func MustParseCheckPermissionsResponse_FieldPathValue(pathStr, valueStr string) CheckPermissionsResponse_FieldPathValue {
	fpv, err := ParseCheckPermissionsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type CheckPermissionsResponse_FieldTerminalPathValue struct {
	CheckPermissionsResponse_FieldTerminalPath
	value interface{}
}

var _ CheckPermissionsResponse_FieldPathValue = (*CheckPermissionsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CheckPermissionsResponse' as interface{}
func (fpv *CheckPermissionsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *CheckPermissionsResponse_FieldTerminalPathValue) AsCheckResultsValue() ([]*CheckResult, bool) {
	res, ok := fpv.value.([]*CheckResult)
	return res, ok
}

// SetTo stores value for selected field for object CheckPermissionsResponse
func (fpv *CheckPermissionsResponse_FieldTerminalPathValue) SetTo(target **CheckPermissionsResponse) {
	if *target == nil {
		*target = new(CheckPermissionsResponse)
	}
	switch fpv.selector {
	case CheckPermissionsResponse_FieldPathSelectorCheckResults:
		(*target).CheckResults = fpv.value.([]*CheckResult)
	default:
		panic(fmt.Sprintf("Invalid selector for CheckPermissionsResponse: %d", fpv.selector))
	}
}

func (fpv *CheckPermissionsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CheckPermissionsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'CheckPermissionsResponse_FieldTerminalPathValue' with the value under path in 'CheckPermissionsResponse'.
func (fpv *CheckPermissionsResponse_FieldTerminalPathValue) CompareWith(source *CheckPermissionsResponse) (int, bool) {
	switch fpv.selector {
	case CheckPermissionsResponse_FieldPathSelectorCheckResults:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for CheckPermissionsResponse: %d", fpv.selector))
	}
}

func (fpv *CheckPermissionsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*CheckPermissionsResponse))
}

type CheckPermissionsResponse_FieldSubPathValue struct {
	CheckPermissionsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ CheckPermissionsResponse_FieldPathValue = (*CheckPermissionsResponse_FieldSubPathValue)(nil)

func (fpvs *CheckPermissionsResponse_FieldSubPathValue) AsCheckResultsPathValue() (CheckResult_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(CheckResult_FieldPathValue)
	return res, ok
}

func (fpvs *CheckPermissionsResponse_FieldSubPathValue) SetTo(target **CheckPermissionsResponse) {
	if *target == nil {
		*target = new(CheckPermissionsResponse)
	}
	switch fpvs.Selector() {
	case CheckPermissionsResponse_FieldPathSelectorCheckResults:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for CheckPermissionsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *CheckPermissionsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CheckPermissionsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *CheckPermissionsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *CheckPermissionsResponse_FieldSubPathValue) CompareWith(source *CheckPermissionsResponse) (int, bool) {
	switch fpvs.Selector() {
	case CheckPermissionsResponse_FieldPathSelectorCheckResults:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for CheckPermissionsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *CheckPermissionsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*CheckPermissionsResponse))
}

// CheckPermissionsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for CheckPermissionsResponse according to their type
// Present only for array (repeated) types.
type CheckPermissionsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	CheckPermissionsResponse_FieldPath
	ContainsValue(*CheckPermissionsResponse) bool
}

// ParseCheckPermissionsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseCheckPermissionsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (CheckPermissionsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseCheckPermissionsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CheckPermissionsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(CheckPermissionsResponse_FieldPathArrayItemValue), nil
}

func MustParseCheckPermissionsResponse_FieldPathArrayItemValue(pathStr, valueStr string) CheckPermissionsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseCheckPermissionsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type CheckPermissionsResponse_FieldTerminalPathArrayItemValue struct {
	CheckPermissionsResponse_FieldTerminalPath
	value interface{}
}

var _ CheckPermissionsResponse_FieldPathArrayItemValue = (*CheckPermissionsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object CheckPermissionsResponse as interface{}
func (fpaiv *CheckPermissionsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *CheckPermissionsResponse_FieldTerminalPathArrayItemValue) AsCheckResultsItemValue() (*CheckResult, bool) {
	res, ok := fpaiv.value.(*CheckResult)
	return res, ok
}

func (fpaiv *CheckPermissionsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *CheckPermissionsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *CheckPermissionsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*CheckPermissionsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CheckPermissionsResponse'
func (fpaiv *CheckPermissionsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *CheckPermissionsResponse) bool {
	slice := fpaiv.CheckPermissionsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type CheckPermissionsResponse_FieldSubPathArrayItemValue struct {
	CheckPermissionsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *CheckPermissionsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *CheckPermissionsResponse_FieldSubPathArrayItemValue) AsCheckResultsPathItemValue() (CheckResult_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(CheckResult_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CheckPermissionsResponse'
func (fpaivs *CheckPermissionsResponse_FieldSubPathArrayItemValue) ContainsValue(source *CheckPermissionsResponse) bool {
	switch fpaivs.Selector() {
	case CheckPermissionsResponse_FieldPathSelectorCheckResults:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for CheckPermissionsResponse: %d", fpaivs.Selector()))
	}
}

// CheckPermissionsResponse_FieldPathArrayOfValues allows storing slice of values for CheckPermissionsResponse fields according to their type
type CheckPermissionsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	CheckPermissionsResponse_FieldPath
}

func ParseCheckPermissionsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (CheckPermissionsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseCheckPermissionsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CheckPermissionsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(CheckPermissionsResponse_FieldPathArrayOfValues), nil
}

func MustParseCheckPermissionsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) CheckPermissionsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseCheckPermissionsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type CheckPermissionsResponse_FieldTerminalPathArrayOfValues struct {
	CheckPermissionsResponse_FieldTerminalPath
	values interface{}
}

var _ CheckPermissionsResponse_FieldPathArrayOfValues = (*CheckPermissionsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *CheckPermissionsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case CheckPermissionsResponse_FieldPathSelectorCheckResults:
		for _, v := range fpaov.values.([][]*CheckResult) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *CheckPermissionsResponse_FieldTerminalPathArrayOfValues) AsCheckResultsArrayOfValues() ([][]*CheckResult, bool) {
	res, ok := fpaov.values.([][]*CheckResult)
	return res, ok
}

type CheckPermissionsResponse_FieldSubPathArrayOfValues struct {
	CheckPermissionsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ CheckPermissionsResponse_FieldPathArrayOfValues = (*CheckPermissionsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *CheckPermissionsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *CheckPermissionsResponse_FieldSubPathArrayOfValues) AsCheckResultsPathArrayOfValues() (CheckResult_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(CheckResult_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type CheckMyPermissionsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() CheckMyPermissionsRequest_FieldPathSelector
	Get(source *CheckMyPermissionsRequest) []interface{}
	GetSingle(source *CheckMyPermissionsRequest) (interface{}, bool)
	ClearValue(item *CheckMyPermissionsRequest)

	// Those methods build corresponding CheckMyPermissionsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) CheckMyPermissionsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) CheckMyPermissionsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) CheckMyPermissionsRequest_FieldPathArrayItemValue
}

type CheckMyPermissionsRequest_FieldPathSelector int32

const (
	CheckMyPermissionsRequest_FieldPathSelectorChecks    CheckMyPermissionsRequest_FieldPathSelector = 0
	CheckMyPermissionsRequest_FieldPathSelectorSkipCache CheckMyPermissionsRequest_FieldPathSelector = 1
)

func (s CheckMyPermissionsRequest_FieldPathSelector) String() string {
	switch s {
	case CheckMyPermissionsRequest_FieldPathSelectorChecks:
		return "checks"
	case CheckMyPermissionsRequest_FieldPathSelectorSkipCache:
		return "skip_cache"
	default:
		panic(fmt.Sprintf("Invalid selector for CheckMyPermissionsRequest: %d", s))
	}
}

func BuildCheckMyPermissionsRequest_FieldPath(fp gotenobject.RawFieldPath) (CheckMyPermissionsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object CheckMyPermissionsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "checks":
			return &CheckMyPermissionsRequest_FieldTerminalPath{selector: CheckMyPermissionsRequest_FieldPathSelectorChecks}, nil
		case "skip_cache", "skipCache", "skip-cache":
			return &CheckMyPermissionsRequest_FieldTerminalPath{selector: CheckMyPermissionsRequest_FieldPathSelectorSkipCache}, nil
		}
	} else {
		switch fp[0] {
		case "checks":
			if subpath, err := BuildCheck_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &CheckMyPermissionsRequest_FieldSubPath{selector: CheckMyPermissionsRequest_FieldPathSelectorChecks, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object CheckMyPermissionsRequest", fp)
}

func ParseCheckMyPermissionsRequest_FieldPath(rawField string) (CheckMyPermissionsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildCheckMyPermissionsRequest_FieldPath(fp)
}

func MustParseCheckMyPermissionsRequest_FieldPath(rawField string) CheckMyPermissionsRequest_FieldPath {
	fp, err := ParseCheckMyPermissionsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type CheckMyPermissionsRequest_FieldTerminalPath struct {
	selector CheckMyPermissionsRequest_FieldPathSelector
}

var _ CheckMyPermissionsRequest_FieldPath = (*CheckMyPermissionsRequest_FieldTerminalPath)(nil)

func (fp *CheckMyPermissionsRequest_FieldTerminalPath) Selector() CheckMyPermissionsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *CheckMyPermissionsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *CheckMyPermissionsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source CheckMyPermissionsRequest
func (fp *CheckMyPermissionsRequest_FieldTerminalPath) Get(source *CheckMyPermissionsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case CheckMyPermissionsRequest_FieldPathSelectorChecks:
			for _, value := range source.GetChecks() {
				values = append(values, value)
			}
		case CheckMyPermissionsRequest_FieldPathSelectorSkipCache:
			values = append(values, source.SkipCache)
		default:
			panic(fmt.Sprintf("Invalid selector for CheckMyPermissionsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *CheckMyPermissionsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*CheckMyPermissionsRequest))
}

// GetSingle returns value pointed by specific field of from source CheckMyPermissionsRequest
func (fp *CheckMyPermissionsRequest_FieldTerminalPath) GetSingle(source *CheckMyPermissionsRequest) (interface{}, bool) {
	switch fp.selector {
	case CheckMyPermissionsRequest_FieldPathSelectorChecks:
		res := source.GetChecks()
		return res, res != nil
	case CheckMyPermissionsRequest_FieldPathSelectorSkipCache:
		return source.GetSkipCache(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for CheckMyPermissionsRequest: %d", fp.selector))
	}
}

func (fp *CheckMyPermissionsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*CheckMyPermissionsRequest))
}

// GetDefault returns a default value of the field type
func (fp *CheckMyPermissionsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case CheckMyPermissionsRequest_FieldPathSelectorChecks:
		return ([]*Check)(nil)
	case CheckMyPermissionsRequest_FieldPathSelectorSkipCache:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for CheckMyPermissionsRequest: %d", fp.selector))
	}
}

func (fp *CheckMyPermissionsRequest_FieldTerminalPath) ClearValue(item *CheckMyPermissionsRequest) {
	if item != nil {
		switch fp.selector {
		case CheckMyPermissionsRequest_FieldPathSelectorChecks:
			item.Checks = nil
		case CheckMyPermissionsRequest_FieldPathSelectorSkipCache:
			item.SkipCache = false
		default:
			panic(fmt.Sprintf("Invalid selector for CheckMyPermissionsRequest: %d", fp.selector))
		}
	}
}

func (fp *CheckMyPermissionsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*CheckMyPermissionsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *CheckMyPermissionsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == CheckMyPermissionsRequest_FieldPathSelectorSkipCache
}

func (fp *CheckMyPermissionsRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *CheckMyPermissionsRequest_FieldTerminalPath) WithIValue(value interface{}) CheckMyPermissionsRequest_FieldPathValue {
	switch fp.selector {
	case CheckMyPermissionsRequest_FieldPathSelectorChecks:
		return &CheckMyPermissionsRequest_FieldTerminalPathValue{CheckMyPermissionsRequest_FieldTerminalPath: *fp, value: value.([]*Check)}
	case CheckMyPermissionsRequest_FieldPathSelectorSkipCache:
		return &CheckMyPermissionsRequest_FieldTerminalPathValue{CheckMyPermissionsRequest_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for CheckMyPermissionsRequest: %d", fp.selector))
	}
}

func (fp *CheckMyPermissionsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *CheckMyPermissionsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) CheckMyPermissionsRequest_FieldPathArrayOfValues {
	fpaov := &CheckMyPermissionsRequest_FieldTerminalPathArrayOfValues{CheckMyPermissionsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case CheckMyPermissionsRequest_FieldPathSelectorChecks:
		return &CheckMyPermissionsRequest_FieldTerminalPathArrayOfValues{CheckMyPermissionsRequest_FieldTerminalPath: *fp, values: values.([][]*Check)}
	case CheckMyPermissionsRequest_FieldPathSelectorSkipCache:
		return &CheckMyPermissionsRequest_FieldTerminalPathArrayOfValues{CheckMyPermissionsRequest_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for CheckMyPermissionsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *CheckMyPermissionsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *CheckMyPermissionsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) CheckMyPermissionsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	case CheckMyPermissionsRequest_FieldPathSelectorChecks:
		return &CheckMyPermissionsRequest_FieldTerminalPathArrayItemValue{CheckMyPermissionsRequest_FieldTerminalPath: *fp, value: value.(*Check)}
	default:
		panic(fmt.Sprintf("Invalid selector for CheckMyPermissionsRequest: %d", fp.selector))
	}
}

func (fp *CheckMyPermissionsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type CheckMyPermissionsRequest_FieldSubPath struct {
	selector CheckMyPermissionsRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ CheckMyPermissionsRequest_FieldPath = (*CheckMyPermissionsRequest_FieldSubPath)(nil)

func (fps *CheckMyPermissionsRequest_FieldSubPath) Selector() CheckMyPermissionsRequest_FieldPathSelector {
	return fps.selector
}
func (fps *CheckMyPermissionsRequest_FieldSubPath) AsChecksSubPath() (Check_FieldPath, bool) {
	res, ok := fps.subPath.(Check_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *CheckMyPermissionsRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *CheckMyPermissionsRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source CheckMyPermissionsRequest
func (fps *CheckMyPermissionsRequest_FieldSubPath) Get(source *CheckMyPermissionsRequest) (values []interface{}) {
	if asCheckFieldPath, ok := fps.AsChecksSubPath(); ok {
		for _, item := range source.GetChecks() {
			values = append(values, asCheckFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for CheckMyPermissionsRequest: %d", fps.selector))
	}
	return
}

func (fps *CheckMyPermissionsRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*CheckMyPermissionsRequest))
}

// GetSingle returns value of selected field from source CheckMyPermissionsRequest
func (fps *CheckMyPermissionsRequest_FieldSubPath) GetSingle(source *CheckMyPermissionsRequest) (interface{}, bool) {
	switch fps.selector {
	case CheckMyPermissionsRequest_FieldPathSelectorChecks:
		if len(source.GetChecks()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetChecks()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for CheckMyPermissionsRequest: %d", fps.selector))
	}
}

func (fps *CheckMyPermissionsRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*CheckMyPermissionsRequest))
}

// GetDefault returns a default value of the field type
func (fps *CheckMyPermissionsRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *CheckMyPermissionsRequest_FieldSubPath) ClearValue(item *CheckMyPermissionsRequest) {
	if item != nil {
		switch fps.selector {
		case CheckMyPermissionsRequest_FieldPathSelectorChecks:
			for _, subItem := range item.Checks {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for CheckMyPermissionsRequest: %d", fps.selector))
		}
	}
}

func (fps *CheckMyPermissionsRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*CheckMyPermissionsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *CheckMyPermissionsRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *CheckMyPermissionsRequest_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&CheckMyPermissionsRequest_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *CheckMyPermissionsRequest_FieldSubPath) WithIValue(value interface{}) CheckMyPermissionsRequest_FieldPathValue {
	return &CheckMyPermissionsRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *CheckMyPermissionsRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *CheckMyPermissionsRequest_FieldSubPath) WithIArrayOfValues(values interface{}) CheckMyPermissionsRequest_FieldPathArrayOfValues {
	return &CheckMyPermissionsRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *CheckMyPermissionsRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *CheckMyPermissionsRequest_FieldSubPath) WithIArrayItemValue(value interface{}) CheckMyPermissionsRequest_FieldPathArrayItemValue {
	return &CheckMyPermissionsRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *CheckMyPermissionsRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// CheckMyPermissionsRequest_FieldPathValue allows storing values for CheckMyPermissionsRequest fields according to their type
type CheckMyPermissionsRequest_FieldPathValue interface {
	CheckMyPermissionsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **CheckMyPermissionsRequest)
	CompareWith(*CheckMyPermissionsRequest) (cmp int, comparable bool)
}

func ParseCheckMyPermissionsRequest_FieldPathValue(pathStr, valueStr string) (CheckMyPermissionsRequest_FieldPathValue, error) {
	fp, err := ParseCheckMyPermissionsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CheckMyPermissionsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(CheckMyPermissionsRequest_FieldPathValue), nil
}

func MustParseCheckMyPermissionsRequest_FieldPathValue(pathStr, valueStr string) CheckMyPermissionsRequest_FieldPathValue {
	fpv, err := ParseCheckMyPermissionsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type CheckMyPermissionsRequest_FieldTerminalPathValue struct {
	CheckMyPermissionsRequest_FieldTerminalPath
	value interface{}
}

var _ CheckMyPermissionsRequest_FieldPathValue = (*CheckMyPermissionsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CheckMyPermissionsRequest' as interface{}
func (fpv *CheckMyPermissionsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *CheckMyPermissionsRequest_FieldTerminalPathValue) AsChecksValue() ([]*Check, bool) {
	res, ok := fpv.value.([]*Check)
	return res, ok
}
func (fpv *CheckMyPermissionsRequest_FieldTerminalPathValue) AsSkipCacheValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object CheckMyPermissionsRequest
func (fpv *CheckMyPermissionsRequest_FieldTerminalPathValue) SetTo(target **CheckMyPermissionsRequest) {
	if *target == nil {
		*target = new(CheckMyPermissionsRequest)
	}
	switch fpv.selector {
	case CheckMyPermissionsRequest_FieldPathSelectorChecks:
		(*target).Checks = fpv.value.([]*Check)
	case CheckMyPermissionsRequest_FieldPathSelectorSkipCache:
		(*target).SkipCache = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for CheckMyPermissionsRequest: %d", fpv.selector))
	}
}

func (fpv *CheckMyPermissionsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CheckMyPermissionsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'CheckMyPermissionsRequest_FieldTerminalPathValue' with the value under path in 'CheckMyPermissionsRequest'.
func (fpv *CheckMyPermissionsRequest_FieldTerminalPathValue) CompareWith(source *CheckMyPermissionsRequest) (int, bool) {
	switch fpv.selector {
	case CheckMyPermissionsRequest_FieldPathSelectorChecks:
		return 0, false
	case CheckMyPermissionsRequest_FieldPathSelectorSkipCache:
		leftValue := fpv.value.(bool)
		rightValue := source.GetSkipCache()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for CheckMyPermissionsRequest: %d", fpv.selector))
	}
}

func (fpv *CheckMyPermissionsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*CheckMyPermissionsRequest))
}

type CheckMyPermissionsRequest_FieldSubPathValue struct {
	CheckMyPermissionsRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ CheckMyPermissionsRequest_FieldPathValue = (*CheckMyPermissionsRequest_FieldSubPathValue)(nil)

func (fpvs *CheckMyPermissionsRequest_FieldSubPathValue) AsChecksPathValue() (Check_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(Check_FieldPathValue)
	return res, ok
}

func (fpvs *CheckMyPermissionsRequest_FieldSubPathValue) SetTo(target **CheckMyPermissionsRequest) {
	if *target == nil {
		*target = new(CheckMyPermissionsRequest)
	}
	switch fpvs.Selector() {
	case CheckMyPermissionsRequest_FieldPathSelectorChecks:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for CheckMyPermissionsRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CheckMyPermissionsRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CheckMyPermissionsRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *CheckMyPermissionsRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *CheckMyPermissionsRequest_FieldSubPathValue) CompareWith(source *CheckMyPermissionsRequest) (int, bool) {
	switch fpvs.Selector() {
	case CheckMyPermissionsRequest_FieldPathSelectorChecks:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for CheckMyPermissionsRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CheckMyPermissionsRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*CheckMyPermissionsRequest))
}

// CheckMyPermissionsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for CheckMyPermissionsRequest according to their type
// Present only for array (repeated) types.
type CheckMyPermissionsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	CheckMyPermissionsRequest_FieldPath
	ContainsValue(*CheckMyPermissionsRequest) bool
}

// ParseCheckMyPermissionsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseCheckMyPermissionsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (CheckMyPermissionsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseCheckMyPermissionsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CheckMyPermissionsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(CheckMyPermissionsRequest_FieldPathArrayItemValue), nil
}

func MustParseCheckMyPermissionsRequest_FieldPathArrayItemValue(pathStr, valueStr string) CheckMyPermissionsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseCheckMyPermissionsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type CheckMyPermissionsRequest_FieldTerminalPathArrayItemValue struct {
	CheckMyPermissionsRequest_FieldTerminalPath
	value interface{}
}

var _ CheckMyPermissionsRequest_FieldPathArrayItemValue = (*CheckMyPermissionsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object CheckMyPermissionsRequest as interface{}
func (fpaiv *CheckMyPermissionsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *CheckMyPermissionsRequest_FieldTerminalPathArrayItemValue) AsChecksItemValue() (*Check, bool) {
	res, ok := fpaiv.value.(*Check)
	return res, ok
}

func (fpaiv *CheckMyPermissionsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *CheckMyPermissionsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *CheckMyPermissionsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*CheckMyPermissionsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CheckMyPermissionsRequest'
func (fpaiv *CheckMyPermissionsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *CheckMyPermissionsRequest) bool {
	slice := fpaiv.CheckMyPermissionsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type CheckMyPermissionsRequest_FieldSubPathArrayItemValue struct {
	CheckMyPermissionsRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *CheckMyPermissionsRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *CheckMyPermissionsRequest_FieldSubPathArrayItemValue) AsChecksPathItemValue() (Check_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(Check_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CheckMyPermissionsRequest'
func (fpaivs *CheckMyPermissionsRequest_FieldSubPathArrayItemValue) ContainsValue(source *CheckMyPermissionsRequest) bool {
	switch fpaivs.Selector() {
	case CheckMyPermissionsRequest_FieldPathSelectorChecks:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for CheckMyPermissionsRequest: %d", fpaivs.Selector()))
	}
}

// CheckMyPermissionsRequest_FieldPathArrayOfValues allows storing slice of values for CheckMyPermissionsRequest fields according to their type
type CheckMyPermissionsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	CheckMyPermissionsRequest_FieldPath
}

func ParseCheckMyPermissionsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (CheckMyPermissionsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseCheckMyPermissionsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CheckMyPermissionsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(CheckMyPermissionsRequest_FieldPathArrayOfValues), nil
}

func MustParseCheckMyPermissionsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) CheckMyPermissionsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseCheckMyPermissionsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type CheckMyPermissionsRequest_FieldTerminalPathArrayOfValues struct {
	CheckMyPermissionsRequest_FieldTerminalPath
	values interface{}
}

var _ CheckMyPermissionsRequest_FieldPathArrayOfValues = (*CheckMyPermissionsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *CheckMyPermissionsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case CheckMyPermissionsRequest_FieldPathSelectorChecks:
		for _, v := range fpaov.values.([][]*Check) {
			values = append(values, v)
		}
	case CheckMyPermissionsRequest_FieldPathSelectorSkipCache:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *CheckMyPermissionsRequest_FieldTerminalPathArrayOfValues) AsChecksArrayOfValues() ([][]*Check, bool) {
	res, ok := fpaov.values.([][]*Check)
	return res, ok
}
func (fpaov *CheckMyPermissionsRequest_FieldTerminalPathArrayOfValues) AsSkipCacheArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

type CheckMyPermissionsRequest_FieldSubPathArrayOfValues struct {
	CheckMyPermissionsRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ CheckMyPermissionsRequest_FieldPathArrayOfValues = (*CheckMyPermissionsRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *CheckMyPermissionsRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *CheckMyPermissionsRequest_FieldSubPathArrayOfValues) AsChecksPathArrayOfValues() (Check_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(Check_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type CheckMyPermissionsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() CheckMyPermissionsResponse_FieldPathSelector
	Get(source *CheckMyPermissionsResponse) []interface{}
	GetSingle(source *CheckMyPermissionsResponse) (interface{}, bool)
	ClearValue(item *CheckMyPermissionsResponse)

	// Those methods build corresponding CheckMyPermissionsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) CheckMyPermissionsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) CheckMyPermissionsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) CheckMyPermissionsResponse_FieldPathArrayItemValue
}

type CheckMyPermissionsResponse_FieldPathSelector int32

const (
	CheckMyPermissionsResponse_FieldPathSelectorCheckResults CheckMyPermissionsResponse_FieldPathSelector = 0
)

func (s CheckMyPermissionsResponse_FieldPathSelector) String() string {
	switch s {
	case CheckMyPermissionsResponse_FieldPathSelectorCheckResults:
		return "check_results"
	default:
		panic(fmt.Sprintf("Invalid selector for CheckMyPermissionsResponse: %d", s))
	}
}

func BuildCheckMyPermissionsResponse_FieldPath(fp gotenobject.RawFieldPath) (CheckMyPermissionsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object CheckMyPermissionsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "check_results", "checkResults", "check-results":
			return &CheckMyPermissionsResponse_FieldTerminalPath{selector: CheckMyPermissionsResponse_FieldPathSelectorCheckResults}, nil
		}
	} else {
		switch fp[0] {
		case "check_results", "checkResults", "check-results":
			if subpath, err := BuildCheckResult_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &CheckMyPermissionsResponse_FieldSubPath{selector: CheckMyPermissionsResponse_FieldPathSelectorCheckResults, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object CheckMyPermissionsResponse", fp)
}

func ParseCheckMyPermissionsResponse_FieldPath(rawField string) (CheckMyPermissionsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildCheckMyPermissionsResponse_FieldPath(fp)
}

func MustParseCheckMyPermissionsResponse_FieldPath(rawField string) CheckMyPermissionsResponse_FieldPath {
	fp, err := ParseCheckMyPermissionsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type CheckMyPermissionsResponse_FieldTerminalPath struct {
	selector CheckMyPermissionsResponse_FieldPathSelector
}

var _ CheckMyPermissionsResponse_FieldPath = (*CheckMyPermissionsResponse_FieldTerminalPath)(nil)

func (fp *CheckMyPermissionsResponse_FieldTerminalPath) Selector() CheckMyPermissionsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *CheckMyPermissionsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *CheckMyPermissionsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source CheckMyPermissionsResponse
func (fp *CheckMyPermissionsResponse_FieldTerminalPath) Get(source *CheckMyPermissionsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case CheckMyPermissionsResponse_FieldPathSelectorCheckResults:
			for _, value := range source.GetCheckResults() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for CheckMyPermissionsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *CheckMyPermissionsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*CheckMyPermissionsResponse))
}

// GetSingle returns value pointed by specific field of from source CheckMyPermissionsResponse
func (fp *CheckMyPermissionsResponse_FieldTerminalPath) GetSingle(source *CheckMyPermissionsResponse) (interface{}, bool) {
	switch fp.selector {
	case CheckMyPermissionsResponse_FieldPathSelectorCheckResults:
		res := source.GetCheckResults()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for CheckMyPermissionsResponse: %d", fp.selector))
	}
}

func (fp *CheckMyPermissionsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*CheckMyPermissionsResponse))
}

// GetDefault returns a default value of the field type
func (fp *CheckMyPermissionsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case CheckMyPermissionsResponse_FieldPathSelectorCheckResults:
		return ([]*CheckResult)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for CheckMyPermissionsResponse: %d", fp.selector))
	}
}

func (fp *CheckMyPermissionsResponse_FieldTerminalPath) ClearValue(item *CheckMyPermissionsResponse) {
	if item != nil {
		switch fp.selector {
		case CheckMyPermissionsResponse_FieldPathSelectorCheckResults:
			item.CheckResults = nil
		default:
			panic(fmt.Sprintf("Invalid selector for CheckMyPermissionsResponse: %d", fp.selector))
		}
	}
}

func (fp *CheckMyPermissionsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*CheckMyPermissionsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *CheckMyPermissionsResponse_FieldTerminalPath) IsLeaf() bool {
	return false
}

func (fp *CheckMyPermissionsResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *CheckMyPermissionsResponse_FieldTerminalPath) WithIValue(value interface{}) CheckMyPermissionsResponse_FieldPathValue {
	switch fp.selector {
	case CheckMyPermissionsResponse_FieldPathSelectorCheckResults:
		return &CheckMyPermissionsResponse_FieldTerminalPathValue{CheckMyPermissionsResponse_FieldTerminalPath: *fp, value: value.([]*CheckResult)}
	default:
		panic(fmt.Sprintf("Invalid selector for CheckMyPermissionsResponse: %d", fp.selector))
	}
}

func (fp *CheckMyPermissionsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *CheckMyPermissionsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) CheckMyPermissionsResponse_FieldPathArrayOfValues {
	fpaov := &CheckMyPermissionsResponse_FieldTerminalPathArrayOfValues{CheckMyPermissionsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case CheckMyPermissionsResponse_FieldPathSelectorCheckResults:
		return &CheckMyPermissionsResponse_FieldTerminalPathArrayOfValues{CheckMyPermissionsResponse_FieldTerminalPath: *fp, values: values.([][]*CheckResult)}
	default:
		panic(fmt.Sprintf("Invalid selector for CheckMyPermissionsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *CheckMyPermissionsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *CheckMyPermissionsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) CheckMyPermissionsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case CheckMyPermissionsResponse_FieldPathSelectorCheckResults:
		return &CheckMyPermissionsResponse_FieldTerminalPathArrayItemValue{CheckMyPermissionsResponse_FieldTerminalPath: *fp, value: value.(*CheckResult)}
	default:
		panic(fmt.Sprintf("Invalid selector for CheckMyPermissionsResponse: %d", fp.selector))
	}
}

func (fp *CheckMyPermissionsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type CheckMyPermissionsResponse_FieldSubPath struct {
	selector CheckMyPermissionsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ CheckMyPermissionsResponse_FieldPath = (*CheckMyPermissionsResponse_FieldSubPath)(nil)

func (fps *CheckMyPermissionsResponse_FieldSubPath) Selector() CheckMyPermissionsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *CheckMyPermissionsResponse_FieldSubPath) AsCheckResultsSubPath() (CheckResult_FieldPath, bool) {
	res, ok := fps.subPath.(CheckResult_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *CheckMyPermissionsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *CheckMyPermissionsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source CheckMyPermissionsResponse
func (fps *CheckMyPermissionsResponse_FieldSubPath) Get(source *CheckMyPermissionsResponse) (values []interface{}) {
	if asCheckResultFieldPath, ok := fps.AsCheckResultsSubPath(); ok {
		for _, item := range source.GetCheckResults() {
			values = append(values, asCheckResultFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for CheckMyPermissionsResponse: %d", fps.selector))
	}
	return
}

func (fps *CheckMyPermissionsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*CheckMyPermissionsResponse))
}

// GetSingle returns value of selected field from source CheckMyPermissionsResponse
func (fps *CheckMyPermissionsResponse_FieldSubPath) GetSingle(source *CheckMyPermissionsResponse) (interface{}, bool) {
	switch fps.selector {
	case CheckMyPermissionsResponse_FieldPathSelectorCheckResults:
		if len(source.GetCheckResults()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetCheckResults()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for CheckMyPermissionsResponse: %d", fps.selector))
	}
}

func (fps *CheckMyPermissionsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*CheckMyPermissionsResponse))
}

// GetDefault returns a default value of the field type
func (fps *CheckMyPermissionsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *CheckMyPermissionsResponse_FieldSubPath) ClearValue(item *CheckMyPermissionsResponse) {
	if item != nil {
		switch fps.selector {
		case CheckMyPermissionsResponse_FieldPathSelectorCheckResults:
			for _, subItem := range item.CheckResults {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for CheckMyPermissionsResponse: %d", fps.selector))
		}
	}
}

func (fps *CheckMyPermissionsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*CheckMyPermissionsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *CheckMyPermissionsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *CheckMyPermissionsResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&CheckMyPermissionsResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *CheckMyPermissionsResponse_FieldSubPath) WithIValue(value interface{}) CheckMyPermissionsResponse_FieldPathValue {
	return &CheckMyPermissionsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *CheckMyPermissionsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *CheckMyPermissionsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) CheckMyPermissionsResponse_FieldPathArrayOfValues {
	return &CheckMyPermissionsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *CheckMyPermissionsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *CheckMyPermissionsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) CheckMyPermissionsResponse_FieldPathArrayItemValue {
	return &CheckMyPermissionsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *CheckMyPermissionsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// CheckMyPermissionsResponse_FieldPathValue allows storing values for CheckMyPermissionsResponse fields according to their type
type CheckMyPermissionsResponse_FieldPathValue interface {
	CheckMyPermissionsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **CheckMyPermissionsResponse)
	CompareWith(*CheckMyPermissionsResponse) (cmp int, comparable bool)
}

func ParseCheckMyPermissionsResponse_FieldPathValue(pathStr, valueStr string) (CheckMyPermissionsResponse_FieldPathValue, error) {
	fp, err := ParseCheckMyPermissionsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CheckMyPermissionsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(CheckMyPermissionsResponse_FieldPathValue), nil
}

func MustParseCheckMyPermissionsResponse_FieldPathValue(pathStr, valueStr string) CheckMyPermissionsResponse_FieldPathValue {
	fpv, err := ParseCheckMyPermissionsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type CheckMyPermissionsResponse_FieldTerminalPathValue struct {
	CheckMyPermissionsResponse_FieldTerminalPath
	value interface{}
}

var _ CheckMyPermissionsResponse_FieldPathValue = (*CheckMyPermissionsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CheckMyPermissionsResponse' as interface{}
func (fpv *CheckMyPermissionsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *CheckMyPermissionsResponse_FieldTerminalPathValue) AsCheckResultsValue() ([]*CheckResult, bool) {
	res, ok := fpv.value.([]*CheckResult)
	return res, ok
}

// SetTo stores value for selected field for object CheckMyPermissionsResponse
func (fpv *CheckMyPermissionsResponse_FieldTerminalPathValue) SetTo(target **CheckMyPermissionsResponse) {
	if *target == nil {
		*target = new(CheckMyPermissionsResponse)
	}
	switch fpv.selector {
	case CheckMyPermissionsResponse_FieldPathSelectorCheckResults:
		(*target).CheckResults = fpv.value.([]*CheckResult)
	default:
		panic(fmt.Sprintf("Invalid selector for CheckMyPermissionsResponse: %d", fpv.selector))
	}
}

func (fpv *CheckMyPermissionsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CheckMyPermissionsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'CheckMyPermissionsResponse_FieldTerminalPathValue' with the value under path in 'CheckMyPermissionsResponse'.
func (fpv *CheckMyPermissionsResponse_FieldTerminalPathValue) CompareWith(source *CheckMyPermissionsResponse) (int, bool) {
	switch fpv.selector {
	case CheckMyPermissionsResponse_FieldPathSelectorCheckResults:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for CheckMyPermissionsResponse: %d", fpv.selector))
	}
}

func (fpv *CheckMyPermissionsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*CheckMyPermissionsResponse))
}

type CheckMyPermissionsResponse_FieldSubPathValue struct {
	CheckMyPermissionsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ CheckMyPermissionsResponse_FieldPathValue = (*CheckMyPermissionsResponse_FieldSubPathValue)(nil)

func (fpvs *CheckMyPermissionsResponse_FieldSubPathValue) AsCheckResultsPathValue() (CheckResult_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(CheckResult_FieldPathValue)
	return res, ok
}

func (fpvs *CheckMyPermissionsResponse_FieldSubPathValue) SetTo(target **CheckMyPermissionsResponse) {
	if *target == nil {
		*target = new(CheckMyPermissionsResponse)
	}
	switch fpvs.Selector() {
	case CheckMyPermissionsResponse_FieldPathSelectorCheckResults:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for CheckMyPermissionsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *CheckMyPermissionsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CheckMyPermissionsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *CheckMyPermissionsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *CheckMyPermissionsResponse_FieldSubPathValue) CompareWith(source *CheckMyPermissionsResponse) (int, bool) {
	switch fpvs.Selector() {
	case CheckMyPermissionsResponse_FieldPathSelectorCheckResults:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for CheckMyPermissionsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *CheckMyPermissionsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*CheckMyPermissionsResponse))
}

// CheckMyPermissionsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for CheckMyPermissionsResponse according to their type
// Present only for array (repeated) types.
type CheckMyPermissionsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	CheckMyPermissionsResponse_FieldPath
	ContainsValue(*CheckMyPermissionsResponse) bool
}

// ParseCheckMyPermissionsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseCheckMyPermissionsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (CheckMyPermissionsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseCheckMyPermissionsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CheckMyPermissionsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(CheckMyPermissionsResponse_FieldPathArrayItemValue), nil
}

func MustParseCheckMyPermissionsResponse_FieldPathArrayItemValue(pathStr, valueStr string) CheckMyPermissionsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseCheckMyPermissionsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type CheckMyPermissionsResponse_FieldTerminalPathArrayItemValue struct {
	CheckMyPermissionsResponse_FieldTerminalPath
	value interface{}
}

var _ CheckMyPermissionsResponse_FieldPathArrayItemValue = (*CheckMyPermissionsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object CheckMyPermissionsResponse as interface{}
func (fpaiv *CheckMyPermissionsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *CheckMyPermissionsResponse_FieldTerminalPathArrayItemValue) AsCheckResultsItemValue() (*CheckResult, bool) {
	res, ok := fpaiv.value.(*CheckResult)
	return res, ok
}

func (fpaiv *CheckMyPermissionsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *CheckMyPermissionsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *CheckMyPermissionsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*CheckMyPermissionsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CheckMyPermissionsResponse'
func (fpaiv *CheckMyPermissionsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *CheckMyPermissionsResponse) bool {
	slice := fpaiv.CheckMyPermissionsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type CheckMyPermissionsResponse_FieldSubPathArrayItemValue struct {
	CheckMyPermissionsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *CheckMyPermissionsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *CheckMyPermissionsResponse_FieldSubPathArrayItemValue) AsCheckResultsPathItemValue() (CheckResult_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(CheckResult_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CheckMyPermissionsResponse'
func (fpaivs *CheckMyPermissionsResponse_FieldSubPathArrayItemValue) ContainsValue(source *CheckMyPermissionsResponse) bool {
	switch fpaivs.Selector() {
	case CheckMyPermissionsResponse_FieldPathSelectorCheckResults:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for CheckMyPermissionsResponse: %d", fpaivs.Selector()))
	}
}

// CheckMyPermissionsResponse_FieldPathArrayOfValues allows storing slice of values for CheckMyPermissionsResponse fields according to their type
type CheckMyPermissionsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	CheckMyPermissionsResponse_FieldPath
}

func ParseCheckMyPermissionsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (CheckMyPermissionsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseCheckMyPermissionsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CheckMyPermissionsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(CheckMyPermissionsResponse_FieldPathArrayOfValues), nil
}

func MustParseCheckMyPermissionsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) CheckMyPermissionsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseCheckMyPermissionsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type CheckMyPermissionsResponse_FieldTerminalPathArrayOfValues struct {
	CheckMyPermissionsResponse_FieldTerminalPath
	values interface{}
}

var _ CheckMyPermissionsResponse_FieldPathArrayOfValues = (*CheckMyPermissionsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *CheckMyPermissionsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case CheckMyPermissionsResponse_FieldPathSelectorCheckResults:
		for _, v := range fpaov.values.([][]*CheckResult) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *CheckMyPermissionsResponse_FieldTerminalPathArrayOfValues) AsCheckResultsArrayOfValues() ([][]*CheckResult, bool) {
	res, ok := fpaov.values.([][]*CheckResult)
	return res, ok
}

type CheckMyPermissionsResponse_FieldSubPathArrayOfValues struct {
	CheckMyPermissionsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ CheckMyPermissionsResponse_FieldPathArrayOfValues = (*CheckMyPermissionsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *CheckMyPermissionsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *CheckMyPermissionsResponse_FieldSubPathArrayOfValues) AsCheckResultsPathArrayOfValues() (CheckResult_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(CheckResult_FieldPathArrayOfValues)
	return res, ok
}
