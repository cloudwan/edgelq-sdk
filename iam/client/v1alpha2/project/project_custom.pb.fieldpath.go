// Code generated by protoc-gen-goten-object
// File: edgelq/iam/proto/v1alpha2/project_custom.proto
// DO NOT EDIT!!!

package project_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	project "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/project"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = json.Marshaler(nil)
	_ = fmt.Stringer(nil)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = proto.Message(nil)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &project.Project{}
	_ = &field_mask.FieldMask{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListMyProjectsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListMyProjectsRequest_FieldPathSelector
	Get(source *ListMyProjectsRequest) []interface{}
	GetSingle(source *ListMyProjectsRequest) (interface{}, bool)
	ClearValue(item *ListMyProjectsRequest)

	// Those methods build corresponding ListMyProjectsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListMyProjectsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ListMyProjectsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListMyProjectsRequest_FieldPathArrayItemValue
}

type ListMyProjectsRequest_FieldPathSelector int32

const (
	ListMyProjectsRequest_FieldPathSelectorFilter    ListMyProjectsRequest_FieldPathSelector = 0
	ListMyProjectsRequest_FieldPathSelectorFieldMask ListMyProjectsRequest_FieldPathSelector = 1
)

func (s ListMyProjectsRequest_FieldPathSelector) String() string {
	switch s {
	case ListMyProjectsRequest_FieldPathSelectorFilter:
		return "filter"
	case ListMyProjectsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	default:
		panic(fmt.Sprintf("Invalid selector for ListMyProjectsRequest: %d", s))
	}
}

func BuildListMyProjectsRequest_FieldPath(fp gotenobject.RawFieldPath) (ListMyProjectsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListMyProjectsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "filter":
			return &ListMyProjectsRequest_FieldTerminalPath{selector: ListMyProjectsRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &ListMyProjectsRequest_FieldTerminalPath{selector: ListMyProjectsRequest_FieldPathSelectorFieldMask}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListMyProjectsRequest", fp)
}

func ParseListMyProjectsRequest_FieldPath(rawField string) (ListMyProjectsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListMyProjectsRequest_FieldPath(fp)
}

func MustParseListMyProjectsRequest_FieldPath(rawField string) ListMyProjectsRequest_FieldPath {
	fp, err := ParseListMyProjectsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListMyProjectsRequest_FieldTerminalPath struct {
	selector ListMyProjectsRequest_FieldPathSelector
}

var _ ListMyProjectsRequest_FieldPath = (*ListMyProjectsRequest_FieldTerminalPath)(nil)

func (fp *ListMyProjectsRequest_FieldTerminalPath) Selector() ListMyProjectsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListMyProjectsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListMyProjectsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListMyProjectsRequest
func (fp *ListMyProjectsRequest_FieldTerminalPath) Get(source *ListMyProjectsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListMyProjectsRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case ListMyProjectsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListMyProjectsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ListMyProjectsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListMyProjectsRequest))
}

// GetSingle returns value pointed by specific field of from source ListMyProjectsRequest
func (fp *ListMyProjectsRequest_FieldTerminalPath) GetSingle(source *ListMyProjectsRequest) (interface{}, bool) {
	switch fp.selector {
	case ListMyProjectsRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case ListMyProjectsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListMyProjectsRequest: %d", fp.selector))
	}
}

func (fp *ListMyProjectsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListMyProjectsRequest))
}

// GetDefault returns a default value of the field type
func (fp *ListMyProjectsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListMyProjectsRequest_FieldPathSelectorFilter:
		return (*project.Filter)(nil)
	case ListMyProjectsRequest_FieldPathSelectorFieldMask:
		return (*project.Project_FieldMask)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ListMyProjectsRequest: %d", fp.selector))
	}
}

func (fp *ListMyProjectsRequest_FieldTerminalPath) ClearValue(item *ListMyProjectsRequest) {
	if item != nil {
		switch fp.selector {
		case ListMyProjectsRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case ListMyProjectsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		default:
			panic(fmt.Sprintf("Invalid selector for ListMyProjectsRequest: %d", fp.selector))
		}
	}
}

func (fp *ListMyProjectsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListMyProjectsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListMyProjectsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListMyProjectsRequest_FieldPathSelectorFilter ||
		fp.selector == ListMyProjectsRequest_FieldPathSelectorFieldMask
}

func (fp *ListMyProjectsRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ListMyProjectsRequest_FieldTerminalPath) WithIValue(value interface{}) ListMyProjectsRequest_FieldPathValue {
	switch fp.selector {
	case ListMyProjectsRequest_FieldPathSelectorFilter:
		return &ListMyProjectsRequest_FieldTerminalPathValue{ListMyProjectsRequest_FieldTerminalPath: *fp, value: value.(*project.Filter)}
	case ListMyProjectsRequest_FieldPathSelectorFieldMask:
		return &ListMyProjectsRequest_FieldTerminalPathValue{ListMyProjectsRequest_FieldTerminalPath: *fp, value: value.(*project.Project_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListMyProjectsRequest: %d", fp.selector))
	}
}

func (fp *ListMyProjectsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListMyProjectsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListMyProjectsRequest_FieldPathArrayOfValues {
	fpaov := &ListMyProjectsRequest_FieldTerminalPathArrayOfValues{ListMyProjectsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListMyProjectsRequest_FieldPathSelectorFilter:
		return &ListMyProjectsRequest_FieldTerminalPathArrayOfValues{ListMyProjectsRequest_FieldTerminalPath: *fp, values: values.([]*project.Filter)}
	case ListMyProjectsRequest_FieldPathSelectorFieldMask:
		return &ListMyProjectsRequest_FieldTerminalPathArrayOfValues{ListMyProjectsRequest_FieldTerminalPath: *fp, values: values.([]*project.Project_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListMyProjectsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListMyProjectsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListMyProjectsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListMyProjectsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ListMyProjectsRequest: %d", fp.selector))
	}
}

func (fp *ListMyProjectsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ListMyProjectsRequest_FieldPathValue allows storing values for ListMyProjectsRequest fields according to their type
type ListMyProjectsRequest_FieldPathValue interface {
	ListMyProjectsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListMyProjectsRequest)
	CompareWith(*ListMyProjectsRequest) (cmp int, comparable bool)
}

func ParseListMyProjectsRequest_FieldPathValue(pathStr, valueStr string) (ListMyProjectsRequest_FieldPathValue, error) {
	fp, err := ParseListMyProjectsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListMyProjectsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListMyProjectsRequest_FieldPathValue), nil
}

func MustParseListMyProjectsRequest_FieldPathValue(pathStr, valueStr string) ListMyProjectsRequest_FieldPathValue {
	fpv, err := ParseListMyProjectsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListMyProjectsRequest_FieldTerminalPathValue struct {
	ListMyProjectsRequest_FieldTerminalPath
	value interface{}
}

var _ ListMyProjectsRequest_FieldPathValue = (*ListMyProjectsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListMyProjectsRequest' as interface{}
func (fpv *ListMyProjectsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListMyProjectsRequest_FieldTerminalPathValue) AsFilterValue() (*project.Filter, bool) {
	res, ok := fpv.value.(*project.Filter)
	return res, ok
}
func (fpv *ListMyProjectsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*project.Project_FieldMask, bool) {
	res, ok := fpv.value.(*project.Project_FieldMask)
	return res, ok
}

// SetTo stores value for selected field for object ListMyProjectsRequest
func (fpv *ListMyProjectsRequest_FieldTerminalPathValue) SetTo(target **ListMyProjectsRequest) {
	if *target == nil {
		*target = new(ListMyProjectsRequest)
	}
	switch fpv.selector {
	case ListMyProjectsRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*project.Filter)
	case ListMyProjectsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*project.Project_FieldMask)
	default:
		panic(fmt.Sprintf("Invalid selector for ListMyProjectsRequest: %d", fpv.selector))
	}
}

func (fpv *ListMyProjectsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListMyProjectsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListMyProjectsRequest_FieldTerminalPathValue' with the value under path in 'ListMyProjectsRequest'.
func (fpv *ListMyProjectsRequest_FieldTerminalPathValue) CompareWith(source *ListMyProjectsRequest) (int, bool) {
	switch fpv.selector {
	case ListMyProjectsRequest_FieldPathSelectorFilter:
		return 0, false
	case ListMyProjectsRequest_FieldPathSelectorFieldMask:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ListMyProjectsRequest: %d", fpv.selector))
	}
}

func (fpv *ListMyProjectsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListMyProjectsRequest))
}

// ListMyProjectsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for ListMyProjectsRequest according to their type
// Present only for array (repeated) types.
type ListMyProjectsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListMyProjectsRequest_FieldPath
	ContainsValue(*ListMyProjectsRequest) bool
}

// ParseListMyProjectsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListMyProjectsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ListMyProjectsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseListMyProjectsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListMyProjectsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListMyProjectsRequest_FieldPathArrayItemValue), nil
}

func MustParseListMyProjectsRequest_FieldPathArrayItemValue(pathStr, valueStr string) ListMyProjectsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseListMyProjectsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListMyProjectsRequest_FieldTerminalPathArrayItemValue struct {
	ListMyProjectsRequest_FieldTerminalPath
	value interface{}
}

var _ ListMyProjectsRequest_FieldPathArrayItemValue = (*ListMyProjectsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListMyProjectsRequest as interface{}
func (fpaiv *ListMyProjectsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ListMyProjectsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ListMyProjectsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListMyProjectsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListMyProjectsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListMyProjectsRequest'
func (fpaiv *ListMyProjectsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ListMyProjectsRequest) bool {
	slice := fpaiv.ListMyProjectsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ListMyProjectsRequest_FieldPathArrayOfValues allows storing slice of values for ListMyProjectsRequest fields according to their type
type ListMyProjectsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListMyProjectsRequest_FieldPath
}

func ParseListMyProjectsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ListMyProjectsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseListMyProjectsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListMyProjectsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListMyProjectsRequest_FieldPathArrayOfValues), nil
}

func MustParseListMyProjectsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ListMyProjectsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseListMyProjectsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListMyProjectsRequest_FieldTerminalPathArrayOfValues struct {
	ListMyProjectsRequest_FieldTerminalPath
	values interface{}
}

var _ ListMyProjectsRequest_FieldPathArrayOfValues = (*ListMyProjectsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListMyProjectsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListMyProjectsRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*project.Filter) {
			values = append(values, v)
		}
	case ListMyProjectsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*project.Project_FieldMask) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListMyProjectsRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*project.Filter, bool) {
	res, ok := fpaov.values.([]*project.Filter)
	return res, ok
}
func (fpaov *ListMyProjectsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*project.Project_FieldMask, bool) {
	res, ok := fpaov.values.([]*project.Project_FieldMask)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListMyProjectsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListMyProjectsResponse_FieldPathSelector
	Get(source *ListMyProjectsResponse) []interface{}
	GetSingle(source *ListMyProjectsResponse) (interface{}, bool)
	ClearValue(item *ListMyProjectsResponse)

	// Those methods build corresponding ListMyProjectsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListMyProjectsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) ListMyProjectsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListMyProjectsResponse_FieldPathArrayItemValue
}

type ListMyProjectsResponse_FieldPathSelector int32

const (
	ListMyProjectsResponse_FieldPathSelectorProjects ListMyProjectsResponse_FieldPathSelector = 0
)

func (s ListMyProjectsResponse_FieldPathSelector) String() string {
	switch s {
	case ListMyProjectsResponse_FieldPathSelectorProjects:
		return "projects"
	default:
		panic(fmt.Sprintf("Invalid selector for ListMyProjectsResponse: %d", s))
	}
}

func BuildListMyProjectsResponse_FieldPath(fp gotenobject.RawFieldPath) (ListMyProjectsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListMyProjectsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "projects":
			return &ListMyProjectsResponse_FieldTerminalPath{selector: ListMyProjectsResponse_FieldPathSelectorProjects}, nil
		}
	} else {
		switch fp[0] {
		case "projects":
			if subpath, err := project.BuildProject_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ListMyProjectsResponse_FieldSubPath{selector: ListMyProjectsResponse_FieldPathSelectorProjects, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListMyProjectsResponse", fp)
}

func ParseListMyProjectsResponse_FieldPath(rawField string) (ListMyProjectsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListMyProjectsResponse_FieldPath(fp)
}

func MustParseListMyProjectsResponse_FieldPath(rawField string) ListMyProjectsResponse_FieldPath {
	fp, err := ParseListMyProjectsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListMyProjectsResponse_FieldTerminalPath struct {
	selector ListMyProjectsResponse_FieldPathSelector
}

var _ ListMyProjectsResponse_FieldPath = (*ListMyProjectsResponse_FieldTerminalPath)(nil)

func (fp *ListMyProjectsResponse_FieldTerminalPath) Selector() ListMyProjectsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListMyProjectsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListMyProjectsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListMyProjectsResponse
func (fp *ListMyProjectsResponse_FieldTerminalPath) Get(source *ListMyProjectsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListMyProjectsResponse_FieldPathSelectorProjects:
			for _, value := range source.GetProjects() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListMyProjectsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *ListMyProjectsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListMyProjectsResponse))
}

// GetSingle returns value pointed by specific field of from source ListMyProjectsResponse
func (fp *ListMyProjectsResponse_FieldTerminalPath) GetSingle(source *ListMyProjectsResponse) (interface{}, bool) {
	switch fp.selector {
	case ListMyProjectsResponse_FieldPathSelectorProjects:
		res := source.GetProjects()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListMyProjectsResponse: %d", fp.selector))
	}
}

func (fp *ListMyProjectsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListMyProjectsResponse))
}

// GetDefault returns a default value of the field type
func (fp *ListMyProjectsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListMyProjectsResponse_FieldPathSelectorProjects:
		return ([]*project.Project)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ListMyProjectsResponse: %d", fp.selector))
	}
}

func (fp *ListMyProjectsResponse_FieldTerminalPath) ClearValue(item *ListMyProjectsResponse) {
	if item != nil {
		switch fp.selector {
		case ListMyProjectsResponse_FieldPathSelectorProjects:
			item.Projects = nil
		default:
			panic(fmt.Sprintf("Invalid selector for ListMyProjectsResponse: %d", fp.selector))
		}
	}
}

func (fp *ListMyProjectsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListMyProjectsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListMyProjectsResponse_FieldTerminalPath) IsLeaf() bool {
	return false
}

func (fp *ListMyProjectsResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ListMyProjectsResponse_FieldTerminalPath) WithIValue(value interface{}) ListMyProjectsResponse_FieldPathValue {
	switch fp.selector {
	case ListMyProjectsResponse_FieldPathSelectorProjects:
		return &ListMyProjectsResponse_FieldTerminalPathValue{ListMyProjectsResponse_FieldTerminalPath: *fp, value: value.([]*project.Project)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListMyProjectsResponse: %d", fp.selector))
	}
}

func (fp *ListMyProjectsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListMyProjectsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListMyProjectsResponse_FieldPathArrayOfValues {
	fpaov := &ListMyProjectsResponse_FieldTerminalPathArrayOfValues{ListMyProjectsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListMyProjectsResponse_FieldPathSelectorProjects:
		return &ListMyProjectsResponse_FieldTerminalPathArrayOfValues{ListMyProjectsResponse_FieldTerminalPath: *fp, values: values.([][]*project.Project)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListMyProjectsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListMyProjectsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListMyProjectsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListMyProjectsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case ListMyProjectsResponse_FieldPathSelectorProjects:
		return &ListMyProjectsResponse_FieldTerminalPathArrayItemValue{ListMyProjectsResponse_FieldTerminalPath: *fp, value: value.(*project.Project)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListMyProjectsResponse: %d", fp.selector))
	}
}

func (fp *ListMyProjectsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ListMyProjectsResponse_FieldSubPath struct {
	selector ListMyProjectsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ListMyProjectsResponse_FieldPath = (*ListMyProjectsResponse_FieldSubPath)(nil)

func (fps *ListMyProjectsResponse_FieldSubPath) Selector() ListMyProjectsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *ListMyProjectsResponse_FieldSubPath) AsProjectsSubPath() (project.Project_FieldPath, bool) {
	res, ok := fps.subPath.(project.Project_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ListMyProjectsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ListMyProjectsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ListMyProjectsResponse
func (fps *ListMyProjectsResponse_FieldSubPath) Get(source *ListMyProjectsResponse) (values []interface{}) {
	if asProjectFieldPath, ok := fps.AsProjectsSubPath(); ok {
		for _, item := range source.GetProjects() {
			values = append(values, asProjectFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for ListMyProjectsResponse: %d", fps.selector))
	}
	return
}

func (fps *ListMyProjectsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ListMyProjectsResponse))
}

// GetSingle returns value of selected field from source ListMyProjectsResponse
func (fps *ListMyProjectsResponse_FieldSubPath) GetSingle(source *ListMyProjectsResponse) (interface{}, bool) {
	switch fps.selector {
	case ListMyProjectsResponse_FieldPathSelectorProjects:
		if len(source.GetProjects()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetProjects()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for ListMyProjectsResponse: %d", fps.selector))
	}
}

func (fps *ListMyProjectsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ListMyProjectsResponse))
}

// GetDefault returns a default value of the field type
func (fps *ListMyProjectsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ListMyProjectsResponse_FieldSubPath) ClearValue(item *ListMyProjectsResponse) {
	if item != nil {
		switch fps.selector {
		case ListMyProjectsResponse_FieldPathSelectorProjects:
			for _, subItem := range item.Projects {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListMyProjectsResponse: %d", fps.selector))
		}
	}
}

func (fps *ListMyProjectsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ListMyProjectsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *ListMyProjectsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ListMyProjectsResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&ListMyProjectsResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *ListMyProjectsResponse_FieldSubPath) WithIValue(value interface{}) ListMyProjectsResponse_FieldPathValue {
	return &ListMyProjectsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ListMyProjectsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ListMyProjectsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) ListMyProjectsResponse_FieldPathArrayOfValues {
	return &ListMyProjectsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ListMyProjectsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ListMyProjectsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) ListMyProjectsResponse_FieldPathArrayItemValue {
	return &ListMyProjectsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ListMyProjectsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ListMyProjectsResponse_FieldPathValue allows storing values for ListMyProjectsResponse fields according to their type
type ListMyProjectsResponse_FieldPathValue interface {
	ListMyProjectsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListMyProjectsResponse)
	CompareWith(*ListMyProjectsResponse) (cmp int, comparable bool)
}

func ParseListMyProjectsResponse_FieldPathValue(pathStr, valueStr string) (ListMyProjectsResponse_FieldPathValue, error) {
	fp, err := ParseListMyProjectsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListMyProjectsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListMyProjectsResponse_FieldPathValue), nil
}

func MustParseListMyProjectsResponse_FieldPathValue(pathStr, valueStr string) ListMyProjectsResponse_FieldPathValue {
	fpv, err := ParseListMyProjectsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListMyProjectsResponse_FieldTerminalPathValue struct {
	ListMyProjectsResponse_FieldTerminalPath
	value interface{}
}

var _ ListMyProjectsResponse_FieldPathValue = (*ListMyProjectsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListMyProjectsResponse' as interface{}
func (fpv *ListMyProjectsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListMyProjectsResponse_FieldTerminalPathValue) AsProjectsValue() ([]*project.Project, bool) {
	res, ok := fpv.value.([]*project.Project)
	return res, ok
}

// SetTo stores value for selected field for object ListMyProjectsResponse
func (fpv *ListMyProjectsResponse_FieldTerminalPathValue) SetTo(target **ListMyProjectsResponse) {
	if *target == nil {
		*target = new(ListMyProjectsResponse)
	}
	switch fpv.selector {
	case ListMyProjectsResponse_FieldPathSelectorProjects:
		(*target).Projects = fpv.value.([]*project.Project)
	default:
		panic(fmt.Sprintf("Invalid selector for ListMyProjectsResponse: %d", fpv.selector))
	}
}

func (fpv *ListMyProjectsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListMyProjectsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListMyProjectsResponse_FieldTerminalPathValue' with the value under path in 'ListMyProjectsResponse'.
func (fpv *ListMyProjectsResponse_FieldTerminalPathValue) CompareWith(source *ListMyProjectsResponse) (int, bool) {
	switch fpv.selector {
	case ListMyProjectsResponse_FieldPathSelectorProjects:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ListMyProjectsResponse: %d", fpv.selector))
	}
}

func (fpv *ListMyProjectsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListMyProjectsResponse))
}

type ListMyProjectsResponse_FieldSubPathValue struct {
	ListMyProjectsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ListMyProjectsResponse_FieldPathValue = (*ListMyProjectsResponse_FieldSubPathValue)(nil)

func (fpvs *ListMyProjectsResponse_FieldSubPathValue) AsProjectsPathValue() (project.Project_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(project.Project_FieldPathValue)
	return res, ok
}

func (fpvs *ListMyProjectsResponse_FieldSubPathValue) SetTo(target **ListMyProjectsResponse) {
	if *target == nil {
		*target = new(ListMyProjectsResponse)
	}
	switch fpvs.Selector() {
	case ListMyProjectsResponse_FieldPathSelectorProjects:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for ListMyProjectsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListMyProjectsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListMyProjectsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ListMyProjectsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ListMyProjectsResponse_FieldSubPathValue) CompareWith(source *ListMyProjectsResponse) (int, bool) {
	switch fpvs.Selector() {
	case ListMyProjectsResponse_FieldPathSelectorProjects:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for ListMyProjectsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListMyProjectsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ListMyProjectsResponse))
}

// ListMyProjectsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for ListMyProjectsResponse according to their type
// Present only for array (repeated) types.
type ListMyProjectsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListMyProjectsResponse_FieldPath
	ContainsValue(*ListMyProjectsResponse) bool
}

// ParseListMyProjectsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListMyProjectsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (ListMyProjectsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseListMyProjectsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListMyProjectsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListMyProjectsResponse_FieldPathArrayItemValue), nil
}

func MustParseListMyProjectsResponse_FieldPathArrayItemValue(pathStr, valueStr string) ListMyProjectsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseListMyProjectsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListMyProjectsResponse_FieldTerminalPathArrayItemValue struct {
	ListMyProjectsResponse_FieldTerminalPath
	value interface{}
}

var _ ListMyProjectsResponse_FieldPathArrayItemValue = (*ListMyProjectsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListMyProjectsResponse as interface{}
func (fpaiv *ListMyProjectsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *ListMyProjectsResponse_FieldTerminalPathArrayItemValue) AsProjectsItemValue() (*project.Project, bool) {
	res, ok := fpaiv.value.(*project.Project)
	return res, ok
}

func (fpaiv *ListMyProjectsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *ListMyProjectsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListMyProjectsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListMyProjectsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListMyProjectsResponse'
func (fpaiv *ListMyProjectsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *ListMyProjectsResponse) bool {
	slice := fpaiv.ListMyProjectsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ListMyProjectsResponse_FieldSubPathArrayItemValue struct {
	ListMyProjectsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ListMyProjectsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ListMyProjectsResponse_FieldSubPathArrayItemValue) AsProjectsPathItemValue() (project.Project_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(project.Project_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListMyProjectsResponse'
func (fpaivs *ListMyProjectsResponse_FieldSubPathArrayItemValue) ContainsValue(source *ListMyProjectsResponse) bool {
	switch fpaivs.Selector() {
	case ListMyProjectsResponse_FieldPathSelectorProjects:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for ListMyProjectsResponse: %d", fpaivs.Selector()))
	}
}

// ListMyProjectsResponse_FieldPathArrayOfValues allows storing slice of values for ListMyProjectsResponse fields according to their type
type ListMyProjectsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListMyProjectsResponse_FieldPath
}

func ParseListMyProjectsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (ListMyProjectsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseListMyProjectsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListMyProjectsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListMyProjectsResponse_FieldPathArrayOfValues), nil
}

func MustParseListMyProjectsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) ListMyProjectsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseListMyProjectsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListMyProjectsResponse_FieldTerminalPathArrayOfValues struct {
	ListMyProjectsResponse_FieldTerminalPath
	values interface{}
}

var _ ListMyProjectsResponse_FieldPathArrayOfValues = (*ListMyProjectsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListMyProjectsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListMyProjectsResponse_FieldPathSelectorProjects:
		for _, v := range fpaov.values.([][]*project.Project) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListMyProjectsResponse_FieldTerminalPathArrayOfValues) AsProjectsArrayOfValues() ([][]*project.Project, bool) {
	res, ok := fpaov.values.([][]*project.Project)
	return res, ok
}

type ListMyProjectsResponse_FieldSubPathArrayOfValues struct {
	ListMyProjectsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ListMyProjectsResponse_FieldPathArrayOfValues = (*ListMyProjectsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ListMyProjectsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ListMyProjectsResponse_FieldSubPathArrayOfValues) AsProjectsPathArrayOfValues() (project.Project_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(project.Project_FieldPathArrayOfValues)
	return res, ok
}
