// Code generated by protoc-gen-goten-client
// API: ProjectInvitationService
// DO NOT EDIT!!!

package project_invitation_client

import (
	"context"

	"google.golang.org/grpc"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	project_invitation "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/project_invitation"
	empty "github.com/golang/protobuf/ptypes/empty"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = protoimpl.DescBuilder{}
	_ = context.Context(nil)
	_ = grpc.ClientConn{}
)

// make sure we're using proto imports
var (
	_ = &project_invitation.ProjectInvitation{}
	_ = &empty.Empty{}
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ProjectInvitationServiceClient is the client API for ProjectInvitationService.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProjectInvitationServiceClient interface {
	GetProjectInvitation(ctx context.Context, in *GetProjectInvitationRequest, opts ...grpc.CallOption) (*project_invitation.ProjectInvitation, error)
	BatchGetProjectInvitations(ctx context.Context, in *BatchGetProjectInvitationsRequest, opts ...grpc.CallOption) (*BatchGetProjectInvitationsResponse, error)
	ListProjectInvitations(ctx context.Context, in *ListProjectInvitationsRequest, opts ...grpc.CallOption) (*ListProjectInvitationsResponse, error)
	WatchProjectInvitation(ctx context.Context, in *WatchProjectInvitationRequest, opts ...grpc.CallOption) (WatchProjectInvitationClientStream, error)
	WatchProjectInvitations(ctx context.Context, in *WatchProjectInvitationsRequest, opts ...grpc.CallOption) (WatchProjectInvitationsClientStream, error)
	CreateProjectInvitation(ctx context.Context, in *CreateProjectInvitationRequest, opts ...grpc.CallOption) (*project_invitation.ProjectInvitation, error)
	UpdateProjectInvitation(ctx context.Context, in *UpdateProjectInvitationRequest, opts ...grpc.CallOption) (*project_invitation.ProjectInvitation, error)
	DeleteProjectInvitation(ctx context.Context, in *DeleteProjectInvitationRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	AcceptProjectInvitation(ctx context.Context, in *AcceptProjectInvitationRequest, opts ...grpc.CallOption) (*AcceptProjectInvitationResponse, error)
	DeclineProjectInvitation(ctx context.Context, in *DeclineProjectInvitationRequest, opts ...grpc.CallOption) (*DeclineProjectInvitationResponse, error)
	ListMyProjectInvitations(ctx context.Context, in *ListMyProjectInvitationsRequest, opts ...grpc.CallOption) (*ListMyProjectInvitationsResponse, error)
	ResendProjectInvitation(ctx context.Context, in *ResendProjectInvitationRequest, opts ...grpc.CallOption) (*ResendProjectInvitationResponse, error)
}

type client struct {
	cc grpc.ClientConnInterface
}

func NewProjectInvitationServiceClient(cc grpc.ClientConnInterface) ProjectInvitationServiceClient {
	return &client{cc}
}

func (c *client) GetProjectInvitation(ctx context.Context, in *GetProjectInvitationRequest, opts ...grpc.CallOption) (*project_invitation.ProjectInvitation, error) {
	out := new(project_invitation.ProjectInvitation)
	err := c.cc.Invoke(ctx, "/ntt.iam.v1alpha2.ProjectInvitationService/GetProjectInvitation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) BatchGetProjectInvitations(ctx context.Context, in *BatchGetProjectInvitationsRequest, opts ...grpc.CallOption) (*BatchGetProjectInvitationsResponse, error) {
	out := new(BatchGetProjectInvitationsResponse)
	err := c.cc.Invoke(ctx, "/ntt.iam.v1alpha2.ProjectInvitationService/BatchGetProjectInvitations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListProjectInvitations(ctx context.Context, in *ListProjectInvitationsRequest, opts ...grpc.CallOption) (*ListProjectInvitationsResponse, error) {
	out := new(ListProjectInvitationsResponse)
	err := c.cc.Invoke(ctx, "/ntt.iam.v1alpha2.ProjectInvitationService/ListProjectInvitations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) WatchProjectInvitation(ctx context.Context, in *WatchProjectInvitationRequest, opts ...grpc.CallOption) (WatchProjectInvitationClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchProjectInvitation",
			ServerStreams: true,
		},
		"/ntt.iam.v1alpha2.ProjectInvitationService/WatchProjectInvitation", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchProjectInvitationWatchProjectInvitationClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchProjectInvitationClientStream interface {
	Recv() (*WatchProjectInvitationResponse, error)
	grpc.ClientStream
}

type watchProjectInvitationWatchProjectInvitationClient struct {
	grpc.ClientStream
}

func (x *watchProjectInvitationWatchProjectInvitationClient) Recv() (*WatchProjectInvitationResponse, error) {
	m := new(WatchProjectInvitationResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) WatchProjectInvitations(ctx context.Context, in *WatchProjectInvitationsRequest, opts ...grpc.CallOption) (WatchProjectInvitationsClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchProjectInvitations",
			ServerStreams: true,
		},
		"/ntt.iam.v1alpha2.ProjectInvitationService/WatchProjectInvitations", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchProjectInvitationsWatchProjectInvitationsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchProjectInvitationsClientStream interface {
	Recv() (*WatchProjectInvitationsResponse, error)
	grpc.ClientStream
}

type watchProjectInvitationsWatchProjectInvitationsClient struct {
	grpc.ClientStream
}

func (x *watchProjectInvitationsWatchProjectInvitationsClient) Recv() (*WatchProjectInvitationsResponse, error) {
	m := new(WatchProjectInvitationsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) CreateProjectInvitation(ctx context.Context, in *CreateProjectInvitationRequest, opts ...grpc.CallOption) (*project_invitation.ProjectInvitation, error) {
	out := new(project_invitation.ProjectInvitation)
	err := c.cc.Invoke(ctx, "/ntt.iam.v1alpha2.ProjectInvitationService/CreateProjectInvitation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateProjectInvitation(ctx context.Context, in *UpdateProjectInvitationRequest, opts ...grpc.CallOption) (*project_invitation.ProjectInvitation, error) {
	out := new(project_invitation.ProjectInvitation)
	err := c.cc.Invoke(ctx, "/ntt.iam.v1alpha2.ProjectInvitationService/UpdateProjectInvitation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeleteProjectInvitation(ctx context.Context, in *DeleteProjectInvitationRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ntt.iam.v1alpha2.ProjectInvitationService/DeleteProjectInvitation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) AcceptProjectInvitation(ctx context.Context, in *AcceptProjectInvitationRequest, opts ...grpc.CallOption) (*AcceptProjectInvitationResponse, error) {
	out := new(AcceptProjectInvitationResponse)
	err := c.cc.Invoke(ctx, "/ntt.iam.v1alpha2.ProjectInvitationService/AcceptProjectInvitation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeclineProjectInvitation(ctx context.Context, in *DeclineProjectInvitationRequest, opts ...grpc.CallOption) (*DeclineProjectInvitationResponse, error) {
	out := new(DeclineProjectInvitationResponse)
	err := c.cc.Invoke(ctx, "/ntt.iam.v1alpha2.ProjectInvitationService/DeclineProjectInvitation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListMyProjectInvitations(ctx context.Context, in *ListMyProjectInvitationsRequest, opts ...grpc.CallOption) (*ListMyProjectInvitationsResponse, error) {
	out := new(ListMyProjectInvitationsResponse)
	err := c.cc.Invoke(ctx, "/ntt.iam.v1alpha2.ProjectInvitationService/ListMyProjectInvitations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ResendProjectInvitation(ctx context.Context, in *ResendProjectInvitationRequest, opts ...grpc.CallOption) (*ResendProjectInvitationResponse, error) {
	out := new(ResendProjectInvitationResponse)
	err := c.cc.Invoke(ctx, "/ntt.iam.v1alpha2.ProjectInvitationService/ResendProjectInvitation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
