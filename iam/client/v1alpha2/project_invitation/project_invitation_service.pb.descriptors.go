// Code generated by protoc-gen-goten-client
// API: ProjectInvitationService
// DO NOT EDIT!!!

package project_invitation_client

import (
	"google.golang.org/protobuf/proto"

	gotenclient "github.com/cloudwan/goten-sdk/runtime/client"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	project_invitation "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/project_invitation"
	empty "github.com/golang/protobuf/ptypes/empty"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = proto.Message(nil)
	_ = gotenclient.MethodDescriptor(nil)
	_ = gotenresource.WildcardId
)

// make sure we're using proto imports
var (
	_ = &project_invitation.ProjectInvitation{}
	_ = &empty.Empty{}
)

var (
	descriptorsInitialized               bool
	projectInvitationServiceDescriptor   *ProjectInvitationServiceDescriptor
	getProjectInvitationDescriptor       *GetProjectInvitationDescriptor
	batchGetProjectInvitationsDescriptor *BatchGetProjectInvitationsDescriptor
	listProjectInvitationsDescriptor     *ListProjectInvitationsDescriptor
	watchProjectInvitationDescriptor     *WatchProjectInvitationDescriptor
	watchProjectInvitationsDescriptor    *WatchProjectInvitationsDescriptor
	createProjectInvitationDescriptor    *CreateProjectInvitationDescriptor
	updateProjectInvitationDescriptor    *UpdateProjectInvitationDescriptor
	deleteProjectInvitationDescriptor    *DeleteProjectInvitationDescriptor
	acceptProjectInvitationDescriptor    *AcceptProjectInvitationDescriptor
	declineProjectInvitationDescriptor   *DeclineProjectInvitationDescriptor
	listMyProjectInvitationsDescriptor   *ListMyProjectInvitationsDescriptor
	resendProjectInvitationDescriptor    *ResendProjectInvitationDescriptor
)

type GetProjectInvitationDescriptor struct{}

type GetProjectInvitationDescriptorClientMsgHandle struct{}

type GetProjectInvitationDescriptorServerMsgHandle struct{}

func (d *GetProjectInvitationDescriptor) NewEmptyClientMsg() proto.Message {
	return &GetProjectInvitationRequest{}
}

func (d *GetProjectInvitationDescriptor) NewEmptyServerMsg() proto.Message {
	return &project_invitation.ProjectInvitation{}
}

func (d *GetProjectInvitationDescriptor) IsUnary() bool {
	return true
}

func (d *GetProjectInvitationDescriptor) IsClientStream() bool {
	return false
}

func (d *GetProjectInvitationDescriptor) IsServerStream() bool {
	return false
}

func (d *GetProjectInvitationDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *GetProjectInvitationDescriptor) IsPluralSubject() bool {
	return false
}

func (d *GetProjectInvitationDescriptor) HasSubjectResource() bool {
	return true
}

func (d *GetProjectInvitationDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *GetProjectInvitationDescriptor) GetVerb() string {
	return "get"
}

func (d *GetProjectInvitationDescriptor) GetMethodName() string {
	return "GetProjectInvitation"
}

func (d *GetProjectInvitationDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1alpha2.ProjectInvitationService/GetProjectInvitation"
}

func (d *GetProjectInvitationDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha2"
}

func (d *GetProjectInvitationDescriptor) GetApiName() string {
	return "ProjectInvitationService"
}

func (d *GetProjectInvitationDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *GetProjectInvitationDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *GetProjectInvitationDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return projectInvitationServiceDescriptor
}

func (d *GetProjectInvitationDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return project_invitation.GetDescriptor()
}

func (d *GetProjectInvitationDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetProjectInvitationDescriptorClientMsgHandle{}
}

func (d *GetProjectInvitationDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetProjectInvitationDescriptorServerMsgHandle{}
}

func (h *GetProjectInvitationDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetProjectInvitationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*GetProjectInvitationRequest) *project_invitation.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*project_invitation.Name)(nil)
}

func (h *GetProjectInvitationDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*GetProjectInvitationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*GetProjectInvitationRequest) []*project_invitation.Name
	})
	if ok {
		return project_invitation.ProjectInvitationNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *GetProjectInvitationDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetProjectInvitationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*GetProjectInvitationRequest) *project_invitation.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *GetProjectInvitationDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*project_invitation.ProjectInvitation)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*project_invitation.ProjectInvitation) *project_invitation.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetName()
}

func (h *GetProjectInvitationDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*project_invitation.ProjectInvitation)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*project_invitation.ProjectInvitation) []*project_invitation.Name
	})
	if ok {
		return project_invitation.ProjectInvitationNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *GetProjectInvitationDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*project_invitation.ProjectInvitation)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*project_invitation.ProjectInvitation) *project_invitation.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetGetProjectInvitationDescriptor() *GetProjectInvitationDescriptor {
	return getProjectInvitationDescriptor
}

type BatchGetProjectInvitationsDescriptor struct{}

type BatchGetProjectInvitationsDescriptorClientMsgHandle struct{}

type BatchGetProjectInvitationsDescriptorServerMsgHandle struct{}

func (d *BatchGetProjectInvitationsDescriptor) NewEmptyClientMsg() proto.Message {
	return &BatchGetProjectInvitationsRequest{}
}

func (d *BatchGetProjectInvitationsDescriptor) NewEmptyServerMsg() proto.Message {
	return &BatchGetProjectInvitationsResponse{}
}

func (d *BatchGetProjectInvitationsDescriptor) IsUnary() bool {
	return true
}

func (d *BatchGetProjectInvitationsDescriptor) IsClientStream() bool {
	return false
}

func (d *BatchGetProjectInvitationsDescriptor) IsServerStream() bool {
	return false
}

func (d *BatchGetProjectInvitationsDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *BatchGetProjectInvitationsDescriptor) IsPluralSubject() bool {
	return true
}

func (d *BatchGetProjectInvitationsDescriptor) HasSubjectResource() bool {
	return true
}

func (d *BatchGetProjectInvitationsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *BatchGetProjectInvitationsDescriptor) GetVerb() string {
	return "batchGet"
}

func (d *BatchGetProjectInvitationsDescriptor) GetMethodName() string {
	return "BatchGetProjectInvitations"
}

func (d *BatchGetProjectInvitationsDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1alpha2.ProjectInvitationService/BatchGetProjectInvitations"
}

func (d *BatchGetProjectInvitationsDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha2"
}

func (d *BatchGetProjectInvitationsDescriptor) GetApiName() string {
	return "ProjectInvitationService"
}

func (d *BatchGetProjectInvitationsDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *BatchGetProjectInvitationsDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *BatchGetProjectInvitationsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return projectInvitationServiceDescriptor
}

func (d *BatchGetProjectInvitationsDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return project_invitation.GetDescriptor()
}

func (d *BatchGetProjectInvitationsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetProjectInvitationsDescriptorClientMsgHandle{}
}

func (d *BatchGetProjectInvitationsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetProjectInvitationsDescriptorServerMsgHandle{}
}

func (h *BatchGetProjectInvitationsDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetProjectInvitationsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*BatchGetProjectInvitationsRequest) *project_invitation.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetProjectInvitationsDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetProjectInvitationsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*BatchGetProjectInvitationsRequest) []*project_invitation.Name
	})
	if ok {
		return project_invitation.ProjectInvitationNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	if refs := typedMsg.GetNames(); len(refs) > 0 {
		list := make(project_invitation.ProjectInvitationNameList, 0, len(refs))
		for _, ref := range refs {
			list = append(list, &ref.Name)
		}
		return list
	}
	return (project_invitation.ProjectInvitationNameList)(nil)
}

func (h *BatchGetProjectInvitationsDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetProjectInvitationsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*BatchGetProjectInvitationsRequest) *project_invitation.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *BatchGetProjectInvitationsDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetProjectInvitationsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*BatchGetProjectInvitationsResponse) *project_invitation.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetProjectInvitationsDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetProjectInvitationsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*BatchGetProjectInvitationsResponse) []*project_invitation.Name
	})
	if ok {
		return project_invitation.ProjectInvitationNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	resources := typedMsg.GetProjectInvitations()
	list := make(project_invitation.ProjectInvitationNameList, 0, len(resources))
	for _, res := range resources {
		list = append(list, res.GetName())
	}
	return list
}

func (h *BatchGetProjectInvitationsDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetProjectInvitationsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*BatchGetProjectInvitationsResponse) *project_invitation.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetBatchGetProjectInvitationsDescriptor() *BatchGetProjectInvitationsDescriptor {
	return batchGetProjectInvitationsDescriptor
}

type ListProjectInvitationsDescriptor struct{}

type ListProjectInvitationsDescriptorClientMsgHandle struct{}

type ListProjectInvitationsDescriptorServerMsgHandle struct{}

func (d *ListProjectInvitationsDescriptor) NewEmptyClientMsg() proto.Message {
	return &ListProjectInvitationsRequest{}
}

func (d *ListProjectInvitationsDescriptor) NewEmptyServerMsg() proto.Message {
	return &ListProjectInvitationsResponse{}
}

func (d *ListProjectInvitationsDescriptor) IsUnary() bool {
	return true
}

func (d *ListProjectInvitationsDescriptor) IsClientStream() bool {
	return false
}

func (d *ListProjectInvitationsDescriptor) IsServerStream() bool {
	return false
}

func (d *ListProjectInvitationsDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *ListProjectInvitationsDescriptor) IsPluralSubject() bool {
	return true
}

func (d *ListProjectInvitationsDescriptor) HasSubjectResource() bool {
	return true
}

func (d *ListProjectInvitationsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ListProjectInvitationsDescriptor) GetVerb() string {
	return "list"
}

func (d *ListProjectInvitationsDescriptor) GetMethodName() string {
	return "ListProjectInvitations"
}

func (d *ListProjectInvitationsDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1alpha2.ProjectInvitationService/ListProjectInvitations"
}

func (d *ListProjectInvitationsDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha2"
}

func (d *ListProjectInvitationsDescriptor) GetApiName() string {
	return "ProjectInvitationService"
}

func (d *ListProjectInvitationsDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *ListProjectInvitationsDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *ListProjectInvitationsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return projectInvitationServiceDescriptor
}

func (d *ListProjectInvitationsDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return project_invitation.GetDescriptor()
}

func (d *ListProjectInvitationsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListProjectInvitationsDescriptorClientMsgHandle{}
}

func (d *ListProjectInvitationsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListProjectInvitationsDescriptorServerMsgHandle{}
}

func (h *ListProjectInvitationsDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListProjectInvitationsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*ListProjectInvitationsRequest) *project_invitation.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *ListProjectInvitationsDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListProjectInvitationsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*ListProjectInvitationsRequest) []*project_invitation.Name
	})
	if ok {
		return project_invitation.ProjectInvitationNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *ListProjectInvitationsDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListProjectInvitationsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*ListProjectInvitationsRequest) *project_invitation.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return typedMsg.GetParent()
}

func (h *ListProjectInvitationsDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListProjectInvitationsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*ListProjectInvitationsResponse) *project_invitation.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *ListProjectInvitationsDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListProjectInvitationsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*ListProjectInvitationsResponse) []*project_invitation.Name
	})
	if ok {
		return project_invitation.ProjectInvitationNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	resources := typedMsg.GetProjectInvitations()
	list := make(project_invitation.ProjectInvitationNameList, 0, len(resources))
	for _, res := range resources {
		list = append(list, res.GetName())
	}
	return list
}

func (h *ListProjectInvitationsDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListProjectInvitationsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*ListProjectInvitationsResponse) *project_invitation.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetListProjectInvitationsDescriptor() *ListProjectInvitationsDescriptor {
	return listProjectInvitationsDescriptor
}

type WatchProjectInvitationDescriptor struct{}

type WatchProjectInvitationDescriptorClientMsgHandle struct{}

type WatchProjectInvitationDescriptorServerMsgHandle struct{}

func (d *WatchProjectInvitationDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchProjectInvitationRequest{}
}

func (d *WatchProjectInvitationDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchProjectInvitationResponse{}
}

func (d *WatchProjectInvitationDescriptor) IsUnary() bool {
	return false
}

func (d *WatchProjectInvitationDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchProjectInvitationDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchProjectInvitationDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *WatchProjectInvitationDescriptor) IsPluralSubject() bool {
	return false
}

func (d *WatchProjectInvitationDescriptor) HasSubjectResource() bool {
	return true
}

func (d *WatchProjectInvitationDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchProjectInvitationDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchProjectInvitationDescriptor) GetMethodName() string {
	return "WatchProjectInvitation"
}

func (d *WatchProjectInvitationDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1alpha2.ProjectInvitationService/WatchProjectInvitation"
}

func (d *WatchProjectInvitationDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha2"
}

func (d *WatchProjectInvitationDescriptor) GetApiName() string {
	return "ProjectInvitationService"
}

func (d *WatchProjectInvitationDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *WatchProjectInvitationDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *WatchProjectInvitationDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return projectInvitationServiceDescriptor
}

func (d *WatchProjectInvitationDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return project_invitation.GetDescriptor()
}

func (d *WatchProjectInvitationDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchProjectInvitationDescriptorClientMsgHandle{}
}

func (d *WatchProjectInvitationDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchProjectInvitationDescriptorServerMsgHandle{}
}

func (h *WatchProjectInvitationDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchProjectInvitationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchProjectInvitationRequest) *project_invitation.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*project_invitation.Name)(nil)
}

func (h *WatchProjectInvitationDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchProjectInvitationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchProjectInvitationRequest) []*project_invitation.Name
	})
	if ok {
		return project_invitation.ProjectInvitationNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchProjectInvitationDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchProjectInvitationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchProjectInvitationRequest) *project_invitation.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchProjectInvitationDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchProjectInvitationResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchProjectInvitationResponse) *project_invitation.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if typedMsg.GetChange() != nil {
		switch tResChange := typedMsg.GetChange().ChangeType.(type) {
		case *project_invitation.ProjectInvitationChange_Added_:
			return tResChange.Added.GetProjectInvitation().GetName()
		case *project_invitation.ProjectInvitationChange_Modified_:
			return tResChange.Modified.GetName()
		case *project_invitation.ProjectInvitationChange_Removed_:
			return tResChange.Removed.GetName()
		case *project_invitation.ProjectInvitationChange_Current_:
			return tResChange.Current.GetProjectInvitation().GetName()
		}
	}
	return (*project_invitation.Name)(nil)
}

func (h *WatchProjectInvitationDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchProjectInvitationResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchProjectInvitationResponse) []*project_invitation.Name
	})
	if ok {
		return project_invitation.ProjectInvitationNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchProjectInvitationDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchProjectInvitationResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchProjectInvitationResponse) *project_invitation.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetWatchProjectInvitationDescriptor() *WatchProjectInvitationDescriptor {
	return watchProjectInvitationDescriptor
}

type WatchProjectInvitationsDescriptor struct{}

type WatchProjectInvitationsDescriptorClientMsgHandle struct{}

type WatchProjectInvitationsDescriptorServerMsgHandle struct{}

func (d *WatchProjectInvitationsDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchProjectInvitationsRequest{}
}

func (d *WatchProjectInvitationsDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchProjectInvitationsResponse{}
}

func (d *WatchProjectInvitationsDescriptor) IsUnary() bool {
	return false
}

func (d *WatchProjectInvitationsDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchProjectInvitationsDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchProjectInvitationsDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *WatchProjectInvitationsDescriptor) IsPluralSubject() bool {
	return true
}

func (d *WatchProjectInvitationsDescriptor) HasSubjectResource() bool {
	return true
}

func (d *WatchProjectInvitationsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchProjectInvitationsDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchProjectInvitationsDescriptor) GetMethodName() string {
	return "WatchProjectInvitations"
}

func (d *WatchProjectInvitationsDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1alpha2.ProjectInvitationService/WatchProjectInvitations"
}

func (d *WatchProjectInvitationsDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha2"
}

func (d *WatchProjectInvitationsDescriptor) GetApiName() string {
	return "ProjectInvitationService"
}

func (d *WatchProjectInvitationsDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *WatchProjectInvitationsDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *WatchProjectInvitationsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return projectInvitationServiceDescriptor
}

func (d *WatchProjectInvitationsDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return project_invitation.GetDescriptor()
}

func (d *WatchProjectInvitationsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchProjectInvitationsDescriptorClientMsgHandle{}
}

func (d *WatchProjectInvitationsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchProjectInvitationsDescriptorServerMsgHandle{}
}

func (h *WatchProjectInvitationsDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchProjectInvitationsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchProjectInvitationsRequest) *project_invitation.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *WatchProjectInvitationsDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchProjectInvitationsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchProjectInvitationsRequest) []*project_invitation.Name
	})
	if ok {
		return project_invitation.ProjectInvitationNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchProjectInvitationsDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchProjectInvitationsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchProjectInvitationsRequest) *project_invitation.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	if ref := typedMsg.GetParent(); ref != nil {
		return &ref.ParentName
	}
	return (*project_invitation.ParentName)(nil)
}

func (h *WatchProjectInvitationsDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchProjectInvitationsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchProjectInvitationsResponse) *project_invitation.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *WatchProjectInvitationsDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchProjectInvitationsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchProjectInvitationsResponse) []*project_invitation.Name
	})
	if ok {
		return project_invitation.ProjectInvitationNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	resourceChanges := typedMsg.GetProjectInvitationChanges()
	list := make(project_invitation.ProjectInvitationNameList, 0, len(resourceChanges))
	for _, resChange := range resourceChanges {
		switch tResChange := resChange.ChangeType.(type) {
		case *project_invitation.ProjectInvitationChange_Added_:
			list = append(list, tResChange.Added.GetProjectInvitation().GetName())
		case *project_invitation.ProjectInvitationChange_Modified_:
			list = append(list, tResChange.Modified.GetName())
		case *project_invitation.ProjectInvitationChange_Removed_:
			list = append(list, tResChange.Removed.GetName())
		case *project_invitation.ProjectInvitationChange_Current_:
			list = append(list, tResChange.Current.GetProjectInvitation().GetName())
		}
	}
	return list
}

func (h *WatchProjectInvitationsDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchProjectInvitationsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchProjectInvitationsResponse) *project_invitation.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetWatchProjectInvitationsDescriptor() *WatchProjectInvitationsDescriptor {
	return watchProjectInvitationsDescriptor
}

type CreateProjectInvitationDescriptor struct{}

type CreateProjectInvitationDescriptorClientMsgHandle struct{}

type CreateProjectInvitationDescriptorServerMsgHandle struct{}

func (d *CreateProjectInvitationDescriptor) NewEmptyClientMsg() proto.Message {
	return &CreateProjectInvitationRequest{}
}

func (d *CreateProjectInvitationDescriptor) NewEmptyServerMsg() proto.Message {
	return &project_invitation.ProjectInvitation{}
}

func (d *CreateProjectInvitationDescriptor) IsUnary() bool {
	return true
}

func (d *CreateProjectInvitationDescriptor) IsClientStream() bool {
	return false
}

func (d *CreateProjectInvitationDescriptor) IsServerStream() bool {
	return false
}

func (d *CreateProjectInvitationDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *CreateProjectInvitationDescriptor) IsPluralSubject() bool {
	return false
}

func (d *CreateProjectInvitationDescriptor) HasSubjectResource() bool {
	return true
}

func (d *CreateProjectInvitationDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *CreateProjectInvitationDescriptor) GetVerb() string {
	return "create"
}

func (d *CreateProjectInvitationDescriptor) GetMethodName() string {
	return "CreateProjectInvitation"
}

func (d *CreateProjectInvitationDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1alpha2.ProjectInvitationService/CreateProjectInvitation"
}

func (d *CreateProjectInvitationDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha2"
}

func (d *CreateProjectInvitationDescriptor) GetApiName() string {
	return "ProjectInvitationService"
}

func (d *CreateProjectInvitationDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *CreateProjectInvitationDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *CreateProjectInvitationDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return projectInvitationServiceDescriptor
}

func (d *CreateProjectInvitationDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return project_invitation.GetDescriptor()
}

func (d *CreateProjectInvitationDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateProjectInvitationDescriptorClientMsgHandle{}
}

func (d *CreateProjectInvitationDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateProjectInvitationDescriptorServerMsgHandle{}
}

func (h *CreateProjectInvitationDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateProjectInvitationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*CreateProjectInvitationRequest) *project_invitation.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetProjectInvitation().GetName()
}

func (h *CreateProjectInvitationDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*CreateProjectInvitationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*CreateProjectInvitationRequest) []*project_invitation.Name
	})
	if ok {
		return project_invitation.ProjectInvitationNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateProjectInvitationDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateProjectInvitationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*CreateProjectInvitationRequest) *project_invitation.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	if ref := typedMsg.GetParent(); ref != nil {
		return &ref.ParentName
	}
	return (*project_invitation.ParentName)(nil)
}

func (h *CreateProjectInvitationDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*project_invitation.ProjectInvitation)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*project_invitation.ProjectInvitation) *project_invitation.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetName()
}

func (h *CreateProjectInvitationDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*project_invitation.ProjectInvitation)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*project_invitation.ProjectInvitation) []*project_invitation.Name
	})
	if ok {
		return project_invitation.ProjectInvitationNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateProjectInvitationDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*project_invitation.ProjectInvitation)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*project_invitation.ProjectInvitation) *project_invitation.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetCreateProjectInvitationDescriptor() *CreateProjectInvitationDescriptor {
	return createProjectInvitationDescriptor
}

type UpdateProjectInvitationDescriptor struct{}

type UpdateProjectInvitationDescriptorClientMsgHandle struct{}

type UpdateProjectInvitationDescriptorServerMsgHandle struct{}

func (d *UpdateProjectInvitationDescriptor) NewEmptyClientMsg() proto.Message {
	return &UpdateProjectInvitationRequest{}
}

func (d *UpdateProjectInvitationDescriptor) NewEmptyServerMsg() proto.Message {
	return &project_invitation.ProjectInvitation{}
}

func (d *UpdateProjectInvitationDescriptor) IsUnary() bool {
	return true
}

func (d *UpdateProjectInvitationDescriptor) IsClientStream() bool {
	return false
}

func (d *UpdateProjectInvitationDescriptor) IsServerStream() bool {
	return false
}

func (d *UpdateProjectInvitationDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *UpdateProjectInvitationDescriptor) IsPluralSubject() bool {
	return false
}

func (d *UpdateProjectInvitationDescriptor) HasSubjectResource() bool {
	return true
}

func (d *UpdateProjectInvitationDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *UpdateProjectInvitationDescriptor) GetVerb() string {
	return "update"
}

func (d *UpdateProjectInvitationDescriptor) GetMethodName() string {
	return "UpdateProjectInvitation"
}

func (d *UpdateProjectInvitationDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1alpha2.ProjectInvitationService/UpdateProjectInvitation"
}

func (d *UpdateProjectInvitationDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha2"
}

func (d *UpdateProjectInvitationDescriptor) GetApiName() string {
	return "ProjectInvitationService"
}

func (d *UpdateProjectInvitationDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *UpdateProjectInvitationDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *UpdateProjectInvitationDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return projectInvitationServiceDescriptor
}

func (d *UpdateProjectInvitationDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return project_invitation.GetDescriptor()
}

func (d *UpdateProjectInvitationDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateProjectInvitationDescriptorClientMsgHandle{}
}

func (d *UpdateProjectInvitationDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateProjectInvitationDescriptorServerMsgHandle{}
}

func (h *UpdateProjectInvitationDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateProjectInvitationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*UpdateProjectInvitationRequest) *project_invitation.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetProjectInvitation().GetName()
}

func (h *UpdateProjectInvitationDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*UpdateProjectInvitationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*UpdateProjectInvitationRequest) []*project_invitation.Name
	})
	if ok {
		return project_invitation.ProjectInvitationNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateProjectInvitationDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateProjectInvitationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*UpdateProjectInvitationRequest) *project_invitation.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *UpdateProjectInvitationDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*project_invitation.ProjectInvitation)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*project_invitation.ProjectInvitation) *project_invitation.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetName()
}

func (h *UpdateProjectInvitationDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*project_invitation.ProjectInvitation)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*project_invitation.ProjectInvitation) []*project_invitation.Name
	})
	if ok {
		return project_invitation.ProjectInvitationNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateProjectInvitationDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*project_invitation.ProjectInvitation)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*project_invitation.ProjectInvitation) *project_invitation.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetUpdateProjectInvitationDescriptor() *UpdateProjectInvitationDescriptor {
	return updateProjectInvitationDescriptor
}

type DeleteProjectInvitationDescriptor struct{}

type DeleteProjectInvitationDescriptorClientMsgHandle struct{}

type DeleteProjectInvitationDescriptorServerMsgHandle struct{}

func (d *DeleteProjectInvitationDescriptor) NewEmptyClientMsg() proto.Message {
	return &DeleteProjectInvitationRequest{}
}

func (d *DeleteProjectInvitationDescriptor) NewEmptyServerMsg() proto.Message {
	return &empty.Empty{}
}

func (d *DeleteProjectInvitationDescriptor) IsUnary() bool {
	return true
}

func (d *DeleteProjectInvitationDescriptor) IsClientStream() bool {
	return false
}

func (d *DeleteProjectInvitationDescriptor) IsServerStream() bool {
	return false
}

func (d *DeleteProjectInvitationDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *DeleteProjectInvitationDescriptor) IsPluralSubject() bool {
	return false
}

func (d *DeleteProjectInvitationDescriptor) HasSubjectResource() bool {
	return true
}

func (d *DeleteProjectInvitationDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *DeleteProjectInvitationDescriptor) GetVerb() string {
	return "delete"
}

func (d *DeleteProjectInvitationDescriptor) GetMethodName() string {
	return "DeleteProjectInvitation"
}

func (d *DeleteProjectInvitationDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1alpha2.ProjectInvitationService/DeleteProjectInvitation"
}

func (d *DeleteProjectInvitationDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha2"
}

func (d *DeleteProjectInvitationDescriptor) GetApiName() string {
	return "ProjectInvitationService"
}

func (d *DeleteProjectInvitationDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *DeleteProjectInvitationDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *DeleteProjectInvitationDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return projectInvitationServiceDescriptor
}

func (d *DeleteProjectInvitationDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return project_invitation.GetDescriptor()
}

func (d *DeleteProjectInvitationDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteProjectInvitationDescriptorClientMsgHandle{}
}

func (d *DeleteProjectInvitationDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteProjectInvitationDescriptorServerMsgHandle{}
}

func (h *DeleteProjectInvitationDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteProjectInvitationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*DeleteProjectInvitationRequest) *project_invitation.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*project_invitation.Name)(nil)
}

func (h *DeleteProjectInvitationDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*DeleteProjectInvitationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*DeleteProjectInvitationRequest) []*project_invitation.Name
	})
	if ok {
		return project_invitation.ProjectInvitationNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteProjectInvitationDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteProjectInvitationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*DeleteProjectInvitationRequest) *project_invitation.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *DeleteProjectInvitationDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*empty.Empty) *project_invitation.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *DeleteProjectInvitationDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*empty.Empty) []*project_invitation.Name
	})
	if ok {
		return project_invitation.ProjectInvitationNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteProjectInvitationDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*empty.Empty) *project_invitation.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetDeleteProjectInvitationDescriptor() *DeleteProjectInvitationDescriptor {
	return deleteProjectInvitationDescriptor
}

type AcceptProjectInvitationDescriptor struct{}

type AcceptProjectInvitationDescriptorClientMsgHandle struct{}

type AcceptProjectInvitationDescriptorServerMsgHandle struct{}

func (d *AcceptProjectInvitationDescriptor) NewEmptyClientMsg() proto.Message {
	return &AcceptProjectInvitationRequest{}
}

func (d *AcceptProjectInvitationDescriptor) NewEmptyServerMsg() proto.Message {
	return &AcceptProjectInvitationResponse{}
}

func (d *AcceptProjectInvitationDescriptor) IsUnary() bool {
	return true
}

func (d *AcceptProjectInvitationDescriptor) IsClientStream() bool {
	return false
}

func (d *AcceptProjectInvitationDescriptor) IsServerStream() bool {
	return false
}

func (d *AcceptProjectInvitationDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *AcceptProjectInvitationDescriptor) IsPluralSubject() bool {
	return false
}

func (d *AcceptProjectInvitationDescriptor) HasSubjectResource() bool {
	return true
}

func (d *AcceptProjectInvitationDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *AcceptProjectInvitationDescriptor) GetVerb() string {
	return "accept"
}

func (d *AcceptProjectInvitationDescriptor) GetMethodName() string {
	return "AcceptProjectInvitation"
}

func (d *AcceptProjectInvitationDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1alpha2.ProjectInvitationService/AcceptProjectInvitation"
}

func (d *AcceptProjectInvitationDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha2"
}

func (d *AcceptProjectInvitationDescriptor) GetApiName() string {
	return "ProjectInvitationService"
}

func (d *AcceptProjectInvitationDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *AcceptProjectInvitationDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *AcceptProjectInvitationDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return projectInvitationServiceDescriptor
}

func (d *AcceptProjectInvitationDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return project_invitation.GetDescriptor()
}

func (d *AcceptProjectInvitationDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &AcceptProjectInvitationDescriptorClientMsgHandle{}
}

func (d *AcceptProjectInvitationDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &AcceptProjectInvitationDescriptorServerMsgHandle{}
}

func (h *AcceptProjectInvitationDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*AcceptProjectInvitationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*AcceptProjectInvitationRequest) *project_invitation.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*project_invitation.Name)(nil)
}

func (h *AcceptProjectInvitationDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*AcceptProjectInvitationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*AcceptProjectInvitationRequest) []*project_invitation.Name
	})
	if ok {
		return project_invitation.ProjectInvitationNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *AcceptProjectInvitationDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*AcceptProjectInvitationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*AcceptProjectInvitationRequest) *project_invitation.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *AcceptProjectInvitationDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*AcceptProjectInvitationResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*AcceptProjectInvitationResponse) *project_invitation.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *AcceptProjectInvitationDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*AcceptProjectInvitationResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*AcceptProjectInvitationResponse) []*project_invitation.Name
	})
	if ok {
		return project_invitation.ProjectInvitationNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *AcceptProjectInvitationDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*AcceptProjectInvitationResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*AcceptProjectInvitationResponse) *project_invitation.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetAcceptProjectInvitationDescriptor() *AcceptProjectInvitationDescriptor {
	return acceptProjectInvitationDescriptor
}

type DeclineProjectInvitationDescriptor struct{}

type DeclineProjectInvitationDescriptorClientMsgHandle struct{}

type DeclineProjectInvitationDescriptorServerMsgHandle struct{}

func (d *DeclineProjectInvitationDescriptor) NewEmptyClientMsg() proto.Message {
	return &DeclineProjectInvitationRequest{}
}

func (d *DeclineProjectInvitationDescriptor) NewEmptyServerMsg() proto.Message {
	return &DeclineProjectInvitationResponse{}
}

func (d *DeclineProjectInvitationDescriptor) IsUnary() bool {
	return true
}

func (d *DeclineProjectInvitationDescriptor) IsClientStream() bool {
	return false
}

func (d *DeclineProjectInvitationDescriptor) IsServerStream() bool {
	return false
}

func (d *DeclineProjectInvitationDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *DeclineProjectInvitationDescriptor) IsPluralSubject() bool {
	return false
}

func (d *DeclineProjectInvitationDescriptor) HasSubjectResource() bool {
	return true
}

func (d *DeclineProjectInvitationDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *DeclineProjectInvitationDescriptor) GetVerb() string {
	return "decline"
}

func (d *DeclineProjectInvitationDescriptor) GetMethodName() string {
	return "DeclineProjectInvitation"
}

func (d *DeclineProjectInvitationDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1alpha2.ProjectInvitationService/DeclineProjectInvitation"
}

func (d *DeclineProjectInvitationDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha2"
}

func (d *DeclineProjectInvitationDescriptor) GetApiName() string {
	return "ProjectInvitationService"
}

func (d *DeclineProjectInvitationDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *DeclineProjectInvitationDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *DeclineProjectInvitationDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return projectInvitationServiceDescriptor
}

func (d *DeclineProjectInvitationDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return project_invitation.GetDescriptor()
}

func (d *DeclineProjectInvitationDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeclineProjectInvitationDescriptorClientMsgHandle{}
}

func (d *DeclineProjectInvitationDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeclineProjectInvitationDescriptorServerMsgHandle{}
}

func (h *DeclineProjectInvitationDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeclineProjectInvitationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*DeclineProjectInvitationRequest) *project_invitation.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*project_invitation.Name)(nil)
}

func (h *DeclineProjectInvitationDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*DeclineProjectInvitationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*DeclineProjectInvitationRequest) []*project_invitation.Name
	})
	if ok {
		return project_invitation.ProjectInvitationNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *DeclineProjectInvitationDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeclineProjectInvitationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*DeclineProjectInvitationRequest) *project_invitation.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *DeclineProjectInvitationDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeclineProjectInvitationResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*DeclineProjectInvitationResponse) *project_invitation.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *DeclineProjectInvitationDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*DeclineProjectInvitationResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*DeclineProjectInvitationResponse) []*project_invitation.Name
	})
	if ok {
		return project_invitation.ProjectInvitationNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *DeclineProjectInvitationDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeclineProjectInvitationResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*DeclineProjectInvitationResponse) *project_invitation.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetDeclineProjectInvitationDescriptor() *DeclineProjectInvitationDescriptor {
	return declineProjectInvitationDescriptor
}

type ListMyProjectInvitationsDescriptor struct{}

type ListMyProjectInvitationsDescriptorClientMsgHandle struct{}

type ListMyProjectInvitationsDescriptorServerMsgHandle struct{}

func (d *ListMyProjectInvitationsDescriptor) NewEmptyClientMsg() proto.Message {
	return &ListMyProjectInvitationsRequest{}
}

func (d *ListMyProjectInvitationsDescriptor) NewEmptyServerMsg() proto.Message {
	return &ListMyProjectInvitationsResponse{}
}

func (d *ListMyProjectInvitationsDescriptor) IsUnary() bool {
	return true
}

func (d *ListMyProjectInvitationsDescriptor) IsClientStream() bool {
	return false
}

func (d *ListMyProjectInvitationsDescriptor) IsServerStream() bool {
	return false
}

func (d *ListMyProjectInvitationsDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *ListMyProjectInvitationsDescriptor) IsPluralSubject() bool {
	return true
}

func (d *ListMyProjectInvitationsDescriptor) HasSubjectResource() bool {
	return true
}

func (d *ListMyProjectInvitationsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ListMyProjectInvitationsDescriptor) GetVerb() string {
	return "listMy"
}

func (d *ListMyProjectInvitationsDescriptor) GetMethodName() string {
	return "ListMyProjectInvitations"
}

func (d *ListMyProjectInvitationsDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1alpha2.ProjectInvitationService/ListMyProjectInvitations"
}

func (d *ListMyProjectInvitationsDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha2"
}

func (d *ListMyProjectInvitationsDescriptor) GetApiName() string {
	return "ProjectInvitationService"
}

func (d *ListMyProjectInvitationsDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *ListMyProjectInvitationsDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *ListMyProjectInvitationsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return projectInvitationServiceDescriptor
}

func (d *ListMyProjectInvitationsDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return project_invitation.GetDescriptor()
}

func (d *ListMyProjectInvitationsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListMyProjectInvitationsDescriptorClientMsgHandle{}
}

func (d *ListMyProjectInvitationsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListMyProjectInvitationsDescriptorServerMsgHandle{}
}

func (h *ListMyProjectInvitationsDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListMyProjectInvitationsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*ListMyProjectInvitationsRequest) *project_invitation.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *ListMyProjectInvitationsDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListMyProjectInvitationsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*ListMyProjectInvitationsRequest) []*project_invitation.Name
	})
	if ok {
		return project_invitation.ProjectInvitationNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *ListMyProjectInvitationsDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListMyProjectInvitationsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*ListMyProjectInvitationsRequest) *project_invitation.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	if ref := typedMsg.GetParent(); ref != nil {
		return &ref.ParentName
	}
	return (*project_invitation.ParentName)(nil)
}

func (h *ListMyProjectInvitationsDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListMyProjectInvitationsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*ListMyProjectInvitationsResponse) *project_invitation.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *ListMyProjectInvitationsDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListMyProjectInvitationsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*ListMyProjectInvitationsResponse) []*project_invitation.Name
	})
	if ok {
		return project_invitation.ProjectInvitationNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	resources := typedMsg.GetProjectInvitations()
	list := make(project_invitation.ProjectInvitationNameList, 0, len(resources))
	for _, res := range resources {
		list = append(list, res.GetName())
	}
	return list
}

func (h *ListMyProjectInvitationsDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListMyProjectInvitationsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*ListMyProjectInvitationsResponse) *project_invitation.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetListMyProjectInvitationsDescriptor() *ListMyProjectInvitationsDescriptor {
	return listMyProjectInvitationsDescriptor
}

type ResendProjectInvitationDescriptor struct{}

type ResendProjectInvitationDescriptorClientMsgHandle struct{}

type ResendProjectInvitationDescriptorServerMsgHandle struct{}

func (d *ResendProjectInvitationDescriptor) NewEmptyClientMsg() proto.Message {
	return &ResendProjectInvitationRequest{}
}

func (d *ResendProjectInvitationDescriptor) NewEmptyServerMsg() proto.Message {
	return &ResendProjectInvitationResponse{}
}

func (d *ResendProjectInvitationDescriptor) IsUnary() bool {
	return true
}

func (d *ResendProjectInvitationDescriptor) IsClientStream() bool {
	return false
}

func (d *ResendProjectInvitationDescriptor) IsServerStream() bool {
	return false
}

func (d *ResendProjectInvitationDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *ResendProjectInvitationDescriptor) IsPluralSubject() bool {
	return false
}

func (d *ResendProjectInvitationDescriptor) HasSubjectResource() bool {
	return true
}

func (d *ResendProjectInvitationDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ResendProjectInvitationDescriptor) GetVerb() string {
	return "resend"
}

func (d *ResendProjectInvitationDescriptor) GetMethodName() string {
	return "ResendProjectInvitation"
}

func (d *ResendProjectInvitationDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1alpha2.ProjectInvitationService/ResendProjectInvitation"
}

func (d *ResendProjectInvitationDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha2"
}

func (d *ResendProjectInvitationDescriptor) GetApiName() string {
	return "ProjectInvitationService"
}

func (d *ResendProjectInvitationDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *ResendProjectInvitationDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *ResendProjectInvitationDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return projectInvitationServiceDescriptor
}

func (d *ResendProjectInvitationDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return project_invitation.GetDescriptor()
}

func (d *ResendProjectInvitationDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ResendProjectInvitationDescriptorClientMsgHandle{}
}

func (d *ResendProjectInvitationDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ResendProjectInvitationDescriptorServerMsgHandle{}
}

func (h *ResendProjectInvitationDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ResendProjectInvitationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*ResendProjectInvitationRequest) *project_invitation.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*project_invitation.Name)(nil)
}

func (h *ResendProjectInvitationDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ResendProjectInvitationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*ResendProjectInvitationRequest) []*project_invitation.Name
	})
	if ok {
		return project_invitation.ProjectInvitationNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *ResendProjectInvitationDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ResendProjectInvitationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*ResendProjectInvitationRequest) *project_invitation.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *ResendProjectInvitationDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ResendProjectInvitationResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*ResendProjectInvitationResponse) *project_invitation.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *ResendProjectInvitationDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ResendProjectInvitationResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*ResendProjectInvitationResponse) []*project_invitation.Name
	})
	if ok {
		return project_invitation.ProjectInvitationNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *ResendProjectInvitationDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ResendProjectInvitationResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*ResendProjectInvitationResponse) *project_invitation.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetResendProjectInvitationDescriptor() *ResendProjectInvitationDescriptor {
	return resendProjectInvitationDescriptor
}

type ProjectInvitationServiceDescriptor struct{}

func (d *ProjectInvitationServiceDescriptor) AllMethodDescriptors() []gotenclient.MethodDescriptor {
	return []gotenclient.MethodDescriptor{
		getProjectInvitationDescriptor,
		batchGetProjectInvitationsDescriptor,
		listProjectInvitationsDescriptor,
		watchProjectInvitationDescriptor,
		watchProjectInvitationsDescriptor,
		createProjectInvitationDescriptor,
		updateProjectInvitationDescriptor,
		deleteProjectInvitationDescriptor,
		acceptProjectInvitationDescriptor,
		declineProjectInvitationDescriptor,
		listMyProjectInvitationsDescriptor,
		resendProjectInvitationDescriptor,
	}
}

func (d *ProjectInvitationServiceDescriptor) GetFullAPIName() string {
	return "/ntt.iam.v1alpha2.ProjectInvitationService"
}

func (d *ProjectInvitationServiceDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha2"
}

func (d *ProjectInvitationServiceDescriptor) GetApiName() string {
	return "ProjectInvitationService"
}

func (d *ProjectInvitationServiceDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *ProjectInvitationServiceDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func GetProjectInvitationServiceDescriptor() *ProjectInvitationServiceDescriptor {
	return projectInvitationServiceDescriptor
}

func initDescriptors() {
	projectInvitationServiceDescriptor = &ProjectInvitationServiceDescriptor{}
	getProjectInvitationDescriptor = &GetProjectInvitationDescriptor{}
	batchGetProjectInvitationsDescriptor = &BatchGetProjectInvitationsDescriptor{}
	listProjectInvitationsDescriptor = &ListProjectInvitationsDescriptor{}
	watchProjectInvitationDescriptor = &WatchProjectInvitationDescriptor{}
	watchProjectInvitationsDescriptor = &WatchProjectInvitationsDescriptor{}
	createProjectInvitationDescriptor = &CreateProjectInvitationDescriptor{}
	updateProjectInvitationDescriptor = &UpdateProjectInvitationDescriptor{}
	deleteProjectInvitationDescriptor = &DeleteProjectInvitationDescriptor{}
	acceptProjectInvitationDescriptor = &AcceptProjectInvitationDescriptor{}
	declineProjectInvitationDescriptor = &DeclineProjectInvitationDescriptor{}
	listMyProjectInvitationsDescriptor = &ListMyProjectInvitationsDescriptor{}
	resendProjectInvitationDescriptor = &ResendProjectInvitationDescriptor{}
	gotenclient.GetRegistry().RegisterApiDescriptor(projectInvitationServiceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(getProjectInvitationDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(batchGetProjectInvitationsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(listProjectInvitationsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchProjectInvitationDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchProjectInvitationsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(createProjectInvitationDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(updateProjectInvitationDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(deleteProjectInvitationDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(acceptProjectInvitationDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(declineProjectInvitationDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(listMyProjectInvitationsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(resendProjectInvitationDescriptor)
}

func init() {
	if !descriptorsInitialized {
		initDescriptors()
		descriptorsInitialized = true
	}
}
