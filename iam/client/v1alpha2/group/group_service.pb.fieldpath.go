// Code generated by protoc-gen-goten-object
// File: edgelq/iam/proto/v1alpha2/group_service.proto
// DO NOT EDIT!!!

package group_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	group "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/group"
	organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/organization"
	project "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/project"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	empty "github.com/golang/protobuf/ptypes/empty"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = json.Marshaler(nil)
	_ = fmt.Stringer(nil)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = proto.Message(nil)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &group.Group{}
	_ = &organization.Organization{}
	_ = &project.Project{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type GetGroupRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() GetGroupRequest_FieldPathSelector
	Get(source *GetGroupRequest) []interface{}
	GetSingle(source *GetGroupRequest) (interface{}, bool)
	ClearValue(item *GetGroupRequest)

	// Those methods build corresponding GetGroupRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) GetGroupRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) GetGroupRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) GetGroupRequest_FieldPathArrayItemValue
}

type GetGroupRequest_FieldPathSelector int32

const (
	GetGroupRequest_FieldPathSelectorName      GetGroupRequest_FieldPathSelector = 0
	GetGroupRequest_FieldPathSelectorFieldMask GetGroupRequest_FieldPathSelector = 1
	GetGroupRequest_FieldPathSelectorView      GetGroupRequest_FieldPathSelector = 2
)

func (s GetGroupRequest_FieldPathSelector) String() string {
	switch s {
	case GetGroupRequest_FieldPathSelectorName:
		return "name"
	case GetGroupRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case GetGroupRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for GetGroupRequest: %d", s))
	}
}

func BuildGetGroupRequest_FieldPath(fp gotenobject.RawFieldPath) (GetGroupRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object GetGroupRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &GetGroupRequest_FieldTerminalPath{selector: GetGroupRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &GetGroupRequest_FieldTerminalPath{selector: GetGroupRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &GetGroupRequest_FieldTerminalPath{selector: GetGroupRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object GetGroupRequest", fp)
}

func ParseGetGroupRequest_FieldPath(rawField string) (GetGroupRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildGetGroupRequest_FieldPath(fp)
}

func MustParseGetGroupRequest_FieldPath(rawField string) GetGroupRequest_FieldPath {
	fp, err := ParseGetGroupRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type GetGroupRequest_FieldTerminalPath struct {
	selector GetGroupRequest_FieldPathSelector
}

var _ GetGroupRequest_FieldPath = (*GetGroupRequest_FieldTerminalPath)(nil)

func (fp *GetGroupRequest_FieldTerminalPath) Selector() GetGroupRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *GetGroupRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *GetGroupRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source GetGroupRequest
func (fp *GetGroupRequest_FieldTerminalPath) Get(source *GetGroupRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case GetGroupRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case GetGroupRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case GetGroupRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for GetGroupRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *GetGroupRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*GetGroupRequest))
}

// GetSingle returns value pointed by specific field of from source GetGroupRequest
func (fp *GetGroupRequest_FieldTerminalPath) GetSingle(source *GetGroupRequest) (interface{}, bool) {
	switch fp.selector {
	case GetGroupRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case GetGroupRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case GetGroupRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for GetGroupRequest: %d", fp.selector))
	}
}

func (fp *GetGroupRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*GetGroupRequest))
}

// GetDefault returns a default value of the field type
func (fp *GetGroupRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case GetGroupRequest_FieldPathSelectorName:
		return (*group.Reference)(nil)
	case GetGroupRequest_FieldPathSelectorFieldMask:
		return (*group.Group_FieldMask)(nil)
	case GetGroupRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for GetGroupRequest: %d", fp.selector))
	}
}

func (fp *GetGroupRequest_FieldTerminalPath) ClearValue(item *GetGroupRequest) {
	if item != nil {
		switch fp.selector {
		case GetGroupRequest_FieldPathSelectorName:
			item.Name = nil
		case GetGroupRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case GetGroupRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for GetGroupRequest: %d", fp.selector))
		}
	}
}

func (fp *GetGroupRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*GetGroupRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *GetGroupRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == GetGroupRequest_FieldPathSelectorName ||
		fp.selector == GetGroupRequest_FieldPathSelectorFieldMask ||
		fp.selector == GetGroupRequest_FieldPathSelectorView
}

func (fp *GetGroupRequest_FieldTerminalPath) WithIValue(value interface{}) GetGroupRequest_FieldPathValue {
	switch fp.selector {
	case GetGroupRequest_FieldPathSelectorName:
		return &GetGroupRequest_FieldTerminalPathValue{GetGroupRequest_FieldTerminalPath: *fp, value: value.(*group.Reference)}
	case GetGroupRequest_FieldPathSelectorFieldMask:
		return &GetGroupRequest_FieldTerminalPathValue{GetGroupRequest_FieldTerminalPath: *fp, value: value.(*group.Group_FieldMask)}
	case GetGroupRequest_FieldPathSelectorView:
		return &GetGroupRequest_FieldTerminalPathValue{GetGroupRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetGroupRequest: %d", fp.selector))
	}
}

func (fp *GetGroupRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *GetGroupRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) GetGroupRequest_FieldPathArrayOfValues {
	fpaov := &GetGroupRequest_FieldTerminalPathArrayOfValues{GetGroupRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case GetGroupRequest_FieldPathSelectorName:
		return &GetGroupRequest_FieldTerminalPathArrayOfValues{GetGroupRequest_FieldTerminalPath: *fp, values: values.([]*group.Reference)}
	case GetGroupRequest_FieldPathSelectorFieldMask:
		return &GetGroupRequest_FieldTerminalPathArrayOfValues{GetGroupRequest_FieldTerminalPath: *fp, values: values.([]*group.Group_FieldMask)}
	case GetGroupRequest_FieldPathSelectorView:
		return &GetGroupRequest_FieldTerminalPathArrayOfValues{GetGroupRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetGroupRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *GetGroupRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *GetGroupRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) GetGroupRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for GetGroupRequest: %d", fp.selector))
	}
}

func (fp *GetGroupRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// GetGroupRequest_FieldPathValue allows storing values for GetGroupRequest fields according to their type
type GetGroupRequest_FieldPathValue interface {
	GetGroupRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **GetGroupRequest)
	CompareWith(*GetGroupRequest) (cmp int, comparable bool)
}

func ParseGetGroupRequest_FieldPathValue(pathStr, valueStr string) (GetGroupRequest_FieldPathValue, error) {
	fp, err := ParseGetGroupRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetGroupRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(GetGroupRequest_FieldPathValue), nil
}

func MustParseGetGroupRequest_FieldPathValue(pathStr, valueStr string) GetGroupRequest_FieldPathValue {
	fpv, err := ParseGetGroupRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type GetGroupRequest_FieldTerminalPathValue struct {
	GetGroupRequest_FieldTerminalPath
	value interface{}
}

var _ GetGroupRequest_FieldPathValue = (*GetGroupRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'GetGroupRequest' as interface{}
func (fpv *GetGroupRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *GetGroupRequest_FieldTerminalPathValue) AsNameValue() (*group.Reference, bool) {
	res, ok := fpv.value.(*group.Reference)
	return res, ok
}
func (fpv *GetGroupRequest_FieldTerminalPathValue) AsFieldMaskValue() (*group.Group_FieldMask, bool) {
	res, ok := fpv.value.(*group.Group_FieldMask)
	return res, ok
}
func (fpv *GetGroupRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object GetGroupRequest
func (fpv *GetGroupRequest_FieldTerminalPathValue) SetTo(target **GetGroupRequest) {
	if *target == nil {
		*target = new(GetGroupRequest)
	}
	switch fpv.selector {
	case GetGroupRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*group.Reference)
	case GetGroupRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*group.Group_FieldMask)
	case GetGroupRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for GetGroupRequest: %d", fpv.selector))
	}
}

func (fpv *GetGroupRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*GetGroupRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'GetGroupRequest_FieldTerminalPathValue' with the value under path in 'GetGroupRequest'.
func (fpv *GetGroupRequest_FieldTerminalPathValue) CompareWith(source *GetGroupRequest) (int, bool) {
	switch fpv.selector {
	case GetGroupRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*group.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case GetGroupRequest_FieldPathSelectorFieldMask:
		return 0, false
	case GetGroupRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for GetGroupRequest: %d", fpv.selector))
	}
}

func (fpv *GetGroupRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*GetGroupRequest))
}

// GetGroupRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for GetGroupRequest according to their type
// Present only for array (repeated) types.
type GetGroupRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	GetGroupRequest_FieldPath
	ContainsValue(*GetGroupRequest) bool
}

// ParseGetGroupRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseGetGroupRequest_FieldPathArrayItemValue(pathStr, valueStr string) (GetGroupRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseGetGroupRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetGroupRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(GetGroupRequest_FieldPathArrayItemValue), nil
}

func MustParseGetGroupRequest_FieldPathArrayItemValue(pathStr, valueStr string) GetGroupRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseGetGroupRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type GetGroupRequest_FieldTerminalPathArrayItemValue struct {
	GetGroupRequest_FieldTerminalPath
	value interface{}
}

var _ GetGroupRequest_FieldPathArrayItemValue = (*GetGroupRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object GetGroupRequest as interface{}
func (fpaiv *GetGroupRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *GetGroupRequest_FieldTerminalPathArrayItemValue) GetSingle(source *GetGroupRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *GetGroupRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*GetGroupRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'GetGroupRequest'
func (fpaiv *GetGroupRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *GetGroupRequest) bool {
	slice := fpaiv.GetGroupRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// GetGroupRequest_FieldPathArrayOfValues allows storing slice of values for GetGroupRequest fields according to their type
type GetGroupRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	GetGroupRequest_FieldPath
}

func ParseGetGroupRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (GetGroupRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseGetGroupRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetGroupRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(GetGroupRequest_FieldPathArrayOfValues), nil
}

func MustParseGetGroupRequest_FieldPathArrayOfValues(pathStr, valuesStr string) GetGroupRequest_FieldPathArrayOfValues {
	fpaov, err := ParseGetGroupRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type GetGroupRequest_FieldTerminalPathArrayOfValues struct {
	GetGroupRequest_FieldTerminalPath
	values interface{}
}

var _ GetGroupRequest_FieldPathArrayOfValues = (*GetGroupRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *GetGroupRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case GetGroupRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*group.Reference) {
			values = append(values, v)
		}
	case GetGroupRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*group.Group_FieldMask) {
			values = append(values, v)
		}
	case GetGroupRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *GetGroupRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*group.Reference, bool) {
	res, ok := fpaov.values.([]*group.Reference)
	return res, ok
}
func (fpaov *GetGroupRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*group.Group_FieldMask, bool) {
	res, ok := fpaov.values.([]*group.Group_FieldMask)
	return res, ok
}
func (fpaov *GetGroupRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetGroupsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetGroupsRequest_FieldPathSelector
	Get(source *BatchGetGroupsRequest) []interface{}
	GetSingle(source *BatchGetGroupsRequest) (interface{}, bool)
	ClearValue(item *BatchGetGroupsRequest)

	// Those methods build corresponding BatchGetGroupsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetGroupsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetGroupsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetGroupsRequest_FieldPathArrayItemValue
}

type BatchGetGroupsRequest_FieldPathSelector int32

const (
	BatchGetGroupsRequest_FieldPathSelectorParent    BatchGetGroupsRequest_FieldPathSelector = 0
	BatchGetGroupsRequest_FieldPathSelectorNames     BatchGetGroupsRequest_FieldPathSelector = 1
	BatchGetGroupsRequest_FieldPathSelectorFieldMask BatchGetGroupsRequest_FieldPathSelector = 2
	BatchGetGroupsRequest_FieldPathSelectorView      BatchGetGroupsRequest_FieldPathSelector = 3
)

func (s BatchGetGroupsRequest_FieldPathSelector) String() string {
	switch s {
	case BatchGetGroupsRequest_FieldPathSelectorParent:
		return "parent"
	case BatchGetGroupsRequest_FieldPathSelectorNames:
		return "names"
	case BatchGetGroupsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case BatchGetGroupsRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetGroupsRequest: %d", s))
	}
}

func BuildBatchGetGroupsRequest_FieldPath(fp gotenobject.RawFieldPath) (BatchGetGroupsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetGroupsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &BatchGetGroupsRequest_FieldTerminalPath{selector: BatchGetGroupsRequest_FieldPathSelectorParent}, nil
		case "names":
			return &BatchGetGroupsRequest_FieldTerminalPath{selector: BatchGetGroupsRequest_FieldPathSelectorNames}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &BatchGetGroupsRequest_FieldTerminalPath{selector: BatchGetGroupsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &BatchGetGroupsRequest_FieldTerminalPath{selector: BatchGetGroupsRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetGroupsRequest", fp)
}

func ParseBatchGetGroupsRequest_FieldPath(rawField string) (BatchGetGroupsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetGroupsRequest_FieldPath(fp)
}

func MustParseBatchGetGroupsRequest_FieldPath(rawField string) BatchGetGroupsRequest_FieldPath {
	fp, err := ParseBatchGetGroupsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetGroupsRequest_FieldTerminalPath struct {
	selector BatchGetGroupsRequest_FieldPathSelector
}

var _ BatchGetGroupsRequest_FieldPath = (*BatchGetGroupsRequest_FieldTerminalPath)(nil)

func (fp *BatchGetGroupsRequest_FieldTerminalPath) Selector() BatchGetGroupsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetGroupsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetGroupsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetGroupsRequest
func (fp *BatchGetGroupsRequest_FieldTerminalPath) Get(source *BatchGetGroupsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetGroupsRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case BatchGetGroupsRequest_FieldPathSelectorNames:
			for _, value := range source.GetNames() {
				values = append(values, value)
			}
		case BatchGetGroupsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case BatchGetGroupsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetGroupsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetGroupsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetGroupsRequest))
}

// GetSingle returns value pointed by specific field of from source BatchGetGroupsRequest
func (fp *BatchGetGroupsRequest_FieldTerminalPath) GetSingle(source *BatchGetGroupsRequest) (interface{}, bool) {
	switch fp.selector {
	case BatchGetGroupsRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case BatchGetGroupsRequest_FieldPathSelectorNames:
		res := source.GetNames()
		return res, res != nil
	case BatchGetGroupsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case BatchGetGroupsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetGroupsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetGroupsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetGroupsRequest))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetGroupsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetGroupsRequest_FieldPathSelectorParent:
		return (*group.Reference)(nil)
	case BatchGetGroupsRequest_FieldPathSelectorNames:
		return ([]*group.Reference)(nil)
	case BatchGetGroupsRequest_FieldPathSelectorFieldMask:
		return (*group.Group_FieldMask)(nil)
	case BatchGetGroupsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetGroupsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetGroupsRequest_FieldTerminalPath) ClearValue(item *BatchGetGroupsRequest) {
	if item != nil {
		switch fp.selector {
		case BatchGetGroupsRequest_FieldPathSelectorParent:
			item.Parent = nil
		case BatchGetGroupsRequest_FieldPathSelectorNames:
			item.Names = nil
		case BatchGetGroupsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case BatchGetGroupsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetGroupsRequest: %d", fp.selector))
		}
	}
}

func (fp *BatchGetGroupsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetGroupsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetGroupsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetGroupsRequest_FieldPathSelectorParent ||
		fp.selector == BatchGetGroupsRequest_FieldPathSelectorNames ||
		fp.selector == BatchGetGroupsRequest_FieldPathSelectorFieldMask ||
		fp.selector == BatchGetGroupsRequest_FieldPathSelectorView
}

func (fp *BatchGetGroupsRequest_FieldTerminalPath) WithIValue(value interface{}) BatchGetGroupsRequest_FieldPathValue {
	switch fp.selector {
	case BatchGetGroupsRequest_FieldPathSelectorParent:
		return &BatchGetGroupsRequest_FieldTerminalPathValue{BatchGetGroupsRequest_FieldTerminalPath: *fp, value: value.(*group.Reference)}
	case BatchGetGroupsRequest_FieldPathSelectorNames:
		return &BatchGetGroupsRequest_FieldTerminalPathValue{BatchGetGroupsRequest_FieldTerminalPath: *fp, value: value.([]*group.Reference)}
	case BatchGetGroupsRequest_FieldPathSelectorFieldMask:
		return &BatchGetGroupsRequest_FieldTerminalPathValue{BatchGetGroupsRequest_FieldTerminalPath: *fp, value: value.(*group.Group_FieldMask)}
	case BatchGetGroupsRequest_FieldPathSelectorView:
		return &BatchGetGroupsRequest_FieldTerminalPathValue{BatchGetGroupsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetGroupsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetGroupsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetGroupsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetGroupsRequest_FieldPathArrayOfValues {
	fpaov := &BatchGetGroupsRequest_FieldTerminalPathArrayOfValues{BatchGetGroupsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetGroupsRequest_FieldPathSelectorParent:
		return &BatchGetGroupsRequest_FieldTerminalPathArrayOfValues{BatchGetGroupsRequest_FieldTerminalPath: *fp, values: values.([]*group.Reference)}
	case BatchGetGroupsRequest_FieldPathSelectorNames:
		return &BatchGetGroupsRequest_FieldTerminalPathArrayOfValues{BatchGetGroupsRequest_FieldTerminalPath: *fp, values: values.([][]*group.Reference)}
	case BatchGetGroupsRequest_FieldPathSelectorFieldMask:
		return &BatchGetGroupsRequest_FieldTerminalPathArrayOfValues{BatchGetGroupsRequest_FieldTerminalPath: *fp, values: values.([]*group.Group_FieldMask)}
	case BatchGetGroupsRequest_FieldPathSelectorView:
		return &BatchGetGroupsRequest_FieldTerminalPathArrayOfValues{BatchGetGroupsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetGroupsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetGroupsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetGroupsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetGroupsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetGroupsRequest_FieldPathSelectorNames:
		return &BatchGetGroupsRequest_FieldTerminalPathArrayItemValue{BatchGetGroupsRequest_FieldTerminalPath: *fp, value: value.(*group.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetGroupsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetGroupsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// BatchGetGroupsRequest_FieldPathValue allows storing values for BatchGetGroupsRequest fields according to their type
type BatchGetGroupsRequest_FieldPathValue interface {
	BatchGetGroupsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetGroupsRequest)
	CompareWith(*BatchGetGroupsRequest) (cmp int, comparable bool)
}

func ParseBatchGetGroupsRequest_FieldPathValue(pathStr, valueStr string) (BatchGetGroupsRequest_FieldPathValue, error) {
	fp, err := ParseBatchGetGroupsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetGroupsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetGroupsRequest_FieldPathValue), nil
}

func MustParseBatchGetGroupsRequest_FieldPathValue(pathStr, valueStr string) BatchGetGroupsRequest_FieldPathValue {
	fpv, err := ParseBatchGetGroupsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetGroupsRequest_FieldTerminalPathValue struct {
	BatchGetGroupsRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetGroupsRequest_FieldPathValue = (*BatchGetGroupsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetGroupsRequest' as interface{}
func (fpv *BatchGetGroupsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetGroupsRequest_FieldTerminalPathValue) AsParentValue() (*group.Reference, bool) {
	res, ok := fpv.value.(*group.Reference)
	return res, ok
}
func (fpv *BatchGetGroupsRequest_FieldTerminalPathValue) AsNamesValue() ([]*group.Reference, bool) {
	res, ok := fpv.value.([]*group.Reference)
	return res, ok
}
func (fpv *BatchGetGroupsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*group.Group_FieldMask, bool) {
	res, ok := fpv.value.(*group.Group_FieldMask)
	return res, ok
}
func (fpv *BatchGetGroupsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetGroupsRequest
func (fpv *BatchGetGroupsRequest_FieldTerminalPathValue) SetTo(target **BatchGetGroupsRequest) {
	if *target == nil {
		*target = new(BatchGetGroupsRequest)
	}
	switch fpv.selector {
	case BatchGetGroupsRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*group.Reference)
	case BatchGetGroupsRequest_FieldPathSelectorNames:
		(*target).Names = fpv.value.([]*group.Reference)
	case BatchGetGroupsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*group.Group_FieldMask)
	case BatchGetGroupsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetGroupsRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetGroupsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetGroupsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetGroupsRequest_FieldTerminalPathValue' with the value under path in 'BatchGetGroupsRequest'.
func (fpv *BatchGetGroupsRequest_FieldTerminalPathValue) CompareWith(source *BatchGetGroupsRequest) (int, bool) {
	switch fpv.selector {
	case BatchGetGroupsRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*group.Reference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case BatchGetGroupsRequest_FieldPathSelectorNames:
		return 0, false
	case BatchGetGroupsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case BatchGetGroupsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetGroupsRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetGroupsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetGroupsRequest))
}

// BatchGetGroupsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetGroupsRequest according to their type
// Present only for array (repeated) types.
type BatchGetGroupsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetGroupsRequest_FieldPath
	ContainsValue(*BatchGetGroupsRequest) bool
}

// ParseBatchGetGroupsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetGroupsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetGroupsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetGroupsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetGroupsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetGroupsRequest_FieldPathArrayItemValue), nil
}

func MustParseBatchGetGroupsRequest_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetGroupsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetGroupsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetGroupsRequest_FieldTerminalPathArrayItemValue struct {
	BatchGetGroupsRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetGroupsRequest_FieldPathArrayItemValue = (*BatchGetGroupsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetGroupsRequest as interface{}
func (fpaiv *BatchGetGroupsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetGroupsRequest_FieldTerminalPathArrayItemValue) AsNamesItemValue() (*group.Reference, bool) {
	res, ok := fpaiv.value.(*group.Reference)
	return res, ok
}

func (fpaiv *BatchGetGroupsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetGroupsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetGroupsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetGroupsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetGroupsRequest'
func (fpaiv *BatchGetGroupsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetGroupsRequest) bool {
	slice := fpaiv.BatchGetGroupsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// BatchGetGroupsRequest_FieldPathArrayOfValues allows storing slice of values for BatchGetGroupsRequest fields according to their type
type BatchGetGroupsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetGroupsRequest_FieldPath
}

func ParseBatchGetGroupsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetGroupsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetGroupsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetGroupsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetGroupsRequest_FieldPathArrayOfValues), nil
}

func MustParseBatchGetGroupsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetGroupsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetGroupsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetGroupsRequest_FieldTerminalPathArrayOfValues struct {
	BatchGetGroupsRequest_FieldTerminalPath
	values interface{}
}

var _ BatchGetGroupsRequest_FieldPathArrayOfValues = (*BatchGetGroupsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetGroupsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetGroupsRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*group.Reference) {
			values = append(values, v)
		}
	case BatchGetGroupsRequest_FieldPathSelectorNames:
		for _, v := range fpaov.values.([][]*group.Reference) {
			values = append(values, v)
		}
	case BatchGetGroupsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*group.Group_FieldMask) {
			values = append(values, v)
		}
	case BatchGetGroupsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetGroupsRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*group.Reference, bool) {
	res, ok := fpaov.values.([]*group.Reference)
	return res, ok
}
func (fpaov *BatchGetGroupsRequest_FieldTerminalPathArrayOfValues) AsNamesArrayOfValues() ([][]*group.Reference, bool) {
	res, ok := fpaov.values.([][]*group.Reference)
	return res, ok
}
func (fpaov *BatchGetGroupsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*group.Group_FieldMask, bool) {
	res, ok := fpaov.values.([]*group.Group_FieldMask)
	return res, ok
}
func (fpaov *BatchGetGroupsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetGroupsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetGroupsResponse_FieldPathSelector
	Get(source *BatchGetGroupsResponse) []interface{}
	GetSingle(source *BatchGetGroupsResponse) (interface{}, bool)
	ClearValue(item *BatchGetGroupsResponse)

	// Those methods build corresponding BatchGetGroupsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetGroupsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetGroupsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetGroupsResponse_FieldPathArrayItemValue
}

type BatchGetGroupsResponse_FieldPathSelector int32

const (
	BatchGetGroupsResponse_FieldPathSelectorGroups  BatchGetGroupsResponse_FieldPathSelector = 0
	BatchGetGroupsResponse_FieldPathSelectorMissing BatchGetGroupsResponse_FieldPathSelector = 1
)

func (s BatchGetGroupsResponse_FieldPathSelector) String() string {
	switch s {
	case BatchGetGroupsResponse_FieldPathSelectorGroups:
		return "groups"
	case BatchGetGroupsResponse_FieldPathSelectorMissing:
		return "missing"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetGroupsResponse: %d", s))
	}
}

func BuildBatchGetGroupsResponse_FieldPath(fp gotenobject.RawFieldPath) (BatchGetGroupsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetGroupsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "groups":
			return &BatchGetGroupsResponse_FieldTerminalPath{selector: BatchGetGroupsResponse_FieldPathSelectorGroups}, nil
		case "missing":
			return &BatchGetGroupsResponse_FieldTerminalPath{selector: BatchGetGroupsResponse_FieldPathSelectorMissing}, nil
		}
	} else {
		switch fp[0] {
		case "groups":
			if subpath, err := group.BuildGroup_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &BatchGetGroupsResponse_FieldSubPath{selector: BatchGetGroupsResponse_FieldPathSelectorGroups, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetGroupsResponse", fp)
}

func ParseBatchGetGroupsResponse_FieldPath(rawField string) (BatchGetGroupsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetGroupsResponse_FieldPath(fp)
}

func MustParseBatchGetGroupsResponse_FieldPath(rawField string) BatchGetGroupsResponse_FieldPath {
	fp, err := ParseBatchGetGroupsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetGroupsResponse_FieldTerminalPath struct {
	selector BatchGetGroupsResponse_FieldPathSelector
}

var _ BatchGetGroupsResponse_FieldPath = (*BatchGetGroupsResponse_FieldTerminalPath)(nil)

func (fp *BatchGetGroupsResponse_FieldTerminalPath) Selector() BatchGetGroupsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetGroupsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetGroupsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetGroupsResponse
func (fp *BatchGetGroupsResponse_FieldTerminalPath) Get(source *BatchGetGroupsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetGroupsResponse_FieldPathSelectorGroups:
			for _, value := range source.GetGroups() {
				values = append(values, value)
			}
		case BatchGetGroupsResponse_FieldPathSelectorMissing:
			for _, value := range source.GetMissing() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetGroupsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetGroupsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetGroupsResponse))
}

// GetSingle returns value pointed by specific field of from source BatchGetGroupsResponse
func (fp *BatchGetGroupsResponse_FieldTerminalPath) GetSingle(source *BatchGetGroupsResponse) (interface{}, bool) {
	switch fp.selector {
	case BatchGetGroupsResponse_FieldPathSelectorGroups:
		res := source.GetGroups()
		return res, res != nil
	case BatchGetGroupsResponse_FieldPathSelectorMissing:
		res := source.GetMissing()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetGroupsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetGroupsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetGroupsResponse))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetGroupsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetGroupsResponse_FieldPathSelectorGroups:
		return ([]*group.Group)(nil)
	case BatchGetGroupsResponse_FieldPathSelectorMissing:
		return ([]*group.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetGroupsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetGroupsResponse_FieldTerminalPath) ClearValue(item *BatchGetGroupsResponse) {
	if item != nil {
		switch fp.selector {
		case BatchGetGroupsResponse_FieldPathSelectorGroups:
			item.Groups = nil
		case BatchGetGroupsResponse_FieldPathSelectorMissing:
			item.Missing = nil
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetGroupsResponse: %d", fp.selector))
		}
	}
}

func (fp *BatchGetGroupsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetGroupsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetGroupsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetGroupsResponse_FieldPathSelectorMissing
}

func (fp *BatchGetGroupsResponse_FieldTerminalPath) WithIValue(value interface{}) BatchGetGroupsResponse_FieldPathValue {
	switch fp.selector {
	case BatchGetGroupsResponse_FieldPathSelectorGroups:
		return &BatchGetGroupsResponse_FieldTerminalPathValue{BatchGetGroupsResponse_FieldTerminalPath: *fp, value: value.([]*group.Group)}
	case BatchGetGroupsResponse_FieldPathSelectorMissing:
		return &BatchGetGroupsResponse_FieldTerminalPathValue{BatchGetGroupsResponse_FieldTerminalPath: *fp, value: value.([]*group.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetGroupsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetGroupsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetGroupsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetGroupsResponse_FieldPathArrayOfValues {
	fpaov := &BatchGetGroupsResponse_FieldTerminalPathArrayOfValues{BatchGetGroupsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetGroupsResponse_FieldPathSelectorGroups:
		return &BatchGetGroupsResponse_FieldTerminalPathArrayOfValues{BatchGetGroupsResponse_FieldTerminalPath: *fp, values: values.([][]*group.Group)}
	case BatchGetGroupsResponse_FieldPathSelectorMissing:
		return &BatchGetGroupsResponse_FieldTerminalPathArrayOfValues{BatchGetGroupsResponse_FieldTerminalPath: *fp, values: values.([][]*group.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetGroupsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetGroupsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetGroupsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetGroupsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetGroupsResponse_FieldPathSelectorGroups:
		return &BatchGetGroupsResponse_FieldTerminalPathArrayItemValue{BatchGetGroupsResponse_FieldTerminalPath: *fp, value: value.(*group.Group)}
	case BatchGetGroupsResponse_FieldPathSelectorMissing:
		return &BatchGetGroupsResponse_FieldTerminalPathArrayItemValue{BatchGetGroupsResponse_FieldTerminalPath: *fp, value: value.(*group.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetGroupsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetGroupsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type BatchGetGroupsResponse_FieldSubPath struct {
	selector BatchGetGroupsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ BatchGetGroupsResponse_FieldPath = (*BatchGetGroupsResponse_FieldSubPath)(nil)

func (fps *BatchGetGroupsResponse_FieldSubPath) Selector() BatchGetGroupsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *BatchGetGroupsResponse_FieldSubPath) AsGroupsSubPath() (group.Group_FieldPath, bool) {
	res, ok := fps.subPath.(group.Group_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *BatchGetGroupsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *BatchGetGroupsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source BatchGetGroupsResponse
func (fps *BatchGetGroupsResponse_FieldSubPath) Get(source *BatchGetGroupsResponse) (values []interface{}) {
	if asGroupFieldPath, ok := fps.AsGroupsSubPath(); ok {
		for _, item := range source.GetGroups() {
			values = append(values, asGroupFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for BatchGetGroupsResponse: %d", fps.selector))
	}
	return
}

func (fps *BatchGetGroupsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*BatchGetGroupsResponse))
}

// GetSingle returns value of selected field from source BatchGetGroupsResponse
func (fps *BatchGetGroupsResponse_FieldSubPath) GetSingle(source *BatchGetGroupsResponse) (interface{}, bool) {
	switch fps.selector {
	case BatchGetGroupsResponse_FieldPathSelectorGroups:
		if len(source.GetGroups()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetGroups()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetGroupsResponse: %d", fps.selector))
	}
}

func (fps *BatchGetGroupsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*BatchGetGroupsResponse))
}

// GetDefault returns a default value of the field type
func (fps *BatchGetGroupsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *BatchGetGroupsResponse_FieldSubPath) ClearValue(item *BatchGetGroupsResponse) {
	if item != nil {
		switch fps.selector {
		case BatchGetGroupsResponse_FieldPathSelectorGroups:
			for _, subItem := range item.Groups {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetGroupsResponse: %d", fps.selector))
		}
	}
}

func (fps *BatchGetGroupsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*BatchGetGroupsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *BatchGetGroupsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *BatchGetGroupsResponse_FieldSubPath) WithIValue(value interface{}) BatchGetGroupsResponse_FieldPathValue {
	return &BatchGetGroupsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *BatchGetGroupsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *BatchGetGroupsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) BatchGetGroupsResponse_FieldPathArrayOfValues {
	return &BatchGetGroupsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *BatchGetGroupsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *BatchGetGroupsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) BatchGetGroupsResponse_FieldPathArrayItemValue {
	return &BatchGetGroupsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *BatchGetGroupsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// BatchGetGroupsResponse_FieldPathValue allows storing values for BatchGetGroupsResponse fields according to their type
type BatchGetGroupsResponse_FieldPathValue interface {
	BatchGetGroupsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetGroupsResponse)
	CompareWith(*BatchGetGroupsResponse) (cmp int, comparable bool)
}

func ParseBatchGetGroupsResponse_FieldPathValue(pathStr, valueStr string) (BatchGetGroupsResponse_FieldPathValue, error) {
	fp, err := ParseBatchGetGroupsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetGroupsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetGroupsResponse_FieldPathValue), nil
}

func MustParseBatchGetGroupsResponse_FieldPathValue(pathStr, valueStr string) BatchGetGroupsResponse_FieldPathValue {
	fpv, err := ParseBatchGetGroupsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetGroupsResponse_FieldTerminalPathValue struct {
	BatchGetGroupsResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetGroupsResponse_FieldPathValue = (*BatchGetGroupsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetGroupsResponse' as interface{}
func (fpv *BatchGetGroupsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetGroupsResponse_FieldTerminalPathValue) AsGroupsValue() ([]*group.Group, bool) {
	res, ok := fpv.value.([]*group.Group)
	return res, ok
}
func (fpv *BatchGetGroupsResponse_FieldTerminalPathValue) AsMissingValue() ([]*group.Reference, bool) {
	res, ok := fpv.value.([]*group.Reference)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetGroupsResponse
func (fpv *BatchGetGroupsResponse_FieldTerminalPathValue) SetTo(target **BatchGetGroupsResponse) {
	if *target == nil {
		*target = new(BatchGetGroupsResponse)
	}
	switch fpv.selector {
	case BatchGetGroupsResponse_FieldPathSelectorGroups:
		(*target).Groups = fpv.value.([]*group.Group)
	case BatchGetGroupsResponse_FieldPathSelectorMissing:
		(*target).Missing = fpv.value.([]*group.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetGroupsResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetGroupsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetGroupsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetGroupsResponse_FieldTerminalPathValue' with the value under path in 'BatchGetGroupsResponse'.
func (fpv *BatchGetGroupsResponse_FieldTerminalPathValue) CompareWith(source *BatchGetGroupsResponse) (int, bool) {
	switch fpv.selector {
	case BatchGetGroupsResponse_FieldPathSelectorGroups:
		return 0, false
	case BatchGetGroupsResponse_FieldPathSelectorMissing:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetGroupsResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetGroupsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetGroupsResponse))
}

type BatchGetGroupsResponse_FieldSubPathValue struct {
	BatchGetGroupsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ BatchGetGroupsResponse_FieldPathValue = (*BatchGetGroupsResponse_FieldSubPathValue)(nil)

func (fpvs *BatchGetGroupsResponse_FieldSubPathValue) AsGroupsPathValue() (group.Group_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(group.Group_FieldPathValue)
	return res, ok
}

func (fpvs *BatchGetGroupsResponse_FieldSubPathValue) SetTo(target **BatchGetGroupsResponse) {
	if *target == nil {
		*target = new(BatchGetGroupsResponse)
	}
	switch fpvs.Selector() {
	case BatchGetGroupsResponse_FieldPathSelectorGroups:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetGroupsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetGroupsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetGroupsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *BatchGetGroupsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *BatchGetGroupsResponse_FieldSubPathValue) CompareWith(source *BatchGetGroupsResponse) (int, bool) {
	switch fpvs.Selector() {
	case BatchGetGroupsResponse_FieldPathSelectorGroups:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetGroupsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetGroupsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*BatchGetGroupsResponse))
}

// BatchGetGroupsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetGroupsResponse according to their type
// Present only for array (repeated) types.
type BatchGetGroupsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetGroupsResponse_FieldPath
	ContainsValue(*BatchGetGroupsResponse) bool
}

// ParseBatchGetGroupsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetGroupsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetGroupsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetGroupsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetGroupsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetGroupsResponse_FieldPathArrayItemValue), nil
}

func MustParseBatchGetGroupsResponse_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetGroupsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetGroupsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetGroupsResponse_FieldTerminalPathArrayItemValue struct {
	BatchGetGroupsResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetGroupsResponse_FieldPathArrayItemValue = (*BatchGetGroupsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetGroupsResponse as interface{}
func (fpaiv *BatchGetGroupsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetGroupsResponse_FieldTerminalPathArrayItemValue) AsGroupsItemValue() (*group.Group, bool) {
	res, ok := fpaiv.value.(*group.Group)
	return res, ok
}
func (fpaiv *BatchGetGroupsResponse_FieldTerminalPathArrayItemValue) AsMissingItemValue() (*group.Reference, bool) {
	res, ok := fpaiv.value.(*group.Reference)
	return res, ok
}

func (fpaiv *BatchGetGroupsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetGroupsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetGroupsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetGroupsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetGroupsResponse'
func (fpaiv *BatchGetGroupsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetGroupsResponse) bool {
	slice := fpaiv.BatchGetGroupsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type BatchGetGroupsResponse_FieldSubPathArrayItemValue struct {
	BatchGetGroupsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *BatchGetGroupsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *BatchGetGroupsResponse_FieldSubPathArrayItemValue) AsGroupsPathItemValue() (group.Group_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(group.Group_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetGroupsResponse'
func (fpaivs *BatchGetGroupsResponse_FieldSubPathArrayItemValue) ContainsValue(source *BatchGetGroupsResponse) bool {
	switch fpaivs.Selector() {
	case BatchGetGroupsResponse_FieldPathSelectorGroups:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetGroupsResponse: %d", fpaivs.Selector()))
	}
}

// BatchGetGroupsResponse_FieldPathArrayOfValues allows storing slice of values for BatchGetGroupsResponse fields according to their type
type BatchGetGroupsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetGroupsResponse_FieldPath
}

func ParseBatchGetGroupsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetGroupsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetGroupsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetGroupsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetGroupsResponse_FieldPathArrayOfValues), nil
}

func MustParseBatchGetGroupsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetGroupsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetGroupsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetGroupsResponse_FieldTerminalPathArrayOfValues struct {
	BatchGetGroupsResponse_FieldTerminalPath
	values interface{}
}

var _ BatchGetGroupsResponse_FieldPathArrayOfValues = (*BatchGetGroupsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetGroupsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetGroupsResponse_FieldPathSelectorGroups:
		for _, v := range fpaov.values.([][]*group.Group) {
			values = append(values, v)
		}
	case BatchGetGroupsResponse_FieldPathSelectorMissing:
		for _, v := range fpaov.values.([][]*group.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetGroupsResponse_FieldTerminalPathArrayOfValues) AsGroupsArrayOfValues() ([][]*group.Group, bool) {
	res, ok := fpaov.values.([][]*group.Group)
	return res, ok
}
func (fpaov *BatchGetGroupsResponse_FieldTerminalPathArrayOfValues) AsMissingArrayOfValues() ([][]*group.Reference, bool) {
	res, ok := fpaov.values.([][]*group.Reference)
	return res, ok
}

type BatchGetGroupsResponse_FieldSubPathArrayOfValues struct {
	BatchGetGroupsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ BatchGetGroupsResponse_FieldPathArrayOfValues = (*BatchGetGroupsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *BatchGetGroupsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *BatchGetGroupsResponse_FieldSubPathArrayOfValues) AsGroupsPathArrayOfValues() (group.Group_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(group.Group_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListGroupsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListGroupsRequest_FieldPathSelector
	Get(source *ListGroupsRequest) []interface{}
	GetSingle(source *ListGroupsRequest) (interface{}, bool)
	ClearValue(item *ListGroupsRequest)

	// Those methods build corresponding ListGroupsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListGroupsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ListGroupsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListGroupsRequest_FieldPathArrayItemValue
}

type ListGroupsRequest_FieldPathSelector int32

const (
	ListGroupsRequest_FieldPathSelectorParent    ListGroupsRequest_FieldPathSelector = 0
	ListGroupsRequest_FieldPathSelectorPageSize  ListGroupsRequest_FieldPathSelector = 1
	ListGroupsRequest_FieldPathSelectorPageToken ListGroupsRequest_FieldPathSelector = 2
	ListGroupsRequest_FieldPathSelectorOrderBy   ListGroupsRequest_FieldPathSelector = 3
	ListGroupsRequest_FieldPathSelectorFilter    ListGroupsRequest_FieldPathSelector = 4
	ListGroupsRequest_FieldPathSelectorFieldMask ListGroupsRequest_FieldPathSelector = 5
	ListGroupsRequest_FieldPathSelectorView      ListGroupsRequest_FieldPathSelector = 6
)

func (s ListGroupsRequest_FieldPathSelector) String() string {
	switch s {
	case ListGroupsRequest_FieldPathSelectorParent:
		return "parent"
	case ListGroupsRequest_FieldPathSelectorPageSize:
		return "page_size"
	case ListGroupsRequest_FieldPathSelectorPageToken:
		return "page_token"
	case ListGroupsRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case ListGroupsRequest_FieldPathSelectorFilter:
		return "filter"
	case ListGroupsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case ListGroupsRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for ListGroupsRequest: %d", s))
	}
}

func BuildListGroupsRequest_FieldPath(fp gotenobject.RawFieldPath) (ListGroupsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListGroupsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &ListGroupsRequest_FieldTerminalPath{selector: ListGroupsRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &ListGroupsRequest_FieldTerminalPath{selector: ListGroupsRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &ListGroupsRequest_FieldTerminalPath{selector: ListGroupsRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &ListGroupsRequest_FieldTerminalPath{selector: ListGroupsRequest_FieldPathSelectorOrderBy}, nil
		case "filter":
			return &ListGroupsRequest_FieldTerminalPath{selector: ListGroupsRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &ListGroupsRequest_FieldTerminalPath{selector: ListGroupsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &ListGroupsRequest_FieldTerminalPath{selector: ListGroupsRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListGroupsRequest", fp)
}

func ParseListGroupsRequest_FieldPath(rawField string) (ListGroupsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListGroupsRequest_FieldPath(fp)
}

func MustParseListGroupsRequest_FieldPath(rawField string) ListGroupsRequest_FieldPath {
	fp, err := ParseListGroupsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListGroupsRequest_FieldTerminalPath struct {
	selector ListGroupsRequest_FieldPathSelector
}

var _ ListGroupsRequest_FieldPath = (*ListGroupsRequest_FieldTerminalPath)(nil)

func (fp *ListGroupsRequest_FieldTerminalPath) Selector() ListGroupsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListGroupsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListGroupsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListGroupsRequest
func (fp *ListGroupsRequest_FieldTerminalPath) Get(source *ListGroupsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListGroupsRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case ListGroupsRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case ListGroupsRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case ListGroupsRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case ListGroupsRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case ListGroupsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case ListGroupsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for ListGroupsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ListGroupsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListGroupsRequest))
}

// GetSingle returns value pointed by specific field of from source ListGroupsRequest
func (fp *ListGroupsRequest_FieldTerminalPath) GetSingle(source *ListGroupsRequest) (interface{}, bool) {
	switch fp.selector {
	case ListGroupsRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case ListGroupsRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case ListGroupsRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case ListGroupsRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case ListGroupsRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case ListGroupsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case ListGroupsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListGroupsRequest: %d", fp.selector))
	}
}

func (fp *ListGroupsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListGroupsRequest))
}

// GetDefault returns a default value of the field type
func (fp *ListGroupsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListGroupsRequest_FieldPathSelectorParent:
		return (*group.ParentName)(nil)
	case ListGroupsRequest_FieldPathSelectorPageSize:
		return int32(0)
	case ListGroupsRequest_FieldPathSelectorPageToken:
		return (*group.PagerCursor)(nil)
	case ListGroupsRequest_FieldPathSelectorOrderBy:
		return (*group.OrderBy)(nil)
	case ListGroupsRequest_FieldPathSelectorFilter:
		return (*group.Filter)(nil)
	case ListGroupsRequest_FieldPathSelectorFieldMask:
		return (*group.Group_FieldMask)(nil)
	case ListGroupsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for ListGroupsRequest: %d", fp.selector))
	}
}

func (fp *ListGroupsRequest_FieldTerminalPath) ClearValue(item *ListGroupsRequest) {
	if item != nil {
		switch fp.selector {
		case ListGroupsRequest_FieldPathSelectorParent:
			item.Parent = nil
		case ListGroupsRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case ListGroupsRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case ListGroupsRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case ListGroupsRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case ListGroupsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case ListGroupsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for ListGroupsRequest: %d", fp.selector))
		}
	}
}

func (fp *ListGroupsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListGroupsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListGroupsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListGroupsRequest_FieldPathSelectorParent ||
		fp.selector == ListGroupsRequest_FieldPathSelectorPageSize ||
		fp.selector == ListGroupsRequest_FieldPathSelectorPageToken ||
		fp.selector == ListGroupsRequest_FieldPathSelectorOrderBy ||
		fp.selector == ListGroupsRequest_FieldPathSelectorFilter ||
		fp.selector == ListGroupsRequest_FieldPathSelectorFieldMask ||
		fp.selector == ListGroupsRequest_FieldPathSelectorView
}

func (fp *ListGroupsRequest_FieldTerminalPath) WithIValue(value interface{}) ListGroupsRequest_FieldPathValue {
	switch fp.selector {
	case ListGroupsRequest_FieldPathSelectorParent:
		return &ListGroupsRequest_FieldTerminalPathValue{ListGroupsRequest_FieldTerminalPath: *fp, value: value.(*group.ParentName)}
	case ListGroupsRequest_FieldPathSelectorPageSize:
		return &ListGroupsRequest_FieldTerminalPathValue{ListGroupsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case ListGroupsRequest_FieldPathSelectorPageToken:
		return &ListGroupsRequest_FieldTerminalPathValue{ListGroupsRequest_FieldTerminalPath: *fp, value: value.(*group.PagerCursor)}
	case ListGroupsRequest_FieldPathSelectorOrderBy:
		return &ListGroupsRequest_FieldTerminalPathValue{ListGroupsRequest_FieldTerminalPath: *fp, value: value.(*group.OrderBy)}
	case ListGroupsRequest_FieldPathSelectorFilter:
		return &ListGroupsRequest_FieldTerminalPathValue{ListGroupsRequest_FieldTerminalPath: *fp, value: value.(*group.Filter)}
	case ListGroupsRequest_FieldPathSelectorFieldMask:
		return &ListGroupsRequest_FieldTerminalPathValue{ListGroupsRequest_FieldTerminalPath: *fp, value: value.(*group.Group_FieldMask)}
	case ListGroupsRequest_FieldPathSelectorView:
		return &ListGroupsRequest_FieldTerminalPathValue{ListGroupsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListGroupsRequest: %d", fp.selector))
	}
}

func (fp *ListGroupsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListGroupsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListGroupsRequest_FieldPathArrayOfValues {
	fpaov := &ListGroupsRequest_FieldTerminalPathArrayOfValues{ListGroupsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListGroupsRequest_FieldPathSelectorParent:
		return &ListGroupsRequest_FieldTerminalPathArrayOfValues{ListGroupsRequest_FieldTerminalPath: *fp, values: values.([]*group.ParentName)}
	case ListGroupsRequest_FieldPathSelectorPageSize:
		return &ListGroupsRequest_FieldTerminalPathArrayOfValues{ListGroupsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case ListGroupsRequest_FieldPathSelectorPageToken:
		return &ListGroupsRequest_FieldTerminalPathArrayOfValues{ListGroupsRequest_FieldTerminalPath: *fp, values: values.([]*group.PagerCursor)}
	case ListGroupsRequest_FieldPathSelectorOrderBy:
		return &ListGroupsRequest_FieldTerminalPathArrayOfValues{ListGroupsRequest_FieldTerminalPath: *fp, values: values.([]*group.OrderBy)}
	case ListGroupsRequest_FieldPathSelectorFilter:
		return &ListGroupsRequest_FieldTerminalPathArrayOfValues{ListGroupsRequest_FieldTerminalPath: *fp, values: values.([]*group.Filter)}
	case ListGroupsRequest_FieldPathSelectorFieldMask:
		return &ListGroupsRequest_FieldTerminalPathArrayOfValues{ListGroupsRequest_FieldTerminalPath: *fp, values: values.([]*group.Group_FieldMask)}
	case ListGroupsRequest_FieldPathSelectorView:
		return &ListGroupsRequest_FieldTerminalPathArrayOfValues{ListGroupsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListGroupsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListGroupsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListGroupsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListGroupsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ListGroupsRequest: %d", fp.selector))
	}
}

func (fp *ListGroupsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ListGroupsRequest_FieldPathValue allows storing values for ListGroupsRequest fields according to their type
type ListGroupsRequest_FieldPathValue interface {
	ListGroupsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListGroupsRequest)
	CompareWith(*ListGroupsRequest) (cmp int, comparable bool)
}

func ParseListGroupsRequest_FieldPathValue(pathStr, valueStr string) (ListGroupsRequest_FieldPathValue, error) {
	fp, err := ParseListGroupsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListGroupsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListGroupsRequest_FieldPathValue), nil
}

func MustParseListGroupsRequest_FieldPathValue(pathStr, valueStr string) ListGroupsRequest_FieldPathValue {
	fpv, err := ParseListGroupsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListGroupsRequest_FieldTerminalPathValue struct {
	ListGroupsRequest_FieldTerminalPath
	value interface{}
}

var _ ListGroupsRequest_FieldPathValue = (*ListGroupsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListGroupsRequest' as interface{}
func (fpv *ListGroupsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListGroupsRequest_FieldTerminalPathValue) AsParentValue() (*group.ParentName, bool) {
	res, ok := fpv.value.(*group.ParentName)
	return res, ok
}
func (fpv *ListGroupsRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *ListGroupsRequest_FieldTerminalPathValue) AsPageTokenValue() (*group.PagerCursor, bool) {
	res, ok := fpv.value.(*group.PagerCursor)
	return res, ok
}
func (fpv *ListGroupsRequest_FieldTerminalPathValue) AsOrderByValue() (*group.OrderBy, bool) {
	res, ok := fpv.value.(*group.OrderBy)
	return res, ok
}
func (fpv *ListGroupsRequest_FieldTerminalPathValue) AsFilterValue() (*group.Filter, bool) {
	res, ok := fpv.value.(*group.Filter)
	return res, ok
}
func (fpv *ListGroupsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*group.Group_FieldMask, bool) {
	res, ok := fpv.value.(*group.Group_FieldMask)
	return res, ok
}
func (fpv *ListGroupsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object ListGroupsRequest
func (fpv *ListGroupsRequest_FieldTerminalPathValue) SetTo(target **ListGroupsRequest) {
	if *target == nil {
		*target = new(ListGroupsRequest)
	}
	switch fpv.selector {
	case ListGroupsRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*group.ParentName)
	case ListGroupsRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case ListGroupsRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*group.PagerCursor)
	case ListGroupsRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*group.OrderBy)
	case ListGroupsRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*group.Filter)
	case ListGroupsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*group.Group_FieldMask)
	case ListGroupsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for ListGroupsRequest: %d", fpv.selector))
	}
}

func (fpv *ListGroupsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListGroupsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListGroupsRequest_FieldTerminalPathValue' with the value under path in 'ListGroupsRequest'.
func (fpv *ListGroupsRequest_FieldTerminalPathValue) CompareWith(source *ListGroupsRequest) (int, bool) {
	switch fpv.selector {
	case ListGroupsRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*group.ParentName)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ListGroupsRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListGroupsRequest_FieldPathSelectorPageToken:
		return 0, false
	case ListGroupsRequest_FieldPathSelectorOrderBy:
		return 0, false
	case ListGroupsRequest_FieldPathSelectorFilter:
		return 0, false
	case ListGroupsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case ListGroupsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListGroupsRequest: %d", fpv.selector))
	}
}

func (fpv *ListGroupsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListGroupsRequest))
}

// ListGroupsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for ListGroupsRequest according to their type
// Present only for array (repeated) types.
type ListGroupsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListGroupsRequest_FieldPath
	ContainsValue(*ListGroupsRequest) bool
}

// ParseListGroupsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListGroupsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ListGroupsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseListGroupsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListGroupsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListGroupsRequest_FieldPathArrayItemValue), nil
}

func MustParseListGroupsRequest_FieldPathArrayItemValue(pathStr, valueStr string) ListGroupsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseListGroupsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListGroupsRequest_FieldTerminalPathArrayItemValue struct {
	ListGroupsRequest_FieldTerminalPath
	value interface{}
}

var _ ListGroupsRequest_FieldPathArrayItemValue = (*ListGroupsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListGroupsRequest as interface{}
func (fpaiv *ListGroupsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ListGroupsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ListGroupsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListGroupsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListGroupsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListGroupsRequest'
func (fpaiv *ListGroupsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ListGroupsRequest) bool {
	slice := fpaiv.ListGroupsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ListGroupsRequest_FieldPathArrayOfValues allows storing slice of values for ListGroupsRequest fields according to their type
type ListGroupsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListGroupsRequest_FieldPath
}

func ParseListGroupsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ListGroupsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseListGroupsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListGroupsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListGroupsRequest_FieldPathArrayOfValues), nil
}

func MustParseListGroupsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ListGroupsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseListGroupsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListGroupsRequest_FieldTerminalPathArrayOfValues struct {
	ListGroupsRequest_FieldTerminalPath
	values interface{}
}

var _ ListGroupsRequest_FieldPathArrayOfValues = (*ListGroupsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListGroupsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListGroupsRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*group.ParentName) {
			values = append(values, v)
		}
	case ListGroupsRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case ListGroupsRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*group.PagerCursor) {
			values = append(values, v)
		}
	case ListGroupsRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*group.OrderBy) {
			values = append(values, v)
		}
	case ListGroupsRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*group.Filter) {
			values = append(values, v)
		}
	case ListGroupsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*group.Group_FieldMask) {
			values = append(values, v)
		}
	case ListGroupsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListGroupsRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*group.ParentName, bool) {
	res, ok := fpaov.values.([]*group.ParentName)
	return res, ok
}
func (fpaov *ListGroupsRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *ListGroupsRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*group.PagerCursor, bool) {
	res, ok := fpaov.values.([]*group.PagerCursor)
	return res, ok
}
func (fpaov *ListGroupsRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*group.OrderBy, bool) {
	res, ok := fpaov.values.([]*group.OrderBy)
	return res, ok
}
func (fpaov *ListGroupsRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*group.Filter, bool) {
	res, ok := fpaov.values.([]*group.Filter)
	return res, ok
}
func (fpaov *ListGroupsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*group.Group_FieldMask, bool) {
	res, ok := fpaov.values.([]*group.Group_FieldMask)
	return res, ok
}
func (fpaov *ListGroupsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListGroupsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListGroupsResponse_FieldPathSelector
	Get(source *ListGroupsResponse) []interface{}
	GetSingle(source *ListGroupsResponse) (interface{}, bool)
	ClearValue(item *ListGroupsResponse)

	// Those methods build corresponding ListGroupsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListGroupsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) ListGroupsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListGroupsResponse_FieldPathArrayItemValue
}

type ListGroupsResponse_FieldPathSelector int32

const (
	ListGroupsResponse_FieldPathSelectorGroups        ListGroupsResponse_FieldPathSelector = 0
	ListGroupsResponse_FieldPathSelectorPrevPageToken ListGroupsResponse_FieldPathSelector = 1
	ListGroupsResponse_FieldPathSelectorNextPageToken ListGroupsResponse_FieldPathSelector = 2
)

func (s ListGroupsResponse_FieldPathSelector) String() string {
	switch s {
	case ListGroupsResponse_FieldPathSelectorGroups:
		return "groups"
	case ListGroupsResponse_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case ListGroupsResponse_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for ListGroupsResponse: %d", s))
	}
}

func BuildListGroupsResponse_FieldPath(fp gotenobject.RawFieldPath) (ListGroupsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListGroupsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "groups":
			return &ListGroupsResponse_FieldTerminalPath{selector: ListGroupsResponse_FieldPathSelectorGroups}, nil
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &ListGroupsResponse_FieldTerminalPath{selector: ListGroupsResponse_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &ListGroupsResponse_FieldTerminalPath{selector: ListGroupsResponse_FieldPathSelectorNextPageToken}, nil
		}
	} else {
		switch fp[0] {
		case "groups":
			if subpath, err := group.BuildGroup_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ListGroupsResponse_FieldSubPath{selector: ListGroupsResponse_FieldPathSelectorGroups, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListGroupsResponse", fp)
}

func ParseListGroupsResponse_FieldPath(rawField string) (ListGroupsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListGroupsResponse_FieldPath(fp)
}

func MustParseListGroupsResponse_FieldPath(rawField string) ListGroupsResponse_FieldPath {
	fp, err := ParseListGroupsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListGroupsResponse_FieldTerminalPath struct {
	selector ListGroupsResponse_FieldPathSelector
}

var _ ListGroupsResponse_FieldPath = (*ListGroupsResponse_FieldTerminalPath)(nil)

func (fp *ListGroupsResponse_FieldTerminalPath) Selector() ListGroupsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListGroupsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListGroupsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListGroupsResponse
func (fp *ListGroupsResponse_FieldTerminalPath) Get(source *ListGroupsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListGroupsResponse_FieldPathSelectorGroups:
			for _, value := range source.GetGroups() {
				values = append(values, value)
			}
		case ListGroupsResponse_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case ListGroupsResponse_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListGroupsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *ListGroupsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListGroupsResponse))
}

// GetSingle returns value pointed by specific field of from source ListGroupsResponse
func (fp *ListGroupsResponse_FieldTerminalPath) GetSingle(source *ListGroupsResponse) (interface{}, bool) {
	switch fp.selector {
	case ListGroupsResponse_FieldPathSelectorGroups:
		res := source.GetGroups()
		return res, res != nil
	case ListGroupsResponse_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case ListGroupsResponse_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListGroupsResponse: %d", fp.selector))
	}
}

func (fp *ListGroupsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListGroupsResponse))
}

// GetDefault returns a default value of the field type
func (fp *ListGroupsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListGroupsResponse_FieldPathSelectorGroups:
		return ([]*group.Group)(nil)
	case ListGroupsResponse_FieldPathSelectorPrevPageToken:
		return (*group.PagerCursor)(nil)
	case ListGroupsResponse_FieldPathSelectorNextPageToken:
		return (*group.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ListGroupsResponse: %d", fp.selector))
	}
}

func (fp *ListGroupsResponse_FieldTerminalPath) ClearValue(item *ListGroupsResponse) {
	if item != nil {
		switch fp.selector {
		case ListGroupsResponse_FieldPathSelectorGroups:
			item.Groups = nil
		case ListGroupsResponse_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case ListGroupsResponse_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for ListGroupsResponse: %d", fp.selector))
		}
	}
}

func (fp *ListGroupsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListGroupsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListGroupsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListGroupsResponse_FieldPathSelectorPrevPageToken ||
		fp.selector == ListGroupsResponse_FieldPathSelectorNextPageToken
}

func (fp *ListGroupsResponse_FieldTerminalPath) WithIValue(value interface{}) ListGroupsResponse_FieldPathValue {
	switch fp.selector {
	case ListGroupsResponse_FieldPathSelectorGroups:
		return &ListGroupsResponse_FieldTerminalPathValue{ListGroupsResponse_FieldTerminalPath: *fp, value: value.([]*group.Group)}
	case ListGroupsResponse_FieldPathSelectorPrevPageToken:
		return &ListGroupsResponse_FieldTerminalPathValue{ListGroupsResponse_FieldTerminalPath: *fp, value: value.(*group.PagerCursor)}
	case ListGroupsResponse_FieldPathSelectorNextPageToken:
		return &ListGroupsResponse_FieldTerminalPathValue{ListGroupsResponse_FieldTerminalPath: *fp, value: value.(*group.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListGroupsResponse: %d", fp.selector))
	}
}

func (fp *ListGroupsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListGroupsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListGroupsResponse_FieldPathArrayOfValues {
	fpaov := &ListGroupsResponse_FieldTerminalPathArrayOfValues{ListGroupsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListGroupsResponse_FieldPathSelectorGroups:
		return &ListGroupsResponse_FieldTerminalPathArrayOfValues{ListGroupsResponse_FieldTerminalPath: *fp, values: values.([][]*group.Group)}
	case ListGroupsResponse_FieldPathSelectorPrevPageToken:
		return &ListGroupsResponse_FieldTerminalPathArrayOfValues{ListGroupsResponse_FieldTerminalPath: *fp, values: values.([]*group.PagerCursor)}
	case ListGroupsResponse_FieldPathSelectorNextPageToken:
		return &ListGroupsResponse_FieldTerminalPathArrayOfValues{ListGroupsResponse_FieldTerminalPath: *fp, values: values.([]*group.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListGroupsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListGroupsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListGroupsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListGroupsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case ListGroupsResponse_FieldPathSelectorGroups:
		return &ListGroupsResponse_FieldTerminalPathArrayItemValue{ListGroupsResponse_FieldTerminalPath: *fp, value: value.(*group.Group)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListGroupsResponse: %d", fp.selector))
	}
}

func (fp *ListGroupsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ListGroupsResponse_FieldSubPath struct {
	selector ListGroupsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ListGroupsResponse_FieldPath = (*ListGroupsResponse_FieldSubPath)(nil)

func (fps *ListGroupsResponse_FieldSubPath) Selector() ListGroupsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *ListGroupsResponse_FieldSubPath) AsGroupsSubPath() (group.Group_FieldPath, bool) {
	res, ok := fps.subPath.(group.Group_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ListGroupsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ListGroupsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ListGroupsResponse
func (fps *ListGroupsResponse_FieldSubPath) Get(source *ListGroupsResponse) (values []interface{}) {
	if asGroupFieldPath, ok := fps.AsGroupsSubPath(); ok {
		for _, item := range source.GetGroups() {
			values = append(values, asGroupFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for ListGroupsResponse: %d", fps.selector))
	}
	return
}

func (fps *ListGroupsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ListGroupsResponse))
}

// GetSingle returns value of selected field from source ListGroupsResponse
func (fps *ListGroupsResponse_FieldSubPath) GetSingle(source *ListGroupsResponse) (interface{}, bool) {
	switch fps.selector {
	case ListGroupsResponse_FieldPathSelectorGroups:
		if len(source.GetGroups()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetGroups()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for ListGroupsResponse: %d", fps.selector))
	}
}

func (fps *ListGroupsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ListGroupsResponse))
}

// GetDefault returns a default value of the field type
func (fps *ListGroupsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ListGroupsResponse_FieldSubPath) ClearValue(item *ListGroupsResponse) {
	if item != nil {
		switch fps.selector {
		case ListGroupsResponse_FieldPathSelectorGroups:
			for _, subItem := range item.Groups {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListGroupsResponse: %d", fps.selector))
		}
	}
}

func (fps *ListGroupsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ListGroupsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *ListGroupsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ListGroupsResponse_FieldSubPath) WithIValue(value interface{}) ListGroupsResponse_FieldPathValue {
	return &ListGroupsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ListGroupsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ListGroupsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) ListGroupsResponse_FieldPathArrayOfValues {
	return &ListGroupsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ListGroupsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ListGroupsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) ListGroupsResponse_FieldPathArrayItemValue {
	return &ListGroupsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ListGroupsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ListGroupsResponse_FieldPathValue allows storing values for ListGroupsResponse fields according to their type
type ListGroupsResponse_FieldPathValue interface {
	ListGroupsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListGroupsResponse)
	CompareWith(*ListGroupsResponse) (cmp int, comparable bool)
}

func ParseListGroupsResponse_FieldPathValue(pathStr, valueStr string) (ListGroupsResponse_FieldPathValue, error) {
	fp, err := ParseListGroupsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListGroupsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListGroupsResponse_FieldPathValue), nil
}

func MustParseListGroupsResponse_FieldPathValue(pathStr, valueStr string) ListGroupsResponse_FieldPathValue {
	fpv, err := ParseListGroupsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListGroupsResponse_FieldTerminalPathValue struct {
	ListGroupsResponse_FieldTerminalPath
	value interface{}
}

var _ ListGroupsResponse_FieldPathValue = (*ListGroupsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListGroupsResponse' as interface{}
func (fpv *ListGroupsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListGroupsResponse_FieldTerminalPathValue) AsGroupsValue() ([]*group.Group, bool) {
	res, ok := fpv.value.([]*group.Group)
	return res, ok
}
func (fpv *ListGroupsResponse_FieldTerminalPathValue) AsPrevPageTokenValue() (*group.PagerCursor, bool) {
	res, ok := fpv.value.(*group.PagerCursor)
	return res, ok
}
func (fpv *ListGroupsResponse_FieldTerminalPathValue) AsNextPageTokenValue() (*group.PagerCursor, bool) {
	res, ok := fpv.value.(*group.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object ListGroupsResponse
func (fpv *ListGroupsResponse_FieldTerminalPathValue) SetTo(target **ListGroupsResponse) {
	if *target == nil {
		*target = new(ListGroupsResponse)
	}
	switch fpv.selector {
	case ListGroupsResponse_FieldPathSelectorGroups:
		(*target).Groups = fpv.value.([]*group.Group)
	case ListGroupsResponse_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*group.PagerCursor)
	case ListGroupsResponse_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*group.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for ListGroupsResponse: %d", fpv.selector))
	}
}

func (fpv *ListGroupsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListGroupsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListGroupsResponse_FieldTerminalPathValue' with the value under path in 'ListGroupsResponse'.
func (fpv *ListGroupsResponse_FieldTerminalPathValue) CompareWith(source *ListGroupsResponse) (int, bool) {
	switch fpv.selector {
	case ListGroupsResponse_FieldPathSelectorGroups:
		return 0, false
	case ListGroupsResponse_FieldPathSelectorPrevPageToken:
		return 0, false
	case ListGroupsResponse_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ListGroupsResponse: %d", fpv.selector))
	}
}

func (fpv *ListGroupsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListGroupsResponse))
}

type ListGroupsResponse_FieldSubPathValue struct {
	ListGroupsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ListGroupsResponse_FieldPathValue = (*ListGroupsResponse_FieldSubPathValue)(nil)

func (fpvs *ListGroupsResponse_FieldSubPathValue) AsGroupsPathValue() (group.Group_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(group.Group_FieldPathValue)
	return res, ok
}

func (fpvs *ListGroupsResponse_FieldSubPathValue) SetTo(target **ListGroupsResponse) {
	if *target == nil {
		*target = new(ListGroupsResponse)
	}
	switch fpvs.Selector() {
	case ListGroupsResponse_FieldPathSelectorGroups:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for ListGroupsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListGroupsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListGroupsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ListGroupsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ListGroupsResponse_FieldSubPathValue) CompareWith(source *ListGroupsResponse) (int, bool) {
	switch fpvs.Selector() {
	case ListGroupsResponse_FieldPathSelectorGroups:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for ListGroupsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListGroupsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ListGroupsResponse))
}

// ListGroupsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for ListGroupsResponse according to their type
// Present only for array (repeated) types.
type ListGroupsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListGroupsResponse_FieldPath
	ContainsValue(*ListGroupsResponse) bool
}

// ParseListGroupsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListGroupsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (ListGroupsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseListGroupsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListGroupsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListGroupsResponse_FieldPathArrayItemValue), nil
}

func MustParseListGroupsResponse_FieldPathArrayItemValue(pathStr, valueStr string) ListGroupsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseListGroupsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListGroupsResponse_FieldTerminalPathArrayItemValue struct {
	ListGroupsResponse_FieldTerminalPath
	value interface{}
}

var _ ListGroupsResponse_FieldPathArrayItemValue = (*ListGroupsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListGroupsResponse as interface{}
func (fpaiv *ListGroupsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *ListGroupsResponse_FieldTerminalPathArrayItemValue) AsGroupsItemValue() (*group.Group, bool) {
	res, ok := fpaiv.value.(*group.Group)
	return res, ok
}

func (fpaiv *ListGroupsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *ListGroupsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListGroupsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListGroupsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListGroupsResponse'
func (fpaiv *ListGroupsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *ListGroupsResponse) bool {
	slice := fpaiv.ListGroupsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ListGroupsResponse_FieldSubPathArrayItemValue struct {
	ListGroupsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ListGroupsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ListGroupsResponse_FieldSubPathArrayItemValue) AsGroupsPathItemValue() (group.Group_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(group.Group_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListGroupsResponse'
func (fpaivs *ListGroupsResponse_FieldSubPathArrayItemValue) ContainsValue(source *ListGroupsResponse) bool {
	switch fpaivs.Selector() {
	case ListGroupsResponse_FieldPathSelectorGroups:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for ListGroupsResponse: %d", fpaivs.Selector()))
	}
}

// ListGroupsResponse_FieldPathArrayOfValues allows storing slice of values for ListGroupsResponse fields according to their type
type ListGroupsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListGroupsResponse_FieldPath
}

func ParseListGroupsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (ListGroupsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseListGroupsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListGroupsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListGroupsResponse_FieldPathArrayOfValues), nil
}

func MustParseListGroupsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) ListGroupsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseListGroupsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListGroupsResponse_FieldTerminalPathArrayOfValues struct {
	ListGroupsResponse_FieldTerminalPath
	values interface{}
}

var _ ListGroupsResponse_FieldPathArrayOfValues = (*ListGroupsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListGroupsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListGroupsResponse_FieldPathSelectorGroups:
		for _, v := range fpaov.values.([][]*group.Group) {
			values = append(values, v)
		}
	case ListGroupsResponse_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*group.PagerCursor) {
			values = append(values, v)
		}
	case ListGroupsResponse_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*group.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListGroupsResponse_FieldTerminalPathArrayOfValues) AsGroupsArrayOfValues() ([][]*group.Group, bool) {
	res, ok := fpaov.values.([][]*group.Group)
	return res, ok
}
func (fpaov *ListGroupsResponse_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*group.PagerCursor, bool) {
	res, ok := fpaov.values.([]*group.PagerCursor)
	return res, ok
}
func (fpaov *ListGroupsResponse_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*group.PagerCursor, bool) {
	res, ok := fpaov.values.([]*group.PagerCursor)
	return res, ok
}

type ListGroupsResponse_FieldSubPathArrayOfValues struct {
	ListGroupsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ListGroupsResponse_FieldPathArrayOfValues = (*ListGroupsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ListGroupsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ListGroupsResponse_FieldSubPathArrayOfValues) AsGroupsPathArrayOfValues() (group.Group_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(group.Group_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchGroupRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchGroupRequest_FieldPathSelector
	Get(source *WatchGroupRequest) []interface{}
	GetSingle(source *WatchGroupRequest) (interface{}, bool)
	ClearValue(item *WatchGroupRequest)

	// Those methods build corresponding WatchGroupRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchGroupRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchGroupRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchGroupRequest_FieldPathArrayItemValue
}

type WatchGroupRequest_FieldPathSelector int32

const (
	WatchGroupRequest_FieldPathSelectorName      WatchGroupRequest_FieldPathSelector = 0
	WatchGroupRequest_FieldPathSelectorFieldMask WatchGroupRequest_FieldPathSelector = 1
	WatchGroupRequest_FieldPathSelectorView      WatchGroupRequest_FieldPathSelector = 2
)

func (s WatchGroupRequest_FieldPathSelector) String() string {
	switch s {
	case WatchGroupRequest_FieldPathSelectorName:
		return "name"
	case WatchGroupRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchGroupRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchGroupRequest: %d", s))
	}
}

func BuildWatchGroupRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchGroupRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchGroupRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &WatchGroupRequest_FieldTerminalPath{selector: WatchGroupRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchGroupRequest_FieldTerminalPath{selector: WatchGroupRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchGroupRequest_FieldTerminalPath{selector: WatchGroupRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchGroupRequest", fp)
}

func ParseWatchGroupRequest_FieldPath(rawField string) (WatchGroupRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchGroupRequest_FieldPath(fp)
}

func MustParseWatchGroupRequest_FieldPath(rawField string) WatchGroupRequest_FieldPath {
	fp, err := ParseWatchGroupRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchGroupRequest_FieldTerminalPath struct {
	selector WatchGroupRequest_FieldPathSelector
}

var _ WatchGroupRequest_FieldPath = (*WatchGroupRequest_FieldTerminalPath)(nil)

func (fp *WatchGroupRequest_FieldTerminalPath) Selector() WatchGroupRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchGroupRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchGroupRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchGroupRequest
func (fp *WatchGroupRequest_FieldTerminalPath) Get(source *WatchGroupRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchGroupRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case WatchGroupRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchGroupRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchGroupRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchGroupRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchGroupRequest))
}

// GetSingle returns value pointed by specific field of from source WatchGroupRequest
func (fp *WatchGroupRequest_FieldTerminalPath) GetSingle(source *WatchGroupRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchGroupRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case WatchGroupRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchGroupRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchGroupRequest: %d", fp.selector))
	}
}

func (fp *WatchGroupRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchGroupRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchGroupRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchGroupRequest_FieldPathSelectorName:
		return (*group.Reference)(nil)
	case WatchGroupRequest_FieldPathSelectorFieldMask:
		return (*group.Group_FieldMask)(nil)
	case WatchGroupRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for WatchGroupRequest: %d", fp.selector))
	}
}

func (fp *WatchGroupRequest_FieldTerminalPath) ClearValue(item *WatchGroupRequest) {
	if item != nil {
		switch fp.selector {
		case WatchGroupRequest_FieldPathSelectorName:
			item.Name = nil
		case WatchGroupRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchGroupRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for WatchGroupRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchGroupRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchGroupRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchGroupRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchGroupRequest_FieldPathSelectorName ||
		fp.selector == WatchGroupRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchGroupRequest_FieldPathSelectorView
}

func (fp *WatchGroupRequest_FieldTerminalPath) WithIValue(value interface{}) WatchGroupRequest_FieldPathValue {
	switch fp.selector {
	case WatchGroupRequest_FieldPathSelectorName:
		return &WatchGroupRequest_FieldTerminalPathValue{WatchGroupRequest_FieldTerminalPath: *fp, value: value.(*group.Reference)}
	case WatchGroupRequest_FieldPathSelectorFieldMask:
		return &WatchGroupRequest_FieldTerminalPathValue{WatchGroupRequest_FieldTerminalPath: *fp, value: value.(*group.Group_FieldMask)}
	case WatchGroupRequest_FieldPathSelectorView:
		return &WatchGroupRequest_FieldTerminalPathValue{WatchGroupRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchGroupRequest: %d", fp.selector))
	}
}

func (fp *WatchGroupRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchGroupRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchGroupRequest_FieldPathArrayOfValues {
	fpaov := &WatchGroupRequest_FieldTerminalPathArrayOfValues{WatchGroupRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchGroupRequest_FieldPathSelectorName:
		return &WatchGroupRequest_FieldTerminalPathArrayOfValues{WatchGroupRequest_FieldTerminalPath: *fp, values: values.([]*group.Reference)}
	case WatchGroupRequest_FieldPathSelectorFieldMask:
		return &WatchGroupRequest_FieldTerminalPathArrayOfValues{WatchGroupRequest_FieldTerminalPath: *fp, values: values.([]*group.Group_FieldMask)}
	case WatchGroupRequest_FieldPathSelectorView:
		return &WatchGroupRequest_FieldTerminalPathArrayOfValues{WatchGroupRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchGroupRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchGroupRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchGroupRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchGroupRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchGroupRequest: %d", fp.selector))
	}
}

func (fp *WatchGroupRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchGroupRequest_FieldPathValue allows storing values for WatchGroupRequest fields according to their type
type WatchGroupRequest_FieldPathValue interface {
	WatchGroupRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchGroupRequest)
	CompareWith(*WatchGroupRequest) (cmp int, comparable bool)
}

func ParseWatchGroupRequest_FieldPathValue(pathStr, valueStr string) (WatchGroupRequest_FieldPathValue, error) {
	fp, err := ParseWatchGroupRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchGroupRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchGroupRequest_FieldPathValue), nil
}

func MustParseWatchGroupRequest_FieldPathValue(pathStr, valueStr string) WatchGroupRequest_FieldPathValue {
	fpv, err := ParseWatchGroupRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchGroupRequest_FieldTerminalPathValue struct {
	WatchGroupRequest_FieldTerminalPath
	value interface{}
}

var _ WatchGroupRequest_FieldPathValue = (*WatchGroupRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchGroupRequest' as interface{}
func (fpv *WatchGroupRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchGroupRequest_FieldTerminalPathValue) AsNameValue() (*group.Reference, bool) {
	res, ok := fpv.value.(*group.Reference)
	return res, ok
}
func (fpv *WatchGroupRequest_FieldTerminalPathValue) AsFieldMaskValue() (*group.Group_FieldMask, bool) {
	res, ok := fpv.value.(*group.Group_FieldMask)
	return res, ok
}
func (fpv *WatchGroupRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object WatchGroupRequest
func (fpv *WatchGroupRequest_FieldTerminalPathValue) SetTo(target **WatchGroupRequest) {
	if *target == nil {
		*target = new(WatchGroupRequest)
	}
	switch fpv.selector {
	case WatchGroupRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*group.Reference)
	case WatchGroupRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*group.Group_FieldMask)
	case WatchGroupRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchGroupRequest: %d", fpv.selector))
	}
}

func (fpv *WatchGroupRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchGroupRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchGroupRequest_FieldTerminalPathValue' with the value under path in 'WatchGroupRequest'.
func (fpv *WatchGroupRequest_FieldTerminalPathValue) CompareWith(source *WatchGroupRequest) (int, bool) {
	switch fpv.selector {
	case WatchGroupRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*group.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchGroupRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchGroupRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchGroupRequest: %d", fpv.selector))
	}
}

func (fpv *WatchGroupRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchGroupRequest))
}

// WatchGroupRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchGroupRequest according to their type
// Present only for array (repeated) types.
type WatchGroupRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchGroupRequest_FieldPath
	ContainsValue(*WatchGroupRequest) bool
}

// ParseWatchGroupRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchGroupRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchGroupRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchGroupRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchGroupRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchGroupRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchGroupRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchGroupRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchGroupRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchGroupRequest_FieldTerminalPathArrayItemValue struct {
	WatchGroupRequest_FieldTerminalPath
	value interface{}
}

var _ WatchGroupRequest_FieldPathArrayItemValue = (*WatchGroupRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchGroupRequest as interface{}
func (fpaiv *WatchGroupRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchGroupRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchGroupRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchGroupRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchGroupRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchGroupRequest'
func (fpaiv *WatchGroupRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchGroupRequest) bool {
	slice := fpaiv.WatchGroupRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchGroupRequest_FieldPathArrayOfValues allows storing slice of values for WatchGroupRequest fields according to their type
type WatchGroupRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchGroupRequest_FieldPath
}

func ParseWatchGroupRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchGroupRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchGroupRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchGroupRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchGroupRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchGroupRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchGroupRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchGroupRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchGroupRequest_FieldTerminalPathArrayOfValues struct {
	WatchGroupRequest_FieldTerminalPath
	values interface{}
}

var _ WatchGroupRequest_FieldPathArrayOfValues = (*WatchGroupRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchGroupRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchGroupRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*group.Reference) {
			values = append(values, v)
		}
	case WatchGroupRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*group.Group_FieldMask) {
			values = append(values, v)
		}
	case WatchGroupRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchGroupRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*group.Reference, bool) {
	res, ok := fpaov.values.([]*group.Reference)
	return res, ok
}
func (fpaov *WatchGroupRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*group.Group_FieldMask, bool) {
	res, ok := fpaov.values.([]*group.Group_FieldMask)
	return res, ok
}
func (fpaov *WatchGroupRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchGroupResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchGroupResponse_FieldPathSelector
	Get(source *WatchGroupResponse) []interface{}
	GetSingle(source *WatchGroupResponse) (interface{}, bool)
	ClearValue(item *WatchGroupResponse)

	// Those methods build corresponding WatchGroupResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchGroupResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchGroupResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchGroupResponse_FieldPathArrayItemValue
}

type WatchGroupResponse_FieldPathSelector int32

const (
	WatchGroupResponse_FieldPathSelectorChange WatchGroupResponse_FieldPathSelector = 0
)

func (s WatchGroupResponse_FieldPathSelector) String() string {
	switch s {
	case WatchGroupResponse_FieldPathSelectorChange:
		return "change"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchGroupResponse: %d", s))
	}
}

func BuildWatchGroupResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchGroupResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchGroupResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "change":
			return &WatchGroupResponse_FieldTerminalPath{selector: WatchGroupResponse_FieldPathSelectorChange}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchGroupResponse", fp)
}

func ParseWatchGroupResponse_FieldPath(rawField string) (WatchGroupResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchGroupResponse_FieldPath(fp)
}

func MustParseWatchGroupResponse_FieldPath(rawField string) WatchGroupResponse_FieldPath {
	fp, err := ParseWatchGroupResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchGroupResponse_FieldTerminalPath struct {
	selector WatchGroupResponse_FieldPathSelector
}

var _ WatchGroupResponse_FieldPath = (*WatchGroupResponse_FieldTerminalPath)(nil)

func (fp *WatchGroupResponse_FieldTerminalPath) Selector() WatchGroupResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchGroupResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchGroupResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchGroupResponse
func (fp *WatchGroupResponse_FieldTerminalPath) Get(source *WatchGroupResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchGroupResponse_FieldPathSelectorChange:
			if source.Change != nil {
				values = append(values, source.Change)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchGroupResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchGroupResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchGroupResponse))
}

// GetSingle returns value pointed by specific field of from source WatchGroupResponse
func (fp *WatchGroupResponse_FieldTerminalPath) GetSingle(source *WatchGroupResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchGroupResponse_FieldPathSelectorChange:
		res := source.GetChange()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchGroupResponse: %d", fp.selector))
	}
}

func (fp *WatchGroupResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchGroupResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchGroupResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchGroupResponse_FieldPathSelectorChange:
		return (*group.GroupChange)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchGroupResponse: %d", fp.selector))
	}
}

func (fp *WatchGroupResponse_FieldTerminalPath) ClearValue(item *WatchGroupResponse) {
	if item != nil {
		switch fp.selector {
		case WatchGroupResponse_FieldPathSelectorChange:
			item.Change = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchGroupResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchGroupResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchGroupResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchGroupResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchGroupResponse_FieldPathSelectorChange
}

func (fp *WatchGroupResponse_FieldTerminalPath) WithIValue(value interface{}) WatchGroupResponse_FieldPathValue {
	switch fp.selector {
	case WatchGroupResponse_FieldPathSelectorChange:
		return &WatchGroupResponse_FieldTerminalPathValue{WatchGroupResponse_FieldTerminalPath: *fp, value: value.(*group.GroupChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchGroupResponse: %d", fp.selector))
	}
}

func (fp *WatchGroupResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchGroupResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchGroupResponse_FieldPathArrayOfValues {
	fpaov := &WatchGroupResponse_FieldTerminalPathArrayOfValues{WatchGroupResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchGroupResponse_FieldPathSelectorChange:
		return &WatchGroupResponse_FieldTerminalPathArrayOfValues{WatchGroupResponse_FieldTerminalPath: *fp, values: values.([]*group.GroupChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchGroupResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchGroupResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchGroupResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchGroupResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchGroupResponse: %d", fp.selector))
	}
}

func (fp *WatchGroupResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchGroupResponse_FieldPathValue allows storing values for WatchGroupResponse fields according to their type
type WatchGroupResponse_FieldPathValue interface {
	WatchGroupResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchGroupResponse)
	CompareWith(*WatchGroupResponse) (cmp int, comparable bool)
}

func ParseWatchGroupResponse_FieldPathValue(pathStr, valueStr string) (WatchGroupResponse_FieldPathValue, error) {
	fp, err := ParseWatchGroupResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchGroupResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchGroupResponse_FieldPathValue), nil
}

func MustParseWatchGroupResponse_FieldPathValue(pathStr, valueStr string) WatchGroupResponse_FieldPathValue {
	fpv, err := ParseWatchGroupResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchGroupResponse_FieldTerminalPathValue struct {
	WatchGroupResponse_FieldTerminalPath
	value interface{}
}

var _ WatchGroupResponse_FieldPathValue = (*WatchGroupResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchGroupResponse' as interface{}
func (fpv *WatchGroupResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchGroupResponse_FieldTerminalPathValue) AsChangeValue() (*group.GroupChange, bool) {
	res, ok := fpv.value.(*group.GroupChange)
	return res, ok
}

// SetTo stores value for selected field for object WatchGroupResponse
func (fpv *WatchGroupResponse_FieldTerminalPathValue) SetTo(target **WatchGroupResponse) {
	if *target == nil {
		*target = new(WatchGroupResponse)
	}
	switch fpv.selector {
	case WatchGroupResponse_FieldPathSelectorChange:
		(*target).Change = fpv.value.(*group.GroupChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchGroupResponse: %d", fpv.selector))
	}
}

func (fpv *WatchGroupResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchGroupResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchGroupResponse_FieldTerminalPathValue' with the value under path in 'WatchGroupResponse'.
func (fpv *WatchGroupResponse_FieldTerminalPathValue) CompareWith(source *WatchGroupResponse) (int, bool) {
	switch fpv.selector {
	case WatchGroupResponse_FieldPathSelectorChange:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchGroupResponse: %d", fpv.selector))
	}
}

func (fpv *WatchGroupResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchGroupResponse))
}

// WatchGroupResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchGroupResponse according to their type
// Present only for array (repeated) types.
type WatchGroupResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchGroupResponse_FieldPath
	ContainsValue(*WatchGroupResponse) bool
}

// ParseWatchGroupResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchGroupResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchGroupResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchGroupResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchGroupResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchGroupResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchGroupResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchGroupResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchGroupResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchGroupResponse_FieldTerminalPathArrayItemValue struct {
	WatchGroupResponse_FieldTerminalPath
	value interface{}
}

var _ WatchGroupResponse_FieldPathArrayItemValue = (*WatchGroupResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchGroupResponse as interface{}
func (fpaiv *WatchGroupResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchGroupResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchGroupResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchGroupResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchGroupResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchGroupResponse'
func (fpaiv *WatchGroupResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchGroupResponse) bool {
	slice := fpaiv.WatchGroupResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchGroupResponse_FieldPathArrayOfValues allows storing slice of values for WatchGroupResponse fields according to their type
type WatchGroupResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchGroupResponse_FieldPath
}

func ParseWatchGroupResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchGroupResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchGroupResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchGroupResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchGroupResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchGroupResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchGroupResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchGroupResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchGroupResponse_FieldTerminalPathArrayOfValues struct {
	WatchGroupResponse_FieldTerminalPath
	values interface{}
}

var _ WatchGroupResponse_FieldPathArrayOfValues = (*WatchGroupResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchGroupResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchGroupResponse_FieldPathSelectorChange:
		for _, v := range fpaov.values.([]*group.GroupChange) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchGroupResponse_FieldTerminalPathArrayOfValues) AsChangeArrayOfValues() ([]*group.GroupChange, bool) {
	res, ok := fpaov.values.([]*group.GroupChange)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchGroupsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchGroupsRequest_FieldPathSelector
	Get(source *WatchGroupsRequest) []interface{}
	GetSingle(source *WatchGroupsRequest) (interface{}, bool)
	ClearValue(item *WatchGroupsRequest)

	// Those methods build corresponding WatchGroupsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchGroupsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchGroupsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchGroupsRequest_FieldPathArrayItemValue
}

type WatchGroupsRequest_FieldPathSelector int32

const (
	WatchGroupsRequest_FieldPathSelectorType         WatchGroupsRequest_FieldPathSelector = 0
	WatchGroupsRequest_FieldPathSelectorParent       WatchGroupsRequest_FieldPathSelector = 1
	WatchGroupsRequest_FieldPathSelectorPageSize     WatchGroupsRequest_FieldPathSelector = 2
	WatchGroupsRequest_FieldPathSelectorPageToken    WatchGroupsRequest_FieldPathSelector = 3
	WatchGroupsRequest_FieldPathSelectorOrderBy      WatchGroupsRequest_FieldPathSelector = 4
	WatchGroupsRequest_FieldPathSelectorResumeToken  WatchGroupsRequest_FieldPathSelector = 5
	WatchGroupsRequest_FieldPathSelectorFilter       WatchGroupsRequest_FieldPathSelector = 6
	WatchGroupsRequest_FieldPathSelectorFieldMask    WatchGroupsRequest_FieldPathSelector = 7
	WatchGroupsRequest_FieldPathSelectorView         WatchGroupsRequest_FieldPathSelector = 8
	WatchGroupsRequest_FieldPathSelectorMaxChunkSize WatchGroupsRequest_FieldPathSelector = 9
)

func (s WatchGroupsRequest_FieldPathSelector) String() string {
	switch s {
	case WatchGroupsRequest_FieldPathSelectorType:
		return "type"
	case WatchGroupsRequest_FieldPathSelectorParent:
		return "parent"
	case WatchGroupsRequest_FieldPathSelectorPageSize:
		return "page_size"
	case WatchGroupsRequest_FieldPathSelectorPageToken:
		return "page_token"
	case WatchGroupsRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case WatchGroupsRequest_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchGroupsRequest_FieldPathSelectorFilter:
		return "filter"
	case WatchGroupsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchGroupsRequest_FieldPathSelectorView:
		return "view"
	case WatchGroupsRequest_FieldPathSelectorMaxChunkSize:
		return "max_chunk_size"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchGroupsRequest: %d", s))
	}
}

func BuildWatchGroupsRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchGroupsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchGroupsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "type":
			return &WatchGroupsRequest_FieldTerminalPath{selector: WatchGroupsRequest_FieldPathSelectorType}, nil
		case "parent":
			return &WatchGroupsRequest_FieldTerminalPath{selector: WatchGroupsRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &WatchGroupsRequest_FieldTerminalPath{selector: WatchGroupsRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &WatchGroupsRequest_FieldTerminalPath{selector: WatchGroupsRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &WatchGroupsRequest_FieldTerminalPath{selector: WatchGroupsRequest_FieldPathSelectorOrderBy}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchGroupsRequest_FieldTerminalPath{selector: WatchGroupsRequest_FieldPathSelectorResumeToken}, nil
		case "filter":
			return &WatchGroupsRequest_FieldTerminalPath{selector: WatchGroupsRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchGroupsRequest_FieldTerminalPath{selector: WatchGroupsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchGroupsRequest_FieldTerminalPath{selector: WatchGroupsRequest_FieldPathSelectorView}, nil
		case "max_chunk_size", "maxChunkSize", "max-chunk-size":
			return &WatchGroupsRequest_FieldTerminalPath{selector: WatchGroupsRequest_FieldPathSelectorMaxChunkSize}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchGroupsRequest", fp)
}

func ParseWatchGroupsRequest_FieldPath(rawField string) (WatchGroupsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchGroupsRequest_FieldPath(fp)
}

func MustParseWatchGroupsRequest_FieldPath(rawField string) WatchGroupsRequest_FieldPath {
	fp, err := ParseWatchGroupsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchGroupsRequest_FieldTerminalPath struct {
	selector WatchGroupsRequest_FieldPathSelector
}

var _ WatchGroupsRequest_FieldPath = (*WatchGroupsRequest_FieldTerminalPath)(nil)

func (fp *WatchGroupsRequest_FieldTerminalPath) Selector() WatchGroupsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchGroupsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchGroupsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchGroupsRequest
func (fp *WatchGroupsRequest_FieldTerminalPath) Get(source *WatchGroupsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchGroupsRequest_FieldPathSelectorType:
			values = append(values, source.Type)
		case WatchGroupsRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case WatchGroupsRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case WatchGroupsRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case WatchGroupsRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case WatchGroupsRequest_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchGroupsRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case WatchGroupsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchGroupsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		case WatchGroupsRequest_FieldPathSelectorMaxChunkSize:
			values = append(values, source.MaxChunkSize)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchGroupsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchGroupsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchGroupsRequest))
}

// GetSingle returns value pointed by specific field of from source WatchGroupsRequest
func (fp *WatchGroupsRequest_FieldTerminalPath) GetSingle(source *WatchGroupsRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchGroupsRequest_FieldPathSelectorType:
		return source.GetType(), source != nil
	case WatchGroupsRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case WatchGroupsRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case WatchGroupsRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case WatchGroupsRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case WatchGroupsRequest_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchGroupsRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case WatchGroupsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchGroupsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	case WatchGroupsRequest_FieldPathSelectorMaxChunkSize:
		return source.GetMaxChunkSize(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchGroupsRequest: %d", fp.selector))
	}
}

func (fp *WatchGroupsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchGroupsRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchGroupsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchGroupsRequest_FieldPathSelectorType:
		return watch_type.WatchType_STATEFUL
	case WatchGroupsRequest_FieldPathSelectorParent:
		return (*group.ParentReference)(nil)
	case WatchGroupsRequest_FieldPathSelectorPageSize:
		return int32(0)
	case WatchGroupsRequest_FieldPathSelectorPageToken:
		return (*group.PagerCursor)(nil)
	case WatchGroupsRequest_FieldPathSelectorOrderBy:
		return (*group.OrderBy)(nil)
	case WatchGroupsRequest_FieldPathSelectorResumeToken:
		return ""
	case WatchGroupsRequest_FieldPathSelectorFilter:
		return (*group.Filter)(nil)
	case WatchGroupsRequest_FieldPathSelectorFieldMask:
		return (*group.Group_FieldMask)(nil)
	case WatchGroupsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	case WatchGroupsRequest_FieldPathSelectorMaxChunkSize:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchGroupsRequest: %d", fp.selector))
	}
}

func (fp *WatchGroupsRequest_FieldTerminalPath) ClearValue(item *WatchGroupsRequest) {
	if item != nil {
		switch fp.selector {
		case WatchGroupsRequest_FieldPathSelectorType:
			item.Type = watch_type.WatchType_STATEFUL
		case WatchGroupsRequest_FieldPathSelectorParent:
			item.Parent = nil
		case WatchGroupsRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case WatchGroupsRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case WatchGroupsRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case WatchGroupsRequest_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchGroupsRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case WatchGroupsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchGroupsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		case WatchGroupsRequest_FieldPathSelectorMaxChunkSize:
			item.MaxChunkSize = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchGroupsRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchGroupsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchGroupsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchGroupsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchGroupsRequest_FieldPathSelectorType ||
		fp.selector == WatchGroupsRequest_FieldPathSelectorParent ||
		fp.selector == WatchGroupsRequest_FieldPathSelectorPageSize ||
		fp.selector == WatchGroupsRequest_FieldPathSelectorPageToken ||
		fp.selector == WatchGroupsRequest_FieldPathSelectorOrderBy ||
		fp.selector == WatchGroupsRequest_FieldPathSelectorResumeToken ||
		fp.selector == WatchGroupsRequest_FieldPathSelectorFilter ||
		fp.selector == WatchGroupsRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchGroupsRequest_FieldPathSelectorView ||
		fp.selector == WatchGroupsRequest_FieldPathSelectorMaxChunkSize
}

func (fp *WatchGroupsRequest_FieldTerminalPath) WithIValue(value interface{}) WatchGroupsRequest_FieldPathValue {
	switch fp.selector {
	case WatchGroupsRequest_FieldPathSelectorType:
		return &WatchGroupsRequest_FieldTerminalPathValue{WatchGroupsRequest_FieldTerminalPath: *fp, value: value.(watch_type.WatchType)}
	case WatchGroupsRequest_FieldPathSelectorParent:
		return &WatchGroupsRequest_FieldTerminalPathValue{WatchGroupsRequest_FieldTerminalPath: *fp, value: value.(*group.ParentReference)}
	case WatchGroupsRequest_FieldPathSelectorPageSize:
		return &WatchGroupsRequest_FieldTerminalPathValue{WatchGroupsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case WatchGroupsRequest_FieldPathSelectorPageToken:
		return &WatchGroupsRequest_FieldTerminalPathValue{WatchGroupsRequest_FieldTerminalPath: *fp, value: value.(*group.PagerCursor)}
	case WatchGroupsRequest_FieldPathSelectorOrderBy:
		return &WatchGroupsRequest_FieldTerminalPathValue{WatchGroupsRequest_FieldTerminalPath: *fp, value: value.(*group.OrderBy)}
	case WatchGroupsRequest_FieldPathSelectorResumeToken:
		return &WatchGroupsRequest_FieldTerminalPathValue{WatchGroupsRequest_FieldTerminalPath: *fp, value: value.(string)}
	case WatchGroupsRequest_FieldPathSelectorFilter:
		return &WatchGroupsRequest_FieldTerminalPathValue{WatchGroupsRequest_FieldTerminalPath: *fp, value: value.(*group.Filter)}
	case WatchGroupsRequest_FieldPathSelectorFieldMask:
		return &WatchGroupsRequest_FieldTerminalPathValue{WatchGroupsRequest_FieldTerminalPath: *fp, value: value.(*group.Group_FieldMask)}
	case WatchGroupsRequest_FieldPathSelectorView:
		return &WatchGroupsRequest_FieldTerminalPathValue{WatchGroupsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	case WatchGroupsRequest_FieldPathSelectorMaxChunkSize:
		return &WatchGroupsRequest_FieldTerminalPathValue{WatchGroupsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchGroupsRequest: %d", fp.selector))
	}
}

func (fp *WatchGroupsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchGroupsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchGroupsRequest_FieldPathArrayOfValues {
	fpaov := &WatchGroupsRequest_FieldTerminalPathArrayOfValues{WatchGroupsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchGroupsRequest_FieldPathSelectorType:
		return &WatchGroupsRequest_FieldTerminalPathArrayOfValues{WatchGroupsRequest_FieldTerminalPath: *fp, values: values.([]watch_type.WatchType)}
	case WatchGroupsRequest_FieldPathSelectorParent:
		return &WatchGroupsRequest_FieldTerminalPathArrayOfValues{WatchGroupsRequest_FieldTerminalPath: *fp, values: values.([]*group.ParentReference)}
	case WatchGroupsRequest_FieldPathSelectorPageSize:
		return &WatchGroupsRequest_FieldTerminalPathArrayOfValues{WatchGroupsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case WatchGroupsRequest_FieldPathSelectorPageToken:
		return &WatchGroupsRequest_FieldTerminalPathArrayOfValues{WatchGroupsRequest_FieldTerminalPath: *fp, values: values.([]*group.PagerCursor)}
	case WatchGroupsRequest_FieldPathSelectorOrderBy:
		return &WatchGroupsRequest_FieldTerminalPathArrayOfValues{WatchGroupsRequest_FieldTerminalPath: *fp, values: values.([]*group.OrderBy)}
	case WatchGroupsRequest_FieldPathSelectorResumeToken:
		return &WatchGroupsRequest_FieldTerminalPathArrayOfValues{WatchGroupsRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchGroupsRequest_FieldPathSelectorFilter:
		return &WatchGroupsRequest_FieldTerminalPathArrayOfValues{WatchGroupsRequest_FieldTerminalPath: *fp, values: values.([]*group.Filter)}
	case WatchGroupsRequest_FieldPathSelectorFieldMask:
		return &WatchGroupsRequest_FieldTerminalPathArrayOfValues{WatchGroupsRequest_FieldTerminalPath: *fp, values: values.([]*group.Group_FieldMask)}
	case WatchGroupsRequest_FieldPathSelectorView:
		return &WatchGroupsRequest_FieldTerminalPathArrayOfValues{WatchGroupsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	case WatchGroupsRequest_FieldPathSelectorMaxChunkSize:
		return &WatchGroupsRequest_FieldTerminalPathArrayOfValues{WatchGroupsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchGroupsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchGroupsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchGroupsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchGroupsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchGroupsRequest: %d", fp.selector))
	}
}

func (fp *WatchGroupsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchGroupsRequest_FieldPathValue allows storing values for WatchGroupsRequest fields according to their type
type WatchGroupsRequest_FieldPathValue interface {
	WatchGroupsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchGroupsRequest)
	CompareWith(*WatchGroupsRequest) (cmp int, comparable bool)
}

func ParseWatchGroupsRequest_FieldPathValue(pathStr, valueStr string) (WatchGroupsRequest_FieldPathValue, error) {
	fp, err := ParseWatchGroupsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchGroupsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchGroupsRequest_FieldPathValue), nil
}

func MustParseWatchGroupsRequest_FieldPathValue(pathStr, valueStr string) WatchGroupsRequest_FieldPathValue {
	fpv, err := ParseWatchGroupsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchGroupsRequest_FieldTerminalPathValue struct {
	WatchGroupsRequest_FieldTerminalPath
	value interface{}
}

var _ WatchGroupsRequest_FieldPathValue = (*WatchGroupsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchGroupsRequest' as interface{}
func (fpv *WatchGroupsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchGroupsRequest_FieldTerminalPathValue) AsTypeValue() (watch_type.WatchType, bool) {
	res, ok := fpv.value.(watch_type.WatchType)
	return res, ok
}
func (fpv *WatchGroupsRequest_FieldTerminalPathValue) AsParentValue() (*group.ParentReference, bool) {
	res, ok := fpv.value.(*group.ParentReference)
	return res, ok
}
func (fpv *WatchGroupsRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *WatchGroupsRequest_FieldTerminalPathValue) AsPageTokenValue() (*group.PagerCursor, bool) {
	res, ok := fpv.value.(*group.PagerCursor)
	return res, ok
}
func (fpv *WatchGroupsRequest_FieldTerminalPathValue) AsOrderByValue() (*group.OrderBy, bool) {
	res, ok := fpv.value.(*group.OrderBy)
	return res, ok
}
func (fpv *WatchGroupsRequest_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchGroupsRequest_FieldTerminalPathValue) AsFilterValue() (*group.Filter, bool) {
	res, ok := fpv.value.(*group.Filter)
	return res, ok
}
func (fpv *WatchGroupsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*group.Group_FieldMask, bool) {
	res, ok := fpv.value.(*group.Group_FieldMask)
	return res, ok
}
func (fpv *WatchGroupsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}
func (fpv *WatchGroupsRequest_FieldTerminalPathValue) AsMaxChunkSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object WatchGroupsRequest
func (fpv *WatchGroupsRequest_FieldTerminalPathValue) SetTo(target **WatchGroupsRequest) {
	if *target == nil {
		*target = new(WatchGroupsRequest)
	}
	switch fpv.selector {
	case WatchGroupsRequest_FieldPathSelectorType:
		(*target).Type = fpv.value.(watch_type.WatchType)
	case WatchGroupsRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*group.ParentReference)
	case WatchGroupsRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case WatchGroupsRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*group.PagerCursor)
	case WatchGroupsRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*group.OrderBy)
	case WatchGroupsRequest_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchGroupsRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*group.Filter)
	case WatchGroupsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*group.Group_FieldMask)
	case WatchGroupsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	case WatchGroupsRequest_FieldPathSelectorMaxChunkSize:
		(*target).MaxChunkSize = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchGroupsRequest: %d", fpv.selector))
	}
}

func (fpv *WatchGroupsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchGroupsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchGroupsRequest_FieldTerminalPathValue' with the value under path in 'WatchGroupsRequest'.
func (fpv *WatchGroupsRequest_FieldTerminalPathValue) CompareWith(source *WatchGroupsRequest) (int, bool) {
	switch fpv.selector {
	case WatchGroupsRequest_FieldPathSelectorType:
		leftValue := fpv.value.(watch_type.WatchType)
		rightValue := source.GetType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchGroupsRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*group.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchGroupsRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchGroupsRequest_FieldPathSelectorPageToken:
		return 0, false
	case WatchGroupsRequest_FieldPathSelectorOrderBy:
		return 0, false
	case WatchGroupsRequest_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchGroupsRequest_FieldPathSelectorFilter:
		return 0, false
	case WatchGroupsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchGroupsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchGroupsRequest_FieldPathSelectorMaxChunkSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetMaxChunkSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchGroupsRequest: %d", fpv.selector))
	}
}

func (fpv *WatchGroupsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchGroupsRequest))
}

// WatchGroupsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchGroupsRequest according to their type
// Present only for array (repeated) types.
type WatchGroupsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchGroupsRequest_FieldPath
	ContainsValue(*WatchGroupsRequest) bool
}

// ParseWatchGroupsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchGroupsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchGroupsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchGroupsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchGroupsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchGroupsRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchGroupsRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchGroupsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchGroupsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchGroupsRequest_FieldTerminalPathArrayItemValue struct {
	WatchGroupsRequest_FieldTerminalPath
	value interface{}
}

var _ WatchGroupsRequest_FieldPathArrayItemValue = (*WatchGroupsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchGroupsRequest as interface{}
func (fpaiv *WatchGroupsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchGroupsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchGroupsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchGroupsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchGroupsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchGroupsRequest'
func (fpaiv *WatchGroupsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchGroupsRequest) bool {
	slice := fpaiv.WatchGroupsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchGroupsRequest_FieldPathArrayOfValues allows storing slice of values for WatchGroupsRequest fields according to their type
type WatchGroupsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchGroupsRequest_FieldPath
}

func ParseWatchGroupsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchGroupsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchGroupsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchGroupsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchGroupsRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchGroupsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchGroupsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchGroupsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchGroupsRequest_FieldTerminalPathArrayOfValues struct {
	WatchGroupsRequest_FieldTerminalPath
	values interface{}
}

var _ WatchGroupsRequest_FieldPathArrayOfValues = (*WatchGroupsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchGroupsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchGroupsRequest_FieldPathSelectorType:
		for _, v := range fpaov.values.([]watch_type.WatchType) {
			values = append(values, v)
		}
	case WatchGroupsRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*group.ParentReference) {
			values = append(values, v)
		}
	case WatchGroupsRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case WatchGroupsRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*group.PagerCursor) {
			values = append(values, v)
		}
	case WatchGroupsRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*group.OrderBy) {
			values = append(values, v)
		}
	case WatchGroupsRequest_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchGroupsRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*group.Filter) {
			values = append(values, v)
		}
	case WatchGroupsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*group.Group_FieldMask) {
			values = append(values, v)
		}
	case WatchGroupsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	case WatchGroupsRequest_FieldPathSelectorMaxChunkSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchGroupsRequest_FieldTerminalPathArrayOfValues) AsTypeArrayOfValues() ([]watch_type.WatchType, bool) {
	res, ok := fpaov.values.([]watch_type.WatchType)
	return res, ok
}
func (fpaov *WatchGroupsRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*group.ParentReference, bool) {
	res, ok := fpaov.values.([]*group.ParentReference)
	return res, ok
}
func (fpaov *WatchGroupsRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *WatchGroupsRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*group.PagerCursor, bool) {
	res, ok := fpaov.values.([]*group.PagerCursor)
	return res, ok
}
func (fpaov *WatchGroupsRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*group.OrderBy, bool) {
	res, ok := fpaov.values.([]*group.OrderBy)
	return res, ok
}
func (fpaov *WatchGroupsRequest_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchGroupsRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*group.Filter, bool) {
	res, ok := fpaov.values.([]*group.Filter)
	return res, ok
}
func (fpaov *WatchGroupsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*group.Group_FieldMask, bool) {
	res, ok := fpaov.values.([]*group.Group_FieldMask)
	return res, ok
}
func (fpaov *WatchGroupsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}
func (fpaov *WatchGroupsRequest_FieldTerminalPathArrayOfValues) AsMaxChunkSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchGroupsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchGroupsResponse_FieldPathSelector
	Get(source *WatchGroupsResponse) []interface{}
	GetSingle(source *WatchGroupsResponse) (interface{}, bool)
	ClearValue(item *WatchGroupsResponse)

	// Those methods build corresponding WatchGroupsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchGroupsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchGroupsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchGroupsResponse_FieldPathArrayItemValue
}

type WatchGroupsResponse_FieldPathSelector int32

const (
	WatchGroupsResponse_FieldPathSelectorGroupChanges    WatchGroupsResponse_FieldPathSelector = 0
	WatchGroupsResponse_FieldPathSelectorIsCurrent       WatchGroupsResponse_FieldPathSelector = 1
	WatchGroupsResponse_FieldPathSelectorPageTokenChange WatchGroupsResponse_FieldPathSelector = 2
	WatchGroupsResponse_FieldPathSelectorResumeToken     WatchGroupsResponse_FieldPathSelector = 3
	WatchGroupsResponse_FieldPathSelectorSnapshotSize    WatchGroupsResponse_FieldPathSelector = 4
	WatchGroupsResponse_FieldPathSelectorIsSoftReset     WatchGroupsResponse_FieldPathSelector = 5
	WatchGroupsResponse_FieldPathSelectorIsHardReset     WatchGroupsResponse_FieldPathSelector = 6
)

func (s WatchGroupsResponse_FieldPathSelector) String() string {
	switch s {
	case WatchGroupsResponse_FieldPathSelectorGroupChanges:
		return "group_changes"
	case WatchGroupsResponse_FieldPathSelectorIsCurrent:
		return "is_current"
	case WatchGroupsResponse_FieldPathSelectorPageTokenChange:
		return "page_token_change"
	case WatchGroupsResponse_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchGroupsResponse_FieldPathSelectorSnapshotSize:
		return "snapshot_size"
	case WatchGroupsResponse_FieldPathSelectorIsSoftReset:
		return "is_soft_reset"
	case WatchGroupsResponse_FieldPathSelectorIsHardReset:
		return "is_hard_reset"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchGroupsResponse: %d", s))
	}
}

func BuildWatchGroupsResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchGroupsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchGroupsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "group_changes", "groupChanges", "group-changes":
			return &WatchGroupsResponse_FieldTerminalPath{selector: WatchGroupsResponse_FieldPathSelectorGroupChanges}, nil
		case "is_current", "isCurrent", "is-current":
			return &WatchGroupsResponse_FieldTerminalPath{selector: WatchGroupsResponse_FieldPathSelectorIsCurrent}, nil
		case "page_token_change", "pageTokenChange", "page-token-change":
			return &WatchGroupsResponse_FieldTerminalPath{selector: WatchGroupsResponse_FieldPathSelectorPageTokenChange}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchGroupsResponse_FieldTerminalPath{selector: WatchGroupsResponse_FieldPathSelectorResumeToken}, nil
		case "snapshot_size", "snapshotSize", "snapshot-size":
			return &WatchGroupsResponse_FieldTerminalPath{selector: WatchGroupsResponse_FieldPathSelectorSnapshotSize}, nil
		case "is_soft_reset", "isSoftReset", "is-soft-reset":
			return &WatchGroupsResponse_FieldTerminalPath{selector: WatchGroupsResponse_FieldPathSelectorIsSoftReset}, nil
		case "is_hard_reset", "isHardReset", "is-hard-reset":
			return &WatchGroupsResponse_FieldTerminalPath{selector: WatchGroupsResponse_FieldPathSelectorIsHardReset}, nil
		}
	} else {
		switch fp[0] {
		case "page_token_change", "pageTokenChange", "page-token-change":
			if subpath, err := BuildWatchGroupsResponsePageTokenChange_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &WatchGroupsResponse_FieldSubPath{selector: WatchGroupsResponse_FieldPathSelectorPageTokenChange, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchGroupsResponse", fp)
}

func ParseWatchGroupsResponse_FieldPath(rawField string) (WatchGroupsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchGroupsResponse_FieldPath(fp)
}

func MustParseWatchGroupsResponse_FieldPath(rawField string) WatchGroupsResponse_FieldPath {
	fp, err := ParseWatchGroupsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchGroupsResponse_FieldTerminalPath struct {
	selector WatchGroupsResponse_FieldPathSelector
}

var _ WatchGroupsResponse_FieldPath = (*WatchGroupsResponse_FieldTerminalPath)(nil)

func (fp *WatchGroupsResponse_FieldTerminalPath) Selector() WatchGroupsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchGroupsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchGroupsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchGroupsResponse
func (fp *WatchGroupsResponse_FieldTerminalPath) Get(source *WatchGroupsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchGroupsResponse_FieldPathSelectorGroupChanges:
			for _, value := range source.GetGroupChanges() {
				values = append(values, value)
			}
		case WatchGroupsResponse_FieldPathSelectorIsCurrent:
			values = append(values, source.IsCurrent)
		case WatchGroupsResponse_FieldPathSelectorPageTokenChange:
			if source.PageTokenChange != nil {
				values = append(values, source.PageTokenChange)
			}
		case WatchGroupsResponse_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchGroupsResponse_FieldPathSelectorSnapshotSize:
			values = append(values, source.SnapshotSize)
		case WatchGroupsResponse_FieldPathSelectorIsSoftReset:
			values = append(values, source.IsSoftReset)
		case WatchGroupsResponse_FieldPathSelectorIsHardReset:
			values = append(values, source.IsHardReset)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchGroupsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchGroupsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchGroupsResponse))
}

// GetSingle returns value pointed by specific field of from source WatchGroupsResponse
func (fp *WatchGroupsResponse_FieldTerminalPath) GetSingle(source *WatchGroupsResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchGroupsResponse_FieldPathSelectorGroupChanges:
		res := source.GetGroupChanges()
		return res, res != nil
	case WatchGroupsResponse_FieldPathSelectorIsCurrent:
		return source.GetIsCurrent(), source != nil
	case WatchGroupsResponse_FieldPathSelectorPageTokenChange:
		res := source.GetPageTokenChange()
		return res, res != nil
	case WatchGroupsResponse_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchGroupsResponse_FieldPathSelectorSnapshotSize:
		return source.GetSnapshotSize(), source != nil
	case WatchGroupsResponse_FieldPathSelectorIsSoftReset:
		return source.GetIsSoftReset(), source != nil
	case WatchGroupsResponse_FieldPathSelectorIsHardReset:
		return source.GetIsHardReset(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchGroupsResponse: %d", fp.selector))
	}
}

func (fp *WatchGroupsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchGroupsResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchGroupsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchGroupsResponse_FieldPathSelectorGroupChanges:
		return ([]*group.GroupChange)(nil)
	case WatchGroupsResponse_FieldPathSelectorIsCurrent:
		return false
	case WatchGroupsResponse_FieldPathSelectorPageTokenChange:
		return (*WatchGroupsResponse_PageTokenChange)(nil)
	case WatchGroupsResponse_FieldPathSelectorResumeToken:
		return ""
	case WatchGroupsResponse_FieldPathSelectorSnapshotSize:
		return int64(0)
	case WatchGroupsResponse_FieldPathSelectorIsSoftReset:
		return false
	case WatchGroupsResponse_FieldPathSelectorIsHardReset:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchGroupsResponse: %d", fp.selector))
	}
}

func (fp *WatchGroupsResponse_FieldTerminalPath) ClearValue(item *WatchGroupsResponse) {
	if item != nil {
		switch fp.selector {
		case WatchGroupsResponse_FieldPathSelectorGroupChanges:
			item.GroupChanges = nil
		case WatchGroupsResponse_FieldPathSelectorIsCurrent:
			item.IsCurrent = false
		case WatchGroupsResponse_FieldPathSelectorPageTokenChange:
			item.PageTokenChange = nil
		case WatchGroupsResponse_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchGroupsResponse_FieldPathSelectorSnapshotSize:
			item.SnapshotSize = int64(0)
		case WatchGroupsResponse_FieldPathSelectorIsSoftReset:
			item.IsSoftReset = false
		case WatchGroupsResponse_FieldPathSelectorIsHardReset:
			item.IsHardReset = false
		default:
			panic(fmt.Sprintf("Invalid selector for WatchGroupsResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchGroupsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchGroupsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchGroupsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchGroupsResponse_FieldPathSelectorGroupChanges ||
		fp.selector == WatchGroupsResponse_FieldPathSelectorIsCurrent ||
		fp.selector == WatchGroupsResponse_FieldPathSelectorResumeToken ||
		fp.selector == WatchGroupsResponse_FieldPathSelectorSnapshotSize ||
		fp.selector == WatchGroupsResponse_FieldPathSelectorIsSoftReset ||
		fp.selector == WatchGroupsResponse_FieldPathSelectorIsHardReset
}

func (fp *WatchGroupsResponse_FieldTerminalPath) WithIValue(value interface{}) WatchGroupsResponse_FieldPathValue {
	switch fp.selector {
	case WatchGroupsResponse_FieldPathSelectorGroupChanges:
		return &WatchGroupsResponse_FieldTerminalPathValue{WatchGroupsResponse_FieldTerminalPath: *fp, value: value.([]*group.GroupChange)}
	case WatchGroupsResponse_FieldPathSelectorIsCurrent:
		return &WatchGroupsResponse_FieldTerminalPathValue{WatchGroupsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchGroupsResponse_FieldPathSelectorPageTokenChange:
		return &WatchGroupsResponse_FieldTerminalPathValue{WatchGroupsResponse_FieldTerminalPath: *fp, value: value.(*WatchGroupsResponse_PageTokenChange)}
	case WatchGroupsResponse_FieldPathSelectorResumeToken:
		return &WatchGroupsResponse_FieldTerminalPathValue{WatchGroupsResponse_FieldTerminalPath: *fp, value: value.(string)}
	case WatchGroupsResponse_FieldPathSelectorSnapshotSize:
		return &WatchGroupsResponse_FieldTerminalPathValue{WatchGroupsResponse_FieldTerminalPath: *fp, value: value.(int64)}
	case WatchGroupsResponse_FieldPathSelectorIsSoftReset:
		return &WatchGroupsResponse_FieldTerminalPathValue{WatchGroupsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchGroupsResponse_FieldPathSelectorIsHardReset:
		return &WatchGroupsResponse_FieldTerminalPathValue{WatchGroupsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchGroupsResponse: %d", fp.selector))
	}
}

func (fp *WatchGroupsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchGroupsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchGroupsResponse_FieldPathArrayOfValues {
	fpaov := &WatchGroupsResponse_FieldTerminalPathArrayOfValues{WatchGroupsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchGroupsResponse_FieldPathSelectorGroupChanges:
		return &WatchGroupsResponse_FieldTerminalPathArrayOfValues{WatchGroupsResponse_FieldTerminalPath: *fp, values: values.([][]*group.GroupChange)}
	case WatchGroupsResponse_FieldPathSelectorIsCurrent:
		return &WatchGroupsResponse_FieldTerminalPathArrayOfValues{WatchGroupsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchGroupsResponse_FieldPathSelectorPageTokenChange:
		return &WatchGroupsResponse_FieldTerminalPathArrayOfValues{WatchGroupsResponse_FieldTerminalPath: *fp, values: values.([]*WatchGroupsResponse_PageTokenChange)}
	case WatchGroupsResponse_FieldPathSelectorResumeToken:
		return &WatchGroupsResponse_FieldTerminalPathArrayOfValues{WatchGroupsResponse_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchGroupsResponse_FieldPathSelectorSnapshotSize:
		return &WatchGroupsResponse_FieldTerminalPathArrayOfValues{WatchGroupsResponse_FieldTerminalPath: *fp, values: values.([]int64)}
	case WatchGroupsResponse_FieldPathSelectorIsSoftReset:
		return &WatchGroupsResponse_FieldTerminalPathArrayOfValues{WatchGroupsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchGroupsResponse_FieldPathSelectorIsHardReset:
		return &WatchGroupsResponse_FieldTerminalPathArrayOfValues{WatchGroupsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchGroupsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchGroupsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchGroupsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchGroupsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case WatchGroupsResponse_FieldPathSelectorGroupChanges:
		return &WatchGroupsResponse_FieldTerminalPathArrayItemValue{WatchGroupsResponse_FieldTerminalPath: *fp, value: value.(*group.GroupChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchGroupsResponse: %d", fp.selector))
	}
}

func (fp *WatchGroupsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type WatchGroupsResponse_FieldSubPath struct {
	selector WatchGroupsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ WatchGroupsResponse_FieldPath = (*WatchGroupsResponse_FieldSubPath)(nil)

func (fps *WatchGroupsResponse_FieldSubPath) Selector() WatchGroupsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *WatchGroupsResponse_FieldSubPath) AsPageTokenChangeSubPath() (WatchGroupsResponsePageTokenChange_FieldPath, bool) {
	res, ok := fps.subPath.(WatchGroupsResponsePageTokenChange_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *WatchGroupsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *WatchGroupsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source WatchGroupsResponse
func (fps *WatchGroupsResponse_FieldSubPath) Get(source *WatchGroupsResponse) (values []interface{}) {
	if asPageTokenChangeFieldPath, ok := fps.AsPageTokenChangeSubPath(); ok {
		values = append(values, asPageTokenChangeFieldPath.Get(source.GetPageTokenChange())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for WatchGroupsResponse: %d", fps.selector))
	}
	return
}

func (fps *WatchGroupsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*WatchGroupsResponse))
}

// GetSingle returns value of selected field from source WatchGroupsResponse
func (fps *WatchGroupsResponse_FieldSubPath) GetSingle(source *WatchGroupsResponse) (interface{}, bool) {
	switch fps.selector {
	case WatchGroupsResponse_FieldPathSelectorPageTokenChange:
		if source.GetPageTokenChange() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchGroupsResponse: %d", fps.selector))
	}
}

func (fps *WatchGroupsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*WatchGroupsResponse))
}

// GetDefault returns a default value of the field type
func (fps *WatchGroupsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *WatchGroupsResponse_FieldSubPath) ClearValue(item *WatchGroupsResponse) {
	if item != nil {
		switch fps.selector {
		case WatchGroupsResponse_FieldPathSelectorPageTokenChange:
			fps.subPath.ClearValueRaw(item.PageTokenChange)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchGroupsResponse: %d", fps.selector))
		}
	}
}

func (fps *WatchGroupsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*WatchGroupsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *WatchGroupsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *WatchGroupsResponse_FieldSubPath) WithIValue(value interface{}) WatchGroupsResponse_FieldPathValue {
	return &WatchGroupsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *WatchGroupsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *WatchGroupsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) WatchGroupsResponse_FieldPathArrayOfValues {
	return &WatchGroupsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *WatchGroupsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *WatchGroupsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) WatchGroupsResponse_FieldPathArrayItemValue {
	return &WatchGroupsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *WatchGroupsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// WatchGroupsResponse_FieldPathValue allows storing values for WatchGroupsResponse fields according to their type
type WatchGroupsResponse_FieldPathValue interface {
	WatchGroupsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchGroupsResponse)
	CompareWith(*WatchGroupsResponse) (cmp int, comparable bool)
}

func ParseWatchGroupsResponse_FieldPathValue(pathStr, valueStr string) (WatchGroupsResponse_FieldPathValue, error) {
	fp, err := ParseWatchGroupsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchGroupsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchGroupsResponse_FieldPathValue), nil
}

func MustParseWatchGroupsResponse_FieldPathValue(pathStr, valueStr string) WatchGroupsResponse_FieldPathValue {
	fpv, err := ParseWatchGroupsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchGroupsResponse_FieldTerminalPathValue struct {
	WatchGroupsResponse_FieldTerminalPath
	value interface{}
}

var _ WatchGroupsResponse_FieldPathValue = (*WatchGroupsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchGroupsResponse' as interface{}
func (fpv *WatchGroupsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchGroupsResponse_FieldTerminalPathValue) AsGroupChangesValue() ([]*group.GroupChange, bool) {
	res, ok := fpv.value.([]*group.GroupChange)
	return res, ok
}
func (fpv *WatchGroupsResponse_FieldTerminalPathValue) AsIsCurrentValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchGroupsResponse_FieldTerminalPathValue) AsPageTokenChangeValue() (*WatchGroupsResponse_PageTokenChange, bool) {
	res, ok := fpv.value.(*WatchGroupsResponse_PageTokenChange)
	return res, ok
}
func (fpv *WatchGroupsResponse_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchGroupsResponse_FieldTerminalPathValue) AsSnapshotSizeValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}
func (fpv *WatchGroupsResponse_FieldTerminalPathValue) AsIsSoftResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchGroupsResponse_FieldTerminalPathValue) AsIsHardResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object WatchGroupsResponse
func (fpv *WatchGroupsResponse_FieldTerminalPathValue) SetTo(target **WatchGroupsResponse) {
	if *target == nil {
		*target = new(WatchGroupsResponse)
	}
	switch fpv.selector {
	case WatchGroupsResponse_FieldPathSelectorGroupChanges:
		(*target).GroupChanges = fpv.value.([]*group.GroupChange)
	case WatchGroupsResponse_FieldPathSelectorIsCurrent:
		(*target).IsCurrent = fpv.value.(bool)
	case WatchGroupsResponse_FieldPathSelectorPageTokenChange:
		(*target).PageTokenChange = fpv.value.(*WatchGroupsResponse_PageTokenChange)
	case WatchGroupsResponse_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchGroupsResponse_FieldPathSelectorSnapshotSize:
		(*target).SnapshotSize = fpv.value.(int64)
	case WatchGroupsResponse_FieldPathSelectorIsSoftReset:
		(*target).IsSoftReset = fpv.value.(bool)
	case WatchGroupsResponse_FieldPathSelectorIsHardReset:
		(*target).IsHardReset = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchGroupsResponse: %d", fpv.selector))
	}
}

func (fpv *WatchGroupsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchGroupsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchGroupsResponse_FieldTerminalPathValue' with the value under path in 'WatchGroupsResponse'.
func (fpv *WatchGroupsResponse_FieldTerminalPathValue) CompareWith(source *WatchGroupsResponse) (int, bool) {
	switch fpv.selector {
	case WatchGroupsResponse_FieldPathSelectorGroupChanges:
		return 0, false
	case WatchGroupsResponse_FieldPathSelectorIsCurrent:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsCurrent()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchGroupsResponse_FieldPathSelectorPageTokenChange:
		return 0, false
	case WatchGroupsResponse_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchGroupsResponse_FieldPathSelectorSnapshotSize:
		leftValue := fpv.value.(int64)
		rightValue := source.GetSnapshotSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchGroupsResponse_FieldPathSelectorIsSoftReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsSoftReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchGroupsResponse_FieldPathSelectorIsHardReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsHardReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchGroupsResponse: %d", fpv.selector))
	}
}

func (fpv *WatchGroupsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchGroupsResponse))
}

type WatchGroupsResponse_FieldSubPathValue struct {
	WatchGroupsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ WatchGroupsResponse_FieldPathValue = (*WatchGroupsResponse_FieldSubPathValue)(nil)

func (fpvs *WatchGroupsResponse_FieldSubPathValue) AsPageTokenChangePathValue() (WatchGroupsResponsePageTokenChange_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(WatchGroupsResponsePageTokenChange_FieldPathValue)
	return res, ok
}

func (fpvs *WatchGroupsResponse_FieldSubPathValue) SetTo(target **WatchGroupsResponse) {
	if *target == nil {
		*target = new(WatchGroupsResponse)
	}
	switch fpvs.Selector() {
	case WatchGroupsResponse_FieldPathSelectorPageTokenChange:
		fpvs.subPathValue.(WatchGroupsResponsePageTokenChange_FieldPathValue).SetTo(&(*target).PageTokenChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchGroupsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchGroupsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchGroupsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *WatchGroupsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *WatchGroupsResponse_FieldSubPathValue) CompareWith(source *WatchGroupsResponse) (int, bool) {
	switch fpvs.Selector() {
	case WatchGroupsResponse_FieldPathSelectorPageTokenChange:
		return fpvs.subPathValue.(WatchGroupsResponsePageTokenChange_FieldPathValue).CompareWith(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchGroupsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchGroupsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*WatchGroupsResponse))
}

// WatchGroupsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchGroupsResponse according to their type
// Present only for array (repeated) types.
type WatchGroupsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchGroupsResponse_FieldPath
	ContainsValue(*WatchGroupsResponse) bool
}

// ParseWatchGroupsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchGroupsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchGroupsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchGroupsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchGroupsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchGroupsResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchGroupsResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchGroupsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchGroupsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchGroupsResponse_FieldTerminalPathArrayItemValue struct {
	WatchGroupsResponse_FieldTerminalPath
	value interface{}
}

var _ WatchGroupsResponse_FieldPathArrayItemValue = (*WatchGroupsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchGroupsResponse as interface{}
func (fpaiv *WatchGroupsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *WatchGroupsResponse_FieldTerminalPathArrayItemValue) AsGroupChangesItemValue() (*group.GroupChange, bool) {
	res, ok := fpaiv.value.(*group.GroupChange)
	return res, ok
}

func (fpaiv *WatchGroupsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchGroupsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchGroupsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchGroupsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchGroupsResponse'
func (fpaiv *WatchGroupsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchGroupsResponse) bool {
	slice := fpaiv.WatchGroupsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type WatchGroupsResponse_FieldSubPathArrayItemValue struct {
	WatchGroupsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *WatchGroupsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *WatchGroupsResponse_FieldSubPathArrayItemValue) AsPageTokenChangePathItemValue() (WatchGroupsResponsePageTokenChange_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(WatchGroupsResponsePageTokenChange_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchGroupsResponse'
func (fpaivs *WatchGroupsResponse_FieldSubPathArrayItemValue) ContainsValue(source *WatchGroupsResponse) bool {
	switch fpaivs.Selector() {
	case WatchGroupsResponse_FieldPathSelectorPageTokenChange:
		return fpaivs.subPathItemValue.(WatchGroupsResponsePageTokenChange_FieldPathArrayItemValue).ContainsValue(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchGroupsResponse: %d", fpaivs.Selector()))
	}
}

// WatchGroupsResponse_FieldPathArrayOfValues allows storing slice of values for WatchGroupsResponse fields according to their type
type WatchGroupsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchGroupsResponse_FieldPath
}

func ParseWatchGroupsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchGroupsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchGroupsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchGroupsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchGroupsResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchGroupsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchGroupsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchGroupsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchGroupsResponse_FieldTerminalPathArrayOfValues struct {
	WatchGroupsResponse_FieldTerminalPath
	values interface{}
}

var _ WatchGroupsResponse_FieldPathArrayOfValues = (*WatchGroupsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchGroupsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchGroupsResponse_FieldPathSelectorGroupChanges:
		for _, v := range fpaov.values.([][]*group.GroupChange) {
			values = append(values, v)
		}
	case WatchGroupsResponse_FieldPathSelectorIsCurrent:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchGroupsResponse_FieldPathSelectorPageTokenChange:
		for _, v := range fpaov.values.([]*WatchGroupsResponse_PageTokenChange) {
			values = append(values, v)
		}
	case WatchGroupsResponse_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchGroupsResponse_FieldPathSelectorSnapshotSize:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	case WatchGroupsResponse_FieldPathSelectorIsSoftReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchGroupsResponse_FieldPathSelectorIsHardReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchGroupsResponse_FieldTerminalPathArrayOfValues) AsGroupChangesArrayOfValues() ([][]*group.GroupChange, bool) {
	res, ok := fpaov.values.([][]*group.GroupChange)
	return res, ok
}
func (fpaov *WatchGroupsResponse_FieldTerminalPathArrayOfValues) AsIsCurrentArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchGroupsResponse_FieldTerminalPathArrayOfValues) AsPageTokenChangeArrayOfValues() ([]*WatchGroupsResponse_PageTokenChange, bool) {
	res, ok := fpaov.values.([]*WatchGroupsResponse_PageTokenChange)
	return res, ok
}
func (fpaov *WatchGroupsResponse_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchGroupsResponse_FieldTerminalPathArrayOfValues) AsSnapshotSizeArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}
func (fpaov *WatchGroupsResponse_FieldTerminalPathArrayOfValues) AsIsSoftResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchGroupsResponse_FieldTerminalPathArrayOfValues) AsIsHardResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

type WatchGroupsResponse_FieldSubPathArrayOfValues struct {
	WatchGroupsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ WatchGroupsResponse_FieldPathArrayOfValues = (*WatchGroupsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *WatchGroupsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *WatchGroupsResponse_FieldSubPathArrayOfValues) AsPageTokenChangePathArrayOfValues() (WatchGroupsResponsePageTokenChange_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(WatchGroupsResponsePageTokenChange_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchGroupsResponsePageTokenChange_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchGroupsResponsePageTokenChange_FieldPathSelector
	Get(source *WatchGroupsResponse_PageTokenChange) []interface{}
	GetSingle(source *WatchGroupsResponse_PageTokenChange) (interface{}, bool)
	ClearValue(item *WatchGroupsResponse_PageTokenChange)

	// Those methods build corresponding WatchGroupsResponsePageTokenChange_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchGroupsResponsePageTokenChange_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchGroupsResponsePageTokenChange_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchGroupsResponsePageTokenChange_FieldPathArrayItemValue
}

type WatchGroupsResponsePageTokenChange_FieldPathSelector int32

const (
	WatchGroupsResponsePageTokenChange_FieldPathSelectorPrevPageToken WatchGroupsResponsePageTokenChange_FieldPathSelector = 0
	WatchGroupsResponsePageTokenChange_FieldPathSelectorNextPageToken WatchGroupsResponsePageTokenChange_FieldPathSelector = 1
)

func (s WatchGroupsResponsePageTokenChange_FieldPathSelector) String() string {
	switch s {
	case WatchGroupsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case WatchGroupsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchGroupsResponse_PageTokenChange: %d", s))
	}
}

func BuildWatchGroupsResponsePageTokenChange_FieldPath(fp gotenobject.RawFieldPath) (WatchGroupsResponsePageTokenChange_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchGroupsResponse_PageTokenChange")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &WatchGroupsResponsePageTokenChange_FieldTerminalPath{selector: WatchGroupsResponsePageTokenChange_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &WatchGroupsResponsePageTokenChange_FieldTerminalPath{selector: WatchGroupsResponsePageTokenChange_FieldPathSelectorNextPageToken}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchGroupsResponse_PageTokenChange", fp)
}

func ParseWatchGroupsResponsePageTokenChange_FieldPath(rawField string) (WatchGroupsResponsePageTokenChange_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchGroupsResponsePageTokenChange_FieldPath(fp)
}

func MustParseWatchGroupsResponsePageTokenChange_FieldPath(rawField string) WatchGroupsResponsePageTokenChange_FieldPath {
	fp, err := ParseWatchGroupsResponsePageTokenChange_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchGroupsResponsePageTokenChange_FieldTerminalPath struct {
	selector WatchGroupsResponsePageTokenChange_FieldPathSelector
}

var _ WatchGroupsResponsePageTokenChange_FieldPath = (*WatchGroupsResponsePageTokenChange_FieldTerminalPath)(nil)

func (fp *WatchGroupsResponsePageTokenChange_FieldTerminalPath) Selector() WatchGroupsResponsePageTokenChange_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchGroupsResponsePageTokenChange_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchGroupsResponsePageTokenChange_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchGroupsResponse_PageTokenChange
func (fp *WatchGroupsResponsePageTokenChange_FieldTerminalPath) Get(source *WatchGroupsResponse_PageTokenChange) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchGroupsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case WatchGroupsResponsePageTokenChange_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchGroupsResponse_PageTokenChange: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchGroupsResponsePageTokenChange_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchGroupsResponse_PageTokenChange))
}

// GetSingle returns value pointed by specific field of from source WatchGroupsResponse_PageTokenChange
func (fp *WatchGroupsResponsePageTokenChange_FieldTerminalPath) GetSingle(source *WatchGroupsResponse_PageTokenChange) (interface{}, bool) {
	switch fp.selector {
	case WatchGroupsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case WatchGroupsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchGroupsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchGroupsResponsePageTokenChange_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchGroupsResponse_PageTokenChange))
}

// GetDefault returns a default value of the field type
func (fp *WatchGroupsResponsePageTokenChange_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchGroupsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return (*group.PagerCursor)(nil)
	case WatchGroupsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return (*group.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchGroupsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchGroupsResponsePageTokenChange_FieldTerminalPath) ClearValue(item *WatchGroupsResponse_PageTokenChange) {
	if item != nil {
		switch fp.selector {
		case WatchGroupsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case WatchGroupsResponsePageTokenChange_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchGroupsResponse_PageTokenChange: %d", fp.selector))
		}
	}
}

func (fp *WatchGroupsResponsePageTokenChange_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchGroupsResponse_PageTokenChange))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchGroupsResponsePageTokenChange_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchGroupsResponsePageTokenChange_FieldPathSelectorPrevPageToken ||
		fp.selector == WatchGroupsResponsePageTokenChange_FieldPathSelectorNextPageToken
}

func (fp *WatchGroupsResponsePageTokenChange_FieldTerminalPath) WithIValue(value interface{}) WatchGroupsResponsePageTokenChange_FieldPathValue {
	switch fp.selector {
	case WatchGroupsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchGroupsResponsePageTokenChange_FieldTerminalPathValue{WatchGroupsResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*group.PagerCursor)}
	case WatchGroupsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchGroupsResponsePageTokenChange_FieldTerminalPathValue{WatchGroupsResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*group.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchGroupsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchGroupsResponsePageTokenChange_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchGroupsResponsePageTokenChange_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchGroupsResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov := &WatchGroupsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchGroupsResponsePageTokenChange_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchGroupsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchGroupsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchGroupsResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*group.PagerCursor)}
	case WatchGroupsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchGroupsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchGroupsResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*group.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchGroupsResponse_PageTokenChange: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchGroupsResponsePageTokenChange_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchGroupsResponsePageTokenChange_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchGroupsResponsePageTokenChange_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchGroupsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchGroupsResponsePageTokenChange_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchGroupsResponsePageTokenChange_FieldPathValue allows storing values for PageTokenChange fields according to their type
type WatchGroupsResponsePageTokenChange_FieldPathValue interface {
	WatchGroupsResponsePageTokenChange_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchGroupsResponse_PageTokenChange)
	CompareWith(*WatchGroupsResponse_PageTokenChange) (cmp int, comparable bool)
}

func ParseWatchGroupsResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) (WatchGroupsResponsePageTokenChange_FieldPathValue, error) {
	fp, err := ParseWatchGroupsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchGroupsResponsePageTokenChange_FieldPathValue), nil
}

func MustParseWatchGroupsResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) WatchGroupsResponsePageTokenChange_FieldPathValue {
	fpv, err := ParseWatchGroupsResponsePageTokenChange_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchGroupsResponsePageTokenChange_FieldTerminalPathValue struct {
	WatchGroupsResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchGroupsResponsePageTokenChange_FieldPathValue = (*WatchGroupsResponsePageTokenChange_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'PageTokenChange' as interface{}
func (fpv *WatchGroupsResponsePageTokenChange_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchGroupsResponsePageTokenChange_FieldTerminalPathValue) AsPrevPageTokenValue() (*group.PagerCursor, bool) {
	res, ok := fpv.value.(*group.PagerCursor)
	return res, ok
}
func (fpv *WatchGroupsResponsePageTokenChange_FieldTerminalPathValue) AsNextPageTokenValue() (*group.PagerCursor, bool) {
	res, ok := fpv.value.(*group.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object PageTokenChange
func (fpv *WatchGroupsResponsePageTokenChange_FieldTerminalPathValue) SetTo(target **WatchGroupsResponse_PageTokenChange) {
	if *target == nil {
		*target = new(WatchGroupsResponse_PageTokenChange)
	}
	switch fpv.selector {
	case WatchGroupsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*group.PagerCursor)
	case WatchGroupsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*group.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchGroupsResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchGroupsResponsePageTokenChange_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchGroupsResponse_PageTokenChange)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchGroupsResponsePageTokenChange_FieldTerminalPathValue' with the value under path in 'WatchGroupsResponse_PageTokenChange'.
func (fpv *WatchGroupsResponsePageTokenChange_FieldTerminalPathValue) CompareWith(source *WatchGroupsResponse_PageTokenChange) (int, bool) {
	switch fpv.selector {
	case WatchGroupsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return 0, false
	case WatchGroupsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchGroupsResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchGroupsResponsePageTokenChange_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchGroupsResponse_PageTokenChange))
}

// WatchGroupsResponsePageTokenChange_FieldPathArrayItemValue allows storing single item in Path-specific values for PageTokenChange according to their type
// Present only for array (repeated) types.
type WatchGroupsResponsePageTokenChange_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchGroupsResponsePageTokenChange_FieldPath
	ContainsValue(*WatchGroupsResponse_PageTokenChange) bool
}

// ParseWatchGroupsResponsePageTokenChange_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchGroupsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) (WatchGroupsResponsePageTokenChange_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchGroupsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchGroupsResponsePageTokenChange_FieldPathArrayItemValue), nil
}

func MustParseWatchGroupsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) WatchGroupsResponsePageTokenChange_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchGroupsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchGroupsResponsePageTokenChange_FieldTerminalPathArrayItemValue struct {
	WatchGroupsResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchGroupsResponsePageTokenChange_FieldPathArrayItemValue = (*WatchGroupsResponsePageTokenChange_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchGroupsResponse_PageTokenChange as interface{}
func (fpaiv *WatchGroupsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchGroupsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingle(source *WatchGroupsResponse_PageTokenChange) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchGroupsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchGroupsResponse_PageTokenChange))
}

// Contains returns a boolean indicating if value that is being held is present in given 'PageTokenChange'
func (fpaiv *WatchGroupsResponsePageTokenChange_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchGroupsResponse_PageTokenChange) bool {
	slice := fpaiv.WatchGroupsResponsePageTokenChange_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchGroupsResponsePageTokenChange_FieldPathArrayOfValues allows storing slice of values for PageTokenChange fields according to their type
type WatchGroupsResponsePageTokenChange_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchGroupsResponsePageTokenChange_FieldPath
}

func ParseWatchGroupsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchGroupsResponsePageTokenChange_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchGroupsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchGroupsResponsePageTokenChange_FieldPathArrayOfValues), nil
}

func MustParseWatchGroupsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) WatchGroupsResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov, err := ParseWatchGroupsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchGroupsResponsePageTokenChange_FieldTerminalPathArrayOfValues struct {
	WatchGroupsResponsePageTokenChange_FieldTerminalPath
	values interface{}
}

var _ WatchGroupsResponsePageTokenChange_FieldPathArrayOfValues = (*WatchGroupsResponsePageTokenChange_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchGroupsResponsePageTokenChange_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchGroupsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*group.PagerCursor) {
			values = append(values, v)
		}
	case WatchGroupsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*group.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchGroupsResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*group.PagerCursor, bool) {
	res, ok := fpaov.values.([]*group.PagerCursor)
	return res, ok
}
func (fpaov *WatchGroupsResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*group.PagerCursor, bool) {
	res, ok := fpaov.values.([]*group.PagerCursor)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type CreateGroupRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() CreateGroupRequest_FieldPathSelector
	Get(source *CreateGroupRequest) []interface{}
	GetSingle(source *CreateGroupRequest) (interface{}, bool)
	ClearValue(item *CreateGroupRequest)

	// Those methods build corresponding CreateGroupRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) CreateGroupRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) CreateGroupRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) CreateGroupRequest_FieldPathArrayItemValue
}

type CreateGroupRequest_FieldPathSelector int32

const (
	CreateGroupRequest_FieldPathSelectorParent CreateGroupRequest_FieldPathSelector = 0
	CreateGroupRequest_FieldPathSelectorGroup  CreateGroupRequest_FieldPathSelector = 1
)

func (s CreateGroupRequest_FieldPathSelector) String() string {
	switch s {
	case CreateGroupRequest_FieldPathSelectorParent:
		return "parent"
	case CreateGroupRequest_FieldPathSelectorGroup:
		return "group"
	default:
		panic(fmt.Sprintf("Invalid selector for CreateGroupRequest: %d", s))
	}
}

func BuildCreateGroupRequest_FieldPath(fp gotenobject.RawFieldPath) (CreateGroupRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object CreateGroupRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &CreateGroupRequest_FieldTerminalPath{selector: CreateGroupRequest_FieldPathSelectorParent}, nil
		case "group":
			return &CreateGroupRequest_FieldTerminalPath{selector: CreateGroupRequest_FieldPathSelectorGroup}, nil
		}
	} else {
		switch fp[0] {
		case "group":
			if subpath, err := group.BuildGroup_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &CreateGroupRequest_FieldSubPath{selector: CreateGroupRequest_FieldPathSelectorGroup, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object CreateGroupRequest", fp)
}

func ParseCreateGroupRequest_FieldPath(rawField string) (CreateGroupRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildCreateGroupRequest_FieldPath(fp)
}

func MustParseCreateGroupRequest_FieldPath(rawField string) CreateGroupRequest_FieldPath {
	fp, err := ParseCreateGroupRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type CreateGroupRequest_FieldTerminalPath struct {
	selector CreateGroupRequest_FieldPathSelector
}

var _ CreateGroupRequest_FieldPath = (*CreateGroupRequest_FieldTerminalPath)(nil)

func (fp *CreateGroupRequest_FieldTerminalPath) Selector() CreateGroupRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *CreateGroupRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *CreateGroupRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source CreateGroupRequest
func (fp *CreateGroupRequest_FieldTerminalPath) Get(source *CreateGroupRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case CreateGroupRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case CreateGroupRequest_FieldPathSelectorGroup:
			if source.Group != nil {
				values = append(values, source.Group)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for CreateGroupRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *CreateGroupRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*CreateGroupRequest))
}

// GetSingle returns value pointed by specific field of from source CreateGroupRequest
func (fp *CreateGroupRequest_FieldTerminalPath) GetSingle(source *CreateGroupRequest) (interface{}, bool) {
	switch fp.selector {
	case CreateGroupRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case CreateGroupRequest_FieldPathSelectorGroup:
		res := source.GetGroup()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for CreateGroupRequest: %d", fp.selector))
	}
}

func (fp *CreateGroupRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*CreateGroupRequest))
}

// GetDefault returns a default value of the field type
func (fp *CreateGroupRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case CreateGroupRequest_FieldPathSelectorParent:
		return (*group.ParentReference)(nil)
	case CreateGroupRequest_FieldPathSelectorGroup:
		return (*group.Group)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateGroupRequest: %d", fp.selector))
	}
}

func (fp *CreateGroupRequest_FieldTerminalPath) ClearValue(item *CreateGroupRequest) {
	if item != nil {
		switch fp.selector {
		case CreateGroupRequest_FieldPathSelectorParent:
			item.Parent = nil
		case CreateGroupRequest_FieldPathSelectorGroup:
			item.Group = nil
		default:
			panic(fmt.Sprintf("Invalid selector for CreateGroupRequest: %d", fp.selector))
		}
	}
}

func (fp *CreateGroupRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*CreateGroupRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *CreateGroupRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == CreateGroupRequest_FieldPathSelectorParent
}

func (fp *CreateGroupRequest_FieldTerminalPath) WithIValue(value interface{}) CreateGroupRequest_FieldPathValue {
	switch fp.selector {
	case CreateGroupRequest_FieldPathSelectorParent:
		return &CreateGroupRequest_FieldTerminalPathValue{CreateGroupRequest_FieldTerminalPath: *fp, value: value.(*group.ParentReference)}
	case CreateGroupRequest_FieldPathSelectorGroup:
		return &CreateGroupRequest_FieldTerminalPathValue{CreateGroupRequest_FieldTerminalPath: *fp, value: value.(*group.Group)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateGroupRequest: %d", fp.selector))
	}
}

func (fp *CreateGroupRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *CreateGroupRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) CreateGroupRequest_FieldPathArrayOfValues {
	fpaov := &CreateGroupRequest_FieldTerminalPathArrayOfValues{CreateGroupRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case CreateGroupRequest_FieldPathSelectorParent:
		return &CreateGroupRequest_FieldTerminalPathArrayOfValues{CreateGroupRequest_FieldTerminalPath: *fp, values: values.([]*group.ParentReference)}
	case CreateGroupRequest_FieldPathSelectorGroup:
		return &CreateGroupRequest_FieldTerminalPathArrayOfValues{CreateGroupRequest_FieldTerminalPath: *fp, values: values.([]*group.Group)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateGroupRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *CreateGroupRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *CreateGroupRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) CreateGroupRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for CreateGroupRequest: %d", fp.selector))
	}
}

func (fp *CreateGroupRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type CreateGroupRequest_FieldSubPath struct {
	selector CreateGroupRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ CreateGroupRequest_FieldPath = (*CreateGroupRequest_FieldSubPath)(nil)

func (fps *CreateGroupRequest_FieldSubPath) Selector() CreateGroupRequest_FieldPathSelector {
	return fps.selector
}
func (fps *CreateGroupRequest_FieldSubPath) AsGroupSubPath() (group.Group_FieldPath, bool) {
	res, ok := fps.subPath.(group.Group_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *CreateGroupRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *CreateGroupRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source CreateGroupRequest
func (fps *CreateGroupRequest_FieldSubPath) Get(source *CreateGroupRequest) (values []interface{}) {
	if asGroupFieldPath, ok := fps.AsGroupSubPath(); ok {
		values = append(values, asGroupFieldPath.Get(source.GetGroup())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for CreateGroupRequest: %d", fps.selector))
	}
	return
}

func (fps *CreateGroupRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*CreateGroupRequest))
}

// GetSingle returns value of selected field from source CreateGroupRequest
func (fps *CreateGroupRequest_FieldSubPath) GetSingle(source *CreateGroupRequest) (interface{}, bool) {
	switch fps.selector {
	case CreateGroupRequest_FieldPathSelectorGroup:
		if source.GetGroup() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetGroup())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateGroupRequest: %d", fps.selector))
	}
}

func (fps *CreateGroupRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*CreateGroupRequest))
}

// GetDefault returns a default value of the field type
func (fps *CreateGroupRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *CreateGroupRequest_FieldSubPath) ClearValue(item *CreateGroupRequest) {
	if item != nil {
		switch fps.selector {
		case CreateGroupRequest_FieldPathSelectorGroup:
			fps.subPath.ClearValueRaw(item.Group)
		default:
			panic(fmt.Sprintf("Invalid selector for CreateGroupRequest: %d", fps.selector))
		}
	}
}

func (fps *CreateGroupRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*CreateGroupRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *CreateGroupRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *CreateGroupRequest_FieldSubPath) WithIValue(value interface{}) CreateGroupRequest_FieldPathValue {
	return &CreateGroupRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *CreateGroupRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *CreateGroupRequest_FieldSubPath) WithIArrayOfValues(values interface{}) CreateGroupRequest_FieldPathArrayOfValues {
	return &CreateGroupRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *CreateGroupRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *CreateGroupRequest_FieldSubPath) WithIArrayItemValue(value interface{}) CreateGroupRequest_FieldPathArrayItemValue {
	return &CreateGroupRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *CreateGroupRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// CreateGroupRequest_FieldPathValue allows storing values for CreateGroupRequest fields according to their type
type CreateGroupRequest_FieldPathValue interface {
	CreateGroupRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **CreateGroupRequest)
	CompareWith(*CreateGroupRequest) (cmp int, comparable bool)
}

func ParseCreateGroupRequest_FieldPathValue(pathStr, valueStr string) (CreateGroupRequest_FieldPathValue, error) {
	fp, err := ParseCreateGroupRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateGroupRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(CreateGroupRequest_FieldPathValue), nil
}

func MustParseCreateGroupRequest_FieldPathValue(pathStr, valueStr string) CreateGroupRequest_FieldPathValue {
	fpv, err := ParseCreateGroupRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type CreateGroupRequest_FieldTerminalPathValue struct {
	CreateGroupRequest_FieldTerminalPath
	value interface{}
}

var _ CreateGroupRequest_FieldPathValue = (*CreateGroupRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CreateGroupRequest' as interface{}
func (fpv *CreateGroupRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *CreateGroupRequest_FieldTerminalPathValue) AsParentValue() (*group.ParentReference, bool) {
	res, ok := fpv.value.(*group.ParentReference)
	return res, ok
}
func (fpv *CreateGroupRequest_FieldTerminalPathValue) AsGroupValue() (*group.Group, bool) {
	res, ok := fpv.value.(*group.Group)
	return res, ok
}

// SetTo stores value for selected field for object CreateGroupRequest
func (fpv *CreateGroupRequest_FieldTerminalPathValue) SetTo(target **CreateGroupRequest) {
	if *target == nil {
		*target = new(CreateGroupRequest)
	}
	switch fpv.selector {
	case CreateGroupRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*group.ParentReference)
	case CreateGroupRequest_FieldPathSelectorGroup:
		(*target).Group = fpv.value.(*group.Group)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateGroupRequest: %d", fpv.selector))
	}
}

func (fpv *CreateGroupRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateGroupRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'CreateGroupRequest_FieldTerminalPathValue' with the value under path in 'CreateGroupRequest'.
func (fpv *CreateGroupRequest_FieldTerminalPathValue) CompareWith(source *CreateGroupRequest) (int, bool) {
	switch fpv.selector {
	case CreateGroupRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*group.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case CreateGroupRequest_FieldPathSelectorGroup:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for CreateGroupRequest: %d", fpv.selector))
	}
}

func (fpv *CreateGroupRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*CreateGroupRequest))
}

type CreateGroupRequest_FieldSubPathValue struct {
	CreateGroupRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ CreateGroupRequest_FieldPathValue = (*CreateGroupRequest_FieldSubPathValue)(nil)

func (fpvs *CreateGroupRequest_FieldSubPathValue) AsGroupPathValue() (group.Group_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(group.Group_FieldPathValue)
	return res, ok
}

func (fpvs *CreateGroupRequest_FieldSubPathValue) SetTo(target **CreateGroupRequest) {
	if *target == nil {
		*target = new(CreateGroupRequest)
	}
	switch fpvs.Selector() {
	case CreateGroupRequest_FieldPathSelectorGroup:
		fpvs.subPathValue.(group.Group_FieldPathValue).SetTo(&(*target).Group)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateGroupRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateGroupRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateGroupRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *CreateGroupRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *CreateGroupRequest_FieldSubPathValue) CompareWith(source *CreateGroupRequest) (int, bool) {
	switch fpvs.Selector() {
	case CreateGroupRequest_FieldPathSelectorGroup:
		return fpvs.subPathValue.(group.Group_FieldPathValue).CompareWith(source.GetGroup())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateGroupRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateGroupRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*CreateGroupRequest))
}

// CreateGroupRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for CreateGroupRequest according to their type
// Present only for array (repeated) types.
type CreateGroupRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	CreateGroupRequest_FieldPath
	ContainsValue(*CreateGroupRequest) bool
}

// ParseCreateGroupRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseCreateGroupRequest_FieldPathArrayItemValue(pathStr, valueStr string) (CreateGroupRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseCreateGroupRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateGroupRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(CreateGroupRequest_FieldPathArrayItemValue), nil
}

func MustParseCreateGroupRequest_FieldPathArrayItemValue(pathStr, valueStr string) CreateGroupRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseCreateGroupRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type CreateGroupRequest_FieldTerminalPathArrayItemValue struct {
	CreateGroupRequest_FieldTerminalPath
	value interface{}
}

var _ CreateGroupRequest_FieldPathArrayItemValue = (*CreateGroupRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object CreateGroupRequest as interface{}
func (fpaiv *CreateGroupRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *CreateGroupRequest_FieldTerminalPathArrayItemValue) GetSingle(source *CreateGroupRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *CreateGroupRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*CreateGroupRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateGroupRequest'
func (fpaiv *CreateGroupRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *CreateGroupRequest) bool {
	slice := fpaiv.CreateGroupRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type CreateGroupRequest_FieldSubPathArrayItemValue struct {
	CreateGroupRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *CreateGroupRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *CreateGroupRequest_FieldSubPathArrayItemValue) AsGroupPathItemValue() (group.Group_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(group.Group_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateGroupRequest'
func (fpaivs *CreateGroupRequest_FieldSubPathArrayItemValue) ContainsValue(source *CreateGroupRequest) bool {
	switch fpaivs.Selector() {
	case CreateGroupRequest_FieldPathSelectorGroup:
		return fpaivs.subPathItemValue.(group.Group_FieldPathArrayItemValue).ContainsValue(source.GetGroup())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateGroupRequest: %d", fpaivs.Selector()))
	}
}

// CreateGroupRequest_FieldPathArrayOfValues allows storing slice of values for CreateGroupRequest fields according to their type
type CreateGroupRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	CreateGroupRequest_FieldPath
}

func ParseCreateGroupRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (CreateGroupRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseCreateGroupRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateGroupRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(CreateGroupRequest_FieldPathArrayOfValues), nil
}

func MustParseCreateGroupRequest_FieldPathArrayOfValues(pathStr, valuesStr string) CreateGroupRequest_FieldPathArrayOfValues {
	fpaov, err := ParseCreateGroupRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type CreateGroupRequest_FieldTerminalPathArrayOfValues struct {
	CreateGroupRequest_FieldTerminalPath
	values interface{}
}

var _ CreateGroupRequest_FieldPathArrayOfValues = (*CreateGroupRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *CreateGroupRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case CreateGroupRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*group.ParentReference) {
			values = append(values, v)
		}
	case CreateGroupRequest_FieldPathSelectorGroup:
		for _, v := range fpaov.values.([]*group.Group) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *CreateGroupRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*group.ParentReference, bool) {
	res, ok := fpaov.values.([]*group.ParentReference)
	return res, ok
}
func (fpaov *CreateGroupRequest_FieldTerminalPathArrayOfValues) AsGroupArrayOfValues() ([]*group.Group, bool) {
	res, ok := fpaov.values.([]*group.Group)
	return res, ok
}

type CreateGroupRequest_FieldSubPathArrayOfValues struct {
	CreateGroupRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ CreateGroupRequest_FieldPathArrayOfValues = (*CreateGroupRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *CreateGroupRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *CreateGroupRequest_FieldSubPathArrayOfValues) AsGroupPathArrayOfValues() (group.Group_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(group.Group_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateGroupRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateGroupRequest_FieldPathSelector
	Get(source *UpdateGroupRequest) []interface{}
	GetSingle(source *UpdateGroupRequest) (interface{}, bool)
	ClearValue(item *UpdateGroupRequest)

	// Those methods build corresponding UpdateGroupRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateGroupRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateGroupRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateGroupRequest_FieldPathArrayItemValue
}

type UpdateGroupRequest_FieldPathSelector int32

const (
	UpdateGroupRequest_FieldPathSelectorGroup      UpdateGroupRequest_FieldPathSelector = 0
	UpdateGroupRequest_FieldPathSelectorUpdateMask UpdateGroupRequest_FieldPathSelector = 1
	UpdateGroupRequest_FieldPathSelectorCas        UpdateGroupRequest_FieldPathSelector = 2
)

func (s UpdateGroupRequest_FieldPathSelector) String() string {
	switch s {
	case UpdateGroupRequest_FieldPathSelectorGroup:
		return "group"
	case UpdateGroupRequest_FieldPathSelectorUpdateMask:
		return "update_mask"
	case UpdateGroupRequest_FieldPathSelectorCas:
		return "cas"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateGroupRequest: %d", s))
	}
}

func BuildUpdateGroupRequest_FieldPath(fp gotenobject.RawFieldPath) (UpdateGroupRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateGroupRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "group":
			return &UpdateGroupRequest_FieldTerminalPath{selector: UpdateGroupRequest_FieldPathSelectorGroup}, nil
		case "update_mask", "updateMask", "update-mask":
			return &UpdateGroupRequest_FieldTerminalPath{selector: UpdateGroupRequest_FieldPathSelectorUpdateMask}, nil
		case "cas":
			return &UpdateGroupRequest_FieldTerminalPath{selector: UpdateGroupRequest_FieldPathSelectorCas}, nil
		}
	} else {
		switch fp[0] {
		case "group":
			if subpath, err := group.BuildGroup_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateGroupRequest_FieldSubPath{selector: UpdateGroupRequest_FieldPathSelectorGroup, subPath: subpath}, nil
			}
		case "cas":
			if subpath, err := BuildUpdateGroupRequestCAS_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateGroupRequest_FieldSubPath{selector: UpdateGroupRequest_FieldPathSelectorCas, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateGroupRequest", fp)
}

func ParseUpdateGroupRequest_FieldPath(rawField string) (UpdateGroupRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateGroupRequest_FieldPath(fp)
}

func MustParseUpdateGroupRequest_FieldPath(rawField string) UpdateGroupRequest_FieldPath {
	fp, err := ParseUpdateGroupRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateGroupRequest_FieldTerminalPath struct {
	selector UpdateGroupRequest_FieldPathSelector
}

var _ UpdateGroupRequest_FieldPath = (*UpdateGroupRequest_FieldTerminalPath)(nil)

func (fp *UpdateGroupRequest_FieldTerminalPath) Selector() UpdateGroupRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateGroupRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateGroupRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateGroupRequest
func (fp *UpdateGroupRequest_FieldTerminalPath) Get(source *UpdateGroupRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateGroupRequest_FieldPathSelectorGroup:
			if source.Group != nil {
				values = append(values, source.Group)
			}
		case UpdateGroupRequest_FieldPathSelectorUpdateMask:
			if source.UpdateMask != nil {
				values = append(values, source.UpdateMask)
			}
		case UpdateGroupRequest_FieldPathSelectorCas:
			if source.Cas != nil {
				values = append(values, source.Cas)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateGroupRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateGroupRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateGroupRequest))
}

// GetSingle returns value pointed by specific field of from source UpdateGroupRequest
func (fp *UpdateGroupRequest_FieldTerminalPath) GetSingle(source *UpdateGroupRequest) (interface{}, bool) {
	switch fp.selector {
	case UpdateGroupRequest_FieldPathSelectorGroup:
		res := source.GetGroup()
		return res, res != nil
	case UpdateGroupRequest_FieldPathSelectorUpdateMask:
		res := source.GetUpdateMask()
		return res, res != nil
	case UpdateGroupRequest_FieldPathSelectorCas:
		res := source.GetCas()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateGroupRequest: %d", fp.selector))
	}
}

func (fp *UpdateGroupRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateGroupRequest))
}

// GetDefault returns a default value of the field type
func (fp *UpdateGroupRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateGroupRequest_FieldPathSelectorGroup:
		return (*group.Group)(nil)
	case UpdateGroupRequest_FieldPathSelectorUpdateMask:
		return (*group.Group_FieldMask)(nil)
	case UpdateGroupRequest_FieldPathSelectorCas:
		return (*UpdateGroupRequest_CAS)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateGroupRequest: %d", fp.selector))
	}
}

func (fp *UpdateGroupRequest_FieldTerminalPath) ClearValue(item *UpdateGroupRequest) {
	if item != nil {
		switch fp.selector {
		case UpdateGroupRequest_FieldPathSelectorGroup:
			item.Group = nil
		case UpdateGroupRequest_FieldPathSelectorUpdateMask:
			item.UpdateMask = nil
		case UpdateGroupRequest_FieldPathSelectorCas:
			item.Cas = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateGroupRequest: %d", fp.selector))
		}
	}
}

func (fp *UpdateGroupRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateGroupRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateGroupRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateGroupRequest_FieldPathSelectorUpdateMask
}

func (fp *UpdateGroupRequest_FieldTerminalPath) WithIValue(value interface{}) UpdateGroupRequest_FieldPathValue {
	switch fp.selector {
	case UpdateGroupRequest_FieldPathSelectorGroup:
		return &UpdateGroupRequest_FieldTerminalPathValue{UpdateGroupRequest_FieldTerminalPath: *fp, value: value.(*group.Group)}
	case UpdateGroupRequest_FieldPathSelectorUpdateMask:
		return &UpdateGroupRequest_FieldTerminalPathValue{UpdateGroupRequest_FieldTerminalPath: *fp, value: value.(*group.Group_FieldMask)}
	case UpdateGroupRequest_FieldPathSelectorCas:
		return &UpdateGroupRequest_FieldTerminalPathValue{UpdateGroupRequest_FieldTerminalPath: *fp, value: value.(*UpdateGroupRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateGroupRequest: %d", fp.selector))
	}
}

func (fp *UpdateGroupRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateGroupRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateGroupRequest_FieldPathArrayOfValues {
	fpaov := &UpdateGroupRequest_FieldTerminalPathArrayOfValues{UpdateGroupRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateGroupRequest_FieldPathSelectorGroup:
		return &UpdateGroupRequest_FieldTerminalPathArrayOfValues{UpdateGroupRequest_FieldTerminalPath: *fp, values: values.([]*group.Group)}
	case UpdateGroupRequest_FieldPathSelectorUpdateMask:
		return &UpdateGroupRequest_FieldTerminalPathArrayOfValues{UpdateGroupRequest_FieldTerminalPath: *fp, values: values.([]*group.Group_FieldMask)}
	case UpdateGroupRequest_FieldPathSelectorCas:
		return &UpdateGroupRequest_FieldTerminalPathArrayOfValues{UpdateGroupRequest_FieldTerminalPath: *fp, values: values.([]*UpdateGroupRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateGroupRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateGroupRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateGroupRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateGroupRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateGroupRequest: %d", fp.selector))
	}
}

func (fp *UpdateGroupRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateGroupRequest_FieldSubPath struct {
	selector UpdateGroupRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateGroupRequest_FieldPath = (*UpdateGroupRequest_FieldSubPath)(nil)

func (fps *UpdateGroupRequest_FieldSubPath) Selector() UpdateGroupRequest_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateGroupRequest_FieldSubPath) AsGroupSubPath() (group.Group_FieldPath, bool) {
	res, ok := fps.subPath.(group.Group_FieldPath)
	return res, ok
}
func (fps *UpdateGroupRequest_FieldSubPath) AsCasSubPath() (UpdateGroupRequestCAS_FieldPath, bool) {
	res, ok := fps.subPath.(UpdateGroupRequestCAS_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateGroupRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateGroupRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateGroupRequest
func (fps *UpdateGroupRequest_FieldSubPath) Get(source *UpdateGroupRequest) (values []interface{}) {
	if asGroupFieldPath, ok := fps.AsGroupSubPath(); ok {
		values = append(values, asGroupFieldPath.Get(source.GetGroup())...)
	} else if asCASFieldPath, ok := fps.AsCasSubPath(); ok {
		values = append(values, asCASFieldPath.Get(source.GetCas())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for UpdateGroupRequest: %d", fps.selector))
	}
	return
}

func (fps *UpdateGroupRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateGroupRequest))
}

// GetSingle returns value of selected field from source UpdateGroupRequest
func (fps *UpdateGroupRequest_FieldSubPath) GetSingle(source *UpdateGroupRequest) (interface{}, bool) {
	switch fps.selector {
	case UpdateGroupRequest_FieldPathSelectorGroup:
		if source.GetGroup() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetGroup())
	case UpdateGroupRequest_FieldPathSelectorCas:
		if source.GetCas() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateGroupRequest: %d", fps.selector))
	}
}

func (fps *UpdateGroupRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateGroupRequest))
}

// GetDefault returns a default value of the field type
func (fps *UpdateGroupRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateGroupRequest_FieldSubPath) ClearValue(item *UpdateGroupRequest) {
	if item != nil {
		switch fps.selector {
		case UpdateGroupRequest_FieldPathSelectorGroup:
			fps.subPath.ClearValueRaw(item.Group)
		case UpdateGroupRequest_FieldPathSelectorCas:
			fps.subPath.ClearValueRaw(item.Cas)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateGroupRequest: %d", fps.selector))
		}
	}
}

func (fps *UpdateGroupRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateGroupRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateGroupRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateGroupRequest_FieldSubPath) WithIValue(value interface{}) UpdateGroupRequest_FieldPathValue {
	return &UpdateGroupRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateGroupRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateGroupRequest_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateGroupRequest_FieldPathArrayOfValues {
	return &UpdateGroupRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateGroupRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateGroupRequest_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateGroupRequest_FieldPathArrayItemValue {
	return &UpdateGroupRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateGroupRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateGroupRequest_FieldPathValue allows storing values for UpdateGroupRequest fields according to their type
type UpdateGroupRequest_FieldPathValue interface {
	UpdateGroupRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateGroupRequest)
	CompareWith(*UpdateGroupRequest) (cmp int, comparable bool)
}

func ParseUpdateGroupRequest_FieldPathValue(pathStr, valueStr string) (UpdateGroupRequest_FieldPathValue, error) {
	fp, err := ParseUpdateGroupRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateGroupRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateGroupRequest_FieldPathValue), nil
}

func MustParseUpdateGroupRequest_FieldPathValue(pathStr, valueStr string) UpdateGroupRequest_FieldPathValue {
	fpv, err := ParseUpdateGroupRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateGroupRequest_FieldTerminalPathValue struct {
	UpdateGroupRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateGroupRequest_FieldPathValue = (*UpdateGroupRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'UpdateGroupRequest' as interface{}
func (fpv *UpdateGroupRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateGroupRequest_FieldTerminalPathValue) AsGroupValue() (*group.Group, bool) {
	res, ok := fpv.value.(*group.Group)
	return res, ok
}
func (fpv *UpdateGroupRequest_FieldTerminalPathValue) AsUpdateMaskValue() (*group.Group_FieldMask, bool) {
	res, ok := fpv.value.(*group.Group_FieldMask)
	return res, ok
}
func (fpv *UpdateGroupRequest_FieldTerminalPathValue) AsCasValue() (*UpdateGroupRequest_CAS, bool) {
	res, ok := fpv.value.(*UpdateGroupRequest_CAS)
	return res, ok
}

// SetTo stores value for selected field for object UpdateGroupRequest
func (fpv *UpdateGroupRequest_FieldTerminalPathValue) SetTo(target **UpdateGroupRequest) {
	if *target == nil {
		*target = new(UpdateGroupRequest)
	}
	switch fpv.selector {
	case UpdateGroupRequest_FieldPathSelectorGroup:
		(*target).Group = fpv.value.(*group.Group)
	case UpdateGroupRequest_FieldPathSelectorUpdateMask:
		(*target).UpdateMask = fpv.value.(*group.Group_FieldMask)
	case UpdateGroupRequest_FieldPathSelectorCas:
		(*target).Cas = fpv.value.(*UpdateGroupRequest_CAS)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateGroupRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateGroupRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateGroupRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateGroupRequest_FieldTerminalPathValue' with the value under path in 'UpdateGroupRequest'.
func (fpv *UpdateGroupRequest_FieldTerminalPathValue) CompareWith(source *UpdateGroupRequest) (int, bool) {
	switch fpv.selector {
	case UpdateGroupRequest_FieldPathSelectorGroup:
		return 0, false
	case UpdateGroupRequest_FieldPathSelectorUpdateMask:
		return 0, false
	case UpdateGroupRequest_FieldPathSelectorCas:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateGroupRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateGroupRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateGroupRequest))
}

type UpdateGroupRequest_FieldSubPathValue struct {
	UpdateGroupRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateGroupRequest_FieldPathValue = (*UpdateGroupRequest_FieldSubPathValue)(nil)

func (fpvs *UpdateGroupRequest_FieldSubPathValue) AsGroupPathValue() (group.Group_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(group.Group_FieldPathValue)
	return res, ok
}
func (fpvs *UpdateGroupRequest_FieldSubPathValue) AsCasPathValue() (UpdateGroupRequestCAS_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(UpdateGroupRequestCAS_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateGroupRequest_FieldSubPathValue) SetTo(target **UpdateGroupRequest) {
	if *target == nil {
		*target = new(UpdateGroupRequest)
	}
	switch fpvs.Selector() {
	case UpdateGroupRequest_FieldPathSelectorGroup:
		fpvs.subPathValue.(group.Group_FieldPathValue).SetTo(&(*target).Group)
	case UpdateGroupRequest_FieldPathSelectorCas:
		fpvs.subPathValue.(UpdateGroupRequestCAS_FieldPathValue).SetTo(&(*target).Cas)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateGroupRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateGroupRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateGroupRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateGroupRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateGroupRequest_FieldSubPathValue) CompareWith(source *UpdateGroupRequest) (int, bool) {
	switch fpvs.Selector() {
	case UpdateGroupRequest_FieldPathSelectorGroup:
		return fpvs.subPathValue.(group.Group_FieldPathValue).CompareWith(source.GetGroup())
	case UpdateGroupRequest_FieldPathSelectorCas:
		return fpvs.subPathValue.(UpdateGroupRequestCAS_FieldPathValue).CompareWith(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateGroupRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateGroupRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateGroupRequest))
}

// UpdateGroupRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for UpdateGroupRequest according to their type
// Present only for array (repeated) types.
type UpdateGroupRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateGroupRequest_FieldPath
	ContainsValue(*UpdateGroupRequest) bool
}

// ParseUpdateGroupRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateGroupRequest_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateGroupRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateGroupRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateGroupRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateGroupRequest_FieldPathArrayItemValue), nil
}

func MustParseUpdateGroupRequest_FieldPathArrayItemValue(pathStr, valueStr string) UpdateGroupRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateGroupRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateGroupRequest_FieldTerminalPathArrayItemValue struct {
	UpdateGroupRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateGroupRequest_FieldPathArrayItemValue = (*UpdateGroupRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateGroupRequest as interface{}
func (fpaiv *UpdateGroupRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateGroupRequest_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateGroupRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateGroupRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateGroupRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateGroupRequest'
func (fpaiv *UpdateGroupRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateGroupRequest) bool {
	slice := fpaiv.UpdateGroupRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateGroupRequest_FieldSubPathArrayItemValue struct {
	UpdateGroupRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateGroupRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateGroupRequest_FieldSubPathArrayItemValue) AsGroupPathItemValue() (group.Group_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(group.Group_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *UpdateGroupRequest_FieldSubPathArrayItemValue) AsCasPathItemValue() (UpdateGroupRequestCAS_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(UpdateGroupRequestCAS_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateGroupRequest'
func (fpaivs *UpdateGroupRequest_FieldSubPathArrayItemValue) ContainsValue(source *UpdateGroupRequest) bool {
	switch fpaivs.Selector() {
	case UpdateGroupRequest_FieldPathSelectorGroup:
		return fpaivs.subPathItemValue.(group.Group_FieldPathArrayItemValue).ContainsValue(source.GetGroup())
	case UpdateGroupRequest_FieldPathSelectorCas:
		return fpaivs.subPathItemValue.(UpdateGroupRequestCAS_FieldPathArrayItemValue).ContainsValue(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateGroupRequest: %d", fpaivs.Selector()))
	}
}

// UpdateGroupRequest_FieldPathArrayOfValues allows storing slice of values for UpdateGroupRequest fields according to their type
type UpdateGroupRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateGroupRequest_FieldPath
}

func ParseUpdateGroupRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateGroupRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateGroupRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateGroupRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateGroupRequest_FieldPathArrayOfValues), nil
}

func MustParseUpdateGroupRequest_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateGroupRequest_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateGroupRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateGroupRequest_FieldTerminalPathArrayOfValues struct {
	UpdateGroupRequest_FieldTerminalPath
	values interface{}
}

var _ UpdateGroupRequest_FieldPathArrayOfValues = (*UpdateGroupRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateGroupRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateGroupRequest_FieldPathSelectorGroup:
		for _, v := range fpaov.values.([]*group.Group) {
			values = append(values, v)
		}
	case UpdateGroupRequest_FieldPathSelectorUpdateMask:
		for _, v := range fpaov.values.([]*group.Group_FieldMask) {
			values = append(values, v)
		}
	case UpdateGroupRequest_FieldPathSelectorCas:
		for _, v := range fpaov.values.([]*UpdateGroupRequest_CAS) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateGroupRequest_FieldTerminalPathArrayOfValues) AsGroupArrayOfValues() ([]*group.Group, bool) {
	res, ok := fpaov.values.([]*group.Group)
	return res, ok
}
func (fpaov *UpdateGroupRequest_FieldTerminalPathArrayOfValues) AsUpdateMaskArrayOfValues() ([]*group.Group_FieldMask, bool) {
	res, ok := fpaov.values.([]*group.Group_FieldMask)
	return res, ok
}
func (fpaov *UpdateGroupRequest_FieldTerminalPathArrayOfValues) AsCasArrayOfValues() ([]*UpdateGroupRequest_CAS, bool) {
	res, ok := fpaov.values.([]*UpdateGroupRequest_CAS)
	return res, ok
}

type UpdateGroupRequest_FieldSubPathArrayOfValues struct {
	UpdateGroupRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateGroupRequest_FieldPathArrayOfValues = (*UpdateGroupRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateGroupRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateGroupRequest_FieldSubPathArrayOfValues) AsGroupPathArrayOfValues() (group.Group_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(group.Group_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *UpdateGroupRequest_FieldSubPathArrayOfValues) AsCasPathArrayOfValues() (UpdateGroupRequestCAS_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(UpdateGroupRequestCAS_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateGroupRequestCAS_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateGroupRequestCAS_FieldPathSelector
	Get(source *UpdateGroupRequest_CAS) []interface{}
	GetSingle(source *UpdateGroupRequest_CAS) (interface{}, bool)
	ClearValue(item *UpdateGroupRequest_CAS)

	// Those methods build corresponding UpdateGroupRequestCAS_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateGroupRequestCAS_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateGroupRequestCAS_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateGroupRequestCAS_FieldPathArrayItemValue
}

type UpdateGroupRequestCAS_FieldPathSelector int32

const (
	UpdateGroupRequestCAS_FieldPathSelectorConditionalState UpdateGroupRequestCAS_FieldPathSelector = 0
	UpdateGroupRequestCAS_FieldPathSelectorFieldMask        UpdateGroupRequestCAS_FieldPathSelector = 1
)

func (s UpdateGroupRequestCAS_FieldPathSelector) String() string {
	switch s {
	case UpdateGroupRequestCAS_FieldPathSelectorConditionalState:
		return "conditional_state"
	case UpdateGroupRequestCAS_FieldPathSelectorFieldMask:
		return "field_mask"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateGroupRequest_CAS: %d", s))
	}
}

func BuildUpdateGroupRequestCAS_FieldPath(fp gotenobject.RawFieldPath) (UpdateGroupRequestCAS_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateGroupRequest_CAS")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			return &UpdateGroupRequestCAS_FieldTerminalPath{selector: UpdateGroupRequestCAS_FieldPathSelectorConditionalState}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &UpdateGroupRequestCAS_FieldTerminalPath{selector: UpdateGroupRequestCAS_FieldPathSelectorFieldMask}, nil
		}
	} else {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			if subpath, err := group.BuildGroup_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateGroupRequestCAS_FieldSubPath{selector: UpdateGroupRequestCAS_FieldPathSelectorConditionalState, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateGroupRequest_CAS", fp)
}

func ParseUpdateGroupRequestCAS_FieldPath(rawField string) (UpdateGroupRequestCAS_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateGroupRequestCAS_FieldPath(fp)
}

func MustParseUpdateGroupRequestCAS_FieldPath(rawField string) UpdateGroupRequestCAS_FieldPath {
	fp, err := ParseUpdateGroupRequestCAS_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateGroupRequestCAS_FieldTerminalPath struct {
	selector UpdateGroupRequestCAS_FieldPathSelector
}

var _ UpdateGroupRequestCAS_FieldPath = (*UpdateGroupRequestCAS_FieldTerminalPath)(nil)

func (fp *UpdateGroupRequestCAS_FieldTerminalPath) Selector() UpdateGroupRequestCAS_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateGroupRequestCAS_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateGroupRequestCAS_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateGroupRequest_CAS
func (fp *UpdateGroupRequestCAS_FieldTerminalPath) Get(source *UpdateGroupRequest_CAS) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateGroupRequestCAS_FieldPathSelectorConditionalState:
			if source.ConditionalState != nil {
				values = append(values, source.ConditionalState)
			}
		case UpdateGroupRequestCAS_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateGroupRequest_CAS: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateGroupRequestCAS_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateGroupRequest_CAS))
}

// GetSingle returns value pointed by specific field of from source UpdateGroupRequest_CAS
func (fp *UpdateGroupRequestCAS_FieldTerminalPath) GetSingle(source *UpdateGroupRequest_CAS) (interface{}, bool) {
	switch fp.selector {
	case UpdateGroupRequestCAS_FieldPathSelectorConditionalState:
		res := source.GetConditionalState()
		return res, res != nil
	case UpdateGroupRequestCAS_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateGroupRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateGroupRequestCAS_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateGroupRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fp *UpdateGroupRequestCAS_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateGroupRequestCAS_FieldPathSelectorConditionalState:
		return (*group.Group)(nil)
	case UpdateGroupRequestCAS_FieldPathSelectorFieldMask:
		return (*group.Group_FieldMask)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateGroupRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateGroupRequestCAS_FieldTerminalPath) ClearValue(item *UpdateGroupRequest_CAS) {
	if item != nil {
		switch fp.selector {
		case UpdateGroupRequestCAS_FieldPathSelectorConditionalState:
			item.ConditionalState = nil
		case UpdateGroupRequestCAS_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateGroupRequest_CAS: %d", fp.selector))
		}
	}
}

func (fp *UpdateGroupRequestCAS_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateGroupRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateGroupRequestCAS_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateGroupRequestCAS_FieldPathSelectorFieldMask
}

func (fp *UpdateGroupRequestCAS_FieldTerminalPath) WithIValue(value interface{}) UpdateGroupRequestCAS_FieldPathValue {
	switch fp.selector {
	case UpdateGroupRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateGroupRequestCAS_FieldTerminalPathValue{UpdateGroupRequestCAS_FieldTerminalPath: *fp, value: value.(*group.Group)}
	case UpdateGroupRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateGroupRequestCAS_FieldTerminalPathValue{UpdateGroupRequestCAS_FieldTerminalPath: *fp, value: value.(*group.Group_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateGroupRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateGroupRequestCAS_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateGroupRequestCAS_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateGroupRequestCAS_FieldPathArrayOfValues {
	fpaov := &UpdateGroupRequestCAS_FieldTerminalPathArrayOfValues{UpdateGroupRequestCAS_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateGroupRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateGroupRequestCAS_FieldTerminalPathArrayOfValues{UpdateGroupRequestCAS_FieldTerminalPath: *fp, values: values.([]*group.Group)}
	case UpdateGroupRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateGroupRequestCAS_FieldTerminalPathArrayOfValues{UpdateGroupRequestCAS_FieldTerminalPath: *fp, values: values.([]*group.Group_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateGroupRequest_CAS: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateGroupRequestCAS_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateGroupRequestCAS_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateGroupRequestCAS_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateGroupRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateGroupRequestCAS_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateGroupRequestCAS_FieldSubPath struct {
	selector UpdateGroupRequestCAS_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateGroupRequestCAS_FieldPath = (*UpdateGroupRequestCAS_FieldSubPath)(nil)

func (fps *UpdateGroupRequestCAS_FieldSubPath) Selector() UpdateGroupRequestCAS_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateGroupRequestCAS_FieldSubPath) AsConditionalStateSubPath() (group.Group_FieldPath, bool) {
	res, ok := fps.subPath.(group.Group_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateGroupRequestCAS_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateGroupRequestCAS_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateGroupRequest_CAS
func (fps *UpdateGroupRequestCAS_FieldSubPath) Get(source *UpdateGroupRequest_CAS) (values []interface{}) {
	if asGroupFieldPath, ok := fps.AsConditionalStateSubPath(); ok {
		values = append(values, asGroupFieldPath.Get(source.GetConditionalState())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for UpdateGroupRequest_CAS: %d", fps.selector))
	}
	return
}

func (fps *UpdateGroupRequestCAS_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateGroupRequest_CAS))
}

// GetSingle returns value of selected field from source UpdateGroupRequest_CAS
func (fps *UpdateGroupRequestCAS_FieldSubPath) GetSingle(source *UpdateGroupRequest_CAS) (interface{}, bool) {
	switch fps.selector {
	case UpdateGroupRequestCAS_FieldPathSelectorConditionalState:
		if source.GetConditionalState() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateGroupRequest_CAS: %d", fps.selector))
	}
}

func (fps *UpdateGroupRequestCAS_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateGroupRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fps *UpdateGroupRequestCAS_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateGroupRequestCAS_FieldSubPath) ClearValue(item *UpdateGroupRequest_CAS) {
	if item != nil {
		switch fps.selector {
		case UpdateGroupRequestCAS_FieldPathSelectorConditionalState:
			fps.subPath.ClearValueRaw(item.ConditionalState)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateGroupRequest_CAS: %d", fps.selector))
		}
	}
}

func (fps *UpdateGroupRequestCAS_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateGroupRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateGroupRequestCAS_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateGroupRequestCAS_FieldSubPath) WithIValue(value interface{}) UpdateGroupRequestCAS_FieldPathValue {
	return &UpdateGroupRequestCAS_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateGroupRequestCAS_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateGroupRequestCAS_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateGroupRequestCAS_FieldPathArrayOfValues {
	return &UpdateGroupRequestCAS_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateGroupRequestCAS_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateGroupRequestCAS_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateGroupRequestCAS_FieldPathArrayItemValue {
	return &UpdateGroupRequestCAS_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateGroupRequestCAS_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateGroupRequestCAS_FieldPathValue allows storing values for CAS fields according to their type
type UpdateGroupRequestCAS_FieldPathValue interface {
	UpdateGroupRequestCAS_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateGroupRequest_CAS)
	CompareWith(*UpdateGroupRequest_CAS) (cmp int, comparable bool)
}

func ParseUpdateGroupRequestCAS_FieldPathValue(pathStr, valueStr string) (UpdateGroupRequestCAS_FieldPathValue, error) {
	fp, err := ParseUpdateGroupRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateGroupRequestCAS_FieldPathValue), nil
}

func MustParseUpdateGroupRequestCAS_FieldPathValue(pathStr, valueStr string) UpdateGroupRequestCAS_FieldPathValue {
	fpv, err := ParseUpdateGroupRequestCAS_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateGroupRequestCAS_FieldTerminalPathValue struct {
	UpdateGroupRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateGroupRequestCAS_FieldPathValue = (*UpdateGroupRequestCAS_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CAS' as interface{}
func (fpv *UpdateGroupRequestCAS_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateGroupRequestCAS_FieldTerminalPathValue) AsConditionalStateValue() (*group.Group, bool) {
	res, ok := fpv.value.(*group.Group)
	return res, ok
}
func (fpv *UpdateGroupRequestCAS_FieldTerminalPathValue) AsFieldMaskValue() (*group.Group_FieldMask, bool) {
	res, ok := fpv.value.(*group.Group_FieldMask)
	return res, ok
}

// SetTo stores value for selected field for object CAS
func (fpv *UpdateGroupRequestCAS_FieldTerminalPathValue) SetTo(target **UpdateGroupRequest_CAS) {
	if *target == nil {
		*target = new(UpdateGroupRequest_CAS)
	}
	switch fpv.selector {
	case UpdateGroupRequestCAS_FieldPathSelectorConditionalState:
		(*target).ConditionalState = fpv.value.(*group.Group)
	case UpdateGroupRequestCAS_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*group.Group_FieldMask)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateGroupRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateGroupRequestCAS_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateGroupRequest_CAS)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateGroupRequestCAS_FieldTerminalPathValue' with the value under path in 'UpdateGroupRequest_CAS'.
func (fpv *UpdateGroupRequestCAS_FieldTerminalPathValue) CompareWith(source *UpdateGroupRequest_CAS) (int, bool) {
	switch fpv.selector {
	case UpdateGroupRequestCAS_FieldPathSelectorConditionalState:
		return 0, false
	case UpdateGroupRequestCAS_FieldPathSelectorFieldMask:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateGroupRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateGroupRequestCAS_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateGroupRequest_CAS))
}

type UpdateGroupRequestCAS_FieldSubPathValue struct {
	UpdateGroupRequestCAS_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateGroupRequestCAS_FieldPathValue = (*UpdateGroupRequestCAS_FieldSubPathValue)(nil)

func (fpvs *UpdateGroupRequestCAS_FieldSubPathValue) AsConditionalStatePathValue() (group.Group_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(group.Group_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateGroupRequestCAS_FieldSubPathValue) SetTo(target **UpdateGroupRequest_CAS) {
	if *target == nil {
		*target = new(UpdateGroupRequest_CAS)
	}
	switch fpvs.Selector() {
	case UpdateGroupRequestCAS_FieldPathSelectorConditionalState:
		fpvs.subPathValue.(group.Group_FieldPathValue).SetTo(&(*target).ConditionalState)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateGroupRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateGroupRequestCAS_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateGroupRequest_CAS)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateGroupRequestCAS_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateGroupRequestCAS_FieldSubPathValue) CompareWith(source *UpdateGroupRequest_CAS) (int, bool) {
	switch fpvs.Selector() {
	case UpdateGroupRequestCAS_FieldPathSelectorConditionalState:
		return fpvs.subPathValue.(group.Group_FieldPathValue).CompareWith(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateGroupRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateGroupRequestCAS_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateGroupRequest_CAS))
}

// UpdateGroupRequestCAS_FieldPathArrayItemValue allows storing single item in Path-specific values for CAS according to their type
// Present only for array (repeated) types.
type UpdateGroupRequestCAS_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateGroupRequestCAS_FieldPath
	ContainsValue(*UpdateGroupRequest_CAS) bool
}

// ParseUpdateGroupRequestCAS_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateGroupRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateGroupRequestCAS_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateGroupRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateGroupRequestCAS_FieldPathArrayItemValue), nil
}

func MustParseUpdateGroupRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) UpdateGroupRequestCAS_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateGroupRequestCAS_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateGroupRequestCAS_FieldTerminalPathArrayItemValue struct {
	UpdateGroupRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateGroupRequestCAS_FieldPathArrayItemValue = (*UpdateGroupRequestCAS_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateGroupRequest_CAS as interface{}
func (fpaiv *UpdateGroupRequestCAS_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateGroupRequestCAS_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateGroupRequest_CAS) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateGroupRequestCAS_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateGroupRequest_CAS))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaiv *UpdateGroupRequestCAS_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateGroupRequest_CAS) bool {
	slice := fpaiv.UpdateGroupRequestCAS_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateGroupRequestCAS_FieldSubPathArrayItemValue struct {
	UpdateGroupRequestCAS_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateGroupRequestCAS_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateGroupRequestCAS_FieldSubPathArrayItemValue) AsConditionalStatePathItemValue() (group.Group_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(group.Group_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaivs *UpdateGroupRequestCAS_FieldSubPathArrayItemValue) ContainsValue(source *UpdateGroupRequest_CAS) bool {
	switch fpaivs.Selector() {
	case UpdateGroupRequestCAS_FieldPathSelectorConditionalState:
		return fpaivs.subPathItemValue.(group.Group_FieldPathArrayItemValue).ContainsValue(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateGroupRequest_CAS: %d", fpaivs.Selector()))
	}
}

// UpdateGroupRequestCAS_FieldPathArrayOfValues allows storing slice of values for CAS fields according to their type
type UpdateGroupRequestCAS_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateGroupRequestCAS_FieldPath
}

func ParseUpdateGroupRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateGroupRequestCAS_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateGroupRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateGroupRequestCAS_FieldPathArrayOfValues), nil
}

func MustParseUpdateGroupRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateGroupRequestCAS_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateGroupRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateGroupRequestCAS_FieldTerminalPathArrayOfValues struct {
	UpdateGroupRequestCAS_FieldTerminalPath
	values interface{}
}

var _ UpdateGroupRequestCAS_FieldPathArrayOfValues = (*UpdateGroupRequestCAS_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateGroupRequestCAS_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateGroupRequestCAS_FieldPathSelectorConditionalState:
		for _, v := range fpaov.values.([]*group.Group) {
			values = append(values, v)
		}
	case UpdateGroupRequestCAS_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*group.Group_FieldMask) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateGroupRequestCAS_FieldTerminalPathArrayOfValues) AsConditionalStateArrayOfValues() ([]*group.Group, bool) {
	res, ok := fpaov.values.([]*group.Group)
	return res, ok
}
func (fpaov *UpdateGroupRequestCAS_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*group.Group_FieldMask, bool) {
	res, ok := fpaov.values.([]*group.Group_FieldMask)
	return res, ok
}

type UpdateGroupRequestCAS_FieldSubPathArrayOfValues struct {
	UpdateGroupRequestCAS_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateGroupRequestCAS_FieldPathArrayOfValues = (*UpdateGroupRequestCAS_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateGroupRequestCAS_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateGroupRequestCAS_FieldSubPathArrayOfValues) AsConditionalStatePathArrayOfValues() (group.Group_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(group.Group_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeleteGroupRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeleteGroupRequest_FieldPathSelector
	Get(source *DeleteGroupRequest) []interface{}
	GetSingle(source *DeleteGroupRequest) (interface{}, bool)
	ClearValue(item *DeleteGroupRequest)

	// Those methods build corresponding DeleteGroupRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeleteGroupRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) DeleteGroupRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeleteGroupRequest_FieldPathArrayItemValue
}

type DeleteGroupRequest_FieldPathSelector int32

const (
	DeleteGroupRequest_FieldPathSelectorName DeleteGroupRequest_FieldPathSelector = 0
)

func (s DeleteGroupRequest_FieldPathSelector) String() string {
	switch s {
	case DeleteGroupRequest_FieldPathSelectorName:
		return "name"
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteGroupRequest: %d", s))
	}
}

func BuildDeleteGroupRequest_FieldPath(fp gotenobject.RawFieldPath) (DeleteGroupRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object DeleteGroupRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &DeleteGroupRequest_FieldTerminalPath{selector: DeleteGroupRequest_FieldPathSelectorName}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object DeleteGroupRequest", fp)
}

func ParseDeleteGroupRequest_FieldPath(rawField string) (DeleteGroupRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeleteGroupRequest_FieldPath(fp)
}

func MustParseDeleteGroupRequest_FieldPath(rawField string) DeleteGroupRequest_FieldPath {
	fp, err := ParseDeleteGroupRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeleteGroupRequest_FieldTerminalPath struct {
	selector DeleteGroupRequest_FieldPathSelector
}

var _ DeleteGroupRequest_FieldPath = (*DeleteGroupRequest_FieldTerminalPath)(nil)

func (fp *DeleteGroupRequest_FieldTerminalPath) Selector() DeleteGroupRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeleteGroupRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeleteGroupRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source DeleteGroupRequest
func (fp *DeleteGroupRequest_FieldTerminalPath) Get(source *DeleteGroupRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeleteGroupRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteGroupRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *DeleteGroupRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*DeleteGroupRequest))
}

// GetSingle returns value pointed by specific field of from source DeleteGroupRequest
func (fp *DeleteGroupRequest_FieldTerminalPath) GetSingle(source *DeleteGroupRequest) (interface{}, bool) {
	switch fp.selector {
	case DeleteGroupRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteGroupRequest: %d", fp.selector))
	}
}

func (fp *DeleteGroupRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*DeleteGroupRequest))
}

// GetDefault returns a default value of the field type
func (fp *DeleteGroupRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeleteGroupRequest_FieldPathSelectorName:
		return (*group.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteGroupRequest: %d", fp.selector))
	}
}

func (fp *DeleteGroupRequest_FieldTerminalPath) ClearValue(item *DeleteGroupRequest) {
	if item != nil {
		switch fp.selector {
		case DeleteGroupRequest_FieldPathSelectorName:
			item.Name = nil
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteGroupRequest: %d", fp.selector))
		}
	}
}

func (fp *DeleteGroupRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*DeleteGroupRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeleteGroupRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeleteGroupRequest_FieldPathSelectorName
}

func (fp *DeleteGroupRequest_FieldTerminalPath) WithIValue(value interface{}) DeleteGroupRequest_FieldPathValue {
	switch fp.selector {
	case DeleteGroupRequest_FieldPathSelectorName:
		return &DeleteGroupRequest_FieldTerminalPathValue{DeleteGroupRequest_FieldTerminalPath: *fp, value: value.(*group.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteGroupRequest: %d", fp.selector))
	}
}

func (fp *DeleteGroupRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeleteGroupRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeleteGroupRequest_FieldPathArrayOfValues {
	fpaov := &DeleteGroupRequest_FieldTerminalPathArrayOfValues{DeleteGroupRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeleteGroupRequest_FieldPathSelectorName:
		return &DeleteGroupRequest_FieldTerminalPathArrayOfValues{DeleteGroupRequest_FieldTerminalPath: *fp, values: values.([]*group.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteGroupRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeleteGroupRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeleteGroupRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeleteGroupRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteGroupRequest: %d", fp.selector))
	}
}

func (fp *DeleteGroupRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeleteGroupRequest_FieldPathValue allows storing values for DeleteGroupRequest fields according to their type
type DeleteGroupRequest_FieldPathValue interface {
	DeleteGroupRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **DeleteGroupRequest)
	CompareWith(*DeleteGroupRequest) (cmp int, comparable bool)
}

func ParseDeleteGroupRequest_FieldPathValue(pathStr, valueStr string) (DeleteGroupRequest_FieldPathValue, error) {
	fp, err := ParseDeleteGroupRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteGroupRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeleteGroupRequest_FieldPathValue), nil
}

func MustParseDeleteGroupRequest_FieldPathValue(pathStr, valueStr string) DeleteGroupRequest_FieldPathValue {
	fpv, err := ParseDeleteGroupRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeleteGroupRequest_FieldTerminalPathValue struct {
	DeleteGroupRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteGroupRequest_FieldPathValue = (*DeleteGroupRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'DeleteGroupRequest' as interface{}
func (fpv *DeleteGroupRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeleteGroupRequest_FieldTerminalPathValue) AsNameValue() (*group.Reference, bool) {
	res, ok := fpv.value.(*group.Reference)
	return res, ok
}

// SetTo stores value for selected field for object DeleteGroupRequest
func (fpv *DeleteGroupRequest_FieldTerminalPathValue) SetTo(target **DeleteGroupRequest) {
	if *target == nil {
		*target = new(DeleteGroupRequest)
	}
	switch fpv.selector {
	case DeleteGroupRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*group.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteGroupRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteGroupRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*DeleteGroupRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeleteGroupRequest_FieldTerminalPathValue' with the value under path in 'DeleteGroupRequest'.
func (fpv *DeleteGroupRequest_FieldTerminalPathValue) CompareWith(source *DeleteGroupRequest) (int, bool) {
	switch fpv.selector {
	case DeleteGroupRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*group.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteGroupRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteGroupRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*DeleteGroupRequest))
}

// DeleteGroupRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for DeleteGroupRequest according to their type
// Present only for array (repeated) types.
type DeleteGroupRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeleteGroupRequest_FieldPath
	ContainsValue(*DeleteGroupRequest) bool
}

// ParseDeleteGroupRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeleteGroupRequest_FieldPathArrayItemValue(pathStr, valueStr string) (DeleteGroupRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseDeleteGroupRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteGroupRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeleteGroupRequest_FieldPathArrayItemValue), nil
}

func MustParseDeleteGroupRequest_FieldPathArrayItemValue(pathStr, valueStr string) DeleteGroupRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseDeleteGroupRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeleteGroupRequest_FieldTerminalPathArrayItemValue struct {
	DeleteGroupRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteGroupRequest_FieldPathArrayItemValue = (*DeleteGroupRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object DeleteGroupRequest as interface{}
func (fpaiv *DeleteGroupRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeleteGroupRequest_FieldTerminalPathArrayItemValue) GetSingle(source *DeleteGroupRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeleteGroupRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*DeleteGroupRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'DeleteGroupRequest'
func (fpaiv *DeleteGroupRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *DeleteGroupRequest) bool {
	slice := fpaiv.DeleteGroupRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeleteGroupRequest_FieldPathArrayOfValues allows storing slice of values for DeleteGroupRequest fields according to their type
type DeleteGroupRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeleteGroupRequest_FieldPath
}

func ParseDeleteGroupRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (DeleteGroupRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseDeleteGroupRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteGroupRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeleteGroupRequest_FieldPathArrayOfValues), nil
}

func MustParseDeleteGroupRequest_FieldPathArrayOfValues(pathStr, valuesStr string) DeleteGroupRequest_FieldPathArrayOfValues {
	fpaov, err := ParseDeleteGroupRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeleteGroupRequest_FieldTerminalPathArrayOfValues struct {
	DeleteGroupRequest_FieldTerminalPath
	values interface{}
}

var _ DeleteGroupRequest_FieldPathArrayOfValues = (*DeleteGroupRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeleteGroupRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeleteGroupRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*group.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeleteGroupRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*group.Reference, bool) {
	res, ok := fpaov.values.([]*group.Reference)
	return res, ok
}
