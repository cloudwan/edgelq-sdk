// Code generated by protoc-gen-goten-client
// API: GroupService
// DO NOT EDIT!!!

package group_client

import (
	"context"

	"google.golang.org/grpc"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	group "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/group"
	empty "github.com/golang/protobuf/ptypes/empty"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = protoimpl.DescBuilder{}
	_ = context.Context(nil)
	_ = grpc.ClientConn{}
)

// make sure we're using proto imports
var (
	_ = &group.Group{}
	_ = &empty.Empty{}
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GroupServiceClient is the client API for GroupService.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GroupServiceClient interface {
	GetGroup(ctx context.Context, in *GetGroupRequest, opts ...grpc.CallOption) (*group.Group, error)
	BatchGetGroups(ctx context.Context, in *BatchGetGroupsRequest, opts ...grpc.CallOption) (*BatchGetGroupsResponse, error)
	ListGroups(ctx context.Context, in *ListGroupsRequest, opts ...grpc.CallOption) (*ListGroupsResponse, error)
	WatchGroup(ctx context.Context, in *WatchGroupRequest, opts ...grpc.CallOption) (WatchGroupClientStream, error)
	WatchGroups(ctx context.Context, in *WatchGroupsRequest, opts ...grpc.CallOption) (WatchGroupsClientStream, error)
	CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*group.Group, error)
	UpdateGroup(ctx context.Context, in *UpdateGroupRequest, opts ...grpc.CallOption) (*group.Group, error)
	DeleteGroup(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type client struct {
	cc grpc.ClientConnInterface
}

func NewGroupServiceClient(cc grpc.ClientConnInterface) GroupServiceClient {
	return &client{cc}
}

func (c *client) GetGroup(ctx context.Context, in *GetGroupRequest, opts ...grpc.CallOption) (*group.Group, error) {
	out := new(group.Group)
	err := c.cc.Invoke(ctx, "/ntt.iam.v1alpha2.GroupService/GetGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) BatchGetGroups(ctx context.Context, in *BatchGetGroupsRequest, opts ...grpc.CallOption) (*BatchGetGroupsResponse, error) {
	out := new(BatchGetGroupsResponse)
	err := c.cc.Invoke(ctx, "/ntt.iam.v1alpha2.GroupService/BatchGetGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListGroups(ctx context.Context, in *ListGroupsRequest, opts ...grpc.CallOption) (*ListGroupsResponse, error) {
	out := new(ListGroupsResponse)
	err := c.cc.Invoke(ctx, "/ntt.iam.v1alpha2.GroupService/ListGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) WatchGroup(ctx context.Context, in *WatchGroupRequest, opts ...grpc.CallOption) (WatchGroupClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchGroup",
			ServerStreams: true,
		},
		"/ntt.iam.v1alpha2.GroupService/WatchGroup", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchGroupWatchGroupClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchGroupClientStream interface {
	Recv() (*WatchGroupResponse, error)
	grpc.ClientStream
}

type watchGroupWatchGroupClient struct {
	grpc.ClientStream
}

func (x *watchGroupWatchGroupClient) Recv() (*WatchGroupResponse, error) {
	m := new(WatchGroupResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) WatchGroups(ctx context.Context, in *WatchGroupsRequest, opts ...grpc.CallOption) (WatchGroupsClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchGroups",
			ServerStreams: true,
		},
		"/ntt.iam.v1alpha2.GroupService/WatchGroups", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchGroupsWatchGroupsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchGroupsClientStream interface {
	Recv() (*WatchGroupsResponse, error)
	grpc.ClientStream
}

type watchGroupsWatchGroupsClient struct {
	grpc.ClientStream
}

func (x *watchGroupsWatchGroupsClient) Recv() (*WatchGroupsResponse, error) {
	m := new(WatchGroupsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*group.Group, error) {
	out := new(group.Group)
	err := c.cc.Invoke(ctx, "/ntt.iam.v1alpha2.GroupService/CreateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateGroup(ctx context.Context, in *UpdateGroupRequest, opts ...grpc.CallOption) (*group.Group, error) {
	out := new(group.Group)
	err := c.cc.Invoke(ctx, "/ntt.iam.v1alpha2.GroupService/UpdateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeleteGroup(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ntt.iam.v1alpha2.GroupService/DeleteGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
