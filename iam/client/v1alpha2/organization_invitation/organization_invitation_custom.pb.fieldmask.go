// Code generated by protoc-gen-goten-object
// File: edgelq/iam/proto/v1alpha2/organization_invitation_custom.proto
// DO NOT EDIT!!!

package organization_invitation_client

import (
	"encoding/json"
	"strings"

	firestorepb "google.golang.org/genproto/googleapis/firestore/v1"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/organization"
	organization_invitation "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/organization_invitation"
	project_invitation "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/project_invitation"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = strings.Builder{}

	_ = firestorepb.Value{}
	_ = codes.NotFound
	_ = status.Status{}
	_ = new(proto.Message)
	_ = new(preflect.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldMask)
)

// make sure we're using proto imports
var (
	_ = &organization.Organization{}
	_ = &organization_invitation.OrganizationInvitation{}
	_ = &project_invitation.ProjectInvitation{}
)

type AcceptOrganizationInvitationRequest_FieldMask struct {
	Paths []AcceptOrganizationInvitationRequest_FieldPath
}

func FullAcceptOrganizationInvitationRequest_FieldMask() *AcceptOrganizationInvitationRequest_FieldMask {
	res := &AcceptOrganizationInvitationRequest_FieldMask{}
	res.Paths = append(res.Paths, &AcceptOrganizationInvitationRequest_FieldTerminalPath{selector: AcceptOrganizationInvitationRequest_FieldPathSelectorName})
	return res
}

func (fieldMask *AcceptOrganizationInvitationRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *AcceptOrganizationInvitationRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *AcceptOrganizationInvitationRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseAcceptOrganizationInvitationRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *AcceptOrganizationInvitationRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 1)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*AcceptOrganizationInvitationRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *AcceptOrganizationInvitationRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseAcceptOrganizationInvitationRequest_FieldPath(raw)
	})
}

func (fieldMask *AcceptOrganizationInvitationRequest_FieldMask) ProtoMessage() {}

func (fieldMask *AcceptOrganizationInvitationRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *AcceptOrganizationInvitationRequest_FieldMask) Subtract(other *AcceptOrganizationInvitationRequest_FieldMask) *AcceptOrganizationInvitationRequest_FieldMask {
	result := &AcceptOrganizationInvitationRequest_FieldMask{}
	removedSelectors := make([]bool, 1)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *AcceptOrganizationInvitationRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *AcceptOrganizationInvitationRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*AcceptOrganizationInvitationRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *AcceptOrganizationInvitationRequest_FieldMask) FilterInputFields() *AcceptOrganizationInvitationRequest_FieldMask {
	result := &AcceptOrganizationInvitationRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *AcceptOrganizationInvitationRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *AcceptOrganizationInvitationRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]AcceptOrganizationInvitationRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseAcceptOrganizationInvitationRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask AcceptOrganizationInvitationRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *AcceptOrganizationInvitationRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *AcceptOrganizationInvitationRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask AcceptOrganizationInvitationRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *AcceptOrganizationInvitationRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *AcceptOrganizationInvitationRequest_FieldMask) AppendPath(path AcceptOrganizationInvitationRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *AcceptOrganizationInvitationRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(AcceptOrganizationInvitationRequest_FieldPath))
}

func (fieldMask *AcceptOrganizationInvitationRequest_FieldMask) GetPaths() []AcceptOrganizationInvitationRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *AcceptOrganizationInvitationRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *AcceptOrganizationInvitationRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseAcceptOrganizationInvitationRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *AcceptOrganizationInvitationRequest_FieldMask) Set(target, source *AcceptOrganizationInvitationRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *AcceptOrganizationInvitationRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*AcceptOrganizationInvitationRequest), source.(*AcceptOrganizationInvitationRequest))
}

func (fieldMask *AcceptOrganizationInvitationRequest_FieldMask) Project(source *AcceptOrganizationInvitationRequest) *AcceptOrganizationInvitationRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &AcceptOrganizationInvitationRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *AcceptOrganizationInvitationRequest_FieldTerminalPath:
			switch tp.selector {
			case AcceptOrganizationInvitationRequest_FieldPathSelectorName:
				result.Name = source.Name
			}
		}
	}
	return result
}

func (fieldMask *AcceptOrganizationInvitationRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*AcceptOrganizationInvitationRequest))
}

func (fieldMask *AcceptOrganizationInvitationRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type AcceptOrganizationInvitationResponse_FieldMask struct {
	Paths []AcceptOrganizationInvitationResponse_FieldPath
}

func FullAcceptOrganizationInvitationResponse_FieldMask() *AcceptOrganizationInvitationResponse_FieldMask {
	res := &AcceptOrganizationInvitationResponse_FieldMask{}
	return res
}

func (fieldMask *AcceptOrganizationInvitationResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *AcceptOrganizationInvitationResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *AcceptOrganizationInvitationResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseAcceptOrganizationInvitationResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *AcceptOrganizationInvitationResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 0)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*AcceptOrganizationInvitationResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *AcceptOrganizationInvitationResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseAcceptOrganizationInvitationResponse_FieldPath(raw)
	})
}

func (fieldMask *AcceptOrganizationInvitationResponse_FieldMask) ProtoMessage() {}

func (fieldMask *AcceptOrganizationInvitationResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *AcceptOrganizationInvitationResponse_FieldMask) Subtract(other *AcceptOrganizationInvitationResponse_FieldMask) *AcceptOrganizationInvitationResponse_FieldMask {
	result := &AcceptOrganizationInvitationResponse_FieldMask{}
	removedSelectors := make([]bool, 0)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *AcceptOrganizationInvitationResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *AcceptOrganizationInvitationResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*AcceptOrganizationInvitationResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *AcceptOrganizationInvitationResponse_FieldMask) FilterInputFields() *AcceptOrganizationInvitationResponse_FieldMask {
	result := &AcceptOrganizationInvitationResponse_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *AcceptOrganizationInvitationResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *AcceptOrganizationInvitationResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]AcceptOrganizationInvitationResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseAcceptOrganizationInvitationResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask AcceptOrganizationInvitationResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *AcceptOrganizationInvitationResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *AcceptOrganizationInvitationResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask AcceptOrganizationInvitationResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *AcceptOrganizationInvitationResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *AcceptOrganizationInvitationResponse_FieldMask) AppendPath(path AcceptOrganizationInvitationResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *AcceptOrganizationInvitationResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(AcceptOrganizationInvitationResponse_FieldPath))
}

func (fieldMask *AcceptOrganizationInvitationResponse_FieldMask) GetPaths() []AcceptOrganizationInvitationResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *AcceptOrganizationInvitationResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *AcceptOrganizationInvitationResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseAcceptOrganizationInvitationResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *AcceptOrganizationInvitationResponse_FieldMask) Set(target, source *AcceptOrganizationInvitationResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *AcceptOrganizationInvitationResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*AcceptOrganizationInvitationResponse), source.(*AcceptOrganizationInvitationResponse))
}

func (fieldMask *AcceptOrganizationInvitationResponse_FieldMask) Project(source *AcceptOrganizationInvitationResponse) *AcceptOrganizationInvitationResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &AcceptOrganizationInvitationResponse{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *AcceptOrganizationInvitationResponse_FieldTerminalPath:
			switch tp.selector {
			}
		}
	}
	return result
}

func (fieldMask *AcceptOrganizationInvitationResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*AcceptOrganizationInvitationResponse))
}

func (fieldMask *AcceptOrganizationInvitationResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type DeclineOrganizationInvitationRequest_FieldMask struct {
	Paths []DeclineOrganizationInvitationRequest_FieldPath
}

func FullDeclineOrganizationInvitationRequest_FieldMask() *DeclineOrganizationInvitationRequest_FieldMask {
	res := &DeclineOrganizationInvitationRequest_FieldMask{}
	res.Paths = append(res.Paths, &DeclineOrganizationInvitationRequest_FieldTerminalPath{selector: DeclineOrganizationInvitationRequest_FieldPathSelectorName})
	res.Paths = append(res.Paths, &DeclineOrganizationInvitationRequest_FieldTerminalPath{selector: DeclineOrganizationInvitationRequest_FieldPathSelectorFilter})
	return res
}

func (fieldMask *DeclineOrganizationInvitationRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *DeclineOrganizationInvitationRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *DeclineOrganizationInvitationRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseDeclineOrganizationInvitationRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *DeclineOrganizationInvitationRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*DeclineOrganizationInvitationRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *DeclineOrganizationInvitationRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseDeclineOrganizationInvitationRequest_FieldPath(raw)
	})
}

func (fieldMask *DeclineOrganizationInvitationRequest_FieldMask) ProtoMessage() {}

func (fieldMask *DeclineOrganizationInvitationRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *DeclineOrganizationInvitationRequest_FieldMask) Subtract(other *DeclineOrganizationInvitationRequest_FieldMask) *DeclineOrganizationInvitationRequest_FieldMask {
	result := &DeclineOrganizationInvitationRequest_FieldMask{}
	removedSelectors := make([]bool, 2)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *DeclineOrganizationInvitationRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *DeclineOrganizationInvitationRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*DeclineOrganizationInvitationRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *DeclineOrganizationInvitationRequest_FieldMask) FilterInputFields() *DeclineOrganizationInvitationRequest_FieldMask {
	result := &DeclineOrganizationInvitationRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *DeclineOrganizationInvitationRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *DeclineOrganizationInvitationRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]DeclineOrganizationInvitationRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseDeclineOrganizationInvitationRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask DeclineOrganizationInvitationRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *DeclineOrganizationInvitationRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *DeclineOrganizationInvitationRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask DeclineOrganizationInvitationRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *DeclineOrganizationInvitationRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *DeclineOrganizationInvitationRequest_FieldMask) AppendPath(path DeclineOrganizationInvitationRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *DeclineOrganizationInvitationRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(DeclineOrganizationInvitationRequest_FieldPath))
}

func (fieldMask *DeclineOrganizationInvitationRequest_FieldMask) GetPaths() []DeclineOrganizationInvitationRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *DeclineOrganizationInvitationRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *DeclineOrganizationInvitationRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseDeclineOrganizationInvitationRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *DeclineOrganizationInvitationRequest_FieldMask) Set(target, source *DeclineOrganizationInvitationRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *DeclineOrganizationInvitationRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*DeclineOrganizationInvitationRequest), source.(*DeclineOrganizationInvitationRequest))
}

func (fieldMask *DeclineOrganizationInvitationRequest_FieldMask) Project(source *DeclineOrganizationInvitationRequest) *DeclineOrganizationInvitationRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &DeclineOrganizationInvitationRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *DeclineOrganizationInvitationRequest_FieldTerminalPath:
			switch tp.selector {
			case DeclineOrganizationInvitationRequest_FieldPathSelectorName:
				result.Name = source.Name
			case DeclineOrganizationInvitationRequest_FieldPathSelectorFilter:
				result.Filter = source.Filter
			}
		}
	}
	return result
}

func (fieldMask *DeclineOrganizationInvitationRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*DeclineOrganizationInvitationRequest))
}

func (fieldMask *DeclineOrganizationInvitationRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type DeclineOrganizationInvitationResponse_FieldMask struct {
	Paths []DeclineOrganizationInvitationResponse_FieldPath
}

func FullDeclineOrganizationInvitationResponse_FieldMask() *DeclineOrganizationInvitationResponse_FieldMask {
	res := &DeclineOrganizationInvitationResponse_FieldMask{}
	return res
}

func (fieldMask *DeclineOrganizationInvitationResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *DeclineOrganizationInvitationResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *DeclineOrganizationInvitationResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseDeclineOrganizationInvitationResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *DeclineOrganizationInvitationResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 0)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*DeclineOrganizationInvitationResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *DeclineOrganizationInvitationResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseDeclineOrganizationInvitationResponse_FieldPath(raw)
	})
}

func (fieldMask *DeclineOrganizationInvitationResponse_FieldMask) ProtoMessage() {}

func (fieldMask *DeclineOrganizationInvitationResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *DeclineOrganizationInvitationResponse_FieldMask) Subtract(other *DeclineOrganizationInvitationResponse_FieldMask) *DeclineOrganizationInvitationResponse_FieldMask {
	result := &DeclineOrganizationInvitationResponse_FieldMask{}
	removedSelectors := make([]bool, 0)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *DeclineOrganizationInvitationResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *DeclineOrganizationInvitationResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*DeclineOrganizationInvitationResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *DeclineOrganizationInvitationResponse_FieldMask) FilterInputFields() *DeclineOrganizationInvitationResponse_FieldMask {
	result := &DeclineOrganizationInvitationResponse_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *DeclineOrganizationInvitationResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *DeclineOrganizationInvitationResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]DeclineOrganizationInvitationResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseDeclineOrganizationInvitationResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask DeclineOrganizationInvitationResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *DeclineOrganizationInvitationResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *DeclineOrganizationInvitationResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask DeclineOrganizationInvitationResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *DeclineOrganizationInvitationResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *DeclineOrganizationInvitationResponse_FieldMask) AppendPath(path DeclineOrganizationInvitationResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *DeclineOrganizationInvitationResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(DeclineOrganizationInvitationResponse_FieldPath))
}

func (fieldMask *DeclineOrganizationInvitationResponse_FieldMask) GetPaths() []DeclineOrganizationInvitationResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *DeclineOrganizationInvitationResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *DeclineOrganizationInvitationResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseDeclineOrganizationInvitationResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *DeclineOrganizationInvitationResponse_FieldMask) Set(target, source *DeclineOrganizationInvitationResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *DeclineOrganizationInvitationResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*DeclineOrganizationInvitationResponse), source.(*DeclineOrganizationInvitationResponse))
}

func (fieldMask *DeclineOrganizationInvitationResponse_FieldMask) Project(source *DeclineOrganizationInvitationResponse) *DeclineOrganizationInvitationResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &DeclineOrganizationInvitationResponse{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *DeclineOrganizationInvitationResponse_FieldTerminalPath:
			switch tp.selector {
			}
		}
	}
	return result
}

func (fieldMask *DeclineOrganizationInvitationResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*DeclineOrganizationInvitationResponse))
}

func (fieldMask *DeclineOrganizationInvitationResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type ListMyOrganizationInvitationsRequest_FieldMask struct {
	Paths []ListMyOrganizationInvitationsRequest_FieldPath
}

func FullListMyOrganizationInvitationsRequest_FieldMask() *ListMyOrganizationInvitationsRequest_FieldMask {
	res := &ListMyOrganizationInvitationsRequest_FieldMask{}
	res.Paths = append(res.Paths, &ListMyOrganizationInvitationsRequest_FieldTerminalPath{selector: ListMyOrganizationInvitationsRequest_FieldPathSelectorParent})
	res.Paths = append(res.Paths, &ListMyOrganizationInvitationsRequest_FieldTerminalPath{selector: ListMyOrganizationInvitationsRequest_FieldPathSelectorFilter})
	return res
}

func (fieldMask *ListMyOrganizationInvitationsRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *ListMyOrganizationInvitationsRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *ListMyOrganizationInvitationsRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseListMyOrganizationInvitationsRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *ListMyOrganizationInvitationsRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*ListMyOrganizationInvitationsRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *ListMyOrganizationInvitationsRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseListMyOrganizationInvitationsRequest_FieldPath(raw)
	})
}

func (fieldMask *ListMyOrganizationInvitationsRequest_FieldMask) ProtoMessage() {}

func (fieldMask *ListMyOrganizationInvitationsRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *ListMyOrganizationInvitationsRequest_FieldMask) Subtract(other *ListMyOrganizationInvitationsRequest_FieldMask) *ListMyOrganizationInvitationsRequest_FieldMask {
	result := &ListMyOrganizationInvitationsRequest_FieldMask{}
	removedSelectors := make([]bool, 2)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *ListMyOrganizationInvitationsRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *ListMyOrganizationInvitationsRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*ListMyOrganizationInvitationsRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *ListMyOrganizationInvitationsRequest_FieldMask) FilterInputFields() *ListMyOrganizationInvitationsRequest_FieldMask {
	result := &ListMyOrganizationInvitationsRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *ListMyOrganizationInvitationsRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *ListMyOrganizationInvitationsRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]ListMyOrganizationInvitationsRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseListMyOrganizationInvitationsRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask ListMyOrganizationInvitationsRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *ListMyOrganizationInvitationsRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ListMyOrganizationInvitationsRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask ListMyOrganizationInvitationsRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *ListMyOrganizationInvitationsRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ListMyOrganizationInvitationsRequest_FieldMask) AppendPath(path ListMyOrganizationInvitationsRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *ListMyOrganizationInvitationsRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(ListMyOrganizationInvitationsRequest_FieldPath))
}

func (fieldMask *ListMyOrganizationInvitationsRequest_FieldMask) GetPaths() []ListMyOrganizationInvitationsRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *ListMyOrganizationInvitationsRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *ListMyOrganizationInvitationsRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseListMyOrganizationInvitationsRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *ListMyOrganizationInvitationsRequest_FieldMask) Set(target, source *ListMyOrganizationInvitationsRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *ListMyOrganizationInvitationsRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*ListMyOrganizationInvitationsRequest), source.(*ListMyOrganizationInvitationsRequest))
}

func (fieldMask *ListMyOrganizationInvitationsRequest_FieldMask) Project(source *ListMyOrganizationInvitationsRequest) *ListMyOrganizationInvitationsRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &ListMyOrganizationInvitationsRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *ListMyOrganizationInvitationsRequest_FieldTerminalPath:
			switch tp.selector {
			case ListMyOrganizationInvitationsRequest_FieldPathSelectorParent:
				result.Parent = source.Parent
			case ListMyOrganizationInvitationsRequest_FieldPathSelectorFilter:
				result.Filter = source.Filter
			}
		}
	}
	return result
}

func (fieldMask *ListMyOrganizationInvitationsRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*ListMyOrganizationInvitationsRequest))
}

func (fieldMask *ListMyOrganizationInvitationsRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type ListMyOrganizationInvitationsResponse_FieldMask struct {
	Paths []ListMyOrganizationInvitationsResponse_FieldPath
}

func FullListMyOrganizationInvitationsResponse_FieldMask() *ListMyOrganizationInvitationsResponse_FieldMask {
	res := &ListMyOrganizationInvitationsResponse_FieldMask{}
	res.Paths = append(res.Paths, &ListMyOrganizationInvitationsResponse_FieldTerminalPath{selector: ListMyOrganizationInvitationsResponse_FieldPathSelectorOrganizationInvitations})
	return res
}

func (fieldMask *ListMyOrganizationInvitationsResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *ListMyOrganizationInvitationsResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *ListMyOrganizationInvitationsResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseListMyOrganizationInvitationsResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *ListMyOrganizationInvitationsResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 1)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*ListMyOrganizationInvitationsResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *ListMyOrganizationInvitationsResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseListMyOrganizationInvitationsResponse_FieldPath(raw)
	})
}

func (fieldMask *ListMyOrganizationInvitationsResponse_FieldMask) ProtoMessage() {}

func (fieldMask *ListMyOrganizationInvitationsResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *ListMyOrganizationInvitationsResponse_FieldMask) Subtract(other *ListMyOrganizationInvitationsResponse_FieldMask) *ListMyOrganizationInvitationsResponse_FieldMask {
	result := &ListMyOrganizationInvitationsResponse_FieldMask{}
	removedSelectors := make([]bool, 1)
	otherSubMasks := map[ListMyOrganizationInvitationsResponse_FieldPathSelector]gotenobject.FieldMask{
		ListMyOrganizationInvitationsResponse_FieldPathSelectorOrganizationInvitations: &organization_invitation.OrganizationInvitation_FieldMask{},
	}
	mySubMasks := map[ListMyOrganizationInvitationsResponse_FieldPathSelector]gotenobject.FieldMask{
		ListMyOrganizationInvitationsResponse_FieldPathSelectorOrganizationInvitations: &organization_invitation.OrganizationInvitation_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *ListMyOrganizationInvitationsResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *ListMyOrganizationInvitationsResponse_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*ListMyOrganizationInvitationsResponse_FieldTerminalPath); ok {
					switch tp.selector {
					case ListMyOrganizationInvitationsResponse_FieldPathSelectorOrganizationInvitations:
						mySubMasks[ListMyOrganizationInvitationsResponse_FieldPathSelectorOrganizationInvitations] = organization_invitation.FullOrganizationInvitation_FieldMask()
					}
				} else if tp, ok := path.(*ListMyOrganizationInvitationsResponse_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &ListMyOrganizationInvitationsResponse_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *ListMyOrganizationInvitationsResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*ListMyOrganizationInvitationsResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *ListMyOrganizationInvitationsResponse_FieldMask) FilterInputFields() *ListMyOrganizationInvitationsResponse_FieldMask {
	result := &ListMyOrganizationInvitationsResponse_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case ListMyOrganizationInvitationsResponse_FieldPathSelectorOrganizationInvitations:
			if _, ok := path.(*ListMyOrganizationInvitationsResponse_FieldTerminalPath); ok {
				for _, subpath := range organization_invitation.FullOrganizationInvitation_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &ListMyOrganizationInvitationsResponse_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*ListMyOrganizationInvitationsResponse_FieldSubPath); ok {
				selectedMask := &organization_invitation.OrganizationInvitation_FieldMask{
					Paths: []organization_invitation.OrganizationInvitation_FieldPath{sub.subPath.(organization_invitation.OrganizationInvitation_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &ListMyOrganizationInvitationsResponse_FieldSubPath{selector: ListMyOrganizationInvitationsResponse_FieldPathSelectorOrganizationInvitations, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *ListMyOrganizationInvitationsResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *ListMyOrganizationInvitationsResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]ListMyOrganizationInvitationsResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseListMyOrganizationInvitationsResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask ListMyOrganizationInvitationsResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *ListMyOrganizationInvitationsResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ListMyOrganizationInvitationsResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask ListMyOrganizationInvitationsResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *ListMyOrganizationInvitationsResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ListMyOrganizationInvitationsResponse_FieldMask) AppendPath(path ListMyOrganizationInvitationsResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *ListMyOrganizationInvitationsResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(ListMyOrganizationInvitationsResponse_FieldPath))
}

func (fieldMask *ListMyOrganizationInvitationsResponse_FieldMask) GetPaths() []ListMyOrganizationInvitationsResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *ListMyOrganizationInvitationsResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *ListMyOrganizationInvitationsResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseListMyOrganizationInvitationsResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *ListMyOrganizationInvitationsResponse_FieldMask) Set(target, source *ListMyOrganizationInvitationsResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *ListMyOrganizationInvitationsResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*ListMyOrganizationInvitationsResponse), source.(*ListMyOrganizationInvitationsResponse))
}

func (fieldMask *ListMyOrganizationInvitationsResponse_FieldMask) Project(source *ListMyOrganizationInvitationsResponse) *ListMyOrganizationInvitationsResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &ListMyOrganizationInvitationsResponse{}
	organizationInvitationsMask := &organization_invitation.OrganizationInvitation_FieldMask{}
	wholeOrganizationInvitationsAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *ListMyOrganizationInvitationsResponse_FieldTerminalPath:
			switch tp.selector {
			case ListMyOrganizationInvitationsResponse_FieldPathSelectorOrganizationInvitations:
				result.OrganizationInvitations = source.OrganizationInvitations
				wholeOrganizationInvitationsAccepted = true
			}
		case *ListMyOrganizationInvitationsResponse_FieldSubPath:
			switch tp.selector {
			case ListMyOrganizationInvitationsResponse_FieldPathSelectorOrganizationInvitations:
				organizationInvitationsMask.AppendPath(tp.subPath.(organization_invitation.OrganizationInvitation_FieldPath))
			}
		}
	}
	if wholeOrganizationInvitationsAccepted == false && len(organizationInvitationsMask.Paths) > 0 {
		for _, sourceItem := range source.GetOrganizationInvitations() {
			result.OrganizationInvitations = append(result.OrganizationInvitations, organizationInvitationsMask.Project(sourceItem))
		}
	}
	return result
}

func (fieldMask *ListMyOrganizationInvitationsResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*ListMyOrganizationInvitationsResponse))
}

func (fieldMask *ListMyOrganizationInvitationsResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}
