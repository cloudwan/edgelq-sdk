// Code generated by protoc-gen-goten-object
// File: edgelq/iam/proto/v1alpha2/organization_invitation_service.proto
// DO NOT EDIT!!!

package organization_invitation_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/organization"
	organization_invitation "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/organization_invitation"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &organization.Organization{}
	_ = &organization_invitation.OrganizationInvitation{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

func (o *GetOrganizationInvitationRequest) GotenObjectExt() {}

func (o *GetOrganizationInvitationRequest) MakeFullFieldMask() *GetOrganizationInvitationRequest_FieldMask {
	return FullGetOrganizationInvitationRequest_FieldMask()
}

func (o *GetOrganizationInvitationRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullGetOrganizationInvitationRequest_FieldMask()
}

func (o *GetOrganizationInvitationRequest) MakeDiffFieldMask(other *GetOrganizationInvitationRequest) *GetOrganizationInvitationRequest_FieldMask {
	if o == nil && other == nil {
		return &GetOrganizationInvitationRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullGetOrganizationInvitationRequest_FieldMask()
	}

	res := &GetOrganizationInvitationRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &GetOrganizationInvitationRequest_FieldTerminalPath{selector: GetOrganizationInvitationRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &GetOrganizationInvitationRequest_FieldTerminalPath{selector: GetOrganizationInvitationRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &GetOrganizationInvitationRequest_FieldTerminalPath{selector: GetOrganizationInvitationRequest_FieldPathSelectorView})
	}
	return res
}

func (o *GetOrganizationInvitationRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*GetOrganizationInvitationRequest))
}

func (o *GetOrganizationInvitationRequest) Clone() *GetOrganizationInvitationRequest {
	if o == nil {
		return nil
	}
	result := &GetOrganizationInvitationRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &organization_invitation.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*organization_invitation.OrganizationInvitation_FieldMask)
	result.View = o.View
	return result
}

func (o *GetOrganizationInvitationRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *GetOrganizationInvitationRequest) Merge(source *GetOrganizationInvitationRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &organization_invitation.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(organization_invitation.OrganizationInvitation_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *GetOrganizationInvitationRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*GetOrganizationInvitationRequest))
}

func (o *BatchGetOrganizationInvitationsRequest) GotenObjectExt() {}

func (o *BatchGetOrganizationInvitationsRequest) MakeFullFieldMask() *BatchGetOrganizationInvitationsRequest_FieldMask {
	return FullBatchGetOrganizationInvitationsRequest_FieldMask()
}

func (o *BatchGetOrganizationInvitationsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetOrganizationInvitationsRequest_FieldMask()
}

func (o *BatchGetOrganizationInvitationsRequest) MakeDiffFieldMask(other *BatchGetOrganizationInvitationsRequest) *BatchGetOrganizationInvitationsRequest_FieldMask {
	if o == nil && other == nil {
		return &BatchGetOrganizationInvitationsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetOrganizationInvitationsRequest_FieldMask()
	}

	res := &BatchGetOrganizationInvitationsRequest_FieldMask{}

	if len(o.GetNames()) == len(other.GetNames()) {
		for i, lValue := range o.GetNames() {
			rValue := other.GetNames()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetOrganizationInvitationsRequest_FieldTerminalPath{selector: BatchGetOrganizationInvitationsRequest_FieldPathSelectorNames})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetOrganizationInvitationsRequest_FieldTerminalPath{selector: BatchGetOrganizationInvitationsRequest_FieldPathSelectorNames})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &BatchGetOrganizationInvitationsRequest_FieldTerminalPath{selector: BatchGetOrganizationInvitationsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &BatchGetOrganizationInvitationsRequest_FieldTerminalPath{selector: BatchGetOrganizationInvitationsRequest_FieldPathSelectorView})
	}
	return res
}

func (o *BatchGetOrganizationInvitationsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetOrganizationInvitationsRequest))
}

func (o *BatchGetOrganizationInvitationsRequest) Clone() *BatchGetOrganizationInvitationsRequest {
	if o == nil {
		return nil
	}
	result := &BatchGetOrganizationInvitationsRequest{}
	result.Names = make([]*organization_invitation.Reference, len(o.Names))
	for i, sourceValue := range o.Names {
		if sourceValue == nil {
			result.Names[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Names[i] = &organization_invitation.Reference{}
			if err := result.Names[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*organization_invitation.OrganizationInvitation_FieldMask)
	result.View = o.View
	return result
}

func (o *BatchGetOrganizationInvitationsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetOrganizationInvitationsRequest) Merge(source *BatchGetOrganizationInvitationsRequest) {
	for _, sourceValue := range source.GetNames() {
		exists := false
		for _, currentValue := range o.Names {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *organization_invitation.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &organization_invitation.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Names = append(o.Names, newDstElement)
		}
	}

	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(organization_invitation.OrganizationInvitation_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *BatchGetOrganizationInvitationsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetOrganizationInvitationsRequest))
}

func (o *BatchGetOrganizationInvitationsResponse) GotenObjectExt() {}

func (o *BatchGetOrganizationInvitationsResponse) MakeFullFieldMask() *BatchGetOrganizationInvitationsResponse_FieldMask {
	return FullBatchGetOrganizationInvitationsResponse_FieldMask()
}

func (o *BatchGetOrganizationInvitationsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetOrganizationInvitationsResponse_FieldMask()
}

func (o *BatchGetOrganizationInvitationsResponse) MakeDiffFieldMask(other *BatchGetOrganizationInvitationsResponse) *BatchGetOrganizationInvitationsResponse_FieldMask {
	if o == nil && other == nil {
		return &BatchGetOrganizationInvitationsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetOrganizationInvitationsResponse_FieldMask()
	}

	res := &BatchGetOrganizationInvitationsResponse_FieldMask{}

	if len(o.GetOrganizationInvitations()) == len(other.GetOrganizationInvitations()) {
		for i, lValue := range o.GetOrganizationInvitations() {
			rValue := other.GetOrganizationInvitations()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &BatchGetOrganizationInvitationsResponse_FieldTerminalPath{selector: BatchGetOrganizationInvitationsResponse_FieldPathSelectorOrganizationInvitations})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetOrganizationInvitationsResponse_FieldTerminalPath{selector: BatchGetOrganizationInvitationsResponse_FieldPathSelectorOrganizationInvitations})
	}

	if len(o.GetMissing()) == len(other.GetMissing()) {
		for i, lValue := range o.GetMissing() {
			rValue := other.GetMissing()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetOrganizationInvitationsResponse_FieldTerminalPath{selector: BatchGetOrganizationInvitationsResponse_FieldPathSelectorMissing})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetOrganizationInvitationsResponse_FieldTerminalPath{selector: BatchGetOrganizationInvitationsResponse_FieldPathSelectorMissing})
	}
	return res
}

func (o *BatchGetOrganizationInvitationsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetOrganizationInvitationsResponse))
}

func (o *BatchGetOrganizationInvitationsResponse) Clone() *BatchGetOrganizationInvitationsResponse {
	if o == nil {
		return nil
	}
	result := &BatchGetOrganizationInvitationsResponse{}
	result.OrganizationInvitations = make([]*organization_invitation.OrganizationInvitation, len(o.OrganizationInvitations))
	for i, sourceValue := range o.OrganizationInvitations {
		result.OrganizationInvitations[i] = sourceValue.Clone()
	}
	result.Missing = make([]*organization_invitation.Reference, len(o.Missing))
	for i, sourceValue := range o.Missing {
		if sourceValue == nil {
			result.Missing[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Missing[i] = &organization_invitation.Reference{}
			if err := result.Missing[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	return result
}

func (o *BatchGetOrganizationInvitationsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetOrganizationInvitationsResponse) Merge(source *BatchGetOrganizationInvitationsResponse) {
	for _, sourceValue := range source.GetOrganizationInvitations() {
		exists := false
		for _, currentValue := range o.OrganizationInvitations {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *organization_invitation.OrganizationInvitation
			if sourceValue != nil {
				newDstElement = new(organization_invitation.OrganizationInvitation)
				newDstElement.Merge(sourceValue)
			}
			o.OrganizationInvitations = append(o.OrganizationInvitations, newDstElement)
		}
	}

	for _, sourceValue := range source.GetMissing() {
		exists := false
		for _, currentValue := range o.Missing {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *organization_invitation.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &organization_invitation.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Missing = append(o.Missing, newDstElement)
		}
	}

}

func (o *BatchGetOrganizationInvitationsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetOrganizationInvitationsResponse))
}

func (o *ListOrganizationInvitationsRequest) GotenObjectExt() {}

func (o *ListOrganizationInvitationsRequest) MakeFullFieldMask() *ListOrganizationInvitationsRequest_FieldMask {
	return FullListOrganizationInvitationsRequest_FieldMask()
}

func (o *ListOrganizationInvitationsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListOrganizationInvitationsRequest_FieldMask()
}

func (o *ListOrganizationInvitationsRequest) MakeDiffFieldMask(other *ListOrganizationInvitationsRequest) *ListOrganizationInvitationsRequest_FieldMask {
	if o == nil && other == nil {
		return &ListOrganizationInvitationsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListOrganizationInvitationsRequest_FieldMask()
	}

	res := &ListOrganizationInvitationsRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &ListOrganizationInvitationsRequest_FieldTerminalPath{selector: ListOrganizationInvitationsRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &ListOrganizationInvitationsRequest_FieldTerminalPath{selector: ListOrganizationInvitationsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &ListOrganizationInvitationsRequest_FieldTerminalPath{selector: ListOrganizationInvitationsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &ListOrganizationInvitationsRequest_FieldTerminalPath{selector: ListOrganizationInvitationsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &ListOrganizationInvitationsRequest_FieldTerminalPath{selector: ListOrganizationInvitationsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &ListOrganizationInvitationsRequest_FieldTerminalPath{selector: ListOrganizationInvitationsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &ListOrganizationInvitationsRequest_FieldTerminalPath{selector: ListOrganizationInvitationsRequest_FieldPathSelectorView})
	}
	if o.GetIncludePagingInfo() != other.GetIncludePagingInfo() {
		res.Paths = append(res.Paths, &ListOrganizationInvitationsRequest_FieldTerminalPath{selector: ListOrganizationInvitationsRequest_FieldPathSelectorIncludePagingInfo})
	}
	return res
}

func (o *ListOrganizationInvitationsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListOrganizationInvitationsRequest))
}

func (o *ListOrganizationInvitationsRequest) Clone() *ListOrganizationInvitationsRequest {
	if o == nil {
		return nil
	}
	result := &ListOrganizationInvitationsRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &organization_invitation.ParentName{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &organization_invitation.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &organization_invitation.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &organization_invitation.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*organization_invitation.OrganizationInvitation_FieldMask)
	result.View = o.View
	result.IncludePagingInfo = o.IncludePagingInfo
	return result
}

func (o *ListOrganizationInvitationsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListOrganizationInvitationsRequest) Merge(source *ListOrganizationInvitationsRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &organization_invitation.ParentName{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &organization_invitation.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &organization_invitation.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &organization_invitation.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(organization_invitation.OrganizationInvitation_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.IncludePagingInfo = source.GetIncludePagingInfo()
}

func (o *ListOrganizationInvitationsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListOrganizationInvitationsRequest))
}

func (o *ListOrganizationInvitationsResponse) GotenObjectExt() {}

func (o *ListOrganizationInvitationsResponse) MakeFullFieldMask() *ListOrganizationInvitationsResponse_FieldMask {
	return FullListOrganizationInvitationsResponse_FieldMask()
}

func (o *ListOrganizationInvitationsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListOrganizationInvitationsResponse_FieldMask()
}

func (o *ListOrganizationInvitationsResponse) MakeDiffFieldMask(other *ListOrganizationInvitationsResponse) *ListOrganizationInvitationsResponse_FieldMask {
	if o == nil && other == nil {
		return &ListOrganizationInvitationsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListOrganizationInvitationsResponse_FieldMask()
	}

	res := &ListOrganizationInvitationsResponse_FieldMask{}

	if len(o.GetOrganizationInvitations()) == len(other.GetOrganizationInvitations()) {
		for i, lValue := range o.GetOrganizationInvitations() {
			rValue := other.GetOrganizationInvitations()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &ListOrganizationInvitationsResponse_FieldTerminalPath{selector: ListOrganizationInvitationsResponse_FieldPathSelectorOrganizationInvitations})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ListOrganizationInvitationsResponse_FieldTerminalPath{selector: ListOrganizationInvitationsResponse_FieldPathSelectorOrganizationInvitations})
	}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &ListOrganizationInvitationsResponse_FieldTerminalPath{selector: ListOrganizationInvitationsResponse_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &ListOrganizationInvitationsResponse_FieldTerminalPath{selector: ListOrganizationInvitationsResponse_FieldPathSelectorNextPageToken})
	}
	if o.GetCurrentOffset() != other.GetCurrentOffset() {
		res.Paths = append(res.Paths, &ListOrganizationInvitationsResponse_FieldTerminalPath{selector: ListOrganizationInvitationsResponse_FieldPathSelectorCurrentOffset})
	}
	if o.GetTotalResultsCount() != other.GetTotalResultsCount() {
		res.Paths = append(res.Paths, &ListOrganizationInvitationsResponse_FieldTerminalPath{selector: ListOrganizationInvitationsResponse_FieldPathSelectorTotalResultsCount})
	}
	return res
}

func (o *ListOrganizationInvitationsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListOrganizationInvitationsResponse))
}

func (o *ListOrganizationInvitationsResponse) Clone() *ListOrganizationInvitationsResponse {
	if o == nil {
		return nil
	}
	result := &ListOrganizationInvitationsResponse{}
	result.OrganizationInvitations = make([]*organization_invitation.OrganizationInvitation, len(o.OrganizationInvitations))
	for i, sourceValue := range o.OrganizationInvitations {
		result.OrganizationInvitations[i] = sourceValue.Clone()
	}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &organization_invitation.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &organization_invitation.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.CurrentOffset = o.CurrentOffset
	result.TotalResultsCount = o.TotalResultsCount
	return result
}

func (o *ListOrganizationInvitationsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListOrganizationInvitationsResponse) Merge(source *ListOrganizationInvitationsResponse) {
	for _, sourceValue := range source.GetOrganizationInvitations() {
		exists := false
		for _, currentValue := range o.OrganizationInvitations {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *organization_invitation.OrganizationInvitation
			if sourceValue != nil {
				newDstElement = new(organization_invitation.OrganizationInvitation)
				newDstElement.Merge(sourceValue)
			}
			o.OrganizationInvitations = append(o.OrganizationInvitations, newDstElement)
		}
	}

	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &organization_invitation.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &organization_invitation.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
	o.CurrentOffset = source.GetCurrentOffset()
	o.TotalResultsCount = source.GetTotalResultsCount()
}

func (o *ListOrganizationInvitationsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListOrganizationInvitationsResponse))
}

func (o *WatchOrganizationInvitationRequest) GotenObjectExt() {}

func (o *WatchOrganizationInvitationRequest) MakeFullFieldMask() *WatchOrganizationInvitationRequest_FieldMask {
	return FullWatchOrganizationInvitationRequest_FieldMask()
}

func (o *WatchOrganizationInvitationRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchOrganizationInvitationRequest_FieldMask()
}

func (o *WatchOrganizationInvitationRequest) MakeDiffFieldMask(other *WatchOrganizationInvitationRequest) *WatchOrganizationInvitationRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchOrganizationInvitationRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchOrganizationInvitationRequest_FieldMask()
	}

	res := &WatchOrganizationInvitationRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &WatchOrganizationInvitationRequest_FieldTerminalPath{selector: WatchOrganizationInvitationRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchOrganizationInvitationRequest_FieldTerminalPath{selector: WatchOrganizationInvitationRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchOrganizationInvitationRequest_FieldTerminalPath{selector: WatchOrganizationInvitationRequest_FieldPathSelectorView})
	}
	return res
}

func (o *WatchOrganizationInvitationRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchOrganizationInvitationRequest))
}

func (o *WatchOrganizationInvitationRequest) Clone() *WatchOrganizationInvitationRequest {
	if o == nil {
		return nil
	}
	result := &WatchOrganizationInvitationRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &organization_invitation.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*organization_invitation.OrganizationInvitation_FieldMask)
	result.View = o.View
	return result
}

func (o *WatchOrganizationInvitationRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchOrganizationInvitationRequest) Merge(source *WatchOrganizationInvitationRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &organization_invitation.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(organization_invitation.OrganizationInvitation_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *WatchOrganizationInvitationRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchOrganizationInvitationRequest))
}

func (o *WatchOrganizationInvitationResponse) GotenObjectExt() {}

func (o *WatchOrganizationInvitationResponse) MakeFullFieldMask() *WatchOrganizationInvitationResponse_FieldMask {
	return FullWatchOrganizationInvitationResponse_FieldMask()
}

func (o *WatchOrganizationInvitationResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchOrganizationInvitationResponse_FieldMask()
}

func (o *WatchOrganizationInvitationResponse) MakeDiffFieldMask(other *WatchOrganizationInvitationResponse) *WatchOrganizationInvitationResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchOrganizationInvitationResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchOrganizationInvitationResponse_FieldMask()
	}

	res := &WatchOrganizationInvitationResponse_FieldMask{}
	if !proto.Equal(o.GetChange(), other.GetChange()) {
		res.Paths = append(res.Paths, &WatchOrganizationInvitationResponse_FieldTerminalPath{selector: WatchOrganizationInvitationResponse_FieldPathSelectorChange})
	}
	return res
}

func (o *WatchOrganizationInvitationResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchOrganizationInvitationResponse))
}

func (o *WatchOrganizationInvitationResponse) Clone() *WatchOrganizationInvitationResponse {
	if o == nil {
		return nil
	}
	result := &WatchOrganizationInvitationResponse{}
	result.Change = proto.Clone(o.Change).(*organization_invitation.OrganizationInvitationChange)
	return result
}

func (o *WatchOrganizationInvitationResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchOrganizationInvitationResponse) Merge(source *WatchOrganizationInvitationResponse) {
	if source.GetChange() != nil {
		if o.Change == nil {
			o.Change = new(organization_invitation.OrganizationInvitationChange)
		}
		proto.Merge(o.Change, source.GetChange())
	}
}

func (o *WatchOrganizationInvitationResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchOrganizationInvitationResponse))
}

func (o *WatchOrganizationInvitationsRequest) GotenObjectExt() {}

func (o *WatchOrganizationInvitationsRequest) MakeFullFieldMask() *WatchOrganizationInvitationsRequest_FieldMask {
	return FullWatchOrganizationInvitationsRequest_FieldMask()
}

func (o *WatchOrganizationInvitationsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchOrganizationInvitationsRequest_FieldMask()
}

func (o *WatchOrganizationInvitationsRequest) MakeDiffFieldMask(other *WatchOrganizationInvitationsRequest) *WatchOrganizationInvitationsRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchOrganizationInvitationsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchOrganizationInvitationsRequest_FieldMask()
	}

	res := &WatchOrganizationInvitationsRequest_FieldMask{}
	if o.GetType() != other.GetType() {
		res.Paths = append(res.Paths, &WatchOrganizationInvitationsRequest_FieldTerminalPath{selector: WatchOrganizationInvitationsRequest_FieldPathSelectorType})
	}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &WatchOrganizationInvitationsRequest_FieldTerminalPath{selector: WatchOrganizationInvitationsRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &WatchOrganizationInvitationsRequest_FieldTerminalPath{selector: WatchOrganizationInvitationsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &WatchOrganizationInvitationsRequest_FieldTerminalPath{selector: WatchOrganizationInvitationsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &WatchOrganizationInvitationsRequest_FieldTerminalPath{selector: WatchOrganizationInvitationsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchOrganizationInvitationsRequest_FieldTerminalPath{selector: WatchOrganizationInvitationsRequest_FieldPathSelectorResumeToken})
	}
	if !proto.Equal(o.GetStartingTime(), other.GetStartingTime()) {
		res.Paths = append(res.Paths, &WatchOrganizationInvitationsRequest_FieldTerminalPath{selector: WatchOrganizationInvitationsRequest_FieldPathSelectorStartingTime})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &WatchOrganizationInvitationsRequest_FieldTerminalPath{selector: WatchOrganizationInvitationsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchOrganizationInvitationsRequest_FieldTerminalPath{selector: WatchOrganizationInvitationsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchOrganizationInvitationsRequest_FieldTerminalPath{selector: WatchOrganizationInvitationsRequest_FieldPathSelectorView})
	}
	if o.GetMaxChunkSize() != other.GetMaxChunkSize() {
		res.Paths = append(res.Paths, &WatchOrganizationInvitationsRequest_FieldTerminalPath{selector: WatchOrganizationInvitationsRequest_FieldPathSelectorMaxChunkSize})
	}
	return res
}

func (o *WatchOrganizationInvitationsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchOrganizationInvitationsRequest))
}

func (o *WatchOrganizationInvitationsRequest) Clone() *WatchOrganizationInvitationsRequest {
	if o == nil {
		return nil
	}
	result := &WatchOrganizationInvitationsRequest{}
	result.Type = o.Type
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &organization_invitation.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &organization_invitation.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &organization_invitation.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.ResumeToken = o.ResumeToken
	result.StartingTime = proto.Clone(o.StartingTime).(*timestamp.Timestamp)
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &organization_invitation.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*organization_invitation.OrganizationInvitation_FieldMask)
	result.View = o.View
	result.MaxChunkSize = o.MaxChunkSize
	return result
}

func (o *WatchOrganizationInvitationsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchOrganizationInvitationsRequest) Merge(source *WatchOrganizationInvitationsRequest) {
	o.Type = source.GetType()
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &organization_invitation.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &organization_invitation.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &organization_invitation.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	o.ResumeToken = source.GetResumeToken()
	if source.GetStartingTime() != nil {
		if o.StartingTime == nil {
			o.StartingTime = new(timestamp.Timestamp)
		}
		proto.Merge(o.StartingTime, source.GetStartingTime())
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &organization_invitation.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(organization_invitation.OrganizationInvitation_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.MaxChunkSize = source.GetMaxChunkSize()
}

func (o *WatchOrganizationInvitationsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchOrganizationInvitationsRequest))
}

func (o *WatchOrganizationInvitationsResponse) GotenObjectExt() {}

func (o *WatchOrganizationInvitationsResponse) MakeFullFieldMask() *WatchOrganizationInvitationsResponse_FieldMask {
	return FullWatchOrganizationInvitationsResponse_FieldMask()
}

func (o *WatchOrganizationInvitationsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchOrganizationInvitationsResponse_FieldMask()
}

func (o *WatchOrganizationInvitationsResponse) MakeDiffFieldMask(other *WatchOrganizationInvitationsResponse) *WatchOrganizationInvitationsResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchOrganizationInvitationsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchOrganizationInvitationsResponse_FieldMask()
	}

	res := &WatchOrganizationInvitationsResponse_FieldMask{}

	if len(o.GetOrganizationInvitationChanges()) == len(other.GetOrganizationInvitationChanges()) {
		for i, lValue := range o.GetOrganizationInvitationChanges() {
			rValue := other.GetOrganizationInvitationChanges()[i]
			if !proto.Equal(lValue, rValue) {
				res.Paths = append(res.Paths, &WatchOrganizationInvitationsResponse_FieldTerminalPath{selector: WatchOrganizationInvitationsResponse_FieldPathSelectorOrganizationInvitationChanges})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &WatchOrganizationInvitationsResponse_FieldTerminalPath{selector: WatchOrganizationInvitationsResponse_FieldPathSelectorOrganizationInvitationChanges})
	}
	if o.GetIsCurrent() != other.GetIsCurrent() {
		res.Paths = append(res.Paths, &WatchOrganizationInvitationsResponse_FieldTerminalPath{selector: WatchOrganizationInvitationsResponse_FieldPathSelectorIsCurrent})
	}
	{
		subMask := o.GetPageTokenChange().MakeDiffFieldMask(other.GetPageTokenChange())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &WatchOrganizationInvitationsResponse_FieldTerminalPath{selector: WatchOrganizationInvitationsResponse_FieldPathSelectorPageTokenChange})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &WatchOrganizationInvitationsResponse_FieldSubPath{selector: WatchOrganizationInvitationsResponse_FieldPathSelectorPageTokenChange, subPath: subpath})
			}
		}
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchOrganizationInvitationsResponse_FieldTerminalPath{selector: WatchOrganizationInvitationsResponse_FieldPathSelectorResumeToken})
	}
	if o.GetSnapshotSize() != other.GetSnapshotSize() {
		res.Paths = append(res.Paths, &WatchOrganizationInvitationsResponse_FieldTerminalPath{selector: WatchOrganizationInvitationsResponse_FieldPathSelectorSnapshotSize})
	}
	if o.GetIsSoftReset() != other.GetIsSoftReset() {
		res.Paths = append(res.Paths, &WatchOrganizationInvitationsResponse_FieldTerminalPath{selector: WatchOrganizationInvitationsResponse_FieldPathSelectorIsSoftReset})
	}
	if o.GetIsHardReset() != other.GetIsHardReset() {
		res.Paths = append(res.Paths, &WatchOrganizationInvitationsResponse_FieldTerminalPath{selector: WatchOrganizationInvitationsResponse_FieldPathSelectorIsHardReset})
	}
	return res
}

func (o *WatchOrganizationInvitationsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchOrganizationInvitationsResponse))
}

func (o *WatchOrganizationInvitationsResponse) Clone() *WatchOrganizationInvitationsResponse {
	if o == nil {
		return nil
	}
	result := &WatchOrganizationInvitationsResponse{}
	result.OrganizationInvitationChanges = make([]*organization_invitation.OrganizationInvitationChange, len(o.OrganizationInvitationChanges))
	for i, sourceValue := range o.OrganizationInvitationChanges {
		result.OrganizationInvitationChanges[i] = proto.Clone(sourceValue).(*organization_invitation.OrganizationInvitationChange)
	}
	result.IsCurrent = o.IsCurrent
	result.PageTokenChange = o.PageTokenChange.Clone()
	result.ResumeToken = o.ResumeToken
	result.SnapshotSize = o.SnapshotSize
	result.IsSoftReset = o.IsSoftReset
	result.IsHardReset = o.IsHardReset
	return result
}

func (o *WatchOrganizationInvitationsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchOrganizationInvitationsResponse) Merge(source *WatchOrganizationInvitationsResponse) {
	for _, sourceValue := range source.GetOrganizationInvitationChanges() {
		exists := false
		for _, currentValue := range o.OrganizationInvitationChanges {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *organization_invitation.OrganizationInvitationChange
			if sourceValue != nil {
				newDstElement = new(organization_invitation.OrganizationInvitationChange)
				proto.Merge(newDstElement, sourceValue)
			}
			o.OrganizationInvitationChanges = append(o.OrganizationInvitationChanges, newDstElement)
		}
	}

	o.IsCurrent = source.GetIsCurrent()
	if source.GetPageTokenChange() != nil {
		if o.PageTokenChange == nil {
			o.PageTokenChange = new(WatchOrganizationInvitationsResponse_PageTokenChange)
		}
		o.PageTokenChange.Merge(source.GetPageTokenChange())
	}
	o.ResumeToken = source.GetResumeToken()
	o.SnapshotSize = source.GetSnapshotSize()
	o.IsSoftReset = source.GetIsSoftReset()
	o.IsHardReset = source.GetIsHardReset()
}

func (o *WatchOrganizationInvitationsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchOrganizationInvitationsResponse))
}

func (o *WatchOrganizationInvitationsResponse_PageTokenChange) GotenObjectExt() {}

func (o *WatchOrganizationInvitationsResponse_PageTokenChange) MakeFullFieldMask() *WatchOrganizationInvitationsResponse_PageTokenChange_FieldMask {
	return FullWatchOrganizationInvitationsResponse_PageTokenChange_FieldMask()
}

func (o *WatchOrganizationInvitationsResponse_PageTokenChange) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchOrganizationInvitationsResponse_PageTokenChange_FieldMask()
}

func (o *WatchOrganizationInvitationsResponse_PageTokenChange) MakeDiffFieldMask(other *WatchOrganizationInvitationsResponse_PageTokenChange) *WatchOrganizationInvitationsResponse_PageTokenChange_FieldMask {
	if o == nil && other == nil {
		return &WatchOrganizationInvitationsResponse_PageTokenChange_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchOrganizationInvitationsResponse_PageTokenChange_FieldMask()
	}

	res := &WatchOrganizationInvitationsResponse_PageTokenChange_FieldMask{}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &WatchOrganizationInvitationsResponsePageTokenChange_FieldTerminalPath{selector: WatchOrganizationInvitationsResponsePageTokenChange_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &WatchOrganizationInvitationsResponsePageTokenChange_FieldTerminalPath{selector: WatchOrganizationInvitationsResponsePageTokenChange_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *WatchOrganizationInvitationsResponse_PageTokenChange) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchOrganizationInvitationsResponse_PageTokenChange))
}

func (o *WatchOrganizationInvitationsResponse_PageTokenChange) Clone() *WatchOrganizationInvitationsResponse_PageTokenChange {
	if o == nil {
		return nil
	}
	result := &WatchOrganizationInvitationsResponse_PageTokenChange{}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &organization_invitation.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &organization_invitation.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *WatchOrganizationInvitationsResponse_PageTokenChange) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchOrganizationInvitationsResponse_PageTokenChange) Merge(source *WatchOrganizationInvitationsResponse_PageTokenChange) {
	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &organization_invitation.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &organization_invitation.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *WatchOrganizationInvitationsResponse_PageTokenChange) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchOrganizationInvitationsResponse_PageTokenChange))
}

func (o *CreateOrganizationInvitationRequest) GotenObjectExt() {}

func (o *CreateOrganizationInvitationRequest) MakeFullFieldMask() *CreateOrganizationInvitationRequest_FieldMask {
	return FullCreateOrganizationInvitationRequest_FieldMask()
}

func (o *CreateOrganizationInvitationRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullCreateOrganizationInvitationRequest_FieldMask()
}

func (o *CreateOrganizationInvitationRequest) MakeDiffFieldMask(other *CreateOrganizationInvitationRequest) *CreateOrganizationInvitationRequest_FieldMask {
	if o == nil && other == nil {
		return &CreateOrganizationInvitationRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullCreateOrganizationInvitationRequest_FieldMask()
	}

	res := &CreateOrganizationInvitationRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &CreateOrganizationInvitationRequest_FieldTerminalPath{selector: CreateOrganizationInvitationRequest_FieldPathSelectorParent})
	}
	{
		subMask := o.GetOrganizationInvitation().MakeDiffFieldMask(other.GetOrganizationInvitation())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &CreateOrganizationInvitationRequest_FieldTerminalPath{selector: CreateOrganizationInvitationRequest_FieldPathSelectorOrganizationInvitation})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &CreateOrganizationInvitationRequest_FieldSubPath{selector: CreateOrganizationInvitationRequest_FieldPathSelectorOrganizationInvitation, subPath: subpath})
			}
		}
	}
	return res
}

func (o *CreateOrganizationInvitationRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*CreateOrganizationInvitationRequest))
}

func (o *CreateOrganizationInvitationRequest) Clone() *CreateOrganizationInvitationRequest {
	if o == nil {
		return nil
	}
	result := &CreateOrganizationInvitationRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &organization_invitation.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.OrganizationInvitation = o.OrganizationInvitation.Clone()
	return result
}

func (o *CreateOrganizationInvitationRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *CreateOrganizationInvitationRequest) Merge(source *CreateOrganizationInvitationRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &organization_invitation.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	if source.GetOrganizationInvitation() != nil {
		if o.OrganizationInvitation == nil {
			o.OrganizationInvitation = new(organization_invitation.OrganizationInvitation)
		}
		o.OrganizationInvitation.Merge(source.GetOrganizationInvitation())
	}
}

func (o *CreateOrganizationInvitationRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*CreateOrganizationInvitationRequest))
}

func (o *UpdateOrganizationInvitationRequest) GotenObjectExt() {}

func (o *UpdateOrganizationInvitationRequest) MakeFullFieldMask() *UpdateOrganizationInvitationRequest_FieldMask {
	return FullUpdateOrganizationInvitationRequest_FieldMask()
}

func (o *UpdateOrganizationInvitationRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateOrganizationInvitationRequest_FieldMask()
}

func (o *UpdateOrganizationInvitationRequest) MakeDiffFieldMask(other *UpdateOrganizationInvitationRequest) *UpdateOrganizationInvitationRequest_FieldMask {
	if o == nil && other == nil {
		return &UpdateOrganizationInvitationRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateOrganizationInvitationRequest_FieldMask()
	}

	res := &UpdateOrganizationInvitationRequest_FieldMask{}
	{
		subMask := o.GetOrganizationInvitation().MakeDiffFieldMask(other.GetOrganizationInvitation())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateOrganizationInvitationRequest_FieldTerminalPath{selector: UpdateOrganizationInvitationRequest_FieldPathSelectorOrganizationInvitation})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateOrganizationInvitationRequest_FieldSubPath{selector: UpdateOrganizationInvitationRequest_FieldPathSelectorOrganizationInvitation, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetUpdateMask(), other.GetUpdateMask()) {
		res.Paths = append(res.Paths, &UpdateOrganizationInvitationRequest_FieldTerminalPath{selector: UpdateOrganizationInvitationRequest_FieldPathSelectorUpdateMask})
	}
	{
		subMask := o.GetCas().MakeDiffFieldMask(other.GetCas())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateOrganizationInvitationRequest_FieldTerminalPath{selector: UpdateOrganizationInvitationRequest_FieldPathSelectorCas})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateOrganizationInvitationRequest_FieldSubPath{selector: UpdateOrganizationInvitationRequest_FieldPathSelectorCas, subPath: subpath})
			}
		}
	}
	if o.GetAllowMissing() != other.GetAllowMissing() {
		res.Paths = append(res.Paths, &UpdateOrganizationInvitationRequest_FieldTerminalPath{selector: UpdateOrganizationInvitationRequest_FieldPathSelectorAllowMissing})
	}
	return res
}

func (o *UpdateOrganizationInvitationRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateOrganizationInvitationRequest))
}

func (o *UpdateOrganizationInvitationRequest) Clone() *UpdateOrganizationInvitationRequest {
	if o == nil {
		return nil
	}
	result := &UpdateOrganizationInvitationRequest{}
	result.OrganizationInvitation = o.OrganizationInvitation.Clone()
	result.UpdateMask = proto.Clone(o.UpdateMask).(*organization_invitation.OrganizationInvitation_FieldMask)
	result.Cas = o.Cas.Clone()
	result.AllowMissing = o.AllowMissing
	return result
}

func (o *UpdateOrganizationInvitationRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateOrganizationInvitationRequest) Merge(source *UpdateOrganizationInvitationRequest) {
	if source.GetOrganizationInvitation() != nil {
		if o.OrganizationInvitation == nil {
			o.OrganizationInvitation = new(organization_invitation.OrganizationInvitation)
		}
		o.OrganizationInvitation.Merge(source.GetOrganizationInvitation())
	}
	if source.GetUpdateMask() != nil {
		if o.UpdateMask == nil {
			o.UpdateMask = new(organization_invitation.OrganizationInvitation_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetUpdateMask().ToProtoFieldMask(), o.UpdateMask.ToProtoFieldMask())
		if err := o.UpdateMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	if source.GetCas() != nil {
		if o.Cas == nil {
			o.Cas = new(UpdateOrganizationInvitationRequest_CAS)
		}
		o.Cas.Merge(source.GetCas())
	}
	o.AllowMissing = source.GetAllowMissing()
}

func (o *UpdateOrganizationInvitationRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateOrganizationInvitationRequest))
}

func (o *UpdateOrganizationInvitationRequest_CAS) GotenObjectExt() {}

func (o *UpdateOrganizationInvitationRequest_CAS) MakeFullFieldMask() *UpdateOrganizationInvitationRequest_CAS_FieldMask {
	return FullUpdateOrganizationInvitationRequest_CAS_FieldMask()
}

func (o *UpdateOrganizationInvitationRequest_CAS) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateOrganizationInvitationRequest_CAS_FieldMask()
}

func (o *UpdateOrganizationInvitationRequest_CAS) MakeDiffFieldMask(other *UpdateOrganizationInvitationRequest_CAS) *UpdateOrganizationInvitationRequest_CAS_FieldMask {
	if o == nil && other == nil {
		return &UpdateOrganizationInvitationRequest_CAS_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateOrganizationInvitationRequest_CAS_FieldMask()
	}

	res := &UpdateOrganizationInvitationRequest_CAS_FieldMask{}
	{
		subMask := o.GetConditionalState().MakeDiffFieldMask(other.GetConditionalState())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateOrganizationInvitationRequestCAS_FieldTerminalPath{selector: UpdateOrganizationInvitationRequestCAS_FieldPathSelectorConditionalState})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateOrganizationInvitationRequestCAS_FieldSubPath{selector: UpdateOrganizationInvitationRequestCAS_FieldPathSelectorConditionalState, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &UpdateOrganizationInvitationRequestCAS_FieldTerminalPath{selector: UpdateOrganizationInvitationRequestCAS_FieldPathSelectorFieldMask})
	}
	return res
}

func (o *UpdateOrganizationInvitationRequest_CAS) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateOrganizationInvitationRequest_CAS))
}

func (o *UpdateOrganizationInvitationRequest_CAS) Clone() *UpdateOrganizationInvitationRequest_CAS {
	if o == nil {
		return nil
	}
	result := &UpdateOrganizationInvitationRequest_CAS{}
	result.ConditionalState = o.ConditionalState.Clone()
	result.FieldMask = proto.Clone(o.FieldMask).(*organization_invitation.OrganizationInvitation_FieldMask)
	return result
}

func (o *UpdateOrganizationInvitationRequest_CAS) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateOrganizationInvitationRequest_CAS) Merge(source *UpdateOrganizationInvitationRequest_CAS) {
	if source.GetConditionalState() != nil {
		if o.ConditionalState == nil {
			o.ConditionalState = new(organization_invitation.OrganizationInvitation)
		}
		o.ConditionalState.Merge(source.GetConditionalState())
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(organization_invitation.OrganizationInvitation_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
}

func (o *UpdateOrganizationInvitationRequest_CAS) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateOrganizationInvitationRequest_CAS))
}

func (o *DeleteOrganizationInvitationRequest) GotenObjectExt() {}

func (o *DeleteOrganizationInvitationRequest) MakeFullFieldMask() *DeleteOrganizationInvitationRequest_FieldMask {
	return FullDeleteOrganizationInvitationRequest_FieldMask()
}

func (o *DeleteOrganizationInvitationRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDeleteOrganizationInvitationRequest_FieldMask()
}

func (o *DeleteOrganizationInvitationRequest) MakeDiffFieldMask(other *DeleteOrganizationInvitationRequest) *DeleteOrganizationInvitationRequest_FieldMask {
	if o == nil && other == nil {
		return &DeleteOrganizationInvitationRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDeleteOrganizationInvitationRequest_FieldMask()
	}

	res := &DeleteOrganizationInvitationRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &DeleteOrganizationInvitationRequest_FieldTerminalPath{selector: DeleteOrganizationInvitationRequest_FieldPathSelectorName})
	}
	return res
}

func (o *DeleteOrganizationInvitationRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*DeleteOrganizationInvitationRequest))
}

func (o *DeleteOrganizationInvitationRequest) Clone() *DeleteOrganizationInvitationRequest {
	if o == nil {
		return nil
	}
	result := &DeleteOrganizationInvitationRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &organization_invitation.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *DeleteOrganizationInvitationRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *DeleteOrganizationInvitationRequest) Merge(source *DeleteOrganizationInvitationRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &organization_invitation.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
}

func (o *DeleteOrganizationInvitationRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*DeleteOrganizationInvitationRequest))
}
