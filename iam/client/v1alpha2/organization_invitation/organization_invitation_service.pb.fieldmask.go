// Code generated by protoc-gen-goten-object
// File: edgelq/iam/proto/v1alpha2/organization_invitation_service.proto
// DO NOT EDIT!!!

package organization_invitation_client

import (
	"encoding/json"
	"strings"

	firestorepb "google.golang.org/genproto/googleapis/firestore/v1"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/organization"
	organization_invitation "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/organization_invitation"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = strings.Builder{}

	_ = firestorepb.Value{}
	_ = codes.NotFound
	_ = status.Status{}
	_ = new(proto.Message)
	_ = new(preflect.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldMask)
)

// make sure we're using proto imports
var (
	_ = &organization.Organization{}
	_ = &organization_invitation.OrganizationInvitation{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

type GetOrganizationInvitationRequest_FieldMask struct {
	Paths []GetOrganizationInvitationRequest_FieldPath
}

func FullGetOrganizationInvitationRequest_FieldMask() *GetOrganizationInvitationRequest_FieldMask {
	res := &GetOrganizationInvitationRequest_FieldMask{}
	res.Paths = append(res.Paths, &GetOrganizationInvitationRequest_FieldTerminalPath{selector: GetOrganizationInvitationRequest_FieldPathSelectorName})
	res.Paths = append(res.Paths, &GetOrganizationInvitationRequest_FieldTerminalPath{selector: GetOrganizationInvitationRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &GetOrganizationInvitationRequest_FieldTerminalPath{selector: GetOrganizationInvitationRequest_FieldPathSelectorView})
	return res
}

func (fieldMask *GetOrganizationInvitationRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *GetOrganizationInvitationRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *GetOrganizationInvitationRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseGetOrganizationInvitationRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *GetOrganizationInvitationRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*GetOrganizationInvitationRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *GetOrganizationInvitationRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseGetOrganizationInvitationRequest_FieldPath(raw)
	})
}

func (fieldMask *GetOrganizationInvitationRequest_FieldMask) ProtoMessage() {}

func (fieldMask *GetOrganizationInvitationRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *GetOrganizationInvitationRequest_FieldMask) Subtract(other *GetOrganizationInvitationRequest_FieldMask) *GetOrganizationInvitationRequest_FieldMask {
	result := &GetOrganizationInvitationRequest_FieldMask{}
	removedSelectors := make([]bool, 3)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *GetOrganizationInvitationRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *GetOrganizationInvitationRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*GetOrganizationInvitationRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *GetOrganizationInvitationRequest_FieldMask) FilterInputFields() *GetOrganizationInvitationRequest_FieldMask {
	result := &GetOrganizationInvitationRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *GetOrganizationInvitationRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *GetOrganizationInvitationRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]GetOrganizationInvitationRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseGetOrganizationInvitationRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask GetOrganizationInvitationRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *GetOrganizationInvitationRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *GetOrganizationInvitationRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask GetOrganizationInvitationRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *GetOrganizationInvitationRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *GetOrganizationInvitationRequest_FieldMask) AppendPath(path GetOrganizationInvitationRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *GetOrganizationInvitationRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(GetOrganizationInvitationRequest_FieldPath))
}

func (fieldMask *GetOrganizationInvitationRequest_FieldMask) GetPaths() []GetOrganizationInvitationRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *GetOrganizationInvitationRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *GetOrganizationInvitationRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseGetOrganizationInvitationRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *GetOrganizationInvitationRequest_FieldMask) Set(target, source *GetOrganizationInvitationRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *GetOrganizationInvitationRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*GetOrganizationInvitationRequest), source.(*GetOrganizationInvitationRequest))
}

func (fieldMask *GetOrganizationInvitationRequest_FieldMask) Project(source *GetOrganizationInvitationRequest) *GetOrganizationInvitationRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &GetOrganizationInvitationRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *GetOrganizationInvitationRequest_FieldTerminalPath:
			switch tp.selector {
			case GetOrganizationInvitationRequest_FieldPathSelectorName:
				result.Name = source.Name
			case GetOrganizationInvitationRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case GetOrganizationInvitationRequest_FieldPathSelectorView:
				result.View = source.View
			}
		}
	}
	return result
}

func (fieldMask *GetOrganizationInvitationRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*GetOrganizationInvitationRequest))
}

func (fieldMask *GetOrganizationInvitationRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type BatchGetOrganizationInvitationsRequest_FieldMask struct {
	Paths []BatchGetOrganizationInvitationsRequest_FieldPath
}

func FullBatchGetOrganizationInvitationsRequest_FieldMask() *BatchGetOrganizationInvitationsRequest_FieldMask {
	res := &BatchGetOrganizationInvitationsRequest_FieldMask{}
	res.Paths = append(res.Paths, &BatchGetOrganizationInvitationsRequest_FieldTerminalPath{selector: BatchGetOrganizationInvitationsRequest_FieldPathSelectorNames})
	res.Paths = append(res.Paths, &BatchGetOrganizationInvitationsRequest_FieldTerminalPath{selector: BatchGetOrganizationInvitationsRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &BatchGetOrganizationInvitationsRequest_FieldTerminalPath{selector: BatchGetOrganizationInvitationsRequest_FieldPathSelectorView})
	return res
}

func (fieldMask *BatchGetOrganizationInvitationsRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *BatchGetOrganizationInvitationsRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *BatchGetOrganizationInvitationsRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseBatchGetOrganizationInvitationsRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *BatchGetOrganizationInvitationsRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*BatchGetOrganizationInvitationsRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *BatchGetOrganizationInvitationsRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseBatchGetOrganizationInvitationsRequest_FieldPath(raw)
	})
}

func (fieldMask *BatchGetOrganizationInvitationsRequest_FieldMask) ProtoMessage() {}

func (fieldMask *BatchGetOrganizationInvitationsRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *BatchGetOrganizationInvitationsRequest_FieldMask) Subtract(other *BatchGetOrganizationInvitationsRequest_FieldMask) *BatchGetOrganizationInvitationsRequest_FieldMask {
	result := &BatchGetOrganizationInvitationsRequest_FieldMask{}
	removedSelectors := make([]bool, 3)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *BatchGetOrganizationInvitationsRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *BatchGetOrganizationInvitationsRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*BatchGetOrganizationInvitationsRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *BatchGetOrganizationInvitationsRequest_FieldMask) FilterInputFields() *BatchGetOrganizationInvitationsRequest_FieldMask {
	result := &BatchGetOrganizationInvitationsRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *BatchGetOrganizationInvitationsRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *BatchGetOrganizationInvitationsRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]BatchGetOrganizationInvitationsRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseBatchGetOrganizationInvitationsRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask BatchGetOrganizationInvitationsRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *BatchGetOrganizationInvitationsRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *BatchGetOrganizationInvitationsRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask BatchGetOrganizationInvitationsRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *BatchGetOrganizationInvitationsRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *BatchGetOrganizationInvitationsRequest_FieldMask) AppendPath(path BatchGetOrganizationInvitationsRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *BatchGetOrganizationInvitationsRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(BatchGetOrganizationInvitationsRequest_FieldPath))
}

func (fieldMask *BatchGetOrganizationInvitationsRequest_FieldMask) GetPaths() []BatchGetOrganizationInvitationsRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *BatchGetOrganizationInvitationsRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *BatchGetOrganizationInvitationsRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseBatchGetOrganizationInvitationsRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *BatchGetOrganizationInvitationsRequest_FieldMask) Set(target, source *BatchGetOrganizationInvitationsRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *BatchGetOrganizationInvitationsRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*BatchGetOrganizationInvitationsRequest), source.(*BatchGetOrganizationInvitationsRequest))
}

func (fieldMask *BatchGetOrganizationInvitationsRequest_FieldMask) Project(source *BatchGetOrganizationInvitationsRequest) *BatchGetOrganizationInvitationsRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &BatchGetOrganizationInvitationsRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *BatchGetOrganizationInvitationsRequest_FieldTerminalPath:
			switch tp.selector {
			case BatchGetOrganizationInvitationsRequest_FieldPathSelectorNames:
				result.Names = source.Names
			case BatchGetOrganizationInvitationsRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case BatchGetOrganizationInvitationsRequest_FieldPathSelectorView:
				result.View = source.View
			}
		}
	}
	return result
}

func (fieldMask *BatchGetOrganizationInvitationsRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*BatchGetOrganizationInvitationsRequest))
}

func (fieldMask *BatchGetOrganizationInvitationsRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type BatchGetOrganizationInvitationsResponse_FieldMask struct {
	Paths []BatchGetOrganizationInvitationsResponse_FieldPath
}

func FullBatchGetOrganizationInvitationsResponse_FieldMask() *BatchGetOrganizationInvitationsResponse_FieldMask {
	res := &BatchGetOrganizationInvitationsResponse_FieldMask{}
	res.Paths = append(res.Paths, &BatchGetOrganizationInvitationsResponse_FieldTerminalPath{selector: BatchGetOrganizationInvitationsResponse_FieldPathSelectorOrganizationInvitations})
	res.Paths = append(res.Paths, &BatchGetOrganizationInvitationsResponse_FieldTerminalPath{selector: BatchGetOrganizationInvitationsResponse_FieldPathSelectorMissing})
	return res
}

func (fieldMask *BatchGetOrganizationInvitationsResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *BatchGetOrganizationInvitationsResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *BatchGetOrganizationInvitationsResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseBatchGetOrganizationInvitationsResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *BatchGetOrganizationInvitationsResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*BatchGetOrganizationInvitationsResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *BatchGetOrganizationInvitationsResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseBatchGetOrganizationInvitationsResponse_FieldPath(raw)
	})
}

func (fieldMask *BatchGetOrganizationInvitationsResponse_FieldMask) ProtoMessage() {}

func (fieldMask *BatchGetOrganizationInvitationsResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *BatchGetOrganizationInvitationsResponse_FieldMask) Subtract(other *BatchGetOrganizationInvitationsResponse_FieldMask) *BatchGetOrganizationInvitationsResponse_FieldMask {
	result := &BatchGetOrganizationInvitationsResponse_FieldMask{}
	removedSelectors := make([]bool, 2)
	otherSubMasks := map[BatchGetOrganizationInvitationsResponse_FieldPathSelector]gotenobject.FieldMask{
		BatchGetOrganizationInvitationsResponse_FieldPathSelectorOrganizationInvitations: &organization_invitation.OrganizationInvitation_FieldMask{},
	}
	mySubMasks := map[BatchGetOrganizationInvitationsResponse_FieldPathSelector]gotenobject.FieldMask{
		BatchGetOrganizationInvitationsResponse_FieldPathSelectorOrganizationInvitations: &organization_invitation.OrganizationInvitation_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *BatchGetOrganizationInvitationsResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *BatchGetOrganizationInvitationsResponse_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*BatchGetOrganizationInvitationsResponse_FieldTerminalPath); ok {
					switch tp.selector {
					case BatchGetOrganizationInvitationsResponse_FieldPathSelectorOrganizationInvitations:
						mySubMasks[BatchGetOrganizationInvitationsResponse_FieldPathSelectorOrganizationInvitations] = organization_invitation.FullOrganizationInvitation_FieldMask()
					}
				} else if tp, ok := path.(*BatchGetOrganizationInvitationsResponse_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &BatchGetOrganizationInvitationsResponse_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *BatchGetOrganizationInvitationsResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*BatchGetOrganizationInvitationsResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *BatchGetOrganizationInvitationsResponse_FieldMask) FilterInputFields() *BatchGetOrganizationInvitationsResponse_FieldMask {
	result := &BatchGetOrganizationInvitationsResponse_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case BatchGetOrganizationInvitationsResponse_FieldPathSelectorOrganizationInvitations:
			if _, ok := path.(*BatchGetOrganizationInvitationsResponse_FieldTerminalPath); ok {
				for _, subpath := range organization_invitation.FullOrganizationInvitation_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &BatchGetOrganizationInvitationsResponse_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*BatchGetOrganizationInvitationsResponse_FieldSubPath); ok {
				selectedMask := &organization_invitation.OrganizationInvitation_FieldMask{
					Paths: []organization_invitation.OrganizationInvitation_FieldPath{sub.subPath.(organization_invitation.OrganizationInvitation_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &BatchGetOrganizationInvitationsResponse_FieldSubPath{selector: BatchGetOrganizationInvitationsResponse_FieldPathSelectorOrganizationInvitations, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *BatchGetOrganizationInvitationsResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *BatchGetOrganizationInvitationsResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]BatchGetOrganizationInvitationsResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseBatchGetOrganizationInvitationsResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask BatchGetOrganizationInvitationsResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *BatchGetOrganizationInvitationsResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *BatchGetOrganizationInvitationsResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask BatchGetOrganizationInvitationsResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *BatchGetOrganizationInvitationsResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *BatchGetOrganizationInvitationsResponse_FieldMask) AppendPath(path BatchGetOrganizationInvitationsResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *BatchGetOrganizationInvitationsResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(BatchGetOrganizationInvitationsResponse_FieldPath))
}

func (fieldMask *BatchGetOrganizationInvitationsResponse_FieldMask) GetPaths() []BatchGetOrganizationInvitationsResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *BatchGetOrganizationInvitationsResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *BatchGetOrganizationInvitationsResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseBatchGetOrganizationInvitationsResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *BatchGetOrganizationInvitationsResponse_FieldMask) Set(target, source *BatchGetOrganizationInvitationsResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *BatchGetOrganizationInvitationsResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*BatchGetOrganizationInvitationsResponse), source.(*BatchGetOrganizationInvitationsResponse))
}

func (fieldMask *BatchGetOrganizationInvitationsResponse_FieldMask) Project(source *BatchGetOrganizationInvitationsResponse) *BatchGetOrganizationInvitationsResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &BatchGetOrganizationInvitationsResponse{}
	organizationInvitationsMask := &organization_invitation.OrganizationInvitation_FieldMask{}
	wholeOrganizationInvitationsAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *BatchGetOrganizationInvitationsResponse_FieldTerminalPath:
			switch tp.selector {
			case BatchGetOrganizationInvitationsResponse_FieldPathSelectorOrganizationInvitations:
				result.OrganizationInvitations = source.OrganizationInvitations
				wholeOrganizationInvitationsAccepted = true
			case BatchGetOrganizationInvitationsResponse_FieldPathSelectorMissing:
				result.Missing = source.Missing
			}
		case *BatchGetOrganizationInvitationsResponse_FieldSubPath:
			switch tp.selector {
			case BatchGetOrganizationInvitationsResponse_FieldPathSelectorOrganizationInvitations:
				organizationInvitationsMask.AppendPath(tp.subPath.(organization_invitation.OrganizationInvitation_FieldPath))
			}
		}
	}
	if wholeOrganizationInvitationsAccepted == false && len(organizationInvitationsMask.Paths) > 0 {
		for _, sourceItem := range source.GetOrganizationInvitations() {
			result.OrganizationInvitations = append(result.OrganizationInvitations, organizationInvitationsMask.Project(sourceItem))
		}
	}
	return result
}

func (fieldMask *BatchGetOrganizationInvitationsResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*BatchGetOrganizationInvitationsResponse))
}

func (fieldMask *BatchGetOrganizationInvitationsResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type ListOrganizationInvitationsRequest_FieldMask struct {
	Paths []ListOrganizationInvitationsRequest_FieldPath
}

func FullListOrganizationInvitationsRequest_FieldMask() *ListOrganizationInvitationsRequest_FieldMask {
	res := &ListOrganizationInvitationsRequest_FieldMask{}
	res.Paths = append(res.Paths, &ListOrganizationInvitationsRequest_FieldTerminalPath{selector: ListOrganizationInvitationsRequest_FieldPathSelectorParent})
	res.Paths = append(res.Paths, &ListOrganizationInvitationsRequest_FieldTerminalPath{selector: ListOrganizationInvitationsRequest_FieldPathSelectorPageSize})
	res.Paths = append(res.Paths, &ListOrganizationInvitationsRequest_FieldTerminalPath{selector: ListOrganizationInvitationsRequest_FieldPathSelectorPageToken})
	res.Paths = append(res.Paths, &ListOrganizationInvitationsRequest_FieldTerminalPath{selector: ListOrganizationInvitationsRequest_FieldPathSelectorOrderBy})
	res.Paths = append(res.Paths, &ListOrganizationInvitationsRequest_FieldTerminalPath{selector: ListOrganizationInvitationsRequest_FieldPathSelectorFilter})
	res.Paths = append(res.Paths, &ListOrganizationInvitationsRequest_FieldTerminalPath{selector: ListOrganizationInvitationsRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &ListOrganizationInvitationsRequest_FieldTerminalPath{selector: ListOrganizationInvitationsRequest_FieldPathSelectorView})
	res.Paths = append(res.Paths, &ListOrganizationInvitationsRequest_FieldTerminalPath{selector: ListOrganizationInvitationsRequest_FieldPathSelectorIncludePagingInfo})
	return res
}

func (fieldMask *ListOrganizationInvitationsRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *ListOrganizationInvitationsRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *ListOrganizationInvitationsRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseListOrganizationInvitationsRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *ListOrganizationInvitationsRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 8)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*ListOrganizationInvitationsRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *ListOrganizationInvitationsRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseListOrganizationInvitationsRequest_FieldPath(raw)
	})
}

func (fieldMask *ListOrganizationInvitationsRequest_FieldMask) ProtoMessage() {}

func (fieldMask *ListOrganizationInvitationsRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *ListOrganizationInvitationsRequest_FieldMask) Subtract(other *ListOrganizationInvitationsRequest_FieldMask) *ListOrganizationInvitationsRequest_FieldMask {
	result := &ListOrganizationInvitationsRequest_FieldMask{}
	removedSelectors := make([]bool, 8)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *ListOrganizationInvitationsRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *ListOrganizationInvitationsRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*ListOrganizationInvitationsRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *ListOrganizationInvitationsRequest_FieldMask) FilterInputFields() *ListOrganizationInvitationsRequest_FieldMask {
	result := &ListOrganizationInvitationsRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *ListOrganizationInvitationsRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *ListOrganizationInvitationsRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]ListOrganizationInvitationsRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseListOrganizationInvitationsRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask ListOrganizationInvitationsRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *ListOrganizationInvitationsRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ListOrganizationInvitationsRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask ListOrganizationInvitationsRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *ListOrganizationInvitationsRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ListOrganizationInvitationsRequest_FieldMask) AppendPath(path ListOrganizationInvitationsRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *ListOrganizationInvitationsRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(ListOrganizationInvitationsRequest_FieldPath))
}

func (fieldMask *ListOrganizationInvitationsRequest_FieldMask) GetPaths() []ListOrganizationInvitationsRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *ListOrganizationInvitationsRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *ListOrganizationInvitationsRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseListOrganizationInvitationsRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *ListOrganizationInvitationsRequest_FieldMask) Set(target, source *ListOrganizationInvitationsRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *ListOrganizationInvitationsRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*ListOrganizationInvitationsRequest), source.(*ListOrganizationInvitationsRequest))
}

func (fieldMask *ListOrganizationInvitationsRequest_FieldMask) Project(source *ListOrganizationInvitationsRequest) *ListOrganizationInvitationsRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &ListOrganizationInvitationsRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *ListOrganizationInvitationsRequest_FieldTerminalPath:
			switch tp.selector {
			case ListOrganizationInvitationsRequest_FieldPathSelectorParent:
				result.Parent = source.Parent
			case ListOrganizationInvitationsRequest_FieldPathSelectorPageSize:
				result.PageSize = source.PageSize
			case ListOrganizationInvitationsRequest_FieldPathSelectorPageToken:
				result.PageToken = source.PageToken
			case ListOrganizationInvitationsRequest_FieldPathSelectorOrderBy:
				result.OrderBy = source.OrderBy
			case ListOrganizationInvitationsRequest_FieldPathSelectorFilter:
				result.Filter = source.Filter
			case ListOrganizationInvitationsRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case ListOrganizationInvitationsRequest_FieldPathSelectorView:
				result.View = source.View
			case ListOrganizationInvitationsRequest_FieldPathSelectorIncludePagingInfo:
				result.IncludePagingInfo = source.IncludePagingInfo
			}
		}
	}
	return result
}

func (fieldMask *ListOrganizationInvitationsRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*ListOrganizationInvitationsRequest))
}

func (fieldMask *ListOrganizationInvitationsRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type ListOrganizationInvitationsResponse_FieldMask struct {
	Paths []ListOrganizationInvitationsResponse_FieldPath
}

func FullListOrganizationInvitationsResponse_FieldMask() *ListOrganizationInvitationsResponse_FieldMask {
	res := &ListOrganizationInvitationsResponse_FieldMask{}
	res.Paths = append(res.Paths, &ListOrganizationInvitationsResponse_FieldTerminalPath{selector: ListOrganizationInvitationsResponse_FieldPathSelectorOrganizationInvitations})
	res.Paths = append(res.Paths, &ListOrganizationInvitationsResponse_FieldTerminalPath{selector: ListOrganizationInvitationsResponse_FieldPathSelectorPrevPageToken})
	res.Paths = append(res.Paths, &ListOrganizationInvitationsResponse_FieldTerminalPath{selector: ListOrganizationInvitationsResponse_FieldPathSelectorNextPageToken})
	res.Paths = append(res.Paths, &ListOrganizationInvitationsResponse_FieldTerminalPath{selector: ListOrganizationInvitationsResponse_FieldPathSelectorCurrentOffset})
	res.Paths = append(res.Paths, &ListOrganizationInvitationsResponse_FieldTerminalPath{selector: ListOrganizationInvitationsResponse_FieldPathSelectorTotalResultsCount})
	return res
}

func (fieldMask *ListOrganizationInvitationsResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *ListOrganizationInvitationsResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *ListOrganizationInvitationsResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseListOrganizationInvitationsResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *ListOrganizationInvitationsResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 5)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*ListOrganizationInvitationsResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *ListOrganizationInvitationsResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseListOrganizationInvitationsResponse_FieldPath(raw)
	})
}

func (fieldMask *ListOrganizationInvitationsResponse_FieldMask) ProtoMessage() {}

func (fieldMask *ListOrganizationInvitationsResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *ListOrganizationInvitationsResponse_FieldMask) Subtract(other *ListOrganizationInvitationsResponse_FieldMask) *ListOrganizationInvitationsResponse_FieldMask {
	result := &ListOrganizationInvitationsResponse_FieldMask{}
	removedSelectors := make([]bool, 5)
	otherSubMasks := map[ListOrganizationInvitationsResponse_FieldPathSelector]gotenobject.FieldMask{
		ListOrganizationInvitationsResponse_FieldPathSelectorOrganizationInvitations: &organization_invitation.OrganizationInvitation_FieldMask{},
	}
	mySubMasks := map[ListOrganizationInvitationsResponse_FieldPathSelector]gotenobject.FieldMask{
		ListOrganizationInvitationsResponse_FieldPathSelectorOrganizationInvitations: &organization_invitation.OrganizationInvitation_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *ListOrganizationInvitationsResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *ListOrganizationInvitationsResponse_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*ListOrganizationInvitationsResponse_FieldTerminalPath); ok {
					switch tp.selector {
					case ListOrganizationInvitationsResponse_FieldPathSelectorOrganizationInvitations:
						mySubMasks[ListOrganizationInvitationsResponse_FieldPathSelectorOrganizationInvitations] = organization_invitation.FullOrganizationInvitation_FieldMask()
					}
				} else if tp, ok := path.(*ListOrganizationInvitationsResponse_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &ListOrganizationInvitationsResponse_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *ListOrganizationInvitationsResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*ListOrganizationInvitationsResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *ListOrganizationInvitationsResponse_FieldMask) FilterInputFields() *ListOrganizationInvitationsResponse_FieldMask {
	result := &ListOrganizationInvitationsResponse_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case ListOrganizationInvitationsResponse_FieldPathSelectorOrganizationInvitations:
			if _, ok := path.(*ListOrganizationInvitationsResponse_FieldTerminalPath); ok {
				for _, subpath := range organization_invitation.FullOrganizationInvitation_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &ListOrganizationInvitationsResponse_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*ListOrganizationInvitationsResponse_FieldSubPath); ok {
				selectedMask := &organization_invitation.OrganizationInvitation_FieldMask{
					Paths: []organization_invitation.OrganizationInvitation_FieldPath{sub.subPath.(organization_invitation.OrganizationInvitation_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &ListOrganizationInvitationsResponse_FieldSubPath{selector: ListOrganizationInvitationsResponse_FieldPathSelectorOrganizationInvitations, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *ListOrganizationInvitationsResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *ListOrganizationInvitationsResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]ListOrganizationInvitationsResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseListOrganizationInvitationsResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask ListOrganizationInvitationsResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *ListOrganizationInvitationsResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ListOrganizationInvitationsResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask ListOrganizationInvitationsResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *ListOrganizationInvitationsResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ListOrganizationInvitationsResponse_FieldMask) AppendPath(path ListOrganizationInvitationsResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *ListOrganizationInvitationsResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(ListOrganizationInvitationsResponse_FieldPath))
}

func (fieldMask *ListOrganizationInvitationsResponse_FieldMask) GetPaths() []ListOrganizationInvitationsResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *ListOrganizationInvitationsResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *ListOrganizationInvitationsResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseListOrganizationInvitationsResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *ListOrganizationInvitationsResponse_FieldMask) Set(target, source *ListOrganizationInvitationsResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *ListOrganizationInvitationsResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*ListOrganizationInvitationsResponse), source.(*ListOrganizationInvitationsResponse))
}

func (fieldMask *ListOrganizationInvitationsResponse_FieldMask) Project(source *ListOrganizationInvitationsResponse) *ListOrganizationInvitationsResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &ListOrganizationInvitationsResponse{}
	organizationInvitationsMask := &organization_invitation.OrganizationInvitation_FieldMask{}
	wholeOrganizationInvitationsAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *ListOrganizationInvitationsResponse_FieldTerminalPath:
			switch tp.selector {
			case ListOrganizationInvitationsResponse_FieldPathSelectorOrganizationInvitations:
				result.OrganizationInvitations = source.OrganizationInvitations
				wholeOrganizationInvitationsAccepted = true
			case ListOrganizationInvitationsResponse_FieldPathSelectorPrevPageToken:
				result.PrevPageToken = source.PrevPageToken
			case ListOrganizationInvitationsResponse_FieldPathSelectorNextPageToken:
				result.NextPageToken = source.NextPageToken
			case ListOrganizationInvitationsResponse_FieldPathSelectorCurrentOffset:
				result.CurrentOffset = source.CurrentOffset
			case ListOrganizationInvitationsResponse_FieldPathSelectorTotalResultsCount:
				result.TotalResultsCount = source.TotalResultsCount
			}
		case *ListOrganizationInvitationsResponse_FieldSubPath:
			switch tp.selector {
			case ListOrganizationInvitationsResponse_FieldPathSelectorOrganizationInvitations:
				organizationInvitationsMask.AppendPath(tp.subPath.(organization_invitation.OrganizationInvitation_FieldPath))
			}
		}
	}
	if wholeOrganizationInvitationsAccepted == false && len(organizationInvitationsMask.Paths) > 0 {
		for _, sourceItem := range source.GetOrganizationInvitations() {
			result.OrganizationInvitations = append(result.OrganizationInvitations, organizationInvitationsMask.Project(sourceItem))
		}
	}
	return result
}

func (fieldMask *ListOrganizationInvitationsResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*ListOrganizationInvitationsResponse))
}

func (fieldMask *ListOrganizationInvitationsResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchOrganizationInvitationRequest_FieldMask struct {
	Paths []WatchOrganizationInvitationRequest_FieldPath
}

func FullWatchOrganizationInvitationRequest_FieldMask() *WatchOrganizationInvitationRequest_FieldMask {
	res := &WatchOrganizationInvitationRequest_FieldMask{}
	res.Paths = append(res.Paths, &WatchOrganizationInvitationRequest_FieldTerminalPath{selector: WatchOrganizationInvitationRequest_FieldPathSelectorName})
	res.Paths = append(res.Paths, &WatchOrganizationInvitationRequest_FieldTerminalPath{selector: WatchOrganizationInvitationRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &WatchOrganizationInvitationRequest_FieldTerminalPath{selector: WatchOrganizationInvitationRequest_FieldPathSelectorView})
	return res
}

func (fieldMask *WatchOrganizationInvitationRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchOrganizationInvitationRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchOrganizationInvitationRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchOrganizationInvitationRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchOrganizationInvitationRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchOrganizationInvitationRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchOrganizationInvitationRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchOrganizationInvitationRequest_FieldPath(raw)
	})
}

func (fieldMask *WatchOrganizationInvitationRequest_FieldMask) ProtoMessage() {}

func (fieldMask *WatchOrganizationInvitationRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchOrganizationInvitationRequest_FieldMask) Subtract(other *WatchOrganizationInvitationRequest_FieldMask) *WatchOrganizationInvitationRequest_FieldMask {
	result := &WatchOrganizationInvitationRequest_FieldMask{}
	removedSelectors := make([]bool, 3)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchOrganizationInvitationRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchOrganizationInvitationRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchOrganizationInvitationRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchOrganizationInvitationRequest_FieldMask) FilterInputFields() *WatchOrganizationInvitationRequest_FieldMask {
	result := &WatchOrganizationInvitationRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchOrganizationInvitationRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchOrganizationInvitationRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchOrganizationInvitationRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchOrganizationInvitationRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchOrganizationInvitationRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchOrganizationInvitationRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchOrganizationInvitationRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchOrganizationInvitationRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchOrganizationInvitationRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchOrganizationInvitationRequest_FieldMask) AppendPath(path WatchOrganizationInvitationRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchOrganizationInvitationRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchOrganizationInvitationRequest_FieldPath))
}

func (fieldMask *WatchOrganizationInvitationRequest_FieldMask) GetPaths() []WatchOrganizationInvitationRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchOrganizationInvitationRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchOrganizationInvitationRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchOrganizationInvitationRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchOrganizationInvitationRequest_FieldMask) Set(target, source *WatchOrganizationInvitationRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchOrganizationInvitationRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchOrganizationInvitationRequest), source.(*WatchOrganizationInvitationRequest))
}

func (fieldMask *WatchOrganizationInvitationRequest_FieldMask) Project(source *WatchOrganizationInvitationRequest) *WatchOrganizationInvitationRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchOrganizationInvitationRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchOrganizationInvitationRequest_FieldTerminalPath:
			switch tp.selector {
			case WatchOrganizationInvitationRequest_FieldPathSelectorName:
				result.Name = source.Name
			case WatchOrganizationInvitationRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case WatchOrganizationInvitationRequest_FieldPathSelectorView:
				result.View = source.View
			}
		}
	}
	return result
}

func (fieldMask *WatchOrganizationInvitationRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchOrganizationInvitationRequest))
}

func (fieldMask *WatchOrganizationInvitationRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchOrganizationInvitationResponse_FieldMask struct {
	Paths []WatchOrganizationInvitationResponse_FieldPath
}

func FullWatchOrganizationInvitationResponse_FieldMask() *WatchOrganizationInvitationResponse_FieldMask {
	res := &WatchOrganizationInvitationResponse_FieldMask{}
	res.Paths = append(res.Paths, &WatchOrganizationInvitationResponse_FieldTerminalPath{selector: WatchOrganizationInvitationResponse_FieldPathSelectorChange})
	return res
}

func (fieldMask *WatchOrganizationInvitationResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchOrganizationInvitationResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchOrganizationInvitationResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchOrganizationInvitationResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchOrganizationInvitationResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 1)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchOrganizationInvitationResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchOrganizationInvitationResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchOrganizationInvitationResponse_FieldPath(raw)
	})
}

func (fieldMask *WatchOrganizationInvitationResponse_FieldMask) ProtoMessage() {}

func (fieldMask *WatchOrganizationInvitationResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchOrganizationInvitationResponse_FieldMask) Subtract(other *WatchOrganizationInvitationResponse_FieldMask) *WatchOrganizationInvitationResponse_FieldMask {
	result := &WatchOrganizationInvitationResponse_FieldMask{}
	removedSelectors := make([]bool, 1)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchOrganizationInvitationResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchOrganizationInvitationResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchOrganizationInvitationResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchOrganizationInvitationResponse_FieldMask) FilterInputFields() *WatchOrganizationInvitationResponse_FieldMask {
	result := &WatchOrganizationInvitationResponse_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchOrganizationInvitationResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchOrganizationInvitationResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchOrganizationInvitationResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchOrganizationInvitationResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchOrganizationInvitationResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchOrganizationInvitationResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchOrganizationInvitationResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchOrganizationInvitationResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchOrganizationInvitationResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchOrganizationInvitationResponse_FieldMask) AppendPath(path WatchOrganizationInvitationResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchOrganizationInvitationResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchOrganizationInvitationResponse_FieldPath))
}

func (fieldMask *WatchOrganizationInvitationResponse_FieldMask) GetPaths() []WatchOrganizationInvitationResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchOrganizationInvitationResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchOrganizationInvitationResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchOrganizationInvitationResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchOrganizationInvitationResponse_FieldMask) Set(target, source *WatchOrganizationInvitationResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchOrganizationInvitationResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchOrganizationInvitationResponse), source.(*WatchOrganizationInvitationResponse))
}

func (fieldMask *WatchOrganizationInvitationResponse_FieldMask) Project(source *WatchOrganizationInvitationResponse) *WatchOrganizationInvitationResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchOrganizationInvitationResponse{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchOrganizationInvitationResponse_FieldTerminalPath:
			switch tp.selector {
			case WatchOrganizationInvitationResponse_FieldPathSelectorChange:
				result.Change = source.Change
			}
		}
	}
	return result
}

func (fieldMask *WatchOrganizationInvitationResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchOrganizationInvitationResponse))
}

func (fieldMask *WatchOrganizationInvitationResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchOrganizationInvitationsRequest_FieldMask struct {
	Paths []WatchOrganizationInvitationsRequest_FieldPath
}

func FullWatchOrganizationInvitationsRequest_FieldMask() *WatchOrganizationInvitationsRequest_FieldMask {
	res := &WatchOrganizationInvitationsRequest_FieldMask{}
	res.Paths = append(res.Paths, &WatchOrganizationInvitationsRequest_FieldTerminalPath{selector: WatchOrganizationInvitationsRequest_FieldPathSelectorType})
	res.Paths = append(res.Paths, &WatchOrganizationInvitationsRequest_FieldTerminalPath{selector: WatchOrganizationInvitationsRequest_FieldPathSelectorParent})
	res.Paths = append(res.Paths, &WatchOrganizationInvitationsRequest_FieldTerminalPath{selector: WatchOrganizationInvitationsRequest_FieldPathSelectorPageSize})
	res.Paths = append(res.Paths, &WatchOrganizationInvitationsRequest_FieldTerminalPath{selector: WatchOrganizationInvitationsRequest_FieldPathSelectorPageToken})
	res.Paths = append(res.Paths, &WatchOrganizationInvitationsRequest_FieldTerminalPath{selector: WatchOrganizationInvitationsRequest_FieldPathSelectorOrderBy})
	res.Paths = append(res.Paths, &WatchOrganizationInvitationsRequest_FieldTerminalPath{selector: WatchOrganizationInvitationsRequest_FieldPathSelectorResumeToken})
	res.Paths = append(res.Paths, &WatchOrganizationInvitationsRequest_FieldTerminalPath{selector: WatchOrganizationInvitationsRequest_FieldPathSelectorStartingTime})
	res.Paths = append(res.Paths, &WatchOrganizationInvitationsRequest_FieldTerminalPath{selector: WatchOrganizationInvitationsRequest_FieldPathSelectorFilter})
	res.Paths = append(res.Paths, &WatchOrganizationInvitationsRequest_FieldTerminalPath{selector: WatchOrganizationInvitationsRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &WatchOrganizationInvitationsRequest_FieldTerminalPath{selector: WatchOrganizationInvitationsRequest_FieldPathSelectorView})
	res.Paths = append(res.Paths, &WatchOrganizationInvitationsRequest_FieldTerminalPath{selector: WatchOrganizationInvitationsRequest_FieldPathSelectorMaxChunkSize})
	return res
}

func (fieldMask *WatchOrganizationInvitationsRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchOrganizationInvitationsRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchOrganizationInvitationsRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchOrganizationInvitationsRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchOrganizationInvitationsRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 11)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchOrganizationInvitationsRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchOrganizationInvitationsRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchOrganizationInvitationsRequest_FieldPath(raw)
	})
}

func (fieldMask *WatchOrganizationInvitationsRequest_FieldMask) ProtoMessage() {}

func (fieldMask *WatchOrganizationInvitationsRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchOrganizationInvitationsRequest_FieldMask) Subtract(other *WatchOrganizationInvitationsRequest_FieldMask) *WatchOrganizationInvitationsRequest_FieldMask {
	result := &WatchOrganizationInvitationsRequest_FieldMask{}
	removedSelectors := make([]bool, 11)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchOrganizationInvitationsRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchOrganizationInvitationsRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchOrganizationInvitationsRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchOrganizationInvitationsRequest_FieldMask) FilterInputFields() *WatchOrganizationInvitationsRequest_FieldMask {
	result := &WatchOrganizationInvitationsRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchOrganizationInvitationsRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchOrganizationInvitationsRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchOrganizationInvitationsRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchOrganizationInvitationsRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchOrganizationInvitationsRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchOrganizationInvitationsRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchOrganizationInvitationsRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchOrganizationInvitationsRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchOrganizationInvitationsRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchOrganizationInvitationsRequest_FieldMask) AppendPath(path WatchOrganizationInvitationsRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchOrganizationInvitationsRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchOrganizationInvitationsRequest_FieldPath))
}

func (fieldMask *WatchOrganizationInvitationsRequest_FieldMask) GetPaths() []WatchOrganizationInvitationsRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchOrganizationInvitationsRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchOrganizationInvitationsRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchOrganizationInvitationsRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchOrganizationInvitationsRequest_FieldMask) Set(target, source *WatchOrganizationInvitationsRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchOrganizationInvitationsRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchOrganizationInvitationsRequest), source.(*WatchOrganizationInvitationsRequest))
}

func (fieldMask *WatchOrganizationInvitationsRequest_FieldMask) Project(source *WatchOrganizationInvitationsRequest) *WatchOrganizationInvitationsRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchOrganizationInvitationsRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchOrganizationInvitationsRequest_FieldTerminalPath:
			switch tp.selector {
			case WatchOrganizationInvitationsRequest_FieldPathSelectorType:
				result.Type = source.Type
			case WatchOrganizationInvitationsRequest_FieldPathSelectorParent:
				result.Parent = source.Parent
			case WatchOrganizationInvitationsRequest_FieldPathSelectorPageSize:
				result.PageSize = source.PageSize
			case WatchOrganizationInvitationsRequest_FieldPathSelectorPageToken:
				result.PageToken = source.PageToken
			case WatchOrganizationInvitationsRequest_FieldPathSelectorOrderBy:
				result.OrderBy = source.OrderBy
			case WatchOrganizationInvitationsRequest_FieldPathSelectorResumeToken:
				result.ResumeToken = source.ResumeToken
			case WatchOrganizationInvitationsRequest_FieldPathSelectorStartingTime:
				result.StartingTime = source.StartingTime
			case WatchOrganizationInvitationsRequest_FieldPathSelectorFilter:
				result.Filter = source.Filter
			case WatchOrganizationInvitationsRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case WatchOrganizationInvitationsRequest_FieldPathSelectorView:
				result.View = source.View
			case WatchOrganizationInvitationsRequest_FieldPathSelectorMaxChunkSize:
				result.MaxChunkSize = source.MaxChunkSize
			}
		}
	}
	return result
}

func (fieldMask *WatchOrganizationInvitationsRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchOrganizationInvitationsRequest))
}

func (fieldMask *WatchOrganizationInvitationsRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchOrganizationInvitationsResponse_FieldMask struct {
	Paths []WatchOrganizationInvitationsResponse_FieldPath
}

func FullWatchOrganizationInvitationsResponse_FieldMask() *WatchOrganizationInvitationsResponse_FieldMask {
	res := &WatchOrganizationInvitationsResponse_FieldMask{}
	res.Paths = append(res.Paths, &WatchOrganizationInvitationsResponse_FieldTerminalPath{selector: WatchOrganizationInvitationsResponse_FieldPathSelectorOrganizationInvitationChanges})
	res.Paths = append(res.Paths, &WatchOrganizationInvitationsResponse_FieldTerminalPath{selector: WatchOrganizationInvitationsResponse_FieldPathSelectorIsCurrent})
	res.Paths = append(res.Paths, &WatchOrganizationInvitationsResponse_FieldTerminalPath{selector: WatchOrganizationInvitationsResponse_FieldPathSelectorPageTokenChange})
	res.Paths = append(res.Paths, &WatchOrganizationInvitationsResponse_FieldTerminalPath{selector: WatchOrganizationInvitationsResponse_FieldPathSelectorResumeToken})
	res.Paths = append(res.Paths, &WatchOrganizationInvitationsResponse_FieldTerminalPath{selector: WatchOrganizationInvitationsResponse_FieldPathSelectorSnapshotSize})
	res.Paths = append(res.Paths, &WatchOrganizationInvitationsResponse_FieldTerminalPath{selector: WatchOrganizationInvitationsResponse_FieldPathSelectorIsSoftReset})
	res.Paths = append(res.Paths, &WatchOrganizationInvitationsResponse_FieldTerminalPath{selector: WatchOrganizationInvitationsResponse_FieldPathSelectorIsHardReset})
	return res
}

func (fieldMask *WatchOrganizationInvitationsResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchOrganizationInvitationsResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchOrganizationInvitationsResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchOrganizationInvitationsResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchOrganizationInvitationsResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 7)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchOrganizationInvitationsResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchOrganizationInvitationsResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchOrganizationInvitationsResponse_FieldPath(raw)
	})
}

func (fieldMask *WatchOrganizationInvitationsResponse_FieldMask) ProtoMessage() {}

func (fieldMask *WatchOrganizationInvitationsResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchOrganizationInvitationsResponse_FieldMask) Subtract(other *WatchOrganizationInvitationsResponse_FieldMask) *WatchOrganizationInvitationsResponse_FieldMask {
	result := &WatchOrganizationInvitationsResponse_FieldMask{}
	removedSelectors := make([]bool, 7)
	otherSubMasks := map[WatchOrganizationInvitationsResponse_FieldPathSelector]gotenobject.FieldMask{
		WatchOrganizationInvitationsResponse_FieldPathSelectorPageTokenChange: &WatchOrganizationInvitationsResponse_PageTokenChange_FieldMask{},
	}
	mySubMasks := map[WatchOrganizationInvitationsResponse_FieldPathSelector]gotenobject.FieldMask{
		WatchOrganizationInvitationsResponse_FieldPathSelectorPageTokenChange: &WatchOrganizationInvitationsResponse_PageTokenChange_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchOrganizationInvitationsResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *WatchOrganizationInvitationsResponse_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*WatchOrganizationInvitationsResponse_FieldTerminalPath); ok {
					switch tp.selector {
					case WatchOrganizationInvitationsResponse_FieldPathSelectorPageTokenChange:
						mySubMasks[WatchOrganizationInvitationsResponse_FieldPathSelectorPageTokenChange] = FullWatchOrganizationInvitationsResponse_PageTokenChange_FieldMask()
					}
				} else if tp, ok := path.(*WatchOrganizationInvitationsResponse_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &WatchOrganizationInvitationsResponse_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchOrganizationInvitationsResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchOrganizationInvitationsResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchOrganizationInvitationsResponse_FieldMask) FilterInputFields() *WatchOrganizationInvitationsResponse_FieldMask {
	result := &WatchOrganizationInvitationsResponse_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchOrganizationInvitationsResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchOrganizationInvitationsResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchOrganizationInvitationsResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchOrganizationInvitationsResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchOrganizationInvitationsResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchOrganizationInvitationsResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchOrganizationInvitationsResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchOrganizationInvitationsResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchOrganizationInvitationsResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchOrganizationInvitationsResponse_FieldMask) AppendPath(path WatchOrganizationInvitationsResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchOrganizationInvitationsResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchOrganizationInvitationsResponse_FieldPath))
}

func (fieldMask *WatchOrganizationInvitationsResponse_FieldMask) GetPaths() []WatchOrganizationInvitationsResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchOrganizationInvitationsResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchOrganizationInvitationsResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchOrganizationInvitationsResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchOrganizationInvitationsResponse_FieldMask) Set(target, source *WatchOrganizationInvitationsResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchOrganizationInvitationsResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchOrganizationInvitationsResponse), source.(*WatchOrganizationInvitationsResponse))
}

func (fieldMask *WatchOrganizationInvitationsResponse_FieldMask) Project(source *WatchOrganizationInvitationsResponse) *WatchOrganizationInvitationsResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchOrganizationInvitationsResponse{}
	pageTokenChangeMask := &WatchOrganizationInvitationsResponse_PageTokenChange_FieldMask{}
	wholePageTokenChangeAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchOrganizationInvitationsResponse_FieldTerminalPath:
			switch tp.selector {
			case WatchOrganizationInvitationsResponse_FieldPathSelectorOrganizationInvitationChanges:
				result.OrganizationInvitationChanges = source.OrganizationInvitationChanges
			case WatchOrganizationInvitationsResponse_FieldPathSelectorIsCurrent:
				result.IsCurrent = source.IsCurrent
			case WatchOrganizationInvitationsResponse_FieldPathSelectorPageTokenChange:
				result.PageTokenChange = source.PageTokenChange
				wholePageTokenChangeAccepted = true
			case WatchOrganizationInvitationsResponse_FieldPathSelectorResumeToken:
				result.ResumeToken = source.ResumeToken
			case WatchOrganizationInvitationsResponse_FieldPathSelectorSnapshotSize:
				result.SnapshotSize = source.SnapshotSize
			case WatchOrganizationInvitationsResponse_FieldPathSelectorIsSoftReset:
				result.IsSoftReset = source.IsSoftReset
			case WatchOrganizationInvitationsResponse_FieldPathSelectorIsHardReset:
				result.IsHardReset = source.IsHardReset
			}
		case *WatchOrganizationInvitationsResponse_FieldSubPath:
			switch tp.selector {
			case WatchOrganizationInvitationsResponse_FieldPathSelectorPageTokenChange:
				pageTokenChangeMask.AppendPath(tp.subPath.(WatchOrganizationInvitationsResponsePageTokenChange_FieldPath))
			}
		}
	}
	if wholePageTokenChangeAccepted == false && len(pageTokenChangeMask.Paths) > 0 {
		result.PageTokenChange = pageTokenChangeMask.Project(source.GetPageTokenChange())
	}
	return result
}

func (fieldMask *WatchOrganizationInvitationsResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchOrganizationInvitationsResponse))
}

func (fieldMask *WatchOrganizationInvitationsResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchOrganizationInvitationsResponse_PageTokenChange_FieldMask struct {
	Paths []WatchOrganizationInvitationsResponsePageTokenChange_FieldPath
}

func FullWatchOrganizationInvitationsResponse_PageTokenChange_FieldMask() *WatchOrganizationInvitationsResponse_PageTokenChange_FieldMask {
	res := &WatchOrganizationInvitationsResponse_PageTokenChange_FieldMask{}
	res.Paths = append(res.Paths, &WatchOrganizationInvitationsResponsePageTokenChange_FieldTerminalPath{selector: WatchOrganizationInvitationsResponsePageTokenChange_FieldPathSelectorPrevPageToken})
	res.Paths = append(res.Paths, &WatchOrganizationInvitationsResponsePageTokenChange_FieldTerminalPath{selector: WatchOrganizationInvitationsResponsePageTokenChange_FieldPathSelectorNextPageToken})
	return res
}

func (fieldMask *WatchOrganizationInvitationsResponse_PageTokenChange_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchOrganizationInvitationsResponse_PageTokenChange_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchOrganizationInvitationsResponse_PageTokenChange_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchOrganizationInvitationsResponsePageTokenChange_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchOrganizationInvitationsResponse_PageTokenChange_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchOrganizationInvitationsResponsePageTokenChange_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchOrganizationInvitationsResponse_PageTokenChange_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchOrganizationInvitationsResponsePageTokenChange_FieldPath(raw)
	})
}

func (fieldMask *WatchOrganizationInvitationsResponse_PageTokenChange_FieldMask) ProtoMessage() {}

func (fieldMask *WatchOrganizationInvitationsResponse_PageTokenChange_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchOrganizationInvitationsResponse_PageTokenChange_FieldMask) Subtract(other *WatchOrganizationInvitationsResponse_PageTokenChange_FieldMask) *WatchOrganizationInvitationsResponse_PageTokenChange_FieldMask {
	result := &WatchOrganizationInvitationsResponse_PageTokenChange_FieldMask{}
	removedSelectors := make([]bool, 2)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchOrganizationInvitationsResponsePageTokenChange_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchOrganizationInvitationsResponse_PageTokenChange_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchOrganizationInvitationsResponse_PageTokenChange_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchOrganizationInvitationsResponse_PageTokenChange_FieldMask) FilterInputFields() *WatchOrganizationInvitationsResponse_PageTokenChange_FieldMask {
	result := &WatchOrganizationInvitationsResponse_PageTokenChange_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchOrganizationInvitationsResponse_PageTokenChange_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchOrganizationInvitationsResponse_PageTokenChange_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchOrganizationInvitationsResponsePageTokenChange_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchOrganizationInvitationsResponsePageTokenChange_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchOrganizationInvitationsResponse_PageTokenChange_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchOrganizationInvitationsResponse_PageTokenChange_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchOrganizationInvitationsResponse_PageTokenChange_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchOrganizationInvitationsResponse_PageTokenChange_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchOrganizationInvitationsResponse_PageTokenChange_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchOrganizationInvitationsResponse_PageTokenChange_FieldMask) AppendPath(path WatchOrganizationInvitationsResponsePageTokenChange_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchOrganizationInvitationsResponse_PageTokenChange_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchOrganizationInvitationsResponsePageTokenChange_FieldPath))
}

func (fieldMask *WatchOrganizationInvitationsResponse_PageTokenChange_FieldMask) GetPaths() []WatchOrganizationInvitationsResponsePageTokenChange_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchOrganizationInvitationsResponse_PageTokenChange_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchOrganizationInvitationsResponse_PageTokenChange_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchOrganizationInvitationsResponsePageTokenChange_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchOrganizationInvitationsResponse_PageTokenChange_FieldMask) Set(target, source *WatchOrganizationInvitationsResponse_PageTokenChange) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchOrganizationInvitationsResponse_PageTokenChange_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchOrganizationInvitationsResponse_PageTokenChange), source.(*WatchOrganizationInvitationsResponse_PageTokenChange))
}

func (fieldMask *WatchOrganizationInvitationsResponse_PageTokenChange_FieldMask) Project(source *WatchOrganizationInvitationsResponse_PageTokenChange) *WatchOrganizationInvitationsResponse_PageTokenChange {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchOrganizationInvitationsResponse_PageTokenChange{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchOrganizationInvitationsResponsePageTokenChange_FieldTerminalPath:
			switch tp.selector {
			case WatchOrganizationInvitationsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
				result.PrevPageToken = source.PrevPageToken
			case WatchOrganizationInvitationsResponsePageTokenChange_FieldPathSelectorNextPageToken:
				result.NextPageToken = source.NextPageToken
			}
		}
	}
	return result
}

func (fieldMask *WatchOrganizationInvitationsResponse_PageTokenChange_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchOrganizationInvitationsResponse_PageTokenChange))
}

func (fieldMask *WatchOrganizationInvitationsResponse_PageTokenChange_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type CreateOrganizationInvitationRequest_FieldMask struct {
	Paths []CreateOrganizationInvitationRequest_FieldPath
}

func FullCreateOrganizationInvitationRequest_FieldMask() *CreateOrganizationInvitationRequest_FieldMask {
	res := &CreateOrganizationInvitationRequest_FieldMask{}
	res.Paths = append(res.Paths, &CreateOrganizationInvitationRequest_FieldTerminalPath{selector: CreateOrganizationInvitationRequest_FieldPathSelectorParent})
	res.Paths = append(res.Paths, &CreateOrganizationInvitationRequest_FieldTerminalPath{selector: CreateOrganizationInvitationRequest_FieldPathSelectorOrganizationInvitation})
	return res
}

func (fieldMask *CreateOrganizationInvitationRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *CreateOrganizationInvitationRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *CreateOrganizationInvitationRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseCreateOrganizationInvitationRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *CreateOrganizationInvitationRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*CreateOrganizationInvitationRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *CreateOrganizationInvitationRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseCreateOrganizationInvitationRequest_FieldPath(raw)
	})
}

func (fieldMask *CreateOrganizationInvitationRequest_FieldMask) ProtoMessage() {}

func (fieldMask *CreateOrganizationInvitationRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *CreateOrganizationInvitationRequest_FieldMask) Subtract(other *CreateOrganizationInvitationRequest_FieldMask) *CreateOrganizationInvitationRequest_FieldMask {
	result := &CreateOrganizationInvitationRequest_FieldMask{}
	removedSelectors := make([]bool, 2)
	otherSubMasks := map[CreateOrganizationInvitationRequest_FieldPathSelector]gotenobject.FieldMask{
		CreateOrganizationInvitationRequest_FieldPathSelectorOrganizationInvitation: &organization_invitation.OrganizationInvitation_FieldMask{},
	}
	mySubMasks := map[CreateOrganizationInvitationRequest_FieldPathSelector]gotenobject.FieldMask{
		CreateOrganizationInvitationRequest_FieldPathSelectorOrganizationInvitation: &organization_invitation.OrganizationInvitation_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *CreateOrganizationInvitationRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *CreateOrganizationInvitationRequest_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*CreateOrganizationInvitationRequest_FieldTerminalPath); ok {
					switch tp.selector {
					case CreateOrganizationInvitationRequest_FieldPathSelectorOrganizationInvitation:
						mySubMasks[CreateOrganizationInvitationRequest_FieldPathSelectorOrganizationInvitation] = organization_invitation.FullOrganizationInvitation_FieldMask()
					}
				} else if tp, ok := path.(*CreateOrganizationInvitationRequest_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &CreateOrganizationInvitationRequest_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *CreateOrganizationInvitationRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*CreateOrganizationInvitationRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *CreateOrganizationInvitationRequest_FieldMask) FilterInputFields() *CreateOrganizationInvitationRequest_FieldMask {
	result := &CreateOrganizationInvitationRequest_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case CreateOrganizationInvitationRequest_FieldPathSelectorOrganizationInvitation:
			if _, ok := path.(*CreateOrganizationInvitationRequest_FieldTerminalPath); ok {
				for _, subpath := range organization_invitation.FullOrganizationInvitation_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &CreateOrganizationInvitationRequest_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*CreateOrganizationInvitationRequest_FieldSubPath); ok {
				selectedMask := &organization_invitation.OrganizationInvitation_FieldMask{
					Paths: []organization_invitation.OrganizationInvitation_FieldPath{sub.subPath.(organization_invitation.OrganizationInvitation_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &CreateOrganizationInvitationRequest_FieldSubPath{selector: CreateOrganizationInvitationRequest_FieldPathSelectorOrganizationInvitation, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *CreateOrganizationInvitationRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *CreateOrganizationInvitationRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]CreateOrganizationInvitationRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseCreateOrganizationInvitationRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask CreateOrganizationInvitationRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *CreateOrganizationInvitationRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *CreateOrganizationInvitationRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask CreateOrganizationInvitationRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *CreateOrganizationInvitationRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *CreateOrganizationInvitationRequest_FieldMask) AppendPath(path CreateOrganizationInvitationRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *CreateOrganizationInvitationRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(CreateOrganizationInvitationRequest_FieldPath))
}

func (fieldMask *CreateOrganizationInvitationRequest_FieldMask) GetPaths() []CreateOrganizationInvitationRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *CreateOrganizationInvitationRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *CreateOrganizationInvitationRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseCreateOrganizationInvitationRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *CreateOrganizationInvitationRequest_FieldMask) Set(target, source *CreateOrganizationInvitationRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *CreateOrganizationInvitationRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*CreateOrganizationInvitationRequest), source.(*CreateOrganizationInvitationRequest))
}

func (fieldMask *CreateOrganizationInvitationRequest_FieldMask) Project(source *CreateOrganizationInvitationRequest) *CreateOrganizationInvitationRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &CreateOrganizationInvitationRequest{}
	organizationInvitationMask := &organization_invitation.OrganizationInvitation_FieldMask{}
	wholeOrganizationInvitationAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *CreateOrganizationInvitationRequest_FieldTerminalPath:
			switch tp.selector {
			case CreateOrganizationInvitationRequest_FieldPathSelectorParent:
				result.Parent = source.Parent
			case CreateOrganizationInvitationRequest_FieldPathSelectorOrganizationInvitation:
				result.OrganizationInvitation = source.OrganizationInvitation
				wholeOrganizationInvitationAccepted = true
			}
		case *CreateOrganizationInvitationRequest_FieldSubPath:
			switch tp.selector {
			case CreateOrganizationInvitationRequest_FieldPathSelectorOrganizationInvitation:
				organizationInvitationMask.AppendPath(tp.subPath.(organization_invitation.OrganizationInvitation_FieldPath))
			}
		}
	}
	if wholeOrganizationInvitationAccepted == false && len(organizationInvitationMask.Paths) > 0 {
		result.OrganizationInvitation = organizationInvitationMask.Project(source.GetOrganizationInvitation())
	}
	return result
}

func (fieldMask *CreateOrganizationInvitationRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*CreateOrganizationInvitationRequest))
}

func (fieldMask *CreateOrganizationInvitationRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type UpdateOrganizationInvitationRequest_FieldMask struct {
	Paths []UpdateOrganizationInvitationRequest_FieldPath
}

func FullUpdateOrganizationInvitationRequest_FieldMask() *UpdateOrganizationInvitationRequest_FieldMask {
	res := &UpdateOrganizationInvitationRequest_FieldMask{}
	res.Paths = append(res.Paths, &UpdateOrganizationInvitationRequest_FieldTerminalPath{selector: UpdateOrganizationInvitationRequest_FieldPathSelectorOrganizationInvitation})
	res.Paths = append(res.Paths, &UpdateOrganizationInvitationRequest_FieldTerminalPath{selector: UpdateOrganizationInvitationRequest_FieldPathSelectorUpdateMask})
	res.Paths = append(res.Paths, &UpdateOrganizationInvitationRequest_FieldTerminalPath{selector: UpdateOrganizationInvitationRequest_FieldPathSelectorCas})
	return res
}

func (fieldMask *UpdateOrganizationInvitationRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *UpdateOrganizationInvitationRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *UpdateOrganizationInvitationRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseUpdateOrganizationInvitationRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *UpdateOrganizationInvitationRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*UpdateOrganizationInvitationRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *UpdateOrganizationInvitationRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseUpdateOrganizationInvitationRequest_FieldPath(raw)
	})
}

func (fieldMask *UpdateOrganizationInvitationRequest_FieldMask) ProtoMessage() {}

func (fieldMask *UpdateOrganizationInvitationRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *UpdateOrganizationInvitationRequest_FieldMask) Subtract(other *UpdateOrganizationInvitationRequest_FieldMask) *UpdateOrganizationInvitationRequest_FieldMask {
	result := &UpdateOrganizationInvitationRequest_FieldMask{}
	removedSelectors := make([]bool, 3)
	otherSubMasks := map[UpdateOrganizationInvitationRequest_FieldPathSelector]gotenobject.FieldMask{
		UpdateOrganizationInvitationRequest_FieldPathSelectorOrganizationInvitation: &organization_invitation.OrganizationInvitation_FieldMask{},
		UpdateOrganizationInvitationRequest_FieldPathSelectorCas:                    &UpdateOrganizationInvitationRequest_CAS_FieldMask{},
	}
	mySubMasks := map[UpdateOrganizationInvitationRequest_FieldPathSelector]gotenobject.FieldMask{
		UpdateOrganizationInvitationRequest_FieldPathSelectorOrganizationInvitation: &organization_invitation.OrganizationInvitation_FieldMask{},
		UpdateOrganizationInvitationRequest_FieldPathSelectorCas:                    &UpdateOrganizationInvitationRequest_CAS_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *UpdateOrganizationInvitationRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *UpdateOrganizationInvitationRequest_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*UpdateOrganizationInvitationRequest_FieldTerminalPath); ok {
					switch tp.selector {
					case UpdateOrganizationInvitationRequest_FieldPathSelectorOrganizationInvitation:
						mySubMasks[UpdateOrganizationInvitationRequest_FieldPathSelectorOrganizationInvitation] = organization_invitation.FullOrganizationInvitation_FieldMask()
					case UpdateOrganizationInvitationRequest_FieldPathSelectorCas:
						mySubMasks[UpdateOrganizationInvitationRequest_FieldPathSelectorCas] = FullUpdateOrganizationInvitationRequest_CAS_FieldMask()
					}
				} else if tp, ok := path.(*UpdateOrganizationInvitationRequest_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &UpdateOrganizationInvitationRequest_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *UpdateOrganizationInvitationRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*UpdateOrganizationInvitationRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *UpdateOrganizationInvitationRequest_FieldMask) FilterInputFields() *UpdateOrganizationInvitationRequest_FieldMask {
	result := &UpdateOrganizationInvitationRequest_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case UpdateOrganizationInvitationRequest_FieldPathSelectorOrganizationInvitation:
			if _, ok := path.(*UpdateOrganizationInvitationRequest_FieldTerminalPath); ok {
				for _, subpath := range organization_invitation.FullOrganizationInvitation_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateOrganizationInvitationRequest_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*UpdateOrganizationInvitationRequest_FieldSubPath); ok {
				selectedMask := &organization_invitation.OrganizationInvitation_FieldMask{
					Paths: []organization_invitation.OrganizationInvitation_FieldPath{sub.subPath.(organization_invitation.OrganizationInvitation_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateOrganizationInvitationRequest_FieldSubPath{selector: UpdateOrganizationInvitationRequest_FieldPathSelectorOrganizationInvitation, subPath: allowedPath})
				}
			}
		case UpdateOrganizationInvitationRequest_FieldPathSelectorCas:
			if _, ok := path.(*UpdateOrganizationInvitationRequest_FieldTerminalPath); ok {
				for _, subpath := range FullUpdateOrganizationInvitationRequest_CAS_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateOrganizationInvitationRequest_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*UpdateOrganizationInvitationRequest_FieldSubPath); ok {
				selectedMask := &UpdateOrganizationInvitationRequest_CAS_FieldMask{
					Paths: []UpdateOrganizationInvitationRequestCAS_FieldPath{sub.subPath.(UpdateOrganizationInvitationRequestCAS_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateOrganizationInvitationRequest_FieldSubPath{selector: UpdateOrganizationInvitationRequest_FieldPathSelectorCas, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *UpdateOrganizationInvitationRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *UpdateOrganizationInvitationRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]UpdateOrganizationInvitationRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseUpdateOrganizationInvitationRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask UpdateOrganizationInvitationRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *UpdateOrganizationInvitationRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *UpdateOrganizationInvitationRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask UpdateOrganizationInvitationRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *UpdateOrganizationInvitationRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *UpdateOrganizationInvitationRequest_FieldMask) AppendPath(path UpdateOrganizationInvitationRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *UpdateOrganizationInvitationRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(UpdateOrganizationInvitationRequest_FieldPath))
}

func (fieldMask *UpdateOrganizationInvitationRequest_FieldMask) GetPaths() []UpdateOrganizationInvitationRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *UpdateOrganizationInvitationRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *UpdateOrganizationInvitationRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseUpdateOrganizationInvitationRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *UpdateOrganizationInvitationRequest_FieldMask) Set(target, source *UpdateOrganizationInvitationRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *UpdateOrganizationInvitationRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*UpdateOrganizationInvitationRequest), source.(*UpdateOrganizationInvitationRequest))
}

func (fieldMask *UpdateOrganizationInvitationRequest_FieldMask) Project(source *UpdateOrganizationInvitationRequest) *UpdateOrganizationInvitationRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &UpdateOrganizationInvitationRequest{}
	organizationInvitationMask := &organization_invitation.OrganizationInvitation_FieldMask{}
	wholeOrganizationInvitationAccepted := false
	casMask := &UpdateOrganizationInvitationRequest_CAS_FieldMask{}
	wholeCasAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *UpdateOrganizationInvitationRequest_FieldTerminalPath:
			switch tp.selector {
			case UpdateOrganizationInvitationRequest_FieldPathSelectorOrganizationInvitation:
				result.OrganizationInvitation = source.OrganizationInvitation
				wholeOrganizationInvitationAccepted = true
			case UpdateOrganizationInvitationRequest_FieldPathSelectorUpdateMask:
				result.UpdateMask = source.UpdateMask
			case UpdateOrganizationInvitationRequest_FieldPathSelectorCas:
				result.Cas = source.Cas
				wholeCasAccepted = true
			}
		case *UpdateOrganizationInvitationRequest_FieldSubPath:
			switch tp.selector {
			case UpdateOrganizationInvitationRequest_FieldPathSelectorOrganizationInvitation:
				organizationInvitationMask.AppendPath(tp.subPath.(organization_invitation.OrganizationInvitation_FieldPath))
			case UpdateOrganizationInvitationRequest_FieldPathSelectorCas:
				casMask.AppendPath(tp.subPath.(UpdateOrganizationInvitationRequestCAS_FieldPath))
			}
		}
	}
	if wholeOrganizationInvitationAccepted == false && len(organizationInvitationMask.Paths) > 0 {
		result.OrganizationInvitation = organizationInvitationMask.Project(source.GetOrganizationInvitation())
	}
	if wholeCasAccepted == false && len(casMask.Paths) > 0 {
		result.Cas = casMask.Project(source.GetCas())
	}
	return result
}

func (fieldMask *UpdateOrganizationInvitationRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*UpdateOrganizationInvitationRequest))
}

func (fieldMask *UpdateOrganizationInvitationRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type UpdateOrganizationInvitationRequest_CAS_FieldMask struct {
	Paths []UpdateOrganizationInvitationRequestCAS_FieldPath
}

func FullUpdateOrganizationInvitationRequest_CAS_FieldMask() *UpdateOrganizationInvitationRequest_CAS_FieldMask {
	res := &UpdateOrganizationInvitationRequest_CAS_FieldMask{}
	res.Paths = append(res.Paths, &UpdateOrganizationInvitationRequestCAS_FieldTerminalPath{selector: UpdateOrganizationInvitationRequestCAS_FieldPathSelectorConditionalState})
	res.Paths = append(res.Paths, &UpdateOrganizationInvitationRequestCAS_FieldTerminalPath{selector: UpdateOrganizationInvitationRequestCAS_FieldPathSelectorFieldMask})
	return res
}

func (fieldMask *UpdateOrganizationInvitationRequest_CAS_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *UpdateOrganizationInvitationRequest_CAS_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *UpdateOrganizationInvitationRequest_CAS_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseUpdateOrganizationInvitationRequestCAS_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *UpdateOrganizationInvitationRequest_CAS_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*UpdateOrganizationInvitationRequestCAS_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *UpdateOrganizationInvitationRequest_CAS_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseUpdateOrganizationInvitationRequestCAS_FieldPath(raw)
	})
}

func (fieldMask *UpdateOrganizationInvitationRequest_CAS_FieldMask) ProtoMessage() {}

func (fieldMask *UpdateOrganizationInvitationRequest_CAS_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *UpdateOrganizationInvitationRequest_CAS_FieldMask) Subtract(other *UpdateOrganizationInvitationRequest_CAS_FieldMask) *UpdateOrganizationInvitationRequest_CAS_FieldMask {
	result := &UpdateOrganizationInvitationRequest_CAS_FieldMask{}
	removedSelectors := make([]bool, 2)
	otherSubMasks := map[UpdateOrganizationInvitationRequestCAS_FieldPathSelector]gotenobject.FieldMask{
		UpdateOrganizationInvitationRequestCAS_FieldPathSelectorConditionalState: &organization_invitation.OrganizationInvitation_FieldMask{},
	}
	mySubMasks := map[UpdateOrganizationInvitationRequestCAS_FieldPathSelector]gotenobject.FieldMask{
		UpdateOrganizationInvitationRequestCAS_FieldPathSelectorConditionalState: &organization_invitation.OrganizationInvitation_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *UpdateOrganizationInvitationRequestCAS_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *UpdateOrganizationInvitationRequestCAS_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*UpdateOrganizationInvitationRequestCAS_FieldTerminalPath); ok {
					switch tp.selector {
					case UpdateOrganizationInvitationRequestCAS_FieldPathSelectorConditionalState:
						mySubMasks[UpdateOrganizationInvitationRequestCAS_FieldPathSelectorConditionalState] = organization_invitation.FullOrganizationInvitation_FieldMask()
					}
				} else if tp, ok := path.(*UpdateOrganizationInvitationRequestCAS_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &UpdateOrganizationInvitationRequestCAS_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *UpdateOrganizationInvitationRequest_CAS_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*UpdateOrganizationInvitationRequest_CAS_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *UpdateOrganizationInvitationRequest_CAS_FieldMask) FilterInputFields() *UpdateOrganizationInvitationRequest_CAS_FieldMask {
	result := &UpdateOrganizationInvitationRequest_CAS_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case UpdateOrganizationInvitationRequestCAS_FieldPathSelectorConditionalState:
			if _, ok := path.(*UpdateOrganizationInvitationRequestCAS_FieldTerminalPath); ok {
				for _, subpath := range organization_invitation.FullOrganizationInvitation_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateOrganizationInvitationRequestCAS_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*UpdateOrganizationInvitationRequestCAS_FieldSubPath); ok {
				selectedMask := &organization_invitation.OrganizationInvitation_FieldMask{
					Paths: []organization_invitation.OrganizationInvitation_FieldPath{sub.subPath.(organization_invitation.OrganizationInvitation_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateOrganizationInvitationRequestCAS_FieldSubPath{selector: UpdateOrganizationInvitationRequestCAS_FieldPathSelectorConditionalState, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *UpdateOrganizationInvitationRequest_CAS_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *UpdateOrganizationInvitationRequest_CAS_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]UpdateOrganizationInvitationRequestCAS_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseUpdateOrganizationInvitationRequestCAS_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask UpdateOrganizationInvitationRequest_CAS_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *UpdateOrganizationInvitationRequest_CAS_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *UpdateOrganizationInvitationRequest_CAS_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask UpdateOrganizationInvitationRequest_CAS_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *UpdateOrganizationInvitationRequest_CAS_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *UpdateOrganizationInvitationRequest_CAS_FieldMask) AppendPath(path UpdateOrganizationInvitationRequestCAS_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *UpdateOrganizationInvitationRequest_CAS_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(UpdateOrganizationInvitationRequestCAS_FieldPath))
}

func (fieldMask *UpdateOrganizationInvitationRequest_CAS_FieldMask) GetPaths() []UpdateOrganizationInvitationRequestCAS_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *UpdateOrganizationInvitationRequest_CAS_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *UpdateOrganizationInvitationRequest_CAS_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseUpdateOrganizationInvitationRequestCAS_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *UpdateOrganizationInvitationRequest_CAS_FieldMask) Set(target, source *UpdateOrganizationInvitationRequest_CAS) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *UpdateOrganizationInvitationRequest_CAS_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*UpdateOrganizationInvitationRequest_CAS), source.(*UpdateOrganizationInvitationRequest_CAS))
}

func (fieldMask *UpdateOrganizationInvitationRequest_CAS_FieldMask) Project(source *UpdateOrganizationInvitationRequest_CAS) *UpdateOrganizationInvitationRequest_CAS {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &UpdateOrganizationInvitationRequest_CAS{}
	conditionalStateMask := &organization_invitation.OrganizationInvitation_FieldMask{}
	wholeConditionalStateAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *UpdateOrganizationInvitationRequestCAS_FieldTerminalPath:
			switch tp.selector {
			case UpdateOrganizationInvitationRequestCAS_FieldPathSelectorConditionalState:
				result.ConditionalState = source.ConditionalState
				wholeConditionalStateAccepted = true
			case UpdateOrganizationInvitationRequestCAS_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			}
		case *UpdateOrganizationInvitationRequestCAS_FieldSubPath:
			switch tp.selector {
			case UpdateOrganizationInvitationRequestCAS_FieldPathSelectorConditionalState:
				conditionalStateMask.AppendPath(tp.subPath.(organization_invitation.OrganizationInvitation_FieldPath))
			}
		}
	}
	if wholeConditionalStateAccepted == false && len(conditionalStateMask.Paths) > 0 {
		result.ConditionalState = conditionalStateMask.Project(source.GetConditionalState())
	}
	return result
}

func (fieldMask *UpdateOrganizationInvitationRequest_CAS_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*UpdateOrganizationInvitationRequest_CAS))
}

func (fieldMask *UpdateOrganizationInvitationRequest_CAS_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type DeleteOrganizationInvitationRequest_FieldMask struct {
	Paths []DeleteOrganizationInvitationRequest_FieldPath
}

func FullDeleteOrganizationInvitationRequest_FieldMask() *DeleteOrganizationInvitationRequest_FieldMask {
	res := &DeleteOrganizationInvitationRequest_FieldMask{}
	res.Paths = append(res.Paths, &DeleteOrganizationInvitationRequest_FieldTerminalPath{selector: DeleteOrganizationInvitationRequest_FieldPathSelectorName})
	return res
}

func (fieldMask *DeleteOrganizationInvitationRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *DeleteOrganizationInvitationRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *DeleteOrganizationInvitationRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseDeleteOrganizationInvitationRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *DeleteOrganizationInvitationRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 1)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*DeleteOrganizationInvitationRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *DeleteOrganizationInvitationRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseDeleteOrganizationInvitationRequest_FieldPath(raw)
	})
}

func (fieldMask *DeleteOrganizationInvitationRequest_FieldMask) ProtoMessage() {}

func (fieldMask *DeleteOrganizationInvitationRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *DeleteOrganizationInvitationRequest_FieldMask) Subtract(other *DeleteOrganizationInvitationRequest_FieldMask) *DeleteOrganizationInvitationRequest_FieldMask {
	result := &DeleteOrganizationInvitationRequest_FieldMask{}
	removedSelectors := make([]bool, 1)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *DeleteOrganizationInvitationRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *DeleteOrganizationInvitationRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*DeleteOrganizationInvitationRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *DeleteOrganizationInvitationRequest_FieldMask) FilterInputFields() *DeleteOrganizationInvitationRequest_FieldMask {
	result := &DeleteOrganizationInvitationRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *DeleteOrganizationInvitationRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *DeleteOrganizationInvitationRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]DeleteOrganizationInvitationRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseDeleteOrganizationInvitationRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask DeleteOrganizationInvitationRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *DeleteOrganizationInvitationRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *DeleteOrganizationInvitationRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask DeleteOrganizationInvitationRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *DeleteOrganizationInvitationRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *DeleteOrganizationInvitationRequest_FieldMask) AppendPath(path DeleteOrganizationInvitationRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *DeleteOrganizationInvitationRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(DeleteOrganizationInvitationRequest_FieldPath))
}

func (fieldMask *DeleteOrganizationInvitationRequest_FieldMask) GetPaths() []DeleteOrganizationInvitationRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *DeleteOrganizationInvitationRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *DeleteOrganizationInvitationRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseDeleteOrganizationInvitationRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *DeleteOrganizationInvitationRequest_FieldMask) Set(target, source *DeleteOrganizationInvitationRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *DeleteOrganizationInvitationRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*DeleteOrganizationInvitationRequest), source.(*DeleteOrganizationInvitationRequest))
}

func (fieldMask *DeleteOrganizationInvitationRequest_FieldMask) Project(source *DeleteOrganizationInvitationRequest) *DeleteOrganizationInvitationRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &DeleteOrganizationInvitationRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *DeleteOrganizationInvitationRequest_FieldTerminalPath:
			switch tp.selector {
			case DeleteOrganizationInvitationRequest_FieldPathSelectorName:
				result.Name = source.Name
			}
		}
	}
	return result
}

func (fieldMask *DeleteOrganizationInvitationRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*DeleteOrganizationInvitationRequest))
}

func (fieldMask *DeleteOrganizationInvitationRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}
