// Code generated by protoc-gen-goten-object
// File: edgelq/iam/proto/v1alpha2/organization_invitation_custom.proto
// DO NOT EDIT!!!

package organization_invitation_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/organization"
	organization_invitation "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/organization_invitation"
	project_invitation "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/project_invitation"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &organization.Organization{}
	_ = &organization_invitation.OrganizationInvitation{}
	_ = &project_invitation.ProjectInvitation{}
)

func (o *AcceptOrganizationInvitationRequest) GotenObjectExt() {}

func (o *AcceptOrganizationInvitationRequest) MakeFullFieldMask() *AcceptOrganizationInvitationRequest_FieldMask {
	return FullAcceptOrganizationInvitationRequest_FieldMask()
}

func (o *AcceptOrganizationInvitationRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullAcceptOrganizationInvitationRequest_FieldMask()
}

func (o *AcceptOrganizationInvitationRequest) MakeDiffFieldMask(other *AcceptOrganizationInvitationRequest) *AcceptOrganizationInvitationRequest_FieldMask {
	if o == nil && other == nil {
		return &AcceptOrganizationInvitationRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullAcceptOrganizationInvitationRequest_FieldMask()
	}

	res := &AcceptOrganizationInvitationRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &AcceptOrganizationInvitationRequest_FieldTerminalPath{selector: AcceptOrganizationInvitationRequest_FieldPathSelectorName})
	}
	return res
}

func (o *AcceptOrganizationInvitationRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*AcceptOrganizationInvitationRequest))
}

func (o *AcceptOrganizationInvitationRequest) Clone() *AcceptOrganizationInvitationRequest {
	if o == nil {
		return nil
	}
	result := &AcceptOrganizationInvitationRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &organization_invitation.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *AcceptOrganizationInvitationRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *AcceptOrganizationInvitationRequest) Merge(source *AcceptOrganizationInvitationRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &organization_invitation.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
}

func (o *AcceptOrganizationInvitationRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*AcceptOrganizationInvitationRequest))
}

func (o *AcceptOrganizationInvitationResponse) GotenObjectExt() {}

func (o *AcceptOrganizationInvitationResponse) MakeFullFieldMask() *AcceptOrganizationInvitationResponse_FieldMask {
	return FullAcceptOrganizationInvitationResponse_FieldMask()
}

func (o *AcceptOrganizationInvitationResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullAcceptOrganizationInvitationResponse_FieldMask()
}

func (o *AcceptOrganizationInvitationResponse) MakeDiffFieldMask(other *AcceptOrganizationInvitationResponse) *AcceptOrganizationInvitationResponse_FieldMask {
	if o == nil && other == nil {
		return &AcceptOrganizationInvitationResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullAcceptOrganizationInvitationResponse_FieldMask()
	}

	res := &AcceptOrganizationInvitationResponse_FieldMask{}
	return res
}

func (o *AcceptOrganizationInvitationResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*AcceptOrganizationInvitationResponse))
}

func (o *AcceptOrganizationInvitationResponse) Clone() *AcceptOrganizationInvitationResponse {
	if o == nil {
		return nil
	}
	result := &AcceptOrganizationInvitationResponse{}
	return result
}

func (o *AcceptOrganizationInvitationResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *AcceptOrganizationInvitationResponse) Merge(source *AcceptOrganizationInvitationResponse) {
}

func (o *AcceptOrganizationInvitationResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*AcceptOrganizationInvitationResponse))
}

func (o *DeclineOrganizationInvitationRequest) GotenObjectExt() {}

func (o *DeclineOrganizationInvitationRequest) MakeFullFieldMask() *DeclineOrganizationInvitationRequest_FieldMask {
	return FullDeclineOrganizationInvitationRequest_FieldMask()
}

func (o *DeclineOrganizationInvitationRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDeclineOrganizationInvitationRequest_FieldMask()
}

func (o *DeclineOrganizationInvitationRequest) MakeDiffFieldMask(other *DeclineOrganizationInvitationRequest) *DeclineOrganizationInvitationRequest_FieldMask {
	if o == nil && other == nil {
		return &DeclineOrganizationInvitationRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDeclineOrganizationInvitationRequest_FieldMask()
	}

	res := &DeclineOrganizationInvitationRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &DeclineOrganizationInvitationRequest_FieldTerminalPath{selector: DeclineOrganizationInvitationRequest_FieldPathSelectorName})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &DeclineOrganizationInvitationRequest_FieldTerminalPath{selector: DeclineOrganizationInvitationRequest_FieldPathSelectorFilter})
	}
	return res
}

func (o *DeclineOrganizationInvitationRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*DeclineOrganizationInvitationRequest))
}

func (o *DeclineOrganizationInvitationRequest) Clone() *DeclineOrganizationInvitationRequest {
	if o == nil {
		return nil
	}
	result := &DeclineOrganizationInvitationRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &organization_invitation.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &project_invitation.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *DeclineOrganizationInvitationRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *DeclineOrganizationInvitationRequest) Merge(source *DeclineOrganizationInvitationRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &organization_invitation.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &project_invitation.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
}

func (o *DeclineOrganizationInvitationRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*DeclineOrganizationInvitationRequest))
}

func (o *DeclineOrganizationInvitationResponse) GotenObjectExt() {}

func (o *DeclineOrganizationInvitationResponse) MakeFullFieldMask() *DeclineOrganizationInvitationResponse_FieldMask {
	return FullDeclineOrganizationInvitationResponse_FieldMask()
}

func (o *DeclineOrganizationInvitationResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDeclineOrganizationInvitationResponse_FieldMask()
}

func (o *DeclineOrganizationInvitationResponse) MakeDiffFieldMask(other *DeclineOrganizationInvitationResponse) *DeclineOrganizationInvitationResponse_FieldMask {
	if o == nil && other == nil {
		return &DeclineOrganizationInvitationResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDeclineOrganizationInvitationResponse_FieldMask()
	}

	res := &DeclineOrganizationInvitationResponse_FieldMask{}
	return res
}

func (o *DeclineOrganizationInvitationResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*DeclineOrganizationInvitationResponse))
}

func (o *DeclineOrganizationInvitationResponse) Clone() *DeclineOrganizationInvitationResponse {
	if o == nil {
		return nil
	}
	result := &DeclineOrganizationInvitationResponse{}
	return result
}

func (o *DeclineOrganizationInvitationResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *DeclineOrganizationInvitationResponse) Merge(source *DeclineOrganizationInvitationResponse) {
}

func (o *DeclineOrganizationInvitationResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*DeclineOrganizationInvitationResponse))
}

func (o *ListMyOrganizationInvitationsRequest) GotenObjectExt() {}

func (o *ListMyOrganizationInvitationsRequest) MakeFullFieldMask() *ListMyOrganizationInvitationsRequest_FieldMask {
	return FullListMyOrganizationInvitationsRequest_FieldMask()
}

func (o *ListMyOrganizationInvitationsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListMyOrganizationInvitationsRequest_FieldMask()
}

func (o *ListMyOrganizationInvitationsRequest) MakeDiffFieldMask(other *ListMyOrganizationInvitationsRequest) *ListMyOrganizationInvitationsRequest_FieldMask {
	if o == nil && other == nil {
		return &ListMyOrganizationInvitationsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListMyOrganizationInvitationsRequest_FieldMask()
	}

	res := &ListMyOrganizationInvitationsRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &ListMyOrganizationInvitationsRequest_FieldTerminalPath{selector: ListMyOrganizationInvitationsRequest_FieldPathSelectorParent})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &ListMyOrganizationInvitationsRequest_FieldTerminalPath{selector: ListMyOrganizationInvitationsRequest_FieldPathSelectorFilter})
	}
	return res
}

func (o *ListMyOrganizationInvitationsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListMyOrganizationInvitationsRequest))
}

func (o *ListMyOrganizationInvitationsRequest) Clone() *ListMyOrganizationInvitationsRequest {
	if o == nil {
		return nil
	}
	result := &ListMyOrganizationInvitationsRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &organization_invitation.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &organization_invitation.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *ListMyOrganizationInvitationsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListMyOrganizationInvitationsRequest) Merge(source *ListMyOrganizationInvitationsRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &organization_invitation.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &organization_invitation.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
}

func (o *ListMyOrganizationInvitationsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListMyOrganizationInvitationsRequest))
}

func (o *ListMyOrganizationInvitationsResponse) GotenObjectExt() {}

func (o *ListMyOrganizationInvitationsResponse) MakeFullFieldMask() *ListMyOrganizationInvitationsResponse_FieldMask {
	return FullListMyOrganizationInvitationsResponse_FieldMask()
}

func (o *ListMyOrganizationInvitationsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListMyOrganizationInvitationsResponse_FieldMask()
}

func (o *ListMyOrganizationInvitationsResponse) MakeDiffFieldMask(other *ListMyOrganizationInvitationsResponse) *ListMyOrganizationInvitationsResponse_FieldMask {
	if o == nil && other == nil {
		return &ListMyOrganizationInvitationsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListMyOrganizationInvitationsResponse_FieldMask()
	}

	res := &ListMyOrganizationInvitationsResponse_FieldMask{}

	if len(o.GetOrganizationInvitations()) == len(other.GetOrganizationInvitations()) {
		for i, lValue := range o.GetOrganizationInvitations() {
			rValue := other.GetOrganizationInvitations()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &ListMyOrganizationInvitationsResponse_FieldTerminalPath{selector: ListMyOrganizationInvitationsResponse_FieldPathSelectorOrganizationInvitations})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ListMyOrganizationInvitationsResponse_FieldTerminalPath{selector: ListMyOrganizationInvitationsResponse_FieldPathSelectorOrganizationInvitations})
	}
	return res
}

func (o *ListMyOrganizationInvitationsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListMyOrganizationInvitationsResponse))
}

func (o *ListMyOrganizationInvitationsResponse) Clone() *ListMyOrganizationInvitationsResponse {
	if o == nil {
		return nil
	}
	result := &ListMyOrganizationInvitationsResponse{}
	result.OrganizationInvitations = make([]*organization_invitation.OrganizationInvitation, len(o.OrganizationInvitations))
	for i, sourceValue := range o.OrganizationInvitations {
		result.OrganizationInvitations[i] = sourceValue.Clone()
	}
	return result
}

func (o *ListMyOrganizationInvitationsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListMyOrganizationInvitationsResponse) Merge(source *ListMyOrganizationInvitationsResponse) {
	for _, sourceValue := range source.GetOrganizationInvitations() {
		exists := false
		for _, currentValue := range o.OrganizationInvitations {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *organization_invitation.OrganizationInvitation
			if sourceValue != nil {
				newDstElement = new(organization_invitation.OrganizationInvitation)
				newDstElement.Merge(sourceValue)
			}
			o.OrganizationInvitations = append(o.OrganizationInvitations, newDstElement)
		}
	}

}

func (o *ListMyOrganizationInvitationsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListMyOrganizationInvitationsResponse))
}
