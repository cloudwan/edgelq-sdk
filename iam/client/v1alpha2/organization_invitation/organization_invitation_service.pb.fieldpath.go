// Code generated by protoc-gen-goten-object
// File: edgelq/iam/proto/v1alpha2/organization_invitation_service.proto
// DO NOT EDIT!!!

package organization_invitation_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/organization"
	organization_invitation "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/organization_invitation"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &organization.Organization{}
	_ = &organization_invitation.OrganizationInvitation{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type GetOrganizationInvitationRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() GetOrganizationInvitationRequest_FieldPathSelector
	Get(source *GetOrganizationInvitationRequest) []interface{}
	GetSingle(source *GetOrganizationInvitationRequest) (interface{}, bool)
	ClearValue(item *GetOrganizationInvitationRequest)

	// Those methods build corresponding GetOrganizationInvitationRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) GetOrganizationInvitationRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) GetOrganizationInvitationRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) GetOrganizationInvitationRequest_FieldPathArrayItemValue
}

type GetOrganizationInvitationRequest_FieldPathSelector int32

const (
	GetOrganizationInvitationRequest_FieldPathSelectorName      GetOrganizationInvitationRequest_FieldPathSelector = 0
	GetOrganizationInvitationRequest_FieldPathSelectorFieldMask GetOrganizationInvitationRequest_FieldPathSelector = 1
	GetOrganizationInvitationRequest_FieldPathSelectorView      GetOrganizationInvitationRequest_FieldPathSelector = 2
)

func (s GetOrganizationInvitationRequest_FieldPathSelector) String() string {
	switch s {
	case GetOrganizationInvitationRequest_FieldPathSelectorName:
		return "name"
	case GetOrganizationInvitationRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case GetOrganizationInvitationRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for GetOrganizationInvitationRequest: %d", s))
	}
}

func BuildGetOrganizationInvitationRequest_FieldPath(fp gotenobject.RawFieldPath) (GetOrganizationInvitationRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object GetOrganizationInvitationRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &GetOrganizationInvitationRequest_FieldTerminalPath{selector: GetOrganizationInvitationRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &GetOrganizationInvitationRequest_FieldTerminalPath{selector: GetOrganizationInvitationRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &GetOrganizationInvitationRequest_FieldTerminalPath{selector: GetOrganizationInvitationRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object GetOrganizationInvitationRequest", fp)
}

func ParseGetOrganizationInvitationRequest_FieldPath(rawField string) (GetOrganizationInvitationRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildGetOrganizationInvitationRequest_FieldPath(fp)
}

func MustParseGetOrganizationInvitationRequest_FieldPath(rawField string) GetOrganizationInvitationRequest_FieldPath {
	fp, err := ParseGetOrganizationInvitationRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type GetOrganizationInvitationRequest_FieldTerminalPath struct {
	selector GetOrganizationInvitationRequest_FieldPathSelector
}

var _ GetOrganizationInvitationRequest_FieldPath = (*GetOrganizationInvitationRequest_FieldTerminalPath)(nil)

func (fp *GetOrganizationInvitationRequest_FieldTerminalPath) Selector() GetOrganizationInvitationRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *GetOrganizationInvitationRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *GetOrganizationInvitationRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source GetOrganizationInvitationRequest
func (fp *GetOrganizationInvitationRequest_FieldTerminalPath) Get(source *GetOrganizationInvitationRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case GetOrganizationInvitationRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case GetOrganizationInvitationRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case GetOrganizationInvitationRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for GetOrganizationInvitationRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *GetOrganizationInvitationRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*GetOrganizationInvitationRequest))
}

// GetSingle returns value pointed by specific field of from source GetOrganizationInvitationRequest
func (fp *GetOrganizationInvitationRequest_FieldTerminalPath) GetSingle(source *GetOrganizationInvitationRequest) (interface{}, bool) {
	switch fp.selector {
	case GetOrganizationInvitationRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case GetOrganizationInvitationRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case GetOrganizationInvitationRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for GetOrganizationInvitationRequest: %d", fp.selector))
	}
}

func (fp *GetOrganizationInvitationRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*GetOrganizationInvitationRequest))
}

// GetDefault returns a default value of the field type
func (fp *GetOrganizationInvitationRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case GetOrganizationInvitationRequest_FieldPathSelectorName:
		return (*organization_invitation.Reference)(nil)
	case GetOrganizationInvitationRequest_FieldPathSelectorFieldMask:
		return (*organization_invitation.OrganizationInvitation_FieldMask)(nil)
	case GetOrganizationInvitationRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for GetOrganizationInvitationRequest: %d", fp.selector))
	}
}

func (fp *GetOrganizationInvitationRequest_FieldTerminalPath) ClearValue(item *GetOrganizationInvitationRequest) {
	if item != nil {
		switch fp.selector {
		case GetOrganizationInvitationRequest_FieldPathSelectorName:
			item.Name = nil
		case GetOrganizationInvitationRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case GetOrganizationInvitationRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for GetOrganizationInvitationRequest: %d", fp.selector))
		}
	}
}

func (fp *GetOrganizationInvitationRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*GetOrganizationInvitationRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *GetOrganizationInvitationRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == GetOrganizationInvitationRequest_FieldPathSelectorName ||
		fp.selector == GetOrganizationInvitationRequest_FieldPathSelectorFieldMask ||
		fp.selector == GetOrganizationInvitationRequest_FieldPathSelectorView
}

func (fp *GetOrganizationInvitationRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *GetOrganizationInvitationRequest_FieldTerminalPath) WithIValue(value interface{}) GetOrganizationInvitationRequest_FieldPathValue {
	switch fp.selector {
	case GetOrganizationInvitationRequest_FieldPathSelectorName:
		return &GetOrganizationInvitationRequest_FieldTerminalPathValue{GetOrganizationInvitationRequest_FieldTerminalPath: *fp, value: value.(*organization_invitation.Reference)}
	case GetOrganizationInvitationRequest_FieldPathSelectorFieldMask:
		return &GetOrganizationInvitationRequest_FieldTerminalPathValue{GetOrganizationInvitationRequest_FieldTerminalPath: *fp, value: value.(*organization_invitation.OrganizationInvitation_FieldMask)}
	case GetOrganizationInvitationRequest_FieldPathSelectorView:
		return &GetOrganizationInvitationRequest_FieldTerminalPathValue{GetOrganizationInvitationRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetOrganizationInvitationRequest: %d", fp.selector))
	}
}

func (fp *GetOrganizationInvitationRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *GetOrganizationInvitationRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) GetOrganizationInvitationRequest_FieldPathArrayOfValues {
	fpaov := &GetOrganizationInvitationRequest_FieldTerminalPathArrayOfValues{GetOrganizationInvitationRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case GetOrganizationInvitationRequest_FieldPathSelectorName:
		return &GetOrganizationInvitationRequest_FieldTerminalPathArrayOfValues{GetOrganizationInvitationRequest_FieldTerminalPath: *fp, values: values.([]*organization_invitation.Reference)}
	case GetOrganizationInvitationRequest_FieldPathSelectorFieldMask:
		return &GetOrganizationInvitationRequest_FieldTerminalPathArrayOfValues{GetOrganizationInvitationRequest_FieldTerminalPath: *fp, values: values.([]*organization_invitation.OrganizationInvitation_FieldMask)}
	case GetOrganizationInvitationRequest_FieldPathSelectorView:
		return &GetOrganizationInvitationRequest_FieldTerminalPathArrayOfValues{GetOrganizationInvitationRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetOrganizationInvitationRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *GetOrganizationInvitationRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *GetOrganizationInvitationRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) GetOrganizationInvitationRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for GetOrganizationInvitationRequest: %d", fp.selector))
	}
}

func (fp *GetOrganizationInvitationRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// GetOrganizationInvitationRequest_FieldPathValue allows storing values for GetOrganizationInvitationRequest fields according to their type
type GetOrganizationInvitationRequest_FieldPathValue interface {
	GetOrganizationInvitationRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **GetOrganizationInvitationRequest)
	CompareWith(*GetOrganizationInvitationRequest) (cmp int, comparable bool)
}

func ParseGetOrganizationInvitationRequest_FieldPathValue(pathStr, valueStr string) (GetOrganizationInvitationRequest_FieldPathValue, error) {
	fp, err := ParseGetOrganizationInvitationRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetOrganizationInvitationRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(GetOrganizationInvitationRequest_FieldPathValue), nil
}

func MustParseGetOrganizationInvitationRequest_FieldPathValue(pathStr, valueStr string) GetOrganizationInvitationRequest_FieldPathValue {
	fpv, err := ParseGetOrganizationInvitationRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type GetOrganizationInvitationRequest_FieldTerminalPathValue struct {
	GetOrganizationInvitationRequest_FieldTerminalPath
	value interface{}
}

var _ GetOrganizationInvitationRequest_FieldPathValue = (*GetOrganizationInvitationRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'GetOrganizationInvitationRequest' as interface{}
func (fpv *GetOrganizationInvitationRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *GetOrganizationInvitationRequest_FieldTerminalPathValue) AsNameValue() (*organization_invitation.Reference, bool) {
	res, ok := fpv.value.(*organization_invitation.Reference)
	return res, ok
}
func (fpv *GetOrganizationInvitationRequest_FieldTerminalPathValue) AsFieldMaskValue() (*organization_invitation.OrganizationInvitation_FieldMask, bool) {
	res, ok := fpv.value.(*organization_invitation.OrganizationInvitation_FieldMask)
	return res, ok
}
func (fpv *GetOrganizationInvitationRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object GetOrganizationInvitationRequest
func (fpv *GetOrganizationInvitationRequest_FieldTerminalPathValue) SetTo(target **GetOrganizationInvitationRequest) {
	if *target == nil {
		*target = new(GetOrganizationInvitationRequest)
	}
	switch fpv.selector {
	case GetOrganizationInvitationRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*organization_invitation.Reference)
	case GetOrganizationInvitationRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*organization_invitation.OrganizationInvitation_FieldMask)
	case GetOrganizationInvitationRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for GetOrganizationInvitationRequest: %d", fpv.selector))
	}
}

func (fpv *GetOrganizationInvitationRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*GetOrganizationInvitationRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'GetOrganizationInvitationRequest_FieldTerminalPathValue' with the value under path in 'GetOrganizationInvitationRequest'.
func (fpv *GetOrganizationInvitationRequest_FieldTerminalPathValue) CompareWith(source *GetOrganizationInvitationRequest) (int, bool) {
	switch fpv.selector {
	case GetOrganizationInvitationRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*organization_invitation.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case GetOrganizationInvitationRequest_FieldPathSelectorFieldMask:
		return 0, false
	case GetOrganizationInvitationRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for GetOrganizationInvitationRequest: %d", fpv.selector))
	}
}

func (fpv *GetOrganizationInvitationRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*GetOrganizationInvitationRequest))
}

// GetOrganizationInvitationRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for GetOrganizationInvitationRequest according to their type
// Present only for array (repeated) types.
type GetOrganizationInvitationRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	GetOrganizationInvitationRequest_FieldPath
	ContainsValue(*GetOrganizationInvitationRequest) bool
}

// ParseGetOrganizationInvitationRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseGetOrganizationInvitationRequest_FieldPathArrayItemValue(pathStr, valueStr string) (GetOrganizationInvitationRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseGetOrganizationInvitationRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetOrganizationInvitationRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(GetOrganizationInvitationRequest_FieldPathArrayItemValue), nil
}

func MustParseGetOrganizationInvitationRequest_FieldPathArrayItemValue(pathStr, valueStr string) GetOrganizationInvitationRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseGetOrganizationInvitationRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type GetOrganizationInvitationRequest_FieldTerminalPathArrayItemValue struct {
	GetOrganizationInvitationRequest_FieldTerminalPath
	value interface{}
}

var _ GetOrganizationInvitationRequest_FieldPathArrayItemValue = (*GetOrganizationInvitationRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object GetOrganizationInvitationRequest as interface{}
func (fpaiv *GetOrganizationInvitationRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *GetOrganizationInvitationRequest_FieldTerminalPathArrayItemValue) GetSingle(source *GetOrganizationInvitationRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *GetOrganizationInvitationRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*GetOrganizationInvitationRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'GetOrganizationInvitationRequest'
func (fpaiv *GetOrganizationInvitationRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *GetOrganizationInvitationRequest) bool {
	slice := fpaiv.GetOrganizationInvitationRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// GetOrganizationInvitationRequest_FieldPathArrayOfValues allows storing slice of values for GetOrganizationInvitationRequest fields according to their type
type GetOrganizationInvitationRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	GetOrganizationInvitationRequest_FieldPath
}

func ParseGetOrganizationInvitationRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (GetOrganizationInvitationRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseGetOrganizationInvitationRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetOrganizationInvitationRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(GetOrganizationInvitationRequest_FieldPathArrayOfValues), nil
}

func MustParseGetOrganizationInvitationRequest_FieldPathArrayOfValues(pathStr, valuesStr string) GetOrganizationInvitationRequest_FieldPathArrayOfValues {
	fpaov, err := ParseGetOrganizationInvitationRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type GetOrganizationInvitationRequest_FieldTerminalPathArrayOfValues struct {
	GetOrganizationInvitationRequest_FieldTerminalPath
	values interface{}
}

var _ GetOrganizationInvitationRequest_FieldPathArrayOfValues = (*GetOrganizationInvitationRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *GetOrganizationInvitationRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case GetOrganizationInvitationRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*organization_invitation.Reference) {
			values = append(values, v)
		}
	case GetOrganizationInvitationRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*organization_invitation.OrganizationInvitation_FieldMask) {
			values = append(values, v)
		}
	case GetOrganizationInvitationRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *GetOrganizationInvitationRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*organization_invitation.Reference, bool) {
	res, ok := fpaov.values.([]*organization_invitation.Reference)
	return res, ok
}
func (fpaov *GetOrganizationInvitationRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*organization_invitation.OrganizationInvitation_FieldMask, bool) {
	res, ok := fpaov.values.([]*organization_invitation.OrganizationInvitation_FieldMask)
	return res, ok
}
func (fpaov *GetOrganizationInvitationRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetOrganizationInvitationsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetOrganizationInvitationsRequest_FieldPathSelector
	Get(source *BatchGetOrganizationInvitationsRequest) []interface{}
	GetSingle(source *BatchGetOrganizationInvitationsRequest) (interface{}, bool)
	ClearValue(item *BatchGetOrganizationInvitationsRequest)

	// Those methods build corresponding BatchGetOrganizationInvitationsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetOrganizationInvitationsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetOrganizationInvitationsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetOrganizationInvitationsRequest_FieldPathArrayItemValue
}

type BatchGetOrganizationInvitationsRequest_FieldPathSelector int32

const (
	BatchGetOrganizationInvitationsRequest_FieldPathSelectorNames     BatchGetOrganizationInvitationsRequest_FieldPathSelector = 0
	BatchGetOrganizationInvitationsRequest_FieldPathSelectorFieldMask BatchGetOrganizationInvitationsRequest_FieldPathSelector = 1
	BatchGetOrganizationInvitationsRequest_FieldPathSelectorView      BatchGetOrganizationInvitationsRequest_FieldPathSelector = 2
)

func (s BatchGetOrganizationInvitationsRequest_FieldPathSelector) String() string {
	switch s {
	case BatchGetOrganizationInvitationsRequest_FieldPathSelectorNames:
		return "names"
	case BatchGetOrganizationInvitationsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case BatchGetOrganizationInvitationsRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetOrganizationInvitationsRequest: %d", s))
	}
}

func BuildBatchGetOrganizationInvitationsRequest_FieldPath(fp gotenobject.RawFieldPath) (BatchGetOrganizationInvitationsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetOrganizationInvitationsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "names":
			return &BatchGetOrganizationInvitationsRequest_FieldTerminalPath{selector: BatchGetOrganizationInvitationsRequest_FieldPathSelectorNames}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &BatchGetOrganizationInvitationsRequest_FieldTerminalPath{selector: BatchGetOrganizationInvitationsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &BatchGetOrganizationInvitationsRequest_FieldTerminalPath{selector: BatchGetOrganizationInvitationsRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetOrganizationInvitationsRequest", fp)
}

func ParseBatchGetOrganizationInvitationsRequest_FieldPath(rawField string) (BatchGetOrganizationInvitationsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetOrganizationInvitationsRequest_FieldPath(fp)
}

func MustParseBatchGetOrganizationInvitationsRequest_FieldPath(rawField string) BatchGetOrganizationInvitationsRequest_FieldPath {
	fp, err := ParseBatchGetOrganizationInvitationsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetOrganizationInvitationsRequest_FieldTerminalPath struct {
	selector BatchGetOrganizationInvitationsRequest_FieldPathSelector
}

var _ BatchGetOrganizationInvitationsRequest_FieldPath = (*BatchGetOrganizationInvitationsRequest_FieldTerminalPath)(nil)

func (fp *BatchGetOrganizationInvitationsRequest_FieldTerminalPath) Selector() BatchGetOrganizationInvitationsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetOrganizationInvitationsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetOrganizationInvitationsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetOrganizationInvitationsRequest
func (fp *BatchGetOrganizationInvitationsRequest_FieldTerminalPath) Get(source *BatchGetOrganizationInvitationsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetOrganizationInvitationsRequest_FieldPathSelectorNames:
			for _, value := range source.GetNames() {
				values = append(values, value)
			}
		case BatchGetOrganizationInvitationsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case BatchGetOrganizationInvitationsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetOrganizationInvitationsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetOrganizationInvitationsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetOrganizationInvitationsRequest))
}

// GetSingle returns value pointed by specific field of from source BatchGetOrganizationInvitationsRequest
func (fp *BatchGetOrganizationInvitationsRequest_FieldTerminalPath) GetSingle(source *BatchGetOrganizationInvitationsRequest) (interface{}, bool) {
	switch fp.selector {
	case BatchGetOrganizationInvitationsRequest_FieldPathSelectorNames:
		res := source.GetNames()
		return res, res != nil
	case BatchGetOrganizationInvitationsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case BatchGetOrganizationInvitationsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetOrganizationInvitationsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetOrganizationInvitationsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetOrganizationInvitationsRequest))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetOrganizationInvitationsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetOrganizationInvitationsRequest_FieldPathSelectorNames:
		return ([]*organization_invitation.Reference)(nil)
	case BatchGetOrganizationInvitationsRequest_FieldPathSelectorFieldMask:
		return (*organization_invitation.OrganizationInvitation_FieldMask)(nil)
	case BatchGetOrganizationInvitationsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetOrganizationInvitationsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetOrganizationInvitationsRequest_FieldTerminalPath) ClearValue(item *BatchGetOrganizationInvitationsRequest) {
	if item != nil {
		switch fp.selector {
		case BatchGetOrganizationInvitationsRequest_FieldPathSelectorNames:
			item.Names = nil
		case BatchGetOrganizationInvitationsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case BatchGetOrganizationInvitationsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetOrganizationInvitationsRequest: %d", fp.selector))
		}
	}
}

func (fp *BatchGetOrganizationInvitationsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetOrganizationInvitationsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetOrganizationInvitationsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetOrganizationInvitationsRequest_FieldPathSelectorNames ||
		fp.selector == BatchGetOrganizationInvitationsRequest_FieldPathSelectorFieldMask ||
		fp.selector == BatchGetOrganizationInvitationsRequest_FieldPathSelectorView
}

func (fp *BatchGetOrganizationInvitationsRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *BatchGetOrganizationInvitationsRequest_FieldTerminalPath) WithIValue(value interface{}) BatchGetOrganizationInvitationsRequest_FieldPathValue {
	switch fp.selector {
	case BatchGetOrganizationInvitationsRequest_FieldPathSelectorNames:
		return &BatchGetOrganizationInvitationsRequest_FieldTerminalPathValue{BatchGetOrganizationInvitationsRequest_FieldTerminalPath: *fp, value: value.([]*organization_invitation.Reference)}
	case BatchGetOrganizationInvitationsRequest_FieldPathSelectorFieldMask:
		return &BatchGetOrganizationInvitationsRequest_FieldTerminalPathValue{BatchGetOrganizationInvitationsRequest_FieldTerminalPath: *fp, value: value.(*organization_invitation.OrganizationInvitation_FieldMask)}
	case BatchGetOrganizationInvitationsRequest_FieldPathSelectorView:
		return &BatchGetOrganizationInvitationsRequest_FieldTerminalPathValue{BatchGetOrganizationInvitationsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetOrganizationInvitationsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetOrganizationInvitationsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetOrganizationInvitationsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetOrganizationInvitationsRequest_FieldPathArrayOfValues {
	fpaov := &BatchGetOrganizationInvitationsRequest_FieldTerminalPathArrayOfValues{BatchGetOrganizationInvitationsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetOrganizationInvitationsRequest_FieldPathSelectorNames:
		return &BatchGetOrganizationInvitationsRequest_FieldTerminalPathArrayOfValues{BatchGetOrganizationInvitationsRequest_FieldTerminalPath: *fp, values: values.([][]*organization_invitation.Reference)}
	case BatchGetOrganizationInvitationsRequest_FieldPathSelectorFieldMask:
		return &BatchGetOrganizationInvitationsRequest_FieldTerminalPathArrayOfValues{BatchGetOrganizationInvitationsRequest_FieldTerminalPath: *fp, values: values.([]*organization_invitation.OrganizationInvitation_FieldMask)}
	case BatchGetOrganizationInvitationsRequest_FieldPathSelectorView:
		return &BatchGetOrganizationInvitationsRequest_FieldTerminalPathArrayOfValues{BatchGetOrganizationInvitationsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetOrganizationInvitationsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetOrganizationInvitationsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetOrganizationInvitationsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetOrganizationInvitationsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetOrganizationInvitationsRequest_FieldPathSelectorNames:
		return &BatchGetOrganizationInvitationsRequest_FieldTerminalPathArrayItemValue{BatchGetOrganizationInvitationsRequest_FieldTerminalPath: *fp, value: value.(*organization_invitation.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetOrganizationInvitationsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetOrganizationInvitationsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// BatchGetOrganizationInvitationsRequest_FieldPathValue allows storing values for BatchGetOrganizationInvitationsRequest fields according to their type
type BatchGetOrganizationInvitationsRequest_FieldPathValue interface {
	BatchGetOrganizationInvitationsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetOrganizationInvitationsRequest)
	CompareWith(*BatchGetOrganizationInvitationsRequest) (cmp int, comparable bool)
}

func ParseBatchGetOrganizationInvitationsRequest_FieldPathValue(pathStr, valueStr string) (BatchGetOrganizationInvitationsRequest_FieldPathValue, error) {
	fp, err := ParseBatchGetOrganizationInvitationsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetOrganizationInvitationsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetOrganizationInvitationsRequest_FieldPathValue), nil
}

func MustParseBatchGetOrganizationInvitationsRequest_FieldPathValue(pathStr, valueStr string) BatchGetOrganizationInvitationsRequest_FieldPathValue {
	fpv, err := ParseBatchGetOrganizationInvitationsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetOrganizationInvitationsRequest_FieldTerminalPathValue struct {
	BatchGetOrganizationInvitationsRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetOrganizationInvitationsRequest_FieldPathValue = (*BatchGetOrganizationInvitationsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetOrganizationInvitationsRequest' as interface{}
func (fpv *BatchGetOrganizationInvitationsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetOrganizationInvitationsRequest_FieldTerminalPathValue) AsNamesValue() ([]*organization_invitation.Reference, bool) {
	res, ok := fpv.value.([]*organization_invitation.Reference)
	return res, ok
}
func (fpv *BatchGetOrganizationInvitationsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*organization_invitation.OrganizationInvitation_FieldMask, bool) {
	res, ok := fpv.value.(*organization_invitation.OrganizationInvitation_FieldMask)
	return res, ok
}
func (fpv *BatchGetOrganizationInvitationsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetOrganizationInvitationsRequest
func (fpv *BatchGetOrganizationInvitationsRequest_FieldTerminalPathValue) SetTo(target **BatchGetOrganizationInvitationsRequest) {
	if *target == nil {
		*target = new(BatchGetOrganizationInvitationsRequest)
	}
	switch fpv.selector {
	case BatchGetOrganizationInvitationsRequest_FieldPathSelectorNames:
		(*target).Names = fpv.value.([]*organization_invitation.Reference)
	case BatchGetOrganizationInvitationsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*organization_invitation.OrganizationInvitation_FieldMask)
	case BatchGetOrganizationInvitationsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetOrganizationInvitationsRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetOrganizationInvitationsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetOrganizationInvitationsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetOrganizationInvitationsRequest_FieldTerminalPathValue' with the value under path in 'BatchGetOrganizationInvitationsRequest'.
func (fpv *BatchGetOrganizationInvitationsRequest_FieldTerminalPathValue) CompareWith(source *BatchGetOrganizationInvitationsRequest) (int, bool) {
	switch fpv.selector {
	case BatchGetOrganizationInvitationsRequest_FieldPathSelectorNames:
		return 0, false
	case BatchGetOrganizationInvitationsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case BatchGetOrganizationInvitationsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetOrganizationInvitationsRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetOrganizationInvitationsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetOrganizationInvitationsRequest))
}

// BatchGetOrganizationInvitationsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetOrganizationInvitationsRequest according to their type
// Present only for array (repeated) types.
type BatchGetOrganizationInvitationsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetOrganizationInvitationsRequest_FieldPath
	ContainsValue(*BatchGetOrganizationInvitationsRequest) bool
}

// ParseBatchGetOrganizationInvitationsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetOrganizationInvitationsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetOrganizationInvitationsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetOrganizationInvitationsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetOrganizationInvitationsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetOrganizationInvitationsRequest_FieldPathArrayItemValue), nil
}

func MustParseBatchGetOrganizationInvitationsRequest_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetOrganizationInvitationsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetOrganizationInvitationsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetOrganizationInvitationsRequest_FieldTerminalPathArrayItemValue struct {
	BatchGetOrganizationInvitationsRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetOrganizationInvitationsRequest_FieldPathArrayItemValue = (*BatchGetOrganizationInvitationsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetOrganizationInvitationsRequest as interface{}
func (fpaiv *BatchGetOrganizationInvitationsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetOrganizationInvitationsRequest_FieldTerminalPathArrayItemValue) AsNamesItemValue() (*organization_invitation.Reference, bool) {
	res, ok := fpaiv.value.(*organization_invitation.Reference)
	return res, ok
}

func (fpaiv *BatchGetOrganizationInvitationsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetOrganizationInvitationsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetOrganizationInvitationsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetOrganizationInvitationsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetOrganizationInvitationsRequest'
func (fpaiv *BatchGetOrganizationInvitationsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetOrganizationInvitationsRequest) bool {
	slice := fpaiv.BatchGetOrganizationInvitationsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// BatchGetOrganizationInvitationsRequest_FieldPathArrayOfValues allows storing slice of values for BatchGetOrganizationInvitationsRequest fields according to their type
type BatchGetOrganizationInvitationsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetOrganizationInvitationsRequest_FieldPath
}

func ParseBatchGetOrganizationInvitationsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetOrganizationInvitationsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetOrganizationInvitationsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetOrganizationInvitationsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetOrganizationInvitationsRequest_FieldPathArrayOfValues), nil
}

func MustParseBatchGetOrganizationInvitationsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetOrganizationInvitationsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetOrganizationInvitationsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetOrganizationInvitationsRequest_FieldTerminalPathArrayOfValues struct {
	BatchGetOrganizationInvitationsRequest_FieldTerminalPath
	values interface{}
}

var _ BatchGetOrganizationInvitationsRequest_FieldPathArrayOfValues = (*BatchGetOrganizationInvitationsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetOrganizationInvitationsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetOrganizationInvitationsRequest_FieldPathSelectorNames:
		for _, v := range fpaov.values.([][]*organization_invitation.Reference) {
			values = append(values, v)
		}
	case BatchGetOrganizationInvitationsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*organization_invitation.OrganizationInvitation_FieldMask) {
			values = append(values, v)
		}
	case BatchGetOrganizationInvitationsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetOrganizationInvitationsRequest_FieldTerminalPathArrayOfValues) AsNamesArrayOfValues() ([][]*organization_invitation.Reference, bool) {
	res, ok := fpaov.values.([][]*organization_invitation.Reference)
	return res, ok
}
func (fpaov *BatchGetOrganizationInvitationsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*organization_invitation.OrganizationInvitation_FieldMask, bool) {
	res, ok := fpaov.values.([]*organization_invitation.OrganizationInvitation_FieldMask)
	return res, ok
}
func (fpaov *BatchGetOrganizationInvitationsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetOrganizationInvitationsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetOrganizationInvitationsResponse_FieldPathSelector
	Get(source *BatchGetOrganizationInvitationsResponse) []interface{}
	GetSingle(source *BatchGetOrganizationInvitationsResponse) (interface{}, bool)
	ClearValue(item *BatchGetOrganizationInvitationsResponse)

	// Those methods build corresponding BatchGetOrganizationInvitationsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetOrganizationInvitationsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetOrganizationInvitationsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetOrganizationInvitationsResponse_FieldPathArrayItemValue
}

type BatchGetOrganizationInvitationsResponse_FieldPathSelector int32

const (
	BatchGetOrganizationInvitationsResponse_FieldPathSelectorOrganizationInvitations BatchGetOrganizationInvitationsResponse_FieldPathSelector = 0
	BatchGetOrganizationInvitationsResponse_FieldPathSelectorMissing                 BatchGetOrganizationInvitationsResponse_FieldPathSelector = 1
)

func (s BatchGetOrganizationInvitationsResponse_FieldPathSelector) String() string {
	switch s {
	case BatchGetOrganizationInvitationsResponse_FieldPathSelectorOrganizationInvitations:
		return "organization_invitations"
	case BatchGetOrganizationInvitationsResponse_FieldPathSelectorMissing:
		return "missing"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetOrganizationInvitationsResponse: %d", s))
	}
}

func BuildBatchGetOrganizationInvitationsResponse_FieldPath(fp gotenobject.RawFieldPath) (BatchGetOrganizationInvitationsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetOrganizationInvitationsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "organization_invitations", "organizationInvitations", "organization-invitations":
			return &BatchGetOrganizationInvitationsResponse_FieldTerminalPath{selector: BatchGetOrganizationInvitationsResponse_FieldPathSelectorOrganizationInvitations}, nil
		case "missing":
			return &BatchGetOrganizationInvitationsResponse_FieldTerminalPath{selector: BatchGetOrganizationInvitationsResponse_FieldPathSelectorMissing}, nil
		}
	} else {
		switch fp[0] {
		case "organization_invitations", "organizationInvitations", "organization-invitations":
			if subpath, err := organization_invitation.BuildOrganizationInvitation_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &BatchGetOrganizationInvitationsResponse_FieldSubPath{selector: BatchGetOrganizationInvitationsResponse_FieldPathSelectorOrganizationInvitations, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetOrganizationInvitationsResponse", fp)
}

func ParseBatchGetOrganizationInvitationsResponse_FieldPath(rawField string) (BatchGetOrganizationInvitationsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetOrganizationInvitationsResponse_FieldPath(fp)
}

func MustParseBatchGetOrganizationInvitationsResponse_FieldPath(rawField string) BatchGetOrganizationInvitationsResponse_FieldPath {
	fp, err := ParseBatchGetOrganizationInvitationsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetOrganizationInvitationsResponse_FieldTerminalPath struct {
	selector BatchGetOrganizationInvitationsResponse_FieldPathSelector
}

var _ BatchGetOrganizationInvitationsResponse_FieldPath = (*BatchGetOrganizationInvitationsResponse_FieldTerminalPath)(nil)

func (fp *BatchGetOrganizationInvitationsResponse_FieldTerminalPath) Selector() BatchGetOrganizationInvitationsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetOrganizationInvitationsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetOrganizationInvitationsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetOrganizationInvitationsResponse
func (fp *BatchGetOrganizationInvitationsResponse_FieldTerminalPath) Get(source *BatchGetOrganizationInvitationsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetOrganizationInvitationsResponse_FieldPathSelectorOrganizationInvitations:
			for _, value := range source.GetOrganizationInvitations() {
				values = append(values, value)
			}
		case BatchGetOrganizationInvitationsResponse_FieldPathSelectorMissing:
			for _, value := range source.GetMissing() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetOrganizationInvitationsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetOrganizationInvitationsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetOrganizationInvitationsResponse))
}

// GetSingle returns value pointed by specific field of from source BatchGetOrganizationInvitationsResponse
func (fp *BatchGetOrganizationInvitationsResponse_FieldTerminalPath) GetSingle(source *BatchGetOrganizationInvitationsResponse) (interface{}, bool) {
	switch fp.selector {
	case BatchGetOrganizationInvitationsResponse_FieldPathSelectorOrganizationInvitations:
		res := source.GetOrganizationInvitations()
		return res, res != nil
	case BatchGetOrganizationInvitationsResponse_FieldPathSelectorMissing:
		res := source.GetMissing()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetOrganizationInvitationsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetOrganizationInvitationsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetOrganizationInvitationsResponse))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetOrganizationInvitationsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetOrganizationInvitationsResponse_FieldPathSelectorOrganizationInvitations:
		return ([]*organization_invitation.OrganizationInvitation)(nil)
	case BatchGetOrganizationInvitationsResponse_FieldPathSelectorMissing:
		return ([]*organization_invitation.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetOrganizationInvitationsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetOrganizationInvitationsResponse_FieldTerminalPath) ClearValue(item *BatchGetOrganizationInvitationsResponse) {
	if item != nil {
		switch fp.selector {
		case BatchGetOrganizationInvitationsResponse_FieldPathSelectorOrganizationInvitations:
			item.OrganizationInvitations = nil
		case BatchGetOrganizationInvitationsResponse_FieldPathSelectorMissing:
			item.Missing = nil
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetOrganizationInvitationsResponse: %d", fp.selector))
		}
	}
}

func (fp *BatchGetOrganizationInvitationsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetOrganizationInvitationsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetOrganizationInvitationsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetOrganizationInvitationsResponse_FieldPathSelectorMissing
}

func (fp *BatchGetOrganizationInvitationsResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *BatchGetOrganizationInvitationsResponse_FieldTerminalPath) WithIValue(value interface{}) BatchGetOrganizationInvitationsResponse_FieldPathValue {
	switch fp.selector {
	case BatchGetOrganizationInvitationsResponse_FieldPathSelectorOrganizationInvitations:
		return &BatchGetOrganizationInvitationsResponse_FieldTerminalPathValue{BatchGetOrganizationInvitationsResponse_FieldTerminalPath: *fp, value: value.([]*organization_invitation.OrganizationInvitation)}
	case BatchGetOrganizationInvitationsResponse_FieldPathSelectorMissing:
		return &BatchGetOrganizationInvitationsResponse_FieldTerminalPathValue{BatchGetOrganizationInvitationsResponse_FieldTerminalPath: *fp, value: value.([]*organization_invitation.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetOrganizationInvitationsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetOrganizationInvitationsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetOrganizationInvitationsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetOrganizationInvitationsResponse_FieldPathArrayOfValues {
	fpaov := &BatchGetOrganizationInvitationsResponse_FieldTerminalPathArrayOfValues{BatchGetOrganizationInvitationsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetOrganizationInvitationsResponse_FieldPathSelectorOrganizationInvitations:
		return &BatchGetOrganizationInvitationsResponse_FieldTerminalPathArrayOfValues{BatchGetOrganizationInvitationsResponse_FieldTerminalPath: *fp, values: values.([][]*organization_invitation.OrganizationInvitation)}
	case BatchGetOrganizationInvitationsResponse_FieldPathSelectorMissing:
		return &BatchGetOrganizationInvitationsResponse_FieldTerminalPathArrayOfValues{BatchGetOrganizationInvitationsResponse_FieldTerminalPath: *fp, values: values.([][]*organization_invitation.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetOrganizationInvitationsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetOrganizationInvitationsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetOrganizationInvitationsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetOrganizationInvitationsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetOrganizationInvitationsResponse_FieldPathSelectorOrganizationInvitations:
		return &BatchGetOrganizationInvitationsResponse_FieldTerminalPathArrayItemValue{BatchGetOrganizationInvitationsResponse_FieldTerminalPath: *fp, value: value.(*organization_invitation.OrganizationInvitation)}
	case BatchGetOrganizationInvitationsResponse_FieldPathSelectorMissing:
		return &BatchGetOrganizationInvitationsResponse_FieldTerminalPathArrayItemValue{BatchGetOrganizationInvitationsResponse_FieldTerminalPath: *fp, value: value.(*organization_invitation.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetOrganizationInvitationsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetOrganizationInvitationsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type BatchGetOrganizationInvitationsResponse_FieldSubPath struct {
	selector BatchGetOrganizationInvitationsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ BatchGetOrganizationInvitationsResponse_FieldPath = (*BatchGetOrganizationInvitationsResponse_FieldSubPath)(nil)

func (fps *BatchGetOrganizationInvitationsResponse_FieldSubPath) Selector() BatchGetOrganizationInvitationsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *BatchGetOrganizationInvitationsResponse_FieldSubPath) AsOrganizationInvitationsSubPath() (organization_invitation.OrganizationInvitation_FieldPath, bool) {
	res, ok := fps.subPath.(organization_invitation.OrganizationInvitation_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *BatchGetOrganizationInvitationsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *BatchGetOrganizationInvitationsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source BatchGetOrganizationInvitationsResponse
func (fps *BatchGetOrganizationInvitationsResponse_FieldSubPath) Get(source *BatchGetOrganizationInvitationsResponse) (values []interface{}) {
	switch fps.selector {
	case BatchGetOrganizationInvitationsResponse_FieldPathSelectorOrganizationInvitations:
		for _, item := range source.GetOrganizationInvitations() {
			values = append(values, fps.subPath.GetRaw(item)...)
		}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetOrganizationInvitationsResponse: %d", fps.selector))
	}
	return
}

func (fps *BatchGetOrganizationInvitationsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*BatchGetOrganizationInvitationsResponse))
}

// GetSingle returns value of selected field from source BatchGetOrganizationInvitationsResponse
func (fps *BatchGetOrganizationInvitationsResponse_FieldSubPath) GetSingle(source *BatchGetOrganizationInvitationsResponse) (interface{}, bool) {
	switch fps.selector {
	case BatchGetOrganizationInvitationsResponse_FieldPathSelectorOrganizationInvitations:
		if len(source.GetOrganizationInvitations()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetOrganizationInvitations()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetOrganizationInvitationsResponse: %d", fps.selector))
	}
}

func (fps *BatchGetOrganizationInvitationsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*BatchGetOrganizationInvitationsResponse))
}

// GetDefault returns a default value of the field type
func (fps *BatchGetOrganizationInvitationsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *BatchGetOrganizationInvitationsResponse_FieldSubPath) ClearValue(item *BatchGetOrganizationInvitationsResponse) {
	if item != nil {
		switch fps.selector {
		case BatchGetOrganizationInvitationsResponse_FieldPathSelectorOrganizationInvitations:
			for _, subItem := range item.OrganizationInvitations {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetOrganizationInvitationsResponse: %d", fps.selector))
		}
	}
}

func (fps *BatchGetOrganizationInvitationsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*BatchGetOrganizationInvitationsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *BatchGetOrganizationInvitationsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *BatchGetOrganizationInvitationsResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&BatchGetOrganizationInvitationsResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *BatchGetOrganizationInvitationsResponse_FieldSubPath) WithIValue(value interface{}) BatchGetOrganizationInvitationsResponse_FieldPathValue {
	return &BatchGetOrganizationInvitationsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *BatchGetOrganizationInvitationsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *BatchGetOrganizationInvitationsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) BatchGetOrganizationInvitationsResponse_FieldPathArrayOfValues {
	return &BatchGetOrganizationInvitationsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *BatchGetOrganizationInvitationsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *BatchGetOrganizationInvitationsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) BatchGetOrganizationInvitationsResponse_FieldPathArrayItemValue {
	return &BatchGetOrganizationInvitationsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *BatchGetOrganizationInvitationsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// BatchGetOrganizationInvitationsResponse_FieldPathValue allows storing values for BatchGetOrganizationInvitationsResponse fields according to their type
type BatchGetOrganizationInvitationsResponse_FieldPathValue interface {
	BatchGetOrganizationInvitationsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetOrganizationInvitationsResponse)
	CompareWith(*BatchGetOrganizationInvitationsResponse) (cmp int, comparable bool)
}

func ParseBatchGetOrganizationInvitationsResponse_FieldPathValue(pathStr, valueStr string) (BatchGetOrganizationInvitationsResponse_FieldPathValue, error) {
	fp, err := ParseBatchGetOrganizationInvitationsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetOrganizationInvitationsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetOrganizationInvitationsResponse_FieldPathValue), nil
}

func MustParseBatchGetOrganizationInvitationsResponse_FieldPathValue(pathStr, valueStr string) BatchGetOrganizationInvitationsResponse_FieldPathValue {
	fpv, err := ParseBatchGetOrganizationInvitationsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetOrganizationInvitationsResponse_FieldTerminalPathValue struct {
	BatchGetOrganizationInvitationsResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetOrganizationInvitationsResponse_FieldPathValue = (*BatchGetOrganizationInvitationsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetOrganizationInvitationsResponse' as interface{}
func (fpv *BatchGetOrganizationInvitationsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetOrganizationInvitationsResponse_FieldTerminalPathValue) AsOrganizationInvitationsValue() ([]*organization_invitation.OrganizationInvitation, bool) {
	res, ok := fpv.value.([]*organization_invitation.OrganizationInvitation)
	return res, ok
}
func (fpv *BatchGetOrganizationInvitationsResponse_FieldTerminalPathValue) AsMissingValue() ([]*organization_invitation.Reference, bool) {
	res, ok := fpv.value.([]*organization_invitation.Reference)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetOrganizationInvitationsResponse
func (fpv *BatchGetOrganizationInvitationsResponse_FieldTerminalPathValue) SetTo(target **BatchGetOrganizationInvitationsResponse) {
	if *target == nil {
		*target = new(BatchGetOrganizationInvitationsResponse)
	}
	switch fpv.selector {
	case BatchGetOrganizationInvitationsResponse_FieldPathSelectorOrganizationInvitations:
		(*target).OrganizationInvitations = fpv.value.([]*organization_invitation.OrganizationInvitation)
	case BatchGetOrganizationInvitationsResponse_FieldPathSelectorMissing:
		(*target).Missing = fpv.value.([]*organization_invitation.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetOrganizationInvitationsResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetOrganizationInvitationsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetOrganizationInvitationsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetOrganizationInvitationsResponse_FieldTerminalPathValue' with the value under path in 'BatchGetOrganizationInvitationsResponse'.
func (fpv *BatchGetOrganizationInvitationsResponse_FieldTerminalPathValue) CompareWith(source *BatchGetOrganizationInvitationsResponse) (int, bool) {
	switch fpv.selector {
	case BatchGetOrganizationInvitationsResponse_FieldPathSelectorOrganizationInvitations:
		return 0, false
	case BatchGetOrganizationInvitationsResponse_FieldPathSelectorMissing:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetOrganizationInvitationsResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetOrganizationInvitationsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetOrganizationInvitationsResponse))
}

type BatchGetOrganizationInvitationsResponse_FieldSubPathValue struct {
	BatchGetOrganizationInvitationsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ BatchGetOrganizationInvitationsResponse_FieldPathValue = (*BatchGetOrganizationInvitationsResponse_FieldSubPathValue)(nil)

func (fpvs *BatchGetOrganizationInvitationsResponse_FieldSubPathValue) AsOrganizationInvitationsPathValue() (organization_invitation.OrganizationInvitation_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(organization_invitation.OrganizationInvitation_FieldPathValue)
	return res, ok
}

func (fpvs *BatchGetOrganizationInvitationsResponse_FieldSubPathValue) SetTo(target **BatchGetOrganizationInvitationsResponse) {
	if *target == nil {
		*target = new(BatchGetOrganizationInvitationsResponse)
	}
	switch fpvs.Selector() {
	case BatchGetOrganizationInvitationsResponse_FieldPathSelectorOrganizationInvitations:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetOrganizationInvitationsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetOrganizationInvitationsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetOrganizationInvitationsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *BatchGetOrganizationInvitationsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *BatchGetOrganizationInvitationsResponse_FieldSubPathValue) CompareWith(source *BatchGetOrganizationInvitationsResponse) (int, bool) {
	switch fpvs.Selector() {
	case BatchGetOrganizationInvitationsResponse_FieldPathSelectorOrganizationInvitations:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetOrganizationInvitationsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetOrganizationInvitationsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*BatchGetOrganizationInvitationsResponse))
}

// BatchGetOrganizationInvitationsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetOrganizationInvitationsResponse according to their type
// Present only for array (repeated) types.
type BatchGetOrganizationInvitationsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetOrganizationInvitationsResponse_FieldPath
	ContainsValue(*BatchGetOrganizationInvitationsResponse) bool
}

// ParseBatchGetOrganizationInvitationsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetOrganizationInvitationsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetOrganizationInvitationsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetOrganizationInvitationsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetOrganizationInvitationsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetOrganizationInvitationsResponse_FieldPathArrayItemValue), nil
}

func MustParseBatchGetOrganizationInvitationsResponse_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetOrganizationInvitationsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetOrganizationInvitationsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetOrganizationInvitationsResponse_FieldTerminalPathArrayItemValue struct {
	BatchGetOrganizationInvitationsResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetOrganizationInvitationsResponse_FieldPathArrayItemValue = (*BatchGetOrganizationInvitationsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetOrganizationInvitationsResponse as interface{}
func (fpaiv *BatchGetOrganizationInvitationsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetOrganizationInvitationsResponse_FieldTerminalPathArrayItemValue) AsOrganizationInvitationsItemValue() (*organization_invitation.OrganizationInvitation, bool) {
	res, ok := fpaiv.value.(*organization_invitation.OrganizationInvitation)
	return res, ok
}
func (fpaiv *BatchGetOrganizationInvitationsResponse_FieldTerminalPathArrayItemValue) AsMissingItemValue() (*organization_invitation.Reference, bool) {
	res, ok := fpaiv.value.(*organization_invitation.Reference)
	return res, ok
}

func (fpaiv *BatchGetOrganizationInvitationsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetOrganizationInvitationsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetOrganizationInvitationsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetOrganizationInvitationsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetOrganizationInvitationsResponse'
func (fpaiv *BatchGetOrganizationInvitationsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetOrganizationInvitationsResponse) bool {
	slice := fpaiv.BatchGetOrganizationInvitationsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type BatchGetOrganizationInvitationsResponse_FieldSubPathArrayItemValue struct {
	BatchGetOrganizationInvitationsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *BatchGetOrganizationInvitationsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *BatchGetOrganizationInvitationsResponse_FieldSubPathArrayItemValue) AsOrganizationInvitationsPathItemValue() (organization_invitation.OrganizationInvitation_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(organization_invitation.OrganizationInvitation_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetOrganizationInvitationsResponse'
func (fpaivs *BatchGetOrganizationInvitationsResponse_FieldSubPathArrayItemValue) ContainsValue(source *BatchGetOrganizationInvitationsResponse) bool {
	switch fpaivs.Selector() {
	case BatchGetOrganizationInvitationsResponse_FieldPathSelectorOrganizationInvitations:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetOrganizationInvitationsResponse: %d", fpaivs.Selector()))
	}
}

// BatchGetOrganizationInvitationsResponse_FieldPathArrayOfValues allows storing slice of values for BatchGetOrganizationInvitationsResponse fields according to their type
type BatchGetOrganizationInvitationsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetOrganizationInvitationsResponse_FieldPath
}

func ParseBatchGetOrganizationInvitationsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetOrganizationInvitationsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetOrganizationInvitationsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetOrganizationInvitationsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetOrganizationInvitationsResponse_FieldPathArrayOfValues), nil
}

func MustParseBatchGetOrganizationInvitationsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetOrganizationInvitationsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetOrganizationInvitationsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetOrganizationInvitationsResponse_FieldTerminalPathArrayOfValues struct {
	BatchGetOrganizationInvitationsResponse_FieldTerminalPath
	values interface{}
}

var _ BatchGetOrganizationInvitationsResponse_FieldPathArrayOfValues = (*BatchGetOrganizationInvitationsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetOrganizationInvitationsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetOrganizationInvitationsResponse_FieldPathSelectorOrganizationInvitations:
		for _, v := range fpaov.values.([][]*organization_invitation.OrganizationInvitation) {
			values = append(values, v)
		}
	case BatchGetOrganizationInvitationsResponse_FieldPathSelectorMissing:
		for _, v := range fpaov.values.([][]*organization_invitation.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetOrganizationInvitationsResponse_FieldTerminalPathArrayOfValues) AsOrganizationInvitationsArrayOfValues() ([][]*organization_invitation.OrganizationInvitation, bool) {
	res, ok := fpaov.values.([][]*organization_invitation.OrganizationInvitation)
	return res, ok
}
func (fpaov *BatchGetOrganizationInvitationsResponse_FieldTerminalPathArrayOfValues) AsMissingArrayOfValues() ([][]*organization_invitation.Reference, bool) {
	res, ok := fpaov.values.([][]*organization_invitation.Reference)
	return res, ok
}

type BatchGetOrganizationInvitationsResponse_FieldSubPathArrayOfValues struct {
	BatchGetOrganizationInvitationsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ BatchGetOrganizationInvitationsResponse_FieldPathArrayOfValues = (*BatchGetOrganizationInvitationsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *BatchGetOrganizationInvitationsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *BatchGetOrganizationInvitationsResponse_FieldSubPathArrayOfValues) AsOrganizationInvitationsPathArrayOfValues() (organization_invitation.OrganizationInvitation_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(organization_invitation.OrganizationInvitation_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListOrganizationInvitationsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListOrganizationInvitationsRequest_FieldPathSelector
	Get(source *ListOrganizationInvitationsRequest) []interface{}
	GetSingle(source *ListOrganizationInvitationsRequest) (interface{}, bool)
	ClearValue(item *ListOrganizationInvitationsRequest)

	// Those methods build corresponding ListOrganizationInvitationsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListOrganizationInvitationsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ListOrganizationInvitationsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListOrganizationInvitationsRequest_FieldPathArrayItemValue
}

type ListOrganizationInvitationsRequest_FieldPathSelector int32

const (
	ListOrganizationInvitationsRequest_FieldPathSelectorParent            ListOrganizationInvitationsRequest_FieldPathSelector = 0
	ListOrganizationInvitationsRequest_FieldPathSelectorPageSize          ListOrganizationInvitationsRequest_FieldPathSelector = 1
	ListOrganizationInvitationsRequest_FieldPathSelectorPageToken         ListOrganizationInvitationsRequest_FieldPathSelector = 2
	ListOrganizationInvitationsRequest_FieldPathSelectorOrderBy           ListOrganizationInvitationsRequest_FieldPathSelector = 3
	ListOrganizationInvitationsRequest_FieldPathSelectorFilter            ListOrganizationInvitationsRequest_FieldPathSelector = 4
	ListOrganizationInvitationsRequest_FieldPathSelectorFieldMask         ListOrganizationInvitationsRequest_FieldPathSelector = 5
	ListOrganizationInvitationsRequest_FieldPathSelectorView              ListOrganizationInvitationsRequest_FieldPathSelector = 6
	ListOrganizationInvitationsRequest_FieldPathSelectorIncludePagingInfo ListOrganizationInvitationsRequest_FieldPathSelector = 7
)

func (s ListOrganizationInvitationsRequest_FieldPathSelector) String() string {
	switch s {
	case ListOrganizationInvitationsRequest_FieldPathSelectorParent:
		return "parent"
	case ListOrganizationInvitationsRequest_FieldPathSelectorPageSize:
		return "page_size"
	case ListOrganizationInvitationsRequest_FieldPathSelectorPageToken:
		return "page_token"
	case ListOrganizationInvitationsRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case ListOrganizationInvitationsRequest_FieldPathSelectorFilter:
		return "filter"
	case ListOrganizationInvitationsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case ListOrganizationInvitationsRequest_FieldPathSelectorView:
		return "view"
	case ListOrganizationInvitationsRequest_FieldPathSelectorIncludePagingInfo:
		return "include_paging_info"
	default:
		panic(fmt.Sprintf("Invalid selector for ListOrganizationInvitationsRequest: %d", s))
	}
}

func BuildListOrganizationInvitationsRequest_FieldPath(fp gotenobject.RawFieldPath) (ListOrganizationInvitationsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListOrganizationInvitationsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &ListOrganizationInvitationsRequest_FieldTerminalPath{selector: ListOrganizationInvitationsRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &ListOrganizationInvitationsRequest_FieldTerminalPath{selector: ListOrganizationInvitationsRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &ListOrganizationInvitationsRequest_FieldTerminalPath{selector: ListOrganizationInvitationsRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &ListOrganizationInvitationsRequest_FieldTerminalPath{selector: ListOrganizationInvitationsRequest_FieldPathSelectorOrderBy}, nil
		case "filter":
			return &ListOrganizationInvitationsRequest_FieldTerminalPath{selector: ListOrganizationInvitationsRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &ListOrganizationInvitationsRequest_FieldTerminalPath{selector: ListOrganizationInvitationsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &ListOrganizationInvitationsRequest_FieldTerminalPath{selector: ListOrganizationInvitationsRequest_FieldPathSelectorView}, nil
		case "include_paging_info", "includePagingInfo", "include-paging-info":
			return &ListOrganizationInvitationsRequest_FieldTerminalPath{selector: ListOrganizationInvitationsRequest_FieldPathSelectorIncludePagingInfo}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListOrganizationInvitationsRequest", fp)
}

func ParseListOrganizationInvitationsRequest_FieldPath(rawField string) (ListOrganizationInvitationsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListOrganizationInvitationsRequest_FieldPath(fp)
}

func MustParseListOrganizationInvitationsRequest_FieldPath(rawField string) ListOrganizationInvitationsRequest_FieldPath {
	fp, err := ParseListOrganizationInvitationsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListOrganizationInvitationsRequest_FieldTerminalPath struct {
	selector ListOrganizationInvitationsRequest_FieldPathSelector
}

var _ ListOrganizationInvitationsRequest_FieldPath = (*ListOrganizationInvitationsRequest_FieldTerminalPath)(nil)

func (fp *ListOrganizationInvitationsRequest_FieldTerminalPath) Selector() ListOrganizationInvitationsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListOrganizationInvitationsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListOrganizationInvitationsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListOrganizationInvitationsRequest
func (fp *ListOrganizationInvitationsRequest_FieldTerminalPath) Get(source *ListOrganizationInvitationsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListOrganizationInvitationsRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case ListOrganizationInvitationsRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case ListOrganizationInvitationsRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case ListOrganizationInvitationsRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case ListOrganizationInvitationsRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case ListOrganizationInvitationsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case ListOrganizationInvitationsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		case ListOrganizationInvitationsRequest_FieldPathSelectorIncludePagingInfo:
			values = append(values, source.IncludePagingInfo)
		default:
			panic(fmt.Sprintf("Invalid selector for ListOrganizationInvitationsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ListOrganizationInvitationsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListOrganizationInvitationsRequest))
}

// GetSingle returns value pointed by specific field of from source ListOrganizationInvitationsRequest
func (fp *ListOrganizationInvitationsRequest_FieldTerminalPath) GetSingle(source *ListOrganizationInvitationsRequest) (interface{}, bool) {
	switch fp.selector {
	case ListOrganizationInvitationsRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case ListOrganizationInvitationsRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case ListOrganizationInvitationsRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case ListOrganizationInvitationsRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case ListOrganizationInvitationsRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case ListOrganizationInvitationsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case ListOrganizationInvitationsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	case ListOrganizationInvitationsRequest_FieldPathSelectorIncludePagingInfo:
		return source.GetIncludePagingInfo(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListOrganizationInvitationsRequest: %d", fp.selector))
	}
}

func (fp *ListOrganizationInvitationsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListOrganizationInvitationsRequest))
}

// GetDefault returns a default value of the field type
func (fp *ListOrganizationInvitationsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListOrganizationInvitationsRequest_FieldPathSelectorParent:
		return (*organization_invitation.ParentName)(nil)
	case ListOrganizationInvitationsRequest_FieldPathSelectorPageSize:
		return int32(0)
	case ListOrganizationInvitationsRequest_FieldPathSelectorPageToken:
		return (*organization_invitation.PagerCursor)(nil)
	case ListOrganizationInvitationsRequest_FieldPathSelectorOrderBy:
		return (*organization_invitation.OrderBy)(nil)
	case ListOrganizationInvitationsRequest_FieldPathSelectorFilter:
		return (*organization_invitation.Filter)(nil)
	case ListOrganizationInvitationsRequest_FieldPathSelectorFieldMask:
		return (*organization_invitation.OrganizationInvitation_FieldMask)(nil)
	case ListOrganizationInvitationsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	case ListOrganizationInvitationsRequest_FieldPathSelectorIncludePagingInfo:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for ListOrganizationInvitationsRequest: %d", fp.selector))
	}
}

func (fp *ListOrganizationInvitationsRequest_FieldTerminalPath) ClearValue(item *ListOrganizationInvitationsRequest) {
	if item != nil {
		switch fp.selector {
		case ListOrganizationInvitationsRequest_FieldPathSelectorParent:
			item.Parent = nil
		case ListOrganizationInvitationsRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case ListOrganizationInvitationsRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case ListOrganizationInvitationsRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case ListOrganizationInvitationsRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case ListOrganizationInvitationsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case ListOrganizationInvitationsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		case ListOrganizationInvitationsRequest_FieldPathSelectorIncludePagingInfo:
			item.IncludePagingInfo = false
		default:
			panic(fmt.Sprintf("Invalid selector for ListOrganizationInvitationsRequest: %d", fp.selector))
		}
	}
}

func (fp *ListOrganizationInvitationsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListOrganizationInvitationsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListOrganizationInvitationsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListOrganizationInvitationsRequest_FieldPathSelectorParent ||
		fp.selector == ListOrganizationInvitationsRequest_FieldPathSelectorPageSize ||
		fp.selector == ListOrganizationInvitationsRequest_FieldPathSelectorPageToken ||
		fp.selector == ListOrganizationInvitationsRequest_FieldPathSelectorOrderBy ||
		fp.selector == ListOrganizationInvitationsRequest_FieldPathSelectorFilter ||
		fp.selector == ListOrganizationInvitationsRequest_FieldPathSelectorFieldMask ||
		fp.selector == ListOrganizationInvitationsRequest_FieldPathSelectorView ||
		fp.selector == ListOrganizationInvitationsRequest_FieldPathSelectorIncludePagingInfo
}

func (fp *ListOrganizationInvitationsRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ListOrganizationInvitationsRequest_FieldTerminalPath) WithIValue(value interface{}) ListOrganizationInvitationsRequest_FieldPathValue {
	switch fp.selector {
	case ListOrganizationInvitationsRequest_FieldPathSelectorParent:
		return &ListOrganizationInvitationsRequest_FieldTerminalPathValue{ListOrganizationInvitationsRequest_FieldTerminalPath: *fp, value: value.(*organization_invitation.ParentName)}
	case ListOrganizationInvitationsRequest_FieldPathSelectorPageSize:
		return &ListOrganizationInvitationsRequest_FieldTerminalPathValue{ListOrganizationInvitationsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case ListOrganizationInvitationsRequest_FieldPathSelectorPageToken:
		return &ListOrganizationInvitationsRequest_FieldTerminalPathValue{ListOrganizationInvitationsRequest_FieldTerminalPath: *fp, value: value.(*organization_invitation.PagerCursor)}
	case ListOrganizationInvitationsRequest_FieldPathSelectorOrderBy:
		return &ListOrganizationInvitationsRequest_FieldTerminalPathValue{ListOrganizationInvitationsRequest_FieldTerminalPath: *fp, value: value.(*organization_invitation.OrderBy)}
	case ListOrganizationInvitationsRequest_FieldPathSelectorFilter:
		return &ListOrganizationInvitationsRequest_FieldTerminalPathValue{ListOrganizationInvitationsRequest_FieldTerminalPath: *fp, value: value.(*organization_invitation.Filter)}
	case ListOrganizationInvitationsRequest_FieldPathSelectorFieldMask:
		return &ListOrganizationInvitationsRequest_FieldTerminalPathValue{ListOrganizationInvitationsRequest_FieldTerminalPath: *fp, value: value.(*organization_invitation.OrganizationInvitation_FieldMask)}
	case ListOrganizationInvitationsRequest_FieldPathSelectorView:
		return &ListOrganizationInvitationsRequest_FieldTerminalPathValue{ListOrganizationInvitationsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	case ListOrganizationInvitationsRequest_FieldPathSelectorIncludePagingInfo:
		return &ListOrganizationInvitationsRequest_FieldTerminalPathValue{ListOrganizationInvitationsRequest_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListOrganizationInvitationsRequest: %d", fp.selector))
	}
}

func (fp *ListOrganizationInvitationsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListOrganizationInvitationsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListOrganizationInvitationsRequest_FieldPathArrayOfValues {
	fpaov := &ListOrganizationInvitationsRequest_FieldTerminalPathArrayOfValues{ListOrganizationInvitationsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListOrganizationInvitationsRequest_FieldPathSelectorParent:
		return &ListOrganizationInvitationsRequest_FieldTerminalPathArrayOfValues{ListOrganizationInvitationsRequest_FieldTerminalPath: *fp, values: values.([]*organization_invitation.ParentName)}
	case ListOrganizationInvitationsRequest_FieldPathSelectorPageSize:
		return &ListOrganizationInvitationsRequest_FieldTerminalPathArrayOfValues{ListOrganizationInvitationsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case ListOrganizationInvitationsRequest_FieldPathSelectorPageToken:
		return &ListOrganizationInvitationsRequest_FieldTerminalPathArrayOfValues{ListOrganizationInvitationsRequest_FieldTerminalPath: *fp, values: values.([]*organization_invitation.PagerCursor)}
	case ListOrganizationInvitationsRequest_FieldPathSelectorOrderBy:
		return &ListOrganizationInvitationsRequest_FieldTerminalPathArrayOfValues{ListOrganizationInvitationsRequest_FieldTerminalPath: *fp, values: values.([]*organization_invitation.OrderBy)}
	case ListOrganizationInvitationsRequest_FieldPathSelectorFilter:
		return &ListOrganizationInvitationsRequest_FieldTerminalPathArrayOfValues{ListOrganizationInvitationsRequest_FieldTerminalPath: *fp, values: values.([]*organization_invitation.Filter)}
	case ListOrganizationInvitationsRequest_FieldPathSelectorFieldMask:
		return &ListOrganizationInvitationsRequest_FieldTerminalPathArrayOfValues{ListOrganizationInvitationsRequest_FieldTerminalPath: *fp, values: values.([]*organization_invitation.OrganizationInvitation_FieldMask)}
	case ListOrganizationInvitationsRequest_FieldPathSelectorView:
		return &ListOrganizationInvitationsRequest_FieldTerminalPathArrayOfValues{ListOrganizationInvitationsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	case ListOrganizationInvitationsRequest_FieldPathSelectorIncludePagingInfo:
		return &ListOrganizationInvitationsRequest_FieldTerminalPathArrayOfValues{ListOrganizationInvitationsRequest_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListOrganizationInvitationsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListOrganizationInvitationsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListOrganizationInvitationsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListOrganizationInvitationsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ListOrganizationInvitationsRequest: %d", fp.selector))
	}
}

func (fp *ListOrganizationInvitationsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ListOrganizationInvitationsRequest_FieldPathValue allows storing values for ListOrganizationInvitationsRequest fields according to their type
type ListOrganizationInvitationsRequest_FieldPathValue interface {
	ListOrganizationInvitationsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListOrganizationInvitationsRequest)
	CompareWith(*ListOrganizationInvitationsRequest) (cmp int, comparable bool)
}

func ParseListOrganizationInvitationsRequest_FieldPathValue(pathStr, valueStr string) (ListOrganizationInvitationsRequest_FieldPathValue, error) {
	fp, err := ParseListOrganizationInvitationsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListOrganizationInvitationsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListOrganizationInvitationsRequest_FieldPathValue), nil
}

func MustParseListOrganizationInvitationsRequest_FieldPathValue(pathStr, valueStr string) ListOrganizationInvitationsRequest_FieldPathValue {
	fpv, err := ParseListOrganizationInvitationsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListOrganizationInvitationsRequest_FieldTerminalPathValue struct {
	ListOrganizationInvitationsRequest_FieldTerminalPath
	value interface{}
}

var _ ListOrganizationInvitationsRequest_FieldPathValue = (*ListOrganizationInvitationsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListOrganizationInvitationsRequest' as interface{}
func (fpv *ListOrganizationInvitationsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListOrganizationInvitationsRequest_FieldTerminalPathValue) AsParentValue() (*organization_invitation.ParentName, bool) {
	res, ok := fpv.value.(*organization_invitation.ParentName)
	return res, ok
}
func (fpv *ListOrganizationInvitationsRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *ListOrganizationInvitationsRequest_FieldTerminalPathValue) AsPageTokenValue() (*organization_invitation.PagerCursor, bool) {
	res, ok := fpv.value.(*organization_invitation.PagerCursor)
	return res, ok
}
func (fpv *ListOrganizationInvitationsRequest_FieldTerminalPathValue) AsOrderByValue() (*organization_invitation.OrderBy, bool) {
	res, ok := fpv.value.(*organization_invitation.OrderBy)
	return res, ok
}
func (fpv *ListOrganizationInvitationsRequest_FieldTerminalPathValue) AsFilterValue() (*organization_invitation.Filter, bool) {
	res, ok := fpv.value.(*organization_invitation.Filter)
	return res, ok
}
func (fpv *ListOrganizationInvitationsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*organization_invitation.OrganizationInvitation_FieldMask, bool) {
	res, ok := fpv.value.(*organization_invitation.OrganizationInvitation_FieldMask)
	return res, ok
}
func (fpv *ListOrganizationInvitationsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}
func (fpv *ListOrganizationInvitationsRequest_FieldTerminalPathValue) AsIncludePagingInfoValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object ListOrganizationInvitationsRequest
func (fpv *ListOrganizationInvitationsRequest_FieldTerminalPathValue) SetTo(target **ListOrganizationInvitationsRequest) {
	if *target == nil {
		*target = new(ListOrganizationInvitationsRequest)
	}
	switch fpv.selector {
	case ListOrganizationInvitationsRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*organization_invitation.ParentName)
	case ListOrganizationInvitationsRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case ListOrganizationInvitationsRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*organization_invitation.PagerCursor)
	case ListOrganizationInvitationsRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*organization_invitation.OrderBy)
	case ListOrganizationInvitationsRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*organization_invitation.Filter)
	case ListOrganizationInvitationsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*organization_invitation.OrganizationInvitation_FieldMask)
	case ListOrganizationInvitationsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	case ListOrganizationInvitationsRequest_FieldPathSelectorIncludePagingInfo:
		(*target).IncludePagingInfo = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for ListOrganizationInvitationsRequest: %d", fpv.selector))
	}
}

func (fpv *ListOrganizationInvitationsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListOrganizationInvitationsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListOrganizationInvitationsRequest_FieldTerminalPathValue' with the value under path in 'ListOrganizationInvitationsRequest'.
func (fpv *ListOrganizationInvitationsRequest_FieldTerminalPathValue) CompareWith(source *ListOrganizationInvitationsRequest) (int, bool) {
	switch fpv.selector {
	case ListOrganizationInvitationsRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*organization_invitation.ParentName)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ListOrganizationInvitationsRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListOrganizationInvitationsRequest_FieldPathSelectorPageToken:
		return 0, false
	case ListOrganizationInvitationsRequest_FieldPathSelectorOrderBy:
		return 0, false
	case ListOrganizationInvitationsRequest_FieldPathSelectorFilter:
		return 0, false
	case ListOrganizationInvitationsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case ListOrganizationInvitationsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListOrganizationInvitationsRequest_FieldPathSelectorIncludePagingInfo:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIncludePagingInfo()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListOrganizationInvitationsRequest: %d", fpv.selector))
	}
}

func (fpv *ListOrganizationInvitationsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListOrganizationInvitationsRequest))
}

// ListOrganizationInvitationsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for ListOrganizationInvitationsRequest according to their type
// Present only for array (repeated) types.
type ListOrganizationInvitationsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListOrganizationInvitationsRequest_FieldPath
	ContainsValue(*ListOrganizationInvitationsRequest) bool
}

// ParseListOrganizationInvitationsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListOrganizationInvitationsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ListOrganizationInvitationsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseListOrganizationInvitationsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListOrganizationInvitationsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListOrganizationInvitationsRequest_FieldPathArrayItemValue), nil
}

func MustParseListOrganizationInvitationsRequest_FieldPathArrayItemValue(pathStr, valueStr string) ListOrganizationInvitationsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseListOrganizationInvitationsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListOrganizationInvitationsRequest_FieldTerminalPathArrayItemValue struct {
	ListOrganizationInvitationsRequest_FieldTerminalPath
	value interface{}
}

var _ ListOrganizationInvitationsRequest_FieldPathArrayItemValue = (*ListOrganizationInvitationsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListOrganizationInvitationsRequest as interface{}
func (fpaiv *ListOrganizationInvitationsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ListOrganizationInvitationsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ListOrganizationInvitationsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListOrganizationInvitationsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListOrganizationInvitationsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListOrganizationInvitationsRequest'
func (fpaiv *ListOrganizationInvitationsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ListOrganizationInvitationsRequest) bool {
	slice := fpaiv.ListOrganizationInvitationsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ListOrganizationInvitationsRequest_FieldPathArrayOfValues allows storing slice of values for ListOrganizationInvitationsRequest fields according to their type
type ListOrganizationInvitationsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListOrganizationInvitationsRequest_FieldPath
}

func ParseListOrganizationInvitationsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ListOrganizationInvitationsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseListOrganizationInvitationsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListOrganizationInvitationsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListOrganizationInvitationsRequest_FieldPathArrayOfValues), nil
}

func MustParseListOrganizationInvitationsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ListOrganizationInvitationsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseListOrganizationInvitationsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListOrganizationInvitationsRequest_FieldTerminalPathArrayOfValues struct {
	ListOrganizationInvitationsRequest_FieldTerminalPath
	values interface{}
}

var _ ListOrganizationInvitationsRequest_FieldPathArrayOfValues = (*ListOrganizationInvitationsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListOrganizationInvitationsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListOrganizationInvitationsRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*organization_invitation.ParentName) {
			values = append(values, v)
		}
	case ListOrganizationInvitationsRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case ListOrganizationInvitationsRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*organization_invitation.PagerCursor) {
			values = append(values, v)
		}
	case ListOrganizationInvitationsRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*organization_invitation.OrderBy) {
			values = append(values, v)
		}
	case ListOrganizationInvitationsRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*organization_invitation.Filter) {
			values = append(values, v)
		}
	case ListOrganizationInvitationsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*organization_invitation.OrganizationInvitation_FieldMask) {
			values = append(values, v)
		}
	case ListOrganizationInvitationsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	case ListOrganizationInvitationsRequest_FieldPathSelectorIncludePagingInfo:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListOrganizationInvitationsRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*organization_invitation.ParentName, bool) {
	res, ok := fpaov.values.([]*organization_invitation.ParentName)
	return res, ok
}
func (fpaov *ListOrganizationInvitationsRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *ListOrganizationInvitationsRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*organization_invitation.PagerCursor, bool) {
	res, ok := fpaov.values.([]*organization_invitation.PagerCursor)
	return res, ok
}
func (fpaov *ListOrganizationInvitationsRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*organization_invitation.OrderBy, bool) {
	res, ok := fpaov.values.([]*organization_invitation.OrderBy)
	return res, ok
}
func (fpaov *ListOrganizationInvitationsRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*organization_invitation.Filter, bool) {
	res, ok := fpaov.values.([]*organization_invitation.Filter)
	return res, ok
}
func (fpaov *ListOrganizationInvitationsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*organization_invitation.OrganizationInvitation_FieldMask, bool) {
	res, ok := fpaov.values.([]*organization_invitation.OrganizationInvitation_FieldMask)
	return res, ok
}
func (fpaov *ListOrganizationInvitationsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}
func (fpaov *ListOrganizationInvitationsRequest_FieldTerminalPathArrayOfValues) AsIncludePagingInfoArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListOrganizationInvitationsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListOrganizationInvitationsResponse_FieldPathSelector
	Get(source *ListOrganizationInvitationsResponse) []interface{}
	GetSingle(source *ListOrganizationInvitationsResponse) (interface{}, bool)
	ClearValue(item *ListOrganizationInvitationsResponse)

	// Those methods build corresponding ListOrganizationInvitationsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListOrganizationInvitationsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) ListOrganizationInvitationsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListOrganizationInvitationsResponse_FieldPathArrayItemValue
}

type ListOrganizationInvitationsResponse_FieldPathSelector int32

const (
	ListOrganizationInvitationsResponse_FieldPathSelectorOrganizationInvitations ListOrganizationInvitationsResponse_FieldPathSelector = 0
	ListOrganizationInvitationsResponse_FieldPathSelectorPrevPageToken           ListOrganizationInvitationsResponse_FieldPathSelector = 1
	ListOrganizationInvitationsResponse_FieldPathSelectorNextPageToken           ListOrganizationInvitationsResponse_FieldPathSelector = 2
	ListOrganizationInvitationsResponse_FieldPathSelectorCurrentOffset           ListOrganizationInvitationsResponse_FieldPathSelector = 3
	ListOrganizationInvitationsResponse_FieldPathSelectorTotalResultsCount       ListOrganizationInvitationsResponse_FieldPathSelector = 4
)

func (s ListOrganizationInvitationsResponse_FieldPathSelector) String() string {
	switch s {
	case ListOrganizationInvitationsResponse_FieldPathSelectorOrganizationInvitations:
		return "organization_invitations"
	case ListOrganizationInvitationsResponse_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case ListOrganizationInvitationsResponse_FieldPathSelectorNextPageToken:
		return "next_page_token"
	case ListOrganizationInvitationsResponse_FieldPathSelectorCurrentOffset:
		return "current_offset"
	case ListOrganizationInvitationsResponse_FieldPathSelectorTotalResultsCount:
		return "total_results_count"
	default:
		panic(fmt.Sprintf("Invalid selector for ListOrganizationInvitationsResponse: %d", s))
	}
}

func BuildListOrganizationInvitationsResponse_FieldPath(fp gotenobject.RawFieldPath) (ListOrganizationInvitationsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListOrganizationInvitationsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "organization_invitations", "organizationInvitations", "organization-invitations":
			return &ListOrganizationInvitationsResponse_FieldTerminalPath{selector: ListOrganizationInvitationsResponse_FieldPathSelectorOrganizationInvitations}, nil
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &ListOrganizationInvitationsResponse_FieldTerminalPath{selector: ListOrganizationInvitationsResponse_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &ListOrganizationInvitationsResponse_FieldTerminalPath{selector: ListOrganizationInvitationsResponse_FieldPathSelectorNextPageToken}, nil
		case "current_offset", "currentOffset", "current-offset":
			return &ListOrganizationInvitationsResponse_FieldTerminalPath{selector: ListOrganizationInvitationsResponse_FieldPathSelectorCurrentOffset}, nil
		case "total_results_count", "totalResultsCount", "total-results-count":
			return &ListOrganizationInvitationsResponse_FieldTerminalPath{selector: ListOrganizationInvitationsResponse_FieldPathSelectorTotalResultsCount}, nil
		}
	} else {
		switch fp[0] {
		case "organization_invitations", "organizationInvitations", "organization-invitations":
			if subpath, err := organization_invitation.BuildOrganizationInvitation_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ListOrganizationInvitationsResponse_FieldSubPath{selector: ListOrganizationInvitationsResponse_FieldPathSelectorOrganizationInvitations, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListOrganizationInvitationsResponse", fp)
}

func ParseListOrganizationInvitationsResponse_FieldPath(rawField string) (ListOrganizationInvitationsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListOrganizationInvitationsResponse_FieldPath(fp)
}

func MustParseListOrganizationInvitationsResponse_FieldPath(rawField string) ListOrganizationInvitationsResponse_FieldPath {
	fp, err := ParseListOrganizationInvitationsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListOrganizationInvitationsResponse_FieldTerminalPath struct {
	selector ListOrganizationInvitationsResponse_FieldPathSelector
}

var _ ListOrganizationInvitationsResponse_FieldPath = (*ListOrganizationInvitationsResponse_FieldTerminalPath)(nil)

func (fp *ListOrganizationInvitationsResponse_FieldTerminalPath) Selector() ListOrganizationInvitationsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListOrganizationInvitationsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListOrganizationInvitationsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListOrganizationInvitationsResponse
func (fp *ListOrganizationInvitationsResponse_FieldTerminalPath) Get(source *ListOrganizationInvitationsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListOrganizationInvitationsResponse_FieldPathSelectorOrganizationInvitations:
			for _, value := range source.GetOrganizationInvitations() {
				values = append(values, value)
			}
		case ListOrganizationInvitationsResponse_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case ListOrganizationInvitationsResponse_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		case ListOrganizationInvitationsResponse_FieldPathSelectorCurrentOffset:
			values = append(values, source.CurrentOffset)
		case ListOrganizationInvitationsResponse_FieldPathSelectorTotalResultsCount:
			values = append(values, source.TotalResultsCount)
		default:
			panic(fmt.Sprintf("Invalid selector for ListOrganizationInvitationsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *ListOrganizationInvitationsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListOrganizationInvitationsResponse))
}

// GetSingle returns value pointed by specific field of from source ListOrganizationInvitationsResponse
func (fp *ListOrganizationInvitationsResponse_FieldTerminalPath) GetSingle(source *ListOrganizationInvitationsResponse) (interface{}, bool) {
	switch fp.selector {
	case ListOrganizationInvitationsResponse_FieldPathSelectorOrganizationInvitations:
		res := source.GetOrganizationInvitations()
		return res, res != nil
	case ListOrganizationInvitationsResponse_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case ListOrganizationInvitationsResponse_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	case ListOrganizationInvitationsResponse_FieldPathSelectorCurrentOffset:
		return source.GetCurrentOffset(), source != nil
	case ListOrganizationInvitationsResponse_FieldPathSelectorTotalResultsCount:
		return source.GetTotalResultsCount(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListOrganizationInvitationsResponse: %d", fp.selector))
	}
}

func (fp *ListOrganizationInvitationsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListOrganizationInvitationsResponse))
}

// GetDefault returns a default value of the field type
func (fp *ListOrganizationInvitationsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListOrganizationInvitationsResponse_FieldPathSelectorOrganizationInvitations:
		return ([]*organization_invitation.OrganizationInvitation)(nil)
	case ListOrganizationInvitationsResponse_FieldPathSelectorPrevPageToken:
		return (*organization_invitation.PagerCursor)(nil)
	case ListOrganizationInvitationsResponse_FieldPathSelectorNextPageToken:
		return (*organization_invitation.PagerCursor)(nil)
	case ListOrganizationInvitationsResponse_FieldPathSelectorCurrentOffset:
		return int32(0)
	case ListOrganizationInvitationsResponse_FieldPathSelectorTotalResultsCount:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for ListOrganizationInvitationsResponse: %d", fp.selector))
	}
}

func (fp *ListOrganizationInvitationsResponse_FieldTerminalPath) ClearValue(item *ListOrganizationInvitationsResponse) {
	if item != nil {
		switch fp.selector {
		case ListOrganizationInvitationsResponse_FieldPathSelectorOrganizationInvitations:
			item.OrganizationInvitations = nil
		case ListOrganizationInvitationsResponse_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case ListOrganizationInvitationsResponse_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		case ListOrganizationInvitationsResponse_FieldPathSelectorCurrentOffset:
			item.CurrentOffset = int32(0)
		case ListOrganizationInvitationsResponse_FieldPathSelectorTotalResultsCount:
			item.TotalResultsCount = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for ListOrganizationInvitationsResponse: %d", fp.selector))
		}
	}
}

func (fp *ListOrganizationInvitationsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListOrganizationInvitationsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListOrganizationInvitationsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListOrganizationInvitationsResponse_FieldPathSelectorPrevPageToken ||
		fp.selector == ListOrganizationInvitationsResponse_FieldPathSelectorNextPageToken ||
		fp.selector == ListOrganizationInvitationsResponse_FieldPathSelectorCurrentOffset ||
		fp.selector == ListOrganizationInvitationsResponse_FieldPathSelectorTotalResultsCount
}

func (fp *ListOrganizationInvitationsResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ListOrganizationInvitationsResponse_FieldTerminalPath) WithIValue(value interface{}) ListOrganizationInvitationsResponse_FieldPathValue {
	switch fp.selector {
	case ListOrganizationInvitationsResponse_FieldPathSelectorOrganizationInvitations:
		return &ListOrganizationInvitationsResponse_FieldTerminalPathValue{ListOrganizationInvitationsResponse_FieldTerminalPath: *fp, value: value.([]*organization_invitation.OrganizationInvitation)}
	case ListOrganizationInvitationsResponse_FieldPathSelectorPrevPageToken:
		return &ListOrganizationInvitationsResponse_FieldTerminalPathValue{ListOrganizationInvitationsResponse_FieldTerminalPath: *fp, value: value.(*organization_invitation.PagerCursor)}
	case ListOrganizationInvitationsResponse_FieldPathSelectorNextPageToken:
		return &ListOrganizationInvitationsResponse_FieldTerminalPathValue{ListOrganizationInvitationsResponse_FieldTerminalPath: *fp, value: value.(*organization_invitation.PagerCursor)}
	case ListOrganizationInvitationsResponse_FieldPathSelectorCurrentOffset:
		return &ListOrganizationInvitationsResponse_FieldTerminalPathValue{ListOrganizationInvitationsResponse_FieldTerminalPath: *fp, value: value.(int32)}
	case ListOrganizationInvitationsResponse_FieldPathSelectorTotalResultsCount:
		return &ListOrganizationInvitationsResponse_FieldTerminalPathValue{ListOrganizationInvitationsResponse_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListOrganizationInvitationsResponse: %d", fp.selector))
	}
}

func (fp *ListOrganizationInvitationsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListOrganizationInvitationsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListOrganizationInvitationsResponse_FieldPathArrayOfValues {
	fpaov := &ListOrganizationInvitationsResponse_FieldTerminalPathArrayOfValues{ListOrganizationInvitationsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListOrganizationInvitationsResponse_FieldPathSelectorOrganizationInvitations:
		return &ListOrganizationInvitationsResponse_FieldTerminalPathArrayOfValues{ListOrganizationInvitationsResponse_FieldTerminalPath: *fp, values: values.([][]*organization_invitation.OrganizationInvitation)}
	case ListOrganizationInvitationsResponse_FieldPathSelectorPrevPageToken:
		return &ListOrganizationInvitationsResponse_FieldTerminalPathArrayOfValues{ListOrganizationInvitationsResponse_FieldTerminalPath: *fp, values: values.([]*organization_invitation.PagerCursor)}
	case ListOrganizationInvitationsResponse_FieldPathSelectorNextPageToken:
		return &ListOrganizationInvitationsResponse_FieldTerminalPathArrayOfValues{ListOrganizationInvitationsResponse_FieldTerminalPath: *fp, values: values.([]*organization_invitation.PagerCursor)}
	case ListOrganizationInvitationsResponse_FieldPathSelectorCurrentOffset:
		return &ListOrganizationInvitationsResponse_FieldTerminalPathArrayOfValues{ListOrganizationInvitationsResponse_FieldTerminalPath: *fp, values: values.([]int32)}
	case ListOrganizationInvitationsResponse_FieldPathSelectorTotalResultsCount:
		return &ListOrganizationInvitationsResponse_FieldTerminalPathArrayOfValues{ListOrganizationInvitationsResponse_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListOrganizationInvitationsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListOrganizationInvitationsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListOrganizationInvitationsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListOrganizationInvitationsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case ListOrganizationInvitationsResponse_FieldPathSelectorOrganizationInvitations:
		return &ListOrganizationInvitationsResponse_FieldTerminalPathArrayItemValue{ListOrganizationInvitationsResponse_FieldTerminalPath: *fp, value: value.(*organization_invitation.OrganizationInvitation)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListOrganizationInvitationsResponse: %d", fp.selector))
	}
}

func (fp *ListOrganizationInvitationsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ListOrganizationInvitationsResponse_FieldSubPath struct {
	selector ListOrganizationInvitationsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ListOrganizationInvitationsResponse_FieldPath = (*ListOrganizationInvitationsResponse_FieldSubPath)(nil)

func (fps *ListOrganizationInvitationsResponse_FieldSubPath) Selector() ListOrganizationInvitationsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *ListOrganizationInvitationsResponse_FieldSubPath) AsOrganizationInvitationsSubPath() (organization_invitation.OrganizationInvitation_FieldPath, bool) {
	res, ok := fps.subPath.(organization_invitation.OrganizationInvitation_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ListOrganizationInvitationsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ListOrganizationInvitationsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ListOrganizationInvitationsResponse
func (fps *ListOrganizationInvitationsResponse_FieldSubPath) Get(source *ListOrganizationInvitationsResponse) (values []interface{}) {
	switch fps.selector {
	case ListOrganizationInvitationsResponse_FieldPathSelectorOrganizationInvitations:
		for _, item := range source.GetOrganizationInvitations() {
			values = append(values, fps.subPath.GetRaw(item)...)
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListOrganizationInvitationsResponse: %d", fps.selector))
	}
	return
}

func (fps *ListOrganizationInvitationsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ListOrganizationInvitationsResponse))
}

// GetSingle returns value of selected field from source ListOrganizationInvitationsResponse
func (fps *ListOrganizationInvitationsResponse_FieldSubPath) GetSingle(source *ListOrganizationInvitationsResponse) (interface{}, bool) {
	switch fps.selector {
	case ListOrganizationInvitationsResponse_FieldPathSelectorOrganizationInvitations:
		if len(source.GetOrganizationInvitations()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetOrganizationInvitations()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for ListOrganizationInvitationsResponse: %d", fps.selector))
	}
}

func (fps *ListOrganizationInvitationsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ListOrganizationInvitationsResponse))
}

// GetDefault returns a default value of the field type
func (fps *ListOrganizationInvitationsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ListOrganizationInvitationsResponse_FieldSubPath) ClearValue(item *ListOrganizationInvitationsResponse) {
	if item != nil {
		switch fps.selector {
		case ListOrganizationInvitationsResponse_FieldPathSelectorOrganizationInvitations:
			for _, subItem := range item.OrganizationInvitations {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListOrganizationInvitationsResponse: %d", fps.selector))
		}
	}
}

func (fps *ListOrganizationInvitationsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ListOrganizationInvitationsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *ListOrganizationInvitationsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ListOrganizationInvitationsResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&ListOrganizationInvitationsResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *ListOrganizationInvitationsResponse_FieldSubPath) WithIValue(value interface{}) ListOrganizationInvitationsResponse_FieldPathValue {
	return &ListOrganizationInvitationsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ListOrganizationInvitationsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ListOrganizationInvitationsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) ListOrganizationInvitationsResponse_FieldPathArrayOfValues {
	return &ListOrganizationInvitationsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ListOrganizationInvitationsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ListOrganizationInvitationsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) ListOrganizationInvitationsResponse_FieldPathArrayItemValue {
	return &ListOrganizationInvitationsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ListOrganizationInvitationsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ListOrganizationInvitationsResponse_FieldPathValue allows storing values for ListOrganizationInvitationsResponse fields according to their type
type ListOrganizationInvitationsResponse_FieldPathValue interface {
	ListOrganizationInvitationsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListOrganizationInvitationsResponse)
	CompareWith(*ListOrganizationInvitationsResponse) (cmp int, comparable bool)
}

func ParseListOrganizationInvitationsResponse_FieldPathValue(pathStr, valueStr string) (ListOrganizationInvitationsResponse_FieldPathValue, error) {
	fp, err := ParseListOrganizationInvitationsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListOrganizationInvitationsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListOrganizationInvitationsResponse_FieldPathValue), nil
}

func MustParseListOrganizationInvitationsResponse_FieldPathValue(pathStr, valueStr string) ListOrganizationInvitationsResponse_FieldPathValue {
	fpv, err := ParseListOrganizationInvitationsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListOrganizationInvitationsResponse_FieldTerminalPathValue struct {
	ListOrganizationInvitationsResponse_FieldTerminalPath
	value interface{}
}

var _ ListOrganizationInvitationsResponse_FieldPathValue = (*ListOrganizationInvitationsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListOrganizationInvitationsResponse' as interface{}
func (fpv *ListOrganizationInvitationsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListOrganizationInvitationsResponse_FieldTerminalPathValue) AsOrganizationInvitationsValue() ([]*organization_invitation.OrganizationInvitation, bool) {
	res, ok := fpv.value.([]*organization_invitation.OrganizationInvitation)
	return res, ok
}
func (fpv *ListOrganizationInvitationsResponse_FieldTerminalPathValue) AsPrevPageTokenValue() (*organization_invitation.PagerCursor, bool) {
	res, ok := fpv.value.(*organization_invitation.PagerCursor)
	return res, ok
}
func (fpv *ListOrganizationInvitationsResponse_FieldTerminalPathValue) AsNextPageTokenValue() (*organization_invitation.PagerCursor, bool) {
	res, ok := fpv.value.(*organization_invitation.PagerCursor)
	return res, ok
}
func (fpv *ListOrganizationInvitationsResponse_FieldTerminalPathValue) AsCurrentOffsetValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *ListOrganizationInvitationsResponse_FieldTerminalPathValue) AsTotalResultsCountValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object ListOrganizationInvitationsResponse
func (fpv *ListOrganizationInvitationsResponse_FieldTerminalPathValue) SetTo(target **ListOrganizationInvitationsResponse) {
	if *target == nil {
		*target = new(ListOrganizationInvitationsResponse)
	}
	switch fpv.selector {
	case ListOrganizationInvitationsResponse_FieldPathSelectorOrganizationInvitations:
		(*target).OrganizationInvitations = fpv.value.([]*organization_invitation.OrganizationInvitation)
	case ListOrganizationInvitationsResponse_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*organization_invitation.PagerCursor)
	case ListOrganizationInvitationsResponse_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*organization_invitation.PagerCursor)
	case ListOrganizationInvitationsResponse_FieldPathSelectorCurrentOffset:
		(*target).CurrentOffset = fpv.value.(int32)
	case ListOrganizationInvitationsResponse_FieldPathSelectorTotalResultsCount:
		(*target).TotalResultsCount = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for ListOrganizationInvitationsResponse: %d", fpv.selector))
	}
}

func (fpv *ListOrganizationInvitationsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListOrganizationInvitationsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListOrganizationInvitationsResponse_FieldTerminalPathValue' with the value under path in 'ListOrganizationInvitationsResponse'.
func (fpv *ListOrganizationInvitationsResponse_FieldTerminalPathValue) CompareWith(source *ListOrganizationInvitationsResponse) (int, bool) {
	switch fpv.selector {
	case ListOrganizationInvitationsResponse_FieldPathSelectorOrganizationInvitations:
		return 0, false
	case ListOrganizationInvitationsResponse_FieldPathSelectorPrevPageToken:
		return 0, false
	case ListOrganizationInvitationsResponse_FieldPathSelectorNextPageToken:
		return 0, false
	case ListOrganizationInvitationsResponse_FieldPathSelectorCurrentOffset:
		leftValue := fpv.value.(int32)
		rightValue := source.GetCurrentOffset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListOrganizationInvitationsResponse_FieldPathSelectorTotalResultsCount:
		leftValue := fpv.value.(int32)
		rightValue := source.GetTotalResultsCount()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListOrganizationInvitationsResponse: %d", fpv.selector))
	}
}

func (fpv *ListOrganizationInvitationsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListOrganizationInvitationsResponse))
}

type ListOrganizationInvitationsResponse_FieldSubPathValue struct {
	ListOrganizationInvitationsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ListOrganizationInvitationsResponse_FieldPathValue = (*ListOrganizationInvitationsResponse_FieldSubPathValue)(nil)

func (fpvs *ListOrganizationInvitationsResponse_FieldSubPathValue) AsOrganizationInvitationsPathValue() (organization_invitation.OrganizationInvitation_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(organization_invitation.OrganizationInvitation_FieldPathValue)
	return res, ok
}

func (fpvs *ListOrganizationInvitationsResponse_FieldSubPathValue) SetTo(target **ListOrganizationInvitationsResponse) {
	if *target == nil {
		*target = new(ListOrganizationInvitationsResponse)
	}
	switch fpvs.Selector() {
	case ListOrganizationInvitationsResponse_FieldPathSelectorOrganizationInvitations:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for ListOrganizationInvitationsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListOrganizationInvitationsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListOrganizationInvitationsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ListOrganizationInvitationsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ListOrganizationInvitationsResponse_FieldSubPathValue) CompareWith(source *ListOrganizationInvitationsResponse) (int, bool) {
	switch fpvs.Selector() {
	case ListOrganizationInvitationsResponse_FieldPathSelectorOrganizationInvitations:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for ListOrganizationInvitationsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListOrganizationInvitationsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ListOrganizationInvitationsResponse))
}

// ListOrganizationInvitationsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for ListOrganizationInvitationsResponse according to their type
// Present only for array (repeated) types.
type ListOrganizationInvitationsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListOrganizationInvitationsResponse_FieldPath
	ContainsValue(*ListOrganizationInvitationsResponse) bool
}

// ParseListOrganizationInvitationsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListOrganizationInvitationsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (ListOrganizationInvitationsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseListOrganizationInvitationsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListOrganizationInvitationsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListOrganizationInvitationsResponse_FieldPathArrayItemValue), nil
}

func MustParseListOrganizationInvitationsResponse_FieldPathArrayItemValue(pathStr, valueStr string) ListOrganizationInvitationsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseListOrganizationInvitationsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListOrganizationInvitationsResponse_FieldTerminalPathArrayItemValue struct {
	ListOrganizationInvitationsResponse_FieldTerminalPath
	value interface{}
}

var _ ListOrganizationInvitationsResponse_FieldPathArrayItemValue = (*ListOrganizationInvitationsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListOrganizationInvitationsResponse as interface{}
func (fpaiv *ListOrganizationInvitationsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *ListOrganizationInvitationsResponse_FieldTerminalPathArrayItemValue) AsOrganizationInvitationsItemValue() (*organization_invitation.OrganizationInvitation, bool) {
	res, ok := fpaiv.value.(*organization_invitation.OrganizationInvitation)
	return res, ok
}

func (fpaiv *ListOrganizationInvitationsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *ListOrganizationInvitationsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListOrganizationInvitationsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListOrganizationInvitationsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListOrganizationInvitationsResponse'
func (fpaiv *ListOrganizationInvitationsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *ListOrganizationInvitationsResponse) bool {
	slice := fpaiv.ListOrganizationInvitationsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ListOrganizationInvitationsResponse_FieldSubPathArrayItemValue struct {
	ListOrganizationInvitationsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ListOrganizationInvitationsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ListOrganizationInvitationsResponse_FieldSubPathArrayItemValue) AsOrganizationInvitationsPathItemValue() (organization_invitation.OrganizationInvitation_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(organization_invitation.OrganizationInvitation_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListOrganizationInvitationsResponse'
func (fpaivs *ListOrganizationInvitationsResponse_FieldSubPathArrayItemValue) ContainsValue(source *ListOrganizationInvitationsResponse) bool {
	switch fpaivs.Selector() {
	case ListOrganizationInvitationsResponse_FieldPathSelectorOrganizationInvitations:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for ListOrganizationInvitationsResponse: %d", fpaivs.Selector()))
	}
}

// ListOrganizationInvitationsResponse_FieldPathArrayOfValues allows storing slice of values for ListOrganizationInvitationsResponse fields according to their type
type ListOrganizationInvitationsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListOrganizationInvitationsResponse_FieldPath
}

func ParseListOrganizationInvitationsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (ListOrganizationInvitationsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseListOrganizationInvitationsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListOrganizationInvitationsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListOrganizationInvitationsResponse_FieldPathArrayOfValues), nil
}

func MustParseListOrganizationInvitationsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) ListOrganizationInvitationsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseListOrganizationInvitationsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListOrganizationInvitationsResponse_FieldTerminalPathArrayOfValues struct {
	ListOrganizationInvitationsResponse_FieldTerminalPath
	values interface{}
}

var _ ListOrganizationInvitationsResponse_FieldPathArrayOfValues = (*ListOrganizationInvitationsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListOrganizationInvitationsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListOrganizationInvitationsResponse_FieldPathSelectorOrganizationInvitations:
		for _, v := range fpaov.values.([][]*organization_invitation.OrganizationInvitation) {
			values = append(values, v)
		}
	case ListOrganizationInvitationsResponse_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*organization_invitation.PagerCursor) {
			values = append(values, v)
		}
	case ListOrganizationInvitationsResponse_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*organization_invitation.PagerCursor) {
			values = append(values, v)
		}
	case ListOrganizationInvitationsResponse_FieldPathSelectorCurrentOffset:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case ListOrganizationInvitationsResponse_FieldPathSelectorTotalResultsCount:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListOrganizationInvitationsResponse_FieldTerminalPathArrayOfValues) AsOrganizationInvitationsArrayOfValues() ([][]*organization_invitation.OrganizationInvitation, bool) {
	res, ok := fpaov.values.([][]*organization_invitation.OrganizationInvitation)
	return res, ok
}
func (fpaov *ListOrganizationInvitationsResponse_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*organization_invitation.PagerCursor, bool) {
	res, ok := fpaov.values.([]*organization_invitation.PagerCursor)
	return res, ok
}
func (fpaov *ListOrganizationInvitationsResponse_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*organization_invitation.PagerCursor, bool) {
	res, ok := fpaov.values.([]*organization_invitation.PagerCursor)
	return res, ok
}
func (fpaov *ListOrganizationInvitationsResponse_FieldTerminalPathArrayOfValues) AsCurrentOffsetArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *ListOrganizationInvitationsResponse_FieldTerminalPathArrayOfValues) AsTotalResultsCountArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

type ListOrganizationInvitationsResponse_FieldSubPathArrayOfValues struct {
	ListOrganizationInvitationsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ListOrganizationInvitationsResponse_FieldPathArrayOfValues = (*ListOrganizationInvitationsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ListOrganizationInvitationsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ListOrganizationInvitationsResponse_FieldSubPathArrayOfValues) AsOrganizationInvitationsPathArrayOfValues() (organization_invitation.OrganizationInvitation_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(organization_invitation.OrganizationInvitation_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchOrganizationInvitationRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchOrganizationInvitationRequest_FieldPathSelector
	Get(source *WatchOrganizationInvitationRequest) []interface{}
	GetSingle(source *WatchOrganizationInvitationRequest) (interface{}, bool)
	ClearValue(item *WatchOrganizationInvitationRequest)

	// Those methods build corresponding WatchOrganizationInvitationRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchOrganizationInvitationRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchOrganizationInvitationRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchOrganizationInvitationRequest_FieldPathArrayItemValue
}

type WatchOrganizationInvitationRequest_FieldPathSelector int32

const (
	WatchOrganizationInvitationRequest_FieldPathSelectorName      WatchOrganizationInvitationRequest_FieldPathSelector = 0
	WatchOrganizationInvitationRequest_FieldPathSelectorFieldMask WatchOrganizationInvitationRequest_FieldPathSelector = 1
	WatchOrganizationInvitationRequest_FieldPathSelectorView      WatchOrganizationInvitationRequest_FieldPathSelector = 2
)

func (s WatchOrganizationInvitationRequest_FieldPathSelector) String() string {
	switch s {
	case WatchOrganizationInvitationRequest_FieldPathSelectorName:
		return "name"
	case WatchOrganizationInvitationRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchOrganizationInvitationRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOrganizationInvitationRequest: %d", s))
	}
}

func BuildWatchOrganizationInvitationRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchOrganizationInvitationRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchOrganizationInvitationRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &WatchOrganizationInvitationRequest_FieldTerminalPath{selector: WatchOrganizationInvitationRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchOrganizationInvitationRequest_FieldTerminalPath{selector: WatchOrganizationInvitationRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchOrganizationInvitationRequest_FieldTerminalPath{selector: WatchOrganizationInvitationRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchOrganizationInvitationRequest", fp)
}

func ParseWatchOrganizationInvitationRequest_FieldPath(rawField string) (WatchOrganizationInvitationRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchOrganizationInvitationRequest_FieldPath(fp)
}

func MustParseWatchOrganizationInvitationRequest_FieldPath(rawField string) WatchOrganizationInvitationRequest_FieldPath {
	fp, err := ParseWatchOrganizationInvitationRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchOrganizationInvitationRequest_FieldTerminalPath struct {
	selector WatchOrganizationInvitationRequest_FieldPathSelector
}

var _ WatchOrganizationInvitationRequest_FieldPath = (*WatchOrganizationInvitationRequest_FieldTerminalPath)(nil)

func (fp *WatchOrganizationInvitationRequest_FieldTerminalPath) Selector() WatchOrganizationInvitationRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchOrganizationInvitationRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchOrganizationInvitationRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchOrganizationInvitationRequest
func (fp *WatchOrganizationInvitationRequest_FieldTerminalPath) Get(source *WatchOrganizationInvitationRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchOrganizationInvitationRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case WatchOrganizationInvitationRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchOrganizationInvitationRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchOrganizationInvitationRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchOrganizationInvitationRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchOrganizationInvitationRequest))
}

// GetSingle returns value pointed by specific field of from source WatchOrganizationInvitationRequest
func (fp *WatchOrganizationInvitationRequest_FieldTerminalPath) GetSingle(source *WatchOrganizationInvitationRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchOrganizationInvitationRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case WatchOrganizationInvitationRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchOrganizationInvitationRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOrganizationInvitationRequest: %d", fp.selector))
	}
}

func (fp *WatchOrganizationInvitationRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchOrganizationInvitationRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchOrganizationInvitationRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchOrganizationInvitationRequest_FieldPathSelectorName:
		return (*organization_invitation.Reference)(nil)
	case WatchOrganizationInvitationRequest_FieldPathSelectorFieldMask:
		return (*organization_invitation.OrganizationInvitation_FieldMask)(nil)
	case WatchOrganizationInvitationRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOrganizationInvitationRequest: %d", fp.selector))
	}
}

func (fp *WatchOrganizationInvitationRequest_FieldTerminalPath) ClearValue(item *WatchOrganizationInvitationRequest) {
	if item != nil {
		switch fp.selector {
		case WatchOrganizationInvitationRequest_FieldPathSelectorName:
			item.Name = nil
		case WatchOrganizationInvitationRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchOrganizationInvitationRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for WatchOrganizationInvitationRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchOrganizationInvitationRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchOrganizationInvitationRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchOrganizationInvitationRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchOrganizationInvitationRequest_FieldPathSelectorName ||
		fp.selector == WatchOrganizationInvitationRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchOrganizationInvitationRequest_FieldPathSelectorView
}

func (fp *WatchOrganizationInvitationRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchOrganizationInvitationRequest_FieldTerminalPath) WithIValue(value interface{}) WatchOrganizationInvitationRequest_FieldPathValue {
	switch fp.selector {
	case WatchOrganizationInvitationRequest_FieldPathSelectorName:
		return &WatchOrganizationInvitationRequest_FieldTerminalPathValue{WatchOrganizationInvitationRequest_FieldTerminalPath: *fp, value: value.(*organization_invitation.Reference)}
	case WatchOrganizationInvitationRequest_FieldPathSelectorFieldMask:
		return &WatchOrganizationInvitationRequest_FieldTerminalPathValue{WatchOrganizationInvitationRequest_FieldTerminalPath: *fp, value: value.(*organization_invitation.OrganizationInvitation_FieldMask)}
	case WatchOrganizationInvitationRequest_FieldPathSelectorView:
		return &WatchOrganizationInvitationRequest_FieldTerminalPathValue{WatchOrganizationInvitationRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOrganizationInvitationRequest: %d", fp.selector))
	}
}

func (fp *WatchOrganizationInvitationRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchOrganizationInvitationRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchOrganizationInvitationRequest_FieldPathArrayOfValues {
	fpaov := &WatchOrganizationInvitationRequest_FieldTerminalPathArrayOfValues{WatchOrganizationInvitationRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchOrganizationInvitationRequest_FieldPathSelectorName:
		return &WatchOrganizationInvitationRequest_FieldTerminalPathArrayOfValues{WatchOrganizationInvitationRequest_FieldTerminalPath: *fp, values: values.([]*organization_invitation.Reference)}
	case WatchOrganizationInvitationRequest_FieldPathSelectorFieldMask:
		return &WatchOrganizationInvitationRequest_FieldTerminalPathArrayOfValues{WatchOrganizationInvitationRequest_FieldTerminalPath: *fp, values: values.([]*organization_invitation.OrganizationInvitation_FieldMask)}
	case WatchOrganizationInvitationRequest_FieldPathSelectorView:
		return &WatchOrganizationInvitationRequest_FieldTerminalPathArrayOfValues{WatchOrganizationInvitationRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOrganizationInvitationRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchOrganizationInvitationRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchOrganizationInvitationRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchOrganizationInvitationRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOrganizationInvitationRequest: %d", fp.selector))
	}
}

func (fp *WatchOrganizationInvitationRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchOrganizationInvitationRequest_FieldPathValue allows storing values for WatchOrganizationInvitationRequest fields according to their type
type WatchOrganizationInvitationRequest_FieldPathValue interface {
	WatchOrganizationInvitationRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchOrganizationInvitationRequest)
	CompareWith(*WatchOrganizationInvitationRequest) (cmp int, comparable bool)
}

func ParseWatchOrganizationInvitationRequest_FieldPathValue(pathStr, valueStr string) (WatchOrganizationInvitationRequest_FieldPathValue, error) {
	fp, err := ParseWatchOrganizationInvitationRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchOrganizationInvitationRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchOrganizationInvitationRequest_FieldPathValue), nil
}

func MustParseWatchOrganizationInvitationRequest_FieldPathValue(pathStr, valueStr string) WatchOrganizationInvitationRequest_FieldPathValue {
	fpv, err := ParseWatchOrganizationInvitationRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchOrganizationInvitationRequest_FieldTerminalPathValue struct {
	WatchOrganizationInvitationRequest_FieldTerminalPath
	value interface{}
}

var _ WatchOrganizationInvitationRequest_FieldPathValue = (*WatchOrganizationInvitationRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchOrganizationInvitationRequest' as interface{}
func (fpv *WatchOrganizationInvitationRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchOrganizationInvitationRequest_FieldTerminalPathValue) AsNameValue() (*organization_invitation.Reference, bool) {
	res, ok := fpv.value.(*organization_invitation.Reference)
	return res, ok
}
func (fpv *WatchOrganizationInvitationRequest_FieldTerminalPathValue) AsFieldMaskValue() (*organization_invitation.OrganizationInvitation_FieldMask, bool) {
	res, ok := fpv.value.(*organization_invitation.OrganizationInvitation_FieldMask)
	return res, ok
}
func (fpv *WatchOrganizationInvitationRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object WatchOrganizationInvitationRequest
func (fpv *WatchOrganizationInvitationRequest_FieldTerminalPathValue) SetTo(target **WatchOrganizationInvitationRequest) {
	if *target == nil {
		*target = new(WatchOrganizationInvitationRequest)
	}
	switch fpv.selector {
	case WatchOrganizationInvitationRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*organization_invitation.Reference)
	case WatchOrganizationInvitationRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*organization_invitation.OrganizationInvitation_FieldMask)
	case WatchOrganizationInvitationRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOrganizationInvitationRequest: %d", fpv.selector))
	}
}

func (fpv *WatchOrganizationInvitationRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchOrganizationInvitationRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchOrganizationInvitationRequest_FieldTerminalPathValue' with the value under path in 'WatchOrganizationInvitationRequest'.
func (fpv *WatchOrganizationInvitationRequest_FieldTerminalPathValue) CompareWith(source *WatchOrganizationInvitationRequest) (int, bool) {
	switch fpv.selector {
	case WatchOrganizationInvitationRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*organization_invitation.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchOrganizationInvitationRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchOrganizationInvitationRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOrganizationInvitationRequest: %d", fpv.selector))
	}
}

func (fpv *WatchOrganizationInvitationRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchOrganizationInvitationRequest))
}

// WatchOrganizationInvitationRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchOrganizationInvitationRequest according to their type
// Present only for array (repeated) types.
type WatchOrganizationInvitationRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchOrganizationInvitationRequest_FieldPath
	ContainsValue(*WatchOrganizationInvitationRequest) bool
}

// ParseWatchOrganizationInvitationRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchOrganizationInvitationRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchOrganizationInvitationRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchOrganizationInvitationRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchOrganizationInvitationRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchOrganizationInvitationRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchOrganizationInvitationRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchOrganizationInvitationRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchOrganizationInvitationRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchOrganizationInvitationRequest_FieldTerminalPathArrayItemValue struct {
	WatchOrganizationInvitationRequest_FieldTerminalPath
	value interface{}
}

var _ WatchOrganizationInvitationRequest_FieldPathArrayItemValue = (*WatchOrganizationInvitationRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchOrganizationInvitationRequest as interface{}
func (fpaiv *WatchOrganizationInvitationRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchOrganizationInvitationRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchOrganizationInvitationRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchOrganizationInvitationRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchOrganizationInvitationRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchOrganizationInvitationRequest'
func (fpaiv *WatchOrganizationInvitationRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchOrganizationInvitationRequest) bool {
	slice := fpaiv.WatchOrganizationInvitationRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchOrganizationInvitationRequest_FieldPathArrayOfValues allows storing slice of values for WatchOrganizationInvitationRequest fields according to their type
type WatchOrganizationInvitationRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchOrganizationInvitationRequest_FieldPath
}

func ParseWatchOrganizationInvitationRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchOrganizationInvitationRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchOrganizationInvitationRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchOrganizationInvitationRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchOrganizationInvitationRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchOrganizationInvitationRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchOrganizationInvitationRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchOrganizationInvitationRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchOrganizationInvitationRequest_FieldTerminalPathArrayOfValues struct {
	WatchOrganizationInvitationRequest_FieldTerminalPath
	values interface{}
}

var _ WatchOrganizationInvitationRequest_FieldPathArrayOfValues = (*WatchOrganizationInvitationRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchOrganizationInvitationRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchOrganizationInvitationRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*organization_invitation.Reference) {
			values = append(values, v)
		}
	case WatchOrganizationInvitationRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*organization_invitation.OrganizationInvitation_FieldMask) {
			values = append(values, v)
		}
	case WatchOrganizationInvitationRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchOrganizationInvitationRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*organization_invitation.Reference, bool) {
	res, ok := fpaov.values.([]*organization_invitation.Reference)
	return res, ok
}
func (fpaov *WatchOrganizationInvitationRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*organization_invitation.OrganizationInvitation_FieldMask, bool) {
	res, ok := fpaov.values.([]*organization_invitation.OrganizationInvitation_FieldMask)
	return res, ok
}
func (fpaov *WatchOrganizationInvitationRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchOrganizationInvitationResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchOrganizationInvitationResponse_FieldPathSelector
	Get(source *WatchOrganizationInvitationResponse) []interface{}
	GetSingle(source *WatchOrganizationInvitationResponse) (interface{}, bool)
	ClearValue(item *WatchOrganizationInvitationResponse)

	// Those methods build corresponding WatchOrganizationInvitationResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchOrganizationInvitationResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchOrganizationInvitationResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchOrganizationInvitationResponse_FieldPathArrayItemValue
}

type WatchOrganizationInvitationResponse_FieldPathSelector int32

const (
	WatchOrganizationInvitationResponse_FieldPathSelectorChange WatchOrganizationInvitationResponse_FieldPathSelector = 0
)

func (s WatchOrganizationInvitationResponse_FieldPathSelector) String() string {
	switch s {
	case WatchOrganizationInvitationResponse_FieldPathSelectorChange:
		return "change"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOrganizationInvitationResponse: %d", s))
	}
}

func BuildWatchOrganizationInvitationResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchOrganizationInvitationResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchOrganizationInvitationResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "change":
			return &WatchOrganizationInvitationResponse_FieldTerminalPath{selector: WatchOrganizationInvitationResponse_FieldPathSelectorChange}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchOrganizationInvitationResponse", fp)
}

func ParseWatchOrganizationInvitationResponse_FieldPath(rawField string) (WatchOrganizationInvitationResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchOrganizationInvitationResponse_FieldPath(fp)
}

func MustParseWatchOrganizationInvitationResponse_FieldPath(rawField string) WatchOrganizationInvitationResponse_FieldPath {
	fp, err := ParseWatchOrganizationInvitationResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchOrganizationInvitationResponse_FieldTerminalPath struct {
	selector WatchOrganizationInvitationResponse_FieldPathSelector
}

var _ WatchOrganizationInvitationResponse_FieldPath = (*WatchOrganizationInvitationResponse_FieldTerminalPath)(nil)

func (fp *WatchOrganizationInvitationResponse_FieldTerminalPath) Selector() WatchOrganizationInvitationResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchOrganizationInvitationResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchOrganizationInvitationResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchOrganizationInvitationResponse
func (fp *WatchOrganizationInvitationResponse_FieldTerminalPath) Get(source *WatchOrganizationInvitationResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchOrganizationInvitationResponse_FieldPathSelectorChange:
			if source.Change != nil {
				values = append(values, source.Change)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchOrganizationInvitationResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchOrganizationInvitationResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchOrganizationInvitationResponse))
}

// GetSingle returns value pointed by specific field of from source WatchOrganizationInvitationResponse
func (fp *WatchOrganizationInvitationResponse_FieldTerminalPath) GetSingle(source *WatchOrganizationInvitationResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchOrganizationInvitationResponse_FieldPathSelectorChange:
		res := source.GetChange()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOrganizationInvitationResponse: %d", fp.selector))
	}
}

func (fp *WatchOrganizationInvitationResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchOrganizationInvitationResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchOrganizationInvitationResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchOrganizationInvitationResponse_FieldPathSelectorChange:
		return (*organization_invitation.OrganizationInvitationChange)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOrganizationInvitationResponse: %d", fp.selector))
	}
}

func (fp *WatchOrganizationInvitationResponse_FieldTerminalPath) ClearValue(item *WatchOrganizationInvitationResponse) {
	if item != nil {
		switch fp.selector {
		case WatchOrganizationInvitationResponse_FieldPathSelectorChange:
			item.Change = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchOrganizationInvitationResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchOrganizationInvitationResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchOrganizationInvitationResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchOrganizationInvitationResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchOrganizationInvitationResponse_FieldPathSelectorChange
}

func (fp *WatchOrganizationInvitationResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchOrganizationInvitationResponse_FieldTerminalPath) WithIValue(value interface{}) WatchOrganizationInvitationResponse_FieldPathValue {
	switch fp.selector {
	case WatchOrganizationInvitationResponse_FieldPathSelectorChange:
		return &WatchOrganizationInvitationResponse_FieldTerminalPathValue{WatchOrganizationInvitationResponse_FieldTerminalPath: *fp, value: value.(*organization_invitation.OrganizationInvitationChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOrganizationInvitationResponse: %d", fp.selector))
	}
}

func (fp *WatchOrganizationInvitationResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchOrganizationInvitationResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchOrganizationInvitationResponse_FieldPathArrayOfValues {
	fpaov := &WatchOrganizationInvitationResponse_FieldTerminalPathArrayOfValues{WatchOrganizationInvitationResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchOrganizationInvitationResponse_FieldPathSelectorChange:
		return &WatchOrganizationInvitationResponse_FieldTerminalPathArrayOfValues{WatchOrganizationInvitationResponse_FieldTerminalPath: *fp, values: values.([]*organization_invitation.OrganizationInvitationChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOrganizationInvitationResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchOrganizationInvitationResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchOrganizationInvitationResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchOrganizationInvitationResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOrganizationInvitationResponse: %d", fp.selector))
	}
}

func (fp *WatchOrganizationInvitationResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchOrganizationInvitationResponse_FieldPathValue allows storing values for WatchOrganizationInvitationResponse fields according to their type
type WatchOrganizationInvitationResponse_FieldPathValue interface {
	WatchOrganizationInvitationResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchOrganizationInvitationResponse)
	CompareWith(*WatchOrganizationInvitationResponse) (cmp int, comparable bool)
}

func ParseWatchOrganizationInvitationResponse_FieldPathValue(pathStr, valueStr string) (WatchOrganizationInvitationResponse_FieldPathValue, error) {
	fp, err := ParseWatchOrganizationInvitationResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchOrganizationInvitationResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchOrganizationInvitationResponse_FieldPathValue), nil
}

func MustParseWatchOrganizationInvitationResponse_FieldPathValue(pathStr, valueStr string) WatchOrganizationInvitationResponse_FieldPathValue {
	fpv, err := ParseWatchOrganizationInvitationResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchOrganizationInvitationResponse_FieldTerminalPathValue struct {
	WatchOrganizationInvitationResponse_FieldTerminalPath
	value interface{}
}

var _ WatchOrganizationInvitationResponse_FieldPathValue = (*WatchOrganizationInvitationResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchOrganizationInvitationResponse' as interface{}
func (fpv *WatchOrganizationInvitationResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchOrganizationInvitationResponse_FieldTerminalPathValue) AsChangeValue() (*organization_invitation.OrganizationInvitationChange, bool) {
	res, ok := fpv.value.(*organization_invitation.OrganizationInvitationChange)
	return res, ok
}

// SetTo stores value for selected field for object WatchOrganizationInvitationResponse
func (fpv *WatchOrganizationInvitationResponse_FieldTerminalPathValue) SetTo(target **WatchOrganizationInvitationResponse) {
	if *target == nil {
		*target = new(WatchOrganizationInvitationResponse)
	}
	switch fpv.selector {
	case WatchOrganizationInvitationResponse_FieldPathSelectorChange:
		(*target).Change = fpv.value.(*organization_invitation.OrganizationInvitationChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOrganizationInvitationResponse: %d", fpv.selector))
	}
}

func (fpv *WatchOrganizationInvitationResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchOrganizationInvitationResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchOrganizationInvitationResponse_FieldTerminalPathValue' with the value under path in 'WatchOrganizationInvitationResponse'.
func (fpv *WatchOrganizationInvitationResponse_FieldTerminalPathValue) CompareWith(source *WatchOrganizationInvitationResponse) (int, bool) {
	switch fpv.selector {
	case WatchOrganizationInvitationResponse_FieldPathSelectorChange:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOrganizationInvitationResponse: %d", fpv.selector))
	}
}

func (fpv *WatchOrganizationInvitationResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchOrganizationInvitationResponse))
}

// WatchOrganizationInvitationResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchOrganizationInvitationResponse according to their type
// Present only for array (repeated) types.
type WatchOrganizationInvitationResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchOrganizationInvitationResponse_FieldPath
	ContainsValue(*WatchOrganizationInvitationResponse) bool
}

// ParseWatchOrganizationInvitationResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchOrganizationInvitationResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchOrganizationInvitationResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchOrganizationInvitationResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchOrganizationInvitationResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchOrganizationInvitationResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchOrganizationInvitationResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchOrganizationInvitationResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchOrganizationInvitationResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchOrganizationInvitationResponse_FieldTerminalPathArrayItemValue struct {
	WatchOrganizationInvitationResponse_FieldTerminalPath
	value interface{}
}

var _ WatchOrganizationInvitationResponse_FieldPathArrayItemValue = (*WatchOrganizationInvitationResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchOrganizationInvitationResponse as interface{}
func (fpaiv *WatchOrganizationInvitationResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchOrganizationInvitationResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchOrganizationInvitationResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchOrganizationInvitationResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchOrganizationInvitationResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchOrganizationInvitationResponse'
func (fpaiv *WatchOrganizationInvitationResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchOrganizationInvitationResponse) bool {
	slice := fpaiv.WatchOrganizationInvitationResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchOrganizationInvitationResponse_FieldPathArrayOfValues allows storing slice of values for WatchOrganizationInvitationResponse fields according to their type
type WatchOrganizationInvitationResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchOrganizationInvitationResponse_FieldPath
}

func ParseWatchOrganizationInvitationResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchOrganizationInvitationResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchOrganizationInvitationResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchOrganizationInvitationResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchOrganizationInvitationResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchOrganizationInvitationResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchOrganizationInvitationResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchOrganizationInvitationResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchOrganizationInvitationResponse_FieldTerminalPathArrayOfValues struct {
	WatchOrganizationInvitationResponse_FieldTerminalPath
	values interface{}
}

var _ WatchOrganizationInvitationResponse_FieldPathArrayOfValues = (*WatchOrganizationInvitationResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchOrganizationInvitationResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchOrganizationInvitationResponse_FieldPathSelectorChange:
		for _, v := range fpaov.values.([]*organization_invitation.OrganizationInvitationChange) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchOrganizationInvitationResponse_FieldTerminalPathArrayOfValues) AsChangeArrayOfValues() ([]*organization_invitation.OrganizationInvitationChange, bool) {
	res, ok := fpaov.values.([]*organization_invitation.OrganizationInvitationChange)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchOrganizationInvitationsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchOrganizationInvitationsRequest_FieldPathSelector
	Get(source *WatchOrganizationInvitationsRequest) []interface{}
	GetSingle(source *WatchOrganizationInvitationsRequest) (interface{}, bool)
	ClearValue(item *WatchOrganizationInvitationsRequest)

	// Those methods build corresponding WatchOrganizationInvitationsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchOrganizationInvitationsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchOrganizationInvitationsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchOrganizationInvitationsRequest_FieldPathArrayItemValue
}

type WatchOrganizationInvitationsRequest_FieldPathSelector int32

const (
	WatchOrganizationInvitationsRequest_FieldPathSelectorType         WatchOrganizationInvitationsRequest_FieldPathSelector = 0
	WatchOrganizationInvitationsRequest_FieldPathSelectorParent       WatchOrganizationInvitationsRequest_FieldPathSelector = 1
	WatchOrganizationInvitationsRequest_FieldPathSelectorPageSize     WatchOrganizationInvitationsRequest_FieldPathSelector = 2
	WatchOrganizationInvitationsRequest_FieldPathSelectorPageToken    WatchOrganizationInvitationsRequest_FieldPathSelector = 3
	WatchOrganizationInvitationsRequest_FieldPathSelectorOrderBy      WatchOrganizationInvitationsRequest_FieldPathSelector = 4
	WatchOrganizationInvitationsRequest_FieldPathSelectorResumeToken  WatchOrganizationInvitationsRequest_FieldPathSelector = 5
	WatchOrganizationInvitationsRequest_FieldPathSelectorStartingTime WatchOrganizationInvitationsRequest_FieldPathSelector = 6
	WatchOrganizationInvitationsRequest_FieldPathSelectorFilter       WatchOrganizationInvitationsRequest_FieldPathSelector = 7
	WatchOrganizationInvitationsRequest_FieldPathSelectorFieldMask    WatchOrganizationInvitationsRequest_FieldPathSelector = 8
	WatchOrganizationInvitationsRequest_FieldPathSelectorView         WatchOrganizationInvitationsRequest_FieldPathSelector = 9
	WatchOrganizationInvitationsRequest_FieldPathSelectorMaxChunkSize WatchOrganizationInvitationsRequest_FieldPathSelector = 10
)

func (s WatchOrganizationInvitationsRequest_FieldPathSelector) String() string {
	switch s {
	case WatchOrganizationInvitationsRequest_FieldPathSelectorType:
		return "type"
	case WatchOrganizationInvitationsRequest_FieldPathSelectorParent:
		return "parent"
	case WatchOrganizationInvitationsRequest_FieldPathSelectorPageSize:
		return "page_size"
	case WatchOrganizationInvitationsRequest_FieldPathSelectorPageToken:
		return "page_token"
	case WatchOrganizationInvitationsRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case WatchOrganizationInvitationsRequest_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchOrganizationInvitationsRequest_FieldPathSelectorStartingTime:
		return "starting_time"
	case WatchOrganizationInvitationsRequest_FieldPathSelectorFilter:
		return "filter"
	case WatchOrganizationInvitationsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchOrganizationInvitationsRequest_FieldPathSelectorView:
		return "view"
	case WatchOrganizationInvitationsRequest_FieldPathSelectorMaxChunkSize:
		return "max_chunk_size"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOrganizationInvitationsRequest: %d", s))
	}
}

func BuildWatchOrganizationInvitationsRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchOrganizationInvitationsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchOrganizationInvitationsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "type":
			return &WatchOrganizationInvitationsRequest_FieldTerminalPath{selector: WatchOrganizationInvitationsRequest_FieldPathSelectorType}, nil
		case "parent":
			return &WatchOrganizationInvitationsRequest_FieldTerminalPath{selector: WatchOrganizationInvitationsRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &WatchOrganizationInvitationsRequest_FieldTerminalPath{selector: WatchOrganizationInvitationsRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &WatchOrganizationInvitationsRequest_FieldTerminalPath{selector: WatchOrganizationInvitationsRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &WatchOrganizationInvitationsRequest_FieldTerminalPath{selector: WatchOrganizationInvitationsRequest_FieldPathSelectorOrderBy}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchOrganizationInvitationsRequest_FieldTerminalPath{selector: WatchOrganizationInvitationsRequest_FieldPathSelectorResumeToken}, nil
		case "starting_time", "startingTime", "starting-time":
			return &WatchOrganizationInvitationsRequest_FieldTerminalPath{selector: WatchOrganizationInvitationsRequest_FieldPathSelectorStartingTime}, nil
		case "filter":
			return &WatchOrganizationInvitationsRequest_FieldTerminalPath{selector: WatchOrganizationInvitationsRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchOrganizationInvitationsRequest_FieldTerminalPath{selector: WatchOrganizationInvitationsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchOrganizationInvitationsRequest_FieldTerminalPath{selector: WatchOrganizationInvitationsRequest_FieldPathSelectorView}, nil
		case "max_chunk_size", "maxChunkSize", "max-chunk-size":
			return &WatchOrganizationInvitationsRequest_FieldTerminalPath{selector: WatchOrganizationInvitationsRequest_FieldPathSelectorMaxChunkSize}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchOrganizationInvitationsRequest", fp)
}

func ParseWatchOrganizationInvitationsRequest_FieldPath(rawField string) (WatchOrganizationInvitationsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchOrganizationInvitationsRequest_FieldPath(fp)
}

func MustParseWatchOrganizationInvitationsRequest_FieldPath(rawField string) WatchOrganizationInvitationsRequest_FieldPath {
	fp, err := ParseWatchOrganizationInvitationsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchOrganizationInvitationsRequest_FieldTerminalPath struct {
	selector WatchOrganizationInvitationsRequest_FieldPathSelector
}

var _ WatchOrganizationInvitationsRequest_FieldPath = (*WatchOrganizationInvitationsRequest_FieldTerminalPath)(nil)

func (fp *WatchOrganizationInvitationsRequest_FieldTerminalPath) Selector() WatchOrganizationInvitationsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchOrganizationInvitationsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchOrganizationInvitationsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchOrganizationInvitationsRequest
func (fp *WatchOrganizationInvitationsRequest_FieldTerminalPath) Get(source *WatchOrganizationInvitationsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchOrganizationInvitationsRequest_FieldPathSelectorType:
			values = append(values, source.Type)
		case WatchOrganizationInvitationsRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case WatchOrganizationInvitationsRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case WatchOrganizationInvitationsRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case WatchOrganizationInvitationsRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case WatchOrganizationInvitationsRequest_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchOrganizationInvitationsRequest_FieldPathSelectorStartingTime:
			if source.StartingTime != nil {
				values = append(values, source.StartingTime)
			}
		case WatchOrganizationInvitationsRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case WatchOrganizationInvitationsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchOrganizationInvitationsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		case WatchOrganizationInvitationsRequest_FieldPathSelectorMaxChunkSize:
			values = append(values, source.MaxChunkSize)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchOrganizationInvitationsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchOrganizationInvitationsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchOrganizationInvitationsRequest))
}

// GetSingle returns value pointed by specific field of from source WatchOrganizationInvitationsRequest
func (fp *WatchOrganizationInvitationsRequest_FieldTerminalPath) GetSingle(source *WatchOrganizationInvitationsRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchOrganizationInvitationsRequest_FieldPathSelectorType:
		return source.GetType(), source != nil
	case WatchOrganizationInvitationsRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case WatchOrganizationInvitationsRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case WatchOrganizationInvitationsRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case WatchOrganizationInvitationsRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case WatchOrganizationInvitationsRequest_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchOrganizationInvitationsRequest_FieldPathSelectorStartingTime:
		res := source.GetStartingTime()
		return res, res != nil
	case WatchOrganizationInvitationsRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case WatchOrganizationInvitationsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchOrganizationInvitationsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	case WatchOrganizationInvitationsRequest_FieldPathSelectorMaxChunkSize:
		return source.GetMaxChunkSize(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOrganizationInvitationsRequest: %d", fp.selector))
	}
}

func (fp *WatchOrganizationInvitationsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchOrganizationInvitationsRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchOrganizationInvitationsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchOrganizationInvitationsRequest_FieldPathSelectorType:
		return watch_type.WatchType_STATEFUL
	case WatchOrganizationInvitationsRequest_FieldPathSelectorParent:
		return (*organization_invitation.ParentReference)(nil)
	case WatchOrganizationInvitationsRequest_FieldPathSelectorPageSize:
		return int32(0)
	case WatchOrganizationInvitationsRequest_FieldPathSelectorPageToken:
		return (*organization_invitation.PagerCursor)(nil)
	case WatchOrganizationInvitationsRequest_FieldPathSelectorOrderBy:
		return (*organization_invitation.OrderBy)(nil)
	case WatchOrganizationInvitationsRequest_FieldPathSelectorResumeToken:
		return ""
	case WatchOrganizationInvitationsRequest_FieldPathSelectorStartingTime:
		return (*timestamp.Timestamp)(nil)
	case WatchOrganizationInvitationsRequest_FieldPathSelectorFilter:
		return (*organization_invitation.Filter)(nil)
	case WatchOrganizationInvitationsRequest_FieldPathSelectorFieldMask:
		return (*organization_invitation.OrganizationInvitation_FieldMask)(nil)
	case WatchOrganizationInvitationsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	case WatchOrganizationInvitationsRequest_FieldPathSelectorMaxChunkSize:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOrganizationInvitationsRequest: %d", fp.selector))
	}
}

func (fp *WatchOrganizationInvitationsRequest_FieldTerminalPath) ClearValue(item *WatchOrganizationInvitationsRequest) {
	if item != nil {
		switch fp.selector {
		case WatchOrganizationInvitationsRequest_FieldPathSelectorType:
			item.Type = watch_type.WatchType_STATEFUL
		case WatchOrganizationInvitationsRequest_FieldPathSelectorParent:
			item.Parent = nil
		case WatchOrganizationInvitationsRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case WatchOrganizationInvitationsRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case WatchOrganizationInvitationsRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case WatchOrganizationInvitationsRequest_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchOrganizationInvitationsRequest_FieldPathSelectorStartingTime:
			item.StartingTime = nil
		case WatchOrganizationInvitationsRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case WatchOrganizationInvitationsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchOrganizationInvitationsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		case WatchOrganizationInvitationsRequest_FieldPathSelectorMaxChunkSize:
			item.MaxChunkSize = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchOrganizationInvitationsRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchOrganizationInvitationsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchOrganizationInvitationsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchOrganizationInvitationsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchOrganizationInvitationsRequest_FieldPathSelectorType ||
		fp.selector == WatchOrganizationInvitationsRequest_FieldPathSelectorParent ||
		fp.selector == WatchOrganizationInvitationsRequest_FieldPathSelectorPageSize ||
		fp.selector == WatchOrganizationInvitationsRequest_FieldPathSelectorPageToken ||
		fp.selector == WatchOrganizationInvitationsRequest_FieldPathSelectorOrderBy ||
		fp.selector == WatchOrganizationInvitationsRequest_FieldPathSelectorResumeToken ||
		fp.selector == WatchOrganizationInvitationsRequest_FieldPathSelectorStartingTime ||
		fp.selector == WatchOrganizationInvitationsRequest_FieldPathSelectorFilter ||
		fp.selector == WatchOrganizationInvitationsRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchOrganizationInvitationsRequest_FieldPathSelectorView ||
		fp.selector == WatchOrganizationInvitationsRequest_FieldPathSelectorMaxChunkSize
}

func (fp *WatchOrganizationInvitationsRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchOrganizationInvitationsRequest_FieldTerminalPath) WithIValue(value interface{}) WatchOrganizationInvitationsRequest_FieldPathValue {
	switch fp.selector {
	case WatchOrganizationInvitationsRequest_FieldPathSelectorType:
		return &WatchOrganizationInvitationsRequest_FieldTerminalPathValue{WatchOrganizationInvitationsRequest_FieldTerminalPath: *fp, value: value.(watch_type.WatchType)}
	case WatchOrganizationInvitationsRequest_FieldPathSelectorParent:
		return &WatchOrganizationInvitationsRequest_FieldTerminalPathValue{WatchOrganizationInvitationsRequest_FieldTerminalPath: *fp, value: value.(*organization_invitation.ParentReference)}
	case WatchOrganizationInvitationsRequest_FieldPathSelectorPageSize:
		return &WatchOrganizationInvitationsRequest_FieldTerminalPathValue{WatchOrganizationInvitationsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case WatchOrganizationInvitationsRequest_FieldPathSelectorPageToken:
		return &WatchOrganizationInvitationsRequest_FieldTerminalPathValue{WatchOrganizationInvitationsRequest_FieldTerminalPath: *fp, value: value.(*organization_invitation.PagerCursor)}
	case WatchOrganizationInvitationsRequest_FieldPathSelectorOrderBy:
		return &WatchOrganizationInvitationsRequest_FieldTerminalPathValue{WatchOrganizationInvitationsRequest_FieldTerminalPath: *fp, value: value.(*organization_invitation.OrderBy)}
	case WatchOrganizationInvitationsRequest_FieldPathSelectorResumeToken:
		return &WatchOrganizationInvitationsRequest_FieldTerminalPathValue{WatchOrganizationInvitationsRequest_FieldTerminalPath: *fp, value: value.(string)}
	case WatchOrganizationInvitationsRequest_FieldPathSelectorStartingTime:
		return &WatchOrganizationInvitationsRequest_FieldTerminalPathValue{WatchOrganizationInvitationsRequest_FieldTerminalPath: *fp, value: value.(*timestamp.Timestamp)}
	case WatchOrganizationInvitationsRequest_FieldPathSelectorFilter:
		return &WatchOrganizationInvitationsRequest_FieldTerminalPathValue{WatchOrganizationInvitationsRequest_FieldTerminalPath: *fp, value: value.(*organization_invitation.Filter)}
	case WatchOrganizationInvitationsRequest_FieldPathSelectorFieldMask:
		return &WatchOrganizationInvitationsRequest_FieldTerminalPathValue{WatchOrganizationInvitationsRequest_FieldTerminalPath: *fp, value: value.(*organization_invitation.OrganizationInvitation_FieldMask)}
	case WatchOrganizationInvitationsRequest_FieldPathSelectorView:
		return &WatchOrganizationInvitationsRequest_FieldTerminalPathValue{WatchOrganizationInvitationsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	case WatchOrganizationInvitationsRequest_FieldPathSelectorMaxChunkSize:
		return &WatchOrganizationInvitationsRequest_FieldTerminalPathValue{WatchOrganizationInvitationsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOrganizationInvitationsRequest: %d", fp.selector))
	}
}

func (fp *WatchOrganizationInvitationsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchOrganizationInvitationsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchOrganizationInvitationsRequest_FieldPathArrayOfValues {
	fpaov := &WatchOrganizationInvitationsRequest_FieldTerminalPathArrayOfValues{WatchOrganizationInvitationsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchOrganizationInvitationsRequest_FieldPathSelectorType:
		return &WatchOrganizationInvitationsRequest_FieldTerminalPathArrayOfValues{WatchOrganizationInvitationsRequest_FieldTerminalPath: *fp, values: values.([]watch_type.WatchType)}
	case WatchOrganizationInvitationsRequest_FieldPathSelectorParent:
		return &WatchOrganizationInvitationsRequest_FieldTerminalPathArrayOfValues{WatchOrganizationInvitationsRequest_FieldTerminalPath: *fp, values: values.([]*organization_invitation.ParentReference)}
	case WatchOrganizationInvitationsRequest_FieldPathSelectorPageSize:
		return &WatchOrganizationInvitationsRequest_FieldTerminalPathArrayOfValues{WatchOrganizationInvitationsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case WatchOrganizationInvitationsRequest_FieldPathSelectorPageToken:
		return &WatchOrganizationInvitationsRequest_FieldTerminalPathArrayOfValues{WatchOrganizationInvitationsRequest_FieldTerminalPath: *fp, values: values.([]*organization_invitation.PagerCursor)}
	case WatchOrganizationInvitationsRequest_FieldPathSelectorOrderBy:
		return &WatchOrganizationInvitationsRequest_FieldTerminalPathArrayOfValues{WatchOrganizationInvitationsRequest_FieldTerminalPath: *fp, values: values.([]*organization_invitation.OrderBy)}
	case WatchOrganizationInvitationsRequest_FieldPathSelectorResumeToken:
		return &WatchOrganizationInvitationsRequest_FieldTerminalPathArrayOfValues{WatchOrganizationInvitationsRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchOrganizationInvitationsRequest_FieldPathSelectorStartingTime:
		return &WatchOrganizationInvitationsRequest_FieldTerminalPathArrayOfValues{WatchOrganizationInvitationsRequest_FieldTerminalPath: *fp, values: values.([]*timestamp.Timestamp)}
	case WatchOrganizationInvitationsRequest_FieldPathSelectorFilter:
		return &WatchOrganizationInvitationsRequest_FieldTerminalPathArrayOfValues{WatchOrganizationInvitationsRequest_FieldTerminalPath: *fp, values: values.([]*organization_invitation.Filter)}
	case WatchOrganizationInvitationsRequest_FieldPathSelectorFieldMask:
		return &WatchOrganizationInvitationsRequest_FieldTerminalPathArrayOfValues{WatchOrganizationInvitationsRequest_FieldTerminalPath: *fp, values: values.([]*organization_invitation.OrganizationInvitation_FieldMask)}
	case WatchOrganizationInvitationsRequest_FieldPathSelectorView:
		return &WatchOrganizationInvitationsRequest_FieldTerminalPathArrayOfValues{WatchOrganizationInvitationsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	case WatchOrganizationInvitationsRequest_FieldPathSelectorMaxChunkSize:
		return &WatchOrganizationInvitationsRequest_FieldTerminalPathArrayOfValues{WatchOrganizationInvitationsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOrganizationInvitationsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchOrganizationInvitationsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchOrganizationInvitationsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchOrganizationInvitationsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOrganizationInvitationsRequest: %d", fp.selector))
	}
}

func (fp *WatchOrganizationInvitationsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchOrganizationInvitationsRequest_FieldPathValue allows storing values for WatchOrganizationInvitationsRequest fields according to their type
type WatchOrganizationInvitationsRequest_FieldPathValue interface {
	WatchOrganizationInvitationsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchOrganizationInvitationsRequest)
	CompareWith(*WatchOrganizationInvitationsRequest) (cmp int, comparable bool)
}

func ParseWatchOrganizationInvitationsRequest_FieldPathValue(pathStr, valueStr string) (WatchOrganizationInvitationsRequest_FieldPathValue, error) {
	fp, err := ParseWatchOrganizationInvitationsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchOrganizationInvitationsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchOrganizationInvitationsRequest_FieldPathValue), nil
}

func MustParseWatchOrganizationInvitationsRequest_FieldPathValue(pathStr, valueStr string) WatchOrganizationInvitationsRequest_FieldPathValue {
	fpv, err := ParseWatchOrganizationInvitationsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchOrganizationInvitationsRequest_FieldTerminalPathValue struct {
	WatchOrganizationInvitationsRequest_FieldTerminalPath
	value interface{}
}

var _ WatchOrganizationInvitationsRequest_FieldPathValue = (*WatchOrganizationInvitationsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchOrganizationInvitationsRequest' as interface{}
func (fpv *WatchOrganizationInvitationsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchOrganizationInvitationsRequest_FieldTerminalPathValue) AsTypeValue() (watch_type.WatchType, bool) {
	res, ok := fpv.value.(watch_type.WatchType)
	return res, ok
}
func (fpv *WatchOrganizationInvitationsRequest_FieldTerminalPathValue) AsParentValue() (*organization_invitation.ParentReference, bool) {
	res, ok := fpv.value.(*organization_invitation.ParentReference)
	return res, ok
}
func (fpv *WatchOrganizationInvitationsRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *WatchOrganizationInvitationsRequest_FieldTerminalPathValue) AsPageTokenValue() (*organization_invitation.PagerCursor, bool) {
	res, ok := fpv.value.(*organization_invitation.PagerCursor)
	return res, ok
}
func (fpv *WatchOrganizationInvitationsRequest_FieldTerminalPathValue) AsOrderByValue() (*organization_invitation.OrderBy, bool) {
	res, ok := fpv.value.(*organization_invitation.OrderBy)
	return res, ok
}
func (fpv *WatchOrganizationInvitationsRequest_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchOrganizationInvitationsRequest_FieldTerminalPathValue) AsStartingTimeValue() (*timestamp.Timestamp, bool) {
	res, ok := fpv.value.(*timestamp.Timestamp)
	return res, ok
}
func (fpv *WatchOrganizationInvitationsRequest_FieldTerminalPathValue) AsFilterValue() (*organization_invitation.Filter, bool) {
	res, ok := fpv.value.(*organization_invitation.Filter)
	return res, ok
}
func (fpv *WatchOrganizationInvitationsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*organization_invitation.OrganizationInvitation_FieldMask, bool) {
	res, ok := fpv.value.(*organization_invitation.OrganizationInvitation_FieldMask)
	return res, ok
}
func (fpv *WatchOrganizationInvitationsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}
func (fpv *WatchOrganizationInvitationsRequest_FieldTerminalPathValue) AsMaxChunkSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object WatchOrganizationInvitationsRequest
func (fpv *WatchOrganizationInvitationsRequest_FieldTerminalPathValue) SetTo(target **WatchOrganizationInvitationsRequest) {
	if *target == nil {
		*target = new(WatchOrganizationInvitationsRequest)
	}
	switch fpv.selector {
	case WatchOrganizationInvitationsRequest_FieldPathSelectorType:
		(*target).Type = fpv.value.(watch_type.WatchType)
	case WatchOrganizationInvitationsRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*organization_invitation.ParentReference)
	case WatchOrganizationInvitationsRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case WatchOrganizationInvitationsRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*organization_invitation.PagerCursor)
	case WatchOrganizationInvitationsRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*organization_invitation.OrderBy)
	case WatchOrganizationInvitationsRequest_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchOrganizationInvitationsRequest_FieldPathSelectorStartingTime:
		(*target).StartingTime = fpv.value.(*timestamp.Timestamp)
	case WatchOrganizationInvitationsRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*organization_invitation.Filter)
	case WatchOrganizationInvitationsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*organization_invitation.OrganizationInvitation_FieldMask)
	case WatchOrganizationInvitationsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	case WatchOrganizationInvitationsRequest_FieldPathSelectorMaxChunkSize:
		(*target).MaxChunkSize = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOrganizationInvitationsRequest: %d", fpv.selector))
	}
}

func (fpv *WatchOrganizationInvitationsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchOrganizationInvitationsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchOrganizationInvitationsRequest_FieldTerminalPathValue' with the value under path in 'WatchOrganizationInvitationsRequest'.
func (fpv *WatchOrganizationInvitationsRequest_FieldTerminalPathValue) CompareWith(source *WatchOrganizationInvitationsRequest) (int, bool) {
	switch fpv.selector {
	case WatchOrganizationInvitationsRequest_FieldPathSelectorType:
		leftValue := fpv.value.(watch_type.WatchType)
		rightValue := source.GetType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchOrganizationInvitationsRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*organization_invitation.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchOrganizationInvitationsRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchOrganizationInvitationsRequest_FieldPathSelectorPageToken:
		return 0, false
	case WatchOrganizationInvitationsRequest_FieldPathSelectorOrderBy:
		return 0, false
	case WatchOrganizationInvitationsRequest_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchOrganizationInvitationsRequest_FieldPathSelectorStartingTime:
		leftValue := fpv.value.(*timestamp.Timestamp)
		rightValue := source.GetStartingTime()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.AsTime().Equal(rightValue.AsTime()) {
			return 0, true
		} else if leftValue.AsTime().Before(rightValue.AsTime()) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchOrganizationInvitationsRequest_FieldPathSelectorFilter:
		return 0, false
	case WatchOrganizationInvitationsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchOrganizationInvitationsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchOrganizationInvitationsRequest_FieldPathSelectorMaxChunkSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetMaxChunkSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOrganizationInvitationsRequest: %d", fpv.selector))
	}
}

func (fpv *WatchOrganizationInvitationsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchOrganizationInvitationsRequest))
}

// WatchOrganizationInvitationsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchOrganizationInvitationsRequest according to their type
// Present only for array (repeated) types.
type WatchOrganizationInvitationsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchOrganizationInvitationsRequest_FieldPath
	ContainsValue(*WatchOrganizationInvitationsRequest) bool
}

// ParseWatchOrganizationInvitationsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchOrganizationInvitationsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchOrganizationInvitationsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchOrganizationInvitationsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchOrganizationInvitationsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchOrganizationInvitationsRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchOrganizationInvitationsRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchOrganizationInvitationsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchOrganizationInvitationsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchOrganizationInvitationsRequest_FieldTerminalPathArrayItemValue struct {
	WatchOrganizationInvitationsRequest_FieldTerminalPath
	value interface{}
}

var _ WatchOrganizationInvitationsRequest_FieldPathArrayItemValue = (*WatchOrganizationInvitationsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchOrganizationInvitationsRequest as interface{}
func (fpaiv *WatchOrganizationInvitationsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchOrganizationInvitationsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchOrganizationInvitationsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchOrganizationInvitationsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchOrganizationInvitationsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchOrganizationInvitationsRequest'
func (fpaiv *WatchOrganizationInvitationsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchOrganizationInvitationsRequest) bool {
	slice := fpaiv.WatchOrganizationInvitationsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchOrganizationInvitationsRequest_FieldPathArrayOfValues allows storing slice of values for WatchOrganizationInvitationsRequest fields according to their type
type WatchOrganizationInvitationsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchOrganizationInvitationsRequest_FieldPath
}

func ParseWatchOrganizationInvitationsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchOrganizationInvitationsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchOrganizationInvitationsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchOrganizationInvitationsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchOrganizationInvitationsRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchOrganizationInvitationsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchOrganizationInvitationsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchOrganizationInvitationsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchOrganizationInvitationsRequest_FieldTerminalPathArrayOfValues struct {
	WatchOrganizationInvitationsRequest_FieldTerminalPath
	values interface{}
}

var _ WatchOrganizationInvitationsRequest_FieldPathArrayOfValues = (*WatchOrganizationInvitationsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchOrganizationInvitationsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchOrganizationInvitationsRequest_FieldPathSelectorType:
		for _, v := range fpaov.values.([]watch_type.WatchType) {
			values = append(values, v)
		}
	case WatchOrganizationInvitationsRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*organization_invitation.ParentReference) {
			values = append(values, v)
		}
	case WatchOrganizationInvitationsRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case WatchOrganizationInvitationsRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*organization_invitation.PagerCursor) {
			values = append(values, v)
		}
	case WatchOrganizationInvitationsRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*organization_invitation.OrderBy) {
			values = append(values, v)
		}
	case WatchOrganizationInvitationsRequest_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchOrganizationInvitationsRequest_FieldPathSelectorStartingTime:
		for _, v := range fpaov.values.([]*timestamp.Timestamp) {
			values = append(values, v)
		}
	case WatchOrganizationInvitationsRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*organization_invitation.Filter) {
			values = append(values, v)
		}
	case WatchOrganizationInvitationsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*organization_invitation.OrganizationInvitation_FieldMask) {
			values = append(values, v)
		}
	case WatchOrganizationInvitationsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	case WatchOrganizationInvitationsRequest_FieldPathSelectorMaxChunkSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchOrganizationInvitationsRequest_FieldTerminalPathArrayOfValues) AsTypeArrayOfValues() ([]watch_type.WatchType, bool) {
	res, ok := fpaov.values.([]watch_type.WatchType)
	return res, ok
}
func (fpaov *WatchOrganizationInvitationsRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*organization_invitation.ParentReference, bool) {
	res, ok := fpaov.values.([]*organization_invitation.ParentReference)
	return res, ok
}
func (fpaov *WatchOrganizationInvitationsRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *WatchOrganizationInvitationsRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*organization_invitation.PagerCursor, bool) {
	res, ok := fpaov.values.([]*organization_invitation.PagerCursor)
	return res, ok
}
func (fpaov *WatchOrganizationInvitationsRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*organization_invitation.OrderBy, bool) {
	res, ok := fpaov.values.([]*organization_invitation.OrderBy)
	return res, ok
}
func (fpaov *WatchOrganizationInvitationsRequest_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchOrganizationInvitationsRequest_FieldTerminalPathArrayOfValues) AsStartingTimeArrayOfValues() ([]*timestamp.Timestamp, bool) {
	res, ok := fpaov.values.([]*timestamp.Timestamp)
	return res, ok
}
func (fpaov *WatchOrganizationInvitationsRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*organization_invitation.Filter, bool) {
	res, ok := fpaov.values.([]*organization_invitation.Filter)
	return res, ok
}
func (fpaov *WatchOrganizationInvitationsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*organization_invitation.OrganizationInvitation_FieldMask, bool) {
	res, ok := fpaov.values.([]*organization_invitation.OrganizationInvitation_FieldMask)
	return res, ok
}
func (fpaov *WatchOrganizationInvitationsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}
func (fpaov *WatchOrganizationInvitationsRequest_FieldTerminalPathArrayOfValues) AsMaxChunkSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchOrganizationInvitationsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchOrganizationInvitationsResponse_FieldPathSelector
	Get(source *WatchOrganizationInvitationsResponse) []interface{}
	GetSingle(source *WatchOrganizationInvitationsResponse) (interface{}, bool)
	ClearValue(item *WatchOrganizationInvitationsResponse)

	// Those methods build corresponding WatchOrganizationInvitationsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchOrganizationInvitationsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchOrganizationInvitationsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchOrganizationInvitationsResponse_FieldPathArrayItemValue
}

type WatchOrganizationInvitationsResponse_FieldPathSelector int32

const (
	WatchOrganizationInvitationsResponse_FieldPathSelectorOrganizationInvitationChanges WatchOrganizationInvitationsResponse_FieldPathSelector = 0
	WatchOrganizationInvitationsResponse_FieldPathSelectorIsCurrent                     WatchOrganizationInvitationsResponse_FieldPathSelector = 1
	WatchOrganizationInvitationsResponse_FieldPathSelectorPageTokenChange               WatchOrganizationInvitationsResponse_FieldPathSelector = 2
	WatchOrganizationInvitationsResponse_FieldPathSelectorResumeToken                   WatchOrganizationInvitationsResponse_FieldPathSelector = 3
	WatchOrganizationInvitationsResponse_FieldPathSelectorSnapshotSize                  WatchOrganizationInvitationsResponse_FieldPathSelector = 4
	WatchOrganizationInvitationsResponse_FieldPathSelectorIsSoftReset                   WatchOrganizationInvitationsResponse_FieldPathSelector = 5
	WatchOrganizationInvitationsResponse_FieldPathSelectorIsHardReset                   WatchOrganizationInvitationsResponse_FieldPathSelector = 6
)

func (s WatchOrganizationInvitationsResponse_FieldPathSelector) String() string {
	switch s {
	case WatchOrganizationInvitationsResponse_FieldPathSelectorOrganizationInvitationChanges:
		return "organization_invitation_changes"
	case WatchOrganizationInvitationsResponse_FieldPathSelectorIsCurrent:
		return "is_current"
	case WatchOrganizationInvitationsResponse_FieldPathSelectorPageTokenChange:
		return "page_token_change"
	case WatchOrganizationInvitationsResponse_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchOrganizationInvitationsResponse_FieldPathSelectorSnapshotSize:
		return "snapshot_size"
	case WatchOrganizationInvitationsResponse_FieldPathSelectorIsSoftReset:
		return "is_soft_reset"
	case WatchOrganizationInvitationsResponse_FieldPathSelectorIsHardReset:
		return "is_hard_reset"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOrganizationInvitationsResponse: %d", s))
	}
}

func BuildWatchOrganizationInvitationsResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchOrganizationInvitationsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchOrganizationInvitationsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "organization_invitation_changes", "organizationInvitationChanges", "organization-invitation-changes":
			return &WatchOrganizationInvitationsResponse_FieldTerminalPath{selector: WatchOrganizationInvitationsResponse_FieldPathSelectorOrganizationInvitationChanges}, nil
		case "is_current", "isCurrent", "is-current":
			return &WatchOrganizationInvitationsResponse_FieldTerminalPath{selector: WatchOrganizationInvitationsResponse_FieldPathSelectorIsCurrent}, nil
		case "page_token_change", "pageTokenChange", "page-token-change":
			return &WatchOrganizationInvitationsResponse_FieldTerminalPath{selector: WatchOrganizationInvitationsResponse_FieldPathSelectorPageTokenChange}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchOrganizationInvitationsResponse_FieldTerminalPath{selector: WatchOrganizationInvitationsResponse_FieldPathSelectorResumeToken}, nil
		case "snapshot_size", "snapshotSize", "snapshot-size":
			return &WatchOrganizationInvitationsResponse_FieldTerminalPath{selector: WatchOrganizationInvitationsResponse_FieldPathSelectorSnapshotSize}, nil
		case "is_soft_reset", "isSoftReset", "is-soft-reset":
			return &WatchOrganizationInvitationsResponse_FieldTerminalPath{selector: WatchOrganizationInvitationsResponse_FieldPathSelectorIsSoftReset}, nil
		case "is_hard_reset", "isHardReset", "is-hard-reset":
			return &WatchOrganizationInvitationsResponse_FieldTerminalPath{selector: WatchOrganizationInvitationsResponse_FieldPathSelectorIsHardReset}, nil
		}
	} else {
		switch fp[0] {
		case "page_token_change", "pageTokenChange", "page-token-change":
			if subpath, err := BuildWatchOrganizationInvitationsResponsePageTokenChange_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &WatchOrganizationInvitationsResponse_FieldSubPath{selector: WatchOrganizationInvitationsResponse_FieldPathSelectorPageTokenChange, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchOrganizationInvitationsResponse", fp)
}

func ParseWatchOrganizationInvitationsResponse_FieldPath(rawField string) (WatchOrganizationInvitationsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchOrganizationInvitationsResponse_FieldPath(fp)
}

func MustParseWatchOrganizationInvitationsResponse_FieldPath(rawField string) WatchOrganizationInvitationsResponse_FieldPath {
	fp, err := ParseWatchOrganizationInvitationsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchOrganizationInvitationsResponse_FieldTerminalPath struct {
	selector WatchOrganizationInvitationsResponse_FieldPathSelector
}

var _ WatchOrganizationInvitationsResponse_FieldPath = (*WatchOrganizationInvitationsResponse_FieldTerminalPath)(nil)

func (fp *WatchOrganizationInvitationsResponse_FieldTerminalPath) Selector() WatchOrganizationInvitationsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchOrganizationInvitationsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchOrganizationInvitationsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchOrganizationInvitationsResponse
func (fp *WatchOrganizationInvitationsResponse_FieldTerminalPath) Get(source *WatchOrganizationInvitationsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchOrganizationInvitationsResponse_FieldPathSelectorOrganizationInvitationChanges:
			for _, value := range source.GetOrganizationInvitationChanges() {
				values = append(values, value)
			}
		case WatchOrganizationInvitationsResponse_FieldPathSelectorIsCurrent:
			values = append(values, source.IsCurrent)
		case WatchOrganizationInvitationsResponse_FieldPathSelectorPageTokenChange:
			if source.PageTokenChange != nil {
				values = append(values, source.PageTokenChange)
			}
		case WatchOrganizationInvitationsResponse_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchOrganizationInvitationsResponse_FieldPathSelectorSnapshotSize:
			values = append(values, source.SnapshotSize)
		case WatchOrganizationInvitationsResponse_FieldPathSelectorIsSoftReset:
			values = append(values, source.IsSoftReset)
		case WatchOrganizationInvitationsResponse_FieldPathSelectorIsHardReset:
			values = append(values, source.IsHardReset)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchOrganizationInvitationsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchOrganizationInvitationsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchOrganizationInvitationsResponse))
}

// GetSingle returns value pointed by specific field of from source WatchOrganizationInvitationsResponse
func (fp *WatchOrganizationInvitationsResponse_FieldTerminalPath) GetSingle(source *WatchOrganizationInvitationsResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchOrganizationInvitationsResponse_FieldPathSelectorOrganizationInvitationChanges:
		res := source.GetOrganizationInvitationChanges()
		return res, res != nil
	case WatchOrganizationInvitationsResponse_FieldPathSelectorIsCurrent:
		return source.GetIsCurrent(), source != nil
	case WatchOrganizationInvitationsResponse_FieldPathSelectorPageTokenChange:
		res := source.GetPageTokenChange()
		return res, res != nil
	case WatchOrganizationInvitationsResponse_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchOrganizationInvitationsResponse_FieldPathSelectorSnapshotSize:
		return source.GetSnapshotSize(), source != nil
	case WatchOrganizationInvitationsResponse_FieldPathSelectorIsSoftReset:
		return source.GetIsSoftReset(), source != nil
	case WatchOrganizationInvitationsResponse_FieldPathSelectorIsHardReset:
		return source.GetIsHardReset(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOrganizationInvitationsResponse: %d", fp.selector))
	}
}

func (fp *WatchOrganizationInvitationsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchOrganizationInvitationsResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchOrganizationInvitationsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchOrganizationInvitationsResponse_FieldPathSelectorOrganizationInvitationChanges:
		return ([]*organization_invitation.OrganizationInvitationChange)(nil)
	case WatchOrganizationInvitationsResponse_FieldPathSelectorIsCurrent:
		return false
	case WatchOrganizationInvitationsResponse_FieldPathSelectorPageTokenChange:
		return (*WatchOrganizationInvitationsResponse_PageTokenChange)(nil)
	case WatchOrganizationInvitationsResponse_FieldPathSelectorResumeToken:
		return ""
	case WatchOrganizationInvitationsResponse_FieldPathSelectorSnapshotSize:
		return int64(0)
	case WatchOrganizationInvitationsResponse_FieldPathSelectorIsSoftReset:
		return false
	case WatchOrganizationInvitationsResponse_FieldPathSelectorIsHardReset:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOrganizationInvitationsResponse: %d", fp.selector))
	}
}

func (fp *WatchOrganizationInvitationsResponse_FieldTerminalPath) ClearValue(item *WatchOrganizationInvitationsResponse) {
	if item != nil {
		switch fp.selector {
		case WatchOrganizationInvitationsResponse_FieldPathSelectorOrganizationInvitationChanges:
			item.OrganizationInvitationChanges = nil
		case WatchOrganizationInvitationsResponse_FieldPathSelectorIsCurrent:
			item.IsCurrent = false
		case WatchOrganizationInvitationsResponse_FieldPathSelectorPageTokenChange:
			item.PageTokenChange = nil
		case WatchOrganizationInvitationsResponse_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchOrganizationInvitationsResponse_FieldPathSelectorSnapshotSize:
			item.SnapshotSize = int64(0)
		case WatchOrganizationInvitationsResponse_FieldPathSelectorIsSoftReset:
			item.IsSoftReset = false
		case WatchOrganizationInvitationsResponse_FieldPathSelectorIsHardReset:
			item.IsHardReset = false
		default:
			panic(fmt.Sprintf("Invalid selector for WatchOrganizationInvitationsResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchOrganizationInvitationsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchOrganizationInvitationsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchOrganizationInvitationsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchOrganizationInvitationsResponse_FieldPathSelectorOrganizationInvitationChanges ||
		fp.selector == WatchOrganizationInvitationsResponse_FieldPathSelectorIsCurrent ||
		fp.selector == WatchOrganizationInvitationsResponse_FieldPathSelectorResumeToken ||
		fp.selector == WatchOrganizationInvitationsResponse_FieldPathSelectorSnapshotSize ||
		fp.selector == WatchOrganizationInvitationsResponse_FieldPathSelectorIsSoftReset ||
		fp.selector == WatchOrganizationInvitationsResponse_FieldPathSelectorIsHardReset
}

func (fp *WatchOrganizationInvitationsResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchOrganizationInvitationsResponse_FieldTerminalPath) WithIValue(value interface{}) WatchOrganizationInvitationsResponse_FieldPathValue {
	switch fp.selector {
	case WatchOrganizationInvitationsResponse_FieldPathSelectorOrganizationInvitationChanges:
		return &WatchOrganizationInvitationsResponse_FieldTerminalPathValue{WatchOrganizationInvitationsResponse_FieldTerminalPath: *fp, value: value.([]*organization_invitation.OrganizationInvitationChange)}
	case WatchOrganizationInvitationsResponse_FieldPathSelectorIsCurrent:
		return &WatchOrganizationInvitationsResponse_FieldTerminalPathValue{WatchOrganizationInvitationsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchOrganizationInvitationsResponse_FieldPathSelectorPageTokenChange:
		return &WatchOrganizationInvitationsResponse_FieldTerminalPathValue{WatchOrganizationInvitationsResponse_FieldTerminalPath: *fp, value: value.(*WatchOrganizationInvitationsResponse_PageTokenChange)}
	case WatchOrganizationInvitationsResponse_FieldPathSelectorResumeToken:
		return &WatchOrganizationInvitationsResponse_FieldTerminalPathValue{WatchOrganizationInvitationsResponse_FieldTerminalPath: *fp, value: value.(string)}
	case WatchOrganizationInvitationsResponse_FieldPathSelectorSnapshotSize:
		return &WatchOrganizationInvitationsResponse_FieldTerminalPathValue{WatchOrganizationInvitationsResponse_FieldTerminalPath: *fp, value: value.(int64)}
	case WatchOrganizationInvitationsResponse_FieldPathSelectorIsSoftReset:
		return &WatchOrganizationInvitationsResponse_FieldTerminalPathValue{WatchOrganizationInvitationsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchOrganizationInvitationsResponse_FieldPathSelectorIsHardReset:
		return &WatchOrganizationInvitationsResponse_FieldTerminalPathValue{WatchOrganizationInvitationsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOrganizationInvitationsResponse: %d", fp.selector))
	}
}

func (fp *WatchOrganizationInvitationsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchOrganizationInvitationsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchOrganizationInvitationsResponse_FieldPathArrayOfValues {
	fpaov := &WatchOrganizationInvitationsResponse_FieldTerminalPathArrayOfValues{WatchOrganizationInvitationsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchOrganizationInvitationsResponse_FieldPathSelectorOrganizationInvitationChanges:
		return &WatchOrganizationInvitationsResponse_FieldTerminalPathArrayOfValues{WatchOrganizationInvitationsResponse_FieldTerminalPath: *fp, values: values.([][]*organization_invitation.OrganizationInvitationChange)}
	case WatchOrganizationInvitationsResponse_FieldPathSelectorIsCurrent:
		return &WatchOrganizationInvitationsResponse_FieldTerminalPathArrayOfValues{WatchOrganizationInvitationsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchOrganizationInvitationsResponse_FieldPathSelectorPageTokenChange:
		return &WatchOrganizationInvitationsResponse_FieldTerminalPathArrayOfValues{WatchOrganizationInvitationsResponse_FieldTerminalPath: *fp, values: values.([]*WatchOrganizationInvitationsResponse_PageTokenChange)}
	case WatchOrganizationInvitationsResponse_FieldPathSelectorResumeToken:
		return &WatchOrganizationInvitationsResponse_FieldTerminalPathArrayOfValues{WatchOrganizationInvitationsResponse_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchOrganizationInvitationsResponse_FieldPathSelectorSnapshotSize:
		return &WatchOrganizationInvitationsResponse_FieldTerminalPathArrayOfValues{WatchOrganizationInvitationsResponse_FieldTerminalPath: *fp, values: values.([]int64)}
	case WatchOrganizationInvitationsResponse_FieldPathSelectorIsSoftReset:
		return &WatchOrganizationInvitationsResponse_FieldTerminalPathArrayOfValues{WatchOrganizationInvitationsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchOrganizationInvitationsResponse_FieldPathSelectorIsHardReset:
		return &WatchOrganizationInvitationsResponse_FieldTerminalPathArrayOfValues{WatchOrganizationInvitationsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOrganizationInvitationsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchOrganizationInvitationsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchOrganizationInvitationsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchOrganizationInvitationsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case WatchOrganizationInvitationsResponse_FieldPathSelectorOrganizationInvitationChanges:
		return &WatchOrganizationInvitationsResponse_FieldTerminalPathArrayItemValue{WatchOrganizationInvitationsResponse_FieldTerminalPath: *fp, value: value.(*organization_invitation.OrganizationInvitationChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOrganizationInvitationsResponse: %d", fp.selector))
	}
}

func (fp *WatchOrganizationInvitationsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type WatchOrganizationInvitationsResponse_FieldSubPath struct {
	selector WatchOrganizationInvitationsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ WatchOrganizationInvitationsResponse_FieldPath = (*WatchOrganizationInvitationsResponse_FieldSubPath)(nil)

func (fps *WatchOrganizationInvitationsResponse_FieldSubPath) Selector() WatchOrganizationInvitationsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *WatchOrganizationInvitationsResponse_FieldSubPath) AsPageTokenChangeSubPath() (WatchOrganizationInvitationsResponsePageTokenChange_FieldPath, bool) {
	res, ok := fps.subPath.(WatchOrganizationInvitationsResponsePageTokenChange_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *WatchOrganizationInvitationsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *WatchOrganizationInvitationsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source WatchOrganizationInvitationsResponse
func (fps *WatchOrganizationInvitationsResponse_FieldSubPath) Get(source *WatchOrganizationInvitationsResponse) (values []interface{}) {
	switch fps.selector {
	case WatchOrganizationInvitationsResponse_FieldPathSelectorPageTokenChange:
		values = append(values, fps.subPath.GetRaw(source.GetPageTokenChange())...)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOrganizationInvitationsResponse: %d", fps.selector))
	}
	return
}

func (fps *WatchOrganizationInvitationsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*WatchOrganizationInvitationsResponse))
}

// GetSingle returns value of selected field from source WatchOrganizationInvitationsResponse
func (fps *WatchOrganizationInvitationsResponse_FieldSubPath) GetSingle(source *WatchOrganizationInvitationsResponse) (interface{}, bool) {
	switch fps.selector {
	case WatchOrganizationInvitationsResponse_FieldPathSelectorPageTokenChange:
		if source.GetPageTokenChange() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOrganizationInvitationsResponse: %d", fps.selector))
	}
}

func (fps *WatchOrganizationInvitationsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*WatchOrganizationInvitationsResponse))
}

// GetDefault returns a default value of the field type
func (fps *WatchOrganizationInvitationsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *WatchOrganizationInvitationsResponse_FieldSubPath) ClearValue(item *WatchOrganizationInvitationsResponse) {
	if item != nil {
		switch fps.selector {
		case WatchOrganizationInvitationsResponse_FieldPathSelectorPageTokenChange:
			fps.subPath.ClearValueRaw(item.PageTokenChange)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchOrganizationInvitationsResponse: %d", fps.selector))
		}
	}
}

func (fps *WatchOrganizationInvitationsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*WatchOrganizationInvitationsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *WatchOrganizationInvitationsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *WatchOrganizationInvitationsResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&WatchOrganizationInvitationsResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *WatchOrganizationInvitationsResponse_FieldSubPath) WithIValue(value interface{}) WatchOrganizationInvitationsResponse_FieldPathValue {
	return &WatchOrganizationInvitationsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *WatchOrganizationInvitationsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *WatchOrganizationInvitationsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) WatchOrganizationInvitationsResponse_FieldPathArrayOfValues {
	return &WatchOrganizationInvitationsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *WatchOrganizationInvitationsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *WatchOrganizationInvitationsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) WatchOrganizationInvitationsResponse_FieldPathArrayItemValue {
	return &WatchOrganizationInvitationsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *WatchOrganizationInvitationsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// WatchOrganizationInvitationsResponse_FieldPathValue allows storing values for WatchOrganizationInvitationsResponse fields according to their type
type WatchOrganizationInvitationsResponse_FieldPathValue interface {
	WatchOrganizationInvitationsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchOrganizationInvitationsResponse)
	CompareWith(*WatchOrganizationInvitationsResponse) (cmp int, comparable bool)
}

func ParseWatchOrganizationInvitationsResponse_FieldPathValue(pathStr, valueStr string) (WatchOrganizationInvitationsResponse_FieldPathValue, error) {
	fp, err := ParseWatchOrganizationInvitationsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchOrganizationInvitationsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchOrganizationInvitationsResponse_FieldPathValue), nil
}

func MustParseWatchOrganizationInvitationsResponse_FieldPathValue(pathStr, valueStr string) WatchOrganizationInvitationsResponse_FieldPathValue {
	fpv, err := ParseWatchOrganizationInvitationsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchOrganizationInvitationsResponse_FieldTerminalPathValue struct {
	WatchOrganizationInvitationsResponse_FieldTerminalPath
	value interface{}
}

var _ WatchOrganizationInvitationsResponse_FieldPathValue = (*WatchOrganizationInvitationsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchOrganizationInvitationsResponse' as interface{}
func (fpv *WatchOrganizationInvitationsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchOrganizationInvitationsResponse_FieldTerminalPathValue) AsOrganizationInvitationChangesValue() ([]*organization_invitation.OrganizationInvitationChange, bool) {
	res, ok := fpv.value.([]*organization_invitation.OrganizationInvitationChange)
	return res, ok
}
func (fpv *WatchOrganizationInvitationsResponse_FieldTerminalPathValue) AsIsCurrentValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchOrganizationInvitationsResponse_FieldTerminalPathValue) AsPageTokenChangeValue() (*WatchOrganizationInvitationsResponse_PageTokenChange, bool) {
	res, ok := fpv.value.(*WatchOrganizationInvitationsResponse_PageTokenChange)
	return res, ok
}
func (fpv *WatchOrganizationInvitationsResponse_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchOrganizationInvitationsResponse_FieldTerminalPathValue) AsSnapshotSizeValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}
func (fpv *WatchOrganizationInvitationsResponse_FieldTerminalPathValue) AsIsSoftResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchOrganizationInvitationsResponse_FieldTerminalPathValue) AsIsHardResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object WatchOrganizationInvitationsResponse
func (fpv *WatchOrganizationInvitationsResponse_FieldTerminalPathValue) SetTo(target **WatchOrganizationInvitationsResponse) {
	if *target == nil {
		*target = new(WatchOrganizationInvitationsResponse)
	}
	switch fpv.selector {
	case WatchOrganizationInvitationsResponse_FieldPathSelectorOrganizationInvitationChanges:
		(*target).OrganizationInvitationChanges = fpv.value.([]*organization_invitation.OrganizationInvitationChange)
	case WatchOrganizationInvitationsResponse_FieldPathSelectorIsCurrent:
		(*target).IsCurrent = fpv.value.(bool)
	case WatchOrganizationInvitationsResponse_FieldPathSelectorPageTokenChange:
		(*target).PageTokenChange = fpv.value.(*WatchOrganizationInvitationsResponse_PageTokenChange)
	case WatchOrganizationInvitationsResponse_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchOrganizationInvitationsResponse_FieldPathSelectorSnapshotSize:
		(*target).SnapshotSize = fpv.value.(int64)
	case WatchOrganizationInvitationsResponse_FieldPathSelectorIsSoftReset:
		(*target).IsSoftReset = fpv.value.(bool)
	case WatchOrganizationInvitationsResponse_FieldPathSelectorIsHardReset:
		(*target).IsHardReset = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOrganizationInvitationsResponse: %d", fpv.selector))
	}
}

func (fpv *WatchOrganizationInvitationsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchOrganizationInvitationsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchOrganizationInvitationsResponse_FieldTerminalPathValue' with the value under path in 'WatchOrganizationInvitationsResponse'.
func (fpv *WatchOrganizationInvitationsResponse_FieldTerminalPathValue) CompareWith(source *WatchOrganizationInvitationsResponse) (int, bool) {
	switch fpv.selector {
	case WatchOrganizationInvitationsResponse_FieldPathSelectorOrganizationInvitationChanges:
		return 0, false
	case WatchOrganizationInvitationsResponse_FieldPathSelectorIsCurrent:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsCurrent()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchOrganizationInvitationsResponse_FieldPathSelectorPageTokenChange:
		return 0, false
	case WatchOrganizationInvitationsResponse_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchOrganizationInvitationsResponse_FieldPathSelectorSnapshotSize:
		leftValue := fpv.value.(int64)
		rightValue := source.GetSnapshotSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchOrganizationInvitationsResponse_FieldPathSelectorIsSoftReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsSoftReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchOrganizationInvitationsResponse_FieldPathSelectorIsHardReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsHardReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOrganizationInvitationsResponse: %d", fpv.selector))
	}
}

func (fpv *WatchOrganizationInvitationsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchOrganizationInvitationsResponse))
}

type WatchOrganizationInvitationsResponse_FieldSubPathValue struct {
	WatchOrganizationInvitationsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ WatchOrganizationInvitationsResponse_FieldPathValue = (*WatchOrganizationInvitationsResponse_FieldSubPathValue)(nil)

func (fpvs *WatchOrganizationInvitationsResponse_FieldSubPathValue) AsPageTokenChangePathValue() (WatchOrganizationInvitationsResponsePageTokenChange_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(WatchOrganizationInvitationsResponsePageTokenChange_FieldPathValue)
	return res, ok
}

func (fpvs *WatchOrganizationInvitationsResponse_FieldSubPathValue) SetTo(target **WatchOrganizationInvitationsResponse) {
	if *target == nil {
		*target = new(WatchOrganizationInvitationsResponse)
	}
	switch fpvs.Selector() {
	case WatchOrganizationInvitationsResponse_FieldPathSelectorPageTokenChange:
		fpvs.subPathValue.(WatchOrganizationInvitationsResponsePageTokenChange_FieldPathValue).SetTo(&(*target).PageTokenChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOrganizationInvitationsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchOrganizationInvitationsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchOrganizationInvitationsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *WatchOrganizationInvitationsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *WatchOrganizationInvitationsResponse_FieldSubPathValue) CompareWith(source *WatchOrganizationInvitationsResponse) (int, bool) {
	switch fpvs.Selector() {
	case WatchOrganizationInvitationsResponse_FieldPathSelectorPageTokenChange:
		return fpvs.subPathValue.(WatchOrganizationInvitationsResponsePageTokenChange_FieldPathValue).CompareWith(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOrganizationInvitationsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchOrganizationInvitationsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*WatchOrganizationInvitationsResponse))
}

// WatchOrganizationInvitationsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchOrganizationInvitationsResponse according to their type
// Present only for array (repeated) types.
type WatchOrganizationInvitationsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchOrganizationInvitationsResponse_FieldPath
	ContainsValue(*WatchOrganizationInvitationsResponse) bool
}

// ParseWatchOrganizationInvitationsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchOrganizationInvitationsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchOrganizationInvitationsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchOrganizationInvitationsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchOrganizationInvitationsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchOrganizationInvitationsResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchOrganizationInvitationsResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchOrganizationInvitationsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchOrganizationInvitationsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchOrganizationInvitationsResponse_FieldTerminalPathArrayItemValue struct {
	WatchOrganizationInvitationsResponse_FieldTerminalPath
	value interface{}
}

var _ WatchOrganizationInvitationsResponse_FieldPathArrayItemValue = (*WatchOrganizationInvitationsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchOrganizationInvitationsResponse as interface{}
func (fpaiv *WatchOrganizationInvitationsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *WatchOrganizationInvitationsResponse_FieldTerminalPathArrayItemValue) AsOrganizationInvitationChangesItemValue() (*organization_invitation.OrganizationInvitationChange, bool) {
	res, ok := fpaiv.value.(*organization_invitation.OrganizationInvitationChange)
	return res, ok
}

func (fpaiv *WatchOrganizationInvitationsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchOrganizationInvitationsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchOrganizationInvitationsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchOrganizationInvitationsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchOrganizationInvitationsResponse'
func (fpaiv *WatchOrganizationInvitationsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchOrganizationInvitationsResponse) bool {
	slice := fpaiv.WatchOrganizationInvitationsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type WatchOrganizationInvitationsResponse_FieldSubPathArrayItemValue struct {
	WatchOrganizationInvitationsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *WatchOrganizationInvitationsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *WatchOrganizationInvitationsResponse_FieldSubPathArrayItemValue) AsPageTokenChangePathItemValue() (WatchOrganizationInvitationsResponsePageTokenChange_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(WatchOrganizationInvitationsResponsePageTokenChange_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchOrganizationInvitationsResponse'
func (fpaivs *WatchOrganizationInvitationsResponse_FieldSubPathArrayItemValue) ContainsValue(source *WatchOrganizationInvitationsResponse) bool {
	switch fpaivs.Selector() {
	case WatchOrganizationInvitationsResponse_FieldPathSelectorPageTokenChange:
		return fpaivs.subPathItemValue.(WatchOrganizationInvitationsResponsePageTokenChange_FieldPathArrayItemValue).ContainsValue(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOrganizationInvitationsResponse: %d", fpaivs.Selector()))
	}
}

// WatchOrganizationInvitationsResponse_FieldPathArrayOfValues allows storing slice of values for WatchOrganizationInvitationsResponse fields according to their type
type WatchOrganizationInvitationsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchOrganizationInvitationsResponse_FieldPath
}

func ParseWatchOrganizationInvitationsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchOrganizationInvitationsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchOrganizationInvitationsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchOrganizationInvitationsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchOrganizationInvitationsResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchOrganizationInvitationsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchOrganizationInvitationsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchOrganizationInvitationsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchOrganizationInvitationsResponse_FieldTerminalPathArrayOfValues struct {
	WatchOrganizationInvitationsResponse_FieldTerminalPath
	values interface{}
}

var _ WatchOrganizationInvitationsResponse_FieldPathArrayOfValues = (*WatchOrganizationInvitationsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchOrganizationInvitationsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchOrganizationInvitationsResponse_FieldPathSelectorOrganizationInvitationChanges:
		for _, v := range fpaov.values.([][]*organization_invitation.OrganizationInvitationChange) {
			values = append(values, v)
		}
	case WatchOrganizationInvitationsResponse_FieldPathSelectorIsCurrent:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchOrganizationInvitationsResponse_FieldPathSelectorPageTokenChange:
		for _, v := range fpaov.values.([]*WatchOrganizationInvitationsResponse_PageTokenChange) {
			values = append(values, v)
		}
	case WatchOrganizationInvitationsResponse_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchOrganizationInvitationsResponse_FieldPathSelectorSnapshotSize:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	case WatchOrganizationInvitationsResponse_FieldPathSelectorIsSoftReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchOrganizationInvitationsResponse_FieldPathSelectorIsHardReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchOrganizationInvitationsResponse_FieldTerminalPathArrayOfValues) AsOrganizationInvitationChangesArrayOfValues() ([][]*organization_invitation.OrganizationInvitationChange, bool) {
	res, ok := fpaov.values.([][]*organization_invitation.OrganizationInvitationChange)
	return res, ok
}
func (fpaov *WatchOrganizationInvitationsResponse_FieldTerminalPathArrayOfValues) AsIsCurrentArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchOrganizationInvitationsResponse_FieldTerminalPathArrayOfValues) AsPageTokenChangeArrayOfValues() ([]*WatchOrganizationInvitationsResponse_PageTokenChange, bool) {
	res, ok := fpaov.values.([]*WatchOrganizationInvitationsResponse_PageTokenChange)
	return res, ok
}
func (fpaov *WatchOrganizationInvitationsResponse_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchOrganizationInvitationsResponse_FieldTerminalPathArrayOfValues) AsSnapshotSizeArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}
func (fpaov *WatchOrganizationInvitationsResponse_FieldTerminalPathArrayOfValues) AsIsSoftResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchOrganizationInvitationsResponse_FieldTerminalPathArrayOfValues) AsIsHardResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

type WatchOrganizationInvitationsResponse_FieldSubPathArrayOfValues struct {
	WatchOrganizationInvitationsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ WatchOrganizationInvitationsResponse_FieldPathArrayOfValues = (*WatchOrganizationInvitationsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *WatchOrganizationInvitationsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *WatchOrganizationInvitationsResponse_FieldSubPathArrayOfValues) AsPageTokenChangePathArrayOfValues() (WatchOrganizationInvitationsResponsePageTokenChange_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(WatchOrganizationInvitationsResponsePageTokenChange_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchOrganizationInvitationsResponsePageTokenChange_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchOrganizationInvitationsResponsePageTokenChange_FieldPathSelector
	Get(source *WatchOrganizationInvitationsResponse_PageTokenChange) []interface{}
	GetSingle(source *WatchOrganizationInvitationsResponse_PageTokenChange) (interface{}, bool)
	ClearValue(item *WatchOrganizationInvitationsResponse_PageTokenChange)

	// Those methods build corresponding WatchOrganizationInvitationsResponsePageTokenChange_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchOrganizationInvitationsResponsePageTokenChange_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchOrganizationInvitationsResponsePageTokenChange_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchOrganizationInvitationsResponsePageTokenChange_FieldPathArrayItemValue
}

type WatchOrganizationInvitationsResponsePageTokenChange_FieldPathSelector int32

const (
	WatchOrganizationInvitationsResponsePageTokenChange_FieldPathSelectorPrevPageToken WatchOrganizationInvitationsResponsePageTokenChange_FieldPathSelector = 0
	WatchOrganizationInvitationsResponsePageTokenChange_FieldPathSelectorNextPageToken WatchOrganizationInvitationsResponsePageTokenChange_FieldPathSelector = 1
)

func (s WatchOrganizationInvitationsResponsePageTokenChange_FieldPathSelector) String() string {
	switch s {
	case WatchOrganizationInvitationsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case WatchOrganizationInvitationsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOrganizationInvitationsResponse_PageTokenChange: %d", s))
	}
}

func BuildWatchOrganizationInvitationsResponsePageTokenChange_FieldPath(fp gotenobject.RawFieldPath) (WatchOrganizationInvitationsResponsePageTokenChange_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchOrganizationInvitationsResponse_PageTokenChange")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &WatchOrganizationInvitationsResponsePageTokenChange_FieldTerminalPath{selector: WatchOrganizationInvitationsResponsePageTokenChange_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &WatchOrganizationInvitationsResponsePageTokenChange_FieldTerminalPath{selector: WatchOrganizationInvitationsResponsePageTokenChange_FieldPathSelectorNextPageToken}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchOrganizationInvitationsResponse_PageTokenChange", fp)
}

func ParseWatchOrganizationInvitationsResponsePageTokenChange_FieldPath(rawField string) (WatchOrganizationInvitationsResponsePageTokenChange_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchOrganizationInvitationsResponsePageTokenChange_FieldPath(fp)
}

func MustParseWatchOrganizationInvitationsResponsePageTokenChange_FieldPath(rawField string) WatchOrganizationInvitationsResponsePageTokenChange_FieldPath {
	fp, err := ParseWatchOrganizationInvitationsResponsePageTokenChange_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchOrganizationInvitationsResponsePageTokenChange_FieldTerminalPath struct {
	selector WatchOrganizationInvitationsResponsePageTokenChange_FieldPathSelector
}

var _ WatchOrganizationInvitationsResponsePageTokenChange_FieldPath = (*WatchOrganizationInvitationsResponsePageTokenChange_FieldTerminalPath)(nil)

func (fp *WatchOrganizationInvitationsResponsePageTokenChange_FieldTerminalPath) Selector() WatchOrganizationInvitationsResponsePageTokenChange_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchOrganizationInvitationsResponsePageTokenChange_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchOrganizationInvitationsResponsePageTokenChange_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchOrganizationInvitationsResponse_PageTokenChange
func (fp *WatchOrganizationInvitationsResponsePageTokenChange_FieldTerminalPath) Get(source *WatchOrganizationInvitationsResponse_PageTokenChange) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchOrganizationInvitationsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case WatchOrganizationInvitationsResponsePageTokenChange_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchOrganizationInvitationsResponse_PageTokenChange: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchOrganizationInvitationsResponsePageTokenChange_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchOrganizationInvitationsResponse_PageTokenChange))
}

// GetSingle returns value pointed by specific field of from source WatchOrganizationInvitationsResponse_PageTokenChange
func (fp *WatchOrganizationInvitationsResponsePageTokenChange_FieldTerminalPath) GetSingle(source *WatchOrganizationInvitationsResponse_PageTokenChange) (interface{}, bool) {
	switch fp.selector {
	case WatchOrganizationInvitationsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case WatchOrganizationInvitationsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOrganizationInvitationsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchOrganizationInvitationsResponsePageTokenChange_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchOrganizationInvitationsResponse_PageTokenChange))
}

// GetDefault returns a default value of the field type
func (fp *WatchOrganizationInvitationsResponsePageTokenChange_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchOrganizationInvitationsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return (*organization_invitation.PagerCursor)(nil)
	case WatchOrganizationInvitationsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return (*organization_invitation.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOrganizationInvitationsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchOrganizationInvitationsResponsePageTokenChange_FieldTerminalPath) ClearValue(item *WatchOrganizationInvitationsResponse_PageTokenChange) {
	if item != nil {
		switch fp.selector {
		case WatchOrganizationInvitationsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case WatchOrganizationInvitationsResponsePageTokenChange_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchOrganizationInvitationsResponse_PageTokenChange: %d", fp.selector))
		}
	}
}

func (fp *WatchOrganizationInvitationsResponsePageTokenChange_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchOrganizationInvitationsResponse_PageTokenChange))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchOrganizationInvitationsResponsePageTokenChange_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchOrganizationInvitationsResponsePageTokenChange_FieldPathSelectorPrevPageToken ||
		fp.selector == WatchOrganizationInvitationsResponsePageTokenChange_FieldPathSelectorNextPageToken
}

func (fp *WatchOrganizationInvitationsResponsePageTokenChange_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchOrganizationInvitationsResponsePageTokenChange_FieldTerminalPath) WithIValue(value interface{}) WatchOrganizationInvitationsResponsePageTokenChange_FieldPathValue {
	switch fp.selector {
	case WatchOrganizationInvitationsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchOrganizationInvitationsResponsePageTokenChange_FieldTerminalPathValue{WatchOrganizationInvitationsResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*organization_invitation.PagerCursor)}
	case WatchOrganizationInvitationsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchOrganizationInvitationsResponsePageTokenChange_FieldTerminalPathValue{WatchOrganizationInvitationsResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*organization_invitation.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOrganizationInvitationsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchOrganizationInvitationsResponsePageTokenChange_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchOrganizationInvitationsResponsePageTokenChange_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchOrganizationInvitationsResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov := &WatchOrganizationInvitationsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchOrganizationInvitationsResponsePageTokenChange_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchOrganizationInvitationsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchOrganizationInvitationsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchOrganizationInvitationsResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*organization_invitation.PagerCursor)}
	case WatchOrganizationInvitationsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchOrganizationInvitationsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchOrganizationInvitationsResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*organization_invitation.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOrganizationInvitationsResponse_PageTokenChange: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchOrganizationInvitationsResponsePageTokenChange_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchOrganizationInvitationsResponsePageTokenChange_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchOrganizationInvitationsResponsePageTokenChange_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOrganizationInvitationsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchOrganizationInvitationsResponsePageTokenChange_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchOrganizationInvitationsResponsePageTokenChange_FieldPathValue allows storing values for PageTokenChange fields according to their type
type WatchOrganizationInvitationsResponsePageTokenChange_FieldPathValue interface {
	WatchOrganizationInvitationsResponsePageTokenChange_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchOrganizationInvitationsResponse_PageTokenChange)
	CompareWith(*WatchOrganizationInvitationsResponse_PageTokenChange) (cmp int, comparable bool)
}

func ParseWatchOrganizationInvitationsResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) (WatchOrganizationInvitationsResponsePageTokenChange_FieldPathValue, error) {
	fp, err := ParseWatchOrganizationInvitationsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchOrganizationInvitationsResponsePageTokenChange_FieldPathValue), nil
}

func MustParseWatchOrganizationInvitationsResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) WatchOrganizationInvitationsResponsePageTokenChange_FieldPathValue {
	fpv, err := ParseWatchOrganizationInvitationsResponsePageTokenChange_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchOrganizationInvitationsResponsePageTokenChange_FieldTerminalPathValue struct {
	WatchOrganizationInvitationsResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchOrganizationInvitationsResponsePageTokenChange_FieldPathValue = (*WatchOrganizationInvitationsResponsePageTokenChange_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'PageTokenChange' as interface{}
func (fpv *WatchOrganizationInvitationsResponsePageTokenChange_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchOrganizationInvitationsResponsePageTokenChange_FieldTerminalPathValue) AsPrevPageTokenValue() (*organization_invitation.PagerCursor, bool) {
	res, ok := fpv.value.(*organization_invitation.PagerCursor)
	return res, ok
}
func (fpv *WatchOrganizationInvitationsResponsePageTokenChange_FieldTerminalPathValue) AsNextPageTokenValue() (*organization_invitation.PagerCursor, bool) {
	res, ok := fpv.value.(*organization_invitation.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object PageTokenChange
func (fpv *WatchOrganizationInvitationsResponsePageTokenChange_FieldTerminalPathValue) SetTo(target **WatchOrganizationInvitationsResponse_PageTokenChange) {
	if *target == nil {
		*target = new(WatchOrganizationInvitationsResponse_PageTokenChange)
	}
	switch fpv.selector {
	case WatchOrganizationInvitationsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*organization_invitation.PagerCursor)
	case WatchOrganizationInvitationsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*organization_invitation.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOrganizationInvitationsResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchOrganizationInvitationsResponsePageTokenChange_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchOrganizationInvitationsResponse_PageTokenChange)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchOrganizationInvitationsResponsePageTokenChange_FieldTerminalPathValue' with the value under path in 'WatchOrganizationInvitationsResponse_PageTokenChange'.
func (fpv *WatchOrganizationInvitationsResponsePageTokenChange_FieldTerminalPathValue) CompareWith(source *WatchOrganizationInvitationsResponse_PageTokenChange) (int, bool) {
	switch fpv.selector {
	case WatchOrganizationInvitationsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return 0, false
	case WatchOrganizationInvitationsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOrganizationInvitationsResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchOrganizationInvitationsResponsePageTokenChange_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchOrganizationInvitationsResponse_PageTokenChange))
}

// WatchOrganizationInvitationsResponsePageTokenChange_FieldPathArrayItemValue allows storing single item in Path-specific values for PageTokenChange according to their type
// Present only for array (repeated) types.
type WatchOrganizationInvitationsResponsePageTokenChange_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchOrganizationInvitationsResponsePageTokenChange_FieldPath
	ContainsValue(*WatchOrganizationInvitationsResponse_PageTokenChange) bool
}

// ParseWatchOrganizationInvitationsResponsePageTokenChange_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchOrganizationInvitationsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) (WatchOrganizationInvitationsResponsePageTokenChange_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchOrganizationInvitationsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchOrganizationInvitationsResponsePageTokenChange_FieldPathArrayItemValue), nil
}

func MustParseWatchOrganizationInvitationsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) WatchOrganizationInvitationsResponsePageTokenChange_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchOrganizationInvitationsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchOrganizationInvitationsResponsePageTokenChange_FieldTerminalPathArrayItemValue struct {
	WatchOrganizationInvitationsResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchOrganizationInvitationsResponsePageTokenChange_FieldPathArrayItemValue = (*WatchOrganizationInvitationsResponsePageTokenChange_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchOrganizationInvitationsResponse_PageTokenChange as interface{}
func (fpaiv *WatchOrganizationInvitationsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchOrganizationInvitationsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingle(source *WatchOrganizationInvitationsResponse_PageTokenChange) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchOrganizationInvitationsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchOrganizationInvitationsResponse_PageTokenChange))
}

// Contains returns a boolean indicating if value that is being held is present in given 'PageTokenChange'
func (fpaiv *WatchOrganizationInvitationsResponsePageTokenChange_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchOrganizationInvitationsResponse_PageTokenChange) bool {
	slice := fpaiv.WatchOrganizationInvitationsResponsePageTokenChange_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchOrganizationInvitationsResponsePageTokenChange_FieldPathArrayOfValues allows storing slice of values for PageTokenChange fields according to their type
type WatchOrganizationInvitationsResponsePageTokenChange_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchOrganizationInvitationsResponsePageTokenChange_FieldPath
}

func ParseWatchOrganizationInvitationsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchOrganizationInvitationsResponsePageTokenChange_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchOrganizationInvitationsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchOrganizationInvitationsResponsePageTokenChange_FieldPathArrayOfValues), nil
}

func MustParseWatchOrganizationInvitationsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) WatchOrganizationInvitationsResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov, err := ParseWatchOrganizationInvitationsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchOrganizationInvitationsResponsePageTokenChange_FieldTerminalPathArrayOfValues struct {
	WatchOrganizationInvitationsResponsePageTokenChange_FieldTerminalPath
	values interface{}
}

var _ WatchOrganizationInvitationsResponsePageTokenChange_FieldPathArrayOfValues = (*WatchOrganizationInvitationsResponsePageTokenChange_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchOrganizationInvitationsResponsePageTokenChange_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchOrganizationInvitationsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*organization_invitation.PagerCursor) {
			values = append(values, v)
		}
	case WatchOrganizationInvitationsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*organization_invitation.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchOrganizationInvitationsResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*organization_invitation.PagerCursor, bool) {
	res, ok := fpaov.values.([]*organization_invitation.PagerCursor)
	return res, ok
}
func (fpaov *WatchOrganizationInvitationsResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*organization_invitation.PagerCursor, bool) {
	res, ok := fpaov.values.([]*organization_invitation.PagerCursor)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type CreateOrganizationInvitationRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() CreateOrganizationInvitationRequest_FieldPathSelector
	Get(source *CreateOrganizationInvitationRequest) []interface{}
	GetSingle(source *CreateOrganizationInvitationRequest) (interface{}, bool)
	ClearValue(item *CreateOrganizationInvitationRequest)

	// Those methods build corresponding CreateOrganizationInvitationRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) CreateOrganizationInvitationRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) CreateOrganizationInvitationRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) CreateOrganizationInvitationRequest_FieldPathArrayItemValue
}

type CreateOrganizationInvitationRequest_FieldPathSelector int32

const (
	CreateOrganizationInvitationRequest_FieldPathSelectorParent                 CreateOrganizationInvitationRequest_FieldPathSelector = 0
	CreateOrganizationInvitationRequest_FieldPathSelectorOrganizationInvitation CreateOrganizationInvitationRequest_FieldPathSelector = 1
)

func (s CreateOrganizationInvitationRequest_FieldPathSelector) String() string {
	switch s {
	case CreateOrganizationInvitationRequest_FieldPathSelectorParent:
		return "parent"
	case CreateOrganizationInvitationRequest_FieldPathSelectorOrganizationInvitation:
		return "organization_invitation"
	default:
		panic(fmt.Sprintf("Invalid selector for CreateOrganizationInvitationRequest: %d", s))
	}
}

func BuildCreateOrganizationInvitationRequest_FieldPath(fp gotenobject.RawFieldPath) (CreateOrganizationInvitationRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object CreateOrganizationInvitationRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &CreateOrganizationInvitationRequest_FieldTerminalPath{selector: CreateOrganizationInvitationRequest_FieldPathSelectorParent}, nil
		case "organization_invitation", "organizationInvitation", "organization-invitation":
			return &CreateOrganizationInvitationRequest_FieldTerminalPath{selector: CreateOrganizationInvitationRequest_FieldPathSelectorOrganizationInvitation}, nil
		}
	} else {
		switch fp[0] {
		case "organization_invitation", "organizationInvitation", "organization-invitation":
			if subpath, err := organization_invitation.BuildOrganizationInvitation_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &CreateOrganizationInvitationRequest_FieldSubPath{selector: CreateOrganizationInvitationRequest_FieldPathSelectorOrganizationInvitation, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object CreateOrganizationInvitationRequest", fp)
}

func ParseCreateOrganizationInvitationRequest_FieldPath(rawField string) (CreateOrganizationInvitationRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildCreateOrganizationInvitationRequest_FieldPath(fp)
}

func MustParseCreateOrganizationInvitationRequest_FieldPath(rawField string) CreateOrganizationInvitationRequest_FieldPath {
	fp, err := ParseCreateOrganizationInvitationRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type CreateOrganizationInvitationRequest_FieldTerminalPath struct {
	selector CreateOrganizationInvitationRequest_FieldPathSelector
}

var _ CreateOrganizationInvitationRequest_FieldPath = (*CreateOrganizationInvitationRequest_FieldTerminalPath)(nil)

func (fp *CreateOrganizationInvitationRequest_FieldTerminalPath) Selector() CreateOrganizationInvitationRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *CreateOrganizationInvitationRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *CreateOrganizationInvitationRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source CreateOrganizationInvitationRequest
func (fp *CreateOrganizationInvitationRequest_FieldTerminalPath) Get(source *CreateOrganizationInvitationRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case CreateOrganizationInvitationRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case CreateOrganizationInvitationRequest_FieldPathSelectorOrganizationInvitation:
			if source.OrganizationInvitation != nil {
				values = append(values, source.OrganizationInvitation)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for CreateOrganizationInvitationRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *CreateOrganizationInvitationRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*CreateOrganizationInvitationRequest))
}

// GetSingle returns value pointed by specific field of from source CreateOrganizationInvitationRequest
func (fp *CreateOrganizationInvitationRequest_FieldTerminalPath) GetSingle(source *CreateOrganizationInvitationRequest) (interface{}, bool) {
	switch fp.selector {
	case CreateOrganizationInvitationRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case CreateOrganizationInvitationRequest_FieldPathSelectorOrganizationInvitation:
		res := source.GetOrganizationInvitation()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for CreateOrganizationInvitationRequest: %d", fp.selector))
	}
}

func (fp *CreateOrganizationInvitationRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*CreateOrganizationInvitationRequest))
}

// GetDefault returns a default value of the field type
func (fp *CreateOrganizationInvitationRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case CreateOrganizationInvitationRequest_FieldPathSelectorParent:
		return (*organization_invitation.ParentReference)(nil)
	case CreateOrganizationInvitationRequest_FieldPathSelectorOrganizationInvitation:
		return (*organization_invitation.OrganizationInvitation)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateOrganizationInvitationRequest: %d", fp.selector))
	}
}

func (fp *CreateOrganizationInvitationRequest_FieldTerminalPath) ClearValue(item *CreateOrganizationInvitationRequest) {
	if item != nil {
		switch fp.selector {
		case CreateOrganizationInvitationRequest_FieldPathSelectorParent:
			item.Parent = nil
		case CreateOrganizationInvitationRequest_FieldPathSelectorOrganizationInvitation:
			item.OrganizationInvitation = nil
		default:
			panic(fmt.Sprintf("Invalid selector for CreateOrganizationInvitationRequest: %d", fp.selector))
		}
	}
}

func (fp *CreateOrganizationInvitationRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*CreateOrganizationInvitationRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *CreateOrganizationInvitationRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == CreateOrganizationInvitationRequest_FieldPathSelectorParent
}

func (fp *CreateOrganizationInvitationRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *CreateOrganizationInvitationRequest_FieldTerminalPath) WithIValue(value interface{}) CreateOrganizationInvitationRequest_FieldPathValue {
	switch fp.selector {
	case CreateOrganizationInvitationRequest_FieldPathSelectorParent:
		return &CreateOrganizationInvitationRequest_FieldTerminalPathValue{CreateOrganizationInvitationRequest_FieldTerminalPath: *fp, value: value.(*organization_invitation.ParentReference)}
	case CreateOrganizationInvitationRequest_FieldPathSelectorOrganizationInvitation:
		return &CreateOrganizationInvitationRequest_FieldTerminalPathValue{CreateOrganizationInvitationRequest_FieldTerminalPath: *fp, value: value.(*organization_invitation.OrganizationInvitation)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateOrganizationInvitationRequest: %d", fp.selector))
	}
}

func (fp *CreateOrganizationInvitationRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *CreateOrganizationInvitationRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) CreateOrganizationInvitationRequest_FieldPathArrayOfValues {
	fpaov := &CreateOrganizationInvitationRequest_FieldTerminalPathArrayOfValues{CreateOrganizationInvitationRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case CreateOrganizationInvitationRequest_FieldPathSelectorParent:
		return &CreateOrganizationInvitationRequest_FieldTerminalPathArrayOfValues{CreateOrganizationInvitationRequest_FieldTerminalPath: *fp, values: values.([]*organization_invitation.ParentReference)}
	case CreateOrganizationInvitationRequest_FieldPathSelectorOrganizationInvitation:
		return &CreateOrganizationInvitationRequest_FieldTerminalPathArrayOfValues{CreateOrganizationInvitationRequest_FieldTerminalPath: *fp, values: values.([]*organization_invitation.OrganizationInvitation)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateOrganizationInvitationRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *CreateOrganizationInvitationRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *CreateOrganizationInvitationRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) CreateOrganizationInvitationRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for CreateOrganizationInvitationRequest: %d", fp.selector))
	}
}

func (fp *CreateOrganizationInvitationRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type CreateOrganizationInvitationRequest_FieldSubPath struct {
	selector CreateOrganizationInvitationRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ CreateOrganizationInvitationRequest_FieldPath = (*CreateOrganizationInvitationRequest_FieldSubPath)(nil)

func (fps *CreateOrganizationInvitationRequest_FieldSubPath) Selector() CreateOrganizationInvitationRequest_FieldPathSelector {
	return fps.selector
}
func (fps *CreateOrganizationInvitationRequest_FieldSubPath) AsOrganizationInvitationSubPath() (organization_invitation.OrganizationInvitation_FieldPath, bool) {
	res, ok := fps.subPath.(organization_invitation.OrganizationInvitation_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *CreateOrganizationInvitationRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *CreateOrganizationInvitationRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source CreateOrganizationInvitationRequest
func (fps *CreateOrganizationInvitationRequest_FieldSubPath) Get(source *CreateOrganizationInvitationRequest) (values []interface{}) {
	switch fps.selector {
	case CreateOrganizationInvitationRequest_FieldPathSelectorOrganizationInvitation:
		values = append(values, fps.subPath.GetRaw(source.GetOrganizationInvitation())...)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateOrganizationInvitationRequest: %d", fps.selector))
	}
	return
}

func (fps *CreateOrganizationInvitationRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*CreateOrganizationInvitationRequest))
}

// GetSingle returns value of selected field from source CreateOrganizationInvitationRequest
func (fps *CreateOrganizationInvitationRequest_FieldSubPath) GetSingle(source *CreateOrganizationInvitationRequest) (interface{}, bool) {
	switch fps.selector {
	case CreateOrganizationInvitationRequest_FieldPathSelectorOrganizationInvitation:
		if source.GetOrganizationInvitation() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetOrganizationInvitation())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateOrganizationInvitationRequest: %d", fps.selector))
	}
}

func (fps *CreateOrganizationInvitationRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*CreateOrganizationInvitationRequest))
}

// GetDefault returns a default value of the field type
func (fps *CreateOrganizationInvitationRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *CreateOrganizationInvitationRequest_FieldSubPath) ClearValue(item *CreateOrganizationInvitationRequest) {
	if item != nil {
		switch fps.selector {
		case CreateOrganizationInvitationRequest_FieldPathSelectorOrganizationInvitation:
			fps.subPath.ClearValueRaw(item.OrganizationInvitation)
		default:
			panic(fmt.Sprintf("Invalid selector for CreateOrganizationInvitationRequest: %d", fps.selector))
		}
	}
}

func (fps *CreateOrganizationInvitationRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*CreateOrganizationInvitationRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *CreateOrganizationInvitationRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *CreateOrganizationInvitationRequest_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&CreateOrganizationInvitationRequest_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *CreateOrganizationInvitationRequest_FieldSubPath) WithIValue(value interface{}) CreateOrganizationInvitationRequest_FieldPathValue {
	return &CreateOrganizationInvitationRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *CreateOrganizationInvitationRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *CreateOrganizationInvitationRequest_FieldSubPath) WithIArrayOfValues(values interface{}) CreateOrganizationInvitationRequest_FieldPathArrayOfValues {
	return &CreateOrganizationInvitationRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *CreateOrganizationInvitationRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *CreateOrganizationInvitationRequest_FieldSubPath) WithIArrayItemValue(value interface{}) CreateOrganizationInvitationRequest_FieldPathArrayItemValue {
	return &CreateOrganizationInvitationRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *CreateOrganizationInvitationRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// CreateOrganizationInvitationRequest_FieldPathValue allows storing values for CreateOrganizationInvitationRequest fields according to their type
type CreateOrganizationInvitationRequest_FieldPathValue interface {
	CreateOrganizationInvitationRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **CreateOrganizationInvitationRequest)
	CompareWith(*CreateOrganizationInvitationRequest) (cmp int, comparable bool)
}

func ParseCreateOrganizationInvitationRequest_FieldPathValue(pathStr, valueStr string) (CreateOrganizationInvitationRequest_FieldPathValue, error) {
	fp, err := ParseCreateOrganizationInvitationRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateOrganizationInvitationRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(CreateOrganizationInvitationRequest_FieldPathValue), nil
}

func MustParseCreateOrganizationInvitationRequest_FieldPathValue(pathStr, valueStr string) CreateOrganizationInvitationRequest_FieldPathValue {
	fpv, err := ParseCreateOrganizationInvitationRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type CreateOrganizationInvitationRequest_FieldTerminalPathValue struct {
	CreateOrganizationInvitationRequest_FieldTerminalPath
	value interface{}
}

var _ CreateOrganizationInvitationRequest_FieldPathValue = (*CreateOrganizationInvitationRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CreateOrganizationInvitationRequest' as interface{}
func (fpv *CreateOrganizationInvitationRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *CreateOrganizationInvitationRequest_FieldTerminalPathValue) AsParentValue() (*organization_invitation.ParentReference, bool) {
	res, ok := fpv.value.(*organization_invitation.ParentReference)
	return res, ok
}
func (fpv *CreateOrganizationInvitationRequest_FieldTerminalPathValue) AsOrganizationInvitationValue() (*organization_invitation.OrganizationInvitation, bool) {
	res, ok := fpv.value.(*organization_invitation.OrganizationInvitation)
	return res, ok
}

// SetTo stores value for selected field for object CreateOrganizationInvitationRequest
func (fpv *CreateOrganizationInvitationRequest_FieldTerminalPathValue) SetTo(target **CreateOrganizationInvitationRequest) {
	if *target == nil {
		*target = new(CreateOrganizationInvitationRequest)
	}
	switch fpv.selector {
	case CreateOrganizationInvitationRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*organization_invitation.ParentReference)
	case CreateOrganizationInvitationRequest_FieldPathSelectorOrganizationInvitation:
		(*target).OrganizationInvitation = fpv.value.(*organization_invitation.OrganizationInvitation)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateOrganizationInvitationRequest: %d", fpv.selector))
	}
}

func (fpv *CreateOrganizationInvitationRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateOrganizationInvitationRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'CreateOrganizationInvitationRequest_FieldTerminalPathValue' with the value under path in 'CreateOrganizationInvitationRequest'.
func (fpv *CreateOrganizationInvitationRequest_FieldTerminalPathValue) CompareWith(source *CreateOrganizationInvitationRequest) (int, bool) {
	switch fpv.selector {
	case CreateOrganizationInvitationRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*organization_invitation.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case CreateOrganizationInvitationRequest_FieldPathSelectorOrganizationInvitation:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for CreateOrganizationInvitationRequest: %d", fpv.selector))
	}
}

func (fpv *CreateOrganizationInvitationRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*CreateOrganizationInvitationRequest))
}

type CreateOrganizationInvitationRequest_FieldSubPathValue struct {
	CreateOrganizationInvitationRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ CreateOrganizationInvitationRequest_FieldPathValue = (*CreateOrganizationInvitationRequest_FieldSubPathValue)(nil)

func (fpvs *CreateOrganizationInvitationRequest_FieldSubPathValue) AsOrganizationInvitationPathValue() (organization_invitation.OrganizationInvitation_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(organization_invitation.OrganizationInvitation_FieldPathValue)
	return res, ok
}

func (fpvs *CreateOrganizationInvitationRequest_FieldSubPathValue) SetTo(target **CreateOrganizationInvitationRequest) {
	if *target == nil {
		*target = new(CreateOrganizationInvitationRequest)
	}
	switch fpvs.Selector() {
	case CreateOrganizationInvitationRequest_FieldPathSelectorOrganizationInvitation:
		fpvs.subPathValue.(organization_invitation.OrganizationInvitation_FieldPathValue).SetTo(&(*target).OrganizationInvitation)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateOrganizationInvitationRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateOrganizationInvitationRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateOrganizationInvitationRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *CreateOrganizationInvitationRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *CreateOrganizationInvitationRequest_FieldSubPathValue) CompareWith(source *CreateOrganizationInvitationRequest) (int, bool) {
	switch fpvs.Selector() {
	case CreateOrganizationInvitationRequest_FieldPathSelectorOrganizationInvitation:
		return fpvs.subPathValue.(organization_invitation.OrganizationInvitation_FieldPathValue).CompareWith(source.GetOrganizationInvitation())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateOrganizationInvitationRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateOrganizationInvitationRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*CreateOrganizationInvitationRequest))
}

// CreateOrganizationInvitationRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for CreateOrganizationInvitationRequest according to their type
// Present only for array (repeated) types.
type CreateOrganizationInvitationRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	CreateOrganizationInvitationRequest_FieldPath
	ContainsValue(*CreateOrganizationInvitationRequest) bool
}

// ParseCreateOrganizationInvitationRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseCreateOrganizationInvitationRequest_FieldPathArrayItemValue(pathStr, valueStr string) (CreateOrganizationInvitationRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseCreateOrganizationInvitationRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateOrganizationInvitationRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(CreateOrganizationInvitationRequest_FieldPathArrayItemValue), nil
}

func MustParseCreateOrganizationInvitationRequest_FieldPathArrayItemValue(pathStr, valueStr string) CreateOrganizationInvitationRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseCreateOrganizationInvitationRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type CreateOrganizationInvitationRequest_FieldTerminalPathArrayItemValue struct {
	CreateOrganizationInvitationRequest_FieldTerminalPath
	value interface{}
}

var _ CreateOrganizationInvitationRequest_FieldPathArrayItemValue = (*CreateOrganizationInvitationRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object CreateOrganizationInvitationRequest as interface{}
func (fpaiv *CreateOrganizationInvitationRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *CreateOrganizationInvitationRequest_FieldTerminalPathArrayItemValue) GetSingle(source *CreateOrganizationInvitationRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *CreateOrganizationInvitationRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*CreateOrganizationInvitationRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateOrganizationInvitationRequest'
func (fpaiv *CreateOrganizationInvitationRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *CreateOrganizationInvitationRequest) bool {
	slice := fpaiv.CreateOrganizationInvitationRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type CreateOrganizationInvitationRequest_FieldSubPathArrayItemValue struct {
	CreateOrganizationInvitationRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *CreateOrganizationInvitationRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *CreateOrganizationInvitationRequest_FieldSubPathArrayItemValue) AsOrganizationInvitationPathItemValue() (organization_invitation.OrganizationInvitation_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(organization_invitation.OrganizationInvitation_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateOrganizationInvitationRequest'
func (fpaivs *CreateOrganizationInvitationRequest_FieldSubPathArrayItemValue) ContainsValue(source *CreateOrganizationInvitationRequest) bool {
	switch fpaivs.Selector() {
	case CreateOrganizationInvitationRequest_FieldPathSelectorOrganizationInvitation:
		return fpaivs.subPathItemValue.(organization_invitation.OrganizationInvitation_FieldPathArrayItemValue).ContainsValue(source.GetOrganizationInvitation())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateOrganizationInvitationRequest: %d", fpaivs.Selector()))
	}
}

// CreateOrganizationInvitationRequest_FieldPathArrayOfValues allows storing slice of values for CreateOrganizationInvitationRequest fields according to their type
type CreateOrganizationInvitationRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	CreateOrganizationInvitationRequest_FieldPath
}

func ParseCreateOrganizationInvitationRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (CreateOrganizationInvitationRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseCreateOrganizationInvitationRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateOrganizationInvitationRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(CreateOrganizationInvitationRequest_FieldPathArrayOfValues), nil
}

func MustParseCreateOrganizationInvitationRequest_FieldPathArrayOfValues(pathStr, valuesStr string) CreateOrganizationInvitationRequest_FieldPathArrayOfValues {
	fpaov, err := ParseCreateOrganizationInvitationRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type CreateOrganizationInvitationRequest_FieldTerminalPathArrayOfValues struct {
	CreateOrganizationInvitationRequest_FieldTerminalPath
	values interface{}
}

var _ CreateOrganizationInvitationRequest_FieldPathArrayOfValues = (*CreateOrganizationInvitationRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *CreateOrganizationInvitationRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case CreateOrganizationInvitationRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*organization_invitation.ParentReference) {
			values = append(values, v)
		}
	case CreateOrganizationInvitationRequest_FieldPathSelectorOrganizationInvitation:
		for _, v := range fpaov.values.([]*organization_invitation.OrganizationInvitation) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *CreateOrganizationInvitationRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*organization_invitation.ParentReference, bool) {
	res, ok := fpaov.values.([]*organization_invitation.ParentReference)
	return res, ok
}
func (fpaov *CreateOrganizationInvitationRequest_FieldTerminalPathArrayOfValues) AsOrganizationInvitationArrayOfValues() ([]*organization_invitation.OrganizationInvitation, bool) {
	res, ok := fpaov.values.([]*organization_invitation.OrganizationInvitation)
	return res, ok
}

type CreateOrganizationInvitationRequest_FieldSubPathArrayOfValues struct {
	CreateOrganizationInvitationRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ CreateOrganizationInvitationRequest_FieldPathArrayOfValues = (*CreateOrganizationInvitationRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *CreateOrganizationInvitationRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *CreateOrganizationInvitationRequest_FieldSubPathArrayOfValues) AsOrganizationInvitationPathArrayOfValues() (organization_invitation.OrganizationInvitation_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(organization_invitation.OrganizationInvitation_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateOrganizationInvitationRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateOrganizationInvitationRequest_FieldPathSelector
	Get(source *UpdateOrganizationInvitationRequest) []interface{}
	GetSingle(source *UpdateOrganizationInvitationRequest) (interface{}, bool)
	ClearValue(item *UpdateOrganizationInvitationRequest)

	// Those methods build corresponding UpdateOrganizationInvitationRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateOrganizationInvitationRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateOrganizationInvitationRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateOrganizationInvitationRequest_FieldPathArrayItemValue
}

type UpdateOrganizationInvitationRequest_FieldPathSelector int32

const (
	UpdateOrganizationInvitationRequest_FieldPathSelectorOrganizationInvitation UpdateOrganizationInvitationRequest_FieldPathSelector = 0
	UpdateOrganizationInvitationRequest_FieldPathSelectorUpdateMask             UpdateOrganizationInvitationRequest_FieldPathSelector = 1
	UpdateOrganizationInvitationRequest_FieldPathSelectorCas                    UpdateOrganizationInvitationRequest_FieldPathSelector = 2
	UpdateOrganizationInvitationRequest_FieldPathSelectorAllowMissing           UpdateOrganizationInvitationRequest_FieldPathSelector = 3
)

func (s UpdateOrganizationInvitationRequest_FieldPathSelector) String() string {
	switch s {
	case UpdateOrganizationInvitationRequest_FieldPathSelectorOrganizationInvitation:
		return "organization_invitation"
	case UpdateOrganizationInvitationRequest_FieldPathSelectorUpdateMask:
		return "update_mask"
	case UpdateOrganizationInvitationRequest_FieldPathSelectorCas:
		return "cas"
	case UpdateOrganizationInvitationRequest_FieldPathSelectorAllowMissing:
		return "allow_missing"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOrganizationInvitationRequest: %d", s))
	}
}

func BuildUpdateOrganizationInvitationRequest_FieldPath(fp gotenobject.RawFieldPath) (UpdateOrganizationInvitationRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateOrganizationInvitationRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "organization_invitation", "organizationInvitation", "organization-invitation":
			return &UpdateOrganizationInvitationRequest_FieldTerminalPath{selector: UpdateOrganizationInvitationRequest_FieldPathSelectorOrganizationInvitation}, nil
		case "update_mask", "updateMask", "update-mask":
			return &UpdateOrganizationInvitationRequest_FieldTerminalPath{selector: UpdateOrganizationInvitationRequest_FieldPathSelectorUpdateMask}, nil
		case "cas":
			return &UpdateOrganizationInvitationRequest_FieldTerminalPath{selector: UpdateOrganizationInvitationRequest_FieldPathSelectorCas}, nil
		case "allow_missing", "allowMissing", "allow-missing":
			return &UpdateOrganizationInvitationRequest_FieldTerminalPath{selector: UpdateOrganizationInvitationRequest_FieldPathSelectorAllowMissing}, nil
		}
	} else {
		switch fp[0] {
		case "organization_invitation", "organizationInvitation", "organization-invitation":
			if subpath, err := organization_invitation.BuildOrganizationInvitation_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateOrganizationInvitationRequest_FieldSubPath{selector: UpdateOrganizationInvitationRequest_FieldPathSelectorOrganizationInvitation, subPath: subpath}, nil
			}
		case "cas":
			if subpath, err := BuildUpdateOrganizationInvitationRequestCAS_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateOrganizationInvitationRequest_FieldSubPath{selector: UpdateOrganizationInvitationRequest_FieldPathSelectorCas, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateOrganizationInvitationRequest", fp)
}

func ParseUpdateOrganizationInvitationRequest_FieldPath(rawField string) (UpdateOrganizationInvitationRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateOrganizationInvitationRequest_FieldPath(fp)
}

func MustParseUpdateOrganizationInvitationRequest_FieldPath(rawField string) UpdateOrganizationInvitationRequest_FieldPath {
	fp, err := ParseUpdateOrganizationInvitationRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateOrganizationInvitationRequest_FieldTerminalPath struct {
	selector UpdateOrganizationInvitationRequest_FieldPathSelector
}

var _ UpdateOrganizationInvitationRequest_FieldPath = (*UpdateOrganizationInvitationRequest_FieldTerminalPath)(nil)

func (fp *UpdateOrganizationInvitationRequest_FieldTerminalPath) Selector() UpdateOrganizationInvitationRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateOrganizationInvitationRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateOrganizationInvitationRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateOrganizationInvitationRequest
func (fp *UpdateOrganizationInvitationRequest_FieldTerminalPath) Get(source *UpdateOrganizationInvitationRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateOrganizationInvitationRequest_FieldPathSelectorOrganizationInvitation:
			if source.OrganizationInvitation != nil {
				values = append(values, source.OrganizationInvitation)
			}
		case UpdateOrganizationInvitationRequest_FieldPathSelectorUpdateMask:
			if source.UpdateMask != nil {
				values = append(values, source.UpdateMask)
			}
		case UpdateOrganizationInvitationRequest_FieldPathSelectorCas:
			if source.Cas != nil {
				values = append(values, source.Cas)
			}
		case UpdateOrganizationInvitationRequest_FieldPathSelectorAllowMissing:
			values = append(values, source.AllowMissing)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateOrganizationInvitationRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateOrganizationInvitationRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateOrganizationInvitationRequest))
}

// GetSingle returns value pointed by specific field of from source UpdateOrganizationInvitationRequest
func (fp *UpdateOrganizationInvitationRequest_FieldTerminalPath) GetSingle(source *UpdateOrganizationInvitationRequest) (interface{}, bool) {
	switch fp.selector {
	case UpdateOrganizationInvitationRequest_FieldPathSelectorOrganizationInvitation:
		res := source.GetOrganizationInvitation()
		return res, res != nil
	case UpdateOrganizationInvitationRequest_FieldPathSelectorUpdateMask:
		res := source.GetUpdateMask()
		return res, res != nil
	case UpdateOrganizationInvitationRequest_FieldPathSelectorCas:
		res := source.GetCas()
		return res, res != nil
	case UpdateOrganizationInvitationRequest_FieldPathSelectorAllowMissing:
		return source.GetAllowMissing(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOrganizationInvitationRequest: %d", fp.selector))
	}
}

func (fp *UpdateOrganizationInvitationRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateOrganizationInvitationRequest))
}

// GetDefault returns a default value of the field type
func (fp *UpdateOrganizationInvitationRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateOrganizationInvitationRequest_FieldPathSelectorOrganizationInvitation:
		return (*organization_invitation.OrganizationInvitation)(nil)
	case UpdateOrganizationInvitationRequest_FieldPathSelectorUpdateMask:
		return (*organization_invitation.OrganizationInvitation_FieldMask)(nil)
	case UpdateOrganizationInvitationRequest_FieldPathSelectorCas:
		return (*UpdateOrganizationInvitationRequest_CAS)(nil)
	case UpdateOrganizationInvitationRequest_FieldPathSelectorAllowMissing:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOrganizationInvitationRequest: %d", fp.selector))
	}
}

func (fp *UpdateOrganizationInvitationRequest_FieldTerminalPath) ClearValue(item *UpdateOrganizationInvitationRequest) {
	if item != nil {
		switch fp.selector {
		case UpdateOrganizationInvitationRequest_FieldPathSelectorOrganizationInvitation:
			item.OrganizationInvitation = nil
		case UpdateOrganizationInvitationRequest_FieldPathSelectorUpdateMask:
			item.UpdateMask = nil
		case UpdateOrganizationInvitationRequest_FieldPathSelectorCas:
			item.Cas = nil
		case UpdateOrganizationInvitationRequest_FieldPathSelectorAllowMissing:
			item.AllowMissing = false
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateOrganizationInvitationRequest: %d", fp.selector))
		}
	}
}

func (fp *UpdateOrganizationInvitationRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateOrganizationInvitationRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateOrganizationInvitationRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateOrganizationInvitationRequest_FieldPathSelectorUpdateMask ||
		fp.selector == UpdateOrganizationInvitationRequest_FieldPathSelectorAllowMissing
}

func (fp *UpdateOrganizationInvitationRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *UpdateOrganizationInvitationRequest_FieldTerminalPath) WithIValue(value interface{}) UpdateOrganizationInvitationRequest_FieldPathValue {
	switch fp.selector {
	case UpdateOrganizationInvitationRequest_FieldPathSelectorOrganizationInvitation:
		return &UpdateOrganizationInvitationRequest_FieldTerminalPathValue{UpdateOrganizationInvitationRequest_FieldTerminalPath: *fp, value: value.(*organization_invitation.OrganizationInvitation)}
	case UpdateOrganizationInvitationRequest_FieldPathSelectorUpdateMask:
		return &UpdateOrganizationInvitationRequest_FieldTerminalPathValue{UpdateOrganizationInvitationRequest_FieldTerminalPath: *fp, value: value.(*organization_invitation.OrganizationInvitation_FieldMask)}
	case UpdateOrganizationInvitationRequest_FieldPathSelectorCas:
		return &UpdateOrganizationInvitationRequest_FieldTerminalPathValue{UpdateOrganizationInvitationRequest_FieldTerminalPath: *fp, value: value.(*UpdateOrganizationInvitationRequest_CAS)}
	case UpdateOrganizationInvitationRequest_FieldPathSelectorAllowMissing:
		return &UpdateOrganizationInvitationRequest_FieldTerminalPathValue{UpdateOrganizationInvitationRequest_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOrganizationInvitationRequest: %d", fp.selector))
	}
}

func (fp *UpdateOrganizationInvitationRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateOrganizationInvitationRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateOrganizationInvitationRequest_FieldPathArrayOfValues {
	fpaov := &UpdateOrganizationInvitationRequest_FieldTerminalPathArrayOfValues{UpdateOrganizationInvitationRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateOrganizationInvitationRequest_FieldPathSelectorOrganizationInvitation:
		return &UpdateOrganizationInvitationRequest_FieldTerminalPathArrayOfValues{UpdateOrganizationInvitationRequest_FieldTerminalPath: *fp, values: values.([]*organization_invitation.OrganizationInvitation)}
	case UpdateOrganizationInvitationRequest_FieldPathSelectorUpdateMask:
		return &UpdateOrganizationInvitationRequest_FieldTerminalPathArrayOfValues{UpdateOrganizationInvitationRequest_FieldTerminalPath: *fp, values: values.([]*organization_invitation.OrganizationInvitation_FieldMask)}
	case UpdateOrganizationInvitationRequest_FieldPathSelectorCas:
		return &UpdateOrganizationInvitationRequest_FieldTerminalPathArrayOfValues{UpdateOrganizationInvitationRequest_FieldTerminalPath: *fp, values: values.([]*UpdateOrganizationInvitationRequest_CAS)}
	case UpdateOrganizationInvitationRequest_FieldPathSelectorAllowMissing:
		return &UpdateOrganizationInvitationRequest_FieldTerminalPathArrayOfValues{UpdateOrganizationInvitationRequest_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOrganizationInvitationRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateOrganizationInvitationRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateOrganizationInvitationRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateOrganizationInvitationRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOrganizationInvitationRequest: %d", fp.selector))
	}
}

func (fp *UpdateOrganizationInvitationRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateOrganizationInvitationRequest_FieldSubPath struct {
	selector UpdateOrganizationInvitationRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateOrganizationInvitationRequest_FieldPath = (*UpdateOrganizationInvitationRequest_FieldSubPath)(nil)

func (fps *UpdateOrganizationInvitationRequest_FieldSubPath) Selector() UpdateOrganizationInvitationRequest_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateOrganizationInvitationRequest_FieldSubPath) AsOrganizationInvitationSubPath() (organization_invitation.OrganizationInvitation_FieldPath, bool) {
	res, ok := fps.subPath.(organization_invitation.OrganizationInvitation_FieldPath)
	return res, ok
}
func (fps *UpdateOrganizationInvitationRequest_FieldSubPath) AsCasSubPath() (UpdateOrganizationInvitationRequestCAS_FieldPath, bool) {
	res, ok := fps.subPath.(UpdateOrganizationInvitationRequestCAS_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateOrganizationInvitationRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateOrganizationInvitationRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateOrganizationInvitationRequest
func (fps *UpdateOrganizationInvitationRequest_FieldSubPath) Get(source *UpdateOrganizationInvitationRequest) (values []interface{}) {
	switch fps.selector {
	case UpdateOrganizationInvitationRequest_FieldPathSelectorOrganizationInvitation:
		values = append(values, fps.subPath.GetRaw(source.GetOrganizationInvitation())...)
	case UpdateOrganizationInvitationRequest_FieldPathSelectorCas:
		values = append(values, fps.subPath.GetRaw(source.GetCas())...)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOrganizationInvitationRequest: %d", fps.selector))
	}
	return
}

func (fps *UpdateOrganizationInvitationRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateOrganizationInvitationRequest))
}

// GetSingle returns value of selected field from source UpdateOrganizationInvitationRequest
func (fps *UpdateOrganizationInvitationRequest_FieldSubPath) GetSingle(source *UpdateOrganizationInvitationRequest) (interface{}, bool) {
	switch fps.selector {
	case UpdateOrganizationInvitationRequest_FieldPathSelectorOrganizationInvitation:
		if source.GetOrganizationInvitation() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetOrganizationInvitation())
	case UpdateOrganizationInvitationRequest_FieldPathSelectorCas:
		if source.GetCas() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOrganizationInvitationRequest: %d", fps.selector))
	}
}

func (fps *UpdateOrganizationInvitationRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateOrganizationInvitationRequest))
}

// GetDefault returns a default value of the field type
func (fps *UpdateOrganizationInvitationRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateOrganizationInvitationRequest_FieldSubPath) ClearValue(item *UpdateOrganizationInvitationRequest) {
	if item != nil {
		switch fps.selector {
		case UpdateOrganizationInvitationRequest_FieldPathSelectorOrganizationInvitation:
			fps.subPath.ClearValueRaw(item.OrganizationInvitation)
		case UpdateOrganizationInvitationRequest_FieldPathSelectorCas:
			fps.subPath.ClearValueRaw(item.Cas)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateOrganizationInvitationRequest: %d", fps.selector))
		}
	}
}

func (fps *UpdateOrganizationInvitationRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateOrganizationInvitationRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateOrganizationInvitationRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateOrganizationInvitationRequest_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&UpdateOrganizationInvitationRequest_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *UpdateOrganizationInvitationRequest_FieldSubPath) WithIValue(value interface{}) UpdateOrganizationInvitationRequest_FieldPathValue {
	return &UpdateOrganizationInvitationRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateOrganizationInvitationRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateOrganizationInvitationRequest_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateOrganizationInvitationRequest_FieldPathArrayOfValues {
	return &UpdateOrganizationInvitationRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateOrganizationInvitationRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateOrganizationInvitationRequest_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateOrganizationInvitationRequest_FieldPathArrayItemValue {
	return &UpdateOrganizationInvitationRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateOrganizationInvitationRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateOrganizationInvitationRequest_FieldPathValue allows storing values for UpdateOrganizationInvitationRequest fields according to their type
type UpdateOrganizationInvitationRequest_FieldPathValue interface {
	UpdateOrganizationInvitationRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateOrganizationInvitationRequest)
	CompareWith(*UpdateOrganizationInvitationRequest) (cmp int, comparable bool)
}

func ParseUpdateOrganizationInvitationRequest_FieldPathValue(pathStr, valueStr string) (UpdateOrganizationInvitationRequest_FieldPathValue, error) {
	fp, err := ParseUpdateOrganizationInvitationRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateOrganizationInvitationRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateOrganizationInvitationRequest_FieldPathValue), nil
}

func MustParseUpdateOrganizationInvitationRequest_FieldPathValue(pathStr, valueStr string) UpdateOrganizationInvitationRequest_FieldPathValue {
	fpv, err := ParseUpdateOrganizationInvitationRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateOrganizationInvitationRequest_FieldTerminalPathValue struct {
	UpdateOrganizationInvitationRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateOrganizationInvitationRequest_FieldPathValue = (*UpdateOrganizationInvitationRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'UpdateOrganizationInvitationRequest' as interface{}
func (fpv *UpdateOrganizationInvitationRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateOrganizationInvitationRequest_FieldTerminalPathValue) AsOrganizationInvitationValue() (*organization_invitation.OrganizationInvitation, bool) {
	res, ok := fpv.value.(*organization_invitation.OrganizationInvitation)
	return res, ok
}
func (fpv *UpdateOrganizationInvitationRequest_FieldTerminalPathValue) AsUpdateMaskValue() (*organization_invitation.OrganizationInvitation_FieldMask, bool) {
	res, ok := fpv.value.(*organization_invitation.OrganizationInvitation_FieldMask)
	return res, ok
}
func (fpv *UpdateOrganizationInvitationRequest_FieldTerminalPathValue) AsCasValue() (*UpdateOrganizationInvitationRequest_CAS, bool) {
	res, ok := fpv.value.(*UpdateOrganizationInvitationRequest_CAS)
	return res, ok
}
func (fpv *UpdateOrganizationInvitationRequest_FieldTerminalPathValue) AsAllowMissingValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object UpdateOrganizationInvitationRequest
func (fpv *UpdateOrganizationInvitationRequest_FieldTerminalPathValue) SetTo(target **UpdateOrganizationInvitationRequest) {
	if *target == nil {
		*target = new(UpdateOrganizationInvitationRequest)
	}
	switch fpv.selector {
	case UpdateOrganizationInvitationRequest_FieldPathSelectorOrganizationInvitation:
		(*target).OrganizationInvitation = fpv.value.(*organization_invitation.OrganizationInvitation)
	case UpdateOrganizationInvitationRequest_FieldPathSelectorUpdateMask:
		(*target).UpdateMask = fpv.value.(*organization_invitation.OrganizationInvitation_FieldMask)
	case UpdateOrganizationInvitationRequest_FieldPathSelectorCas:
		(*target).Cas = fpv.value.(*UpdateOrganizationInvitationRequest_CAS)
	case UpdateOrganizationInvitationRequest_FieldPathSelectorAllowMissing:
		(*target).AllowMissing = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOrganizationInvitationRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateOrganizationInvitationRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateOrganizationInvitationRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateOrganizationInvitationRequest_FieldTerminalPathValue' with the value under path in 'UpdateOrganizationInvitationRequest'.
func (fpv *UpdateOrganizationInvitationRequest_FieldTerminalPathValue) CompareWith(source *UpdateOrganizationInvitationRequest) (int, bool) {
	switch fpv.selector {
	case UpdateOrganizationInvitationRequest_FieldPathSelectorOrganizationInvitation:
		return 0, false
	case UpdateOrganizationInvitationRequest_FieldPathSelectorUpdateMask:
		return 0, false
	case UpdateOrganizationInvitationRequest_FieldPathSelectorCas:
		return 0, false
	case UpdateOrganizationInvitationRequest_FieldPathSelectorAllowMissing:
		leftValue := fpv.value.(bool)
		rightValue := source.GetAllowMissing()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOrganizationInvitationRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateOrganizationInvitationRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateOrganizationInvitationRequest))
}

type UpdateOrganizationInvitationRequest_FieldSubPathValue struct {
	UpdateOrganizationInvitationRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateOrganizationInvitationRequest_FieldPathValue = (*UpdateOrganizationInvitationRequest_FieldSubPathValue)(nil)

func (fpvs *UpdateOrganizationInvitationRequest_FieldSubPathValue) AsOrganizationInvitationPathValue() (organization_invitation.OrganizationInvitation_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(organization_invitation.OrganizationInvitation_FieldPathValue)
	return res, ok
}
func (fpvs *UpdateOrganizationInvitationRequest_FieldSubPathValue) AsCasPathValue() (UpdateOrganizationInvitationRequestCAS_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(UpdateOrganizationInvitationRequestCAS_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateOrganizationInvitationRequest_FieldSubPathValue) SetTo(target **UpdateOrganizationInvitationRequest) {
	if *target == nil {
		*target = new(UpdateOrganizationInvitationRequest)
	}
	switch fpvs.Selector() {
	case UpdateOrganizationInvitationRequest_FieldPathSelectorOrganizationInvitation:
		fpvs.subPathValue.(organization_invitation.OrganizationInvitation_FieldPathValue).SetTo(&(*target).OrganizationInvitation)
	case UpdateOrganizationInvitationRequest_FieldPathSelectorCas:
		fpvs.subPathValue.(UpdateOrganizationInvitationRequestCAS_FieldPathValue).SetTo(&(*target).Cas)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOrganizationInvitationRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateOrganizationInvitationRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateOrganizationInvitationRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateOrganizationInvitationRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateOrganizationInvitationRequest_FieldSubPathValue) CompareWith(source *UpdateOrganizationInvitationRequest) (int, bool) {
	switch fpvs.Selector() {
	case UpdateOrganizationInvitationRequest_FieldPathSelectorOrganizationInvitation:
		return fpvs.subPathValue.(organization_invitation.OrganizationInvitation_FieldPathValue).CompareWith(source.GetOrganizationInvitation())
	case UpdateOrganizationInvitationRequest_FieldPathSelectorCas:
		return fpvs.subPathValue.(UpdateOrganizationInvitationRequestCAS_FieldPathValue).CompareWith(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOrganizationInvitationRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateOrganizationInvitationRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateOrganizationInvitationRequest))
}

// UpdateOrganizationInvitationRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for UpdateOrganizationInvitationRequest according to their type
// Present only for array (repeated) types.
type UpdateOrganizationInvitationRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateOrganizationInvitationRequest_FieldPath
	ContainsValue(*UpdateOrganizationInvitationRequest) bool
}

// ParseUpdateOrganizationInvitationRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateOrganizationInvitationRequest_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateOrganizationInvitationRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateOrganizationInvitationRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateOrganizationInvitationRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateOrganizationInvitationRequest_FieldPathArrayItemValue), nil
}

func MustParseUpdateOrganizationInvitationRequest_FieldPathArrayItemValue(pathStr, valueStr string) UpdateOrganizationInvitationRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateOrganizationInvitationRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateOrganizationInvitationRequest_FieldTerminalPathArrayItemValue struct {
	UpdateOrganizationInvitationRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateOrganizationInvitationRequest_FieldPathArrayItemValue = (*UpdateOrganizationInvitationRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateOrganizationInvitationRequest as interface{}
func (fpaiv *UpdateOrganizationInvitationRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateOrganizationInvitationRequest_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateOrganizationInvitationRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateOrganizationInvitationRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateOrganizationInvitationRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateOrganizationInvitationRequest'
func (fpaiv *UpdateOrganizationInvitationRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateOrganizationInvitationRequest) bool {
	slice := fpaiv.UpdateOrganizationInvitationRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateOrganizationInvitationRequest_FieldSubPathArrayItemValue struct {
	UpdateOrganizationInvitationRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateOrganizationInvitationRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateOrganizationInvitationRequest_FieldSubPathArrayItemValue) AsOrganizationInvitationPathItemValue() (organization_invitation.OrganizationInvitation_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(organization_invitation.OrganizationInvitation_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *UpdateOrganizationInvitationRequest_FieldSubPathArrayItemValue) AsCasPathItemValue() (UpdateOrganizationInvitationRequestCAS_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(UpdateOrganizationInvitationRequestCAS_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateOrganizationInvitationRequest'
func (fpaivs *UpdateOrganizationInvitationRequest_FieldSubPathArrayItemValue) ContainsValue(source *UpdateOrganizationInvitationRequest) bool {
	switch fpaivs.Selector() {
	case UpdateOrganizationInvitationRequest_FieldPathSelectorOrganizationInvitation:
		return fpaivs.subPathItemValue.(organization_invitation.OrganizationInvitation_FieldPathArrayItemValue).ContainsValue(source.GetOrganizationInvitation())
	case UpdateOrganizationInvitationRequest_FieldPathSelectorCas:
		return fpaivs.subPathItemValue.(UpdateOrganizationInvitationRequestCAS_FieldPathArrayItemValue).ContainsValue(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOrganizationInvitationRequest: %d", fpaivs.Selector()))
	}
}

// UpdateOrganizationInvitationRequest_FieldPathArrayOfValues allows storing slice of values for UpdateOrganizationInvitationRequest fields according to their type
type UpdateOrganizationInvitationRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateOrganizationInvitationRequest_FieldPath
}

func ParseUpdateOrganizationInvitationRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateOrganizationInvitationRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateOrganizationInvitationRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateOrganizationInvitationRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateOrganizationInvitationRequest_FieldPathArrayOfValues), nil
}

func MustParseUpdateOrganizationInvitationRequest_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateOrganizationInvitationRequest_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateOrganizationInvitationRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateOrganizationInvitationRequest_FieldTerminalPathArrayOfValues struct {
	UpdateOrganizationInvitationRequest_FieldTerminalPath
	values interface{}
}

var _ UpdateOrganizationInvitationRequest_FieldPathArrayOfValues = (*UpdateOrganizationInvitationRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateOrganizationInvitationRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateOrganizationInvitationRequest_FieldPathSelectorOrganizationInvitation:
		for _, v := range fpaov.values.([]*organization_invitation.OrganizationInvitation) {
			values = append(values, v)
		}
	case UpdateOrganizationInvitationRequest_FieldPathSelectorUpdateMask:
		for _, v := range fpaov.values.([]*organization_invitation.OrganizationInvitation_FieldMask) {
			values = append(values, v)
		}
	case UpdateOrganizationInvitationRequest_FieldPathSelectorCas:
		for _, v := range fpaov.values.([]*UpdateOrganizationInvitationRequest_CAS) {
			values = append(values, v)
		}
	case UpdateOrganizationInvitationRequest_FieldPathSelectorAllowMissing:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateOrganizationInvitationRequest_FieldTerminalPathArrayOfValues) AsOrganizationInvitationArrayOfValues() ([]*organization_invitation.OrganizationInvitation, bool) {
	res, ok := fpaov.values.([]*organization_invitation.OrganizationInvitation)
	return res, ok
}
func (fpaov *UpdateOrganizationInvitationRequest_FieldTerminalPathArrayOfValues) AsUpdateMaskArrayOfValues() ([]*organization_invitation.OrganizationInvitation_FieldMask, bool) {
	res, ok := fpaov.values.([]*organization_invitation.OrganizationInvitation_FieldMask)
	return res, ok
}
func (fpaov *UpdateOrganizationInvitationRequest_FieldTerminalPathArrayOfValues) AsCasArrayOfValues() ([]*UpdateOrganizationInvitationRequest_CAS, bool) {
	res, ok := fpaov.values.([]*UpdateOrganizationInvitationRequest_CAS)
	return res, ok
}
func (fpaov *UpdateOrganizationInvitationRequest_FieldTerminalPathArrayOfValues) AsAllowMissingArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

type UpdateOrganizationInvitationRequest_FieldSubPathArrayOfValues struct {
	UpdateOrganizationInvitationRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateOrganizationInvitationRequest_FieldPathArrayOfValues = (*UpdateOrganizationInvitationRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateOrganizationInvitationRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateOrganizationInvitationRequest_FieldSubPathArrayOfValues) AsOrganizationInvitationPathArrayOfValues() (organization_invitation.OrganizationInvitation_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(organization_invitation.OrganizationInvitation_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *UpdateOrganizationInvitationRequest_FieldSubPathArrayOfValues) AsCasPathArrayOfValues() (UpdateOrganizationInvitationRequestCAS_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(UpdateOrganizationInvitationRequestCAS_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateOrganizationInvitationRequestCAS_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateOrganizationInvitationRequestCAS_FieldPathSelector
	Get(source *UpdateOrganizationInvitationRequest_CAS) []interface{}
	GetSingle(source *UpdateOrganizationInvitationRequest_CAS) (interface{}, bool)
	ClearValue(item *UpdateOrganizationInvitationRequest_CAS)

	// Those methods build corresponding UpdateOrganizationInvitationRequestCAS_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateOrganizationInvitationRequestCAS_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateOrganizationInvitationRequestCAS_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateOrganizationInvitationRequestCAS_FieldPathArrayItemValue
}

type UpdateOrganizationInvitationRequestCAS_FieldPathSelector int32

const (
	UpdateOrganizationInvitationRequestCAS_FieldPathSelectorConditionalState UpdateOrganizationInvitationRequestCAS_FieldPathSelector = 0
	UpdateOrganizationInvitationRequestCAS_FieldPathSelectorFieldMask        UpdateOrganizationInvitationRequestCAS_FieldPathSelector = 1
)

func (s UpdateOrganizationInvitationRequestCAS_FieldPathSelector) String() string {
	switch s {
	case UpdateOrganizationInvitationRequestCAS_FieldPathSelectorConditionalState:
		return "conditional_state"
	case UpdateOrganizationInvitationRequestCAS_FieldPathSelectorFieldMask:
		return "field_mask"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOrganizationInvitationRequest_CAS: %d", s))
	}
}

func BuildUpdateOrganizationInvitationRequestCAS_FieldPath(fp gotenobject.RawFieldPath) (UpdateOrganizationInvitationRequestCAS_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateOrganizationInvitationRequest_CAS")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			return &UpdateOrganizationInvitationRequestCAS_FieldTerminalPath{selector: UpdateOrganizationInvitationRequestCAS_FieldPathSelectorConditionalState}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &UpdateOrganizationInvitationRequestCAS_FieldTerminalPath{selector: UpdateOrganizationInvitationRequestCAS_FieldPathSelectorFieldMask}, nil
		}
	} else {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			if subpath, err := organization_invitation.BuildOrganizationInvitation_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateOrganizationInvitationRequestCAS_FieldSubPath{selector: UpdateOrganizationInvitationRequestCAS_FieldPathSelectorConditionalState, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateOrganizationInvitationRequest_CAS", fp)
}

func ParseUpdateOrganizationInvitationRequestCAS_FieldPath(rawField string) (UpdateOrganizationInvitationRequestCAS_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateOrganizationInvitationRequestCAS_FieldPath(fp)
}

func MustParseUpdateOrganizationInvitationRequestCAS_FieldPath(rawField string) UpdateOrganizationInvitationRequestCAS_FieldPath {
	fp, err := ParseUpdateOrganizationInvitationRequestCAS_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateOrganizationInvitationRequestCAS_FieldTerminalPath struct {
	selector UpdateOrganizationInvitationRequestCAS_FieldPathSelector
}

var _ UpdateOrganizationInvitationRequestCAS_FieldPath = (*UpdateOrganizationInvitationRequestCAS_FieldTerminalPath)(nil)

func (fp *UpdateOrganizationInvitationRequestCAS_FieldTerminalPath) Selector() UpdateOrganizationInvitationRequestCAS_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateOrganizationInvitationRequestCAS_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateOrganizationInvitationRequestCAS_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateOrganizationInvitationRequest_CAS
func (fp *UpdateOrganizationInvitationRequestCAS_FieldTerminalPath) Get(source *UpdateOrganizationInvitationRequest_CAS) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateOrganizationInvitationRequestCAS_FieldPathSelectorConditionalState:
			if source.ConditionalState != nil {
				values = append(values, source.ConditionalState)
			}
		case UpdateOrganizationInvitationRequestCAS_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateOrganizationInvitationRequest_CAS: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateOrganizationInvitationRequestCAS_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateOrganizationInvitationRequest_CAS))
}

// GetSingle returns value pointed by specific field of from source UpdateOrganizationInvitationRequest_CAS
func (fp *UpdateOrganizationInvitationRequestCAS_FieldTerminalPath) GetSingle(source *UpdateOrganizationInvitationRequest_CAS) (interface{}, bool) {
	switch fp.selector {
	case UpdateOrganizationInvitationRequestCAS_FieldPathSelectorConditionalState:
		res := source.GetConditionalState()
		return res, res != nil
	case UpdateOrganizationInvitationRequestCAS_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOrganizationInvitationRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateOrganizationInvitationRequestCAS_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateOrganizationInvitationRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fp *UpdateOrganizationInvitationRequestCAS_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateOrganizationInvitationRequestCAS_FieldPathSelectorConditionalState:
		return (*organization_invitation.OrganizationInvitation)(nil)
	case UpdateOrganizationInvitationRequestCAS_FieldPathSelectorFieldMask:
		return (*organization_invitation.OrganizationInvitation_FieldMask)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOrganizationInvitationRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateOrganizationInvitationRequestCAS_FieldTerminalPath) ClearValue(item *UpdateOrganizationInvitationRequest_CAS) {
	if item != nil {
		switch fp.selector {
		case UpdateOrganizationInvitationRequestCAS_FieldPathSelectorConditionalState:
			item.ConditionalState = nil
		case UpdateOrganizationInvitationRequestCAS_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateOrganizationInvitationRequest_CAS: %d", fp.selector))
		}
	}
}

func (fp *UpdateOrganizationInvitationRequestCAS_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateOrganizationInvitationRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateOrganizationInvitationRequestCAS_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateOrganizationInvitationRequestCAS_FieldPathSelectorFieldMask
}

func (fp *UpdateOrganizationInvitationRequestCAS_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *UpdateOrganizationInvitationRequestCAS_FieldTerminalPath) WithIValue(value interface{}) UpdateOrganizationInvitationRequestCAS_FieldPathValue {
	switch fp.selector {
	case UpdateOrganizationInvitationRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateOrganizationInvitationRequestCAS_FieldTerminalPathValue{UpdateOrganizationInvitationRequestCAS_FieldTerminalPath: *fp, value: value.(*organization_invitation.OrganizationInvitation)}
	case UpdateOrganizationInvitationRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateOrganizationInvitationRequestCAS_FieldTerminalPathValue{UpdateOrganizationInvitationRequestCAS_FieldTerminalPath: *fp, value: value.(*organization_invitation.OrganizationInvitation_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOrganizationInvitationRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateOrganizationInvitationRequestCAS_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateOrganizationInvitationRequestCAS_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateOrganizationInvitationRequestCAS_FieldPathArrayOfValues {
	fpaov := &UpdateOrganizationInvitationRequestCAS_FieldTerminalPathArrayOfValues{UpdateOrganizationInvitationRequestCAS_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateOrganizationInvitationRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateOrganizationInvitationRequestCAS_FieldTerminalPathArrayOfValues{UpdateOrganizationInvitationRequestCAS_FieldTerminalPath: *fp, values: values.([]*organization_invitation.OrganizationInvitation)}
	case UpdateOrganizationInvitationRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateOrganizationInvitationRequestCAS_FieldTerminalPathArrayOfValues{UpdateOrganizationInvitationRequestCAS_FieldTerminalPath: *fp, values: values.([]*organization_invitation.OrganizationInvitation_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOrganizationInvitationRequest_CAS: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateOrganizationInvitationRequestCAS_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateOrganizationInvitationRequestCAS_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateOrganizationInvitationRequestCAS_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOrganizationInvitationRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateOrganizationInvitationRequestCAS_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateOrganizationInvitationRequestCAS_FieldSubPath struct {
	selector UpdateOrganizationInvitationRequestCAS_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateOrganizationInvitationRequestCAS_FieldPath = (*UpdateOrganizationInvitationRequestCAS_FieldSubPath)(nil)

func (fps *UpdateOrganizationInvitationRequestCAS_FieldSubPath) Selector() UpdateOrganizationInvitationRequestCAS_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateOrganizationInvitationRequestCAS_FieldSubPath) AsConditionalStateSubPath() (organization_invitation.OrganizationInvitation_FieldPath, bool) {
	res, ok := fps.subPath.(organization_invitation.OrganizationInvitation_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateOrganizationInvitationRequestCAS_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateOrganizationInvitationRequestCAS_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateOrganizationInvitationRequest_CAS
func (fps *UpdateOrganizationInvitationRequestCAS_FieldSubPath) Get(source *UpdateOrganizationInvitationRequest_CAS) (values []interface{}) {
	switch fps.selector {
	case UpdateOrganizationInvitationRequestCAS_FieldPathSelectorConditionalState:
		values = append(values, fps.subPath.GetRaw(source.GetConditionalState())...)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOrganizationInvitationRequest_CAS: %d", fps.selector))
	}
	return
}

func (fps *UpdateOrganizationInvitationRequestCAS_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateOrganizationInvitationRequest_CAS))
}

// GetSingle returns value of selected field from source UpdateOrganizationInvitationRequest_CAS
func (fps *UpdateOrganizationInvitationRequestCAS_FieldSubPath) GetSingle(source *UpdateOrganizationInvitationRequest_CAS) (interface{}, bool) {
	switch fps.selector {
	case UpdateOrganizationInvitationRequestCAS_FieldPathSelectorConditionalState:
		if source.GetConditionalState() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOrganizationInvitationRequest_CAS: %d", fps.selector))
	}
}

func (fps *UpdateOrganizationInvitationRequestCAS_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateOrganizationInvitationRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fps *UpdateOrganizationInvitationRequestCAS_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateOrganizationInvitationRequestCAS_FieldSubPath) ClearValue(item *UpdateOrganizationInvitationRequest_CAS) {
	if item != nil {
		switch fps.selector {
		case UpdateOrganizationInvitationRequestCAS_FieldPathSelectorConditionalState:
			fps.subPath.ClearValueRaw(item.ConditionalState)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateOrganizationInvitationRequest_CAS: %d", fps.selector))
		}
	}
}

func (fps *UpdateOrganizationInvitationRequestCAS_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateOrganizationInvitationRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateOrganizationInvitationRequestCAS_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateOrganizationInvitationRequestCAS_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&UpdateOrganizationInvitationRequestCAS_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *UpdateOrganizationInvitationRequestCAS_FieldSubPath) WithIValue(value interface{}) UpdateOrganizationInvitationRequestCAS_FieldPathValue {
	return &UpdateOrganizationInvitationRequestCAS_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateOrganizationInvitationRequestCAS_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateOrganizationInvitationRequestCAS_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateOrganizationInvitationRequestCAS_FieldPathArrayOfValues {
	return &UpdateOrganizationInvitationRequestCAS_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateOrganizationInvitationRequestCAS_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateOrganizationInvitationRequestCAS_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateOrganizationInvitationRequestCAS_FieldPathArrayItemValue {
	return &UpdateOrganizationInvitationRequestCAS_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateOrganizationInvitationRequestCAS_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateOrganizationInvitationRequestCAS_FieldPathValue allows storing values for CAS fields according to their type
type UpdateOrganizationInvitationRequestCAS_FieldPathValue interface {
	UpdateOrganizationInvitationRequestCAS_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateOrganizationInvitationRequest_CAS)
	CompareWith(*UpdateOrganizationInvitationRequest_CAS) (cmp int, comparable bool)
}

func ParseUpdateOrganizationInvitationRequestCAS_FieldPathValue(pathStr, valueStr string) (UpdateOrganizationInvitationRequestCAS_FieldPathValue, error) {
	fp, err := ParseUpdateOrganizationInvitationRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateOrganizationInvitationRequestCAS_FieldPathValue), nil
}

func MustParseUpdateOrganizationInvitationRequestCAS_FieldPathValue(pathStr, valueStr string) UpdateOrganizationInvitationRequestCAS_FieldPathValue {
	fpv, err := ParseUpdateOrganizationInvitationRequestCAS_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateOrganizationInvitationRequestCAS_FieldTerminalPathValue struct {
	UpdateOrganizationInvitationRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateOrganizationInvitationRequestCAS_FieldPathValue = (*UpdateOrganizationInvitationRequestCAS_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CAS' as interface{}
func (fpv *UpdateOrganizationInvitationRequestCAS_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateOrganizationInvitationRequestCAS_FieldTerminalPathValue) AsConditionalStateValue() (*organization_invitation.OrganizationInvitation, bool) {
	res, ok := fpv.value.(*organization_invitation.OrganizationInvitation)
	return res, ok
}
func (fpv *UpdateOrganizationInvitationRequestCAS_FieldTerminalPathValue) AsFieldMaskValue() (*organization_invitation.OrganizationInvitation_FieldMask, bool) {
	res, ok := fpv.value.(*organization_invitation.OrganizationInvitation_FieldMask)
	return res, ok
}

// SetTo stores value for selected field for object CAS
func (fpv *UpdateOrganizationInvitationRequestCAS_FieldTerminalPathValue) SetTo(target **UpdateOrganizationInvitationRequest_CAS) {
	if *target == nil {
		*target = new(UpdateOrganizationInvitationRequest_CAS)
	}
	switch fpv.selector {
	case UpdateOrganizationInvitationRequestCAS_FieldPathSelectorConditionalState:
		(*target).ConditionalState = fpv.value.(*organization_invitation.OrganizationInvitation)
	case UpdateOrganizationInvitationRequestCAS_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*organization_invitation.OrganizationInvitation_FieldMask)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOrganizationInvitationRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateOrganizationInvitationRequestCAS_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateOrganizationInvitationRequest_CAS)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateOrganizationInvitationRequestCAS_FieldTerminalPathValue' with the value under path in 'UpdateOrganizationInvitationRequest_CAS'.
func (fpv *UpdateOrganizationInvitationRequestCAS_FieldTerminalPathValue) CompareWith(source *UpdateOrganizationInvitationRequest_CAS) (int, bool) {
	switch fpv.selector {
	case UpdateOrganizationInvitationRequestCAS_FieldPathSelectorConditionalState:
		return 0, false
	case UpdateOrganizationInvitationRequestCAS_FieldPathSelectorFieldMask:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOrganizationInvitationRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateOrganizationInvitationRequestCAS_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateOrganizationInvitationRequest_CAS))
}

type UpdateOrganizationInvitationRequestCAS_FieldSubPathValue struct {
	UpdateOrganizationInvitationRequestCAS_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateOrganizationInvitationRequestCAS_FieldPathValue = (*UpdateOrganizationInvitationRequestCAS_FieldSubPathValue)(nil)

func (fpvs *UpdateOrganizationInvitationRequestCAS_FieldSubPathValue) AsConditionalStatePathValue() (organization_invitation.OrganizationInvitation_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(organization_invitation.OrganizationInvitation_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateOrganizationInvitationRequestCAS_FieldSubPathValue) SetTo(target **UpdateOrganizationInvitationRequest_CAS) {
	if *target == nil {
		*target = new(UpdateOrganizationInvitationRequest_CAS)
	}
	switch fpvs.Selector() {
	case UpdateOrganizationInvitationRequestCAS_FieldPathSelectorConditionalState:
		fpvs.subPathValue.(organization_invitation.OrganizationInvitation_FieldPathValue).SetTo(&(*target).ConditionalState)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOrganizationInvitationRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateOrganizationInvitationRequestCAS_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateOrganizationInvitationRequest_CAS)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateOrganizationInvitationRequestCAS_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateOrganizationInvitationRequestCAS_FieldSubPathValue) CompareWith(source *UpdateOrganizationInvitationRequest_CAS) (int, bool) {
	switch fpvs.Selector() {
	case UpdateOrganizationInvitationRequestCAS_FieldPathSelectorConditionalState:
		return fpvs.subPathValue.(organization_invitation.OrganizationInvitation_FieldPathValue).CompareWith(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOrganizationInvitationRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateOrganizationInvitationRequestCAS_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateOrganizationInvitationRequest_CAS))
}

// UpdateOrganizationInvitationRequestCAS_FieldPathArrayItemValue allows storing single item in Path-specific values for CAS according to their type
// Present only for array (repeated) types.
type UpdateOrganizationInvitationRequestCAS_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateOrganizationInvitationRequestCAS_FieldPath
	ContainsValue(*UpdateOrganizationInvitationRequest_CAS) bool
}

// ParseUpdateOrganizationInvitationRequestCAS_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateOrganizationInvitationRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateOrganizationInvitationRequestCAS_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateOrganizationInvitationRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateOrganizationInvitationRequestCAS_FieldPathArrayItemValue), nil
}

func MustParseUpdateOrganizationInvitationRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) UpdateOrganizationInvitationRequestCAS_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateOrganizationInvitationRequestCAS_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateOrganizationInvitationRequestCAS_FieldTerminalPathArrayItemValue struct {
	UpdateOrganizationInvitationRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateOrganizationInvitationRequestCAS_FieldPathArrayItemValue = (*UpdateOrganizationInvitationRequestCAS_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateOrganizationInvitationRequest_CAS as interface{}
func (fpaiv *UpdateOrganizationInvitationRequestCAS_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateOrganizationInvitationRequestCAS_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateOrganizationInvitationRequest_CAS) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateOrganizationInvitationRequestCAS_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateOrganizationInvitationRequest_CAS))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaiv *UpdateOrganizationInvitationRequestCAS_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateOrganizationInvitationRequest_CAS) bool {
	slice := fpaiv.UpdateOrganizationInvitationRequestCAS_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateOrganizationInvitationRequestCAS_FieldSubPathArrayItemValue struct {
	UpdateOrganizationInvitationRequestCAS_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateOrganizationInvitationRequestCAS_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateOrganizationInvitationRequestCAS_FieldSubPathArrayItemValue) AsConditionalStatePathItemValue() (organization_invitation.OrganizationInvitation_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(organization_invitation.OrganizationInvitation_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaivs *UpdateOrganizationInvitationRequestCAS_FieldSubPathArrayItemValue) ContainsValue(source *UpdateOrganizationInvitationRequest_CAS) bool {
	switch fpaivs.Selector() {
	case UpdateOrganizationInvitationRequestCAS_FieldPathSelectorConditionalState:
		return fpaivs.subPathItemValue.(organization_invitation.OrganizationInvitation_FieldPathArrayItemValue).ContainsValue(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOrganizationInvitationRequest_CAS: %d", fpaivs.Selector()))
	}
}

// UpdateOrganizationInvitationRequestCAS_FieldPathArrayOfValues allows storing slice of values for CAS fields according to their type
type UpdateOrganizationInvitationRequestCAS_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateOrganizationInvitationRequestCAS_FieldPath
}

func ParseUpdateOrganizationInvitationRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateOrganizationInvitationRequestCAS_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateOrganizationInvitationRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateOrganizationInvitationRequestCAS_FieldPathArrayOfValues), nil
}

func MustParseUpdateOrganizationInvitationRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateOrganizationInvitationRequestCAS_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateOrganizationInvitationRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateOrganizationInvitationRequestCAS_FieldTerminalPathArrayOfValues struct {
	UpdateOrganizationInvitationRequestCAS_FieldTerminalPath
	values interface{}
}

var _ UpdateOrganizationInvitationRequestCAS_FieldPathArrayOfValues = (*UpdateOrganizationInvitationRequestCAS_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateOrganizationInvitationRequestCAS_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateOrganizationInvitationRequestCAS_FieldPathSelectorConditionalState:
		for _, v := range fpaov.values.([]*organization_invitation.OrganizationInvitation) {
			values = append(values, v)
		}
	case UpdateOrganizationInvitationRequestCAS_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*organization_invitation.OrganizationInvitation_FieldMask) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateOrganizationInvitationRequestCAS_FieldTerminalPathArrayOfValues) AsConditionalStateArrayOfValues() ([]*organization_invitation.OrganizationInvitation, bool) {
	res, ok := fpaov.values.([]*organization_invitation.OrganizationInvitation)
	return res, ok
}
func (fpaov *UpdateOrganizationInvitationRequestCAS_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*organization_invitation.OrganizationInvitation_FieldMask, bool) {
	res, ok := fpaov.values.([]*organization_invitation.OrganizationInvitation_FieldMask)
	return res, ok
}

type UpdateOrganizationInvitationRequestCAS_FieldSubPathArrayOfValues struct {
	UpdateOrganizationInvitationRequestCAS_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateOrganizationInvitationRequestCAS_FieldPathArrayOfValues = (*UpdateOrganizationInvitationRequestCAS_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateOrganizationInvitationRequestCAS_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateOrganizationInvitationRequestCAS_FieldSubPathArrayOfValues) AsConditionalStatePathArrayOfValues() (organization_invitation.OrganizationInvitation_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(organization_invitation.OrganizationInvitation_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeleteOrganizationInvitationRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeleteOrganizationInvitationRequest_FieldPathSelector
	Get(source *DeleteOrganizationInvitationRequest) []interface{}
	GetSingle(source *DeleteOrganizationInvitationRequest) (interface{}, bool)
	ClearValue(item *DeleteOrganizationInvitationRequest)

	// Those methods build corresponding DeleteOrganizationInvitationRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeleteOrganizationInvitationRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) DeleteOrganizationInvitationRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeleteOrganizationInvitationRequest_FieldPathArrayItemValue
}

type DeleteOrganizationInvitationRequest_FieldPathSelector int32

const (
	DeleteOrganizationInvitationRequest_FieldPathSelectorName DeleteOrganizationInvitationRequest_FieldPathSelector = 0
)

func (s DeleteOrganizationInvitationRequest_FieldPathSelector) String() string {
	switch s {
	case DeleteOrganizationInvitationRequest_FieldPathSelectorName:
		return "name"
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteOrganizationInvitationRequest: %d", s))
	}
}

func BuildDeleteOrganizationInvitationRequest_FieldPath(fp gotenobject.RawFieldPath) (DeleteOrganizationInvitationRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object DeleteOrganizationInvitationRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &DeleteOrganizationInvitationRequest_FieldTerminalPath{selector: DeleteOrganizationInvitationRequest_FieldPathSelectorName}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object DeleteOrganizationInvitationRequest", fp)
}

func ParseDeleteOrganizationInvitationRequest_FieldPath(rawField string) (DeleteOrganizationInvitationRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeleteOrganizationInvitationRequest_FieldPath(fp)
}

func MustParseDeleteOrganizationInvitationRequest_FieldPath(rawField string) DeleteOrganizationInvitationRequest_FieldPath {
	fp, err := ParseDeleteOrganizationInvitationRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeleteOrganizationInvitationRequest_FieldTerminalPath struct {
	selector DeleteOrganizationInvitationRequest_FieldPathSelector
}

var _ DeleteOrganizationInvitationRequest_FieldPath = (*DeleteOrganizationInvitationRequest_FieldTerminalPath)(nil)

func (fp *DeleteOrganizationInvitationRequest_FieldTerminalPath) Selector() DeleteOrganizationInvitationRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeleteOrganizationInvitationRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeleteOrganizationInvitationRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source DeleteOrganizationInvitationRequest
func (fp *DeleteOrganizationInvitationRequest_FieldTerminalPath) Get(source *DeleteOrganizationInvitationRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeleteOrganizationInvitationRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteOrganizationInvitationRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *DeleteOrganizationInvitationRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*DeleteOrganizationInvitationRequest))
}

// GetSingle returns value pointed by specific field of from source DeleteOrganizationInvitationRequest
func (fp *DeleteOrganizationInvitationRequest_FieldTerminalPath) GetSingle(source *DeleteOrganizationInvitationRequest) (interface{}, bool) {
	switch fp.selector {
	case DeleteOrganizationInvitationRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteOrganizationInvitationRequest: %d", fp.selector))
	}
}

func (fp *DeleteOrganizationInvitationRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*DeleteOrganizationInvitationRequest))
}

// GetDefault returns a default value of the field type
func (fp *DeleteOrganizationInvitationRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeleteOrganizationInvitationRequest_FieldPathSelectorName:
		return (*organization_invitation.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteOrganizationInvitationRequest: %d", fp.selector))
	}
}

func (fp *DeleteOrganizationInvitationRequest_FieldTerminalPath) ClearValue(item *DeleteOrganizationInvitationRequest) {
	if item != nil {
		switch fp.selector {
		case DeleteOrganizationInvitationRequest_FieldPathSelectorName:
			item.Name = nil
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteOrganizationInvitationRequest: %d", fp.selector))
		}
	}
}

func (fp *DeleteOrganizationInvitationRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*DeleteOrganizationInvitationRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeleteOrganizationInvitationRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeleteOrganizationInvitationRequest_FieldPathSelectorName
}

func (fp *DeleteOrganizationInvitationRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *DeleteOrganizationInvitationRequest_FieldTerminalPath) WithIValue(value interface{}) DeleteOrganizationInvitationRequest_FieldPathValue {
	switch fp.selector {
	case DeleteOrganizationInvitationRequest_FieldPathSelectorName:
		return &DeleteOrganizationInvitationRequest_FieldTerminalPathValue{DeleteOrganizationInvitationRequest_FieldTerminalPath: *fp, value: value.(*organization_invitation.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteOrganizationInvitationRequest: %d", fp.selector))
	}
}

func (fp *DeleteOrganizationInvitationRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeleteOrganizationInvitationRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeleteOrganizationInvitationRequest_FieldPathArrayOfValues {
	fpaov := &DeleteOrganizationInvitationRequest_FieldTerminalPathArrayOfValues{DeleteOrganizationInvitationRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeleteOrganizationInvitationRequest_FieldPathSelectorName:
		return &DeleteOrganizationInvitationRequest_FieldTerminalPathArrayOfValues{DeleteOrganizationInvitationRequest_FieldTerminalPath: *fp, values: values.([]*organization_invitation.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteOrganizationInvitationRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeleteOrganizationInvitationRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeleteOrganizationInvitationRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeleteOrganizationInvitationRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteOrganizationInvitationRequest: %d", fp.selector))
	}
}

func (fp *DeleteOrganizationInvitationRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeleteOrganizationInvitationRequest_FieldPathValue allows storing values for DeleteOrganizationInvitationRequest fields according to their type
type DeleteOrganizationInvitationRequest_FieldPathValue interface {
	DeleteOrganizationInvitationRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **DeleteOrganizationInvitationRequest)
	CompareWith(*DeleteOrganizationInvitationRequest) (cmp int, comparable bool)
}

func ParseDeleteOrganizationInvitationRequest_FieldPathValue(pathStr, valueStr string) (DeleteOrganizationInvitationRequest_FieldPathValue, error) {
	fp, err := ParseDeleteOrganizationInvitationRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteOrganizationInvitationRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeleteOrganizationInvitationRequest_FieldPathValue), nil
}

func MustParseDeleteOrganizationInvitationRequest_FieldPathValue(pathStr, valueStr string) DeleteOrganizationInvitationRequest_FieldPathValue {
	fpv, err := ParseDeleteOrganizationInvitationRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeleteOrganizationInvitationRequest_FieldTerminalPathValue struct {
	DeleteOrganizationInvitationRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteOrganizationInvitationRequest_FieldPathValue = (*DeleteOrganizationInvitationRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'DeleteOrganizationInvitationRequest' as interface{}
func (fpv *DeleteOrganizationInvitationRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeleteOrganizationInvitationRequest_FieldTerminalPathValue) AsNameValue() (*organization_invitation.Reference, bool) {
	res, ok := fpv.value.(*organization_invitation.Reference)
	return res, ok
}

// SetTo stores value for selected field for object DeleteOrganizationInvitationRequest
func (fpv *DeleteOrganizationInvitationRequest_FieldTerminalPathValue) SetTo(target **DeleteOrganizationInvitationRequest) {
	if *target == nil {
		*target = new(DeleteOrganizationInvitationRequest)
	}
	switch fpv.selector {
	case DeleteOrganizationInvitationRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*organization_invitation.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteOrganizationInvitationRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteOrganizationInvitationRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*DeleteOrganizationInvitationRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeleteOrganizationInvitationRequest_FieldTerminalPathValue' with the value under path in 'DeleteOrganizationInvitationRequest'.
func (fpv *DeleteOrganizationInvitationRequest_FieldTerminalPathValue) CompareWith(source *DeleteOrganizationInvitationRequest) (int, bool) {
	switch fpv.selector {
	case DeleteOrganizationInvitationRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*organization_invitation.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteOrganizationInvitationRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteOrganizationInvitationRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*DeleteOrganizationInvitationRequest))
}

// DeleteOrganizationInvitationRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for DeleteOrganizationInvitationRequest according to their type
// Present only for array (repeated) types.
type DeleteOrganizationInvitationRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeleteOrganizationInvitationRequest_FieldPath
	ContainsValue(*DeleteOrganizationInvitationRequest) bool
}

// ParseDeleteOrganizationInvitationRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeleteOrganizationInvitationRequest_FieldPathArrayItemValue(pathStr, valueStr string) (DeleteOrganizationInvitationRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseDeleteOrganizationInvitationRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteOrganizationInvitationRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeleteOrganizationInvitationRequest_FieldPathArrayItemValue), nil
}

func MustParseDeleteOrganizationInvitationRequest_FieldPathArrayItemValue(pathStr, valueStr string) DeleteOrganizationInvitationRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseDeleteOrganizationInvitationRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeleteOrganizationInvitationRequest_FieldTerminalPathArrayItemValue struct {
	DeleteOrganizationInvitationRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteOrganizationInvitationRequest_FieldPathArrayItemValue = (*DeleteOrganizationInvitationRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object DeleteOrganizationInvitationRequest as interface{}
func (fpaiv *DeleteOrganizationInvitationRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeleteOrganizationInvitationRequest_FieldTerminalPathArrayItemValue) GetSingle(source *DeleteOrganizationInvitationRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeleteOrganizationInvitationRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*DeleteOrganizationInvitationRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'DeleteOrganizationInvitationRequest'
func (fpaiv *DeleteOrganizationInvitationRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *DeleteOrganizationInvitationRequest) bool {
	slice := fpaiv.DeleteOrganizationInvitationRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeleteOrganizationInvitationRequest_FieldPathArrayOfValues allows storing slice of values for DeleteOrganizationInvitationRequest fields according to their type
type DeleteOrganizationInvitationRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeleteOrganizationInvitationRequest_FieldPath
}

func ParseDeleteOrganizationInvitationRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (DeleteOrganizationInvitationRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseDeleteOrganizationInvitationRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteOrganizationInvitationRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeleteOrganizationInvitationRequest_FieldPathArrayOfValues), nil
}

func MustParseDeleteOrganizationInvitationRequest_FieldPathArrayOfValues(pathStr, valuesStr string) DeleteOrganizationInvitationRequest_FieldPathArrayOfValues {
	fpaov, err := ParseDeleteOrganizationInvitationRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeleteOrganizationInvitationRequest_FieldTerminalPathArrayOfValues struct {
	DeleteOrganizationInvitationRequest_FieldTerminalPath
	values interface{}
}

var _ DeleteOrganizationInvitationRequest_FieldPathArrayOfValues = (*DeleteOrganizationInvitationRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeleteOrganizationInvitationRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeleteOrganizationInvitationRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*organization_invitation.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeleteOrganizationInvitationRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*organization_invitation.Reference, bool) {
	res, ok := fpaov.values.([]*organization_invitation.Reference)
	return res, ok
}
