// Code generated by protoc-gen-goten-client
// API: OrganizationInvitationService
// DO NOT EDIT!!!

package organization_invitation_client

import (
	"google.golang.org/protobuf/proto"

	gotenclient "github.com/cloudwan/goten-sdk/runtime/client"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	organization_invitation "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/organization_invitation"
	empty "github.com/golang/protobuf/ptypes/empty"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = proto.Message(nil)
	_ = gotenclient.MethodDescriptor(nil)
	_ = gotenresource.WildcardId
)

// make sure we're using proto imports
var (
	_ = &organization_invitation.OrganizationInvitation{}
	_ = &empty.Empty{}
)

var (
	descriptorsInitialized                    bool
	organizationInvitationServiceDescriptor   *OrganizationInvitationServiceDescriptor
	getOrganizationInvitationDescriptor       *GetOrganizationInvitationDescriptor
	batchGetOrganizationInvitationsDescriptor *BatchGetOrganizationInvitationsDescriptor
	listOrganizationInvitationsDescriptor     *ListOrganizationInvitationsDescriptor
	watchOrganizationInvitationDescriptor     *WatchOrganizationInvitationDescriptor
	watchOrganizationInvitationsDescriptor    *WatchOrganizationInvitationsDescriptor
	createOrganizationInvitationDescriptor    *CreateOrganizationInvitationDescriptor
	updateOrganizationInvitationDescriptor    *UpdateOrganizationInvitationDescriptor
	deleteOrganizationInvitationDescriptor    *DeleteOrganizationInvitationDescriptor
	acceptOrganizationInvitationDescriptor    *AcceptOrganizationInvitationDescriptor
	declineOrganizationInvitationDescriptor   *DeclineOrganizationInvitationDescriptor
	listMyOrganizationInvitationsDescriptor   *ListMyOrganizationInvitationsDescriptor
)

type GetOrganizationInvitationDescriptor struct{}

type GetOrganizationInvitationDescriptorClientMsgHandle struct{}

type GetOrganizationInvitationDescriptorServerMsgHandle struct{}

func (d *GetOrganizationInvitationDescriptor) NewEmptyClientMsg() proto.Message {
	return &GetOrganizationInvitationRequest{}
}

func (d *GetOrganizationInvitationDescriptor) NewEmptyServerMsg() proto.Message {
	return &organization_invitation.OrganizationInvitation{}
}

func (d *GetOrganizationInvitationDescriptor) IsUnary() bool {
	return true
}

func (d *GetOrganizationInvitationDescriptor) IsClientStream() bool {
	return false
}

func (d *GetOrganizationInvitationDescriptor) IsServerStream() bool {
	return false
}

func (d *GetOrganizationInvitationDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *GetOrganizationInvitationDescriptor) IsPluralSubject() bool {
	return false
}

func (d *GetOrganizationInvitationDescriptor) HasSubjectResource() bool {
	return true
}

func (d *GetOrganizationInvitationDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *GetOrganizationInvitationDescriptor) GetVerb() string {
	return "get"
}

func (d *GetOrganizationInvitationDescriptor) GetMethodName() string {
	return "GetOrganizationInvitation"
}

func (d *GetOrganizationInvitationDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1alpha2.OrganizationInvitationService/GetOrganizationInvitation"
}

func (d *GetOrganizationInvitationDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha2"
}

func (d *GetOrganizationInvitationDescriptor) GetApiName() string {
	return "OrganizationInvitationService"
}

func (d *GetOrganizationInvitationDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *GetOrganizationInvitationDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *GetOrganizationInvitationDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return organizationInvitationServiceDescriptor
}

func (d *GetOrganizationInvitationDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return organization_invitation.GetDescriptor()
}

func (d *GetOrganizationInvitationDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetOrganizationInvitationDescriptorClientMsgHandle{}
}

func (d *GetOrganizationInvitationDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetOrganizationInvitationDescriptorServerMsgHandle{}
}

func (h *GetOrganizationInvitationDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetOrganizationInvitationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*GetOrganizationInvitationRequest) *organization_invitation.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*organization_invitation.Name)(nil)
}

func (h *GetOrganizationInvitationDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*GetOrganizationInvitationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*GetOrganizationInvitationRequest) []*organization_invitation.Name
	})
	if ok {
		return organization_invitation.OrganizationInvitationNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *GetOrganizationInvitationDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetOrganizationInvitationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*GetOrganizationInvitationRequest) *organization_invitation.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *GetOrganizationInvitationDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*organization_invitation.OrganizationInvitation)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*organization_invitation.OrganizationInvitation) *organization_invitation.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetName()
}

func (h *GetOrganizationInvitationDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*organization_invitation.OrganizationInvitation)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*organization_invitation.OrganizationInvitation) []*organization_invitation.Name
	})
	if ok {
		return organization_invitation.OrganizationInvitationNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *GetOrganizationInvitationDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*organization_invitation.OrganizationInvitation)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*organization_invitation.OrganizationInvitation) *organization_invitation.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetGetOrganizationInvitationDescriptor() *GetOrganizationInvitationDescriptor {
	return getOrganizationInvitationDescriptor
}

type BatchGetOrganizationInvitationsDescriptor struct{}

type BatchGetOrganizationInvitationsDescriptorClientMsgHandle struct{}

type BatchGetOrganizationInvitationsDescriptorServerMsgHandle struct{}

func (d *BatchGetOrganizationInvitationsDescriptor) NewEmptyClientMsg() proto.Message {
	return &BatchGetOrganizationInvitationsRequest{}
}

func (d *BatchGetOrganizationInvitationsDescriptor) NewEmptyServerMsg() proto.Message {
	return &BatchGetOrganizationInvitationsResponse{}
}

func (d *BatchGetOrganizationInvitationsDescriptor) IsUnary() bool {
	return true
}

func (d *BatchGetOrganizationInvitationsDescriptor) IsClientStream() bool {
	return false
}

func (d *BatchGetOrganizationInvitationsDescriptor) IsServerStream() bool {
	return false
}

func (d *BatchGetOrganizationInvitationsDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *BatchGetOrganizationInvitationsDescriptor) IsPluralSubject() bool {
	return true
}

func (d *BatchGetOrganizationInvitationsDescriptor) HasSubjectResource() bool {
	return true
}

func (d *BatchGetOrganizationInvitationsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *BatchGetOrganizationInvitationsDescriptor) GetVerb() string {
	return "batchGet"
}

func (d *BatchGetOrganizationInvitationsDescriptor) GetMethodName() string {
	return "BatchGetOrganizationInvitations"
}

func (d *BatchGetOrganizationInvitationsDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1alpha2.OrganizationInvitationService/BatchGetOrganizationInvitations"
}

func (d *BatchGetOrganizationInvitationsDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha2"
}

func (d *BatchGetOrganizationInvitationsDescriptor) GetApiName() string {
	return "OrganizationInvitationService"
}

func (d *BatchGetOrganizationInvitationsDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *BatchGetOrganizationInvitationsDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *BatchGetOrganizationInvitationsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return organizationInvitationServiceDescriptor
}

func (d *BatchGetOrganizationInvitationsDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return organization_invitation.GetDescriptor()
}

func (d *BatchGetOrganizationInvitationsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetOrganizationInvitationsDescriptorClientMsgHandle{}
}

func (d *BatchGetOrganizationInvitationsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetOrganizationInvitationsDescriptorServerMsgHandle{}
}

func (h *BatchGetOrganizationInvitationsDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetOrganizationInvitationsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*BatchGetOrganizationInvitationsRequest) *organization_invitation.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetOrganizationInvitationsDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetOrganizationInvitationsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*BatchGetOrganizationInvitationsRequest) []*organization_invitation.Name
	})
	if ok {
		return organization_invitation.OrganizationInvitationNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	if refs := typedMsg.GetNames(); len(refs) > 0 {
		list := make(organization_invitation.OrganizationInvitationNameList, 0, len(refs))
		for _, ref := range refs {
			list = append(list, &ref.Name)
		}
		return list
	}
	return (organization_invitation.OrganizationInvitationNameList)(nil)
}

func (h *BatchGetOrganizationInvitationsDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetOrganizationInvitationsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*BatchGetOrganizationInvitationsRequest) *organization_invitation.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *BatchGetOrganizationInvitationsDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetOrganizationInvitationsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*BatchGetOrganizationInvitationsResponse) *organization_invitation.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetOrganizationInvitationsDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetOrganizationInvitationsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*BatchGetOrganizationInvitationsResponse) []*organization_invitation.Name
	})
	if ok {
		return organization_invitation.OrganizationInvitationNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	resources := typedMsg.GetOrganizationInvitations()
	list := make(organization_invitation.OrganizationInvitationNameList, 0, len(resources))
	for _, res := range resources {
		list = append(list, res.GetName())
	}
	return list
}

func (h *BatchGetOrganizationInvitationsDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetOrganizationInvitationsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*BatchGetOrganizationInvitationsResponse) *organization_invitation.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetBatchGetOrganizationInvitationsDescriptor() *BatchGetOrganizationInvitationsDescriptor {
	return batchGetOrganizationInvitationsDescriptor
}

type ListOrganizationInvitationsDescriptor struct{}

type ListOrganizationInvitationsDescriptorClientMsgHandle struct{}

type ListOrganizationInvitationsDescriptorServerMsgHandle struct{}

func (d *ListOrganizationInvitationsDescriptor) NewEmptyClientMsg() proto.Message {
	return &ListOrganizationInvitationsRequest{}
}

func (d *ListOrganizationInvitationsDescriptor) NewEmptyServerMsg() proto.Message {
	return &ListOrganizationInvitationsResponse{}
}

func (d *ListOrganizationInvitationsDescriptor) IsUnary() bool {
	return true
}

func (d *ListOrganizationInvitationsDescriptor) IsClientStream() bool {
	return false
}

func (d *ListOrganizationInvitationsDescriptor) IsServerStream() bool {
	return false
}

func (d *ListOrganizationInvitationsDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *ListOrganizationInvitationsDescriptor) IsPluralSubject() bool {
	return true
}

func (d *ListOrganizationInvitationsDescriptor) HasSubjectResource() bool {
	return true
}

func (d *ListOrganizationInvitationsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ListOrganizationInvitationsDescriptor) GetVerb() string {
	return "list"
}

func (d *ListOrganizationInvitationsDescriptor) GetMethodName() string {
	return "ListOrganizationInvitations"
}

func (d *ListOrganizationInvitationsDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1alpha2.OrganizationInvitationService/ListOrganizationInvitations"
}

func (d *ListOrganizationInvitationsDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha2"
}

func (d *ListOrganizationInvitationsDescriptor) GetApiName() string {
	return "OrganizationInvitationService"
}

func (d *ListOrganizationInvitationsDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *ListOrganizationInvitationsDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *ListOrganizationInvitationsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return organizationInvitationServiceDescriptor
}

func (d *ListOrganizationInvitationsDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return organization_invitation.GetDescriptor()
}

func (d *ListOrganizationInvitationsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListOrganizationInvitationsDescriptorClientMsgHandle{}
}

func (d *ListOrganizationInvitationsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListOrganizationInvitationsDescriptorServerMsgHandle{}
}

func (h *ListOrganizationInvitationsDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListOrganizationInvitationsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*ListOrganizationInvitationsRequest) *organization_invitation.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *ListOrganizationInvitationsDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListOrganizationInvitationsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*ListOrganizationInvitationsRequest) []*organization_invitation.Name
	})
	if ok {
		return organization_invitation.OrganizationInvitationNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *ListOrganizationInvitationsDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListOrganizationInvitationsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*ListOrganizationInvitationsRequest) *organization_invitation.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return typedMsg.GetParent()
}

func (h *ListOrganizationInvitationsDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListOrganizationInvitationsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*ListOrganizationInvitationsResponse) *organization_invitation.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *ListOrganizationInvitationsDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListOrganizationInvitationsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*ListOrganizationInvitationsResponse) []*organization_invitation.Name
	})
	if ok {
		return organization_invitation.OrganizationInvitationNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	resources := typedMsg.GetOrganizationInvitations()
	list := make(organization_invitation.OrganizationInvitationNameList, 0, len(resources))
	for _, res := range resources {
		list = append(list, res.GetName())
	}
	return list
}

func (h *ListOrganizationInvitationsDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListOrganizationInvitationsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*ListOrganizationInvitationsResponse) *organization_invitation.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetListOrganizationInvitationsDescriptor() *ListOrganizationInvitationsDescriptor {
	return listOrganizationInvitationsDescriptor
}

type WatchOrganizationInvitationDescriptor struct{}

type WatchOrganizationInvitationDescriptorClientMsgHandle struct{}

type WatchOrganizationInvitationDescriptorServerMsgHandle struct{}

func (d *WatchOrganizationInvitationDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchOrganizationInvitationRequest{}
}

func (d *WatchOrganizationInvitationDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchOrganizationInvitationResponse{}
}

func (d *WatchOrganizationInvitationDescriptor) IsUnary() bool {
	return false
}

func (d *WatchOrganizationInvitationDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchOrganizationInvitationDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchOrganizationInvitationDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *WatchOrganizationInvitationDescriptor) IsPluralSubject() bool {
	return false
}

func (d *WatchOrganizationInvitationDescriptor) HasSubjectResource() bool {
	return true
}

func (d *WatchOrganizationInvitationDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchOrganizationInvitationDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchOrganizationInvitationDescriptor) GetMethodName() string {
	return "WatchOrganizationInvitation"
}

func (d *WatchOrganizationInvitationDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1alpha2.OrganizationInvitationService/WatchOrganizationInvitation"
}

func (d *WatchOrganizationInvitationDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha2"
}

func (d *WatchOrganizationInvitationDescriptor) GetApiName() string {
	return "OrganizationInvitationService"
}

func (d *WatchOrganizationInvitationDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *WatchOrganizationInvitationDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *WatchOrganizationInvitationDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return organizationInvitationServiceDescriptor
}

func (d *WatchOrganizationInvitationDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return organization_invitation.GetDescriptor()
}

func (d *WatchOrganizationInvitationDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchOrganizationInvitationDescriptorClientMsgHandle{}
}

func (d *WatchOrganizationInvitationDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchOrganizationInvitationDescriptorServerMsgHandle{}
}

func (h *WatchOrganizationInvitationDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchOrganizationInvitationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchOrganizationInvitationRequest) *organization_invitation.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*organization_invitation.Name)(nil)
}

func (h *WatchOrganizationInvitationDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchOrganizationInvitationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchOrganizationInvitationRequest) []*organization_invitation.Name
	})
	if ok {
		return organization_invitation.OrganizationInvitationNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchOrganizationInvitationDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchOrganizationInvitationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchOrganizationInvitationRequest) *organization_invitation.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchOrganizationInvitationDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchOrganizationInvitationResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchOrganizationInvitationResponse) *organization_invitation.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if typedMsg.GetChange() != nil {
		switch tResChange := typedMsg.GetChange().ChangeType.(type) {
		case *organization_invitation.OrganizationInvitationChange_Added_:
			return tResChange.Added.GetOrganizationInvitation().GetName()
		case *organization_invitation.OrganizationInvitationChange_Modified_:
			return tResChange.Modified.GetName()
		case *organization_invitation.OrganizationInvitationChange_Removed_:
			return tResChange.Removed.GetName()
		case *organization_invitation.OrganizationInvitationChange_Current_:
			return tResChange.Current.GetOrganizationInvitation().GetName()
		}
	}
	return (*organization_invitation.Name)(nil)
}

func (h *WatchOrganizationInvitationDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchOrganizationInvitationResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchOrganizationInvitationResponse) []*organization_invitation.Name
	})
	if ok {
		return organization_invitation.OrganizationInvitationNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchOrganizationInvitationDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchOrganizationInvitationResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchOrganizationInvitationResponse) *organization_invitation.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetWatchOrganizationInvitationDescriptor() *WatchOrganizationInvitationDescriptor {
	return watchOrganizationInvitationDescriptor
}

type WatchOrganizationInvitationsDescriptor struct{}

type WatchOrganizationInvitationsDescriptorClientMsgHandle struct{}

type WatchOrganizationInvitationsDescriptorServerMsgHandle struct{}

func (d *WatchOrganizationInvitationsDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchOrganizationInvitationsRequest{}
}

func (d *WatchOrganizationInvitationsDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchOrganizationInvitationsResponse{}
}

func (d *WatchOrganizationInvitationsDescriptor) IsUnary() bool {
	return false
}

func (d *WatchOrganizationInvitationsDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchOrganizationInvitationsDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchOrganizationInvitationsDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *WatchOrganizationInvitationsDescriptor) IsPluralSubject() bool {
	return true
}

func (d *WatchOrganizationInvitationsDescriptor) HasSubjectResource() bool {
	return true
}

func (d *WatchOrganizationInvitationsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchOrganizationInvitationsDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchOrganizationInvitationsDescriptor) GetMethodName() string {
	return "WatchOrganizationInvitations"
}

func (d *WatchOrganizationInvitationsDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1alpha2.OrganizationInvitationService/WatchOrganizationInvitations"
}

func (d *WatchOrganizationInvitationsDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha2"
}

func (d *WatchOrganizationInvitationsDescriptor) GetApiName() string {
	return "OrganizationInvitationService"
}

func (d *WatchOrganizationInvitationsDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *WatchOrganizationInvitationsDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *WatchOrganizationInvitationsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return organizationInvitationServiceDescriptor
}

func (d *WatchOrganizationInvitationsDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return organization_invitation.GetDescriptor()
}

func (d *WatchOrganizationInvitationsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchOrganizationInvitationsDescriptorClientMsgHandle{}
}

func (d *WatchOrganizationInvitationsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchOrganizationInvitationsDescriptorServerMsgHandle{}
}

func (h *WatchOrganizationInvitationsDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchOrganizationInvitationsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchOrganizationInvitationsRequest) *organization_invitation.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *WatchOrganizationInvitationsDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchOrganizationInvitationsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchOrganizationInvitationsRequest) []*organization_invitation.Name
	})
	if ok {
		return organization_invitation.OrganizationInvitationNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchOrganizationInvitationsDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchOrganizationInvitationsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchOrganizationInvitationsRequest) *organization_invitation.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	if ref := typedMsg.GetParent(); ref != nil {
		return &ref.ParentName
	}
	return (*organization_invitation.ParentName)(nil)
}

func (h *WatchOrganizationInvitationsDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchOrganizationInvitationsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchOrganizationInvitationsResponse) *organization_invitation.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *WatchOrganizationInvitationsDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchOrganizationInvitationsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchOrganizationInvitationsResponse) []*organization_invitation.Name
	})
	if ok {
		return organization_invitation.OrganizationInvitationNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	resourceChanges := typedMsg.GetOrganizationInvitationChanges()
	list := make(organization_invitation.OrganizationInvitationNameList, 0, len(resourceChanges))
	for _, resChange := range resourceChanges {
		switch tResChange := resChange.ChangeType.(type) {
		case *organization_invitation.OrganizationInvitationChange_Added_:
			list = append(list, tResChange.Added.GetOrganizationInvitation().GetName())
		case *organization_invitation.OrganizationInvitationChange_Modified_:
			list = append(list, tResChange.Modified.GetName())
		case *organization_invitation.OrganizationInvitationChange_Removed_:
			list = append(list, tResChange.Removed.GetName())
		case *organization_invitation.OrganizationInvitationChange_Current_:
			list = append(list, tResChange.Current.GetOrganizationInvitation().GetName())
		}
	}
	return list
}

func (h *WatchOrganizationInvitationsDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchOrganizationInvitationsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchOrganizationInvitationsResponse) *organization_invitation.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetWatchOrganizationInvitationsDescriptor() *WatchOrganizationInvitationsDescriptor {
	return watchOrganizationInvitationsDescriptor
}

type CreateOrganizationInvitationDescriptor struct{}

type CreateOrganizationInvitationDescriptorClientMsgHandle struct{}

type CreateOrganizationInvitationDescriptorServerMsgHandle struct{}

func (d *CreateOrganizationInvitationDescriptor) NewEmptyClientMsg() proto.Message {
	return &CreateOrganizationInvitationRequest{}
}

func (d *CreateOrganizationInvitationDescriptor) NewEmptyServerMsg() proto.Message {
	return &organization_invitation.OrganizationInvitation{}
}

func (d *CreateOrganizationInvitationDescriptor) IsUnary() bool {
	return true
}

func (d *CreateOrganizationInvitationDescriptor) IsClientStream() bool {
	return false
}

func (d *CreateOrganizationInvitationDescriptor) IsServerStream() bool {
	return false
}

func (d *CreateOrganizationInvitationDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *CreateOrganizationInvitationDescriptor) IsPluralSubject() bool {
	return false
}

func (d *CreateOrganizationInvitationDescriptor) HasSubjectResource() bool {
	return true
}

func (d *CreateOrganizationInvitationDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *CreateOrganizationInvitationDescriptor) GetVerb() string {
	return "create"
}

func (d *CreateOrganizationInvitationDescriptor) GetMethodName() string {
	return "CreateOrganizationInvitation"
}

func (d *CreateOrganizationInvitationDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1alpha2.OrganizationInvitationService/CreateOrganizationInvitation"
}

func (d *CreateOrganizationInvitationDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha2"
}

func (d *CreateOrganizationInvitationDescriptor) GetApiName() string {
	return "OrganizationInvitationService"
}

func (d *CreateOrganizationInvitationDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *CreateOrganizationInvitationDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *CreateOrganizationInvitationDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return organizationInvitationServiceDescriptor
}

func (d *CreateOrganizationInvitationDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return organization_invitation.GetDescriptor()
}

func (d *CreateOrganizationInvitationDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateOrganizationInvitationDescriptorClientMsgHandle{}
}

func (d *CreateOrganizationInvitationDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateOrganizationInvitationDescriptorServerMsgHandle{}
}

func (h *CreateOrganizationInvitationDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateOrganizationInvitationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*CreateOrganizationInvitationRequest) *organization_invitation.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetOrganizationInvitation().GetName()
}

func (h *CreateOrganizationInvitationDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*CreateOrganizationInvitationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*CreateOrganizationInvitationRequest) []*organization_invitation.Name
	})
	if ok {
		return organization_invitation.OrganizationInvitationNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateOrganizationInvitationDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateOrganizationInvitationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*CreateOrganizationInvitationRequest) *organization_invitation.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	if ref := typedMsg.GetParent(); ref != nil {
		return &ref.ParentName
	}
	return (*organization_invitation.ParentName)(nil)
}

func (h *CreateOrganizationInvitationDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*organization_invitation.OrganizationInvitation)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*organization_invitation.OrganizationInvitation) *organization_invitation.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetName()
}

func (h *CreateOrganizationInvitationDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*organization_invitation.OrganizationInvitation)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*organization_invitation.OrganizationInvitation) []*organization_invitation.Name
	})
	if ok {
		return organization_invitation.OrganizationInvitationNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateOrganizationInvitationDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*organization_invitation.OrganizationInvitation)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*organization_invitation.OrganizationInvitation) *organization_invitation.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetCreateOrganizationInvitationDescriptor() *CreateOrganizationInvitationDescriptor {
	return createOrganizationInvitationDescriptor
}

type UpdateOrganizationInvitationDescriptor struct{}

type UpdateOrganizationInvitationDescriptorClientMsgHandle struct{}

type UpdateOrganizationInvitationDescriptorServerMsgHandle struct{}

func (d *UpdateOrganizationInvitationDescriptor) NewEmptyClientMsg() proto.Message {
	return &UpdateOrganizationInvitationRequest{}
}

func (d *UpdateOrganizationInvitationDescriptor) NewEmptyServerMsg() proto.Message {
	return &organization_invitation.OrganizationInvitation{}
}

func (d *UpdateOrganizationInvitationDescriptor) IsUnary() bool {
	return true
}

func (d *UpdateOrganizationInvitationDescriptor) IsClientStream() bool {
	return false
}

func (d *UpdateOrganizationInvitationDescriptor) IsServerStream() bool {
	return false
}

func (d *UpdateOrganizationInvitationDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *UpdateOrganizationInvitationDescriptor) IsPluralSubject() bool {
	return false
}

func (d *UpdateOrganizationInvitationDescriptor) HasSubjectResource() bool {
	return true
}

func (d *UpdateOrganizationInvitationDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *UpdateOrganizationInvitationDescriptor) GetVerb() string {
	return "update"
}

func (d *UpdateOrganizationInvitationDescriptor) GetMethodName() string {
	return "UpdateOrganizationInvitation"
}

func (d *UpdateOrganizationInvitationDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1alpha2.OrganizationInvitationService/UpdateOrganizationInvitation"
}

func (d *UpdateOrganizationInvitationDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha2"
}

func (d *UpdateOrganizationInvitationDescriptor) GetApiName() string {
	return "OrganizationInvitationService"
}

func (d *UpdateOrganizationInvitationDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *UpdateOrganizationInvitationDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *UpdateOrganizationInvitationDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return organizationInvitationServiceDescriptor
}

func (d *UpdateOrganizationInvitationDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return organization_invitation.GetDescriptor()
}

func (d *UpdateOrganizationInvitationDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateOrganizationInvitationDescriptorClientMsgHandle{}
}

func (d *UpdateOrganizationInvitationDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateOrganizationInvitationDescriptorServerMsgHandle{}
}

func (h *UpdateOrganizationInvitationDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateOrganizationInvitationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*UpdateOrganizationInvitationRequest) *organization_invitation.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetOrganizationInvitation().GetName()
}

func (h *UpdateOrganizationInvitationDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*UpdateOrganizationInvitationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*UpdateOrganizationInvitationRequest) []*organization_invitation.Name
	})
	if ok {
		return organization_invitation.OrganizationInvitationNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateOrganizationInvitationDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateOrganizationInvitationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*UpdateOrganizationInvitationRequest) *organization_invitation.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *UpdateOrganizationInvitationDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*organization_invitation.OrganizationInvitation)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*organization_invitation.OrganizationInvitation) *organization_invitation.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetName()
}

func (h *UpdateOrganizationInvitationDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*organization_invitation.OrganizationInvitation)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*organization_invitation.OrganizationInvitation) []*organization_invitation.Name
	})
	if ok {
		return organization_invitation.OrganizationInvitationNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateOrganizationInvitationDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*organization_invitation.OrganizationInvitation)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*organization_invitation.OrganizationInvitation) *organization_invitation.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetUpdateOrganizationInvitationDescriptor() *UpdateOrganizationInvitationDescriptor {
	return updateOrganizationInvitationDescriptor
}

type DeleteOrganizationInvitationDescriptor struct{}

type DeleteOrganizationInvitationDescriptorClientMsgHandle struct{}

type DeleteOrganizationInvitationDescriptorServerMsgHandle struct{}

func (d *DeleteOrganizationInvitationDescriptor) NewEmptyClientMsg() proto.Message {
	return &DeleteOrganizationInvitationRequest{}
}

func (d *DeleteOrganizationInvitationDescriptor) NewEmptyServerMsg() proto.Message {
	return &empty.Empty{}
}

func (d *DeleteOrganizationInvitationDescriptor) IsUnary() bool {
	return true
}

func (d *DeleteOrganizationInvitationDescriptor) IsClientStream() bool {
	return false
}

func (d *DeleteOrganizationInvitationDescriptor) IsServerStream() bool {
	return false
}

func (d *DeleteOrganizationInvitationDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *DeleteOrganizationInvitationDescriptor) IsPluralSubject() bool {
	return false
}

func (d *DeleteOrganizationInvitationDescriptor) HasSubjectResource() bool {
	return true
}

func (d *DeleteOrganizationInvitationDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *DeleteOrganizationInvitationDescriptor) GetVerb() string {
	return "delete"
}

func (d *DeleteOrganizationInvitationDescriptor) GetMethodName() string {
	return "DeleteOrganizationInvitation"
}

func (d *DeleteOrganizationInvitationDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1alpha2.OrganizationInvitationService/DeleteOrganizationInvitation"
}

func (d *DeleteOrganizationInvitationDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha2"
}

func (d *DeleteOrganizationInvitationDescriptor) GetApiName() string {
	return "OrganizationInvitationService"
}

func (d *DeleteOrganizationInvitationDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *DeleteOrganizationInvitationDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *DeleteOrganizationInvitationDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return organizationInvitationServiceDescriptor
}

func (d *DeleteOrganizationInvitationDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return organization_invitation.GetDescriptor()
}

func (d *DeleteOrganizationInvitationDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteOrganizationInvitationDescriptorClientMsgHandle{}
}

func (d *DeleteOrganizationInvitationDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteOrganizationInvitationDescriptorServerMsgHandle{}
}

func (h *DeleteOrganizationInvitationDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteOrganizationInvitationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*DeleteOrganizationInvitationRequest) *organization_invitation.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*organization_invitation.Name)(nil)
}

func (h *DeleteOrganizationInvitationDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*DeleteOrganizationInvitationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*DeleteOrganizationInvitationRequest) []*organization_invitation.Name
	})
	if ok {
		return organization_invitation.OrganizationInvitationNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteOrganizationInvitationDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteOrganizationInvitationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*DeleteOrganizationInvitationRequest) *organization_invitation.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *DeleteOrganizationInvitationDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*empty.Empty) *organization_invitation.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *DeleteOrganizationInvitationDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*empty.Empty) []*organization_invitation.Name
	})
	if ok {
		return organization_invitation.OrganizationInvitationNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteOrganizationInvitationDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*empty.Empty) *organization_invitation.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetDeleteOrganizationInvitationDescriptor() *DeleteOrganizationInvitationDescriptor {
	return deleteOrganizationInvitationDescriptor
}

type AcceptOrganizationInvitationDescriptor struct{}

type AcceptOrganizationInvitationDescriptorClientMsgHandle struct{}

type AcceptOrganizationInvitationDescriptorServerMsgHandle struct{}

func (d *AcceptOrganizationInvitationDescriptor) NewEmptyClientMsg() proto.Message {
	return &AcceptOrganizationInvitationRequest{}
}

func (d *AcceptOrganizationInvitationDescriptor) NewEmptyServerMsg() proto.Message {
	return &AcceptOrganizationInvitationResponse{}
}

func (d *AcceptOrganizationInvitationDescriptor) IsUnary() bool {
	return true
}

func (d *AcceptOrganizationInvitationDescriptor) IsClientStream() bool {
	return false
}

func (d *AcceptOrganizationInvitationDescriptor) IsServerStream() bool {
	return false
}

func (d *AcceptOrganizationInvitationDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *AcceptOrganizationInvitationDescriptor) IsPluralSubject() bool {
	return false
}

func (d *AcceptOrganizationInvitationDescriptor) HasSubjectResource() bool {
	return true
}

func (d *AcceptOrganizationInvitationDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *AcceptOrganizationInvitationDescriptor) GetVerb() string {
	return "accept"
}

func (d *AcceptOrganizationInvitationDescriptor) GetMethodName() string {
	return "AcceptOrganizationInvitation"
}

func (d *AcceptOrganizationInvitationDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1alpha2.OrganizationInvitationService/AcceptOrganizationInvitation"
}

func (d *AcceptOrganizationInvitationDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha2"
}

func (d *AcceptOrganizationInvitationDescriptor) GetApiName() string {
	return "OrganizationInvitationService"
}

func (d *AcceptOrganizationInvitationDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *AcceptOrganizationInvitationDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *AcceptOrganizationInvitationDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return organizationInvitationServiceDescriptor
}

func (d *AcceptOrganizationInvitationDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return organization_invitation.GetDescriptor()
}

func (d *AcceptOrganizationInvitationDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &AcceptOrganizationInvitationDescriptorClientMsgHandle{}
}

func (d *AcceptOrganizationInvitationDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &AcceptOrganizationInvitationDescriptorServerMsgHandle{}
}

func (h *AcceptOrganizationInvitationDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*AcceptOrganizationInvitationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*AcceptOrganizationInvitationRequest) *organization_invitation.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*organization_invitation.Name)(nil)
}

func (h *AcceptOrganizationInvitationDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*AcceptOrganizationInvitationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*AcceptOrganizationInvitationRequest) []*organization_invitation.Name
	})
	if ok {
		return organization_invitation.OrganizationInvitationNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *AcceptOrganizationInvitationDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*AcceptOrganizationInvitationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*AcceptOrganizationInvitationRequest) *organization_invitation.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *AcceptOrganizationInvitationDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*AcceptOrganizationInvitationResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*AcceptOrganizationInvitationResponse) *organization_invitation.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *AcceptOrganizationInvitationDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*AcceptOrganizationInvitationResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*AcceptOrganizationInvitationResponse) []*organization_invitation.Name
	})
	if ok {
		return organization_invitation.OrganizationInvitationNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *AcceptOrganizationInvitationDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*AcceptOrganizationInvitationResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*AcceptOrganizationInvitationResponse) *organization_invitation.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetAcceptOrganizationInvitationDescriptor() *AcceptOrganizationInvitationDescriptor {
	return acceptOrganizationInvitationDescriptor
}

type DeclineOrganizationInvitationDescriptor struct{}

type DeclineOrganizationInvitationDescriptorClientMsgHandle struct{}

type DeclineOrganizationInvitationDescriptorServerMsgHandle struct{}

func (d *DeclineOrganizationInvitationDescriptor) NewEmptyClientMsg() proto.Message {
	return &DeclineOrganizationInvitationRequest{}
}

func (d *DeclineOrganizationInvitationDescriptor) NewEmptyServerMsg() proto.Message {
	return &DeclineOrganizationInvitationResponse{}
}

func (d *DeclineOrganizationInvitationDescriptor) IsUnary() bool {
	return true
}

func (d *DeclineOrganizationInvitationDescriptor) IsClientStream() bool {
	return false
}

func (d *DeclineOrganizationInvitationDescriptor) IsServerStream() bool {
	return false
}

func (d *DeclineOrganizationInvitationDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *DeclineOrganizationInvitationDescriptor) IsPluralSubject() bool {
	return false
}

func (d *DeclineOrganizationInvitationDescriptor) HasSubjectResource() bool {
	return true
}

func (d *DeclineOrganizationInvitationDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *DeclineOrganizationInvitationDescriptor) GetVerb() string {
	return "decline"
}

func (d *DeclineOrganizationInvitationDescriptor) GetMethodName() string {
	return "DeclineOrganizationInvitation"
}

func (d *DeclineOrganizationInvitationDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1alpha2.OrganizationInvitationService/DeclineOrganizationInvitation"
}

func (d *DeclineOrganizationInvitationDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha2"
}

func (d *DeclineOrganizationInvitationDescriptor) GetApiName() string {
	return "OrganizationInvitationService"
}

func (d *DeclineOrganizationInvitationDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *DeclineOrganizationInvitationDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *DeclineOrganizationInvitationDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return organizationInvitationServiceDescriptor
}

func (d *DeclineOrganizationInvitationDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return organization_invitation.GetDescriptor()
}

func (d *DeclineOrganizationInvitationDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeclineOrganizationInvitationDescriptorClientMsgHandle{}
}

func (d *DeclineOrganizationInvitationDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeclineOrganizationInvitationDescriptorServerMsgHandle{}
}

func (h *DeclineOrganizationInvitationDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeclineOrganizationInvitationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*DeclineOrganizationInvitationRequest) *organization_invitation.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*organization_invitation.Name)(nil)
}

func (h *DeclineOrganizationInvitationDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*DeclineOrganizationInvitationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*DeclineOrganizationInvitationRequest) []*organization_invitation.Name
	})
	if ok {
		return organization_invitation.OrganizationInvitationNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *DeclineOrganizationInvitationDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeclineOrganizationInvitationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*DeclineOrganizationInvitationRequest) *organization_invitation.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *DeclineOrganizationInvitationDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeclineOrganizationInvitationResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*DeclineOrganizationInvitationResponse) *organization_invitation.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *DeclineOrganizationInvitationDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*DeclineOrganizationInvitationResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*DeclineOrganizationInvitationResponse) []*organization_invitation.Name
	})
	if ok {
		return organization_invitation.OrganizationInvitationNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *DeclineOrganizationInvitationDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeclineOrganizationInvitationResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*DeclineOrganizationInvitationResponse) *organization_invitation.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetDeclineOrganizationInvitationDescriptor() *DeclineOrganizationInvitationDescriptor {
	return declineOrganizationInvitationDescriptor
}

type ListMyOrganizationInvitationsDescriptor struct{}

type ListMyOrganizationInvitationsDescriptorClientMsgHandle struct{}

type ListMyOrganizationInvitationsDescriptorServerMsgHandle struct{}

func (d *ListMyOrganizationInvitationsDescriptor) NewEmptyClientMsg() proto.Message {
	return &ListMyOrganizationInvitationsRequest{}
}

func (d *ListMyOrganizationInvitationsDescriptor) NewEmptyServerMsg() proto.Message {
	return &ListMyOrganizationInvitationsResponse{}
}

func (d *ListMyOrganizationInvitationsDescriptor) IsUnary() bool {
	return true
}

func (d *ListMyOrganizationInvitationsDescriptor) IsClientStream() bool {
	return false
}

func (d *ListMyOrganizationInvitationsDescriptor) IsServerStream() bool {
	return false
}

func (d *ListMyOrganizationInvitationsDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *ListMyOrganizationInvitationsDescriptor) IsPluralSubject() bool {
	return true
}

func (d *ListMyOrganizationInvitationsDescriptor) HasSubjectResource() bool {
	return true
}

func (d *ListMyOrganizationInvitationsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ListMyOrganizationInvitationsDescriptor) GetVerb() string {
	return "listMy"
}

func (d *ListMyOrganizationInvitationsDescriptor) GetMethodName() string {
	return "ListMyOrganizationInvitations"
}

func (d *ListMyOrganizationInvitationsDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1alpha2.OrganizationInvitationService/ListMyOrganizationInvitations"
}

func (d *ListMyOrganizationInvitationsDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha2"
}

func (d *ListMyOrganizationInvitationsDescriptor) GetApiName() string {
	return "OrganizationInvitationService"
}

func (d *ListMyOrganizationInvitationsDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *ListMyOrganizationInvitationsDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *ListMyOrganizationInvitationsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return organizationInvitationServiceDescriptor
}

func (d *ListMyOrganizationInvitationsDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return organization_invitation.GetDescriptor()
}

func (d *ListMyOrganizationInvitationsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListMyOrganizationInvitationsDescriptorClientMsgHandle{}
}

func (d *ListMyOrganizationInvitationsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListMyOrganizationInvitationsDescriptorServerMsgHandle{}
}

func (h *ListMyOrganizationInvitationsDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListMyOrganizationInvitationsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*ListMyOrganizationInvitationsRequest) *organization_invitation.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *ListMyOrganizationInvitationsDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListMyOrganizationInvitationsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*ListMyOrganizationInvitationsRequest) []*organization_invitation.Name
	})
	if ok {
		return organization_invitation.OrganizationInvitationNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *ListMyOrganizationInvitationsDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListMyOrganizationInvitationsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*ListMyOrganizationInvitationsRequest) *organization_invitation.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	if ref := typedMsg.GetParent(); ref != nil {
		return &ref.ParentName
	}
	return (*organization_invitation.ParentName)(nil)
}

func (h *ListMyOrganizationInvitationsDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListMyOrganizationInvitationsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*ListMyOrganizationInvitationsResponse) *organization_invitation.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *ListMyOrganizationInvitationsDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListMyOrganizationInvitationsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*ListMyOrganizationInvitationsResponse) []*organization_invitation.Name
	})
	if ok {
		return organization_invitation.OrganizationInvitationNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	resources := typedMsg.GetOrganizationInvitations()
	list := make(organization_invitation.OrganizationInvitationNameList, 0, len(resources))
	for _, res := range resources {
		list = append(list, res.GetName())
	}
	return list
}

func (h *ListMyOrganizationInvitationsDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListMyOrganizationInvitationsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*ListMyOrganizationInvitationsResponse) *organization_invitation.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetListMyOrganizationInvitationsDescriptor() *ListMyOrganizationInvitationsDescriptor {
	return listMyOrganizationInvitationsDescriptor
}

type OrganizationInvitationServiceDescriptor struct{}

func (d *OrganizationInvitationServiceDescriptor) AllMethodDescriptors() []gotenclient.MethodDescriptor {
	return []gotenclient.MethodDescriptor{
		getOrganizationInvitationDescriptor,
		batchGetOrganizationInvitationsDescriptor,
		listOrganizationInvitationsDescriptor,
		watchOrganizationInvitationDescriptor,
		watchOrganizationInvitationsDescriptor,
		createOrganizationInvitationDescriptor,
		updateOrganizationInvitationDescriptor,
		deleteOrganizationInvitationDescriptor,
		acceptOrganizationInvitationDescriptor,
		declineOrganizationInvitationDescriptor,
		listMyOrganizationInvitationsDescriptor,
	}
}

func (d *OrganizationInvitationServiceDescriptor) GetFullAPIName() string {
	return "/ntt.iam.v1alpha2.OrganizationInvitationService"
}

func (d *OrganizationInvitationServiceDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha2"
}

func (d *OrganizationInvitationServiceDescriptor) GetApiName() string {
	return "OrganizationInvitationService"
}

func (d *OrganizationInvitationServiceDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *OrganizationInvitationServiceDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func GetOrganizationInvitationServiceDescriptor() *OrganizationInvitationServiceDescriptor {
	return organizationInvitationServiceDescriptor
}

func initDescriptors() {
	organizationInvitationServiceDescriptor = &OrganizationInvitationServiceDescriptor{}
	getOrganizationInvitationDescriptor = &GetOrganizationInvitationDescriptor{}
	batchGetOrganizationInvitationsDescriptor = &BatchGetOrganizationInvitationsDescriptor{}
	listOrganizationInvitationsDescriptor = &ListOrganizationInvitationsDescriptor{}
	watchOrganizationInvitationDescriptor = &WatchOrganizationInvitationDescriptor{}
	watchOrganizationInvitationsDescriptor = &WatchOrganizationInvitationsDescriptor{}
	createOrganizationInvitationDescriptor = &CreateOrganizationInvitationDescriptor{}
	updateOrganizationInvitationDescriptor = &UpdateOrganizationInvitationDescriptor{}
	deleteOrganizationInvitationDescriptor = &DeleteOrganizationInvitationDescriptor{}
	acceptOrganizationInvitationDescriptor = &AcceptOrganizationInvitationDescriptor{}
	declineOrganizationInvitationDescriptor = &DeclineOrganizationInvitationDescriptor{}
	listMyOrganizationInvitationsDescriptor = &ListMyOrganizationInvitationsDescriptor{}
	gotenclient.GetRegistry().RegisterApiDescriptor(organizationInvitationServiceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(getOrganizationInvitationDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(batchGetOrganizationInvitationsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(listOrganizationInvitationsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchOrganizationInvitationDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchOrganizationInvitationsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(createOrganizationInvitationDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(updateOrganizationInvitationDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(deleteOrganizationInvitationDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(acceptOrganizationInvitationDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(declineOrganizationInvitationDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(listMyOrganizationInvitationsDescriptor)
}

func init() {
	if !descriptorsInitialized {
		initDescriptors()
		descriptorsInitialized = true
	}
}
