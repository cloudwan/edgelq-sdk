// Code generated by protoc-gen-goten-client
// API: AttestationDomainService
// DO NOT EDIT!!!

package attestation_domain_client

import (
	"context"

	"google.golang.org/grpc"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	attestation_domain "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/attestation_domain"
	empty "github.com/golang/protobuf/ptypes/empty"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = protoimpl.DescBuilder{}
	_ = context.Context(nil)
	_ = grpc.ClientConn{}
)

// make sure we're using proto imports
var (
	_ = &attestation_domain.AttestationDomain{}
	_ = &empty.Empty{}
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AttestationDomainServiceClient is the client API for AttestationDomainService.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AttestationDomainServiceClient interface {
	GetAttestationDomain(ctx context.Context, in *GetAttestationDomainRequest, opts ...grpc.CallOption) (*attestation_domain.AttestationDomain, error)
	BatchGetAttestationDomains(ctx context.Context, in *BatchGetAttestationDomainsRequest, opts ...grpc.CallOption) (*BatchGetAttestationDomainsResponse, error)
	ListAttestationDomains(ctx context.Context, in *ListAttestationDomainsRequest, opts ...grpc.CallOption) (*ListAttestationDomainsResponse, error)
	WatchAttestationDomain(ctx context.Context, in *WatchAttestationDomainRequest, opts ...grpc.CallOption) (WatchAttestationDomainClientStream, error)
	WatchAttestationDomains(ctx context.Context, in *WatchAttestationDomainsRequest, opts ...grpc.CallOption) (WatchAttestationDomainsClientStream, error)
	CreateAttestationDomain(ctx context.Context, in *CreateAttestationDomainRequest, opts ...grpc.CallOption) (*attestation_domain.AttestationDomain, error)
	UpdateAttestationDomain(ctx context.Context, in *UpdateAttestationDomainRequest, opts ...grpc.CallOption) (*attestation_domain.AttestationDomain, error)
	DeleteAttestationDomain(ctx context.Context, in *DeleteAttestationDomainRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type client struct {
	cc grpc.ClientConnInterface
}

func NewAttestationDomainServiceClient(cc grpc.ClientConnInterface) AttestationDomainServiceClient {
	return &client{cc}
}

func (c *client) GetAttestationDomain(ctx context.Context, in *GetAttestationDomainRequest, opts ...grpc.CallOption) (*attestation_domain.AttestationDomain, error) {
	out := new(attestation_domain.AttestationDomain)
	err := c.cc.Invoke(ctx, "/ntt.iam.v1alpha2.AttestationDomainService/GetAttestationDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) BatchGetAttestationDomains(ctx context.Context, in *BatchGetAttestationDomainsRequest, opts ...grpc.CallOption) (*BatchGetAttestationDomainsResponse, error) {
	out := new(BatchGetAttestationDomainsResponse)
	err := c.cc.Invoke(ctx, "/ntt.iam.v1alpha2.AttestationDomainService/BatchGetAttestationDomains", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListAttestationDomains(ctx context.Context, in *ListAttestationDomainsRequest, opts ...grpc.CallOption) (*ListAttestationDomainsResponse, error) {
	out := new(ListAttestationDomainsResponse)
	err := c.cc.Invoke(ctx, "/ntt.iam.v1alpha2.AttestationDomainService/ListAttestationDomains", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) WatchAttestationDomain(ctx context.Context, in *WatchAttestationDomainRequest, opts ...grpc.CallOption) (WatchAttestationDomainClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchAttestationDomain",
			ServerStreams: true,
		},
		"/ntt.iam.v1alpha2.AttestationDomainService/WatchAttestationDomain", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchAttestationDomainWatchAttestationDomainClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchAttestationDomainClientStream interface {
	Recv() (*WatchAttestationDomainResponse, error)
	grpc.ClientStream
}

type watchAttestationDomainWatchAttestationDomainClient struct {
	grpc.ClientStream
}

func (x *watchAttestationDomainWatchAttestationDomainClient) Recv() (*WatchAttestationDomainResponse, error) {
	m := new(WatchAttestationDomainResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) WatchAttestationDomains(ctx context.Context, in *WatchAttestationDomainsRequest, opts ...grpc.CallOption) (WatchAttestationDomainsClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchAttestationDomains",
			ServerStreams: true,
		},
		"/ntt.iam.v1alpha2.AttestationDomainService/WatchAttestationDomains", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchAttestationDomainsWatchAttestationDomainsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchAttestationDomainsClientStream interface {
	Recv() (*WatchAttestationDomainsResponse, error)
	grpc.ClientStream
}

type watchAttestationDomainsWatchAttestationDomainsClient struct {
	grpc.ClientStream
}

func (x *watchAttestationDomainsWatchAttestationDomainsClient) Recv() (*WatchAttestationDomainsResponse, error) {
	m := new(WatchAttestationDomainsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) CreateAttestationDomain(ctx context.Context, in *CreateAttestationDomainRequest, opts ...grpc.CallOption) (*attestation_domain.AttestationDomain, error) {
	out := new(attestation_domain.AttestationDomain)
	err := c.cc.Invoke(ctx, "/ntt.iam.v1alpha2.AttestationDomainService/CreateAttestationDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateAttestationDomain(ctx context.Context, in *UpdateAttestationDomainRequest, opts ...grpc.CallOption) (*attestation_domain.AttestationDomain, error) {
	out := new(attestation_domain.AttestationDomain)
	err := c.cc.Invoke(ctx, "/ntt.iam.v1alpha2.AttestationDomainService/UpdateAttestationDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeleteAttestationDomain(ctx context.Context, in *DeleteAttestationDomainRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ntt.iam.v1alpha2.AttestationDomainService/DeleteAttestationDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
