// Code generated by protoc-gen-goten-object
// File: edgelq/iam/proto/v1alpha2/attestation_domain_service.proto
// DO NOT EDIT!!!

package attestation_domain_client

import (
	"encoding/json"
	"strings"

	firestorepb "google.golang.org/genproto/googleapis/firestore/v1"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	attestation_domain "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/attestation_domain"
	project "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/project"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	empty "github.com/golang/protobuf/ptypes/empty"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = json.Marshaler(nil)
	_ = strings.Builder{}

	_ = firestorepb.Value{}
	_ = codes.NotFound
	_ = status.Status{}
	_ = proto.Message(nil)
	_ = preflect.Message(nil)
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldMask(nil)
)

// make sure we're using proto imports
var (
	_ = &attestation_domain.AttestationDomain{}
	_ = &project.Project{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

type GetAttestationDomainRequest_FieldMask struct {
	Paths []GetAttestationDomainRequest_FieldPath
}

func FullGetAttestationDomainRequest_FieldMask() *GetAttestationDomainRequest_FieldMask {
	res := &GetAttestationDomainRequest_FieldMask{}
	res.Paths = append(res.Paths, &GetAttestationDomainRequest_FieldTerminalPath{selector: GetAttestationDomainRequest_FieldPathSelectorName})
	res.Paths = append(res.Paths, &GetAttestationDomainRequest_FieldTerminalPath{selector: GetAttestationDomainRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &GetAttestationDomainRequest_FieldTerminalPath{selector: GetAttestationDomainRequest_FieldPathSelectorView})
	return res
}

func (fieldMask *GetAttestationDomainRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *GetAttestationDomainRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *GetAttestationDomainRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseGetAttestationDomainRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *GetAttestationDomainRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*GetAttestationDomainRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *GetAttestationDomainRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseGetAttestationDomainRequest_FieldPath(raw)
	})
}

func (fieldMask *GetAttestationDomainRequest_FieldMask) ProtoMessage() {}

func (fieldMask *GetAttestationDomainRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *GetAttestationDomainRequest_FieldMask) Subtract(other *GetAttestationDomainRequest_FieldMask) *GetAttestationDomainRequest_FieldMask {
	result := &GetAttestationDomainRequest_FieldMask{}
	removedSelectors := make([]bool, 3)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *GetAttestationDomainRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *GetAttestationDomainRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*GetAttestationDomainRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *GetAttestationDomainRequest_FieldMask) FilterInputFields() *GetAttestationDomainRequest_FieldMask {
	result := &GetAttestationDomainRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *GetAttestationDomainRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *GetAttestationDomainRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]GetAttestationDomainRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseGetAttestationDomainRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask GetAttestationDomainRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *GetAttestationDomainRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *GetAttestationDomainRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask GetAttestationDomainRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *GetAttestationDomainRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *GetAttestationDomainRequest_FieldMask) AppendPath(path GetAttestationDomainRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *GetAttestationDomainRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(GetAttestationDomainRequest_FieldPath))
}

func (fieldMask *GetAttestationDomainRequest_FieldMask) GetPaths() []GetAttestationDomainRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *GetAttestationDomainRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *GetAttestationDomainRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseGetAttestationDomainRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *GetAttestationDomainRequest_FieldMask) Set(target, source *GetAttestationDomainRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *GetAttestationDomainRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*GetAttestationDomainRequest), source.(*GetAttestationDomainRequest))
}

func (fieldMask *GetAttestationDomainRequest_FieldMask) Project(source *GetAttestationDomainRequest) *GetAttestationDomainRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &GetAttestationDomainRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *GetAttestationDomainRequest_FieldTerminalPath:
			switch tp.selector {
			case GetAttestationDomainRequest_FieldPathSelectorName:
				result.Name = source.Name
			case GetAttestationDomainRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case GetAttestationDomainRequest_FieldPathSelectorView:
				result.View = source.View
			}
		}
	}
	return result
}

func (fieldMask *GetAttestationDomainRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*GetAttestationDomainRequest))
}

func (fieldMask *GetAttestationDomainRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type BatchGetAttestationDomainsRequest_FieldMask struct {
	Paths []BatchGetAttestationDomainsRequest_FieldPath
}

func FullBatchGetAttestationDomainsRequest_FieldMask() *BatchGetAttestationDomainsRequest_FieldMask {
	res := &BatchGetAttestationDomainsRequest_FieldMask{}
	res.Paths = append(res.Paths, &BatchGetAttestationDomainsRequest_FieldTerminalPath{selector: BatchGetAttestationDomainsRequest_FieldPathSelectorNames})
	res.Paths = append(res.Paths, &BatchGetAttestationDomainsRequest_FieldTerminalPath{selector: BatchGetAttestationDomainsRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &BatchGetAttestationDomainsRequest_FieldTerminalPath{selector: BatchGetAttestationDomainsRequest_FieldPathSelectorView})
	return res
}

func (fieldMask *BatchGetAttestationDomainsRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *BatchGetAttestationDomainsRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *BatchGetAttestationDomainsRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseBatchGetAttestationDomainsRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *BatchGetAttestationDomainsRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*BatchGetAttestationDomainsRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *BatchGetAttestationDomainsRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseBatchGetAttestationDomainsRequest_FieldPath(raw)
	})
}

func (fieldMask *BatchGetAttestationDomainsRequest_FieldMask) ProtoMessage() {}

func (fieldMask *BatchGetAttestationDomainsRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *BatchGetAttestationDomainsRequest_FieldMask) Subtract(other *BatchGetAttestationDomainsRequest_FieldMask) *BatchGetAttestationDomainsRequest_FieldMask {
	result := &BatchGetAttestationDomainsRequest_FieldMask{}
	removedSelectors := make([]bool, 3)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *BatchGetAttestationDomainsRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *BatchGetAttestationDomainsRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*BatchGetAttestationDomainsRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *BatchGetAttestationDomainsRequest_FieldMask) FilterInputFields() *BatchGetAttestationDomainsRequest_FieldMask {
	result := &BatchGetAttestationDomainsRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *BatchGetAttestationDomainsRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *BatchGetAttestationDomainsRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]BatchGetAttestationDomainsRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseBatchGetAttestationDomainsRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask BatchGetAttestationDomainsRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *BatchGetAttestationDomainsRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *BatchGetAttestationDomainsRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask BatchGetAttestationDomainsRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *BatchGetAttestationDomainsRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *BatchGetAttestationDomainsRequest_FieldMask) AppendPath(path BatchGetAttestationDomainsRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *BatchGetAttestationDomainsRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(BatchGetAttestationDomainsRequest_FieldPath))
}

func (fieldMask *BatchGetAttestationDomainsRequest_FieldMask) GetPaths() []BatchGetAttestationDomainsRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *BatchGetAttestationDomainsRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *BatchGetAttestationDomainsRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseBatchGetAttestationDomainsRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *BatchGetAttestationDomainsRequest_FieldMask) Set(target, source *BatchGetAttestationDomainsRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *BatchGetAttestationDomainsRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*BatchGetAttestationDomainsRequest), source.(*BatchGetAttestationDomainsRequest))
}

func (fieldMask *BatchGetAttestationDomainsRequest_FieldMask) Project(source *BatchGetAttestationDomainsRequest) *BatchGetAttestationDomainsRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &BatchGetAttestationDomainsRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *BatchGetAttestationDomainsRequest_FieldTerminalPath:
			switch tp.selector {
			case BatchGetAttestationDomainsRequest_FieldPathSelectorNames:
				result.Names = source.Names
			case BatchGetAttestationDomainsRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case BatchGetAttestationDomainsRequest_FieldPathSelectorView:
				result.View = source.View
			}
		}
	}
	return result
}

func (fieldMask *BatchGetAttestationDomainsRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*BatchGetAttestationDomainsRequest))
}

func (fieldMask *BatchGetAttestationDomainsRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type BatchGetAttestationDomainsResponse_FieldMask struct {
	Paths []BatchGetAttestationDomainsResponse_FieldPath
}

func FullBatchGetAttestationDomainsResponse_FieldMask() *BatchGetAttestationDomainsResponse_FieldMask {
	res := &BatchGetAttestationDomainsResponse_FieldMask{}
	res.Paths = append(res.Paths, &BatchGetAttestationDomainsResponse_FieldTerminalPath{selector: BatchGetAttestationDomainsResponse_FieldPathSelectorAttestationDomains})
	res.Paths = append(res.Paths, &BatchGetAttestationDomainsResponse_FieldTerminalPath{selector: BatchGetAttestationDomainsResponse_FieldPathSelectorMissing})
	return res
}

func (fieldMask *BatchGetAttestationDomainsResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *BatchGetAttestationDomainsResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *BatchGetAttestationDomainsResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseBatchGetAttestationDomainsResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *BatchGetAttestationDomainsResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*BatchGetAttestationDomainsResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *BatchGetAttestationDomainsResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseBatchGetAttestationDomainsResponse_FieldPath(raw)
	})
}

func (fieldMask *BatchGetAttestationDomainsResponse_FieldMask) ProtoMessage() {}

func (fieldMask *BatchGetAttestationDomainsResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *BatchGetAttestationDomainsResponse_FieldMask) Subtract(other *BatchGetAttestationDomainsResponse_FieldMask) *BatchGetAttestationDomainsResponse_FieldMask {
	result := &BatchGetAttestationDomainsResponse_FieldMask{}
	removedSelectors := make([]bool, 2)
	otherSubMasks := map[BatchGetAttestationDomainsResponse_FieldPathSelector]gotenobject.FieldMask{
		BatchGetAttestationDomainsResponse_FieldPathSelectorAttestationDomains: &attestation_domain.AttestationDomain_FieldMask{},
	}
	mySubMasks := map[BatchGetAttestationDomainsResponse_FieldPathSelector]gotenobject.FieldMask{
		BatchGetAttestationDomainsResponse_FieldPathSelectorAttestationDomains: &attestation_domain.AttestationDomain_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *BatchGetAttestationDomainsResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *BatchGetAttestationDomainsResponse_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*BatchGetAttestationDomainsResponse_FieldTerminalPath); ok {
					switch tp.selector {
					case BatchGetAttestationDomainsResponse_FieldPathSelectorAttestationDomains:
						mySubMasks[BatchGetAttestationDomainsResponse_FieldPathSelectorAttestationDomains] = attestation_domain.FullAttestationDomain_FieldMask()
					}
				} else if tp, ok := path.(*BatchGetAttestationDomainsResponse_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &BatchGetAttestationDomainsResponse_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *BatchGetAttestationDomainsResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*BatchGetAttestationDomainsResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *BatchGetAttestationDomainsResponse_FieldMask) FilterInputFields() *BatchGetAttestationDomainsResponse_FieldMask {
	result := &BatchGetAttestationDomainsResponse_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case BatchGetAttestationDomainsResponse_FieldPathSelectorAttestationDomains:
			if _, ok := path.(*BatchGetAttestationDomainsResponse_FieldTerminalPath); ok {
				for _, subpath := range attestation_domain.FullAttestationDomain_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &BatchGetAttestationDomainsResponse_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*BatchGetAttestationDomainsResponse_FieldSubPath); ok {
				selectedMask := &attestation_domain.AttestationDomain_FieldMask{
					Paths: []attestation_domain.AttestationDomain_FieldPath{sub.subPath.(attestation_domain.AttestationDomain_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &BatchGetAttestationDomainsResponse_FieldSubPath{selector: BatchGetAttestationDomainsResponse_FieldPathSelectorAttestationDomains, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *BatchGetAttestationDomainsResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *BatchGetAttestationDomainsResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]BatchGetAttestationDomainsResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseBatchGetAttestationDomainsResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask BatchGetAttestationDomainsResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *BatchGetAttestationDomainsResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *BatchGetAttestationDomainsResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask BatchGetAttestationDomainsResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *BatchGetAttestationDomainsResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *BatchGetAttestationDomainsResponse_FieldMask) AppendPath(path BatchGetAttestationDomainsResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *BatchGetAttestationDomainsResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(BatchGetAttestationDomainsResponse_FieldPath))
}

func (fieldMask *BatchGetAttestationDomainsResponse_FieldMask) GetPaths() []BatchGetAttestationDomainsResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *BatchGetAttestationDomainsResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *BatchGetAttestationDomainsResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseBatchGetAttestationDomainsResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *BatchGetAttestationDomainsResponse_FieldMask) Set(target, source *BatchGetAttestationDomainsResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *BatchGetAttestationDomainsResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*BatchGetAttestationDomainsResponse), source.(*BatchGetAttestationDomainsResponse))
}

func (fieldMask *BatchGetAttestationDomainsResponse_FieldMask) Project(source *BatchGetAttestationDomainsResponse) *BatchGetAttestationDomainsResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &BatchGetAttestationDomainsResponse{}
	attestationDomainsMask := &attestation_domain.AttestationDomain_FieldMask{}
	wholeAttestationDomainsAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *BatchGetAttestationDomainsResponse_FieldTerminalPath:
			switch tp.selector {
			case BatchGetAttestationDomainsResponse_FieldPathSelectorAttestationDomains:
				result.AttestationDomains = source.AttestationDomains
				wholeAttestationDomainsAccepted = true
			case BatchGetAttestationDomainsResponse_FieldPathSelectorMissing:
				result.Missing = source.Missing
			}
		case *BatchGetAttestationDomainsResponse_FieldSubPath:
			switch tp.selector {
			case BatchGetAttestationDomainsResponse_FieldPathSelectorAttestationDomains:
				attestationDomainsMask.AppendPath(tp.subPath.(attestation_domain.AttestationDomain_FieldPath))
			}
		}
	}
	if wholeAttestationDomainsAccepted == false && len(attestationDomainsMask.Paths) > 0 {
		for _, sourceItem := range source.GetAttestationDomains() {
			result.AttestationDomains = append(result.AttestationDomains, attestationDomainsMask.Project(sourceItem))
		}
	}
	return result
}

func (fieldMask *BatchGetAttestationDomainsResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*BatchGetAttestationDomainsResponse))
}

func (fieldMask *BatchGetAttestationDomainsResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type ListAttestationDomainsRequest_FieldMask struct {
	Paths []ListAttestationDomainsRequest_FieldPath
}

func FullListAttestationDomainsRequest_FieldMask() *ListAttestationDomainsRequest_FieldMask {
	res := &ListAttestationDomainsRequest_FieldMask{}
	res.Paths = append(res.Paths, &ListAttestationDomainsRequest_FieldTerminalPath{selector: ListAttestationDomainsRequest_FieldPathSelectorParent})
	res.Paths = append(res.Paths, &ListAttestationDomainsRequest_FieldTerminalPath{selector: ListAttestationDomainsRequest_FieldPathSelectorPageSize})
	res.Paths = append(res.Paths, &ListAttestationDomainsRequest_FieldTerminalPath{selector: ListAttestationDomainsRequest_FieldPathSelectorPageToken})
	res.Paths = append(res.Paths, &ListAttestationDomainsRequest_FieldTerminalPath{selector: ListAttestationDomainsRequest_FieldPathSelectorOrderBy})
	res.Paths = append(res.Paths, &ListAttestationDomainsRequest_FieldTerminalPath{selector: ListAttestationDomainsRequest_FieldPathSelectorFilter})
	res.Paths = append(res.Paths, &ListAttestationDomainsRequest_FieldTerminalPath{selector: ListAttestationDomainsRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &ListAttestationDomainsRequest_FieldTerminalPath{selector: ListAttestationDomainsRequest_FieldPathSelectorView})
	return res
}

func (fieldMask *ListAttestationDomainsRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *ListAttestationDomainsRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *ListAttestationDomainsRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseListAttestationDomainsRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *ListAttestationDomainsRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 7)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*ListAttestationDomainsRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *ListAttestationDomainsRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseListAttestationDomainsRequest_FieldPath(raw)
	})
}

func (fieldMask *ListAttestationDomainsRequest_FieldMask) ProtoMessage() {}

func (fieldMask *ListAttestationDomainsRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *ListAttestationDomainsRequest_FieldMask) Subtract(other *ListAttestationDomainsRequest_FieldMask) *ListAttestationDomainsRequest_FieldMask {
	result := &ListAttestationDomainsRequest_FieldMask{}
	removedSelectors := make([]bool, 7)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *ListAttestationDomainsRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *ListAttestationDomainsRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*ListAttestationDomainsRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *ListAttestationDomainsRequest_FieldMask) FilterInputFields() *ListAttestationDomainsRequest_FieldMask {
	result := &ListAttestationDomainsRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *ListAttestationDomainsRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *ListAttestationDomainsRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]ListAttestationDomainsRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseListAttestationDomainsRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask ListAttestationDomainsRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *ListAttestationDomainsRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ListAttestationDomainsRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask ListAttestationDomainsRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *ListAttestationDomainsRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ListAttestationDomainsRequest_FieldMask) AppendPath(path ListAttestationDomainsRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *ListAttestationDomainsRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(ListAttestationDomainsRequest_FieldPath))
}

func (fieldMask *ListAttestationDomainsRequest_FieldMask) GetPaths() []ListAttestationDomainsRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *ListAttestationDomainsRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *ListAttestationDomainsRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseListAttestationDomainsRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *ListAttestationDomainsRequest_FieldMask) Set(target, source *ListAttestationDomainsRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *ListAttestationDomainsRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*ListAttestationDomainsRequest), source.(*ListAttestationDomainsRequest))
}

func (fieldMask *ListAttestationDomainsRequest_FieldMask) Project(source *ListAttestationDomainsRequest) *ListAttestationDomainsRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &ListAttestationDomainsRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *ListAttestationDomainsRequest_FieldTerminalPath:
			switch tp.selector {
			case ListAttestationDomainsRequest_FieldPathSelectorParent:
				result.Parent = source.Parent
			case ListAttestationDomainsRequest_FieldPathSelectorPageSize:
				result.PageSize = source.PageSize
			case ListAttestationDomainsRequest_FieldPathSelectorPageToken:
				result.PageToken = source.PageToken
			case ListAttestationDomainsRequest_FieldPathSelectorOrderBy:
				result.OrderBy = source.OrderBy
			case ListAttestationDomainsRequest_FieldPathSelectorFilter:
				result.Filter = source.Filter
			case ListAttestationDomainsRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case ListAttestationDomainsRequest_FieldPathSelectorView:
				result.View = source.View
			}
		}
	}
	return result
}

func (fieldMask *ListAttestationDomainsRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*ListAttestationDomainsRequest))
}

func (fieldMask *ListAttestationDomainsRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type ListAttestationDomainsResponse_FieldMask struct {
	Paths []ListAttestationDomainsResponse_FieldPath
}

func FullListAttestationDomainsResponse_FieldMask() *ListAttestationDomainsResponse_FieldMask {
	res := &ListAttestationDomainsResponse_FieldMask{}
	res.Paths = append(res.Paths, &ListAttestationDomainsResponse_FieldTerminalPath{selector: ListAttestationDomainsResponse_FieldPathSelectorAttestationDomains})
	res.Paths = append(res.Paths, &ListAttestationDomainsResponse_FieldTerminalPath{selector: ListAttestationDomainsResponse_FieldPathSelectorPrevPageToken})
	res.Paths = append(res.Paths, &ListAttestationDomainsResponse_FieldTerminalPath{selector: ListAttestationDomainsResponse_FieldPathSelectorNextPageToken})
	return res
}

func (fieldMask *ListAttestationDomainsResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *ListAttestationDomainsResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *ListAttestationDomainsResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseListAttestationDomainsResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *ListAttestationDomainsResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*ListAttestationDomainsResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *ListAttestationDomainsResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseListAttestationDomainsResponse_FieldPath(raw)
	})
}

func (fieldMask *ListAttestationDomainsResponse_FieldMask) ProtoMessage() {}

func (fieldMask *ListAttestationDomainsResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *ListAttestationDomainsResponse_FieldMask) Subtract(other *ListAttestationDomainsResponse_FieldMask) *ListAttestationDomainsResponse_FieldMask {
	result := &ListAttestationDomainsResponse_FieldMask{}
	removedSelectors := make([]bool, 3)
	otherSubMasks := map[ListAttestationDomainsResponse_FieldPathSelector]gotenobject.FieldMask{
		ListAttestationDomainsResponse_FieldPathSelectorAttestationDomains: &attestation_domain.AttestationDomain_FieldMask{},
	}
	mySubMasks := map[ListAttestationDomainsResponse_FieldPathSelector]gotenobject.FieldMask{
		ListAttestationDomainsResponse_FieldPathSelectorAttestationDomains: &attestation_domain.AttestationDomain_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *ListAttestationDomainsResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *ListAttestationDomainsResponse_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*ListAttestationDomainsResponse_FieldTerminalPath); ok {
					switch tp.selector {
					case ListAttestationDomainsResponse_FieldPathSelectorAttestationDomains:
						mySubMasks[ListAttestationDomainsResponse_FieldPathSelectorAttestationDomains] = attestation_domain.FullAttestationDomain_FieldMask()
					}
				} else if tp, ok := path.(*ListAttestationDomainsResponse_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &ListAttestationDomainsResponse_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *ListAttestationDomainsResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*ListAttestationDomainsResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *ListAttestationDomainsResponse_FieldMask) FilterInputFields() *ListAttestationDomainsResponse_FieldMask {
	result := &ListAttestationDomainsResponse_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case ListAttestationDomainsResponse_FieldPathSelectorAttestationDomains:
			if _, ok := path.(*ListAttestationDomainsResponse_FieldTerminalPath); ok {
				for _, subpath := range attestation_domain.FullAttestationDomain_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &ListAttestationDomainsResponse_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*ListAttestationDomainsResponse_FieldSubPath); ok {
				selectedMask := &attestation_domain.AttestationDomain_FieldMask{
					Paths: []attestation_domain.AttestationDomain_FieldPath{sub.subPath.(attestation_domain.AttestationDomain_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &ListAttestationDomainsResponse_FieldSubPath{selector: ListAttestationDomainsResponse_FieldPathSelectorAttestationDomains, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *ListAttestationDomainsResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *ListAttestationDomainsResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]ListAttestationDomainsResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseListAttestationDomainsResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask ListAttestationDomainsResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *ListAttestationDomainsResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ListAttestationDomainsResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask ListAttestationDomainsResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *ListAttestationDomainsResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ListAttestationDomainsResponse_FieldMask) AppendPath(path ListAttestationDomainsResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *ListAttestationDomainsResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(ListAttestationDomainsResponse_FieldPath))
}

func (fieldMask *ListAttestationDomainsResponse_FieldMask) GetPaths() []ListAttestationDomainsResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *ListAttestationDomainsResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *ListAttestationDomainsResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseListAttestationDomainsResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *ListAttestationDomainsResponse_FieldMask) Set(target, source *ListAttestationDomainsResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *ListAttestationDomainsResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*ListAttestationDomainsResponse), source.(*ListAttestationDomainsResponse))
}

func (fieldMask *ListAttestationDomainsResponse_FieldMask) Project(source *ListAttestationDomainsResponse) *ListAttestationDomainsResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &ListAttestationDomainsResponse{}
	attestationDomainsMask := &attestation_domain.AttestationDomain_FieldMask{}
	wholeAttestationDomainsAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *ListAttestationDomainsResponse_FieldTerminalPath:
			switch tp.selector {
			case ListAttestationDomainsResponse_FieldPathSelectorAttestationDomains:
				result.AttestationDomains = source.AttestationDomains
				wholeAttestationDomainsAccepted = true
			case ListAttestationDomainsResponse_FieldPathSelectorPrevPageToken:
				result.PrevPageToken = source.PrevPageToken
			case ListAttestationDomainsResponse_FieldPathSelectorNextPageToken:
				result.NextPageToken = source.NextPageToken
			}
		case *ListAttestationDomainsResponse_FieldSubPath:
			switch tp.selector {
			case ListAttestationDomainsResponse_FieldPathSelectorAttestationDomains:
				attestationDomainsMask.AppendPath(tp.subPath.(attestation_domain.AttestationDomain_FieldPath))
			}
		}
	}
	if wholeAttestationDomainsAccepted == false && len(attestationDomainsMask.Paths) > 0 {
		for _, sourceItem := range source.GetAttestationDomains() {
			result.AttestationDomains = append(result.AttestationDomains, attestationDomainsMask.Project(sourceItem))
		}
	}
	return result
}

func (fieldMask *ListAttestationDomainsResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*ListAttestationDomainsResponse))
}

func (fieldMask *ListAttestationDomainsResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchAttestationDomainRequest_FieldMask struct {
	Paths []WatchAttestationDomainRequest_FieldPath
}

func FullWatchAttestationDomainRequest_FieldMask() *WatchAttestationDomainRequest_FieldMask {
	res := &WatchAttestationDomainRequest_FieldMask{}
	res.Paths = append(res.Paths, &WatchAttestationDomainRequest_FieldTerminalPath{selector: WatchAttestationDomainRequest_FieldPathSelectorName})
	res.Paths = append(res.Paths, &WatchAttestationDomainRequest_FieldTerminalPath{selector: WatchAttestationDomainRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &WatchAttestationDomainRequest_FieldTerminalPath{selector: WatchAttestationDomainRequest_FieldPathSelectorView})
	return res
}

func (fieldMask *WatchAttestationDomainRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchAttestationDomainRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchAttestationDomainRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchAttestationDomainRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchAttestationDomainRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchAttestationDomainRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchAttestationDomainRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchAttestationDomainRequest_FieldPath(raw)
	})
}

func (fieldMask *WatchAttestationDomainRequest_FieldMask) ProtoMessage() {}

func (fieldMask *WatchAttestationDomainRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchAttestationDomainRequest_FieldMask) Subtract(other *WatchAttestationDomainRequest_FieldMask) *WatchAttestationDomainRequest_FieldMask {
	result := &WatchAttestationDomainRequest_FieldMask{}
	removedSelectors := make([]bool, 3)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchAttestationDomainRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchAttestationDomainRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchAttestationDomainRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchAttestationDomainRequest_FieldMask) FilterInputFields() *WatchAttestationDomainRequest_FieldMask {
	result := &WatchAttestationDomainRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchAttestationDomainRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchAttestationDomainRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchAttestationDomainRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchAttestationDomainRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchAttestationDomainRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchAttestationDomainRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchAttestationDomainRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchAttestationDomainRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchAttestationDomainRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchAttestationDomainRequest_FieldMask) AppendPath(path WatchAttestationDomainRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchAttestationDomainRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchAttestationDomainRequest_FieldPath))
}

func (fieldMask *WatchAttestationDomainRequest_FieldMask) GetPaths() []WatchAttestationDomainRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchAttestationDomainRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchAttestationDomainRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchAttestationDomainRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchAttestationDomainRequest_FieldMask) Set(target, source *WatchAttestationDomainRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchAttestationDomainRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchAttestationDomainRequest), source.(*WatchAttestationDomainRequest))
}

func (fieldMask *WatchAttestationDomainRequest_FieldMask) Project(source *WatchAttestationDomainRequest) *WatchAttestationDomainRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchAttestationDomainRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchAttestationDomainRequest_FieldTerminalPath:
			switch tp.selector {
			case WatchAttestationDomainRequest_FieldPathSelectorName:
				result.Name = source.Name
			case WatchAttestationDomainRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case WatchAttestationDomainRequest_FieldPathSelectorView:
				result.View = source.View
			}
		}
	}
	return result
}

func (fieldMask *WatchAttestationDomainRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchAttestationDomainRequest))
}

func (fieldMask *WatchAttestationDomainRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchAttestationDomainResponse_FieldMask struct {
	Paths []WatchAttestationDomainResponse_FieldPath
}

func FullWatchAttestationDomainResponse_FieldMask() *WatchAttestationDomainResponse_FieldMask {
	res := &WatchAttestationDomainResponse_FieldMask{}
	res.Paths = append(res.Paths, &WatchAttestationDomainResponse_FieldTerminalPath{selector: WatchAttestationDomainResponse_FieldPathSelectorChange})
	return res
}

func (fieldMask *WatchAttestationDomainResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchAttestationDomainResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchAttestationDomainResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchAttestationDomainResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchAttestationDomainResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 1)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchAttestationDomainResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchAttestationDomainResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchAttestationDomainResponse_FieldPath(raw)
	})
}

func (fieldMask *WatchAttestationDomainResponse_FieldMask) ProtoMessage() {}

func (fieldMask *WatchAttestationDomainResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchAttestationDomainResponse_FieldMask) Subtract(other *WatchAttestationDomainResponse_FieldMask) *WatchAttestationDomainResponse_FieldMask {
	result := &WatchAttestationDomainResponse_FieldMask{}
	removedSelectors := make([]bool, 1)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchAttestationDomainResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchAttestationDomainResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchAttestationDomainResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchAttestationDomainResponse_FieldMask) FilterInputFields() *WatchAttestationDomainResponse_FieldMask {
	result := &WatchAttestationDomainResponse_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchAttestationDomainResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchAttestationDomainResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchAttestationDomainResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchAttestationDomainResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchAttestationDomainResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchAttestationDomainResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchAttestationDomainResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchAttestationDomainResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchAttestationDomainResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchAttestationDomainResponse_FieldMask) AppendPath(path WatchAttestationDomainResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchAttestationDomainResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchAttestationDomainResponse_FieldPath))
}

func (fieldMask *WatchAttestationDomainResponse_FieldMask) GetPaths() []WatchAttestationDomainResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchAttestationDomainResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchAttestationDomainResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchAttestationDomainResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchAttestationDomainResponse_FieldMask) Set(target, source *WatchAttestationDomainResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchAttestationDomainResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchAttestationDomainResponse), source.(*WatchAttestationDomainResponse))
}

func (fieldMask *WatchAttestationDomainResponse_FieldMask) Project(source *WatchAttestationDomainResponse) *WatchAttestationDomainResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchAttestationDomainResponse{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchAttestationDomainResponse_FieldTerminalPath:
			switch tp.selector {
			case WatchAttestationDomainResponse_FieldPathSelectorChange:
				result.Change = source.Change
			}
		}
	}
	return result
}

func (fieldMask *WatchAttestationDomainResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchAttestationDomainResponse))
}

func (fieldMask *WatchAttestationDomainResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchAttestationDomainsRequest_FieldMask struct {
	Paths []WatchAttestationDomainsRequest_FieldPath
}

func FullWatchAttestationDomainsRequest_FieldMask() *WatchAttestationDomainsRequest_FieldMask {
	res := &WatchAttestationDomainsRequest_FieldMask{}
	res.Paths = append(res.Paths, &WatchAttestationDomainsRequest_FieldTerminalPath{selector: WatchAttestationDomainsRequest_FieldPathSelectorType})
	res.Paths = append(res.Paths, &WatchAttestationDomainsRequest_FieldTerminalPath{selector: WatchAttestationDomainsRequest_FieldPathSelectorParent})
	res.Paths = append(res.Paths, &WatchAttestationDomainsRequest_FieldTerminalPath{selector: WatchAttestationDomainsRequest_FieldPathSelectorPageSize})
	res.Paths = append(res.Paths, &WatchAttestationDomainsRequest_FieldTerminalPath{selector: WatchAttestationDomainsRequest_FieldPathSelectorPageToken})
	res.Paths = append(res.Paths, &WatchAttestationDomainsRequest_FieldTerminalPath{selector: WatchAttestationDomainsRequest_FieldPathSelectorOrderBy})
	res.Paths = append(res.Paths, &WatchAttestationDomainsRequest_FieldTerminalPath{selector: WatchAttestationDomainsRequest_FieldPathSelectorResumeToken})
	res.Paths = append(res.Paths, &WatchAttestationDomainsRequest_FieldTerminalPath{selector: WatchAttestationDomainsRequest_FieldPathSelectorFilter})
	res.Paths = append(res.Paths, &WatchAttestationDomainsRequest_FieldTerminalPath{selector: WatchAttestationDomainsRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &WatchAttestationDomainsRequest_FieldTerminalPath{selector: WatchAttestationDomainsRequest_FieldPathSelectorView})
	res.Paths = append(res.Paths, &WatchAttestationDomainsRequest_FieldTerminalPath{selector: WatchAttestationDomainsRequest_FieldPathSelectorMaxChunkSize})
	return res
}

func (fieldMask *WatchAttestationDomainsRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchAttestationDomainsRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchAttestationDomainsRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchAttestationDomainsRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchAttestationDomainsRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 10)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchAttestationDomainsRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchAttestationDomainsRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchAttestationDomainsRequest_FieldPath(raw)
	})
}

func (fieldMask *WatchAttestationDomainsRequest_FieldMask) ProtoMessage() {}

func (fieldMask *WatchAttestationDomainsRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchAttestationDomainsRequest_FieldMask) Subtract(other *WatchAttestationDomainsRequest_FieldMask) *WatchAttestationDomainsRequest_FieldMask {
	result := &WatchAttestationDomainsRequest_FieldMask{}
	removedSelectors := make([]bool, 10)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchAttestationDomainsRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchAttestationDomainsRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchAttestationDomainsRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchAttestationDomainsRequest_FieldMask) FilterInputFields() *WatchAttestationDomainsRequest_FieldMask {
	result := &WatchAttestationDomainsRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchAttestationDomainsRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchAttestationDomainsRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchAttestationDomainsRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchAttestationDomainsRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchAttestationDomainsRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchAttestationDomainsRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchAttestationDomainsRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchAttestationDomainsRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchAttestationDomainsRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchAttestationDomainsRequest_FieldMask) AppendPath(path WatchAttestationDomainsRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchAttestationDomainsRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchAttestationDomainsRequest_FieldPath))
}

func (fieldMask *WatchAttestationDomainsRequest_FieldMask) GetPaths() []WatchAttestationDomainsRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchAttestationDomainsRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchAttestationDomainsRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchAttestationDomainsRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchAttestationDomainsRequest_FieldMask) Set(target, source *WatchAttestationDomainsRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchAttestationDomainsRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchAttestationDomainsRequest), source.(*WatchAttestationDomainsRequest))
}

func (fieldMask *WatchAttestationDomainsRequest_FieldMask) Project(source *WatchAttestationDomainsRequest) *WatchAttestationDomainsRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchAttestationDomainsRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchAttestationDomainsRequest_FieldTerminalPath:
			switch tp.selector {
			case WatchAttestationDomainsRequest_FieldPathSelectorType:
				result.Type = source.Type
			case WatchAttestationDomainsRequest_FieldPathSelectorParent:
				result.Parent = source.Parent
			case WatchAttestationDomainsRequest_FieldPathSelectorPageSize:
				result.PageSize = source.PageSize
			case WatchAttestationDomainsRequest_FieldPathSelectorPageToken:
				result.PageToken = source.PageToken
			case WatchAttestationDomainsRequest_FieldPathSelectorOrderBy:
				result.OrderBy = source.OrderBy
			case WatchAttestationDomainsRequest_FieldPathSelectorResumeToken:
				result.ResumeToken = source.ResumeToken
			case WatchAttestationDomainsRequest_FieldPathSelectorFilter:
				result.Filter = source.Filter
			case WatchAttestationDomainsRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case WatchAttestationDomainsRequest_FieldPathSelectorView:
				result.View = source.View
			case WatchAttestationDomainsRequest_FieldPathSelectorMaxChunkSize:
				result.MaxChunkSize = source.MaxChunkSize
			}
		}
	}
	return result
}

func (fieldMask *WatchAttestationDomainsRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchAttestationDomainsRequest))
}

func (fieldMask *WatchAttestationDomainsRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchAttestationDomainsResponse_FieldMask struct {
	Paths []WatchAttestationDomainsResponse_FieldPath
}

func FullWatchAttestationDomainsResponse_FieldMask() *WatchAttestationDomainsResponse_FieldMask {
	res := &WatchAttestationDomainsResponse_FieldMask{}
	res.Paths = append(res.Paths, &WatchAttestationDomainsResponse_FieldTerminalPath{selector: WatchAttestationDomainsResponse_FieldPathSelectorAttestationDomainChanges})
	res.Paths = append(res.Paths, &WatchAttestationDomainsResponse_FieldTerminalPath{selector: WatchAttestationDomainsResponse_FieldPathSelectorIsCurrent})
	res.Paths = append(res.Paths, &WatchAttestationDomainsResponse_FieldTerminalPath{selector: WatchAttestationDomainsResponse_FieldPathSelectorPageTokenChange})
	res.Paths = append(res.Paths, &WatchAttestationDomainsResponse_FieldTerminalPath{selector: WatchAttestationDomainsResponse_FieldPathSelectorResumeToken})
	res.Paths = append(res.Paths, &WatchAttestationDomainsResponse_FieldTerminalPath{selector: WatchAttestationDomainsResponse_FieldPathSelectorSnapshotSize})
	res.Paths = append(res.Paths, &WatchAttestationDomainsResponse_FieldTerminalPath{selector: WatchAttestationDomainsResponse_FieldPathSelectorIsSoftReset})
	res.Paths = append(res.Paths, &WatchAttestationDomainsResponse_FieldTerminalPath{selector: WatchAttestationDomainsResponse_FieldPathSelectorIsHardReset})
	return res
}

func (fieldMask *WatchAttestationDomainsResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchAttestationDomainsResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchAttestationDomainsResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchAttestationDomainsResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchAttestationDomainsResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 7)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchAttestationDomainsResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchAttestationDomainsResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchAttestationDomainsResponse_FieldPath(raw)
	})
}

func (fieldMask *WatchAttestationDomainsResponse_FieldMask) ProtoMessage() {}

func (fieldMask *WatchAttestationDomainsResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchAttestationDomainsResponse_FieldMask) Subtract(other *WatchAttestationDomainsResponse_FieldMask) *WatchAttestationDomainsResponse_FieldMask {
	result := &WatchAttestationDomainsResponse_FieldMask{}
	removedSelectors := make([]bool, 7)
	otherSubMasks := map[WatchAttestationDomainsResponse_FieldPathSelector]gotenobject.FieldMask{
		WatchAttestationDomainsResponse_FieldPathSelectorPageTokenChange: &WatchAttestationDomainsResponse_PageTokenChange_FieldMask{},
	}
	mySubMasks := map[WatchAttestationDomainsResponse_FieldPathSelector]gotenobject.FieldMask{
		WatchAttestationDomainsResponse_FieldPathSelectorPageTokenChange: &WatchAttestationDomainsResponse_PageTokenChange_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchAttestationDomainsResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *WatchAttestationDomainsResponse_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*WatchAttestationDomainsResponse_FieldTerminalPath); ok {
					switch tp.selector {
					case WatchAttestationDomainsResponse_FieldPathSelectorPageTokenChange:
						mySubMasks[WatchAttestationDomainsResponse_FieldPathSelectorPageTokenChange] = FullWatchAttestationDomainsResponse_PageTokenChange_FieldMask()
					}
				} else if tp, ok := path.(*WatchAttestationDomainsResponse_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &WatchAttestationDomainsResponse_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchAttestationDomainsResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchAttestationDomainsResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchAttestationDomainsResponse_FieldMask) FilterInputFields() *WatchAttestationDomainsResponse_FieldMask {
	result := &WatchAttestationDomainsResponse_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchAttestationDomainsResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchAttestationDomainsResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchAttestationDomainsResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchAttestationDomainsResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchAttestationDomainsResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchAttestationDomainsResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchAttestationDomainsResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchAttestationDomainsResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchAttestationDomainsResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchAttestationDomainsResponse_FieldMask) AppendPath(path WatchAttestationDomainsResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchAttestationDomainsResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchAttestationDomainsResponse_FieldPath))
}

func (fieldMask *WatchAttestationDomainsResponse_FieldMask) GetPaths() []WatchAttestationDomainsResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchAttestationDomainsResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchAttestationDomainsResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchAttestationDomainsResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchAttestationDomainsResponse_FieldMask) Set(target, source *WatchAttestationDomainsResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchAttestationDomainsResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchAttestationDomainsResponse), source.(*WatchAttestationDomainsResponse))
}

func (fieldMask *WatchAttestationDomainsResponse_FieldMask) Project(source *WatchAttestationDomainsResponse) *WatchAttestationDomainsResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchAttestationDomainsResponse{}
	pageTokenChangeMask := &WatchAttestationDomainsResponse_PageTokenChange_FieldMask{}
	wholePageTokenChangeAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchAttestationDomainsResponse_FieldTerminalPath:
			switch tp.selector {
			case WatchAttestationDomainsResponse_FieldPathSelectorAttestationDomainChanges:
				result.AttestationDomainChanges = source.AttestationDomainChanges
			case WatchAttestationDomainsResponse_FieldPathSelectorIsCurrent:
				result.IsCurrent = source.IsCurrent
			case WatchAttestationDomainsResponse_FieldPathSelectorPageTokenChange:
				result.PageTokenChange = source.PageTokenChange
				wholePageTokenChangeAccepted = true
			case WatchAttestationDomainsResponse_FieldPathSelectorResumeToken:
				result.ResumeToken = source.ResumeToken
			case WatchAttestationDomainsResponse_FieldPathSelectorSnapshotSize:
				result.SnapshotSize = source.SnapshotSize
			case WatchAttestationDomainsResponse_FieldPathSelectorIsSoftReset:
				result.IsSoftReset = source.IsSoftReset
			case WatchAttestationDomainsResponse_FieldPathSelectorIsHardReset:
				result.IsHardReset = source.IsHardReset
			}
		case *WatchAttestationDomainsResponse_FieldSubPath:
			switch tp.selector {
			case WatchAttestationDomainsResponse_FieldPathSelectorPageTokenChange:
				pageTokenChangeMask.AppendPath(tp.subPath.(WatchAttestationDomainsResponsePageTokenChange_FieldPath))
			}
		}
	}
	if wholePageTokenChangeAccepted == false && len(pageTokenChangeMask.Paths) > 0 {
		result.PageTokenChange = pageTokenChangeMask.Project(source.GetPageTokenChange())
	}
	return result
}

func (fieldMask *WatchAttestationDomainsResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchAttestationDomainsResponse))
}

func (fieldMask *WatchAttestationDomainsResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchAttestationDomainsResponse_PageTokenChange_FieldMask struct {
	Paths []WatchAttestationDomainsResponsePageTokenChange_FieldPath
}

func FullWatchAttestationDomainsResponse_PageTokenChange_FieldMask() *WatchAttestationDomainsResponse_PageTokenChange_FieldMask {
	res := &WatchAttestationDomainsResponse_PageTokenChange_FieldMask{}
	res.Paths = append(res.Paths, &WatchAttestationDomainsResponsePageTokenChange_FieldTerminalPath{selector: WatchAttestationDomainsResponsePageTokenChange_FieldPathSelectorPrevPageToken})
	res.Paths = append(res.Paths, &WatchAttestationDomainsResponsePageTokenChange_FieldTerminalPath{selector: WatchAttestationDomainsResponsePageTokenChange_FieldPathSelectorNextPageToken})
	return res
}

func (fieldMask *WatchAttestationDomainsResponse_PageTokenChange_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchAttestationDomainsResponse_PageTokenChange_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchAttestationDomainsResponse_PageTokenChange_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchAttestationDomainsResponsePageTokenChange_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchAttestationDomainsResponse_PageTokenChange_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchAttestationDomainsResponsePageTokenChange_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchAttestationDomainsResponse_PageTokenChange_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchAttestationDomainsResponsePageTokenChange_FieldPath(raw)
	})
}

func (fieldMask *WatchAttestationDomainsResponse_PageTokenChange_FieldMask) ProtoMessage() {}

func (fieldMask *WatchAttestationDomainsResponse_PageTokenChange_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchAttestationDomainsResponse_PageTokenChange_FieldMask) Subtract(other *WatchAttestationDomainsResponse_PageTokenChange_FieldMask) *WatchAttestationDomainsResponse_PageTokenChange_FieldMask {
	result := &WatchAttestationDomainsResponse_PageTokenChange_FieldMask{}
	removedSelectors := make([]bool, 2)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchAttestationDomainsResponsePageTokenChange_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchAttestationDomainsResponse_PageTokenChange_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchAttestationDomainsResponse_PageTokenChange_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchAttestationDomainsResponse_PageTokenChange_FieldMask) FilterInputFields() *WatchAttestationDomainsResponse_PageTokenChange_FieldMask {
	result := &WatchAttestationDomainsResponse_PageTokenChange_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchAttestationDomainsResponse_PageTokenChange_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchAttestationDomainsResponse_PageTokenChange_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchAttestationDomainsResponsePageTokenChange_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchAttestationDomainsResponsePageTokenChange_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchAttestationDomainsResponse_PageTokenChange_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchAttestationDomainsResponse_PageTokenChange_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchAttestationDomainsResponse_PageTokenChange_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchAttestationDomainsResponse_PageTokenChange_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchAttestationDomainsResponse_PageTokenChange_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchAttestationDomainsResponse_PageTokenChange_FieldMask) AppendPath(path WatchAttestationDomainsResponsePageTokenChange_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchAttestationDomainsResponse_PageTokenChange_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchAttestationDomainsResponsePageTokenChange_FieldPath))
}

func (fieldMask *WatchAttestationDomainsResponse_PageTokenChange_FieldMask) GetPaths() []WatchAttestationDomainsResponsePageTokenChange_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchAttestationDomainsResponse_PageTokenChange_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchAttestationDomainsResponse_PageTokenChange_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchAttestationDomainsResponsePageTokenChange_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchAttestationDomainsResponse_PageTokenChange_FieldMask) Set(target, source *WatchAttestationDomainsResponse_PageTokenChange) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchAttestationDomainsResponse_PageTokenChange_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchAttestationDomainsResponse_PageTokenChange), source.(*WatchAttestationDomainsResponse_PageTokenChange))
}

func (fieldMask *WatchAttestationDomainsResponse_PageTokenChange_FieldMask) Project(source *WatchAttestationDomainsResponse_PageTokenChange) *WatchAttestationDomainsResponse_PageTokenChange {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchAttestationDomainsResponse_PageTokenChange{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchAttestationDomainsResponsePageTokenChange_FieldTerminalPath:
			switch tp.selector {
			case WatchAttestationDomainsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
				result.PrevPageToken = source.PrevPageToken
			case WatchAttestationDomainsResponsePageTokenChange_FieldPathSelectorNextPageToken:
				result.NextPageToken = source.NextPageToken
			}
		}
	}
	return result
}

func (fieldMask *WatchAttestationDomainsResponse_PageTokenChange_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchAttestationDomainsResponse_PageTokenChange))
}

func (fieldMask *WatchAttestationDomainsResponse_PageTokenChange_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type CreateAttestationDomainRequest_FieldMask struct {
	Paths []CreateAttestationDomainRequest_FieldPath
}

func FullCreateAttestationDomainRequest_FieldMask() *CreateAttestationDomainRequest_FieldMask {
	res := &CreateAttestationDomainRequest_FieldMask{}
	res.Paths = append(res.Paths, &CreateAttestationDomainRequest_FieldTerminalPath{selector: CreateAttestationDomainRequest_FieldPathSelectorParent})
	res.Paths = append(res.Paths, &CreateAttestationDomainRequest_FieldTerminalPath{selector: CreateAttestationDomainRequest_FieldPathSelectorAttestationDomain})
	return res
}

func (fieldMask *CreateAttestationDomainRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *CreateAttestationDomainRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *CreateAttestationDomainRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseCreateAttestationDomainRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *CreateAttestationDomainRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*CreateAttestationDomainRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *CreateAttestationDomainRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseCreateAttestationDomainRequest_FieldPath(raw)
	})
}

func (fieldMask *CreateAttestationDomainRequest_FieldMask) ProtoMessage() {}

func (fieldMask *CreateAttestationDomainRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *CreateAttestationDomainRequest_FieldMask) Subtract(other *CreateAttestationDomainRequest_FieldMask) *CreateAttestationDomainRequest_FieldMask {
	result := &CreateAttestationDomainRequest_FieldMask{}
	removedSelectors := make([]bool, 2)
	otherSubMasks := map[CreateAttestationDomainRequest_FieldPathSelector]gotenobject.FieldMask{
		CreateAttestationDomainRequest_FieldPathSelectorAttestationDomain: &attestation_domain.AttestationDomain_FieldMask{},
	}
	mySubMasks := map[CreateAttestationDomainRequest_FieldPathSelector]gotenobject.FieldMask{
		CreateAttestationDomainRequest_FieldPathSelectorAttestationDomain: &attestation_domain.AttestationDomain_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *CreateAttestationDomainRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *CreateAttestationDomainRequest_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*CreateAttestationDomainRequest_FieldTerminalPath); ok {
					switch tp.selector {
					case CreateAttestationDomainRequest_FieldPathSelectorAttestationDomain:
						mySubMasks[CreateAttestationDomainRequest_FieldPathSelectorAttestationDomain] = attestation_domain.FullAttestationDomain_FieldMask()
					}
				} else if tp, ok := path.(*CreateAttestationDomainRequest_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &CreateAttestationDomainRequest_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *CreateAttestationDomainRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*CreateAttestationDomainRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *CreateAttestationDomainRequest_FieldMask) FilterInputFields() *CreateAttestationDomainRequest_FieldMask {
	result := &CreateAttestationDomainRequest_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case CreateAttestationDomainRequest_FieldPathSelectorAttestationDomain:
			if _, ok := path.(*CreateAttestationDomainRequest_FieldTerminalPath); ok {
				for _, subpath := range attestation_domain.FullAttestationDomain_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &CreateAttestationDomainRequest_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*CreateAttestationDomainRequest_FieldSubPath); ok {
				selectedMask := &attestation_domain.AttestationDomain_FieldMask{
					Paths: []attestation_domain.AttestationDomain_FieldPath{sub.subPath.(attestation_domain.AttestationDomain_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &CreateAttestationDomainRequest_FieldSubPath{selector: CreateAttestationDomainRequest_FieldPathSelectorAttestationDomain, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *CreateAttestationDomainRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *CreateAttestationDomainRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]CreateAttestationDomainRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseCreateAttestationDomainRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask CreateAttestationDomainRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *CreateAttestationDomainRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *CreateAttestationDomainRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask CreateAttestationDomainRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *CreateAttestationDomainRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *CreateAttestationDomainRequest_FieldMask) AppendPath(path CreateAttestationDomainRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *CreateAttestationDomainRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(CreateAttestationDomainRequest_FieldPath))
}

func (fieldMask *CreateAttestationDomainRequest_FieldMask) GetPaths() []CreateAttestationDomainRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *CreateAttestationDomainRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *CreateAttestationDomainRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseCreateAttestationDomainRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *CreateAttestationDomainRequest_FieldMask) Set(target, source *CreateAttestationDomainRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *CreateAttestationDomainRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*CreateAttestationDomainRequest), source.(*CreateAttestationDomainRequest))
}

func (fieldMask *CreateAttestationDomainRequest_FieldMask) Project(source *CreateAttestationDomainRequest) *CreateAttestationDomainRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &CreateAttestationDomainRequest{}
	attestationDomainMask := &attestation_domain.AttestationDomain_FieldMask{}
	wholeAttestationDomainAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *CreateAttestationDomainRequest_FieldTerminalPath:
			switch tp.selector {
			case CreateAttestationDomainRequest_FieldPathSelectorParent:
				result.Parent = source.Parent
			case CreateAttestationDomainRequest_FieldPathSelectorAttestationDomain:
				result.AttestationDomain = source.AttestationDomain
				wholeAttestationDomainAccepted = true
			}
		case *CreateAttestationDomainRequest_FieldSubPath:
			switch tp.selector {
			case CreateAttestationDomainRequest_FieldPathSelectorAttestationDomain:
				attestationDomainMask.AppendPath(tp.subPath.(attestation_domain.AttestationDomain_FieldPath))
			}
		}
	}
	if wholeAttestationDomainAccepted == false && len(attestationDomainMask.Paths) > 0 {
		result.AttestationDomain = attestationDomainMask.Project(source.GetAttestationDomain())
	}
	return result
}

func (fieldMask *CreateAttestationDomainRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*CreateAttestationDomainRequest))
}

func (fieldMask *CreateAttestationDomainRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type UpdateAttestationDomainRequest_FieldMask struct {
	Paths []UpdateAttestationDomainRequest_FieldPath
}

func FullUpdateAttestationDomainRequest_FieldMask() *UpdateAttestationDomainRequest_FieldMask {
	res := &UpdateAttestationDomainRequest_FieldMask{}
	res.Paths = append(res.Paths, &UpdateAttestationDomainRequest_FieldTerminalPath{selector: UpdateAttestationDomainRequest_FieldPathSelectorAttestationDomain})
	res.Paths = append(res.Paths, &UpdateAttestationDomainRequest_FieldTerminalPath{selector: UpdateAttestationDomainRequest_FieldPathSelectorUpdateMask})
	res.Paths = append(res.Paths, &UpdateAttestationDomainRequest_FieldTerminalPath{selector: UpdateAttestationDomainRequest_FieldPathSelectorCas})
	return res
}

func (fieldMask *UpdateAttestationDomainRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *UpdateAttestationDomainRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *UpdateAttestationDomainRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseUpdateAttestationDomainRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *UpdateAttestationDomainRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*UpdateAttestationDomainRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *UpdateAttestationDomainRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseUpdateAttestationDomainRequest_FieldPath(raw)
	})
}

func (fieldMask *UpdateAttestationDomainRequest_FieldMask) ProtoMessage() {}

func (fieldMask *UpdateAttestationDomainRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *UpdateAttestationDomainRequest_FieldMask) Subtract(other *UpdateAttestationDomainRequest_FieldMask) *UpdateAttestationDomainRequest_FieldMask {
	result := &UpdateAttestationDomainRequest_FieldMask{}
	removedSelectors := make([]bool, 3)
	otherSubMasks := map[UpdateAttestationDomainRequest_FieldPathSelector]gotenobject.FieldMask{
		UpdateAttestationDomainRequest_FieldPathSelectorAttestationDomain: &attestation_domain.AttestationDomain_FieldMask{},
		UpdateAttestationDomainRequest_FieldPathSelectorCas:               &UpdateAttestationDomainRequest_CAS_FieldMask{},
	}
	mySubMasks := map[UpdateAttestationDomainRequest_FieldPathSelector]gotenobject.FieldMask{
		UpdateAttestationDomainRequest_FieldPathSelectorAttestationDomain: &attestation_domain.AttestationDomain_FieldMask{},
		UpdateAttestationDomainRequest_FieldPathSelectorCas:               &UpdateAttestationDomainRequest_CAS_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *UpdateAttestationDomainRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *UpdateAttestationDomainRequest_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*UpdateAttestationDomainRequest_FieldTerminalPath); ok {
					switch tp.selector {
					case UpdateAttestationDomainRequest_FieldPathSelectorAttestationDomain:
						mySubMasks[UpdateAttestationDomainRequest_FieldPathSelectorAttestationDomain] = attestation_domain.FullAttestationDomain_FieldMask()
					case UpdateAttestationDomainRequest_FieldPathSelectorCas:
						mySubMasks[UpdateAttestationDomainRequest_FieldPathSelectorCas] = FullUpdateAttestationDomainRequest_CAS_FieldMask()
					}
				} else if tp, ok := path.(*UpdateAttestationDomainRequest_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &UpdateAttestationDomainRequest_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *UpdateAttestationDomainRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*UpdateAttestationDomainRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *UpdateAttestationDomainRequest_FieldMask) FilterInputFields() *UpdateAttestationDomainRequest_FieldMask {
	result := &UpdateAttestationDomainRequest_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case UpdateAttestationDomainRequest_FieldPathSelectorAttestationDomain:
			if _, ok := path.(*UpdateAttestationDomainRequest_FieldTerminalPath); ok {
				for _, subpath := range attestation_domain.FullAttestationDomain_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateAttestationDomainRequest_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*UpdateAttestationDomainRequest_FieldSubPath); ok {
				selectedMask := &attestation_domain.AttestationDomain_FieldMask{
					Paths: []attestation_domain.AttestationDomain_FieldPath{sub.subPath.(attestation_domain.AttestationDomain_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateAttestationDomainRequest_FieldSubPath{selector: UpdateAttestationDomainRequest_FieldPathSelectorAttestationDomain, subPath: allowedPath})
				}
			}
		case UpdateAttestationDomainRequest_FieldPathSelectorCas:
			if _, ok := path.(*UpdateAttestationDomainRequest_FieldTerminalPath); ok {
				for _, subpath := range FullUpdateAttestationDomainRequest_CAS_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateAttestationDomainRequest_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*UpdateAttestationDomainRequest_FieldSubPath); ok {
				selectedMask := &UpdateAttestationDomainRequest_CAS_FieldMask{
					Paths: []UpdateAttestationDomainRequestCAS_FieldPath{sub.subPath.(UpdateAttestationDomainRequestCAS_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateAttestationDomainRequest_FieldSubPath{selector: UpdateAttestationDomainRequest_FieldPathSelectorCas, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *UpdateAttestationDomainRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *UpdateAttestationDomainRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]UpdateAttestationDomainRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseUpdateAttestationDomainRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask UpdateAttestationDomainRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *UpdateAttestationDomainRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *UpdateAttestationDomainRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask UpdateAttestationDomainRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *UpdateAttestationDomainRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *UpdateAttestationDomainRequest_FieldMask) AppendPath(path UpdateAttestationDomainRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *UpdateAttestationDomainRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(UpdateAttestationDomainRequest_FieldPath))
}

func (fieldMask *UpdateAttestationDomainRequest_FieldMask) GetPaths() []UpdateAttestationDomainRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *UpdateAttestationDomainRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *UpdateAttestationDomainRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseUpdateAttestationDomainRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *UpdateAttestationDomainRequest_FieldMask) Set(target, source *UpdateAttestationDomainRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *UpdateAttestationDomainRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*UpdateAttestationDomainRequest), source.(*UpdateAttestationDomainRequest))
}

func (fieldMask *UpdateAttestationDomainRequest_FieldMask) Project(source *UpdateAttestationDomainRequest) *UpdateAttestationDomainRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &UpdateAttestationDomainRequest{}
	attestationDomainMask := &attestation_domain.AttestationDomain_FieldMask{}
	wholeAttestationDomainAccepted := false
	casMask := &UpdateAttestationDomainRequest_CAS_FieldMask{}
	wholeCasAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *UpdateAttestationDomainRequest_FieldTerminalPath:
			switch tp.selector {
			case UpdateAttestationDomainRequest_FieldPathSelectorAttestationDomain:
				result.AttestationDomain = source.AttestationDomain
				wholeAttestationDomainAccepted = true
			case UpdateAttestationDomainRequest_FieldPathSelectorUpdateMask:
				result.UpdateMask = source.UpdateMask
			case UpdateAttestationDomainRequest_FieldPathSelectorCas:
				result.Cas = source.Cas
				wholeCasAccepted = true
			}
		case *UpdateAttestationDomainRequest_FieldSubPath:
			switch tp.selector {
			case UpdateAttestationDomainRequest_FieldPathSelectorAttestationDomain:
				attestationDomainMask.AppendPath(tp.subPath.(attestation_domain.AttestationDomain_FieldPath))
			case UpdateAttestationDomainRequest_FieldPathSelectorCas:
				casMask.AppendPath(tp.subPath.(UpdateAttestationDomainRequestCAS_FieldPath))
			}
		}
	}
	if wholeAttestationDomainAccepted == false && len(attestationDomainMask.Paths) > 0 {
		result.AttestationDomain = attestationDomainMask.Project(source.GetAttestationDomain())
	}
	if wholeCasAccepted == false && len(casMask.Paths) > 0 {
		result.Cas = casMask.Project(source.GetCas())
	}
	return result
}

func (fieldMask *UpdateAttestationDomainRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*UpdateAttestationDomainRequest))
}

func (fieldMask *UpdateAttestationDomainRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type UpdateAttestationDomainRequest_CAS_FieldMask struct {
	Paths []UpdateAttestationDomainRequestCAS_FieldPath
}

func FullUpdateAttestationDomainRequest_CAS_FieldMask() *UpdateAttestationDomainRequest_CAS_FieldMask {
	res := &UpdateAttestationDomainRequest_CAS_FieldMask{}
	res.Paths = append(res.Paths, &UpdateAttestationDomainRequestCAS_FieldTerminalPath{selector: UpdateAttestationDomainRequestCAS_FieldPathSelectorConditionalState})
	res.Paths = append(res.Paths, &UpdateAttestationDomainRequestCAS_FieldTerminalPath{selector: UpdateAttestationDomainRequestCAS_FieldPathSelectorFieldMask})
	return res
}

func (fieldMask *UpdateAttestationDomainRequest_CAS_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *UpdateAttestationDomainRequest_CAS_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *UpdateAttestationDomainRequest_CAS_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseUpdateAttestationDomainRequestCAS_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *UpdateAttestationDomainRequest_CAS_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*UpdateAttestationDomainRequestCAS_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *UpdateAttestationDomainRequest_CAS_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseUpdateAttestationDomainRequestCAS_FieldPath(raw)
	})
}

func (fieldMask *UpdateAttestationDomainRequest_CAS_FieldMask) ProtoMessage() {}

func (fieldMask *UpdateAttestationDomainRequest_CAS_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *UpdateAttestationDomainRequest_CAS_FieldMask) Subtract(other *UpdateAttestationDomainRequest_CAS_FieldMask) *UpdateAttestationDomainRequest_CAS_FieldMask {
	result := &UpdateAttestationDomainRequest_CAS_FieldMask{}
	removedSelectors := make([]bool, 2)
	otherSubMasks := map[UpdateAttestationDomainRequestCAS_FieldPathSelector]gotenobject.FieldMask{
		UpdateAttestationDomainRequestCAS_FieldPathSelectorConditionalState: &attestation_domain.AttestationDomain_FieldMask{},
	}
	mySubMasks := map[UpdateAttestationDomainRequestCAS_FieldPathSelector]gotenobject.FieldMask{
		UpdateAttestationDomainRequestCAS_FieldPathSelectorConditionalState: &attestation_domain.AttestationDomain_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *UpdateAttestationDomainRequestCAS_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *UpdateAttestationDomainRequestCAS_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*UpdateAttestationDomainRequestCAS_FieldTerminalPath); ok {
					switch tp.selector {
					case UpdateAttestationDomainRequestCAS_FieldPathSelectorConditionalState:
						mySubMasks[UpdateAttestationDomainRequestCAS_FieldPathSelectorConditionalState] = attestation_domain.FullAttestationDomain_FieldMask()
					}
				} else if tp, ok := path.(*UpdateAttestationDomainRequestCAS_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &UpdateAttestationDomainRequestCAS_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *UpdateAttestationDomainRequest_CAS_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*UpdateAttestationDomainRequest_CAS_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *UpdateAttestationDomainRequest_CAS_FieldMask) FilterInputFields() *UpdateAttestationDomainRequest_CAS_FieldMask {
	result := &UpdateAttestationDomainRequest_CAS_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case UpdateAttestationDomainRequestCAS_FieldPathSelectorConditionalState:
			if _, ok := path.(*UpdateAttestationDomainRequestCAS_FieldTerminalPath); ok {
				for _, subpath := range attestation_domain.FullAttestationDomain_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateAttestationDomainRequestCAS_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*UpdateAttestationDomainRequestCAS_FieldSubPath); ok {
				selectedMask := &attestation_domain.AttestationDomain_FieldMask{
					Paths: []attestation_domain.AttestationDomain_FieldPath{sub.subPath.(attestation_domain.AttestationDomain_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateAttestationDomainRequestCAS_FieldSubPath{selector: UpdateAttestationDomainRequestCAS_FieldPathSelectorConditionalState, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *UpdateAttestationDomainRequest_CAS_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *UpdateAttestationDomainRequest_CAS_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]UpdateAttestationDomainRequestCAS_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseUpdateAttestationDomainRequestCAS_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask UpdateAttestationDomainRequest_CAS_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *UpdateAttestationDomainRequest_CAS_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *UpdateAttestationDomainRequest_CAS_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask UpdateAttestationDomainRequest_CAS_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *UpdateAttestationDomainRequest_CAS_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *UpdateAttestationDomainRequest_CAS_FieldMask) AppendPath(path UpdateAttestationDomainRequestCAS_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *UpdateAttestationDomainRequest_CAS_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(UpdateAttestationDomainRequestCAS_FieldPath))
}

func (fieldMask *UpdateAttestationDomainRequest_CAS_FieldMask) GetPaths() []UpdateAttestationDomainRequestCAS_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *UpdateAttestationDomainRequest_CAS_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *UpdateAttestationDomainRequest_CAS_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseUpdateAttestationDomainRequestCAS_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *UpdateAttestationDomainRequest_CAS_FieldMask) Set(target, source *UpdateAttestationDomainRequest_CAS) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *UpdateAttestationDomainRequest_CAS_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*UpdateAttestationDomainRequest_CAS), source.(*UpdateAttestationDomainRequest_CAS))
}

func (fieldMask *UpdateAttestationDomainRequest_CAS_FieldMask) Project(source *UpdateAttestationDomainRequest_CAS) *UpdateAttestationDomainRequest_CAS {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &UpdateAttestationDomainRequest_CAS{}
	conditionalStateMask := &attestation_domain.AttestationDomain_FieldMask{}
	wholeConditionalStateAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *UpdateAttestationDomainRequestCAS_FieldTerminalPath:
			switch tp.selector {
			case UpdateAttestationDomainRequestCAS_FieldPathSelectorConditionalState:
				result.ConditionalState = source.ConditionalState
				wholeConditionalStateAccepted = true
			case UpdateAttestationDomainRequestCAS_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			}
		case *UpdateAttestationDomainRequestCAS_FieldSubPath:
			switch tp.selector {
			case UpdateAttestationDomainRequestCAS_FieldPathSelectorConditionalState:
				conditionalStateMask.AppendPath(tp.subPath.(attestation_domain.AttestationDomain_FieldPath))
			}
		}
	}
	if wholeConditionalStateAccepted == false && len(conditionalStateMask.Paths) > 0 {
		result.ConditionalState = conditionalStateMask.Project(source.GetConditionalState())
	}
	return result
}

func (fieldMask *UpdateAttestationDomainRequest_CAS_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*UpdateAttestationDomainRequest_CAS))
}

func (fieldMask *UpdateAttestationDomainRequest_CAS_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type DeleteAttestationDomainRequest_FieldMask struct {
	Paths []DeleteAttestationDomainRequest_FieldPath
}

func FullDeleteAttestationDomainRequest_FieldMask() *DeleteAttestationDomainRequest_FieldMask {
	res := &DeleteAttestationDomainRequest_FieldMask{}
	res.Paths = append(res.Paths, &DeleteAttestationDomainRequest_FieldTerminalPath{selector: DeleteAttestationDomainRequest_FieldPathSelectorName})
	return res
}

func (fieldMask *DeleteAttestationDomainRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *DeleteAttestationDomainRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *DeleteAttestationDomainRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseDeleteAttestationDomainRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *DeleteAttestationDomainRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 1)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*DeleteAttestationDomainRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *DeleteAttestationDomainRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseDeleteAttestationDomainRequest_FieldPath(raw)
	})
}

func (fieldMask *DeleteAttestationDomainRequest_FieldMask) ProtoMessage() {}

func (fieldMask *DeleteAttestationDomainRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *DeleteAttestationDomainRequest_FieldMask) Subtract(other *DeleteAttestationDomainRequest_FieldMask) *DeleteAttestationDomainRequest_FieldMask {
	result := &DeleteAttestationDomainRequest_FieldMask{}
	removedSelectors := make([]bool, 1)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *DeleteAttestationDomainRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *DeleteAttestationDomainRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*DeleteAttestationDomainRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *DeleteAttestationDomainRequest_FieldMask) FilterInputFields() *DeleteAttestationDomainRequest_FieldMask {
	result := &DeleteAttestationDomainRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *DeleteAttestationDomainRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *DeleteAttestationDomainRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]DeleteAttestationDomainRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseDeleteAttestationDomainRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask DeleteAttestationDomainRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *DeleteAttestationDomainRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *DeleteAttestationDomainRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask DeleteAttestationDomainRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *DeleteAttestationDomainRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *DeleteAttestationDomainRequest_FieldMask) AppendPath(path DeleteAttestationDomainRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *DeleteAttestationDomainRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(DeleteAttestationDomainRequest_FieldPath))
}

func (fieldMask *DeleteAttestationDomainRequest_FieldMask) GetPaths() []DeleteAttestationDomainRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *DeleteAttestationDomainRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *DeleteAttestationDomainRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseDeleteAttestationDomainRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *DeleteAttestationDomainRequest_FieldMask) Set(target, source *DeleteAttestationDomainRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *DeleteAttestationDomainRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*DeleteAttestationDomainRequest), source.(*DeleteAttestationDomainRequest))
}

func (fieldMask *DeleteAttestationDomainRequest_FieldMask) Project(source *DeleteAttestationDomainRequest) *DeleteAttestationDomainRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &DeleteAttestationDomainRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *DeleteAttestationDomainRequest_FieldTerminalPath:
			switch tp.selector {
			case DeleteAttestationDomainRequest_FieldPathSelectorName:
				result.Name = source.Name
			}
		}
	}
	return result
}

func (fieldMask *DeleteAttestationDomainRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*DeleteAttestationDomainRequest))
}

func (fieldMask *DeleteAttestationDomainRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}
