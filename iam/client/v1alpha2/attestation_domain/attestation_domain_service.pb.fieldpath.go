// Code generated by protoc-gen-goten-object
// File: edgelq/iam/proto/v1alpha2/attestation_domain_service.proto
// DO NOT EDIT!!!

package attestation_domain_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	attestation_domain "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/attestation_domain"
	project "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/project"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &attestation_domain.AttestationDomain{}
	_ = &project.Project{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type GetAttestationDomainRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() GetAttestationDomainRequest_FieldPathSelector
	Get(source *GetAttestationDomainRequest) []interface{}
	GetSingle(source *GetAttestationDomainRequest) (interface{}, bool)
	ClearValue(item *GetAttestationDomainRequest)

	// Those methods build corresponding GetAttestationDomainRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) GetAttestationDomainRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) GetAttestationDomainRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) GetAttestationDomainRequest_FieldPathArrayItemValue
}

type GetAttestationDomainRequest_FieldPathSelector int32

const (
	GetAttestationDomainRequest_FieldPathSelectorName      GetAttestationDomainRequest_FieldPathSelector = 0
	GetAttestationDomainRequest_FieldPathSelectorFieldMask GetAttestationDomainRequest_FieldPathSelector = 1
	GetAttestationDomainRequest_FieldPathSelectorView      GetAttestationDomainRequest_FieldPathSelector = 2
)

func (s GetAttestationDomainRequest_FieldPathSelector) String() string {
	switch s {
	case GetAttestationDomainRequest_FieldPathSelectorName:
		return "name"
	case GetAttestationDomainRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case GetAttestationDomainRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for GetAttestationDomainRequest: %d", s))
	}
}

func BuildGetAttestationDomainRequest_FieldPath(fp gotenobject.RawFieldPath) (GetAttestationDomainRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object GetAttestationDomainRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &GetAttestationDomainRequest_FieldTerminalPath{selector: GetAttestationDomainRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &GetAttestationDomainRequest_FieldTerminalPath{selector: GetAttestationDomainRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &GetAttestationDomainRequest_FieldTerminalPath{selector: GetAttestationDomainRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object GetAttestationDomainRequest", fp)
}

func ParseGetAttestationDomainRequest_FieldPath(rawField string) (GetAttestationDomainRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildGetAttestationDomainRequest_FieldPath(fp)
}

func MustParseGetAttestationDomainRequest_FieldPath(rawField string) GetAttestationDomainRequest_FieldPath {
	fp, err := ParseGetAttestationDomainRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type GetAttestationDomainRequest_FieldTerminalPath struct {
	selector GetAttestationDomainRequest_FieldPathSelector
}

var _ GetAttestationDomainRequest_FieldPath = (*GetAttestationDomainRequest_FieldTerminalPath)(nil)

func (fp *GetAttestationDomainRequest_FieldTerminalPath) Selector() GetAttestationDomainRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *GetAttestationDomainRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *GetAttestationDomainRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source GetAttestationDomainRequest
func (fp *GetAttestationDomainRequest_FieldTerminalPath) Get(source *GetAttestationDomainRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case GetAttestationDomainRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case GetAttestationDomainRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case GetAttestationDomainRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for GetAttestationDomainRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *GetAttestationDomainRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*GetAttestationDomainRequest))
}

// GetSingle returns value pointed by specific field of from source GetAttestationDomainRequest
func (fp *GetAttestationDomainRequest_FieldTerminalPath) GetSingle(source *GetAttestationDomainRequest) (interface{}, bool) {
	switch fp.selector {
	case GetAttestationDomainRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case GetAttestationDomainRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case GetAttestationDomainRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for GetAttestationDomainRequest: %d", fp.selector))
	}
}

func (fp *GetAttestationDomainRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*GetAttestationDomainRequest))
}

// GetDefault returns a default value of the field type
func (fp *GetAttestationDomainRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case GetAttestationDomainRequest_FieldPathSelectorName:
		return (*attestation_domain.Reference)(nil)
	case GetAttestationDomainRequest_FieldPathSelectorFieldMask:
		return (*attestation_domain.AttestationDomain_FieldMask)(nil)
	case GetAttestationDomainRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for GetAttestationDomainRequest: %d", fp.selector))
	}
}

func (fp *GetAttestationDomainRequest_FieldTerminalPath) ClearValue(item *GetAttestationDomainRequest) {
	if item != nil {
		switch fp.selector {
		case GetAttestationDomainRequest_FieldPathSelectorName:
			item.Name = nil
		case GetAttestationDomainRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case GetAttestationDomainRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for GetAttestationDomainRequest: %d", fp.selector))
		}
	}
}

func (fp *GetAttestationDomainRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*GetAttestationDomainRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *GetAttestationDomainRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == GetAttestationDomainRequest_FieldPathSelectorName ||
		fp.selector == GetAttestationDomainRequest_FieldPathSelectorFieldMask ||
		fp.selector == GetAttestationDomainRequest_FieldPathSelectorView
}

func (fp *GetAttestationDomainRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *GetAttestationDomainRequest_FieldTerminalPath) WithIValue(value interface{}) GetAttestationDomainRequest_FieldPathValue {
	switch fp.selector {
	case GetAttestationDomainRequest_FieldPathSelectorName:
		return &GetAttestationDomainRequest_FieldTerminalPathValue{GetAttestationDomainRequest_FieldTerminalPath: *fp, value: value.(*attestation_domain.Reference)}
	case GetAttestationDomainRequest_FieldPathSelectorFieldMask:
		return &GetAttestationDomainRequest_FieldTerminalPathValue{GetAttestationDomainRequest_FieldTerminalPath: *fp, value: value.(*attestation_domain.AttestationDomain_FieldMask)}
	case GetAttestationDomainRequest_FieldPathSelectorView:
		return &GetAttestationDomainRequest_FieldTerminalPathValue{GetAttestationDomainRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetAttestationDomainRequest: %d", fp.selector))
	}
}

func (fp *GetAttestationDomainRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *GetAttestationDomainRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) GetAttestationDomainRequest_FieldPathArrayOfValues {
	fpaov := &GetAttestationDomainRequest_FieldTerminalPathArrayOfValues{GetAttestationDomainRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case GetAttestationDomainRequest_FieldPathSelectorName:
		return &GetAttestationDomainRequest_FieldTerminalPathArrayOfValues{GetAttestationDomainRequest_FieldTerminalPath: *fp, values: values.([]*attestation_domain.Reference)}
	case GetAttestationDomainRequest_FieldPathSelectorFieldMask:
		return &GetAttestationDomainRequest_FieldTerminalPathArrayOfValues{GetAttestationDomainRequest_FieldTerminalPath: *fp, values: values.([]*attestation_domain.AttestationDomain_FieldMask)}
	case GetAttestationDomainRequest_FieldPathSelectorView:
		return &GetAttestationDomainRequest_FieldTerminalPathArrayOfValues{GetAttestationDomainRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetAttestationDomainRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *GetAttestationDomainRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *GetAttestationDomainRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) GetAttestationDomainRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for GetAttestationDomainRequest: %d", fp.selector))
	}
}

func (fp *GetAttestationDomainRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// GetAttestationDomainRequest_FieldPathValue allows storing values for GetAttestationDomainRequest fields according to their type
type GetAttestationDomainRequest_FieldPathValue interface {
	GetAttestationDomainRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **GetAttestationDomainRequest)
	CompareWith(*GetAttestationDomainRequest) (cmp int, comparable bool)
}

func ParseGetAttestationDomainRequest_FieldPathValue(pathStr, valueStr string) (GetAttestationDomainRequest_FieldPathValue, error) {
	fp, err := ParseGetAttestationDomainRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetAttestationDomainRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(GetAttestationDomainRequest_FieldPathValue), nil
}

func MustParseGetAttestationDomainRequest_FieldPathValue(pathStr, valueStr string) GetAttestationDomainRequest_FieldPathValue {
	fpv, err := ParseGetAttestationDomainRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type GetAttestationDomainRequest_FieldTerminalPathValue struct {
	GetAttestationDomainRequest_FieldTerminalPath
	value interface{}
}

var _ GetAttestationDomainRequest_FieldPathValue = (*GetAttestationDomainRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'GetAttestationDomainRequest' as interface{}
func (fpv *GetAttestationDomainRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *GetAttestationDomainRequest_FieldTerminalPathValue) AsNameValue() (*attestation_domain.Reference, bool) {
	res, ok := fpv.value.(*attestation_domain.Reference)
	return res, ok
}
func (fpv *GetAttestationDomainRequest_FieldTerminalPathValue) AsFieldMaskValue() (*attestation_domain.AttestationDomain_FieldMask, bool) {
	res, ok := fpv.value.(*attestation_domain.AttestationDomain_FieldMask)
	return res, ok
}
func (fpv *GetAttestationDomainRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object GetAttestationDomainRequest
func (fpv *GetAttestationDomainRequest_FieldTerminalPathValue) SetTo(target **GetAttestationDomainRequest) {
	if *target == nil {
		*target = new(GetAttestationDomainRequest)
	}
	switch fpv.selector {
	case GetAttestationDomainRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*attestation_domain.Reference)
	case GetAttestationDomainRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*attestation_domain.AttestationDomain_FieldMask)
	case GetAttestationDomainRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for GetAttestationDomainRequest: %d", fpv.selector))
	}
}

func (fpv *GetAttestationDomainRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*GetAttestationDomainRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'GetAttestationDomainRequest_FieldTerminalPathValue' with the value under path in 'GetAttestationDomainRequest'.
func (fpv *GetAttestationDomainRequest_FieldTerminalPathValue) CompareWith(source *GetAttestationDomainRequest) (int, bool) {
	switch fpv.selector {
	case GetAttestationDomainRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*attestation_domain.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case GetAttestationDomainRequest_FieldPathSelectorFieldMask:
		return 0, false
	case GetAttestationDomainRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for GetAttestationDomainRequest: %d", fpv.selector))
	}
}

func (fpv *GetAttestationDomainRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*GetAttestationDomainRequest))
}

// GetAttestationDomainRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for GetAttestationDomainRequest according to their type
// Present only for array (repeated) types.
type GetAttestationDomainRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	GetAttestationDomainRequest_FieldPath
	ContainsValue(*GetAttestationDomainRequest) bool
}

// ParseGetAttestationDomainRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseGetAttestationDomainRequest_FieldPathArrayItemValue(pathStr, valueStr string) (GetAttestationDomainRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseGetAttestationDomainRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetAttestationDomainRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(GetAttestationDomainRequest_FieldPathArrayItemValue), nil
}

func MustParseGetAttestationDomainRequest_FieldPathArrayItemValue(pathStr, valueStr string) GetAttestationDomainRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseGetAttestationDomainRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type GetAttestationDomainRequest_FieldTerminalPathArrayItemValue struct {
	GetAttestationDomainRequest_FieldTerminalPath
	value interface{}
}

var _ GetAttestationDomainRequest_FieldPathArrayItemValue = (*GetAttestationDomainRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object GetAttestationDomainRequest as interface{}
func (fpaiv *GetAttestationDomainRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *GetAttestationDomainRequest_FieldTerminalPathArrayItemValue) GetSingle(source *GetAttestationDomainRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *GetAttestationDomainRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*GetAttestationDomainRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'GetAttestationDomainRequest'
func (fpaiv *GetAttestationDomainRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *GetAttestationDomainRequest) bool {
	slice := fpaiv.GetAttestationDomainRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// GetAttestationDomainRequest_FieldPathArrayOfValues allows storing slice of values for GetAttestationDomainRequest fields according to their type
type GetAttestationDomainRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	GetAttestationDomainRequest_FieldPath
}

func ParseGetAttestationDomainRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (GetAttestationDomainRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseGetAttestationDomainRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetAttestationDomainRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(GetAttestationDomainRequest_FieldPathArrayOfValues), nil
}

func MustParseGetAttestationDomainRequest_FieldPathArrayOfValues(pathStr, valuesStr string) GetAttestationDomainRequest_FieldPathArrayOfValues {
	fpaov, err := ParseGetAttestationDomainRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type GetAttestationDomainRequest_FieldTerminalPathArrayOfValues struct {
	GetAttestationDomainRequest_FieldTerminalPath
	values interface{}
}

var _ GetAttestationDomainRequest_FieldPathArrayOfValues = (*GetAttestationDomainRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *GetAttestationDomainRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case GetAttestationDomainRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*attestation_domain.Reference) {
			values = append(values, v)
		}
	case GetAttestationDomainRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*attestation_domain.AttestationDomain_FieldMask) {
			values = append(values, v)
		}
	case GetAttestationDomainRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *GetAttestationDomainRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*attestation_domain.Reference, bool) {
	res, ok := fpaov.values.([]*attestation_domain.Reference)
	return res, ok
}
func (fpaov *GetAttestationDomainRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*attestation_domain.AttestationDomain_FieldMask, bool) {
	res, ok := fpaov.values.([]*attestation_domain.AttestationDomain_FieldMask)
	return res, ok
}
func (fpaov *GetAttestationDomainRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetAttestationDomainsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetAttestationDomainsRequest_FieldPathSelector
	Get(source *BatchGetAttestationDomainsRequest) []interface{}
	GetSingle(source *BatchGetAttestationDomainsRequest) (interface{}, bool)
	ClearValue(item *BatchGetAttestationDomainsRequest)

	// Those methods build corresponding BatchGetAttestationDomainsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetAttestationDomainsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetAttestationDomainsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetAttestationDomainsRequest_FieldPathArrayItemValue
}

type BatchGetAttestationDomainsRequest_FieldPathSelector int32

const (
	BatchGetAttestationDomainsRequest_FieldPathSelectorNames     BatchGetAttestationDomainsRequest_FieldPathSelector = 0
	BatchGetAttestationDomainsRequest_FieldPathSelectorFieldMask BatchGetAttestationDomainsRequest_FieldPathSelector = 1
	BatchGetAttestationDomainsRequest_FieldPathSelectorView      BatchGetAttestationDomainsRequest_FieldPathSelector = 2
)

func (s BatchGetAttestationDomainsRequest_FieldPathSelector) String() string {
	switch s {
	case BatchGetAttestationDomainsRequest_FieldPathSelectorNames:
		return "names"
	case BatchGetAttestationDomainsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case BatchGetAttestationDomainsRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAttestationDomainsRequest: %d", s))
	}
}

func BuildBatchGetAttestationDomainsRequest_FieldPath(fp gotenobject.RawFieldPath) (BatchGetAttestationDomainsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetAttestationDomainsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "names":
			return &BatchGetAttestationDomainsRequest_FieldTerminalPath{selector: BatchGetAttestationDomainsRequest_FieldPathSelectorNames}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &BatchGetAttestationDomainsRequest_FieldTerminalPath{selector: BatchGetAttestationDomainsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &BatchGetAttestationDomainsRequest_FieldTerminalPath{selector: BatchGetAttestationDomainsRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetAttestationDomainsRequest", fp)
}

func ParseBatchGetAttestationDomainsRequest_FieldPath(rawField string) (BatchGetAttestationDomainsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetAttestationDomainsRequest_FieldPath(fp)
}

func MustParseBatchGetAttestationDomainsRequest_FieldPath(rawField string) BatchGetAttestationDomainsRequest_FieldPath {
	fp, err := ParseBatchGetAttestationDomainsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetAttestationDomainsRequest_FieldTerminalPath struct {
	selector BatchGetAttestationDomainsRequest_FieldPathSelector
}

var _ BatchGetAttestationDomainsRequest_FieldPath = (*BatchGetAttestationDomainsRequest_FieldTerminalPath)(nil)

func (fp *BatchGetAttestationDomainsRequest_FieldTerminalPath) Selector() BatchGetAttestationDomainsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetAttestationDomainsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetAttestationDomainsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetAttestationDomainsRequest
func (fp *BatchGetAttestationDomainsRequest_FieldTerminalPath) Get(source *BatchGetAttestationDomainsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetAttestationDomainsRequest_FieldPathSelectorNames:
			for _, value := range source.GetNames() {
				values = append(values, value)
			}
		case BatchGetAttestationDomainsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case BatchGetAttestationDomainsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetAttestationDomainsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetAttestationDomainsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetAttestationDomainsRequest))
}

// GetSingle returns value pointed by specific field of from source BatchGetAttestationDomainsRequest
func (fp *BatchGetAttestationDomainsRequest_FieldTerminalPath) GetSingle(source *BatchGetAttestationDomainsRequest) (interface{}, bool) {
	switch fp.selector {
	case BatchGetAttestationDomainsRequest_FieldPathSelectorNames:
		res := source.GetNames()
		return res, res != nil
	case BatchGetAttestationDomainsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case BatchGetAttestationDomainsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAttestationDomainsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetAttestationDomainsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetAttestationDomainsRequest))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetAttestationDomainsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetAttestationDomainsRequest_FieldPathSelectorNames:
		return ([]*attestation_domain.Reference)(nil)
	case BatchGetAttestationDomainsRequest_FieldPathSelectorFieldMask:
		return (*attestation_domain.AttestationDomain_FieldMask)(nil)
	case BatchGetAttestationDomainsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAttestationDomainsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetAttestationDomainsRequest_FieldTerminalPath) ClearValue(item *BatchGetAttestationDomainsRequest) {
	if item != nil {
		switch fp.selector {
		case BatchGetAttestationDomainsRequest_FieldPathSelectorNames:
			item.Names = nil
		case BatchGetAttestationDomainsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case BatchGetAttestationDomainsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetAttestationDomainsRequest: %d", fp.selector))
		}
	}
}

func (fp *BatchGetAttestationDomainsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetAttestationDomainsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetAttestationDomainsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetAttestationDomainsRequest_FieldPathSelectorNames ||
		fp.selector == BatchGetAttestationDomainsRequest_FieldPathSelectorFieldMask ||
		fp.selector == BatchGetAttestationDomainsRequest_FieldPathSelectorView
}

func (fp *BatchGetAttestationDomainsRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *BatchGetAttestationDomainsRequest_FieldTerminalPath) WithIValue(value interface{}) BatchGetAttestationDomainsRequest_FieldPathValue {
	switch fp.selector {
	case BatchGetAttestationDomainsRequest_FieldPathSelectorNames:
		return &BatchGetAttestationDomainsRequest_FieldTerminalPathValue{BatchGetAttestationDomainsRequest_FieldTerminalPath: *fp, value: value.([]*attestation_domain.Reference)}
	case BatchGetAttestationDomainsRequest_FieldPathSelectorFieldMask:
		return &BatchGetAttestationDomainsRequest_FieldTerminalPathValue{BatchGetAttestationDomainsRequest_FieldTerminalPath: *fp, value: value.(*attestation_domain.AttestationDomain_FieldMask)}
	case BatchGetAttestationDomainsRequest_FieldPathSelectorView:
		return &BatchGetAttestationDomainsRequest_FieldTerminalPathValue{BatchGetAttestationDomainsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAttestationDomainsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetAttestationDomainsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetAttestationDomainsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetAttestationDomainsRequest_FieldPathArrayOfValues {
	fpaov := &BatchGetAttestationDomainsRequest_FieldTerminalPathArrayOfValues{BatchGetAttestationDomainsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetAttestationDomainsRequest_FieldPathSelectorNames:
		return &BatchGetAttestationDomainsRequest_FieldTerminalPathArrayOfValues{BatchGetAttestationDomainsRequest_FieldTerminalPath: *fp, values: values.([][]*attestation_domain.Reference)}
	case BatchGetAttestationDomainsRequest_FieldPathSelectorFieldMask:
		return &BatchGetAttestationDomainsRequest_FieldTerminalPathArrayOfValues{BatchGetAttestationDomainsRequest_FieldTerminalPath: *fp, values: values.([]*attestation_domain.AttestationDomain_FieldMask)}
	case BatchGetAttestationDomainsRequest_FieldPathSelectorView:
		return &BatchGetAttestationDomainsRequest_FieldTerminalPathArrayOfValues{BatchGetAttestationDomainsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAttestationDomainsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetAttestationDomainsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetAttestationDomainsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetAttestationDomainsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetAttestationDomainsRequest_FieldPathSelectorNames:
		return &BatchGetAttestationDomainsRequest_FieldTerminalPathArrayItemValue{BatchGetAttestationDomainsRequest_FieldTerminalPath: *fp, value: value.(*attestation_domain.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAttestationDomainsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetAttestationDomainsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// BatchGetAttestationDomainsRequest_FieldPathValue allows storing values for BatchGetAttestationDomainsRequest fields according to their type
type BatchGetAttestationDomainsRequest_FieldPathValue interface {
	BatchGetAttestationDomainsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetAttestationDomainsRequest)
	CompareWith(*BatchGetAttestationDomainsRequest) (cmp int, comparable bool)
}

func ParseBatchGetAttestationDomainsRequest_FieldPathValue(pathStr, valueStr string) (BatchGetAttestationDomainsRequest_FieldPathValue, error) {
	fp, err := ParseBatchGetAttestationDomainsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetAttestationDomainsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetAttestationDomainsRequest_FieldPathValue), nil
}

func MustParseBatchGetAttestationDomainsRequest_FieldPathValue(pathStr, valueStr string) BatchGetAttestationDomainsRequest_FieldPathValue {
	fpv, err := ParseBatchGetAttestationDomainsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetAttestationDomainsRequest_FieldTerminalPathValue struct {
	BatchGetAttestationDomainsRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetAttestationDomainsRequest_FieldPathValue = (*BatchGetAttestationDomainsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetAttestationDomainsRequest' as interface{}
func (fpv *BatchGetAttestationDomainsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetAttestationDomainsRequest_FieldTerminalPathValue) AsNamesValue() ([]*attestation_domain.Reference, bool) {
	res, ok := fpv.value.([]*attestation_domain.Reference)
	return res, ok
}
func (fpv *BatchGetAttestationDomainsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*attestation_domain.AttestationDomain_FieldMask, bool) {
	res, ok := fpv.value.(*attestation_domain.AttestationDomain_FieldMask)
	return res, ok
}
func (fpv *BatchGetAttestationDomainsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetAttestationDomainsRequest
func (fpv *BatchGetAttestationDomainsRequest_FieldTerminalPathValue) SetTo(target **BatchGetAttestationDomainsRequest) {
	if *target == nil {
		*target = new(BatchGetAttestationDomainsRequest)
	}
	switch fpv.selector {
	case BatchGetAttestationDomainsRequest_FieldPathSelectorNames:
		(*target).Names = fpv.value.([]*attestation_domain.Reference)
	case BatchGetAttestationDomainsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*attestation_domain.AttestationDomain_FieldMask)
	case BatchGetAttestationDomainsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAttestationDomainsRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetAttestationDomainsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetAttestationDomainsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetAttestationDomainsRequest_FieldTerminalPathValue' with the value under path in 'BatchGetAttestationDomainsRequest'.
func (fpv *BatchGetAttestationDomainsRequest_FieldTerminalPathValue) CompareWith(source *BatchGetAttestationDomainsRequest) (int, bool) {
	switch fpv.selector {
	case BatchGetAttestationDomainsRequest_FieldPathSelectorNames:
		return 0, false
	case BatchGetAttestationDomainsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case BatchGetAttestationDomainsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAttestationDomainsRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetAttestationDomainsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetAttestationDomainsRequest))
}

// BatchGetAttestationDomainsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetAttestationDomainsRequest according to their type
// Present only for array (repeated) types.
type BatchGetAttestationDomainsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetAttestationDomainsRequest_FieldPath
	ContainsValue(*BatchGetAttestationDomainsRequest) bool
}

// ParseBatchGetAttestationDomainsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetAttestationDomainsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetAttestationDomainsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetAttestationDomainsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetAttestationDomainsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetAttestationDomainsRequest_FieldPathArrayItemValue), nil
}

func MustParseBatchGetAttestationDomainsRequest_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetAttestationDomainsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetAttestationDomainsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetAttestationDomainsRequest_FieldTerminalPathArrayItemValue struct {
	BatchGetAttestationDomainsRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetAttestationDomainsRequest_FieldPathArrayItemValue = (*BatchGetAttestationDomainsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetAttestationDomainsRequest as interface{}
func (fpaiv *BatchGetAttestationDomainsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetAttestationDomainsRequest_FieldTerminalPathArrayItemValue) AsNamesItemValue() (*attestation_domain.Reference, bool) {
	res, ok := fpaiv.value.(*attestation_domain.Reference)
	return res, ok
}

func (fpaiv *BatchGetAttestationDomainsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetAttestationDomainsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetAttestationDomainsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetAttestationDomainsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetAttestationDomainsRequest'
func (fpaiv *BatchGetAttestationDomainsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetAttestationDomainsRequest) bool {
	slice := fpaiv.BatchGetAttestationDomainsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// BatchGetAttestationDomainsRequest_FieldPathArrayOfValues allows storing slice of values for BatchGetAttestationDomainsRequest fields according to their type
type BatchGetAttestationDomainsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetAttestationDomainsRequest_FieldPath
}

func ParseBatchGetAttestationDomainsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetAttestationDomainsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetAttestationDomainsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetAttestationDomainsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetAttestationDomainsRequest_FieldPathArrayOfValues), nil
}

func MustParseBatchGetAttestationDomainsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetAttestationDomainsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetAttestationDomainsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetAttestationDomainsRequest_FieldTerminalPathArrayOfValues struct {
	BatchGetAttestationDomainsRequest_FieldTerminalPath
	values interface{}
}

var _ BatchGetAttestationDomainsRequest_FieldPathArrayOfValues = (*BatchGetAttestationDomainsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetAttestationDomainsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetAttestationDomainsRequest_FieldPathSelectorNames:
		for _, v := range fpaov.values.([][]*attestation_domain.Reference) {
			values = append(values, v)
		}
	case BatchGetAttestationDomainsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*attestation_domain.AttestationDomain_FieldMask) {
			values = append(values, v)
		}
	case BatchGetAttestationDomainsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetAttestationDomainsRequest_FieldTerminalPathArrayOfValues) AsNamesArrayOfValues() ([][]*attestation_domain.Reference, bool) {
	res, ok := fpaov.values.([][]*attestation_domain.Reference)
	return res, ok
}
func (fpaov *BatchGetAttestationDomainsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*attestation_domain.AttestationDomain_FieldMask, bool) {
	res, ok := fpaov.values.([]*attestation_domain.AttestationDomain_FieldMask)
	return res, ok
}
func (fpaov *BatchGetAttestationDomainsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetAttestationDomainsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetAttestationDomainsResponse_FieldPathSelector
	Get(source *BatchGetAttestationDomainsResponse) []interface{}
	GetSingle(source *BatchGetAttestationDomainsResponse) (interface{}, bool)
	ClearValue(item *BatchGetAttestationDomainsResponse)

	// Those methods build corresponding BatchGetAttestationDomainsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetAttestationDomainsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetAttestationDomainsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetAttestationDomainsResponse_FieldPathArrayItemValue
}

type BatchGetAttestationDomainsResponse_FieldPathSelector int32

const (
	BatchGetAttestationDomainsResponse_FieldPathSelectorAttestationDomains BatchGetAttestationDomainsResponse_FieldPathSelector = 0
	BatchGetAttestationDomainsResponse_FieldPathSelectorMissing            BatchGetAttestationDomainsResponse_FieldPathSelector = 1
)

func (s BatchGetAttestationDomainsResponse_FieldPathSelector) String() string {
	switch s {
	case BatchGetAttestationDomainsResponse_FieldPathSelectorAttestationDomains:
		return "attestation_domains"
	case BatchGetAttestationDomainsResponse_FieldPathSelectorMissing:
		return "missing"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAttestationDomainsResponse: %d", s))
	}
}

func BuildBatchGetAttestationDomainsResponse_FieldPath(fp gotenobject.RawFieldPath) (BatchGetAttestationDomainsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetAttestationDomainsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "attestation_domains", "attestationDomains", "attestation-domains":
			return &BatchGetAttestationDomainsResponse_FieldTerminalPath{selector: BatchGetAttestationDomainsResponse_FieldPathSelectorAttestationDomains}, nil
		case "missing":
			return &BatchGetAttestationDomainsResponse_FieldTerminalPath{selector: BatchGetAttestationDomainsResponse_FieldPathSelectorMissing}, nil
		}
	} else {
		switch fp[0] {
		case "attestation_domains", "attestationDomains", "attestation-domains":
			if subpath, err := attestation_domain.BuildAttestationDomain_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &BatchGetAttestationDomainsResponse_FieldSubPath{selector: BatchGetAttestationDomainsResponse_FieldPathSelectorAttestationDomains, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetAttestationDomainsResponse", fp)
}

func ParseBatchGetAttestationDomainsResponse_FieldPath(rawField string) (BatchGetAttestationDomainsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetAttestationDomainsResponse_FieldPath(fp)
}

func MustParseBatchGetAttestationDomainsResponse_FieldPath(rawField string) BatchGetAttestationDomainsResponse_FieldPath {
	fp, err := ParseBatchGetAttestationDomainsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetAttestationDomainsResponse_FieldTerminalPath struct {
	selector BatchGetAttestationDomainsResponse_FieldPathSelector
}

var _ BatchGetAttestationDomainsResponse_FieldPath = (*BatchGetAttestationDomainsResponse_FieldTerminalPath)(nil)

func (fp *BatchGetAttestationDomainsResponse_FieldTerminalPath) Selector() BatchGetAttestationDomainsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetAttestationDomainsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetAttestationDomainsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetAttestationDomainsResponse
func (fp *BatchGetAttestationDomainsResponse_FieldTerminalPath) Get(source *BatchGetAttestationDomainsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetAttestationDomainsResponse_FieldPathSelectorAttestationDomains:
			for _, value := range source.GetAttestationDomains() {
				values = append(values, value)
			}
		case BatchGetAttestationDomainsResponse_FieldPathSelectorMissing:
			for _, value := range source.GetMissing() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetAttestationDomainsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetAttestationDomainsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetAttestationDomainsResponse))
}

// GetSingle returns value pointed by specific field of from source BatchGetAttestationDomainsResponse
func (fp *BatchGetAttestationDomainsResponse_FieldTerminalPath) GetSingle(source *BatchGetAttestationDomainsResponse) (interface{}, bool) {
	switch fp.selector {
	case BatchGetAttestationDomainsResponse_FieldPathSelectorAttestationDomains:
		res := source.GetAttestationDomains()
		return res, res != nil
	case BatchGetAttestationDomainsResponse_FieldPathSelectorMissing:
		res := source.GetMissing()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAttestationDomainsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetAttestationDomainsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetAttestationDomainsResponse))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetAttestationDomainsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetAttestationDomainsResponse_FieldPathSelectorAttestationDomains:
		return ([]*attestation_domain.AttestationDomain)(nil)
	case BatchGetAttestationDomainsResponse_FieldPathSelectorMissing:
		return ([]*attestation_domain.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAttestationDomainsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetAttestationDomainsResponse_FieldTerminalPath) ClearValue(item *BatchGetAttestationDomainsResponse) {
	if item != nil {
		switch fp.selector {
		case BatchGetAttestationDomainsResponse_FieldPathSelectorAttestationDomains:
			item.AttestationDomains = nil
		case BatchGetAttestationDomainsResponse_FieldPathSelectorMissing:
			item.Missing = nil
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetAttestationDomainsResponse: %d", fp.selector))
		}
	}
}

func (fp *BatchGetAttestationDomainsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetAttestationDomainsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetAttestationDomainsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetAttestationDomainsResponse_FieldPathSelectorMissing
}

func (fp *BatchGetAttestationDomainsResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *BatchGetAttestationDomainsResponse_FieldTerminalPath) WithIValue(value interface{}) BatchGetAttestationDomainsResponse_FieldPathValue {
	switch fp.selector {
	case BatchGetAttestationDomainsResponse_FieldPathSelectorAttestationDomains:
		return &BatchGetAttestationDomainsResponse_FieldTerminalPathValue{BatchGetAttestationDomainsResponse_FieldTerminalPath: *fp, value: value.([]*attestation_domain.AttestationDomain)}
	case BatchGetAttestationDomainsResponse_FieldPathSelectorMissing:
		return &BatchGetAttestationDomainsResponse_FieldTerminalPathValue{BatchGetAttestationDomainsResponse_FieldTerminalPath: *fp, value: value.([]*attestation_domain.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAttestationDomainsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetAttestationDomainsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetAttestationDomainsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetAttestationDomainsResponse_FieldPathArrayOfValues {
	fpaov := &BatchGetAttestationDomainsResponse_FieldTerminalPathArrayOfValues{BatchGetAttestationDomainsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetAttestationDomainsResponse_FieldPathSelectorAttestationDomains:
		return &BatchGetAttestationDomainsResponse_FieldTerminalPathArrayOfValues{BatchGetAttestationDomainsResponse_FieldTerminalPath: *fp, values: values.([][]*attestation_domain.AttestationDomain)}
	case BatchGetAttestationDomainsResponse_FieldPathSelectorMissing:
		return &BatchGetAttestationDomainsResponse_FieldTerminalPathArrayOfValues{BatchGetAttestationDomainsResponse_FieldTerminalPath: *fp, values: values.([][]*attestation_domain.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAttestationDomainsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetAttestationDomainsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetAttestationDomainsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetAttestationDomainsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetAttestationDomainsResponse_FieldPathSelectorAttestationDomains:
		return &BatchGetAttestationDomainsResponse_FieldTerminalPathArrayItemValue{BatchGetAttestationDomainsResponse_FieldTerminalPath: *fp, value: value.(*attestation_domain.AttestationDomain)}
	case BatchGetAttestationDomainsResponse_FieldPathSelectorMissing:
		return &BatchGetAttestationDomainsResponse_FieldTerminalPathArrayItemValue{BatchGetAttestationDomainsResponse_FieldTerminalPath: *fp, value: value.(*attestation_domain.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAttestationDomainsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetAttestationDomainsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type BatchGetAttestationDomainsResponse_FieldSubPath struct {
	selector BatchGetAttestationDomainsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ BatchGetAttestationDomainsResponse_FieldPath = (*BatchGetAttestationDomainsResponse_FieldSubPath)(nil)

func (fps *BatchGetAttestationDomainsResponse_FieldSubPath) Selector() BatchGetAttestationDomainsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *BatchGetAttestationDomainsResponse_FieldSubPath) AsAttestationDomainsSubPath() (attestation_domain.AttestationDomain_FieldPath, bool) {
	res, ok := fps.subPath.(attestation_domain.AttestationDomain_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *BatchGetAttestationDomainsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *BatchGetAttestationDomainsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source BatchGetAttestationDomainsResponse
func (fps *BatchGetAttestationDomainsResponse_FieldSubPath) Get(source *BatchGetAttestationDomainsResponse) (values []interface{}) {
	if asAttestationDomainFieldPath, ok := fps.AsAttestationDomainsSubPath(); ok {
		for _, item := range source.GetAttestationDomains() {
			values = append(values, asAttestationDomainFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for BatchGetAttestationDomainsResponse: %d", fps.selector))
	}
	return
}

func (fps *BatchGetAttestationDomainsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*BatchGetAttestationDomainsResponse))
}

// GetSingle returns value of selected field from source BatchGetAttestationDomainsResponse
func (fps *BatchGetAttestationDomainsResponse_FieldSubPath) GetSingle(source *BatchGetAttestationDomainsResponse) (interface{}, bool) {
	switch fps.selector {
	case BatchGetAttestationDomainsResponse_FieldPathSelectorAttestationDomains:
		if len(source.GetAttestationDomains()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetAttestationDomains()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAttestationDomainsResponse: %d", fps.selector))
	}
}

func (fps *BatchGetAttestationDomainsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*BatchGetAttestationDomainsResponse))
}

// GetDefault returns a default value of the field type
func (fps *BatchGetAttestationDomainsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *BatchGetAttestationDomainsResponse_FieldSubPath) ClearValue(item *BatchGetAttestationDomainsResponse) {
	if item != nil {
		switch fps.selector {
		case BatchGetAttestationDomainsResponse_FieldPathSelectorAttestationDomains:
			for _, subItem := range item.AttestationDomains {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetAttestationDomainsResponse: %d", fps.selector))
		}
	}
}

func (fps *BatchGetAttestationDomainsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*BatchGetAttestationDomainsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *BatchGetAttestationDomainsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *BatchGetAttestationDomainsResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&BatchGetAttestationDomainsResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *BatchGetAttestationDomainsResponse_FieldSubPath) WithIValue(value interface{}) BatchGetAttestationDomainsResponse_FieldPathValue {
	return &BatchGetAttestationDomainsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *BatchGetAttestationDomainsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *BatchGetAttestationDomainsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) BatchGetAttestationDomainsResponse_FieldPathArrayOfValues {
	return &BatchGetAttestationDomainsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *BatchGetAttestationDomainsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *BatchGetAttestationDomainsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) BatchGetAttestationDomainsResponse_FieldPathArrayItemValue {
	return &BatchGetAttestationDomainsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *BatchGetAttestationDomainsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// BatchGetAttestationDomainsResponse_FieldPathValue allows storing values for BatchGetAttestationDomainsResponse fields according to their type
type BatchGetAttestationDomainsResponse_FieldPathValue interface {
	BatchGetAttestationDomainsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetAttestationDomainsResponse)
	CompareWith(*BatchGetAttestationDomainsResponse) (cmp int, comparable bool)
}

func ParseBatchGetAttestationDomainsResponse_FieldPathValue(pathStr, valueStr string) (BatchGetAttestationDomainsResponse_FieldPathValue, error) {
	fp, err := ParseBatchGetAttestationDomainsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetAttestationDomainsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetAttestationDomainsResponse_FieldPathValue), nil
}

func MustParseBatchGetAttestationDomainsResponse_FieldPathValue(pathStr, valueStr string) BatchGetAttestationDomainsResponse_FieldPathValue {
	fpv, err := ParseBatchGetAttestationDomainsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetAttestationDomainsResponse_FieldTerminalPathValue struct {
	BatchGetAttestationDomainsResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetAttestationDomainsResponse_FieldPathValue = (*BatchGetAttestationDomainsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetAttestationDomainsResponse' as interface{}
func (fpv *BatchGetAttestationDomainsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetAttestationDomainsResponse_FieldTerminalPathValue) AsAttestationDomainsValue() ([]*attestation_domain.AttestationDomain, bool) {
	res, ok := fpv.value.([]*attestation_domain.AttestationDomain)
	return res, ok
}
func (fpv *BatchGetAttestationDomainsResponse_FieldTerminalPathValue) AsMissingValue() ([]*attestation_domain.Reference, bool) {
	res, ok := fpv.value.([]*attestation_domain.Reference)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetAttestationDomainsResponse
func (fpv *BatchGetAttestationDomainsResponse_FieldTerminalPathValue) SetTo(target **BatchGetAttestationDomainsResponse) {
	if *target == nil {
		*target = new(BatchGetAttestationDomainsResponse)
	}
	switch fpv.selector {
	case BatchGetAttestationDomainsResponse_FieldPathSelectorAttestationDomains:
		(*target).AttestationDomains = fpv.value.([]*attestation_domain.AttestationDomain)
	case BatchGetAttestationDomainsResponse_FieldPathSelectorMissing:
		(*target).Missing = fpv.value.([]*attestation_domain.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAttestationDomainsResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetAttestationDomainsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetAttestationDomainsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetAttestationDomainsResponse_FieldTerminalPathValue' with the value under path in 'BatchGetAttestationDomainsResponse'.
func (fpv *BatchGetAttestationDomainsResponse_FieldTerminalPathValue) CompareWith(source *BatchGetAttestationDomainsResponse) (int, bool) {
	switch fpv.selector {
	case BatchGetAttestationDomainsResponse_FieldPathSelectorAttestationDomains:
		return 0, false
	case BatchGetAttestationDomainsResponse_FieldPathSelectorMissing:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAttestationDomainsResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetAttestationDomainsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetAttestationDomainsResponse))
}

type BatchGetAttestationDomainsResponse_FieldSubPathValue struct {
	BatchGetAttestationDomainsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ BatchGetAttestationDomainsResponse_FieldPathValue = (*BatchGetAttestationDomainsResponse_FieldSubPathValue)(nil)

func (fpvs *BatchGetAttestationDomainsResponse_FieldSubPathValue) AsAttestationDomainsPathValue() (attestation_domain.AttestationDomain_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(attestation_domain.AttestationDomain_FieldPathValue)
	return res, ok
}

func (fpvs *BatchGetAttestationDomainsResponse_FieldSubPathValue) SetTo(target **BatchGetAttestationDomainsResponse) {
	if *target == nil {
		*target = new(BatchGetAttestationDomainsResponse)
	}
	switch fpvs.Selector() {
	case BatchGetAttestationDomainsResponse_FieldPathSelectorAttestationDomains:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAttestationDomainsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetAttestationDomainsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetAttestationDomainsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *BatchGetAttestationDomainsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *BatchGetAttestationDomainsResponse_FieldSubPathValue) CompareWith(source *BatchGetAttestationDomainsResponse) (int, bool) {
	switch fpvs.Selector() {
	case BatchGetAttestationDomainsResponse_FieldPathSelectorAttestationDomains:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAttestationDomainsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetAttestationDomainsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*BatchGetAttestationDomainsResponse))
}

// BatchGetAttestationDomainsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetAttestationDomainsResponse according to their type
// Present only for array (repeated) types.
type BatchGetAttestationDomainsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetAttestationDomainsResponse_FieldPath
	ContainsValue(*BatchGetAttestationDomainsResponse) bool
}

// ParseBatchGetAttestationDomainsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetAttestationDomainsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetAttestationDomainsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetAttestationDomainsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetAttestationDomainsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetAttestationDomainsResponse_FieldPathArrayItemValue), nil
}

func MustParseBatchGetAttestationDomainsResponse_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetAttestationDomainsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetAttestationDomainsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetAttestationDomainsResponse_FieldTerminalPathArrayItemValue struct {
	BatchGetAttestationDomainsResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetAttestationDomainsResponse_FieldPathArrayItemValue = (*BatchGetAttestationDomainsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetAttestationDomainsResponse as interface{}
func (fpaiv *BatchGetAttestationDomainsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetAttestationDomainsResponse_FieldTerminalPathArrayItemValue) AsAttestationDomainsItemValue() (*attestation_domain.AttestationDomain, bool) {
	res, ok := fpaiv.value.(*attestation_domain.AttestationDomain)
	return res, ok
}
func (fpaiv *BatchGetAttestationDomainsResponse_FieldTerminalPathArrayItemValue) AsMissingItemValue() (*attestation_domain.Reference, bool) {
	res, ok := fpaiv.value.(*attestation_domain.Reference)
	return res, ok
}

func (fpaiv *BatchGetAttestationDomainsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetAttestationDomainsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetAttestationDomainsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetAttestationDomainsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetAttestationDomainsResponse'
func (fpaiv *BatchGetAttestationDomainsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetAttestationDomainsResponse) bool {
	slice := fpaiv.BatchGetAttestationDomainsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type BatchGetAttestationDomainsResponse_FieldSubPathArrayItemValue struct {
	BatchGetAttestationDomainsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *BatchGetAttestationDomainsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *BatchGetAttestationDomainsResponse_FieldSubPathArrayItemValue) AsAttestationDomainsPathItemValue() (attestation_domain.AttestationDomain_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(attestation_domain.AttestationDomain_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetAttestationDomainsResponse'
func (fpaivs *BatchGetAttestationDomainsResponse_FieldSubPathArrayItemValue) ContainsValue(source *BatchGetAttestationDomainsResponse) bool {
	switch fpaivs.Selector() {
	case BatchGetAttestationDomainsResponse_FieldPathSelectorAttestationDomains:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAttestationDomainsResponse: %d", fpaivs.Selector()))
	}
}

// BatchGetAttestationDomainsResponse_FieldPathArrayOfValues allows storing slice of values for BatchGetAttestationDomainsResponse fields according to their type
type BatchGetAttestationDomainsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetAttestationDomainsResponse_FieldPath
}

func ParseBatchGetAttestationDomainsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetAttestationDomainsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetAttestationDomainsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetAttestationDomainsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetAttestationDomainsResponse_FieldPathArrayOfValues), nil
}

func MustParseBatchGetAttestationDomainsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetAttestationDomainsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetAttestationDomainsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetAttestationDomainsResponse_FieldTerminalPathArrayOfValues struct {
	BatchGetAttestationDomainsResponse_FieldTerminalPath
	values interface{}
}

var _ BatchGetAttestationDomainsResponse_FieldPathArrayOfValues = (*BatchGetAttestationDomainsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetAttestationDomainsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetAttestationDomainsResponse_FieldPathSelectorAttestationDomains:
		for _, v := range fpaov.values.([][]*attestation_domain.AttestationDomain) {
			values = append(values, v)
		}
	case BatchGetAttestationDomainsResponse_FieldPathSelectorMissing:
		for _, v := range fpaov.values.([][]*attestation_domain.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetAttestationDomainsResponse_FieldTerminalPathArrayOfValues) AsAttestationDomainsArrayOfValues() ([][]*attestation_domain.AttestationDomain, bool) {
	res, ok := fpaov.values.([][]*attestation_domain.AttestationDomain)
	return res, ok
}
func (fpaov *BatchGetAttestationDomainsResponse_FieldTerminalPathArrayOfValues) AsMissingArrayOfValues() ([][]*attestation_domain.Reference, bool) {
	res, ok := fpaov.values.([][]*attestation_domain.Reference)
	return res, ok
}

type BatchGetAttestationDomainsResponse_FieldSubPathArrayOfValues struct {
	BatchGetAttestationDomainsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ BatchGetAttestationDomainsResponse_FieldPathArrayOfValues = (*BatchGetAttestationDomainsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *BatchGetAttestationDomainsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *BatchGetAttestationDomainsResponse_FieldSubPathArrayOfValues) AsAttestationDomainsPathArrayOfValues() (attestation_domain.AttestationDomain_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(attestation_domain.AttestationDomain_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListAttestationDomainsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListAttestationDomainsRequest_FieldPathSelector
	Get(source *ListAttestationDomainsRequest) []interface{}
	GetSingle(source *ListAttestationDomainsRequest) (interface{}, bool)
	ClearValue(item *ListAttestationDomainsRequest)

	// Those methods build corresponding ListAttestationDomainsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListAttestationDomainsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ListAttestationDomainsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListAttestationDomainsRequest_FieldPathArrayItemValue
}

type ListAttestationDomainsRequest_FieldPathSelector int32

const (
	ListAttestationDomainsRequest_FieldPathSelectorParent    ListAttestationDomainsRequest_FieldPathSelector = 0
	ListAttestationDomainsRequest_FieldPathSelectorPageSize  ListAttestationDomainsRequest_FieldPathSelector = 1
	ListAttestationDomainsRequest_FieldPathSelectorPageToken ListAttestationDomainsRequest_FieldPathSelector = 2
	ListAttestationDomainsRequest_FieldPathSelectorOrderBy   ListAttestationDomainsRequest_FieldPathSelector = 3
	ListAttestationDomainsRequest_FieldPathSelectorFilter    ListAttestationDomainsRequest_FieldPathSelector = 4
	ListAttestationDomainsRequest_FieldPathSelectorFieldMask ListAttestationDomainsRequest_FieldPathSelector = 5
	ListAttestationDomainsRequest_FieldPathSelectorView      ListAttestationDomainsRequest_FieldPathSelector = 6
)

func (s ListAttestationDomainsRequest_FieldPathSelector) String() string {
	switch s {
	case ListAttestationDomainsRequest_FieldPathSelectorParent:
		return "parent"
	case ListAttestationDomainsRequest_FieldPathSelectorPageSize:
		return "page_size"
	case ListAttestationDomainsRequest_FieldPathSelectorPageToken:
		return "page_token"
	case ListAttestationDomainsRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case ListAttestationDomainsRequest_FieldPathSelectorFilter:
		return "filter"
	case ListAttestationDomainsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case ListAttestationDomainsRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for ListAttestationDomainsRequest: %d", s))
	}
}

func BuildListAttestationDomainsRequest_FieldPath(fp gotenobject.RawFieldPath) (ListAttestationDomainsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListAttestationDomainsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &ListAttestationDomainsRequest_FieldTerminalPath{selector: ListAttestationDomainsRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &ListAttestationDomainsRequest_FieldTerminalPath{selector: ListAttestationDomainsRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &ListAttestationDomainsRequest_FieldTerminalPath{selector: ListAttestationDomainsRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &ListAttestationDomainsRequest_FieldTerminalPath{selector: ListAttestationDomainsRequest_FieldPathSelectorOrderBy}, nil
		case "filter":
			return &ListAttestationDomainsRequest_FieldTerminalPath{selector: ListAttestationDomainsRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &ListAttestationDomainsRequest_FieldTerminalPath{selector: ListAttestationDomainsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &ListAttestationDomainsRequest_FieldTerminalPath{selector: ListAttestationDomainsRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListAttestationDomainsRequest", fp)
}

func ParseListAttestationDomainsRequest_FieldPath(rawField string) (ListAttestationDomainsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListAttestationDomainsRequest_FieldPath(fp)
}

func MustParseListAttestationDomainsRequest_FieldPath(rawField string) ListAttestationDomainsRequest_FieldPath {
	fp, err := ParseListAttestationDomainsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListAttestationDomainsRequest_FieldTerminalPath struct {
	selector ListAttestationDomainsRequest_FieldPathSelector
}

var _ ListAttestationDomainsRequest_FieldPath = (*ListAttestationDomainsRequest_FieldTerminalPath)(nil)

func (fp *ListAttestationDomainsRequest_FieldTerminalPath) Selector() ListAttestationDomainsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListAttestationDomainsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListAttestationDomainsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListAttestationDomainsRequest
func (fp *ListAttestationDomainsRequest_FieldTerminalPath) Get(source *ListAttestationDomainsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListAttestationDomainsRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case ListAttestationDomainsRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case ListAttestationDomainsRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case ListAttestationDomainsRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case ListAttestationDomainsRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case ListAttestationDomainsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case ListAttestationDomainsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for ListAttestationDomainsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ListAttestationDomainsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListAttestationDomainsRequest))
}

// GetSingle returns value pointed by specific field of from source ListAttestationDomainsRequest
func (fp *ListAttestationDomainsRequest_FieldTerminalPath) GetSingle(source *ListAttestationDomainsRequest) (interface{}, bool) {
	switch fp.selector {
	case ListAttestationDomainsRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case ListAttestationDomainsRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case ListAttestationDomainsRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case ListAttestationDomainsRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case ListAttestationDomainsRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case ListAttestationDomainsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case ListAttestationDomainsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListAttestationDomainsRequest: %d", fp.selector))
	}
}

func (fp *ListAttestationDomainsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListAttestationDomainsRequest))
}

// GetDefault returns a default value of the field type
func (fp *ListAttestationDomainsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListAttestationDomainsRequest_FieldPathSelectorParent:
		return (*attestation_domain.ParentName)(nil)
	case ListAttestationDomainsRequest_FieldPathSelectorPageSize:
		return int32(0)
	case ListAttestationDomainsRequest_FieldPathSelectorPageToken:
		return (*attestation_domain.PagerCursor)(nil)
	case ListAttestationDomainsRequest_FieldPathSelectorOrderBy:
		return (*attestation_domain.OrderBy)(nil)
	case ListAttestationDomainsRequest_FieldPathSelectorFilter:
		return (*attestation_domain.Filter)(nil)
	case ListAttestationDomainsRequest_FieldPathSelectorFieldMask:
		return (*attestation_domain.AttestationDomain_FieldMask)(nil)
	case ListAttestationDomainsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for ListAttestationDomainsRequest: %d", fp.selector))
	}
}

func (fp *ListAttestationDomainsRequest_FieldTerminalPath) ClearValue(item *ListAttestationDomainsRequest) {
	if item != nil {
		switch fp.selector {
		case ListAttestationDomainsRequest_FieldPathSelectorParent:
			item.Parent = nil
		case ListAttestationDomainsRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case ListAttestationDomainsRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case ListAttestationDomainsRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case ListAttestationDomainsRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case ListAttestationDomainsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case ListAttestationDomainsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for ListAttestationDomainsRequest: %d", fp.selector))
		}
	}
}

func (fp *ListAttestationDomainsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListAttestationDomainsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListAttestationDomainsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListAttestationDomainsRequest_FieldPathSelectorParent ||
		fp.selector == ListAttestationDomainsRequest_FieldPathSelectorPageSize ||
		fp.selector == ListAttestationDomainsRequest_FieldPathSelectorPageToken ||
		fp.selector == ListAttestationDomainsRequest_FieldPathSelectorOrderBy ||
		fp.selector == ListAttestationDomainsRequest_FieldPathSelectorFilter ||
		fp.selector == ListAttestationDomainsRequest_FieldPathSelectorFieldMask ||
		fp.selector == ListAttestationDomainsRequest_FieldPathSelectorView
}

func (fp *ListAttestationDomainsRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ListAttestationDomainsRequest_FieldTerminalPath) WithIValue(value interface{}) ListAttestationDomainsRequest_FieldPathValue {
	switch fp.selector {
	case ListAttestationDomainsRequest_FieldPathSelectorParent:
		return &ListAttestationDomainsRequest_FieldTerminalPathValue{ListAttestationDomainsRequest_FieldTerminalPath: *fp, value: value.(*attestation_domain.ParentName)}
	case ListAttestationDomainsRequest_FieldPathSelectorPageSize:
		return &ListAttestationDomainsRequest_FieldTerminalPathValue{ListAttestationDomainsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case ListAttestationDomainsRequest_FieldPathSelectorPageToken:
		return &ListAttestationDomainsRequest_FieldTerminalPathValue{ListAttestationDomainsRequest_FieldTerminalPath: *fp, value: value.(*attestation_domain.PagerCursor)}
	case ListAttestationDomainsRequest_FieldPathSelectorOrderBy:
		return &ListAttestationDomainsRequest_FieldTerminalPathValue{ListAttestationDomainsRequest_FieldTerminalPath: *fp, value: value.(*attestation_domain.OrderBy)}
	case ListAttestationDomainsRequest_FieldPathSelectorFilter:
		return &ListAttestationDomainsRequest_FieldTerminalPathValue{ListAttestationDomainsRequest_FieldTerminalPath: *fp, value: value.(*attestation_domain.Filter)}
	case ListAttestationDomainsRequest_FieldPathSelectorFieldMask:
		return &ListAttestationDomainsRequest_FieldTerminalPathValue{ListAttestationDomainsRequest_FieldTerminalPath: *fp, value: value.(*attestation_domain.AttestationDomain_FieldMask)}
	case ListAttestationDomainsRequest_FieldPathSelectorView:
		return &ListAttestationDomainsRequest_FieldTerminalPathValue{ListAttestationDomainsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListAttestationDomainsRequest: %d", fp.selector))
	}
}

func (fp *ListAttestationDomainsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListAttestationDomainsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListAttestationDomainsRequest_FieldPathArrayOfValues {
	fpaov := &ListAttestationDomainsRequest_FieldTerminalPathArrayOfValues{ListAttestationDomainsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListAttestationDomainsRequest_FieldPathSelectorParent:
		return &ListAttestationDomainsRequest_FieldTerminalPathArrayOfValues{ListAttestationDomainsRequest_FieldTerminalPath: *fp, values: values.([]*attestation_domain.ParentName)}
	case ListAttestationDomainsRequest_FieldPathSelectorPageSize:
		return &ListAttestationDomainsRequest_FieldTerminalPathArrayOfValues{ListAttestationDomainsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case ListAttestationDomainsRequest_FieldPathSelectorPageToken:
		return &ListAttestationDomainsRequest_FieldTerminalPathArrayOfValues{ListAttestationDomainsRequest_FieldTerminalPath: *fp, values: values.([]*attestation_domain.PagerCursor)}
	case ListAttestationDomainsRequest_FieldPathSelectorOrderBy:
		return &ListAttestationDomainsRequest_FieldTerminalPathArrayOfValues{ListAttestationDomainsRequest_FieldTerminalPath: *fp, values: values.([]*attestation_domain.OrderBy)}
	case ListAttestationDomainsRequest_FieldPathSelectorFilter:
		return &ListAttestationDomainsRequest_FieldTerminalPathArrayOfValues{ListAttestationDomainsRequest_FieldTerminalPath: *fp, values: values.([]*attestation_domain.Filter)}
	case ListAttestationDomainsRequest_FieldPathSelectorFieldMask:
		return &ListAttestationDomainsRequest_FieldTerminalPathArrayOfValues{ListAttestationDomainsRequest_FieldTerminalPath: *fp, values: values.([]*attestation_domain.AttestationDomain_FieldMask)}
	case ListAttestationDomainsRequest_FieldPathSelectorView:
		return &ListAttestationDomainsRequest_FieldTerminalPathArrayOfValues{ListAttestationDomainsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListAttestationDomainsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListAttestationDomainsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListAttestationDomainsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListAttestationDomainsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ListAttestationDomainsRequest: %d", fp.selector))
	}
}

func (fp *ListAttestationDomainsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ListAttestationDomainsRequest_FieldPathValue allows storing values for ListAttestationDomainsRequest fields according to their type
type ListAttestationDomainsRequest_FieldPathValue interface {
	ListAttestationDomainsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListAttestationDomainsRequest)
	CompareWith(*ListAttestationDomainsRequest) (cmp int, comparable bool)
}

func ParseListAttestationDomainsRequest_FieldPathValue(pathStr, valueStr string) (ListAttestationDomainsRequest_FieldPathValue, error) {
	fp, err := ParseListAttestationDomainsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListAttestationDomainsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListAttestationDomainsRequest_FieldPathValue), nil
}

func MustParseListAttestationDomainsRequest_FieldPathValue(pathStr, valueStr string) ListAttestationDomainsRequest_FieldPathValue {
	fpv, err := ParseListAttestationDomainsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListAttestationDomainsRequest_FieldTerminalPathValue struct {
	ListAttestationDomainsRequest_FieldTerminalPath
	value interface{}
}

var _ ListAttestationDomainsRequest_FieldPathValue = (*ListAttestationDomainsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListAttestationDomainsRequest' as interface{}
func (fpv *ListAttestationDomainsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListAttestationDomainsRequest_FieldTerminalPathValue) AsParentValue() (*attestation_domain.ParentName, bool) {
	res, ok := fpv.value.(*attestation_domain.ParentName)
	return res, ok
}
func (fpv *ListAttestationDomainsRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *ListAttestationDomainsRequest_FieldTerminalPathValue) AsPageTokenValue() (*attestation_domain.PagerCursor, bool) {
	res, ok := fpv.value.(*attestation_domain.PagerCursor)
	return res, ok
}
func (fpv *ListAttestationDomainsRequest_FieldTerminalPathValue) AsOrderByValue() (*attestation_domain.OrderBy, bool) {
	res, ok := fpv.value.(*attestation_domain.OrderBy)
	return res, ok
}
func (fpv *ListAttestationDomainsRequest_FieldTerminalPathValue) AsFilterValue() (*attestation_domain.Filter, bool) {
	res, ok := fpv.value.(*attestation_domain.Filter)
	return res, ok
}
func (fpv *ListAttestationDomainsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*attestation_domain.AttestationDomain_FieldMask, bool) {
	res, ok := fpv.value.(*attestation_domain.AttestationDomain_FieldMask)
	return res, ok
}
func (fpv *ListAttestationDomainsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object ListAttestationDomainsRequest
func (fpv *ListAttestationDomainsRequest_FieldTerminalPathValue) SetTo(target **ListAttestationDomainsRequest) {
	if *target == nil {
		*target = new(ListAttestationDomainsRequest)
	}
	switch fpv.selector {
	case ListAttestationDomainsRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*attestation_domain.ParentName)
	case ListAttestationDomainsRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case ListAttestationDomainsRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*attestation_domain.PagerCursor)
	case ListAttestationDomainsRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*attestation_domain.OrderBy)
	case ListAttestationDomainsRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*attestation_domain.Filter)
	case ListAttestationDomainsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*attestation_domain.AttestationDomain_FieldMask)
	case ListAttestationDomainsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for ListAttestationDomainsRequest: %d", fpv.selector))
	}
}

func (fpv *ListAttestationDomainsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListAttestationDomainsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListAttestationDomainsRequest_FieldTerminalPathValue' with the value under path in 'ListAttestationDomainsRequest'.
func (fpv *ListAttestationDomainsRequest_FieldTerminalPathValue) CompareWith(source *ListAttestationDomainsRequest) (int, bool) {
	switch fpv.selector {
	case ListAttestationDomainsRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*attestation_domain.ParentName)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ListAttestationDomainsRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListAttestationDomainsRequest_FieldPathSelectorPageToken:
		return 0, false
	case ListAttestationDomainsRequest_FieldPathSelectorOrderBy:
		return 0, false
	case ListAttestationDomainsRequest_FieldPathSelectorFilter:
		return 0, false
	case ListAttestationDomainsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case ListAttestationDomainsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListAttestationDomainsRequest: %d", fpv.selector))
	}
}

func (fpv *ListAttestationDomainsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListAttestationDomainsRequest))
}

// ListAttestationDomainsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for ListAttestationDomainsRequest according to their type
// Present only for array (repeated) types.
type ListAttestationDomainsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListAttestationDomainsRequest_FieldPath
	ContainsValue(*ListAttestationDomainsRequest) bool
}

// ParseListAttestationDomainsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListAttestationDomainsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ListAttestationDomainsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseListAttestationDomainsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListAttestationDomainsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListAttestationDomainsRequest_FieldPathArrayItemValue), nil
}

func MustParseListAttestationDomainsRequest_FieldPathArrayItemValue(pathStr, valueStr string) ListAttestationDomainsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseListAttestationDomainsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListAttestationDomainsRequest_FieldTerminalPathArrayItemValue struct {
	ListAttestationDomainsRequest_FieldTerminalPath
	value interface{}
}

var _ ListAttestationDomainsRequest_FieldPathArrayItemValue = (*ListAttestationDomainsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListAttestationDomainsRequest as interface{}
func (fpaiv *ListAttestationDomainsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ListAttestationDomainsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ListAttestationDomainsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListAttestationDomainsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListAttestationDomainsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListAttestationDomainsRequest'
func (fpaiv *ListAttestationDomainsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ListAttestationDomainsRequest) bool {
	slice := fpaiv.ListAttestationDomainsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ListAttestationDomainsRequest_FieldPathArrayOfValues allows storing slice of values for ListAttestationDomainsRequest fields according to their type
type ListAttestationDomainsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListAttestationDomainsRequest_FieldPath
}

func ParseListAttestationDomainsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ListAttestationDomainsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseListAttestationDomainsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListAttestationDomainsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListAttestationDomainsRequest_FieldPathArrayOfValues), nil
}

func MustParseListAttestationDomainsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ListAttestationDomainsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseListAttestationDomainsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListAttestationDomainsRequest_FieldTerminalPathArrayOfValues struct {
	ListAttestationDomainsRequest_FieldTerminalPath
	values interface{}
}

var _ ListAttestationDomainsRequest_FieldPathArrayOfValues = (*ListAttestationDomainsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListAttestationDomainsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListAttestationDomainsRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*attestation_domain.ParentName) {
			values = append(values, v)
		}
	case ListAttestationDomainsRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case ListAttestationDomainsRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*attestation_domain.PagerCursor) {
			values = append(values, v)
		}
	case ListAttestationDomainsRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*attestation_domain.OrderBy) {
			values = append(values, v)
		}
	case ListAttestationDomainsRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*attestation_domain.Filter) {
			values = append(values, v)
		}
	case ListAttestationDomainsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*attestation_domain.AttestationDomain_FieldMask) {
			values = append(values, v)
		}
	case ListAttestationDomainsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListAttestationDomainsRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*attestation_domain.ParentName, bool) {
	res, ok := fpaov.values.([]*attestation_domain.ParentName)
	return res, ok
}
func (fpaov *ListAttestationDomainsRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *ListAttestationDomainsRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*attestation_domain.PagerCursor, bool) {
	res, ok := fpaov.values.([]*attestation_domain.PagerCursor)
	return res, ok
}
func (fpaov *ListAttestationDomainsRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*attestation_domain.OrderBy, bool) {
	res, ok := fpaov.values.([]*attestation_domain.OrderBy)
	return res, ok
}
func (fpaov *ListAttestationDomainsRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*attestation_domain.Filter, bool) {
	res, ok := fpaov.values.([]*attestation_domain.Filter)
	return res, ok
}
func (fpaov *ListAttestationDomainsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*attestation_domain.AttestationDomain_FieldMask, bool) {
	res, ok := fpaov.values.([]*attestation_domain.AttestationDomain_FieldMask)
	return res, ok
}
func (fpaov *ListAttestationDomainsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListAttestationDomainsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListAttestationDomainsResponse_FieldPathSelector
	Get(source *ListAttestationDomainsResponse) []interface{}
	GetSingle(source *ListAttestationDomainsResponse) (interface{}, bool)
	ClearValue(item *ListAttestationDomainsResponse)

	// Those methods build corresponding ListAttestationDomainsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListAttestationDomainsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) ListAttestationDomainsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListAttestationDomainsResponse_FieldPathArrayItemValue
}

type ListAttestationDomainsResponse_FieldPathSelector int32

const (
	ListAttestationDomainsResponse_FieldPathSelectorAttestationDomains ListAttestationDomainsResponse_FieldPathSelector = 0
	ListAttestationDomainsResponse_FieldPathSelectorPrevPageToken      ListAttestationDomainsResponse_FieldPathSelector = 1
	ListAttestationDomainsResponse_FieldPathSelectorNextPageToken      ListAttestationDomainsResponse_FieldPathSelector = 2
)

func (s ListAttestationDomainsResponse_FieldPathSelector) String() string {
	switch s {
	case ListAttestationDomainsResponse_FieldPathSelectorAttestationDomains:
		return "attestation_domains"
	case ListAttestationDomainsResponse_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case ListAttestationDomainsResponse_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for ListAttestationDomainsResponse: %d", s))
	}
}

func BuildListAttestationDomainsResponse_FieldPath(fp gotenobject.RawFieldPath) (ListAttestationDomainsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListAttestationDomainsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "attestation_domains", "attestationDomains", "attestation-domains":
			return &ListAttestationDomainsResponse_FieldTerminalPath{selector: ListAttestationDomainsResponse_FieldPathSelectorAttestationDomains}, nil
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &ListAttestationDomainsResponse_FieldTerminalPath{selector: ListAttestationDomainsResponse_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &ListAttestationDomainsResponse_FieldTerminalPath{selector: ListAttestationDomainsResponse_FieldPathSelectorNextPageToken}, nil
		}
	} else {
		switch fp[0] {
		case "attestation_domains", "attestationDomains", "attestation-domains":
			if subpath, err := attestation_domain.BuildAttestationDomain_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ListAttestationDomainsResponse_FieldSubPath{selector: ListAttestationDomainsResponse_FieldPathSelectorAttestationDomains, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListAttestationDomainsResponse", fp)
}

func ParseListAttestationDomainsResponse_FieldPath(rawField string) (ListAttestationDomainsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListAttestationDomainsResponse_FieldPath(fp)
}

func MustParseListAttestationDomainsResponse_FieldPath(rawField string) ListAttestationDomainsResponse_FieldPath {
	fp, err := ParseListAttestationDomainsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListAttestationDomainsResponse_FieldTerminalPath struct {
	selector ListAttestationDomainsResponse_FieldPathSelector
}

var _ ListAttestationDomainsResponse_FieldPath = (*ListAttestationDomainsResponse_FieldTerminalPath)(nil)

func (fp *ListAttestationDomainsResponse_FieldTerminalPath) Selector() ListAttestationDomainsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListAttestationDomainsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListAttestationDomainsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListAttestationDomainsResponse
func (fp *ListAttestationDomainsResponse_FieldTerminalPath) Get(source *ListAttestationDomainsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListAttestationDomainsResponse_FieldPathSelectorAttestationDomains:
			for _, value := range source.GetAttestationDomains() {
				values = append(values, value)
			}
		case ListAttestationDomainsResponse_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case ListAttestationDomainsResponse_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListAttestationDomainsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *ListAttestationDomainsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListAttestationDomainsResponse))
}

// GetSingle returns value pointed by specific field of from source ListAttestationDomainsResponse
func (fp *ListAttestationDomainsResponse_FieldTerminalPath) GetSingle(source *ListAttestationDomainsResponse) (interface{}, bool) {
	switch fp.selector {
	case ListAttestationDomainsResponse_FieldPathSelectorAttestationDomains:
		res := source.GetAttestationDomains()
		return res, res != nil
	case ListAttestationDomainsResponse_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case ListAttestationDomainsResponse_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListAttestationDomainsResponse: %d", fp.selector))
	}
}

func (fp *ListAttestationDomainsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListAttestationDomainsResponse))
}

// GetDefault returns a default value of the field type
func (fp *ListAttestationDomainsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListAttestationDomainsResponse_FieldPathSelectorAttestationDomains:
		return ([]*attestation_domain.AttestationDomain)(nil)
	case ListAttestationDomainsResponse_FieldPathSelectorPrevPageToken:
		return (*attestation_domain.PagerCursor)(nil)
	case ListAttestationDomainsResponse_FieldPathSelectorNextPageToken:
		return (*attestation_domain.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ListAttestationDomainsResponse: %d", fp.selector))
	}
}

func (fp *ListAttestationDomainsResponse_FieldTerminalPath) ClearValue(item *ListAttestationDomainsResponse) {
	if item != nil {
		switch fp.selector {
		case ListAttestationDomainsResponse_FieldPathSelectorAttestationDomains:
			item.AttestationDomains = nil
		case ListAttestationDomainsResponse_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case ListAttestationDomainsResponse_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for ListAttestationDomainsResponse: %d", fp.selector))
		}
	}
}

func (fp *ListAttestationDomainsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListAttestationDomainsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListAttestationDomainsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListAttestationDomainsResponse_FieldPathSelectorPrevPageToken ||
		fp.selector == ListAttestationDomainsResponse_FieldPathSelectorNextPageToken
}

func (fp *ListAttestationDomainsResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ListAttestationDomainsResponse_FieldTerminalPath) WithIValue(value interface{}) ListAttestationDomainsResponse_FieldPathValue {
	switch fp.selector {
	case ListAttestationDomainsResponse_FieldPathSelectorAttestationDomains:
		return &ListAttestationDomainsResponse_FieldTerminalPathValue{ListAttestationDomainsResponse_FieldTerminalPath: *fp, value: value.([]*attestation_domain.AttestationDomain)}
	case ListAttestationDomainsResponse_FieldPathSelectorPrevPageToken:
		return &ListAttestationDomainsResponse_FieldTerminalPathValue{ListAttestationDomainsResponse_FieldTerminalPath: *fp, value: value.(*attestation_domain.PagerCursor)}
	case ListAttestationDomainsResponse_FieldPathSelectorNextPageToken:
		return &ListAttestationDomainsResponse_FieldTerminalPathValue{ListAttestationDomainsResponse_FieldTerminalPath: *fp, value: value.(*attestation_domain.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListAttestationDomainsResponse: %d", fp.selector))
	}
}

func (fp *ListAttestationDomainsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListAttestationDomainsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListAttestationDomainsResponse_FieldPathArrayOfValues {
	fpaov := &ListAttestationDomainsResponse_FieldTerminalPathArrayOfValues{ListAttestationDomainsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListAttestationDomainsResponse_FieldPathSelectorAttestationDomains:
		return &ListAttestationDomainsResponse_FieldTerminalPathArrayOfValues{ListAttestationDomainsResponse_FieldTerminalPath: *fp, values: values.([][]*attestation_domain.AttestationDomain)}
	case ListAttestationDomainsResponse_FieldPathSelectorPrevPageToken:
		return &ListAttestationDomainsResponse_FieldTerminalPathArrayOfValues{ListAttestationDomainsResponse_FieldTerminalPath: *fp, values: values.([]*attestation_domain.PagerCursor)}
	case ListAttestationDomainsResponse_FieldPathSelectorNextPageToken:
		return &ListAttestationDomainsResponse_FieldTerminalPathArrayOfValues{ListAttestationDomainsResponse_FieldTerminalPath: *fp, values: values.([]*attestation_domain.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListAttestationDomainsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListAttestationDomainsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListAttestationDomainsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListAttestationDomainsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case ListAttestationDomainsResponse_FieldPathSelectorAttestationDomains:
		return &ListAttestationDomainsResponse_FieldTerminalPathArrayItemValue{ListAttestationDomainsResponse_FieldTerminalPath: *fp, value: value.(*attestation_domain.AttestationDomain)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListAttestationDomainsResponse: %d", fp.selector))
	}
}

func (fp *ListAttestationDomainsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ListAttestationDomainsResponse_FieldSubPath struct {
	selector ListAttestationDomainsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ListAttestationDomainsResponse_FieldPath = (*ListAttestationDomainsResponse_FieldSubPath)(nil)

func (fps *ListAttestationDomainsResponse_FieldSubPath) Selector() ListAttestationDomainsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *ListAttestationDomainsResponse_FieldSubPath) AsAttestationDomainsSubPath() (attestation_domain.AttestationDomain_FieldPath, bool) {
	res, ok := fps.subPath.(attestation_domain.AttestationDomain_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ListAttestationDomainsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ListAttestationDomainsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ListAttestationDomainsResponse
func (fps *ListAttestationDomainsResponse_FieldSubPath) Get(source *ListAttestationDomainsResponse) (values []interface{}) {
	if asAttestationDomainFieldPath, ok := fps.AsAttestationDomainsSubPath(); ok {
		for _, item := range source.GetAttestationDomains() {
			values = append(values, asAttestationDomainFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for ListAttestationDomainsResponse: %d", fps.selector))
	}
	return
}

func (fps *ListAttestationDomainsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ListAttestationDomainsResponse))
}

// GetSingle returns value of selected field from source ListAttestationDomainsResponse
func (fps *ListAttestationDomainsResponse_FieldSubPath) GetSingle(source *ListAttestationDomainsResponse) (interface{}, bool) {
	switch fps.selector {
	case ListAttestationDomainsResponse_FieldPathSelectorAttestationDomains:
		if len(source.GetAttestationDomains()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetAttestationDomains()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for ListAttestationDomainsResponse: %d", fps.selector))
	}
}

func (fps *ListAttestationDomainsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ListAttestationDomainsResponse))
}

// GetDefault returns a default value of the field type
func (fps *ListAttestationDomainsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ListAttestationDomainsResponse_FieldSubPath) ClearValue(item *ListAttestationDomainsResponse) {
	if item != nil {
		switch fps.selector {
		case ListAttestationDomainsResponse_FieldPathSelectorAttestationDomains:
			for _, subItem := range item.AttestationDomains {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListAttestationDomainsResponse: %d", fps.selector))
		}
	}
}

func (fps *ListAttestationDomainsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ListAttestationDomainsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *ListAttestationDomainsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ListAttestationDomainsResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&ListAttestationDomainsResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *ListAttestationDomainsResponse_FieldSubPath) WithIValue(value interface{}) ListAttestationDomainsResponse_FieldPathValue {
	return &ListAttestationDomainsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ListAttestationDomainsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ListAttestationDomainsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) ListAttestationDomainsResponse_FieldPathArrayOfValues {
	return &ListAttestationDomainsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ListAttestationDomainsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ListAttestationDomainsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) ListAttestationDomainsResponse_FieldPathArrayItemValue {
	return &ListAttestationDomainsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ListAttestationDomainsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ListAttestationDomainsResponse_FieldPathValue allows storing values for ListAttestationDomainsResponse fields according to their type
type ListAttestationDomainsResponse_FieldPathValue interface {
	ListAttestationDomainsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListAttestationDomainsResponse)
	CompareWith(*ListAttestationDomainsResponse) (cmp int, comparable bool)
}

func ParseListAttestationDomainsResponse_FieldPathValue(pathStr, valueStr string) (ListAttestationDomainsResponse_FieldPathValue, error) {
	fp, err := ParseListAttestationDomainsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListAttestationDomainsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListAttestationDomainsResponse_FieldPathValue), nil
}

func MustParseListAttestationDomainsResponse_FieldPathValue(pathStr, valueStr string) ListAttestationDomainsResponse_FieldPathValue {
	fpv, err := ParseListAttestationDomainsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListAttestationDomainsResponse_FieldTerminalPathValue struct {
	ListAttestationDomainsResponse_FieldTerminalPath
	value interface{}
}

var _ ListAttestationDomainsResponse_FieldPathValue = (*ListAttestationDomainsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListAttestationDomainsResponse' as interface{}
func (fpv *ListAttestationDomainsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListAttestationDomainsResponse_FieldTerminalPathValue) AsAttestationDomainsValue() ([]*attestation_domain.AttestationDomain, bool) {
	res, ok := fpv.value.([]*attestation_domain.AttestationDomain)
	return res, ok
}
func (fpv *ListAttestationDomainsResponse_FieldTerminalPathValue) AsPrevPageTokenValue() (*attestation_domain.PagerCursor, bool) {
	res, ok := fpv.value.(*attestation_domain.PagerCursor)
	return res, ok
}
func (fpv *ListAttestationDomainsResponse_FieldTerminalPathValue) AsNextPageTokenValue() (*attestation_domain.PagerCursor, bool) {
	res, ok := fpv.value.(*attestation_domain.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object ListAttestationDomainsResponse
func (fpv *ListAttestationDomainsResponse_FieldTerminalPathValue) SetTo(target **ListAttestationDomainsResponse) {
	if *target == nil {
		*target = new(ListAttestationDomainsResponse)
	}
	switch fpv.selector {
	case ListAttestationDomainsResponse_FieldPathSelectorAttestationDomains:
		(*target).AttestationDomains = fpv.value.([]*attestation_domain.AttestationDomain)
	case ListAttestationDomainsResponse_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*attestation_domain.PagerCursor)
	case ListAttestationDomainsResponse_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*attestation_domain.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for ListAttestationDomainsResponse: %d", fpv.selector))
	}
}

func (fpv *ListAttestationDomainsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListAttestationDomainsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListAttestationDomainsResponse_FieldTerminalPathValue' with the value under path in 'ListAttestationDomainsResponse'.
func (fpv *ListAttestationDomainsResponse_FieldTerminalPathValue) CompareWith(source *ListAttestationDomainsResponse) (int, bool) {
	switch fpv.selector {
	case ListAttestationDomainsResponse_FieldPathSelectorAttestationDomains:
		return 0, false
	case ListAttestationDomainsResponse_FieldPathSelectorPrevPageToken:
		return 0, false
	case ListAttestationDomainsResponse_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ListAttestationDomainsResponse: %d", fpv.selector))
	}
}

func (fpv *ListAttestationDomainsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListAttestationDomainsResponse))
}

type ListAttestationDomainsResponse_FieldSubPathValue struct {
	ListAttestationDomainsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ListAttestationDomainsResponse_FieldPathValue = (*ListAttestationDomainsResponse_FieldSubPathValue)(nil)

func (fpvs *ListAttestationDomainsResponse_FieldSubPathValue) AsAttestationDomainsPathValue() (attestation_domain.AttestationDomain_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(attestation_domain.AttestationDomain_FieldPathValue)
	return res, ok
}

func (fpvs *ListAttestationDomainsResponse_FieldSubPathValue) SetTo(target **ListAttestationDomainsResponse) {
	if *target == nil {
		*target = new(ListAttestationDomainsResponse)
	}
	switch fpvs.Selector() {
	case ListAttestationDomainsResponse_FieldPathSelectorAttestationDomains:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for ListAttestationDomainsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListAttestationDomainsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListAttestationDomainsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ListAttestationDomainsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ListAttestationDomainsResponse_FieldSubPathValue) CompareWith(source *ListAttestationDomainsResponse) (int, bool) {
	switch fpvs.Selector() {
	case ListAttestationDomainsResponse_FieldPathSelectorAttestationDomains:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for ListAttestationDomainsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListAttestationDomainsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ListAttestationDomainsResponse))
}

// ListAttestationDomainsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for ListAttestationDomainsResponse according to their type
// Present only for array (repeated) types.
type ListAttestationDomainsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListAttestationDomainsResponse_FieldPath
	ContainsValue(*ListAttestationDomainsResponse) bool
}

// ParseListAttestationDomainsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListAttestationDomainsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (ListAttestationDomainsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseListAttestationDomainsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListAttestationDomainsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListAttestationDomainsResponse_FieldPathArrayItemValue), nil
}

func MustParseListAttestationDomainsResponse_FieldPathArrayItemValue(pathStr, valueStr string) ListAttestationDomainsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseListAttestationDomainsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListAttestationDomainsResponse_FieldTerminalPathArrayItemValue struct {
	ListAttestationDomainsResponse_FieldTerminalPath
	value interface{}
}

var _ ListAttestationDomainsResponse_FieldPathArrayItemValue = (*ListAttestationDomainsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListAttestationDomainsResponse as interface{}
func (fpaiv *ListAttestationDomainsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *ListAttestationDomainsResponse_FieldTerminalPathArrayItemValue) AsAttestationDomainsItemValue() (*attestation_domain.AttestationDomain, bool) {
	res, ok := fpaiv.value.(*attestation_domain.AttestationDomain)
	return res, ok
}

func (fpaiv *ListAttestationDomainsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *ListAttestationDomainsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListAttestationDomainsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListAttestationDomainsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListAttestationDomainsResponse'
func (fpaiv *ListAttestationDomainsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *ListAttestationDomainsResponse) bool {
	slice := fpaiv.ListAttestationDomainsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ListAttestationDomainsResponse_FieldSubPathArrayItemValue struct {
	ListAttestationDomainsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ListAttestationDomainsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ListAttestationDomainsResponse_FieldSubPathArrayItemValue) AsAttestationDomainsPathItemValue() (attestation_domain.AttestationDomain_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(attestation_domain.AttestationDomain_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListAttestationDomainsResponse'
func (fpaivs *ListAttestationDomainsResponse_FieldSubPathArrayItemValue) ContainsValue(source *ListAttestationDomainsResponse) bool {
	switch fpaivs.Selector() {
	case ListAttestationDomainsResponse_FieldPathSelectorAttestationDomains:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for ListAttestationDomainsResponse: %d", fpaivs.Selector()))
	}
}

// ListAttestationDomainsResponse_FieldPathArrayOfValues allows storing slice of values for ListAttestationDomainsResponse fields according to their type
type ListAttestationDomainsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListAttestationDomainsResponse_FieldPath
}

func ParseListAttestationDomainsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (ListAttestationDomainsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseListAttestationDomainsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListAttestationDomainsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListAttestationDomainsResponse_FieldPathArrayOfValues), nil
}

func MustParseListAttestationDomainsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) ListAttestationDomainsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseListAttestationDomainsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListAttestationDomainsResponse_FieldTerminalPathArrayOfValues struct {
	ListAttestationDomainsResponse_FieldTerminalPath
	values interface{}
}

var _ ListAttestationDomainsResponse_FieldPathArrayOfValues = (*ListAttestationDomainsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListAttestationDomainsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListAttestationDomainsResponse_FieldPathSelectorAttestationDomains:
		for _, v := range fpaov.values.([][]*attestation_domain.AttestationDomain) {
			values = append(values, v)
		}
	case ListAttestationDomainsResponse_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*attestation_domain.PagerCursor) {
			values = append(values, v)
		}
	case ListAttestationDomainsResponse_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*attestation_domain.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListAttestationDomainsResponse_FieldTerminalPathArrayOfValues) AsAttestationDomainsArrayOfValues() ([][]*attestation_domain.AttestationDomain, bool) {
	res, ok := fpaov.values.([][]*attestation_domain.AttestationDomain)
	return res, ok
}
func (fpaov *ListAttestationDomainsResponse_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*attestation_domain.PagerCursor, bool) {
	res, ok := fpaov.values.([]*attestation_domain.PagerCursor)
	return res, ok
}
func (fpaov *ListAttestationDomainsResponse_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*attestation_domain.PagerCursor, bool) {
	res, ok := fpaov.values.([]*attestation_domain.PagerCursor)
	return res, ok
}

type ListAttestationDomainsResponse_FieldSubPathArrayOfValues struct {
	ListAttestationDomainsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ListAttestationDomainsResponse_FieldPathArrayOfValues = (*ListAttestationDomainsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ListAttestationDomainsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ListAttestationDomainsResponse_FieldSubPathArrayOfValues) AsAttestationDomainsPathArrayOfValues() (attestation_domain.AttestationDomain_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(attestation_domain.AttestationDomain_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchAttestationDomainRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchAttestationDomainRequest_FieldPathSelector
	Get(source *WatchAttestationDomainRequest) []interface{}
	GetSingle(source *WatchAttestationDomainRequest) (interface{}, bool)
	ClearValue(item *WatchAttestationDomainRequest)

	// Those methods build corresponding WatchAttestationDomainRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchAttestationDomainRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchAttestationDomainRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchAttestationDomainRequest_FieldPathArrayItemValue
}

type WatchAttestationDomainRequest_FieldPathSelector int32

const (
	WatchAttestationDomainRequest_FieldPathSelectorName      WatchAttestationDomainRequest_FieldPathSelector = 0
	WatchAttestationDomainRequest_FieldPathSelectorFieldMask WatchAttestationDomainRequest_FieldPathSelector = 1
	WatchAttestationDomainRequest_FieldPathSelectorView      WatchAttestationDomainRequest_FieldPathSelector = 2
)

func (s WatchAttestationDomainRequest_FieldPathSelector) String() string {
	switch s {
	case WatchAttestationDomainRequest_FieldPathSelectorName:
		return "name"
	case WatchAttestationDomainRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchAttestationDomainRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAttestationDomainRequest: %d", s))
	}
}

func BuildWatchAttestationDomainRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchAttestationDomainRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchAttestationDomainRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &WatchAttestationDomainRequest_FieldTerminalPath{selector: WatchAttestationDomainRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchAttestationDomainRequest_FieldTerminalPath{selector: WatchAttestationDomainRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchAttestationDomainRequest_FieldTerminalPath{selector: WatchAttestationDomainRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchAttestationDomainRequest", fp)
}

func ParseWatchAttestationDomainRequest_FieldPath(rawField string) (WatchAttestationDomainRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchAttestationDomainRequest_FieldPath(fp)
}

func MustParseWatchAttestationDomainRequest_FieldPath(rawField string) WatchAttestationDomainRequest_FieldPath {
	fp, err := ParseWatchAttestationDomainRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchAttestationDomainRequest_FieldTerminalPath struct {
	selector WatchAttestationDomainRequest_FieldPathSelector
}

var _ WatchAttestationDomainRequest_FieldPath = (*WatchAttestationDomainRequest_FieldTerminalPath)(nil)

func (fp *WatchAttestationDomainRequest_FieldTerminalPath) Selector() WatchAttestationDomainRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchAttestationDomainRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchAttestationDomainRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchAttestationDomainRequest
func (fp *WatchAttestationDomainRequest_FieldTerminalPath) Get(source *WatchAttestationDomainRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchAttestationDomainRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case WatchAttestationDomainRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchAttestationDomainRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAttestationDomainRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchAttestationDomainRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchAttestationDomainRequest))
}

// GetSingle returns value pointed by specific field of from source WatchAttestationDomainRequest
func (fp *WatchAttestationDomainRequest_FieldTerminalPath) GetSingle(source *WatchAttestationDomainRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchAttestationDomainRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case WatchAttestationDomainRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchAttestationDomainRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAttestationDomainRequest: %d", fp.selector))
	}
}

func (fp *WatchAttestationDomainRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchAttestationDomainRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchAttestationDomainRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchAttestationDomainRequest_FieldPathSelectorName:
		return (*attestation_domain.Reference)(nil)
	case WatchAttestationDomainRequest_FieldPathSelectorFieldMask:
		return (*attestation_domain.AttestationDomain_FieldMask)(nil)
	case WatchAttestationDomainRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAttestationDomainRequest: %d", fp.selector))
	}
}

func (fp *WatchAttestationDomainRequest_FieldTerminalPath) ClearValue(item *WatchAttestationDomainRequest) {
	if item != nil {
		switch fp.selector {
		case WatchAttestationDomainRequest_FieldPathSelectorName:
			item.Name = nil
		case WatchAttestationDomainRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchAttestationDomainRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAttestationDomainRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchAttestationDomainRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchAttestationDomainRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchAttestationDomainRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchAttestationDomainRequest_FieldPathSelectorName ||
		fp.selector == WatchAttestationDomainRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchAttestationDomainRequest_FieldPathSelectorView
}

func (fp *WatchAttestationDomainRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchAttestationDomainRequest_FieldTerminalPath) WithIValue(value interface{}) WatchAttestationDomainRequest_FieldPathValue {
	switch fp.selector {
	case WatchAttestationDomainRequest_FieldPathSelectorName:
		return &WatchAttestationDomainRequest_FieldTerminalPathValue{WatchAttestationDomainRequest_FieldTerminalPath: *fp, value: value.(*attestation_domain.Reference)}
	case WatchAttestationDomainRequest_FieldPathSelectorFieldMask:
		return &WatchAttestationDomainRequest_FieldTerminalPathValue{WatchAttestationDomainRequest_FieldTerminalPath: *fp, value: value.(*attestation_domain.AttestationDomain_FieldMask)}
	case WatchAttestationDomainRequest_FieldPathSelectorView:
		return &WatchAttestationDomainRequest_FieldTerminalPathValue{WatchAttestationDomainRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAttestationDomainRequest: %d", fp.selector))
	}
}

func (fp *WatchAttestationDomainRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchAttestationDomainRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchAttestationDomainRequest_FieldPathArrayOfValues {
	fpaov := &WatchAttestationDomainRequest_FieldTerminalPathArrayOfValues{WatchAttestationDomainRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchAttestationDomainRequest_FieldPathSelectorName:
		return &WatchAttestationDomainRequest_FieldTerminalPathArrayOfValues{WatchAttestationDomainRequest_FieldTerminalPath: *fp, values: values.([]*attestation_domain.Reference)}
	case WatchAttestationDomainRequest_FieldPathSelectorFieldMask:
		return &WatchAttestationDomainRequest_FieldTerminalPathArrayOfValues{WatchAttestationDomainRequest_FieldTerminalPath: *fp, values: values.([]*attestation_domain.AttestationDomain_FieldMask)}
	case WatchAttestationDomainRequest_FieldPathSelectorView:
		return &WatchAttestationDomainRequest_FieldTerminalPathArrayOfValues{WatchAttestationDomainRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAttestationDomainRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchAttestationDomainRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchAttestationDomainRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchAttestationDomainRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAttestationDomainRequest: %d", fp.selector))
	}
}

func (fp *WatchAttestationDomainRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchAttestationDomainRequest_FieldPathValue allows storing values for WatchAttestationDomainRequest fields according to their type
type WatchAttestationDomainRequest_FieldPathValue interface {
	WatchAttestationDomainRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchAttestationDomainRequest)
	CompareWith(*WatchAttestationDomainRequest) (cmp int, comparable bool)
}

func ParseWatchAttestationDomainRequest_FieldPathValue(pathStr, valueStr string) (WatchAttestationDomainRequest_FieldPathValue, error) {
	fp, err := ParseWatchAttestationDomainRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAttestationDomainRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchAttestationDomainRequest_FieldPathValue), nil
}

func MustParseWatchAttestationDomainRequest_FieldPathValue(pathStr, valueStr string) WatchAttestationDomainRequest_FieldPathValue {
	fpv, err := ParseWatchAttestationDomainRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchAttestationDomainRequest_FieldTerminalPathValue struct {
	WatchAttestationDomainRequest_FieldTerminalPath
	value interface{}
}

var _ WatchAttestationDomainRequest_FieldPathValue = (*WatchAttestationDomainRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchAttestationDomainRequest' as interface{}
func (fpv *WatchAttestationDomainRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchAttestationDomainRequest_FieldTerminalPathValue) AsNameValue() (*attestation_domain.Reference, bool) {
	res, ok := fpv.value.(*attestation_domain.Reference)
	return res, ok
}
func (fpv *WatchAttestationDomainRequest_FieldTerminalPathValue) AsFieldMaskValue() (*attestation_domain.AttestationDomain_FieldMask, bool) {
	res, ok := fpv.value.(*attestation_domain.AttestationDomain_FieldMask)
	return res, ok
}
func (fpv *WatchAttestationDomainRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object WatchAttestationDomainRequest
func (fpv *WatchAttestationDomainRequest_FieldTerminalPathValue) SetTo(target **WatchAttestationDomainRequest) {
	if *target == nil {
		*target = new(WatchAttestationDomainRequest)
	}
	switch fpv.selector {
	case WatchAttestationDomainRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*attestation_domain.Reference)
	case WatchAttestationDomainRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*attestation_domain.AttestationDomain_FieldMask)
	case WatchAttestationDomainRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAttestationDomainRequest: %d", fpv.selector))
	}
}

func (fpv *WatchAttestationDomainRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchAttestationDomainRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchAttestationDomainRequest_FieldTerminalPathValue' with the value under path in 'WatchAttestationDomainRequest'.
func (fpv *WatchAttestationDomainRequest_FieldTerminalPathValue) CompareWith(source *WatchAttestationDomainRequest) (int, bool) {
	switch fpv.selector {
	case WatchAttestationDomainRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*attestation_domain.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAttestationDomainRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchAttestationDomainRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAttestationDomainRequest: %d", fpv.selector))
	}
}

func (fpv *WatchAttestationDomainRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchAttestationDomainRequest))
}

// WatchAttestationDomainRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchAttestationDomainRequest according to their type
// Present only for array (repeated) types.
type WatchAttestationDomainRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchAttestationDomainRequest_FieldPath
	ContainsValue(*WatchAttestationDomainRequest) bool
}

// ParseWatchAttestationDomainRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchAttestationDomainRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchAttestationDomainRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchAttestationDomainRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAttestationDomainRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchAttestationDomainRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchAttestationDomainRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchAttestationDomainRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchAttestationDomainRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchAttestationDomainRequest_FieldTerminalPathArrayItemValue struct {
	WatchAttestationDomainRequest_FieldTerminalPath
	value interface{}
}

var _ WatchAttestationDomainRequest_FieldPathArrayItemValue = (*WatchAttestationDomainRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchAttestationDomainRequest as interface{}
func (fpaiv *WatchAttestationDomainRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchAttestationDomainRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchAttestationDomainRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchAttestationDomainRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchAttestationDomainRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchAttestationDomainRequest'
func (fpaiv *WatchAttestationDomainRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchAttestationDomainRequest) bool {
	slice := fpaiv.WatchAttestationDomainRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchAttestationDomainRequest_FieldPathArrayOfValues allows storing slice of values for WatchAttestationDomainRequest fields according to their type
type WatchAttestationDomainRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchAttestationDomainRequest_FieldPath
}

func ParseWatchAttestationDomainRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchAttestationDomainRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchAttestationDomainRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAttestationDomainRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchAttestationDomainRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchAttestationDomainRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchAttestationDomainRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchAttestationDomainRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchAttestationDomainRequest_FieldTerminalPathArrayOfValues struct {
	WatchAttestationDomainRequest_FieldTerminalPath
	values interface{}
}

var _ WatchAttestationDomainRequest_FieldPathArrayOfValues = (*WatchAttestationDomainRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchAttestationDomainRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchAttestationDomainRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*attestation_domain.Reference) {
			values = append(values, v)
		}
	case WatchAttestationDomainRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*attestation_domain.AttestationDomain_FieldMask) {
			values = append(values, v)
		}
	case WatchAttestationDomainRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchAttestationDomainRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*attestation_domain.Reference, bool) {
	res, ok := fpaov.values.([]*attestation_domain.Reference)
	return res, ok
}
func (fpaov *WatchAttestationDomainRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*attestation_domain.AttestationDomain_FieldMask, bool) {
	res, ok := fpaov.values.([]*attestation_domain.AttestationDomain_FieldMask)
	return res, ok
}
func (fpaov *WatchAttestationDomainRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchAttestationDomainResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchAttestationDomainResponse_FieldPathSelector
	Get(source *WatchAttestationDomainResponse) []interface{}
	GetSingle(source *WatchAttestationDomainResponse) (interface{}, bool)
	ClearValue(item *WatchAttestationDomainResponse)

	// Those methods build corresponding WatchAttestationDomainResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchAttestationDomainResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchAttestationDomainResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchAttestationDomainResponse_FieldPathArrayItemValue
}

type WatchAttestationDomainResponse_FieldPathSelector int32

const (
	WatchAttestationDomainResponse_FieldPathSelectorChange WatchAttestationDomainResponse_FieldPathSelector = 0
)

func (s WatchAttestationDomainResponse_FieldPathSelector) String() string {
	switch s {
	case WatchAttestationDomainResponse_FieldPathSelectorChange:
		return "change"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAttestationDomainResponse: %d", s))
	}
}

func BuildWatchAttestationDomainResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchAttestationDomainResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchAttestationDomainResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "change":
			return &WatchAttestationDomainResponse_FieldTerminalPath{selector: WatchAttestationDomainResponse_FieldPathSelectorChange}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchAttestationDomainResponse", fp)
}

func ParseWatchAttestationDomainResponse_FieldPath(rawField string) (WatchAttestationDomainResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchAttestationDomainResponse_FieldPath(fp)
}

func MustParseWatchAttestationDomainResponse_FieldPath(rawField string) WatchAttestationDomainResponse_FieldPath {
	fp, err := ParseWatchAttestationDomainResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchAttestationDomainResponse_FieldTerminalPath struct {
	selector WatchAttestationDomainResponse_FieldPathSelector
}

var _ WatchAttestationDomainResponse_FieldPath = (*WatchAttestationDomainResponse_FieldTerminalPath)(nil)

func (fp *WatchAttestationDomainResponse_FieldTerminalPath) Selector() WatchAttestationDomainResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchAttestationDomainResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchAttestationDomainResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchAttestationDomainResponse
func (fp *WatchAttestationDomainResponse_FieldTerminalPath) Get(source *WatchAttestationDomainResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchAttestationDomainResponse_FieldPathSelectorChange:
			if source.Change != nil {
				values = append(values, source.Change)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAttestationDomainResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchAttestationDomainResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchAttestationDomainResponse))
}

// GetSingle returns value pointed by specific field of from source WatchAttestationDomainResponse
func (fp *WatchAttestationDomainResponse_FieldTerminalPath) GetSingle(source *WatchAttestationDomainResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchAttestationDomainResponse_FieldPathSelectorChange:
		res := source.GetChange()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAttestationDomainResponse: %d", fp.selector))
	}
}

func (fp *WatchAttestationDomainResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchAttestationDomainResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchAttestationDomainResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchAttestationDomainResponse_FieldPathSelectorChange:
		return (*attestation_domain.AttestationDomainChange)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAttestationDomainResponse: %d", fp.selector))
	}
}

func (fp *WatchAttestationDomainResponse_FieldTerminalPath) ClearValue(item *WatchAttestationDomainResponse) {
	if item != nil {
		switch fp.selector {
		case WatchAttestationDomainResponse_FieldPathSelectorChange:
			item.Change = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAttestationDomainResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchAttestationDomainResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchAttestationDomainResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchAttestationDomainResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchAttestationDomainResponse_FieldPathSelectorChange
}

func (fp *WatchAttestationDomainResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchAttestationDomainResponse_FieldTerminalPath) WithIValue(value interface{}) WatchAttestationDomainResponse_FieldPathValue {
	switch fp.selector {
	case WatchAttestationDomainResponse_FieldPathSelectorChange:
		return &WatchAttestationDomainResponse_FieldTerminalPathValue{WatchAttestationDomainResponse_FieldTerminalPath: *fp, value: value.(*attestation_domain.AttestationDomainChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAttestationDomainResponse: %d", fp.selector))
	}
}

func (fp *WatchAttestationDomainResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchAttestationDomainResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchAttestationDomainResponse_FieldPathArrayOfValues {
	fpaov := &WatchAttestationDomainResponse_FieldTerminalPathArrayOfValues{WatchAttestationDomainResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchAttestationDomainResponse_FieldPathSelectorChange:
		return &WatchAttestationDomainResponse_FieldTerminalPathArrayOfValues{WatchAttestationDomainResponse_FieldTerminalPath: *fp, values: values.([]*attestation_domain.AttestationDomainChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAttestationDomainResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchAttestationDomainResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchAttestationDomainResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchAttestationDomainResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAttestationDomainResponse: %d", fp.selector))
	}
}

func (fp *WatchAttestationDomainResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchAttestationDomainResponse_FieldPathValue allows storing values for WatchAttestationDomainResponse fields according to their type
type WatchAttestationDomainResponse_FieldPathValue interface {
	WatchAttestationDomainResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchAttestationDomainResponse)
	CompareWith(*WatchAttestationDomainResponse) (cmp int, comparable bool)
}

func ParseWatchAttestationDomainResponse_FieldPathValue(pathStr, valueStr string) (WatchAttestationDomainResponse_FieldPathValue, error) {
	fp, err := ParseWatchAttestationDomainResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAttestationDomainResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchAttestationDomainResponse_FieldPathValue), nil
}

func MustParseWatchAttestationDomainResponse_FieldPathValue(pathStr, valueStr string) WatchAttestationDomainResponse_FieldPathValue {
	fpv, err := ParseWatchAttestationDomainResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchAttestationDomainResponse_FieldTerminalPathValue struct {
	WatchAttestationDomainResponse_FieldTerminalPath
	value interface{}
}

var _ WatchAttestationDomainResponse_FieldPathValue = (*WatchAttestationDomainResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchAttestationDomainResponse' as interface{}
func (fpv *WatchAttestationDomainResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchAttestationDomainResponse_FieldTerminalPathValue) AsChangeValue() (*attestation_domain.AttestationDomainChange, bool) {
	res, ok := fpv.value.(*attestation_domain.AttestationDomainChange)
	return res, ok
}

// SetTo stores value for selected field for object WatchAttestationDomainResponse
func (fpv *WatchAttestationDomainResponse_FieldTerminalPathValue) SetTo(target **WatchAttestationDomainResponse) {
	if *target == nil {
		*target = new(WatchAttestationDomainResponse)
	}
	switch fpv.selector {
	case WatchAttestationDomainResponse_FieldPathSelectorChange:
		(*target).Change = fpv.value.(*attestation_domain.AttestationDomainChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAttestationDomainResponse: %d", fpv.selector))
	}
}

func (fpv *WatchAttestationDomainResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchAttestationDomainResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchAttestationDomainResponse_FieldTerminalPathValue' with the value under path in 'WatchAttestationDomainResponse'.
func (fpv *WatchAttestationDomainResponse_FieldTerminalPathValue) CompareWith(source *WatchAttestationDomainResponse) (int, bool) {
	switch fpv.selector {
	case WatchAttestationDomainResponse_FieldPathSelectorChange:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAttestationDomainResponse: %d", fpv.selector))
	}
}

func (fpv *WatchAttestationDomainResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchAttestationDomainResponse))
}

// WatchAttestationDomainResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchAttestationDomainResponse according to their type
// Present only for array (repeated) types.
type WatchAttestationDomainResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchAttestationDomainResponse_FieldPath
	ContainsValue(*WatchAttestationDomainResponse) bool
}

// ParseWatchAttestationDomainResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchAttestationDomainResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchAttestationDomainResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchAttestationDomainResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAttestationDomainResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchAttestationDomainResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchAttestationDomainResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchAttestationDomainResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchAttestationDomainResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchAttestationDomainResponse_FieldTerminalPathArrayItemValue struct {
	WatchAttestationDomainResponse_FieldTerminalPath
	value interface{}
}

var _ WatchAttestationDomainResponse_FieldPathArrayItemValue = (*WatchAttestationDomainResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchAttestationDomainResponse as interface{}
func (fpaiv *WatchAttestationDomainResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchAttestationDomainResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchAttestationDomainResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchAttestationDomainResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchAttestationDomainResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchAttestationDomainResponse'
func (fpaiv *WatchAttestationDomainResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchAttestationDomainResponse) bool {
	slice := fpaiv.WatchAttestationDomainResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchAttestationDomainResponse_FieldPathArrayOfValues allows storing slice of values for WatchAttestationDomainResponse fields according to their type
type WatchAttestationDomainResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchAttestationDomainResponse_FieldPath
}

func ParseWatchAttestationDomainResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchAttestationDomainResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchAttestationDomainResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAttestationDomainResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchAttestationDomainResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchAttestationDomainResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchAttestationDomainResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchAttestationDomainResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchAttestationDomainResponse_FieldTerminalPathArrayOfValues struct {
	WatchAttestationDomainResponse_FieldTerminalPath
	values interface{}
}

var _ WatchAttestationDomainResponse_FieldPathArrayOfValues = (*WatchAttestationDomainResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchAttestationDomainResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchAttestationDomainResponse_FieldPathSelectorChange:
		for _, v := range fpaov.values.([]*attestation_domain.AttestationDomainChange) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchAttestationDomainResponse_FieldTerminalPathArrayOfValues) AsChangeArrayOfValues() ([]*attestation_domain.AttestationDomainChange, bool) {
	res, ok := fpaov.values.([]*attestation_domain.AttestationDomainChange)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchAttestationDomainsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchAttestationDomainsRequest_FieldPathSelector
	Get(source *WatchAttestationDomainsRequest) []interface{}
	GetSingle(source *WatchAttestationDomainsRequest) (interface{}, bool)
	ClearValue(item *WatchAttestationDomainsRequest)

	// Those methods build corresponding WatchAttestationDomainsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchAttestationDomainsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchAttestationDomainsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchAttestationDomainsRequest_FieldPathArrayItemValue
}

type WatchAttestationDomainsRequest_FieldPathSelector int32

const (
	WatchAttestationDomainsRequest_FieldPathSelectorType         WatchAttestationDomainsRequest_FieldPathSelector = 0
	WatchAttestationDomainsRequest_FieldPathSelectorParent       WatchAttestationDomainsRequest_FieldPathSelector = 1
	WatchAttestationDomainsRequest_FieldPathSelectorPageSize     WatchAttestationDomainsRequest_FieldPathSelector = 2
	WatchAttestationDomainsRequest_FieldPathSelectorPageToken    WatchAttestationDomainsRequest_FieldPathSelector = 3
	WatchAttestationDomainsRequest_FieldPathSelectorOrderBy      WatchAttestationDomainsRequest_FieldPathSelector = 4
	WatchAttestationDomainsRequest_FieldPathSelectorResumeToken  WatchAttestationDomainsRequest_FieldPathSelector = 5
	WatchAttestationDomainsRequest_FieldPathSelectorStartingTime WatchAttestationDomainsRequest_FieldPathSelector = 6
	WatchAttestationDomainsRequest_FieldPathSelectorFilter       WatchAttestationDomainsRequest_FieldPathSelector = 7
	WatchAttestationDomainsRequest_FieldPathSelectorFieldMask    WatchAttestationDomainsRequest_FieldPathSelector = 8
	WatchAttestationDomainsRequest_FieldPathSelectorView         WatchAttestationDomainsRequest_FieldPathSelector = 9
	WatchAttestationDomainsRequest_FieldPathSelectorMaxChunkSize WatchAttestationDomainsRequest_FieldPathSelector = 10
)

func (s WatchAttestationDomainsRequest_FieldPathSelector) String() string {
	switch s {
	case WatchAttestationDomainsRequest_FieldPathSelectorType:
		return "type"
	case WatchAttestationDomainsRequest_FieldPathSelectorParent:
		return "parent"
	case WatchAttestationDomainsRequest_FieldPathSelectorPageSize:
		return "page_size"
	case WatchAttestationDomainsRequest_FieldPathSelectorPageToken:
		return "page_token"
	case WatchAttestationDomainsRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case WatchAttestationDomainsRequest_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchAttestationDomainsRequest_FieldPathSelectorStartingTime:
		return "starting_time"
	case WatchAttestationDomainsRequest_FieldPathSelectorFilter:
		return "filter"
	case WatchAttestationDomainsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchAttestationDomainsRequest_FieldPathSelectorView:
		return "view"
	case WatchAttestationDomainsRequest_FieldPathSelectorMaxChunkSize:
		return "max_chunk_size"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAttestationDomainsRequest: %d", s))
	}
}

func BuildWatchAttestationDomainsRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchAttestationDomainsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchAttestationDomainsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "type":
			return &WatchAttestationDomainsRequest_FieldTerminalPath{selector: WatchAttestationDomainsRequest_FieldPathSelectorType}, nil
		case "parent":
			return &WatchAttestationDomainsRequest_FieldTerminalPath{selector: WatchAttestationDomainsRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &WatchAttestationDomainsRequest_FieldTerminalPath{selector: WatchAttestationDomainsRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &WatchAttestationDomainsRequest_FieldTerminalPath{selector: WatchAttestationDomainsRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &WatchAttestationDomainsRequest_FieldTerminalPath{selector: WatchAttestationDomainsRequest_FieldPathSelectorOrderBy}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchAttestationDomainsRequest_FieldTerminalPath{selector: WatchAttestationDomainsRequest_FieldPathSelectorResumeToken}, nil
		case "starting_time", "startingTime", "starting-time":
			return &WatchAttestationDomainsRequest_FieldTerminalPath{selector: WatchAttestationDomainsRequest_FieldPathSelectorStartingTime}, nil
		case "filter":
			return &WatchAttestationDomainsRequest_FieldTerminalPath{selector: WatchAttestationDomainsRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchAttestationDomainsRequest_FieldTerminalPath{selector: WatchAttestationDomainsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchAttestationDomainsRequest_FieldTerminalPath{selector: WatchAttestationDomainsRequest_FieldPathSelectorView}, nil
		case "max_chunk_size", "maxChunkSize", "max-chunk-size":
			return &WatchAttestationDomainsRequest_FieldTerminalPath{selector: WatchAttestationDomainsRequest_FieldPathSelectorMaxChunkSize}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchAttestationDomainsRequest", fp)
}

func ParseWatchAttestationDomainsRequest_FieldPath(rawField string) (WatchAttestationDomainsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchAttestationDomainsRequest_FieldPath(fp)
}

func MustParseWatchAttestationDomainsRequest_FieldPath(rawField string) WatchAttestationDomainsRequest_FieldPath {
	fp, err := ParseWatchAttestationDomainsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchAttestationDomainsRequest_FieldTerminalPath struct {
	selector WatchAttestationDomainsRequest_FieldPathSelector
}

var _ WatchAttestationDomainsRequest_FieldPath = (*WatchAttestationDomainsRequest_FieldTerminalPath)(nil)

func (fp *WatchAttestationDomainsRequest_FieldTerminalPath) Selector() WatchAttestationDomainsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchAttestationDomainsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchAttestationDomainsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchAttestationDomainsRequest
func (fp *WatchAttestationDomainsRequest_FieldTerminalPath) Get(source *WatchAttestationDomainsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchAttestationDomainsRequest_FieldPathSelectorType:
			values = append(values, source.Type)
		case WatchAttestationDomainsRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case WatchAttestationDomainsRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case WatchAttestationDomainsRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case WatchAttestationDomainsRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case WatchAttestationDomainsRequest_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchAttestationDomainsRequest_FieldPathSelectorStartingTime:
			if source.StartingTime != nil {
				values = append(values, source.StartingTime)
			}
		case WatchAttestationDomainsRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case WatchAttestationDomainsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchAttestationDomainsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		case WatchAttestationDomainsRequest_FieldPathSelectorMaxChunkSize:
			values = append(values, source.MaxChunkSize)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAttestationDomainsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchAttestationDomainsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchAttestationDomainsRequest))
}

// GetSingle returns value pointed by specific field of from source WatchAttestationDomainsRequest
func (fp *WatchAttestationDomainsRequest_FieldTerminalPath) GetSingle(source *WatchAttestationDomainsRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchAttestationDomainsRequest_FieldPathSelectorType:
		return source.GetType(), source != nil
	case WatchAttestationDomainsRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case WatchAttestationDomainsRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case WatchAttestationDomainsRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case WatchAttestationDomainsRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case WatchAttestationDomainsRequest_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchAttestationDomainsRequest_FieldPathSelectorStartingTime:
		res := source.GetStartingTime()
		return res, res != nil
	case WatchAttestationDomainsRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case WatchAttestationDomainsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchAttestationDomainsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	case WatchAttestationDomainsRequest_FieldPathSelectorMaxChunkSize:
		return source.GetMaxChunkSize(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAttestationDomainsRequest: %d", fp.selector))
	}
}

func (fp *WatchAttestationDomainsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchAttestationDomainsRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchAttestationDomainsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchAttestationDomainsRequest_FieldPathSelectorType:
		return watch_type.WatchType_STATEFUL
	case WatchAttestationDomainsRequest_FieldPathSelectorParent:
		return (*attestation_domain.ParentReference)(nil)
	case WatchAttestationDomainsRequest_FieldPathSelectorPageSize:
		return int32(0)
	case WatchAttestationDomainsRequest_FieldPathSelectorPageToken:
		return (*attestation_domain.PagerCursor)(nil)
	case WatchAttestationDomainsRequest_FieldPathSelectorOrderBy:
		return (*attestation_domain.OrderBy)(nil)
	case WatchAttestationDomainsRequest_FieldPathSelectorResumeToken:
		return ""
	case WatchAttestationDomainsRequest_FieldPathSelectorStartingTime:
		return (*timestamp.Timestamp)(nil)
	case WatchAttestationDomainsRequest_FieldPathSelectorFilter:
		return (*attestation_domain.Filter)(nil)
	case WatchAttestationDomainsRequest_FieldPathSelectorFieldMask:
		return (*attestation_domain.AttestationDomain_FieldMask)(nil)
	case WatchAttestationDomainsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	case WatchAttestationDomainsRequest_FieldPathSelectorMaxChunkSize:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAttestationDomainsRequest: %d", fp.selector))
	}
}

func (fp *WatchAttestationDomainsRequest_FieldTerminalPath) ClearValue(item *WatchAttestationDomainsRequest) {
	if item != nil {
		switch fp.selector {
		case WatchAttestationDomainsRequest_FieldPathSelectorType:
			item.Type = watch_type.WatchType_STATEFUL
		case WatchAttestationDomainsRequest_FieldPathSelectorParent:
			item.Parent = nil
		case WatchAttestationDomainsRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case WatchAttestationDomainsRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case WatchAttestationDomainsRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case WatchAttestationDomainsRequest_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchAttestationDomainsRequest_FieldPathSelectorStartingTime:
			item.StartingTime = nil
		case WatchAttestationDomainsRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case WatchAttestationDomainsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchAttestationDomainsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		case WatchAttestationDomainsRequest_FieldPathSelectorMaxChunkSize:
			item.MaxChunkSize = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAttestationDomainsRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchAttestationDomainsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchAttestationDomainsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchAttestationDomainsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchAttestationDomainsRequest_FieldPathSelectorType ||
		fp.selector == WatchAttestationDomainsRequest_FieldPathSelectorParent ||
		fp.selector == WatchAttestationDomainsRequest_FieldPathSelectorPageSize ||
		fp.selector == WatchAttestationDomainsRequest_FieldPathSelectorPageToken ||
		fp.selector == WatchAttestationDomainsRequest_FieldPathSelectorOrderBy ||
		fp.selector == WatchAttestationDomainsRequest_FieldPathSelectorResumeToken ||
		fp.selector == WatchAttestationDomainsRequest_FieldPathSelectorStartingTime ||
		fp.selector == WatchAttestationDomainsRequest_FieldPathSelectorFilter ||
		fp.selector == WatchAttestationDomainsRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchAttestationDomainsRequest_FieldPathSelectorView ||
		fp.selector == WatchAttestationDomainsRequest_FieldPathSelectorMaxChunkSize
}

func (fp *WatchAttestationDomainsRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchAttestationDomainsRequest_FieldTerminalPath) WithIValue(value interface{}) WatchAttestationDomainsRequest_FieldPathValue {
	switch fp.selector {
	case WatchAttestationDomainsRequest_FieldPathSelectorType:
		return &WatchAttestationDomainsRequest_FieldTerminalPathValue{WatchAttestationDomainsRequest_FieldTerminalPath: *fp, value: value.(watch_type.WatchType)}
	case WatchAttestationDomainsRequest_FieldPathSelectorParent:
		return &WatchAttestationDomainsRequest_FieldTerminalPathValue{WatchAttestationDomainsRequest_FieldTerminalPath: *fp, value: value.(*attestation_domain.ParentReference)}
	case WatchAttestationDomainsRequest_FieldPathSelectorPageSize:
		return &WatchAttestationDomainsRequest_FieldTerminalPathValue{WatchAttestationDomainsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case WatchAttestationDomainsRequest_FieldPathSelectorPageToken:
		return &WatchAttestationDomainsRequest_FieldTerminalPathValue{WatchAttestationDomainsRequest_FieldTerminalPath: *fp, value: value.(*attestation_domain.PagerCursor)}
	case WatchAttestationDomainsRequest_FieldPathSelectorOrderBy:
		return &WatchAttestationDomainsRequest_FieldTerminalPathValue{WatchAttestationDomainsRequest_FieldTerminalPath: *fp, value: value.(*attestation_domain.OrderBy)}
	case WatchAttestationDomainsRequest_FieldPathSelectorResumeToken:
		return &WatchAttestationDomainsRequest_FieldTerminalPathValue{WatchAttestationDomainsRequest_FieldTerminalPath: *fp, value: value.(string)}
	case WatchAttestationDomainsRequest_FieldPathSelectorStartingTime:
		return &WatchAttestationDomainsRequest_FieldTerminalPathValue{WatchAttestationDomainsRequest_FieldTerminalPath: *fp, value: value.(*timestamp.Timestamp)}
	case WatchAttestationDomainsRequest_FieldPathSelectorFilter:
		return &WatchAttestationDomainsRequest_FieldTerminalPathValue{WatchAttestationDomainsRequest_FieldTerminalPath: *fp, value: value.(*attestation_domain.Filter)}
	case WatchAttestationDomainsRequest_FieldPathSelectorFieldMask:
		return &WatchAttestationDomainsRequest_FieldTerminalPathValue{WatchAttestationDomainsRequest_FieldTerminalPath: *fp, value: value.(*attestation_domain.AttestationDomain_FieldMask)}
	case WatchAttestationDomainsRequest_FieldPathSelectorView:
		return &WatchAttestationDomainsRequest_FieldTerminalPathValue{WatchAttestationDomainsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	case WatchAttestationDomainsRequest_FieldPathSelectorMaxChunkSize:
		return &WatchAttestationDomainsRequest_FieldTerminalPathValue{WatchAttestationDomainsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAttestationDomainsRequest: %d", fp.selector))
	}
}

func (fp *WatchAttestationDomainsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchAttestationDomainsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchAttestationDomainsRequest_FieldPathArrayOfValues {
	fpaov := &WatchAttestationDomainsRequest_FieldTerminalPathArrayOfValues{WatchAttestationDomainsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchAttestationDomainsRequest_FieldPathSelectorType:
		return &WatchAttestationDomainsRequest_FieldTerminalPathArrayOfValues{WatchAttestationDomainsRequest_FieldTerminalPath: *fp, values: values.([]watch_type.WatchType)}
	case WatchAttestationDomainsRequest_FieldPathSelectorParent:
		return &WatchAttestationDomainsRequest_FieldTerminalPathArrayOfValues{WatchAttestationDomainsRequest_FieldTerminalPath: *fp, values: values.([]*attestation_domain.ParentReference)}
	case WatchAttestationDomainsRequest_FieldPathSelectorPageSize:
		return &WatchAttestationDomainsRequest_FieldTerminalPathArrayOfValues{WatchAttestationDomainsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case WatchAttestationDomainsRequest_FieldPathSelectorPageToken:
		return &WatchAttestationDomainsRequest_FieldTerminalPathArrayOfValues{WatchAttestationDomainsRequest_FieldTerminalPath: *fp, values: values.([]*attestation_domain.PagerCursor)}
	case WatchAttestationDomainsRequest_FieldPathSelectorOrderBy:
		return &WatchAttestationDomainsRequest_FieldTerminalPathArrayOfValues{WatchAttestationDomainsRequest_FieldTerminalPath: *fp, values: values.([]*attestation_domain.OrderBy)}
	case WatchAttestationDomainsRequest_FieldPathSelectorResumeToken:
		return &WatchAttestationDomainsRequest_FieldTerminalPathArrayOfValues{WatchAttestationDomainsRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchAttestationDomainsRequest_FieldPathSelectorStartingTime:
		return &WatchAttestationDomainsRequest_FieldTerminalPathArrayOfValues{WatchAttestationDomainsRequest_FieldTerminalPath: *fp, values: values.([]*timestamp.Timestamp)}
	case WatchAttestationDomainsRequest_FieldPathSelectorFilter:
		return &WatchAttestationDomainsRequest_FieldTerminalPathArrayOfValues{WatchAttestationDomainsRequest_FieldTerminalPath: *fp, values: values.([]*attestation_domain.Filter)}
	case WatchAttestationDomainsRequest_FieldPathSelectorFieldMask:
		return &WatchAttestationDomainsRequest_FieldTerminalPathArrayOfValues{WatchAttestationDomainsRequest_FieldTerminalPath: *fp, values: values.([]*attestation_domain.AttestationDomain_FieldMask)}
	case WatchAttestationDomainsRequest_FieldPathSelectorView:
		return &WatchAttestationDomainsRequest_FieldTerminalPathArrayOfValues{WatchAttestationDomainsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	case WatchAttestationDomainsRequest_FieldPathSelectorMaxChunkSize:
		return &WatchAttestationDomainsRequest_FieldTerminalPathArrayOfValues{WatchAttestationDomainsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAttestationDomainsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchAttestationDomainsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchAttestationDomainsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchAttestationDomainsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAttestationDomainsRequest: %d", fp.selector))
	}
}

func (fp *WatchAttestationDomainsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchAttestationDomainsRequest_FieldPathValue allows storing values for WatchAttestationDomainsRequest fields according to their type
type WatchAttestationDomainsRequest_FieldPathValue interface {
	WatchAttestationDomainsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchAttestationDomainsRequest)
	CompareWith(*WatchAttestationDomainsRequest) (cmp int, comparable bool)
}

func ParseWatchAttestationDomainsRequest_FieldPathValue(pathStr, valueStr string) (WatchAttestationDomainsRequest_FieldPathValue, error) {
	fp, err := ParseWatchAttestationDomainsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAttestationDomainsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchAttestationDomainsRequest_FieldPathValue), nil
}

func MustParseWatchAttestationDomainsRequest_FieldPathValue(pathStr, valueStr string) WatchAttestationDomainsRequest_FieldPathValue {
	fpv, err := ParseWatchAttestationDomainsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchAttestationDomainsRequest_FieldTerminalPathValue struct {
	WatchAttestationDomainsRequest_FieldTerminalPath
	value interface{}
}

var _ WatchAttestationDomainsRequest_FieldPathValue = (*WatchAttestationDomainsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchAttestationDomainsRequest' as interface{}
func (fpv *WatchAttestationDomainsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchAttestationDomainsRequest_FieldTerminalPathValue) AsTypeValue() (watch_type.WatchType, bool) {
	res, ok := fpv.value.(watch_type.WatchType)
	return res, ok
}
func (fpv *WatchAttestationDomainsRequest_FieldTerminalPathValue) AsParentValue() (*attestation_domain.ParentReference, bool) {
	res, ok := fpv.value.(*attestation_domain.ParentReference)
	return res, ok
}
func (fpv *WatchAttestationDomainsRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *WatchAttestationDomainsRequest_FieldTerminalPathValue) AsPageTokenValue() (*attestation_domain.PagerCursor, bool) {
	res, ok := fpv.value.(*attestation_domain.PagerCursor)
	return res, ok
}
func (fpv *WatchAttestationDomainsRequest_FieldTerminalPathValue) AsOrderByValue() (*attestation_domain.OrderBy, bool) {
	res, ok := fpv.value.(*attestation_domain.OrderBy)
	return res, ok
}
func (fpv *WatchAttestationDomainsRequest_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchAttestationDomainsRequest_FieldTerminalPathValue) AsStartingTimeValue() (*timestamp.Timestamp, bool) {
	res, ok := fpv.value.(*timestamp.Timestamp)
	return res, ok
}
func (fpv *WatchAttestationDomainsRequest_FieldTerminalPathValue) AsFilterValue() (*attestation_domain.Filter, bool) {
	res, ok := fpv.value.(*attestation_domain.Filter)
	return res, ok
}
func (fpv *WatchAttestationDomainsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*attestation_domain.AttestationDomain_FieldMask, bool) {
	res, ok := fpv.value.(*attestation_domain.AttestationDomain_FieldMask)
	return res, ok
}
func (fpv *WatchAttestationDomainsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}
func (fpv *WatchAttestationDomainsRequest_FieldTerminalPathValue) AsMaxChunkSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object WatchAttestationDomainsRequest
func (fpv *WatchAttestationDomainsRequest_FieldTerminalPathValue) SetTo(target **WatchAttestationDomainsRequest) {
	if *target == nil {
		*target = new(WatchAttestationDomainsRequest)
	}
	switch fpv.selector {
	case WatchAttestationDomainsRequest_FieldPathSelectorType:
		(*target).Type = fpv.value.(watch_type.WatchType)
	case WatchAttestationDomainsRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*attestation_domain.ParentReference)
	case WatchAttestationDomainsRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case WatchAttestationDomainsRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*attestation_domain.PagerCursor)
	case WatchAttestationDomainsRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*attestation_domain.OrderBy)
	case WatchAttestationDomainsRequest_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchAttestationDomainsRequest_FieldPathSelectorStartingTime:
		(*target).StartingTime = fpv.value.(*timestamp.Timestamp)
	case WatchAttestationDomainsRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*attestation_domain.Filter)
	case WatchAttestationDomainsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*attestation_domain.AttestationDomain_FieldMask)
	case WatchAttestationDomainsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	case WatchAttestationDomainsRequest_FieldPathSelectorMaxChunkSize:
		(*target).MaxChunkSize = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAttestationDomainsRequest: %d", fpv.selector))
	}
}

func (fpv *WatchAttestationDomainsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchAttestationDomainsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchAttestationDomainsRequest_FieldTerminalPathValue' with the value under path in 'WatchAttestationDomainsRequest'.
func (fpv *WatchAttestationDomainsRequest_FieldTerminalPathValue) CompareWith(source *WatchAttestationDomainsRequest) (int, bool) {
	switch fpv.selector {
	case WatchAttestationDomainsRequest_FieldPathSelectorType:
		leftValue := fpv.value.(watch_type.WatchType)
		rightValue := source.GetType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAttestationDomainsRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*attestation_domain.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAttestationDomainsRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAttestationDomainsRequest_FieldPathSelectorPageToken:
		return 0, false
	case WatchAttestationDomainsRequest_FieldPathSelectorOrderBy:
		return 0, false
	case WatchAttestationDomainsRequest_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAttestationDomainsRequest_FieldPathSelectorStartingTime:
		leftValue := fpv.value.(*timestamp.Timestamp)
		rightValue := source.GetStartingTime()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.AsTime().Equal(rightValue.AsTime()) {
			return 0, true
		} else if leftValue.AsTime().Before(rightValue.AsTime()) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAttestationDomainsRequest_FieldPathSelectorFilter:
		return 0, false
	case WatchAttestationDomainsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchAttestationDomainsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAttestationDomainsRequest_FieldPathSelectorMaxChunkSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetMaxChunkSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAttestationDomainsRequest: %d", fpv.selector))
	}
}

func (fpv *WatchAttestationDomainsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchAttestationDomainsRequest))
}

// WatchAttestationDomainsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchAttestationDomainsRequest according to their type
// Present only for array (repeated) types.
type WatchAttestationDomainsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchAttestationDomainsRequest_FieldPath
	ContainsValue(*WatchAttestationDomainsRequest) bool
}

// ParseWatchAttestationDomainsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchAttestationDomainsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchAttestationDomainsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchAttestationDomainsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAttestationDomainsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchAttestationDomainsRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchAttestationDomainsRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchAttestationDomainsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchAttestationDomainsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchAttestationDomainsRequest_FieldTerminalPathArrayItemValue struct {
	WatchAttestationDomainsRequest_FieldTerminalPath
	value interface{}
}

var _ WatchAttestationDomainsRequest_FieldPathArrayItemValue = (*WatchAttestationDomainsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchAttestationDomainsRequest as interface{}
func (fpaiv *WatchAttestationDomainsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchAttestationDomainsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchAttestationDomainsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchAttestationDomainsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchAttestationDomainsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchAttestationDomainsRequest'
func (fpaiv *WatchAttestationDomainsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchAttestationDomainsRequest) bool {
	slice := fpaiv.WatchAttestationDomainsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchAttestationDomainsRequest_FieldPathArrayOfValues allows storing slice of values for WatchAttestationDomainsRequest fields according to their type
type WatchAttestationDomainsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchAttestationDomainsRequest_FieldPath
}

func ParseWatchAttestationDomainsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchAttestationDomainsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchAttestationDomainsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAttestationDomainsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchAttestationDomainsRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchAttestationDomainsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchAttestationDomainsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchAttestationDomainsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchAttestationDomainsRequest_FieldTerminalPathArrayOfValues struct {
	WatchAttestationDomainsRequest_FieldTerminalPath
	values interface{}
}

var _ WatchAttestationDomainsRequest_FieldPathArrayOfValues = (*WatchAttestationDomainsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchAttestationDomainsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchAttestationDomainsRequest_FieldPathSelectorType:
		for _, v := range fpaov.values.([]watch_type.WatchType) {
			values = append(values, v)
		}
	case WatchAttestationDomainsRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*attestation_domain.ParentReference) {
			values = append(values, v)
		}
	case WatchAttestationDomainsRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case WatchAttestationDomainsRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*attestation_domain.PagerCursor) {
			values = append(values, v)
		}
	case WatchAttestationDomainsRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*attestation_domain.OrderBy) {
			values = append(values, v)
		}
	case WatchAttestationDomainsRequest_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchAttestationDomainsRequest_FieldPathSelectorStartingTime:
		for _, v := range fpaov.values.([]*timestamp.Timestamp) {
			values = append(values, v)
		}
	case WatchAttestationDomainsRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*attestation_domain.Filter) {
			values = append(values, v)
		}
	case WatchAttestationDomainsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*attestation_domain.AttestationDomain_FieldMask) {
			values = append(values, v)
		}
	case WatchAttestationDomainsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	case WatchAttestationDomainsRequest_FieldPathSelectorMaxChunkSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchAttestationDomainsRequest_FieldTerminalPathArrayOfValues) AsTypeArrayOfValues() ([]watch_type.WatchType, bool) {
	res, ok := fpaov.values.([]watch_type.WatchType)
	return res, ok
}
func (fpaov *WatchAttestationDomainsRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*attestation_domain.ParentReference, bool) {
	res, ok := fpaov.values.([]*attestation_domain.ParentReference)
	return res, ok
}
func (fpaov *WatchAttestationDomainsRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *WatchAttestationDomainsRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*attestation_domain.PagerCursor, bool) {
	res, ok := fpaov.values.([]*attestation_domain.PagerCursor)
	return res, ok
}
func (fpaov *WatchAttestationDomainsRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*attestation_domain.OrderBy, bool) {
	res, ok := fpaov.values.([]*attestation_domain.OrderBy)
	return res, ok
}
func (fpaov *WatchAttestationDomainsRequest_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchAttestationDomainsRequest_FieldTerminalPathArrayOfValues) AsStartingTimeArrayOfValues() ([]*timestamp.Timestamp, bool) {
	res, ok := fpaov.values.([]*timestamp.Timestamp)
	return res, ok
}
func (fpaov *WatchAttestationDomainsRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*attestation_domain.Filter, bool) {
	res, ok := fpaov.values.([]*attestation_domain.Filter)
	return res, ok
}
func (fpaov *WatchAttestationDomainsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*attestation_domain.AttestationDomain_FieldMask, bool) {
	res, ok := fpaov.values.([]*attestation_domain.AttestationDomain_FieldMask)
	return res, ok
}
func (fpaov *WatchAttestationDomainsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}
func (fpaov *WatchAttestationDomainsRequest_FieldTerminalPathArrayOfValues) AsMaxChunkSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchAttestationDomainsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchAttestationDomainsResponse_FieldPathSelector
	Get(source *WatchAttestationDomainsResponse) []interface{}
	GetSingle(source *WatchAttestationDomainsResponse) (interface{}, bool)
	ClearValue(item *WatchAttestationDomainsResponse)

	// Those methods build corresponding WatchAttestationDomainsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchAttestationDomainsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchAttestationDomainsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchAttestationDomainsResponse_FieldPathArrayItemValue
}

type WatchAttestationDomainsResponse_FieldPathSelector int32

const (
	WatchAttestationDomainsResponse_FieldPathSelectorAttestationDomainChanges WatchAttestationDomainsResponse_FieldPathSelector = 0
	WatchAttestationDomainsResponse_FieldPathSelectorIsCurrent                WatchAttestationDomainsResponse_FieldPathSelector = 1
	WatchAttestationDomainsResponse_FieldPathSelectorPageTokenChange          WatchAttestationDomainsResponse_FieldPathSelector = 2
	WatchAttestationDomainsResponse_FieldPathSelectorResumeToken              WatchAttestationDomainsResponse_FieldPathSelector = 3
	WatchAttestationDomainsResponse_FieldPathSelectorSnapshotSize             WatchAttestationDomainsResponse_FieldPathSelector = 4
	WatchAttestationDomainsResponse_FieldPathSelectorIsSoftReset              WatchAttestationDomainsResponse_FieldPathSelector = 5
	WatchAttestationDomainsResponse_FieldPathSelectorIsHardReset              WatchAttestationDomainsResponse_FieldPathSelector = 6
)

func (s WatchAttestationDomainsResponse_FieldPathSelector) String() string {
	switch s {
	case WatchAttestationDomainsResponse_FieldPathSelectorAttestationDomainChanges:
		return "attestation_domain_changes"
	case WatchAttestationDomainsResponse_FieldPathSelectorIsCurrent:
		return "is_current"
	case WatchAttestationDomainsResponse_FieldPathSelectorPageTokenChange:
		return "page_token_change"
	case WatchAttestationDomainsResponse_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchAttestationDomainsResponse_FieldPathSelectorSnapshotSize:
		return "snapshot_size"
	case WatchAttestationDomainsResponse_FieldPathSelectorIsSoftReset:
		return "is_soft_reset"
	case WatchAttestationDomainsResponse_FieldPathSelectorIsHardReset:
		return "is_hard_reset"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAttestationDomainsResponse: %d", s))
	}
}

func BuildWatchAttestationDomainsResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchAttestationDomainsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchAttestationDomainsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "attestation_domain_changes", "attestationDomainChanges", "attestation-domain-changes":
			return &WatchAttestationDomainsResponse_FieldTerminalPath{selector: WatchAttestationDomainsResponse_FieldPathSelectorAttestationDomainChanges}, nil
		case "is_current", "isCurrent", "is-current":
			return &WatchAttestationDomainsResponse_FieldTerminalPath{selector: WatchAttestationDomainsResponse_FieldPathSelectorIsCurrent}, nil
		case "page_token_change", "pageTokenChange", "page-token-change":
			return &WatchAttestationDomainsResponse_FieldTerminalPath{selector: WatchAttestationDomainsResponse_FieldPathSelectorPageTokenChange}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchAttestationDomainsResponse_FieldTerminalPath{selector: WatchAttestationDomainsResponse_FieldPathSelectorResumeToken}, nil
		case "snapshot_size", "snapshotSize", "snapshot-size":
			return &WatchAttestationDomainsResponse_FieldTerminalPath{selector: WatchAttestationDomainsResponse_FieldPathSelectorSnapshotSize}, nil
		case "is_soft_reset", "isSoftReset", "is-soft-reset":
			return &WatchAttestationDomainsResponse_FieldTerminalPath{selector: WatchAttestationDomainsResponse_FieldPathSelectorIsSoftReset}, nil
		case "is_hard_reset", "isHardReset", "is-hard-reset":
			return &WatchAttestationDomainsResponse_FieldTerminalPath{selector: WatchAttestationDomainsResponse_FieldPathSelectorIsHardReset}, nil
		}
	} else {
		switch fp[0] {
		case "page_token_change", "pageTokenChange", "page-token-change":
			if subpath, err := BuildWatchAttestationDomainsResponsePageTokenChange_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &WatchAttestationDomainsResponse_FieldSubPath{selector: WatchAttestationDomainsResponse_FieldPathSelectorPageTokenChange, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchAttestationDomainsResponse", fp)
}

func ParseWatchAttestationDomainsResponse_FieldPath(rawField string) (WatchAttestationDomainsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchAttestationDomainsResponse_FieldPath(fp)
}

func MustParseWatchAttestationDomainsResponse_FieldPath(rawField string) WatchAttestationDomainsResponse_FieldPath {
	fp, err := ParseWatchAttestationDomainsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchAttestationDomainsResponse_FieldTerminalPath struct {
	selector WatchAttestationDomainsResponse_FieldPathSelector
}

var _ WatchAttestationDomainsResponse_FieldPath = (*WatchAttestationDomainsResponse_FieldTerminalPath)(nil)

func (fp *WatchAttestationDomainsResponse_FieldTerminalPath) Selector() WatchAttestationDomainsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchAttestationDomainsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchAttestationDomainsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchAttestationDomainsResponse
func (fp *WatchAttestationDomainsResponse_FieldTerminalPath) Get(source *WatchAttestationDomainsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchAttestationDomainsResponse_FieldPathSelectorAttestationDomainChanges:
			for _, value := range source.GetAttestationDomainChanges() {
				values = append(values, value)
			}
		case WatchAttestationDomainsResponse_FieldPathSelectorIsCurrent:
			values = append(values, source.IsCurrent)
		case WatchAttestationDomainsResponse_FieldPathSelectorPageTokenChange:
			if source.PageTokenChange != nil {
				values = append(values, source.PageTokenChange)
			}
		case WatchAttestationDomainsResponse_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchAttestationDomainsResponse_FieldPathSelectorSnapshotSize:
			values = append(values, source.SnapshotSize)
		case WatchAttestationDomainsResponse_FieldPathSelectorIsSoftReset:
			values = append(values, source.IsSoftReset)
		case WatchAttestationDomainsResponse_FieldPathSelectorIsHardReset:
			values = append(values, source.IsHardReset)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAttestationDomainsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchAttestationDomainsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchAttestationDomainsResponse))
}

// GetSingle returns value pointed by specific field of from source WatchAttestationDomainsResponse
func (fp *WatchAttestationDomainsResponse_FieldTerminalPath) GetSingle(source *WatchAttestationDomainsResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchAttestationDomainsResponse_FieldPathSelectorAttestationDomainChanges:
		res := source.GetAttestationDomainChanges()
		return res, res != nil
	case WatchAttestationDomainsResponse_FieldPathSelectorIsCurrent:
		return source.GetIsCurrent(), source != nil
	case WatchAttestationDomainsResponse_FieldPathSelectorPageTokenChange:
		res := source.GetPageTokenChange()
		return res, res != nil
	case WatchAttestationDomainsResponse_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchAttestationDomainsResponse_FieldPathSelectorSnapshotSize:
		return source.GetSnapshotSize(), source != nil
	case WatchAttestationDomainsResponse_FieldPathSelectorIsSoftReset:
		return source.GetIsSoftReset(), source != nil
	case WatchAttestationDomainsResponse_FieldPathSelectorIsHardReset:
		return source.GetIsHardReset(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAttestationDomainsResponse: %d", fp.selector))
	}
}

func (fp *WatchAttestationDomainsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchAttestationDomainsResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchAttestationDomainsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchAttestationDomainsResponse_FieldPathSelectorAttestationDomainChanges:
		return ([]*attestation_domain.AttestationDomainChange)(nil)
	case WatchAttestationDomainsResponse_FieldPathSelectorIsCurrent:
		return false
	case WatchAttestationDomainsResponse_FieldPathSelectorPageTokenChange:
		return (*WatchAttestationDomainsResponse_PageTokenChange)(nil)
	case WatchAttestationDomainsResponse_FieldPathSelectorResumeToken:
		return ""
	case WatchAttestationDomainsResponse_FieldPathSelectorSnapshotSize:
		return int64(0)
	case WatchAttestationDomainsResponse_FieldPathSelectorIsSoftReset:
		return false
	case WatchAttestationDomainsResponse_FieldPathSelectorIsHardReset:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAttestationDomainsResponse: %d", fp.selector))
	}
}

func (fp *WatchAttestationDomainsResponse_FieldTerminalPath) ClearValue(item *WatchAttestationDomainsResponse) {
	if item != nil {
		switch fp.selector {
		case WatchAttestationDomainsResponse_FieldPathSelectorAttestationDomainChanges:
			item.AttestationDomainChanges = nil
		case WatchAttestationDomainsResponse_FieldPathSelectorIsCurrent:
			item.IsCurrent = false
		case WatchAttestationDomainsResponse_FieldPathSelectorPageTokenChange:
			item.PageTokenChange = nil
		case WatchAttestationDomainsResponse_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchAttestationDomainsResponse_FieldPathSelectorSnapshotSize:
			item.SnapshotSize = int64(0)
		case WatchAttestationDomainsResponse_FieldPathSelectorIsSoftReset:
			item.IsSoftReset = false
		case WatchAttestationDomainsResponse_FieldPathSelectorIsHardReset:
			item.IsHardReset = false
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAttestationDomainsResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchAttestationDomainsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchAttestationDomainsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchAttestationDomainsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchAttestationDomainsResponse_FieldPathSelectorAttestationDomainChanges ||
		fp.selector == WatchAttestationDomainsResponse_FieldPathSelectorIsCurrent ||
		fp.selector == WatchAttestationDomainsResponse_FieldPathSelectorResumeToken ||
		fp.selector == WatchAttestationDomainsResponse_FieldPathSelectorSnapshotSize ||
		fp.selector == WatchAttestationDomainsResponse_FieldPathSelectorIsSoftReset ||
		fp.selector == WatchAttestationDomainsResponse_FieldPathSelectorIsHardReset
}

func (fp *WatchAttestationDomainsResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchAttestationDomainsResponse_FieldTerminalPath) WithIValue(value interface{}) WatchAttestationDomainsResponse_FieldPathValue {
	switch fp.selector {
	case WatchAttestationDomainsResponse_FieldPathSelectorAttestationDomainChanges:
		return &WatchAttestationDomainsResponse_FieldTerminalPathValue{WatchAttestationDomainsResponse_FieldTerminalPath: *fp, value: value.([]*attestation_domain.AttestationDomainChange)}
	case WatchAttestationDomainsResponse_FieldPathSelectorIsCurrent:
		return &WatchAttestationDomainsResponse_FieldTerminalPathValue{WatchAttestationDomainsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchAttestationDomainsResponse_FieldPathSelectorPageTokenChange:
		return &WatchAttestationDomainsResponse_FieldTerminalPathValue{WatchAttestationDomainsResponse_FieldTerminalPath: *fp, value: value.(*WatchAttestationDomainsResponse_PageTokenChange)}
	case WatchAttestationDomainsResponse_FieldPathSelectorResumeToken:
		return &WatchAttestationDomainsResponse_FieldTerminalPathValue{WatchAttestationDomainsResponse_FieldTerminalPath: *fp, value: value.(string)}
	case WatchAttestationDomainsResponse_FieldPathSelectorSnapshotSize:
		return &WatchAttestationDomainsResponse_FieldTerminalPathValue{WatchAttestationDomainsResponse_FieldTerminalPath: *fp, value: value.(int64)}
	case WatchAttestationDomainsResponse_FieldPathSelectorIsSoftReset:
		return &WatchAttestationDomainsResponse_FieldTerminalPathValue{WatchAttestationDomainsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchAttestationDomainsResponse_FieldPathSelectorIsHardReset:
		return &WatchAttestationDomainsResponse_FieldTerminalPathValue{WatchAttestationDomainsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAttestationDomainsResponse: %d", fp.selector))
	}
}

func (fp *WatchAttestationDomainsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchAttestationDomainsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchAttestationDomainsResponse_FieldPathArrayOfValues {
	fpaov := &WatchAttestationDomainsResponse_FieldTerminalPathArrayOfValues{WatchAttestationDomainsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchAttestationDomainsResponse_FieldPathSelectorAttestationDomainChanges:
		return &WatchAttestationDomainsResponse_FieldTerminalPathArrayOfValues{WatchAttestationDomainsResponse_FieldTerminalPath: *fp, values: values.([][]*attestation_domain.AttestationDomainChange)}
	case WatchAttestationDomainsResponse_FieldPathSelectorIsCurrent:
		return &WatchAttestationDomainsResponse_FieldTerminalPathArrayOfValues{WatchAttestationDomainsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchAttestationDomainsResponse_FieldPathSelectorPageTokenChange:
		return &WatchAttestationDomainsResponse_FieldTerminalPathArrayOfValues{WatchAttestationDomainsResponse_FieldTerminalPath: *fp, values: values.([]*WatchAttestationDomainsResponse_PageTokenChange)}
	case WatchAttestationDomainsResponse_FieldPathSelectorResumeToken:
		return &WatchAttestationDomainsResponse_FieldTerminalPathArrayOfValues{WatchAttestationDomainsResponse_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchAttestationDomainsResponse_FieldPathSelectorSnapshotSize:
		return &WatchAttestationDomainsResponse_FieldTerminalPathArrayOfValues{WatchAttestationDomainsResponse_FieldTerminalPath: *fp, values: values.([]int64)}
	case WatchAttestationDomainsResponse_FieldPathSelectorIsSoftReset:
		return &WatchAttestationDomainsResponse_FieldTerminalPathArrayOfValues{WatchAttestationDomainsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchAttestationDomainsResponse_FieldPathSelectorIsHardReset:
		return &WatchAttestationDomainsResponse_FieldTerminalPathArrayOfValues{WatchAttestationDomainsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAttestationDomainsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchAttestationDomainsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchAttestationDomainsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchAttestationDomainsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case WatchAttestationDomainsResponse_FieldPathSelectorAttestationDomainChanges:
		return &WatchAttestationDomainsResponse_FieldTerminalPathArrayItemValue{WatchAttestationDomainsResponse_FieldTerminalPath: *fp, value: value.(*attestation_domain.AttestationDomainChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAttestationDomainsResponse: %d", fp.selector))
	}
}

func (fp *WatchAttestationDomainsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type WatchAttestationDomainsResponse_FieldSubPath struct {
	selector WatchAttestationDomainsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ WatchAttestationDomainsResponse_FieldPath = (*WatchAttestationDomainsResponse_FieldSubPath)(nil)

func (fps *WatchAttestationDomainsResponse_FieldSubPath) Selector() WatchAttestationDomainsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *WatchAttestationDomainsResponse_FieldSubPath) AsPageTokenChangeSubPath() (WatchAttestationDomainsResponsePageTokenChange_FieldPath, bool) {
	res, ok := fps.subPath.(WatchAttestationDomainsResponsePageTokenChange_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *WatchAttestationDomainsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *WatchAttestationDomainsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source WatchAttestationDomainsResponse
func (fps *WatchAttestationDomainsResponse_FieldSubPath) Get(source *WatchAttestationDomainsResponse) (values []interface{}) {
	if asPageTokenChangeFieldPath, ok := fps.AsPageTokenChangeSubPath(); ok {
		values = append(values, asPageTokenChangeFieldPath.Get(source.GetPageTokenChange())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for WatchAttestationDomainsResponse: %d", fps.selector))
	}
	return
}

func (fps *WatchAttestationDomainsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*WatchAttestationDomainsResponse))
}

// GetSingle returns value of selected field from source WatchAttestationDomainsResponse
func (fps *WatchAttestationDomainsResponse_FieldSubPath) GetSingle(source *WatchAttestationDomainsResponse) (interface{}, bool) {
	switch fps.selector {
	case WatchAttestationDomainsResponse_FieldPathSelectorPageTokenChange:
		if source.GetPageTokenChange() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAttestationDomainsResponse: %d", fps.selector))
	}
}

func (fps *WatchAttestationDomainsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*WatchAttestationDomainsResponse))
}

// GetDefault returns a default value of the field type
func (fps *WatchAttestationDomainsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *WatchAttestationDomainsResponse_FieldSubPath) ClearValue(item *WatchAttestationDomainsResponse) {
	if item != nil {
		switch fps.selector {
		case WatchAttestationDomainsResponse_FieldPathSelectorPageTokenChange:
			fps.subPath.ClearValueRaw(item.PageTokenChange)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAttestationDomainsResponse: %d", fps.selector))
		}
	}
}

func (fps *WatchAttestationDomainsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*WatchAttestationDomainsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *WatchAttestationDomainsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *WatchAttestationDomainsResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&WatchAttestationDomainsResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *WatchAttestationDomainsResponse_FieldSubPath) WithIValue(value interface{}) WatchAttestationDomainsResponse_FieldPathValue {
	return &WatchAttestationDomainsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *WatchAttestationDomainsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *WatchAttestationDomainsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) WatchAttestationDomainsResponse_FieldPathArrayOfValues {
	return &WatchAttestationDomainsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *WatchAttestationDomainsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *WatchAttestationDomainsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) WatchAttestationDomainsResponse_FieldPathArrayItemValue {
	return &WatchAttestationDomainsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *WatchAttestationDomainsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// WatchAttestationDomainsResponse_FieldPathValue allows storing values for WatchAttestationDomainsResponse fields according to their type
type WatchAttestationDomainsResponse_FieldPathValue interface {
	WatchAttestationDomainsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchAttestationDomainsResponse)
	CompareWith(*WatchAttestationDomainsResponse) (cmp int, comparable bool)
}

func ParseWatchAttestationDomainsResponse_FieldPathValue(pathStr, valueStr string) (WatchAttestationDomainsResponse_FieldPathValue, error) {
	fp, err := ParseWatchAttestationDomainsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAttestationDomainsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchAttestationDomainsResponse_FieldPathValue), nil
}

func MustParseWatchAttestationDomainsResponse_FieldPathValue(pathStr, valueStr string) WatchAttestationDomainsResponse_FieldPathValue {
	fpv, err := ParseWatchAttestationDomainsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchAttestationDomainsResponse_FieldTerminalPathValue struct {
	WatchAttestationDomainsResponse_FieldTerminalPath
	value interface{}
}

var _ WatchAttestationDomainsResponse_FieldPathValue = (*WatchAttestationDomainsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchAttestationDomainsResponse' as interface{}
func (fpv *WatchAttestationDomainsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchAttestationDomainsResponse_FieldTerminalPathValue) AsAttestationDomainChangesValue() ([]*attestation_domain.AttestationDomainChange, bool) {
	res, ok := fpv.value.([]*attestation_domain.AttestationDomainChange)
	return res, ok
}
func (fpv *WatchAttestationDomainsResponse_FieldTerminalPathValue) AsIsCurrentValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchAttestationDomainsResponse_FieldTerminalPathValue) AsPageTokenChangeValue() (*WatchAttestationDomainsResponse_PageTokenChange, bool) {
	res, ok := fpv.value.(*WatchAttestationDomainsResponse_PageTokenChange)
	return res, ok
}
func (fpv *WatchAttestationDomainsResponse_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchAttestationDomainsResponse_FieldTerminalPathValue) AsSnapshotSizeValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}
func (fpv *WatchAttestationDomainsResponse_FieldTerminalPathValue) AsIsSoftResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchAttestationDomainsResponse_FieldTerminalPathValue) AsIsHardResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object WatchAttestationDomainsResponse
func (fpv *WatchAttestationDomainsResponse_FieldTerminalPathValue) SetTo(target **WatchAttestationDomainsResponse) {
	if *target == nil {
		*target = new(WatchAttestationDomainsResponse)
	}
	switch fpv.selector {
	case WatchAttestationDomainsResponse_FieldPathSelectorAttestationDomainChanges:
		(*target).AttestationDomainChanges = fpv.value.([]*attestation_domain.AttestationDomainChange)
	case WatchAttestationDomainsResponse_FieldPathSelectorIsCurrent:
		(*target).IsCurrent = fpv.value.(bool)
	case WatchAttestationDomainsResponse_FieldPathSelectorPageTokenChange:
		(*target).PageTokenChange = fpv.value.(*WatchAttestationDomainsResponse_PageTokenChange)
	case WatchAttestationDomainsResponse_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchAttestationDomainsResponse_FieldPathSelectorSnapshotSize:
		(*target).SnapshotSize = fpv.value.(int64)
	case WatchAttestationDomainsResponse_FieldPathSelectorIsSoftReset:
		(*target).IsSoftReset = fpv.value.(bool)
	case WatchAttestationDomainsResponse_FieldPathSelectorIsHardReset:
		(*target).IsHardReset = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAttestationDomainsResponse: %d", fpv.selector))
	}
}

func (fpv *WatchAttestationDomainsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchAttestationDomainsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchAttestationDomainsResponse_FieldTerminalPathValue' with the value under path in 'WatchAttestationDomainsResponse'.
func (fpv *WatchAttestationDomainsResponse_FieldTerminalPathValue) CompareWith(source *WatchAttestationDomainsResponse) (int, bool) {
	switch fpv.selector {
	case WatchAttestationDomainsResponse_FieldPathSelectorAttestationDomainChanges:
		return 0, false
	case WatchAttestationDomainsResponse_FieldPathSelectorIsCurrent:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsCurrent()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAttestationDomainsResponse_FieldPathSelectorPageTokenChange:
		return 0, false
	case WatchAttestationDomainsResponse_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAttestationDomainsResponse_FieldPathSelectorSnapshotSize:
		leftValue := fpv.value.(int64)
		rightValue := source.GetSnapshotSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAttestationDomainsResponse_FieldPathSelectorIsSoftReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsSoftReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAttestationDomainsResponse_FieldPathSelectorIsHardReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsHardReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAttestationDomainsResponse: %d", fpv.selector))
	}
}

func (fpv *WatchAttestationDomainsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchAttestationDomainsResponse))
}

type WatchAttestationDomainsResponse_FieldSubPathValue struct {
	WatchAttestationDomainsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ WatchAttestationDomainsResponse_FieldPathValue = (*WatchAttestationDomainsResponse_FieldSubPathValue)(nil)

func (fpvs *WatchAttestationDomainsResponse_FieldSubPathValue) AsPageTokenChangePathValue() (WatchAttestationDomainsResponsePageTokenChange_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(WatchAttestationDomainsResponsePageTokenChange_FieldPathValue)
	return res, ok
}

func (fpvs *WatchAttestationDomainsResponse_FieldSubPathValue) SetTo(target **WatchAttestationDomainsResponse) {
	if *target == nil {
		*target = new(WatchAttestationDomainsResponse)
	}
	switch fpvs.Selector() {
	case WatchAttestationDomainsResponse_FieldPathSelectorPageTokenChange:
		fpvs.subPathValue.(WatchAttestationDomainsResponsePageTokenChange_FieldPathValue).SetTo(&(*target).PageTokenChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAttestationDomainsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchAttestationDomainsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchAttestationDomainsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *WatchAttestationDomainsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *WatchAttestationDomainsResponse_FieldSubPathValue) CompareWith(source *WatchAttestationDomainsResponse) (int, bool) {
	switch fpvs.Selector() {
	case WatchAttestationDomainsResponse_FieldPathSelectorPageTokenChange:
		return fpvs.subPathValue.(WatchAttestationDomainsResponsePageTokenChange_FieldPathValue).CompareWith(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAttestationDomainsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchAttestationDomainsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*WatchAttestationDomainsResponse))
}

// WatchAttestationDomainsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchAttestationDomainsResponse according to their type
// Present only for array (repeated) types.
type WatchAttestationDomainsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchAttestationDomainsResponse_FieldPath
	ContainsValue(*WatchAttestationDomainsResponse) bool
}

// ParseWatchAttestationDomainsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchAttestationDomainsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchAttestationDomainsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchAttestationDomainsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAttestationDomainsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchAttestationDomainsResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchAttestationDomainsResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchAttestationDomainsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchAttestationDomainsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchAttestationDomainsResponse_FieldTerminalPathArrayItemValue struct {
	WatchAttestationDomainsResponse_FieldTerminalPath
	value interface{}
}

var _ WatchAttestationDomainsResponse_FieldPathArrayItemValue = (*WatchAttestationDomainsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchAttestationDomainsResponse as interface{}
func (fpaiv *WatchAttestationDomainsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *WatchAttestationDomainsResponse_FieldTerminalPathArrayItemValue) AsAttestationDomainChangesItemValue() (*attestation_domain.AttestationDomainChange, bool) {
	res, ok := fpaiv.value.(*attestation_domain.AttestationDomainChange)
	return res, ok
}

func (fpaiv *WatchAttestationDomainsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchAttestationDomainsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchAttestationDomainsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchAttestationDomainsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchAttestationDomainsResponse'
func (fpaiv *WatchAttestationDomainsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchAttestationDomainsResponse) bool {
	slice := fpaiv.WatchAttestationDomainsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type WatchAttestationDomainsResponse_FieldSubPathArrayItemValue struct {
	WatchAttestationDomainsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *WatchAttestationDomainsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *WatchAttestationDomainsResponse_FieldSubPathArrayItemValue) AsPageTokenChangePathItemValue() (WatchAttestationDomainsResponsePageTokenChange_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(WatchAttestationDomainsResponsePageTokenChange_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchAttestationDomainsResponse'
func (fpaivs *WatchAttestationDomainsResponse_FieldSubPathArrayItemValue) ContainsValue(source *WatchAttestationDomainsResponse) bool {
	switch fpaivs.Selector() {
	case WatchAttestationDomainsResponse_FieldPathSelectorPageTokenChange:
		return fpaivs.subPathItemValue.(WatchAttestationDomainsResponsePageTokenChange_FieldPathArrayItemValue).ContainsValue(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAttestationDomainsResponse: %d", fpaivs.Selector()))
	}
}

// WatchAttestationDomainsResponse_FieldPathArrayOfValues allows storing slice of values for WatchAttestationDomainsResponse fields according to their type
type WatchAttestationDomainsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchAttestationDomainsResponse_FieldPath
}

func ParseWatchAttestationDomainsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchAttestationDomainsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchAttestationDomainsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAttestationDomainsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchAttestationDomainsResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchAttestationDomainsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchAttestationDomainsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchAttestationDomainsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchAttestationDomainsResponse_FieldTerminalPathArrayOfValues struct {
	WatchAttestationDomainsResponse_FieldTerminalPath
	values interface{}
}

var _ WatchAttestationDomainsResponse_FieldPathArrayOfValues = (*WatchAttestationDomainsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchAttestationDomainsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchAttestationDomainsResponse_FieldPathSelectorAttestationDomainChanges:
		for _, v := range fpaov.values.([][]*attestation_domain.AttestationDomainChange) {
			values = append(values, v)
		}
	case WatchAttestationDomainsResponse_FieldPathSelectorIsCurrent:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchAttestationDomainsResponse_FieldPathSelectorPageTokenChange:
		for _, v := range fpaov.values.([]*WatchAttestationDomainsResponse_PageTokenChange) {
			values = append(values, v)
		}
	case WatchAttestationDomainsResponse_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchAttestationDomainsResponse_FieldPathSelectorSnapshotSize:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	case WatchAttestationDomainsResponse_FieldPathSelectorIsSoftReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchAttestationDomainsResponse_FieldPathSelectorIsHardReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchAttestationDomainsResponse_FieldTerminalPathArrayOfValues) AsAttestationDomainChangesArrayOfValues() ([][]*attestation_domain.AttestationDomainChange, bool) {
	res, ok := fpaov.values.([][]*attestation_domain.AttestationDomainChange)
	return res, ok
}
func (fpaov *WatchAttestationDomainsResponse_FieldTerminalPathArrayOfValues) AsIsCurrentArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchAttestationDomainsResponse_FieldTerminalPathArrayOfValues) AsPageTokenChangeArrayOfValues() ([]*WatchAttestationDomainsResponse_PageTokenChange, bool) {
	res, ok := fpaov.values.([]*WatchAttestationDomainsResponse_PageTokenChange)
	return res, ok
}
func (fpaov *WatchAttestationDomainsResponse_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchAttestationDomainsResponse_FieldTerminalPathArrayOfValues) AsSnapshotSizeArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}
func (fpaov *WatchAttestationDomainsResponse_FieldTerminalPathArrayOfValues) AsIsSoftResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchAttestationDomainsResponse_FieldTerminalPathArrayOfValues) AsIsHardResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

type WatchAttestationDomainsResponse_FieldSubPathArrayOfValues struct {
	WatchAttestationDomainsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ WatchAttestationDomainsResponse_FieldPathArrayOfValues = (*WatchAttestationDomainsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *WatchAttestationDomainsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *WatchAttestationDomainsResponse_FieldSubPathArrayOfValues) AsPageTokenChangePathArrayOfValues() (WatchAttestationDomainsResponsePageTokenChange_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(WatchAttestationDomainsResponsePageTokenChange_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchAttestationDomainsResponsePageTokenChange_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchAttestationDomainsResponsePageTokenChange_FieldPathSelector
	Get(source *WatchAttestationDomainsResponse_PageTokenChange) []interface{}
	GetSingle(source *WatchAttestationDomainsResponse_PageTokenChange) (interface{}, bool)
	ClearValue(item *WatchAttestationDomainsResponse_PageTokenChange)

	// Those methods build corresponding WatchAttestationDomainsResponsePageTokenChange_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchAttestationDomainsResponsePageTokenChange_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchAttestationDomainsResponsePageTokenChange_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchAttestationDomainsResponsePageTokenChange_FieldPathArrayItemValue
}

type WatchAttestationDomainsResponsePageTokenChange_FieldPathSelector int32

const (
	WatchAttestationDomainsResponsePageTokenChange_FieldPathSelectorPrevPageToken WatchAttestationDomainsResponsePageTokenChange_FieldPathSelector = 0
	WatchAttestationDomainsResponsePageTokenChange_FieldPathSelectorNextPageToken WatchAttestationDomainsResponsePageTokenChange_FieldPathSelector = 1
)

func (s WatchAttestationDomainsResponsePageTokenChange_FieldPathSelector) String() string {
	switch s {
	case WatchAttestationDomainsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case WatchAttestationDomainsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAttestationDomainsResponse_PageTokenChange: %d", s))
	}
}

func BuildWatchAttestationDomainsResponsePageTokenChange_FieldPath(fp gotenobject.RawFieldPath) (WatchAttestationDomainsResponsePageTokenChange_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchAttestationDomainsResponse_PageTokenChange")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &WatchAttestationDomainsResponsePageTokenChange_FieldTerminalPath{selector: WatchAttestationDomainsResponsePageTokenChange_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &WatchAttestationDomainsResponsePageTokenChange_FieldTerminalPath{selector: WatchAttestationDomainsResponsePageTokenChange_FieldPathSelectorNextPageToken}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchAttestationDomainsResponse_PageTokenChange", fp)
}

func ParseWatchAttestationDomainsResponsePageTokenChange_FieldPath(rawField string) (WatchAttestationDomainsResponsePageTokenChange_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchAttestationDomainsResponsePageTokenChange_FieldPath(fp)
}

func MustParseWatchAttestationDomainsResponsePageTokenChange_FieldPath(rawField string) WatchAttestationDomainsResponsePageTokenChange_FieldPath {
	fp, err := ParseWatchAttestationDomainsResponsePageTokenChange_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchAttestationDomainsResponsePageTokenChange_FieldTerminalPath struct {
	selector WatchAttestationDomainsResponsePageTokenChange_FieldPathSelector
}

var _ WatchAttestationDomainsResponsePageTokenChange_FieldPath = (*WatchAttestationDomainsResponsePageTokenChange_FieldTerminalPath)(nil)

func (fp *WatchAttestationDomainsResponsePageTokenChange_FieldTerminalPath) Selector() WatchAttestationDomainsResponsePageTokenChange_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchAttestationDomainsResponsePageTokenChange_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchAttestationDomainsResponsePageTokenChange_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchAttestationDomainsResponse_PageTokenChange
func (fp *WatchAttestationDomainsResponsePageTokenChange_FieldTerminalPath) Get(source *WatchAttestationDomainsResponse_PageTokenChange) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchAttestationDomainsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case WatchAttestationDomainsResponsePageTokenChange_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAttestationDomainsResponse_PageTokenChange: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchAttestationDomainsResponsePageTokenChange_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchAttestationDomainsResponse_PageTokenChange))
}

// GetSingle returns value pointed by specific field of from source WatchAttestationDomainsResponse_PageTokenChange
func (fp *WatchAttestationDomainsResponsePageTokenChange_FieldTerminalPath) GetSingle(source *WatchAttestationDomainsResponse_PageTokenChange) (interface{}, bool) {
	switch fp.selector {
	case WatchAttestationDomainsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case WatchAttestationDomainsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAttestationDomainsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchAttestationDomainsResponsePageTokenChange_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchAttestationDomainsResponse_PageTokenChange))
}

// GetDefault returns a default value of the field type
func (fp *WatchAttestationDomainsResponsePageTokenChange_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchAttestationDomainsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return (*attestation_domain.PagerCursor)(nil)
	case WatchAttestationDomainsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return (*attestation_domain.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAttestationDomainsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchAttestationDomainsResponsePageTokenChange_FieldTerminalPath) ClearValue(item *WatchAttestationDomainsResponse_PageTokenChange) {
	if item != nil {
		switch fp.selector {
		case WatchAttestationDomainsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case WatchAttestationDomainsResponsePageTokenChange_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAttestationDomainsResponse_PageTokenChange: %d", fp.selector))
		}
	}
}

func (fp *WatchAttestationDomainsResponsePageTokenChange_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchAttestationDomainsResponse_PageTokenChange))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchAttestationDomainsResponsePageTokenChange_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchAttestationDomainsResponsePageTokenChange_FieldPathSelectorPrevPageToken ||
		fp.selector == WatchAttestationDomainsResponsePageTokenChange_FieldPathSelectorNextPageToken
}

func (fp *WatchAttestationDomainsResponsePageTokenChange_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchAttestationDomainsResponsePageTokenChange_FieldTerminalPath) WithIValue(value interface{}) WatchAttestationDomainsResponsePageTokenChange_FieldPathValue {
	switch fp.selector {
	case WatchAttestationDomainsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchAttestationDomainsResponsePageTokenChange_FieldTerminalPathValue{WatchAttestationDomainsResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*attestation_domain.PagerCursor)}
	case WatchAttestationDomainsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchAttestationDomainsResponsePageTokenChange_FieldTerminalPathValue{WatchAttestationDomainsResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*attestation_domain.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAttestationDomainsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchAttestationDomainsResponsePageTokenChange_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchAttestationDomainsResponsePageTokenChange_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchAttestationDomainsResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov := &WatchAttestationDomainsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchAttestationDomainsResponsePageTokenChange_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchAttestationDomainsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchAttestationDomainsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchAttestationDomainsResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*attestation_domain.PagerCursor)}
	case WatchAttestationDomainsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchAttestationDomainsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchAttestationDomainsResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*attestation_domain.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAttestationDomainsResponse_PageTokenChange: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchAttestationDomainsResponsePageTokenChange_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchAttestationDomainsResponsePageTokenChange_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchAttestationDomainsResponsePageTokenChange_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAttestationDomainsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchAttestationDomainsResponsePageTokenChange_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchAttestationDomainsResponsePageTokenChange_FieldPathValue allows storing values for PageTokenChange fields according to their type
type WatchAttestationDomainsResponsePageTokenChange_FieldPathValue interface {
	WatchAttestationDomainsResponsePageTokenChange_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchAttestationDomainsResponse_PageTokenChange)
	CompareWith(*WatchAttestationDomainsResponse_PageTokenChange) (cmp int, comparable bool)
}

func ParseWatchAttestationDomainsResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) (WatchAttestationDomainsResponsePageTokenChange_FieldPathValue, error) {
	fp, err := ParseWatchAttestationDomainsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchAttestationDomainsResponsePageTokenChange_FieldPathValue), nil
}

func MustParseWatchAttestationDomainsResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) WatchAttestationDomainsResponsePageTokenChange_FieldPathValue {
	fpv, err := ParseWatchAttestationDomainsResponsePageTokenChange_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchAttestationDomainsResponsePageTokenChange_FieldTerminalPathValue struct {
	WatchAttestationDomainsResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchAttestationDomainsResponsePageTokenChange_FieldPathValue = (*WatchAttestationDomainsResponsePageTokenChange_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'PageTokenChange' as interface{}
func (fpv *WatchAttestationDomainsResponsePageTokenChange_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchAttestationDomainsResponsePageTokenChange_FieldTerminalPathValue) AsPrevPageTokenValue() (*attestation_domain.PagerCursor, bool) {
	res, ok := fpv.value.(*attestation_domain.PagerCursor)
	return res, ok
}
func (fpv *WatchAttestationDomainsResponsePageTokenChange_FieldTerminalPathValue) AsNextPageTokenValue() (*attestation_domain.PagerCursor, bool) {
	res, ok := fpv.value.(*attestation_domain.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object PageTokenChange
func (fpv *WatchAttestationDomainsResponsePageTokenChange_FieldTerminalPathValue) SetTo(target **WatchAttestationDomainsResponse_PageTokenChange) {
	if *target == nil {
		*target = new(WatchAttestationDomainsResponse_PageTokenChange)
	}
	switch fpv.selector {
	case WatchAttestationDomainsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*attestation_domain.PagerCursor)
	case WatchAttestationDomainsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*attestation_domain.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAttestationDomainsResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchAttestationDomainsResponsePageTokenChange_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchAttestationDomainsResponse_PageTokenChange)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchAttestationDomainsResponsePageTokenChange_FieldTerminalPathValue' with the value under path in 'WatchAttestationDomainsResponse_PageTokenChange'.
func (fpv *WatchAttestationDomainsResponsePageTokenChange_FieldTerminalPathValue) CompareWith(source *WatchAttestationDomainsResponse_PageTokenChange) (int, bool) {
	switch fpv.selector {
	case WatchAttestationDomainsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return 0, false
	case WatchAttestationDomainsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAttestationDomainsResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchAttestationDomainsResponsePageTokenChange_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchAttestationDomainsResponse_PageTokenChange))
}

// WatchAttestationDomainsResponsePageTokenChange_FieldPathArrayItemValue allows storing single item in Path-specific values for PageTokenChange according to their type
// Present only for array (repeated) types.
type WatchAttestationDomainsResponsePageTokenChange_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchAttestationDomainsResponsePageTokenChange_FieldPath
	ContainsValue(*WatchAttestationDomainsResponse_PageTokenChange) bool
}

// ParseWatchAttestationDomainsResponsePageTokenChange_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchAttestationDomainsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) (WatchAttestationDomainsResponsePageTokenChange_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchAttestationDomainsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchAttestationDomainsResponsePageTokenChange_FieldPathArrayItemValue), nil
}

func MustParseWatchAttestationDomainsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) WatchAttestationDomainsResponsePageTokenChange_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchAttestationDomainsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchAttestationDomainsResponsePageTokenChange_FieldTerminalPathArrayItemValue struct {
	WatchAttestationDomainsResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchAttestationDomainsResponsePageTokenChange_FieldPathArrayItemValue = (*WatchAttestationDomainsResponsePageTokenChange_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchAttestationDomainsResponse_PageTokenChange as interface{}
func (fpaiv *WatchAttestationDomainsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchAttestationDomainsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingle(source *WatchAttestationDomainsResponse_PageTokenChange) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchAttestationDomainsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchAttestationDomainsResponse_PageTokenChange))
}

// Contains returns a boolean indicating if value that is being held is present in given 'PageTokenChange'
func (fpaiv *WatchAttestationDomainsResponsePageTokenChange_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchAttestationDomainsResponse_PageTokenChange) bool {
	slice := fpaiv.WatchAttestationDomainsResponsePageTokenChange_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchAttestationDomainsResponsePageTokenChange_FieldPathArrayOfValues allows storing slice of values for PageTokenChange fields according to their type
type WatchAttestationDomainsResponsePageTokenChange_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchAttestationDomainsResponsePageTokenChange_FieldPath
}

func ParseWatchAttestationDomainsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchAttestationDomainsResponsePageTokenChange_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchAttestationDomainsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchAttestationDomainsResponsePageTokenChange_FieldPathArrayOfValues), nil
}

func MustParseWatchAttestationDomainsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) WatchAttestationDomainsResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov, err := ParseWatchAttestationDomainsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchAttestationDomainsResponsePageTokenChange_FieldTerminalPathArrayOfValues struct {
	WatchAttestationDomainsResponsePageTokenChange_FieldTerminalPath
	values interface{}
}

var _ WatchAttestationDomainsResponsePageTokenChange_FieldPathArrayOfValues = (*WatchAttestationDomainsResponsePageTokenChange_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchAttestationDomainsResponsePageTokenChange_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchAttestationDomainsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*attestation_domain.PagerCursor) {
			values = append(values, v)
		}
	case WatchAttestationDomainsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*attestation_domain.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchAttestationDomainsResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*attestation_domain.PagerCursor, bool) {
	res, ok := fpaov.values.([]*attestation_domain.PagerCursor)
	return res, ok
}
func (fpaov *WatchAttestationDomainsResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*attestation_domain.PagerCursor, bool) {
	res, ok := fpaov.values.([]*attestation_domain.PagerCursor)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type CreateAttestationDomainRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() CreateAttestationDomainRequest_FieldPathSelector
	Get(source *CreateAttestationDomainRequest) []interface{}
	GetSingle(source *CreateAttestationDomainRequest) (interface{}, bool)
	ClearValue(item *CreateAttestationDomainRequest)

	// Those methods build corresponding CreateAttestationDomainRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) CreateAttestationDomainRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) CreateAttestationDomainRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) CreateAttestationDomainRequest_FieldPathArrayItemValue
}

type CreateAttestationDomainRequest_FieldPathSelector int32

const (
	CreateAttestationDomainRequest_FieldPathSelectorParent            CreateAttestationDomainRequest_FieldPathSelector = 0
	CreateAttestationDomainRequest_FieldPathSelectorAttestationDomain CreateAttestationDomainRequest_FieldPathSelector = 1
)

func (s CreateAttestationDomainRequest_FieldPathSelector) String() string {
	switch s {
	case CreateAttestationDomainRequest_FieldPathSelectorParent:
		return "parent"
	case CreateAttestationDomainRequest_FieldPathSelectorAttestationDomain:
		return "attestation_domain"
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAttestationDomainRequest: %d", s))
	}
}

func BuildCreateAttestationDomainRequest_FieldPath(fp gotenobject.RawFieldPath) (CreateAttestationDomainRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object CreateAttestationDomainRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &CreateAttestationDomainRequest_FieldTerminalPath{selector: CreateAttestationDomainRequest_FieldPathSelectorParent}, nil
		case "attestation_domain", "attestationDomain", "attestation-domain":
			return &CreateAttestationDomainRequest_FieldTerminalPath{selector: CreateAttestationDomainRequest_FieldPathSelectorAttestationDomain}, nil
		}
	} else {
		switch fp[0] {
		case "attestation_domain", "attestationDomain", "attestation-domain":
			if subpath, err := attestation_domain.BuildAttestationDomain_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &CreateAttestationDomainRequest_FieldSubPath{selector: CreateAttestationDomainRequest_FieldPathSelectorAttestationDomain, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object CreateAttestationDomainRequest", fp)
}

func ParseCreateAttestationDomainRequest_FieldPath(rawField string) (CreateAttestationDomainRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildCreateAttestationDomainRequest_FieldPath(fp)
}

func MustParseCreateAttestationDomainRequest_FieldPath(rawField string) CreateAttestationDomainRequest_FieldPath {
	fp, err := ParseCreateAttestationDomainRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type CreateAttestationDomainRequest_FieldTerminalPath struct {
	selector CreateAttestationDomainRequest_FieldPathSelector
}

var _ CreateAttestationDomainRequest_FieldPath = (*CreateAttestationDomainRequest_FieldTerminalPath)(nil)

func (fp *CreateAttestationDomainRequest_FieldTerminalPath) Selector() CreateAttestationDomainRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *CreateAttestationDomainRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *CreateAttestationDomainRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source CreateAttestationDomainRequest
func (fp *CreateAttestationDomainRequest_FieldTerminalPath) Get(source *CreateAttestationDomainRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case CreateAttestationDomainRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case CreateAttestationDomainRequest_FieldPathSelectorAttestationDomain:
			if source.AttestationDomain != nil {
				values = append(values, source.AttestationDomain)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for CreateAttestationDomainRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *CreateAttestationDomainRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*CreateAttestationDomainRequest))
}

// GetSingle returns value pointed by specific field of from source CreateAttestationDomainRequest
func (fp *CreateAttestationDomainRequest_FieldTerminalPath) GetSingle(source *CreateAttestationDomainRequest) (interface{}, bool) {
	switch fp.selector {
	case CreateAttestationDomainRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case CreateAttestationDomainRequest_FieldPathSelectorAttestationDomain:
		res := source.GetAttestationDomain()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAttestationDomainRequest: %d", fp.selector))
	}
}

func (fp *CreateAttestationDomainRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*CreateAttestationDomainRequest))
}

// GetDefault returns a default value of the field type
func (fp *CreateAttestationDomainRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case CreateAttestationDomainRequest_FieldPathSelectorParent:
		return (*attestation_domain.ParentReference)(nil)
	case CreateAttestationDomainRequest_FieldPathSelectorAttestationDomain:
		return (*attestation_domain.AttestationDomain)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAttestationDomainRequest: %d", fp.selector))
	}
}

func (fp *CreateAttestationDomainRequest_FieldTerminalPath) ClearValue(item *CreateAttestationDomainRequest) {
	if item != nil {
		switch fp.selector {
		case CreateAttestationDomainRequest_FieldPathSelectorParent:
			item.Parent = nil
		case CreateAttestationDomainRequest_FieldPathSelectorAttestationDomain:
			item.AttestationDomain = nil
		default:
			panic(fmt.Sprintf("Invalid selector for CreateAttestationDomainRequest: %d", fp.selector))
		}
	}
}

func (fp *CreateAttestationDomainRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*CreateAttestationDomainRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *CreateAttestationDomainRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == CreateAttestationDomainRequest_FieldPathSelectorParent
}

func (fp *CreateAttestationDomainRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *CreateAttestationDomainRequest_FieldTerminalPath) WithIValue(value interface{}) CreateAttestationDomainRequest_FieldPathValue {
	switch fp.selector {
	case CreateAttestationDomainRequest_FieldPathSelectorParent:
		return &CreateAttestationDomainRequest_FieldTerminalPathValue{CreateAttestationDomainRequest_FieldTerminalPath: *fp, value: value.(*attestation_domain.ParentReference)}
	case CreateAttestationDomainRequest_FieldPathSelectorAttestationDomain:
		return &CreateAttestationDomainRequest_FieldTerminalPathValue{CreateAttestationDomainRequest_FieldTerminalPath: *fp, value: value.(*attestation_domain.AttestationDomain)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAttestationDomainRequest: %d", fp.selector))
	}
}

func (fp *CreateAttestationDomainRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *CreateAttestationDomainRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) CreateAttestationDomainRequest_FieldPathArrayOfValues {
	fpaov := &CreateAttestationDomainRequest_FieldTerminalPathArrayOfValues{CreateAttestationDomainRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case CreateAttestationDomainRequest_FieldPathSelectorParent:
		return &CreateAttestationDomainRequest_FieldTerminalPathArrayOfValues{CreateAttestationDomainRequest_FieldTerminalPath: *fp, values: values.([]*attestation_domain.ParentReference)}
	case CreateAttestationDomainRequest_FieldPathSelectorAttestationDomain:
		return &CreateAttestationDomainRequest_FieldTerminalPathArrayOfValues{CreateAttestationDomainRequest_FieldTerminalPath: *fp, values: values.([]*attestation_domain.AttestationDomain)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAttestationDomainRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *CreateAttestationDomainRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *CreateAttestationDomainRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) CreateAttestationDomainRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAttestationDomainRequest: %d", fp.selector))
	}
}

func (fp *CreateAttestationDomainRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type CreateAttestationDomainRequest_FieldSubPath struct {
	selector CreateAttestationDomainRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ CreateAttestationDomainRequest_FieldPath = (*CreateAttestationDomainRequest_FieldSubPath)(nil)

func (fps *CreateAttestationDomainRequest_FieldSubPath) Selector() CreateAttestationDomainRequest_FieldPathSelector {
	return fps.selector
}
func (fps *CreateAttestationDomainRequest_FieldSubPath) AsAttestationDomainSubPath() (attestation_domain.AttestationDomain_FieldPath, bool) {
	res, ok := fps.subPath.(attestation_domain.AttestationDomain_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *CreateAttestationDomainRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *CreateAttestationDomainRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source CreateAttestationDomainRequest
func (fps *CreateAttestationDomainRequest_FieldSubPath) Get(source *CreateAttestationDomainRequest) (values []interface{}) {
	if asAttestationDomainFieldPath, ok := fps.AsAttestationDomainSubPath(); ok {
		values = append(values, asAttestationDomainFieldPath.Get(source.GetAttestationDomain())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for CreateAttestationDomainRequest: %d", fps.selector))
	}
	return
}

func (fps *CreateAttestationDomainRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*CreateAttestationDomainRequest))
}

// GetSingle returns value of selected field from source CreateAttestationDomainRequest
func (fps *CreateAttestationDomainRequest_FieldSubPath) GetSingle(source *CreateAttestationDomainRequest) (interface{}, bool) {
	switch fps.selector {
	case CreateAttestationDomainRequest_FieldPathSelectorAttestationDomain:
		if source.GetAttestationDomain() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetAttestationDomain())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAttestationDomainRequest: %d", fps.selector))
	}
}

func (fps *CreateAttestationDomainRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*CreateAttestationDomainRequest))
}

// GetDefault returns a default value of the field type
func (fps *CreateAttestationDomainRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *CreateAttestationDomainRequest_FieldSubPath) ClearValue(item *CreateAttestationDomainRequest) {
	if item != nil {
		switch fps.selector {
		case CreateAttestationDomainRequest_FieldPathSelectorAttestationDomain:
			fps.subPath.ClearValueRaw(item.AttestationDomain)
		default:
			panic(fmt.Sprintf("Invalid selector for CreateAttestationDomainRequest: %d", fps.selector))
		}
	}
}

func (fps *CreateAttestationDomainRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*CreateAttestationDomainRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *CreateAttestationDomainRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *CreateAttestationDomainRequest_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&CreateAttestationDomainRequest_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *CreateAttestationDomainRequest_FieldSubPath) WithIValue(value interface{}) CreateAttestationDomainRequest_FieldPathValue {
	return &CreateAttestationDomainRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *CreateAttestationDomainRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *CreateAttestationDomainRequest_FieldSubPath) WithIArrayOfValues(values interface{}) CreateAttestationDomainRequest_FieldPathArrayOfValues {
	return &CreateAttestationDomainRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *CreateAttestationDomainRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *CreateAttestationDomainRequest_FieldSubPath) WithIArrayItemValue(value interface{}) CreateAttestationDomainRequest_FieldPathArrayItemValue {
	return &CreateAttestationDomainRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *CreateAttestationDomainRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// CreateAttestationDomainRequest_FieldPathValue allows storing values for CreateAttestationDomainRequest fields according to their type
type CreateAttestationDomainRequest_FieldPathValue interface {
	CreateAttestationDomainRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **CreateAttestationDomainRequest)
	CompareWith(*CreateAttestationDomainRequest) (cmp int, comparable bool)
}

func ParseCreateAttestationDomainRequest_FieldPathValue(pathStr, valueStr string) (CreateAttestationDomainRequest_FieldPathValue, error) {
	fp, err := ParseCreateAttestationDomainRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateAttestationDomainRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(CreateAttestationDomainRequest_FieldPathValue), nil
}

func MustParseCreateAttestationDomainRequest_FieldPathValue(pathStr, valueStr string) CreateAttestationDomainRequest_FieldPathValue {
	fpv, err := ParseCreateAttestationDomainRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type CreateAttestationDomainRequest_FieldTerminalPathValue struct {
	CreateAttestationDomainRequest_FieldTerminalPath
	value interface{}
}

var _ CreateAttestationDomainRequest_FieldPathValue = (*CreateAttestationDomainRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CreateAttestationDomainRequest' as interface{}
func (fpv *CreateAttestationDomainRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *CreateAttestationDomainRequest_FieldTerminalPathValue) AsParentValue() (*attestation_domain.ParentReference, bool) {
	res, ok := fpv.value.(*attestation_domain.ParentReference)
	return res, ok
}
func (fpv *CreateAttestationDomainRequest_FieldTerminalPathValue) AsAttestationDomainValue() (*attestation_domain.AttestationDomain, bool) {
	res, ok := fpv.value.(*attestation_domain.AttestationDomain)
	return res, ok
}

// SetTo stores value for selected field for object CreateAttestationDomainRequest
func (fpv *CreateAttestationDomainRequest_FieldTerminalPathValue) SetTo(target **CreateAttestationDomainRequest) {
	if *target == nil {
		*target = new(CreateAttestationDomainRequest)
	}
	switch fpv.selector {
	case CreateAttestationDomainRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*attestation_domain.ParentReference)
	case CreateAttestationDomainRequest_FieldPathSelectorAttestationDomain:
		(*target).AttestationDomain = fpv.value.(*attestation_domain.AttestationDomain)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAttestationDomainRequest: %d", fpv.selector))
	}
}

func (fpv *CreateAttestationDomainRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateAttestationDomainRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'CreateAttestationDomainRequest_FieldTerminalPathValue' with the value under path in 'CreateAttestationDomainRequest'.
func (fpv *CreateAttestationDomainRequest_FieldTerminalPathValue) CompareWith(source *CreateAttestationDomainRequest) (int, bool) {
	switch fpv.selector {
	case CreateAttestationDomainRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*attestation_domain.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case CreateAttestationDomainRequest_FieldPathSelectorAttestationDomain:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAttestationDomainRequest: %d", fpv.selector))
	}
}

func (fpv *CreateAttestationDomainRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*CreateAttestationDomainRequest))
}

type CreateAttestationDomainRequest_FieldSubPathValue struct {
	CreateAttestationDomainRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ CreateAttestationDomainRequest_FieldPathValue = (*CreateAttestationDomainRequest_FieldSubPathValue)(nil)

func (fpvs *CreateAttestationDomainRequest_FieldSubPathValue) AsAttestationDomainPathValue() (attestation_domain.AttestationDomain_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(attestation_domain.AttestationDomain_FieldPathValue)
	return res, ok
}

func (fpvs *CreateAttestationDomainRequest_FieldSubPathValue) SetTo(target **CreateAttestationDomainRequest) {
	if *target == nil {
		*target = new(CreateAttestationDomainRequest)
	}
	switch fpvs.Selector() {
	case CreateAttestationDomainRequest_FieldPathSelectorAttestationDomain:
		fpvs.subPathValue.(attestation_domain.AttestationDomain_FieldPathValue).SetTo(&(*target).AttestationDomain)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAttestationDomainRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateAttestationDomainRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateAttestationDomainRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *CreateAttestationDomainRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *CreateAttestationDomainRequest_FieldSubPathValue) CompareWith(source *CreateAttestationDomainRequest) (int, bool) {
	switch fpvs.Selector() {
	case CreateAttestationDomainRequest_FieldPathSelectorAttestationDomain:
		return fpvs.subPathValue.(attestation_domain.AttestationDomain_FieldPathValue).CompareWith(source.GetAttestationDomain())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAttestationDomainRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateAttestationDomainRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*CreateAttestationDomainRequest))
}

// CreateAttestationDomainRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for CreateAttestationDomainRequest according to their type
// Present only for array (repeated) types.
type CreateAttestationDomainRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	CreateAttestationDomainRequest_FieldPath
	ContainsValue(*CreateAttestationDomainRequest) bool
}

// ParseCreateAttestationDomainRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseCreateAttestationDomainRequest_FieldPathArrayItemValue(pathStr, valueStr string) (CreateAttestationDomainRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseCreateAttestationDomainRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateAttestationDomainRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(CreateAttestationDomainRequest_FieldPathArrayItemValue), nil
}

func MustParseCreateAttestationDomainRequest_FieldPathArrayItemValue(pathStr, valueStr string) CreateAttestationDomainRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseCreateAttestationDomainRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type CreateAttestationDomainRequest_FieldTerminalPathArrayItemValue struct {
	CreateAttestationDomainRequest_FieldTerminalPath
	value interface{}
}

var _ CreateAttestationDomainRequest_FieldPathArrayItemValue = (*CreateAttestationDomainRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object CreateAttestationDomainRequest as interface{}
func (fpaiv *CreateAttestationDomainRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *CreateAttestationDomainRequest_FieldTerminalPathArrayItemValue) GetSingle(source *CreateAttestationDomainRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *CreateAttestationDomainRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*CreateAttestationDomainRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateAttestationDomainRequest'
func (fpaiv *CreateAttestationDomainRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *CreateAttestationDomainRequest) bool {
	slice := fpaiv.CreateAttestationDomainRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type CreateAttestationDomainRequest_FieldSubPathArrayItemValue struct {
	CreateAttestationDomainRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *CreateAttestationDomainRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *CreateAttestationDomainRequest_FieldSubPathArrayItemValue) AsAttestationDomainPathItemValue() (attestation_domain.AttestationDomain_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(attestation_domain.AttestationDomain_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateAttestationDomainRequest'
func (fpaivs *CreateAttestationDomainRequest_FieldSubPathArrayItemValue) ContainsValue(source *CreateAttestationDomainRequest) bool {
	switch fpaivs.Selector() {
	case CreateAttestationDomainRequest_FieldPathSelectorAttestationDomain:
		return fpaivs.subPathItemValue.(attestation_domain.AttestationDomain_FieldPathArrayItemValue).ContainsValue(source.GetAttestationDomain())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAttestationDomainRequest: %d", fpaivs.Selector()))
	}
}

// CreateAttestationDomainRequest_FieldPathArrayOfValues allows storing slice of values for CreateAttestationDomainRequest fields according to their type
type CreateAttestationDomainRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	CreateAttestationDomainRequest_FieldPath
}

func ParseCreateAttestationDomainRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (CreateAttestationDomainRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseCreateAttestationDomainRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateAttestationDomainRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(CreateAttestationDomainRequest_FieldPathArrayOfValues), nil
}

func MustParseCreateAttestationDomainRequest_FieldPathArrayOfValues(pathStr, valuesStr string) CreateAttestationDomainRequest_FieldPathArrayOfValues {
	fpaov, err := ParseCreateAttestationDomainRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type CreateAttestationDomainRequest_FieldTerminalPathArrayOfValues struct {
	CreateAttestationDomainRequest_FieldTerminalPath
	values interface{}
}

var _ CreateAttestationDomainRequest_FieldPathArrayOfValues = (*CreateAttestationDomainRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *CreateAttestationDomainRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case CreateAttestationDomainRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*attestation_domain.ParentReference) {
			values = append(values, v)
		}
	case CreateAttestationDomainRequest_FieldPathSelectorAttestationDomain:
		for _, v := range fpaov.values.([]*attestation_domain.AttestationDomain) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *CreateAttestationDomainRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*attestation_domain.ParentReference, bool) {
	res, ok := fpaov.values.([]*attestation_domain.ParentReference)
	return res, ok
}
func (fpaov *CreateAttestationDomainRequest_FieldTerminalPathArrayOfValues) AsAttestationDomainArrayOfValues() ([]*attestation_domain.AttestationDomain, bool) {
	res, ok := fpaov.values.([]*attestation_domain.AttestationDomain)
	return res, ok
}

type CreateAttestationDomainRequest_FieldSubPathArrayOfValues struct {
	CreateAttestationDomainRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ CreateAttestationDomainRequest_FieldPathArrayOfValues = (*CreateAttestationDomainRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *CreateAttestationDomainRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *CreateAttestationDomainRequest_FieldSubPathArrayOfValues) AsAttestationDomainPathArrayOfValues() (attestation_domain.AttestationDomain_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(attestation_domain.AttestationDomain_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateAttestationDomainRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateAttestationDomainRequest_FieldPathSelector
	Get(source *UpdateAttestationDomainRequest) []interface{}
	GetSingle(source *UpdateAttestationDomainRequest) (interface{}, bool)
	ClearValue(item *UpdateAttestationDomainRequest)

	// Those methods build corresponding UpdateAttestationDomainRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateAttestationDomainRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateAttestationDomainRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateAttestationDomainRequest_FieldPathArrayItemValue
}

type UpdateAttestationDomainRequest_FieldPathSelector int32

const (
	UpdateAttestationDomainRequest_FieldPathSelectorAttestationDomain UpdateAttestationDomainRequest_FieldPathSelector = 0
	UpdateAttestationDomainRequest_FieldPathSelectorUpdateMask        UpdateAttestationDomainRequest_FieldPathSelector = 1
	UpdateAttestationDomainRequest_FieldPathSelectorCas               UpdateAttestationDomainRequest_FieldPathSelector = 2
)

func (s UpdateAttestationDomainRequest_FieldPathSelector) String() string {
	switch s {
	case UpdateAttestationDomainRequest_FieldPathSelectorAttestationDomain:
		return "attestation_domain"
	case UpdateAttestationDomainRequest_FieldPathSelectorUpdateMask:
		return "update_mask"
	case UpdateAttestationDomainRequest_FieldPathSelectorCas:
		return "cas"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAttestationDomainRequest: %d", s))
	}
}

func BuildUpdateAttestationDomainRequest_FieldPath(fp gotenobject.RawFieldPath) (UpdateAttestationDomainRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateAttestationDomainRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "attestation_domain", "attestationDomain", "attestation-domain":
			return &UpdateAttestationDomainRequest_FieldTerminalPath{selector: UpdateAttestationDomainRequest_FieldPathSelectorAttestationDomain}, nil
		case "update_mask", "updateMask", "update-mask":
			return &UpdateAttestationDomainRequest_FieldTerminalPath{selector: UpdateAttestationDomainRequest_FieldPathSelectorUpdateMask}, nil
		case "cas":
			return &UpdateAttestationDomainRequest_FieldTerminalPath{selector: UpdateAttestationDomainRequest_FieldPathSelectorCas}, nil
		}
	} else {
		switch fp[0] {
		case "attestation_domain", "attestationDomain", "attestation-domain":
			if subpath, err := attestation_domain.BuildAttestationDomain_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateAttestationDomainRequest_FieldSubPath{selector: UpdateAttestationDomainRequest_FieldPathSelectorAttestationDomain, subPath: subpath}, nil
			}
		case "cas":
			if subpath, err := BuildUpdateAttestationDomainRequestCAS_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateAttestationDomainRequest_FieldSubPath{selector: UpdateAttestationDomainRequest_FieldPathSelectorCas, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateAttestationDomainRequest", fp)
}

func ParseUpdateAttestationDomainRequest_FieldPath(rawField string) (UpdateAttestationDomainRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateAttestationDomainRequest_FieldPath(fp)
}

func MustParseUpdateAttestationDomainRequest_FieldPath(rawField string) UpdateAttestationDomainRequest_FieldPath {
	fp, err := ParseUpdateAttestationDomainRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateAttestationDomainRequest_FieldTerminalPath struct {
	selector UpdateAttestationDomainRequest_FieldPathSelector
}

var _ UpdateAttestationDomainRequest_FieldPath = (*UpdateAttestationDomainRequest_FieldTerminalPath)(nil)

func (fp *UpdateAttestationDomainRequest_FieldTerminalPath) Selector() UpdateAttestationDomainRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateAttestationDomainRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateAttestationDomainRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateAttestationDomainRequest
func (fp *UpdateAttestationDomainRequest_FieldTerminalPath) Get(source *UpdateAttestationDomainRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateAttestationDomainRequest_FieldPathSelectorAttestationDomain:
			if source.AttestationDomain != nil {
				values = append(values, source.AttestationDomain)
			}
		case UpdateAttestationDomainRequest_FieldPathSelectorUpdateMask:
			if source.UpdateMask != nil {
				values = append(values, source.UpdateMask)
			}
		case UpdateAttestationDomainRequest_FieldPathSelectorCas:
			if source.Cas != nil {
				values = append(values, source.Cas)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateAttestationDomainRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateAttestationDomainRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateAttestationDomainRequest))
}

// GetSingle returns value pointed by specific field of from source UpdateAttestationDomainRequest
func (fp *UpdateAttestationDomainRequest_FieldTerminalPath) GetSingle(source *UpdateAttestationDomainRequest) (interface{}, bool) {
	switch fp.selector {
	case UpdateAttestationDomainRequest_FieldPathSelectorAttestationDomain:
		res := source.GetAttestationDomain()
		return res, res != nil
	case UpdateAttestationDomainRequest_FieldPathSelectorUpdateMask:
		res := source.GetUpdateMask()
		return res, res != nil
	case UpdateAttestationDomainRequest_FieldPathSelectorCas:
		res := source.GetCas()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAttestationDomainRequest: %d", fp.selector))
	}
}

func (fp *UpdateAttestationDomainRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateAttestationDomainRequest))
}

// GetDefault returns a default value of the field type
func (fp *UpdateAttestationDomainRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateAttestationDomainRequest_FieldPathSelectorAttestationDomain:
		return (*attestation_domain.AttestationDomain)(nil)
	case UpdateAttestationDomainRequest_FieldPathSelectorUpdateMask:
		return (*attestation_domain.AttestationDomain_FieldMask)(nil)
	case UpdateAttestationDomainRequest_FieldPathSelectorCas:
		return (*UpdateAttestationDomainRequest_CAS)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAttestationDomainRequest: %d", fp.selector))
	}
}

func (fp *UpdateAttestationDomainRequest_FieldTerminalPath) ClearValue(item *UpdateAttestationDomainRequest) {
	if item != nil {
		switch fp.selector {
		case UpdateAttestationDomainRequest_FieldPathSelectorAttestationDomain:
			item.AttestationDomain = nil
		case UpdateAttestationDomainRequest_FieldPathSelectorUpdateMask:
			item.UpdateMask = nil
		case UpdateAttestationDomainRequest_FieldPathSelectorCas:
			item.Cas = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateAttestationDomainRequest: %d", fp.selector))
		}
	}
}

func (fp *UpdateAttestationDomainRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateAttestationDomainRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateAttestationDomainRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateAttestationDomainRequest_FieldPathSelectorUpdateMask
}

func (fp *UpdateAttestationDomainRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *UpdateAttestationDomainRequest_FieldTerminalPath) WithIValue(value interface{}) UpdateAttestationDomainRequest_FieldPathValue {
	switch fp.selector {
	case UpdateAttestationDomainRequest_FieldPathSelectorAttestationDomain:
		return &UpdateAttestationDomainRequest_FieldTerminalPathValue{UpdateAttestationDomainRequest_FieldTerminalPath: *fp, value: value.(*attestation_domain.AttestationDomain)}
	case UpdateAttestationDomainRequest_FieldPathSelectorUpdateMask:
		return &UpdateAttestationDomainRequest_FieldTerminalPathValue{UpdateAttestationDomainRequest_FieldTerminalPath: *fp, value: value.(*attestation_domain.AttestationDomain_FieldMask)}
	case UpdateAttestationDomainRequest_FieldPathSelectorCas:
		return &UpdateAttestationDomainRequest_FieldTerminalPathValue{UpdateAttestationDomainRequest_FieldTerminalPath: *fp, value: value.(*UpdateAttestationDomainRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAttestationDomainRequest: %d", fp.selector))
	}
}

func (fp *UpdateAttestationDomainRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateAttestationDomainRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateAttestationDomainRequest_FieldPathArrayOfValues {
	fpaov := &UpdateAttestationDomainRequest_FieldTerminalPathArrayOfValues{UpdateAttestationDomainRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateAttestationDomainRequest_FieldPathSelectorAttestationDomain:
		return &UpdateAttestationDomainRequest_FieldTerminalPathArrayOfValues{UpdateAttestationDomainRequest_FieldTerminalPath: *fp, values: values.([]*attestation_domain.AttestationDomain)}
	case UpdateAttestationDomainRequest_FieldPathSelectorUpdateMask:
		return &UpdateAttestationDomainRequest_FieldTerminalPathArrayOfValues{UpdateAttestationDomainRequest_FieldTerminalPath: *fp, values: values.([]*attestation_domain.AttestationDomain_FieldMask)}
	case UpdateAttestationDomainRequest_FieldPathSelectorCas:
		return &UpdateAttestationDomainRequest_FieldTerminalPathArrayOfValues{UpdateAttestationDomainRequest_FieldTerminalPath: *fp, values: values.([]*UpdateAttestationDomainRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAttestationDomainRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateAttestationDomainRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateAttestationDomainRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateAttestationDomainRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAttestationDomainRequest: %d", fp.selector))
	}
}

func (fp *UpdateAttestationDomainRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateAttestationDomainRequest_FieldSubPath struct {
	selector UpdateAttestationDomainRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateAttestationDomainRequest_FieldPath = (*UpdateAttestationDomainRequest_FieldSubPath)(nil)

func (fps *UpdateAttestationDomainRequest_FieldSubPath) Selector() UpdateAttestationDomainRequest_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateAttestationDomainRequest_FieldSubPath) AsAttestationDomainSubPath() (attestation_domain.AttestationDomain_FieldPath, bool) {
	res, ok := fps.subPath.(attestation_domain.AttestationDomain_FieldPath)
	return res, ok
}
func (fps *UpdateAttestationDomainRequest_FieldSubPath) AsCasSubPath() (UpdateAttestationDomainRequestCAS_FieldPath, bool) {
	res, ok := fps.subPath.(UpdateAttestationDomainRequestCAS_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateAttestationDomainRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateAttestationDomainRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateAttestationDomainRequest
func (fps *UpdateAttestationDomainRequest_FieldSubPath) Get(source *UpdateAttestationDomainRequest) (values []interface{}) {
	if asAttestationDomainFieldPath, ok := fps.AsAttestationDomainSubPath(); ok {
		values = append(values, asAttestationDomainFieldPath.Get(source.GetAttestationDomain())...)
	} else if asCASFieldPath, ok := fps.AsCasSubPath(); ok {
		values = append(values, asCASFieldPath.Get(source.GetCas())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for UpdateAttestationDomainRequest: %d", fps.selector))
	}
	return
}

func (fps *UpdateAttestationDomainRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateAttestationDomainRequest))
}

// GetSingle returns value of selected field from source UpdateAttestationDomainRequest
func (fps *UpdateAttestationDomainRequest_FieldSubPath) GetSingle(source *UpdateAttestationDomainRequest) (interface{}, bool) {
	switch fps.selector {
	case UpdateAttestationDomainRequest_FieldPathSelectorAttestationDomain:
		if source.GetAttestationDomain() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetAttestationDomain())
	case UpdateAttestationDomainRequest_FieldPathSelectorCas:
		if source.GetCas() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAttestationDomainRequest: %d", fps.selector))
	}
}

func (fps *UpdateAttestationDomainRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateAttestationDomainRequest))
}

// GetDefault returns a default value of the field type
func (fps *UpdateAttestationDomainRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateAttestationDomainRequest_FieldSubPath) ClearValue(item *UpdateAttestationDomainRequest) {
	if item != nil {
		switch fps.selector {
		case UpdateAttestationDomainRequest_FieldPathSelectorAttestationDomain:
			fps.subPath.ClearValueRaw(item.AttestationDomain)
		case UpdateAttestationDomainRequest_FieldPathSelectorCas:
			fps.subPath.ClearValueRaw(item.Cas)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateAttestationDomainRequest: %d", fps.selector))
		}
	}
}

func (fps *UpdateAttestationDomainRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateAttestationDomainRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateAttestationDomainRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateAttestationDomainRequest_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&UpdateAttestationDomainRequest_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *UpdateAttestationDomainRequest_FieldSubPath) WithIValue(value interface{}) UpdateAttestationDomainRequest_FieldPathValue {
	return &UpdateAttestationDomainRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateAttestationDomainRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateAttestationDomainRequest_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateAttestationDomainRequest_FieldPathArrayOfValues {
	return &UpdateAttestationDomainRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateAttestationDomainRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateAttestationDomainRequest_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateAttestationDomainRequest_FieldPathArrayItemValue {
	return &UpdateAttestationDomainRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateAttestationDomainRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateAttestationDomainRequest_FieldPathValue allows storing values for UpdateAttestationDomainRequest fields according to their type
type UpdateAttestationDomainRequest_FieldPathValue interface {
	UpdateAttestationDomainRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateAttestationDomainRequest)
	CompareWith(*UpdateAttestationDomainRequest) (cmp int, comparable bool)
}

func ParseUpdateAttestationDomainRequest_FieldPathValue(pathStr, valueStr string) (UpdateAttestationDomainRequest_FieldPathValue, error) {
	fp, err := ParseUpdateAttestationDomainRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateAttestationDomainRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateAttestationDomainRequest_FieldPathValue), nil
}

func MustParseUpdateAttestationDomainRequest_FieldPathValue(pathStr, valueStr string) UpdateAttestationDomainRequest_FieldPathValue {
	fpv, err := ParseUpdateAttestationDomainRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateAttestationDomainRequest_FieldTerminalPathValue struct {
	UpdateAttestationDomainRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateAttestationDomainRequest_FieldPathValue = (*UpdateAttestationDomainRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'UpdateAttestationDomainRequest' as interface{}
func (fpv *UpdateAttestationDomainRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateAttestationDomainRequest_FieldTerminalPathValue) AsAttestationDomainValue() (*attestation_domain.AttestationDomain, bool) {
	res, ok := fpv.value.(*attestation_domain.AttestationDomain)
	return res, ok
}
func (fpv *UpdateAttestationDomainRequest_FieldTerminalPathValue) AsUpdateMaskValue() (*attestation_domain.AttestationDomain_FieldMask, bool) {
	res, ok := fpv.value.(*attestation_domain.AttestationDomain_FieldMask)
	return res, ok
}
func (fpv *UpdateAttestationDomainRequest_FieldTerminalPathValue) AsCasValue() (*UpdateAttestationDomainRequest_CAS, bool) {
	res, ok := fpv.value.(*UpdateAttestationDomainRequest_CAS)
	return res, ok
}

// SetTo stores value for selected field for object UpdateAttestationDomainRequest
func (fpv *UpdateAttestationDomainRequest_FieldTerminalPathValue) SetTo(target **UpdateAttestationDomainRequest) {
	if *target == nil {
		*target = new(UpdateAttestationDomainRequest)
	}
	switch fpv.selector {
	case UpdateAttestationDomainRequest_FieldPathSelectorAttestationDomain:
		(*target).AttestationDomain = fpv.value.(*attestation_domain.AttestationDomain)
	case UpdateAttestationDomainRequest_FieldPathSelectorUpdateMask:
		(*target).UpdateMask = fpv.value.(*attestation_domain.AttestationDomain_FieldMask)
	case UpdateAttestationDomainRequest_FieldPathSelectorCas:
		(*target).Cas = fpv.value.(*UpdateAttestationDomainRequest_CAS)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAttestationDomainRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateAttestationDomainRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateAttestationDomainRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateAttestationDomainRequest_FieldTerminalPathValue' with the value under path in 'UpdateAttestationDomainRequest'.
func (fpv *UpdateAttestationDomainRequest_FieldTerminalPathValue) CompareWith(source *UpdateAttestationDomainRequest) (int, bool) {
	switch fpv.selector {
	case UpdateAttestationDomainRequest_FieldPathSelectorAttestationDomain:
		return 0, false
	case UpdateAttestationDomainRequest_FieldPathSelectorUpdateMask:
		return 0, false
	case UpdateAttestationDomainRequest_FieldPathSelectorCas:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAttestationDomainRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateAttestationDomainRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateAttestationDomainRequest))
}

type UpdateAttestationDomainRequest_FieldSubPathValue struct {
	UpdateAttestationDomainRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateAttestationDomainRequest_FieldPathValue = (*UpdateAttestationDomainRequest_FieldSubPathValue)(nil)

func (fpvs *UpdateAttestationDomainRequest_FieldSubPathValue) AsAttestationDomainPathValue() (attestation_domain.AttestationDomain_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(attestation_domain.AttestationDomain_FieldPathValue)
	return res, ok
}
func (fpvs *UpdateAttestationDomainRequest_FieldSubPathValue) AsCasPathValue() (UpdateAttestationDomainRequestCAS_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(UpdateAttestationDomainRequestCAS_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateAttestationDomainRequest_FieldSubPathValue) SetTo(target **UpdateAttestationDomainRequest) {
	if *target == nil {
		*target = new(UpdateAttestationDomainRequest)
	}
	switch fpvs.Selector() {
	case UpdateAttestationDomainRequest_FieldPathSelectorAttestationDomain:
		fpvs.subPathValue.(attestation_domain.AttestationDomain_FieldPathValue).SetTo(&(*target).AttestationDomain)
	case UpdateAttestationDomainRequest_FieldPathSelectorCas:
		fpvs.subPathValue.(UpdateAttestationDomainRequestCAS_FieldPathValue).SetTo(&(*target).Cas)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAttestationDomainRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateAttestationDomainRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateAttestationDomainRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateAttestationDomainRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateAttestationDomainRequest_FieldSubPathValue) CompareWith(source *UpdateAttestationDomainRequest) (int, bool) {
	switch fpvs.Selector() {
	case UpdateAttestationDomainRequest_FieldPathSelectorAttestationDomain:
		return fpvs.subPathValue.(attestation_domain.AttestationDomain_FieldPathValue).CompareWith(source.GetAttestationDomain())
	case UpdateAttestationDomainRequest_FieldPathSelectorCas:
		return fpvs.subPathValue.(UpdateAttestationDomainRequestCAS_FieldPathValue).CompareWith(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAttestationDomainRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateAttestationDomainRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateAttestationDomainRequest))
}

// UpdateAttestationDomainRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for UpdateAttestationDomainRequest according to their type
// Present only for array (repeated) types.
type UpdateAttestationDomainRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateAttestationDomainRequest_FieldPath
	ContainsValue(*UpdateAttestationDomainRequest) bool
}

// ParseUpdateAttestationDomainRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateAttestationDomainRequest_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateAttestationDomainRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateAttestationDomainRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateAttestationDomainRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateAttestationDomainRequest_FieldPathArrayItemValue), nil
}

func MustParseUpdateAttestationDomainRequest_FieldPathArrayItemValue(pathStr, valueStr string) UpdateAttestationDomainRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateAttestationDomainRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateAttestationDomainRequest_FieldTerminalPathArrayItemValue struct {
	UpdateAttestationDomainRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateAttestationDomainRequest_FieldPathArrayItemValue = (*UpdateAttestationDomainRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateAttestationDomainRequest as interface{}
func (fpaiv *UpdateAttestationDomainRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateAttestationDomainRequest_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateAttestationDomainRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateAttestationDomainRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateAttestationDomainRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateAttestationDomainRequest'
func (fpaiv *UpdateAttestationDomainRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateAttestationDomainRequest) bool {
	slice := fpaiv.UpdateAttestationDomainRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateAttestationDomainRequest_FieldSubPathArrayItemValue struct {
	UpdateAttestationDomainRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateAttestationDomainRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateAttestationDomainRequest_FieldSubPathArrayItemValue) AsAttestationDomainPathItemValue() (attestation_domain.AttestationDomain_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(attestation_domain.AttestationDomain_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *UpdateAttestationDomainRequest_FieldSubPathArrayItemValue) AsCasPathItemValue() (UpdateAttestationDomainRequestCAS_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(UpdateAttestationDomainRequestCAS_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateAttestationDomainRequest'
func (fpaivs *UpdateAttestationDomainRequest_FieldSubPathArrayItemValue) ContainsValue(source *UpdateAttestationDomainRequest) bool {
	switch fpaivs.Selector() {
	case UpdateAttestationDomainRequest_FieldPathSelectorAttestationDomain:
		return fpaivs.subPathItemValue.(attestation_domain.AttestationDomain_FieldPathArrayItemValue).ContainsValue(source.GetAttestationDomain())
	case UpdateAttestationDomainRequest_FieldPathSelectorCas:
		return fpaivs.subPathItemValue.(UpdateAttestationDomainRequestCAS_FieldPathArrayItemValue).ContainsValue(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAttestationDomainRequest: %d", fpaivs.Selector()))
	}
}

// UpdateAttestationDomainRequest_FieldPathArrayOfValues allows storing slice of values for UpdateAttestationDomainRequest fields according to their type
type UpdateAttestationDomainRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateAttestationDomainRequest_FieldPath
}

func ParseUpdateAttestationDomainRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateAttestationDomainRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateAttestationDomainRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateAttestationDomainRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateAttestationDomainRequest_FieldPathArrayOfValues), nil
}

func MustParseUpdateAttestationDomainRequest_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateAttestationDomainRequest_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateAttestationDomainRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateAttestationDomainRequest_FieldTerminalPathArrayOfValues struct {
	UpdateAttestationDomainRequest_FieldTerminalPath
	values interface{}
}

var _ UpdateAttestationDomainRequest_FieldPathArrayOfValues = (*UpdateAttestationDomainRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateAttestationDomainRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateAttestationDomainRequest_FieldPathSelectorAttestationDomain:
		for _, v := range fpaov.values.([]*attestation_domain.AttestationDomain) {
			values = append(values, v)
		}
	case UpdateAttestationDomainRequest_FieldPathSelectorUpdateMask:
		for _, v := range fpaov.values.([]*attestation_domain.AttestationDomain_FieldMask) {
			values = append(values, v)
		}
	case UpdateAttestationDomainRequest_FieldPathSelectorCas:
		for _, v := range fpaov.values.([]*UpdateAttestationDomainRequest_CAS) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateAttestationDomainRequest_FieldTerminalPathArrayOfValues) AsAttestationDomainArrayOfValues() ([]*attestation_domain.AttestationDomain, bool) {
	res, ok := fpaov.values.([]*attestation_domain.AttestationDomain)
	return res, ok
}
func (fpaov *UpdateAttestationDomainRequest_FieldTerminalPathArrayOfValues) AsUpdateMaskArrayOfValues() ([]*attestation_domain.AttestationDomain_FieldMask, bool) {
	res, ok := fpaov.values.([]*attestation_domain.AttestationDomain_FieldMask)
	return res, ok
}
func (fpaov *UpdateAttestationDomainRequest_FieldTerminalPathArrayOfValues) AsCasArrayOfValues() ([]*UpdateAttestationDomainRequest_CAS, bool) {
	res, ok := fpaov.values.([]*UpdateAttestationDomainRequest_CAS)
	return res, ok
}

type UpdateAttestationDomainRequest_FieldSubPathArrayOfValues struct {
	UpdateAttestationDomainRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateAttestationDomainRequest_FieldPathArrayOfValues = (*UpdateAttestationDomainRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateAttestationDomainRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateAttestationDomainRequest_FieldSubPathArrayOfValues) AsAttestationDomainPathArrayOfValues() (attestation_domain.AttestationDomain_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(attestation_domain.AttestationDomain_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *UpdateAttestationDomainRequest_FieldSubPathArrayOfValues) AsCasPathArrayOfValues() (UpdateAttestationDomainRequestCAS_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(UpdateAttestationDomainRequestCAS_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateAttestationDomainRequestCAS_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateAttestationDomainRequestCAS_FieldPathSelector
	Get(source *UpdateAttestationDomainRequest_CAS) []interface{}
	GetSingle(source *UpdateAttestationDomainRequest_CAS) (interface{}, bool)
	ClearValue(item *UpdateAttestationDomainRequest_CAS)

	// Those methods build corresponding UpdateAttestationDomainRequestCAS_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateAttestationDomainRequestCAS_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateAttestationDomainRequestCAS_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateAttestationDomainRequestCAS_FieldPathArrayItemValue
}

type UpdateAttestationDomainRequestCAS_FieldPathSelector int32

const (
	UpdateAttestationDomainRequestCAS_FieldPathSelectorConditionalState UpdateAttestationDomainRequestCAS_FieldPathSelector = 0
	UpdateAttestationDomainRequestCAS_FieldPathSelectorFieldMask        UpdateAttestationDomainRequestCAS_FieldPathSelector = 1
)

func (s UpdateAttestationDomainRequestCAS_FieldPathSelector) String() string {
	switch s {
	case UpdateAttestationDomainRequestCAS_FieldPathSelectorConditionalState:
		return "conditional_state"
	case UpdateAttestationDomainRequestCAS_FieldPathSelectorFieldMask:
		return "field_mask"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAttestationDomainRequest_CAS: %d", s))
	}
}

func BuildUpdateAttestationDomainRequestCAS_FieldPath(fp gotenobject.RawFieldPath) (UpdateAttestationDomainRequestCAS_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateAttestationDomainRequest_CAS")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			return &UpdateAttestationDomainRequestCAS_FieldTerminalPath{selector: UpdateAttestationDomainRequestCAS_FieldPathSelectorConditionalState}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &UpdateAttestationDomainRequestCAS_FieldTerminalPath{selector: UpdateAttestationDomainRequestCAS_FieldPathSelectorFieldMask}, nil
		}
	} else {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			if subpath, err := attestation_domain.BuildAttestationDomain_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateAttestationDomainRequestCAS_FieldSubPath{selector: UpdateAttestationDomainRequestCAS_FieldPathSelectorConditionalState, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateAttestationDomainRequest_CAS", fp)
}

func ParseUpdateAttestationDomainRequestCAS_FieldPath(rawField string) (UpdateAttestationDomainRequestCAS_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateAttestationDomainRequestCAS_FieldPath(fp)
}

func MustParseUpdateAttestationDomainRequestCAS_FieldPath(rawField string) UpdateAttestationDomainRequestCAS_FieldPath {
	fp, err := ParseUpdateAttestationDomainRequestCAS_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateAttestationDomainRequestCAS_FieldTerminalPath struct {
	selector UpdateAttestationDomainRequestCAS_FieldPathSelector
}

var _ UpdateAttestationDomainRequestCAS_FieldPath = (*UpdateAttestationDomainRequestCAS_FieldTerminalPath)(nil)

func (fp *UpdateAttestationDomainRequestCAS_FieldTerminalPath) Selector() UpdateAttestationDomainRequestCAS_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateAttestationDomainRequestCAS_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateAttestationDomainRequestCAS_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateAttestationDomainRequest_CAS
func (fp *UpdateAttestationDomainRequestCAS_FieldTerminalPath) Get(source *UpdateAttestationDomainRequest_CAS) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateAttestationDomainRequestCAS_FieldPathSelectorConditionalState:
			if source.ConditionalState != nil {
				values = append(values, source.ConditionalState)
			}
		case UpdateAttestationDomainRequestCAS_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateAttestationDomainRequest_CAS: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateAttestationDomainRequestCAS_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateAttestationDomainRequest_CAS))
}

// GetSingle returns value pointed by specific field of from source UpdateAttestationDomainRequest_CAS
func (fp *UpdateAttestationDomainRequestCAS_FieldTerminalPath) GetSingle(source *UpdateAttestationDomainRequest_CAS) (interface{}, bool) {
	switch fp.selector {
	case UpdateAttestationDomainRequestCAS_FieldPathSelectorConditionalState:
		res := source.GetConditionalState()
		return res, res != nil
	case UpdateAttestationDomainRequestCAS_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAttestationDomainRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateAttestationDomainRequestCAS_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateAttestationDomainRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fp *UpdateAttestationDomainRequestCAS_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateAttestationDomainRequestCAS_FieldPathSelectorConditionalState:
		return (*attestation_domain.AttestationDomain)(nil)
	case UpdateAttestationDomainRequestCAS_FieldPathSelectorFieldMask:
		return (*attestation_domain.AttestationDomain_FieldMask)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAttestationDomainRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateAttestationDomainRequestCAS_FieldTerminalPath) ClearValue(item *UpdateAttestationDomainRequest_CAS) {
	if item != nil {
		switch fp.selector {
		case UpdateAttestationDomainRequestCAS_FieldPathSelectorConditionalState:
			item.ConditionalState = nil
		case UpdateAttestationDomainRequestCAS_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateAttestationDomainRequest_CAS: %d", fp.selector))
		}
	}
}

func (fp *UpdateAttestationDomainRequestCAS_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateAttestationDomainRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateAttestationDomainRequestCAS_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateAttestationDomainRequestCAS_FieldPathSelectorFieldMask
}

func (fp *UpdateAttestationDomainRequestCAS_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *UpdateAttestationDomainRequestCAS_FieldTerminalPath) WithIValue(value interface{}) UpdateAttestationDomainRequestCAS_FieldPathValue {
	switch fp.selector {
	case UpdateAttestationDomainRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateAttestationDomainRequestCAS_FieldTerminalPathValue{UpdateAttestationDomainRequestCAS_FieldTerminalPath: *fp, value: value.(*attestation_domain.AttestationDomain)}
	case UpdateAttestationDomainRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateAttestationDomainRequestCAS_FieldTerminalPathValue{UpdateAttestationDomainRequestCAS_FieldTerminalPath: *fp, value: value.(*attestation_domain.AttestationDomain_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAttestationDomainRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateAttestationDomainRequestCAS_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateAttestationDomainRequestCAS_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateAttestationDomainRequestCAS_FieldPathArrayOfValues {
	fpaov := &UpdateAttestationDomainRequestCAS_FieldTerminalPathArrayOfValues{UpdateAttestationDomainRequestCAS_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateAttestationDomainRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateAttestationDomainRequestCAS_FieldTerminalPathArrayOfValues{UpdateAttestationDomainRequestCAS_FieldTerminalPath: *fp, values: values.([]*attestation_domain.AttestationDomain)}
	case UpdateAttestationDomainRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateAttestationDomainRequestCAS_FieldTerminalPathArrayOfValues{UpdateAttestationDomainRequestCAS_FieldTerminalPath: *fp, values: values.([]*attestation_domain.AttestationDomain_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAttestationDomainRequest_CAS: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateAttestationDomainRequestCAS_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateAttestationDomainRequestCAS_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateAttestationDomainRequestCAS_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAttestationDomainRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateAttestationDomainRequestCAS_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateAttestationDomainRequestCAS_FieldSubPath struct {
	selector UpdateAttestationDomainRequestCAS_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateAttestationDomainRequestCAS_FieldPath = (*UpdateAttestationDomainRequestCAS_FieldSubPath)(nil)

func (fps *UpdateAttestationDomainRequestCAS_FieldSubPath) Selector() UpdateAttestationDomainRequestCAS_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateAttestationDomainRequestCAS_FieldSubPath) AsConditionalStateSubPath() (attestation_domain.AttestationDomain_FieldPath, bool) {
	res, ok := fps.subPath.(attestation_domain.AttestationDomain_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateAttestationDomainRequestCAS_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateAttestationDomainRequestCAS_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateAttestationDomainRequest_CAS
func (fps *UpdateAttestationDomainRequestCAS_FieldSubPath) Get(source *UpdateAttestationDomainRequest_CAS) (values []interface{}) {
	if asAttestationDomainFieldPath, ok := fps.AsConditionalStateSubPath(); ok {
		values = append(values, asAttestationDomainFieldPath.Get(source.GetConditionalState())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for UpdateAttestationDomainRequest_CAS: %d", fps.selector))
	}
	return
}

func (fps *UpdateAttestationDomainRequestCAS_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateAttestationDomainRequest_CAS))
}

// GetSingle returns value of selected field from source UpdateAttestationDomainRequest_CAS
func (fps *UpdateAttestationDomainRequestCAS_FieldSubPath) GetSingle(source *UpdateAttestationDomainRequest_CAS) (interface{}, bool) {
	switch fps.selector {
	case UpdateAttestationDomainRequestCAS_FieldPathSelectorConditionalState:
		if source.GetConditionalState() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAttestationDomainRequest_CAS: %d", fps.selector))
	}
}

func (fps *UpdateAttestationDomainRequestCAS_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateAttestationDomainRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fps *UpdateAttestationDomainRequestCAS_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateAttestationDomainRequestCAS_FieldSubPath) ClearValue(item *UpdateAttestationDomainRequest_CAS) {
	if item != nil {
		switch fps.selector {
		case UpdateAttestationDomainRequestCAS_FieldPathSelectorConditionalState:
			fps.subPath.ClearValueRaw(item.ConditionalState)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateAttestationDomainRequest_CAS: %d", fps.selector))
		}
	}
}

func (fps *UpdateAttestationDomainRequestCAS_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateAttestationDomainRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateAttestationDomainRequestCAS_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateAttestationDomainRequestCAS_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&UpdateAttestationDomainRequestCAS_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *UpdateAttestationDomainRequestCAS_FieldSubPath) WithIValue(value interface{}) UpdateAttestationDomainRequestCAS_FieldPathValue {
	return &UpdateAttestationDomainRequestCAS_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateAttestationDomainRequestCAS_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateAttestationDomainRequestCAS_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateAttestationDomainRequestCAS_FieldPathArrayOfValues {
	return &UpdateAttestationDomainRequestCAS_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateAttestationDomainRequestCAS_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateAttestationDomainRequestCAS_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateAttestationDomainRequestCAS_FieldPathArrayItemValue {
	return &UpdateAttestationDomainRequestCAS_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateAttestationDomainRequestCAS_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateAttestationDomainRequestCAS_FieldPathValue allows storing values for CAS fields according to their type
type UpdateAttestationDomainRequestCAS_FieldPathValue interface {
	UpdateAttestationDomainRequestCAS_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateAttestationDomainRequest_CAS)
	CompareWith(*UpdateAttestationDomainRequest_CAS) (cmp int, comparable bool)
}

func ParseUpdateAttestationDomainRequestCAS_FieldPathValue(pathStr, valueStr string) (UpdateAttestationDomainRequestCAS_FieldPathValue, error) {
	fp, err := ParseUpdateAttestationDomainRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateAttestationDomainRequestCAS_FieldPathValue), nil
}

func MustParseUpdateAttestationDomainRequestCAS_FieldPathValue(pathStr, valueStr string) UpdateAttestationDomainRequestCAS_FieldPathValue {
	fpv, err := ParseUpdateAttestationDomainRequestCAS_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateAttestationDomainRequestCAS_FieldTerminalPathValue struct {
	UpdateAttestationDomainRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateAttestationDomainRequestCAS_FieldPathValue = (*UpdateAttestationDomainRequestCAS_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CAS' as interface{}
func (fpv *UpdateAttestationDomainRequestCAS_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateAttestationDomainRequestCAS_FieldTerminalPathValue) AsConditionalStateValue() (*attestation_domain.AttestationDomain, bool) {
	res, ok := fpv.value.(*attestation_domain.AttestationDomain)
	return res, ok
}
func (fpv *UpdateAttestationDomainRequestCAS_FieldTerminalPathValue) AsFieldMaskValue() (*attestation_domain.AttestationDomain_FieldMask, bool) {
	res, ok := fpv.value.(*attestation_domain.AttestationDomain_FieldMask)
	return res, ok
}

// SetTo stores value for selected field for object CAS
func (fpv *UpdateAttestationDomainRequestCAS_FieldTerminalPathValue) SetTo(target **UpdateAttestationDomainRequest_CAS) {
	if *target == nil {
		*target = new(UpdateAttestationDomainRequest_CAS)
	}
	switch fpv.selector {
	case UpdateAttestationDomainRequestCAS_FieldPathSelectorConditionalState:
		(*target).ConditionalState = fpv.value.(*attestation_domain.AttestationDomain)
	case UpdateAttestationDomainRequestCAS_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*attestation_domain.AttestationDomain_FieldMask)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAttestationDomainRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateAttestationDomainRequestCAS_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateAttestationDomainRequest_CAS)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateAttestationDomainRequestCAS_FieldTerminalPathValue' with the value under path in 'UpdateAttestationDomainRequest_CAS'.
func (fpv *UpdateAttestationDomainRequestCAS_FieldTerminalPathValue) CompareWith(source *UpdateAttestationDomainRequest_CAS) (int, bool) {
	switch fpv.selector {
	case UpdateAttestationDomainRequestCAS_FieldPathSelectorConditionalState:
		return 0, false
	case UpdateAttestationDomainRequestCAS_FieldPathSelectorFieldMask:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAttestationDomainRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateAttestationDomainRequestCAS_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateAttestationDomainRequest_CAS))
}

type UpdateAttestationDomainRequestCAS_FieldSubPathValue struct {
	UpdateAttestationDomainRequestCAS_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateAttestationDomainRequestCAS_FieldPathValue = (*UpdateAttestationDomainRequestCAS_FieldSubPathValue)(nil)

func (fpvs *UpdateAttestationDomainRequestCAS_FieldSubPathValue) AsConditionalStatePathValue() (attestation_domain.AttestationDomain_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(attestation_domain.AttestationDomain_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateAttestationDomainRequestCAS_FieldSubPathValue) SetTo(target **UpdateAttestationDomainRequest_CAS) {
	if *target == nil {
		*target = new(UpdateAttestationDomainRequest_CAS)
	}
	switch fpvs.Selector() {
	case UpdateAttestationDomainRequestCAS_FieldPathSelectorConditionalState:
		fpvs.subPathValue.(attestation_domain.AttestationDomain_FieldPathValue).SetTo(&(*target).ConditionalState)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAttestationDomainRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateAttestationDomainRequestCAS_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateAttestationDomainRequest_CAS)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateAttestationDomainRequestCAS_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateAttestationDomainRequestCAS_FieldSubPathValue) CompareWith(source *UpdateAttestationDomainRequest_CAS) (int, bool) {
	switch fpvs.Selector() {
	case UpdateAttestationDomainRequestCAS_FieldPathSelectorConditionalState:
		return fpvs.subPathValue.(attestation_domain.AttestationDomain_FieldPathValue).CompareWith(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAttestationDomainRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateAttestationDomainRequestCAS_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateAttestationDomainRequest_CAS))
}

// UpdateAttestationDomainRequestCAS_FieldPathArrayItemValue allows storing single item in Path-specific values for CAS according to their type
// Present only for array (repeated) types.
type UpdateAttestationDomainRequestCAS_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateAttestationDomainRequestCAS_FieldPath
	ContainsValue(*UpdateAttestationDomainRequest_CAS) bool
}

// ParseUpdateAttestationDomainRequestCAS_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateAttestationDomainRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateAttestationDomainRequestCAS_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateAttestationDomainRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateAttestationDomainRequestCAS_FieldPathArrayItemValue), nil
}

func MustParseUpdateAttestationDomainRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) UpdateAttestationDomainRequestCAS_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateAttestationDomainRequestCAS_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateAttestationDomainRequestCAS_FieldTerminalPathArrayItemValue struct {
	UpdateAttestationDomainRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateAttestationDomainRequestCAS_FieldPathArrayItemValue = (*UpdateAttestationDomainRequestCAS_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateAttestationDomainRequest_CAS as interface{}
func (fpaiv *UpdateAttestationDomainRequestCAS_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateAttestationDomainRequestCAS_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateAttestationDomainRequest_CAS) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateAttestationDomainRequestCAS_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateAttestationDomainRequest_CAS))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaiv *UpdateAttestationDomainRequestCAS_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateAttestationDomainRequest_CAS) bool {
	slice := fpaiv.UpdateAttestationDomainRequestCAS_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateAttestationDomainRequestCAS_FieldSubPathArrayItemValue struct {
	UpdateAttestationDomainRequestCAS_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateAttestationDomainRequestCAS_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateAttestationDomainRequestCAS_FieldSubPathArrayItemValue) AsConditionalStatePathItemValue() (attestation_domain.AttestationDomain_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(attestation_domain.AttestationDomain_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaivs *UpdateAttestationDomainRequestCAS_FieldSubPathArrayItemValue) ContainsValue(source *UpdateAttestationDomainRequest_CAS) bool {
	switch fpaivs.Selector() {
	case UpdateAttestationDomainRequestCAS_FieldPathSelectorConditionalState:
		return fpaivs.subPathItemValue.(attestation_domain.AttestationDomain_FieldPathArrayItemValue).ContainsValue(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAttestationDomainRequest_CAS: %d", fpaivs.Selector()))
	}
}

// UpdateAttestationDomainRequestCAS_FieldPathArrayOfValues allows storing slice of values for CAS fields according to their type
type UpdateAttestationDomainRequestCAS_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateAttestationDomainRequestCAS_FieldPath
}

func ParseUpdateAttestationDomainRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateAttestationDomainRequestCAS_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateAttestationDomainRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateAttestationDomainRequestCAS_FieldPathArrayOfValues), nil
}

func MustParseUpdateAttestationDomainRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateAttestationDomainRequestCAS_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateAttestationDomainRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateAttestationDomainRequestCAS_FieldTerminalPathArrayOfValues struct {
	UpdateAttestationDomainRequestCAS_FieldTerminalPath
	values interface{}
}

var _ UpdateAttestationDomainRequestCAS_FieldPathArrayOfValues = (*UpdateAttestationDomainRequestCAS_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateAttestationDomainRequestCAS_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateAttestationDomainRequestCAS_FieldPathSelectorConditionalState:
		for _, v := range fpaov.values.([]*attestation_domain.AttestationDomain) {
			values = append(values, v)
		}
	case UpdateAttestationDomainRequestCAS_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*attestation_domain.AttestationDomain_FieldMask) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateAttestationDomainRequestCAS_FieldTerminalPathArrayOfValues) AsConditionalStateArrayOfValues() ([]*attestation_domain.AttestationDomain, bool) {
	res, ok := fpaov.values.([]*attestation_domain.AttestationDomain)
	return res, ok
}
func (fpaov *UpdateAttestationDomainRequestCAS_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*attestation_domain.AttestationDomain_FieldMask, bool) {
	res, ok := fpaov.values.([]*attestation_domain.AttestationDomain_FieldMask)
	return res, ok
}

type UpdateAttestationDomainRequestCAS_FieldSubPathArrayOfValues struct {
	UpdateAttestationDomainRequestCAS_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateAttestationDomainRequestCAS_FieldPathArrayOfValues = (*UpdateAttestationDomainRequestCAS_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateAttestationDomainRequestCAS_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateAttestationDomainRequestCAS_FieldSubPathArrayOfValues) AsConditionalStatePathArrayOfValues() (attestation_domain.AttestationDomain_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(attestation_domain.AttestationDomain_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeleteAttestationDomainRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeleteAttestationDomainRequest_FieldPathSelector
	Get(source *DeleteAttestationDomainRequest) []interface{}
	GetSingle(source *DeleteAttestationDomainRequest) (interface{}, bool)
	ClearValue(item *DeleteAttestationDomainRequest)

	// Those methods build corresponding DeleteAttestationDomainRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeleteAttestationDomainRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) DeleteAttestationDomainRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeleteAttestationDomainRequest_FieldPathArrayItemValue
}

type DeleteAttestationDomainRequest_FieldPathSelector int32

const (
	DeleteAttestationDomainRequest_FieldPathSelectorName DeleteAttestationDomainRequest_FieldPathSelector = 0
)

func (s DeleteAttestationDomainRequest_FieldPathSelector) String() string {
	switch s {
	case DeleteAttestationDomainRequest_FieldPathSelectorName:
		return "name"
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteAttestationDomainRequest: %d", s))
	}
}

func BuildDeleteAttestationDomainRequest_FieldPath(fp gotenobject.RawFieldPath) (DeleteAttestationDomainRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object DeleteAttestationDomainRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &DeleteAttestationDomainRequest_FieldTerminalPath{selector: DeleteAttestationDomainRequest_FieldPathSelectorName}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object DeleteAttestationDomainRequest", fp)
}

func ParseDeleteAttestationDomainRequest_FieldPath(rawField string) (DeleteAttestationDomainRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeleteAttestationDomainRequest_FieldPath(fp)
}

func MustParseDeleteAttestationDomainRequest_FieldPath(rawField string) DeleteAttestationDomainRequest_FieldPath {
	fp, err := ParseDeleteAttestationDomainRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeleteAttestationDomainRequest_FieldTerminalPath struct {
	selector DeleteAttestationDomainRequest_FieldPathSelector
}

var _ DeleteAttestationDomainRequest_FieldPath = (*DeleteAttestationDomainRequest_FieldTerminalPath)(nil)

func (fp *DeleteAttestationDomainRequest_FieldTerminalPath) Selector() DeleteAttestationDomainRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeleteAttestationDomainRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeleteAttestationDomainRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source DeleteAttestationDomainRequest
func (fp *DeleteAttestationDomainRequest_FieldTerminalPath) Get(source *DeleteAttestationDomainRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeleteAttestationDomainRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteAttestationDomainRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *DeleteAttestationDomainRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*DeleteAttestationDomainRequest))
}

// GetSingle returns value pointed by specific field of from source DeleteAttestationDomainRequest
func (fp *DeleteAttestationDomainRequest_FieldTerminalPath) GetSingle(source *DeleteAttestationDomainRequest) (interface{}, bool) {
	switch fp.selector {
	case DeleteAttestationDomainRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteAttestationDomainRequest: %d", fp.selector))
	}
}

func (fp *DeleteAttestationDomainRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*DeleteAttestationDomainRequest))
}

// GetDefault returns a default value of the field type
func (fp *DeleteAttestationDomainRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeleteAttestationDomainRequest_FieldPathSelectorName:
		return (*attestation_domain.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteAttestationDomainRequest: %d", fp.selector))
	}
}

func (fp *DeleteAttestationDomainRequest_FieldTerminalPath) ClearValue(item *DeleteAttestationDomainRequest) {
	if item != nil {
		switch fp.selector {
		case DeleteAttestationDomainRequest_FieldPathSelectorName:
			item.Name = nil
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteAttestationDomainRequest: %d", fp.selector))
		}
	}
}

func (fp *DeleteAttestationDomainRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*DeleteAttestationDomainRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeleteAttestationDomainRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeleteAttestationDomainRequest_FieldPathSelectorName
}

func (fp *DeleteAttestationDomainRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *DeleteAttestationDomainRequest_FieldTerminalPath) WithIValue(value interface{}) DeleteAttestationDomainRequest_FieldPathValue {
	switch fp.selector {
	case DeleteAttestationDomainRequest_FieldPathSelectorName:
		return &DeleteAttestationDomainRequest_FieldTerminalPathValue{DeleteAttestationDomainRequest_FieldTerminalPath: *fp, value: value.(*attestation_domain.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteAttestationDomainRequest: %d", fp.selector))
	}
}

func (fp *DeleteAttestationDomainRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeleteAttestationDomainRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeleteAttestationDomainRequest_FieldPathArrayOfValues {
	fpaov := &DeleteAttestationDomainRequest_FieldTerminalPathArrayOfValues{DeleteAttestationDomainRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeleteAttestationDomainRequest_FieldPathSelectorName:
		return &DeleteAttestationDomainRequest_FieldTerminalPathArrayOfValues{DeleteAttestationDomainRequest_FieldTerminalPath: *fp, values: values.([]*attestation_domain.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteAttestationDomainRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeleteAttestationDomainRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeleteAttestationDomainRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeleteAttestationDomainRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteAttestationDomainRequest: %d", fp.selector))
	}
}

func (fp *DeleteAttestationDomainRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeleteAttestationDomainRequest_FieldPathValue allows storing values for DeleteAttestationDomainRequest fields according to their type
type DeleteAttestationDomainRequest_FieldPathValue interface {
	DeleteAttestationDomainRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **DeleteAttestationDomainRequest)
	CompareWith(*DeleteAttestationDomainRequest) (cmp int, comparable bool)
}

func ParseDeleteAttestationDomainRequest_FieldPathValue(pathStr, valueStr string) (DeleteAttestationDomainRequest_FieldPathValue, error) {
	fp, err := ParseDeleteAttestationDomainRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteAttestationDomainRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeleteAttestationDomainRequest_FieldPathValue), nil
}

func MustParseDeleteAttestationDomainRequest_FieldPathValue(pathStr, valueStr string) DeleteAttestationDomainRequest_FieldPathValue {
	fpv, err := ParseDeleteAttestationDomainRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeleteAttestationDomainRequest_FieldTerminalPathValue struct {
	DeleteAttestationDomainRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteAttestationDomainRequest_FieldPathValue = (*DeleteAttestationDomainRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'DeleteAttestationDomainRequest' as interface{}
func (fpv *DeleteAttestationDomainRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeleteAttestationDomainRequest_FieldTerminalPathValue) AsNameValue() (*attestation_domain.Reference, bool) {
	res, ok := fpv.value.(*attestation_domain.Reference)
	return res, ok
}

// SetTo stores value for selected field for object DeleteAttestationDomainRequest
func (fpv *DeleteAttestationDomainRequest_FieldTerminalPathValue) SetTo(target **DeleteAttestationDomainRequest) {
	if *target == nil {
		*target = new(DeleteAttestationDomainRequest)
	}
	switch fpv.selector {
	case DeleteAttestationDomainRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*attestation_domain.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteAttestationDomainRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteAttestationDomainRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*DeleteAttestationDomainRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeleteAttestationDomainRequest_FieldTerminalPathValue' with the value under path in 'DeleteAttestationDomainRequest'.
func (fpv *DeleteAttestationDomainRequest_FieldTerminalPathValue) CompareWith(source *DeleteAttestationDomainRequest) (int, bool) {
	switch fpv.selector {
	case DeleteAttestationDomainRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*attestation_domain.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteAttestationDomainRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteAttestationDomainRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*DeleteAttestationDomainRequest))
}

// DeleteAttestationDomainRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for DeleteAttestationDomainRequest according to their type
// Present only for array (repeated) types.
type DeleteAttestationDomainRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeleteAttestationDomainRequest_FieldPath
	ContainsValue(*DeleteAttestationDomainRequest) bool
}

// ParseDeleteAttestationDomainRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeleteAttestationDomainRequest_FieldPathArrayItemValue(pathStr, valueStr string) (DeleteAttestationDomainRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseDeleteAttestationDomainRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteAttestationDomainRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeleteAttestationDomainRequest_FieldPathArrayItemValue), nil
}

func MustParseDeleteAttestationDomainRequest_FieldPathArrayItemValue(pathStr, valueStr string) DeleteAttestationDomainRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseDeleteAttestationDomainRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeleteAttestationDomainRequest_FieldTerminalPathArrayItemValue struct {
	DeleteAttestationDomainRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteAttestationDomainRequest_FieldPathArrayItemValue = (*DeleteAttestationDomainRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object DeleteAttestationDomainRequest as interface{}
func (fpaiv *DeleteAttestationDomainRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeleteAttestationDomainRequest_FieldTerminalPathArrayItemValue) GetSingle(source *DeleteAttestationDomainRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeleteAttestationDomainRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*DeleteAttestationDomainRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'DeleteAttestationDomainRequest'
func (fpaiv *DeleteAttestationDomainRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *DeleteAttestationDomainRequest) bool {
	slice := fpaiv.DeleteAttestationDomainRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeleteAttestationDomainRequest_FieldPathArrayOfValues allows storing slice of values for DeleteAttestationDomainRequest fields according to their type
type DeleteAttestationDomainRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeleteAttestationDomainRequest_FieldPath
}

func ParseDeleteAttestationDomainRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (DeleteAttestationDomainRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseDeleteAttestationDomainRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteAttestationDomainRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeleteAttestationDomainRequest_FieldPathArrayOfValues), nil
}

func MustParseDeleteAttestationDomainRequest_FieldPathArrayOfValues(pathStr, valuesStr string) DeleteAttestationDomainRequest_FieldPathArrayOfValues {
	fpaov, err := ParseDeleteAttestationDomainRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeleteAttestationDomainRequest_FieldTerminalPathArrayOfValues struct {
	DeleteAttestationDomainRequest_FieldTerminalPath
	values interface{}
}

var _ DeleteAttestationDomainRequest_FieldPathArrayOfValues = (*DeleteAttestationDomainRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeleteAttestationDomainRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeleteAttestationDomainRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*attestation_domain.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeleteAttestationDomainRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*attestation_domain.Reference, bool) {
	res, ok := fpaov.values.([]*attestation_domain.Reference)
	return res, ok
}
